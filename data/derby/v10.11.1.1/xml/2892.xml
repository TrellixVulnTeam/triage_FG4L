<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2892/DERBY-2892.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2892] Closing a resultset after retrieving a large &gt; 32665 bytes value with Network Server does not release locks</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2892</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-255&lt;/a&gt;). The test attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; shows the locks being not released. Everything is fine when using Derby 10.1.3.1 .&lt;/p&gt;

&lt;p&gt;I would think it&apos;s a regression bug.&lt;/p&gt;


&lt;p&gt;Output from sysinfo:&lt;/p&gt;

&lt;p&gt;------------------ Java-Informationen ------------------&lt;br/&gt;
Java-Version: 1.6.0_01&lt;br/&gt;
Java-Anbieter: Sun Microsystems Inc.&lt;br/&gt;
Java-Home: C:\work\applications\development\java\jdk1.6u1-SE\jre&lt;br/&gt;
Java-Klassenpfad: C:\work\applications\development\derby-10.2.2.0/lib/derby.jar;C:\work\applications\development\derby-&lt;br/&gt;
0.2.2.0/lib/derbynet.jar;C:\work\applications\development\derby-10.2.2.0/lib/derbyclient.jar;C:\work\applications\devel&lt;br/&gt;
pment\derby-10.2.2.0/lib/derbytools.jar&lt;br/&gt;
Name des Betriebssystems: Windows XP&lt;br/&gt;
Architektur des Betriebssystems: x86&lt;br/&gt;
Betriebssystemversion: 5.1&lt;br/&gt;
Java-Benutzername: thomas.niessen&lt;br/&gt;
Java-Benutzerausgangsverzeichnis: C:\Dokumente und Einstellungen\thomas.niessen&lt;br/&gt;
Java-Benutzerverzeichnis: C:\work\applications\development\derby-10.2.2.0&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.6&lt;br/&gt;
--------- Derby-Informationen --------&lt;br/&gt;
JRE - JDBC: Java SE 6 - JDBC 4.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:\work\applications\development\derby-10.2.2.0\lib\derby.jar&amp;#93;&lt;/span&gt; 10.2.2.0 - (485682)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:\work\applications\development\derby-10.2.2.0\lib\derbytools.jar&amp;#93;&lt;/span&gt; 10.2.2.0 - (485682)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:\work\applications\development\derby-10.2.2.0\lib\derbynet.jar&amp;#93;&lt;/span&gt; 10.2.2.0 - (485682)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:\work\applications\development\derby-10.2.2.0\lib\derbyclient.jar&amp;#93;&lt;/span&gt; 10.2.2.0 - (485682)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Informationen zur L&#245;ndereinstellung -----------------&lt;br/&gt;
Aktuelle L&#245;ndereinstellung:  [Deutsch/Deutschland &lt;span class=&quot;error&quot;&gt;&amp;#91;de_DE&amp;#93;&lt;/span&gt;]&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;cs&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;de_DE&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;es&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;fr&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;hu&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;it&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;ja_JP&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;ko_KR&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;pl&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;pt_BR&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;ru&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;zh_CN&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;br/&gt;
Es wurde Unterst&#179;tzung f&#179;r die folgende L&#245;ndereinstellung gefunden: &lt;span class=&quot;error&quot;&gt;&amp;#91;zh_TW&amp;#93;&lt;/span&gt;&lt;br/&gt;
         Version: 10.2.2.0 - (485682)&lt;/p&gt;</description>
                <environment>JDK: build 1.6.0_01-b06 (WinXP &amp;amp; Gentoo/SuSE)&lt;br/&gt;
Hardware: Intel x86&lt;br/&gt;
Client/Server environment</environment>
        <key id="12372921">DERBY-2892</key>
            <summary>Closing a resultset after retrieving a large &gt; 32665 bytes value with Network Server does not release locks</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="tomes">Thomas Niessen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 Jul 2007 16:18:39 +0100</created>
                <updated>Thu, 2 May 2013 03:29:09 +0100</updated>
                            <resolved>Fri, 25 Apr 2008 16:46:51 +0100</resolved>
                                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>2</watches>
                                                                                                            <comments>
                            <comment id="12510530" author="kmarsden" created="Fri, 6 Jul 2007 01:01:37 +0100"  >&lt;p&gt;I verified that this is a regression in 10.2 and still exists in the trunk.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12510716" author="kmarsden" created="Fri, 6 Jul 2007 16:59:40 +0100"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; since this is a regression of that fix.&lt;/p&gt;</comment>
                            <comment id="12510721" author="kmarsden" created="Fri, 6 Jul 2007 17:13:33 +0100"  >&lt;p&gt;It looks like this regressed with the checkin of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt; (svn 405037).  This is when the lock timeout was reintroduced to the client canon for blobclob4blob&lt;br/&gt;
179014   kmarsden START: clobTest92&lt;br/&gt;
405037       tmnk FAIL &amp;#8211; unexpected exception ****************&lt;br/&gt;
405037       tmnk SQLSTATE(40XL1): A lock could not be obtained within the time requested&lt;/p&gt;


</comment>
                            <comment id="12510722" author="kmarsden" created="Fri, 6 Jul 2007 17:15:17 +0100"  >&lt;p&gt;Changing to critical since this is a regression that is likely to be hit by users.&lt;/p&gt;</comment>
                            <comment id="12510761" author="kmarsden" created="Fri, 6 Jul 2007 19:57:57 +0100"  >&lt;p&gt;Thomas, what JDBC API call are you using? I see the test clobTest92 is doing a getClob() which legitimately holds locks.  It is ResultSet.getCharacterStream(), ResultSet.getString(), ResultSet.getBinaryStream() and ResultSet.getBytes() that should not hold locks after the ResultSet is closed.  For some reason today when I run the repro for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt;,  I&apos;m not seeing the locks being held although I was sure I saw it yesterday so I am getting a bit confused.&lt;/p&gt;</comment>
                            <comment id="12510812" author="kmarsden" created="Fri, 6 Jul 2007 23:17:53 +0100"  >&lt;p&gt;I checked in a test jdbcapi/LargeDataLocksTest.java &lt;br/&gt;
Date: Fri Jul  6 15:11:12 2007&lt;br/&gt;
New Revision: 554073&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=554073&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=554073&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to add test coverage for ResultSet.getCharacterStream(), ResultSet.getString(), ResultSet.getBinaryStream() and ResultSet.getBytes()  with large values to make sure locks are not being held.  I am beginning to think that I may have panicked when seeing this regression filed. I can&apos;t seem to reproduce now.  Anyway I will leave this open until we hear from Thomas. Perhaps we can get a change to the new test that shows a regression or perhaps he is just using getBlob()/getClob() and locks are expected to stick around until the end of the transaction.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12510820" author="kmarsden" created="Fri, 6 Jul 2007 23:55:58 +0100"  >&lt;p&gt;Apparently I had an older server running on my machine.  I am now able to reproduce and the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; repro on 10.3 and the  LargeDataLocksTest fails on trunk.  I disabled this test for client until this bug is fixed.&lt;/p&gt;
</comment>
                            <comment id="12511086" author="oysteing" created="Mon, 9 Jul 2007 12:16:39 +0100"  >&lt;p&gt;Kathey&apos;s comment seems to imply that getClob should cause the CLOB data to be locked while getCharacterStream should not.  Is this behavior defined by the JDBC or SQL standards?  It does not seem obvious to me that a Clob object representing a CLOB in the database should have different stability requirements from an InputStream object on the same CLOB. &lt;/p&gt;</comment>
                            <comment id="12511211" author="kmarsden" created="Mon, 9 Jul 2007 19:11:00 +0100"  >&lt;p&gt;Clob and Blob explicitly state that they are valid for the duration of the transaction in which they are created.&lt;/p&gt;

&lt;p&gt;getBinaryStream says:&lt;br/&gt;
&quot;Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream&quot;,  implying that the stream is much shorter lived.&lt;/p&gt;

&lt;p&gt;getCharacterStream does not say one way or another, but I assume it is parallel with  getBinaryStream().&lt;/p&gt;

&lt;p&gt;Network server does not know the difference between what was called in JDBC, getBlob() vs getBinaryStream() vs getBytes()  for example.  Prior to the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;, Network Server would always call getBinaryStream() instead of getBlob and getCharacterStream() rather than getClob().  Since the lobs were materialized on the client we could still preserve the Blobs and Clobs until the end of the transaction.  I am not sure how this might be different now with the locator work and how changing back to getBinaryStream() getCharacterStream() calls would impact that.&lt;/p&gt;





</comment>
                            <comment id="12511246" author="kmarsden" created="Mon, 9 Jul 2007 21:21:02 +0100"  >&lt;p&gt;There seem to be additional complications in 10.3 vs 10.2.  In 10.3 the getString and getCharacterStream calls request a lob locator which does a getObject (getBlob/getClob())  &lt;/p&gt;

&lt;p&gt;As for a 10.2 fix I played with changing the Blob.getBinaryStream and Clob.getCharacterStream calls to ResultSet.getBinaryStream and ResultSet.getCharacterStream.  The trouble is that the current implementation makes these calls twice, which is not allowed. Once to see if the stream is empty and then again with this code in &lt;br/&gt;
EXTDTAInputStream:&lt;/p&gt;


&lt;p&gt;	    boolean exist = is.read() &amp;gt; -1;&lt;/p&gt;

&lt;p&gt;	    is.close();&lt;br/&gt;
	    is = null;&lt;/p&gt;

&lt;p&gt;	    if(exist)&lt;/p&gt;
{
		openInputStreamAgain(rs,column,ndrdaType);
	    }</comment>
                            <comment id="12511451" author="oysteing" created="Tue, 10 Jul 2007 15:00:56 +0100"  >&lt;p&gt;Kathey Marsden (JIRA) wrote:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Clob and Blob explicitly state that they are valid for the duration&lt;br/&gt;
&amp;gt; of the transaction in which they are created.&lt;/p&gt;

&lt;p&gt;While I have been aware of this, I have not interpreted this to mean&lt;br/&gt;
that the value could not change, just that it should be possible to&lt;br/&gt;
use it to access the underlying LOB column.  However, I think you&lt;br/&gt;
right that in the context of result sets one would expect the LOB&lt;br/&gt;
object to represent a LOB value, not a LOB column.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; getBinaryStream says:&lt;br/&gt;
&amp;gt; &quot;Note: All the data in the returned stream must be read prior to&lt;br/&gt;
&amp;gt; getting the value of any other column. The next call to a getter&lt;br/&gt;
&amp;gt; method implicitly closes the stream&quot;, implying that the stream is&lt;br/&gt;
&amp;gt; much shorter lived.&lt;/p&gt;

&lt;p&gt;Thank you for making you aware of this.  I guess I should have studied&lt;br/&gt;
the API doc better.  Is the &quot;implicitly closes&quot; part implemented by&lt;br/&gt;
Derby?  I can not remember to have seen any code for this.  &lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; getCharacterStream does not say one way or another, but I assume it&lt;br/&gt;
&amp;gt; is parallel with getBinaryStream().&lt;/p&gt;

&lt;p&gt;getAsciiStream says the same as getBinaryStream(). &lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; Network server does not know the difference between what was called&lt;br/&gt;
&amp;gt; in JDBC, getBlob() vs getBinaryStream() vs getBytes() for example.&lt;br/&gt;
&amp;gt; Prior to the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;, Network Server would always call&lt;br/&gt;
&amp;gt; getBinaryStream() instead of getBlob and getCharacterStream() rather&lt;br/&gt;
&amp;gt; than getClob().  Since the lobs were materialized on the client we&lt;br/&gt;
&amp;gt; could still preserve the Blobs and Clobs until the end of the&lt;br/&gt;
&amp;gt; transaction.  I am not sure how this might be different now with the&lt;br/&gt;
&amp;gt; locator work and how changing back to getBinaryStream()&lt;br/&gt;
&amp;gt; getCharacterStream() calls would impact that.&lt;/p&gt;

&lt;p&gt;With locators all operations in the network server are performed on&lt;br/&gt;
Blob/Clob objects.  For example, InputStream.read will map to&lt;br/&gt;
Blob.getBytes on the server.  Hence, I would assume that locks will be&lt;br/&gt;
held.  I have not checked, but this may now be true even for the&lt;br/&gt;
embedded driver.  I see two possible solutions to this problem:&lt;/p&gt;

&lt;p&gt;  1. Change how the locking is done.  Maybe one could provide away to&lt;br/&gt;
     release locks when they are no longer needed.&lt;br/&gt;
  2. Make a copy of the LOB value and allow concurrent updates.  In&lt;br/&gt;
     10.3 this is now possible since there is a mechanism for making&lt;br/&gt;
     temporary copies of LOBs.  In order for this to be efficient, we&lt;br/&gt;
     should only make a copy when necessary. Hence, a copy-on-write&lt;br/&gt;
     mechanism would be useful.&lt;/p&gt;

&lt;p&gt;Another thing: &lt;/p&gt;

&lt;p&gt;I noticed that in Ole&apos;s LOB compatibility testing for 10.3 that the&lt;br/&gt;
10.3 version of the BlobClob4BlobTest, a locking test failed when&lt;br/&gt;
running a 10.3 client with a 10.1 server (10.3 client with 10.2 server&lt;br/&gt;
went OK).  Does this mean that the test has been updated to accept&lt;br/&gt;
this faulty behavior?&lt;/p&gt;</comment>
                            <comment id="12511562" author="kmarsden" created="Tue, 10 Jul 2007 21:17:14 +0100"  >&lt;p&gt;rev 405037 updated the blobclob4BLOB test to accept the timeout. &lt;/p&gt;</comment>
                            <comment id="12511637" author="kmarsden" created="Wed, 11 Jul 2007 04:15:10 +0100"  >&lt;p&gt;I just thought I would give an update on my 10.2 work on this issue.  I tried switching EXTDTAInputStream to use ResultSet.getCharacterStream() and ResultSet.getBinaryStream.  Then instead of opening the stream again as was done with the Clob/Blob, I wrapped the binaryinputstream in a BufferedInputStream() so I could use mark() , read the first byte and then reset().  All of this worked for the repro for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; but has caused protocol errors in the blobclob4BLOB test.  Those I am still debugging. If anyone is interested in looking at the patch so far, I can attach it, otherwise I will just continue to work on it.&lt;/p&gt;</comment>
                            <comment id="12511916" author="kmarsden" created="Thu, 12 Jul 2007 01:47:54 +0100"  >&lt;p&gt;I am attaching a patch C:/kmarsden/patches/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2892&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2892&quot;&gt;&lt;del&gt;DERBY-2892&lt;/del&gt;&lt;/a&gt;_07_10_07_try1_diff.txt. THIS PATCH IS NOT FOR COMMIT.  It is my attempt so far to fix this issue in 10.2.  It does indeed resolve the problem with the locks, The new test jdbcapi/LargeDataLocks.java verifies the new locking behaviour, but causes a serious protocol error in some instances retrieving LOB values.    I have been staring at it for a long time and can&apos;t figure out what is wrong, so am hoping Bryan or other protocol expert can take a quick look and see perhaps something I have not thus far.&lt;/p&gt;


&lt;p&gt;I will attach the repro for the protocol error. Simply reversing the column order in the repro eliminates the error and comparing the old and new traces I don&apos;t see what could be causing the client to think it has hit the end of stream.  See the repro for more details and my previous comment for information on how the change was implemented.&lt;/p&gt;</comment>
                            <comment id="12511918" author="kmarsden" created="Thu, 12 Jul 2007 01:56:05 +0100"  >&lt;p&gt;here is the java program and database to reproduce the protocol error. It is an exception from the client that it has reached eof, but debugging the server, I see that the server is queueing up the EXTDTA to send, but does not send it because the client disconnects.  Why the client disconnects and thinks it is at the end of data stream I cannot figure out.&lt;/p&gt;

&lt;p&gt;Note: If you run this twice in a row the second time you will get a protocol error on the connection.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-2892&amp;#93;&lt;/span&gt; java TestDERBY2892&lt;br/&gt;
java.sql.SQLException: Insufficient data while reading from the network - expected a minimum of 6 bytes and received onl&lt;br/&gt;
y -1 bytes.  The connection has been terminated.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:346)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.next(ResultSet.java:278)&lt;br/&gt;
        at TestDERBY2892.clobTest0(TestDERBY2892.java:37)&lt;br/&gt;
        at TestDERBY2892.main(TestDERBY2892.java:17)&lt;br/&gt;
Caused by: org.apache.derby.client.am.DisconnectException: Insufficient data while reading from the network - expected a&lt;br/&gt;
 minimum of 6 bytes and received only -1 bytes.  The connection has been terminated.&lt;br/&gt;
        at org.apache.derby.client.net.Reply.fill(Reply.java:195)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java:215)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.peekCodePoint(Reply.java:1008)&lt;br/&gt;
        at org.apache.derby.client.net.NetResultSetReply.parseCNTQRYreply(NetResultSetReply.java:133)&lt;br/&gt;
        at org.apache.derby.client.net.NetResultSetReply.readFetch(NetResultSetReply.java:42)&lt;br/&gt;
        at org.apache.derby.client.net.ResultSetReply.readFetch(ResultSetReply.java:41)&lt;br/&gt;
        at org.apache.derby.client.net.NetResultSet.readFetch_(NetResultSet.java:206)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.flowFetch(ResultSet.java:4138)&lt;br/&gt;
        at org.apache.derby.client.net.NetCursor.getMoreData_(NetCursor.java:1183)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.stepNext(Cursor.java:176)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.next(Cursor.java:195)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.nextX(ResultSet.java:299)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.next(ResultSet.java:269)&lt;br/&gt;
        ... 2 more&lt;/p&gt;</comment>
                            <comment id="12511923" author="bryanpendleton" created="Thu, 12 Jul 2007 02:37:45 +0100"  >&lt;p&gt;Hi Kathey, nothing immediately comes to mind, unfortunately.&lt;/p&gt;

&lt;p&gt;Did you run the program with the DRDA protocol tracing (&lt;a href=&quot;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&lt;/a&gt;), and if so can you post the client and server traces?&lt;/p&gt;

&lt;p&gt;Also, can you briefly outline what the test program does? Does it read the entire LOB data from the first row before advancing to the next row? Or does it advance to the next row while there still remains unread LOB data from the previous row?&lt;/p&gt;</comment>
                            <comment id="12511929" author="bryanpendleton" created="Thu, 12 Jul 2007 03:00:40 +0100"  >&lt;p&gt;&amp;gt; Simply reversing the column order in the repro eliminates the error&lt;/p&gt;

&lt;p&gt;This is eerily familiar; it seems to me that we hit this same behavior in 10.3 during the locator development, but I don&apos;t remember anything more than that.&lt;/p&gt;</comment>
                            <comment id="12511945" author="bryanpendleton" created="Thu, 12 Jul 2007 03:42:45 +0100"  >&lt;p&gt;I see that there are two server DRDA trace files in the zip archive.&lt;/p&gt;</comment>
                            <comment id="12512111" author="bryanpendleton" created="Thu, 12 Jul 2007 15:39:00 +0100"  >&lt;p&gt;Is there any evidence that you might be getting an exception on the server side just before the unexpected connection close? I&apos;ve seen code paths where a thrown exception causes the connection to be closed, and the symptoms are sometimes not so clear, pointing more at the closed connection than at the underlying exception which caused the close.&lt;/p&gt;</comment>
                            <comment id="12512174" author="kmarsden" created="Thu, 12 Jul 2007 17:50:53 +0100"  >&lt;p&gt;&amp;gt;Is there any evidence that you might be getting an exception on the server side just before the unexpected connection close? &lt;/p&gt;

&lt;p&gt;No, the server does not throw an exception until it detects that the client is disconnected, when it is getting ready to flush the lob data.&lt;/p&gt;

&lt;p&gt;&amp;gt;I see that there are two server DRDA trace files in the zip archive.&lt;br/&gt;
Server1.trace.old is the trace with the unchanged server.&lt;br/&gt;
Server1.trace.new is the trace with my changes.&lt;br/&gt;
There is no difference in the traces that I can detect up until the point the client disconnects.&lt;/p&gt;

&lt;p&gt;&amp;gt;can you briefly outline what the test program does? Does it read the entire LOB data from the first row before advancing to the next row? Or does it advance to the next row while there still remains unread LOB data from the previous row?&lt;/p&gt;

&lt;p&gt;It reads the entire lob. for each row before advancing.  You can also reproduce with ij even by just retrieving the one offensive row.&lt;br/&gt;
ij&amp;gt;  connect &apos;jdbc:derby://localhost:1527/wombat&apos;;&lt;br/&gt;
ij(CONNECTION1)&amp;gt; select a, b from testCLOB_MAIN where b = 10000;&lt;br/&gt;
A&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;B&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
--------------------&lt;br/&gt;
ERROR 58009: Insufficient data while reading from the network - expected a minimum of 6 bytes and received only -1 bytes&lt;br/&gt;
.  The connection has been terminated.&lt;br/&gt;
ij(CONNECTION1)&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="12512215" author="bryanpendleton" created="Thu, 12 Jul 2007 19:55:26 +0100"  >&lt;p&gt;Hi Kathey! Just to be clear, to reproduce your results, I should:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;build a 10.2 server which contains your patch to the DRDA code&lt;/li&gt;
	&lt;li&gt;start up this 10.2 server against the database that&apos;s in your zip file&lt;/li&gt;
	&lt;li&gt;use a 10.2 client to run the test Java program that&apos;s in your zip file&lt;/li&gt;
	&lt;li&gt;run the test Java program a second time&lt;br/&gt;
Is that the right instructions?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12512217" author="kmarsden" created="Thu, 12 Jul 2007 20:01:30 +0100"  >
&lt;p&gt;That is right Bryan except  running the test java program one time will reproduce the problem.  Running it a second time will produce a different error on connection which is a residual issue I think because there is risidual data in the buffer.  I don&apos;t think that we need to worry about that error if we fix the first one.  Running the java program a third time will reproduce the &lt;br/&gt;
insufficient data message again.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12512261" author="bryanpendleton" created="Thu, 12 Jul 2007 22:12:25 +0100"  >&lt;p&gt;Hi Kathey. I can definitely reproduce the problem you&apos;re seeing.&lt;/p&gt;

&lt;p&gt;Given that the problem occurs with the patched EXTDTAInputStream, and does not occur with the stock 10.2 EXTDTAInputStream, it seems like it&apos;s worth studying those EXTDTAInputStream changes in depth to see how they might relate to this problem.&lt;/p&gt;

&lt;p&gt;I&apos;ve been trying to understand this by building the code with and without the EXTDTAInputStream changes, and running the test case, trying to understand how the server&apos;s behavior changes with those changes.&lt;/p&gt;

&lt;p&gt;So far, nothing of significance to report, though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12512285" author="kmarsden" created="Thu, 12 Jul 2007 23:18:46 +0100"  >&lt;p&gt;Bryan asked:&lt;br/&gt;
&amp;gt;Is there any evidence that you might be getting an exception on the server side just before the unexpected connection close?&lt;/p&gt;

&lt;p&gt;Stepping through this more carefully, I am seeing an IOException occurring in writeScalarStream() which is causing the disconnection.  Not sure why it is occurring, but it seems that we could benefit from better logging when such an exception occurs.&lt;/p&gt;

&lt;p&gt;Below is the trace of the server side I/O Exception.  There is no message.&lt;br/&gt;
null&lt;br/&gt;
java.io.IOException&lt;br/&gt;
	at org.apache.derby.impl.jdbc.UTF8Reader.read(UTF8Reader.java:97)&lt;br/&gt;
	at org.apache.derby.impl.drda.ReEncodedInputStream.reEncode(ReEncodedInputStream.java:78)&lt;br/&gt;
	at org.apache.derby.impl.drda.ReEncodedInputStream.read(ReEncodedInputStream.java:143)&lt;br/&gt;
	at java.io.InputStream.read(InputStream.java:187)&lt;br/&gt;
	at java.io.BufferedInputStream.fill(BufferedInputStream.java:229)&lt;br/&gt;
	at java.io.BufferedInputStream.read(BufferedInputStream.java:246)&lt;br/&gt;
	at org.apache.derby.impl.drda.EXTDTAInputStream.read(EXTDTAInputStream.java:118)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMWriter.peekStream(DDMWriter.java:1969)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMWriter.writeScalarStream(DDMWriter.java:719)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.writeEXTDTA(DRDAConnThread.java:7806)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.writeQRYDTA(DRDAConnThread.java:6351)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:677)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:273)&lt;/p&gt;</comment>
                            <comment id="12512305" author="bryanpendleton" created="Fri, 13 Jul 2007 00:15:49 +0100"  >&lt;p&gt;Line 97 of UTF8Reader.java is this:&lt;/p&gt;

&lt;p&gt;        public int read(char[] cbuf, int off, int len) throws IOException&lt;br/&gt;
        {&lt;br/&gt;
                synchronized (lock) {&lt;br/&gt;
                        // check if closed..&lt;br/&gt;
                        if (noMoreReads)&lt;br/&gt;
                                throw new IOException();                   &amp;lt;============ This is line 97&lt;/p&gt;

&lt;p&gt;So it would seem that it is complaining about an attempt to read a stream which is already closed?&lt;/p&gt;</comment>
                            <comment id="12512329" author="bryanpendleton" created="Fri, 13 Jul 2007 02:20:07 +0100"  >&lt;p&gt;My first attempt to set a breakpoint on line 97 of UTF8Reader was not successful. I&apos;ll keep trying.&lt;/p&gt;</comment>
                            <comment id="12512331" author="bryanpendleton" created="Fri, 13 Jul 2007 02:23:37 +0100"  >&lt;p&gt;By &quot;not successful&quot;, I mean that I didn&apos;t hit the breakpoint.&lt;/p&gt;</comment>
                            <comment id="12512334" author="bryanpendleton" created="Fri, 13 Jul 2007 02:33:54 +0100"  >&lt;p&gt;Putting aside this specific test case for a minute, if you apply your patch to EXTDTAInputStream, do all the rest of the 10.2 regression tests pass successfully?&lt;/p&gt;</comment>
                            <comment id="12512336" author="kmarsden" created="Fri, 13 Jul 2007 02:56:41 +0100"  >&lt;p&gt;Thanks so much Bryan for your help.&lt;br/&gt;
Well, I think I know what the problem is.  It comes straight from the getBinaryStream javadoc and I assume getCharacterStream works the same way.&lt;/p&gt;

&lt;p&gt;Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return 0 when the method InputStream.available  is called whether there is data available or not.&lt;/p&gt;

&lt;p&gt;Since we are doing the getInt() after the getCharacterStream(),  it closes the stream.  So, my patch is no good.  In order to use ResultSet.getCharacterStream, ResultSet.getBinaryStream() I am going to have to defer opening the stream until it is ready to send.  I&apos;ll see if that is possible.  I think it should be because we don&apos;t need to know if the stream is empty until that time. &lt;/p&gt;
</comment>
                            <comment id="12512339" author="bryanpendleton" created="Fri, 13 Jul 2007 03:11:22 +0100"  >&lt;p&gt;&amp;gt;Since we are doing the getInt() after the getCharacterStream(), it closes the stream.&lt;/p&gt;

&lt;p&gt;Thanks Kathey, that makes perfect sense. Good work on figuring this out!&lt;/p&gt;</comment>
                            <comment id="12512479" author="kmarsden" created="Fri, 13 Jul 2007 14:29:55 +0100"  >&lt;p&gt;Well deferring the opening of the stream until it is time to write the EXTDTA will not work because we need to know whether the value is null when we send the QRYDTA.  So I guess its back to the drawing board.  I don&apos;t have any good ideas for a fix at this point.  The 10.1 solution was to read the whole lob into memory.  I don&apos;t think we want to return to that for 10.2. Oystein had mentioned the possibility of changing the locking behavior as a solution, but I am way out of my league in that area so won&apos;t pursue that for 10.2.  Hopefully if it is changed for 10.3, we can backport the fix.&lt;/p&gt;

&lt;p&gt;Oystein mentioned two possibilities for 10.3&lt;/p&gt;

&lt;p&gt;  1. Change how the locking is done. Maybe one could provide away to&lt;br/&gt;
     release locks when they are no longer needed.&lt;/p&gt;

&lt;p&gt;By this do you mean to release the locks when the LOB is no longer referenced?  That sounds  good, but may still cause issues if the garbage collector has not kicked in, but perhaps would be suitable for backport to 10.2&lt;/p&gt;


&lt;p&gt;  2. Make a copy of the LOB value and allow concurrent updates. In&lt;br/&gt;
     10.3 this is now possible since there is a mechanism for making&lt;br/&gt;
     temporary copies of LOBs. In order for this to be efficient, we&lt;br/&gt;
     should only make a copy when necessary. Hence, a copy-on-write&lt;br/&gt;
     mechanism would be useful.&lt;/p&gt;

&lt;p&gt;This sounds ok too but does not offer any solution for 10.2, so I guess I would prefer 1.&lt;/p&gt;</comment>
                            <comment id="12512532" author="kmarsden" created="Fri, 13 Jul 2007 17:38:48 +0100"  >&lt;p&gt;I checked in the test case jdbcapi/LargeDataLocks to 10.2. It should be uncommented in the jdbcapi suite once this bug is fixed in 10.2.  The test on the trunk is the junit test jdbcapi/LargeDataLocksTest, also disabled.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12512607" author="kmarsden" created="Fri, 13 Jul 2007 21:21:49 +0100"  >&lt;p&gt;Attached is a new 10.2 patch for this issue.  &lt;br/&gt;
I figured out how to determine if the value is null or empty before retrieving the stream.  What I did was enhance the EngineResultSet interface to have a isNull(int columnIndex) and a getLength(int columnIndex) method that can be called before getBinaryStream() or getCharacterStream() is called. This eliminates the need to read a byte of the stream to see if it is empty or not.&lt;/p&gt;

&lt;p&gt;I would like to know if this is a reasonable approach and would appreciate review of the patch.   I ran derbynetclientmats and the LargeDataLocks test with the patch and am running derbyall now.&lt;/p&gt;
</comment>
                            <comment id="12512673" author="naka" created="Sat, 14 Jul 2007 04:54:36 +0100"  >&lt;p&gt;Thank you for working this issue ....&lt;/p&gt;

&lt;p&gt;I remember information about blobclob4blob in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt; which may be a support.&lt;/p&gt;

&lt;p&gt;Before the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;, the result of clobTest92 was different between Embedded and NetworkServer/NetworkCient.&lt;br/&gt;
After &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;, the results of clobTest92  are same between Embedded and NetworkServer/NetworkCient.&lt;/p&gt;

&lt;p&gt;Related file for 10.2 branch is below.&lt;/p&gt;

&lt;p&gt;Embedded :&lt;br/&gt;
&lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NetworkServer/NetworkClient  :&lt;br/&gt;
&lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12512964" author="kmarsden" created="Mon, 16 Jul 2007 16:31:49 +0100"  >&lt;p&gt;Thanks Tomohito for looking at this issue. I think that with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; I did not submit sufficient testing for the getString(), getCharacterStream(), getBytes(), getBinaryStream() cases where locks should not be held.  This has hopefully been rectified with the addition of the LargeDataLocks test.  I attached a patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2941&quot; title=&quot;With 10.2, Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2941&quot;&gt;&lt;del&gt;DERBY-2941&lt;/del&gt;&lt;/a&gt; to fix the issue and enable that test.&lt;/p&gt;


</comment>
                            <comment id="12513340" author="kmarsden" created="Tue, 17 Jul 2007 20:37:33 +0100"  >&lt;p&gt;Now that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2941&quot; title=&quot;With 10.2, Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2941&quot;&gt;&lt;del&gt;DERBY-2941&lt;/del&gt;&lt;/a&gt; is resolved, this regression only affects 10.3 and 10.4  which use lob  locators.  Oystein mentioned two possibilities for approaching this issue in 10.3.  I previously stated that I would prefer  changing how the locking is done so we could backport to 10.2, but that is no longer a consideration.  &lt;/p&gt;



</comment>
                            <comment id="12513885" author="oysteing" created="Thu, 19 Jul 2007 12:57:24 +0100"  >&lt;p&gt;I think I would prefer that one did not use database locks to&lt;br/&gt;
achieving stability for LOB objects.  Locks are intended for&lt;br/&gt;
transaction isolation, not result set isolation.  I guess the main&lt;br/&gt;
motivation for using locking is to avoid reading the entire LOB before&lt;br/&gt;
it is accessed.  That is, when ResultSet.getBlob is called the Blob&lt;br/&gt;
value is not read; the reading is delayed until one performs&lt;br/&gt;
operations on that Blob. Pre-10.3, one major problem with making a&lt;br/&gt;
copy of LOB would be that the entire LOB would have to be stored in&lt;br/&gt;
main-memory.  In 10.3, we have a mechanism for storing LOB values&lt;br/&gt;
temporarily on disk.&lt;/p&gt;

&lt;p&gt;One alternative would be to always make a copy when getBlob/getClob is&lt;br/&gt;
called.  That could significantly affect the performance of such an&lt;br/&gt;
operation, but users can use ResultSet.getBinaryStream if they want&lt;br/&gt;
to read a Blob with less overhead.&lt;/p&gt;

&lt;p&gt;A more performant solution would be to delay copying until it is&lt;br/&gt;
needed.  That is, when someone else tries to update the LOB, a copy is&lt;br/&gt;
made.  I think such conflicts are not very typically for databases&lt;br/&gt;
with LOBs, so copying will normally not be done very often.  However,&lt;br/&gt;
one need some mechanism for detecting that the LOB to be updated are&lt;br/&gt;
currently read by others.&lt;/p&gt;

&lt;p&gt;I am trying to get my mind around what is required here.  I do not&lt;br/&gt;
have a full undestanding yet, but here are some aspects that need to&lt;br/&gt;
be considered:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When locators are used, a locator will map to an Blob/Clob object&lt;br/&gt;
   on the server.  Client operations will be mapped to operations on&lt;br/&gt;
   the Blob/Clob objects.  This makes the current locking mechanism&lt;br/&gt;
   not work as intended since you will get Blob/Clob objects without&lt;br/&gt;
   doing explicit getBlob/getClob calls.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The server is not able to distinguish whether an operation is&lt;br/&gt;
   performed on a Blob/Clob or directly on the ResultSet.  E.g.,&lt;br/&gt;
   Blob.getBinaryStream and ResultSet.getBinaryStream are local&lt;br/&gt;
   operations on the client.  Read operations on the streams will map&lt;br/&gt;
   to Blob.getBytes on the server.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Locators are not used for all types of client operations. E.g.,&lt;br/&gt;
   ResultSet.updateBinaryStream or PreparedStatement.setBinaryStream&lt;br/&gt;
   will set up a stream that maps to a stream on the server.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updates to Blob/Clob objects will cause the object to be copied to&lt;br/&gt;
   temporary storage.  The updates will be applied to the database&lt;br/&gt;
   when the Blob/Clob object is used to update a row.  E.g., If&lt;br/&gt;
   ResultSet.updateBlob is used, the update will happen when&lt;br/&gt;
   ResultSet.updateRow is called.  If PrepareStatement.setBlob is used,&lt;br/&gt;
   it will happen when the prepared statement is executeed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We will still need a mechanism to protect LOB values of the current&lt;br/&gt;
   row of a ResultSet from being updated.  I am not familiar with the&lt;br/&gt;
   current mechanism here.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12514024" author="kmarsden" created="Thu, 19 Jul 2007 23:14:20 +0100"  >&lt;p&gt;Thank you Oystein for sorting out the complexities of this issue.&lt;/p&gt;</comment>
                            <comment id="12514249" author="dagw" created="Fri, 20 Jul 2007 18:10:03 +0100"  >&lt;p&gt;&amp;gt; - We will still need a mechanism to protect LOB values of the current&lt;br/&gt;
&amp;gt;   row of a ResultSet from being updated. I am not familiar with the&lt;br/&gt;
&amp;gt;   current mechanism here. &lt;/p&gt;

&lt;p&gt;As long as you are positioned on a row in the result set, a lock is&lt;br/&gt;
set for that row (R or U if you have an updatable result set), which&lt;br/&gt;
should protect the lob as long as you are positioned on it.&lt;/p&gt;

&lt;p&gt;In a scrollable result set, a copy is takes of the row, so after&lt;br/&gt;
positioning away from the row, the underlying lob would not be&lt;br/&gt;
accessed via this result set again until the row is possibly updated&lt;br/&gt;
(if the result set is updatable). The U-lock on the row is reset when&lt;br/&gt;
repositioning back in that case.&lt;/p&gt;



</comment>
                            <comment id="12516454" author="kmarsden" created="Mon, 30 Jul 2007 18:48:48 +0100"  >&lt;p&gt;This is a critial issue and a regresssion that has been hit by users in the past moving to 10.2.  It is now fixed in 10.2 and regresses again going to 10.3.  I am marking it   Blocker because it seems like such a likely user hit.  I realize nobody is working on it and it is likely to get moved back down to urgent, but it just seems wrong to re-regress the product with 10.3.&lt;/p&gt;


&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12516467" author="rhillegas" created="Mon, 30 Jul 2007 19:28:05 +0100"  >&lt;p&gt;Reverting the Urgency to normal. This issue occurs in 10.2. I do not believe that this old issue should block the release of other quality improvements.&lt;/p&gt;</comment>
                            <comment id="12516552" author="kmarsden" created="Mon, 30 Jul 2007 22:50:08 +0100"  >&lt;p&gt;Note: This issue has been resolved in 10.2 with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2941&quot; title=&quot;With 10.2, Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2941&quot;&gt;&lt;del&gt;DERBY-2941&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12516715" author="naka" created="Tue, 31 Jul 2007 16:37:18 +0100"  >&lt;p&gt;I executed LargeDataLocksTest in the both cases of embedded and client. &lt;br/&gt;
The result was that test passes in the embedded case but fails in the client case.&lt;/p&gt;

&lt;p&gt;In both cases of embedded and client, the only test code closes the resultset.....&lt;br/&gt;
I wonder what is the exact difference which causes this result ....&lt;/p&gt;</comment>
                            <comment id="12516969" author="naka" created="Wed, 1 Aug 2007 14:57:14 +0100"  >&lt;p&gt;I added the test code as next to LargeDataLocksTest and &lt;br/&gt;
found that the behavior was same between embedded and client if explicitly getBlob.&lt;/p&gt;

&lt;p&gt;+    public void testGetBlob() thr ows SQLException, IOException {&lt;br/&gt;
+        int numBytes = 0;&lt;br/&gt;
+        getConnection().setAutoCommit(false);&lt;br/&gt;
+        Statement stmt = createStatement();&lt;br/&gt;
+        String sql = &quot;SELECT bincol from t1&quot;;&lt;br/&gt;
+        ResultSet rs = stmt.executeQuery(sql);&lt;br/&gt;
+        rs.next();&lt;br/&gt;
+        Blob blob = rs.getBlob(1);&lt;br/&gt;
+        InputStream stream = blob.getBinaryStream();&lt;br/&gt;
+        int read = stream.read();&lt;br/&gt;
+        while (read != -1) &lt;/p&gt;
{
+            read = stream.read();
+            numBytes++;
+        }
&lt;p&gt;+        assertEquals(38000, numBytes);&lt;br/&gt;
+        rs.close();&lt;br/&gt;
+        assertEquals(0, countLocks());&lt;br/&gt;
+        commit();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+&lt;/p&gt;

&lt;p&gt;The result for embedded:&lt;br/&gt;
1) testGetBlob(org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest)junit.framework.AssertionFailedError: expected:&amp;lt;0&amp;gt; but was:&amp;lt;2&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetBlob(LargeDataLocksTest.java:142)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;



&lt;p&gt;The result for client :&lt;br/&gt;
2) testGetBlob(org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest)junit.framework.AssertionFailedError: expected:&amp;lt;0&amp;gt; but was:&amp;lt;2&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetBlob(LargeDataLocksTest.java:142)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;

&lt;p&gt;Reading comments, I understood background of this result is locking for LOB.&lt;/p&gt;</comment>
                            <comment id="12516981" author="naka" created="Wed, 1 Aug 2007 15:20:22 +0100"  >&lt;p&gt;Now, I came to think that the current implementation of client / server of derby have problem around&lt;br/&gt;
ResultSet#getBinaryStream method (and might be other getXXXXStream also).&lt;/p&gt;

&lt;p&gt;My intuitive thinking is that features of locater may be not needed for this kind of method, &lt;br/&gt;
which are getXXXXStream and not getXlob.&lt;/p&gt;</comment>
                            <comment id="12517149" author="narayanan" created="Thu, 2 Aug 2007 07:01:28 +0100"  >&lt;p&gt;&amp;gt;Now, I came to think that the current implementation &lt;br/&gt;
&amp;gt;of client / server of derby have problem around&lt;br/&gt;
&amp;gt;ResultSet#getBinaryStream method (and might be &lt;br/&gt;
&amp;gt;other getXXXXStream also). &lt;/p&gt;

&lt;p&gt;Features of locator are not present for the ResultSet &lt;br/&gt;
and the PreparedStatement methods.&lt;/p&gt;

&lt;p&gt;Relevant comments from Derby-2604&lt;/p&gt;

&lt;p&gt;&amp;gt;As already discussed in the JIRA issue that was raised for &lt;br/&gt;
&amp;gt;PreparedStatements and CallableStatements&lt;br/&gt;
&amp;gt;(&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2529&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2529&lt;/a&gt;) there &lt;br/&gt;
&amp;gt;are no changes needed here related to Clob also.&lt;/p&gt;

&lt;p&gt;&amp;gt;A similar case would exist for ResultSets also since &lt;br/&gt;
&amp;gt;the LOB in this case is also B-Layer streamed and &lt;br/&gt;
&amp;gt;there would be no significant improvement with using locators. &lt;/p&gt;</comment>
                            <comment id="12517553" author="kmarsden" created="Fri, 3 Aug 2007 15:59:27 +0100"  >&lt;p&gt;V. Narayanan said&lt;br/&gt;
&amp;gt;Features of locator are not present for the ResultSet&lt;br/&gt;
&amp;gt;and the PreparedStatement methods. &lt;/p&gt;

&lt;p&gt;I am a little confused by this. Are you saying that a ResultSet.getBinaryStream() on the client should not be translating into a getBlob() on the server.  That does not seem to be the case in the trunk/10.3.  Can you try running jdbcapi/LargeDataLocks.java and see if perhaps this can be resolved easily.&lt;/p&gt;
</comment>
                            <comment id="12518403" author="narayanan" created="Wed, 8 Aug 2007 11:12:28 +0100"  >&lt;p&gt;&amp;gt;I am a little confused by this. Are you saying that a ResultSet.getBinaryStream()&lt;br/&gt;
&amp;gt;on the client should not be translating into a getBlob() on the server. That does &lt;br/&gt;
&amp;gt;not seem to be the case in the trunk/10.3. Can you try running jdbcapi/LargeDataLocks.java &lt;br/&gt;
&amp;gt;and see if perhaps this can be resolved easily.&lt;/p&gt;

&lt;p&gt;While working on locators, the ResultSet nor the PreparedStatement methods were&lt;br/&gt;
translated to stored procedure calls to embedded methodssince this would be inefficient &lt;br/&gt;
when compared to the Layer B Streaming and no materialization of LOB&apos;s was &lt;br/&gt;
happening that needed to be avoided. Hence it was OK to retain the current way it is done.&lt;/p&gt;

&lt;p&gt;Internally I am not sure if the translation of the getBlob is happening at present.&lt;/p&gt;</comment>
                            <comment id="12518409" author="narayanan" created="Wed, 8 Aug 2007 11:25:42 +0100"  >&lt;p&gt;Sorry I meant &quot;Neither the ResultSet nor the PreparedStatement methods were&lt;br/&gt;
translated to stored procedure calls to embedded methods&quot;  (i.e.) They were not&lt;br/&gt;
translated to stored procedure calls.&lt;/p&gt;</comment>
                            <comment id="12519073" author="kmarsden" created="Fri, 10 Aug 2007 19:11:05 +0100"  >&lt;p&gt;I am not sure how stored procedures come into it, but what I have been seeing is that with a 10.2 client or lower the DRDAType for getBinaryStream is  DRDAConstants.DRDA_TYPE_NLOBBYTES, so we instantiate a EXTDTAInputStream and with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2941&quot; title=&quot;With 10.2, Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2941&quot;&gt;&lt;del&gt;DERBY-2941&lt;/del&gt;&lt;/a&gt; all is ok, BUT if we use a 10.3 client the DRDAType is DRDAConstants.DRDA_TYPE_NLOBLOC   so we do a getObject()(aka getBlob) on the column and it holds locks.&lt;/p&gt;

&lt;p&gt;Also I want to clarify that this issue is fixed with 10.2.2.1 clients and above with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2941&quot; title=&quot;With 10.2, Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2941&quot;&gt;&lt;del&gt;DERBY-2941&lt;/del&gt;&lt;/a&gt;.  It regresses with 10.3 clients and higher.   So users affected by this issue, should not upgrade to 10.3.&lt;/p&gt;

&lt;p&gt;Narayanan, do you have time to look and see if the change to use DRDA_TYPE_NLOBLOC for this case was necessary.  This is a serious regression in 10.3 that is likely to affect users. It would be good to get it addressed as soon as possible and I am not familiar enough with the Locator code to say how it should/ should not be.&lt;/p&gt;

&lt;p&gt;You can run the test jdbcapi/LargeDataLocks which is checked into the trunk but is not running at this time on the trunk due to this issue.&lt;/p&gt;
</comment>
                            <comment id="12523174" author="oysteing" created="Tue, 28 Aug 2007 08:11:47 +0100"  >&lt;p&gt;To answer Kathey&apos;s question: On the server, a stable mapping is needed&lt;br/&gt;
between the locator ID and the Blob value is needed.  Earlier, you&lt;br/&gt;
copy the entire Blob value to the client in one round-trip.  Now, you&lt;br/&gt;
copy as much data as requested by the client.  It seems natural to use&lt;br/&gt;
a Blob object to represent the Blob value between round-trips.  Hence,&lt;br/&gt;
I think getting a Blob object is necessary.&lt;/p&gt;

&lt;p&gt;As I said earlier, I would prefer to fix this by using another&lt;br/&gt;
mechanism than locking to guarantee the stability of a Blob value.  I&lt;br/&gt;
plan to look closer into how to fix this in a week or two.&lt;/p&gt;
</comment>
                            <comment id="12523854" author="kmarsden" created="Thu, 30 Aug 2007 15:07:08 +0100"  >&lt;p&gt;Oysten said:&lt;br/&gt;
&amp;gt;I plan to look closer into how to fix this in a week or two.&lt;/p&gt;

&lt;p&gt;Thanks Oysten!&lt;/p&gt;
</comment>
                            <comment id="12529512" author="kmarsden" created="Fri, 21 Sep 2007 18:41:20 +0100"  >&lt;p&gt;Hello Oystein. I just wanted to check in on this issue.   Have you been able to look closer at solution options?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;


</comment>
                            <comment id="12530424" author="oysteing" created="Wed, 26 Sep 2007 13:03:59 +0100"  >&lt;p&gt;I have started to look a bit more at this issue.  I have not got very&lt;br/&gt;
far yet, but I have identified that the locking of the record&lt;br/&gt;
containing the Blob occurs in OverflowInputStream#initStream.  Here an&lt;br/&gt;
intent-shared lock on the table and a record lock for the record&lt;br/&gt;
contain the Blob is obtained.  As far as I can tell, the table lock is&lt;br/&gt;
for the duration of the transaction while the record lock follows the&lt;br/&gt;
transaction&apos;s isolation level.  Does this mean that it is the table&lt;br/&gt;
intent lock that is the problem here?  &lt;/p&gt;

&lt;p&gt;If I run the LargeDataLocks program attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; it shows&lt;br/&gt;
that a IS table lock remains.  There is some discussion in&lt;br/&gt;
OverflowInputStream#initStream on whether on should use the&lt;br/&gt;
contain&apos;s isolation level also for the intent lock, and not always use&lt;br/&gt;
REPEATABLE READ, but it says:&lt;/p&gt;

&lt;p&gt;        To do this, need to consider:&lt;br/&gt;
        Sometimes the container&apos;s locking policy may NOT reflect the&lt;br/&gt;
        correct locking policy. For example, if the container is a&lt;br/&gt;
        table (not an index) and Access handles the locking of the&lt;br/&gt;
        table via an index, the container&apos;s locking policy would be&lt;br/&gt;
        set to do no locking.  Moreover, if the container is an index,&lt;br/&gt;
        the locking policy would always be set to do no locking.&lt;/p&gt;

&lt;p&gt;I guess I have to read up on the use of intent locks and the&lt;br/&gt;
difference between locking policies of transactions and containers&lt;br/&gt;
before I can understand what this means.&lt;/p&gt;
</comment>
                            <comment id="12530443" author="oysteing" created="Wed, 26 Sep 2007 14:34:30 +0100"  >&lt;p&gt;My previous comment is mistaken.  The LargeDataLocks program show that&lt;br/&gt;
both a table intent lock and a row lock remains:&lt;/p&gt;

&lt;p&gt;Select * from new org.apache.derby.diag.LockTable() as LT&lt;br/&gt;
XID,TYPE,MODE,TABLENAME,LOCKNAME,STATE,TABLETYPE,LOCKCOUNT,INDEXNAME&lt;br/&gt;
203,TABLE,IS,T1,Tablelock,GRANT,T,1,null&lt;br/&gt;
203,ROW,S,T1,(2,6),GRANT,T,1,null&lt;/p&gt;

&lt;p&gt;Sorry for the confusion.&lt;/p&gt;

&lt;p&gt;While copy-on-write seems like a good idea, I am afraid it will be&lt;br/&gt;
quite some work to implement a new mechanism like that, and I think I&lt;br/&gt;
will try a simpler approach first.&lt;/p&gt;

&lt;p&gt;My first attempt will try to see if there is some way to make the&lt;br/&gt;
engine release locks when locators are freed.  Then, the client could&lt;br/&gt;
release locators associated with streams when next()/close() is called&lt;br/&gt;
on the result set.&lt;/p&gt;
</comment>
                            <comment id="12530752" author="oysteing" created="Thu, 27 Sep 2007 16:07:11 +0100"  >&lt;p&gt;So my plan to fix this has two parts:&lt;/p&gt;

&lt;p&gt;1. Change the locking so that the lock for a LOB is released when the&lt;br/&gt;
   LOB object is closed.  My studies so far indicates that this can be&lt;br/&gt;
   achieved as follows:&lt;/p&gt;

&lt;p&gt;   a) Use read committed instead of repeatable read for the locking&lt;br/&gt;
      policy in OverflowInputStream#initStream.  This will associate&lt;br/&gt;
      the lock with the BaseContainerHandle that owns the&lt;br/&gt;
      OverflowInputStream instead of the transaction.&lt;/p&gt;

&lt;p&gt;   b) Release the locks for the BaseContainerHandle that owns the&lt;br/&gt;
      OverflowInputStream when it is closed. (Debugging shows that&lt;br/&gt;
      OverflowInputStream#close is called when a Blob/Clob object is&lt;br/&gt;
      freed.)&lt;/p&gt;

&lt;p&gt;2. Make sure a client releases locators when they are not to be used&lt;br/&gt;
   anymore.  That is, the procedure to release a locator obtained by&lt;br/&gt;
   getBinaryStream etc. will be called when next() or close() is&lt;br/&gt;
   called on the result set.&lt;/p&gt;

&lt;p&gt;   Since, according to the JDBC spec, such streams are only valid&lt;br/&gt;
   until the next getXXX call, there should only be necessary to keep&lt;br/&gt;
   track of one such locator at a time.  So when a new stream is&lt;br/&gt;
   opened, the previous locator can be released.  Hence, it should not&lt;br/&gt;
   be necessary to maintain a set of locators for the current row, one&lt;br/&gt;
   single &quot;current&quot; locator per result set is sufficient.&lt;/p&gt;</comment>
                            <comment id="12530772" author="kmarsden" created="Thu, 27 Sep 2007 17:27:48 +0100"  >&lt;p&gt;Oystein said ..&lt;/p&gt;

&lt;p&gt;&amp;gt;2. Make sure a client releases locators when they are not to be used&lt;br/&gt;
&amp;gt;   anymore. That is, the procedure to release a locator obtained by&lt;br/&gt;
&amp;gt;  getBinaryStream etc. will be called when next() or close() is&lt;br/&gt;
&amp;gt;.   called on the result set. &lt;/p&gt;

&lt;p&gt;This makes sense for getBinaryStream, but for Blobs the spec says&lt;br/&gt;
&quot;A Blob object is valid for the duration of the transaction in which is was created.&quot;&lt;/p&gt;

&lt;p&gt;Will that still be the case with your propsed change?&lt;/p&gt;</comment>
                            <comment id="12530921" author="oysteing" created="Fri, 28 Sep 2007 07:35:13 +0100"  >&lt;p&gt;Kathey Marsden (JIRA) wrote:&lt;br/&gt;
&amp;gt; Oystein said ..&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;&amp;gt; 2. Make sure a client releases locators when they are not to be used&lt;br/&gt;
&amp;gt;&amp;gt;   anymore. That is, the procedure to release a locator obtained by&lt;br/&gt;
&amp;gt;&amp;gt;  getBinaryStream etc. will be called when next() or close() is&lt;br/&gt;
&amp;gt;&amp;gt; .   called on the result set. &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; This makes sense for getBinaryStream, but for Blobs the spec says&lt;br/&gt;
&amp;gt; &quot;A Blob object is valid for the duration of the transaction in which is was created.&quot;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Will that still be the case with your propsed change?&lt;/p&gt;

&lt;p&gt;Yes, locators obtained when doing ResultSet.get&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob will not be released, only locators obtained by other ResultSet.getXXX methods (e.g., getBinaryStream). &lt;/p&gt;


</comment>
                            <comment id="12532028" author="oysteing" created="Wed, 3 Oct 2007 08:44:32 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3098&quot; title=&quot;LOB locks are not released after free().&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3098&quot;&gt;&lt;del&gt;DERBY-3098&lt;/del&gt;&lt;/a&gt; will handle part 1 as described above.&lt;/p&gt;</comment>
                            <comment id="12543885" author="oysteing" created="Tue, 20 Nov 2007 12:53:41 +0000"  >&lt;p&gt;Attached patch derby-2892firstshot.diff makes LargeDataLocksTest also work for client/server.  The approach is to make sure that closing a stream will free the underlying Blob, and in addition when closing a result set, the open stream needs to be closed.&lt;/p&gt;

&lt;p&gt;However, this fix will also have affect when closing streams that was obtained from a Blob object instead of directly from the result set.  This is not correct since such Blob objects should live until end of transaction unless explicitly closed.  This causes a few test cases in BlobClob4BlobTest to be broken.&lt;/p&gt;

&lt;p&gt;Hence, the attached patch needs to be modified to distinguish between streams that were obtained from a result set, and streams that were obtained from a Blob object.&lt;/p&gt;</comment>
                            <comment id="12544605" author="oysteing" created="Wed, 21 Nov 2007 21:32:11 +0000"  >&lt;p&gt;Fixing this issue will create backward-compatibility issues.  For a Blob/Clob column of  a result set, only one get method can be called and only once.  For example, after executing ResultSet.getBinaryStream on a column, all following get methods (e.g., getBlob, getBinaryStream, getBytes) on this column wil fail.&lt;/p&gt;</comment>
                            <comment id="12545816" author="oysteing" created="Tue, 27 Nov 2007 13:10:38 +0000"  >&lt;p&gt;Attached is a patch that solves the reported problem, and runs without&lt;br/&gt;
errors in the current test suites (suites.All and derbyall).  However,&lt;br/&gt;
I do not feel confident that there is sufficient testing in this area&lt;br/&gt;
to verify the fix.  I do not have time to add more tests right now,&lt;br/&gt;
but I hope to get back to this later.&lt;/p&gt;

&lt;p&gt;Note also that this fix may affect existing applications since from&lt;br/&gt;
now only one get method per Blob/Clob column may now be called per&lt;br/&gt;
row of the result set.&lt;/p&gt;

&lt;p&gt;The following describes the fixes in more detail:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LargeDataLocksTest.java&lt;br/&gt;
    Activate test also for client server to test the bug fix.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Cursor.java&lt;br/&gt;
    Access on Blob/Clob columns of result set is no longer forwarded&lt;br/&gt;
    to the relevant method on the Blob/Clob object.  Instead, it is&lt;br/&gt;
    made sure that the underlying Blob/Clob objects are freed when the&lt;br/&gt;
    access is completed.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Blob.java&lt;br/&gt;
    Make getBinaryStreamX() package private so that it can be used by&lt;br/&gt;
    Cursor.  This way, conversions between SqlException and&lt;br/&gt;
    SQLException are avoided.  &lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Clob.java&lt;br/&gt;
    Make get...StreamX methods package private so that it can be used&lt;br/&gt;
    by Cursor.  This way, conversions between SqlException and&lt;br/&gt;
    SQLException are avoided.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/BlobLocatorInputStream.java&lt;br/&gt;
    Add method setFreeBlobOnClose() which can be called in order to&lt;br/&gt;
    make the stream free the underlying Blob object when it is closed.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/ResultSet.java&lt;br/&gt;
    Closing the result set should close streams that have been opened&lt;br/&gt;
    on columns of the result set.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/UpdateSensitiveLOBLocatorInputStream.java&lt;br/&gt;
    Closing the stream should also close the wrapped stream.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/ClobLocatorInputStream.java&lt;br/&gt;
    Add method setFreeClobOnClose() which can be called in order to&lt;br/&gt;
    make the stream free the underlying Clob object when it is closed.&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/ClobLocatorReader.java&lt;br/&gt;
    Add method setFreeClobOnClose() which can be called in order to&lt;br/&gt;
    make the stream free the underlying Clob object when it is closed.&lt;/p&gt;
</comment>
                            <comment id="12551859" author="kmarsden" created="Fri, 14 Dec 2007 17:07:47 +0000"  >&lt;p&gt;&#216;ystein said.&lt;br/&gt;
&amp;gt;Fixing this issue will create backward-compatibility issues. For a Blob/Clob column of a result set, only one get method &amp;gt;can be called and only once. For example, after executing ResultSet.getBinaryStream on a column, all following get &amp;gt;methods (e.g., getBlob, getBinaryStream, getBytes) on this column wil fail.&lt;/p&gt;

&lt;p&gt;I thought this was the case since &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-721&quot; title=&quot;State of InputStream retrieved from resultset is not clean , if there exists previous InputStream .&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-721&quot;&gt;&lt;del&gt;DERBY-721&lt;/del&gt;&lt;/a&gt; was fixed.&lt;/p&gt;</comment>
                            <comment id="12552372" author="oysteing" created="Mon, 17 Dec 2007 11:14:48 +0000"  >&lt;p&gt;&amp;gt; Kathey Marsden commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2892&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2892&quot;&gt;&lt;del&gt;DERBY-2892&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ---------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein said.&lt;br/&gt;
&amp;gt;&amp;gt; Fixing this issue will create backward-compatibility issues. For a&lt;br/&gt;
&amp;gt;&amp;gt; Blob/Clob column of a result set, only one get method can be&lt;br/&gt;
&amp;gt;&amp;gt; called and only once. For example, after executing&lt;br/&gt;
&amp;gt;&amp;gt; ResultSet.getBinaryStream on a column, all following get methods&lt;br/&gt;
&amp;gt;&amp;gt; (e.g., getBlob, getBinaryStream, getBytes) on this column wil fail.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I thought this was the case since &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-721&quot; title=&quot;State of InputStream retrieved from resultset is not clean , if there exists previous InputStream .&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-721&quot;&gt;&lt;del&gt;DERBY-721&lt;/del&gt;&lt;/a&gt; was fixed.&lt;/p&gt;

&lt;p&gt;I am afraid that some of these restrictions may have been relaxed by&lt;br/&gt;
accident when we introduced locators for 10.3.  Anyway, this patch will&lt;br/&gt;
restrict usage even further than Derby-721.  With a 10.2.1 server, I&lt;br/&gt;
am able to do getBytes() followed by getBinaryStream().  With my patch&lt;br/&gt;
this will not be possible since getBytes will release the underlying&lt;br/&gt;
Blob.  I will investigate the behavior of previous releases a bit&lt;br/&gt;
further and report back.&lt;/p&gt;</comment>
                            <comment id="12568520" author="oysteing" created="Wed, 13 Feb 2008 11:58:28 +0000"  >&lt;p&gt;I have tested the patch with the repro attached here: &lt;a href=&quot;http://www.nabble.com/Re%3A-Iterating-through-large-result-set-in-network-mode-causes-OutOfMemoryException-p15364393.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A-Iterating-through-large-result-set-in-network-mode-causes-OutOfMemoryException-p15364393.html&lt;/a&gt;&lt;br/&gt;
This repro does not access the blob columns that are selected, and it turns out that with the current patch, the blob objects are not released, and OOM error occurs.  If I add a  call to ResultSet#getBytes for each row, the OOM error does not occur.&lt;/p&gt;</comment>
                            <comment id="12578446" author="kmarsden" created="Thu, 13 Mar 2008 18:58:41 +0000"  >&lt;p&gt;Do you think this change will make it in for 10.4?&lt;br/&gt;
If we are going to change behavior we probably best do it on &lt;br/&gt;
minor release boundaries.&lt;/p&gt;</comment>
                            <comment id="12578474" author="oysteing" created="Thu, 13 Mar 2008 20:08:25 +0000"  >
&lt;p&gt;I agree, and I hope to get back to this within a week or so, but if &lt;br/&gt;
others have the time to look at, please do so.  As mentioned in my &lt;br/&gt;
comment, I have discovered that my proposed fix will not work for the &lt;br/&gt;
case where the select blob objects are never accessed by JDBC.  That &lt;br/&gt;
should be fixed, but the current patch will at least fix the more common &lt;br/&gt;
scenarios.  In addition, some more tests should be added.&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
&#216;ystein&lt;/p&gt;</comment>
                            <comment id="12581727" author="kmarsden" created="Mon, 24 Mar 2008 23:40:41 +0000"  >&lt;p&gt;I have a few cycles to help out with this issue.  As I see it, what needs &lt;br/&gt;
to be done is &lt;br/&gt;
1) Apply patch to latest and make sure tests pass.&lt;br/&gt;
2) Add release note that you cannot access a column twice with JDBC.&lt;br/&gt;
3) Add more tests.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add test to attempt to retrieve column twice and ensure reasonable error.&lt;/li&gt;
	&lt;li&gt;What other tests should be added?&lt;br/&gt;
4) After checkin, file issue for lock timeout if column is not accessed by JDBC.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12581888" author="kristwaa" created="Tue, 25 Mar 2008 12:18:02 +0000"  >&lt;p&gt;Kathey, I&apos;m interested in looking at point 4. At least I believe it is the same problem. I used the repro &#216;ystein mentioned above, where I got an OOME instead of a timeout.&lt;br/&gt;
I coded a prototype that solved the problem on the client side, but I&apos;m wondering if it can be better solved on the server side.&lt;br/&gt;
I will look into this and report my findings.&lt;/p&gt;</comment>
                            <comment id="12582342" author="kristwaa" created="Wed, 26 Mar 2008 16:51:33 +0000"  >&lt;p&gt;I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3571&quot; title=&quot;LOB locators are not released if the LOB columns are not accessed by the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3571&quot;&gt;&lt;del&gt;DERBY-3571&lt;/del&gt;&lt;/a&gt; for the case where locators are not freed if the LOB columns are not accessed.&lt;br/&gt;
Review and comments are welcome.&lt;/p&gt;

&lt;p&gt;I haven&apos;t tested it, but I think &#216;ysteins patch and mine should go along fine together. They do however affect each other with respect to timing of the locator release and round trips to the server. We might want to investigate this with regards to performance.&lt;/p&gt;</comment>
                            <comment id="12582390" author="kmarsden" created="Wed, 26 Mar 2008 18:28:45 +0000"  >&lt;p&gt;Thanks Kristian for looking at the issue of the lock timeout when the column is not accessed via JDBC.&lt;/p&gt;

&lt;p&gt;For the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2892&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2892&quot;&gt;&lt;del&gt;DERBY-2892&lt;/del&gt;&lt;/a&gt; patch, I think we probably need to work on the error message if a column is retrieved twice.&lt;br/&gt;
What happens now  if I do getString twice on a Clob column  is I get the message:&lt;/p&gt;

&lt;p&gt;XJ217 - You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob&apos;s transaction has been committed or rolled back.&lt;/p&gt;

&lt;p&gt;I don&apos;t know that that makes sense given the user called getString()&lt;/p&gt;


&lt;p&gt;For getCharacterStream()/getBinaryStream() there is no error on the call, just an IOException on the read.&lt;/p&gt;
</comment>
                            <comment id="12582763" author="kmarsden" created="Thu, 27 Mar 2008 18:42:19 +0000"  >&lt;p&gt;I was looking at improving the error messages when a column is accessed&lt;br/&gt;
more than once, and I realized that doing so will be much easier once the&lt;br/&gt;
patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3571&quot; title=&quot;LOB locators are not released if the LOB columns are not accessed by the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3571&quot;&gt;&lt;del&gt;DERBY-3571&lt;/del&gt;&lt;/a&gt; is in, which records whether lob columns have &lt;br/&gt;
been accessed.&lt;/p&gt;

&lt;p&gt;I would like to propose that we go ahead and commit the derby-2892 patch to &lt;br/&gt;
trunk and then attack the improved error messages after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3571&quot; title=&quot;LOB locators are not released if the LOB columns are not accessed by the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3571&quot;&gt;&lt;del&gt;DERBY-3571&lt;/del&gt;&lt;/a&gt; goes&lt;br/&gt;
in as a separate issue.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12582942" author="kristwaa" created="Fri, 28 Mar 2008 08:31:17 +0000"  >&lt;p&gt;Note that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3571&quot; title=&quot;LOB locators are not released if the LOB columns are not accessed by the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3571&quot;&gt;&lt;del&gt;DERBY-3571&lt;/del&gt;&lt;/a&gt; will only track LOB locators in its current state.&lt;br/&gt;
I think it can be extended to track all LOBs, but it is not clear to me at this point if that is the right way to proceed.&lt;br/&gt;
Answering these questions would help determine that:&lt;br/&gt;
 a) Shall an exception be thrown for any type of column if accessed twice?&lt;br/&gt;
 b) If not, which columns types does the restriction apply to?&lt;/p&gt;

&lt;p&gt;I think a more general solution would be needed if an exception shall be raised for all column types.&lt;br/&gt;
If a solution is needed only for LOBs, I believe LOBStateTracker can be extended and used for the purpose.&lt;/p&gt;</comment>
                            <comment id="12583123" author="kmarsden" created="Fri, 28 Mar 2008 18:13:34 +0000"  >&lt;p&gt;From what I understand,  the restriction is only for lob columns. &lt;br/&gt;
If no one objects I will commit Oystein&apos;s patch to trunk on &lt;br/&gt;
Monday and file an issue for the improved error messages.&lt;/p&gt;
</comment>
                            <comment id="12583487" author="kmarsden" created="Sun, 30 Mar 2008 22:01:54 +0100"  >&lt;p&gt;Attached is a first shot at a release note for this issue. Please let me know if you have comments.&lt;/p&gt;</comment>
                            <comment id="12583656" author="kmarsden" created="Mon, 31 Mar 2008 13:23:23 +0100"  >&lt;p&gt;committed this to trunk with revision  642974.  I will backport to 10.4&lt;br/&gt;
after tinderbox runs cleanly. &lt;/p&gt;</comment>
                            <comment id="12583792" author="kmarsden" created="Mon, 31 Mar 2008 19:39:54 +0100"  >&lt;p&gt;committed to trunk and 10.4&lt;/p&gt;</comment>
                            <comment id="12584895" author="kristwaa" created="Thu, 3 Apr 2008 00:02:11 +0100"  >&lt;p&gt;&apos;derby-2892-1a-alternative_fix_partial.diff&apos; demonstrates how the mechanism added by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3571&quot; title=&quot;LOB locators are not released if the LOB columns are not accessed by the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3571&quot;&gt;&lt;del&gt;DERBY-3571&lt;/del&gt;&lt;/a&gt; can be used to release the locators.&lt;br/&gt;
It does not implement the required code cleanup, which would basically be to remove parts of the already committed patch. It allows multiple calls to all getter methods, but only a single call is allowed for the getXStream methods. This restriction is enforced independently of this patch. A solution disallowing multiple calls can easily be implemented on top of patch 1a.&lt;/p&gt;

&lt;p&gt;The advantage of the alternative implementation, is that it requires less code and that it might make the locator release a lot more efficient when the piggy-backing scheme is implemented.&lt;/p&gt;

&lt;p&gt;suites.All ran without failures (except for the constantly failing management test).&lt;br/&gt;
Patch ready for comments.&lt;/p&gt;</comment>
                            <comment id="12586611" author="kmarsden" created="Tue, 8 Apr 2008 01:32:13 +0100"  >&lt;p&gt;I think the approach in &apos;derby-2892-1a-alternative_fix_partial.diff&apos; is preferable to the current approach because it does not introduce incompatibilities and can be backported to 10.3 where the bug still exists.  I  don&apos;t think we should disallow multiple calls unless we have to.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12587001" author="kristwaa" created="Wed, 9 Apr 2008 00:17:55 +0100"  >&lt;p&gt;FYI, some of our streams, for instance BlobLocatorInputStream, don&apos;t have a notion of being closed. It is therefore important that such streams are wrapped in a CloseFilterInputStream (and they are).&lt;br/&gt;
I do not know why some streams ignore the close action, and I haven&apos;t verified if they are wrapped in each and every place they are used (outside the ResultSet class).&lt;/p&gt;</comment>
                            <comment id="12587125" author="kristwaa" created="Wed, 9 Apr 2008 11:14:31 +0100"  >&lt;p&gt;Reopening to commit alternative fix.&lt;br/&gt;
I expect there will be two patches, one is ready. The next one will remove some of the new functionality added in the original patch.&lt;/p&gt;</comment>
                            <comment id="12587128" author="kristwaa" created="Wed, 9 Apr 2008 11:21:01 +0100"  >&lt;p&gt;&apos;derby-2892-1b-alternative_fix_partial.diff&apos; is slightly changed from 1a; reordered keywords (abstract public -&amp;gt; public abstract) and removed an added blank line.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revsion 646255.&lt;br/&gt;
I plan to backport the fix to 10.4 when the last patch has been committed, and also investigate the possibility of backporting to 10.3.&lt;/p&gt;</comment>
                            <comment id="12587134" author="kristwaa" created="Wed, 9 Apr 2008 11:29:50 +0100"  >&lt;p&gt;Forgot to say, but I ran the repro &#216;ystein mentioned with patch 1b applied and Xmx set to 48m without getting OOMEs.&lt;/p&gt;

&lt;p&gt;&apos;derby-2892-2a-alternative_fix_cleanup.diff&apos; removes code that was added to support the first solution.&lt;br/&gt;
Need to verify if I have forgotten something.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12588272" author="dyret" created="Sat, 12 Apr 2008 17:24:06 +0100"  >&lt;p&gt;Patch derby-2892-1b-alternative_fix_partial.diff merged to 10.4.&lt;br/&gt;
Committed revision 647465.&lt;/p&gt;</comment>
                            <comment id="12588502" author="kristwaa" created="Mon, 14 Apr 2008 08:40:22 +0100"  >&lt;p&gt;Thanks for backporting the fix Dyre.&lt;/p&gt;

&lt;p&gt;I committed the last cleanup patch (2a) to trunk with revision 647680 and merged it into 10.4 with revision 647682.&lt;br/&gt;
I&apos;m not planning on any more fixes under this issue.&lt;/p&gt;

&lt;p&gt;Can the release note needed flag be unset now?&lt;/p&gt;</comment>
                            <comment id="12592151" author="kmarsden" created="Thu, 24 Apr 2008 19:56:11 +0100"  >&lt;p&gt;Unsetting the release note needed and existing application impact  flags as this issue&apos;s fix no longer impacts existing applications.&lt;/p&gt;

&lt;p&gt;I am leaving this issue open to port to 10.3&lt;/p&gt;</comment>
                            <comment id="12592165" author="kmarsden" created="Thu, 24 Apr 2008 21:36:54 +0100"  >&lt;p&gt;I attempted to merge this fix to 10.3 Attached is the patch for my first try (derby-2892_10.3_try1_diff.txt not for commit).  I ported 643091,646255, and 647680 from trunk, but something is not quite right, because I still am getting locks held. LargeDataLocksTest fails with &lt;/p&gt;

&lt;p&gt;1) testGetBinaryStream(org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest)junit.framework.AssertionF&lt;br/&gt;
ailedError: expected:&amp;lt;0&amp;gt; but was:&amp;lt;2&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetBinaryStream(LargeDataLocksTest&lt;br/&gt;
.java:114)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;

&lt;p&gt;Oddly testCharacterStream seems to be ok. Investigating what could be the matter.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12592172" author="kmarsden" created="Thu, 24 Apr 2008 22:14:05 +0100"  >&lt;p&gt;I found my problem. My client was way out of date because I had reverted to a very old version to track down a regression.  I think I was missing the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3098&quot; title=&quot;LOB locks are not released after free().&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3098&quot;&gt;&lt;del&gt;DERBY-3098&lt;/del&gt;&lt;/a&gt;. Sorry for the noise.   I&apos;ll run the full set of tests  and commit if all goes well.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12592367" author="kristwaa" created="Fri, 25 Apr 2008 14:01:01 +0100"  >&lt;p&gt;Good to hear.&lt;br/&gt;
I&apos;m open to look into any issues you might find in this area after your latest test cycle has completed.&lt;/p&gt;</comment>
                            <comment id="12592413" author="kmarsden" created="Fri, 25 Apr 2008 16:46:51 +0100"  >&lt;p&gt;Resolving for 10.3.2.2. Assigning to Kristian since we went with his fix in the end.&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12373682">DERBY-2933</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12394964">DERBY-3650</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12392732">DERBY-3583</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="32162">DERBY-255</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12375265">DERBY-2990</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12392355">DERBY-3571</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="31583">DERBY-208</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="32988">DERBY-326</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12379542">DERBY-3098</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12361629" name="DERBY-2892_07_10_07_try1_diff.txt" size="15553" author="kmarsden" created="Thu, 12 Jul 2007 01:47:54 +0100"/>
                            <attachment id="12361630" name="DERBY-2892_07_10_07_try1_stat.txt" size="375" author="kmarsden" created="Thu, 12 Jul 2007 01:48:19 +0100"/>
                            <attachment id="12361815" name="DERBY-2892_07_13_07_try2_diff.txt" size="14135" author="kmarsden" created="Fri, 13 Jul 2007 21:21:49 +0100"/>
                            <attachment id="12361816" name="DERBY-2892_07_13_07_try2_stat.txt" size="669" author="kmarsden" created="Fri, 13 Jul 2007 21:22:58 +0100"/>
                            <attachment id="12379200" name="derby-2892-1a-alternative_fix_partial.diff" size="9052" author="kristwaa" created="Thu, 3 Apr 2008 00:02:11 +0100"/>
                            <attachment id="12379716" name="derby-2892-1b-alternative_fix_partial.diff" size="9038" author="kristwaa" created="Wed, 9 Apr 2008 11:21:01 +0100"/>
                            <attachment id="12379717" name="derby-2892-2a-alternative_fix_cleanup.diff" size="5908" author="kristwaa" created="Wed, 9 Apr 2008 11:29:50 +0100"/>
                            <attachment id="12370296" name="derby-2892.diff" size="19584" author="oysteing" created="Tue, 27 Nov 2007 13:10:38 +0000"/>
                            <attachment id="12380868" name="derby-2892_10.3_try1_diff.txt" size="26268" author="kmarsden" created="Thu, 24 Apr 2008 21:36:54 +0100"/>
                            <attachment id="12369878" name="derby-2892firstshot.diff" size="3853" author="oysteing" created="Tue, 20 Nov 2007 12:53:41 +0000"/>
                            <attachment id="12361631" name="protocolErrorRepro.zip" size="185612" author="kmarsden" created="Thu, 12 Jul 2007 01:56:05 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12373904">DERBY-2941</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Jul 2007 00:01:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23304</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0m87:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37419</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>