<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:26:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4087/DERBY-4087.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4087] Clean up debug printing of the abstract syntax trees after parsing, binding and optimization </title>
                <link>https://issues.apache.org/jira/browse/DERBY-4087</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently, the printing is often inconsistent:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;some subtrees not printed&lt;/li&gt;
	&lt;li&gt;wrong indentation due to missing newlines, or lacking level increments&lt;/li&gt;
	&lt;li&gt;redundant printing of subtrees (AST is really a DAG, would be nice to print only once and then refer back to show aliasing)&lt;/li&gt;
	&lt;li&gt;some items printed twice due to inconsistent usage of pattern&lt;/li&gt;
&lt;/ul&gt;


</description>
                <environment></environment>
        <key id="12416457">DERBY-4087</key>
            <summary>Clean up debug printing of the abstract syntax trees after parsing, binding and optimization </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Mar 2009 18:07:49 +0000</created>
                <updated>Mon, 31 Aug 2009 23:37:01 +0100</updated>
                            <resolved>Mon, 31 Aug 2009 23:37:01 +0100</resolved>
                                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Miscellaneous</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12680222" author="dagw" created="Mon, 9 Mar 2009 18:12:28 +0000"  >&lt;p&gt;I could imagine printing already seen subtrees something like this:&lt;/p&gt;

&lt;p&gt;                  resultColumns:                      &lt;br/&gt;
                     org.apache.derby.impl.sql.compile.ResultColumnList@1e1be92&lt;/p&gt;

&lt;p&gt;                        org.apache.derby.impl.sql.compile.ResultColumn@1038de7&lt;br/&gt;
                        **&lt;b&gt;truncated&lt;/b&gt;**&lt;/p&gt;

&lt;p&gt;                        org.apache.derby.impl.sql.compile.ResultColumn@1490eb5&lt;br/&gt;
                        **&lt;b&gt;truncated&lt;/b&gt;**&lt;/p&gt;

&lt;p&gt;Is this helpful? Searching backward in the printout would then reveal these subtrees fully printed.&lt;br/&gt;
Do we want a new knob to enable this, or could it be done always?&lt;/p&gt;

</comment>
                            <comment id="12680480" author="knutanders" created="Tue, 10 Mar 2009 14:40:38 +0000"  >&lt;p&gt;I think truncating already seen subtrees is a good idea as it (a) reduces the size of the printed tree and (b) makes it easier to see that two trees are actually the same one. Doing it always is fine with me. As you mentioned, the current output is often inconsistent, and I find it unlikely that anyone rely on the exact output, so I don&apos;t see a need for a knob. It is debug output, after all. If someone does need a stable, parsable output, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-791&quot; title=&quot;Expose api for printing Abstract Syntax Trees in production (non-debug) servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-791&quot;&gt;DERBY-791&lt;/a&gt; sounds like a better fit.&lt;/p&gt;</comment>
                            <comment id="12740760" author="dagw" created="Fri, 7 Aug 2009 22:56:33 +0100"  >&lt;p&gt;I have found some further issues regarding toString, treePrint and&lt;br/&gt;
printSubNodes. The comments only apply to subclasses of &lt;br/&gt;
QueryTreeNode.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some class variables&apos; value are printed with a leading &quot;&amp;lt;label&amp;gt;: &quot;&lt;br/&gt;
  in front of the value, others do not have a label, the value is&lt;br/&gt;
  printed alone. Usually, the label is the same as the class&lt;br/&gt;
  variable&apos;s name. Shouldn&apos;t this always be the case for uniformity?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some class variable labels are printed even if the values is not,&lt;br/&gt;
  in cases where the variables value is null, e.g. &quot;preJoinFL: &quot; in&lt;br/&gt;
  SelectNode. I suggest not printing in such cases to save space.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some toString methods call super.toString &lt;b&gt;before&lt;/b&gt; formatting the&lt;br/&gt;
  class&apos;s own member variables, others do it the other way around. Is&lt;br/&gt;
  there a rationale for this I wonder? Or is it just accidental? It&lt;br/&gt;
  seems the established pattern is that super be called &lt;b&gt;after&lt;/b&gt;, except&lt;br/&gt;
  for DDL operations, which always call super &lt;b&gt;first&lt;/b&gt;, so I suggest&lt;br/&gt;
  adjusting toString to those two patterns throughout.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Non-DDL classes that call super.toString first:&lt;br/&gt;
       CoalesceFunctionNode&lt;br/&gt;
       CurrentDatetimeOperatorNode&lt;br/&gt;
       SpecialFunctionNode&lt;br/&gt;
       ExtractOperatorNode&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some usages of toString terminate with a newline, most do not. I&lt;br/&gt;
  think they should either end with a newline (DDL) or newline + call&lt;br/&gt;
  to super.toString (DML). At the root (qua anchor),&lt;br/&gt;
  QueryTreeNode.toString just prints &quot;&quot;, so effectively for DML, the&lt;br/&gt;
  last thing printed will be the newline also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think all nodes should call super.toString. This could be because&lt;br/&gt;
  the author &quot;knew&quot; they are right under QueryTreeNode, and so has&lt;br/&gt;
  chosen to optimize the call away (QueryTreeNode.toString prints the&lt;br/&gt;
  empty string), or it could be an omission. I think it would be good&lt;br/&gt;
  to be consistent here, too.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Example of nodes that do not call super.toString at all:&lt;br/&gt;
       GenerationClauseNode&lt;br/&gt;
       OrderByColumn&lt;br/&gt;
       TableName&lt;/p&gt;

&lt;p&gt;  TableName is possibly an allowable exception, I think, because its&lt;br/&gt;
  toString will return a string even in insane builds, so I not sure&lt;br/&gt;
  it can tolerate a terminating newline, so I intend to not touch&lt;br/&gt;
  this.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some nodes call toString of underlying nodes in their own toString,&lt;br/&gt;
  but such subnodes should, according to the contract defined in&lt;br/&gt;
  QueryTreeNode, be handled by PrintSubNodes/TreePrint:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       DistinctNode (formats childResult)&lt;br/&gt;
       GroupByNode (formats childResult)&lt;br/&gt;
       OrderByNode (formats childResult)&lt;br/&gt;
       OrderByColumn (formats expression)&lt;/p&gt;

&lt;p&gt;  I suggest bringing such instances into line.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Vectors are handled specially. Vectors with tree elements are&lt;br/&gt;
  subclasses of QueryTreeNodeVector, which contains a generic toString&lt;br/&gt;
  method which calls toString of the elements of the vector and&lt;br/&gt;
  concatenates them. I suggest changing this to be printSubNodes and&lt;br/&gt;
  use series of calls to treePrint instead to comply with the general&lt;br/&gt;
  pattern. Subclasses which have no additional members need not&lt;br/&gt;
  override toString either.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some subclasses of QueryTreeNodeVector needlessly&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; define their own&lt;br/&gt;
  printSubNodes method. I propose to remove those:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ValueNodeList&lt;br/&gt;
       SubqueryList&lt;br/&gt;
       PredicateList&lt;br/&gt;
       FromList&lt;/p&gt;

&lt;p&gt;  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; this now inherit QueryTreeNodeVector&apos;s printSubNodes.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;One subclasses of QueryTreeNodeVector (TableElementList) rolls its&lt;br/&gt;
  own toString to print the elements. I suggest to remove this an&lt;br/&gt;
  dinstead rely on the general mechanism outlined above.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Some classes neglect to print own member variables:&lt;br/&gt;
       ResultColumnList&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some subclasses of QueryTreeNodeVector define their own treePrint&lt;br/&gt;
  method, e.g.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ResultColumnList&lt;/p&gt;

&lt;p&gt;  This seems to be a remnant from a time when ResultColumnList was not&lt;br/&gt;
  a subclass of QueryTreeNode, c.f this comment in&lt;/p&gt;

&lt;p&gt;       /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This class needs a treePrint method, even though it is not a&lt;/li&gt;
	&lt;li&gt;descendant of QueryTreeNode, because its members contain tree..&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  so I intend to remove this. &lt;/p&gt;</comment>
                            <comment id="12740961" author="dagw" created="Sat, 8 Aug 2009 21:27:02 +0100"  >&lt;p&gt;Uploading a patch that addresses these issues, derby-4087-a.  I have tried to ensure correctness by&lt;br/&gt;
making lots of manual queries and inspecting the dumped trees for readability.&lt;br/&gt;
To me the trees look more consistent and readable with the patch, but there are many changes so its quite possible&lt;br/&gt;
I made some errors in the process. If people think it&apos;s OK, further tweaks can be done later now that we have a&lt;br/&gt;
more consistent use of the patterns.&lt;br/&gt;
Since this all concerns code used used for debugging, there are presently no tests.&lt;br/&gt;
The regressions ran OK at least (hardly surprising) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12741944" author="dagw" created="Tue, 11 Aug 2009 17:31:32 +0100"  >&lt;p&gt;Attaching a bash script and a sample output which I find useful sometimes for looking at the query trees. It finds the dumped query tree(s) from a given query on derby.log and prints it on std out., and also adds helper vertical lines to help match up tree levels. If an existing database is not given, it will create a sample one on the fly with one table.&lt;/p&gt;

&lt;p&gt;Example:&lt;br/&gt;
dumpquery -pboie &apos;select * from t order by j&apos; &amp;gt; sample.log&lt;/p&gt;
</comment>
                            <comment id="12743267" author="rhillegas" created="Fri, 14 Aug 2009 17:18:21 +0100"  >&lt;p&gt;Thanks for the patch, Dag. I have tested it with the XmlTreeWalker attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-791&quot; title=&quot;Expose api for printing Abstract Syntax Trees in production (non-debug) servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-791&quot;&gt;DERBY-791&lt;/a&gt;. The two patches seem to be orthogonal so that&apos;s good!&lt;/p&gt;</comment>
                            <comment id="12744488" author="knutanders" created="Tue, 18 Aug 2009 13:58:07 +0100"  >&lt;p&gt;The sample log file looks a lot more readable than what I&apos;m used to, so a +1 from me based on visual inspection of the output! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I looked at the patch briefly, and nothing caught my attention. But perhaps a short comment to explain printedObjectsMap and getPrintedObjectsMap() would be in order. (And was there a reason for using AbstractMap in the signature instead of Map?)&lt;/p&gt;

&lt;p&gt;Looking at the sample log, I see that the output for start/stop position and qualifiers is a bit odd:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;     start position:&lt;br/&gt;
null&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;     stop position:&lt;br/&gt;
null&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;     qualifiers:&lt;br/&gt;
None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I don&apos;t think this was introduced by your patch, though, as I think I have seen similar oddities before.&lt;/p&gt;</comment>
                            <comment id="12744512" author="bryanpendleton" created="Tue, 18 Aug 2009 15:06:22 +0100"  >&lt;p&gt;The strange newline handling in the formatting of the stop and start position values is definitely&lt;br/&gt;
present in other places, such as the RUNTIMESTATISTICS displays. I believe it&apos;s part of some&lt;br/&gt;
low-level shared code which constructs string versions of the underlying qualifier objects.&lt;/p&gt;

&lt;p&gt;I think it would be nice to fix, but it&apos;s definitely present prior to this patch.&lt;/p&gt;</comment>
                            <comment id="12745730" author="dagw" created="Fri, 21 Aug 2009 00:42:31 +0100"  >&lt;p&gt;Thanks for looking at this guys.&lt;/p&gt;

&lt;p&gt;Uploading a version &quot;b&quot; which:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixes the wrong formatted Knut and Brian saw in the run-time&lt;br/&gt;
  statistics. This touches:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    RealDistinctScanStatistics.java,&lt;br/&gt;
    RealHashScanStatistics.java, &lt;br/&gt;
    RealTableScanStatistics.java&lt;br/&gt;
    StringUtil&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adds the comments Knut requested. And no, no special reason to use AbstractMap, replaced it with Map.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adds some more formatting to OrderByList, OrderByColumn and&lt;br/&gt;
  IndexColumnOrder.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I forgot to mention that this patch also adds a &quot;brief structure mode&lt;br/&gt;
  dump&quot; mode, which only prints the tree structure, e.g. thus:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        org.apache.derby.impl.sql.compile.VirtualColumnNode@4fdf11&lt;br/&gt;
        sourceColumn:               &lt;br/&gt;
            org.apache.derby.impl.sql.compile.ResultColumn@1be0369&lt;br/&gt;
            expression:                     &lt;br/&gt;
                org.apache.derby.impl.sql.compile.VirtualColumnNode@1d1fc02&lt;br/&gt;
                sourceColumn:                       &lt;br/&gt;
                    org.apache.derby.impl.sql.compile.ResultColumn@f800db&lt;br/&gt;
                    expression:                             &lt;br/&gt;
                        org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode@5364&lt;br/&gt;
                        operand:                                &lt;br/&gt;
                            org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode@162f030&lt;br/&gt;
                            operand:                                    &lt;br/&gt;
                                org.apache.derby.impl.sql.compile.ColumnReference@870e2f&lt;br/&gt;
                                source:                                         &lt;br/&gt;
                                    org.apache.derby.impl.sql.compile.ResultColumn@b44eb4&lt;br/&gt;
                                    expression:                                             &lt;br/&gt;
                                        org.apache.derby.impl.sql.compile.VirtualColumnNode@19b2faf&lt;br/&gt;
                                        sourceColumn:                                               &lt;br/&gt;
                                            org.apache.derby.impl.sql.compile.ResultColumn@157bf4c&lt;br/&gt;
                                            expression:                                                     &lt;br/&gt;
                                            :&lt;/p&gt;

&lt;p&gt;I am not sure this is has much value. The brief mode is enabled by&lt;br/&gt;
-Dderby.debug.true=DumpBrief. I&apos;ll take it out if people think this is&lt;br/&gt;
unnecessary cruft. I find it useful to get an overview sometimes. It&lt;br/&gt;
does show shared (aliased) nodes as in the normal mode.&lt;/p&gt;</comment>
                            <comment id="12748445" author="dagw" created="Thu, 27 Aug 2009 18:03:59 +0100"  >&lt;p&gt;Committed patch &quot;b&quot; as svn 808523. I&apos;ll keep it open for a while in case we need adjustments.&lt;/p&gt;
</comment>
                            <comment id="12748550" author="dagw" created="Thu, 27 Aug 2009 21:16:07 +0100"  >&lt;p&gt;Temporarily rolled back changes to the result set statistics printing due to broken masters in old harness lang suite:&lt;/p&gt;

&lt;p&gt; java/engine/org/apache/derby/impl/sql/execute/rts/RealDistinctScanStatistics.java&lt;br/&gt;
 java/engine/org/apache/derby/impl/sql/execute/rts/RealHashScanStatistics.java&lt;br/&gt;
 java/engine/org/apache/derby/impl/sql/execute/rts/RealTableScanStatistics.java&lt;/p&gt;

&lt;p&gt;svn revision 808601. Will make a new patch with modified masters to match the printing improvements.&lt;/p&gt;
</comment>
                            <comment id="12748779" author="knutanders" created="Fri, 28 Aug 2009 11:59:51 +0100"  >&lt;p&gt;This broke the Tinderbox build, as java.util.regex cannot be used in engine code (the package is not part of Foundation Profile 1.1).&lt;br/&gt;
&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/UpdateInfo/808657-buildDetails.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/UpdateInfo/808657-buildDetails.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12748887" author="dagw" created="Fri, 28 Aug 2009 17:33:32 +0100"  >&lt;p&gt;Reverted the use of java.util.regex in StringUtil.java, as svn 808945.&lt;/p&gt;</comment>
                            <comment id="12749211" author="dagw" created="Sun, 30 Aug 2009 00:54:29 +0100"  >&lt;p&gt;Uploading aother patch for this issue, which re-introduces the changes that had to be rolled back.&lt;br/&gt;
derby-4087-statistics fixes the formatting errors seen by Knut and Bryan. Since I could not&lt;br/&gt;
use java.util.regexp, I hand-coded three patterns in StringUtil.java this time around.&lt;br/&gt;
The reason for all this text massaging is that the qualifiers are pre-formatted before the output indentation level is knows, which lead to the weird formatting seen. The new method&lt;br/&gt;
StringUtil.ensureIndent fixes that problem.&lt;/p&gt;

&lt;p&gt;I had to modify many old harness test masters, but now they all look nicer at least &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regressions passed ok.&lt;/p&gt;</comment>
                            <comment id="12749527" author="dagw" created="Mon, 31 Aug 2009 16:48:11 +0100"  >&lt;p&gt;Committed follow-up patch derby-4087-statistics as svn 809632 on trunk.&lt;/p&gt;</comment>
                            <comment id="12749662" author="dagw" created="Mon, 31 Aug 2009 23:37:01 +0100"  >&lt;p&gt;Closing this issue now, since I have put in all the changes I intended. I am sure there are more formatting improvements that could be made, though. If/when we feel the need, we could re-open this issue, or a file new one.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12415960" name="derby-4087-a.diff" size="41960" author="dagw" created="Sat, 8 Aug 2009 21:27:02 +0100"/>
                            <attachment id="12415961" name="derby-4087-a.stat" size="2974" author="dagw" created="Sat, 8 Aug 2009 21:27:02 +0100"/>
                            <attachment id="12417194" name="derby-4087-b.diff" size="53905" author="dagw" created="Fri, 21 Aug 2009 00:42:31 +0100"/>
                            <attachment id="12417195" name="derby-4087-b.stat" size="3601" author="dagw" created="Fri, 21 Aug 2009 00:42:31 +0100"/>
                            <attachment id="12418078" name="derby-4087-statistics.diff" size="821199" author="dagw" created="Sun, 30 Aug 2009 00:54:29 +0100"/>
                            <attachment id="12418079" name="derby-4087-statistics.stat" size="1994" author="dagw" created="Sun, 30 Aug 2009 00:54:29 +0100"/>
                            <attachment id="12416219" name="dumpquery" size="2391" author="dagw" created="Tue, 11 Aug 2009 17:43:29 +0100"/>
                            <attachment id="12416216" name="sample.log" size="27119" author="dagw" created="Tue, 11 Aug 2009 17:31:32 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 10 Mar 2009 14:40:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31125</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rtr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38326</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>