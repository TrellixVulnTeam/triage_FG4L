<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:45:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4071/DERBY-4071.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4071] AssertFailure when selecting rows from a table with CHARACTER and VARCHAR columns</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4071</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When running a complex query on this table:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
Create table DEMO.TEST (&lt;br/&gt;
    CHR                            CHARACTER(26)                   ,&lt;br/&gt;
    VCHR                           VARCHAR(25)                     )&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;then I get this exception:&lt;/p&gt;

&lt;p&gt;AssertFailure: ASSERT FAILED col1.getClass() (class ...SQLChar) expected to be the same as col2.getClass() (class ....SQLVarchar)&apos; was thrown while evaluating an expression.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12415595">DERBY-4071</key>
            <summary>AssertFailure when selecting rows from a table with CHARACTER and VARCHAR columns</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="digulla">Aaron Digulla</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Feb 2009 16:09:25 +0000</created>
                <updated>Mon, 5 Jul 2010 17:58:54 +0100</updated>
                            <resolved>Thu, 19 Mar 2009 15:45:45 +0000</resolved>
                                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12676688" author="digulla" created="Wed, 25 Feb 2009 16:10:41 +0000"  >&lt;p&gt;Testcase which demonstrates the behavior&lt;/p&gt;</comment>
                            <comment id="12676689" author="digulla" created="Wed, 25 Feb 2009 16:11:27 +0000"  >&lt;p&gt;This is the query:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
SELECT *&lt;br/&gt;
FROM DEMO.TEST S&lt;br/&gt;
WHERE S.VCHR IN (&lt;br/&gt;
        SELECT   VCHR&lt;br/&gt;
        FROM     DEMO.TEST&lt;br/&gt;
        GROUP BY VCHR&lt;br/&gt;
        HAVING   COUNT (VCHR) &amp;gt; 1 &lt;br/&gt;
)&lt;br/&gt;
  AND CHR NOT IN (&lt;br/&gt;
        SELECT   MAX(CHR)&lt;br/&gt;
        FROM     DEMO.TEST T&lt;br/&gt;
        WHERE    S.VCHR = T.VCHR&lt;br/&gt;
        GROUP BY T.VCHR&lt;br/&gt;
        HAVING   COUNT(T.VCHR) &amp;gt; 1  &lt;br/&gt;
)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When you swap the two columns, the errors goes away.&lt;/p&gt;

&lt;p&gt;My problem: I&apos;m using Derby to replicate a legacy DB2 database in my unit tests so I can create patches for an existing system. Therefore, I&apos;d like to have a solution for Derby 10.4.2.0 instead of swapping the columns. Is there a chance for a quick fix?&lt;/p&gt;</comment>
                            <comment id="12676705" author="bryanpendleton" created="Wed, 25 Feb 2009 16:56:07 +0000"  >&lt;p&gt;I&apos;m not sure what you mean by &quot;swap the two columns&quot;. Can you explain further?&lt;/p&gt;

&lt;p&gt;Also, have you experimented with using CAST() to make the data type conversion more explicit?&lt;/p&gt;</comment>
                            <comment id="12676736" author="digulla" created="Wed, 25 Feb 2009 18:43:27 +0000"  >&lt;p&gt;I mean: Make VCHR the first column and CHR the second. Just download the test case, copy it into your Derby project and run it. It contains a &quot;good&quot; case and a &quot;bad&quot; case.&lt;/p&gt;</comment>
                            <comment id="12676759" author="bryanpendleton" created="Wed, 25 Feb 2009 20:15:46 +0000"  >&lt;p&gt;Thanks, I see what you mean now.&lt;/p&gt;

&lt;p&gt;And, it fails for me, so thanks very much for the test case!&lt;/p&gt;

&lt;p&gt;I&apos;m afraid I don&apos;t know what&apos;s wrong, though.&lt;/p&gt;</comment>
                            <comment id="12676912" author="digulla" created="Thu, 26 Feb 2009 08:21:13 +0000"  >&lt;p&gt;Good. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Is it broken in 10.5, too?&lt;/p&gt;

&lt;p&gt;I&apos;ve found another version that works:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;br/&gt;
        sql =   &quot;SELECT *\r\n&quot; + &lt;br/&gt;
                &quot;FROM DEMO.TEST2 S\r\n&quot; + &lt;br/&gt;
                &quot;WHERE S.VCHR IN (\r\n&quot; + &lt;br/&gt;
                &quot;        SELECT   VCHR\r\n&quot; + &lt;br/&gt;
                &quot;        FROM     DEMO.TEST2\r\n&quot; + &lt;br/&gt;
                &quot;        GROUP BY VCHR\r\n&quot; + &lt;br/&gt;
                &quot;        HAVING   COUNT (VCHR) &amp;gt; 1 \r\n&quot; + &lt;br/&gt;
                &quot;)\r\n&quot; + &lt;br/&gt;
                &quot;  AND S.CHR NOT IN (\r\n&quot; + // Table S&lt;br/&gt;
                &quot;        SELECT   MAX(T.CHR)\r\n&quot; +  // Table T&lt;br/&gt;
                &quot;        FROM     DEMO.TEST2 T\r\n&quot; + &lt;br/&gt;
                &quot;        WHERE    S.VCHR = T.VCHR\r\n&quot; + &lt;br/&gt;
                &quot;        GROUP BY T.VCHR\r\n&quot; + &lt;br/&gt;
                &quot;        HAVING   COUNT(T.VCHR) &amp;gt; 1  \r\n&quot; + &lt;br/&gt;
                &quot;)&quot;;&lt;br/&gt;
        i = dump (sql);&lt;br/&gt;
        assertEquals (1, i);&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;code&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Change: I prefix every CHR column with the table alias. It seems that Derby somehow mixes the columns in the second sub-SELECT.&lt;/p&gt;</comment>
                            <comment id="12676916" author="digulla" created="Thu, 26 Feb 2009 08:36:07 +0000"  >&lt;p&gt;Update: The quick fix doesn&apos;t work with my more complex real table. But it might get you on the right track.&lt;/p&gt;</comment>
                            <comment id="12677993" author="knutanders" created="Mon, 2 Mar 2009 14:23:03 +0000"  >&lt;p&gt;One possible &quot;quick fix&quot; may be to use the production jar files instead of the debug jar files, as the production jars don&apos;t have the assertions.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if the assert failure exposes a bug or if it&apos;s just the assert that is too strict, but this comment indicates that the one who added the assert wasn&apos;t completely convinced that it was checking the right thing:&lt;/p&gt;

&lt;p&gt;	/**&lt;br/&gt;
	Check that the columns in the row agree with the columns&lt;br/&gt;
	in the template, both in number and in type.&lt;br/&gt;
	&amp;lt;p&amp;gt;&lt;br/&gt;
	XXX (nat) Currently checks that the classes implementing&lt;br/&gt;
	each column are the same &amp;#8211; is this right?&lt;br/&gt;
	**/&lt;/p&gt;</comment>
                            <comment id="12678005" author="digulla" created="Mon, 2 Mar 2009 15:05:46 +0000"  >&lt;p&gt;In this case, I think it&apos;s unearthing something. If you look at my example, then I&apos;m only comparing columns of the same type, so why is Derby comparing CHAR and VARCHAR internally? This looks like a column mixup.&lt;/p&gt;

&lt;p&gt;Or maybe the MAX() casts CHAR to VARCHAR? But why would it do that? Does it also cast INT to LONG? etc.&lt;/p&gt;
</comment>
                            <comment id="12678016" author="bryanpendleton" created="Mon, 2 Mar 2009 15:18:08 +0000"  >&lt;p&gt;I suspect you&apos;re right Aaron, it&apos;s some sort of a column mixup. During compilation, Derby&lt;br/&gt;
converts table and column references from their string form in the SQL text into an&lt;br/&gt;
internal numeric form which represents columns as ordinal positions into number&lt;br/&gt;
result sets in the query plan. Some parts of this conversion are extremely tricky, and&lt;br/&gt;
there have been bugs in this area in the past.&lt;/p&gt;

&lt;p&gt;In particular, I find it interesting that your queries reference an expression in the HAVING&lt;br/&gt;
clause, and that expression does not also appear in the SELECT clause.&lt;/p&gt;

&lt;p&gt;Does it change anything if you rewrite your query so that the HAVING expression also&lt;br/&gt;
appears in the SELECT list? I think this might require you to introduce yet another level&lt;br/&gt;
of sub-selects, so that you&apos;d end up with something like:&lt;/p&gt;

&lt;p&gt;    AND CHR NOT IN ( select a from (&lt;br/&gt;
        SELECT MAX(CHR) as a, count(t.vchr) as b&lt;br/&gt;
        FROM DEMO.TEST T&lt;br/&gt;
        WHERE S.VCHR = T.VCHR&lt;br/&gt;
        GROUP BY T.VCHR&lt;br/&gt;
        HAVING COUNT(T.VCHR) &amp;gt; 1 ) )&lt;/p&gt;

</comment>
                            <comment id="12678671" author="digulla" created="Wed, 4 Mar 2009 10:09:02 +0000"  >&lt;p&gt;I tried that and I got lots of other, weird errors. I&apos;ve extended the test case.&lt;/p&gt;

&lt;p&gt;First of all, you need to give the inner select a name or the SQL won&apos;t parse.&lt;/p&gt;

&lt;p&gt;And after giving it a name, I get an error because S.VCHR is no longer known in the inner select. The final fix is this:&lt;/p&gt;

&lt;p&gt;SELECT *&lt;br/&gt;
FROM DEMO.TEST S&lt;br/&gt;
WHERE S.VCHR IN (&lt;br/&gt;
        SELECT   T1.VCHR&lt;br/&gt;
        FROM     DEMO.TEST T1&lt;br/&gt;
        GROUP BY T1.VCHR&lt;br/&gt;
        HAVING   COUNT (T1.VCHR) &amp;gt; 1 &lt;br/&gt;
)&lt;br/&gt;
  AND S.CHR NOT IN ( select x.a from (&lt;br/&gt;
        SELECT   MAX(T2.CHR) as a, COUNT(T2.VCHR) as b, T2.VCHR as c&lt;br/&gt;
        FROM     DEMO.TEST T2&lt;br/&gt;
        GROUP BY T2.VCHR&lt;br/&gt;
        HAVING   COUNT(T2.VCHR) &amp;gt; 1  &lt;br/&gt;
) as x WHERE    S.VCHR = x.c )&lt;/p&gt;

&lt;p&gt;... drumroll ... which fails with the same error.&lt;/p&gt;</comment>
                            <comment id="12678673" author="digulla" created="Wed, 4 Mar 2009 10:10:26 +0000"  >&lt;p&gt;New version of the test matching the comment &quot;Aaron Digulla - 04/Mar/09 02:09 AM&quot;&lt;/p&gt;</comment>
                            <comment id="12679825" author="dagw" created="Sat, 7 Mar 2009 04:22:31 +0000"  >&lt;p&gt;I find I can reproduce with this simpler query:&lt;/p&gt;

&lt;p&gt;&quot;SELECT * FROM DEMO.TEST S &quot; + &lt;br/&gt;
            &quot;WHERE CHR IN ( &quot; + &lt;br/&gt;
            &quot;        SELECT MAX(CHR) &quot; + &lt;br/&gt;
            &quot;        FROM DEMO.TEST T &quot; + &lt;br/&gt;
            &quot;        WHERE S.VCHR = T.VCHR &quot; + &lt;br/&gt;
            &quot;        GROUP BY T.VCHR &quot; + &lt;br/&gt;
            &quot;        HAVING COUNT(T.VCHR) &amp;gt; 1 )&quot;&lt;/p&gt;

&lt;p&gt;I notice similarities with the erroneous mapArray index in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ProjectRestrictResultSet under the GroupedAggregateResultSet&lt;br/&gt;
shares the result colum of the ##aggregate expression for COUNT&lt;br/&gt;
with the GroupedAggregateResultSet: That RC contains a VirtualColumnNode&lt;br/&gt;
which contains a column reference to the ##UnaggColumn (T.VCHR). When the&lt;br/&gt;
mapArray is contructed it picks of the virtual column id of the ##UnaggColumn (1), which&lt;br/&gt;
is wrong, since T.VCHR is column 2 in the underlying table.&lt;/p&gt;

&lt;p&gt;I upload a hack, trialPatch.diff, which makes the above sample work, to illustrate the issue.&lt;br/&gt;
Not a solution, of course &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The repro&apos;s method testAssertFailure doesn&apos;t crash now, although the&lt;br/&gt;
result assert fails: I do not get an empty result set, just looking&lt;br/&gt;
quickly at the data I think the query should return a row.&lt;/p&gt;

&lt;p&gt;The repro&apos;s test method testParsesButFails now fails with another error (ClassCastException).&lt;/p&gt;




</comment>
                            <comment id="12679826" author="dagw" created="Sat, 7 Mar 2009 04:28:36 +0000"  >&lt;p&gt;Link to relevant comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880?focusedCommentId=12639647#action_12639647&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3880?focusedCommentId=12639647#action_12639647&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12679905" author="dagw" created="Sat, 7 Mar 2009 19:18:01 +0000"  >&lt;p&gt;I found I could simplify the query still further and get the error:&lt;/p&gt;

&lt;p&gt;SELECT MAX(CHR) FROM DEMO.TEST T &lt;br/&gt;
    GROUP BY T.VCHR &lt;br/&gt;
    HAVING COUNT(T.VCHR) &amp;gt; 1&lt;/p&gt;

&lt;p&gt;Stack trace extract:&lt;br/&gt;
.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)&lt;br/&gt;
.derby.impl.store.access.sort.MergeSort.checkColumnTypes(MergeSort.java:471)&lt;br/&gt;
.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:98)&lt;br/&gt;
.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter(GroupedAggregateResultSet.java:308)&lt;br/&gt;
.derby.impl.sql.execute.GroupedAggregateResultSet.openCore(GroupedAggregateResultSet.java:180)&lt;br/&gt;
.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:245)&lt;br/&gt;
.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;/p&gt;

&lt;p&gt;Just wanted to add a little more detail, my previous comment was too&lt;br/&gt;
brief, I was getting sleepy &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The inputRow from the underlying ProjectRestrictResultSet has wrong&lt;br/&gt;
type for ##aggregate expression for the count aggregator: CHR in stead&lt;br/&gt;
of VCHAR, due to the mapArray containing the wrong virtual column (1)&lt;br/&gt;
instead of 2, due to wrong contents in mapArray&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; used by&lt;br/&gt;
ProjectRestrictNode ca line 1422, to set up the referenced column&lt;br/&gt;
descriptor for runtime. This is picked up by ProjectRestrictResultSet,&lt;br/&gt;
ca line 107 with the call to getReferencedColumnPositions.&lt;/p&gt;

&lt;p&gt;These two lines in ProjectRestrictNode:&lt;/p&gt;

&lt;p&gt;		// Map the result columns to the source columns&lt;br/&gt;
		int[] mapArray = resultColumns.mapSourceColumns();&lt;/p&gt;

&lt;p&gt;pick up the virtual column ids from ProjectRestrictNode#resultColumns.&lt;br/&gt;
The third of those (index 2), the ##aggregate expression for COUNT, is&lt;br/&gt;
the one I referred to in my previous post.&lt;/p&gt;

&lt;p&gt;It seems it is the fact that the aggregator input expression (for COUNT) is also the column&lt;br/&gt;
we group by (a.k.a. ##UnaggColumn), which is the root of the problem here.. What do you think?&lt;br/&gt;
The group by rewriting is tricky..&lt;/p&gt;



</comment>
                            <comment id="12679907" author="dagw" created="Sat, 7 Mar 2009 19:34:35 +0000"  >&lt;p&gt;The following works, so it seems the HAVING clause&lt;br/&gt;
is needed for the problem to surface:&lt;/p&gt;

&lt;p&gt;SELECT MAX(CHR), COUNT(T.VCHR) FROM DEMO.TEST T &lt;br/&gt;
     GROUP BY T.VCHR&lt;/p&gt;</comment>
                            <comment id="12679920" author="knutanders" created="Sat, 7 Mar 2009 22:47:00 +0000"  >&lt;p&gt;Great research, Dag! For the record, I ran some tests and found out that the assert failure first appeared when the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt; went in.&lt;/p&gt;</comment>
                            <comment id="12679927" author="kmarsden" created="Sat, 7 Mar 2009 23:46:51 +0000"  >&lt;p&gt;Marking as regression. Knut found that this was introduced with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12680383" author="dagw" created="Tue, 10 Mar 2009 05:52:15 +0000"  >&lt;p&gt;I upload a patch, derby-4071, which solves the immediate problem, I&lt;br/&gt;
think. Running regressions now.&lt;/p&gt;

&lt;p&gt;It contains a patch to GroupByNode as well as a new test case for&lt;br/&gt;
GroupByTest.&lt;/p&gt;

&lt;p&gt;It essentially defers the replacement of group by expressions in the&lt;br/&gt;
having clause with pointers to the appropriate result column in the&lt;br/&gt;
group by node. The replacement used to happen at the end of&lt;br/&gt;
GroupByNode#addUnAggColumns. The patch moves substitution to after the&lt;br/&gt;
call to GroupByNode#addAggregateColumns has been performed. &lt;/p&gt;

&lt;p&gt;Explanation of the error&lt;br/&gt;
-----------------------&lt;/p&gt;

&lt;p&gt;The substitution is done by a SubstituteExpressionVisitor, which&lt;br/&gt;
replaces all occurences of the group by expression as described&lt;br/&gt;
above. In our case, however, this group by expression is an argument&lt;br/&gt;
to an aggregate function, so the having clause contains an&lt;br/&gt;
AggregateNode whose operand is the group by column. When the visitor&lt;br/&gt;
gets there, the aggregate node&apos;s operand is replaced as described,&lt;br/&gt;
cf. UnaryOperatorNode#accept (AggregateNode is a subclass).&lt;/p&gt;

&lt;p&gt;There is a snag, however. This AggregateNode is aliased by the&lt;br/&gt;
aggregateNode we find in GroupByNode#aggregateVector. And we are not&lt;br/&gt;
done with using the information in aggregateVector yet when&lt;br/&gt;
addUnAggColumns has run.&lt;/p&gt;

&lt;p&gt;Notably, in addAggregateColumns, the information on the aggregates are&lt;br/&gt;
needed, and the substitution described above gets in the way:&lt;/p&gt;

&lt;p&gt;When constructing the aggregate expression (input) columns, there is a&lt;br/&gt;
call to &lt;/p&gt;

&lt;p&gt;     aggregate.getNewExpressionResultColumn(dd)&lt;/p&gt;

&lt;p&gt;This uses the operand field of the AggregateNode, whose value has just&lt;br/&gt;
been replaced for the purposes of the having clause. So, we end up&lt;br/&gt;
with a result column for aggregate expression which is wrong. The &lt;br/&gt;
result column list of GroupByNode ends up looking like this:&lt;/p&gt;

&lt;p&gt;RCL (result column list) &lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;: #UnaggColumn (the group by column)&lt;br/&gt;
      \&lt;br/&gt;
       CR&lt;br/&gt;
        \&lt;br/&gt;
        RC&lt;br/&gt;
          \&lt;br/&gt;
          VCN&lt;br/&gt;
            \&lt;br/&gt;
            RC (basetable)&lt;/p&gt;


&lt;p&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: ##aggregate result&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;: ##aggregate expression&lt;br/&gt;
      \&lt;br/&gt;
      CR&lt;br/&gt;
       \&lt;br/&gt;
       RC&lt;br/&gt;
         \&lt;br/&gt;
         VCN&lt;br/&gt;
           \&lt;br/&gt;
           RCL&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; above, &lt;b&gt;error&lt;/b&gt; That is, the RC of the group by node!&lt;/p&gt;

&lt;p&gt;   &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;: aggregator&lt;/p&gt;


&lt;p&gt;If things were OK we would expect to see:&lt;/p&gt;


&lt;p&gt;RCL&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;: #UnaggColumn (the group by column)&lt;br/&gt;
       \&lt;br/&gt;
        :&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: ##aggregate result&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;: ##aggregate expression&lt;br/&gt;
      \&lt;br/&gt;
      CR&lt;br/&gt;
       \&lt;br/&gt;
       RC (underlying ProjectRestrict)&lt;br/&gt;
         \&lt;br/&gt;
         CR         &lt;br/&gt;
           \&lt;br/&gt;
           RC (bottom ProjectRestrict)&lt;br/&gt;
            \&lt;br/&gt;
            VCN &lt;br/&gt;
              \&lt;br/&gt;
              RC (basetable)&lt;br/&gt;
   &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;: aggregator&lt;/p&gt;

&lt;p&gt;In the the underlying ProjectRestrictNode, which needs to set up the&lt;br/&gt;
mapArray to locate the correct column in the underlying base&lt;br/&gt;
table, this creates havoc:&lt;/p&gt;

&lt;p&gt;The underlying PRN calls RCL.mapSourceColumns for every RC in the&lt;br/&gt;
ProjectRestrictNode&apos;s RCL (strip off a CR-RC level from GroupByNode&apos;s&lt;br/&gt;
RCL to picture ProjectRestrictNode&apos;s RCL).&lt;/p&gt;

&lt;p&gt;mapSourceColumns extracts the virtual column id from a CR or a VCN. For&lt;br/&gt;
column 2 of the underlying ProjectRestrictNode, it sees&lt;/p&gt;

&lt;p&gt;      &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;:&lt;br/&gt;
         \&lt;br/&gt;
         VCN&lt;br/&gt;
           \&lt;br/&gt;
           RCL&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and there it finds the virtual column number of 1, where we should&lt;br/&gt;
have seen:&lt;/p&gt;

&lt;p&gt;      &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;:&lt;br/&gt;
         \&lt;br/&gt;
         CR         &lt;br/&gt;
           \&lt;br/&gt;
           RC&lt;br/&gt;
            \&lt;br/&gt;
            VCN&lt;br/&gt;
              \&lt;br/&gt;
              RC (basetable)&lt;/p&gt;

&lt;p&gt;and found the virtual column number 2. &lt;/p&gt;

&lt;p&gt;With the patch, the RCLs end up as expected and the repro works.&lt;/p&gt;

&lt;p&gt;Since the substitution &quot;damages&quot; the AggregateNode in the&lt;br/&gt;
aggregateVector, it struck me that any later usage might also be&lt;br/&gt;
affected, even with the patch. The aggregateVector is actually being&lt;br/&gt;
used again later, in considerPostOptimizeOptimizations. However, that&lt;br/&gt;
code only runs if there is no explicit group by, and max 1 aggregate&lt;br/&gt;
function which must be max/min, so I am not sure if this would ever be&lt;br/&gt;
an issue. And if so, it would only bar an optimization, not give a&lt;br/&gt;
wrong result...&lt;/p&gt;</comment>
                            <comment id="12680464" author="digulla" created="Tue, 10 Mar 2009 13:54:59 +0000"  >&lt;p&gt;Thanks for the patch! I&apos;ve successfully applied it to the official 10.4.2.0 release (only the GroupByNode.java; the tests fail) and my application works now!&lt;/p&gt;

&lt;p&gt;Do I have to close this bug as resolved?&lt;/p&gt;</comment>
                            <comment id="12680475" author="kristwaa" created="Tue, 10 Mar 2009 14:36:10 +0000"  >&lt;p&gt;Normally the developer resolves the issue when he/she, or the community, feels that the issue has been properly addressed.&lt;br/&gt;
Then the reporter should verify the fix and close the issue if the problem is no longer seen.&lt;br/&gt;
This isn&apos;t a strict process, but what happens most of the time.&lt;/p&gt;

&lt;p&gt;As far as I understand, you have already verified that the patch fixes the problem you experienced, but I&apos;m not sure if Dag is done working on this issue yet. The code hasn&apos;t been committed to neither the trunk nor the 10.4 branch.&lt;br/&gt;
My opinion is that it is a little early to declare victory, but your feedback on the patch is very welcome and may speed up the process &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to report bugs and testing out patches!&lt;/p&gt;</comment>
                            <comment id="12680519" author="dagw" created="Tue, 10 Mar 2009 15:55:51 +0000"  >&lt;p&gt;Regressions passed; please review.&lt;/p&gt;</comment>
                            <comment id="12680520" author="dagw" created="Tue, 10 Mar 2009 15:59:44 +0000"  >&lt;p&gt;Thanks for testing the patch, Aaron! Glad it works for 10.4.2 branch also, I didn&apos;t get to test that yet.&lt;br/&gt;
I will probably back-port the final patch  to the 10.4 branch also.&lt;/p&gt;</comment>
                            <comment id="12680529" author="bryanpendleton" created="Tue, 10 Mar 2009 16:36:37 +0000"  >&lt;p&gt;Hi Dag, thanks for the very thorough writeup and notes. Your analysis makes a lot of sense to me.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering: with your patch, do we still need the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt; patch? That is,&lt;br/&gt;
what happens if you apply your patch, and &lt;b&gt;undo&lt;/b&gt; the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt; patch? Do the&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4071&quot; title=&quot;AssertFailure when selecting rows from a table with CHARACTER and VARCHAR columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4071&quot;&gt;&lt;del&gt;DERBY-4071&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt; test cases then pass? Or do we actually need both&lt;br/&gt;
patches to get the column references in the HAVING clause expressions to be&lt;br/&gt;
mapped correctly?&lt;/p&gt;</comment>
                            <comment id="12680544" author="dagw" created="Tue, 10 Mar 2009 17:31:01 +0000"  >&lt;p&gt;Thanks for looking at the patch, Bryan! The &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt; patch is still needed, I find;&lt;br/&gt;
without it the test case testHavingWithInnerJoinDerby3880 starts failing again.&lt;/p&gt;
</comment>
                            <comment id="12680710" author="dagw" created="Wed, 11 Mar 2009 00:44:04 +0000"  >&lt;p&gt;I have read through &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3880&quot; title=&quot;NPE on a query with having clause involving a join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3880&quot;&gt;&lt;del&gt;DERBY-3880&lt;/del&gt;&lt;/a&gt; and also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3094&quot; title=&quot;Grouping of expressions causes NullPointerException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3094&quot;&gt;&lt;del&gt;DERBY-3094&lt;/del&gt;&lt;/a&gt; and managed to convince myself&lt;br/&gt;
that the current issue is related but separate, for what it&apos;s worth. Thanks for the suggestion, Bryan.&lt;br/&gt;
I wish I had read both those issues (nice write-ups!) better before undertaking this one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12682115" author="dagw" created="Sun, 15 Mar 2009 01:31:40 +0000"  >&lt;p&gt;Committed this patch as svn 754579 on trunk.&lt;/p&gt;
</comment>
                            <comment id="12683491" author="dagw" created="Thu, 19 Mar 2009 15:44:07 +0000"  >&lt;p&gt;Committed derby-4071-10_4 to the 10.4 branch as svn 756052 (It is a simple merge,&lt;br/&gt;
but the svn merge command didn&apos;t give a clean result this time, so I upload an explicit patch),&lt;br/&gt;
resolving.&lt;/p&gt;</comment>
                            <comment id="12683492" author="dagw" created="Thu, 19 Mar 2009 15:45:45 +0000"  >&lt;p&gt;Fixed on 10.4, 10.5 and trunk, so resolving. Aaron, feel free to close the issue now.&lt;/p&gt;</comment>
                            <comment id="12683594" author="digulla" created="Thu, 19 Mar 2009 20:05:29 +0000"  >&lt;p&gt;Thanks again for the quick fix!&lt;/p&gt;</comment>
                            <comment id="12780834" author="dagw" created="Fri, 20 Nov 2009 23:33:02 +0000"  >&lt;p&gt;This bug is also seen in 10.3 (feel free to reopen and backport if desired).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12426302">DERBY-4247</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12325311">DERBY-681</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12426302">DERBY-4247</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12401394" name="DerbyTest.java" size="9167" author="digulla" created="Wed, 4 Mar 2009 10:10:26 +0000"/>
                            <attachment id="12402580" name="derby-4071-10_4.diff" size="4744" author="dagw" created="Thu, 19 Mar 2009 15:44:07 +0000"/>
                            <attachment id="12402581" name="derby-4071-10_4.stat" size="156" author="dagw" created="Thu, 19 Mar 2009 15:44:07 +0000"/>
                            <attachment id="12401806" name="derby-4071.diff" size="4895" author="dagw" created="Tue, 10 Mar 2009 05:52:15 +0000"/>
                            <attachment id="12401807" name="derby-4071.stat" size="156" author="dagw" created="Tue, 10 Mar 2009 05:52:15 +0000"/>
                            <attachment id="12401673" name="trialPatch.diff" size="1575" author="dagw" created="Sat, 7 Mar 2009 04:23:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Feb 2009 16:56:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24007</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0py7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38022</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>