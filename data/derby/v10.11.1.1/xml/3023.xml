<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:18:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3023/DERBY-3023.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3023] Different result rows depending on the sequence of INNER JOIN and OUTER JOIN</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3023</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;We have a complex SQL joining 11 Tables via INNER JOIN and OUTER JOIN.&lt;br/&gt;
These SQLs were tested against an z/OS DB2 Version 8.&lt;br/&gt;
After moving to our local platform with Derby we found out the resultsets returned by the SQLs were too less.&lt;/p&gt;

&lt;p&gt;I tested our &quot;old style&quot; SQL which results in 889 rows.&lt;br/&gt;
Our new style SQL expected to give similar rows but gives &lt;b&gt;0&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;After some work we found a workaround: first place all the &quot;INNER JOIN&quot;s in the SQL and then the &quot;OUTER JOIN&quot;s.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;Result of testprogram&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Derby=10.3-b561794
Test 10.3-b561794-old-style-sql
889 Rows in 1703ms
Test 10.3-b561794-&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;-style-sql
0 Rows in 563ms  _(expected 924 rows instead)_
Test 10.3-b561794-&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;-style-sql-only-&lt;span class=&quot;code-keyword&quot;&gt;inner&lt;/span&gt;
2 Rows in 766ms _(only &lt;span class=&quot;code-keyword&quot;&gt;inner&lt;/span&gt; joins, no &lt;span class=&quot;code-keyword&quot;&gt;outer&lt;/span&gt; joins but larger result)_
Test 10.3-b561794-&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;-style-sql_first-&lt;span class=&quot;code-keyword&quot;&gt;inner&lt;/span&gt;-joins
924 Rows in 578ms
Test 10.3-b561794-&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;-style-sql_without-condition
924 Rows in 438ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here our initial used SQL:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;SQL giving wrong result (0 rows)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SELECT O4Work.ESVN01.NU_BUY_CPY AS PO_BuyCompanyNo, O4Work.ESVN01.NU_ODR AS PO_Number, O4Work.ESVN01.FL_ODR_CAE AS PO_Type, O4Work.ESVN01.NU_MCS_SPY AS PO_SupplierNo, O4Work.ESVN01.NU_ST3 AS PO_StatusNo, O4Work.ESVN01.DA_SPY_COY_PRT AS PO_SCPrintDate, O4Work.ESVN01.FL_SAS AS PO_SeasFlag, CASE WHEN (SELECT COUNT(O4Work.ESVNA5.ID_PTE) FROM O4Work.ESVNA5 WHERE O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVNA5.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVNA5.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVNA5.NU_PST) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS POPA_PictureID, CASE WHEN (SELECT COUNT(O4Work.ESVNG3.NU_ODR) FROM O4Work.ESVNG3 WHERE O4Work.ESVN01.NU_BUY_CPY = O4Work.ESVNG3.NU_BUY_CPY AND O4Work.ESVN01.NU_ODR = O4Work.ESVNG3.NU_ODR) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS ON_ID, O4Work.ESVN02.NU_PST AS POP_Position_Id, O4Work.ESVN02.NU_CTT AS POP_ContractNo, O4Work.ESVN02.NU_ARO_CTT AS POP_ArosContractNo, O4Work.ESVN02.NU_ST3 AS POP_StatusNo, O4Work.ESVN02.DA_CAE AS POP_CreationDate, O4Work.ESVN02.DA_LAT_AMD AS POP_LastAmendDate, O4Work.ESVNA0.NU_SSN_IDE AS POPD_SeasonInd,  O4Work.ESVNA0.NU_STL_ID1 AS POPD_StyleId, O4Work.ESVNA0.NU_SRY_ID1 AS POPD_StoryID, O4Work.ESVNA0.NU_LC1 AS POPD_LicenseID, O4Work.ESVP00.NU_CSY AS SER_ClassNo, O4Work.ESVP00.NU_COE AS SER_CodeNo, O4Work.ESVP00.NU_SRL AS SER_SerialNo, O4Work.ESVP00.NU_PIK_MOD AS SER_PickingM, O4Work.ESVN03.NU_MT1_CPY AS POPC_MasterCpyNo, O4Work.ESVN03.QU_ODR AS POPC_OrderedQty, O4Work.ESVN03.DA_EDD AS POPC_Edd, O4Work.ESVN03.DA_LDD AS POPC_Ldd, O4Work.ESVN03.DA_PAD AS POPC_Pad, O4Work.ESVN03.DA_SAD AS POPC_Sad, O4Work.ESVN03.PR_SCP AS POPC_SupCstPrice, O4Work.ESVN03.NU_SCP_CR1 AS POPC_SupCstPrCurr, O4Work.ESVN03.NU_ST3 AS POPC_StatusNo, O4Work.ESVN03.NU_COY_FRM_ODR AS POPC_Src_PO_Number, O4Work.ESVN03.NU_COY_UTL_ODR AS POPC_Tgt_PO_Number, O4Work.ESVN03.DA_FLR_RDY AS POPC_FRM_DATE, O4Work.ESVN03.FL_CSG AS POPC_CS_FLAG, O4Work.ESVN03.NU_PAK_MOD_SPY AS POPC_PackSupplNo, O4Work.ESVN03.NU_PAK_MOD_DCR AS POPC_PackingDCNo, O4Work.ESVN03.NU_PS2_MOD AS POPC_PresMethodNo, O4Work.ESVN04.NU_RTL_CPY AS POPRC_RetailCode, O4Work.ESVN04.PR_PLN_SEL AS POPRC_SellPrice, O4Work.ESVN04.NU_PLN_SEL_PRC_CR1 AS POPRC_SellPrCurr, O4Work.ESVN08.NU_AVE AS POPRCA_AdvertNo, O4Work.ESVQ00.ID_SHP AS SHP_ShippingID, O4Work.ESVQ00.NU_SHP AS SHP_ShippingNo, O4Work.ESVNB0.NU_NTL_PDE_ID1 AS POPDC_NationalID, O4Work.ESVNB0.NU_EQP AS POPDC_EquipNumber, O4Work.ESVNE1.PE_OMU AS POPCC_OMU, CASE WHEN (SELECT COUNT(O4Work.ESVN07.NU_ODR) FROM O4Work.ESVN07 WHERE O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVN07.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVN07.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVN07.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVN07.NU_PST AND O4Work.ESVN07.FL_ALE_RMK = &apos;Y&apos;) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS POPCU_AllocRem FROM O4Work.ESVN02 
INNER JOIN O4Work.ESVN01 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVN01.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVN01.NU_ODR 
INNER JOIN O4Work.ESVNA0 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVNA0.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVNA0.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVNA0.NU_PST 
INNER JOIN O4Work.ESVP00 ON O4Work.ESVNA0.ID_SRL = O4Work.ESVP00.ID_SRL 
LEFT OUTER JOIN O4Work.ESVNA4 ON O4Work.ESVNA0.NU_BUY_CPY = O4Work.ESVNA4.NU_BUY_CPY AND O4Work.ESVNA0.NU_ODR = O4Work.ESVNA4.NU_ODR AND O4Work.ESVNA0.NU_PST = O4Work.ESVNA4.NU_PST 
INNER JOIN O4Work.ESVN03 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVN03.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVN03.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVN03.NU_PST 
LEFT OUTER JOIN O4Work.ESVN04 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVN04.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVN04.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVN04.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVN04.NU_PST 
LEFT OUTER JOIN O4Work.ESVN08 ON O4Work.ESVN04.NU_BUY_CPY = O4Work.ESVN08.NU_BUY_CPY AND O4Work.ESVN04.NU_RTL_CPY = O4Work.ESVN08.NU_RTL_CPY AND O4Work.ESVN04.NU_MT1_CPY = O4Work.ESVN08.NU_MT1_CPY AND O4Work.ESVN04.NU_ODR = O4Work.ESVN08.NU_ODR AND O4Work.ESVN04.NU_PST = O4Work.ESVN08.NU_PST 
INNER JOIN O4Work.ESVQ00 ON O4Work.ESVN03.ID_SHP = O4Work.ESVQ00.ID_SHP 
INNER JOIN O4Work.ESVNB0 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVNB0.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVNB0.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVNB0.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVNB0.NU_PST 
INNER JOIN O4Work.ESVNE1 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVNE1.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVNE1.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVNE1.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVNE1.NU_PST 
WHERE O4Work.ESVN01.NU_BUY_CPY = 99 AND O4Work.ESVNA0.NU_CPY_GRP = 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the one with moved inner joins:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;SQL giving correct result (924 rows)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SELECT O4Work.ESVN01.NU_BUY_CPY AS PO_BuyCompanyNo, O4Work.ESVN01.NU_ODR AS PO_Number, O4Work.ESVN01.FL_ODR_CAE AS PO_Type, O4Work.ESVN01.NU_MCS_SPY AS PO_SupplierNo, O4Work.ESVN01.NU_ST3 AS PO_StatusNo, O4Work.ESVN01.DA_SPY_COY_PRT AS PO_SCPrintDate, O4Work.ESVN01.FL_SAS AS PO_SeasFlag, CASE WHEN (SELECT COUNT(O4Work.ESVNA5.ID_PTE) FROM O4Work.ESVNA5 WHERE O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVNA5.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVNA5.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVNA5.NU_PST) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS POPA_PictureID, CASE WHEN (SELECT COUNT(O4Work.ESVNG3.NU_ODR) FROM O4Work.ESVNG3 WHERE O4Work.ESVN01.NU_BUY_CPY = O4Work.ESVNG3.NU_BUY_CPY AND O4Work.ESVN01.NU_ODR = O4Work.ESVNG3.NU_ODR) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS ON_ID, O4Work.ESVN02.NU_PST AS POP_Position_Id, O4Work.ESVN02.NU_CTT AS POP_ContractNo, O4Work.ESVN02.NU_ARO_CTT AS POP_ArosContractNo, O4Work.ESVN02.NU_ST3 AS POP_StatusNo, O4Work.ESVN02.DA_CAE AS POP_CreationDate, O4Work.ESVN02.DA_LAT_AMD AS POP_LastAmendDate, O4Work.ESVNA0.NU_SSN_IDE AS POPD_SeasonInd,  O4Work.ESVNA0.NU_STL_ID1 AS POPD_StyleId, O4Work.ESVNA0.NU_SRY_ID1 AS POPD_StoryID, O4Work.ESVNA0.NU_LC1 AS POPD_LicenseID, O4Work.ESVP00.NU_CSY AS SER_ClassNo, O4Work.ESVP00.NU_COE AS SER_CodeNo, O4Work.ESVP00.NU_SRL AS SER_SerialNo, O4Work.ESVP00.NU_PIK_MOD AS SER_PickingM, O4Work.ESVN03.NU_MT1_CPY AS POPC_MasterCpyNo, O4Work.ESVN03.QU_ODR AS POPC_OrderedQty, O4Work.ESVN03.DA_EDD AS POPC_Edd, O4Work.ESVN03.DA_LDD AS POPC_Ldd, O4Work.ESVN03.DA_PAD AS POPC_Pad, O4Work.ESVN03.DA_SAD AS POPC_Sad, O4Work.ESVN03.PR_SCP AS POPC_SupCstPrice, O4Work.ESVN03.NU_SCP_CR1 AS POPC_SupCstPrCurr, O4Work.ESVN03.NU_ST3 AS POPC_StatusNo, O4Work.ESVN03.NU_COY_FRM_ODR AS POPC_Src_PO_Number, O4Work.ESVN03.NU_COY_UTL_ODR AS POPC_Tgt_PO_Number, O4Work.ESVN03.DA_FLR_RDY AS POPC_FRM_DATE, O4Work.ESVN03.FL_CSG AS POPC_CS_FLAG, O4Work.ESVN03.NU_PAK_MOD_SPY AS POPC_PackSupplNo, O4Work.ESVN03.NU_PAK_MOD_DCR AS POPC_PackingDCNo, O4Work.ESVN03.NU_PS2_MOD AS POPC_PresMethodNo, O4Work.ESVN04.NU_RTL_CPY AS POPRC_RetailCode, O4Work.ESVN04.PR_PLN_SEL AS POPRC_SellPrice, O4Work.ESVN04.NU_PLN_SEL_PRC_CR1 AS POPRC_SellPrCurr, O4Work.ESVN08.NU_AVE AS POPRCA_AdvertNo, O4Work.ESVQ00.ID_SHP AS SHP_ShippingID, O4Work.ESVQ00.NU_SHP AS SHP_ShippingNo, O4Work.ESVNB0.NU_NTL_PDE_ID1 AS POPDC_NationalID, O4Work.ESVNB0.NU_EQP AS POPDC_EquipNumber, O4Work.ESVNE1.PE_OMU AS POPCC_OMU, CASE WHEN (SELECT COUNT(O4Work.ESVN07.NU_ODR) FROM O4Work.ESVN07 WHERE O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVN07.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVN07.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVN07.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVN07.NU_PST AND O4Work.ESVN07.FL_ALE_RMK = &apos;Y&apos;) = 0 THEN &apos;N&apos; ELSE &apos;Y&apos; END AS POPCU_AllocRem FROM O4Work.ESVN02 
INNER JOIN O4Work.ESVN01 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVN01.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVN01.NU_ODR 
INNER JOIN O4Work.ESVNA0 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVNA0.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVNA0.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVNA0.NU_PST 
INNER JOIN O4Work.ESVP00 ON O4Work.ESVNA0.ID_SRL = O4Work.ESVP00.ID_SRL 
INNER JOIN O4Work.ESVN03 ON O4Work.ESVN02.NU_BUY_CPY = O4Work.ESVN03.NU_BUY_CPY AND O4Work.ESVN02.NU_ODR = O4Work.ESVN03.NU_ODR AND O4Work.ESVN02.NU_PST = O4Work.ESVN03.NU_PST 
INNER JOIN O4Work.ESVNB0 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVNB0.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVNB0.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVNB0.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVNB0.NU_PST 
INNER JOIN O4Work.ESVQ00 ON O4Work.ESVN03.ID_SHP = O4Work.ESVQ00.ID_SHP 
LEFT OUTER JOIN O4Work.ESVNA4 ON O4Work.ESVNA0.NU_BUY_CPY = O4Work.ESVNA4.NU_BUY_CPY AND O4Work.ESVNA0.NU_ODR = O4Work.ESVNA4.NU_ODR AND O4Work.ESVNA0.NU_PST = O4Work.ESVNA4.NU_PST 
LEFT OUTER JOIN O4Work.ESVN04 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVN04.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVN04.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVN04.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVN04.NU_PST 
LEFT OUTER JOIN O4Work.ESVN08 ON O4Work.ESVN04.NU_BUY_CPY = O4Work.ESVN08.NU_BUY_CPY AND O4Work.ESVN04.NU_RTL_CPY = O4Work.ESVN08.NU_RTL_CPY AND O4Work.ESVN04.NU_MT1_CPY = O4Work.ESVN08.NU_MT1_CPY AND O4Work.ESVN04.NU_ODR = O4Work.ESVN08.NU_ODR AND O4Work.ESVN04.NU_PST = O4Work.ESVN08.NU_PST 
INNER JOIN O4Work.ESVNE1 ON O4Work.ESVN03.NU_BUY_CPY = O4Work.ESVNE1.NU_BUY_CPY AND O4Work.ESVN03.NU_MT1_CPY = O4Work.ESVNE1.NU_MT1_CPY AND O4Work.ESVN03.NU_ODR = O4Work.ESVNE1.NU_ODR AND O4Work.ESVN03.NU_PST = O4Work.ESVNE1.NU_PST 
WHERE O4Work.ESVN01.NU_BUY_CPY = 99 AND O4Work.ESVNA0.NU_CPY_GRP = 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another curious behavior is that leaving out the condition &lt;tt&gt;O4Work.ESVNA0.NU_CPY_GRP = 0&lt;/tt&gt; in the first SQL will give us the result of 924 all having O4Work.ESVNA0.NU_CPY_GRP = 0. So evaluation of the condition is buggy, too.&lt;/p&gt;

&lt;p&gt;I think there may be a dependency between this issue and these ones:&lt;br/&gt;
&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1681&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;DERBY-1681&lt;/a&gt; (Regression (wrong results): Join predicate can be ignored for left-most child in a chain of nested unions.)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;DERBY-1633&lt;/a&gt; (Regression: The fields of views are not being calculated properly since 10.1.2.4)&lt;/p&gt;

&lt;p&gt;Attached is an Eclipse project with the Test-Program (without the Derby-Libraries) and the several RUNTIMESTATISTICS.&lt;/p&gt;</description>
                <environment>Windows XP, Java 1.4.2</environment>
        <key id="12376689">DERBY-3023</key>
            <summary>Different result rows depending on the sequence of INNER JOIN and OUTER JOIN</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="army">A B</assignee>
                                    <reporter username="trippeltrappel">Stefan Cordes</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Aug 2007 09:32:00 +0100</created>
                <updated>Tue, 25 Sep 2012 16:46:13 +0100</updated>
                            <resolved>Wed, 16 Jan 2008 16:52:15 +0000</resolved>
                                    <version>10.1.2.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12522176" author="army" created="Thu, 23 Aug 2007 16:27:10 +0100"  >&lt;p&gt;Am I right in understanding that this error (wrong results) is reproduceable with Derby 10.1.2.&lt;b&gt;1&lt;/b&gt;?&lt;/p&gt;

&lt;p&gt;If so, then that&apos;s useful information: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1681&quot; title=&quot;Regression (wrong results): Join predicate can be ignored for left-most child in a chain of nested unions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1681&quot;&gt;&lt;del&gt;DERBY-1681&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; title=&quot;Regression: The fields of views are not being calculated properly since 10.1.2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1633&quot;&gt;&lt;del&gt;DERBY-1633&lt;/del&gt;&lt;/a&gt; were regressions caused by changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt;, and the first commit for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; (there were many) went into 10.2 with svn #381859.  The first &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; changes were then ported back to the 10.1 branch with svn #396211.  But that&apos;s &lt;b&gt;after&lt;/b&gt; the 10.1.2.1 release was cut--10.1.2.1 was released at svn # 330608, per:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://db.apache.org/derby/derby_downloads.html#Archived+Official+Releases&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/derby_downloads.html#Archived+Official+Releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if this bug does actually affect 10.1.2.&lt;b&gt;1&lt;/b&gt;, then we can say with some degree of certainty that this particular Jira is &lt;b&gt;not&lt;/b&gt; a regression caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; (nor any of the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; follow-up work).  That&apos;s a good indication that the problem has been around for a while, which helps narrow down the searching field.  It is quite possible that the problem resides in the code that was changed for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1681&quot; title=&quot;Regression (wrong results): Join predicate can be ignored for left-most child in a chain of nested unions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1681&quot;&gt;&lt;del&gt;DERBY-1681&lt;/del&gt;&lt;/a&gt; and/or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; title=&quot;Regression: The fields of views are not being calculated properly since 10.1.2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1633&quot;&gt;&lt;del&gt;DERBY-1633&lt;/del&gt;&lt;/a&gt;, but it would be good to know for sure whether or not those Jiras are actually the cause, or just different problems in the same area of code.&lt;/p&gt;

&lt;p&gt;I do not have time to try to run the repro against 10.1.2.1 right now, but if you could confirm that the problem does exist there, I do think that would be helpful...&lt;/p&gt;</comment>
                            <comment id="12523555" author="trippeltrappel" created="Wed, 29 Aug 2007 13:16:00 +0100"  >&lt;p&gt;Hallo!&lt;br/&gt;
This bug does affect 10.1.2.1. Even 10.1.1.0 is affected.&lt;/p&gt;

&lt;p&gt;I tested with some of the Derby releases and all have the exactly the same (wrong) resultset depending on the join order:&lt;br/&gt;
Statement10.1.1.0 - (208786)-j1.4.2_10&lt;br/&gt;
Statement10.1.2.1 - (330608)-j1.4.2_10&lt;br/&gt;
Statement10.1.2.2 - (349064)-j1.4.2_10&lt;br/&gt;
Statement10.1.2.2 - (370021)-j1.4.2_10&lt;br/&gt;
Statement10.2.2.0 - (485682)-j1.4.2_10&lt;br/&gt;
Statement10.3.1.4 - (561794)-j1.4.2_10&lt;/p&gt;

&lt;p&gt;In addition I mixed our Joins to all possible combinations and found out e.g.&lt;br/&gt;
The join order &lt;br/&gt;
NA0-P00-NA4-N01-N03-NE1-N04-N08-NB0-Q00	gives 924 rows,&lt;br/&gt;
but &lt;br/&gt;
NA0-P00-NA4-N01-N03-NE1-N04-N08-Q00-NB0	only 0 rows.&lt;br/&gt;
(Only last to tables are switched)&lt;/p&gt;

&lt;p&gt;Comparing the statistics the sucessful SQL with Q00 as right join (Rows seen = 924)&lt;/p&gt;

&lt;p&gt;	Right result set:&lt;br/&gt;
		Hash Scan ResultSet for ESVQ00 at read committed isolation level using instantaneous share table locking: &lt;br/&gt;
		Number of opens = 924&lt;br/&gt;
		Hash table size = 60&lt;br/&gt;
		Hash key is column number 0&lt;br/&gt;
		Rows seen = 924&lt;br/&gt;
		Rows filtered = 0&lt;br/&gt;
			constructor time (milliseconds) = 0&lt;br/&gt;
			open time (milliseconds) = 0&lt;br/&gt;
			next time (milliseconds) = 0&lt;br/&gt;
			close time (milliseconds) = 0&lt;br/&gt;
			next time in milliseconds/row = 0&lt;/p&gt;

&lt;p&gt;		scan information: &lt;br/&gt;
			Bit set of columns fetched=&lt;/p&gt;
{0, 6}
&lt;p&gt;			Number of columns fetched=2&lt;br/&gt;
			Number of pages visited=3&lt;br/&gt;
			Number of rows qualified=60&lt;br/&gt;
			Number of rows visited=60&lt;/p&gt;

&lt;p&gt;but on the other hand (Rows seen = 0) with NB0 as most right join:&lt;/p&gt;

&lt;p&gt;	Right result set:&lt;br/&gt;
		Hash Scan ResultSet for ESVNB0 at read committed isolation level using instantaneous share table locking: &lt;br/&gt;
		Number of opens = 924&lt;br/&gt;
		Hash table size = 0&lt;br/&gt;
		Hash keys are column numbers (1,2)&lt;br/&gt;
		Rows seen = 0&lt;br/&gt;
		Rows filtered = 0&lt;br/&gt;
			constructor time (milliseconds) = 0&lt;br/&gt;
			open time (milliseconds) = 0&lt;br/&gt;
			next time (milliseconds) = 0&lt;br/&gt;
			close time (milliseconds) = 0&lt;/p&gt;

&lt;p&gt;		scan information: &lt;br/&gt;
			Bit set of columns fetched=&lt;/p&gt;
{0, 1, 2, 3, 6, 8}
&lt;p&gt;			Number of columns fetched=6&lt;br/&gt;
			Number of pages visited=8&lt;br/&gt;
			Number of rows qualified=0&lt;br/&gt;
			Number of rows visited=240&lt;/p&gt;

&lt;p&gt;Maybe that helps.&lt;/p&gt;

&lt;p&gt;I attach the complete results from all versions I tested as derby-02-search-joins2.zip&lt;/p&gt;</comment>
                            <comment id="12536484" author="army" created="Sun, 21 Oct 2007 03:42:37 +0100"  >&lt;p&gt;I did some tracing through the execution-time result set processing for &quot;new-style-sql.txt&quot; and while I still do not understand what is going on, I &lt;b&gt;think&lt;/b&gt; that part of the problem is that the two predicates for the outer-most query, i.e.:&lt;/p&gt;

&lt;p&gt;  WHERE O4Work.ESVN01.NU_BUY_CPY = 99 AND O4Work.ESVNA0.NU_CPY_GRP = 0&lt;/p&gt;

&lt;p&gt;are both being applied as &quot;scan qualifiers&quot; to the initial scans for ESVNB0 and ESVNE1, in addition to being applied to their respective target tables.  That is to say, &quot;NU_BUY_CPY = 99&quot; translates into a qualifier on the &quot;first column&quot; in ESVN01 (because NU_BUY_CPY is the first column in that table); but further up the result set tree, that same qualifier is being applied to the &quot;first column&quot; of ESVNB0 and (still later) to the &quot;first column&quot; of ESVNE1--which, if that&apos;s what is actually happening, would be wrong...&lt;/p&gt;

&lt;p&gt;Similarly, &quot;NU_CPY_GRP = 0&quot; translates into a qualifier on the &quot;fourth column&quot; of ESVNA0 (because NU_CPY_GRP is the fourth column in that table); but later that same qualifier is being applied to the &quot;fourth column&quot; of ESVNB0 and (still later) the &quot;fourth column&quot; of ESVNE1.&lt;/p&gt;

&lt;p&gt;The reason the query returns the correct results (924 rows) if there is only one predicate, &quot;ESVN01.NU_BUY_CPY = 99&quot;, is because, as luck would have it, the first column in both ESVNB0 and ESVNE1 is &lt;b&gt;also&lt;/b&gt; NU_BUY_CPY, and it, like ESVN01, has the value 99 for all rows.  So even though the predicate is (apparently) mis-applied, it doesn&apos;t affect the results because it doesn&apos;t actually filter any rows.&lt;/p&gt;

&lt;p&gt;But the second predicate, &quot;ESVNA0.NU_CPY_GRP = 0&quot;, does affect the results because the fourth column of ESVNB0 and ESVNE1 is &quot;NU_MT1_CPY&quot;, and that column does not have any rows with value &quot;0&quot;.  So when the predicate is mis-applied to ESVNB0, it eliminates all of ESVNB0&apos;s rows, thus causing the query to return no results.&lt;/p&gt;

&lt;p&gt;In an attempt to validate this somewhat bizarre theory, I updated a few of the rows in ESVNB0 to have the value &quot;0&quot; for column NU_MT1_CPY:&lt;/p&gt;

&lt;p&gt;  update o4work.esvnb0 set nu_mt1_cpy = 0 where nu_mt1_cpy = 2;&lt;/p&gt;

&lt;p&gt;When I re-ran &quot;new-style-sql.txt&quot;, the query still returned 0 rows.  Further tracing showed that we were now getting some rows back from ESVNB0, but then we were joining them with ESVNE1--and since ESVNE1 still didn&apos;t have any NU_MT1_CPY columns with value 0, we were filtering out all of ESVNE1&apos;s rows, leading to an empty result set.  So I then updated ESVNE1 in a way similar to ESVNB0, ie:&lt;/p&gt;

&lt;p&gt;  update o4work.esvne1 set nu_mt1_cpy = 0 where nu_mt1_cpy = 2;&lt;/p&gt;

&lt;p&gt;When I did that, &quot;new-style-sql.txt&quot; returned 906 rows.  This seems to suggest (though it&apos;s far from conclusive) that the NU_CPY_GRP qualifier is being mis-applied in the hash scans for ESVNB0 and ESNB1.&lt;/p&gt;

&lt;p&gt;A look at the query plans for &quot;new-style-sql_without-condition.txt&quot; and &quot;new-style-sql.txt&quot; seems to suggest a similar thing.  Note in particular the scan qualifiers for the hash scans on ESVNB0 and ESVNE1.  For &quot;new-style-sql_without-condition&quot;, we see a single scan qualifier on the first column:&lt;/p&gt;

&lt;p&gt; scan qualifiers:&lt;br/&gt;
 Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
 Operator: =&lt;br/&gt;
 Ordered nulls: false&lt;br/&gt;
 Unknown return value: false&lt;br/&gt;
 Negate comparison result: false&lt;/p&gt;

&lt;p&gt;This corresponds to &quot;NU_BUY_CPY = 99&quot; (verified by tracing, where the qualifier value is &apos;99&apos;), which is always true for all rows of ESVNB0 and ESVNE1.  But for &quot;new-style-sql.txt&quot;, we see &lt;b&gt;two&lt;/b&gt; scan qualifiers:&lt;/p&gt;

&lt;p&gt; scan qualifiers:&lt;br/&gt;
 Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; Id: 0&lt;br/&gt;
 Operator: =&lt;br/&gt;
 Ordered nulls: false&lt;br/&gt;
 Unknown return value: false&lt;br/&gt;
 Negate comparison result: false&lt;/p&gt;

&lt;p&gt; Column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; Id: 3&lt;br/&gt;
 Operator: =&lt;br/&gt;
 Ordered nulls: false&lt;br/&gt;
 Unknown return value: false&lt;br/&gt;
 Negate comparison result: false&lt;/p&gt;

&lt;p&gt;The second qualifier is on the fourth column and has a value of &apos;0&apos;, which appears to be coming from the &quot;NU_CPY_GRP = 0&quot; predicate.  That qualifier is eliminating all rows from the scans (for both ESVNB0 and ESVNE1), leading to zero results.&lt;/p&gt;

&lt;p&gt;Given this potentially erroneus theory, it appears that somehow the qualifiers for the outer-most WHERE clause are being mapped incorrectly onto ESVNB0 and ESVNE1.  Maybe this is a transitive closure computation problem, maybe it&apos;s something else entirely.  At this point I don&apos;t know, I&apos;m just dumping what I&apos;ve seen thus far...&lt;/p&gt;</comment>
                            <comment id="12543327" author="army" created="Sun, 18 Nov 2007 01:31:21 +0000"  >&lt;p&gt;I did some further tracing/investigation of this issue and confirmed that search transitive closure is indeed adding incorrect predicates to the predicate list.  In the case of &quot;new-style-sql.txt&quot;, we end up with four additional predicates:&lt;/p&gt;

&lt;p&gt;   ESVNB0.NU_BUY_CPY = 99&lt;br/&gt;
   ESVNE1.NU_BUY_CPY = 99&lt;br/&gt;
   ESVNB0.NU_MT1_CPY = 0&lt;br/&gt;
   ESVNE1.NU_MT1_CPY = 0&lt;/p&gt;

&lt;p&gt;All of these predicates are incorrectly inferred from two predicates in the outermost WHERE clause, namely &lt;/p&gt;

&lt;p&gt;  O4Work.ESVN01.NU_BUY_CPY = 99 AND O4Work.ESVNA0.NU_CPY_GRP = 0&lt;/p&gt;

&lt;p&gt;It turns out that the introduction of these invalid predicates stems from a problem that is almost identical to the one described in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt;.  For details please see d2526_v1.html as attached to that issue, since pretty much everything in that document applies to this issue, as well.&lt;/p&gt;

&lt;p&gt;In fact, the fix for that issue nearly solved this one, too.  More specifically, the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; added the following lines to the remapColumnReferencesToExpressions() method of ColumnReference.java:&lt;/p&gt;

&lt;p&gt;    /* It&apos;s not enough to just set the table number.  Depending&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;on the original query specified and on whether or not&lt;/li&gt;
	&lt;li&gt;subquery flattening has occurred, it&apos;s possible that&lt;/li&gt;
	&lt;li&gt;the expression to which we&apos;re remapping has a different&lt;/li&gt;
	&lt;li&gt;result column list than the one to which we were mapped&lt;/li&gt;
	&lt;li&gt;before we got here.  In that case we also need to update&lt;/li&gt;
	&lt;li&gt;the columnNumber to point to the correct column in &quot;ft&quot;.&lt;/li&gt;
	&lt;li&gt;That&apos;s what the following line does. See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; for&lt;/li&gt;
	&lt;li&gt;details.&lt;br/&gt;
     */&lt;br/&gt;
    ResultColumn ftRC =&lt;br/&gt;
        ft.getResultColumns().getResultColumn(columnName);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    columnNumber = ftRC.getColumnPosition();&lt;/p&gt;

&lt;p&gt;That code depends on the &quot;getColumnPosition()&quot; method of ResultColumn, which looks as follows:&lt;/p&gt;

&lt;p&gt;    public int getColumnPosition()&lt;/p&gt;
    {
        if (columnDescriptor!=null)
            return columnDescriptor.getPosition();
        else
            return virtualColumnId;
    }

&lt;p&gt;The document d2526_v1.html mentioned two things regarding this code:&lt;/p&gt;

&lt;p&gt;  1) if &quot;columnDescriptor&quot; is null, the method will return virtualColumnId;&lt;br/&gt;
  2) columnDescriptor will &lt;b&gt;not&lt;/b&gt; be null if the ResultColumn (ftRC in this case)&lt;br/&gt;
     points directly to a base table.  In that case the method will return the&lt;br/&gt;
     position as stored in the column descriptor.&lt;/p&gt;

&lt;p&gt;Both of those statements are still true.  But there&apos;s another fact about this code that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; did not catch:&lt;/p&gt;

&lt;p&gt;  3) columnDescriptor may be NON-null &lt;b&gt;even if&lt;/b&gt; ftRC points to a virtual&lt;br/&gt;
     column.&lt;/p&gt;

&lt;p&gt;In the case of &quot;new-style-sql&quot; we&apos;ll end up calling the above code for both sides of any join predicates that belong to JoinNodes which are flattened (again, see the document attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; for details).  In the case where one of the flattened JoinNode&apos;s children is a left outer join (i.e. HalfOuterJoinNode) ftRC points to the HalfOuterJoinNode. If that HalfOuterJoinNode then has base tables as its children, two things will be true: a) ftRC will point to a VIRTUAL column--namely, to one of the columns in HalfOuterJoinNode&apos;s result column, and b) ftRC will have a columnDescriptor that describes the column in the underlying base table to which ftRC ultimately points. So now we have a ResultColumn ftRC which has a non-null columnDescriptor AND which points to a virtual column.&lt;/p&gt;

&lt;p&gt;In the above code, then, when we call:&lt;/p&gt;

&lt;p&gt;    columnNumber = ftRC.getColumnPosition();&lt;/p&gt;

&lt;p&gt;we&apos;ll see that columnDescriptor is non-null and thus columnNumber will become the column position w.r.t. the &lt;b&gt;base&lt;/b&gt; table.  But that&apos;s not quite correct: ftRC points to a virtual result column list (i.e. the RCL for HalfOuterJoinNode), so columnNumber has to reflect the correct position with respect to that virtual column list.  In other words, we need to retrieve the &lt;b&gt;virtualColumnId&lt;/b&gt;, not the base column position.&lt;/p&gt;

&lt;p&gt;When we mis-assign the columnNumber for the join predicates, we end up confusing the transitive closure code, which leads to the eventual addition of incorrect predicates to the WHERE list, and therefore we end up with missing rows.&lt;/p&gt;

&lt;p&gt;I made a slight tweak to the code added by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; to make sure that columnNumber is always set to the virtualColumnId when the ResultColumn in question points to a virtual column:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;columnNumber = ftRC.getColumnPosition();&lt;br/&gt;
+    /* Use the virtual column id if the ResultColumn&apos;s expression&lt;br/&gt;
+     * is a virtual column (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3023&quot; title=&quot;Different result rows depending on the sequence of INNER JOIN and OUTER JOIN&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3023&quot;&gt;&lt;del&gt;DERBY-3023&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
+     */&lt;br/&gt;
+    columnNumber =&lt;br/&gt;
+        (ftRC.getExpression() instanceof VirtualColumnNode)&lt;br/&gt;
+            ? ftRC.getVirtualColumnId()&lt;br/&gt;
+            : ftRC.getColumnPosition();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this one-line change, &quot;new-style-sql&quot; returns the same results as &quot;new-style-sql_without-condition&quot;.  So that seems like a step in the right direction for this issue.  Also with that change I ran the repro program, DerbySearchJoins.java, and all but two of the queries now return 924 rows--another good sign.&lt;/p&gt;

&lt;p&gt;The two queries that still do not return 924 rows are:&lt;/p&gt;

&lt;p&gt;  old-style-sql.txt (returns 889 rows)&lt;br/&gt;
  new-style-sql-only-inner.txt (returns 2 rows)&lt;/p&gt;

&lt;p&gt;If it&apos;s true that those queries are supposed to return 924 rows, as well (Stefan, can you confirm that?  Is that what DB2 shows, as well?), then further investigation is still needed before this issue can be resolved.  But at least we&apos;re a step closer...&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a simplified repro for the problem that I just described, along with a patch that includes the one-line change and a corresponding test case for the nightlies.  This patch is NOT for commit, though, as I have not yet run derbyall.  I did run suites.All and saw 92 failures along with 24 errors, all of which were in upgrade tests.  When I re-ran the suite without my changes to ColumnReference the same tests failed, so I&apos;m hoping it&apos;s just an environment issue.&lt;/p&gt;</comment>
                            <comment id="12543655" author="army" created="Mon, 19 Nov 2007 19:49:17 +0000"  >&lt;p&gt;I ran derbyall on Red Hat Linux with ibm15 and there were no failures.&lt;/p&gt;

&lt;p&gt;I realized that the reason the UpgradeTests were failing over the weekend was that I was disconnected and didn&apos;t have old release jars on my machine.  When I re-ran suites.All (via &quot;ant junit-all&quot;) today all tests passed.&lt;/p&gt;

&lt;p&gt;So I&apos;m re-attaching the changes as &quot;d3023_v2.patch&quot;, which is identical to &quot;d3023_notTested_v1.patch&quot;--it just has a different name because the patch has now been tested.&lt;/p&gt;

&lt;p&gt;Note that committing the patch for this issue will lead to an ASSERTion failure in the repro query &quot;new-style-sql&quot; due to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3214&quot; title=&quot;Optimizer can see negative cost estimates when pulling Optimizables from the join order.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3214&quot;&gt;&lt;del&gt;DERBY-3214&lt;/del&gt;&lt;/a&gt;.  That&apos;s not a regression, it&apos;s just a case where fixing one bug exposes another bug--and in this case, I think if one is running in insane mode &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3214&quot; title=&quot;Optimizer can see negative cost estimates when pulling Optimizables from the join order.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3214&quot;&gt;&lt;del&gt;DERBY-3214&lt;/del&gt;&lt;/a&gt; will not actually reveal itself; the optimizer will just pick a potentially suboptimal query plan.&lt;/p&gt;

&lt;p&gt;I&apos;m &lt;b&gt;not&lt;/b&gt; checking the &quot;Patch Available&quot; flag as I will be heading of town this evening and will be unable to handle follow-up comments until I return.  But I thought I&apos;d post the patch and the test results now in case someone else wants to drive this to commit in the interim.&lt;/p&gt;

&lt;p&gt;Also note: still waiting to here back from Stefan on whether &quot;old-style-sql&quot; and &quot;new-style-sql_only-inner&quot; are supposed to return 924 rows, as well.  If so, then there&apos;s more work to be done here (d3023_v2.patch would be an incremental step in that case).&lt;/p&gt;</comment>
                            <comment id="12543880" author="trippeltrappel" created="Tue, 20 Nov 2007 12:35:12 +0000"  >&lt;p&gt;No, old-style-sql and new-style-sql_only-inner are &lt;b&gt;not&lt;/b&gt; expected to have 924 rows.&lt;/p&gt;

&lt;p&gt;(In the old-style-sql is a &quot;LEFT OUTER JOIN O4Work.ESVN07&quot; increases duplicate rows and NU_COT_TYP = 1 decreases them.&lt;br/&gt;
After removing NU_COT_TYP = 1 and adding a distinct I get 924 rows for old-style-sql )&lt;br/&gt;
(In the new-style-sql_only-inner  only inner joins forces the less rows).&lt;/p&gt;

&lt;p&gt;I adapted the program to give more hint about what expected:&lt;/p&gt;

&lt;p&gt;Test old-style-sql&lt;br/&gt;
ok: 924 rows&lt;br/&gt;
Test old-style-sql-without-condition&lt;br/&gt;
ok: 924 rows&lt;br/&gt;
Test new-style-sql&lt;br/&gt;
ERROR: Expected 924 rows but were 0 rows&lt;br/&gt;
Test new-style-sql-only-inner&lt;br/&gt;
ok: 2 rows&lt;br/&gt;
Test new-style-sql_first-inner-joins&lt;br/&gt;
ok: 924 rows&lt;br/&gt;
Test new-style-sql_without-condition&lt;br/&gt;
ok: 924 rows&lt;/p&gt;
</comment>
                            <comment id="12547947" author="army" created="Mon, 3 Dec 2007 19:12:58 +0000"  >&lt;p&gt;&amp;gt; I adapted the program to give more hint about what expected:&lt;/p&gt;

&lt;p&gt;Thanks Stefan.  Can you attach the revised program to this issue?  Just the &quot;.java&quot; file should be good enough...&lt;/p&gt;</comment>
                            <comment id="12550449" author="trippeltrappel" created="Tue, 11 Dec 2007 14:02:27 +0000"  >&lt;p&gt;Here it is: DerbySearchJoins.java&lt;/p&gt;</comment>
                            <comment id="12552161" author="army" created="Sun, 16 Dec 2007 03:26:29 +0000"  >&lt;p&gt;Marking &quot;Patch Available&quot; as I am now available to respond to review comments/suggestions on the description of the problem and/or on the suggested d3023_v2.patch.  From what I can tell, that patch resolves the issue and causes the various queries posted by Stefan to return the correct number of rows.  Stefan, please correct me if I&apos;m wrong...&lt;/p&gt;</comment>
                            <comment id="12558604" author="trippeltrappel" created="Mon, 14 Jan 2008 14:01:14 +0000"  >&lt;p&gt;I did not test the patch but if new-style-sql  returns 924 rows it&apos;s solved for me.&lt;/p&gt;</comment>
                            <comment id="12559578" author="army" created="Wed, 16 Jan 2008 16:52:15 +0000"  >&lt;p&gt;Having heard no objections to the patch, and based on Stefan&apos;s feedback, I committed d3023_v2.patch with svn # 612504:&lt;/p&gt;

&lt;p&gt;  URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=612504&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=612504&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Marking the issue as resolved for 10.4.  If the tinderbox tests run cleanly over the next couple of days, I will look at porting this change back to 10.3.&lt;/p&gt;</comment>
                            <comment id="12561166" author="army" created="Mon, 21 Jan 2008 23:23:28 +0000"  >&lt;p&gt;Tinderbox runs on trunk ran for several days with no apparent fallout from the changes for this issue, so I ported back to 10.3 with a simple merge command:&lt;/p&gt;

&lt;p&gt;  svn merge -r 612503:612504 &lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/trunk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I ran derbyall and suites.All with ibm142 and there were no new failures.  So I committed with svn # 614046:&lt;/p&gt;

&lt;p&gt;  URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=614046&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=614046&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Updating fix-in to reflect the fact that this is now in 10.3.&lt;/p&gt;</comment>
                            <comment id="12580134" author="dyret" created="Tue, 18 Mar 2008 22:13:20 +0000"  >&lt;p&gt;This issue has fix version 10.4 and is marked with either &apos;Release note needed&apos; or &apos;Existing application impact&apos;, but does not have a releaseNote.html attached to it. Should it?&lt;/p&gt;</comment>
                            <comment id="12584390" author="army" created="Wed, 2 Apr 2008 04:31:46 +0100"  >&lt;p&gt;Attaching a release note for this issue.  I had to use MS Word to create the file and as a result it doesn&apos;t pass the &quot;ReleaseNoteReader&quot; tool check--i.e. it&apos;s going to have to be &quot;scrubbed&quot; in order for the release note generator to work correctly.  I apologize in advance, but I&apos;m hoping someone else can do the scrubbing as it was not as straightforward as I had hoped it would be, and I don&apos;t really have time to figure it all out...&lt;/p&gt;</comment>
                            <comment id="12584563" author="rhillegas" created="Wed, 2 Apr 2008 14:20:11 +0100"  >&lt;p&gt;Thanks for the release note, Army. I have attached a scrubbed version which passes the checks performed by the ReleaseNoteReader.&lt;/p&gt;</comment>
                            <comment id="12584663" author="army" created="Wed, 2 Apr 2008 17:32:30 +0100"  >&lt;p&gt;&amp;gt; I have attached a scrubbed version which passes the checks performed by the ReleaseNoteReader.&lt;/p&gt;

&lt;p&gt;Thanks Rick!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12354628">DERBY-2034</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12366604">DERBY-2526</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12608438">DERBY-5933</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12371434" name="DerbySearchJoins.java" size="36732" author="trippeltrappel" created="Tue, 11 Dec 2007 14:00:53 +0000"/>
                            <attachment id="12364396" name="RUNTIMESTATISTICS-10.3.zip" size="18944" author="trippeltrappel" created="Thu, 23 Aug 2007 09:32:49 +0100"/>
                            <attachment id="12364763" name="Statement10.3.1.4 - (561794)-j1.4.2_10.zip" size="542479" author="trippeltrappel" created="Wed, 29 Aug 2007 13:18:41 +0100"/>
                            <attachment id="12369735" name="d3023_notTested_v1.patch" size="10396" author="army" created="Sun, 18 Nov 2007 01:31:21 +0000"/>
                            <attachment id="12369734" name="d3023_repro.sql" size="1002" author="army" created="Sun, 18 Nov 2007 01:31:21 +0000"/>
                            <attachment id="12369811" name="d3023_v2.patch" size="10396" author="army" created="Mon, 19 Nov 2007 19:49:17 +0000"/>
                            <attachment id="12364397" name="derby-02-search-joins.zip" size="540201" author="trippeltrappel" created="Thu, 23 Aug 2007 09:33:17 +0100"/>
                            <attachment id="12364762" name="derby-02-search-joins2.zip" size="3847514" author="trippeltrappel" created="Wed, 29 Aug 2007 13:16:57 +0100"/>
                            <attachment id="12379131" name="releaseNote.html" size="3923" author="rhillegas" created="Wed, 2 Apr 2008 14:20:11 +0100"/>
                            <attachment id="12379093" name="releaseNote.html" size="4672" author="army" created="Wed, 2 Apr 2008 04:31:46 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 Aug 2007 15:27:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23380</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09nz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35384</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>