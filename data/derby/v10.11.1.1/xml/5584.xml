<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5584/DERBY-5584.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5584] Select statement with subqueries with group by and count distinct statements returns wrong number of results</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5584</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Steps to reproduce:&lt;/p&gt;

&lt;p&gt;1. Create database, connect to database with any JDBC client&lt;/p&gt;

&lt;p&gt;2. create two tables:&lt;/p&gt;

&lt;p&gt;CREATE TABLE TEST_5 (&lt;br/&gt;
       profile_id INTEGER NOT NULL,&lt;br/&gt;
       group_ref INTEGER NOT NULL,&lt;br/&gt;
       matched_count INTEGER NOT NULL&lt;br/&gt;
   );&lt;/p&gt;


&lt;p&gt;   CREATE TABLE TEST_6 (&lt;br/&gt;
       profile_id INTEGER NOT NULL,&lt;br/&gt;
       group_ref INTEGER NOT NULL,&lt;br/&gt;
       matched_count INTEGER NOT NULL&lt;br/&gt;
   );&lt;/p&gt;

&lt;p&gt;3. Insert two records for each table:&lt;/p&gt;

&lt;p&gt;insert into test_5 values (1, 10000,1);&lt;br/&gt;
insert into test_5 values (2, 10000, 2);&lt;/p&gt;

&lt;p&gt;insert into test_6 values (1, 10000,1);&lt;br/&gt;
insert into test_6 values (2, 10000, 2);&lt;/p&gt;

&lt;p&gt;4. Run following statement&lt;/p&gt;

&lt;p&gt;SELECT *&lt;br/&gt;
FROM&lt;br/&gt;
 (SELECT ps1.group_ref,&lt;br/&gt;
   COUNT(DISTINCT ps1.matched_count) AS matched_count&lt;br/&gt;
 FROM test_5 ps1&lt;br/&gt;
 GROUP BY ps1.group_ref,&lt;br/&gt;
   ps1.profile_id&lt;br/&gt;
 ) a,&lt;br/&gt;
 (SELECT ps2.group_ref,&lt;br/&gt;
   COUNT( DISTINCT ps2.matched_count) AS matched_count&lt;br/&gt;
 FROM test_6 ps2&lt;br/&gt;
 GROUP BY ps2.group_ref,&lt;br/&gt;
   ps2.profile_id&lt;br/&gt;
 ) b&lt;/p&gt;


&lt;p&gt;As a result I&apos;ve got 3 records instead of 4 - at least Oracle 10g&lt;br/&gt;
returns 4 records for this statement. Maybe i&apos;m doing something wrong.&lt;br/&gt;
Do you have any suggestions / possible workarounds for this problem&lt;/p&gt;</description>
                <environment>Output from sysinfo&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.6&lt;br/&gt;
java.runtime.version: 1.6.0_20-b02&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: Java SE 6 - JDBC 4.0&lt;br/&gt;
[/home/piotrz/Desktop/db-derby-10.7.1.1-bin/lib/derby.jar] 10.7.1.1 - (1040133)&lt;br/&gt;
[/home/piotrz/Desktop/db-derby-10.7.1.1-bin/lib/derbytools.jar] 10.7.1.1 - (1040133)&lt;br/&gt;
[/home/piotrz/Desktop/db-derby-10.7.1.1-bin/lib/derbynet.jar] 10.7.1.1 - (1040133)&lt;br/&gt;
[/home/piotrz/Desktop/db-derby-10.7.1.1-bin/lib/derbyclient.jar] 10.7.1.1 - (1040133)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
Current Locale :  [English/United States [en_US]]&lt;br/&gt;
Found support for locale: [cs]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [de_DE]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [es]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [fr]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [hu]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [it]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [ja_JP]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [ko_KR]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [pl]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [pt_BR]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [ru]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [zh_CN]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
Found support for locale: [zh_TW]&lt;br/&gt;
	 version: 10.7.1.1 - (1040133)&lt;br/&gt;
&lt;br/&gt;
</environment>
        <key id="12539467">DERBY-5584</key>
            <summary>Select statement with subqueries with group by and count distinct statements returns wrong number of results</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="pzgadzaj">Piotr Zgadzaj</reporter>
                        <labels>
                            <label>derby_backport_reject_10_5</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Mon, 23 Jan 2012 13:44:10 +0000</created>
                <updated>Fri, 15 Nov 2013 08:15:11 +0000</updated>
                            <resolved>Wed, 22 Feb 2012 06:07:30 +0000</resolved>
                                    <version>10.6.2.4</version>
                    <version>10.7.1.1</version>
                                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13191190" author="knutanders" created="Mon, 23 Jan 2012 15:03:30 +0000"  >&lt;p&gt;It looks like Derby returned 4 rows for the query up to version 10.5. From 10.6, it started returning 3 rows.&lt;/p&gt;</comment>
                            <comment id="13191221" author="knutanders" created="Mon, 23 Jan 2012 15:55:34 +0000"  >&lt;p&gt;The query result changed from 4 rows to 3 rows at revision 824966, which was when &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3002&quot; title=&quot;Add support for GROUP BY ROLLUP&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3002&quot;&gt;&lt;del&gt;DERBY-3002&lt;/del&gt;&lt;/a&gt; (Add support for GROUP BY ROLLUP) went in.&lt;/p&gt;</comment>
                            <comment id="13191846" author="bryanpendleton" created="Tue, 24 Jan 2012 03:22:33 +0000"  >&lt;p&gt;Thanks for narrowing this down. Unfortunately nothing immediately jumps to mind and it&apos;s been rather a while since I worked on that code ... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Perhaps we might get some clues by comparing the query plans and statistics from the 10.5 execution against the query plans and statistics from the 10.6 execution.&lt;/p&gt;

&lt;p&gt;As I recall when working with that part of the system, there were often problems where the optimizer&apos;s manipulation of the query nodes got confused about the internal table number and column number references. For example, if at some crucial point we thought we were working with table test_5 but we were actually working with table test_6...&lt;/p&gt;</comment>
                            <comment id="13191908" author="bryanpendleton" created="Tue, 24 Jan 2012 05:56:44 +0000"  >&lt;p&gt;Not only are there 3 rows instead of 4, but the 3rd row has strange values. When I run the query I see:&lt;/p&gt;

&lt;p&gt;GROUP_REF  |MATCHED_CO&amp;amp;|GROUP_REF  |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |2          &lt;/p&gt;

&lt;p&gt;Given that the two subqueries, separately, each return&lt;/p&gt;

&lt;p&gt;GROUP_REF  |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------&lt;br/&gt;
10000      |1          &lt;br/&gt;
10000      |1          &lt;/p&gt;

&lt;p&gt;I think that the resulting cartesian product 4-row answer should have been:&lt;/p&gt;

&lt;p&gt;GROUP_REF  |MATCHED_CO&amp;amp;|GROUP_REF  |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |1          &lt;/p&gt;

&lt;p&gt;That is, it doesn&apos;t seem like we&apos;re losing a row; rather, it seems like we&apos;re combining two rows into one.&lt;/p&gt;

&lt;p&gt;So perhaps the problem has something to do with temporary data management; that is, perhaps during the execution of the cartesian produce we are closing and re-opening the inner table-expression, and when we do that, instead of re-computing and returning two rows (10000,1), (10000,1), we are instead returning a single row (10000,2)&lt;/p&gt;

&lt;p&gt;I tried running a slight variation of the problematic query:&lt;/p&gt;

&lt;p&gt;SELECT *&lt;br/&gt;
FROM&lt;br/&gt;
 (SELECT ps1.group_ref, ps1.profile_id,&lt;br/&gt;
   COUNT(DISTINCT ps1.matched_count) AS matched_count&lt;br/&gt;
 FROM test_5 ps1&lt;br/&gt;
 GROUP BY ps1.group_ref,&lt;br/&gt;
   ps1.profile_id&lt;br/&gt;
 ) a,&lt;br/&gt;
 (SELECT ps2.group_ref, ps2.profile_id,&lt;br/&gt;
   COUNT( DISTINCT ps2.matched_count) AS matched_count&lt;br/&gt;
 FROM test_6 ps2&lt;br/&gt;
 GROUP BY ps2.group_ref,&lt;br/&gt;
   ps2.profile_id&lt;br/&gt;
 ) b &lt;/p&gt;

&lt;p&gt;(note that I included &apos;profile_id&apos; explicitly in the select list of each sub-query), and the results were:&lt;/p&gt;

&lt;p&gt;GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;|GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------------------------------&lt;br/&gt;
10000      |1          |1          |10000      |1          |1          &lt;br/&gt;
10000      |1          |1          |10000      |2          |1          &lt;br/&gt;
10000      |2          |1          |10000      |1          |2          &lt;/p&gt;

&lt;p&gt;I also extended the test case a bit by additionally doing:&lt;/p&gt;

&lt;p&gt;insert into test_6 values (3, 10000, 3 );&lt;/p&gt;

&lt;p&gt;after which the query produced:&lt;/p&gt;

&lt;p&gt;GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;|GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------------------------------&lt;br/&gt;
10000      |1          |1          |10000      |1          |1          &lt;br/&gt;
10000      |1          |1          |10000      |2          |1          &lt;br/&gt;
10000      |1          |1          |10000      |3          |1          &lt;br/&gt;
10000      |2          |1          |10000      |1          |3          &lt;/p&gt;

&lt;p&gt;and then&lt;/p&gt;

&lt;p&gt;insert into test_6 values (4, 10000, 4 );&lt;/p&gt;

&lt;p&gt;after which the query produced:&lt;/p&gt;

&lt;p&gt;GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;|GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------------------------------&lt;br/&gt;
10000      |1          |1          |10000      |1          |1          &lt;br/&gt;
10000      |1          |1          |10000      |2          |1          &lt;br/&gt;
10000      |1          |1          |10000      |3          |1          &lt;br/&gt;
10000      |1          |1          |10000      |4          |1          &lt;br/&gt;
10000      |2          |1          |10000      |1          |4          &lt;/p&gt;

&lt;p&gt;And, lastly,&lt;/p&gt;

&lt;p&gt;insert into test_5 values (3, 10000, 3);&lt;/p&gt;

&lt;p&gt;and got &lt;/p&gt;

&lt;p&gt;GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;|GROUP_REF  |PROFILE_ID |MATCHED_CO&amp;amp;&lt;br/&gt;
-----------------------------------------------------------------------&lt;br/&gt;
10000      |1          |1          |10000      |1          |1          &lt;br/&gt;
10000      |1          |1          |10000      |2          |1          &lt;br/&gt;
10000      |1          |1          |10000      |3          |1          &lt;br/&gt;
10000      |1          |1          |10000      |4          |1          &lt;br/&gt;
10000      |2          |1          |10000      |1          |4          &lt;br/&gt;
10000      |3          |1          |10000      |4          |4          &lt;/p&gt;

&lt;p&gt;By this point it becomes quite clear that the problem is that, on the first pass through the inner table,&lt;br/&gt;
the cartesian product observes all the rows of the inner table, but on all subsequent passes, the&lt;br/&gt;
inner table&apos;s rows are collapsed into a single row (perhaps because we are losing track of&lt;br/&gt;
the &apos;profile_id&apos; column in that inner table somehow?)&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how much more time I&apos;ll have to play with this right away, but wanted to record these findings.&lt;/p&gt;</comment>
                            <comment id="13192174" author="dagw" created="Tue, 24 Jan 2012 14:21:07 +0000"  >&lt;p&gt;Attaching a dump&#160;of Brian&apos;s last query with a dump of&lt;/p&gt;

&lt;p&gt;a) parse tree&lt;br/&gt;
b) bind tree&lt;br/&gt;
c) optimized tree&lt;br/&gt;
d) query plan&lt;/p&gt;

&lt;p&gt;with object hashes renumbered from 1 upwards and redundant node printing truncated.&lt;/p&gt;

&lt;p&gt;I have not analyzed it.&lt;/p&gt;</comment>
                            <comment id="13192830" author="bryanpendleton" created="Wed, 25 Jan 2012 03:04:33 +0000"  >&lt;p&gt;Thanks Dag for gathering the output!&lt;/p&gt;</comment>
                            <comment id="13192835" author="bryanpendleton" created="Wed, 25 Jan 2012 03:11:24 +0000"  >&lt;p&gt;If you remove DISTINCT from the COUNT() aggregates, the problem disappears (from what I can tell).&lt;/p&gt;

&lt;p&gt;I think it&apos;s possible that the problem involves this section of GroupedAggregateResultSet:&lt;/p&gt;

&lt;p&gt;                        /*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;If there was a distinct aggregate, then that column&lt;/li&gt;
		&lt;li&gt;was automatically included as the last column in&lt;/li&gt;
		&lt;li&gt;the sort ordering. But we don&apos;t want it to be part&lt;/li&gt;
		&lt;li&gt;of the ordering anymore, because we aren&apos;t grouping&lt;/li&gt;
		&lt;li&gt;by that column, we just sorted it so that distinct&lt;/li&gt;
		&lt;li&gt;aggregation would see the values in order.&lt;br/&gt;
                        */&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This part was quite tricky, and I remember struggling with it for a long time.&lt;/p&gt;

&lt;p&gt;I think that the solution that is currently implemented in GroupedAggregateResultSet&lt;br/&gt;
may be assuming that the result set is only opened and read once.&lt;/p&gt;

&lt;p&gt;However, during a query plan such as this cartesian product, the GROUP BY&lt;br/&gt;
subquery is created, then opened/read/closed, opened/read/closed, etc.,&lt;br/&gt;
once per row of the other side of the cartesian product.&lt;/p&gt;

&lt;p&gt;Perhaps what we need to do  is have a better way of handling that extra&lt;br/&gt;
invisible column, so that we can consider it sometimes, and ignore it other times,&lt;br/&gt;
without doing something as destructive as physically removing it from the&lt;br/&gt;
ordering array, which is what we do now.&lt;/p&gt;</comment>
                            <comment id="13193074" author="bryanpendleton" created="Wed, 25 Jan 2012 14:55:47 +0000"  >&lt;p&gt;Attached &apos;try1.txt&apos; contains a patch which alters the behavior&lt;br/&gt;
of this particular test case.&lt;/p&gt;

&lt;p&gt;I haven&apos;t run any of the existing tests, nor have I written any&lt;br/&gt;
new tests; I just attached this patch to record the progress I&apos;ve&lt;br/&gt;
made so far.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure where to find more examples of DISTINCT&lt;br/&gt;
aggregates. I recall looking for such examples years ago, when&lt;br/&gt;
I was first working on GROUP BY, and didn&apos;t find many. Does&lt;br/&gt;
anybody have any good ideas about where to find more&lt;br/&gt;
DISTINCT aggregate queries that we could include in our&lt;br/&gt;
test suites?&lt;/p&gt;</comment>
                            <comment id="13193900" author="bryanpendleton" created="Thu, 26 Jan 2012 15:25:30 +0000"  >&lt;p&gt;The existing GroupByTest and the other GroupBy-related&lt;br/&gt;
tests in the lang suite appear to be passing with the patch&lt;br/&gt;
applied. So I&apos;m encouraged, and planning to move ahead.&lt;/p&gt;

&lt;p&gt;Attached (in tests.sql, tests.out) are the new tests I&apos;m&lt;br/&gt;
intending to add to GroupByTest.java, and the results&lt;br/&gt;
I&apos;m currently getting (with try1.txt applied).&lt;/p&gt;

&lt;p&gt;Does anybody have the time to look through tests.sql&lt;br/&gt;
and tests.out and offer an opinion about whether the&lt;br/&gt;
results as shown are correct or not?&lt;/p&gt;</comment>
                            <comment id="13194421" author="bryanpendleton" created="Fri, 27 Jan 2012 03:56:48 +0000"  >&lt;p&gt;Attached &apos;patch1&apos; is the code change + the tests,&lt;br/&gt;
packaged into a patch file.&lt;/p&gt;

&lt;p&gt;Still haven&apos;t run the whole regression suite, just GroupByTest.&lt;/p&gt;</comment>
                            <comment id="13194963" author="dagw" created="Fri, 27 Jan 2012 18:06:51 +0000"  >&lt;p&gt;I looked through the sample test.&lt;/p&gt;
{sql,out}
&lt;p&gt; and the result seems to implement the correct SQL semantics to me.&lt;br/&gt;
The last two queries show the expected (1,2,1) vs (2,3,1) I would expect from the COUNT DISTINCT vs plain COUNT in the cartesian product.&lt;/p&gt;</comment>
                            <comment id="13195071" author="dagw" created="Fri, 27 Jan 2012 20:23:31 +0000"  >&lt;p&gt;Thanks for tackling this Bryan! Looked at the patch and what you do seems reasonable to me. I am puzzled by the comment:&lt;/p&gt;

&lt;p&gt;// Although it seems like N aggs could have been&lt;br/&gt;
// added at the end, in fact only one has been&lt;br/&gt;
// FIXME &amp;#8211; need to get GroupByNode to handle this&lt;br/&gt;
// correctly, but that requires understanding&lt;br/&gt;
// scalar distinct aggregates.&lt;/p&gt;

&lt;p&gt;Can you throw some light on this? Is this a implementation limitation. If so, what kind of query would be affected by it?&lt;/p&gt;</comment>
                            <comment id="13195073" author="dagw" created="Fri, 27 Jan 2012 20:28:55 +0000"  >&lt;p&gt;For the record, I also verified that the new text fixture fails without the code part of the patch.&lt;/p&gt;</comment>
                            <comment id="13195570" author="bryanpendleton" created="Sat, 28 Jan 2012 15:56:02 +0000"  >&lt;p&gt;Thanks for the review, Dag. I&apos;m cautiously optimistic about the patch and will continue testing it.&lt;/p&gt;

&lt;p&gt;Regarding the distinct limitation, Derby has had a limitation that there be at most one DISTINCT&lt;br/&gt;
aggregate in a query for a long time, probably ever since it was written. See, for example, this&lt;br/&gt;
link from the 10.2 docs: &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/ref/rrefsqlj32693.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/ref/rrefsqlj32693.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;        Only one DISTINCT aggregate expression per SelectExpression is allowed. &lt;br/&gt;
        For example, the following query is not valid:&lt;/p&gt;

&lt;p&gt;            SELECT AVG (DISTINCT flying_time), SUM (DISTINCT miles) FROM Flights&lt;/p&gt;

&lt;p&gt;I&apos;m guessing here, but I suspect that the plan for implementing such queries would involve&lt;br/&gt;
optimizer work &lt;b&gt;above&lt;/b&gt; the GroupedAggregateResultSet. In particular, the optimizer could&lt;br/&gt;
(perhaps) implement the above query by doing:&lt;/p&gt;

&lt;p&gt;1) Fetch all of Flights, and pass it through a GroupedAggregateResultSet which (a) sorts&lt;br/&gt;
by flying_time, (b) eliminates duplicate values, and (c) computes the average of the&lt;br/&gt;
unique flying_time values&lt;br/&gt;
2)  Fetch all of Flights, and pass it through a GroupedAggregateResultSet which (a) sorts&lt;br/&gt;
by miles, (b) eliminates duplicate values, and (c) computes the sum of the unique miles values.&lt;br/&gt;
3) Combine the two scalar values into the final result&lt;/p&gt;

&lt;p&gt;Trying to do &lt;b&gt;all&lt;/b&gt; of this in a single pass through the Flights data is complex, because you&lt;br/&gt;
can&apos;t simultaneously sort the data on flying_time AND on miles, so you&apos;d have to have some&lt;br/&gt;
other way of eliminating duplicates, other than sorting.&lt;/p&gt;

&lt;p&gt;For example, we could have some sort of low-level HashMap collection to record the&lt;br/&gt;
unique values, and have a hybrid algorithm which sorted one one distinct aggregate and&lt;br/&gt;
kept hash collections of the other distinct aggregates (assuming all those hashes fit in memory).&lt;/p&gt;

&lt;p&gt;I think that, in practice, those databases which implement multiple DISTINCT aggregates&lt;br/&gt;
do so by having higher-level query plans which take multiple passes over the data.&lt;/p&gt;

&lt;p&gt;In all my time with Derby, I can&apos;t recall anyone ever complaining about the DISTINCT&lt;br/&gt;
aggregate limitation. Moreover, in my use of databases I haven&apos;t found occasion to regularly&lt;br/&gt;
use DISTINCT aggregates. For whatever that&apos;s worth.&lt;/p&gt;

&lt;p&gt;Thanks again for the review and feedback; I&apos;ll continue testing and working on the patch&lt;br/&gt;
(I&apos;m out of town for a week so it may be a little while).&lt;/p&gt;</comment>
                            <comment id="13195611" author="dagw" created="Sat, 28 Jan 2012 19:40:52 +0000"  >&lt;p&gt;Thanks for that info and your continued work on this, Bryan!&lt;/p&gt;

&lt;p&gt;As for the implementation strategy of such an improvement, hash lookup&lt;br/&gt;
is interesting. Would BackingStoreHashTable be useful here perhaps?&lt;br/&gt;
The optimizer could then use the hash approach when it thinks the&lt;br/&gt;
distinct values will fit in memory but still work, albeit slowly, if&lt;br/&gt;
it got the estimate wrong. The multiple sort/pass strategy would used&lt;br/&gt;
if the values would be deemed not to fit. An optimizer override could&lt;br/&gt;
be used if the optimizer gets it all wrong, as a last resort. &lt;/p&gt;

&lt;p&gt;In any case, it may not be worth the effort if nobody needs this. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13198351" author="mamtas" created="Thu, 2 Feb 2012 00:08:44 +0000"  >&lt;p&gt;Hi Bryan, thanks for your work on this jira. &lt;/p&gt;

&lt;p&gt;I haven&apos;t worked in code related to DISTINCT and GROUP BY but your solution looks like the correct appraoch. Looks like Derby has made an incorrect assumption about the extra column when there are multiple passes through the inner table. &lt;/p&gt;

&lt;p&gt;I am working on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4631&quot; title=&quot;Wrong join column returned by right outer join with NATURAL or USING and territory-based collation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4631&quot;&gt;&lt;del&gt;DERBY-4631&lt;/del&gt;&lt;/a&gt; and noticed that an extra column gets pulled in (which might not be part of the SELECT list) for ORDER BY columns which sounds similar to the extra column for this jira.&lt;/p&gt;</comment>
                            <comment id="13198879" author="bryanpendleton" created="Thu, 2 Feb 2012 15:34:09 +0000"  >&lt;p&gt;Thanks for looking at the patch, Mamta. I agree, the extra column that may be&lt;br/&gt;
added by ORDER BY is very similar to the GROUP BY case. I think I had that&lt;br/&gt;
ORDER BY behavior in mind when I was working on the GROUP BY code in 2009.&lt;/p&gt;

&lt;p&gt;One difference is that, I think, ORDER BY can only occur at the top level of a&lt;br/&gt;
query, not in a nested sub-query, whereas GROUP BY can occur deeply nested.&lt;/p&gt;

&lt;p&gt;So I don&apos;t think that ORDER BY result sets will get re-opened and re-read&lt;br/&gt;
in the same way that this GROUP BY query runs.&lt;/p&gt;

&lt;p&gt;I will take a look at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4631&quot; title=&quot;Wrong join column returned by right outer join with NATURAL or USING and territory-based collation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4631&quot;&gt;&lt;del&gt;DERBY-4631&lt;/del&gt;&lt;/a&gt; and let you know if I have any interesting observations.&lt;/p&gt;</comment>
                            <comment id="13199753" author="dagw" created="Fri, 3 Feb 2012 15:11:39 +0000"  >&lt;p&gt;No longer, ORDER BY can now happen in subqueries too, after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4397&quot; title=&quot;Allow ORDER BY in subqueries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4397&quot;&gt;&lt;del&gt;DERBY-4397&lt;/del&gt;&lt;/a&gt;. So,&lt;br/&gt;
could we have a similar issue there, I wonder?&lt;/p&gt;</comment>
                            <comment id="13199769" author="dagw" created="Fri, 3 Feb 2012 15:27:16 +0000"  >&lt;p&gt;I tested it on this data set with a similar nested query and it seems to work ok:&lt;/p&gt;

&lt;p&gt;SELECT * FROM (SELECT ps1.group_ref, ps1.profile_id FROM test_5 ps1 ORDER BY profile_id) a, (SELECT ps2.group_ref, ps2.profile_id FROM test_6 ps2 ORDER BY PROFILE_ID) b ;&lt;/p&gt;

&lt;p&gt;GROUP_REF  |PROFILE_ID |GROUP_REF  |PROFILE_ID &lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |1          &lt;br/&gt;
10000      |1          |10000      |2          &lt;br/&gt;
10000      |1          |10000      |2          &lt;br/&gt;
10000      |1          |10000      |2          &lt;br/&gt;
10000      |1          |10000      |3 &lt;br/&gt;
etc.&lt;/p&gt;</comment>
                            <comment id="13210488" author="kmarsden" created="Fri, 17 Feb 2012 19:58:55 +0000"  >&lt;p&gt;Triage for 10.9. Moved component to SQL and checked appropriate boxes.&lt;br/&gt;
I wonder. Is this a regression?&lt;/p&gt;

&lt;p&gt; Thanks Bryan for working on this issue.&lt;/p&gt;
</comment>
                            <comment id="13211180" author="bryanpendleton" created="Sun, 19 Feb 2012 01:34:32 +0000"  >&lt;p&gt;Hi Kathey! Yes, I believe this is a regression. This query, and similar ones, worked correctly&lt;br/&gt;
prior to my work on ROLLUP. I checked the &quot;regression&quot; box.&lt;/p&gt;</comment>
                            <comment id="13211493" author="mikem" created="Sun, 19 Feb 2012 19:21:35 +0000"  >&lt;p&gt;I ran full set of tests with the patch and it passed on windows, xp, ibm16 with no errors.&lt;/p&gt;</comment>
                            <comment id="13211956" author="bryanpendleton" created="Mon, 20 Feb 2012 16:24:28 +0000"  >&lt;p&gt;Thanks for running the full test suite, Mike; it&apos;s very helpful to know&lt;br/&gt;
that the patch hasn&apos;t introduced any other regressions.&lt;/p&gt;

&lt;p&gt;The last thing I&apos;m intending to do prior to commit is to add the extra&lt;br/&gt;
ORDER BY subquery test that Dag mentioned in an earlier comment.&lt;/p&gt;

&lt;p&gt;I intend to commit this patch this week.&lt;/p&gt;</comment>
                            <comment id="13212076" author="dagw" created="Mon, 20 Feb 2012 21:07:40 +0000"  >&lt;p&gt;Note that the nested &quot;order by&quot; like in my example is rather meaningless, since there is no guarantee the final result will be sorted in any particular way without an ORDER BY on the outer select. It would only make sense if combined with FETCH FIRST n rows, which would limit the table rows going into the join. So perhaps it would be good to add that in the test case.&lt;/p&gt;</comment>
                            <comment id="13212662" author="bryanpendleton" created="Tue, 21 Feb 2012 15:32:58 +0000"  >&lt;p&gt;Updated the patch with an additional ORDER BY subquery test.&lt;/p&gt;

&lt;p&gt;Also cleaned up the whitespace in the diff and added&lt;br/&gt;
a simple comment for the new helper method.&lt;/p&gt;</comment>
                            <comment id="13213234" author="dagw" created="Wed, 22 Feb 2012 03:13:17 +0000"  >&lt;p&gt;Thanks, Bryan! Looks like good improvement, and the changes are small and systematic, and make sense to me. +1 &lt;/p&gt;</comment>
                            <comment id="13213378" author="bryanpendleton" created="Wed, 22 Feb 2012 06:07:30 +0000"  >&lt;p&gt;Thanks all for the reviews and suggestions and assistance running tests&lt;br/&gt;
and preparing the patch. It&apos;s been very helpful, especially as I don&apos;t have&lt;br/&gt;
so much time available to work on Derby nowadays.&lt;/p&gt;

&lt;p&gt;Committed the patch to the trunk as revision 1292134.&lt;/p&gt;</comment>
                            <comment id="13229314" author="kmarsden" created="Wed, 14 Mar 2012 16:34:14 +0000"  >&lt;p&gt;merged to 10.8 with revision 1300625&lt;/p&gt;</comment>
                            <comment id="13229445" author="kmarsden" created="Wed, 14 Mar 2012 18:05:17 +0000"  >&lt;p&gt;This issue probably affects 10.6 and 10.7 as the ROLLUP work went into 10.6,  It would be a good candidate to backport to those releases, but does not affect 10.5 so labeling derby_backport_reject_10_5&lt;/p&gt;
</comment>
                            <comment id="13823414" author="knutanders" created="Fri, 15 Nov 2013 08:15:11 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update: close all resolved issues that haven&amp;#39;t had any activity the last year&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12375845">DERBY-3002</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12512074" name="patch1.txt" size="12226" author="bryanpendleton" created="Fri, 27 Jan 2012 03:56:48 +0000"/>
                            <attachment id="12515367" name="patch2.txt" size="13111" author="bryanpendleton" created="Tue, 21 Feb 2012 15:32:58 +0000"/>
                            <attachment id="12511673" name="query.log" size="194114" author="dagw" created="Tue, 24 Jan 2012 14:21:07 +0000"/>
                            <attachment id="12511989" name="tests.out" size="9312" author="bryanpendleton" created="Thu, 26 Jan 2012 15:25:30 +0000"/>
                            <attachment id="12511988" name="tests.sql" size="4313" author="bryanpendleton" created="Thu, 26 Jan 2012 15:25:29 +0000"/>
                            <attachment id="12511841" name="try1.txt" size="3114" author="bryanpendleton" created="Wed, 25 Jan 2012 14:55:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 23 Jan 2012 15:03:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>224969</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cpb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35876</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>