<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:18:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4269/DERBY-4269.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4269] Failover did not succeed in 2 min.: testReplication_Local_3_p6_autocommit_OK</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4269</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Failover did not succeed.&lt;br/&gt;
2) testReplication_Local_3_p6_autocommit_OK(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6)junit.framework.AssertionFailedError: Failover did not succeed.&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.connectPing(ReplicationRun.java:270)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6.derby_3896(ReplicationRun_Local_3_p6.java:200)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p6.testReplication_Local_3_p6_autocommit_OK(ReplicationRun_Local_3_p6.java:86)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:106)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/vista-64/782274-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/vista-64/782274-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;</description>
                <environment>OS:&lt;br/&gt;
Microsoft&amp;#xA9; Windows VistaT Ultimate - 6.0.6001 Service Pack 1 - WindowsNT 0 6&lt;br/&gt;
&lt;br/&gt;
JVM:&lt;br/&gt;
Sun Microsystems Inc. &lt;br/&gt;
java version &amp;quot;1.4.2_16&amp;quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_16-b05)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.4.2_16-b05 mixed mode 32-bit)&lt;br/&gt;
&lt;br/&gt;
</environment>
        <key id="12427734">DERBY-4269</key>
            <summary>Failover did not succeed in 2 min.: testReplication_Local_3_p6_autocommit_OK</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="olesolberg">Ole Solberg</reporter>
                        <labels>
                            <label>derby_triage10_5_2</label>
                    </labels>
                <created>Fri, 12 Jun 2009 12:40:38 +0100</created>
                <updated>Wed, 3 Sep 2014 09:31:26 +0100</updated>
                            <resolved>Wed, 4 Jul 2012 16:05:19 +0100</resolved>
                                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.1.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.1.2</version>
                    <version>10.8.2.2</version>
                                    <fixVersion>10.7.1.4</fixVersion>
                                    <component>Replication</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12727034" author="dagw" created="Fri, 3 Jul 2009 17:19:45 +0100"  >&lt;p&gt;Triaged for 10.5.2, setting &quot;normal&quot; urgency.&lt;/p&gt;</comment>
                            <comment id="13102784" author="myrna" created="Mon, 12 Sep 2011 17:46:29 +0100"  >&lt;p&gt;I saw this in nightly testing, with the trunk tree (10.9.0.0 alpha) synced to revision 1167430, on Windows XP with ibm 1.6 (sr9fp1).&lt;/p&gt;</comment>
                            <comment id="13285246" author="dagw" created="Wed, 30 May 2012 00:10:59 +0100"  >&lt;p&gt;Saw this again: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/lin/1343305-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/testlog/lin/1343305-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bit more of the stack shows the error cause is &lt;br/&gt;
DERBY SQL error: SQLCODE: -1, SQLSTATE: 08004, SQLERRMC: Connection refused to database &apos;/export/home/tmp/jagtmp/autoderbyN_derbyall/suitesAll_1/log/db_slave/wombat&apos; because it is in replication slave mode.&lt;/p&gt;

&lt;p&gt;Looking in the master&apos;s derby.log I see these two lines:&lt;/p&gt;

&lt;p&gt;Tue May 29 04:40:11 CEST 2012 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_3,5,main&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
ERROR XRE20: Failover performed successfully for database &apos;/export/home/tmp/jagtmp/autoderbyN_derbyall/suitesAll_1/log/db_master/wombat&apos;, the database has been shutdown.&lt;/p&gt;

&lt;p&gt;note the time: 04:40:11. In the client&apos;s derby.log I see:&lt;/p&gt;

&lt;p&gt;Tue May 29 04:40:12 CEST 2012 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_3,5,main&amp;#93;&lt;/span&gt; (DATABASE = /export/home/tmp/jagtmp/autoderbyN_derbyall/suitesAll_1/log/db_slave/wombat), (DRDAID = &lt;/p&gt;
{5}
&lt;p&gt;), Connection refused to database &apos;/export/home/tmp/jagtmp/autoderbyN_derbyall/suitesAll_1/log/db_slave/wombat&apos; because it is in replication slave mode.&lt;br/&gt;
Tue May 29 04:40:12 CEST 2012 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_3,5,main&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
java.sql.SQLException: Connection refused to database &apos;/export/home/tmp/jagtmp/autoderbyN_derbyall/suitesAll_1/log/db_slave/wombat&apos; because it is in replication slave mode.&lt;/p&gt;

&lt;p&gt;so I wonder if this can be a simple race. In the test, the call to connectPing happens directly after the call to failOver, and I cannot see any provision for waiting and/or trying until it succeeds.&lt;/p&gt;
</comment>
                            <comment id="13285257" author="dagw" created="Wed, 30 May 2012 00:30:50 +0100"  >&lt;p&gt;Attaching a simple patch which inserts a call to waitForConnect between the failOver and the connectPing.&lt;/p&gt;

&lt;p&gt;This should make sure the slave has enough time to fail over before the call to connectPing is made, if that is indeed the issue here. I see this pattern has been used elsewhere, e.g. in ReplicationRun_Local_showStateChange#testReplication_Local_showStateChange_showReplState.&lt;/p&gt;

&lt;p&gt;The test ReplicationRun_Local_3_p6 runs OK with the patch.&lt;/p&gt;</comment>
                            <comment id="13285525" author="kristwaa" created="Wed, 30 May 2012 10:21:12 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Is the patch itself missing?&lt;/p&gt;</comment>
                            <comment id="13285644" author="dagw" created="Wed, 30 May 2012 14:16:45 +0100"  >&lt;p&gt;Thanks, Kristian. Fixed.&lt;/p&gt;</comment>
                            <comment id="13285652" author="kristwaa" created="Wed, 30 May 2012 14:26:18 +0100"  >&lt;p&gt;Thanks, Dag.&lt;/p&gt;

&lt;p&gt;The change looks good to me, +1.&lt;br/&gt;
I see that two different values are used for the number of retries; 10 (as in your patch) and 200. I haven&apos;t checked if the test is waiting for something it knows takes a long time when the higher number of retries is used.&lt;/p&gt;</comment>
                            <comment id="13285684" author="knutanders" created="Wed, 30 May 2012 15:10:22 +0100"  >&lt;p&gt;It looks good to me too. Do we need similar changes for the other occurrences of this pattern too? Maybe we could make pingConnect() as tolerant as waitForConnect(), so that no changes are needed in the test cases themselves? (The former only tolerate 08004 errors while waiting for the server to come up, whereas the latter accepts all errors.)&lt;/p&gt;</comment>
                            <comment id="13286993" author="dagw" created="Thu, 31 May 2012 23:07:25 +0100"  >&lt;p&gt;Thanks, Kristian &amp;amp; Knut! I did notice other place which did not use this pattern, too. Making pincConnect more resilient might be good,&lt;br/&gt;
unless there are use cases where changed behavior is not desired. I&apos;ll have a look.&lt;/p&gt;</comment>
                            <comment id="13287459" author="dagw" created="Fri, 1 Jun 2012 15:47:53 +0100"  >&lt;p&gt;Looking again, I think my first analysis was wrong, perhaps I looked at the wrong derby.log files. &lt;/p&gt;

&lt;p&gt;Attaching here &lt;/p&gt;

&lt;p&gt;fail/Embedded_30/ReplicationRun_Local_3_p6/testReplication_Local_3_p6_autocommit_OK/db_slave-derby.log and&lt;br/&gt;
fail/Embedded_30/ReplicationRun_Local_3_p6/testReplication_Local_3_p6_autocommit_OK/db_master-derby.log&lt;/p&gt;

&lt;p&gt;which show:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Master sees successful failover at time Tue May 29 04:37:03 (line 1175 i master log).&lt;/li&gt;
	&lt;li&gt;Slave reports &quot;Failover perfomed successfully&quot; at time Tue May 29 04:37:03 (line 28 in slave log).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The we see two minutes of failed connection attempt in slave log of this type:&lt;/p&gt;

&lt;p&gt;  &quot;Connection refused to database &apos;.... db_slave/wombat&apos; because it is in replication slave mode&quot;&lt;/p&gt;

&lt;p&gt;Finally at time Tue May 29 04:39:08, i.e. two minutes later, the slave&lt;br/&gt;
and master are shut down:&lt;/p&gt;

&lt;p&gt;  &quot;Shutting down Derby engine\nReplication slave role was stopped for database &apos;... /db_slave/wombat&apos;&lt;br/&gt;
  &quot;Shutting down Derby engine&quot; (master)&lt;/p&gt;

&lt;p&gt;because the two minutes of attempts in connectPing to connect to the&lt;br/&gt;
slave, supposedly failed over, bails out (replicationRun, line 379).&lt;/p&gt;

&lt;p&gt;So the question becomes, why can&apos;t the client connect to the failed&lt;br/&gt;
over slave after two minutes? Both the master and the slave have&lt;br/&gt;
reported on their logs that failover happened, as far as I understand&lt;br/&gt;
the logs.&lt;/p&gt;
</comment>
                            <comment id="13287472" author="dagw" created="Fri, 1 Jun 2012 16:17:24 +0100"  >&lt;p&gt;The message &quot;Failover perfomed successfully&quot; (sic) is issued after a call in the slave to LogToFile.failoverSlave, cf line 301 in SlaveController#doFailover,&lt;br/&gt;
so that&apos;s how far we know the slave got.&lt;/p&gt;</comment>
                            <comment id="13287485" author="dagw" created="Fri, 1 Jun 2012 16:43:28 +0100"  >&lt;p&gt;Uploading a patch for the typo in the slave&apos;s failover message: derby-4269-typo.diff.&lt;/p&gt;</comment>
                            <comment id="13287523" author="dagw" created="Fri, 1 Jun 2012 17:37:45 +0100"  >&lt;p&gt;Committed typo patch as svn 1345272.&lt;/p&gt;</comment>
                            <comment id="13287529" author="dagw" created="Fri, 1 Jun 2012 17:49:47 +0100"  >&lt;p&gt;The call to LogToFile.failoverSlave does the following: flushed received log records to disk, and then does a notify on slaveRecoveryMonitor, i.e.&lt;br/&gt;
it doesn&apos;t wait for the recovery to finish. So it seems the slave has gotten stuck in the recovery somehow, thus making connection attempts fail for two minutes.&lt;/p&gt;</comment>
                            <comment id="13287532" author="dagw" created="Fri, 1 Jun 2012 17:56:31 +0100"  >&lt;p&gt;FWIW, I was able to boot the slave database without incident.&lt;/p&gt;</comment>
                            <comment id="13288574" author="dagw" created="Mon, 4 Jun 2012 15:09:03 +0100"  >&lt;p&gt;Did tight runs of this test over the week-end. I was able to reproduce in 2 of 13000 attempts.&lt;/p&gt;</comment>
                            <comment id="13291286" author="dagw" created="Thu, 7 Jun 2012 21:40:40 +0100"  >&lt;p&gt;After a couple of more days, I made it hang by not timing out the ping if it doesn&apos;t succeed. Uploading jstacks of the three involved processes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test client, master and slave&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="13291290" author="dagw" created="Thu, 7 Jun 2012 21:44:12 +0100"  >&lt;p&gt;The only thing that strikes me at first blush is that the slave still has a &quot;ping&quot; thread running:&lt;/p&gt;

&lt;p&gt;&quot;derby.slave.ping-/export/home/tmp/dag/zb/derby-4269-keepwaiting-replicationTests.ReplicationRun_Local_3_p6-sb1.jars.sane-1.7.0_04-25804/db_slave/wombat&quot; daemon prio=3 tid=0x0873c400 nid=0x13 in Object.wait() &lt;span class=&quot;error&quot;&gt;&amp;#91;0xd409e000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: WAITING (on object monitor)&lt;br/&gt;
	at java.lang.Object.wait(Native Method)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting on &amp;lt;0xf0ff2508&amp;gt; (a java.lang.Object)&lt;br/&gt;
	at java.lang.Object.wait(Object.java:503)&lt;br/&gt;
	at org.apache.derby.impl.store.replication.net.ReplicationMessageReceive$SlavePingThread.run(ReplicationMessageReceive.java:535)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xf0ff2508&amp;gt; (a java.lang.Object)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;but I am not sure that is relevant. &lt;/p&gt;</comment>
                            <comment id="13291295" author="dagw" created="Thu, 7 Jun 2012 21:53:57 +0100"  >&lt;p&gt;Trying to connect to the slave maually via ij, i get confirmation it hasn&apos;t recovered:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby://localhost:1531/wombat&apos;;&lt;br/&gt;
ERROR 08004: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08004, SQLERRMC: Connection refused to database &apos;/export/home/tmp/dag/zb/derby-4269-keepwaiting-replicationTests.ReplicationRun_Local_3_p6-sb1.jars.sane-1.7.0_04-25804/db_slave/wombat&apos; because it is in replication slave mode.&lt;/p&gt;</comment>
                            <comment id="13291303" author="dagw" created="Thu, 7 Jun 2012 22:04:39 +0100"  >&lt;p&gt;Attaching a jstack of the slave threads as they look immediately before we initiate failover in line 194 of ReplicationRun_Local_3_p6.&lt;/p&gt;

&lt;p&gt;Note that the threads for the SlaveController and SlaveDatabaseBootThread are (still) seen, they have vanished in the stacks of the slave process!&lt;/p&gt;</comment>
                            <comment id="13291312" author="dagw" created="Thu, 7 Jun 2012 22:17:14 +0100"  >&lt;p&gt;In a successful failover, I see that the SlavePingThread lives on even after a successful connect, so thas was a red herring. More interesting i the fact that the thread doing recovery has gone, but apparently, the database still thinks it&apos;s in a slave state. I&apos;ll have a look at that phase transition.&lt;/p&gt;</comment>
                            <comment id="13291349" author="dagw" created="Thu, 7 Jun 2012 22:52:11 +0100"  >&lt;p&gt;In SlaveDataBase, the variable &quot;inReplicationSlaveMode&quot; holds the state. The error message 08004.C.7 (&quot;Connection refused to database &apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos; because it is in replication slave mode&quot;) i only every issued in two locations, both inside SlaveDataBase, in methods &quot;setupConnection&quot; and &quot;getAuthenticationService&quot;.&lt;/p&gt;

&lt;p&gt;In both cases, they test the variable inReplicationSlaveMode.  Looking at the booting (recovery) thread, the variable is reset to false ca line 317, inside the thread SlaveDatabaseBootThread:&lt;/p&gt;

&lt;p&gt; try {&lt;br/&gt;
   :&lt;br/&gt;
   bootBasicDatabase(create, params); // will be blocked&lt;/p&gt;

&lt;p&gt;   // if we get here, failover has been called and the&lt;br/&gt;
   // database can now be connected to&lt;br/&gt;
   inReplicationSlaveMode = false; &lt;br/&gt;
   :&lt;br/&gt;
 } catch (StandardException se) &lt;/p&gt;
{
   // We get here when SlaveController#stopSlave has been
   // called, or if a fatal exception has been thrown.
   handleShutdown(se);
 }

&lt;p&gt;Now, the thread is gone, but in our cae the variable is still true, so I believe the boot must have thrown a (runtime?) exception for this to occur. Notice we only catch StandardException, but any runetime exception would go unnoticed and the thread would terminate.&lt;br/&gt;
I&apos;ll try to instrument this code to log any exceptions on derby.log before the thread dies.&lt;/p&gt;</comment>
                            <comment id="13291733" author="knutanders" created="Fri, 8 Jun 2012 13:04:18 +0100"  >&lt;p&gt;If you set derby.tests.repltrace to true, the output from the sub-processes will be printed (see ReplicationRun.processDEBUGOutput(), called from runUserCommandLocally()). I assume an uncaught RuntimeException would have been printed to stderr in the sub-process, so it should be possible to see it with the tracing property set.&lt;/p&gt;</comment>
                            <comment id="13291817" author="dagw" created="Fri, 8 Jun 2012 16:14:07 +0100"  >&lt;p&gt;Yes, I considered that, but was afraid any earlier printing might change the timing, so I opted for a minimum change which only kicks in after the error has happened &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; We&apos;ll see if I catch any fish..&lt;/p&gt;</comment>
                            <comment id="13291963" author="dagw" created="Fri, 8 Jun 2012 21:22:54 +0100"  >&lt;p&gt;I caught the exception, and this is what I see, it was an NPE allright:&lt;/p&gt;

&lt;p&gt;----  BEGIN REPLICATION ERROR MESSAGE (6/8/12 9:07 PM) ----&lt;br/&gt;
Slave recovery: Unexpected exception, thread dies : &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; /export/home/tmp/dag/zb/derby-4269-keepwaiting-replicationTe\&lt;br/&gt;
sts.ReplicationRun_Local_3_p6-sb1.jars.sane-1.7.0_04-11053/db_slave/wombat&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at java.util.Hashtable.put(Hashtable.java:432)&lt;br/&gt;
        at org.apache.derby.iapi.util.DoubleProperties.propertyNames(DoubleProperties.java:70)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.getImplementations(BaseMonitor.java:1065)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.loadInstance(BaseMonitor.java:718)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:323)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:542)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.bootClassFactory(BasicDatabase.java:731)&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:193)&lt;br/&gt;
        at org.apache.derby.impl.db.SlaveDatabase.bootBasicDatabase(SlaveDatabase.java:446)&lt;br/&gt;
        at org.apache.derby.impl.db.SlaveDatabase.access$000(SlaveDatabase.java:72)&lt;br/&gt;
        at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:314)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:722)&lt;/p&gt;

&lt;p&gt;--------------------  END REPLICATION ERROR MESSAGE ---------------------&lt;/p&gt;</comment>
                            <comment id="13292712" author="knutanders" created="Mon, 11 Jun 2012 10:36:24 +0100"  >&lt;p&gt;The failing code in DoubleProperties.propertyNames():&lt;/p&gt;

&lt;p&gt;66        if (write != null) {&lt;br/&gt;
67&lt;br/&gt;
68            for (Enumeration e = write.propertyNames(); e.hasMoreElements(); ) &lt;/p&gt;
{
69                String key = (String) e.nextElement();
70                p.put(key, write.getProperty(key));
71            }
&lt;p&gt;72        }&lt;/p&gt;

&lt;p&gt;One of the arguments to Hastable.put() is null. I think this can only happen if some other thread is modifying the &quot;write&quot; instance at the same time as this code runs.&lt;/p&gt;</comment>
                            <comment id="13293709" author="dagw" created="Tue, 12 Jun 2012 16:51:07 +0100"  >&lt;p&gt;Yes, that was my conclusion too. The usage of property lists is extremely convoluted in the Derby boot process, and it was very hard to understand what&apos;s going on. And since this goes on in a forked VM, using a debugger is tricky without affecting the timing... I replaced all usages of java.util.Properties with a specialized version (DerbyProperties), so I could track all allocations and modifications of properties. Adding to the problem is the fact that Properties can have default Properties lists recursively, and this is being used. In addition Derby adds two layers of specializations: UpdateServiceProperties and DoubleProperties.&lt;/p&gt;

&lt;p&gt;Mostly, property lists are passed into constructors without any cloning of them so the number of live aliases is high.&lt;/p&gt;

&lt;p&gt;It turns out the layering at the time of the NPE in the boot is like this:&lt;/p&gt;

&lt;p&gt;DoubleProperties#write instance of&lt;br/&gt;
   UpdateServiceProperties#defaults instance of&lt;br/&gt;
       Properties#defaults instance of&lt;br/&gt;
           Properties (no default)   &amp;lt;----- race on this one&lt;/p&gt;

&lt;p&gt;The bottom one is the one that&apos;s being changed under our feet in these lines in EmbedConnection#bootDatabase:&lt;/p&gt;

&lt;p&gt;    :&lt;br/&gt;
    // clear these values as some modules hang onto                                  &lt;br/&gt;
    // the properties set corresponding to service.properties                        &lt;br/&gt;
    // and they shouldn&apos;t be interested in these JDBC attributes.                    &lt;br/&gt;
    info.clear(); &lt;/p&gt;

&lt;p&gt;It is initially allocated in EmbedConnection#filterProperties:&lt;/p&gt;

&lt;p&gt;    private Properties filterProperties(Properties inputSet) {                               &lt;br/&gt;
        Properties limited = new org.apache.derby.iapi.util.DerbyProperties();               &lt;br/&gt;
        :&lt;/p&gt;

&lt;p&gt;assigning it to &quot;info&quot;.&lt;/p&gt;

&lt;p&gt;The thread that is doing this is the thread that initially started the slave operation (cf. URL &quot;startSlave=true&quot;). This thread hangs until the master has been started and replication is underway&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. When the master comes online this thread the connect returns with XRE08 (&quot;REPLICATION_SLAVE_STARTED_OK&quot;).&lt;/p&gt;

&lt;p&gt;The failover happens in this test almost immediately, and the SlaveDatabaseBootThread then starts moving again (it i waiting for more log records to replay or failover).&lt;/p&gt;

&lt;p&gt;Unfortunately, in the current scenario, the thread doing &quot;startSlave=true&quot; is still active, normally it would have finished long before SlaveDatabaseBootThread starts moving again.&lt;/p&gt;

&lt;p&gt;The Property default at the 4th level above would normally be empty, since its being cleared by the &quot;startSlave=true&quot; thread in the &quot;info.clear&quot;. Bit since it&apos;s lagging behind, it only does this &quot;clear&quot; when the SlaveDatabaseBootThread has started its boot, leading to the contention.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; In EmbedConnection.bootDatabase, this corresponds to the line:&lt;/p&gt;

&lt;p&gt;// try to start the service if it doesn&apos;t already exist&lt;br/&gt;
if (!Monitor.startPersistentService(dbname, info)) {&lt;/p&gt;

</comment>
                            <comment id="13293714" author="dagw" created="Tue, 12 Jun 2012 16:55:48 +0100"  >&lt;p&gt;This may not be a problem in production, but it may make several of our replication tests fail, so I am changing priority to Major.&lt;/p&gt;</comment>
                            <comment id="13293939" author="dagw" created="Tue, 12 Jun 2012 22:39:03 +0100"  >&lt;p&gt;Attaching a patch which skips the cleaning action iff we are booting a slave. It makes the test work. I don&apos;t believe it will cause any problem, but we&apos;ll see when the regression come in.&lt;/p&gt;

&lt;p&gt;An alternative way to fix this would be some kind of extra synchronization to hold back the recovery thread till the boot thread has returned control to the client.&lt;/p&gt;</comment>
                            <comment id="13294450" author="dagw" created="Wed, 13 Jun 2012 14:35:54 +0100"  >&lt;p&gt;Regressions passed. Please review.&lt;/p&gt;</comment>
                            <comment id="13294935" author="knutanders" created="Thu, 14 Jun 2012 11:00:04 +0100"  >&lt;p&gt;Looks like a reasonable workaround for the bug, as the call to clear() seems not to be strictly required in any of the cases.&lt;/p&gt;

&lt;p&gt;The alternative approach of adding extra synchronization may be difficult, unless the Properties objects are replaced with some other data structure. At least the straightforward fix of enclosing the loop in DoubleProperties in a synchronized block on &quot;write&quot; would probably not suffice, because the multi-level nesting of Properties objects would still make it possible for other threads to access one of the underlying Properties objects directly and bypass the top-level synchronization.&lt;/p&gt;</comment>
                            <comment id="13295365" author="dagw" created="Thu, 14 Jun 2012 23:56:33 +0100"  >&lt;p&gt;Thanks, Knut. Yes, you are right, we&apos;d need some new mechanism for synchronizing this since the access is to the bottom-most property list.&lt;/p&gt;</comment>
                            <comment id="13295416" author="dagw" created="Fri, 15 Jun 2012 02:28:22 +0100"  >&lt;p&gt;Uploading an explicit synchronization fix for this issue. This will have the clearing of the properties wait till the boot thread is fully done by augmenting the predicate in the method verifySuccessfulBoot. This also made my instrumented Derby (which fails every time otherwise), work correctly for the test.&lt;/p&gt;

&lt;p&gt;I think I would prefer this patch to the previous one since it retains the original inten of the &quot;info.clear&quot; call.&lt;/p&gt;</comment>
                            <comment id="13295418" author="dagw" created="Fri, 15 Jun 2012 02:32:23 +0100"  >&lt;p&gt;By way of explanation: the analysis in a comment above is slightly wrong, sml the call to Monitor.startPersistentService (footnote &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; above). This call will actually hang till the failover is &lt;b&gt;almost&lt;/b&gt; done, but not quite, as evidenced in the bug. The reason the new patch wprks is that it makes sure the boot thread is really finished before allowing the call &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; in the initiating thread to complete.&lt;/p&gt;</comment>
                            <comment id="13295663" author="knutanders" created="Fri, 15 Jun 2012 14:59:50 +0100"  >&lt;p&gt;I agree that a fix that&apos;s local to SlaveDatabase is cleaner.&lt;/p&gt;

&lt;p&gt;To reduce the amount of state we need to maintain in the class, we could perhaps pass sdbThread as an argument to verifySuccessfulBoot(), and call isAlive() on it instead of checking the new volatile flag.&lt;/p&gt;</comment>
                            <comment id="13296051" author="dagw" created="Sat, 16 Jun 2012 01:47:45 +0100"  >&lt;p&gt;Yup, that&apos;s even better. Uploading rev #2 of this patch, &quot;derby-4269-explicit-synch-2&quot; using that idea. Rerunning all regressions.&lt;/p&gt;</comment>
                            <comment id="13395454" author="knutanders" created="Mon, 18 Jun 2012 08:33:36 +0100"  >&lt;p&gt;Did you forget to upload the patch? I don&apos;t see it.&lt;/p&gt;</comment>
                            <comment id="13396008" author="dagw" created="Mon, 18 Jun 2012 17:29:30 +0100"  >&lt;p&gt;Yes, apparently I did. Here it is for completeness.&lt;/p&gt;

&lt;p&gt;Unfortunately, explicit synchronization breaks other replication tests. The new extra waiting in &quot;verifySuccessfulboot&quot; makes the boot of the slavedatabase (minus the actual fail-over part to make it a new master) incomplete until fail-over time, cf. the call to startPersistentService mentioned above will now wait longer.&lt;/p&gt;

&lt;p&gt;This makes other connection attempts to the slave hang (the service isn&apos;t started, so the new thread tries to start it again), whereas previously a new thread returned an error indicating that the slave was still in slave state. So, I am back to the first patch, which skips the clearing of the properties for slave databases.&lt;/p&gt;</comment>
                            <comment id="13396015" author="dagw" created="Mon, 18 Jun 2012 17:37:50 +0100"  >&lt;p&gt;After this point in the SlaveController it is unsafe to access the properties iff they are being cleared:&lt;/p&gt;

&lt;p&gt;SlaveController#startSlave, line 254: &quot;startupSuccessful = true;&quot; because past that point, the connection thread is free to proceed and clear the properties, since the last criterion of verifySuccessfulBoot (boot waits for slave operation to be initiated here) is fulfilled.&lt;/p&gt;</comment>
                            <comment id="13397993" author="dagw" created="Thu, 21 Jun 2012 00:24:05 +0100"  >&lt;p&gt;Attaching derby-4269-explicit-synch-3. This uses a binary semaphore to avoid concurrent aaccess of the &quot;info&quot; Properties object by the two contending threads.&lt;/p&gt;

&lt;p&gt;EmbedConnection#bootDatabase grabs the semaphore before doing the call on &quot;info.clear&quot; and releases it after.&lt;/p&gt;

&lt;p&gt;The SlaveDatabaseBootThread grabs it immediately after recovery has been successfully completed after a fail-over (in LogToFile#recover) and releases it when the SlaveDatabaseBootThread is done.&lt;/p&gt;

&lt;p&gt;This patch passes regressions and also works with my instrumented version of Derby which reliably reproduces the NPE seen in this issue.&lt;/p&gt;

&lt;p&gt;Unfortunately, it adds a bit for clutter since we need to add the P&amp;amp;V operations through three levels:&lt;/p&gt;

&lt;p&gt;           SlaveDatabase&lt;br/&gt;
           SlaveFactory/SlaveController&lt;br/&gt;
           LogToFile&lt;/p&gt;

&lt;p&gt;but I didn&apos;t find a better way.&lt;/p&gt;</comment>
                            <comment id="13399414" author="knutanders" created="Fri, 22 Jun 2012 17:20:47 +0100"  >&lt;p&gt;Since the underlying NullPointerException happens because we try to put a null value into a Properties object in DoubleProperties.propertyNames(), but we never actually use the property value (the method returns p.keys()), I&apos;m wondering if the attached patch would fix the problem. It makes propertyNames() use an intermediate Vector instance instead of a Properties instance, so that it never needs to access the property value.&lt;/p&gt;</comment>
                            <comment id="13399631" author="dagw" created="Fri, 22 Jun 2012 22:43:18 +0100"  >&lt;p&gt;Yes, it would remove the NPE, I agree. But do we have any guarantee that the returned keys aren&apos;t used to access values (and if so tat those are assumed to be non-null) elsewhere? It may well be that that is not the case, and that this solution is ok. Still, I think the shared use of the properties is unsafe...&lt;/p&gt;</comment>
                            <comment id="13399698" author="knutanders" created="Sat, 23 Jun 2012 00:02:00 +0100"  >&lt;p&gt;FWIW, all the regression tests ran cleanly with the keys-only.diff patch. Even if it doesn&apos;t fix the bug, I think it&apos;s an improvement as it slightly simplifies the code.&lt;/p&gt;

&lt;p&gt;&amp;gt; But do we have any guarantee that the returned keys aren&apos;t used to access values (and if so tat those are assumed to be non-null) elsewhere?&lt;/p&gt;

&lt;p&gt;I don&apos;t know. However, what caused this particular bug, was that the override of Properties.propertyNames() itself wasn&apos;t safe to use, so that it didn&apos;t give the thread-safety guarantees that one would normally expect from Properties&apos; methods. Callers of Properties&apos; methods should already be aware of the limitations of the synchronization guarantees provided by Properties (for example that there is a possibility that getProperty() returns null, as there is no synchronization preventing the property from getting removed after a check for the existence of a key). If they don&apos;t take that into consideration, it&apos;s a bug that needs to be fixed. But in cases where the actual bug lies in the override of a Properties method, like in this case, one cannot reasonably expect the callers to handle the problem gracefully.&lt;/p&gt;

&lt;p&gt;So although I cannot guarantee that all users of Properties instances in the engine are free from bugs, I believe that the Properties class does provide the functionality to be used in a thread-safe way, even without adding a semaphore that guards the call to info.clear().&lt;/p&gt;</comment>
                            <comment id="13399728" author="knutanders" created="Sat, 23 Jun 2012 00:44:30 +0100"  >&lt;p&gt;By the way, I don&apos;t think the keys-only patch is quite correct. Now that it&apos;s using a Vector, there&apos;s no elimination of duplicates, and it might return duplicate keys if the read and write fields contain overlapping properties.&lt;/p&gt;</comment>
                            <comment id="13399808" author="dagw" created="Sat, 23 Jun 2012 03:16:44 +0100"  >&lt;p&gt;Knut: &amp;lt;good explanation of the thread-safety guarantees of Properties&amp;gt;&lt;br/&gt;
Part of the problem here is that the old (i.e. pre-replication code) might not be prepared for thread concurrency on the Properties object, viz the fact the buggy overload wasn&apos;t detected before.&lt;br/&gt;
Still, I am tempted to go for your solution (modulo the weakness you pointed out) to get rid of the ugly explicit synchronization, and wrong use issues if/when they surface. My fear is, though, that could be hard to track down.. so the explicit synch is safer if we can&apos;t be sure how this is used. I&apos;&apos; try to analyze the usages of the overloaded propertyNames..&lt;/p&gt;</comment>
                            <comment id="13399922" author="knutanders" created="Sat, 23 Jun 2012 12:59:59 +0100"  >&lt;p&gt;I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5830&quot; title=&quot;Make DoubleProperties.propertyNames() thread-safe&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5830&quot;&gt;&lt;del&gt;DERBY-5830&lt;/del&gt;&lt;/a&gt; for fixing DoubleProperties.propertyNames(), so we can separate that issue from any changes that need to be done to the slave boot code.&lt;/p&gt;

&lt;p&gt;So far, I think we have discussed three areas that potentially need fixing:&lt;/p&gt;

&lt;p&gt;1) Lack of thread-safety in DoubleProperties - now handled in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5830&quot; title=&quot;Make DoubleProperties.propertyNames() thread-safe&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5830&quot;&gt;&lt;del&gt;DERBY-5830&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) Boot code not prepared for being multi-threaded. The fix for (1) may be sufficient, but there may be other hidden bugs caused by the slave boot process breaking assumptions made in existing code.&lt;/p&gt;

&lt;p&gt;3) SlaveDatabaseBootThread silently ignores runtime exceptions and leaves the process hanging. The fix for (1) may remove the cause for the hang we&apos;ve seen, but SlaveDatabaseBootThread still doesn&apos;t handle unexpected failures gracefully.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what&apos;s the best way to approach (2). It&apos;s difficult to see from the code exactly which places the Properties instance in question is used. Maybe we could make EmbedConnection.filterProperties() return an instrumented sub-class of Properties that logs the stack trace of all calls to getProperty(), run some subset of the regression tests, and then manually inspect the call sites to see if they would handle the disappearance of a property?&lt;/p&gt;</comment>
                            <comment id="13400431" author="dagw" created="Mon, 25 Jun 2012 12:53:19 +0100"  >&lt;p&gt;Thanks for filing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5830&quot; title=&quot;Make DoubleProperties.propertyNames() thread-safe&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5830&quot;&gt;&lt;del&gt;DERBY-5830&lt;/del&gt;&lt;/a&gt;. I added some code in my patch to log errors to derby.log if SlaveDatabaseBootThread fails in 3). How graceful it is is another matter, but we should at least learn what the error is. Under normal operation the boot should not fail, one would hope. As for checking usages, I have already made a Derby specific version of Properties to find the original race, so I can use that for tracking down usages of getProperties.&lt;/p&gt;</comment>
                            <comment id="13401339" author="dagw" created="Tue, 26 Jun 2012 13:18:03 +0100"  >&lt;p&gt;I instrumented all calls to propertyNames while in the slave boot code running ReplicationRun_Local_3_p6-sb1. It turns out the only place where DoubleProperties#propertyNames&lt;br/&gt;
is called is here in BaseMonitor#getImplementations (cf also the original backtrace above):&lt;/p&gt;

&lt;p&gt;    nextModule:&lt;br/&gt;
       for (Enumeration e = moduleList.propertyNames(); e.hasMoreElements(); ) {&lt;br/&gt;
           String key = (String) e.nextElement();&lt;/p&gt;

&lt;p&gt;           // module tagged name in the modules.properties file.&lt;br/&gt;
           // used as the tag  for dependent properties.&lt;br/&gt;
           String tag;&lt;/p&gt;

&lt;p&gt;           // Dynamically loaded code is defined by a property of&lt;br/&gt;
           // the form:&lt;br/&gt;
           // derby.module.&amp;lt;modulename&amp;gt;=&amp;lt;class name&amp;gt;&lt;br/&gt;
           // or&lt;br/&gt;
           // derby.subSubProtocol.&amp;lt;modulename&amp;gt;=&amp;lt;classname&amp;gt;&lt;/p&gt;

&lt;p&gt;           if (key.startsWith(Property.MODULE_PREFIX)) &lt;/p&gt;
{
               tag = key.substring(Property.MODULE_PREFIX.length());
           } else if (key.startsWith(Property.SUB_SUB_PROTOCOL_PREFIX)) {
               tag = key.substring(Property.MODULE_PREFIX.length());
           }
&lt;p&gt; else &lt;/p&gt;
{
               continue nextModule;
           }

&lt;p&gt;This means that all properties that do not start with MODULE_PREFIX (&quot;derby.module.&quot;) or SUB_SUB_PROTOCOL_PREFIX (&quot;derby.subProtocol.&quot;) are skipped. None of those are legal URL properties, and could thus stem from the contested info properties object acclocated int EmbedConnection.&lt;/p&gt;

&lt;p&gt;I therefore believe we can avoid doing the explicit synchronization when &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5830&quot; title=&quot;Make DoubleProperties.propertyNames() thread-safe&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5830&quot;&gt;&lt;del&gt;DERBY-5830&lt;/del&gt;&lt;/a&gt; goes in.&lt;/p&gt;

&lt;p&gt;I&apos;ll run the instrumented versions on all the replication tests for good measure before I conclude, though.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Comment edited 2012-07-03: completed tests, the above theory holds.&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13405390" author="dagw" created="Mon, 2 Jul 2012 23:18:15 +0100"  >&lt;p&gt;Uploading a patch for item 3) above; fix-ignored-runtime-exceptions-a as well as a patch building on that which adds instrumentation to test it manually.&lt;/p&gt;

&lt;p&gt;Using the instrummentation I see this on derby.log:&lt;/p&gt;

&lt;p&gt;----  BEGIN REPLICATION ERROR MESSAGE (02.07.12 21:58) ----&lt;br/&gt;
Replication slave got a fatal error for database &apos;/export/home/dag/NetBeansProjects/JUnitTest/test/db_slave/wombat&apos;. Replication will be stopped.&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.impl.db.SlaveDatabase$SlaveDatabaseBootThread.run(SlaveDatabase.java:324)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:722)&lt;/p&gt;

&lt;p&gt;--------------------  END REPLICATION ERROR MESSAGE ---------------------&lt;/p&gt;</comment>
                            <comment id="13405710" author="knutanders" created="Tue, 3 Jul 2012 10:15:45 +0100"  >&lt;p&gt;The patch looks fine to me.&lt;/p&gt;

&lt;p&gt;Minor nit: Since SlaveDatabaseBootThread is a non-static inner class of SlaveDatabase, the fields and methods of the parent SlaveDatabase instance can be accessed directly from the SlaveDatabaseBootThread instance. So it should be possible to read the value of the dbname field in SlaveDatabaseBootThread.run() without introducing an accessor method and a new field.&lt;/p&gt;</comment>
                            <comment id="13405944" author="dagw" created="Tue, 3 Jul 2012 15:09:03 +0100"  >&lt;p&gt;Thanks, Knut. Fixed your nit in version fix-ignored-runtime-exceptions-b.&lt;/p&gt;</comment>
                            <comment id="13405946" author="dagw" created="Tue, 3 Jul 2012 15:57:44 +0100"  >&lt;p&gt;Committed fix-ignored-runtime-exceptions-b as svn 1356766, resolving.&lt;/p&gt;</comment>
                            <comment id="13406595" author="dagw" created="Wed, 4 Jul 2012 16:40:09 +0100"  >&lt;p&gt;Backported fix-ignored-runtime-exceptions-b to 10.9 at svn 1357310.&lt;/p&gt;</comment>
                            <comment id="13406634" author="dagw" created="Wed, 4 Jul 2012 18:30:56 +0100"  >&lt;p&gt;Backported fix-ignored-runtime-exceptions-b to 10.8 at svn 1357343.&lt;/p&gt;

&lt;p&gt;Will close issue when &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5830&quot; title=&quot;Make DoubleProperties.propertyNames() thread-safe&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5830&quot;&gt;&lt;del&gt;DERBY-5830&lt;/del&gt;&lt;/a&gt; is backported, too.&lt;/p&gt;</comment>
                            <comment id="14119565" author="knutanders" created="Wed, 3 Sep 2014 09:31:26 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12501060">DERBY-5123</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12595679">DERBY-5830</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12531297" name="4269-client-jstack.txt" size="7333" author="dagw" created="Thu, 7 Jun 2012 21:41:32 +0100"/>
                            <attachment id="12531298" name="4269-master.txt" size="4761" author="dagw" created="Thu, 7 Jun 2012 21:41:32 +0100"/>
                            <attachment id="12531302" name="4269-slave-jstack-before-failover.txt" size="8073" author="dagw" created="Thu, 7 Jun 2012 22:04:39 +0100"/>
                            <attachment id="12531299" name="4269-slave.txt" size="5708" author="dagw" created="Thu, 7 Jun 2012 21:41:32 +0100"/>
                            <attachment id="12530201" name="DERBY-4269.diff" size="974" author="dagw" created="Wed, 30 May 2012 14:13:30 +0100"/>
                            <attachment id="12530113" name="DERBY-4269.stat" size="113" author="dagw" created="Wed, 30 May 2012 00:30:50 +0100"/>
                            <attachment id="12531882" name="DERBY-4269b.diff" size="5043" author="dagw" created="Tue, 12 Jun 2012 22:39:03 +0100"/>
                            <attachment id="12530555" name="db_master-derby.log" size="98912" author="dagw" created="Fri, 1 Jun 2012 15:50:24 +0100"/>
                            <attachment id="12530556" name="db_slave-derby.log.gz" size="19264" author="dagw" created="Fri, 1 Jun 2012 15:50:24 +0100"/>
                            <attachment id="12532423" name="derby-4269-explicit-synch-2.diff" size="1403" author="dagw" created="Mon, 18 Jun 2012 17:29:30 +0100"/>
                            <attachment id="12532794" name="derby-4269-explicit-synch-3.diff" size="9644" author="dagw" created="Thu, 21 Jun 2012 00:26:11 +0100"/>
                            <attachment id="12532795" name="derby-4269-explicit-synch-3.status" size="792" author="dagw" created="Thu, 21 Jun 2012 00:26:11 +0100"/>
                            <attachment id="12532152" name="derby-4269-explicit-synch.diff" size="1672" author="dagw" created="Fri, 15 Jun 2012 02:28:22 +0100"/>
                            <attachment id="12530569" name="derby-4269-typo.diff" size="649" author="dagw" created="Fri, 1 Jun 2012 17:38:39 +0100"/>
                            <attachment id="12534465" name="fix-ignored-runtime-exceptions-a.diff" size="3137" author="dagw" created="Mon, 2 Jul 2012 23:18:15 +0100"/>
                            <attachment id="12534874" name="fix-ignored-runtime-exceptions-b.diff" size="1911" author="dagw" created="Tue, 3 Jul 2012 15:09:03 +0100"/>
                            <attachment id="12534466" name="fix-ignored-runtime-exceptions-instr.diff" size="1008" author="dagw" created="Mon, 2 Jul 2012 23:18:15 +0100"/>
                            <attachment id="12533065" name="keys-only.diff" size="1089" author="knutanders" created="Fri, 22 Jun 2012 17:20:47 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>18.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Jul 2009 16:19:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24143</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0b73:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35632</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>