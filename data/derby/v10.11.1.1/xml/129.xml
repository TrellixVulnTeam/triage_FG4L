<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:20:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-129/DERBY-129.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-129] Derby should throw a truncation error or warning when CASTing a parameter/constant to char or char for bit datatypes and the data is too large for the datatype.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-129</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby doesn&apos;t throw a truncation exception/warning when data is too large during casting of constants or parameters to character string or bit string data types. &lt;/p&gt;

&lt;p&gt;Following is ij example for constants which is too big for the datatype it is getting cast to&lt;br/&gt;
ij&amp;gt; values (cast (&apos;hello&apos; as char(3)));&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;hel&lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; values (cast (X&apos;0102&apos; as char(1) for bit data));&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;01&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;Following code snippet is when using parameters through a JDBC program&lt;br/&gt;
   s.executeUpdate(&quot;create table ct (c CLOB(100K))&quot;);&lt;br/&gt;
   //the following Formatters just loads cData with 32700 &apos;c&apos; characters&lt;br/&gt;
   String cData = org.apache.derbyTesting.functionTests.util.Formatters.repeatChar(&quot;c&quot;,32700);&lt;br/&gt;
   //notice that ? in the preared statement below is bound to length 32672&lt;br/&gt;
   pSt = con.prepareStatement(&quot;insert into ct values (cast (? as varchar(32672)))&quot;);&lt;br/&gt;
   pSt.setString(1, cData);&lt;br/&gt;
   //Derby doesn&apos;t throw an exception at ps.execute time for 32700 characters into 32672 parameter. It silently&lt;br/&gt;
   truncates it to 32672&lt;br/&gt;
   pSt.execute();&lt;/p&gt;


</description>
                <environment></environment>
        <key id="29593">DERBY-129</key>
            <summary>Derby should throw a truncation error or warning when CASTing a parameter/constant to char or char for bit datatypes and the data is too large for the datatype.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                            <label>derby_triage10_8</label>
                    </labels>
                <created>Sat, 22 Jan 2005 05:22:09 +0000</created>
                <updated>Wed, 21 Jan 2015 00:22:58 +0000</updated>
                            <resolved>Tue, 11 Sep 2012 19:24:01 +0100</resolved>
                                    <version>10.0.2.1</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="57928" author="jboynes" created="Sat, 22 Jan 2005 10:13:30 +0000"  >&lt;p&gt;I don&apos;t believe Derby should throw an exception under these circumstances.&lt;/p&gt;

&lt;p&gt;According to the SQL spec (SQL-03 4.2.1), &quot;if a retrieval assignment or evaluation of a&lt;br/&gt;
&amp;lt;cast specification&amp;gt; would result in the loss of characters due to truncation, then a warning condition is raised.&quot; And according to JDBC (3.0 8.2) &quot;when data truncation occurs on a read from the data source, a SQLWarning is reported.&quot; The SQL spec considers this a retrieve/cast operation so instead of throwing an exception we should complete execution of the statement and add a java.sql.DataTruncation warning to the list returned from Statement.getWarnings()&lt;/p&gt;

&lt;p&gt;In contrast, if the truncation occurs during a write operation then we do need to throw an exception; we actually do this, throwing an SQLException with SQLState 22001. However, I believe this is not compliant with JDBC which states that &quot;when data truncation occurs on a write to the data source, a DataTruncation object is thrown.&quot; So instead of throwing the SQLException base class we should be throwing a DataTruncation subclass.&lt;/p&gt;

&lt;p&gt;To clarify, the reason this is a read operation even though we are executing an INSERT is that the data is being used the CAST function not directly in the INSERT. So if we have a table with a single VARCHAR(3) column&lt;/p&gt;

&lt;p&gt;INSERT INTO TEST VALUES (CAST(&apos;01234&apos; AS VARCHAR(3))) &lt;/p&gt;

&lt;p&gt;should complete with a warning but&lt;/p&gt;

&lt;p&gt;INSERT INTO TEST VALUES (&apos;01234&apos;)&lt;/p&gt;

&lt;p&gt;should fail by throwing a DataTruncation exception.&lt;/p&gt;</comment>
                            <comment id="12730964" author="myrna" created="Tue, 14 Jul 2009 17:49:14 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;10.5.2 Triage&amp;#93;&lt;/span&gt; Mamta, do you agree with Jeremy&apos;s comments? If so, can this oldy be closed as Invalid?&lt;/p&gt;</comment>
                            <comment id="12867896" author="knutanders" created="Sat, 15 May 2010 18:11:33 +0100"  >&lt;p&gt;I don&apos;t think Jeremy suggested that this issue was invalid, only that the appropriate response is a warning and not an exception. Derby doesn&apos;t currently give a warning.&lt;/p&gt;</comment>
                            <comment id="13278772" author="knutanders" created="Fri, 18 May 2012 13:42:00 +0100"  >&lt;p&gt;Attaching patch d129-1a.diff, which is based on warn.diff attached to&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5537&quot; title=&quot;Casting to a shorter string type does not warn about truncation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5537&quot;&gt;&lt;del&gt;DERBY-5537&lt;/del&gt;&lt;/a&gt; with additional code to make the network server propagate&lt;br/&gt;
the warning to the client, and changes to make the tests pass.&lt;/p&gt;

&lt;p&gt;Detailed description of the changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;iapi/types/SQLBinary.java&lt;/li&gt;
	&lt;li&gt;iapi/types/SQLChar.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Added code to generate the DataTruncation warning.&lt;/p&gt;

&lt;p&gt;One thing to note is that the javadoc for java.sql.DataTruncation says&lt;br/&gt;
the data size and the transfer size are to be specified in number of&lt;br/&gt;
bytes, so SQLChar needed some logic to convert character length to&lt;br/&gt;
byte length. I refactored the writeUTF() method in that class in order&lt;br/&gt;
to avoid duplication of the bit-fiddling logic when calculating the&lt;br/&gt;
length.&lt;/p&gt;

&lt;p&gt;Another thing to note is that we don&apos;t know the index of the column&lt;br/&gt;
that&apos;s being truncated, so the index field of the DataTruncation&lt;br/&gt;
warning is set to -1, as DataTruncation&apos;s javadoc says getIndex() may&lt;br/&gt;
return -1 if the column index is unknown.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;iapi/types/SQLBit.java&lt;/li&gt;
	&lt;li&gt;iapi/types/SQLBlob.java&lt;/li&gt;
	&lt;li&gt;iapi/types/SQLVarbit.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use the shared truncate() method added to SQLBinary to truncate and,&lt;br/&gt;
if required, add a warning.&lt;/p&gt;


&lt;p&gt;iapi/sql/ResultSet.java&lt;br/&gt;
impl/sql/execute/BasicNoPutResultSetImpl.java&lt;br/&gt;
impl/sql/execute/NoRowsResultSetImpl.java&lt;br/&gt;
impl/sql/execute/TemporaryRowHolderResultSet.java&lt;/p&gt;

&lt;p&gt;Changes to allow adding the warning even if we don&apos;t end up returning&lt;br/&gt;
a JDBC ResultSet, in which case the warning will be added to the&lt;br/&gt;
executing statement.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;impl/drda/DRDAConnThread.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;DataTruncation.getErrorCode() always returns 0 (there&apos;s no way to&lt;br/&gt;
change that), but the protocol uses code 0 to indicate that the client&lt;br/&gt;
should discard the warning. The patch makes the server send error code&lt;br/&gt;
10000 (ExceptionSeverity.WARNING_SEVERITY) for DataTruncation, like it&lt;br/&gt;
does for all other warnings.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;iapi/services/io/CounterOutputStream.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Modified to allow it to be used to count number of bytes in a string&lt;br/&gt;
when generating DataTruncation warning in SQLChar. Its javadoc says&lt;br/&gt;
the stream will discard bytes written to it if it&apos;s created with the&lt;br/&gt;
zero-arg constructor. However, it does not discard the bytes and fails&lt;br/&gt;
with a NPE when trying to write to a null stream when used this way.&lt;br/&gt;
The patch modifies the write methods to do what the javadoc says they&lt;br/&gt;
should (and removes one of them - write(byte[]), since the default&lt;br/&gt;
method inherited from OutputStream does the right thing, that is, it&lt;br/&gt;
forwards the calls to write(byte[],int,int)).&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;shared/common/reference/SQLState.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Renamed constant from LANG_FILE_ERROR to LANG_IO_EXCEPTION since the&lt;br/&gt;
corresponding error message doesn&apos;t necessarily have to do with files.&lt;br/&gt;
Since the message wasn&apos;t actually in use before the patch, even though&lt;br/&gt;
it existed in the code, no callers had to be changed because of this.&lt;br/&gt;
The patch makes use of the message in SQLChar.getUTF8Length().&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;functionTests/tests/lang/CastingTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Added a test case that verified that DataTruncation warnings were&lt;br/&gt;
added correctly to ResultSets and Statements. Enabled the test for&lt;br/&gt;
client/server mode as well to verify that the warnings made it over to&lt;br/&gt;
the client.&lt;/p&gt;


&lt;p&gt;Additionally, lots of canons had to be updated because of new&lt;br/&gt;
warnings. Most of these were the expected truncation warnings, but&lt;br/&gt;
there were also some new warnings of the type&lt;/p&gt;

&lt;p&gt;WARNING 01003: Null values were eliminated from the argument of a column function.&lt;/p&gt;

&lt;p&gt;that appeared because of the changes that propagated warnings from&lt;br/&gt;
sub-queries of DML statements up to the executing statement. The new&lt;br/&gt;
warnings looked correct to me.&lt;/p&gt;

&lt;p&gt;The canons were either changed to expect the new warnings, or, in the&lt;br/&gt;
cases where the new warnings added too much noise (in particular the&lt;br/&gt;
old framework tests that include LockTableQuery.subsql), the queries&lt;br/&gt;
were changed so that they would not emit DataTruncation warnings.&lt;/p&gt;</comment>
                            <comment id="13278790" author="knutanders" created="Fri, 18 May 2012 14:08:53 +0100"  >&lt;p&gt;One other thing that&apos;s probably worth mentioning, is that the&lt;br/&gt;
truncation warning doesn&apos;t always end up on the same row as the one&lt;br/&gt;
where the truncation happened. This seems to be the case when there&apos;s&lt;br/&gt;
been a join or the result has been sorted.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t1 (x varchar(5));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t1 values &apos;hello&apos;, &apos;hi&apos;, &apos;hey&apos;, &apos;yo&apos;;&lt;br/&gt;
4 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select cast(x as char(3)) from t1 order by x desc;&lt;br/&gt;
1   &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;yo  &lt;br/&gt;
WARNING 01004: Data truncation&lt;br/&gt;
hi  &lt;br/&gt;
hey &lt;br/&gt;
hel &lt;/p&gt;

&lt;p&gt;4 rows selected&lt;/p&gt;

&lt;p&gt;Here, the warning comes with the first row, whereas the truncated&lt;br/&gt;
value is in the last row.&lt;/p&gt;

&lt;p&gt;This appears to be an existing problem with warnings in Derby, also&lt;br/&gt;
seen with other types of warnings. For example, with 10.8.2.2, I see&lt;br/&gt;
this in a query that generates a warning of a different kind:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t2(x int, y int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t2 values (1,1),(2,2),(3,null);&lt;br/&gt;
3 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select x, avg&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_up.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t2 group by x order by x;&lt;br/&gt;
X          |2          &lt;br/&gt;
-----------------------&lt;br/&gt;
1          |1          &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
2          |2          &lt;br/&gt;
3          |NULL       &lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;Here, too, the warning comes with the first row, whereas the row&lt;br/&gt;
containing the NULL value that it warns about, shows up in the last&lt;br/&gt;
row. So the problem isn&apos;t introduced by the patch.&lt;/p&gt;</comment>
                            <comment id="13279223" author="dagw" created="Fri, 18 May 2012 22:46:08 +0100"  >&lt;p&gt;Hi Knut, thanks for this cleanup! I hope this can go in along with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt; into 10.9 (both concern truncation diagnostics).&lt;/p&gt;

&lt;p&gt;Some small nits:&lt;/p&gt;

&lt;p&gt;SQLBinary#truncate&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If value is lob, the call to first getLength, then to getValue, can&lt;br/&gt;
  cause us the risk of havin to read a lob twice. If we call getValue&lt;br/&gt;
  first, we can save the call to getLength, no?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Or, in all of SQLBit, SQLVarBit and SQLBlob, the actual width is&lt;br/&gt;
  actually available at the call site, so it could be passed in&lt;br/&gt;
  instead of doing another getLength? But maybe the lob is already in&lt;br/&gt;
  memory, so LOB reading cannot take place here.. if so, a comment&lt;br/&gt;
  that the getLength should be cheap would be nice.&lt;/p&gt;


&lt;p&gt;SQLChar#getUTF8Length&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think we could use the less specialized class ObjectOutputStream&lt;br/&gt;
  instead of FormatIdOutputStream here for &quot;cs&quot;. The write method&lt;br/&gt;
  isn&apos;t overriden by FormatIdOutputStream, though, but it made me wary&lt;br/&gt;
  at first, lest extra bytes were written. writeUTF needs&lt;br/&gt;
  ObjectOutputStream, not FormatIdOutputStream.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;CastingTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;/**&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Check the results for the queries in testDataTruncation().&lt;br/&gt;
     */&lt;br/&gt;
    private void checkDataTruncationResult(Statement s, String sql)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Might be good to document the expected row behavior: 1, 0 and 2&lt;br/&gt;
  warnings for rows 1,2 and three respectively, and 3, 3 and 4 in&lt;br/&gt;
  actual dataSize in the Javadoc.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;checkDataTruncationResult(s,&lt;br/&gt;
  &quot;values (cast(&apos;abc&apos; as clob(2)), cast(&apos;de&apos;   as varchar(2))),&quot; +&lt;br/&gt;
  &quot;       (cast(&apos;fg&apos;  as clob(2)), cast(&apos;hi&apos;   as varchar(2))),&quot; +&lt;br/&gt;
  &quot;       (cast(&apos;jkl&apos; as clob(2)), cast(&apos;mnop&apos; as varchar(2)))&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Why not clob(2) in column 2 on these rows? Copy/paste error?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DRDAConnThread&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Is the code path &lt;/p&gt;

&lt;p&gt;  private int getSqlCode(int severity)&lt;br/&gt;
  {&lt;br/&gt;
    if (severity == CodePoint.SVRCOD_WARNING)		// warning&lt;br/&gt;
       return 100;		//CLI likes it&lt;/p&gt;

&lt;p&gt;  still relevant now that you test &quot;instanceof SQLEWarning&quot;?&lt;/p&gt;</comment>
                            <comment id="13280095" author="knutanders" created="Mon, 21 May 2012 12:41:12 +0100"  >&lt;p&gt;Thanks for reviewing the patch, Dag!&lt;/p&gt;

&lt;p&gt;&amp;gt; Hi Knut, thanks for this cleanup! I hope this can go in along with&lt;br/&gt;
&amp;gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt; into 10.9 (both concern truncation diagnostics).&lt;/p&gt;

&lt;p&gt;If it&apos;s completed in time for 10.9, perhaps the warnings should be&lt;br/&gt;
mentioned in the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt; release note? Might be easier to explain&lt;br/&gt;
the two together in one release note than in two separate notes.&lt;/p&gt;

&lt;p&gt;&amp;gt; SQLBinary#truncate&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; - If value is lob, the call to first getLength, then to getValue, can&lt;br/&gt;
&amp;gt;   cause us the risk of havin to read a lob twice. If we call getValue&lt;br/&gt;
&amp;gt;   first, we can save the call to getLength, no?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   Or, in all of SQLBit, SQLVarBit and SQLBlob, the actual width is&lt;br/&gt;
&amp;gt;   actually available at the call site, so it could be passed in&lt;br/&gt;
&amp;gt;   instead of doing another getLength? But maybe the lob is already in&lt;br/&gt;
&amp;gt;   memory, so LOB reading cannot take place here.. if so, a comment&lt;br/&gt;
&amp;gt;   that the getLength should be cheap would be nice.&lt;/p&gt;

&lt;p&gt;I think the getLength() calls would typically be cheap because, as you&lt;br/&gt;
observed, it has already been called before truncate(), and length is&lt;br/&gt;
in most cases cached. The exception seems to be if the SQLBlob wraps a&lt;br/&gt;
java.sql.Blob instance, in which case Blob.length() will be called&lt;br/&gt;
both times, and there&apos;s no guarantee that the Blob class in question&lt;br/&gt;
(which could be a user-defined class) is caching the length.&lt;/p&gt;

&lt;p&gt;I&apos;ll change the signature of truncate() to take the original length as&lt;br/&gt;
a parameter, as you suggested, to avoid the extra getLength() calls.&lt;/p&gt;

&lt;p&gt;&amp;gt; SQLChar#getUTF8Length&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; - I think we could use the less specialized class ObjectOutputStream&lt;br/&gt;
&amp;gt;   instead of FormatIdOutputStream here for &quot;cs&quot;. The write method&lt;br/&gt;
&amp;gt;   isn&apos;t overriden by FormatIdOutputStream, though, but it made me wary&lt;br/&gt;
&amp;gt;   at first, lest extra bytes were written. writeUTF needs&lt;br/&gt;
&amp;gt;   ObjectOutputStream, not FormatIdOutputStream.&lt;/p&gt;

&lt;p&gt;That was my first thought, too. However, ObjectOutputStream inserts&lt;br/&gt;
some extra bytes at block boundaries (typically, after flush() has&lt;br/&gt;
been called, or when some internal block size limit is exceeded),&lt;br/&gt;
which made it a bit tricky to count the number of bytes. It might be&lt;br/&gt;
possible to compensate for this with some extra logic, but I think&lt;br/&gt;
that would just complicate the code for little added benefit.&lt;/p&gt;

&lt;p&gt;It&apos;s easy to get confused with all the different base-classes and&lt;br/&gt;
interfaces with similar names here:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;writeUTF() takes an ObjectOutput, not an ObjectOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FormatIdOutputStream extends DataOutputStream, not&lt;br/&gt;
    ObjectOutputStream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DataOutputStream does not implement the ObjectOutput interface,&lt;br/&gt;
    and can therefore not be passed to writeUTF()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FormatIdOutputStream, which is a specialization of&lt;br/&gt;
    DataOutputStream, does implement the ObjectOutput interface&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So of the three candidates&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ObjectOutputStream can be passed to writeUTF(), but gives the&lt;br/&gt;
    wrong number of bytes&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DataOutputStream gives the right number of bytes, but cannot be&lt;br/&gt;
    passed to writeUTF()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FormatIdOutputStream gives the right number of bytes, and it can&lt;br/&gt;
    be passed to writeUTF()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; CastingTest:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; - /**&lt;br/&gt;
&amp;gt;      * Check the results for the queries in testDataTruncation().&lt;br/&gt;
&amp;gt;      */&lt;br/&gt;
&amp;gt;     private void checkDataTruncationResult(Statement s, String sql)&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   Might be good to document the expected row behavior: 1, 0 and 2&lt;br/&gt;
&amp;gt;   warnings for rows 1,2 and three respectively, and 3, 3 and 4 in&lt;br/&gt;
&amp;gt;   actual dataSize in the Javadoc.&lt;/p&gt;

&lt;p&gt;Will copy that info into the javadoc.&lt;/p&gt;

&lt;p&gt;&amp;gt; - checkDataTruncationResult(s,&lt;br/&gt;
&amp;gt;   &quot;values (cast(&apos;abc&apos; as clob(2)), cast(&apos;de&apos; as varchar(2))),&quot; +&lt;br/&gt;
&amp;gt;   &quot; (cast(&apos;fg&apos; as clob(2)), cast(&apos;hi&apos; as varchar(2))),&quot; +&lt;br/&gt;
&amp;gt;   &quot; (cast(&apos;jkl&apos; as clob(2)), cast(&apos;mnop&apos; as varchar(2)))&quot;);&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   Why not clob(2) in column 2 on these rows? Copy/paste error?&lt;/p&gt;

&lt;p&gt;Yes, the intention was to test CLOB(2) in both columns. Will fix.&lt;/p&gt;

&lt;p&gt;&amp;gt; - DRDAConnThread&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   Is the code path&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   private int getSqlCode(int severity)&lt;br/&gt;
&amp;gt;   {&lt;br/&gt;
&amp;gt;     if (severity == CodePoint.SVRCOD_WARNING) // warning&lt;br/&gt;
&amp;gt;        return 100; //CLI likes it&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   still relevant now that you test &quot;instanceof SQLWarning&quot;?&lt;/p&gt;

&lt;p&gt;I don&apos;t think this code is reachable anymore now that we test for&lt;br/&gt;
instanceof SQLWarning. SQL code 100 is interpreted as end-of-data by&lt;br/&gt;
the client, so I don&apos;t think that code is correct in the first place.&lt;br/&gt;
(The end-of-data warnings are generated/sent via another code path&lt;br/&gt;
from DRDAConnThread.doneData(), and should still end up with SQL code&lt;br/&gt;
100 on the client, so I don&apos;t expect this change to cause any kind of&lt;br/&gt;
problem.)&lt;/p&gt;

&lt;p&gt;Although it&apos;s now unreachable code, I&apos;d prefer to address that in a&lt;br/&gt;
separate issue, as I think the entire getSqlCode() method needs to be&lt;br/&gt;
fixed. Currently, it returns SQL code -1 for all exceptions, which&lt;br/&gt;
makes getErrorCode() return different values on client and embedded.&lt;br/&gt;
Logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5773&quot; title=&quot;SQLException.getErrorCode() returns -1 on client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5773&quot;&gt;&lt;del&gt;DERBY-5773&lt;/del&gt;&lt;/a&gt; for this.&lt;/p&gt;</comment>
                            <comment id="13280132" author="knutanders" created="Mon, 21 May 2012 14:10:12 +0100"  >&lt;p&gt;Attaching a new patch, d129-1b.diff, that addresses Dag&apos;s review comments. I&apos;ve also updloaded a patch delta-1a-1b.diff, which only shows the changes between 1a and 1b.&lt;/p&gt;

&lt;p&gt;The regression tests passed, except two failures in UpdateStatisticsTest, which I think are unrelated to the changes in the patch. Will log a separate bug for those failures.&lt;/p&gt;</comment>
                            <comment id="13280145" author="dagw" created="Mon, 21 May 2012 14:45:48 +0100"  >&lt;p&gt;Thanks for the new patch, Knut. The changes look good! +1 Also, +1 to fixing getSqlCode in a separate JIRA.&lt;/p&gt;</comment>
                            <comment id="13280148" author="dagw" created="Mon, 21 May 2012 14:46:32 +0100"  >&lt;p&gt;+1 to merging release notes with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13280181" author="knutanders" created="Mon, 21 May 2012 15:32:55 +0100"  >&lt;p&gt;Thanks again, Dag. Committed revision 1341046. I&apos;ll update the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt; release note with information about the warning.&lt;/p&gt;</comment>
                            <comment id="13453256" author="kmarsden" created="Tue, 11 Sep 2012 19:23:07 +0100"  >&lt;p&gt;It seems like this issue would not be appropriate for backporting because of the behavior change. Reopening to add label.  I wonder should there be a release note?&lt;/p&gt;</comment>
                            <comment id="13454075" author="knutanders" created="Wed, 12 Sep 2012 17:02:05 +0100"  >&lt;p&gt;The release note for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5749&quot; title=&quot;Implicit cast of variable length values, e.g. as arguments to stored methods and generated columns values, silently truncate if too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5749&quot;&gt;&lt;del&gt;DERBY-5749&lt;/del&gt;&lt;/a&gt; covered this issue too.&lt;/p&gt;</comment>
                            <comment id="14284723" author="myrna" created="Wed, 21 Jan 2015 00:22:58 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12535131">DERBY-5537</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12672402">DERBY-6373</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12528050" name="d129-1a.diff" size="3165561" author="knutanders" created="Fri, 18 May 2012 13:42:00 +0100"/>
                            <attachment id="12528417" name="d129-1b.diff" size="3166327" author="knutanders" created="Mon, 21 May 2012 14:10:12 +0100"/>
                            <attachment id="12528418" name="delta-1a-1b.diff" size="4777" author="knutanders" created="Mon, 21 May 2012 14:10:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 22 Jan 2005 10:13:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21786</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0a3z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35456</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>