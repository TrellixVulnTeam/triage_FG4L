<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:37:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1471/DERBY-1471.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1471] Implement layer B streaming for new methods defined in JDBC4.0</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1471</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;JDBC 4.0 introduced new methods which take parameters for object to be sent to sever without length information.&lt;/p&gt;

&lt;p&gt;For those methods, Layer B streaming is best way to implement sending object to server.&lt;/p&gt;

&lt;p&gt;This issue is representation of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; in Network Client.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12345285">DERBY-1471</key>
            <summary>Implement layer B streaming for new methods defined in JDBC4.0</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="naka">Tomohito Nakayama</assignee>
                                    <reporter username="naka">Tomohito Nakayama</reporter>
                        <labels>
                    </labels>
                <created>Sat, 1 Jul 2006 13:15:17 +0100</created>
                <updated>Fri, 21 Jan 2011 18:13:14 +0000</updated>
                            <resolved>Sun, 17 Dec 2006 16:02:46 +0000</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12419001" author="kristwaa" created="Tue, 4 Jul 2006 02:46:09 +0100"  >&lt;p&gt;Hello Tomohito,&lt;/p&gt;

&lt;p&gt;I see you are assigned to this issue. I&apos;m working on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt;, and was wondering if you could post a brief description of the changes to the client &quot;API&quot; you are planning to do as part of this issue. After having had a very brief look at the callstack on the client  for a setClob call, it seems the length parameter is required all over the place...&lt;br/&gt;
Do you plan to extend the current methods or provide new ones for streaming of lengthless streams?&lt;/p&gt;

&lt;p&gt;At the moment, the lower-level methods on the client side relies on the LOB.length() method, and we will need changes in both the am and the net package. I fear this new feature will require quite a lot of work!&lt;/p&gt;

&lt;p&gt;I will put the client side work of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; on-hold for a while. Let me know if there is anything I can do to help you out.&lt;/p&gt;</comment>
                            <comment id="12419120" author="naka" created="Tue, 4 Jul 2006 21:38:29 +0100"  >&lt;p&gt;Hello Kristian.&lt;br/&gt;
In fact, I&apos;m not clear and no answer yet ...&lt;/p&gt;


&lt;p&gt;I think we need some more consideration for synchronizing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; ...&lt;/p&gt;

&lt;p&gt;I can propose next two options.&lt;/p&gt;

&lt;p&gt;1) Realize Layer B streaming afterwards.&lt;br/&gt;
Realize lengthless overloads without Layer B streaming based on current implementation.&lt;br/&gt;
Afterwards, realize Layer B streaming as improvement.&lt;/p&gt;

&lt;p&gt;2)  Realize Layer B streaming simultaneously with lengthless overloads.&lt;br/&gt;
Realize lengthless overloads with Layer B streaming.&lt;br/&gt;
In this plan,&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt; is completely equal to client side of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My concerning is that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt; will take much of time ....&lt;br/&gt;
I spent more than half year for implementing Layer B streaming from server side to client side,...&lt;/p&gt;

&lt;p&gt;I think compatibility for JDBC 4.0 should have priority over Layer B streaming in our project.&lt;/p&gt;

&lt;p&gt;Furthermore, performance measurement carried out in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt; / &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-872&quot; title=&quot;Fix how to measure performance of lob streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-872&quot;&gt;&lt;del&gt;DERBY-872&lt;/del&gt;&lt;/a&gt; told that Layer B streaming does not always result in best performance.&lt;br/&gt;
Sometimes, expanding object into memory before sending resulted in better performance.&lt;br/&gt;
// I think passed length information from server helps client to handle buffer effectively.&lt;/p&gt;


&lt;p&gt;Then ... &lt;br/&gt;
My opinion is to take option 1), &quot;Implement Layer B streaming afterwards&quot;.&lt;/p&gt;

&lt;p&gt;I want your opinion...&lt;/p&gt;</comment>
                            <comment id="12419135" author="kristwaa" created="Tue, 4 Jul 2006 23:17:49 +0100"  >&lt;p&gt;Hello Tomohito,&lt;/p&gt;

&lt;p&gt;I  think your plan makes sense, where we go for option 1. This way, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; (lengthless overloads) can move forward without waiting for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt; (layer B streaming).&lt;/p&gt;

&lt;p&gt;I think I will go for for a very simple solution for the overloads on the client side, unless someone has better ideas. The approach is to exhaust the application stream and copy it into memory to determine the length. If the data is too big to fit in memory, the client will fail with an out-of-memory exception.&lt;br/&gt;
The only alternative I can think of, is to &quot;temporarily&quot; store data on disk on the client to avoid memory problems, but I think this is a bad idea...&lt;/p&gt;

&lt;p&gt;There is also another existing issue on the client, where large LOBs cause out-of-memory exception even when the length is specified (is it &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1472&quot; title=&quot;Avoid expanding object to memory before sending it to server.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1472&quot;&gt;&lt;del&gt;DERBY-1472&lt;/del&gt;&lt;/a&gt;?).&lt;/p&gt;


&lt;p&gt;We can improve/reevaluate the lengthless overloads when &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt; has reached completion.&lt;/p&gt;


&lt;p&gt;Regards,&lt;/p&gt;</comment>
                            <comment id="12444051" author="naka" created="Sat, 21 Oct 2006 17:21:27 +0100"  >&lt;p&gt;Now, I think it is possible to resume this issue.&lt;/p&gt;</comment>
                            <comment id="12447425" author="naka" created="Mon, 6 Nov 2006 12:03:23 +0000"  >&lt;p&gt;I found that current implementation of NetowrkServer can not receive Layer B streaming from client.&lt;/p&gt;

&lt;p&gt;At least, I need to make DDMReader.readLengthAndCodePoint method not to throw exception when numberOfExtendedLenBytes is 0.&lt;/p&gt;</comment>
                            <comment id="12447445" author="naka" created="Mon, 6 Nov 2006 15:06:00 +0000"  >&lt;p&gt;Reading the code at DDMReader, &lt;br/&gt;
it seems that length of information sent from client is stacked to long[] ddmCollectionLenStack and &lt;br/&gt;
the value was decreased through processing received information,&lt;br/&gt;
and removed from the stack when length is 0.&lt;/p&gt;

&lt;p&gt;When layer B streaming is carried out, the length is unknown before received all and&lt;br/&gt;
it can not be stacked before hand...&lt;/p&gt;

&lt;p&gt;This mechanism of stacking, decreasing and removing needs to be modified to realize layer B streaming from client to server.&lt;/p&gt;</comment>
                            <comment id="12448487" author="naka" created="Thu, 9 Nov 2006 14:23:42 +0000"  >&lt;p&gt;I found that it is needed to make server side implementation&lt;br/&gt;
compatible with both of JDBC 4.0 and before that  ...&lt;/p&gt;</comment>
                            <comment id="12450046" author="naka" created="Wed, 15 Nov 2006 14:48:18 +0000"  >&lt;p&gt;I found that current NetworkServer implementation receives CLOB as byte[] object and not as InputStream ...&lt;br/&gt;
This part should be modified in the patch ...&lt;/p&gt;</comment>
                            <comment id="12452094" author="naka" created="Thu, 23 Nov 2006 01:24:28 +0000"  >&lt;p&gt;I submit the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch implements Layer B streaming for new methods defined in JDBC4.0 as next.&lt;/li&gt;
	&lt;li&gt;Derby NetClient sends lengthless LOB information in Layer B streaming.&lt;/li&gt;
	&lt;li&gt;Derby NetworkServer receives LOB information sent via Layer B streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test of the patch&lt;/li&gt;
	&lt;li&gt;Execute derbyall and org.apache.derbyTesting.functionTests.suites.All on jdk16 rc environment and found no error except for intermittent error of derbynet/testSecMec.java in DerbyNetClient framework.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12452095" author="naka" created="Thu, 23 Nov 2006 01:27:35 +0000"  >&lt;p&gt;Sorry. &lt;br/&gt;
I took mitaken to attach patch file. Please ignore &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt;.diff.&lt;/p&gt;

&lt;p&gt;Correct file is newly attached &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt;.patch.&lt;/p&gt;</comment>
                            <comment id="12452469" author="naka" created="Fri, 24 Nov 2006 15:04:31 +0000"  >&lt;p&gt;I upload patch which modify what was pointed out in mail &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200611.mbox/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200611.mbox/&lt;/a&gt;&amp;lt;x7ejrushis.fsf%40Sun.COM&amp;gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch implements Layer B streaming for new methods defined in JDBC4.0 as next.&lt;/li&gt;
	&lt;li&gt;Derby NetClient sends lengthless LOB information in Layer B streaming.&lt;/li&gt;
	&lt;li&gt;Derby NetworkServer receives LOB information sent via Layer B streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remarkable difference from previous patch&lt;/li&gt;
	&lt;li&gt;Fixed to use lengthless method via EnginePreparedStatement interface.&lt;/li&gt;
	&lt;li&gt;Added message to XJ216.S&lt;/li&gt;
	&lt;li&gt;Supressed length of lines under 80 characters, where possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test of the patch&lt;/li&gt;
	&lt;li&gt;Execute derbyall and org.apache.derbyTesting.functionTests.suites.All on jdk16 rc environment and found no error except for intermittent error of  derbynet/testProperties.java in DerbyNetClient framework.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12455107" author="bryanpendleton" created="Sat, 2 Dec 2006 17:25:11 +0000"  >&lt;p&gt;Is the use of the streaming implementation optional? Or is it always in effect?&lt;/p&gt;

&lt;p&gt;If it is optional, how does the user indicate whether or not to use it? Does it&lt;br/&gt;
depend on whether the application calls the new JDBC 4.0 APIs, or is the&lt;br/&gt;
streaming also used with the previous APIs (the ones with length info in them)?&lt;/p&gt;

&lt;p&gt;I guess what I&apos;m trying to figure out is: do we no longer use any length information&lt;br/&gt;
provided by the application? Or do we still use that information, even if we are&lt;br/&gt;
using streaming at the network block level?&lt;/p&gt;</comment>
                            <comment id="12455158" author="naka" created="Sun, 3 Dec 2006 11:05:25 +0000"  >&lt;p&gt;Thank you for your attention &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;p&gt;The answer is Optional.&lt;/p&gt;

&lt;p&gt;Layer B Streaming is optional and used only when lengthless methods were used under configuration of no encryption.&lt;br/&gt;
Those lengthless method were introduced in JDBC4.&lt;/p&gt;

&lt;p&gt;// Spec of DRDA told that segmented object must be combined and decrypted as a single object for Encrypted Object DSS.&lt;br/&gt;
// Then I think there are less benefit to using Layer B streaming in the encrypted case.&lt;/p&gt;


&lt;p&gt;Furthermore, Layer B streaming does not use length information for whole LOB , &lt;br/&gt;
however it does use length information for each DSS segment.&lt;br/&gt;
I read next parts as where relate :&lt;br/&gt;
org.apache.derby.client.net.Request#finalizeDssLength()&lt;br/&gt;
org.apache.derby.impl.drda.DDMReader#readDssHeader ()&lt;/p&gt;</comment>
                            <comment id="12455215" author="bryanpendleton" created="Sun, 3 Dec 2006 21:48:11 +0000"  >&lt;p&gt;May I suggest an alternate wording for the new error message? Instead of&lt;/p&gt;

&lt;p&gt;                &amp;lt;text&amp;gt;Length of LOB was retrieved though it was unknown yet.&amp;lt;/text&amp;gt;&lt;/p&gt;

&lt;p&gt;I suggest&lt;/p&gt;

&lt;p&gt;    &amp;lt;text&amp;gt;The length of this BLOB/CLOB is not available yet. When a BLOB or CLOB is accessed as a stream, the length is not available until the entire stream has been processed.&amp;lt;/text&amp;gt;&lt;/p&gt;

&lt;p&gt;Also, one other question on the patch, regarding the change to o.a.d.client.am.Lob:&lt;br/&gt;
when will it be the case that the agent_.connection_ instance is &lt;b&gt;not&lt;/b&gt; an instance&lt;br/&gt;
of NetConnection? Don&apos;t we always have a NetConnection instance here?&lt;/p&gt;

&lt;p&gt;The rest of the patch looks good to me.&lt;/p&gt;</comment>
                            <comment id="12455285" author="naka" created="Mon, 4 Dec 2006 11:57:33 +0000"  >&lt;p&gt;I see ...&lt;/p&gt;

&lt;p&gt;I will modify the error message.&lt;br/&gt;
// By the way, I think it is not easy to be processed as to be possible to get length in current implementation.&lt;br/&gt;
// I will file it as other issue ...&lt;/p&gt;

&lt;p&gt;I executed ant javadoc and found org.apache.derby.client.am.Connection is abstract class and &lt;br/&gt;
only one subclass is  org.apache.derby.client.net.NetConnection.&lt;br/&gt;
I think your comment for NetConnection is correct and the object can be regarded as NetConnection.&lt;/p&gt;

&lt;p&gt;I will modify those and submit the new patch.&lt;/p&gt;</comment>
                            <comment id="12455591" author="naka" created="Tue, 5 Dec 2006 11:21:29 +0000"  >&lt;p&gt;I upload the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt;_3.patch.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch implements Layer B streaming for new methods defined in JDBC4.0 as next.&lt;/li&gt;
	&lt;li&gt;Derby NetClient sends lengthless LOB information in Layer B streaming.&lt;/li&gt;
	&lt;li&gt;Derby NetworkServer receives LOB information sent via Layer B streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remarkable difference from previous patch&lt;/li&gt;
	&lt;li&gt;The error messagewas modified.&lt;/li&gt;
	&lt;li&gt;Verbose type checking code for casting to NetConnection type was removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test of the patch&lt;/li&gt;
	&lt;li&gt;Executed org.apache.derbyTesting.functionTests.suites.All on jdk16 rc environment and found no error.&lt;/li&gt;
	&lt;li&gt;Execute derbyall on jdb16rc environment and found no error except for intermittent error of derbynet/testSecMec.java in DerbyNetClient framework.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12455972" author="naka" created="Wed, 6 Dec 2006 11:31:31 +0000"  >&lt;p&gt;I will wait for days and will commit the patch ...&lt;/p&gt;</comment>
                            <comment id="12456093" author="knutanders" created="Wed, 6 Dec 2006 15:32:54 +0000"  >&lt;p&gt;I have looked at patch 3. I don&apos;t know enough about layer B streaming&lt;br/&gt;
to say whether all details of the implementation are correct, but I&lt;br/&gt;
have a couple of comments. All of the comments are about minor issues,&lt;br/&gt;
so it would be perfectly OK to commit the patch as it is and address&lt;br/&gt;
the comments in a followup patch.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;BrokeredPreparedStatement now implements length-less setBinaryStream&lt;br/&gt;
  and setCharacterStream. We could therefore remove them from&lt;br/&gt;
  BrokeredPreparedStatement40.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;In DRDAConnThread.readAndSetExtParam(), some of the code has been&lt;br/&gt;
  changed from&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if (stream == null) &lt;/p&gt;
{
       ...
    } else {
       ...
    }

&lt;p&gt;  to&lt;/p&gt;

&lt;p&gt;    if (stream == null) &lt;/p&gt;
{
        ...
    } else if (stream instanceof StandardEXTDTAReaderInputStream) {
        ... // basically do the same as in the old else clause
    } else if (stream instanceof LayerBStreamedEXTDTAReaderInputStream) {
        ...
    }

&lt;p&gt;  I would feel more comfortable if the code in the first else-if&lt;br/&gt;
  clause were put into an else clause. If the stream is of another&lt;br/&gt;
  type (shouldn&apos;t happen, but someone might extend the code later), it&lt;br/&gt;
  will be silently ignored.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Inner class PublicBufferOutputStream in DRDAConnThread could be&lt;br/&gt;
  private. Or even better, since ReEncodedInputStream also implements&lt;br/&gt;
  such a class, it could be implemented as a stand-alone class that&lt;br/&gt;
  could be shared between DRDAConnThread and ReEncodedInputStream.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;In NetStatementRequest, 0x8002 is used as a magic number many&lt;br/&gt;
  places. Perhaps it could be explained in a comment, or a constant&lt;br/&gt;
  could be used instead?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Blob/Clob: The variable willBeLayerBStreamed_ and the method&lt;br/&gt;
  willBeLayerBStreamed() could be moved to the base class (Lob) to&lt;br/&gt;
  avoid duplicated code.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12457335" author="naka" created="Mon, 11 Dec 2006 13:07:46 +0000"  >&lt;p&gt;Through improving what  Knut suggested, I found there exists a mistake in the patch ...&lt;br/&gt;
Clob created from unknown length Reader object was not handled in Layer B streaming ....&lt;/p&gt;

&lt;p&gt;I will fix it too.&lt;/p&gt;</comment>
                            <comment id="12457719" author="naka" created="Tue, 12 Dec 2006 13:44:55 +0000"  >&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch implements Layer B streaming for new methods defined in JDBC4.0 as next.&lt;/li&gt;
	&lt;li&gt;Derby NetClient sends lengthless LOB information in Layer B streaming.&lt;/li&gt;
	&lt;li&gt;Derby NetworkServer receives LOB information sent via Layer B streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remarkable difference from previous patch&lt;/li&gt;
	&lt;li&gt;Improvement issue in a code,which was suggested by Knut , was done.&lt;/li&gt;
	&lt;li&gt;An oversight in implementing Layer B streaming of Clob was corrected.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test&lt;/li&gt;
	&lt;li&gt;Executed org.apache.derbyTesting.functionTests.suites.All on jdk16 rc environment and found no error.&lt;/li&gt;
	&lt;li&gt;Execute derbyall on jdb16rc environment and found no error except for intermittent error of derbynet/testSecMec.java in DerbyNetClient framework.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12458092" author="knutanders" created="Wed, 13 Dec 2006 12:09:09 +0000"  >&lt;p&gt;I have tested the lengthless versions of PreparedStatement.setClob(), PreparedStatement.setCharacterStream(), PreparedStatement.setAsciiStream(), PreparedStatement.setBlob(), PreparedStatement.setBinaryStream(), ResultSet.updateClob(), ResultSet.updateCharacterStream(), ResultSet.updateAsciiStream(), ResultSet.updateBlob() and ResultSet.updateBinaryStream(), and they all seem to work without throwing OutOfMemoryError for large lobs. Great! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;However, compatibility with older servers seems to have been broken. When I try to stream a lob (small enough to fit in the client&apos;s memory) to a 10.2.1.6 server, I get a protocol error: &quot;java.sql.SQLException: A network protocol error was encountered and the connection has been terminated: A PROTOCOL Data Stream Syntax Error was detected.  Reason: 0x0.&quot; I think we need to check the version of the server before using layer b streaming. This could be done in NetDatabaseMetaData.computeFeatureSet_().&lt;/p&gt;

&lt;p&gt;Thank you for addressing my previous comments. My comment about readAndSetExtParam() was a bit unclear. What I meant, was that the if-clause could be written as&lt;/p&gt;

&lt;p&gt;  if (stream == null) &lt;/p&gt;
{
    // same code as before for null
  }
&lt;p&gt; else if (stream instanceof LayerBStreamedEXTDTAReaderInputStream) &lt;/p&gt;
{
    // new Layer B code
  }
&lt;p&gt; else &lt;/p&gt;
{
    // same code as in the old else-clause
  }

&lt;p&gt;The main point is that we should have an &quot;else&quot; clause at the end which catches all cases, instead of only having &quot;if&quot; and &quot;else if&quot; clauses. I think that it will make the code clearer, since a reader doesn&apos;t have to figure out whether there are cases that don&apos;t match any of the if/else-if clauses.&lt;/p&gt;</comment>
                            <comment id="12458473" author="naka" created="Thu, 14 Dec 2006 13:22:38 +0000"  >&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch implements Layer B streaming for new methods defined in JDBC4.0 as next.&lt;/li&gt;
	&lt;li&gt;Derby NetClient sends lengthless LOB information in Layer B streaming.&lt;/li&gt;
	&lt;li&gt;Derby NetworkServer receives LOB information sent via Layer B streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remarkable difference from previous patch&lt;/li&gt;
	&lt;li&gt;NetworkClient takes version of NetworkServer into consideration whether layer B streaming is possible.&lt;/li&gt;
	&lt;li&gt;When NetworkServer found impossible situation around class for LOB information, the program throws runtime exception.&lt;/li&gt;
	&lt;li&gt;Test&lt;/li&gt;
	&lt;li&gt;Executed org.apache.derbyTesting.functionTests.suites.All on jdk16 rc environment and found no error.&lt;/li&gt;
	&lt;li&gt;Execute derbyall on jdb16rc environment and found no error except for intermittent error of derbynet/testSecMec.java and derbynet/testconnection.java in DerbyNetClient framework.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12458486" author="knutanders" created="Thu, 14 Dec 2006 13:56:48 +0000"  >&lt;p&gt;Thank you, Tomohito! The changes look good to me. I have verified that the latest patch works with a new client and an old server. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12459013" author="naka" created="Sat, 16 Dec 2006 11:17:33 +0000"  >&lt;p&gt;Committed.&lt;/p&gt;

&lt;p&gt;Sending        java/client/org/apache/derby/client/am/Blob.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/am/Clob.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/am/Lob.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/net/NetConnection.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/net/NetDatabaseMetaData.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/net/NetStatementRequest.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/net/Request.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/DDMReader.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/EXTDTAReaderInputStream.java&lt;br/&gt;
Adding         java/drda/org/apache/derby/impl/drda/LayerBStreamedEXTDTAReaderInputStream.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/ReEncodedInputStream.java&lt;br/&gt;
Adding         java/drda/org/apache/derby/impl/drda/StandardEXTDTAReaderInputStream.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/TestProto.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement40.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
Sending        java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java&lt;br/&gt;
Transmitting file data ....................&lt;br/&gt;
Committed revision 487788.&lt;/p&gt;</comment>
                            <comment id="12459143" author="bryanpendleton" created="Sun, 17 Dec 2006 17:19:42 +0000"  >&lt;p&gt;I found this interesting problem report for another DBMS:&lt;br/&gt;
&lt;a href=&quot;http://support.microsoft.com/kb/824106&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://support.microsoft.com/kb/824106&lt;/a&gt;&lt;br/&gt;
and I wondered whether Derby might have such a problem.&lt;/p&gt;

&lt;p&gt;So I wrote a simple test program based on the web page,&lt;br/&gt;
and it seemed to work correctly (t1471.java).&lt;/p&gt;

&lt;p&gt;I thought it was interesting enough to attach the program to&lt;br/&gt;
this issue, in case anybody wanted to pursue it any further,&lt;br/&gt;
but as far as I can tell there is no problem here.&lt;/p&gt;</comment>
                            <comment id="12459280" author="naka" created="Mon, 18 Dec 2006 11:52:35 +0000"  >&lt;p&gt;I think your suggestion is rather the case for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1560&quot; title=&quot;When receiving EXTDTA object, the client should avoid keeping the entire LOB in memory for large LOBs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1560&quot;&gt;&lt;del&gt;DERBY-1560&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-208&quot; title=&quot;Add support to retrieve lobs for Network Server by locator rather than matierializing the LOB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-208&quot;&gt;&lt;del&gt;DERBY-208&lt;/del&gt;&lt;/a&gt; ...&lt;/p&gt;</comment>
                            <comment id="12562050" author="dyret" created="Thu, 24 Jan 2008 13:10:05 +0000"  >&lt;p&gt;This issue is resolved and has not been updated in the last 12 months (since 24/Jan/07). &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12344445">DERBY-1417</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12333337">DERBY-1301</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12345518" name="DERBY-1471.diff" size="60824" author="naka" created="Thu, 23 Nov 2006 01:24:28 +0000"/>
                            <attachment id="12345520" name="DERBY-1471.patch" size="75980" author="naka" created="Thu, 23 Nov 2006 01:27:35 +0000"/>
                            <attachment id="12345519" name="DERBY-1471.stat" size="893" author="naka" created="Thu, 23 Nov 2006 01:24:28 +0000"/>
                            <attachment id="12345625" name="DERBY-1471_2.patch" size="79570" author="naka" created="Fri, 24 Nov 2006 15:04:31 +0000"/>
                            <attachment id="12345626" name="DERBY-1471_2.stat" size="1125" author="naka" created="Fri, 24 Nov 2006 15:04:31 +0000"/>
                            <attachment id="12346420" name="DERBY-1471_3.patch" size="79581" author="naka" created="Tue, 5 Dec 2006 11:21:29 +0000"/>
                            <attachment id="12346421" name="DERBY-1471_3.stat" size="1098" author="naka" created="Tue, 5 Dec 2006 11:21:29 +0000"/>
                            <attachment id="12347010" name="DERBY-1471_4.patch" size="89696" author="naka" created="Tue, 12 Dec 2006 13:44:55 +0000"/>
                            <attachment id="12347011" name="DERBY-1471_4.stat" size="1247" author="naka" created="Tue, 12 Dec 2006 13:44:55 +0000"/>
                            <attachment id="12347182" name="DERBY-1471_5.patch" size="91646" author="naka" created="Thu, 14 Dec 2006 13:22:38 +0000"/>
                            <attachment id="12347183" name="DERBY-1471_5.status" size="1386" author="naka" created="Thu, 14 Dec 2006 13:22:38 +0000"/>
                            <attachment id="12347363" name="t1471.java" size="1771" author="bryanpendleton" created="Sun, 17 Dec 2006 17:19:42 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12353754">DERBY-1990</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Jul 2006 01:46:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30005</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0kbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37109</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>