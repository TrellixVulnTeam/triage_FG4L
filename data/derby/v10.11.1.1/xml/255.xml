<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:13:33 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-255/DERBY-255.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-255] Closing a resultset after retrieving a large &gt; 32K value with Network Server does not release locks</title>
                <link>https://issues.apache.org/jira/browse/DERBY-255</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Closing a resultset after retriving BLOB or CLOB data &amp;gt; 32K, does not release locks properly.   Network Server uses getClob, getBlob to retrieve the data even if the application uses getCharacteStream, etc, so holds locks to the end of the transaction.&lt;/p&gt;


&lt;p&gt;To reproduce run attached repro&lt;br/&gt;
java LargeDataLocks derbynetclient&lt;/p&gt;

&lt;p&gt;To see the difference with embedded&lt;br/&gt;
java LargeDataLocks derby&lt;/p&gt;

</description>
                <environment></environment>
        <key id="32162">DERBY-255</key>
            <summary>Closing a resultset after retrieving a large &gt; 32K value with Network Server does not release locks</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Sun, 1 May 2005 15:14:08 +0100</created>
                <updated>Fri, 6 Jul 2007 16:59:39 +0100</updated>
                            <resolved>Thu, 2 Jun 2005 19:30:07 +0100</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.0.2.2</version>
                    <version>10.1.1.0</version>
                                    <fixVersion>10.1.1.0</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="64191" author="kmarsden" created="Sun, 1 May 2005 15:19:19 +0100"  >&lt;p&gt;repro for setCharacterStream holding locks after retrieving  BLOB/CLOB data greater than 32K&lt;/p&gt;</comment>
                            <comment id="66523" author="kmarsden" created="Mon, 30 May 2005 07:06:42 +0100"  >
&lt;p&gt;This fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Closing a resultset after retriving BLOB or CLOB data &amp;gt; 32K, does not release locks properly. &lt;/p&gt;

&lt;p&gt;Network server/client materializes the LOB on the client and cannot differentiate getBlob from getBytes or getBinaryStream. Previously, network server would always call getBlob/getClob for any lob related call. This change changes network server to use getBytes/getString and not  hold locks for any of the calls. &lt;/p&gt;

&lt;p&gt;The implementation adds a new class EXTDTAInputStream to network server to localize the stream handling for large objects.   This should make it easier to adjust in the future as improvements are made in the large object handling. Because we need a length in order to write a stream, EXTDTAInputStream currently call getBytes or getString to get the length and stream out that object. This is apparently required because we cannot reset the input stream after traversing it to get the length.&lt;/p&gt;


&lt;p&gt;Future suggestions for changes to network server to handle this in a more complete way would be to:&lt;/p&gt;

&lt;p&gt;1) Change DDMWriter.writeScalarStream to  not require a length and optimize EXTDTAObjectInputStream accordingly&lt;/p&gt;

&lt;p&gt;2) Add support for lob locators with network server.  The getBlob, getClob calls would use the locators and would hold locks until the end of the transaction.&lt;/p&gt;
</comment>
                            <comment id="66527" author="kmarsden" created="Mon, 30 May 2005 15:42:15 +0100"  >&lt;p&gt;Checked this in with revision 179014.  &lt;/p&gt;

&lt;p&gt;Sending        java\drda\org\apache\derby\impl\drda\DDMWriter.java&lt;br/&gt;
Sending        java\drda\org\apache\derby\impl\drda\DRDAConnThread.java&lt;br/&gt;
Adding         java\drda\org\apache\derby\impl\drda\EXTDTAInputStream.java&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\blobclob4BLOB.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\blobclob4BLOB.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\master\blobclob4BLOB.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\blobclob4BLOB.java&lt;br/&gt;
Transmitting file data .......&lt;br/&gt;
Committed revision 179014.&lt;/p&gt;
</comment>
                            <comment id="66842" author="kmarsden" created="Thu, 2 Jun 2005 19:30:07 +0100"  >&lt;p&gt;Checked in svn 179017 + 179198 to resolve this issue.&lt;/p&gt;</comment>
                            <comment id="66957" author="kmarsden" created="Fri, 3 Jun 2005 14:30:45 +0100"  >&lt;p&gt;Sunitha and I chatted on IRC about &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-255&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32K value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-255&quot;&gt;&lt;del&gt;DERBY-255&lt;/del&gt;&lt;/a&gt;. First transcript was lost but recapped in the second.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Since we cannot traverse the stream twice to get length and then data Network Server currently does getBytes for Blob calls and needs sufficient JVM memory allocated.&lt;/li&gt;
	&lt;li&gt;Real solution is&lt;br/&gt;
   1) &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt; to enable streaming without the length.&lt;br/&gt;
   2) &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-327&quot; title=&quot;Investigate using lob locators to improve network server large object support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-327&quot;&gt;&lt;del&gt;DERBY-327&lt;/del&gt;&lt;/a&gt; to use lob locators for performance and differentiation of client calls&lt;br/&gt;
      to getBlob vs getBinaryStream for locking.&lt;/li&gt;
	&lt;li&gt;As an aside noted that the embedded  Blob.length() call could probably use available(), skip() to improve performance instead of reading the data.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12372921">DERBY-2892</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="20398" name="DERBY-255_irc_6_2_2005" size="3539" author="kmarsden" created="Fri, 3 Jun 2005 14:30:44 +0100"/>
                            <attachment id="19858" name="LargeDataLocks.java" size="10188" author="kmarsden" created="Sun, 1 May 2005 15:19:19 +0100"/>
                            <attachment id="20304" name="derby255.diff" size="65908" author="kmarsden" created="Mon, 30 May 2005 07:06:42 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21864</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39889</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>