<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:48:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-326/DERBY-326.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-326] Improve streaming of large objects for network server and client</title>
                <link>https://issues.apache.org/jira/browse/DERBY-326</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently the stream writing  methods in network server and client require a  length parameter. This means that we have to get the length of the stream before sending it. For example in network server in EXTDTAInputStream we have to use getString and getbytes() instead of getCharacterStream and getBinaryStream so that we can get the  length.&lt;/p&gt;


&lt;p&gt;SQLAM Level 7 provides for the enhanced LOB processing to allow streaming without indicating the length, so, the writeScalarStream methods in&lt;br/&gt;
network server DDMWriter.java and network client Request.java can be changed to not require a length.&lt;/p&gt;

&lt;p&gt;Code inspection of these methods seems to indicate that while the length is never written it is used heavily in generating the DSS. One strange thing is that it appears on error, the stream is padded out to full length with zeros, but an actual exception is never sent.  Basically I think perhaps these methods need to be rewritten from scratch based on the spec requirements for lobs.&lt;/p&gt;

&lt;p&gt;After the writeScalarStream methods have been changed, then EXTDAInputStream can be changed to properly stream LOBS. See TODO tags in this file for more info.  I am guessing similar optimizations available in the client as well, but am not sure where that code is.&lt;/p&gt;


</description>
                <environment></environment>
        <key id="32988">DERBY-326</key>
            <summary>Improve streaming of large objects for network server and client</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="naka">Tomohito Nakayama</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Tue, 31 May 2005 20:38:53 +0100</created>
                <updated>Fri, 14 Aug 2009 17:34:25 +0100</updated>
                            <resolved>Wed, 29 Apr 2009 02:01:37 +0100</resolved>
                                    <version>10.1.2.1</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Client</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12331663" author="naka" created="Sun, 9 Oct 2005 19:19:58 +0100"  >&lt;p&gt;It seems that there exist something between this issue and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-609&quot; title=&quot;Returning ByteArrayInputStream from ResultSet is not appropriate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-609&quot;&gt;&lt;del&gt;DERBY-609&lt;/del&gt;&lt;/a&gt; .&lt;/p&gt;</comment>
                            <comment id="12357046" author="naka" created="Wed, 9 Nov 2005 02:13:16 +0000"  >&lt;p&gt;I just have started to read around Externalied LOB Data in Answer Set :4.4.6.3 @page170ofDRDA Spec part1 .?&lt;/p&gt;</comment>
                            <comment id="12357479" author="naka" created="Sat, 12 Nov 2005 14:56:57 +0000"  >&lt;p&gt;I found information about layer B Streaming in description of DSS, DRDA, Version 3, Volume3: page315.&lt;/p&gt;

&lt;p&gt;This must be what we should implement .&lt;/p&gt;</comment>
                            <comment id="12361368" author="naka" created="Thu, 29 Dec 2005 23:13:12 +0000"  >&lt;p&gt;Description of patch :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
       Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform.&lt;br/&gt;
       Remarkable point is as next :&lt;br/&gt;
       Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment .&lt;br/&gt;
       Now this variable &quot;bytesToRead&quot; was removed from.&lt;br/&gt;
       New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment .&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;Modify master file of result  for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Testing :&lt;br/&gt;
   Executed derbyall and found no error.&lt;/p&gt;</comment>
                            <comment id="12361391" author="bryanpendleton" created="Fri, 30 Dec 2005 03:25:38 +0000"  >&lt;p&gt;It seems as though there are a lot of modified lines in your patch, but many of them appear to be simply indentation/whitespace changes. Is it possible that you could re-run your diff command with the whitespace&lt;br/&gt;
changes excluded? Perhaps something like &quot;svn diff --diff-cmd diff -x -uw&quot;? That would make the patch&lt;br/&gt;
easier to read and understand, for me. Thanks, bryan&lt;/p&gt;</comment>
                            <comment id="12361406" author="naka" created="Fri, 30 Dec 2005 14:31:07 +0000"  >&lt;p&gt;Create patch file executing next command.&lt;br/&gt;
   svn diff --diff-cmd diff -x -uw &amp;gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_2.patch&lt;/p&gt;

&lt;p&gt;Description of patch :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
       Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform.&lt;br/&gt;
       Remarkable point is as next :&lt;br/&gt;
       Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment .&lt;br/&gt;
       Now this variable &quot;bytesToRead&quot; was removed from.&lt;br/&gt;
       New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment .&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;Modify master file of result  for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Testing :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error.&lt;/li&gt;
	&lt;li&gt;After &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_2.patch created,&lt;br/&gt;
      applying &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_2.patch to reverted source code and&lt;br/&gt;
      confirmed applied source codes can be build.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12361407" author="naka" created="Fri, 30 Dec 2005 14:46:54 +0000"  >&lt;p&gt;I re-upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_2.patch.&lt;br/&gt;
I created patch &lt;b&gt;after&lt;/b&gt; applying patch created executing &quot;svn diff --diff-cmd diff -x -uw&quot;.&lt;/p&gt;

&lt;p&gt;Description of patch :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
       Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform.&lt;br/&gt;
       Remarkable point is as next :&lt;br/&gt;
       Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment .&lt;br/&gt;
       Now this variable &quot;bytesToRead&quot; was removed from.&lt;br/&gt;
       New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment .&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;Modify master file of result  for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Testing :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12361724" author="naka" created="Wed, 4 Jan 2006 17:04:58 +0000"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_3.patch. &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt; Description of patch : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
        Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform. &lt;br/&gt;
        Remarkable point is as next : &lt;br/&gt;
        Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment . &lt;br/&gt;
        Now this variable &quot;bytesToRead&quot; was removed from. &lt;br/&gt;
        New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment . &lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
         to java/client/org/apache/derby/client/net/Request.java.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt; Testing : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error other than &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-792&quot; title=&quot;Intermittent java.security.PrivilegedActionException was happend in derbynet/runtimeinfo.java of derbynetclient&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-792&quot;&gt;&lt;del&gt;DERBY-792&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12362123" author="naka" created="Sun, 8 Jan 2006 20:03:06 +0000"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_4.patch.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;  Description of patch :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
         Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform.&lt;br/&gt;
         Remarkable point is as next :&lt;br/&gt;
         Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment .&lt;br/&gt;
         Now this variable &quot;bytesToRead&quot; was removed from.&lt;br/&gt;
         New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment .&lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
          to java/client/org/apache/derby/client/net/Request.java.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;  Testing :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and did not found new error.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12362446" author="naka" created="Wed, 11 Jan 2006 22:28:32 +0000"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_5.patch.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;   Description of patch :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
          Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform.&lt;br/&gt;
          Remarkable point is as next :&lt;br/&gt;
          Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment .&lt;br/&gt;
          Now this variable &quot;bytesToRead&quot; was removed from.&lt;br/&gt;
          New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment .&lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
           to java/client/org/apache/derby/client/net/Request.java.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;   Testing :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall for 6 times and confirm &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-792&quot; title=&quot;Intermittent java.security.PrivilegedActionException was happend in derbynet/runtimeinfo.java of derbynetclient&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-792&quot;&gt;&lt;del&gt;DERBY-792&lt;/del&gt;&lt;/a&gt; does not happen in the results.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12362679" author="kmarsden" created="Sat, 14 Jan 2006 04:13:38 +0000"  >&lt;p&gt;I am reviewing this patch.    I am sorry for the long delay after the holidays.  I should be able to post comments Monday.    I am still working to understand the changes.&lt;/p&gt;

&lt;p&gt; A  few  general items &lt;/p&gt;

&lt;p&gt;1) Javadoc - I think it would be good to add more javadoc even with the briefest description of the method function and parameters.&lt;/p&gt;

&lt;p&gt;2) Tests - You had asked at one point I think about a location for tests.  I think largedata/loblengthTests could be modified to use a stream and then the jvmflags line removed.&lt;/p&gt;

&lt;p&gt;3) Code Formatting  - There seem to be code indentation inconsistencies in DDMWriter.  Also I think it is good to indent the method bodies  in the new methods in ReEncodedInputStream.java. Things sort of run together.&lt;/p&gt;


&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12362861" author="kmarsden" created="Tue, 17 Jan 2006 02:14:28 +0000"  >&lt;p&gt;I think this patch is a big improvement over reading the lobs into memory.&lt;br/&gt;
A few comments on future improvement and some questions on the code below:&lt;/p&gt;


&lt;p&gt;Possible future improvements:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for VARCHAR FOR BIT DATA (byte[] values)  we still call writeScalarStream with length and do not do layerBStreaming.  Would it make sense to stream this as well and get rid of all the code for handling extended length etc?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;reencode() performance &lt;br/&gt;
This method is called every 1024 characters of a character stream and &lt;br/&gt;
&amp;#8211; creates a localBuffer char&lt;span class=&quot;error&quot;&gt;&amp;#91;1024&amp;#93;&lt;/span&gt; to read the character stream data&lt;br/&gt;
&amp;#8211; creates a new String(localBuffer) &lt;br/&gt;
&amp;#8211; creates a new byte[] with the getBytes() call&lt;br/&gt;
&amp;#8211; creates a new ByteArrayInputStream&lt;/p&gt;

&lt;p&gt;A simple optimization using your  current scheme might be to have global field  byte&lt;span class=&quot;error&quot;&gt;&amp;#91;BUFFERED_CHAR_LEN&amp;#93;&lt;/span&gt; instead of making a new one  each time.  Perhaps also a single  OutputStreamWriter field wrapped around a ByteArrayOutputStream  which is reset on each reencode call could eliminate the String creation.&lt;/p&gt;

&lt;p&gt;Long term we should consider the fact that Derby stores the data in UTF8 format, getCharacterStream decodes it then network server reencodes it to UTF8.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-760&quot; title=&quot;Implement routines that will write/read data from a byte[] in drda format rather than calling getXXX and setXXX methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-760&quot;&gt;DERBY-760&lt;/a&gt; is meant to address this issue, plus hopefully eliminate the additional copy into the buffer in  DDMWriter.  I will add more comments to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-760&quot; title=&quot;Implement routines that will write/read data from a byte[] in drda format rather than calling getXXX and setXXX methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-760&quot;&gt;DERBY-760&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;QUESTIONS on code:&lt;/p&gt;

&lt;p&gt;DDMWriter - I always had a hard time understanding the stream code in this file , but found it much easier with your single loop vs the triple loop of the old code.  But I have some questions.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do we need this ensureLength call for layerBstreaming in prepScalarStream?&lt;br/&gt;
      ensureLength( layerBstreaming ? &lt;br/&gt;
		    DEFAULT_BUFFER_SIZE - offset : &lt;br/&gt;
		    length );&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Can you add a comment to explain the calculation for prepScalarStream return value, especially what the 6 and 4 are?&lt;br/&gt;
return DssConstants.MAX_DSS_LENGTH - 6 - 4 - nullIndicatorSize  - extendedLengthByteCount&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;writeScalarStream&lt;/p&gt;

&lt;p&gt;Could you verify that my analysis of this code  is correct?&lt;br/&gt;
	while( !isLastSegment )&lt;/p&gt;
{
		/*
		 * This loop writes and flushes the data. If there is more data than will
		 * fit in the remaining buffer space or will fit in the current DSS, the 
		 * data will be continued in the next DSS segment via flushScalarStreamSegment.
		 * 
		 */
		    int spareBufferLength = bytes.length - offset;
		[snip more of writeScalarStream ]
	    
			
			

			// Adjust spareDssLength for 2 byte continuation flags
			//written by flushScalarStreamSegment
			if( ! isLastSegment )
			    spareDssLength = DssConstants.MAX_DSS_LENGTH - 2;

			}

&lt;p&gt;		}		&lt;/p&gt;</comment>
                            <comment id="12362871" author="kmarsden" created="Tue, 17 Jan 2006 03:07:08 +0000"  >&lt;p&gt;Sorry, one more question.&lt;br/&gt;
Could you explain the error handling in the new scheme?  The old code would call padScalarStreamForError and that is now gone, but I am not sure I understand how the error handling is handled now.&lt;/p&gt;
</comment>
                            <comment id="12362916" author="skambha" created="Tue, 17 Jan 2006 15:43:54 +0000"  >&lt;p&gt;Thanks Tomohito for the patch.   I wanted to try a simple clob test with reads and see if there was any difference performance wise. But I could not apply the latest patch cleanly maybe because some changes were submitted today.  I have attached a zip file with the test file and a script to run it.  Currently the test inserts clob of size ~500k and then does read of all the rows in the table.  It would be great if you could run it before and after your changes to see the difference.   Please feel free to make changes to the test or change the parameters to the test.   Thanks. &lt;/p&gt;</comment>
                            <comment id="12362977" author="kmarsden" created="Wed, 18 Jan 2006 00:02:55 +0000"  >&lt;p&gt;TomohitoNakayama wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt; I answer your questions.&lt;/p&gt;


&lt;p&gt;Thank you for your answers.  Any of your explanations that can be translated into code comments would be greatly appreciated. &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; Could you explain the error handling in the new scheme?  The old code would call padScalarStreamForError and that is now gone, but I am not sure I understand how the error handling is handled now.&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; Answer is that streaming is discontinued and exception is sent using agent.markCommunicationFailure as same as other place.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
OK.  I think we should then add to the future list to throw an SQLException for such cases instead of terminating the connection.  The client&apos;s Request.java rendition of  writeScalarStream  seems to handle the exception cases without terminating the connection,  but it looks like Network Server previously could  pad out the value with incorrect data and return.  The change to terminate the connection is probably better than that, but certainly not ideal.&lt;/p&gt;
</comment>
                            <comment id="12363091" author="naka" created="Wed, 18 Jan 2006 21:06:56 +0000"  >&lt;p&gt;I have indented methods in DDMWriter, writeScalarStream * 2 , prepScalarStream, flushScalarStreamSegment in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_5_indented.patch.&lt;br/&gt;
Please have a glance on it.&lt;/p&gt;

&lt;p&gt;I found that the source code applied this patch is easier to read, however,  the patch file itself is more difficult to read which line was modified.&lt;/p&gt;

&lt;p&gt;I again propose to submit patch for indenting, separated from this issue...&lt;/p&gt;</comment>
                            <comment id="12363096" author="naka" created="Wed, 18 Jan 2006 21:47:31 +0000"  >&lt;p&gt;I tried ClobTest from Sunitha.&lt;br/&gt;
Next is the result.&lt;/p&gt;

&lt;p&gt;before patch:&lt;br/&gt;
naka@rufelza:~/derby/test/20060118/ClobTest$ ./run.ksh&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =1&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =3&lt;br/&gt;
Populating data&lt;br/&gt;
Data length inserted into clob = 537638&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;1 &amp;#93;&lt;/span&gt;=1538.0ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =2&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =3&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;2 &amp;#93;&lt;/span&gt;=1515.1ms&lt;br/&gt;
=====================================================&lt;br/&gt;
Throw away the result of the first run &lt;br/&gt;
================OUTPUT=============================&lt;br/&gt;
Avg time taken to read 3rows+ (ignore first run )=1515ms&lt;/p&gt;


&lt;p&gt;after patch:&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =1&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =3&lt;br/&gt;
Populating data&lt;br/&gt;
Data length inserted into clob = 537638&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;1 &amp;#93;&lt;/span&gt;=646.4ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =2&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =3&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;2 &amp;#93;&lt;/span&gt;=627.0ms&lt;br/&gt;
=====================================================&lt;br/&gt;
Throw away the result of the first run &lt;br/&gt;
================OUTPUT=============================&lt;br/&gt;
Avg time taken to read 3rows+ (ignore first run )=627ms&lt;/p&gt;


&lt;p&gt;I think I could find the improvement &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12363121" author="skambha" created="Thu, 19 Jan 2006 02:30:28 +0000"  >&lt;p&gt;Thanks Tomohito for trying out the test. &lt;/p&gt;

&lt;p&gt;Too many short lived objects  will slow down performance and I dont think it will show up for such a short test run. &lt;/p&gt;

&lt;p&gt;In this case, I think  it is a good idea to have each testrun run for atleast 1000 iterations or so with more rows in the table ( atleast 100, if not 1000 rows in this case).    You can find this in the run.ksh that I attached in the ClobTest.zip. &lt;/p&gt;

&lt;p&gt;Can you please maybe try a long run and share the results. Thank you. &lt;/p&gt;</comment>
                            <comment id="12363279" author="kmarsden" created="Fri, 20 Jan 2006 02:46:48 +0000"  >&lt;p&gt;Great news about the performance indications. &lt;br/&gt;
 Looking again at the patch, I have some error handling concerns.   I wonder if  we can write negative tests for some of these negative cases.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;EXTDTAInputStream&lt;br/&gt;
openInputStreamLazily catches SQLExceptions/IOExceptions and throws an IllegalStateException: I think this will mean that if there is an SQLException on blob.getBinaryStream or clob.getCharacterStream. we  may  either  terminate the connection or  hang.  &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-Several places  SQLExceptions without SQLState.  e.g &lt;br/&gt;
.... &lt;br/&gt;
 }catch (IOException e) &lt;/p&gt;
{
 throw new SQLException (e.getMessage())
}
&lt;p&gt; Some other network server code imports org.apache.derby.impl.jdbc.Util; and uses throw throw Util.javaException(e); which  provide an SQLState. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;On the formatting the new patch actually removes indentation for  statements within method/constructor bodies in DDMWriter, so I would prefer the old one.   To indent, In my IDE (Eclipse) I check the box Indent &quot;Statements within  method/constructor body&quot;.  We have no code formatting guidelines even for new code.  I will remove any objection on this count.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12363505" author="kmarsden" created="Sat, 21 Jan 2006 15:54:43 +0000"  >&lt;p&gt;In the email:&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200601.mbox/%3c43D01EA1.2000708@amberpoint.com%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200601.mbox/%3c43D01EA1.2000708@amberpoint.com%3e&lt;/a&gt;&lt;br/&gt;
Bryan asked&lt;br/&gt;
What sort of faults are we likely to hit? Are things&lt;br/&gt;
like &quot;corrupt page in database&quot; the most likely?&lt;/p&gt;

&lt;p&gt;I don&apos;t know what is most likely, but I did think of one test case likely to cause an IOException.&lt;br/&gt;
If the reader is in TRANSACTION_READ_UNCOMMITTED isolation mode and then another connection updated the LOB,  the reader  should get an IOException. on the next read.&lt;/p&gt;

&lt;p&gt;I couldn&apos;t think of how to get  an error on getCharacterStream/getBinaryStream but I wonder, could the  work done in openInputStreamLazily()  just be part of  readInputStreamInitially so that these calls could just throw an SQLException if encountered?&lt;/p&gt;</comment>
                            <comment id="12363652" author="naka" created="Mon, 23 Jan 2006 19:26:46 +0000"  >&lt;p&gt;I got the result of long run.&lt;/p&gt;

&lt;p&gt;before patch:&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =1&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Populating data&lt;br/&gt;
Data length inserted into clob = 537638&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;1 &amp;#93;&lt;/span&gt;=20912.137ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =2&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;2 &amp;#93;&lt;/span&gt;=20772.027ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =3&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;3 &amp;#93;&lt;/span&gt;=20782.217ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =4&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;4 &amp;#93;&lt;/span&gt;=20768.951ms&lt;br/&gt;
=====================================================&lt;br/&gt;
Throw away the result of the first run &lt;br/&gt;
================OUTPUT=============================&lt;br/&gt;
Avg time taken to read 100rows+ (ignore first run )=20774ms&lt;/p&gt;

&lt;p&gt;after patch:&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =1&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Populating data&lt;br/&gt;
Data length inserted into clob = 537638&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;1 &amp;#93;&lt;/span&gt;=20826.22ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =2&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;2 &amp;#93;&lt;/span&gt;=20934.18ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =3&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;3 &amp;#93;&lt;/span&gt;=20935.023ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =4&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;4 &amp;#93;&lt;/span&gt;=20943.951ms&lt;br/&gt;
=====================================================&lt;br/&gt;
Throw away the result of the first run &lt;br/&gt;
================OUTPUT=============================&lt;br/&gt;
Avg time taken to read 100rows+ (ignore first run )=20937ms&lt;/p&gt;

&lt;p&gt;The results of long run show that there exists a little fall in the speed after patch against short run.&lt;br/&gt;
I think this may be due to &quot;too many short lived objects&quot; in ReEncodedInputStream &lt;br/&gt;
which Sunitha and Kathey talked about.&lt;/p&gt;

&lt;p&gt;I will try the long run again after revision.&lt;/p&gt;</comment>
                            <comment id="12363666" author="naka" created="Mon, 23 Jan 2006 22:01:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-760&quot; title=&quot;Implement routines that will write/read data from a byte[] in drda format rather than calling getXXX and setXXX methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-760&quot;&gt;DERBY-760&lt;/a&gt; will improve creation of streamed object.&lt;/p&gt;</comment>
                            <comment id="12363826" author="naka" created="Tue, 24 Jan 2006 21:56:27 +0000"  >&lt;p&gt;This is a result of long run with modification of ReEncodedInputStream.java not to create buffer for each time.&lt;br/&gt;
Attached ReEncodedInputStream.java.modifiedForLongRun is ReEncodedInputStream after the modification.&lt;/p&gt;

&lt;p&gt;=====================================================&lt;br/&gt;
TestRun =1&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Populating data&lt;br/&gt;
Data length inserted into clob = 537638&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;1 &amp;#93;&lt;/span&gt;=20661.984ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =2&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;2 &amp;#93;&lt;/span&gt;=20764.193ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =3&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;3 &amp;#93;&lt;/span&gt;=20772.66ms&lt;br/&gt;
=====================================================&lt;br/&gt;
=====================================================&lt;br/&gt;
TestRun =4&lt;br/&gt;
 Data from file to insert into Clob. =  file_500k.txt&lt;br/&gt;
 buffer (k) =1&lt;br/&gt;
 read blocks of data =false&lt;br/&gt;
 rows in table =100&lt;br/&gt;
Avg time for test&lt;span class=&quot;error&quot;&gt;&amp;#91;4 &amp;#93;&lt;/span&gt;=20760.312ms&lt;br/&gt;
=====================================================&lt;br/&gt;
Throw away the result of the first run &lt;br/&gt;
================OUTPUT=============================&lt;br/&gt;
Avg time taken to read 100rows+ (ignore first run )=20765ms&lt;/p&gt;

&lt;p&gt;I found that it is a little faster than before patch.&lt;br/&gt;
However not so much ...&lt;/p&gt;</comment>
                            <comment id="12368473" author="naka" created="Thu, 2 Mar 2006 19:47:01 +0000"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_6.patch. &lt;br/&gt;
&amp;#8212;&lt;br/&gt;
    Description of patch : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
           Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform. &lt;br/&gt;
           Remarkable point is as next : &lt;br/&gt;
           Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment . &lt;br/&gt;
           Now this variable &quot;bytesToRead&quot; was removed from. &lt;br/&gt;
           New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment . &lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
            to java/client/org/apache/derby/client/net/Request.java. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
	&lt;li&gt;Added negative test to kill streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Other improvements from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_5.patch were as next.&lt;/li&gt;
	&lt;li&gt;Reusing objects refered from instance variable of ReEncodedInputStream.&lt;/li&gt;
	&lt;li&gt;Modified not to open InputStream lazily as before.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Testing : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error except for found in &lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;#8212;&lt;br/&gt;
I have not measured the resut in performance yet.&lt;br/&gt;
I will report it later.&lt;/p&gt;</comment>
                            <comment id="12370505" author="naka" created="Wed, 15 Mar 2006 20:20:32 +0000"  >&lt;p&gt;I have measured the performance of streaming.&lt;/p&gt;

&lt;p&gt;Measurement was as next.&lt;br/&gt;
Next 3 type of test execution was measured in both of blob and clob before and after applying patch.&lt;/p&gt;

&lt;p&gt;type1 std&lt;br/&gt;
As same as shortrun in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-872&quot; title=&quot;Fix how to measure performance of lob streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-872&quot;&gt;&lt;del&gt;DERBY-872&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;type2 stability&lt;br/&gt;
As same as longrun in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-872&quot; title=&quot;Fix how to measure performance of lob streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-872&quot;&gt;&lt;del&gt;DERBY-872&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;type3 volume&lt;br/&gt;
Larger file was used in shortrun test in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-872&quot; title=&quot;Fix how to measure performance of lob streaming&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-872&quot;&gt;&lt;del&gt;DERBY-872&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
File size was 2.5meg for clob and 5meg for blob.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;In this test , I found problem that test was not finished if file was larger than these volume.&lt;br/&gt;
   I have not surveyed why streaming was not finished.&lt;br/&gt;
   However, seeing this problem was found in both of before and after, I think I can ignore this phenomena for now...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Next is the result:&lt;br/&gt;
==&amp;gt; ./before/blob/std/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=207ms&lt;br/&gt;
==&amp;gt; ./before/blob/stability/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=6418ms&lt;br/&gt;
==&amp;gt; ./before/blob/volume/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=806ms&lt;/p&gt;

&lt;p&gt;==&amp;gt; ./after/blob/std/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=173ms&lt;br/&gt;
==&amp;gt; ./after/blob/stability/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=6453ms&lt;br/&gt;
==&amp;gt; ./after/blob/volume/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=992ms&lt;/p&gt;


&lt;p&gt;==&amp;gt; ./before/clob/std/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=1511ms&lt;br/&gt;
==&amp;gt; ./before/clob/stability/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=20968ms&lt;br/&gt;
==&amp;gt; ./before/clob/volume/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=10986ms&lt;/p&gt;

&lt;p&gt;==&amp;gt; ./after/clob/std/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=594ms&lt;br/&gt;
==&amp;gt; ./after/clob/stability/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=20235ms&lt;br/&gt;
==&amp;gt; ./after/clob/volume/result.txt &amp;lt;==&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=1963ms&lt;/p&gt;


&lt;p&gt;Improvement was found in all of clob streaming.&lt;br/&gt;
However, improvement was not found in blob streaming other than std test.&lt;br/&gt;
Even the little drops in performance were found in stability and volume test, on the contrary.&lt;/p&gt;


&lt;p&gt;I guesses this result as next.&lt;/p&gt;

&lt;p&gt;Before the patch, stream retrieved from blob was buffered to memory entirely.&lt;br/&gt;
After the patch, no buffer is used when stream of blob was read. &lt;br/&gt;
Stream retrieved from blob was directly be read.&lt;/p&gt;

&lt;p&gt;Not using buffer when reading stream of blob may be reason why streaming of blob was not improved.&lt;br/&gt;
In the case of clob, ReEncodedStream was used when stream of clob was read.&lt;br/&gt;
I think ReEncodedStream works as buffer luckily and result in improvement of streaming clob.&lt;/p&gt;

&lt;p&gt;I think buffering is needed when reading stream of blob too.&lt;/p&gt;

&lt;p&gt;Under this considerration, &lt;br/&gt;
I will implement code of buffering &lt;b&gt;each segment&lt;/b&gt; of stream retrieved from blob. &lt;/p&gt;</comment>
                            <comment id="12372448" author="naka" created="Fri, 31 Mar 2006 00:31:57 +0100"  >&lt;p&gt;I have surveyed around the drop in performance of streaming blob after the patch.&lt;/p&gt;

&lt;p&gt;After struggling to interpret the profiled informations, &lt;br/&gt;
I found that java.net.SocketOutputStream.writemethod seems to takes much more part in processing than before the patch.&lt;/p&gt;

&lt;p&gt;I took this as &lt;b&gt;sign&lt;/b&gt; of problem at client side and &lt;br/&gt;
realized that client side handles buffer without information for length of information to be cached after the patch and&lt;br/&gt;
that it would be reason of drop in performance.&lt;/p&gt;

&lt;p&gt;Then I tested with modified client driver that have buffer of 5 * 1024 * 1024 bytes, corresponding size of the streamed file.&lt;/p&gt;

&lt;p&gt;//Where I specified the size of buffer was next two part.&lt;br/&gt;
//* org.apache.derby.client.am.Connection.commBufferSize_ and&lt;br/&gt;
//* parameter for constructor of ByteArrayOutputStream called from org.apache.derby.client.net.Reply.getData when ddmScalarLen_ is -1.&lt;/p&gt;

&lt;p&gt;Result was as next.&lt;br/&gt;
Avg time taken to read nullrows+ (ignore first run )=760ms&lt;/p&gt;

&lt;p&gt;This is faster than result before the patch.&lt;br/&gt;
==&amp;gt; ./before/blob/volume/result.txt &amp;lt;== &lt;br/&gt;
 Avg time taken to read nullrows+ (ignore first run )=806ms &lt;/p&gt;

&lt;p&gt;This result suggests that problem around buffer at client is the reason why the patch does not improve streaming blob.&lt;br/&gt;
Now I think it is the reason of drop in performance of streaming blob &lt;br/&gt;
that buffer at client side is handled without information of length to be buffered after the patch.&lt;/p&gt;
</comment>
                            <comment id="12373086" author="naka" created="Tue, 4 Apr 2006 21:50:37 +0100"  >&lt;p&gt;I give next three countermeasure for drop in performance of streaming blob in the patch.&lt;/p&gt;

&lt;p&gt;1:Ignore the drop in streaming blob. The degree of drop is not so much.&lt;br/&gt;
2:Give up using layer B streaming.&lt;br/&gt;
3:Use both layer B streaming and traditional way. Layer B streaming for clob and traditional way for blob.&lt;/p&gt;

&lt;p&gt;I think 3rd one is best one and work forward it.&lt;/p&gt;</comment>
                            <comment id="12373403" author="kmarsden" created="Thu, 6 Apr 2006 02:49:18 +0100"  >&lt;p&gt;Does &quot;traditional way&quot; mean we will still have hte large object materialized into memory on the server?&lt;/p&gt;</comment>
                            <comment id="12373502" author="kmarsden" created="Fri, 7 Apr 2006 01:19:03 +0100"  >&lt;p&gt;The response by mail was that yes traditional way for blob meant that BLOB&apos;s would still be materialized into memory on the server.    The description of the performance degredation for BLOB&apos;s made it sound like it was not severe.  I think  a slight performance degradation for  BLOB&apos;s is an exceptable trade off for not having them materialized into memory.&lt;/p&gt;
</comment>
                            <comment id="12373852" author="naka" created="Mon, 10 Apr 2006 22:59:33 +0100"  >&lt;p&gt;I resumed issues on next mail.&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200603.mbox/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200603.mbox/&lt;/a&gt;&amp;lt;440C3DDE.3080306%40basil.ocn.ne.jp&amp;gt;&lt;/p&gt;

&lt;p&gt;For Issue 1) and 2) , I added next ASSERT code and execute derbyall.&lt;br/&gt;
+    protected void writeScalarStream (boolean chainedWithSameCorrelator,&lt;br/&gt;
 									  int codePoint,&lt;br/&gt;
 									  int length,&lt;br/&gt;
 									  java.io.InputStream in,&lt;br/&gt;
 									  boolean writeNullByte) &lt;br/&gt;
 		throws DRDAProtocolException&lt;br/&gt;
 	{&lt;br/&gt;
+	    &lt;br/&gt;
+	    // Test code to confirm InputStream is always EXTDTAInputStream&lt;br/&gt;
+	    if( SanityManager.DEBUG )&lt;/p&gt;
{
+		SanityManager.ASSERT( in instanceof EXTDTAInputStream );
+	    }
&lt;p&gt;+		&lt;/p&gt;

&lt;p&gt;The result was that I found no error resulted from this ASSERT code.&lt;/p&gt;

&lt;p&gt;Considering this result, I think it would be possible to remove code for byte[] in DRDAConnThread.writeEXTDTA (DRDAStatement stmt), assuming stream is always EXTDTAInputStream object.&lt;/p&gt;

&lt;p&gt;Please give me comments from other members.&lt;/p&gt;</comment>
                            <comment id="12373857" author="naka" created="Mon, 10 Apr 2006 23:11:08 +0100"  >&lt;p&gt;Oops... Url for mail seems not to work right.&lt;br/&gt;
I write it again ...&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200603.mbox/%3C440C3DDE.3080306%40basil.ocn.ne.jp%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200603.mbox/%3C440C3DDE.3080306%40basil.ocn.ne.jp%3e&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12374177" author="naka" created="Wed, 12 Apr 2006 21:52:33 +0100"  >&lt;p&gt;There seems to be neither  objection nor approval for removing the code for byte[]...&lt;/p&gt;

&lt;p&gt;Well... I will remove it.&lt;/p&gt;

&lt;p&gt;The reason is as next.&lt;br/&gt;
1) The unused code should be removed.&lt;br/&gt;
2) Even if it was not removed, that part was not tested in test suite and may not work as expected.&lt;/p&gt;

&lt;p&gt;I think this is not bad challenge...&lt;/p&gt;</comment>
                            <comment id="12376466" author="naka" created="Wed, 26 Apr 2006 19:19:46 +0100"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_7.patch. &lt;br/&gt;
 &amp;#8212; &lt;br/&gt;
     Description of patch : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
            Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform. &lt;br/&gt;
            Remarkable point is as next : &lt;br/&gt;
            Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment . &lt;br/&gt;
            Now this variable &quot;bytesToRead&quot; was removed from. &lt;br/&gt;
            New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment . &lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
             to java/client/org/apache/derby/client/net/Request.java. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
	&lt;li&gt;Added negative test to kill streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Place buffer before lob object was streamed out to client.&lt;/li&gt;
	&lt;li&gt;Added test to stream with the stream out buffer configuration.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Other improvements from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_6.patch were as next.&lt;/li&gt;
	&lt;li&gt;Remove the code for handling byte[].&lt;/li&gt;
	&lt;li&gt;Make EXTDTAInputStream always be markSupported.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Testing : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error except found in &lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/Limited/testSummary-396619.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/Limited/testSummary-396619.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12377035" author="bryanpendleton" created="Sat, 29 Apr 2006 07:33:48 +0100"  >&lt;p&gt;As you know, I have studied this patch multiple times; I think it is excellent.&lt;/p&gt;

&lt;p&gt;Two thoughts, if you have not yet committed the patch:&lt;/p&gt;

&lt;p&gt;1) It would be nice if you could add some comments to OutBufferedStream.java indicating the purpose of this test.&lt;/p&gt;

&lt;p&gt;2) Should we add some documentation about the new configuration property derby.drda.streamOutBufferSize?&lt;/p&gt;

&lt;p&gt;Thank you very much for all the great work on this issue!&lt;/p&gt;</comment>
                            <comment id="12377069" author="naka" created="Sat, 29 Apr 2006 16:07:56 +0100"  >&lt;p&gt;Working in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1268&quot; title=&quot;Add description of derby.drda.streamOutBufferSize to &amp;quot;Derby Server and Administration Guide&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1268&quot;&gt;&lt;del&gt;DERBY-1268&lt;/del&gt;&lt;/a&gt;, I found that svn:eol-style was not native in next files which was added in this task.&lt;/p&gt;

&lt;p&gt;added files:&lt;br/&gt;
java/drda/org/apache/derby/impl/drda/ReEncodedInputStream.java&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SuicideOfStreaming.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/SuicideOfStreaming.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/master/OutBufferedStream.out&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/OutBufferedStream_app.properties&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/OutBufferedStream.java&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming_app.properties&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java&lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SwitchablePrintStream.java&lt;/p&gt;

&lt;p&gt;.subversion/config was not configured in my environment ...&lt;/p&gt;

&lt;p&gt;I set attributes to those files in next patch.&lt;/p&gt;</comment>
                            <comment id="12377143" author="naka" created="Sun, 30 Apr 2006 13:51:03 +0100"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_8.patch. &lt;br/&gt;
  &amp;#8212; &lt;br/&gt;
      Description of patch : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
             Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform. &lt;br/&gt;
             Remarkable point is as next : &lt;br/&gt;
             Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment . &lt;br/&gt;
             Now this variable &quot;bytesToRead&quot; was removed from. &lt;br/&gt;
             New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment . &lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
              to java/client/org/apache/derby/client/net/Request.java. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
	&lt;li&gt;Added negative test to kill streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Place buffer before lob object was streamed out to client.&lt;/li&gt;
	&lt;li&gt;Added test to stream with the stream out buffer configuration.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remove the code for handling byte[].&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Other improvements from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_7.patch were as next.&lt;/li&gt;
	&lt;li&gt;Add comment  to explain the test of OutBufferedStream.java&lt;/li&gt;
	&lt;li&gt;Set svn:eol-style property of newly added files as native.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Testing : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error except found in &lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/Limited/testSummary-397966.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJvm1.4/Limited/testSummary-397966.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12378200" author="naka" created="Sat, 6 May 2006 17:58:19 +0100"  >&lt;p&gt;I found difference in .out file of  SuicideOfStreaming in execution of derbyall,&lt;br/&gt;
after updated to repository .&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/derbynetclientmats/DerbyNetClient/derbynetmats/derbynetmats/SuicideOfStreaming.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: SuicideOfStreaming jdk1.4.2_10 DerbyNetClient derbynetmats:derbynetmats 2006-05-06 17:37:39 ***&lt;br/&gt;
1 del&lt;br/&gt;
&amp;lt; java.sql.SQLException: A communication error has been detected. Communication protocol being used: Reply.fill(). Communication API being used: InputStream.read(). Location where the error was detected: insufficient data. Communication function detecting the error: *. Protocol specific error codes(s) TCP/IP SOCKETS &lt;br/&gt;
2 del&lt;br/&gt;
&amp;lt; Caused by: org.apache.derby.client.am.DisconnectException: A communication error has been detected. Communication protocol being used: Reply.fill(). Communication API being used: InputStream.read(). Location where the error was detected: insufficient data. Communication function detecting the error: *. Protocol specific error codes(s) TCP/IP SOCKETS &lt;br/&gt;
2a1,2&lt;br/&gt;
&amp;gt; java.sql.SQLException: Insufficient data while reading from the network - expected a minimum of 6 bytes and received only -1 bytes.  The connection has been terminated.&lt;br/&gt;
&amp;gt; Caused by: org.apache.derby.client.am.DisconnectException: Insufficient data while reading from the network - expected a minimum of 6 bytes and received only -1 bytes.  The connection has been terminated.&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   SuicideOfStreaming jdk1.4.2_10 DerbyNetClient derbynetmats:derbynetmats 2006-05-06 17:37:44 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I guess that this difference may be caused by &quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-850&quot; title=&quot;Internationalize all classes in java/client/org/apache/derby/jdbc&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-850&quot;&gt;&lt;del&gt;DERBY-850&lt;/del&gt;&lt;/a&gt; - Internationalize client/org/apache/derby/jdbc classes.&quot;.&lt;br/&gt;
I think this difference is no problem and willing to adopt new error messages in .out file.&lt;/p&gt;

&lt;p&gt;I suspend committing this patch for days to listen comments from others.&lt;/p&gt;</comment>
                            <comment id="12378283" author="naka" created="Sun, 7 May 2006 17:02:15 +0100"  >&lt;p&gt; I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_9.patch. &lt;br/&gt;
   &amp;#8212; &lt;br/&gt;
       Description of patch : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove processing to expand data from InputStream of blob/clob to memory before sending to client.&lt;/li&gt;
	&lt;li&gt;Implement layer B streaming at NetworkServer.&lt;/li&gt;
	&lt;li&gt;As written in this issue firstly, almost rewrite whole org.apache.derby.impl.drda.DDMWriter#writeScalarStream.&lt;br/&gt;
              Here , &quot;almost&quot; means that code was not wrote from scratch, but was wrote as reform. &lt;br/&gt;
              Remarkable point is as next : &lt;br/&gt;
              Original code was using variable &quot;bytesToRead&quot; to handle remaining amount of data sent and remaining roon in DSS segment . &lt;br/&gt;
              Now this variable &quot;bytesToRead&quot; was removed from. &lt;br/&gt;
              New code, instead, have variable &quot;spareDssLength&quot; to handle remaining room in DSS segment . &lt;/li&gt;
	&lt;li&gt;Add call to ensureLength in writeScalarStream expecting appropriate buffer size.&lt;/li&gt;
	&lt;li&gt;Move comment in java/drda/org/apache/derby/impl/drda/DDMWriter.java about client driver implementation&lt;br/&gt;
               to java/client/org/apache/derby/client/net/Request.java. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify org.apache.derby.impl.drda.EXTDTAInputStream to stream InputStream retrieved from ResultSet directly.&lt;/li&gt;
	&lt;li&gt;The source stream is read twice, first for seeing whether source stream is/is not empty, second for streaming it.&lt;/li&gt;
	&lt;li&gt;To keep reference to valid stream, EXTDTAInputStream have reference to resultset and blob/clob also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modify master file of result for blobclob4BLOB.&lt;/li&gt;
	&lt;li&gt;Now as same as result of embed driver, dead lock will be happen in clobTest92.&lt;/li&gt;
	&lt;li&gt;Different expected exception was happen in negative test in blobclob4BLOB.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added asserting code.&lt;/li&gt;
	&lt;li&gt;Added negative test to kill streaming.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Place buffer before lob object was streamed out to client.&lt;/li&gt;
	&lt;li&gt;Added test to stream with the stream out buffer configuration.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Remove the code for handling byte[].&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Other improvements from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_8.patch were as next.&lt;/li&gt;
	&lt;li&gt;Modify result of .out file for SuicideOfStreaming.java as to match current.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   Testing : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Executed derbyall and found no error&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12378284" author="naka" created="Sun, 7 May 2006 17:05:22 +0100"  >&lt;p&gt;One more modification between  &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_8.patch and  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-326&quot; title=&quot;Improve streaming of large objects for network server and client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-326&quot;&gt;&lt;del&gt;DERBY-326&lt;/del&gt;&lt;/a&gt;_9.patch ... &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Conflict in both of blobclob4BLOB.out was resolved.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12378411" author="naka" created="Mon, 8 May 2006 20:38:17 +0100"  >&lt;p&gt;I have committed.&lt;/p&gt;

&lt;p&gt;Sending        java/drda/org/apache/derby/impl/drda/DDMWriter.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;br/&gt;
Sending        java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java&lt;br/&gt;
Adding         java/drda/org/apache/derby/impl/drda/ReEncodedInputStream.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/iapi/reference/Property.java&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/SuicideOfStreaming.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/SuicideOfStreaming.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/master/OutBufferedStream.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/suites/derbynetmats.runall&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/OutBufferedStream.java&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/OutBufferedStream_app.properties&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming_app.properties&lt;br/&gt;
Adding         java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SwitchablePrintStream.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java&lt;br/&gt;
Transmitting file data .................&lt;br/&gt;
Committed revision 405037.&lt;/p&gt;</comment>
                            <comment id="12703930" author="kmarsden" created="Wed, 29 Apr 2009 02:01:37 +0100"  >&lt;p&gt;It looks like these improvements were made in 10.2.  New issues can be opened up for any additional streaming improvements.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12325879">DERBY-721</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12333350">DERBY-1302</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12333352">DERBY-1303</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12333337">DERBY-1301</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12372921">DERBY-2892</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12314092">DERBY-550</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12433091">DERBY-4350</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12326768">DERBY-760</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12328504">DERBY-917</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12322004" name="ClobTest.zip" size="78340" author="skambha" created="Tue, 17 Jan 2006 15:43:54 +0000"/>
                            <attachment id="12321595" name="DERBY-326.patch" size="29139" author="naka" created="Thu, 29 Dec 2005 23:13:11 +0000"/>
                            <attachment id="12321605" name="DERBY-326_2.patch" size="26811" author="naka" created="Fri, 30 Dec 2005 14:46:54 +0000"/>
                            <attachment id="12321673" name="DERBY-326_3.patch" size="29146" author="naka" created="Wed, 4 Jan 2006 17:04:58 +0000"/>
                            <attachment id="12321800" name="DERBY-326_4.patch" size="30235" author="naka" created="Sat, 7 Jan 2006 21:34:34 +0000"/>
                            <attachment id="12321863" name="DERBY-326_5.patch" size="30366" author="naka" created="Wed, 11 Jan 2006 22:01:35 +0000"/>
                            <attachment id="12322080" name="DERBY-326_5_indented.patch" size="33182" author="naka" created="Wed, 18 Jan 2006 21:06:56 +0000"/>
                            <attachment id="12323615" name="DERBY-326_6.patch" size="37462" author="naka" created="Thu, 2 Mar 2006 19:47:01 +0000"/>
                            <attachment id="12325897" name="DERBY-326_7.patch" size="282728" author="naka" created="Wed, 26 Apr 2006 19:19:46 +0100"/>
                            <attachment id="12326065" name="DERBY-326_8.patch" size="284974" author="naka" created="Sun, 30 Apr 2006 13:51:03 +0100"/>
                            <attachment id="12326358" name="DERBY-326_9.patch" size="282378" author="naka" created="Sun, 7 May 2006 17:02:14 +0100"/>
                            <attachment id="12322303" name="ReEncodedInputStream.java.modifiedForLongRun" size="3044" author="naka" created="Tue, 24 Jan 2006 21:56:27 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12328087">DERBY-872</subtask>
                            <subtask id="12332876">DERBY-1268</subtask>
                            <subtask id="12333350">DERBY-1302</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 9 Oct 2005 18:19:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29491</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rvz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38336</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>