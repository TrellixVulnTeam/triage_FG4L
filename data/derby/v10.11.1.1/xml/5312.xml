<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:46:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5312/DERBY-5312.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5312] InterruptResilienceTest failed with ERROR 40XD1: Container was opened in read-only mode.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5312</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;WorkerThread failed with this exception:&lt;/p&gt;

&lt;p&gt;ERROR 40XD1: Container was opened in read-only mode.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainer.use(BaseContainer.java:562)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(BaseContainerHandle.java:834)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:773)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:589)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.Xact.openContainer(Xact.java:1316)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.OpenBTree.init(OpenBTree.java:382)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeController.init(BTreeController.java:1225)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2IController.init(B2IController.java:140)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2I.open(B2I.java:824)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:476)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openCompiledConglomerate(RAMTransaction.java:1293)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexChanger.openIndexCC(IndexChanger.java:507)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(IndexChanger.java:438)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexChanger.doInsert(IndexChanger.java:383)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexChanger.insert(IndexChanger.java:590)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexSetChanger.insert(IndexSetChanger.java:268)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:453)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:999)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:519)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:449)&lt;/p&gt;

&lt;p&gt;I was testing a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4620&quot; title=&quot;Query optimizer causes OOM error on a complex query&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4620&quot;&gt;DERBY-4620&lt;/a&gt; (estimate-sizes.diff), but I think the failure isn&apos;t related to those changes.&lt;/p&gt;</description>
                <environment>Oracle Solaris 11 Express snv_151a X86&lt;br/&gt;
java version &amp;quot;1.7.0&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.7.0-b147)&lt;br/&gt;
Java HotSpot(TM) Server VM (build 21.0-b17, mixed mode)</environment>
        <key id="12512855">DERBY-5312</key>
            <summary>InterruptResilienceTest failed with ERROR 40XD1: Container was opened in read-only mode.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Jul 2011 14:33:46 +0100</created>
                <updated>Tue, 25 Oct 2011 18:09:35 +0100</updated>
                            <resolved>Tue, 19 Jul 2011 15:12:09 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13059900" author="knutanders" created="Tue, 5 Jul 2011 14:35:36 +0100"  >&lt;p&gt;Uploading derby.log and stack trace from the failing test run.&lt;/p&gt;</comment>
                            <comment id="13061417" author="dagw" created="Thu, 7 Jul 2011 17:27:30 +0100"  >&lt;p&gt;I was able to reproduce this in one out of 100 runs on my laptop. I think it is a side effect of something being thrown in privGetJBMSLockOnDB, cf this the code fragment ca line 1933. I&apos;ll try to instrument it.&lt;/p&gt;

&lt;p&gt;catch (IOException ioe)&lt;br/&gt;
{&lt;br/&gt;
     // probably a read only db, don&apos;t do anything more&lt;br/&gt;
     readOnly = true;&lt;/p&gt;</comment>
                            <comment id="13064096" author="dagw" created="Tue, 12 Jul 2011 20:47:43 +0100"  >&lt;p&gt;With this trace in FileContainer#canUpdate:&lt;/p&gt;

&lt;p&gt;    protected boolean canUpdate() {&lt;br/&gt;
        if (!canUpdate) &lt;/p&gt;
{
           System.err.println(&quot;FileContainer#canUpdate: &quot; + canUpdate);
        }

&lt;p&gt;        return canUpdate;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;I see 3 out of 700 runs:&lt;/p&gt;

&lt;p&gt;    ..FileContainer#canUpdate: true&lt;br/&gt;
    ..........&lt;/p&gt;

&lt;p&gt;I.e. a race: !canUpdate -&amp;gt; canUpdate, but how?  Btw, the value is not printed at &quot;false&quot; on either of the three hits.&lt;/p&gt;</comment>
                            <comment id="13064123" author="dagw" created="Tue, 12 Jul 2011 21:28:38 +0100"  >&lt;p&gt;Under reopening a container there is a small time-window inside in RAFContainer#run(OPEN_CONTAINER_ACTION):&lt;br/&gt;
             :&lt;br/&gt;
             canUpdate = false;&lt;br/&gt;
             try {&lt;br/&gt;
                 boolean b1 = !dataFactory.isReadOnly();&lt;br/&gt;
                 boolean b2 = file.canWrite();&lt;br/&gt;
                 // if (!dataFactory.isReadOnly() &amp;amp;&amp;amp; file.canWrite())&lt;br/&gt;
                 if (b1 &amp;amp;&amp;amp; b2) {&lt;br/&gt;
                     canUpdate = true;&lt;/p&gt;

&lt;p&gt;during which the flag canUpdate is set to &quot;false&quot;, the (normally) to &quot;true&quot; again. This code is not synchronized with the call BaseContainer#use -&amp;gt; FileContainer#update to check the value of &quot;canUpdate&quot;.&lt;/p&gt;</comment>
                            <comment id="13064127" author="mikem" created="Tue, 12 Jul 2011 21:42:27 +0100"  >&lt;p&gt;It looks like there is little synchronization on that variable and access is shared across multiple files, as noted below.&lt;br/&gt;
While very short it does seem possible for a change to happen to canUpdate after it is checked, and JIT probably can&apos;t&lt;br/&gt;
opt it out as it is a shared variable.  Just to check for a JIT bug it may help to rewrite as something like:&lt;/p&gt;


&lt;p&gt;if (!(tmp_canUpdate = canUpdate))&lt;/p&gt;
{
        print both tmp and canUpdate
}

&lt;p&gt;Maybe a bit more instrumentation might help.  Maybe the stack of the call.  Or at least for your test I think if you throw an&lt;br/&gt;
assert then the new error reporting stuff will print stacks of every thread.  It may not work though as we are talking about&lt;br/&gt;
a few instructions while the stack dumps are likely 1000&apos;s or more.   Has the feel of one thread opening a shared&lt;br/&gt;
container and not properly coordinating with someone that is closing it.  Given the test, is it likely someone is incorrectly&lt;br/&gt;
closing the container?&lt;/p&gt;

&lt;p&gt;Is this test likely flooding the container cache?&lt;/p&gt;

&lt;p&gt;There is at least competition on this resource between user thread and store background daemon either doing checkpoint&lt;br/&gt;
or post commit work.  If the test has multiple threads than add that also.&lt;/p&gt;

&lt;p&gt;:&lt;br/&gt;
BaseContainer.java:             if (forUpdate &amp;amp;&amp;amp; !canUpdate())&lt;br/&gt;
BaseContainer.java:     protected abstract boolean canUpdate();&lt;br/&gt;
FileContainer.java:     protected boolean canUpdate;        // can I be written&lt;br/&gt;
to?&lt;br/&gt;
FileContainer.java:             canUpdate = false;&lt;br/&gt;
FileContainer.java:     protected boolean canUpdate() {&lt;br/&gt;
FileContainer.java:             return canUpdate;&lt;br/&gt;
InputStreamContainer.java:              canUpdate = false;&lt;br/&gt;
RAFContainer.java:             canUpdate = true;&lt;br/&gt;
RAFContainer.java:             canUpdate = false;&lt;br/&gt;
RAFContainer.java:                     canUpdate = true;&lt;br/&gt;
RAFContainer.java:                 fileData = file.getRandomAccessFile(canUpdate&lt;br/&gt;
 ? &quot;rw&quot; : &quot;r&quot;);&lt;br/&gt;
RAFContainer.java:                             stub.getRandomAccessFile(canUpdat&lt;br/&gt;
e ? &quot;rw&quot; : &quot;r&quot;);&lt;/p&gt;</comment>
                            <comment id="13064142" author="dagw" created="Tue, 12 Jul 2011 22:19:12 +0100"  >&lt;p&gt;Thanks, Mike. I think I understand why this is happening now.&lt;br/&gt;
One thread sees an interrupt and goes on to reopen the container to get the NIO channel up again.  During reopening the &quot;canUpdate&quot; state variable is briefly set to false before being set to true again. Meanwhile, another another thread is accessing the container, cf. the call stack of this issue. During that access, BaseContainer#use calls FileContainer#canUpdate and (sometimes) reads the &quot;false&quot; value in the short time window in question.&lt;/p&gt;

&lt;p&gt;Uploading a patch which omits setting &quot;canUpdate&quot; during reopening of the container. It should not have changed during the brief period the channel was closed due to the interrupt, so this seems ok, cf. the Javadoc for the variable &quot;FileContainer#canUpdate&quot;: it should only change when we reset the identity of the container.&lt;/p&gt;</comment>
                            <comment id="13064193" author="mikem" created="Tue, 12 Jul 2011 23:15:49 +0100"  >&lt;p&gt;the patch looks fine to me, the work need not be done for a reopen.&lt;/p&gt;

&lt;p&gt;But, isn&apos;t the real problem that there is some uncoordinated activity that should be coordinated.  Some thread is actively doing&lt;br/&gt;
work on the filecontainer because it thinks it is open, but the code is in the middle of reopening it.  Is there going be some&lt;br/&gt;
other problem with the rest of the work in the reopen and the competing thread or is that handled somehow else.  I did not &lt;br/&gt;
follow all the work in this area so if this is meant to be handled somehow else, good.  maybe just another comment in your&lt;br/&gt;
change explaining why it is ok for use()  to complete while the file is being reopened would help.  I see there is a comment&lt;br/&gt;
about deadlock on synchonization later so that is likely an issue.&lt;/p&gt;

&lt;p&gt;Is closeContainer() access to fileData with no sync a problem?&lt;/p&gt;

&lt;p&gt;Do you think there is any similar problem with isStub as canUpdate?&lt;/p&gt;

&lt;p&gt;I don&apos;t know if it is possible but is it possible the only work that needs to be done on a reopen is:&lt;br/&gt;
fileData = file.getRandomAccessFile(canUpdate ? &quot;rw&quot; : &quot;r&quot;);&lt;br/&gt;
    or does the closing exception lose isStub, file, and/or fileName?&lt;/p&gt;
</comment>
                            <comment id="13064540" author="dagw" created="Wed, 13 Jul 2011 14:28:17 +0100"  >&lt;p&gt;Thanks for looking at this Mike! I agree that closeContainer should be synchronized on the container w.r.t handling fileData, since it will be accessed by other threads during IO which are oblivious to the reopening taking place. All such use cases are synchronized on &quot;this&quot;, or are related to creation and opening.  As far as I can see, closeContainer doesn&apos;t touch any other container state variables. &quot;isStub&quot; is method local (once defined and used on CREATE_CONTAINER_ACTION, once defined and used in OPEN_CONTAINER_ACTION), so that should be OK.&lt;/p&gt;

&lt;p&gt;As for simplifying to just to just resetting fileData, I&apos;ll look into if we could do that. &quot;file&quot; is also method local.and &quot;fileName&quot; is only set in OPEN_CONTAINER_ACTION and only ever used as a string when throwing exceptions, so it should be possible to simplify reopening.&lt;/p&gt;</comment>
                            <comment id="13065317" author="dagw" created="Thu, 14 Jul 2011 16:15:33 +0100"  >&lt;p&gt;Uploading a patch (derby-5312-simplify-reopen-1) which simplies the&lt;br/&gt;
reopening by essentially only a new call to&lt;/p&gt;

&lt;p&gt;    file.getRandomAccessFile(canUpdate ? &quot;rw&quot; : &quot;r&quot;)&lt;/p&gt;

&lt;p&gt;as discussed. To get &quot;file&quot;, I let RAFContainer4 keep the current&lt;br/&gt;
identity so the reopen can find file by handing back the identity when&lt;br/&gt;
we ned to make the call:&lt;/p&gt;

&lt;p&gt;   StorageFile file = privGetFileName( actionIdentity, false, true, true);&lt;/p&gt;

&lt;p&gt;but removed that state variable from RAFContainer. I ran an earlier&lt;br/&gt;
version of this overnight (some 800 iterations of the test), without&lt;br/&gt;
seeing this error again. Running regressions.&lt;/p&gt;</comment>
                            <comment id="13065447" author="mikem" created="Thu, 14 Jul 2011 19:42:46 +0100"  >&lt;p&gt;The new patch looks good to me, now it is very clear what reopen does and seems simpler.  &lt;/p&gt;</comment>
                            <comment id="13067735" author="dagw" created="Tue, 19 Jul 2011 15:11:41 +0100"  >&lt;p&gt;Committed derby-5312-simplify-reopen-1 as svn 1148344, resolving, but not closing: will backport to 10.8 first.&lt;/p&gt;</comment>
                            <comment id="13071133" author="dagw" created="Tue, 26 Jul 2011 15:51:34 +0100"  >&lt;p&gt;Back-ported to 10.8 branch as svn 1151122. Knut, feel free to close if you think the issue is adequately addressed.&lt;/p&gt;
</comment>
                            <comment id="13072255" author="knutanders" created="Thu, 28 Jul 2011 09:42:28 +0100"  >&lt;p&gt;I haven&apos;t seen the failure again after the fix went in. Closing the issue. Thanks for fixing it, Dag.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12469090">DERBY-4741</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12486453" name="derby-5312-simplify-reopen-1.diff" size="10477" author="dagw" created="Thu, 14 Jul 2011 16:15:33 +0100"/>
                            <attachment id="12486454" name="derby-5312-simplify-reopen-1.stat" size="151" author="dagw" created="Thu, 14 Jul 2011 16:15:33 +0100"/>
                            <attachment id="12486223" name="derby-5312a.diff" size="1389" author="dagw" created="Tue, 12 Jul 2011 22:19:12 +0100"/>
                            <attachment id="12485277" name="derby.log" size="2016242" author="knutanders" created="Tue, 5 Jul 2011 14:35:36 +0100"/>
                            <attachment id="12485278" name="error-stacktrace.out" size="9804" author="knutanders" created="Tue, 5 Jul 2011 14:35:36 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Jul 2011 16:27:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24767</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0exj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36237</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>