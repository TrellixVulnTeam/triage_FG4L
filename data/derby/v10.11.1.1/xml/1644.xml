<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:24 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1644/DERBY-1644.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1644] NPE when inserting values to a table that has a column declared as generated by default as identity</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1644</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The following scenario triggers a NullPointerException in statement compilation:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t1 (c1 int, c2 int generated by default as identity);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t1 (c2) values default, 10;&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;/p&gt;

&lt;p&gt;Stacktrace from derby.log:&lt;/p&gt;

&lt;p&gt;Database Class Loader started - derby.database.classpath=&apos;&apos;&lt;br/&gt;
2006-08-04 06:31:17.235 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 235), (SESSIONID = 0), (DATABASE = wombat), (DRDAID = null), Cleanup action starting&lt;br/&gt;
2006-08-04 06:31:17.235 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 235), (SESSIONID = 0), (DATABASE = wombat), (DRDAID = null), Failed Statement is: insert into t1 (c2) values default, 10&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1033)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.generate(ResultColumnList.java:893)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(RowResultSetNode.java:690)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.generate(UnionNode.java:589)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1424)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1286)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(NormalizeResultSetNode.java:122)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.InsertNode.generate(InsertNode.java:764)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:232)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:477)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:118)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:713)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:567)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:516)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:313)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:478)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:203)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:169)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:55)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:69)&lt;/p&gt;

&lt;p&gt;sysinfo:&lt;/p&gt;

&lt;p&gt;------------------ Java Information ------------------&lt;br/&gt;
Java Version:    1.4.2_12&lt;br/&gt;
Java Vendor:     Sun Microsystems Inc.&lt;br/&gt;
Java home:       C:\jdk142\jre&lt;br/&gt;
Java classpath:  classes;.&lt;br/&gt;
OS name:         Windows XP&lt;br/&gt;
OS architecture: x86&lt;br/&gt;
OS version:      5.1&lt;br/&gt;
Java user name:  yip&lt;br/&gt;
Java user home:  C:\Documents and Settings\Administrator&lt;br/&gt;
Java user dir:   C:\derby\trunk&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.4&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:\derby\trunk\classes&amp;#93;&lt;/span&gt; 10.2.0.5 alpha - (1)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
Current Locale :  [English/United States &lt;span class=&quot;error&quot;&gt;&amp;#91;en_US&amp;#93;&lt;/span&gt;]&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;de_DE&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;es&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;fr&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;it&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;ja_JP&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;ko_KR&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;pt_BR&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;zh_CN&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
Found support for locale: &lt;span class=&quot;error&quot;&gt;&amp;#91;zh_TW&amp;#93;&lt;/span&gt;&lt;br/&gt;
         version: 10.2.0.5 alpha - (1)&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;</description>
                <environment>Sun JDK 1.4.2</environment>
        <key id="12347287">DERBY-1644</key>
            <summary>NPE when inserting values to a table that has a column declared as generated by default as identity</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="yipng">Yip Ng</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Aug 2006 07:33:48 +0100</created>
                <updated>Wed, 17 Sep 2014 14:54:59 +0100</updated>
                            <resolved>Fri, 15 Dec 2006 16:44:14 +0000</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12449575" author="bryanpendleton" created="Tue, 14 Nov 2006 05:48:22 +0000"  >&lt;p&gt;I think that the issue here involves mixing &quot;default&quot; with constant values.&lt;/p&gt;

&lt;p&gt;Note that the quite-similar-but-not-identical statements below all work fine:&lt;/p&gt;

&lt;p&gt;  insert into t1 (c2) values (10);&lt;br/&gt;
  insert into t1 (c2) values default;&lt;br/&gt;
  insert into t1 (c2) values (default);&lt;br/&gt;
  insert into t1 (c2) values 10, 20, 30;&lt;/p&gt;

&lt;p&gt;However, this statement gets the same NPE as the one in the description:&lt;/p&gt;

&lt;p&gt;  insert into t1 (c2) values 40, 50, default;&lt;/p&gt;

&lt;p&gt;So it appears to be that the bug involves:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;inserting multiple rows with a single INSERT statement using multiple values clauses, and&lt;/li&gt;
	&lt;li&gt;some of the rows have numeric constant values, while others fire the identity field generator&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12449704" author="army" created="Tue, 14 Nov 2006 16:58:47 +0000"  >&lt;p&gt;I was running the above queries for kicks to see if I could reproduce the problem-&lt;del&gt;but they all succeeded.  I then realized that my test table &quot;t1&quot; only had &lt;b&gt;one&lt;/b&gt; column&lt;/del&gt;-the &quot;generated by default&quot; column c2.  When I recreated the table so that it had two columns (c1 and c2 as posted in the repro) the NPE occurs.&lt;/p&gt;

&lt;p&gt;So the bug appears to require that there be at least one non-identity column in the table, as well.  Maybe that&apos;s useful, maybe not...&lt;/p&gt;</comment>
                            <comment id="12451063" author="bryanpendleton" created="Sat, 18 Nov 2006 20:35:21 +0000"  >&lt;p&gt;Thanks Army! I think that your observation is crucial, and here&apos;s why:&lt;/p&gt;

&lt;p&gt;The problem arises due to this code in InsertNode.bind():&lt;/p&gt;

&lt;p&gt;                if (! inOrder || resultSet.resultColumns.size() &amp;lt; numTableColumns)&lt;/p&gt;
                {
                        // one thing we do know is that all of the resultsets underneath
                        // us have their resultColumn names filled in with the names of
                        // the target table columns.  That makes generating the mapping
                        // &quot;easier&quot; -- we simply generate the names of the target table columns
                        // that are included.  For the missing columns, we generate default
                        // value expressions.

                        resultSet = resultSet.enhanceRCLForInsert(numTableColumns, colMap,
                                       dataDictionary,
                                       targetTableDescriptor, targetVTI);
                }

&lt;p&gt;                if (resultSet instanceof UnionNode)&lt;/p&gt;
                {
                        // If we are inserting a number of rows in VALUES clause, we need to
                        // examine each row for &apos;autoincrement&apos;.
                        resultColumnList.checkAutoincrementUnion(resultSet);
                }
&lt;p&gt;                else resultColumnList.checkAutoincrement(resultSet.getResultColumns());&lt;/p&gt;

&lt;p&gt;When the VALUES clause encounters multiple rows, it generates a UNION node tree to &lt;br/&gt;
combine the rows to be inserted. The code above notices the top-level UNION node&lt;br/&gt;
and calls the special checkAutoincrementUnion() method which knows how to&lt;br/&gt;
recursively traverse the Union tree and call checkAutoIncrement() on the underlying&lt;br/&gt;
RowResultSetNode instances at the leaf level of the tree.&lt;/p&gt;

&lt;p&gt;HOWEVER, when the number of columns in the rows in the VALUES clause is a subset of&lt;br/&gt;
the number of columns in the table we&apos;re inserting into, the top node of the tree&lt;br/&gt;
is not a UnionNode, but is rather a ProjectRestrictNode. This means that we skip past&lt;br/&gt;
the UnionNode test and just call checkAutoincrement(), which processes the PRN but doesn&apos;t&lt;br/&gt;
go down to the RowResultSetNode(s) at the leaf level.&lt;/p&gt;

&lt;p&gt;This leaves the ResultColumn instance at the leaf level with a NULL column descriptor,&lt;br/&gt;
which causes the NPE during the code generation phase.&lt;/p&gt;

&lt;p&gt;And, there is a second, related problem. The enhanceRCLForInsert() call is also only made&lt;br/&gt;
at the top level of the tree. However, this call is a necessary pre-condition for calling&lt;br/&gt;
checkAutoincrement() because enhanceRCLForInsert() ensures that the proper ResultColumnList&lt;br/&gt;
values are in place prior to the checkAutoincrement() reconciliation of the column lists.&lt;/p&gt;

&lt;p&gt;I believe that the way to solve this is to merge the above code from InsertNode.bind&lt;br/&gt;
together with the current recursive processing in ResultColumnList.checkAutoincrementUnion()&lt;br/&gt;
to produce a new recursive routine, which I have called enhanceAndCheckForAutoincrement(),&lt;br/&gt;
which will recursively traverse the ResultSet tree, calling &lt;b&gt;both&lt;/b&gt; enhanceRCLForInsert()&lt;br/&gt;
and checkAutoincrement() on the various nodes in the tree.&lt;/p&gt;

&lt;p&gt;That way, even if the RowResultSetNode instances are buried within UnionNode trees, they&lt;br/&gt;
will still be correctly set up for autoincrement processing during bind processing.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach a complete patch to this Jira issue once I finish writing a bunch of tests&lt;br/&gt;
and tidying up the code changes.&lt;/p&gt;</comment>
                            <comment id="12451165" author="bryanpendleton" created="Sun, 19 Nov 2006 17:06:23 +0000"  >&lt;p&gt;Attached is d1644_recursivelyCheck_v1.diff, a proposed patch to fix this issue.&lt;/p&gt;

&lt;p&gt;This patch moves the method checkAutoincrementUnion() from&lt;br/&gt;
ResultColumnList into InsertNode, renames the method to&lt;br/&gt;
enhanceAndCheckForAutoincrement(), and updates the recursive&lt;br/&gt;
processing so that it:&lt;br/&gt;
a) can handle PRN nodes in the ResultSet tree&lt;br/&gt;
b) knows to call enhanceRCLForInsert on ResultSetNodes&lt;br/&gt;
c) can recurse on all sorts of ResultSet trees, not just those&lt;br/&gt;
headed by a UnionNode.&lt;/p&gt;

&lt;p&gt;The patch also contains some new tests. &lt;/p&gt;

&lt;p&gt;The patch passes derbyall and suites.All, and I&apos;d love to hear your feedback on it.&lt;/p&gt;</comment>
                            <comment id="12451166" author="bryanpendleton" created="Sun, 19 Nov 2006 17:10:05 +0000"  >&lt;p&gt;I think there is room for a follow-on patch in this area, to ResultSetNode.enhanceRCLForInsert.&lt;/p&gt;

&lt;p&gt;The Javadoc comments for this method suggest that this is the place where PRN nodes&lt;br/&gt;
can get inserted into the ResultSet node tree, but in fact this method does not do this.&lt;br/&gt;
I suspect that perhaps it once did, and it could be that when that processing was moved&lt;br/&gt;
elsewhere, that is when &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1644&quot; title=&quot;NPE when inserting values to a table that has a column declared as generated by default as identity&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1644&quot;&gt;&lt;del&gt;DERBY-1644&lt;/del&gt;&lt;/a&gt; arose.&lt;/p&gt;

&lt;p&gt;I think it would be useful to have a follow-on patch to ResultSetNode, which would have&lt;br/&gt;
no functional changes, but would improve the clarity of the code, to do the following:&lt;/p&gt;

&lt;p&gt;1) Change the return type of enhanceRCLForInsert from ResultSetNode to void&lt;br/&gt;
2) Remove the &quot;return this&quot; statement&lt;br/&gt;
3) Remove the unused variable numResultSetColumns&lt;br/&gt;
4) Fix the Javadoc for this method to remove the suggest that it may insert a PRN&lt;br/&gt;
into the ResultSet tree.&lt;/p&gt;

&lt;p&gt;I shall attach such a follow-on patch for review.&lt;/p&gt;</comment>
                            <comment id="12451168" author="bryanpendleton" created="Sun, 19 Nov 2006 17:18:37 +0000"  >&lt;p&gt;RSNCommentFixup_v1.diff, which must be applied after the recursivelyCheck patch,&lt;br/&gt;
is an optional second part to the patch which, I believe, improves the clarity of&lt;br/&gt;
ResultSetNode.enhanceRCLForInsert().&lt;/p&gt;

&lt;p&gt;I would appreciate any feedback about whether this patch is worth including as part of this change.&lt;/p&gt;</comment>
                            <comment id="12451169" author="bryanpendleton" created="Sun, 19 Nov 2006 17:29:22 +0000"  >&lt;p&gt;Hmmm... I think that second patch is mis-considered. I see now that&lt;br/&gt;
SetOperatorNode.enhanceRCLForInsert overrides ResultSetNode.enhanceRCLForInsert,&lt;br/&gt;
and the SetOperatorNode version &lt;b&gt;does&lt;/b&gt; return a new result set node.&lt;/p&gt;

&lt;p&gt;I think this means that I still don&apos;t understand this problem well enough.&lt;/p&gt;

&lt;p&gt;Feedback on the patch(es) is most welcome, but they are definitely not ready for commit.&lt;/p&gt;</comment>
                            <comment id="12451173" author="bryanpendleton" created="Sun, 19 Nov 2006 17:56:21 +0000"  >&lt;p&gt;I think the method SetOperatorNode.enhanceRCLForInsert  can&lt;br/&gt;
be wholly deleted, leaving only the implementation in ResultSetNode.&lt;br/&gt;
I shall pursue this possibility.&lt;/p&gt;</comment>
                            <comment id="12451203" author="bryanpendleton" created="Mon, 20 Nov 2006 00:42:13 +0000"  >&lt;p&gt;After doing some more studying and testing, I believe that it is in fact&lt;br/&gt;
safe to remove SetOperatorNode.enhanceRCLForInsert() entirely,&lt;br/&gt;
and to simply ResultSetNode.enhanceRCLForInsert() as described&lt;br/&gt;
in my previous comment. There seems to be no code path which can&lt;br/&gt;
all SetOperatorNode.enhanceRCLForInsert().&lt;/p&gt;

&lt;p&gt;Attached is RSN_EnhanceRCL_Simplify_v2.diff, which is as I said an&lt;br/&gt;
optional part of this fix, but I think it is nice to delete code if it is clearly&lt;br/&gt;
unnecessary because that simplifies the overall implementation.&lt;/p&gt;

&lt;p&gt;Please let me know your feedback.&lt;/p&gt;</comment>
                            <comment id="12451480" author="army" created="Mon, 20 Nov 2006 23:34:34 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;I applied the d1644_recursivelyCheck_v1.diff patch to my local codeline and it applied cleanly.  However, when I tried to run lang/autoincrement.sql the test failed due to an ArrayIndexOutOfBounds exception.  I was able to reproduce the error on a clean database by executing the following (pulled from that test):&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table ai_test (x int generated always as identity (start with 2, increment by 2), y int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into ai_test &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_up.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; values (1),(2);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;1 &amp;gt;= 1: java.lang.ArrayIndexOutOfBoundsException&apos;.&lt;br/&gt;
java.lang.ArrayIndexOutOfBoundsException: 1 &amp;gt;= 1&lt;br/&gt;
	at java.util.Vector.elementAt(Vector.java(Compiled Code))&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.QueryTreeNodeVector.elementAt(QueryTreeNodeVector.java:52)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions(ResultColumnList.java:890)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.InsertNode.bind(InsertNode.java:419)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:345)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:119)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:742)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:568)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:321)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:517)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:370)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:268)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:204)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:170)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:71)&lt;/p&gt;

&lt;p&gt;To see if it made any difference I also applied RSN_EnhanceRCL_Simplify_v2.diff to my codeline.  When I did that things started working correctly again.  This surprised me since I was under the impression that this second patch was optional--i.e. nice but not required.  Am I overlooking something here, or is it in fact true that both patches must be applied in order for your fix to be complete?  I didn&apos;t look into it at all but if you could give a quick explanation of why the second patch is required, that&apos;d be great.&lt;/p&gt;

&lt;p&gt;In any event, having applied both patches together I was able to run lang/autoincrement.sql without problems.  I also verified that without the changes the new tests fail with an NPE, as expected.&lt;/p&gt;

&lt;p&gt;My one minor suggestion is to perhaps add two more test cases to your current scenario:&lt;/p&gt;

&lt;p&gt;insert into D1644 (c2) values default, default, default, default;&lt;br/&gt;
insert into D1644 (c2, c1) values (default, 128), (default, 129), (default, 131);&lt;/p&gt;

&lt;p&gt;The above two INSERTs work as expected when both of your patches have been applied, so this is not a requirement.  But it might be nice to have the extra test cases, just for safety...&lt;/p&gt;</comment>
                            <comment id="12451495" author="bryanpendleton" created="Tue, 21 Nov 2006 00:23:01 +0000"  >&lt;p&gt;Thanks for the review Army! I had both patches together in my sandbox and thought &lt;br/&gt;
I had separated them cleanly, but it seems that they got hooked together.&lt;/p&gt;

&lt;p&gt;I shall go study this some more.&lt;/p&gt;</comment>
                            <comment id="12452322" author="bryanpendleton" created="Thu, 23 Nov 2006 20:21:30 +0000"  >&lt;p&gt;I&apos;m not quite sure what I was thinking when I thought that the two code&lt;br/&gt;
changes could be separated, but they cannot. They are linked and really&lt;br/&gt;
it needs to be a single patch proposal.&lt;/p&gt;

&lt;p&gt;Attached is d1644_combined_v3.diff, a patch proposal which combines&lt;br/&gt;
the two previous code change patches. The new patch also adds the&lt;br/&gt;
new tests suggested by Army.&lt;/p&gt;

&lt;p&gt;There are several ideas involved in this patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When an INSERT statement will insert multiple rows from the VALUES&lt;br/&gt;
   clause, the compiler will compile the various values into a tree of&lt;br/&gt;
   UnionNodes with RowResultSetNodes at the leaves of the three&lt;/li&gt;
	&lt;li&gt;The columns specified in the INSERT statement may be a subset&lt;br/&gt;
   of the rows in the table. The &quot;extra&quot; columns need to be constructed by&lt;br/&gt;
   the INSERT statement, either by generating NULL values for those&lt;br/&gt;
   columns which are nullable, or by compiling a default values for those&lt;br/&gt;
   columns which have DEFAULT values, or by generating a value for an IDENTITY&lt;br/&gt;
   column which is GENERATED. The work of constructing these extra&lt;br/&gt;
   column values is done by genNewRCForInsert.&lt;/li&gt;
	&lt;li&gt;For columns which are GENERATED ALWAYS, we must make sure that&lt;br/&gt;
   the INSERT statement doesn&apos;t allow the user to insert their own value for&lt;br/&gt;
   the generated column.&lt;/li&gt;
	&lt;li&gt;The columns which are specified in the INSERT column spec may not match&lt;br/&gt;
   the order in which the columns arise in the table. Therefore, the column&lt;br/&gt;
   values may need to be re-ordered by the INSERT statement so that they&lt;br/&gt;
   occur in the proper order.&lt;/li&gt;
	&lt;li&gt;In the case when the ResultSet which provides the values for the INSERT&lt;br/&gt;
   statement is not just a single node, but is rather a tree of UnionNodes, the&lt;br/&gt;
   above processing needs to happen throughout the tree, not just at the root node.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The combined patch proposal accomplishes all of this.&lt;/p&gt;

&lt;p&gt;There is one aspect to this patch that I can&apos;t fully explain yet. If somebody knows&lt;br/&gt;
the reason behind it, that would be very nice; I am hoping to continue studying&lt;br/&gt;
this in the near future. This question involves the ProjectRestrictNode at the&lt;br/&gt;
root of the ResultSetNode tree. With the current code, when the VALUES clause&lt;br/&gt;
results in multiple rows, and is compiled into a UnionNode tree with&lt;br/&gt;
RowResultSetNodes at the leaves, InsertNode.bind calls SetOperatorNode.&lt;br/&gt;
enhanceRCLForInsert(), which constructs a brand-new ProjectRestrictNode to&lt;br/&gt;
be the new root of the UnionNode tree. With my patch proposal, the PRN is&lt;br/&gt;
no longer built; the ResultSetNode tree is left with a UnionNode at the root.&lt;br/&gt;
From what I can tell, this works fine: the PRN is no longer needed once we are&lt;br/&gt;
sure to generate and re-order the ResultSet columns at &lt;b&gt;all&lt;/b&gt; nodes in the&lt;br/&gt;
ResultSetNode tree. The new rows can be inserted directly from the UnionNodes.&lt;/p&gt;

&lt;p&gt;I think this patch is correct, but it is possible that there is some other aspect to&lt;br/&gt;
having the PRN at the root of the tree which I haven&apos;t discovered yet, which will&lt;br/&gt;
cause a problem if we don&apos;t generate that PRN. If anybody knows what such a&lt;br/&gt;
problem might be, please let me know.&lt;/p&gt;
</comment>
                            <comment id="12454020" author="army" created="Tue, 28 Nov 2006 16:58:26 +0000"  >&lt;p&gt;&amp;gt; Attached is d1644_combined_v3.diff, a patch proposal which combines the two previous code change patches.&lt;/p&gt;

&lt;p&gt;I will try to review the latest patch sometime today...&lt;/p&gt;</comment>
                            <comment id="12454202" author="army" created="Wed, 29 Nov 2006 00:48:01 +0000"  >&lt;p&gt;Thank you for the updated patch, Bryan. I was able to apply it cleanly to trunk and I ran the lang/autoincrement.sql test without any problems.  Code comments look good and the changes agree with the explanation of the problem/solution that you provided for this issue.&lt;/p&gt;

&lt;p&gt;As for your question about the PRN over the UnioNode, I agree that the PRN seems unnecessary based on my understanding of the changes.  As you mentioned in a previous comment, prior to your changes the enhanceRCLForInsert() call was only made at the top of the tree.  In the case of a UnionNode the code did the &quot;enhancing&quot; by generating a PRN over the UnionNode, where the PRN itself had the &quot;enhanced&quot; result columns.  The rest of the tree was then left untouched.  But since, as you have said, your changes make it so that the entire tree beneath the UnionNode (including the UnionNode itself) is &quot;enhanced&quot;, the additional PRN is no longer required.&lt;/p&gt;

&lt;p&gt;So basically, I agree with your analysis and I think your solution looks good.  Assuming, of course, that derbyall ran cleanly? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I should say, though, that after re-reading the code comments for enhanceRCLForInsert() method several times, these lines still have me scratching my head:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Those RSNs whose generate() method does not handle projects will&lt;/li&gt;
	&lt;li&gt;insert a PRN, with a new RCL which matches the target RCL, above&lt;/li&gt;
	&lt;li&gt;the current RSN.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I see that you removed these lines in your patch so that the comment matches the current state of the code, which is good.  But I&apos;m having problems figuring out what the lines were saying to begin with.  In particular, what does it mean to say &quot;those RSNs whose generate() method does not handle projects&quot;?&lt;/p&gt;

&lt;p&gt;In any event, your changes make sense and the basic tests I&apos;ve run all pass, so I too tend to think the patch is correct.  Assuming derbyall runs cleanly, I vote +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12455514" author="yipng" created="Tue, 5 Dec 2006 05:24:04 +0000"  >&lt;p&gt;Per Bryan&apos;s request, I will be reviewing this patch also.  Hopefully I can give some feedback tomorrow.&lt;/p&gt;</comment>
                            <comment id="12455771" author="yipng" created="Tue, 5 Dec 2006 22:00:59 +0000"  >&lt;p&gt;I wasn&apos;t able to apply the latest patch, d1644_combined_v3.diff  cleanly.  It has a problem patching ResultColumnList.java, so I have to resolve this manually.  The patch fixes the stated problem of this jira and without it, it fails.  I have reviewed the code changes and they all look reasonable to me.  (Great comments and thanks for cleaning up the code to make it clearer for reviewers/contributers).  I also ran derbyall + junit suite and they all pass.  +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12455835" author="bryanpendleton" created="Wed, 6 Dec 2006 01:14:36 +0000"  >&lt;p&gt;Thank you very much Army and Yip for the reviews. I&apos;ll bring the patch up to date and look into &lt;br/&gt;
proceeding with some final testing and commit.&lt;/p&gt;</comment>
                            <comment id="12458648" author="bryanpendleton" created="Fri, 15 Dec 2006 01:03:30 +0000"  >&lt;p&gt;Committed d1644_combined_v3.diff to the trunk as revision 487414.&lt;/p&gt;

&lt;p&gt;I haven&apos;t marked this issue resolved yet because I suspect we may &lt;br/&gt;
want to investigate merging these changes back to the 10.2 branch. Yip,&lt;br/&gt;
what do you think? Should we merge these changes back to 10.2?&lt;/p&gt;</comment>
                            <comment id="12458840" author="bryanpendleton" created="Fri, 15 Dec 2006 16:44:14 +0000"  >&lt;p&gt;After thinking about it some more I decided to mark this issue as resolved,&lt;br/&gt;
since the change is in the trunk. If we later decide that we want to port this &lt;br/&gt;
change to one or more of the older branches, we can re-open the issue then.&lt;/p&gt;</comment>
                            <comment id="12458851" author="yipng" created="Fri, 15 Dec 2006 17:01:21 +0000"  >&lt;p&gt; &amp;lt;snip&amp;gt;&lt;/p&gt;

&lt;p&gt;Hi Bryan, I think if there is a need, we can always merge back the fix&lt;br/&gt;
to 10.2.  So let&apos;s mark this issue as resolved for now.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Yip Ng&lt;/p&gt;</comment>
                            <comment id="12458926" author="bryanpendleton" created="Fri, 15 Dec 2006 20:51:11 +0000"  >&lt;p&gt;Revision 487656 is a follow-on commit with a 1-line fix to a javadoc typo&lt;br/&gt;
parameter targetTD should have been targetTableDescriptor.&lt;/p&gt;</comment>
                            <comment id="12562051" author="dyret" created="Thu, 24 Jan 2008 13:10:05 +0000"  >&lt;p&gt;This issue is resolved and has not been updated in the last 12 months (since 24/Jan/07). &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12741924">DERBY-6740</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12440634">DERBY-4442</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12741924">DERBY-6740</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12438889">DERBY-4419</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12345313" name="RSNCommentFixup_v1.diff" size="1960" author="bryanpendleton" created="Sun, 19 Nov 2006 17:18:37 +0000"/>
                            <attachment id="12345320" name="RSN_EnhanceRCL_Simplify_v2.diff" size="6647" author="bryanpendleton" created="Mon, 20 Nov 2006 00:42:13 +0000"/>
                            <attachment id="12345574" name="d1644_combined_v3.diff" size="21055" author="bryanpendleton" created="Thu, 23 Nov 2006 20:21:30 +0000"/>
                            <attachment id="12345312" name="d1644_recursivelyCheck_v1.diff" size="13819" author="bryanpendleton" created="Sun, 19 Nov 2006 17:06:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 14 Nov 2006 05:48:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22618</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38293</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>