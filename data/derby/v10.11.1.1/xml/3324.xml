<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:12:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3324/DERBY-3324.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3324] JDBC statement cache implementation</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3324</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Implement a cache for storing JDBC prepared statement objects.&lt;br/&gt;
The cache will be responsible for holding free prepared statement objects that can be reused, and also to throw away objects if the cache grows too big.&lt;br/&gt;
All objects in the cache must belong to the same physical connection, but they can be reused across logical connections obtained from a single physical connection in a connection pool.&lt;/p&gt;

&lt;p&gt;This component is probably a candidate for code sharing between the client and the embedded driver. Sharing will not  be part of this issue.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12386514">DERBY-3324</key>
            <summary>JDBC statement cache implementation</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12385979">DERBY-3313</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Jan 2008 16:59:49 +0000</created>
                <updated>Thu, 21 Feb 2008 10:20:40 +0000</updated>
                            <resolved>Fri, 8 Feb 2008 10:56:12 +0000</resolved>
                                    <version>10.4.1.3</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12560440" author="kristwaa" created="Fri, 18 Jan 2008 15:44:43 +0000"  >&lt;p&gt;&apos;derby-3324-1a-jdbc_statementcache.diff&apos; is the first iteration of a JDBC statement cache implementation.&lt;/p&gt;

&lt;p&gt;I&apos;m a bit short on time right now, so there won&apos;t be too much comments... Please read the comments of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3313&quot; title=&quot;JDBC client driver statement cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3313&quot;&gt;&lt;del&gt;DERBY-3313&lt;/del&gt;&lt;/a&gt; for the overview. I have redone the statement key hierarchy, and I would especially appreciate some feedback on the hash code generation. JDBCStatementCache, StatementKey and StatementKeyFactory are the classes that are visible outside the package.&lt;/p&gt;

&lt;p&gt;I need to write a few more tests, but thought I&apos;d give people the chance to have a look at the code over the weekend &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
The patch will enable some tests, but none of the new code will be used by Derby yet.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12561270" author="kristwaa" created="Tue, 22 Jan 2008 09:16:10 +0000"  >&lt;p&gt;&apos;derby-3324-1b-jdbc_statementcache.diff&apos; replaces version 1a.&lt;br/&gt;
The following has been changed:&lt;br/&gt;
 1) Removed keys for statements specifying which auto-generated columns&lt;br/&gt;
    to get, as we currently don&apos;t support this in the client driver.&lt;br/&gt;
    Handling this area will need some effort (as part of another issue),&lt;br/&gt;
    as we do support the relevant prepareStatement methods if the array&lt;br/&gt;
    specifying the columns to get is null.&lt;/p&gt;

&lt;p&gt; 2) Added a new key for CallableStatement (CallKey).&lt;/p&gt;

&lt;p&gt; 3) Renamed factory methods from newInstance to newPrepared, and&lt;br/&gt;
    introduced newCallable.&lt;/p&gt;

&lt;p&gt; 4) Renamed method in cache from insertStatement to cacheStatement.&lt;/p&gt;

&lt;p&gt; 5) Various documentation fixes/changes.&lt;/p&gt;

&lt;p&gt; 6) Chose to throw assert error if closing a statement in the cache&lt;br/&gt;
    fails. For insane builds, the exception will be ignored.&lt;/p&gt;

&lt;p&gt;I forgot to handle CallableStatement explicitly. The way this is planned&lt;br/&gt;
now, is to use a separate key for CallableStatements and then cast the&lt;br/&gt;
PreparedStatement that comes out of the cache;&lt;br/&gt;
 CallableStatement cs = (CallableStatement)cache.getCached(CallKey)&lt;br/&gt;
I could add more machinery around this, for instance making sure objects&lt;br/&gt;
inserted with a CallKey is indeed a CallableStatement, but I&apos;m not sure&lt;br/&gt;
if it is required for code at this level (Derby internal). I do not want&lt;br/&gt;
to let the cache know too much about what is going on, as it&apos;s only there&lt;br/&gt;
to hold references for objects implementing the PreparedStatement&lt;br/&gt;
interface.&lt;/p&gt;


&lt;p&gt;I plan to commit in a few days, and I also expect there will be another&lt;br/&gt;
patch with some more tests and the required changes for writing the&lt;br/&gt;
tests.&lt;/p&gt;</comment>
                            <comment id="12561721" author="knutanders" created="Wed, 23 Jan 2008 15:52:31 +0000"  >&lt;p&gt;The code looks correct to me, and the unit tests seem to cover the code well. Some comments/suggestions follow below (mostly stylistic, feel free to ignore).&lt;/p&gt;

&lt;p&gt;If the cache always creates physical CallableStatement objects internally (except for prepared statements with auto-generated keys, which aren&apos;t supported by CallableStatement), and creates logical prepared/call wrappers around them, it doesn&apos;t need different keys for prepared and call statements, so the class hierarchy could be simplified (no need for CallKey). Just a thought...&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I see the value of such a complex class hierarchy for the statement keys. First there is a StatementKey interface which is essentially empty (only contains methods already in java.lang.Object). Then there&apos;s an AbstractStatementKey class which contains some basic information about the statement. And then finally three different sub-classes BasicKey (for prepared statements without generated keys), AutoGeneratedKeysKey (for prepared statements with generated keys) and CallKey (for callable statements), all of which only override equals() and hashCode() so that they consider the sub-type.&lt;/p&gt;

&lt;p&gt;I feel that the separation into different classes makes it harder to read the code. Also, it feels a bit arbitrary whether a property is represented in a field or as a sub-class. Wouldn&apos;t it be simpler just to add two fields to AbstractStatementKey&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;callable (which could also be skipped, see above)&lt;/li&gt;
	&lt;li&gt;autoGeneratedKeys&lt;br/&gt;
and merge the five classes/interfaces into a single class StatementKey?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other comments:&lt;/p&gt;

&lt;p&gt;BasicKey and AutoGeneratedKeysKey have identical hashCode() methods (31 * super.hashCode()). Although it&apos;s not a bug, it&apos;s probably better to use different numbers.&lt;/p&gt;

&lt;p&gt;AbstractStatementKey and subclasses:&lt;br/&gt;
+     * @throws IllegalArgumentException if &amp;lt;code&amp;gt;sql&amp;lt;/code&amp;gt; and/or&lt;br/&gt;
+     *      &amp;lt;code&amp;gt;schema&amp;lt;/code&amp;gt; is &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;&lt;br/&gt;
I think it is more common (at least in the standard Java API) to throw NullPointerException instead of IllegalArgumentException when an argument is (illegally) null.&lt;/p&gt;

&lt;p&gt;JDBCStatementCache.cacheStatement:&lt;br/&gt;
+     * @param ps prepared statment to cache&lt;br/&gt;
typo: statment -&amp;gt; statement&lt;/p&gt;</comment>
                            <comment id="12562014" author="kristwaa" created="Thu, 24 Jan 2008 11:18:49 +0000"  >&lt;p&gt;Good feedback Knut Anders &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regarding the PreparedStatement vs CallableStatement issue, I think I&apos;ll postpone it for now because I don&apos;t have much feeling for it. &lt;br/&gt;
Are there only advantages, or are there drawbacks as well?&lt;/p&gt;

&lt;p&gt;I do feel that some flexibility is lost with your suggested approach for the keys, but I will follow your advice because;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;affected classes are all internal and very contained, so it can be heavily changed later without problems&lt;/li&gt;
	&lt;li&gt;the extension room is rather small (the prepareStatement methods with int[] and String[]).&lt;/li&gt;
	&lt;li&gt;code readability does matter&lt;/li&gt;
	&lt;li&gt;the KISS principle should be followed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&apos;t agree with the NPE vs IAE comment in this case, because I feel IAE convey a little more information. However, there seems to be different opinions about this. Some food for thought:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;IllegalArgumentException (JavaDoc): &quot;Thrown to indicate that a method has been passed an illegal or inappropriate argument.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NullPointerException (JavaDoc): &quot;Thrown when an application attempts to use null in a case where an object is required. These include:&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Calling the instance method of a null object.&lt;/li&gt;
	&lt;li&gt;Accessing or modifying the field of a null object.&lt;/li&gt;
	&lt;li&gt;Taking the length of null as if it were an array.&lt;/li&gt;
	&lt;li&gt;Accessing or modifying the slots of null as if it were an array.&lt;/li&gt;
	&lt;li&gt;Throwing null as if it were a Throwable value.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Applications should throw instances of this class to indicate other illegal uses of the null object.&quot;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;http://lists.ibiblio.org/pipermail/dev-dpml/2005q1/000658.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://lists.ibiblio.org/pipermail/dev-dpml/2005q1/000658.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seems both can be used, and that there are alternative solutions. Is this something we should discuss in the community to achieve consistency, or is it just a less important matter of taste and style?&lt;/p&gt;

&lt;p&gt;I will post a new patch when I have incorporated the changes.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="12562523" author="kristwaa" created="Fri, 25 Jan 2008 14:40:32 +0000"  >&lt;p&gt;&apos;derby-3324-1c-jdbc_statementcache.diff&apos; replaces revision 1b and contains the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Merged all key classes/interfaces into one class.&lt;br/&gt;
   This looks a lot simpler! Thanks for the suggestion Knut Anders.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added some SanityManager.DEBUG blocks with asserts in JDBCStatementCache.&lt;br/&gt;
   If nulls are received, it indicates a programming error, but Derby should/will not fail. &lt;br/&gt;
   In an insane build, the worst effect will be a NPE somewhere else or that a statement&lt;br/&gt;
   that could have been cached will be thrown away and prepared again the next time.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added a test case.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Minor tweaks to the documentation.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m still using an IAE, and the message is not localized. However, getting a null for the&lt;br/&gt;
compilation schema or the SQL query string suggests a programming error and should&lt;br/&gt;
be caught before a release is produced, or handled before it gets this far in the code.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12563141" author="knutanders" created="Mon, 28 Jan 2008 13:30:07 +0000"  >&lt;p&gt;Thanks for the new patch, Kristian. It looks good to me.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;m still using an IAE, and the message is not localized. However, getting a null for the&lt;br/&gt;
&amp;gt; compilation schema or the SQL query string suggests a programming error and should&lt;br/&gt;
&amp;gt; be caught before a release is produced, or handled before it gets this far in the code.&lt;/p&gt;

&lt;p&gt;Perhaps an assert would do? Then localization wouldn&apos;t be an issue. And we would still see the resulting NPEs in insane mode, so no internal error would go unnoticed because of the change. You wouldn&apos;t be able to keep the negative unit tests that behave identically in sane/insane builds, though.&lt;/p&gt;

&lt;p&gt;Tiny nit:&lt;/p&gt;

&lt;p&gt;+    public boolean equals(Object obj) {&lt;br/&gt;
+        if (obj == null || !(obj instanceof StatementKey)) &lt;/p&gt;
{
+            return false;
+        }

&lt;p&gt;(obj instanceof StatementKey) implies (obj != null), so the null check is redundant.&lt;/p&gt;</comment>
                            <comment id="12563433" author="kristwaa" created="Tue, 29 Jan 2008 09:24:04 +0000"  >&lt;p&gt;&apos;derby-3324-1d-jdbc_statementcache.diff&apos; deprecates version 1c and contains only two changes. I removed the redundant null check Knut Anders commented on and fixed some bad formatting in the string created by StatementKey.toString.&lt;/p&gt;</comment>
                            <comment id="12563544" author="kristwaa" created="Tue, 29 Jan 2008 15:03:45 +0000"  >&lt;p&gt;Yet another version of the patch...&lt;br/&gt;
&apos;derby-3324-1e-jdbc_statementcache.diff&apos; does not enable the tests, because the classes being tested are not pulled into the jar files. The reason for this is that they are not used by any other classes yet.&lt;br/&gt;
Instead of doing something explicit to include the files, I will wait until they are being used.&lt;br/&gt;
Note that the tests themselves are still in the patch.&lt;/p&gt;</comment>
                            <comment id="12563547" author="kristwaa" created="Tue, 29 Jan 2008 15:14:53 +0000"  >&lt;p&gt;Committed &apos;derby-3324-1e-jdbc_statementcache.diff&apos; to trunk with revision 616373.&lt;br/&gt;
I&apos;m marking the issue fixed, but I will not close it before the tests have been enabled.&lt;br/&gt;
The issue might also be reopened if changes have to be made later in the development process of the JDBC statement cache feature.&lt;/p&gt;</comment>
                            <comment id="12563601" author="djd" created="Tue, 29 Jan 2008 18:21:15 +0000"  >&lt;p&gt;The order of the arguments of holdability, result set type &amp;amp; concurrency in the statement key objects are inconsistent.&lt;/p&gt;

&lt;p&gt;E.g. StatementKeyFactory.newPrepared has:&lt;br/&gt;
   int holdability, int rst, int rsc&lt;/p&gt;

&lt;p&gt;but it calls new StatementKey() with the order of:&lt;/p&gt;

&lt;p&gt;   rst, rsc, holdability&lt;/p&gt;


&lt;p&gt;and I think will be called from Connection.prepareStatement which has the order of:&lt;/p&gt;

&lt;p&gt; int resultSetType, int resultSetConcurrency, int resultSetHoldability&lt;/p&gt;


&lt;p&gt;Since these are all int values the compiler will not help in ensuring that the arguments are passed correctly. I think this switching of arguments serves no purpose and has a high probability of generating bugs. Can the ordering be made consistent?&lt;/p&gt;</comment>
                            <comment id="12563684" author="kristwaa" created="Tue, 29 Jan 2008 21:38:25 +0000"  >&lt;p&gt;Yes it can.&lt;br/&gt;
I think I put holdability first because some methods only specify the holdability, and I chose to keep the factory methods consistent. This was maybe not such a good idea.&lt;/p&gt;

&lt;p&gt;Another thing one could do (additionally), is to add asserts to enforce valid values for the various properties. This would only affect sane builds though. Is it worth adding, or too much checking?&lt;/p&gt;

&lt;p&gt;I&apos;ll make a patch tomorrow.&lt;/p&gt;</comment>
                            <comment id="12564364" author="kristwaa" created="Thu, 31 Jan 2008 10:56:01 +0000"  >&lt;p&gt;&apos;derby-3324-2a_argument_reordering.diff&apos; reorders the arguments of two methods in StatementKeyFactory, as per Dan&apos;s comment above. It also updates StatementKeyFactoryTest accordingly.&lt;br/&gt;
There are no existing code using these methods yet.&lt;/p&gt;

&lt;p&gt;I consider this a simple and good change, and will commit it without further delay.&lt;/p&gt;</comment>
                            <comment id="12564365" author="kristwaa" created="Thu, 31 Jan 2008 10:57:15 +0000"  >&lt;p&gt;Reopening to fix some minor problems identified after the issue was resolved.&lt;/p&gt;</comment>
                            <comment id="12564366" author="kristwaa" created="Thu, 31 Jan 2008 11:00:04 +0000"  >&lt;p&gt;Committed &apos;derby-3324-2a_argument_reordering.diff&apos; to trunk with revision 617099.&lt;/p&gt;</comment>
                            <comment id="12564371" author="kristwaa" created="Thu, 31 Jan 2008 12:04:51 +0000"  >&lt;p&gt;I forgot to reorder the arguments in one of the methods. &apos;derby-3324-3a_argument_reordering_additional.diff&apos; fixes this.&lt;br/&gt;
Committed to trunk with revision 617110.&lt;/p&gt;</comment>
                            <comment id="12564374" author="kristwaa" created="Thu, 31 Jan 2008 12:09:22 +0000"  >&lt;p&gt;&apos;derby-3324-4a-statementkey_asserts.diff&apos; adds asserts (SanityManager) for the various arguments in the StatementKey constructor.&lt;br/&gt;
I&apos;d like to get some feedback on whether the checking is appropriate, or if the patch should be discarded.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12565731" author="knutanders" created="Tue, 5 Feb 2008 12:45:29 +0000"  >&lt;p&gt;The asserts look fine to me, and they reduce the risk of mixing up the arguments. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12566502" author="kristwaa" created="Thu, 7 Feb 2008 08:49:22 +0000"  >&lt;p&gt;Thanks for having a look at the patch Knut Anders.&lt;/p&gt;

&lt;p&gt;I committed &apos;derby-3324-4a-statementkey_asserts.diff&apos; to trunk with revision 619306.&lt;br/&gt;
This should conclude my work on this issue.&lt;/p&gt;</comment>
                            <comment id="12566985" author="kristwaa" created="Fri, 8 Feb 2008 10:56:12 +0000"  >&lt;p&gt;Closing this issue.&lt;br/&gt;
If something has to be fixed, it will be dealt with in a separate Jira issue (linked to this one).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12389116">DERBY-3438</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12386516">DERBY-3326</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12386520">DERBY-3328</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12373531" name="derby-3324-1a-jdbc_statementcache.diff" size="42602" author="kristwaa" created="Fri, 18 Jan 2008 15:44:43 +0000"/>
                            <attachment id="12373532" name="derby-3324-1a-jdbc_statementcache.stat" size="928" author="kristwaa" created="Fri, 18 Jan 2008 15:44:43 +0000"/>
                            <attachment id="12373731" name="derby-3324-1b-jdbc_statementcache.diff" size="40872" author="kristwaa" created="Tue, 22 Jan 2008 09:16:10 +0000"/>
                            <attachment id="12373732" name="derby-3324-1b-jdbc_statementcache.stat" size="843" author="kristwaa" created="Tue, 22 Jan 2008 09:16:10 +0000"/>
                            <attachment id="12374042" name="derby-3324-1c-jdbc_statementcache.diff" size="33448" author="kristwaa" created="Fri, 25 Jan 2008 14:40:32 +0000"/>
                            <attachment id="12374043" name="derby-3324-1c-jdbc_statementcache.stat" size="540" author="kristwaa" created="Fri, 25 Jan 2008 14:40:32 +0000"/>
                            <attachment id="12374240" name="derby-3324-1d-jdbc_statementcache.diff" size="33437" author="kristwaa" created="Tue, 29 Jan 2008 09:24:04 +0000"/>
                            <attachment id="12374264" name="derby-3324-1e-jdbc_statementcache.diff" size="32797" author="kristwaa" created="Tue, 29 Jan 2008 15:03:45 +0000"/>
                            <attachment id="12374453" name="derby-3324-2a_argument_reordering.diff" size="2928" author="kristwaa" created="Thu, 31 Jan 2008 10:56:01 +0000"/>
                            <attachment id="12374456" name="derby-3324-3a_argument_reordering_additional.diff" size="747" author="kristwaa" created="Thu, 31 Jan 2008 12:04:50 +0000"/>
                            <attachment id="12374458" name="derby-3324-4a-statementkey_asserts.diff" size="2001" author="kristwaa" created="Thu, 31 Jan 2008 12:09:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Jan 2008 15:52:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30806</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0zc7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39543</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>