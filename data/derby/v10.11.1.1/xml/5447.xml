<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:12:01 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5447/DERBY-5447.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5447] Deadlock in AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete (BasePage.releaseExclusive and Observable.deleteObserver (BaseContainerHandle))</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5447</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Java deadlock involving BasePage.releaseExclusive and Observable.deleteObserver, the observable being a BaseContainerHandle instance, seen when running  AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete.&lt;br/&gt;
The activities involved are a scan of a conglomerate and the index statistics daemon being stopped as part of the database shutdown.&lt;/p&gt;

&lt;p&gt;Here are the relevant parts of the stack trace:&lt;br/&gt;
&quot;index-stat-thread&quot; daemon prio=10 tid=0x00007f4e34244000 nid=0x380b waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x00007f4e30aef000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: BLOCKED (on object monitor)&lt;br/&gt;
        at java.util.Observable.deleteObserver(Observable.java:95)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00000000f51132d0&amp;gt; (a org.apache.derby.impl.store.raw.data.BaseContainerHandle)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive(BasePage.java:1819)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000f6d5a280&amp;gt; (a org.apache.derby.impl.store.raw.data.StoredPage)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:531)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1371)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.ControlRow.release(ControlRow.java:926)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.savePositionAndReleasePage(BTreeScan.java:2146)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:442)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1681)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.fetchRows(IndexStatisticsDaemonImpl.java:1221)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(IndexStatisticsDaemonImpl.java:463)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(IndexStatisticsDaemonImpl.java:323)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(IndexStatisticsDaemonImpl.java:794)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(IndexStatisticsDaemonImpl.java:710)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:679)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&quot;main&quot;:&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.isLatched(BasePage.java:1383)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00000000f6d5a280&amp;gt; (a org.apache.derby.impl.store.raw.data.StoredPage)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.update(BasePage.java:1621)&lt;br/&gt;
        at java.util.Observable.notifyObservers(Observable.java:159)&lt;br/&gt;
        at java.util.Observable.notifyObservers(Observable.java:115)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.informObservers(BaseContainerHandle.java:1008)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.close(BaseContainerHandle.java:414)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000f51132d0&amp;gt; (a org.apache.derby.impl.store.raw.data.BaseContainerHandle)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.OpenBTree.close(OpenBTree.java:490)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.closeForEndTransaction(BTreeScan.java:2021)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IForwardScan.closeForEndTransaction(B2IForwardScan.java:107)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransaction.closeControllers(RAMTransaction.java:245)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(RAMTransactionContext.java:97)&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.stop(IndexStatisticsDaemonImpl.java:919)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000f4a5a070&amp;gt; (a java.util.ArrayList)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.disableIndexStatsRefresher(DataDictionaryImpl.java:13891)&lt;br/&gt;
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextImpl.java:69)&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:437)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:633)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248)&lt;br/&gt;
        at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:480)&lt;br/&gt;
        at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:424)&lt;br/&gt;
        at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:266)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete(AutomaticIndexStatisticsTest.java:187)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have access to a machine on which this can be reproduced pretty simple. It&apos;s an Intel(R) Core(TM)2 Duo CPU E8500 @ 3.16GHz running Fedora 15.&lt;br/&gt;
Java is:&lt;br/&gt;
OpenJDK Runtime Environment (IcedTea6 1.10.2) (fedora-58.1.10.2.fc15-x86_64)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode)&lt;/p&gt;

&lt;p&gt;In a way this bug is critical, since it causes two threads to hang forever. However, for it to happen the database must be shut down while the index statistics daemon is doing work and the timing must be right. There may be other ways to trigger the bug where Observable.update and BasePage.releaseExclusive are involved.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12526018">DERBY-5447</key>
            <summary>Deadlock in AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete (BasePage.releaseExclusive and Observable.deleteObserver (BaseContainerHandle))</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 6 Oct 2011 10:44:58 +0100</created>
                <updated>Mon, 13 Feb 2012 07:42:52 +0000</updated>
                            <resolved>Mon, 10 Oct 2011 08:54:41 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13121867" author="kristwaa" created="Thu, 6 Oct 2011 12:54:08 +0100"  >&lt;p&gt;The stack for the problem with an insane build:&lt;br/&gt;
&quot;index-stat-thread&quot;:&lt;br/&gt;
	at java.util.Observable.deleteObserver(Observable.java:95)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00000000e83304a8&amp;gt; (a org.apache.derby.impl.store.raw.data.BaseContainerHandle)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive(BasePage.java:1819)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000e8c9f980&amp;gt; (a org.apache.derby.impl.store.raw.data.StoredPage)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:531)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1371)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.ControlRow.release(ControlRow.java:926)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(BTreeScan.java:505)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:464)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1681)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.fetchRows(IndexStatisticsDaemonImpl.java:1221)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(IndexStatisticsDaemonImpl.java:463)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(IndexStatisticsDaemonImpl.java:323)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(IndexStatisticsDaemonImpl.java:794)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(IndexStatisticsDaemonImpl.java:710)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:679)&lt;br/&gt;
&quot;main&quot;:&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive(BasePage.java:1814)&lt;/li&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x00000000e8c9f980&amp;gt; (a org.apache.derby.impl.store.raw.data.StoredPage)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:531)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.update(BasePage.java:1625)&lt;br/&gt;
	at java.util.Observable.notifyObservers(Observable.java:159)&lt;br/&gt;
	at java.util.Observable.notifyObservers(Observable.java:115)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.informObservers(BaseContainerHandle.java:1008)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.close(BaseContainerHandle.java:414)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000e83304a8&amp;gt; (a org.apache.derby.impl.store.raw.data.BaseContainerHandle)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.OpenBTree.close(OpenBTree.java:490)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.closeForEndTransaction(BTreeScan.java:2021)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2IForwardScan.closeForEndTransaction(B2IForwardScan.java:107)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.closeControllers(RAMTransaction.java:245)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(RAMTransactionContext.java:97)&lt;br/&gt;
	at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343)&lt;br/&gt;
	at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.stop(IndexStatisticsDaemonImpl.java:919)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00000000e78b35b0&amp;gt; (a java.util.ArrayList)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.disableIndexStatsRefresher(DataDictionaryImpl.java:13891)&lt;br/&gt;
	at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(DatabaseContextImpl.java:69)&lt;br/&gt;
	at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:343)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:437)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:633)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:480)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:424)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(JDBCDataSource.java:266)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.AutomaticIndexStatisticsTest.testShutdownWhileScanningThenDelete(AutomaticIndexStatisticsTest.java:187)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13123512" author="kristwaa" created="Sat, 8 Oct 2011 16:03:52 +0100"  >&lt;p&gt;Attaching patches 1a and 2a, both independently fixing the bug.&lt;br/&gt;
Patch 1a makes changes in a core method in BasePage, it introduces a &quot;custom&quot; lock pattern, and it cannot guarantee that the monitor obtained last isn&apos;t already obtained elsewhere outside of this method (which would nullify the fix).&lt;/p&gt;

&lt;p&gt;Patch 2a makes changes to IndexStatisticsDaemonImpl.stop. It addresses this particular instance of the bug, but not the root cause, by making sure the worker thread has been shut down before starting the context cleanup operation.&lt;/p&gt;

&lt;p&gt;Since no other instances of the bug has been reported so far, I plan to commit patch 2a. It is simpler, and has far less risk associated with it. I further hope to get it into the upcoming 10.8.2. release.&lt;/p&gt;

&lt;p&gt;I will commit 2a as soon as the last regression run has completed. On Monday I hope to backport the fix to the 10.8 branch.&lt;/p&gt;

&lt;p&gt;I&apos;m also rerunning the AutomaticIndexStatisticsTest due to a change in the patch. The previous patch ran the test more than 2200 times without hitting the deadlock. Without the fix, the deadlock is usually occurring in less than 50 iterations of the test (on a specific machine).&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13123602" author="dagw" created="Sun, 9 Oct 2011 04:03:26 +0100"  >&lt;p&gt;Waiting with the context manager cleanup till the daemon thread is done (if any), seems a safe approach to me. +1&lt;/p&gt;

&lt;p&gt;I am not quite sure I understand you concern about patch 1a: if 2a doesn&apos;t fix the root cause, does the root cause deserve a new JIRA (as I understand it you are not sure if we have/do not have similar locking patterns elsewhere..)&lt;/p&gt;</comment>
                            <comment id="13123930" author="kristwaa" created="Mon, 10 Oct 2011 08:25:17 +0100"  >&lt;p&gt;Committed patch 2a to trunk with revision 1180790. Doing a final run on 10.8 before backporting.&lt;br/&gt;
Patch 2a ran AutomaticIndexStatisticsTest nearly 1700 times without errors.&lt;/p&gt;

&lt;p&gt;Dag, thanks for looking at the patch.&lt;br/&gt;
My concern with patch 1a is that it places a burden on the caller of releaseExclusive: the caller must ensure that the monitor on &apos;this&apos; isn&apos;t already acquired. This can easily be broken, for instance by making BasePage.unlatch synchronized, or adding a new synchronized method calling releaseExclusive. This may have already been broken, as it&apos;s hard to verify. Since BasePage is a very mature piece of code, this would probably not be a problem in practice. On the other hand, I&apos;m sure there are better ways to address the root cause. &lt;/p&gt;

&lt;p&gt;Now that this issue is fixed, I don&apos;t know how to provoke the problem. I think it must involve two threads using the Observable API, and an Observer.update-method that acquires the monitor of both the object being observed and the observer and calls back into the object being observed (i.e. typically removeObserver). If my IDE isn&apos;t fooling me, there are five other update-methods. A quick check didn&apos;t reveal the synchronization issue in those five implementations.&lt;/p&gt;</comment>
                            <comment id="13123939" author="kristwaa" created="Mon, 10 Oct 2011 08:54:41 +0100"  >&lt;p&gt;Backported to 10.8 with revision 1180811.&lt;/p&gt;</comment>
                            <comment id="13141061" author="kristwaa" created="Tue, 1 Nov 2011 10:10:48 +0000"  >&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12522236">DERBY-5405</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12514127">DERBY-5336</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12498315" name="derby-5447-1a-obtain_monitors_in_order.diff" size="1852" author="kristwaa" created="Sat, 8 Oct 2011 16:03:52 +0100"/>
                            <attachment id="12498316" name="derby-5447-2a-change_istat_shutdown.diff" size="2171" author="kristwaa" created="Sat, 8 Oct 2011 16:03:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 9 Oct 2011 03:03:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>49573</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0e53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36109</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>