<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:54:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1748/DERBY-1748.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1748] Global case insensitive setting</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1748</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;By default MySQL is case insensitive in its string comparisons, as you can see from the MySQL docs shown below. Similar functionality is available in Sybase iAnywhere and in SQLServer. I&apos;d like the same to be true for Derby.&lt;/p&gt;

&lt;p&gt;What, I wonder, are chances of that?&lt;/p&gt;

&lt;p&gt;I am aware that functions could be used to force comparisons in upper case but that subverts the indexes and makes searches unacceptably long.&lt;/p&gt;

&lt;p&gt;If you were to ask people you might find that this is a feature whose abscence is causing many to look elsewhere.&lt;/p&gt;

&lt;p&gt;thanks for all the great work,&lt;/p&gt;

&lt;p&gt;Terry&lt;/p&gt;

&lt;p&gt;The MySQL Docs say:&lt;/p&gt;

&lt;p&gt;-------- start quote&lt;/p&gt;

&lt;p&gt; By default, MySQL searches are not case sensitive (although there are some character sets that are never case insensitive, such as czech). This means that if you search with col_name LIKE &apos;a%&apos;, you get all column values that start with A or a. If you want to make this search case sensitive, make sure that one of the operands has a case sensitive or binary collation. For example, if you are comparing a column and a string that both have the latin1 character set, you can use the COLLATE operator to cause either operand to have the latin1_general_cs or latin1_bin collation. For example:&lt;/p&gt;

&lt;p&gt;col_name COLLATE latin1_general_cs LIKE &apos;a%&apos;&lt;br/&gt;
col_name LIKE &apos;a%&apos; COLLATE latin1_general_cs&lt;br/&gt;
col_name COLLATE latin1_bin LIKE &apos;a%&apos;&lt;br/&gt;
col_name LIKE &apos;a%&apos; COLLATE latin1_bin&lt;/p&gt;

&lt;p&gt;If you want a column always to be treated in case-sensitive fashion, declare it with a case sensitive or binary collation. See Section 13.1.5, &quot;CREATE TABLE Syntax&quot;. &lt;/p&gt;

&lt;p&gt;    By default, the search is performed in case-insensitive fashion. In MySQL 4.1 and up, you can make a full-text search by using a binary collation for the indexed columns. For example, a column that has a character set of latin1 can be assigned a collation of latin1_bin to make it case sensitive for full-text searches.&lt;/p&gt;

&lt;p&gt;--------------- end quote&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12348433">DERBY-1748</key>
            <summary>Global case insensitive setting</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gugrim">Gunnar Grim</assignee>
                                    <reporter username="tkilshaw">Terry</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Aug 2006 23:22:45 +0100</created>
                <updated>Thu, 2 May 2013 03:29:29 +0100</updated>
                            <resolved>Fri, 9 Apr 2010 17:41:09 +0100</resolved>
                                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>9</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12539654" author="djd" created="Fri, 2 Nov 2007 18:05:23 +0000"  >&lt;p&gt;One potentially easy way to provide this functionality would be to expand the values supported by the collation JDBC attribute.&lt;/p&gt;

&lt;p&gt;Today it supports UCS_BASIC (fixed collation based upon Unicode codepoint) or TERRITORY_BASED (collation using the locale (territory) of the database and collation provided by a RuleBasedCollator object obtained using the locale. The collation is set &amp;amp; fixed at create database time.&lt;/p&gt;

&lt;p&gt;The TERRITORY_BASED could be expanded to allow setting the strength of the RuleBasedCollator being used, e.g.&lt;/p&gt;

&lt;p&gt;TERRITORY_BASED - default strength&lt;/p&gt;

&lt;p&gt;TERRITORY_BASED:PRIMARY - strength set using collator.setStrength(Collator.PRIMARY)&lt;br/&gt;
TERRITORY_BASED:SECONDARY - strength set using collator.setStrength(Collator.SECONDARY)&lt;br/&gt;
TERRITORY_BASED:TERTIARY  - strength set using collator.setStrength(Collator.TERTIARY )&lt;br/&gt;
TERRITORY_BASED:IDENTICAL  - strength set using collator.setStrength(Collator.IDENTICAL)&lt;/p&gt;

&lt;p&gt;This allows some user control of the collation and for some (most) languages will provide case-insensitive searches.&lt;/p&gt;

&lt;p&gt;E.g. according to the javadoc for java.text.Collator with a locale of en_US then TERRITORY_BASED:PRIMARY will give case insensitive searches.&lt;/p&gt;

&lt;p&gt;Apart from testing I think this would be around 20-30 lines of code:&lt;br/&gt;
  a) code to parse the new collation attribute values&lt;br/&gt;
  b) new constants for collation with strength (four new constants)&lt;br/&gt;
  c) code to set the strength based upon those constants.&lt;/p&gt;</comment>
                            <comment id="12582103" author="dataflair" created="Wed, 26 Mar 2008 02:11:51 +0000"  >&lt;p&gt;There are very few practical database applications where users want case sensitive searching.&lt;br/&gt;
Most database systems actually make case insensitive system the default, and we haven&apos;t come across any other DBMS that doesn&apos;t cater for it  in a system level or database level setting (i.e. without having to apply case conversion functions).&lt;/p&gt;

&lt;p&gt;We believe the case sensitive searching issue to be a serious impediment to the take-up of Derby, and one that should be addressed as soon as possible.&lt;/p&gt;

&lt;p&gt;Daniel Debrunners suggested solution of extending collation to provide case-insensitive searching at database level gets our vote as the most practical way of fixing the problem.&lt;/p&gt;</comment>
                            <comment id="12602912" author="geoff_hendrey" created="Fri, 6 Jun 2008 05:37:33 +0100"  >&lt;p&gt;I&apos;d also agree that case-insensitivity is an absolute must, as least for LIKE comparisons. I&apos;d be very eager to know the plans to get this implemented.&lt;/p&gt;</comment>
                            <comment id="12606166" author="geoff_hendrey" created="Thu, 19 Jun 2008 02:02:17 +0100"  >&lt;p&gt;It was mentioned on the derby-user mail list that &quot;auto generated columns&quot; might be a way to deal with case-insensitive searching. It would be good to bring that discussion onto this JIRA issue, so that it may be considered in the context of other proposed solutions. &lt;/p&gt;

&lt;p&gt;I re-emphasize that the ability to do case-insensitive LIKE comparisons is absolutely critical. Think about virtually any application, such as a blog application. It&apos;s expected that one does not have to enter somebody&apos;s username or blog posting with exact-matching case in order to retrieve it. I have tries solutions such as using UPPER in the query. These work only for trivially small tables. When the number of rows grows, I saw query times taking many seconds (15 seconds! --it was a while back, but that is my recollection), when I used UPPER to perform comparisons against a regular index of a string column.&lt;/p&gt;

&lt;p&gt;Perhaps there is a hybrid solution, that uses, for example,  UPPER, in conjunction with an index. What if we could force an index to store an uppercase version of the column? Then as long as we used UPPER in our query, the search would be perfectly efficient, against the uppercase index. Or more generally, what if could intercept any column value, before placing it into the index, or updating the index, and apply a scalar (non-aggregate) built-in function to the column value?&lt;/p&gt;

&lt;p&gt;This is the existing syntax for creating an index:&lt;/p&gt;

&lt;p&gt;CREATE &lt;span class=&quot;error&quot;&gt;&amp;#91;UNIQUE&amp;#93;&lt;/span&gt; INDEX index-Name&lt;br/&gt;
ON table-Name ( Simple-column-Name [ ASC | DESC ]&lt;br/&gt;
    [ , Simple-column-Name [ ASC | DESC ]] * )&lt;/p&gt;

&lt;p&gt;Here is a proposed modification, backwards compatible, to allow scalar (non-aggregate) functions to be applied to columns in the index:&lt;/p&gt;

&lt;p&gt;///--begin BNF-like syntax --///&lt;/p&gt;

&lt;p&gt;CREATE &lt;span class=&quot;error&quot;&gt;&amp;#91;UNIQUE&amp;#93;&lt;/span&gt; INDEX index-Name ON table-Name ( Intercepted-column &lt;span class=&quot;error&quot;&gt;&amp;#91;,Intercepted-column&amp;#93;&lt;/span&gt;* )&lt;/p&gt;

&lt;p&gt;Intercepted-column:&lt;/p&gt;

&lt;p&gt;((Built-in-function &apos;(&apos; Simple-column-Name &apos;)&apos; |Simple-column-Name) &lt;span class=&quot;error&quot;&gt;&amp;#91;ASC|DESC&amp;#93;&lt;/span&gt;) [ , (Built-in-function &apos;(&apos; Simple-column-Name &apos;)&apos; |Simple-column-Name) [ ASC | DESC ]] *&lt;/p&gt;

&lt;p&gt;///---end BNF-like syntax --///&lt;/p&gt;


&lt;p&gt;This allows us to do things like&lt;/p&gt;

&lt;p&gt;&quot;CREATE INDEX NAME_UPPERCASE ON MYTABLE(UPPER(NAME) ASC)&quot;&lt;/p&gt;

&lt;p&gt;or &quot;CREATE INDEX SPEED ON MYTABLE(ABS(VELOCITY))&quot;&lt;/p&gt;

&lt;p&gt;basically we can apply scalar functions to the columns before they are indexed, and when the index is updated.&lt;/p&gt;


</comment>
                            <comment id="12607241" author="rhillegas" created="Mon, 23 Jun 2008 15:14:04 +0100"  >&lt;p&gt;Hi Geoff,&lt;/p&gt;

&lt;p&gt;Thanks for continuing to look at this issue. You are, of course, right that generated columns only help you if you put an index on the generated column. Your current proposal looks to me like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-455&quot; title=&quot;Add support for creating index on expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-455&quot;&gt;DERBY-455&lt;/a&gt; (expression indexes). I am linking all of these issues together to help focus the discussion: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-455&quot; title=&quot;Add support for creating index on expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-455&quot;&gt;DERBY-455&lt;/a&gt; (expression indexes), &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt; (generated columns), &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748&quot; title=&quot;Global case insensitive setting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1748&quot;&gt;&lt;del&gt;DERBY-1748&lt;/del&gt;&lt;/a&gt; (case-insensitive search).&lt;/p&gt;

&lt;p&gt;I agree that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-455&quot; title=&quot;Add support for creating index on expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-455&quot;&gt;DERBY-455&lt;/a&gt; is an elegant, powerful feature. However, I think that it involves almost all of the work needed for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt;. In addition, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-455&quot; title=&quot;Add support for creating index on expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-455&quot;&gt;DERBY-455&lt;/a&gt; requires that we teach the optimizer how to recognize query fragments which can be matched to these new indexes. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt; used to have a serious defect, which was that you couldn&apos;t drop these generated columns if you made a mistake--but that objection went away with release 10.3.&lt;/p&gt;

&lt;p&gt;So right now, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt; looks to me like the cheapest way to get case-insensitive searching--provided that the user indexes the generated column.&lt;/p&gt;</comment>
                            <comment id="12607439" author="geoff_hendrey" created="Tue, 24 Jun 2008 02:42:06 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;Sorry I did not review 455, because it appears my proposal is identical to 455. Issue 455 correctly notes that the function being indexed must be even more constrained than scalar; it must be deterministic. I had only considered the fact that it must be scalar (cannot be an aggregate).&lt;/p&gt;

&lt;p&gt;I would be fine with the proposal for generated columns, 481, assuming my read of its description is correct. That is:&lt;br/&gt;
1) updates and inserts propagate seamlessly to the generated columns&lt;br/&gt;
2) dropping the &quot;owner&quot; column can seamlessly cascade to dropping the generated column&lt;br/&gt;
3) any indexes created on the generated column seamlessly disappear when the generated column is dropped&lt;/p&gt;

&lt;p&gt;Is my understanding correct?&lt;/p&gt;</comment>
                            <comment id="12607604" author="rhillegas" created="Tue, 24 Jun 2008 14:03:49 +0100"  >&lt;p&gt;Hi Geoff,&lt;/p&gt;

&lt;p&gt;For the gory details, you may want to read the functional spec attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt;. Here are some responses to your questions:&lt;/p&gt;

&lt;p&gt;&amp;gt;1) updates and inserts propagate seamlessly to the generated columns&lt;/p&gt;

&lt;p&gt;Yes. Derby will recalculate the values of generated columns if you change (insert/update) the values of columns referenced by the generation clause.&lt;/p&gt;

&lt;p&gt;&amp;gt;2) dropping the &quot;owner&quot; column can seamlessly cascade to dropping the generated column&lt;/p&gt;

&lt;p&gt;The default behavior of DROP COLUMN will continue to be CASCADE, which will produce the results you want. This detail is tucked away in the functional spec in the &quot;Behavior&quot; section.&lt;/p&gt;

&lt;p&gt;&amp;gt;3) any indexes created on the generated column seamlessly disappear when the generated column is dropped &lt;/p&gt;

&lt;p&gt;Yes, this is how it will work.&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12613995" author="tomf666" created="Wed, 16 Jul 2008 16:45:51 +0100"  >&lt;p&gt;I&apos;m porting a fairly large application to use Derby in embedded mode.&lt;br/&gt;
But lacking  case-insensitive searches is a showstopper.&lt;/p&gt;

&lt;p&gt;Right now I will have to defect to MySQL or perhaps to H2 (although I&apos;m not sure how mature the product is) - but I really would prefer to use Derby.&lt;/p&gt;

&lt;p&gt;Kind regards,&lt;br/&gt;
Tom&lt;/p&gt;</comment>
                            <comment id="12650911" author="petesaat" created="Wed, 26 Nov 2008 09:56:44 +0000"  >&lt;p&gt;Having no way to do a case-insensitive search on a table is a blocking issue for us.&lt;br/&gt;
With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-481&quot; title=&quot;implement SQL generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-481&quot;&gt;&lt;del&gt;DERBY-481&lt;/del&gt;&lt;/a&gt;there may be a quick solution. But I&apos;m wondering, if a table contains 20+ columns that can be used in a search,&lt;br/&gt;
whether copying these columns doesn&apos;t affect performance and bloat the database.&lt;/p&gt;

&lt;p&gt;Anyway any kind of solution (not involving manually added triggers) anytime soon would be great...&lt;/p&gt;

&lt;p&gt;Best regards,&lt;br/&gt;
Pieter-Jan&lt;/p&gt;</comment>
                            <comment id="12653836" author="knutanders" created="Fri, 5 Dec 2008 15:47:51 +0000"  >&lt;p&gt;What Dan suggests in his comment (02/Nov/07) could be achieved with no changes in Derby if you&apos;re using Java SE 6. Define your own java.text.spi.CollatorProvider which returns a Collator on which you have called setStrength() and tell Derby to use that collator (territory=&amp;lt;your-custom-locale&amp;gt;;collation=TERRITORY_BASED;create=true). I just posted an example here: &lt;a href=&quot;http://blogs.sun.com/kah/entry/user_defined_collation_in_apache&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blogs.sun.com/kah/entry/user_defined_collation_in_apache&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12653864" author="geoff_hendrey" created="Fri, 5 Dec 2008 17:00:48 +0000"  >&lt;p&gt;Two questions:&lt;br/&gt;
1) does this mean that &apos;=&apos; and &apos;LIKE&apos; comparisons can be case insensitive?&lt;br/&gt;
2) is it possible to switch between case-sensitive and case-insensitive comparisons on the fly?&lt;/p&gt;

&lt;p&gt; -geoff&lt;br/&gt;
&#8220;The Americans would be less dangerous if they had a regular army.&#8221; &lt;br/&gt;
&#8211; British General Frederick Haldimand, Boston, 1776&lt;/p&gt;



</comment>
                            <comment id="12653867" author="rhillegas" created="Fri, 5 Dec 2008 17:12:52 +0000"  >&lt;p&gt;Geoff hendrey wrote:&lt;br/&gt;
&amp;gt; Two questions:&lt;br/&gt;
&amp;gt; 1) does this mean that &apos;=&apos; and &apos;LIKE&apos; comparisons can be case insensitive?&lt;br/&gt;
Yes. Bear in mind, however, that the LIKE optimizations do not work on territory-based collations today. See &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-3854&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-3854&lt;/a&gt;&lt;br/&gt;
&amp;gt; 2) is it possible to switch between case-sensitive and case-insensitive comparisons on the fly?&lt;br/&gt;
Not with indexed support, that I&apos;m aware of. You can always wrap your column references with normalizing functions like UPPER and get the semantics (but not necessarily the performance) that you want. For more speculation about how to handle these issues, please see &lt;a href=&quot;http://www.nabble.com/ORDER-BY-and-greek-characters-td20748193.html#a20748193&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/ORDER-BY-and-greek-characters-td20748193.html#a20748193&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;br/&gt;
-Rick &lt;/p&gt;</comment>
                            <comment id="12842960" author="gugrim" created="Tue, 9 Mar 2010 08:14:38 +0000"  >&lt;p&gt;I have now implemented Dans suggestions and it seems to work fine. LIKE comparisions, equality comparisions and unique indices are case insensitive with strength SECONDARY.&lt;/p&gt;

&lt;p&gt;In addition to the below changes I suppose that the database version number needs to be changed since a database with a collation type like TERRITORY_BASED:SECONDARY won&apos;t work with an older Derby version.&lt;/p&gt;

&lt;p&gt;The changed classes are:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.sql.compile.CreateTableNode&lt;br/&gt;
  Collation type translation to name changed.&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.sql.catalog.DataDictionaryImpl&lt;br/&gt;
  Initialization of collation type changed when booting database.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.reference.Property&lt;br/&gt;
  Four new string constants for TERRITORY_BASED:PRIMARY etc.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.DataTypeDescriptor&lt;br/&gt;
  New static method getCollationType(String) for translating property value text to int.&lt;br/&gt;
  New static method getCollationName(int) for translating int to property value text.&lt;br/&gt;
  Method getCollationName() uses above method.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.DataValueFactoryImpl&lt;br/&gt;
  Initialization of collation type changed when creating database.&lt;br/&gt;
  Strength set on collator when a strength variant of TERRITORY_BASED is used.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.StringDataValue&lt;br/&gt;
  Four new int constants for COLLATION_TYPE_TERRITORY_BASED_PRIMARY etc.&lt;/p&gt;</comment>
                            <comment id="12843182" author="geoff_hendrey" created="Tue, 9 Mar 2010 16:26:27 +0000"  >&lt;p&gt;Could you provide a synopsis of the recommended way to do case insensitive string comparison, taking into account this new capability you added?&lt;/p&gt;

&lt;p&gt;-geoff&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;br/&gt;
&lt;a href=&quot;http://nextdb.net&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://nextdb.net&lt;/a&gt; - RESTful Relational Database&lt;br/&gt;
&lt;a href=&quot;http://www.nextdb.net/wiki/en/REST&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nextdb.net/wiki/en/REST&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&amp;#8212; On Tue, 3/9/10, Gunnar Grim (JIRA) &amp;lt;jira@apache.org&amp;gt; wrote:&lt;/p&gt;

&lt;p&gt;From: Gunnar Grim (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;br/&gt;
Subject: &lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; Updated: (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748&quot; title=&quot;Global case insensitive setting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1748&quot;&gt;&lt;del&gt;DERBY-1748&lt;/del&gt;&lt;/a&gt;) Global case insensitive setting&lt;br/&gt;
To: geoff_hendrey@yahoo.com&lt;br/&gt;
Date: Tuesday, March 9, 2010, 12:15 AM&lt;/p&gt;


&lt;p&gt;&#160; &#160;&#160;&#160;[ &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1748?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Gunnar Grim updated &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748&quot; title=&quot;Global case insensitive setting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1748&quot;&gt;&lt;del&gt;DERBY-1748&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
-------------------------------&lt;/p&gt;

&lt;p&gt;&#160; &#160; Attachment: collation-strength.diff&lt;/p&gt;

&lt;p&gt;I have now implemented Dans suggestions and it seems to work fine. LIKE comparisions, equality comparisions and unique indices are case insensitive with strength SECONDARY.&lt;/p&gt;

&lt;p&gt;In addition to the below changes I suppose that the database version number needs to be changed since a database with a collation type like TERRITORY_BASED:SECONDARY won&apos;t work with an older Derby version.&lt;/p&gt;

&lt;p&gt;The changed classes are:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.sql.compile.CreateTableNode&lt;br/&gt;
&#160; Collation type translation to name changed.&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.sql.catalog.DataDictionaryImpl&lt;br/&gt;
&#160; Initialization of collation type changed when booting database.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.reference.Property&lt;br/&gt;
&#160; Four new string constants for TERRITORY_BASED:PRIMARY etc.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.DataTypeDescriptor&lt;br/&gt;
&#160; New static method getCollationType(String) for translating property value text to int.&lt;br/&gt;
&#160; New static method getCollationName(int) for translating int to property value text.&lt;br/&gt;
&#160; Method getCollationName() uses above method.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.DataValueFactoryImpl&lt;br/&gt;
&#160; Initialization of collation type changed when creating database.&lt;br/&gt;
&#160; Strength set on collator when a strength variant of TERRITORY_BASED is used.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.types.StringDataValue&lt;br/&gt;
&#160; Four new int constants for COLLATION_TYPE_TERRITORY_BASED_PRIMARY etc.&lt;/p&gt;



&lt;p&gt;&amp;#8211; &lt;br/&gt;
This message is automatically generated by JIRA.&lt;br/&gt;
-&lt;br/&gt;
You can reply to this email to add a comment to the issue online.&lt;/p&gt;
</comment>
                            <comment id="12843473" author="gugrim" created="Wed, 10 Mar 2010 08:12:29 +0000"  >&lt;p&gt;Not sure what you mean Geoff, so I&apos;ll assume you are thinking of string comparisons&#160;&lt;br/&gt;
in SQL.&lt;/p&gt;

&lt;p&gt;All string comparisons I&apos;ve tested become case insensitive with a database&#160;&lt;br/&gt;
that uses TERRITORY_BASED:SECONDARY collation. I&apos;ve tested the following&lt;/p&gt;

&lt;p&gt;name LIKE &apos;a%&apos;&lt;br/&gt;
&#160;matches both &quot;Adam&quot; and &quot;adam&quot;&lt;/p&gt;

&lt;p&gt;name = &apos;adam&apos;&lt;br/&gt;
&#160;matches both &quot;Adam&quot; and &quot;adam&quot;&lt;/p&gt;

&lt;p&gt;name BETWEEN &apos;a&apos; AND &apos;c&apos;&lt;br/&gt;
&#160;matches both &quot;Baker&quot; and &quot;baker&quot;&lt;/p&gt;

&lt;p&gt;name &amp;gt;= &apos;a&apos; AND name &amp;lt;= &apos;c&apos;&lt;br/&gt;
&#160;matches both &quot;Baker&quot; and &quot;baker&quot;&lt;/p&gt;

&lt;p&gt;Using a varchar column as a primary key will consider &apos;Adam&apos; and &apos;adam&apos; as duplicates.&lt;/p&gt;

&lt;p&gt;JOIN&apos;s compare case insensitively.&lt;/p&gt;

&lt;p&gt;-Gunnar&lt;/p&gt;</comment>
                            <comment id="12843715" author="geoff_hendrey" created="Wed, 10 Mar 2010 19:22:28 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I was just thinking it would be nice, now that you&apos;ve shown this works, to have a pointer to a derby doc section on &quot;&quot;how to make your database case insensitive&quot;. If the details are hidden in a section on character collation, I don&apos;t think the average user of Derby will ever stumble upon it. Basically, out of laziness, I thought it would be good for you to send an email to the derby user group explaining how to make your database case insensitive. It&apos;s been a much desired feature.&lt;/p&gt;

&lt;p&gt;-geoff&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;br/&gt;
&lt;a href=&quot;http://nextdb.net&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://nextdb.net&lt;/a&gt; - RESTful Relational Database&lt;br/&gt;
&lt;a href=&quot;http://www.nextdb.net/wiki/en/REST&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nextdb.net/wiki/en/REST&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&amp;#8212; On Wed, 3/10/10, Gunnar Grim (JIRA) &amp;lt;jira@apache.org&amp;gt; wrote:&lt;/p&gt;

&lt;p&gt;From: Gunnar Grim (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;br/&gt;
Subject: &lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; Commented: (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748&quot; title=&quot;Global case insensitive setting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1748&quot;&gt;&lt;del&gt;DERBY-1748&lt;/del&gt;&lt;/a&gt;) Global case insensitive setting&lt;br/&gt;
To: geoff_hendrey@yahoo.com&lt;br/&gt;
Date: Wednesday, March 10, 2010, 12:13 AM&lt;/p&gt;


&lt;p&gt;&#160; &#160; [ &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12843473#action_12843473&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1748?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12843473#action_12843473&lt;/a&gt; ] &lt;/p&gt;

&lt;p&gt;Gunnar Grim commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1748&quot; title=&quot;Global case insensitive setting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1748&quot;&gt;&lt;del&gt;DERBY-1748&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
------------------------------------&lt;/p&gt;

&lt;p&gt;Not sure what you mean Geoff, so I&apos;ll assume you are thinking of string comparisons&#160;&lt;br/&gt;
in SQL.&lt;/p&gt;

&lt;p&gt;All string comparisons I&apos;ve tested become case insensitive with a database&#160;&lt;br/&gt;
that uses TERRITORY_BASED:SECONDARY collation. I&apos;ve tested the following&lt;/p&gt;

&lt;p&gt;name LIKE &apos;a%&apos;&lt;br/&gt;
&#160;matches both &quot;Adam&quot; and &quot;adam&quot;&lt;/p&gt;

&lt;p&gt;name = &apos;adam&apos;&lt;br/&gt;
&#160;matches both &quot;Adam&quot; and &quot;adam&quot;&lt;/p&gt;

&lt;p&gt;name BETWEEN &apos;a&apos; AND &apos;c&apos;&lt;br/&gt;
&#160;matches both &quot;Baker&quot; and &quot;baker&quot;&lt;/p&gt;

&lt;p&gt;name &amp;gt;= &apos;a&apos; AND name &amp;lt;= &apos;c&apos;&lt;br/&gt;
&#160;matches both &quot;Baker&quot; and &quot;baker&quot;&lt;/p&gt;

&lt;p&gt;Using a varchar column as a primary key will consider &apos;Adam&apos; and &apos;adam&apos; as duplicates.&lt;/p&gt;

&lt;p&gt;JOIN&apos;s compare case insensitively.&lt;/p&gt;

&lt;p&gt;-Gunnar&lt;/p&gt;


&lt;p&gt;&amp;#8211; &lt;br/&gt;
This message is automatically generated by JIRA.&lt;br/&gt;
-&lt;br/&gt;
You can reply to this email to add a comment to the issue online.&lt;/p&gt;
</comment>
                            <comment id="12843951" author="gugrim" created="Thu, 11 Mar 2010 07:12:27 +0000"  >&lt;p&gt;Yes, user documentation on case insensitivity will be needed but my patch has yet to be accepted by the Derby developers.&lt;/p&gt;</comment>
                            <comment id="12844459" author="knutanders" created="Fri, 12 Mar 2010 11:13:08 +0000"  >&lt;p&gt;Thanks for providing the patch, Gunnar! This looks like a nice improvement. We&apos;d also need some regression tests to verify that the functionality works before we can check it in. If you want to take a stab at it, you could take a look at the existing collation tests and see if they can be extended with tests for this new feature. They can be found under java/testing/org/apache/derbyTesting/functionTests/tests/lang and are called CollationTest and CollationTest2. The wiki contains more info about running and writing Derby regression tests: &lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyJUnitTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyJUnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should probably also sign an ICLA (Individual Contributor License Agreement) and mail/fax it to Apache. See this wiki page: &lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyDev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyDev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have one question about the patch. There&apos;s a call to Collator.getInstance() in BasicDatabase.getCollator() which is not touched by the patch. Do we need to add a call to setStrength() there as well?&lt;/p&gt;</comment>
                            <comment id="12844507" author="gugrim" created="Fri, 12 Mar 2010 14:12:16 +0000"  >&lt;p&gt;Yes, it seems more than reasonable to set the strength on this collator since it is based on the database locale. Patch updated.&lt;/p&gt;</comment>
                            <comment id="12844549" author="knutanders" created="Fri, 12 Mar 2010 15:50:32 +0000"  >&lt;p&gt;Actually, it looks like the getCollator() method in BasicDatabase is never used. It&apos;s probably just dead code that&apos;s left over from the early Cloudscape days. I&apos;m attaching a patch that removes the code so that we don&apos;t need to worry about it. I&apos;ll check in that patch shortly if all the regression tests run cleanly with it.&lt;/p&gt;</comment>
                            <comment id="12844977" author="knutanders" created="Sat, 13 Mar 2010 22:34:10 +0000"  >&lt;p&gt;Committed remove_dead_code.diff to trunk with revision 922682.&lt;/p&gt;</comment>
                            <comment id="12845225" author="gugrim" created="Mon, 15 Mar 2010 08:04:10 +0000"  >&lt;p&gt;Here is a new patch based on the latest commit. There is now no change in BasicDatabase and there is a test case in CollationTest.&lt;/p&gt;

&lt;p&gt;I have also faxed a signed ICLA to Apache. I&apos;ll take a look at CollationTest2 ASAP.&lt;/p&gt;</comment>
                            <comment id="12847266" author="gugrim" created="Fri, 19 Mar 2010 08:07:37 +0000"  >&lt;p&gt;Suggested text to add to the section &quot;Creating a database with territory-based collation&quot; in the developers guide.&lt;/p&gt;</comment>
                            <comment id="12847271" author="gugrim" created="Fri, 19 Mar 2010 08:26:44 +0000"  >&lt;p&gt;Suggested text for the reference manual, section &quot;collation=collation attribute&quot;.&lt;/p&gt;</comment>
                            <comment id="12847391" author="chaase3" created="Fri, 19 Mar 2010 14:58:33 +0000"  >&lt;p&gt;Thank you, Gunnar, that should give me enough to go on &amp;#8211; the dev guide text explains what the strengths mean. I should note that in the devgulde.text one, in my locale, a character in the following came across as a diamond with a question mark in it &amp;#8211;&lt;/p&gt;

&lt;p&gt;as well as &quot;a&quot; and &quot;&#65533;&quot;.&lt;/p&gt;

&lt;p&gt;I&apos;ll have to see if there is some locale-neutral way of putting such characters in the manuals.&lt;/p&gt;</comment>
                            <comment id="12847718" author="gugrim" created="Sat, 20 Mar 2010 06:04:23 +0000"  >&lt;p&gt;Sorry about the strange character. The file is saved in ISO-8859-1. The character is &quot;&#225;&quot;, see &lt;a href=&quot;http://www.fileformat.info/info/unicode/char/00e1/index.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.fileformat.info/info/unicode/char/00e1/index.htm&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12851038" author="chaase3" created="Mon, 29 Mar 2010 19:30:13 +0100"  >&lt;p&gt;I&apos;m working on documenting this new feature. Thanks for the information on it.&lt;/p&gt;

&lt;p&gt;One question: the spec for the dev guide says, &quot;The exact interpretation of the strength attribute is locale dependant.&quot; How would a user find out the interpretation for a particular locale? Is there some reference material on the Web for this?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12851288" author="gugrim" created="Tue, 30 Mar 2010 07:48:43 +0100"  >&lt;p&gt;The Wikipedia entry on Collation references this article: &lt;a href=&quot;http://www.unicode.org/reports/tr10/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.unicode.org/reports/tr10/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the normal user I believe it is sufficient to know that the strength values PRIMARY, SECONDARY and TERTIARY handle differences in base characters, accents and case, respectively. If you know your own language you will know what that means. For example, anyone who knows Swedish will know that the letters A and &#196; are different even with PRIMARY strength. The dots are not an accent in Swedish although in another language they may well be.&lt;/p&gt;

&lt;p&gt;Therefore, I think that the text I suggested for the dev guide is detailed enough. Perhaps you could add a recommendation to use PRIMARY if you want Derby to behave like MySQL, MS SQL Server and probably most other DBMS&apos;es do by default.&lt;/p&gt;</comment>
                            <comment id="12851303" author="knutanders" created="Tue, 30 Mar 2010 08:59:52 +0100"  >&lt;p&gt;Gunnar&apos;s ICLA has been recorded here: &lt;a href=&quot;http://people.apache.org/~jim/committers.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~jim/committers.html&lt;/a&gt;&lt;br/&gt;
So I think we can start looking at getting the patch committed now. The patch looks good to me, so I plan to commit it if all the regression tests run cleanly with it.&lt;/p&gt;

&lt;p&gt;It would be good to have some more tests to verify that it works as expected with the different strengths (currently, we only test secondary strength), but we can add more tests later.&lt;/p&gt;</comment>
                            <comment id="12851304" author="knutanders" created="Tue, 30 Mar 2010 09:07:10 +0100"  >&lt;p&gt;Kim, I assume you meant to assign &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4591&quot; title=&quot;Documentation needed for global case-insensitive setting (DERBY-1748)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4591&quot;&gt;&lt;del&gt;DERBY-4591&lt;/del&gt;&lt;/a&gt; to yourself? Re-assigning this issue to Gunnar.&lt;/p&gt;</comment>
                            <comment id="12851375" author="knutanders" created="Tue, 30 Mar 2010 13:45:35 +0100"  >&lt;p&gt;All the regression tests ran cleanly, so I committed the collation-strength-2.diff patch to trunk with revision 929111.&lt;br/&gt;
Thanks for contributing the patch, Gunnar!&lt;/p&gt;</comment>
                            <comment id="12851391" author="chaase3" created="Tue, 30 Mar 2010 14:16:09 +0100"  >&lt;p&gt;Yes, silly me, it was 4591 I meant to assign to myself. And thanks for committing the code, Knut &amp;#8211; I will build Derby and try it out.&lt;/p&gt;

&lt;p&gt;Gunnar, thanks for the advice. I will take it except that perhaps I will not mention specific other databases &amp;#8211; to make the doc easier to maintain. Nothing lasts forever ...&lt;/p&gt;</comment>
                            <comment id="12851429" author="chaase3" created="Tue, 30 Mar 2010 16:06:26 +0100"  >&lt;p&gt;Actually, I just realized that the patch I proposed doesn&apos;t include that last recommendation about using PRIMARY for compatibility with other databases. I will update the patch &amp;#8211; sorry.&lt;/p&gt;</comment>
                            <comment id="12851743" author="gugrim" created="Wed, 31 Mar 2010 07:32:20 +0100"  >&lt;p&gt;Knut, are you sure I should be assigned this issue? I am but a lowly contributor with very few rights and no idea what to do with the issue at this stage.&lt;/p&gt;</comment>
                            <comment id="12851763" author="knutanders" created="Wed, 31 Mar 2010 08:51:55 +0100"  >&lt;p&gt;Gunnar, we normally use the &quot;assigned to&quot; field to indicate who has been the main contributor, and since you wrote the code, that&apos;s you. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12852063" author="mamtas" created="Wed, 31 Mar 2010 20:25:56 +0100"  >&lt;p&gt;I saw following test failure on a Linux machine running with IBM jdk16 and thought it might be related to this jira entry.&lt;br/&gt;
1) testSwedishCaseInsensitiveCollation(org.apache.derbyTesting.functionTests.tests.lang.CollationTest)junit.framework.AssertionFailedError: Column value mismatch @ column &apos;ID&apos;, row 1:&lt;br/&gt;
    Expected: &amp;gt;6&amp;lt;&lt;br/&gt;
    Found:    &amp;gt;4&amp;lt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java(Inlined Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Inlined Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java(Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.checkLangBasedQuery(CollationTest.java:1324)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testSwedishCaseInsensitiveCollation(CollationTest.java:561)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code))&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java(Compiled Code))&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code))&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;</comment>
                            <comment id="12852305" author="knutanders" created="Thu, 1 Apr 2010 10:37:58 +0100"  >&lt;p&gt;Myrna has logged the regression test failure as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4604&quot; title=&quot;test lang.CollationTest.testSwedishCaseInsensitiveCollation fails with IBM&amp;#39;s weme6.2/1.4.2. and Sun&amp;#39;s 1.4.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4604&quot;&gt;&lt;del&gt;DERBY-4604&lt;/del&gt;&lt;/a&gt;. It appears to be a JVM bug. See more details there.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12312161">DERBY-455</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12403094">DERBY-3854</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12460871">DERBY-4604</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12312855">DERBY-481</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12459525">DERBY-4591</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12438614" name="collation-strength-1.diff" size="14465" author="gugrim" created="Fri, 12 Mar 2010 14:12:16 +0000"/>
                            <attachment id="12438793" name="collation-strength-2.diff" size="22766" author="gugrim" created="Mon, 15 Mar 2010 08:04:10 +0000"/>
                            <attachment id="12438268" name="collation-strength.diff" size="12273" author="gugrim" created="Tue, 9 Mar 2010 08:14:38 +0000"/>
                            <attachment id="12439250" name="devguide.txt" size="880" author="gugrim" created="Fri, 19 Mar 2010 08:07:37 +0000"/>
                            <attachment id="12439251" name="refman.txt" size="1188" author="gugrim" created="Fri, 19 Mar 2010 08:26:44 +0000"/>
                            <attachment id="12438619" name="remove_dead_code.diff" size="3149" author="knutanders" created="Fri, 12 Mar 2010 15:50:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 1 Jun 2007 06:49:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30127</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qun:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>