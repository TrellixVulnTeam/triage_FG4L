<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:16:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-151/DERBY-151.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-151] Thread termination -&gt; XSDG after operation is &apos;complete&apos;</title>
                <link>https://issues.apache.org/jira/browse/DERBY-151</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I&apos;ve encountered what appears to be a bug related to threading. After an INSERT operation, if the invoking thread terminates too quickly, Derby throws an XSDG.&lt;/p&gt;

&lt;p&gt;The bug is a bit difficult to isolate but it occurs consistently in the following situation (with a particular database and an operation of a particular size):&lt;/p&gt;

&lt;p&gt;Derby is running in embedded mode with autocommit on.  &lt;br/&gt;
The application performs an INPUT operation from a thread that is not the main thread.  The INPUT is issued using a PreparedStatement.  The INPUT adds ~ 256 records of six fields each. (Note that INSERTs of this size seem to work fine in other contexts.)&lt;/p&gt;

&lt;p&gt;The preparedStatement.executeUpdate() seems to excute successfully; at least it returns without throwing an exception. &lt;/p&gt;

&lt;p&gt;The thread that invoked the INPUT operation then terminates (but NOT the application).  The next INPUT operation then results in an&lt;/p&gt;

&lt;p&gt;&quot;ERROR XSDG1: Page Page(7,Container(0, 1344)) could not be written to disk, please check if disk is full.&quot;&lt;/p&gt;

&lt;p&gt;The disk is definitely not full.&lt;/p&gt;

&lt;p&gt;HOWEVER, if I put the calling thread to sleep for a second before it exits, the problem does not occur.&lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure what to make of this.  I was under the impression that most of Derby&apos;s activity occurs in the application&apos;s threads.  Could Derby be creating a child thread from in the application thread, which dies when the parent thread terminates?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;


</description>
                <environment>Linux kernel 2.4.21-243-athlon (SuSE 9.0)</environment>
        <key id="30281">DERBY-151</key>
            <summary>Thread termination -&gt; XSDG after operation is &apos;complete&apos;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="bd49">Barnet Wagman</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Feb 2005 16:00:28 +0000</created>
                <updated>Fri, 21 Jan 2011 17:48:11 +0000</updated>
                            <resolved>Thu, 3 Dec 2009 22:33:48 +0000</resolved>
                                    <version>10.0.2.1</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>5</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="12318946" author="mikem" created="Wed, 17 Aug 2005 09:15:46 +0100"  >&lt;p&gt;Without some sort of reproducible case, don&apos;t think this issue will be addressed.  Also always include all the &lt;br/&gt;
stack trace information from derby.log whenever possible.  &lt;/p&gt;

&lt;p&gt;My best guess is that somehow a thread interrupt is being sent to the thread issuing the I/O, possibly the interrupt&lt;br/&gt;
is even being posted to the thread before the execute statement is being called?  &lt;/p&gt;

&lt;p&gt;To answer the question, the I/O described above could be issued either by the thread doing the insert , or it could&lt;br/&gt;
be issued by a background thread executing a checkpoint.  The stack track would tell which.  &lt;/p&gt;</comment>
                            <comment id="12327401" author="jfrantzius" created="Thu, 15 Sep 2005 00:41:52 +0100"  >&lt;p&gt;I&apos;m seeing the same, on Windows XP (Derby 10.1.1.0). Here&apos;s my stacktrace:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;14.09.2005 16:37:36,115&amp;#93;&lt;/span&gt; DEBUG Request.java:66 - INSERT INTO KUENSTLER (LEBENSDATEN,LITERATUR,GEBURTS_ORT,KUENSTLER_NAME,LEGACY_ID,&quot;NAME&quot;,GEBURTSDATUM,LAST_MODIFICATION,ERGAENZUNGEN,ADRESSE,GESCHLECHT,STERBEDATUM,VORNAME,BIOGRAPHIE,ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)&lt;br/&gt;
ERROR XSDG1: Page Page(7,Container(0, 1088)) could not be written to disk, please check if disk is full.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.writePage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.CachedItem.takeOnIdentity(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.Clock.addEntry(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.Clock.create(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.initPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.newPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainer.addPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.doInsert(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(Unknown Source)&lt;/p&gt;</comment>
                            <comment id="12327827" author="jfrantzius" created="Thu, 15 Sep 2005 00:46:45 +0100"  >&lt;p&gt;I might add that the disk is not full, and in contrast to the original poster, it doesn&apos;t seem to be a threading issue. As the stacktrace shows, it is the thread that issued the UPDATE statement that gets the exception.&lt;/p&gt;

&lt;p&gt;I&apos;ve got the following non-default page cache settings:&lt;/p&gt;

&lt;p&gt;derby.storage.pageCacheSize = 320&lt;br/&gt;
derby.storage.pageSize = 16384&lt;/p&gt;</comment>
                            <comment id="12329329" author="tsuresh" created="Thu, 15 Sep 2005 03:53:33 +0100"  >&lt;p&gt;derby.log  occasional has more information than the above stack mentioned.   In most cases , some sort of  IO  exception has&lt;br/&gt;
to happen for  the above error to occur,  all  the exception are nested inside the SQL Exception.    If the derby.log file is still around , &lt;br/&gt;
please attach it  to the jira. &lt;/p&gt;</comment>
                            <comment id="12329335" author="jfrantzius" created="Thu, 15 Sep 2005 04:19:46 +0100"  >&lt;p&gt;Alright, I didn&apos;t think of that! Here&apos;s the log (I think the last shutdown can be ignored).&lt;/p&gt;</comment>
                            <comment id="12329336" author="jfrantzius" created="Thu, 15 Sep 2005 04:21:28 +0100"  >&lt;p&gt;Sorry, that was the wrong log! Could someone please delete it? It seems I can&apos;t.&lt;br/&gt;
Here&apos;s the correct one (derby.log)&lt;/p&gt;</comment>
                            <comment id="12329341" author="tsuresh" created="Thu, 15 Sep 2005 04:54:26 +0100"  >&lt;p&gt;Real cause for the error(ERROR XSDG1: Page Page(7,Container(0, 1088)) could not be written to disk, please check if disk is full. ) is :&lt;br/&gt;
java.nio.channels.ClosedByInterruptException&lt;br/&gt;
	at java.nio.channels.spi.AbstractInterruptibleChannel.end(Unknown Source)&lt;br/&gt;
	at sun.nio.ch.FileChannelImpl.force(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.io.DirRandomAccessFile4.sync(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer.writePage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.writePage(Unknown Source)&lt;br/&gt;
                     ............&lt;/p&gt;

&lt;p&gt;file sync is being interrupted , because user is interrupting the thread that is doing the database activity. &lt;br/&gt;
May the  Interrupt exception should be caught  .. and reissue the sync if possible and also generate better error &lt;br/&gt;
if  it can not be synced even on a second attempt .  Discussion about transaction log on the user list:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/derby-user@db.apache.org/msg01577.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mail-archive.com/derby-user@db.apache.org/msg01577.html&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12329353" author="jfrantzius" created="Thu, 15 Sep 2005 06:08:52 +0100"  >&lt;p&gt;Trying to catch ClosedByInterruptException in RAFContainer would give a dependency on Java 1.4. Not sure whether that is wanted, and I&apos;m having a bit of a hard time to get build.xml compile it (there is 1.4 classes being used in impl.io without problems?!)&lt;/p&gt;</comment>
                            <comment id="12329367" author="jfrantzius" created="Thu, 15 Sep 2005 09:08:18 +0100"  >&lt;p&gt;For any Eclipse-plugin, Swing or GUI programmers in general seeing this bug: writing to the embedded DB from the UI thread is a bad idea, as that thread gets interrupted very frequently. Moving write operations into their own thread solved the problem for stupid me. &lt;br/&gt;
Cheers!&lt;/p&gt;</comment>
                            <comment id="12378722" author="kmarsden" created="Wed, 10 May 2006 04:04:14 +0100"  >&lt;p&gt;I was wondering if anyone  could provide some expanded information on this issue. I am really not all that familiar with running Derby in eclipse and have &lt;br/&gt;
some probably very basic questions which are:&lt;/p&gt;


&lt;p&gt;1)  I was wondering if  anyone  had some information on accessing Derby &lt;br/&gt;
from within eclipse and avoiding ClosedByInterruptException  as &lt;br/&gt;
described in  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-151&quot; title=&quot;Thread termination -&amp;gt; XSDG after operation is &amp;#39;complete&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-151&quot;&gt;&lt;del&gt;DERBY-151&lt;/del&gt;&lt;/a&gt;.  Do you always need to launch a separate thread for any Derby access when running in eclipse?&lt;/p&gt;

&lt;p&gt;2)  If the answer to #1 is &quot;Yes&quot;,  is there a Derby solution to this problem that is possible or is it strictly a user issue, for example, if the retry was implemented would that eliminate the requirement to access Derby in a separate thread?&lt;/p&gt;

&lt;p&gt;3) Are there any similar issues with  interuption when accessing with the client driver?&lt;/p&gt;

&lt;p&gt;4) Is using embedded server ok with eclipse?  The plugins doc seems to &lt;br/&gt;
imply that you should always use network server and access with Derby &lt;br/&gt;
client.&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/integrate/plugin_help/start_toc.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/integrate/plugin_help/start_toc.html&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12566268" author="kmarsden" created="Wed, 6 Feb 2008 18:51:50 +0000"  >&lt;p&gt;I am thinking of closing this issue CannotReproduce. Please let me know if you have any objections.&lt;br/&gt;
It can be reopened if we get a repro.&lt;/p&gt;
</comment>
                            <comment id="12566318" author="knutanders" created="Wed, 6 Feb 2008 20:24:31 +0000"  >&lt;p&gt;Attached is a repro.&lt;/p&gt;

&lt;p&gt;The good news is that from 10.3 the java.nio.channels.ClosedByInterruptException is linked to the SQLException, so printStackTrace() will show that it&apos;s the underlying cause. But the SQLException still says &quot;please check if disk is full&quot;.&lt;/p&gt;

&lt;p&gt;Another piece of good news: In an earlier comment, Suresh suggested that we could catch ClosedByInterruptException and use that to reissue the sync() and/or give a better error message. The suggestion was rejected because it would introduce a dependency on Java 1.4 in RAFContainer. From 10.3 we have RAFContainer4 which &lt;b&gt;is&lt;/b&gt; depending on Java 1.4, so that shouldn&apos;t stop us anymore.&lt;/p&gt;</comment>
                            <comment id="12567653" author="paulasb" created="Mon, 11 Feb 2008 14:50:53 +0000"  >&lt;p&gt;We ran into this same error when running our application over slow network connections. At first we didn&apos;t see the connection between the network and the derby error until we started to investigate interrupts. We found that if a thread was ever interrupted and you attempt a commit on that same thread you&apos;ll see this error. It seems to be linked to having the threads interrupted flag set.&lt;/p&gt;

&lt;p&gt;Here&apos;s how to test it:&lt;br/&gt;
1. add a  Thread.interrupted(); right after the interrupt() in the attached test program d151.java. (this clears the interrupted flag)&lt;br/&gt;
2. Make sure the DB directory is deleted and rerun the test. It will now complete.&lt;/p&gt;

&lt;p&gt;I managed to fix our application by adjusting our network layer to clear the interrupted flag when we timed out an IO operation. That was how our issue was related to a slow network and not a local disk problem.&lt;/p&gt;

&lt;p&gt;The error message is misleading since it seems to indicate that there&apos;s a problem writing to the file, when really it just misinterpreted the interrupted flag to mean the channel was closed. You might want to fix how the interrupts are checked.&lt;/p&gt;</comment>
                            <comment id="12568662" author="paulasb" created="Wed, 13 Feb 2008 18:47:30 +0000"  >&lt;p&gt;I thought I&apos;d add a little more clarification to this. This error seems to only  come up when the interrupt flag is set on a thread that is doing a commit that which causes a page to be written to disk. I figured this out by modifying the d151.java to take pageSize as an argument and to count how many iterations of insert and interrupt it took to fail. I then varied the pageSize and noted that the number of iterations before failure was proportional to the pageSize. So my guess was that the page was being written somewhere under the covers and causing this error.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached my test program. I hope this helps resolve this issue.&lt;/p&gt;</comment>
                            <comment id="12607454" author="trejkaz" created="Tue, 24 Jun 2008 03:51:08 +0100"  >&lt;p&gt;I&apos;ve been wrestling with this issue too.  I can&apos;t reproduce it reliably in the live system but it happens often enough to be an annoyance, and our unit tests cause it to occur much more often.&lt;/p&gt;

&lt;p&gt;In our case it&apos;s occurring on one of our own threads so moving database work off the EDT can&apos;t help.&lt;/p&gt;

&lt;p&gt;Closing and reopening the connection doesn&apos;t make it work again, we have to do a shutdown and start it again, and then it appears to work (until the problem occurs again.)  When running the real application when there is a connection pool in effect, this becomes very hard to do.&lt;/p&gt;</comment>
                            <comment id="12746389" author="dagw" created="Sat, 22 Aug 2009 02:21:00 +0100"  >&lt;p&gt;Running Knut&apos;s repro with Java 1.5 or 1.5, I see this error:&lt;/p&gt;

&lt;p&gt;Java exception: &apos;org/apache/derby/impl/sql/execute/NormalizeResultSet: java.lang.NoClassDefFoundError&apos;.&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: No current connection.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:158)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:262)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(EmbedConnection.java:2179)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(EmbedConnection.java:1334)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.createStatement(EmbedConnection.java:1291)&lt;br/&gt;
	at d151.main(d151.java:18)&lt;/p&gt;

&lt;p&gt;which seems to be our old friend; the classloader being sensitive to the interrupted flag in the thread. With 1.6&lt;br/&gt;
I see the disk is full message, though.&lt;/p&gt;</comment>
                            <comment id="12746393" author="dagw" created="Sat, 22 Aug 2009 02:53:35 +0100"  >&lt;p&gt;My observation is really unrelated to the RAFContainer4 situation; if I move the call of Thread.currentThread().interrupt() in d151.java&lt;br/&gt;
to &lt;b&gt;after&lt;/b&gt; the first executeUpdate, this doesn&apos;t happen, because all relevant classes have been read by the classloader.&lt;br/&gt;
See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1338&quot; title=&quot;Client tests DerbyNetNewServer and NSinSameVM fail with NoClassDefFoundError: DRDAProtocolExceptionInfo when run from classes dir&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1338&quot;&gt;&lt;del&gt;DERBY-1338&lt;/del&gt;&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;So really it&apos;s just another manifestation of the fact that interrupting a Derby thread is not really healthy.&lt;br/&gt;
I think we should just catch the ClosedByInterruptException and create a more explanatory error message, e.g maybe thus:&lt;/p&gt;


&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Derby thread received an interrupt during a write operation, please check your application.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2204)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1675)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:302)&lt;br/&gt;
	at d151.main(d151.java:18)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.nio.channels.ClosedByInterruptException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: java.nio.channels.ClosedByInterruptException&lt;br/&gt;
	at java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:184)&lt;br/&gt;
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:656)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writeFull(RAFContainer4.java:496)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage0(RAFContainer4.java:346)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(RAFContainer4.java:291)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:787)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(CachedPage.java:305)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.ConcurrentCache.create(ConcurrentCache.java:388)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.initPage(FileContainer.java:2336)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.newPage(FileContainer.java:1800)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainer.addPage(BaseContainer.java:314)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(BaseContainerHandle.java:183)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:302)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(HeapController.java:599)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:452)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1022)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:495)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;/p&gt;</comment>
                            <comment id="12746505" author="dagw" created="Sat, 22 Aug 2009 22:11:37 +0100"  >&lt;p&gt;Uploading a patch that catches the ClosedByInterruptException and &lt;br/&gt;
throws a more meaningful error message as suggested above.&lt;br/&gt;
I added a test to the store regression suite and ran it successfully on Windows Vista and OpenSolaris.&lt;/p&gt;</comment>
                            <comment id="12748795" author="knutanders" created="Fri, 28 Aug 2009 12:58:10 +0100"  >&lt;p&gt;The patch looks good to me. Perhaps &quot;please check your application&quot; is a bit vague? What about &quot;please check your application for the source of the interrupt&quot;?&lt;/p&gt;

&lt;p&gt;There may be other I/O calls that are sensitive to interrupts too, but I guess we can address them with a similar fix when they surface.&lt;/p&gt;

&lt;p&gt;Some minor issues in the test:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Class name in header is wrong (jdbc4 -&amp;gt; store)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getConnection().createStatement() and getConnection().prepareStatement() could be replaced by calls to helper methods in BaseJDBCTestCase&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12749648" author="dagw" created="Mon, 31 Aug 2009 23:01:18 +0100"  >&lt;p&gt;Uploading version &quot;b&quot; of this patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Incorporated Knut&apos;s test comments.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changed severity to database; updated ErrorCodeTest to reflect this.&lt;br/&gt;
  Rationale: It seems right - I don&apos;t know that it&apos;s safe to continue&lt;br/&gt;
  after this kind of error, and I compared to other IO level errors in&lt;br/&gt;
  raw store and mostly seem to have database severity.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Made the new Derby151Test not fail even if expected error is not&lt;br/&gt;
  seen. I did this to allow for possible different behavior on other&lt;br/&gt;
  VMs, JUnit verbose mode would instead print &quot;Not able to test fix&lt;br/&gt;
  for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-151&quot; title=&quot;Thread termination -&amp;gt; XSDG after operation is &amp;#39;complete&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-151&quot;&gt;&lt;del&gt;DERBY-151&lt;/del&gt;&lt;/a&gt;: No interrupt seen&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I added the same handling to read (even if not seen yet) as for&lt;br/&gt;
  write. Regressions passed modulo ErrorCodeTest, which i missed&lt;br/&gt;
  first time around.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed some broken Javadocs.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Ready for review. &lt;/p&gt;</comment>
                            <comment id="12783205" author="dagw" created="Sat, 28 Nov 2009 04:45:53 +0000"  >&lt;p&gt;Picking this up again; I haven&apos;t received any more comments on this, and it seems a net improvement &lt;br/&gt;
to me even if it may not be a panacea. I intend to commit this soon, unless anybody has any misgivings.&lt;/p&gt;</comment>
                            <comment id="12785045" author="dagw" created="Wed, 2 Dec 2009 23:01:34 +0000"  >&lt;p&gt;Hmm, seems there is a problem with patch version b, changing the&lt;br/&gt;
severity to database makes the database try to shut down, which&lt;br/&gt;
doesn&apos;t work as long as the interrupt flag is set, I guess, since shutting down attempts more writing operations.&lt;/p&gt;
</comment>
                            <comment id="12785085" author="dagw" created="Thu, 3 Dec 2009 00:41:23 +0000"  >&lt;p&gt;Luckily this turned out to be a red herring, the shutting down does see errors since the channel&lt;br/&gt;
has been closed by the interrupt, but the correct database level exception is returned to the app (XSDG9), and&lt;br/&gt;
rebooting+recovery works as expected.&lt;/p&gt;

&lt;p&gt;This will be seen on derby.log when the shutdown sees the closed channel:&lt;br/&gt;
   ERROR XSDG9: Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt.&lt;br/&gt;
   :&lt;br/&gt;
   ------------ BEGIN SHUTDOWN ERROR STACK -------------&lt;/p&gt;

&lt;p&gt;   ERROR XSDG1: Page Page(1,Container(0, 1120)) could not be written to disk, please check if disk is full.&lt;br/&gt;
   :&lt;br/&gt;
   Caused by: java.nio.channels.ClosedChannelException&lt;/p&gt;

&lt;p&gt;Uploading derby-151-c, which fixes a bug in the test; it asserted for the wrong SQL state. However, assertSQLState is&lt;br/&gt;
a bit broken; if it can&apos;t match on the top level SQL state, it goes down the chain to see if it can match a wrapped exception.&lt;br/&gt;
When that fails, it gives up and reports that it found &lt;b&gt;the innermost&lt;/b&gt; wrapped exception, whereas the application saw the outermost one,&lt;br/&gt;
causing me to suspect the code fix was wrong.&lt;/p&gt;

&lt;p&gt;Running regressions. &lt;/p&gt;</comment>
                            <comment id="12785367" author="dagw" created="Thu, 3 Dec 2009 15:56:15 +0000"  >&lt;p&gt;Committed patch derby-151-c as svn 886831.&lt;/p&gt;</comment>
                            <comment id="12785572" author="dagw" created="Thu, 3 Dec 2009 22:16:47 +0000"  >&lt;p&gt;Uploading an improved test (derby-151-followup.diff), which also tests using the client driver.&lt;/p&gt;</comment>
                            <comment id="12785584" author="dagw" created="Thu, 3 Dec 2009 22:33:48 +0000"  >&lt;p&gt;Committed derby-151-followup as svn 886963, resolving.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12442460">DERBY-4461</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443691">DERBY-4481</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12469090">DERBY-4741</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12442673">DERBY-4463</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12474924">DERBY-4813</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12375515" name="Derby151Test.java" size="1772" author="paulasb" created="Wed, 13 Feb 2008 18:43:46 +0000"/>
                            <attachment id="12374906" name="d151.java" size="631" author="knutanders" created="Wed, 6 Feb 2008 20:24:31 +0000"/>
                            <attachment id="12417376" name="derby-151-a.diff" size="8974" author="dagw" created="Sat, 22 Aug 2009 23:00:50 +0100"/>
                            <attachment id="12417377" name="derby-151-a.stat" size="447" author="dagw" created="Sat, 22 Aug 2009 23:00:50 +0100"/>
                            <attachment id="12418186" name="derby-151-b.diff" size="14537" author="dagw" created="Mon, 31 Aug 2009 23:05:22 +0100"/>
                            <attachment id="12418185" name="derby-151-b.stat" size="542" author="dagw" created="Mon, 31 Aug 2009 23:01:18 +0100"/>
                            <attachment id="12426729" name="derby-151-c.diff" size="14267" author="dagw" created="Thu, 3 Dec 2009 00:44:59 +0000"/>
                            <attachment id="12426730" name="derby-151-c.stat" size="535" author="dagw" created="Thu, 3 Dec 2009 00:44:59 +0000"/>
                            <attachment id="12426825" name="derby-151-followup.diff" size="5378" author="dagw" created="Thu, 3 Dec 2009 22:24:29 +0000"/>
                            <attachment id="12314345" name="derby.log" size="68866" author="jfrantzius" created="Thu, 15 Sep 2005 04:21:28 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Aug 2005 08:15:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21800</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ne7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37608</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>