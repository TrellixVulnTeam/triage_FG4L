<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:31:09 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4428/DERBY-4428.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4428] Add proper delete mechanism for in-memory databases</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4428</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The current mechanism for deleting in-memory databases isn&apos;t good enough, and a proper one must be added.&lt;br/&gt;
It is also important to be able to delete in-memory databases, since they occupy valuable main memory that should be discarded when the database is no longer needed.&lt;/p&gt;

&lt;p&gt;I intend to implement the mechanism by using the JDBC connection URL:&lt;br/&gt;
&quot;jdbc:derby:memory:myDatabase;delete=true&lt;span class=&quot;error&quot;&gt;&amp;#91;;user=X;password=Y&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The connection attempt will throw an exception in any case, either because the request failed or because it succeeded.&lt;br/&gt;
Reasons for a failure can be invalid user and/or password, lacking encryption attributes, or conflicting attributes.&lt;br/&gt;
For the time being, only the database owner will be allowed to delete databases (&lt;b&gt;note&lt;/b&gt;: do we have a way to control/limit in-memory database creation?)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12439397">DERBY-4428</key>
            <summary>Add proper delete mechanism for in-memory databases</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Oct 2009 12:41:23 +0000</created>
                <updated>Thu, 29 Apr 2010 13:10:24 +0100</updated>
                            <resolved>Thu, 29 Apr 2010 13:10:24 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                    <component>Services</component>
                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12771440" author="kristwaa" created="Thu, 29 Oct 2009 15:03:56 +0000"  >&lt;p&gt;Attached patch 0a, which is a preview patch for implementing the database delete mechanism through the JDBC connection URL.&lt;/p&gt;

&lt;p&gt;The patch isn&apos;t pure, it contains a few other fixes and there are things that have to be addressed. However, it should serve well as a point for discussion. Main parts of the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;implementation of the delete mechanism itself.&lt;br/&gt;
    Split into the in-memory specific part and the storage factory agnostic part. Also includes additions of error messages and some constants.&lt;/li&gt;
	&lt;li&gt;refactoring of the URL attribute handling in EmbedConnection.&lt;br/&gt;
    BootActions now contain the code dealing with examining the attributes. I&apos;m interested in feedback on whether this is something worth keeping or not. Note that attribute parsing is still spread around, for instance the &quot;lower level&quot; attributes like restoreFrom and createFrom are handled elsewhere (store).&lt;/li&gt;
	&lt;li&gt;other changes to the VFMemSF, where I added a guard to avoid potential OOMEs when trying to boot a lot of non-existing databases.&lt;/li&gt;
	&lt;li&gt;refactoring and addition of some new tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some general issues to consider / note:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the delete mechanism is generic (all storage factories that is writable). Should the feature be in-memory specific, or also be allowed for the on-disk back end?&lt;/li&gt;
	&lt;li&gt;authorization (currently it checks if the user is the database owner if authentication is on, doesn&apos;t require SQL authorization to be on).&lt;/li&gt;
	&lt;li&gt;how to control/limit the creation of in-memory databases?&lt;br/&gt;
    (could be used for DoS attack on a server?)&lt;/li&gt;
	&lt;li&gt;the implementation of deletion isn&apos;t sufficient for on-disk databases where the log is stored in a non-default location (logDevice=...).&lt;/li&gt;
	&lt;li&gt;I had to disable an assert due to a mismatch between canonical names (haven&apos;t investigated too much yet, this part of the code still confuses me...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I plan to split the changes into somewhat smaller patches before committing.&lt;/p&gt;</comment>
                            <comment id="12771455" author="dagw" created="Thu, 29 Oct 2009 15:53:51 +0000"  >&lt;p&gt;SQL uses the keyword &quot;DROP&quot;, is there a reason you prefer &quot;delete&quot; over drop in the URL?&lt;/p&gt;

&lt;p&gt;&amp;gt; authorization (currently it checks if the user is the database owner&lt;br/&gt;
&amp;gt; if authentication is on, doesn&apos;t require SQL authorization to be&lt;br/&gt;
&amp;gt; on).&lt;/p&gt;

&lt;p&gt;Database shutdown is restricted to DBO when authentication AND&lt;br/&gt;
authorization are both enabled; I think because it was felt that doing&lt;br/&gt;
it for authentication only could cause problems for existing&lt;br/&gt;
apps. Since thre is no prior use here, that would not be a&lt;br/&gt;
problem. But it would be slightly asymmetrical. What do you think?&lt;/p&gt;

&lt;p&gt;The system privileges work was intended to control who can create&lt;br/&gt;
databases and would probably be required for dropping (deletion), at&lt;br/&gt;
least if we enable it for on-disk databases. But since that work is still&lt;br/&gt;
pending, I think limiting this to DBO is a good choice.&lt;/p&gt;

&lt;p&gt;I think enabling dropping of on-disk databases is interesting. What would the cons be?&lt;/p&gt;
</comment>
                            <comment id="12771475" author="rhillegas" created="Thu, 29 Oct 2009 16:51:55 +0000"  >&lt;p&gt;Thanks for working on this, Kristian. Some comments follow:&lt;/p&gt;

&lt;p&gt;&amp;gt; - the delete mechanism is generic (all storage factories that is writable). Should the feature be in-memory specific, or also be allowed for the on-disk back end?&lt;/p&gt;

&lt;p&gt;I think the feature should be designed so that it can be extended to the on-disk back end. However, I would treat on-disk back ends as a separate JIRA--particularly because they have extra problems as evidenced by your comment about the log.&lt;/p&gt;

&lt;p&gt;&amp;gt; - authorization (currently it checks if the user is the database owner if authentication is on, doesn&apos;t require SQL authorization to be on).&lt;/p&gt;

&lt;p&gt;I wonder if we need to check whether authentication is on? In an embedded application with no authentication, the default DBO will be APP. I think that in such a situation it would be attractive if APP could delete her in-memory databases. In such a situation, I think it&apos;s enough to require that there be no open connections to the database.&lt;/p&gt;

&lt;p&gt;&amp;gt; - how to control/limit the creation of in-memory databases?&lt;br/&gt;
&amp;gt;    (could be used for DoS attack on a server?)&lt;/p&gt;

&lt;p&gt;I agree that there is a DoS attack here. It&apos;s related to the DoS attack allowed by unlimited creation of on-disk databases, and compounded by the extra memory which an in-memory database chews up. The half-checked-in work on system privileges (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;) defines a Java privilege for creating databases. That privilege includes the specification of where you are allowed to create databases. I believe that we should build on that work.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12772492" author="kristwaa" created="Mon, 2 Nov 2009 11:10:39 +0000"  >&lt;p&gt;Thanks for the comments, Dag and Rick.&lt;br/&gt;
See my replies below, which address comments from both of you.&lt;/p&gt;

&lt;p&gt;(Dag)&amp;gt; SQL uses the keyword &quot;DROP&quot;, is there a reason you prefer &quot;delete&quot; over drop in the URL?&lt;br/&gt;
No, I wouldn&apos;t mind changing it to &quot;drop&quot; if that is more in line with the SQL spec. Is there something like &quot;drop database&quot; in the SQL spec?&lt;br/&gt;
Note that I don&apos;t have any plans at this time to implement a way to delete databases using SQL.&lt;/p&gt;

&lt;p&gt;(Dag)&amp;gt; ... &lt;span class=&quot;error&quot;&gt;&amp;#91;authentication and authorization&amp;#93;&lt;/span&gt; ... But it would be slightly asymmetrical. What do you think?&lt;br/&gt;
(Rick)&amp;gt; I wonder if we need to check whether authentication is on?&lt;br/&gt;
I think we need two different paths here. Assuming SQL authorization will be used to control who can delete a database in the future, what about this?&lt;br/&gt;
  if (authenticationOn &amp;amp;&amp;amp; sqlAuthorizationOn) &lt;/p&gt;
{
    checkPrivileges(); // May also want to see if the user is the DBO here, depending on implementation details.
  }
&lt;p&gt; else &lt;/p&gt;
{
    checkIsDBOwner();
  }

&lt;p&gt;Since we don&apos;t have the required functionality to use system privileges through GRANT/REVOKE yet, we can just check for DBO unconditionally as Rick suggests.&lt;br/&gt;
Note that this will allow only the DBO to delete the database. Another option is to allow everyone to delete a database if no authentication/authorization is enabled, but this is of course very liberal.&lt;/p&gt;

&lt;p&gt;(Rick)&amp;gt; ... &lt;span class=&quot;error&quot;&gt;&amp;#91;authentication&amp;#93;&lt;/span&gt; ... In such a situation, I think it&apos;s enough to require that there be no open connections to the database. &lt;br/&gt;
This doesn&apos;t happen on shutdown, does it? Why should it happen on drop/delete, in which case the data goes away anyway?&lt;br/&gt;
The only reason I can think of, is to allow the existing connections to finish their queries.&lt;br/&gt;
As an experiment, I implemented a simple mechanism to block database access. The mechanism was activated by the delete request, but could also be made available through the JDBC connection URL (would make it possible for the DBO to block access for maintenance work). My test, which ran 3 - 20 concurrent threads accessing the database to be deleted and then executing a simple query, gave much better results when the block mechanism was used. There are levels of consideration:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;wait for ongoing connection attempts to finish (with the block mechanism, new connections won&apos;t be allowed)&lt;/li&gt;
	&lt;li&gt;wait for a given time to allow &lt;span class=&quot;error&quot;&gt;&amp;#91;some&amp;#93;&lt;/span&gt; queries to complete (issue with long running queries)&lt;/li&gt;
	&lt;li&gt;wait for all connected clients to disconnect (with timeout?)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Especially ongoing connection attempts result in lots of different error messages. I&apos;ve seen the shutdown exception (which is fine, I think), NPEs, conglomerate not found exceptions, and others. It is also a question of when one should signal / perform shutdown, as this will cause the connections to be dropped at some point.&lt;/p&gt;

&lt;p&gt;(Dag)&amp;gt; I think enabling dropping of on-disk databases is interesting. What would the cons be?&lt;br/&gt;
I&apos;m thinking mostly about the security aspect. Are there other issues?&lt;br/&gt;
A possible add-on feature here would be a property disabling the JDBC delete mechanism for production systems, but this could be problematic if deleting some databases in the system should be allowed. Maybe SQL authorization could be used instead, if the drop/delete privilege can&apos;t be granted again if it has been revoked?&lt;/p&gt;

&lt;p&gt;(Rick)&amp;gt; I think the feature should be designed so that it can be extended to the on-disk back end. However, I would treat on-disk back ends as a separate JIRA - ...&lt;br/&gt;
I agree. This will require some extra code right away, because the functionality is already used internally (to re-create the service root). I know about several ways deletion can be disabled for a specific storage factory, but they all have drawbacks... Maybe there is a better way I haven&apos;t found yet, but I&apos;ll get back to the details later.&lt;/p&gt;

&lt;p&gt;(Rick)&amp;gt; ... &lt;span class=&quot;error&quot;&gt;&amp;#91;system privileges&amp;#93;&lt;/span&gt; ... That privilege includes the specification of where you are allowed to create databases.&lt;br/&gt;
Even though &quot;where&quot; isn&apos;t quite as well-defined in the in-memory back end as in the on-disk/directory back end, I think such a privilege may be enough. However, the Java security manager, or a custom one, would have to be faulted in since the in-memory back end doesn&apos;t access the virtual files through java.io.File. &lt;br/&gt;
It is not clear to me if such a privilege would allow us to differentiate between back ends, or rather subsubprotocols.&lt;br/&gt;
Would the system privileges also allow us to say who are allowed to create databases?&lt;/p&gt;


&lt;p&gt;I now have the following known tasks on my list:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add in-memory specific code required for drop&lt;/li&gt;
	&lt;li&gt;add generic code required for drop (includes URL handling)&lt;/li&gt;
	&lt;li&gt;add database access block mechanism&lt;/li&gt;
	&lt;li&gt;disable drop/delete for on-disk back end (the rest of the back ends are read only)&lt;/li&gt;
	&lt;li&gt;add drop tests (for in-memory back end primarily)&lt;/li&gt;
	&lt;li&gt;add mechanism to control / limit database creation (we can already  use the Java security manager for on-disk databases, but not for in-memory databases)&lt;br/&gt;
(- improve handling of unsuccessful boots in the in-memory storage factory (resource management issue))&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Further comments are welcome.&lt;/p&gt;</comment>
                            <comment id="12778384" author="kristwaa" created="Mon, 16 Nov 2009 16:31:17 +0000"  >&lt;p&gt;Patch 1a is a suggestion for the code required in the in-memory module to support drop database.&lt;br/&gt;
The idea is to delete all traces of the database when the storage factory is shut down  &lt;b&gt;and&lt;/b&gt; the database has been scheduled for deletion. The latter part is true if the data store has detected that the service root has been deleted.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;

&lt;p&gt;Missing pieces of code:&lt;br/&gt;
 a) Introduction and handling of new URL attribute, including a new SQLState / message. Most of this will probably go into EmbedConnection.&lt;br/&gt;
 b) Actually shutting down and deleting the database. Code will go into EmbedConnection and maybe into one of the context classes.&lt;br/&gt;
 c) Database access block mechanism (not really required to implement drop database, but not having it will make the drop database process more messy). This code will most likely go into EmbedConnection, BasicDatabase/Database and maybe BaseMonitor.&lt;/p&gt;

&lt;p&gt;I think I&apos;ll combine (a) and (b), and add (c) as a later step.&lt;/p&gt;</comment>
                            <comment id="12778960" author="kristwaa" created="Tue, 17 Nov 2009 16:13:18 +0000"  >&lt;p&gt;Patch 2a adds the generic drop mechanism. Dropping databases works with patch 2a alone, but will cause memory leaks without patch 1a.&lt;/p&gt;

&lt;p&gt;I expect there will be another revision once the patch has been reviewed. Two things I need feedback on:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;error messages. (the language of the new ones, do we need another message for the drop database operation, do we need a special message when denying the drop for non-in-memory databases etc)&lt;/li&gt;
	&lt;li&gt;to authenticate/authorize or not. Patch 1a breaks the current pattern used elsewhere, i.e. only check if the user is the DBO if both authentication and SQL authorization are enabled.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Running regression tests.&lt;br/&gt;
Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12778962" author="kristwaa" created="Tue, 17 Nov 2009 16:13:43 +0000"  >&lt;p&gt;Patches 1a and 2a ready for review.&lt;/p&gt;</comment>
                            <comment id="12781357" author="kristwaa" created="Mon, 23 Nov 2009 10:38:14 +0000"  >&lt;p&gt;Attached patch 1b and committed it to trunk with revision 883297.&lt;/p&gt;

&lt;p&gt;Patch 1b handles the removal of the data store in two places; on init or shutdown. I discovered a weakness when testing create, drop, shutdown and connect in a highly multithreaded test, where all connection attempts were made against the same database. Since the delete is a two step process from when you do File.deleteAll to StorageFactory.shutdown, there was a small window where another thread could slip in and get a handle on the data store that was just deleted.&lt;br/&gt;
In my test this didn&apos;t trigger anything else than my assert-style check in VFMemSF.shutdown, but I found it safer to deal with it. The required changes were also small.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="12781417" author="kristwaa" created="Mon, 23 Nov 2009 15:00:19 +0000"  >&lt;p&gt;Attaching patch 3a, which changes how StorageFactoryService handles canonical names.&lt;br/&gt;
I have to admit the name handling puzzles me somewhat, but I hope I got it right now. It seems that this code never expected to get canonical names from other storage factories than the default. The value passed in will have the storage factory type name, whereas the storage factory itself doesn&apos;t append it&apos;s type. With the old code, every attempt to delete a service would fail, except for when the default storage factory is used (the on-disk directory based back end).&lt;/p&gt;

&lt;p&gt;This patch caused me some trouble already, and I want to test it on Windows before I commit it. An extra pair of eyes would be good as well!&lt;br/&gt;
So far the only errors observed have been assert errors, but I haven&apos;t verified that everything works in insane mode despite the triggered asserts.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12782445" author="kristwaa" created="Wed, 25 Nov 2009 14:12:33 +0000"  >&lt;p&gt;Attached patch 3b, and committed it to trunk with revision 884105.&lt;/p&gt;

&lt;p&gt;I chose not to rename the method argument to canonicalServiceName, as I don&apos;t think this isn&apos;t strictly necessary. It would also mean that the argument names in the interface and the implementation would differ (not a problem by itself, but might cause some confusion). That said, the monitor code (and friends) is confusing on this matter - do you have to use the canonical service name, or will the code obtain the canonical service name for you? I observe that the latter is the case in many places, but I haven&apos;t gone through the code to confirm this is the principle behind the code.&lt;/p&gt;

&lt;p&gt;I need to make a few adjustments to patch 2a, and then the drop functionality will be working - although not very well in cases where there are concurrent connection attempts to the database being dropped.&lt;/p&gt;</comment>
                            <comment id="12782880" author="kristwaa" created="Thu, 26 Nov 2009 12:48:58 +0000"  >&lt;p&gt;Attached patch 2b.&lt;br/&gt;
Major changes from 2a:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adjusted test ErrorCodeTest (failed due to the newly added messages)&lt;/li&gt;
	&lt;li&gt;the requirement for the user to be the DBO when dropping is only enforced when authentication and authorization are enabled (this follows the current pattern in EmbedConnection)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Committed to trunk with revision 884542.&lt;br/&gt;
I didn&apos;t get any comments on the patch, but it&apos;s not too late to review of course &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Things to consider:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How long should we wait before dropping the database? (see the sleep in EmbedConnection)&lt;br/&gt;
   I expect this will change when the block mechanism has been implemented. The longer the wait, the higher the chance that connected clients will get a reasonable exception.&lt;/li&gt;
	&lt;li&gt;I have reused some messages, for instance if the user isn&apos;t the DBO and when trying to delete a on-disk database. Is this ok, or should I add new ones?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll continue working on the access block mechanism (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4447&quot; title=&quot;Add internal block mechanism to reject new database connections&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4447&quot;&gt;DERBY-4447&lt;/a&gt;), and the new feature has to be documented. I also think I have to do some more testing with the client driver, as I&apos;ve found at least one Jira issue indicating the error handling isn&apos;t  good enough.&lt;/p&gt;</comment>
                            <comment id="12862175" author="kristwaa" created="Thu, 29 Apr 2010 13:10:24 +0100"  >&lt;p&gt;Closing this issue.&lt;/p&gt;

&lt;p&gt;Work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4447&quot; title=&quot;Add internal block mechanism to reject new database connections&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4447&quot;&gt;DERBY-4447&lt;/a&gt; has been postponed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12439742">DERBY-4432</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12459523">DERBY-4590</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12446642">DERBY-4525</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12423582" name="derby-4428-0a-preview_patch.diff" size="58951" author="kristwaa" created="Thu, 29 Oct 2009 15:03:56 +0000"/>
                            <attachment id="12425082" name="derby-4428-1a-in_memory_specific_delete_code.diff" size="5606" author="kristwaa" created="Mon, 16 Nov 2009 16:31:17 +0000"/>
                            <attachment id="12425083" name="derby-4428-1a-in_memory_specific_delete_code.stat" size="137" author="kristwaa" created="Mon, 16 Nov 2009 16:31:17 +0000"/>
                            <attachment id="12425824" name="derby-4428-1b-in_memory_specific_delete_code.diff" size="8548" author="kristwaa" created="Mon, 23 Nov 2009 10:38:14 +0000"/>
                            <attachment id="12425232" name="derby-4428-2a-generic_db_drop.diff" size="14118" author="kristwaa" created="Tue, 17 Nov 2009 16:13:18 +0000"/>
                            <attachment id="12426218" name="derby-4428-2b-generic_db_drop.diff" size="14926" author="kristwaa" created="Thu, 26 Nov 2009 12:48:58 +0000"/>
                            <attachment id="12425843" name="derby-4428-3a-canonical_name_handling.diff" size="5803" author="kristwaa" created="Mon, 23 Nov 2009 15:00:19 +0000"/>
                            <attachment id="12426104" name="derby-4428-3b-canonical_name_handling.diff" size="4832" author="kristwaa" created="Wed, 25 Nov 2009 14:12:32 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12440014">DERBY-4436</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 29 Oct 2009 15:53:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31234</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38140</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>