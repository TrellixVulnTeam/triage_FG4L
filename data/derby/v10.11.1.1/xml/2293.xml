<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2293/DERBY-2293.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2293] convert batchUpdate.java to junit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2293</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Convert the test jdbcapi.batchUpdate.java to junit framework&lt;/p&gt;</description>
                <environment></environment>
        <key id="12362020">DERBY-2293</key>
            <summary>convert batchUpdate.java to junit</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="myrna">Myrna van Lunteren</assignee>
                                    <reporter username="myrna">Myrna van Lunteren</reporter>
                        <labels>
                    </labels>
                <created>Mon, 5 Feb 2007 17:57:37 +0000</created>
                <updated>Sun, 11 Feb 2007 18:15:55 +0000</updated>
                            <resolved>Sat, 10 Feb 2007 01:28:34 +0000</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12470304" author="myrna" created="Mon, 5 Feb 2007 18:16:29 +0000"  >&lt;p&gt;Attaching a patch - first attempt to convert the test jdbcapi/batchUpdate.java.&lt;/p&gt;

&lt;p&gt;The new test jdbcapi/BatchUpdateTest.java is not quite ready for commit...&lt;/p&gt;

&lt;p&gt;I&apos;d like reviewers especially to give input on:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There is a method, verifyBatchUpdateCounts, which takes 2 arrays, and compares both the length and the values resulting from the *.executeBatch() statements.&lt;br/&gt;
However, in most of the test I used a two-step assertEquals approach that is closer to what was done in the original test, it was easier to put in that way. But which approach is easier to the reader?&lt;/li&gt;
	&lt;li&gt;I could not use the BaseJDBCTestCase.assertStatementError(..) method for the Batch statements, so I maintained the try-catch blocks. However, I worry that if there is no Exception, there is no assert. The original test put statements like this: passed=false; below the statements expecting to fail, and that value gets evaluated later. Is that the approach I should take?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12470316" author="myrna" created="Mon, 5 Feb 2007 19:07:01 +0000"  >&lt;p&gt;oops, I must have not built after my last change. The test in the patch fails...Fixing...&lt;/p&gt;</comment>
                            <comment id="12470340" author="djd" created="Mon, 5 Feb 2007 20:11:35 +0000"  >&lt;p&gt;Mryna&amp;gt; I could not use the BaseJDBCTestCase.assertStatementError(..) method for the Batch statements, so I maintained the try-catch blocks.&lt;/p&gt;

&lt;p&gt;What&apos;s the issue with not being able to use assertStatementError? &lt;br/&gt;
Maybe there&apos;s a new utility assert method you could add so that other tests could benefit?&lt;/p&gt;</comment>
                            <comment id="12470362" author="myrna" created="Mon, 5 Feb 2007 21:29:06 +0000"  >&lt;p&gt;It seemed to me the current assertStatementError implementations expect a (prepared/callable/)statement to execute() (or executeUpdate()). But executeBatch() cannot be executed that way.&lt;/p&gt;

&lt;p&gt;I guess I could make a assertBatchExecuteError, but I thought it would not be very widely applicable. Now I think it makes sense to create one, if only in this test. I&apos;ll modify the test. If it turns out the method is more widely useable, it can be moved into one of the junit super/utility/setup classes later.&lt;/p&gt;</comment>
                            <comment id="12470489" author="kristwaa" created="Tue, 6 Feb 2007 09:05:09 +0000"  >&lt;p&gt;Wow, this test was big! Good work on converting it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regarding your worry about the try/catch and no exception, maybe you can use fail(&quot;Some informative message&quot;)?&lt;br/&gt;
This way you don&apos;t have to set a flag and check it later.&lt;/p&gt;

&lt;p&gt;Personally, I think using &apos;verifyBatchUpdateCounts&apos; looks better. Maybe you could even rename it to something like &apos;assertBatchUpdateCounts&apos; to clearly signal the intention. If needed, it could easily be moved into a super/utility class.&lt;/p&gt;

&lt;p&gt;Comments/questions to BatchUpdateTest.java:&lt;br/&gt;
a) Missing header/licence.&lt;br/&gt;
b) testStatementBatchUpdateNegative: the two calls to getConnection will return the same connection. Is this intended?&lt;/p&gt;

&lt;p&gt;I have a few nits as well:&lt;br/&gt;
1) There are a few tabs in the diff.&lt;br/&gt;
2) Typo in the class JavaDoc: fo -&amp;gt; of&lt;br/&gt;
3) Lines longer than 80 characters.&lt;br/&gt;
4) resulti -&amp;gt; result in verifyBatchUpdateCounts&lt;br/&gt;
5) Out of curiosity (first catch in runStatementWithResultSetBatch):&lt;br/&gt;
            if (updateCount != null) &lt;/p&gt;
{
                assertEquals(
                        &quot;Select is the first statement in the batch, so there should not be any update count&quot;,
                        0, updateCount.length);
            }
&lt;p&gt;  Can we assert null/not null here instead, or does this vary with the exception?&lt;/p&gt;

&lt;p&gt;If this test had been written from scratch, I would have split it up into more independent fixtures/test methods. Since it has been converted, and because of its size, I think the current approach is okay.&lt;br/&gt;
The point of splitting it up, is to better isolate the thing that is failing (and to see that other things are not failing).&lt;/p&gt;

&lt;p&gt;The class is big, and I had to stop reviewing somewhere in the middle. There is more to be reviewed for the willing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;With &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2293&quot; title=&quot;convert batchUpdate.java to junit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2293&quot;&gt;&lt;del&gt;DERBY-2293&lt;/del&gt;&lt;/a&gt;_20070205.diff &apos; I get this result:&lt;br/&gt;
Tests run: 10,  Failures: 4,  Errors: 1&lt;/p&gt;</comment>
                            <comment id="12470622" author="djd" created="Tue, 6 Feb 2007 16:07:04 +0000"  >&lt;p&gt;Krustian&amp;gt; Maybe you could even rename it to something like &apos;assertBatchUpdateCounts&apos; to clearly signal the intention. &lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;&apos;assert&apos; is the correct terminology and will follow the standard JUnit pattern, thus be understandable by most folks.&lt;/p&gt;</comment>
                            <comment id="12470831" author="myrna" created="Wed, 7 Feb 2007 07:33:55 +0000"  >&lt;p&gt;I&apos;m attaching an updated patch.&lt;br/&gt;
I&apos;ve tried to address the most of the comments (Thx for the review!):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;limited the length of text (and code too, for good measure)&lt;/li&gt;
	&lt;li&gt;filtered out repeating code to an assertBatchExecuteError method&lt;/li&gt;
	&lt;li&gt;renamed verifyBatchUpdateCounts to assertBatchUpdateCounts&lt;/li&gt;
	&lt;li&gt;reworded comment containing resulti&lt;/li&gt;
	&lt;li&gt;added license&lt;/li&gt;
	&lt;li&gt;set lock time out&lt;/li&gt;
	&lt;li&gt;revamped sections to use &quot;  new int[] 
{1,1,1}
&lt;p&gt; &quot; constructs to make expected values easier to recognize&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;corrected use of same connection in transaction tests&lt;/li&gt;
	&lt;li&gt;made test work with network server as well as embedded&lt;br/&gt;
  This last one was not trivial because network server continues after an error,&lt;br/&gt;
  whereas embedded stops processing. So I&apos;ve added if (usingEmbedded()&lt;br/&gt;
  and usingDerbyNetClient() sections, but seeing how little batch testing was&lt;br/&gt;
  occurring with networkserver/client, I thought it was worth it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Also updated my tree so I could remove the original test from Dan&apos;s JavaHarnessAdapter.&lt;/p&gt;

&lt;p&gt;I think that&apos;s it.&lt;/p&gt;

&lt;p&gt;Test passes by itself using junit.textui.TestRunner.  I will run suites.All.&lt;/p&gt;

&lt;p&gt;Reviews are welcome.&lt;/p&gt;</comment>
                            <comment id="12470832" author="myrna" created="Wed, 7 Feb 2007 07:37:34 +0000"  >&lt;p&gt;_20070206_2.diff is the absolute latest cut. I think I added a slightly older one before.&lt;/p&gt;</comment>
                            <comment id="12470986" author="djd" created="Wed, 7 Feb 2007 15:16:00 +0000"  >&lt;p&gt;Looks good in general, some potential cleanup, I think these could all be applied once this patch is committed.&lt;/p&gt;

&lt;p&gt;TestConfiguration.defaultSuite already adds CleanDatabaseTestSetup so there&apos;s no need to add another one.&lt;/p&gt;

&lt;p&gt;For the methods that take a connection, such as runStatementNonBatchStuffInBatch and only ever use the default connection it might be better to not have them pass a connection. They can use the utility method commit() or getConnection() if they need access to the connection. The code then becomes like the general style of other tests and it becomes obvious to the reader that the standard default connection is being used. Then of course the run methods start to look a lot like individual test fixtures, which they really are, so it might make sense to convert them them all the way to testXXX methods.&lt;/p&gt;

&lt;p&gt;There is no need to have a assertBatchExecuteError() method that takes a PreparedStatement. Since a PreparedStatement is a Statement and the executeBatch()  method is defined on Statement, the code can use the assertBatchExecuteError that takes a Statement.&lt;/p&gt;

&lt;p&gt;In cases where you need to have a try/catch block like runTransactionErrorBatch()  I think it is clearer and better if the try catch block only encloses the statement you expect to fail. So I think in this case it would be just the statement&lt;/p&gt;

&lt;p&gt;updateCount = stmt2.executeBatch();&lt;/p&gt;

&lt;p&gt;With the code as it is, if an earlier statement in the block incorrectly fails with a timeout then there is a chance the test will pass even though it should fail.&lt;/p&gt;

&lt;p&gt;As an alternative to:&lt;br/&gt;
        } catch (SQLException sqle) &lt;/p&gt;
{
            /* Ensure the exception is time out while getting lock */
            assertSQLState(&quot;40XL1&quot;,sqle);
            assertTrue(&quot;we should get a BatchUpdateException&quot;, 
                (sqle instanceof BatchUpdateException));

one could just catch BatchUpdateException
       }
&lt;p&gt; catch (BatchUpdateException sqle) {&lt;br/&gt;
            /* Ensure the exception is time out while getting lock */&lt;br/&gt;
            assertSQLState(&quot;40XL1&quot;,sqle);&lt;/p&gt;

&lt;p&gt;Any non-batch exception will continue to fail the test.&lt;/p&gt;





</comment>
                            <comment id="12471064" author="myrna" created="Wed, 7 Feb 2007 18:46:04 +0000"  >&lt;p&gt;committed patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2293&quot; title=&quot;convert batchUpdate.java to junit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2293&quot;&gt;&lt;del&gt;DERBY-2293&lt;/del&gt;&lt;/a&gt;_2007020_2.diff with revision 504641, see  &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=504641&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=504641&lt;/a&gt;.&lt;br/&gt;
I will do a next pass to address Dan&apos;s review comments.&lt;/p&gt;</comment>
                            <comment id="12471568" author="myrna" created="Fri, 9 Feb 2007 02:59:28 +0000"  >&lt;p&gt;New patch that does the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;does away with all passed on conns and stmts, renames all run* methods to test*, and identify them at the top of the test as fixtures.&lt;/li&gt;
	&lt;li&gt;reworked the suite(), and setUp() methods so that the tables are created once, and all records get deleted from t1 in the setUp.&lt;/li&gt;
	&lt;li&gt;removed the tearDown() (as a consequence not needed anymore)&lt;/li&gt;
	&lt;li&gt;removed the superfluous assertBatchExecuteError for preparedStatements.&lt;br/&gt;
  only difference was in the message, so adjusted that to be more generic.&lt;/li&gt;
	&lt;li&gt;tightened the try/catch blocks&lt;/li&gt;
	&lt;li&gt;catching BatchUpdateExceptions rather than SQLExceptions where applicable&lt;/li&gt;
	&lt;li&gt;suddenly t1 could get dropped in the two transaction methods/fixtures, so re-enabled them for network server.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And removed the extra call in jdbcapi/_Suite.java. (Once is enough, I had put it in for testing purposes and had forgotten to remove it).&lt;/p&gt;

&lt;p&gt;Review is welcome.&lt;/p&gt;</comment>
                            <comment id="12471584" author="djd" created="Fri, 9 Feb 2007 04:30:07 +0000"  >&lt;p&gt;Comments on the decorateSQL() method.&lt;/p&gt;

&lt;p&gt;The method is designed to allow the test writer to just implement the SQL DDL and any other setup such as inserting rows. Thus it already puts the connection into auto commit  false mode, provides a Statement object and commits the transaction for you. Thus an implementation of a decorateSQL method need not do those things. This is documented in the javadoc for CleanDatabaseTestSetup and CleanDatabaseTestSetup.decorateSQL. If the current documentation is unclear or could use more information, please improve it.&lt;/p&gt;

&lt;p&gt;Performing assertions in a setup method or a decorator setup method is not really the JUnit style. setUp methods are for setting up to run a test, the test method is for performing the asserts. If a decorator setUp fails then I think none of its fixtures will be run. If a test for DDL in a batch is needed then have an explicit testDDLInBatch method.&lt;/p&gt;

&lt;p&gt;An FYI on connection handling in BaseJDBCTestCase. The getConnection() method returns a single connection for the lifetime of an instance of the class (assuming the connection is not closed until super.tearDown() is called). Thus the connection used in the setUp() method is the same as the connection in the fixture method and the same as the one in the tearDown method. Thus, in this case, since the setUp method puts the connection in autocommit false mode, there is no need for each test fixture to also do it. Though it does not harm.&lt;br/&gt;
The BaseJDBCTestCase also provides the abilty for a test class to put all of its connections in a consistent initial state, by having the test class implement the method initializeConnection. See the javadoc in BaseJDBCTestCase. Thus one could perform the setAutoCommit(false) in that method and then be assured that every connection used by a test was in auto commit false mode.&lt;/p&gt;</comment>
                            <comment id="12471890" author="myrna" created="Sat, 10 Feb 2007 01:24:43 +0000"  >&lt;p&gt;Attaching a patch that differs from the one from yesterday in that:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the decorator now creates tables using statements &amp;amp; there is a separate little fixture to test create tables in batch (called testMinimalDDLInBatch)&lt;/li&gt;
	&lt;li&gt;the decorator doesn&apos;t create its own statement but uses the one passed in&lt;/li&gt;
	&lt;li&gt;the setUp() now relies on the normal connection and sets AutoCommit to false&lt;/li&gt;
	&lt;li&gt;all superfluous getConnection().setAutocommit(false) statements have been removed from individual fixtures&lt;/li&gt;
	&lt;li&gt;all superfluous s.execute(&quot;delete from t1&quot;), which is done in the setUp(), have been removed from individual fixtures.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I tested just the jdbcapi._Suite again and all still works.&lt;br/&gt;
I&apos;ll commit this soon.&lt;/p&gt;</comment>
                            <comment id="12471891" author="myrna" created="Sat, 10 Feb 2007 01:28:34 +0000"  >&lt;p&gt;committed all I intend to do on this with revision 505603. See: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=505603&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=505603&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12472120" author="djd" created="Sun, 11 Feb 2007 18:15:55 +0000"  >&lt;p&gt;In trying to add the JDBCHarnessJavaTets I was hitting some failures in jdbcapi._Suite with the network server not coming up in sufficient time. In the past these have been due to tests not closing their statement objects. Cleaned up BatchUpdateTest by closing its statements. Committed revision 506082&lt;br/&gt;
(ps. I hit the failures about 50% of the time running jdbcapi._Suite on windows, I still see these failures with the changes but it removes BatchUpdateTest as a possible culprit and is a good thing for the test).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12350364" name="DERBY-2293_20070205.diff" size="153559" author="myrna" created="Mon, 5 Feb 2007 18:16:29 +0000"/>
                            <attachment id="12350363" name="DERBY-2293_20070205.stat" size="621" author="myrna" created="Mon, 5 Feb 2007 18:16:29 +0000"/>
                            <attachment id="12350527" name="DERBY-2293_20070206.diff" size="157948" author="myrna" created="Wed, 7 Feb 2007 07:33:55 +0000"/>
                            <attachment id="12350526" name="DERBY-2293_20070206.stat" size="971" author="myrna" created="Wed, 7 Feb 2007 07:33:55 +0000"/>
                            <attachment id="12350528" name="DERBY-2293_20070206_2.diff" size="158284" author="myrna" created="Wed, 7 Feb 2007 07:37:34 +0000"/>
                            <attachment id="12350727" name="DERBY-2293_20070208.diff" size="62672" author="myrna" created="Fri, 9 Feb 2007 02:59:28 +0000"/>
                            <attachment id="12350811" name="DERBY-2293_20070209.diff" size="63138" author="myrna" created="Sat, 10 Feb 2007 01:24:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 5 Feb 2007 20:11:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30365</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy13e7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40200</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>