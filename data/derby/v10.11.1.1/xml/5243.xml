<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5243/DERBY-5243.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5243] assert failure in test testRAFReadWriteMultipleThreads: interrupted flag cleared</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5243</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is another instance of an interrupted thread losing its interrupted flag after calling Derby, but I believe this is distinct from other we have seen.&lt;/p&gt;

&lt;p&gt;1) testRAFReadWriteMultipleThreads(org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest)java.sql.SQLException: The exception &apos;junit.framework.AssertionFailedError: WorkerThread 0&apos; was thrown while evaluating an expression.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.testRAFReadWriteMultipleThreads(InterruptResilienceTest.java:532)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;WorkerThread 0: junit.framework.AssertionFailedError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	... 45 more&lt;br/&gt;
Caused by: junit.framework.AssertionFailedError: WorkerThread 0&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.fail(BaseTestCase.java:771)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest.tstRAFReadWriteMultipleThreads(InterruptResilienceTest.java:323)&lt;br/&gt;
	at org.apache.derby.exe.ac070a00b0x0130x06edxad12x000062ebfce90.g0(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	... 41 more&lt;br/&gt;
Caused by: junit.framework.AssertionFailedError&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:430)&lt;/p&gt;</description>
                <environment>Linux, Sun JDK 1.4.2u25 and JDK 5. Not seen or JDK 6 or 7, or other OS than Linux</environment>
        <key id="12508069">DERBY-5243</key>
            <summary>assert failure in test testRAFReadWriteMultipleThreads: interrupted flag cleared</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 May 2011 16:09:13 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:52 +0100</updated>
                            <resolved>Tue, 5 Jul 2011 13:18:33 +0100</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>SQL</component>
                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13037991" author="dagw" created="Mon, 23 May 2011 16:25:31 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Edited: first analysis was slightly wrong&amp;#93;&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;I did some tracing of this, and I suspect to be a bug in the JDK (1.4.2 and 5). In this case, after we have seen an interrupt exception (08000) due seeing the thread interrupted in BasicNoPutResultSetImpl#checkCancellationFlag, we want to reestablish the connection and reprepare the statement test, the flag should still be set after the exception was received.&lt;/p&gt;

&lt;p&gt;In the test code, the assert is made after we have performed those two operations (reopen, prepare) have been performed, but by adding more trace I can see it already cleared when we start handling the exception: It gets cleared while the thread is still inside EmbedConnection.movePosition&apos;s call to handleException. &lt;/p&gt;

&lt;p&gt;While it is processing that (writing to derby.log among other things), I can see in my trace that another thread gets interrupted and throws in the same way, which may or may not be relevant. When i next see a trace from the first thread, its flag has been cleared. None of the threads have been involved in NIO during this time inside handleException, although both could have received yet another interrupt. But that shouldn&apos;t clear the flag, surely. The Thread#isInterrupted method is a native method, which could explain why we see this only on Linux.&lt;/p&gt;</comment>
                            <comment id="13037993" author="dagw" created="Mon, 23 May 2011 16:28:40 +0100"  >&lt;p&gt;Btw, it is easily easily reproduced on the indicated plaftforms, ca 20% of runs of InterruptResilienceTest on my box (Ubuntu on VirtualBox).&lt;/p&gt;</comment>
                            <comment id="13038278" author="dagw" created="Mon, 23 May 2011 23:20:11 +0100"  >&lt;p&gt;Using &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5243&quot; title=&quot;assert failure in test testRAFReadWriteMultipleThreads: interrupted flag cleared&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5243&quot;&gt;&lt;del&gt;DERBY-5243&lt;/del&gt;&lt;/a&gt;-instrument, a typical trace looks like this:&lt;/p&gt;

&lt;p&gt;Thread           |                        code location     |    isInterrupted()&lt;br/&gt;
-----------------------------------------------------------------------------&lt;br/&gt;
..&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 0.1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 0.2 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 0.3 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 0.1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 0.2 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 0.3 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 0.1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 0.2 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 0.3 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; stackTrace 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; stackTrace 1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; stackTrace 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; stackTrace 1 : true                  Still OK&lt;/p&gt;

&lt;p&gt;  &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 1 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; stackTrace 0 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; stackTrace 1 : true&lt;br/&gt;
  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; &lt;/p&gt;

&lt;p&gt;  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; stackTrace 2 : false                 Cleared!&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; CM.cleanuponerror 2 : false&lt;br/&gt;
  Thread&lt;a href=&quot;#6,5,main&quot;&gt;WorkerThread. Thread#6,5,main&lt;/a&gt; exitting!&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; stackTrace 2 : false&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; CM.cleanuponerror 2 : false&lt;br/&gt;
  Thread&lt;a href=&quot;#5,5,main&quot;&gt;WorkerThread. Thread#5,5,main&lt;/a&gt; exitting!&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; stackTrace 2 : true&lt;br/&gt;
  Thread&lt;a href=&quot;#4,5,main&quot;&gt;WorkerThread. Thread#4,5,main&lt;/a&gt; CM.cleanuponerror 2 : true&lt;/p&gt;

&lt;p&gt;We see that the flag is cleared when the code for thread 6 reaches&lt;br/&gt;
tracepoint &quot;stackTrace 2&quot;. The only thing the thread has done in the&lt;br/&gt;
meantime is call Throwable.printStackTrace(PrintWriter). So the&lt;br/&gt;
ther eis a possibility that the interrupt on thread 5 must have&lt;br/&gt;
led to thread 6&apos;s flag being cleared.&lt;/p&gt;</comment>
                            <comment id="13038904" author="dagw" created="Wed, 25 May 2011 02:12:15 +0100"  >&lt;p&gt;Just to make sure I am not fooled by the way the threads print their traces, I made another run labelling each line with System.nanoTime and sorted the resulting lines. It conformed the interleaving see above, cf. attachement nanoTime.log&lt;/p&gt;</comment>
                            <comment id="13040496" author="dagw" created="Sat, 28 May 2011 00:19:58 +0100"  >&lt;p&gt;Uploading a patch which moves the setting of the interrupted flag to just before CONN_INTERRUPT exception is thrown as an SQLException back to the user application. Previously, we set the interrupted flag when we first threw the internal StandardException. The new placement means we are done with IO to derby.log which may be behind the problem we are seeing. I ran this 100 times on Linux/JDK 5 without seeing the error.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="13041377" author="dagw" created="Tue, 31 May 2011 03:08:55 +0100"  >&lt;p&gt;Regressions ran ok.&lt;/p&gt;</comment>
                            <comment id="13041667" author="dagw" created="Tue, 31 May 2011 17:47:36 +0100"  >&lt;p&gt;Committed as svn 1129797.&lt;/p&gt;</comment>
                            <comment id="13059834" author="knutanders" created="Tue, 5 Jul 2011 11:56:05 +0100"  >&lt;p&gt;Is there more work planned on this issue, or could it be resolved?&lt;/p&gt;</comment>
                            <comment id="13059854" author="dagw" created="Tue, 5 Jul 2011 13:19:12 +0100"  >&lt;p&gt;No, so I am resolving it.&lt;/p&gt;</comment>
                            <comment id="13059858" author="dagw" created="Tue, 5 Jul 2011 13:25:07 +0100"  >&lt;p&gt;The patch was backported to the 10.8 branch as svn 1129799.&lt;/p&gt;</comment>
                            <comment id="13685384" author="knutanders" created="Mon, 17 Jun 2013 10:19:52 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12480718" name="DERBY-5243-1.diff" size="2704" author="dagw" created="Sat, 28 May 2011 00:19:58 +0100"/>
                            <attachment id="12480719" name="DERBY-5243-1.stat" size="294" author="dagw" created="Sat, 28 May 2011 00:19:58 +0100"/>
                            <attachment id="12480171" name="DERBY-5243-instrument.diff" size="6118" author="dagw" created="Mon, 23 May 2011 23:22:42 +0100"/>
                            <attachment id="12480172" name="DERBY-5243-instrument.stat" size="251" author="dagw" created="Mon, 23 May 2011 23:22:42 +0100"/>
                            <attachment id="12480349" name="nanotime.log" size="2387" author="dagw" created="Wed, 25 May 2011 02:15:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Jul 2011 10:56:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24730</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ezb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36245</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>