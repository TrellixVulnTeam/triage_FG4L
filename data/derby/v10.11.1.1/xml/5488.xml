<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5488/DERBY-5488.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5488] Add remaining JDBC 4.1 bits which did not appear in the Java 7 javadoc.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5488</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In addition to the JDBC 4.1 bits which were visible in the Java 7 javadoc, a couple other items appear in the JDBC 4.1 Maintenance Review spec. This spec has been published on the JCP website at &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/jdbc-4_1-mrel-eval-spec/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/otndocs/jcp/jdbc-4_1-mrel-eval-spec/index.html&lt;/a&gt;. I will attach a functional spec for the remaining bits.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12529525">DERBY-5488</key>
            <summary>Add remaining JDBC 4.1 bits which did not appear in the Java 7 javadoc.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Mon, 31 Oct 2011 18:24:25 +0000</created>
                <updated>Fri, 14 Jun 2013 20:22:07 +0100</updated>
                            <resolved>Fri, 14 Jun 2013 20:21:56 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13140407" author="rhillegas" created="Mon, 31 Oct 2011 18:25:30 +0000"  >&lt;p&gt;Attaching a functional spec for the additional bits: JDBC_4.1_Supplement.html&lt;/p&gt;</comment>
                            <comment id="13140433" author="kristwaa" created="Mon, 31 Oct 2011 18:44:47 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;You say the &quot;New String Function Syntax&quot; is meaningless for Derby. Is this true with respect to portability too?&lt;br/&gt;
I know I&apos;m being lazy, but I hope you already know the spec well enough to answer the question &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13140471" author="rhillegas" created="Mon, 31 Oct 2011 19:19:33 +0000"  >&lt;p&gt;Hi Kristian,&lt;/p&gt;

&lt;p&gt;Can you clarify what portability issues you are concerned about? It seems to me that octets are only applicable to languages (like C) which represent strings as arrays of 8-bit bytes.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13140530" author="kristwaa" created="Mon, 31 Oct 2011 20:35:50 +0000"  >&lt;p&gt;I was thinking about the case where you use the escape syntax to specify that you want to use character lengths. If this is added to make database X, which also supports octets, use character lengths, will the application work if database X is replaced with Derby? Or will Derby choke on that optional argument?&lt;/p&gt;

&lt;p&gt;I&apos;m not saying we should change whatever we have in Derby, I&apos;m trying to understand the expected behavior.&lt;/p&gt;</comment>
                            <comment id="13141226" author="rhillegas" created="Tue, 1 Nov 2011 15:13:20 +0000"  >&lt;p&gt;Thanks for helping me puzzle through these issues, Kristian. The default behavior of these methods is to measure positions and lengths in characters (I have just confirmed this with JDBC spec lead Lance Andersen). That&apos;s what Derby does already and that seems to me to be the portable usage. What the new, optional arguments let you do is ask the database to measure positions and lengths in octets. I think that octet-lengths are not likely to be portable. That is because the octet-lengths will vary depending on whether the engine code is written in Java or C. For C databases, octet-lengths will vary depending on the default encoding for the engine. I think we have a good portability story here. Thanks.&lt;/p&gt;</comment>
                            <comment id="13141468" author="rhillegas" created="Tue, 1 Nov 2011 19:05:07 +0000"  >&lt;p&gt;Attaching derby-5488-01-aa-objectMappingAndConversion.diff. This patch implements the new object mappings and conversions described by the functional spec. I will run full regression tests.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Adds new mappings and conversions to the embedded JDBC driver.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/CrossConverters.java&lt;/p&gt;


&lt;p&gt;Adds new mappings and conversions to the network JDBC driver.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java&lt;/p&gt;

&lt;p&gt;Adds new tests to verify the mappings and conversions.&lt;/p&gt;</comment>
                            <comment id="13141645" author="rhillegas" created="Tue, 1 Nov 2011 21:49:50 +0000"  >&lt;p&gt;Tests passed for me except for the trigger-related errors in the upgrade tests we have been seeing on the trunk for a while.&lt;/p&gt;</comment>
                            <comment id="13142044" author="knutanders" created="Wed, 2 Nov 2011 11:05:42 +0000"  >&lt;p&gt;+        } else if (source instanceof java.math.BigInteger) &lt;/p&gt;
{
+            return setObject(targetType, ((java.math.BigInteger) source).longValue() );

+                }
&lt;p&gt; else if (x instanceof java.math.BigInteger) {&lt;br/&gt;
+                    setLong(parameterIndex, ((java.math.BigInteger) x).longValue() );&lt;/p&gt;

&lt;p&gt;What if the BigInteger contains a number greater than Long.MAX_VALUE or less than Long.MIN_VALUE? Should we convert it to a BigDecimal instead of a Long in that case?&lt;/p&gt;</comment>
                            <comment id="13142270" author="rhillegas" created="Wed, 2 Nov 2011 16:40:11 +0000"  >&lt;p&gt;Thanks for taking a look at the patch, Knut. I think I will check it in as is and then we can sand down the behavior of setObject( BigInteger ) in a follow-on patch. I will post some thoughts after consulting the experts.&lt;/p&gt;</comment>
                            <comment id="13142273" author="rhillegas" created="Wed, 2 Nov 2011 16:41:53 +0000"  >&lt;p&gt;Committed derby-5488-01-aa-objectMappingAndConversion.diff at subversion revision 1196680.&lt;/p&gt;</comment>
                            <comment id="13142496" author="rhillegas" created="Wed, 2 Nov 2011 20:42:56 +0000"  >&lt;p&gt;Attaching derby-5488-02-aa-fixBigInteger.diff. This patch corrects the behavior of setObject( int, BigInteger ). I will run tests.&lt;/p&gt;

&lt;p&gt;The overflow/underflow/truncation behavior of setObject() is not clearly documented by the JDBC spec. Lance Andersen thinks that this might be addressed in JDBC 4.2, the next rev of the spec which will accompany Java 8.&lt;/p&gt;

&lt;p&gt;In the meantime, I have let the following principles guide the revised implementation of setObject( int, BigInteger ):&lt;/p&gt;

&lt;p&gt;1) Overflow/underflow/truncation should behave as it does for other numeric objects.&lt;/p&gt;

&lt;p&gt;2) BigInteger should not be less capable than the corresponding BigDecimal for the same integer value.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Fix for embedded JDBC driver.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/CrossConverters.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;/p&gt;

&lt;p&gt;Fix for network JDBC driver.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java&lt;/p&gt;

&lt;p&gt;Additional test case to verify overflow/underflow/truncation behavior.&lt;/p&gt;</comment>
                            <comment id="13142938" author="knutanders" created="Thu, 3 Nov 2011 08:08:57 +0000"  >&lt;p&gt;Thanks, Rick. If I understand the new patch correctly, setObject(x, new BigInteger(&quot;123&quot;)) will stop working on CDC/FP because the conversion code is moved from EmbedPreparedStatement to EmbedPreparedStatement20, right? That&apos;s probably fine, since this conversion is not defined by JSR-169, just wanted to confirm that I&apos;ve understood correctly.&lt;/p&gt;</comment>
                            <comment id="13143060" author="rhillegas" created="Thu, 3 Nov 2011 12:10:14 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;This is my understanding of the behavior of setObject( int, BigInteger ) on CDC/FP 1.1:&lt;/p&gt;

&lt;p&gt;1) It does not work today.&lt;/p&gt;

&lt;p&gt;2) It did work in the first rev of the patch.&lt;/p&gt;

&lt;p&gt;3) It does not work in the second patch.&lt;/p&gt;

&lt;p&gt;Since the behavior of setObject( int, BigInteger ) depends on the behavior of setObject( int, BigDecimal ) in this implementation, I moved the real logic into EmbedPreparedStatement20.setObjectConvert(), where BigDecimal is handled. It seems to me that the logic in that method could be moved into EmbedPreparedStatement.setObject(). Then both setObject( int, BigDecimal ) and setObject( int, BigInteger ) would work on CDC/FP 1.1.&lt;/p&gt;

&lt;p&gt;I could do that in a follow-on patch. Does that sound reasonable?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13143185" author="knutanders" created="Thu, 3 Nov 2011 14:08:26 +0000"  >&lt;p&gt;If that works, it sounds reasonable (and more consistent). If not, I think it&apos;s fine to leave it as it is. Since EmbedPreparedStatement169 does not implement setBigDecimal(), some more changes may be necessary.&lt;/p&gt;

&lt;p&gt;By the way, does setObject(BigInteger) work on CallableStatement now? If we use the setObjectConvert() override, I think we need an override in EmbedCallableStatement20 too. If we push the logic down to EmbedPreparedStatement again, it should probably work automatically. Might be worth a test case to verify that both PreparedStatement and CallableStatement work correctly, though.&lt;/p&gt;</comment>
                            <comment id="13143215" author="rhillegas" created="Thu, 3 Nov 2011 14:51:47 +0000"  >&lt;p&gt;Thanks, Knut. I will look into moving the logic out of EmbedPreparedStatement20 into EmbedPreparedStatement.&lt;/p&gt;</comment>
                            <comment id="13143217" author="rhillegas" created="Thu, 3 Nov 2011 14:53:51 +0000"  >&lt;p&gt;I saw lots of errors in the regression tests but they do not seem to be related to this patch. The errors were of two types:&lt;/p&gt;

&lt;p&gt;1) The pre-existing trigger-related errors in the upgrade tests.&lt;/p&gt;

&lt;p&gt;2) Problems in spawning another JVM in the SecureServerTests and the  Replication tests. I think that something has changed in our JVM-spawning logic which breaks on my preview JDK 7 on the Mac. I will log a JIRA to track this.&lt;/p&gt;</comment>
                            <comment id="13143229" author="rhillegas" created="Thu, 3 Nov 2011 15:04:40 +0000"  >&lt;p&gt;Committed derby-5488-02-aa-fixBigInteger.diff at subversion revision 1197172.&lt;/p&gt;</comment>
                            <comment id="13143289" author="rhillegas" created="Thu, 3 Nov 2011 16:33:29 +0000"  >&lt;p&gt;Attaching derby-5488-03-ac-moveDecimalSetterGetterAndTest.diff. This moves the get/setBigDecimal() logic out of the JDBC 2.0 implementation into the JSR 169 implementation. I have added a test to verify that setObject( x, BigDecimal ) and setObject( x, BigInteger ) behave correctly for CallableStatements as well as PreparedStatements. I am running tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CallableTest.java&lt;/p&gt;</comment>
                            <comment id="13143432" author="rhillegas" created="Thu, 3 Nov 2011 18:44:15 +0000"  >&lt;p&gt;Tests passed cleanly me for except for the trigger-related upgrade test failures. Committed at subversion revision 1197264.&lt;/p&gt;</comment>
                            <comment id="13143876" author="knutanders" created="Fri, 4 Nov 2011 09:50:30 +0000"  >&lt;p&gt;Thanks, the changes look good to me. I thought perhaps these changes might make ParameterMappingTest work on CDC/FP now, so I enabled the test and ran it on phoneME and on Oracle Java ME Embedded Client. It still failed, but now the failures were NullPointerExceptions. For example:&lt;/p&gt;

&lt;p&gt;1) test_jdbc4_1_objectMappings(org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest)java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.noStateChangeException(EmbedResultSet.java:4472)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBigDecimal(EmbedPreparedStatement.java:470)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(EmbedPreparedStatement.java:1356)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.test_jdbc4_1_objectMappings(ParameterMappingTest.java:958)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at sun.misc.CVM.runMain(CVM.java:555)&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at java.math.BigDecimal.compareTo(BigDecimal.java:788)&lt;br/&gt;
	at java.math.BigDecimal.compareTo(BigDecimal.java:815)&lt;br/&gt;
	at org.apache.derby.iapi.types.NumberDataType.setBigDecimal(NumberDataType.java:434)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBigDecimal(EmbedPreparedStatement.java:467)&lt;br/&gt;
	... 22 more&lt;/p&gt;

&lt;p&gt;Do you see any reason why the call to setBigDecimal() should fail with a NullPointerException here?&lt;/p&gt;</comment>
                            <comment id="13143883" author="knutanders" created="Fri, 4 Nov 2011 10:08:06 +0000"  >&lt;p&gt;NumberDataType.setBigDecimal() has this code:&lt;/p&gt;

&lt;p&gt;		if (   (bdc.compareTo(NumberDataType.MINLONG_MINUS_ONE) == 1)&lt;br/&gt;
			&amp;amp;&amp;amp; (bdc.compareTo(NumberDataType.MAXLONG_PLUS_ONE) == -1)) &lt;/p&gt;
{

			setValue(bigDecimal.longValue());
		}
&lt;p&gt; else {&lt;/p&gt;

&lt;p&gt;However, NumberDataType.MINLONG_MINUS_ONE and NumberDataType.MAXLONG_PLUS_ONE are not initialized on CDC/FP, and we get a NullPointerException whenever we try to set a BigDecimal value.&lt;/p&gt;</comment>
                            <comment id="13144030" author="rhillegas" created="Fri, 4 Nov 2011 13:59:34 +0000"  >&lt;p&gt;Thanks for running that experiment, Knut. I will try to reconstruct my small device environment so that I can reproduce your results. Thanks.&lt;/p&gt;</comment>
                            <comment id="13144091" author="rhillegas" created="Fri, 4 Nov 2011 16:01:08 +0000"  >&lt;p&gt;I have installed Oracle Java ME Embedded Client in my Ubuntu guest. I am able to reproduce the NPE you see.&lt;/p&gt;</comment>
                            <comment id="13144277" author="rhillegas" created="Fri, 4 Nov 2011 19:48:15 +0000"  >&lt;p&gt;Attaching derby-5488-04-aa-fixBigIntegerDecimal.diff. This patch is not ready for commit yet because there is still a problem in ParameterMappingTest on CDC/FP 1.1.&lt;/p&gt;

&lt;p&gt;This patch gets rid of the NPE. It does this by moving some logic out of the data factory into SQLDecimal and by implementing some more methods in the small device version of SQLDecimal, which is called BigIntegerDecimal. I don&apos;t think this is the correct long term fix. The correct long term fix is for our small device implementation to use SQLDecimal and to get rid of BigIntegerDecimal. This ought to be possible because java.math.BigDecimal is in CDC/FP 1.1 (it wasn&apos;t in the earlier version of CDC/FP on which our small device implementation was based originally). However, I think that there may be some deserialization and upgrade issues for legacy databases which have stored BigIntegerDecimals. Fixing those issues seems to me to be the province of another JIRA.&lt;/p&gt;

&lt;p&gt;After clearing away the current problems with ParameterMappingTest, the test trundles along and hits a new problem: a failure on small devices to resolve a procedure which has BINARY argument types. I have attached a program, z.java, which shows this problem. The program runs fine on JDK 6 but fails on OJEC.&lt;/p&gt;</comment>
                            <comment id="13146482" author="rhillegas" created="Tue, 8 Nov 2011 19:18:49 +0000"  >&lt;p&gt;Committed derby-5488-04-aa-fixBigIntegerDecimal.diff at subversion revision 1199392. This eliminates the NPEs in ParameterMappingTest when you run it on OJEC. However, the test still raises an error because of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5497&quot; title=&quot;Derby cannot resolve BINARY output procedure parameters on CDC/FP 1.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5497&quot;&gt;&lt;del&gt;DERBY-5497&lt;/del&gt;&lt;/a&gt;, which appears to be a bug in OJEC itself.&lt;/p&gt;</comment>
                            <comment id="13147858" author="rhillegas" created="Thu, 10 Nov 2011 17:43:03 +0000"  >&lt;p&gt;Attaching derby-5488-05-ad-limitOffset.diff. This patch adds the JDBC LIMIT/OFFSET escape syntax, mapping it onto Derby&apos;s existing implementation of SQL Standard OFFSET/FETCH NEXT syntax. Ad-hoc experiments suggest that the patch works. The OffsetFetchNextTest passes cleanly. I will run full regression tests. Follow-on patches for tests will be needed.&lt;/p&gt;

&lt;p&gt;Most of the files which were touched were changed because of a difference between SQL Standard and JDBC behaviors: In the SQL Standard, the FETCH FIRST clause only lets you specify a positive number of rows to be returned--a value of 0 is supposed to raise an exception. In contrast, the JDBC escape syntax allows a LIMIT value of 0. That special value means that all rows should be returned from the OFFSET onwards. Many files had to be touched in order to propagate whether we want SQL Standard or JDBC behavior.&lt;/p&gt;

&lt;p&gt;Changes fall into 3 categories:&lt;/p&gt;

&lt;p&gt;1) Parse/bind-time changes. Parser references to the existing OFFSET and FETCH NEXT productions were replaced with a call to a new production which handles both the SQL Standard and the JDBC syntax. In addition, the constructors for various ResultSet nodes were changed in order to propagate the distinction between SQL Standard and JDBC behaviors.&lt;/p&gt;

&lt;p&gt;2) Code generator changes. Only one code generation method had to be touched.&lt;/p&gt;

&lt;p&gt;3) Run-time changes. A couple changes were necessary in order to propagate the distinction between SQL Standard and JDBC behaviors.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Parser changes to support the new JDBC escape syntax. &lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromSubquery.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/NormalizeResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowCountNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CursorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UnionNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java&lt;/p&gt;

&lt;p&gt;Parse/bind-time changes to propagate the distinction between SQL Standard and JDBC behaviors.&lt;/p&gt;

&lt;p&gt;In addition, the generate() method of RowCountNode was touched for the same reason.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;


&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RowCountResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;Run-time changes to handle the distinction between SQL Standard and JDBC behaviors.&lt;/p&gt;</comment>
                            <comment id="13147949" author="rhillegas" created="Thu, 10 Nov 2011 19:30:38 +0000"  >&lt;p&gt;Tests passed cleanly for me except for the 7 known trigger-related upgrade errors and the following 2 new file permission-related errors. I do not think these are related to this patch:&lt;/p&gt;

&lt;p&gt;1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)java.security.AccessControlException: access denied (&quot;java.io.FilePermission&quot; &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; &quot;execute&quot;)&lt;br/&gt;
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)&lt;br/&gt;
	at java.security.AccessController.checkPermission(AccessController.java:555)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)&lt;br/&gt;
	at java.lang.SecurityManager.checkExec(SecurityManager.java:799)&lt;br/&gt;
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)&lt;br/&gt;
	at java.lang.Runtime.exec(Runtime.java:615)&lt;br/&gt;
	at java.lang.Runtime.exec(Runtime.java:483)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase$8.run(BaseTestCase.java:564)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.execJavaCmd(BaseTestCase.java:560)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(BaseTestCase.java:510)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(BaseTestCase.java:864)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBasicRecovery(RecoveryTest.java:89)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
2) doTestCliServerIsRestrictive(org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest)java.security.AccessControlException: access denied (&quot;java.io.FilePermission&quot; &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; &quot;execute&quot;)&lt;br/&gt;
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:366)&lt;br/&gt;
	at java.security.AccessController.checkPermission(AccessController.java:555)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)&lt;br/&gt;
	at java.lang.SecurityManager.checkExec(SecurityManager.java:799)&lt;br/&gt;
	at java.lang.ProcessBuilder.start(ProcessBuilder.java:1016)&lt;br/&gt;
	at java.lang.Runtime.exec(Runtime.java:615)&lt;br/&gt;
	at java.lang.Runtime.exec(Runtime.java:483)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup$3.run(NetworkServerTestSetup.java:342)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.startSeparateProcess(NetworkServerTestSetup.java:335)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:188)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;</comment>
                            <comment id="13147951" author="rhillegas" created="Thu, 10 Nov 2011 19:32:43 +0000"  >&lt;p&gt;Committed derby-5488-05-ad-limitOffset.diff at subversion revision 1200492.&lt;/p&gt;</comment>
                            <comment id="13148166" author="bryanpendleton" created="Fri, 11 Nov 2011 00:45:37 +0000"  >&lt;p&gt;Hi Rick, Thanks for adding this new feature.&lt;/p&gt;

&lt;p&gt;&amp;gt; Many files had to be touched in order to propagate whether we want SQL Standard or JDBC behavior. &lt;/p&gt;

&lt;p&gt;I&apos;m not sure I understand. Can you expand on this? Is this something that the application&lt;br/&gt;
programmer chooses, one behavior or another? How do they specify it?&lt;/p&gt;</comment>
                            <comment id="13148491" author="rhillegas" created="Fri, 11 Nov 2011 13:36:32 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Sorry to not be clear. The short answer to your question is that what I am describing is behavior internal to Derby. The user can use either the JDBC escape syntax or the SQL Standard syntax. Internally, Derby keeps track of which syntax the user chose. Hopefully, the following will be more helpful:&lt;/p&gt;

&lt;p&gt;Normally, it&apos;s pretty easy for Derby to internally transform the JDBC limit/offset syntax into the corresponding SQL Standard syntax. For instance, the following statement which uses JDBC escape syntax...&lt;/p&gt;

&lt;p&gt; select * from T order by A &lt;/p&gt;
{ limit 20 offset 10 }

&lt;p&gt;...is treated by Derby as equivalent to the following SQL Standard syntax:&lt;/p&gt;

&lt;p&gt; select * from T order by A offset 10 rows fetch next 20 rows only&lt;/p&gt;

&lt;p&gt;However, the following statement...&lt;/p&gt;

&lt;p&gt; select * from T order by A &lt;/p&gt;
{ limit 0 offset 10 }

&lt;p&gt;...is not equivalent to...&lt;/p&gt;

&lt;p&gt; select * from T order by A offset 10 rows fetch next 0 rows only&lt;/p&gt;

&lt;p&gt;...because &quot;fetch next 0 rows&quot; raises an exception. In this case, Derby just ignores the last clause, treating the original statement like...&lt;/p&gt;

&lt;p&gt; select * from T order by A offset 10 rows&lt;/p&gt;

&lt;p&gt;That&apos;s all well and good. The tricky part comes when ? parameters pop up.&lt;/p&gt;

&lt;p&gt; select * from T order by A &lt;/p&gt;
{ limit ? offset 10 }

&lt;p&gt;...is treated like:&lt;/p&gt;

&lt;p&gt; select * from T order by A offset 10 rows fetch next ? rows only&lt;/p&gt;

&lt;p&gt;At run-time, Derby has to know that setting ? equal to 0 is OK if the original statement was the one with JDBC escape syntax, but not OK if the original statement was the one with SQL Standard syntax.&lt;/p&gt;

&lt;p&gt;To make it possible for Derby to make this distinction, I had to pass a boolean all the way from the parser to the run-time logic. The boolean indicates whether the original statement used JDBC escape syntax or SQL Standard syntax. That&apos;s what forced me to touch so many files along the way.&lt;/p&gt;

&lt;p&gt;I hope I have not made this more confusing. If this is still puzzling, please let me know.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;


</comment>
                            <comment id="13148552" author="bryanpendleton" created="Fri, 11 Nov 2011 16:09:05 +0000"  >&lt;p&gt;Thanks Rick, that is exactly what I was confused about, and your answer was very clear.&lt;/p&gt;

&lt;p&gt;I haven&apos;t had much experience with JDBC escape notation, so it is very helpful to see the examples.&lt;/p&gt;

&lt;p&gt;I think it would be wonderful if we can cut-and-paste your examples into the documentation somewhere,&lt;br/&gt;
perhaps maybe here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/docs/10.8/ref/rrefsqljoffsetfetch.html#rrefsqljoffsetfetch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.8/ref/rrefsqljoffsetfetch.html#rrefsqljoffsetfetch&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="13148611" author="dagw" created="Fri, 11 Nov 2011 17:48:40 +0000"  >&lt;p&gt;Thanks, Rick. The limit patch looks ok to me, good you took care of that pesky little semantics difference in LIMIT!&lt;/p&gt;

&lt;p&gt;Small nit: I&apos;d change all the Boolean constructors of the kind &quot;newBoolean( hasJDBClimitClause )&quot; to&lt;br/&gt;
&quot;Boolean.valueOf( hasJDBClimitClause )&quot; for performance, cf. this comment in the Javadoc of valueOf:&lt;/p&gt;

&lt;p&gt;&quot;If a new Boolean instance is not required, this method should generally be used in preference to the constructor Boolean(boolean), as this method is likely to to yield significantly better space and time performance. &quot;&lt;/p&gt;</comment>
                            <comment id="13148631" author="rhillegas" created="Fri, 11 Nov 2011 18:10:08 +0000"  >&lt;p&gt;Thanks for reading the patch, Dag. I will make the change you recommend in a follow-on patch.&lt;/p&gt;</comment>
                            <comment id="13148652" author="rhillegas" created="Fri, 11 Nov 2011 18:43:36 +0000"  >&lt;p&gt;Attaching derby-5488-06-aa-limitOffsetTests.diff. This patch revamps the OffsetFetchNextTest so that test cases are run against both the SQL Standard syntax and the JDBC limit/offset syntax. Committed at subversion revision 1201020.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java&lt;/p&gt;</comment>
                            <comment id="13148659" author="rhillegas" created="Fri, 11 Nov 2011 19:02:52 +0000"  >&lt;p&gt;Attaching derby-5488-07-aa-booleanObjects.diff. This patch eliminates the Boolean object creation as Dag recommended. Committed at subversion revision 1201025.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UnionNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/IntersectOrExceptNode.java&lt;/p&gt;</comment>
                            <comment id="13148709" author="rhillegas" created="Fri, 11 Nov 2011 20:08:18 +0000"  >&lt;p&gt;Attaching derby-5488-08-aa-extraLimitOffsetTest.diff. This patch adds a couple additional limit/offset tests. Committed at subversion revision 1201041.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/OffsetFetchNextTest.java&lt;/p&gt;</comment>
                            <comment id="13149695" author="rhillegas" created="Mon, 14 Nov 2011 15:43:08 +0000"  >&lt;p&gt;Attaching derby-5488-09-aa-jdbcMinorVersion.diff. This patch adjusts the JDBC level reported by Derby&apos;s drivers when running on Java 6 or later. The new version is 4.1. I am running tests now.&lt;/p&gt;

&lt;p&gt;Note that 4.1 is the version returned if you are running on Java 6 or Java 7.&lt;/p&gt;

&lt;p&gt;If you run on Java 6, you can still call the 4.1 methods via reflection. For this reason I believe it makes sense to report 4.1 as the JDBC level on Java 6 even though the platform itself only recognizes the 4.0 methods.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java&lt;/p&gt;

&lt;p&gt;Change to embedded DatabaseMetaData.getJDBCMinorVersion().&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java&lt;/p&gt;

&lt;p&gt;Change to network DatabaseMetaData.getJDBCMinorVersion().&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;/p&gt;

&lt;p&gt;Change to metadata test.&lt;/p&gt;</comment>
                            <comment id="13149804" author="rhillegas" created="Mon, 14 Nov 2011 18:28:33 +0000"  >&lt;p&gt;Tests passed cleanly for me except for the known trigger-related errors in the upgrade tests and the errors described on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5502&quot; title=&quot;RestrictiveFilePermissionsTest and RecoveryTest fail with file permission errors on the OpenJDK 7 preview for Mac OS X&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5502&quot;&gt;&lt;del&gt;DERBY-5502&lt;/del&gt;&lt;/a&gt;. I don&apos;t think these errors are caused by this patch.&lt;/p&gt;</comment>
                            <comment id="13150195" author="bryanpendleton" created="Tue, 15 Nov 2011 02:27:00 +0000"  >&lt;p&gt;&amp;gt; If you run on Java 6, you can still call the 4.1 methods via reflection. &lt;br/&gt;
&amp;gt; For this reason I believe it makes sense to report 4.1 as the JDBC level on Java 6&lt;/p&gt;

&lt;p&gt;Hmmm.. Is there precedent for this behavior? I&apos;m not sure that&apos;s what I&apos;d&lt;br/&gt;
naively expect as a user of the JDBC API.&lt;/p&gt;</comment>
                            <comment id="13150515" author="rhillegas" created="Tue, 15 Nov 2011 14:22:21 +0000"  >&lt;p&gt;Thanks, Bryan. In a related email thread on derby-dev, Knut offered this opinion:&lt;/p&gt;

&lt;p&gt;&quot;Since DatabaseMetaData.getJDBCMinorVersion() is supposed to return the JDBC minor version number for the driver (not for the platform it&apos;s running on) and we have a single JDBC 4 driver implementation that implements both JDBC 4.0 and JDBC 4.1, I think it sounds reasonable that our JDBC 4 driver always returns minor version 1.&quot;&lt;/p&gt;</comment>
                            <comment id="13150543" author="bryanpendleton" created="Tue, 15 Nov 2011 15:10:41 +0000"  >&lt;p&gt;I am fine with the proposed implementation. I think I was getting somewhat confused between&lt;br/&gt;
compile-time support and run-time support.&lt;/p&gt;

&lt;p&gt;My train-of-thought regarding my reaction was something like: if I am told that a particular &lt;br/&gt;
DB/driver/implementation is JDBC version X.Y, then I expect to look in the Javadocs for &lt;br/&gt;
version X.Y and be able to call those APIs. &lt;/p&gt;

&lt;p&gt;I would not expect to have to use reflection to do so. &lt;/p&gt;

&lt;p&gt;When I look up, e.g., java.sql.PreparedStatement, I expect the &quot;Since:&quot; field to&lt;br/&gt;
help me with this comprehension. This doesn&apos;t work perfectly; for example, when I go to:&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRowId(int&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRowId(int&lt;/a&gt;, java.sql.RowId)&lt;br/&gt;
I see that the setRowId() method is marked &quot;Since: 1.6&quot;, and I have to know that this actually means&lt;br/&gt;
&quot;JDBC 4.0&quot;, but once I accomplish that, I know that I am calling a method that requires JDBC 4.0.&lt;/p&gt;

&lt;p&gt;I note that when I go to &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/jdbc/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oracle.com/technetwork/java/javase/jdbc/index.html&lt;/a&gt; which&lt;br/&gt;
is presumably the base of all the JDBC spec definitions, I am referred to JDBC documentation&lt;br/&gt;
for the base JDK, not by JDBC version number. That is, it says: &lt;/p&gt;

&lt;p&gt;        JDBC documentation: J2SE 1.4.2 | J2SE 5.0 | Java SE 6&lt;/p&gt;

&lt;p&gt;At any rate, returning 4.1 seems fine to me; I think I am expressing a related, but independent,&lt;br/&gt;
confusion that affects the life of the JDBC application programmer &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13150547" author="rhillegas" created="Tue, 15 Nov 2011 15:18:42 +0000"  >&lt;p&gt;Thanks to Bryan and Knut for helping me sort out what JDBC level our Java 6 drivers should report.&lt;/p&gt;

&lt;p&gt;Except for the very highest JDBC level we support, all of our JDBC driver implementations contain methods which were introduced by higher levels of the spec. So for instance...&lt;/p&gt;

&lt;p&gt;1) Our JSR 169 implementation contains lots of methods which were introduced in JDBC 2.0 and 3.0.&lt;/p&gt;

&lt;p&gt;2) Our JDBC 3.0 implementation contains some methods which were introduced by JDBC 4.0.&lt;/p&gt;

&lt;p&gt;Nevertheless, those implementations don&apos;t claim to fully implement the higher JDBC rev levels from which they borrow methods.&lt;/p&gt;

&lt;p&gt;JDBC 4.1 is an interesting special case. All other JDBC levels introduced data types which did not appear in their predecessors. For this reason...&lt;/p&gt;

&lt;p&gt;1&apos;) Our JSR 169 implementation doesn&apos;t contain an implementation of the java.sql.ParameterMetaData type which was introduced in JDBC 3.0. A JDBC implementation which runs on small devices cannot provide an implementation of ParameterMetaData and so can not claim to implement JDBC 3.0.&lt;/p&gt;

&lt;p&gt;2&apos;) Our JDBC 3.0 implementation doesn&apos;t contain methods which mention java.sql.SQLXML, a type which was introduced by JDBC 4.0. A JDBC implementation which runs on Java 5 cannot contain methods which mention SQLXML and so can not claim to implement JDBC 4.0.&lt;/p&gt;

&lt;p&gt;JDBC 4.1 is the first rev of JDBC which does not mention any types which were not available to its predecessor. It is therefore the first rev of JDBC which could be implemented to run on a lower rev level of the JVM.&lt;/p&gt;

&lt;p&gt;So the short answer to Bryan&apos;s question about precedents is: No, there is no precedent. The slightly longer answer to Bryan&apos;s question is: ...perhaps because the situation is impossible for previous JDBC rev levels.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13150553" author="rhillegas" created="Tue, 15 Nov 2011 15:27:43 +0000"  >&lt;p&gt;Thanks for that additional analysis, Bryan. I will hold off committing this patch until Friday. Maybe other opinions will surface.&lt;/p&gt;

&lt;p&gt;I agree that the situation for the application programmer is confusing. Can anyone think of a way that a program would fail because of this proposed Derby behavior?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13150563" author="knutanders" created="Tue, 15 Nov 2011 15:46:35 +0000"  >&lt;p&gt;&amp;gt; Can anyone think of a way that a program would fail because of this proposed Derby behavior?&lt;/p&gt;

&lt;p&gt;Perhaps a little far-fetched, but this small program works on Java 6 if getJDBCMinorVersion() returns 0 and fails if it returns 1:&lt;/p&gt;

&lt;p&gt;import java.sql.*;&lt;br/&gt;
public class Test {&lt;br/&gt;
    public static void main(String[] args) throws SQLException {&lt;br/&gt;
        Connection c = DriverManager.getConnection(&quot;jdbc:derby:memory:db;create=true&quot;);&lt;/p&gt;

&lt;p&gt;        DatabaseMetaData dmd = c.getMetaData();&lt;br/&gt;
        int major = dmd.getJDBCMajorVersion();&lt;br/&gt;
        int minor = dmd.getJDBCMinorVersion();&lt;/p&gt;

&lt;p&gt;        boolean isAtLeastJDBC41 = (major == 4 &amp;amp;&amp;amp; minor &amp;gt;= 1) || major &amp;gt; 4;&lt;/p&gt;

&lt;p&gt;        Statement s = c.createStatement();&lt;br/&gt;
        ResultSet rs = s.executeQuery(&quot;values 1234&quot;);&lt;br/&gt;
        while (rs.next()) {&lt;br/&gt;
            if (isAtLeastJDBC41) &lt;/p&gt;
{
                Integer i = rs.getObject(1, Integer.class);
                System.out.println(&quot;I:&quot; + i);
            }
&lt;p&gt; else &lt;/p&gt;
{
                int i = rs.getInt(1);
                System.out.println(&quot;i:&quot; + i);
            }
&lt;p&gt;        }&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;You&apos;ll need to compile it with the Java 7 compiler and specify -source 1.6 and -target 1.6 to make it run on Java 6.&lt;/p&gt;

&lt;p&gt;With minor version = 0 on Java 6:&lt;/p&gt;

&lt;p&gt;$ java Test&lt;br/&gt;
i:1234&lt;/p&gt;

&lt;p&gt;With minor version = 1 on Java 6:&lt;/p&gt;

&lt;p&gt;$ java Test&lt;br/&gt;
Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: java.sql.ResultSet.getObject(ILjava/lang/Class;)Ljava/lang/Object;&lt;br/&gt;
	at Test.main(Test.java:16)&lt;/p&gt;</comment>
                            <comment id="13150605" author="rhillegas" created="Tue, 15 Nov 2011 16:56:01 +0000"  >&lt;p&gt;Thanks for that quick response, Knut. I think that a similar problem can arise in earlier versions of Derby. For instance, if an application is compiled on Java 6 to run at JVM level 1.5 and the application tries to call a JDBC 4.0 method which we implemented in our JDBC 3.0 drivers. If the application were compiled against the JDBC 3.0 libraries (as we do in our Derby builds) then the error would have been caught at compile-time, not run-time. And a solution in both cases is to use reflection to access the methods which don&apos;t appear in the older JVM. I tend to think that this is an error on the part of the programmer, not Derby. The programmer is trying to do something that can&apos;t work and they have tricked the compiler into not helping them detect this early on.&lt;/p&gt;

&lt;p&gt;However, we are certainly in the confusing space which Bryan is talking about.&lt;/p&gt;</comment>
                            <comment id="13152057" author="rhillegas" created="Thu, 17 Nov 2011 13:51:08 +0000"  >&lt;p&gt;Here&apos;s another small piece of work. JDBC 4.1 fixes the mis-spelled name of one of the columns in the ResultSet returned by DatabaseMetaData.getColumns(). The column used to be called SCOPE_CATLOG and is now called SCOPE_CATALOG. See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1279&quot; title=&quot;Bad column name in DatabaseMetaData.getColumns()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1279&quot;&gt;&lt;del&gt;DERBY-1279&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-137&quot; title=&quot;Derby metadata always returns JDBC 2 result sets, even when JDBC 3 result sets are required.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-137&quot;&gt;&lt;del&gt;DERBY-137&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13152895" author="rhillegas" created="Fri, 18 Nov 2011 14:34:01 +0000"  >&lt;p&gt;Attaching derby-5488-10-aa-metadataTypo.diff. This a simple candidate patch to change SCOPE_CATLOG to SCOPE_CATALOG. Regression tests pass cleanly on this patch.&lt;/p&gt;

&lt;p&gt;Before discussing this patch and alternatives we might consider, I want to summarize my understanding of this problem:&lt;/p&gt;

&lt;p&gt;A) The JDBC expert group regards this as fixing a typo in the javadoc. I believe that some other databases recognized the typo for what it was and always named the column SCOPE_CATALOG. Derby, however, hewed closely to the published javadoc and called the column SCOPE_CATLOG.&lt;/p&gt;

&lt;p&gt;B) For those other databases, there is no functional change. A documentation typo has simply been corrected. For Derby, however, the change creates a backward incompatibility.&lt;/p&gt;

&lt;p&gt;C) Derby must break one of its important constraints. There is no way that we can conform to the corrected JDBC javadoc and avoid a backward incompatibility.&lt;/p&gt;

&lt;p&gt;D) I think that the backward incompatibility is quite minor, nevertheless. The column in question carries no meaning for Derby. The column only has meaning for databases which implement both catalogs and reference types. For Derby, the column always contains a null. I doubt that (m)any Derby users inspect this column at all, let alone by name.&lt;/p&gt;

&lt;p&gt;Here are the user-visible effects of some possible solutions:&lt;/p&gt;

&lt;p&gt;1) Based on engine version - The column is called SCOPE_CATALOG if  DatabaseMetaData.getDatabaseMajorVersion() and DatabaseMetaData.getDatabaseMinorVersion() report that the engine is at Derby 10.9 or higher. Otherwise, the column is called SCOPE_CATLOG. This is the approach taken by this patch.&lt;/p&gt;

&lt;p&gt;2) Based on client version - The column is called SCOPE_CATALOG if  DatabaseMetaData.getDriverMajorVersion() and DatabaseMetaData.getDriverMinorVersion() report that the client is at Derby 10.9 or higher. Otherwise, the column is called SCOPE_CATLOG.&lt;/p&gt;

&lt;p&gt;3) Based on JDBC driver version - The column is called SCOPE_CATALOG if DatabaseMetaData.getJDBCMajorVersion() and DatabaseMetaData.getJDBCMinorVersion() report that the driver is at JDBC 4.1 or higher. Otherwise, the column is called SCOPE_CATLOG.&lt;/p&gt;

&lt;p&gt;Even fancier solutions are possible. They involve combinations of the JDBC and driver versions at the client and engine. I believe that the solutions listed above give rise to straightforward workarounds for applications affected by this change. They are easy to explain. The fancier solutions push more complexity into the application and/or involve backporting tricky code into older Derby branches.&lt;/p&gt;

&lt;p&gt;Of the straightforward solutions, I opted for (1) because it was the easiest to implement. A casual look at options (2) and (3) suggests that they involve adding some potentially tricky code to our JDBC drivers. I did not think that this problem warranted the additional complexity.&lt;/p&gt;

&lt;p&gt;But those are my opinions. I am open to arguments that we should solve this problem a different way.&lt;/p&gt;

&lt;p&gt;Thanks in advance for your feedback.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/metadata.properties&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;Actual change to the JDBC metadata.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;/p&gt;

&lt;p&gt;Corresponding change to the regression test for this metadata.&lt;/p&gt;</comment>
                            <comment id="13152899" author="rhillegas" created="Fri, 18 Nov 2011 14:35:48 +0000"  >&lt;p&gt;Marking the &quot;Release note needed&quot; flag because of the backward incompatibility introduced by changing SCOPE_CATLOG to SCOPE_CATALOG.&lt;/p&gt;</comment>
                            <comment id="13152980" author="rhillegas" created="Fri, 18 Nov 2011 17:21:33 +0000"  >&lt;p&gt;Committed derby-5488-09-aa-jdbcMinorVersion.diff to trunk at subversion revision 1203754. This changes the JDBC level to 4.1 when running on Java 6 or 7.&lt;/p&gt;</comment>
                            <comment id="13154102" author="knutanders" created="Mon, 21 Nov 2011 10:29:36 +0000"  >&lt;p&gt;derby-5488-09-aa-jdbcMinorVersion.diff had a typo that made DatabaseMetaDataTest fail on Java 5 (&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-1204020.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.5/testing/Limited/testSummary-1204020.html&lt;/a&gt;). The attached patch (fix-jdbc30-test.diff) corrects the typo and makes DatabaseMetaDataTest pass with Java 5, 6 and 7 in my environment.&lt;/p&gt;

&lt;p&gt;Committed revision 1204432.&lt;/p&gt;</comment>
                            <comment id="13154116" author="knutanders" created="Mon, 21 Nov 2011 10:59:17 +0000"  >&lt;p&gt;The approach in derby-5488-10-aa-metadataTypo.diff looks reasonable to me. It&apos;s the simplest solution, and it should be easy enough to add a release note to explain the impact on existing applications.&lt;/p&gt;

&lt;p&gt;If we were to code it more defensively, I think I&apos;d prefer to rename column 19 to SCOPE_CATALOG and add a 25th column called SCOPE_CATLOG. That way, the applications that call rs.getString(19), as well as those that call rs.getString(&quot;SCOPE_CATLOG&quot;), will continue to work, regardless of server/client versions. And so will applications that use the correctly spelled rs.getString(&quot;SCOPE_CATALOG&quot;), provided that the server version is at least 10.9.&lt;/p&gt;

&lt;p&gt;The spec allows us to add columns this way, see this sentence in the javadoc for java.sql.DatabaseMetaData: &quot;Additional columns beyond the columns defined to be returned by the ResultSet object for a given method can be defined by the JDBC driver vendor and must be accessed by their column label.&quot;&lt;/p&gt;</comment>
                            <comment id="13154157" author="rhillegas" created="Mon, 21 Nov 2011 13:14:03 +0000"  >&lt;p&gt;Thanks for fixing that typo, Knut.&lt;/p&gt;</comment>
                            <comment id="13154172" author="rhillegas" created="Mon, 21 Nov 2011 13:31:28 +0000"  >&lt;p&gt;Thanks for reviewing the issues raised by derby-5488-10-aa-metadataTypo.diff, Knut. In private email, JDBC spec lead Lance Andersen also raised the possibility of letting the DatabaseMetaData.getColumns() ResultSet recognize SCOPE_CATLOG as a column name as well as SCOPE_CATALOG. As you note, vendors are allowed to add extra columns to these ResultSets.&lt;/p&gt;

&lt;p&gt;I agree that the extra SCOPE_CATLOG column would be a useful piece of defensive logic. I will add it in a revised version of this patch. Note that the position of the extra SCOPE_CATLOG column will change if a future rev of the JDBC spec adds more columns to the end of this ResultSet. That will affect users who do not pay attention to the warning that vendor-specific columns should only be referenced by name, not by position. If needed, we can address that issue in a future release note accompanying our implementation of those spec changes.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13154242" author="rhillegas" created="Mon, 21 Nov 2011 15:21:49 +0000"  >&lt;p&gt;Attaching derby-5488-10-ab-metadataTypo.diff. This version of the patch adds a redundant SCOPE_CATLOG column to the end of the ResultSet returned by DatabaseMetaData.getColumns() as Lance and Knut suggested. This bit of defensive logic should reduce the risk of backward incompatibility problems. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the same files as the previous version of this patch.&lt;/p&gt;</comment>
                            <comment id="13154284" author="rhillegas" created="Mon, 21 Nov 2011 16:39:30 +0000"  >&lt;p&gt;Attaching a first rev of a release note to describe backward incompatibilities introduced by renaming a metadata column.&lt;/p&gt;</comment>
                            <comment id="13154296" author="rhillegas" created="Mon, 21 Nov 2011 17:08:29 +0000"  >&lt;p&gt;Attaching derby-5488-10-ac-metadataTypo.diff. The previous version of the patch raised 2 errors in ViewTest, caused by the fact that DatabaseMetaData.getColumns() now returns a ResultSet with 25 columns rather than 24 columns. This new version of the patch adjusts ViewTest to expect 25 columns.&lt;/p&gt;

&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java&lt;/p&gt;</comment>
                            <comment id="13154447" author="rhillegas" created="Mon, 21 Nov 2011 20:21:48 +0000"  >&lt;p&gt;Committed derby-5488-10-ac-metadataTypo.diff to trunk at subversion revision 1204684.&lt;/p&gt;</comment>
                            <comment id="13218181" author="kristwaa" created="Tue, 28 Feb 2012 13:51:54 +0000"  >&lt;p&gt;To me it seems the newest patch has been committed, so I cleared the patch available flag.&lt;br/&gt;
What&apos;s the status on this issue now?&lt;/p&gt;</comment>
                            <comment id="13218212" author="rhillegas" created="Tue, 28 Feb 2012 14:19:57 +0000"  >&lt;p&gt;Thanks, Kristian. I believe the extra JDBC 4.1 bits have been added. I am resolving this issue.&lt;/p&gt;</comment>
                            <comment id="13287215" author="fpientka" created="Fri, 1 Jun 2012 08:05:48 +0100"  >&lt;p&gt;The JDBC-Version (Java SE 6 - JDBC 4.1) shown in org.apache.derby.mbeans.JDBCMBean from derby.jar] 10.9.1.0 - (1344872) and JRE 6  is wrong, should be Java SE 6 - JDBC 4.0&lt;br/&gt;
But with JRE 7 it&apos;s OK (Java SE 7 - JDBC 4.1)&lt;/p&gt;</comment>
                            <comment id="13287221" author="fpientka" created="Fri, 1 Jun 2012 08:16:29 +0100"  >&lt;p&gt;add Java SE 7 in &lt;br/&gt;
JDBC 4.0 Public API - Consult this javadoc if your application runs on Java SE 6 and Java SE 7.&lt;br/&gt;
in index.html&lt;/p&gt;</comment>
                            <comment id="13287396" author="rhillegas" created="Fri, 1 Jun 2012 14:32:32 +0100"  >&lt;p&gt;Thanks for thinking about the JDBC level supported by 10.9.1.0. I will fix the wording of index.html in the trunk and the 10.9 branch. We&apos;ll pick up the better wording if we need to build a second release candidate.&lt;/p&gt;

&lt;p&gt;The JDBC version level when running on Java 6 has caused confusion before. A case could be made for either 4.0 or 4.1. We settled on 4.1. Our reasoning can be found in the comments above, logged on 2011-11-15.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13287444" author="rhillegas" created="Fri, 1 Jun 2012 15:34:53 +0100"  >&lt;p&gt;Re-open issue in order to attach a new patch.&lt;/p&gt;</comment>
                            <comment id="13287445" author="rhillegas" created="Fri, 1 Jun 2012 15:35:56 +0100"  >&lt;p&gt;Attaching derby-5488-11-aa-javadoc.diff. This adjusts the top level index.html to note that the JDBC 4.1 api should be consulted if you are running on Java 6 or higher. This also makes corresponding changes to the javadoc for the JDBC 4.1 DataSources.&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 1345197. Ported to 10.9 branch at subversion revision 1345204.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientXADataSource40.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientDataSource40.java&lt;br/&gt;
M       index.html&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12530910">DERBY-5499</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12478490">DERBY-4869</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="29871">DERBY-137</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12333078">DERBY-1279</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12530728">DERBY-5497</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12501648" name="JDBC_4.1_Supplement.html" size="5152" author="rhillegas" created="Mon, 31 Oct 2011 18:25:30 +0000"/>
                            <attachment id="12501812" name="derby-5488-01-aa-objectMappingAndConversion.diff" size="10434" author="rhillegas" created="Tue, 1 Nov 2011 19:05:07 +0000"/>
                            <attachment id="12502032" name="derby-5488-02-aa-fixBigInteger.diff" size="7953" author="rhillegas" created="Wed, 2 Nov 2011 20:42:56 +0000"/>
                            <attachment id="12502174" name="derby-5488-03-ac-moveDecimalSetterGetterAndTest.diff" size="10893" author="rhillegas" created="Thu, 3 Nov 2011 16:33:28 +0000"/>
                            <attachment id="12502512" name="derby-5488-04-aa-fixBigIntegerDecimal.diff" size="5683" author="rhillegas" created="Fri, 4 Nov 2011 19:48:15 +0000"/>
                            <attachment id="12503262" name="derby-5488-05-ad-limitOffset.diff" size="35313" author="rhillegas" created="Thu, 10 Nov 2011 17:43:02 +0000"/>
                            <attachment id="12503400" name="derby-5488-06-aa-limitOffsetTests.diff" size="44685" author="rhillegas" created="Fri, 11 Nov 2011 18:43:36 +0000"/>
                            <attachment id="12503401" name="derby-5488-07-aa-booleanObjects.diff" size="5338" author="rhillegas" created="Fri, 11 Nov 2011 19:02:51 +0000"/>
                            <attachment id="12503413" name="derby-5488-08-aa-extraLimitOffsetTest.diff" size="2057" author="rhillegas" created="Fri, 11 Nov 2011 20:08:18 +0000"/>
                            <attachment id="12503633" name="derby-5488-09-aa-jdbcMinorVersion.diff" size="2208" author="rhillegas" created="Mon, 14 Nov 2011 15:43:08 +0000"/>
                            <attachment id="12504217" name="derby-5488-10-aa-metadataTypo.diff" size="2964" author="rhillegas" created="Fri, 18 Nov 2011 14:34:01 +0000"/>
                            <attachment id="12504511" name="derby-5488-10-ab-metadataTypo.diff" size="6163" author="rhillegas" created="Mon, 21 Nov 2011 15:21:48 +0000"/>
                            <attachment id="12504516" name="derby-5488-10-ac-metadataTypo.diff" size="8910" author="rhillegas" created="Mon, 21 Nov 2011 17:08:28 +0000"/>
                            <attachment id="12530553" name="derby-5488-11-aa-javadoc.diff" size="6807" author="rhillegas" created="Fri, 1 Jun 2012 15:35:56 +0100"/>
                            <attachment id="12504488" name="fix-jdbc30-test.diff" size="1041" author="knutanders" created="Mon, 21 Nov 2011 10:29:36 +0000"/>
                            <attachment id="12504514" name="releaseNote.html" size="3048" author="rhillegas" created="Mon, 21 Nov 2011 16:39:30 +0000"/>
                            <attachment id="12502513" name="z.java" size="919" author="rhillegas" created="Fri, 4 Nov 2011 19:48:15 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 31 Oct 2011 18:44:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>215385</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0bgv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35676</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>