<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:55:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3198/DERBY-3198.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3198] Using setQueryTimeout will leak sections </title>
                <link>https://issues.apache.org/jira/browse/DERBY-3198</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The implementation of setQueryTimeout relies on NetStatementReply.writeSetSpecialRegister() which will allocate a dynamic section when called. No reference to this Section object is kept, and so Section.free() never gets called on it. Executing the same statment repeatedly with a query timeout set results in the client driver throwing an exception because the number of Sections exceeding 32000.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12382298">DERBY-3198</key>
            <summary>Using setQueryTimeout will leak sections </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dyret">Dyre Tjeldvoll</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Sun, 11 Nov 2007 21:53:45 +0000</created>
                <updated>Thu, 2 May 2013 03:29:01 +0100</updated>
                            <resolved>Sat, 8 Dec 2007 16:23:26 +0000</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12541661" author="dyret" created="Sun, 11 Nov 2007 21:56:13 +0000"  >&lt;p&gt;Attaching a patch which modifies derbyStress.java so that the problem is exposed.&lt;/p&gt;</comment>
                            <comment id="12541887" author="myrna" created="Mon, 12 Nov 2007 18:41:15 +0000"  >&lt;p&gt;I wonder if this could be related to the trouble we sometimes see with specific jvms with the setQueryTimeoutTest, such as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1848&quot; title=&quot;jdbcapi/SetQueryTimeoutTest.java fails on IBM  wctme 5.7&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1848&quot;&gt;&lt;del&gt;DERBY-1848&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12542160" author="dyret" created="Tue, 13 Nov 2007 16:39:49 +0000"  >

&lt;p&gt;I writing this in a mail because I keep getting 503 from jira.&lt;/p&gt;

&lt;p&gt;I have not looked at the issue you describe (since jira is down), &lt;br/&gt;
but it sounds reasonable. &lt;/p&gt;

&lt;p&gt;I tried fixing this by letting&lt;br/&gt;
NetStatementRequest.writeSetSpecialRegister() just wrap its code in a&lt;br/&gt;
try - finally where the finally clause calls free() on the newly&lt;br/&gt;
allocated Section object. &lt;/p&gt;

&lt;p&gt;This seems to fix the leak, but you also change the&lt;br/&gt;
semantic. Previously setSpecialRegister() (actually EXCSETSTT) was put&lt;br/&gt;
in its own Section that was not used by any other statement, but with&lt;br/&gt;
this fix the next call to getDynamicSection() will likely reuse the&lt;br/&gt;
section number used by writeSetSpecialRegister(). Whether this&lt;br/&gt;
reperesents a problem or not, I don&apos;t know...&lt;/p&gt;

&lt;p&gt;I tried reading the rules for assigning Section numbers in the DRDA&lt;br/&gt;
spec (Vol 1, section 7.15 pages 460-462), but that left me with more&lt;br/&gt;
questions than answers. It does seem like the section number should be&lt;br/&gt;
used to group statements that &quot;belong together&quot;. If that is correct,&lt;br/&gt;
then I guess setQueryTimeout SHOULD have the same section number as&lt;br/&gt;
the statment that follows since they belong together...&lt;/p&gt;

&lt;p&gt;Any DRDA experts reading this should feel free&lt;br/&gt;
to chime in...&lt;/p&gt;


&lt;p&gt;&amp;#8211; &lt;br/&gt;
Dyre&lt;/p&gt;</comment>
                            <comment id="12543087" author="dyret" created="Fri, 16 Nov 2007 14:22:47 +0000"  >&lt;p&gt;I have now had a chance to look at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1848&quot; title=&quot;jdbcapi/SetQueryTimeoutTest.java fails on IBM  wctme 5.7&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1848&quot;&gt;&lt;del&gt;DERBY-1848&lt;/del&gt;&lt;/a&gt;, but I don&apos;t think these issues are directly related. The Section issue will only occur when using the client  driver, and exhausting the number of Sections produces a specific error message and call stack which I don&apos;t see in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1848&quot; title=&quot;jdbcapi/SetQueryTimeoutTest.java fails on IBM  wctme 5.7&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1848&quot;&gt;&lt;del&gt;DERBY-1848&lt;/del&gt;&lt;/a&gt;. Based on the diff shown there, it seems like a statement times out unexpectedly, which I guess could happen if you happen to get a full GC (or other delay) at the wrong time. &lt;/p&gt;</comment>
                            <comment id="12544883" author="dyret" created="Thu, 22 Nov 2007 19:39:11 +0000"  >&lt;p&gt;Based on what I see methods similar to writeSetSpecialRegister do, I think a safe and reasonable way of getting a Section is as follows:&lt;/p&gt;

&lt;p&gt;1) If the surrounding code has set the newSection variable, use that. This will usually be the case when writeSetSpecialRegister is used to request session data, as it happens after this variable has been assigned.&lt;/p&gt;

&lt;p&gt;2) If Statement.section_ is not null, it is probably safe to use it.&lt;/p&gt;

&lt;p&gt;3) if Statement.section_ is null, request a new one from the SectionManager and assign that to section_. Assigning it to section_ will ensure that it is freed later.&lt;/p&gt;

&lt;p&gt;Doing so does, however, require a change to the signature of the writeSetSpecialRegister() methods in the Net-layer, so that the Section to use can be passed in as a parameter (this seems to be how it is done in other write methods). The change is necessary because the decision about which Section to use need to happen in the am-layer. It cannot be done in  NetStatementRequest as it currently is, because there we don&apos;t have access to the Section variables mentioned earlier. &lt;/p&gt;

&lt;p&gt;I&apos;m wondering if the ability to access the SectionManager from the Net-layer is an unintended loophole. Seems like NetStatementReply.writeSetSpecialRegister() is the only place in the net package where it is used. The SectionManager is accessed through a public member in am.Agent which has the following comment:&lt;br/&gt;
     public SectionManager sectionManager_ = null; // temporarily public, make friendly at least !!&lt;/p&gt;

&lt;p&gt;The Net-layer gets at this member because NetAgent extends am.Agent.&lt;/p&gt;</comment>
                            <comment id="12545412" author="dyret" created="Mon, 26 Nov 2007 11:40:07 +0000"  >&lt;p&gt;Attaching a patch (*.v1.stat) which re-uses am.Statement.section_ if available, or assigns a newly allocated Section to this variable so that it can be freed. &lt;/p&gt;</comment>
                            <comment id="12545415" author="dyret" created="Mon, 26 Nov 2007 11:52:26 +0000"  >&lt;p&gt;I forgot to mention that derbyall and suites.All (including the new test case for this issue which fails on trunk) both pass.&lt;/p&gt;</comment>
                            <comment id="12545466" author="dyret" created="Mon, 26 Nov 2007 14:51:55 +0000"  >&lt;p&gt;Attaching *.v2.diff which replaces the previous patch. The first version contained an extra test case which I was experimenting with, but which does not belong in that test, and should not be committed. (I plan to commit this patch in a couple of days unless anyone advices differently)&lt;/p&gt;</comment>
                            <comment id="12545874" author="knutanders" created="Tue, 27 Nov 2007 15:24:51 +0000"  >&lt;p&gt;Hi Dyre,&lt;/p&gt;

&lt;p&gt;Your patch is probably OK, but there are two things that are not quite clear to me:&lt;/p&gt;

&lt;p&gt;1) Will there ever be a case when section_ is null so that we need to generate a new one? And if we generate a new one, will that one be reused later, or will a new one be allocated and section_ replaced without freeing the old one?&lt;/p&gt;

&lt;p&gt;2) When a section is created on the fly, its holdability is set to HOLD_CURSORS_OVER_COMMIT. Should we instead have used the holdability of the statement, since this section can now be used for other statements than the set special register statement?&lt;/p&gt;

&lt;p&gt;If Statement instead had a field called specialRegisterSection which, if not null, was freed at the same time as section_ was freed, I think it would be easier to understand the fix, and the behaviour would be closer to the old one (with the exception of the leak, of course &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12545996" author="dyret" created="Tue, 27 Nov 2007 20:32:24 +0000"  >&lt;p&gt;Hi Knut,&lt;br/&gt;
Thanks for taking the time to look at the patch. I&apos;ll try to answer your questions:&lt;/p&gt;

&lt;p&gt;Q: Will there ever be a case when section_ is null so that we need to generate a new one?&lt;br/&gt;
A: Yes, if you don&apos;t check for null, you&apos;ll get an NPE.&lt;/p&gt;

&lt;p&gt;Q: And if we generate a new one, will that one be reused later?&lt;br/&gt;
A: That depends on where setSpecialRegister is called. Sometimes it will be reused, but other times a new Section will be allocated regardless.&lt;/p&gt;

&lt;p&gt;Q: or will a new one be allocated and section_ replaced without&lt;br/&gt;
freeing the old one?  &lt;br/&gt;
A: No, I actually don&apos;t think that will&lt;br/&gt;
happen. As far as I can tell, the only place where section_ is&lt;br/&gt;
assigned without verifying that it is null or that the &lt;br/&gt;
previous value has been freed, is in Statement&apos;s constructor and init methods.&lt;/p&gt;

&lt;p&gt;Q: Should we instead have used the holdability of the statement,&lt;br/&gt;
since this section can now be used for other statements than the&lt;br/&gt;
set special register statement?  &lt;br/&gt;
A: Possibly. But my impression is that the Section stored in the&lt;br/&gt;
section_ variable is reused only when you don&apos;t care about the&lt;br/&gt;
type of Section. In the case where the holdability of the Section&lt;br/&gt;
actually matters, a separate Section, with the proper&lt;br/&gt;
holdability, is kept in a local variable (newSection), and this&lt;br/&gt;
variable is transfered to the section_ variable after its&lt;br/&gt;
previous value is freed. I could be wrong about this, though.&lt;/p&gt;


&lt;p&gt;I like your idea about using a separate member variable for&lt;br/&gt;
tracking the Section used in setSpecialRegister and I agree that&lt;br/&gt;
it more closely mimics the old behavior. The only reason for not&lt;br/&gt;
choosing that option from the beginning was that I did not see&lt;br/&gt;
any other method that did its own Section management like that. &lt;/p&gt;</comment>
                            <comment id="12546665" author="dyret" created="Thu, 29 Nov 2007 11:30:03 +0000"  >&lt;p&gt;If we go for the separate member variable option; do we really need to free this Section? If/when we start using this to cache session data, that Section &lt;br/&gt;
will be needed for every message, so requesting it and freeing it each time is just going to be extra work, isn&apos;t it? Or would that have some other drawback that I&apos;m not seeing? I&apos;m running the tests with this change now, to see how it works.&lt;/p&gt;</comment>
                            <comment id="12546724" author="knutanders" created="Thu, 29 Nov 2007 13:32:48 +0000"  >&lt;p&gt;Reusing it instead of creating a new one on each execution sounds reasonable to me. But don&apos;t we still need some clean-up code when we close the statement? Otherwise, this code will leak sections, won&apos;t it?&lt;/p&gt;

&lt;p&gt;Connection c = DriverManager.getConnection(&quot;jdbc:derby://localhost/db&quot;);&lt;br/&gt;
while (true) &lt;/p&gt;
{
    Statement s = c.createStatement();
    s.setQueryTimeout(100);
    s.executeQuery(&quot;values 1&quot;).close();
    s.close();
}</comment>
                            <comment id="12546734" author="dyret" created="Thu, 29 Nov 2007 14:00:47 +0000"  >&lt;p&gt;Quite right &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (And I can confirm that tests fail if you don&apos;t free the Section when you close the Statement &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12547785" author="dyret" created="Mon, 3 Dec 2007 10:38:15 +0000"  >&lt;p&gt;New patch (v3) with dedicated Section for writeSetSpeialRegister() which is freed in Statement.markClosed() &lt;/p&gt;</comment>
                            <comment id="12547827" author="knutanders" created="Mon, 3 Dec 2007 12:50:09 +0000"  >&lt;p&gt;Patch looks good to me. +1 to commit.&lt;/p&gt;

&lt;p&gt;You might also consider closing the result set in the test, unless it&apos;s supposed to test that the section is freed on implicit close.&lt;/p&gt;</comment>
                            <comment id="12547837" author="dyret" created="Mon, 3 Dec 2007 13:22:39 +0000"  >&lt;p&gt;Well, it seemed safer to verify that Sections aren&apos;t leaked even when relying on implicit close. I could add a comment about that I suppose.&lt;/p&gt;</comment>
                            <comment id="12548186" author="dyret" created="Tue, 4 Dec 2007 09:22:48 +0000"  >&lt;p&gt;I&apos;m making some more changes, and I&apos;ll make another version of the patch.&lt;/p&gt;</comment>
                            <comment id="12548617" author="dyret" created="Wed, 5 Dec 2007 10:21:39 +0000"  >&lt;p&gt;Reading Knut&apos;s comment again I realized that he was talking about closing ResultSets and not Statements. I agree that it is no reason not to do this. Relying on implicit close does not alter the use/freeing of Sections.&lt;/p&gt;

&lt;p&gt;The comments also made me want to test what happens when a large number of Statements are kept open, since Statements with query timeout will hold on to two Sections (as opposed to only one for Statements without query timeout). So I added a test case for that.&lt;/p&gt;</comment>
                            <comment id="12548655" author="knutanders" created="Wed, 5 Dec 2007 12:34:38 +0000"  >&lt;p&gt;The new test case looks fine. You might consider if you want to change the assert for i==16383 to i&amp;gt;=16383, since it&apos;s not technically an error if more than 16383 statements can be open at the same time. Also, since the test now uses the string &quot;StatementJdbc30Test:client&quot; twice, and won&apos;t add the new test cases unless both occurrences have the same spelling, perhaps you should define a constant to ensure their consistency.&lt;/p&gt;</comment>
                            <comment id="12548702" author="dyret" created="Wed, 5 Dec 2007 15:58:45 +0000"  >&lt;p&gt;Attaching v5 to address the latest comments.&lt;/p&gt;</comment>
                            <comment id="12548959" author="knutanders" created="Thu, 6 Dec 2007 07:59:49 +0000"  >&lt;p&gt;Thanks for addressing my comments, Dyre. The tests look good, and the fix looks correct and clear. So I think the patch should be committed.&lt;/p&gt;

&lt;p&gt;By the way, Statement.reset() says something about changing the section. I&apos;m not sure if it applies to the section used by writeSetSpecialRegister(), but you may want to take a look at it just in case. (I noticed that section_.free() is called more places in the code than setSpecialRegisterSection_.free(). I think those calls are either related to batching or to reset(), so I don&apos;t think it&apos;s important for the special register section, but I wanted to mention it just in case.)&lt;/p&gt;</comment>
                            <comment id="12549027" author="dyret" created="Thu, 6 Dec 2007 13:25:27 +0000"  >&lt;p&gt;From what I can tell, the call to Section.free() in Statement.initResetStatement() can either come from a call to Statement&apos;s constructor, or from a chain of 13&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; method calls originating from ClientPooledConnection.reset(). &lt;/p&gt;

&lt;p&gt;My interpretation of this is that by freeing Sections in initResetStatement() we ensure that Statements belonging to unused Connections in a connection pool do not hold on to Section objects. This sounds reasonable, so I think it is a good idea to free setSpecialRegisterSection_ in Statement.initResetStatement() as well.&lt;/p&gt;</comment>
                            <comment id="12549370" author="dyret" created="Fri, 7 Dec 2007 10:51:45 +0000"  >&lt;p&gt;v6 is the final &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; version of this patch. All tests pass. Plan to commit shortly.&lt;/p&gt;</comment>
                            <comment id="12549720" author="dyret" created="Sat, 8 Dec 2007 16:22:47 +0000"  >&lt;p&gt;Committed revision 602495.&lt;/p&gt;</comment>
                            <comment id="12549721" author="dyret" created="Sat, 8 Dec 2007 16:23:26 +0000"  >&lt;p&gt;Committed revision 602495.&lt;/p&gt;</comment>
                            <comment id="12559923" author="dyret" created="Thu, 17 Jan 2008 13:36:48 +0000"  >&lt;p&gt;Fixed&lt;/p&gt;</comment>
                            <comment id="12582567" author="dyret" created="Thu, 27 Mar 2008 09:36:47 +0000"  >&lt;p&gt;This issue has no fix version, but has been checked in to trunk after the 10.3 branch was cut, and has not been merged to the 10.3 branch (before the last release). &lt;br/&gt;
(Some have been checked into trunk after 10.4 was cut and then merged to 10.4).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12534182">DERBY-5524</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12382122">DERBY-3192</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12370195" name="derby-3198.v1.diff" size="5228" author="dyret" created="Mon, 26 Nov 2007 11:40:07 +0000"/>
                            <attachment id="12370206" name="derby-3198.v2.diff" size="4928" author="dyret" created="Mon, 26 Nov 2007 14:51:54 +0000"/>
                            <attachment id="12370819" name="derby-3198.v3.diff" size="5535" author="dyret" created="Mon, 3 Dec 2007 10:38:15 +0000"/>
                            <attachment id="12371016" name="derby-3198.v4.diff" size="7452" author="dyret" created="Wed, 5 Dec 2007 10:21:39 +0000"/>
                            <attachment id="12371046" name="derby-3198.v5.diff" size="8266" author="dyret" created="Wed, 5 Dec 2007 15:58:45 +0000"/>
                            <attachment id="12371219" name="derby-3198.v6.diff" size="8609" author="dyret" created="Fri, 7 Dec 2007 10:51:45 +0000"/>
                            <attachment id="12369332" name="repro.diff" size="707" author="dyret" created="Sun, 11 Nov 2007 21:56:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 12 Nov 2007 18:41:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23491</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0eg7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36159</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>