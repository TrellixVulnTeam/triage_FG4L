<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-646/DERBY-646.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-646] In-memory backend storage support</title>
                <link>https://issues.apache.org/jira/browse/DERBY-646</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;To allow creation and modification of databases in-memory without requiring disk access or space to store the database.&lt;/p&gt;</description>
                <environment>All</environment>
        <key id="12325015">DERBY-646</key>
            <summary>In-memory backend storage support</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="sfitch">Stephen Fitch</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 Oct 2005 03:32:38 +0100</created>
                <updated>Fri, 7 May 2010 10:05:58 +0100</updated>
                            <resolved>Fri, 7 May 2010 10:05:58 +0100</resolved>
                                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>37</votes>
                                    <watches>34</watches>
                                                                                                            <comments>
                            <comment id="12356120" author="sfitch" created="Fri, 28 Oct 2005 04:22:15 +0100"  >&lt;p&gt;I currently have an in-memory implementation of the storage factory interface &quot;working&quot; with the embedded client. It requires a very minimal change to one existing class and the addition of 6 more.&lt;/p&gt;

&lt;p&gt;It&apos;s easily plugged into the embeded client with -Dderby.subSubProtocol.memory=org.apache.derby.impl.io.MemoryStorageFactory, but I&apos;m still trying to work out how to get it going with the network server. (use jdbc:derby:memory:&amp;lt;database;attributes&amp;gt; as connection url)&lt;/p&gt;

&lt;p&gt;MemoryStorageFactory - In-memory implementation of StorageFactory&lt;/p&gt;

&lt;p&gt;MemoryStorageFile extends InputStreamFile - wraps most calls to another class with a hashtable keyed by full filepath names&lt;/p&gt;

&lt;p&gt;MemoryStorageRandomAccessFile - extends java.io.RandomAccessFile and overrides its&apos; read, write and native methods.&lt;/p&gt;

&lt;p&gt;DynamicByteArrayIOStream - Readable, writable dynamically accessible byte array. This was done because I didnt want to have to implement the DataInput and DataOutput interfaces specified by the StorageRandomAccessFile interface (which would have been just copying them from java.io.RandomAccessFile).  It is by no means an optimal implementation, but it works.&lt;/p&gt;

&lt;p&gt;DynamicByteArrayIOStreamFile - the class above extended with file attributes (ex: do I exist, am I a directory).&lt;/p&gt;

&lt;p&gt;MemoryMetadata - generalized location for StorageFile paths and DynamicByteArrayIOStreamFile objects. Also&lt;/p&gt;

&lt;p&gt;The naming convention is debatable and as this is still a work in progress can be changed.&lt;/p&gt;

&lt;p&gt;Any and all suggestions welcome &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12359484" author="mperham" created="Wed, 7 Dec 2005 07:13:08 +0000"  >&lt;p&gt;I would love to see Derby in-memory only support for unit testing purposes.  This would solve a major problem of ours.&lt;/p&gt;</comment>
                            <comment id="12368963" author="sfitch" created="Mon, 6 Mar 2006 09:39:15 +0000"  >&lt;p&gt;Implementation rewritten to be more modular.  Requires no changes to existing code to work. Define property derby.subSubProtocol.memory=org.apache.derby.impl.io.MemoryStorageFactory and use connection url jdbc:derby:memory:databasename&lt;/p&gt;</comment>
                            <comment id="12369704" author="jmsynge" created="Fri, 10 Mar 2006 02:37:32 +0000"  >&lt;p&gt;I&apos;m with Mike in wanting to use this for unit testing purposes.  My group has a &quot;fake&quot; db implementation that provides an in-memory &quot;database&quot; (not sql), but it is becoming a pain to maintain it as we try to take more advantage of SQL features, so Stephen&apos;s solution sounds great.&lt;/p&gt;</comment>
                            <comment id="12369719" author="djd" created="Fri, 10 Mar 2006 03:01:26 +0000"  >&lt;p&gt;I think it would be great to have an in-memory db support like this and thanks for working on it Stephen,&lt;br/&gt;
but there are a few issues to resolve first.&lt;/p&gt;

&lt;p&gt;We would need an ICLA on file at apache from Stephen Fitch before this could be committed into Derby.&lt;/p&gt;

&lt;p&gt;A quick look at the patch showed a couple of extra classes in the org.apache.derby.io package which is the published api for&lt;br/&gt;
the virtual file system, classes such as VirtualFileData and VirtualFS. I can&apos;t tell what the purpose of these classes are since there&lt;br/&gt;
are no comments for them, thus it makes it impossible for anyone to implement them without guessing what the requirements are.&lt;/p&gt;

&lt;p&gt;Also seemed to be no tests provided with the patch, so how would a reviewer know that this works or not?&lt;/p&gt;

&lt;p&gt;Copyrights on all the files seem to have incorrect dates, and file names.&lt;/p&gt;

&lt;p&gt;The wiki has information on what is required:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyContributorChecklist&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyContributorChecklist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyCommitProcess&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyCommitProcess&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/PatchAdvice&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/PatchAdvice&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12412140" author="ashwinjay" created="Wed, 17 May 2006 18:32:39 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
I would like to try this patch. But, I don&apos;t see any JAR or Java files attached. Could you pls tell me where I can download this patch?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ashwin.&lt;/p&gt;</comment>
                            <comment id="12412180" author="fuzzylogic" created="Wed, 17 May 2006 22:19:18 +0100"  >&lt;p&gt;The patch is attached to this issue as a diff file. You need to get a local copy of the Derby source, then download the patch from JIRA (generally, right-click -&amp;gt; save as... on the attachment &apos;svn.diff&apos;), then patch your local copy using &apos;patch -p0 &amp;lt; svn.diff&apos; or your IDE, if it supports patching. I know Eclipse will apply patches generated by CVS and SVN. You will then need to build a local copy of Derby with the patch applied to try out the patch.&lt;/p&gt;

&lt;p&gt;For help checking out the Derby source code from Subversion, see: &lt;a href=&quot;http://db.apache.org/derby/derby_downloads.html#Derby+source+code&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/derby_downloads.html#Derby+source+code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For help building, see BUILDING.txt at the top of the source tree and/or &lt;a href=&quot;http://svn.apache.org/repos/asf/db/derby/code/trunk/BUILDING.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/db/derby/code/trunk/BUILDING.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12426368" author="davidvc" created="Tue, 8 Aug 2006 00:48:23 +0100"  >&lt;p&gt;Are separate tests needed for this feature.  Isn&apos;t this a configuration option, e.g. couldn&apos;t we run the storemats suite with the system configured to use this store module?&lt;/p&gt;</comment>
                            <comment id="12426372" author="djd" created="Tue, 8 Aug 2006 00:55:30 +0100"  >&lt;p&gt;Probably no new tests are required but some changes to ensure the feature is tested, such as the ability to run tests with this configuration and suites that use the configuration.&lt;br/&gt;
As in my earlier comments, I don&apos;t think this patch is ready to be committed, my concern is the new classes added to the publi api, with no coments or documentation as to what they are for.&lt;br/&gt;
Why would a release not be needed?&lt;/p&gt;</comment>
                            <comment id="12437075" author="sateh" created="Sat, 23 Sep 2006 13:41:54 +0100"  >&lt;p&gt;Has anything happened with this patch? I don&apos;t see any comments from the original submitter.&lt;/p&gt;</comment>
                            <comment id="12449376" author="kristwaa" created="Mon, 13 Nov 2006 14:16:45 +0000"  >&lt;p&gt;I tried to apply this patch. It applied (some chunks needed to be offset), but it did not compile.&lt;br/&gt;
I&apos;m clearing the patch available flag, as the patch is clearly not ready for commit.&lt;/p&gt;

&lt;p&gt;There seems to be some interest for this feature, so I &lt;b&gt;might&lt;/b&gt; spend some time to wash the patch to the level where it can be applied and tested. However, some more work from the original contributer would be greatly appreciated &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; For instance, documenting new classes would be very helpful (as requested earlier by Dan).&lt;/p&gt;

&lt;p&gt;Note that I&apos;m also unassigning the original contributer for now, since it has been approx 8 months since the last activity.&lt;br/&gt;
Feel free to reclaim the issue if you plan working on it!&lt;/p&gt;</comment>
                            <comment id="12449662" author="kristwaa" created="Tue, 14 Nov 2006 13:07:41 +0000"  >&lt;p&gt;&apos;derby-646-1a-raw-compiles.diff&apos; is a minor fix of the original patch &apos;svn.diff&apos;. The patch now applies to trunk and compiles. No other clean-ups/changes have been done, but I had to rewrite a little bit to solve circular compile dependencies.&lt;/p&gt;

&lt;p&gt;As far as I can tell, the basic functionality is working. I was able to run with the memory storage backend, which creates a database directory with lock files and a tmp directory. Tried running a few tests with a &quot;hacked&quot; JDBCClient implementation, and the tests passed. Had some problems with warnings regarding dual boot (missing shutdown/clean-up?).&lt;/p&gt;

&lt;p&gt;I think a little more clean-up should be done first (implement a missing method - getURL, remove commented out code, add some more comments), and then the patch can be reviewed for functional/design improvements.&lt;br/&gt;
We might want some tests written specifically for the memory backend, and then run the existing tests with the memory backend as well.&lt;/p&gt;

&lt;p&gt;Stephen Fitch is listed at &lt;a href=&quot;http://people.apache.org/~jim/committers.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~jim/committers.html&lt;/a&gt; under &quot;Unlisted CLAs&quot;. Is this enough to allow us to safely bring this code into the repository?&lt;/p&gt;</comment>
                            <comment id="12481708" author="fuzzylogic" created="Fri, 16 Mar 2007 17:32:20 +0000"  >&lt;p&gt;&quot;Stephen Fitch is listed at &lt;a href=&quot;http://people.apache.org/~jim/committers.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~jim/committers.html&lt;/a&gt; under &quot;Unlisted CLAs&quot;. Is this enough to allow us to safely bring this code into the repository?&quot;&lt;/p&gt;

&lt;p&gt;The answer to this question is yes, sorry I missed it when it was posed several months ago. The &apos;Grant license to ASF&apos; box was also checked when the original code was submitted, so anyone who wants to work on getting this code complete enough to be committed should feel free to do so.&lt;/p&gt;</comment>
                            <comment id="12502724" author="mipper" created="Fri, 8 Jun 2007 09:56:21 +0100"  >&lt;p&gt;I think people are under valuing this request as a useful tool in production code.  I&apos;m currently using H2 to implement a multi-threaded matching engine which takes a series of events and matches aggregated information held in an in-memory database in real time.  The datasets never get too large but the matching can be quite complex.  Being able to use the expressive power of SQL without the overhead of pesisting the information to disk makes the matching process very fast while providing all of the thread synchronisation required in a tried and tested package.  My only problem with H2 is the granularity of its locking.  Table or nothing.  This causes blocking as the tables are updated which an in-memory, row-locked version of Derby would reduce considerably.  We&apos;re talking manna from heaven here.&lt;/p&gt;

&lt;p&gt;Are there any plans to include this in the main release?&lt;/p&gt;</comment>
                            <comment id="12502804" author="myrna" created="Fri, 8 Jun 2007 15:04:49 +0100"  >&lt;p&gt;Although this issue has had a number of votes, I have to say, it currently doesn&apos;t look like it&apos;ll make it for 10.3 - it appears there has not been any testing of the patch by prospecting users nor did anyone sign up to drive this to completion.&lt;/p&gt;

&lt;p&gt;If you are interested in this, feel free to give the patch a try and help driving this into the next release after 10.3.&lt;/p&gt;</comment>
                            <comment id="12504028" author="kmarsden" created="Tue, 12 Jun 2007 23:30:23 +0100"  >&lt;p&gt;Knut Magne Solem submitted a  proof of concept for this issue is attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2798&quot; title=&quot;A new approach for main-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2798&quot;&gt;&lt;del&gt;DERBY-2798&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12512711" author="david_syer" created="Sat, 14 Jul 2007 13:37:39 +0100"  >&lt;p&gt;I would like to test this storage strategy, but I don&apos;t know how to set it up.  I have compiled the code against 10.2.1.6, and now I want to obtain a connection (ideally through a DataSource).  This is what I tried&lt;/p&gt;

&lt;p&gt;System.setProperty(&quot;derby.subSubProtocol.memory&quot;, &lt;br/&gt;
    &quot;org.apache.derby.impl.io.MemoryStorageFactory&quot;);&lt;/p&gt;

&lt;p&gt;EmbeddedDataSource ds = new EmbeddedDataSource();&lt;br/&gt;
ds.setDatabaseName(&quot;memory:test&quot;);&lt;br/&gt;
ds.setCreateDatabase(&quot;create&quot;);&lt;br/&gt;
Connection connection = ds.getConnection();&lt;/p&gt;

&lt;p&gt;It fails with &lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Failed to start database &apos;memory:test&apos;, see the next exception for details.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	...&lt;/p&gt;

&lt;p&gt;There is no &quot;next exception&quot; in the stack trace.&lt;/p&gt;

&lt;p&gt;I also tried:&lt;/p&gt;

&lt;p&gt;System.setProperty(&quot;derby.subSubProtocol.memory&quot;, &lt;br/&gt;
    &quot;org.apache.derby.impl.io.MemoryStorageFactory&quot;);&lt;br/&gt;
DriverManager.registerDriver(new org.apache.derby.jdbc.EmbeddedDriver());&lt;br/&gt;
Connection connection = DriverManager.getConnection(&quot;jdbc:derby:memory:test&quot;)&lt;/p&gt;

&lt;p&gt;which fails the same way.&lt;/p&gt;
</comment>
                            <comment id="12513868" author="david_syer" created="Thu, 19 Jul 2007 11:36:36 +0100"  >&lt;p&gt;I trie dit with 10.3.1.2 in case that was the problem.  Had to patch the patch slightly to implement two methods that were unimplemented abstract (guessed the implementation, but did get far enough to test it).&lt;/p&gt;

&lt;p&gt;Now I get a more helpful stack trace (but maybe this is another problem?):&lt;/p&gt;</comment>
                            <comment id="12513869" author="david_syer" created="Thu, 19 Jul 2007 11:36:56 +0100"  >&lt;p&gt;java.lang.SecurityException: sealing violation: can&apos;t seal package org.apache.derby.impl.io: already loaded&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:235)&lt;br/&gt;
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)&lt;br/&gt;
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass(ClassLoader.java:620)&lt;br/&gt;
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)&lt;br/&gt;
	at java.net.URLClassLoader.access$100(URLClassLoader.java:56)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:195)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)&lt;br/&gt;
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)&lt;br/&gt;
	at java.lang.Class.forName0(Native Method)&lt;br/&gt;
	at java.lang.Class.forName(Class.java:164)&lt;br/&gt;
	at test.EmeddedMemoryTests.setUp(EmeddedMemoryTests.java:41)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:125)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;
</comment>
                            <comment id="12514237" author="ashwinjay" created="Fri, 20 Jul 2007 17:43:04 +0100"  >&lt;p&gt;The Derby JAR file is sealed - and this means that all the Derby packages specified in the JAR file&apos;s Manifest are sealed and you cannot add a new Class that shares the Package names to the Classpath. &lt;/p&gt;

&lt;p&gt;Since there are classes in org.apache.derby.impl.io Package in the Derby &quot;sealed&quot; JAR, you cannot append a Class like org.apache.derby.impl.io.PureMemStore that resides outside the JAR to the ClassPath. Unless I&apos;m completely wrong, you will have to use the Source code and add your files there and then recreate the JAR file.&lt;/p&gt;</comment>
                            <comment id="12514254" author="david_syer" created="Fri, 20 Jul 2007 18:23:43 +0100"  >&lt;p&gt;Is there an &quot;unsealed&quot; derby.jar available?  I guess I just lost interest in testing this very interesting looking feature.  I hope someone else can do it.&lt;/p&gt;</comment>
                            <comment id="12514277" author="ashwinjay" created="Fri, 20 Jul 2007 19:43:31 +0100"  >&lt;p&gt;You can un-JAR the file to a directory, paste your compiled Classes into that folder and use this &quot;exploded&quot; directory with the original classes and your changes in the Classpath instead of having the JAR in the ClassPath.&lt;/p&gt;</comment>
                            <comment id="12572420" author="dyret" created="Tue, 26 Feb 2008 11:01:04 +0000"  >&lt;p&gt;This issue seems to use either &apos;existing application impact&apos; or &apos;release note needed&apos; incorrectly, according to the description at &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/DerbyBugGuidelines.html#Set+appropriate+special+%22flags%22&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/DerbyBugGuidelines.html#Set+appropriate+special+%22flags%22&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I plan to remove the flags shortly unless there are additional comments.&lt;/p&gt;</comment>
                            <comment id="12671849" author="kristwaa" created="Mon, 9 Feb 2009 13:33:35 +0000"  >&lt;p&gt;I had a quick look at this again, looking at how an in-memory backend could be wired into Derby.&lt;br/&gt;
From what I can see, the easiest way is to add a single entry to BaseMonitor (and the new constant for the subSubProtocol):&lt;br/&gt;
  storageFactories.put( PersistentService.VFMEM, &quot;org.apache.derby.impl.io.VFMemoryStorageFactory&quot;);&lt;/p&gt;

&lt;p&gt;If VFMemoryStorageFactory (or whatever the class will be called) behaves in the expected way, everything should &quot;just work&quot;. The solution won&apos;t be optimal. The primary goal is to offer a configuration that doesn&apos;t leave any trace in the form of files and directories. Performance may be somewhat better, but the memory usage will be high.  Not only will all the data be stored in memory, parts of it will be stored in multiple copies in memory.&lt;br/&gt;
Note that even though the configuration will implement  PersistentService, data won&apos;t be persisted beyond the life-time of the JVM running Derby. If this causes any problems with rest of the code, remains to be seen.&lt;/p&gt;

&lt;p&gt;A new service could be implemented as well, but I think this will require a lot more effort (feel free to comment on this if you have more information).&lt;/p&gt;

&lt;p&gt;I&apos;ll play some more with the idea and post my findings.&lt;/p&gt;</comment>
                            <comment id="12673850" author="chatom" created="Mon, 16 Feb 2009 11:22:28 +0000"  >&lt;p&gt;Hi folks,&lt;/p&gt;

&lt;p&gt;I&apos;ve implemented the interfaces org.apache.derby.io.&lt;/p&gt;
{StorageFile,StorageRandomAccessFile,WritableStorageFactory}
&lt;p&gt; such that all file system operations are emulated entirely in memory, producing no file or directory on disk.  I&apos;m more than happy to contribute the implementation.&lt;/p&gt;

&lt;p&gt;However, I have a build problem for which I hope to get some help.  To start, for simplicity, I added my source files to &quot;trunk/java/engine/org/apache/derby/impl/io&quot; &amp;#8211; so that I didn&apos;t have to create/modify any &quot;build.xml&quot; files.  I then tried to build the sources and the JAR files.  The sources built with no problem &amp;#8211; all of my classes appeared in &quot;trunk/classes/org/apache/derby/impl/io&quot;.  However, for some reason, the JAR build process did not put my classes into &quot;derby.jar&quot;.  As a result, I had to set the JAVA class path to &quot;trunk/classes&quot; during testing.&lt;/p&gt;

&lt;p&gt;I&apos;d appreciate any help resolving this build problem.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12673865" author="kristwaa" created="Mon, 16 Feb 2009 12:36:45 +0000"  >&lt;p&gt;If your classes aren&apos;t referenced by any other classes used by Derby,  they won&apos;t be included in the jar file(s).&lt;br/&gt;
Assuming you are setting properties to wire in your implementation, you probably need to add your &quot;root class(es)&quot; to &apos;tools/jar/extraDBMSclasses.properties&apos;.&lt;br/&gt;
As you can see, there are many other classes in there. These are used as roots to determine which classes to include in the jars.&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;/p&gt;</comment>
                            <comment id="12674106" author="chatom" created="Tue, 17 Feb 2009 06:15:07 +0000"  >&lt;p&gt;Thanks for the tip on the &quot;extraDBMSclasses.properties&quot; file.  I&apos;m now able to build the JAR files properly with my classes.&lt;/p&gt;

&lt;p&gt;At this point, I have JUnit test cases for the basic building blocks of my implementation.  They run successfully stand-alone, but I have yet to figure out how to integrate them into Derby&apos;s test framework.&lt;/p&gt;

&lt;p&gt;I have also done some manual functional testing of my in-memory storage factory using examples from the Derby tutorial (&lt;a href=&quot;http://db.apache.org/derby/papers/DerbyTut/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/papers/DerbyTut/index.html&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I have not modified any existing Derby tests to use the new in-memory storage factory, as I have yet to figure out how Derby&apos;s test framework works.&lt;/p&gt;

&lt;p&gt;All source files for this implementation are contained in a new sub-directory &quot;java/engine/org/apache/derby/impl/io/memory&quot;.  There is no change to any public API nor to any existing JAVA source file.  One line was added to &quot;java/engine/org/apache/derby/impl/build.xml&quot;, and one line was added to &quot;tools/jar/extraDBMSclasses.properties&quot;, for the new source files to build.&lt;/p&gt;

&lt;p&gt;If people are willing to have a look at what I have so far, then I will post the patch; otherwise, please wait until I have plugged things into the Derby test framework.&lt;/p&gt;</comment>
                            <comment id="12674113" author="chatom" created="Tue, 17 Feb 2009 07:06:26 +0000"  >&lt;p&gt;BTW, there appears to be a discrepancy between code in the constructor of (StorageFactoryService) and documentation for StorageFactory.newStorageFile(String path).&lt;/p&gt;

&lt;p&gt;In the constructor of (StorageFactoryService), there is this block of code:&lt;/p&gt;

&lt;p&gt;     rootStorageFactory = getStorageFactoryInstance( true, null, null, null);&lt;br/&gt;
     if( home != null)&lt;/p&gt;
     {
       StorageFile rootDir = rootStorageFactory.newStorageFile( null);
       rootDir.mkdirs();
     }

&lt;p&gt;Now, according to the javadoc for StorageFactory.newStorageFile(String path), when the parameter (path) is null, we should return the database directory.  But in the above code block, the parameter representing the database directory passed into the initialization of the storage factory, is null.&lt;/p&gt;

&lt;p&gt;According to the documentation for StorageFactory.init(), when the database name parameter is null, we will only work with the home directory.  So I believe the author of the above code block intended (rootDir) to represent the home directory in this case (i.e., when the database parameter is null).  This behavior, however, is not specified in the documentation for StorageFactory.newStorageFile(String path).&lt;/p&gt;

&lt;p&gt;I noticed this discrepancy during manual testing because I was getting (NullPointerException) at the call to rootDir.mkdirs() with my storage factory implementation.  I worked around the problem by having my implementation of newStorageFile(String path) return the home directory when the internal database parameter is null, in the case when the input (path) parameter is null.&lt;/p&gt;

&lt;p&gt;In any event, there appears to be a discrepancy between code and documentation, unless I have misinterpreted the code and/or the documentation.&lt;/p&gt;</comment>
                            <comment id="12674134" author="kristwaa" created="Tue, 17 Feb 2009 08:08:13 +0000"  >&lt;p&gt;Cheng,&lt;/p&gt;

&lt;p&gt;As it happens, I have a working prototype as well. It closely follows the approach taken by Stephen Fitch in the original patch.&lt;br/&gt;
If possible, I think we should somehow try to coordinate our work. I&apos;d like to spend a few more days cleaning up the initial code contribution, as it is pretty fresh.&lt;/p&gt;

&lt;p&gt;Regarding testing, the easiest way to do it is to override the storage factory for PersistentService.DIRECTORY in BaseMonitor. Then you can just run the tests as normal, either by using JUnit directly or by running ant junitreport.&lt;br/&gt;
Currently, I&apos;m getting 24 failures and 66 errors when running junitreport. Somes of these are to be expected, as some tests explicitly tries to access files in the database directory. I also note problems in general with encryption, backup and restoreFrom (in the url) etc, but I suspect these tests require the database files to exist as well.&lt;br/&gt;
Also, some tests will just fail because all the data is stored in memory, for instance &apos;ant junit-lowmem&apos;.&lt;br/&gt;
Lastly, the test framework has a decorator to delete a database and/or a directory. Since it is working against the file system only, it doesn&apos;t manage to delete an in-memory database.&lt;/p&gt;

&lt;p&gt;Note that bugs in the prototype tend to hide if they are triggered during boot. If things go wrong, I recommend to check derby.log before starting debugging.&lt;/p&gt;

&lt;p&gt;I&apos;ll post my code (and the test results) in a day or two, and we should consider how to best cooperate on this issue.&lt;/p&gt;

&lt;p&gt;Regards,&lt;/p&gt;</comment>
                            <comment id="12674165" author="chatom" created="Tue, 17 Feb 2009 10:19:53 +0000"  >&lt;p&gt;Sometime back I played a bit with the original solution posted in this thread.  I remember that it produced some files and directories on disk although it was supposed to be an in-memory storage factory.  But if it works and suits the tasks at hand, we should let it be.&lt;/p&gt;</comment>
                            <comment id="12674172" author="kristwaa" created="Tue, 17 Feb 2009 11:05:56 +0000"  >&lt;p&gt;Yes, me too. However, since I was interested in learning a bit more about Derby and because I didn&apos;t know the state of the existing patch, I started from scratch.&lt;br/&gt;
It is my impression that the existing patch isn&apos;t &quot;production ready&quot;.&lt;/p&gt;

&lt;p&gt;I think it would be cool to compare our approaches. Maybe we can draw from both of them and create an even better solution!&lt;br/&gt;
The only thing my prototype leaves on disk, is derby.log. I think this can be easily changed, but often you would want to consult the log anyway.&lt;br/&gt;
The goal of my implementation is to avoid creating files/dirs on disk, which for some people is attractive for running tests. I believe there are also performance benefits, especially for update operations, at the cost of increased memory usage of course. The database creation time should also be shorter, but I haven&apos;t obtained any numbers on this yet.&lt;/p&gt;</comment>
                            <comment id="12674279" author="davidsims" created="Tue, 17 Feb 2009 17:42:49 +0000"  >&lt;p&gt;I&apos;m following this thread with great interest. Many thanks to you guys for working on this.&lt;/p&gt;

&lt;p&gt;&amp;gt; The only thing my prototype leaves on disk, is derby.log. I think this can be easily&lt;br/&gt;
&amp;gt; changed, but often you would want to consult the log anyway.&lt;/p&gt;

&lt;p&gt;For what it&apos;s worth, in my situation, the option of having absolutely nothing written to disk is a huge benefit.&lt;/p&gt;

&lt;p&gt;Thank you for your work,&lt;br/&gt;
David&lt;/p&gt;</comment>
                            <comment id="12674300" author="kristwaa" created="Tue, 17 Feb 2009 18:59:38 +0000"  >&lt;p&gt;Thank you for the feedback, David.&lt;/p&gt;

&lt;p&gt;&amp;gt; For what it&apos;s worth, in my situation, the option of having absolutely nothing written to disk is a huge benefit. &lt;/p&gt;

&lt;p&gt;What do you want to happen with derby.log, which may contain critical information about errors happening in Derby?&lt;br/&gt;
Note that the file by default will be overwritten when you restart Derby, so it shouldn&apos;t eat up your disk space. Since very little is written to it under normal operation, it shouldn&apos;t degrade performance. If you fire up lots of instances in different directories (without setting derby.system.home), you do get &apos;derby.log&apos; files lying around though.&lt;/p&gt;

&lt;p&gt;If you want to discard the information, I think you have the possibility to do that yourself using one of the derby.stream.error properties. To make it even easier, we could add a stream class to the Derby engine jar file that simply discards the information (if specifying null causes the information to be printed to std err).&lt;/p&gt;

&lt;p&gt;My personal choice would be to not discard error information by default though, and I think it should be a conscientious choice made by the user / developer, but feel free to disagree &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12674339" author="davidsims" created="Tue, 17 Feb 2009 19:53:11 +0000"  >&lt;p&gt;Thanks, Kristian.&lt;/p&gt;

&lt;p&gt;In my situation, I would use Derby as a strictly embedded database, and I don&apos;t want my users to even be confused by the presence of a derby.log file, however empty it may be. The experience with my users tells me that it&apos;s best just to have absolutely nothing. I can deal with the usual SQLException errors that come along.&lt;/p&gt;

&lt;p&gt;However you and the others might feel that should best be configured in Derby, I leave up to you all. I would just like to chime in and request that there be a way to configure things so that absolutely nothing is on disk, including derby.log &amp;#8211; however that might work out.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
David&lt;/p&gt;</comment>
                            <comment id="12674441" author="chatom" created="Wed, 18 Feb 2009 03:21:26 +0000"  >&lt;p&gt;I believe &quot;derby.log&quot; is Derby&apos;s execution log, and operations on that log would probably not be going through the database storage layer.  A run-time option to disable execution logging should be a separate work item (please file a ticket) and not be included in the resolution of this issue, in my opinion.&lt;/p&gt;</comment>
                            <comment id="12674692" author="kmarsden" created="Wed, 18 Feb 2009 16:53:26 +0000"  >&lt;p&gt;As Kristian mentioned, you can disable error logging by using derby.stream.error.field or derby.stream.error.method. See&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/10.4/tuning/rtunproper35028.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.4/tuning/rtunproper35028.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/10.4/tuning/rtunproper33027.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.4/tuning/rtunproper33027.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we probably don&apos;t need to file a separate issue for that.&lt;/p&gt;</comment>
                            <comment id="12675045" author="kristwaa" created="Thu, 19 Feb 2009 17:12:17 +0000"  >&lt;p&gt;The patch &apos;derby-646-2a-vfmem_first_rev.diff&apos; is the first revision of an in-memory backend for Derby.&lt;/p&gt;

&lt;p&gt;The implementation takes the same general approach as the original patch contributed by Stephen Fitch, but it is implemented from scratch.&lt;br/&gt;
This was a choice I made because the state of the original patch was unknown, and I wanted to learn more about the internals of Derby in this area.&lt;/p&gt;

&lt;p&gt;Since this is the first revision, there are limitations;&lt;br/&gt;
 o The maximum &quot;file size&quot; is 256 MB, 512 MB or 2 GB depending on the page size used.&lt;br/&gt;
    The system tries to make the blocks used to store data the same size as the pages used by Derby. When the page size is &quot;indeterminable&quot;, 4 KB is used by default.&lt;br/&gt;
    If you hit the 256 MB limit, you have two options; set the page size to 32 KB, or modify BlockedByteArray.&lt;br/&gt;
    I think that either the max size should be configurable via properties, or the BlockedByteArray should be extended with a better growth functionality. This is basically a tradeoff between memory usage for smaller files, and CPU usage (copying bytes). As an alternative, I think one can avoid both excessive memory overhead and byte copying by adding complexity &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
 o The in-memory backend is not enabled for the client driver.&lt;br/&gt;
    I haven&apos;t investigated this, but if you want to test with the client driver, replace the storage factory class for PersistentStorage.DIRECTORY in BaseMonitor with the VFMemoryStoreageFactory.&lt;br/&gt;
    This will make the in-memory backend the default backend, and &lt;b&gt;none&lt;/b&gt; of you databases will be persisted.&lt;br/&gt;
    I think some handling code in the client driver has to be added to make the in-memory backend available there.&lt;br/&gt;
 o There is no easy way to delete a database, except for restarting the JVM.&lt;br/&gt;
    If this is a problem for your usage, there is a purgeDatabase-method in the storage factory (a database is currently named by an absolute file path in the storage factory).&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;How to test&amp;#93;&lt;/span&gt;&lt;br/&gt;
 1) Download the patch (2a), apply it and build Derby.&lt;br/&gt;
 2) Connect to a database using the following prefix in the JDBC connection url: &quot;jdbc:derby:mem&quot; (remember to create the database the first time you connect to it).&lt;/p&gt;


&lt;p&gt;WARNING: I have only tested this on OpenSolaris. It would be nice if someone running Windows could take the patch for a test-spin.&lt;br/&gt;
I&apos;m sure there are more limitations and problems, but I&apos;d like to get this out in the community as soon as possible. I have managed to run most of the existing regression tests with the patch, so it should be usable.&lt;/p&gt;

&lt;p&gt;Feedback is welcome. &lt;/p&gt;</comment>
                            <comment id="12675052" author="kristwaa" created="Thu, 19 Feb 2009 17:27:56 +0000"  >&lt;p&gt;Forgot to say, but if you want to spend time on some of the known weaker spots of the patch, search the diff for &quot;TODO&quot;.&lt;/p&gt;

&lt;p&gt;Also, I&apos;m wondering if it would be wise or not to ditch the self-made path handling and rely on java.io.File instead.&lt;/p&gt;</comment>
                            <comment id="12675713" author="chatom" created="Sun, 22 Feb 2009 21:39:12 +0000"  >&lt;p&gt;Hi folks,&lt;/p&gt;

&lt;p&gt;Attached (derby-646-20090222.stat, derby-646-20090222.diff) is my implementation of the interfaces org.apache.derby.io.&lt;/p&gt;
{StorageFile,StorageRandomAccessFile,WritableStorageFactory}
&lt;p&gt; such that all file system operations are emulated entirely in memory, producing no file or directory on disk.&lt;/p&gt;

&lt;p&gt;A brief description of the content:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java\engine\org\apache\derby\impl\io\memory&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This directory contains the source files for the implementation of the database storage factory interfaces.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java\testing\org\apache\derbyTesting\functionTests\tests\memoryIO&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This directory contains the source files for the JUnit tests.  It consists of three sets of fairly extensive unit tests of the basic building blocks of my implementation.  They started out as five sets of stand-alone JUnit tests and were converted to conform to Derby&apos;s JUnit test framework.  In the process of conversion, two sets of stand-alone tests were dropped because they use on-disk operations to verify the correctness of in-memory operations, and Derby&apos;s test framework does not allow arbitrary operations on disk, as far as I can tell.  These unit tests run only in the embedded mode of Derby&apos;s test framework, because they make no DB connections.&lt;/p&gt;

&lt;p&gt;  In addition, there is one functional test consisting of a simple but non-trivial clustering application.  It is non-trivial because clustering is an important application in many engineering and scientific disciplines; it is simple in that it computes clustering of numerical data in one dimensional space &amp;#8211; the simplest case.  The application implements the same algorithm in both JAVA (computed by the JUnit test case object itself) and SQL (computed by Derby using the in-memory storage factory) and cross-checks the computed results, within some floating-point tolerance.  The SQL portion of the application computes quite a few CREATE, INSERT, DELETE, SELECT, JOIN, GROUP BY, ORDER BY, DROP; and so should exercise the storage layer to a good extent.  This functional test runs in both the embedded mode and the client mode of Derby&apos;s test framework.&lt;/p&gt;

&lt;p&gt;The sub-sub-protocol associated with this in-memory storage factory is named &quot;memory&quot;.  So the connection string looks like &quot;jdbc:derby:memory:MyTestDb&quot; or &quot;jdbc:derby://localhost:1527/memory:MyTestDb&quot;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;HELP!!!  I&apos;ve gotten the tests compiled properly with &quot;ant all&quot;.  The compiled class files show up under &quot;classes\org\apache\derbyTesting\functionTests\tests\memoryIO&quot;.  But again I&apos;m running into the problem of not knowing how to get them included in the &quot;derbyTesting.jar&quot; file.&lt;/p&gt;

&lt;p&gt;Nor did I figure out how to have them automatically executed with &quot;ant junit-all&quot;, &quot;ant junitreport&quot;, etc.  For now, this is what I do after &quot;ant all&quot; to execute the tests on Windows:&lt;/p&gt;

&lt;p&gt;  java -cp .\tools\java\junit.jar;.\classes junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.memoryIO._Suite&lt;/p&gt;

&lt;p&gt;(BTW, when I execute the above command, the disk activity LED on my computer goes wild during the functional test.  That doesn&apos;t happen with the stand-alone version of the same functional test (before conversion to run under Derby&apos;s test framework).  Perhaps I have mis-configured something in the test object itself such that the above command does not actually test the in-memory storage factory?)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Existing files modified by this patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java\engine\org\apache\derby\impl\build.xml&lt;br/&gt;
  tools\jar\extraDBMSclasses.properties&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  These two files were modified so that my implementation would be compiled and included in Derby&apos;s JAR files.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java\engine\org\apache\derby\iapi\services\monitor\PersistentService.java&lt;br/&gt;
  java\engine\org\apache\derby\impl\services\monitor\BaseMonitor.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  These two files were modified only because I did not feel like typing &quot;-Dderby.subSubProtocol.memory=org.apache.derby.impl.io.memory.MemoryStorageFactory&quot; for every run.  I simply added a mapping from the &quot;memory&quot; service to the &quot;org.apache.derby.impl.io.memory.MemoryStorageFactory&quot; class in BaseMonitor.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java\testing\build.xml&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This file was modified so that my tests would be compiled into class files under &quot;classes\org\apache\derbyTesting\functionTests\tests\memoryIO&quot;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12676272" author="kristwaa" created="Tue, 24 Feb 2009 13:47:29 +0000"  >&lt;p&gt;We now have two candidate solutions. How do we proceed?&lt;/p&gt;

&lt;p&gt;I would very much like to get an in-memory back end included in the upcoming&lt;br/&gt;
10.5 release. In my opinion this should be pretty safe, as almost no existing&lt;br/&gt;
code is modified and the user has to take an active step to use the in-memory&lt;br/&gt;
back end.&lt;/p&gt;

&lt;p&gt;To start mapping the performance characteristics of the two solutions, I ran&lt;br/&gt;
some of the performance tests we have. Note that these are based on only a few&lt;br/&gt;
runs, and a run time of 60 seconds only (pluss 30 seconds warmup). The numbers&lt;br/&gt;
are average tps (transactions per second).&lt;br/&gt;
There is some variation in the tests, so where the numbers differ only by a very&lt;br/&gt;
small percentage, I think we can assume the performance is comparable for now.&lt;/p&gt;

&lt;p&gt;Hardware #1: 32 hardware execution threads, 1200 MHz.&lt;br/&gt;
                sr_update   sr_select   bank_tx&lt;br/&gt;
1 thread&lt;br/&gt;
  memory         1963        3059         823&lt;br/&gt;
  vfmem          2307        3753         878&lt;br/&gt;
8 threads&lt;br/&gt;
  memory         7662       14321        2163&lt;br/&gt;
  vfmem         12692       17695        2294&lt;br/&gt;
32 threads&lt;br/&gt;
  memory         7357       13984        2076&lt;br/&gt;
  vfmem         12219       16546        2144&lt;/p&gt;

&lt;p&gt;Hardware #2: Dual core Opteron, 2.4 GHz&lt;br/&gt;
                sr_update   sr_select   bank_tx&lt;br/&gt;
1 thread&lt;br/&gt;
  memory        12257       20295        5123&lt;br/&gt;
  vfmem         12288       20657        5189&lt;br/&gt;
4 threads&lt;br/&gt;
  memory        15064       32117        6120&lt;br/&gt;
  vfmem         15857       32629        6115&lt;br/&gt;
8 threads&lt;br/&gt;
  memory        16682       31257        5767&lt;br/&gt;
  vfmem         16357       31361        5775&lt;/p&gt;


&lt;p&gt;Hardware #3: 2xDual core Opteron, 2.8 GHz&lt;br/&gt;
                sr_update   sr_select   bank_tx&lt;br/&gt;
1 thread&lt;br/&gt;
  memory        13548       22184         5805&lt;br/&gt;
  vfmem         13705       21770         5765&lt;br/&gt;
4 threads&lt;br/&gt;
  memory        29019       57861        10443&lt;br/&gt;
  vfmem         29727       58053        10479&lt;br/&gt;
8 threads&lt;br/&gt;
  memory        26348       46580         9372&lt;br/&gt;
  vfmem         26676       46805         9347&lt;br/&gt;
16 threads&lt;br/&gt;
  memory        24500       44249         8976&lt;br/&gt;
  vfmem         24883       43832         9014&lt;/p&gt;


&lt;p&gt;Hardware #2: Dual core Opteron, 2.4 GHz, sr_update, page cache size&lt;br/&gt;
                40      1000    15000&lt;br/&gt;
1 thread&lt;br/&gt;
  memory         9932   12234   19207&lt;br/&gt;
  vfmem         10075   12223   18995&lt;br/&gt;
8 threads&lt;br/&gt;
  memory        12898   16540   26393&lt;br/&gt;
  vfmem         13148   16662   28017&lt;/p&gt;

&lt;p&gt;Hardware #2: Dual core Opteron, 2.4 GHz, sr_update, page size&lt;br/&gt;
Page cache size |     40    |   |    1000   |&lt;br/&gt;
                4 KB    32 KB   4 KB    32 KB&lt;br/&gt;
1 thread&lt;br/&gt;
  memory         9902    2902   12369   20168&lt;br/&gt;
  vfmem         10342    3247   12059   19801  &lt;br/&gt;
8 threads&lt;br/&gt;
  memory        12926    3599   16523   27333&lt;br/&gt;
  vfmem         13261    4059   16592   28361&lt;/p&gt;

&lt;p&gt;As far as I can see from these simple performance tests, the only configuration where the two solutions differs significantly, is when running on a CMT (chip multi threading) machine. Of the loads I have tested, this is most clearly visible with update load.&lt;br/&gt;
I have not investigated this further.&lt;/p&gt;

&lt;p&gt;Another thing one could look into, is the memory usage of the two solutions.&lt;/p&gt;</comment>
                            <comment id="12676283" author="kristwaa" created="Tue, 24 Feb 2009 14:02:21 +0000"  >&lt;p&gt;&apos;derby-646-performance_comparison_1a.txt&apos; is my previous post as a text file. The formatting here is a little better...&lt;/p&gt;

&lt;p&gt;Cheng wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So the connection string looks like &quot;jdbc:derby:memory:MyTestDb&quot; or &quot;jdbc:derby://localhost:1527/memory:MyTestDb&quot;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Regarding the client/server URL, should we change the client driver to understand the following URL instead?&lt;br/&gt;
&quot;jdbc:derby:memory://localhost:1527/MyTestDb&quot;&lt;/p&gt;

&lt;p&gt;It looks cleaner to me.&lt;/p&gt;</comment>
                            <comment id="12676400" author="kmarsden" created="Tue, 24 Feb 2009 20:24:06 +0000"  >&lt;p&gt;Kristian asked:&lt;br/&gt;
&amp;gt;We now have two candidate solutions. How do we proceed?&lt;/p&gt;

&lt;p&gt;I haven&apos;t looked at the code but I guess the first thing we need to consider is legal.  Is Cheng Che Chen willing to file an ICLA?&lt;/p&gt;</comment>
                            <comment id="12676402" author="mikem" created="Tue, 24 Feb 2009 20:27:48 +0000"  >&lt;p&gt;As to how to proceed, first is there an icla for cheng&apos;s contribution?&lt;/p&gt;

&lt;p&gt;Is it possible for either of these patches to run through the entire derby test suite, in in-memory mode? &lt;/p&gt;

&lt;p&gt;how does either compare to &quot;test mode&quot; with the page cache set as big as expected in-memory&lt;br/&gt;
use?&lt;/p&gt;

&lt;p&gt;Kristian, or any other committer, can you take a look at both implementations and comment &lt;br/&gt;
on any &lt;br/&gt;
strength&apos;s/weeknesses from both.  As you suggest it would be nice if we could get a combined&lt;br/&gt;
agreed implementation from both.  &lt;/p&gt;

&lt;p&gt;If goal is really the fast approaching 10.5, then it would be nice to have some sort of upper level user documentation.  How to use it, what are limits, is all functionality supported.  What happens in case it runs out of memory, or internal limits. &lt;/p&gt;</comment>
                            <comment id="12676557" author="chatom" created="Wed, 25 Feb 2009 08:26:13 +0000"  >&lt;p&gt;I believe I have included the Apache license header in all the files and had checked the box granting rights to Apache when I submitted those files.  According to the comment by Andrew McIntyre on 16/Mar/07 10:32 AM in this thread, that should be sufficient, no?  To have an ICLA on file, I&apos;ll have to fill it out and mail it to Apache &amp;#8211; this will take some time.  Let me know if this is truly required.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12676561" author="narayanan" created="Wed, 25 Feb 2009 08:41:03 +0000"  >&lt;p&gt;can u please assign the issue to your name? Also for major contributions a icla is generally required and this looks like a major feature. my two paisa!&lt;/p&gt;</comment>
                            <comment id="12676716" author="kristwaa" created="Wed, 25 Feb 2009 17:39:41 +0000"  >&lt;p&gt;Here are some results from running &apos;ant junitreport&apos; with patch 2a&lt;br/&gt;
(vfmem).&lt;/p&gt;

&lt;p&gt;The prefix &apos;org.apache.derbyTesting.&apos; has been removed for brevity.&lt;br/&gt;
The first number is the number of tests run with the vfmem back end,&lt;br/&gt;
the second number is the number of tests run with a clean trunk.&lt;br/&gt;
Note that I changes the memory back end to be the default back end in&lt;br/&gt;
this run (modified the entry for DIRECTORY storage factory in BaseMonitor), and&lt;br/&gt;
I also changed DropDatabaseSetup to delete the in-memory database.&lt;/p&gt;

&lt;p&gt;Suites run without failures:&lt;br/&gt;
junit.EnvTest (9/9)&lt;br/&gt;
functionTests.tests.jdbcapi.AutoloadTest (3/3)&lt;br/&gt;
functionTests.tests.jdbcapi.JDBCDriversEmbeddedTest (8/8)&lt;br/&gt;
functionTests.tests.jdbcapi.JDBCDriversClientTest (4/4)&lt;br/&gt;
functionTests.tests.jdbcapi.JDBCDriversAllTest (12/12)&lt;br/&gt;
functionTests.tests.tools._Suite (87/87)&lt;br/&gt;
functionTests.tests.demo._Suite (2/2)&lt;br/&gt;
functionTests.tests.engine._Suite (11/11)&lt;br/&gt;
functionTests.suites.EncryptionSuite (7/7)&lt;br/&gt;
functionTests.tests.jdbc4._Suite (896/898) // One test added later&lt;br/&gt;
functionTests.tests.management._Suite (100/100)&lt;/p&gt;


&lt;p&gt;The follwing tests had failures and/or errors:&lt;br/&gt;
functionTests.tests.derbynet._Suite (t=122/f=1/e=0)&lt;br/&gt;
    (f) ShutDownDBWhenNSShutsDownTest.testDatabasesShutDownWhenNSShutdown&lt;br/&gt;
functionTests.tests.lang._Suite (t=1473/f=4/e=2)&lt;br/&gt;
    (f) DatabaseClassLoadingTest.testCreateDatabaseJar&lt;br/&gt;
    (f) DatabaseClassLoadingTest.testDatabaseInJar&lt;br/&gt;
    (f) ConnectTest.testDBName&lt;br/&gt;
    (f) ConnectTest.testDBName&lt;br/&gt;
    (e) DatabaseClassLoadingTest.testHackedJarReplacedClass&lt;br/&gt;
    (e) DBInJarTest.testConnectDBInJar&lt;br/&gt;
functionTests.tests.jdbcapi._Suite (t=6301/f=2/e=0)&lt;br/&gt;
    (f) PoolXADSCreateShutdownDBTest.testXADS&lt;br/&gt;
    (f) PoolXADSCreateShutdownDBTest.testXADS&lt;br/&gt;
functionTests.tests.store._Suite (t=98/f=4/e=19)&lt;br/&gt;
    (f) BootAllTest.testSettingBootAllPropertyWithHomePropertySet&lt;br/&gt;
    (f) OSReadOnlyTest.testOSReadOnly&lt;br/&gt;
    (f) OSReadOnlyTest.testOSReadOnly&lt;br/&gt;
    (f) BackupRestoreTest.testDerby3875&lt;br/&gt;
        o Ok, test is trying to correct file on disk.&lt;br/&gt;
    (e) OfflineBackupTest.testCreateFromRestoreFrom&lt;br/&gt;
 6x (e) EncryptionKeyAESTest&lt;br/&gt;
 6x (e) EncryptionKeyBlowfishTest&lt;br/&gt;
 6x (e) EncryptionKeyDESTest&lt;br/&gt;
unitTests.junit._Suite&lt;br/&gt;
    (crashes due to ant/junit problem, will rerun later)&lt;br/&gt;
    (e) AccessControlException&lt;br/&gt;
functionTests.tests.upgradeTests._Suite (t=420/f=12/e=42)&lt;br/&gt;
    (needs investigation)&lt;br/&gt;
functionTests.tests.memory._Suite&lt;br/&gt;
        o Ok, fails because it sets the heap size really low and tries&lt;br/&gt;
          to insert data that is bigger than the heap.&lt;/p&gt;

&lt;p&gt;To sum up, I&apos;m currently getting 23 failures and 65 errors.&lt;br/&gt;
The time it takes to run the suites is around 45 minutes.&lt;br/&gt;
I believe the &apos;ant junitreport&apos; target is roughly equal to running&lt;br/&gt;
suites.All.&lt;/p&gt;</comment>
                            <comment id="12676729" author="kmarsden" created="Wed, 25 Feb 2009 18:20:40 +0000"  >&lt;p&gt;If you have access to a scanner, you can email your scanned ICLA to secretary@apache.org (see &lt;a href=&quot;http://www.apache.org/licenses/#clas&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/#clas&lt;/a&gt;). &lt;/p&gt;</comment>
                            <comment id="12676783" author="rhillegas" created="Wed, 25 Feb 2009 21:07:12 +0000"  >&lt;p&gt;For the first time in the history of the Derby community, two complete implementations of a significant feature have surfaced almost simultaneously. I&apos;m afraid we have to pick one. I hope that the other contributor does not feel snubbed. Thanks to Kristian and Cheng for these two great submissions.&lt;/p&gt;

&lt;p&gt;I have taken a quick look at the patches and at the commentary on this JIRA. I prefer Kristian&apos;s implementation for the following reasons:&lt;/p&gt;

&lt;p&gt;1) The coding style is slightly easier for me to understand.&lt;/p&gt;

&lt;p&gt;2) According to the performance data which Kristian posted, his implementation is slightly faster.&lt;/p&gt;

&lt;p&gt;I hope that Cheng&apos;s ICLA arrives soon so that we can mine his patch for ideas that can be layered on top of Kristian&apos;s work. For instance,&lt;/p&gt;

&lt;p&gt;A) Cheng&apos;s solution lets you snapshot the database to disk at shutdown time. I think some users will find this useful. I understand that we could simulate this behavior using backup and restore, but I would not discount the appeal of this automatic behavior. Perhaps the api here could be an additional subprotocol.&lt;/p&gt;

&lt;p&gt;B) Cheng&apos;s solution has a finalizer method. This seems particularly useful for delivering (A) in the face of a system crash. But winddown logic seems generally useful for a complicated program like an rdbms.&lt;/p&gt;

&lt;p&gt;C) Cheng provides some additional tests. Some of these tests may be implementation-agnostic and worth running against Kristian&apos;s implementation. It would be helpful if Cheng could describe these tests in greater detail so that we can decide whether to incorporate them.&lt;/p&gt;

&lt;p&gt;Thanks again to both Kristian and Cheng.&lt;/p&gt;</comment>
                            <comment id="12676785" author="rhillegas" created="Wed, 25 Feb 2009 21:13:54 +0000"  >&lt;p&gt;I also would like to see us deliver an in-memory implementation in 10.5. I recommend that we check in one of these implementations but treat it as experimental code, not supported by official user documentation. A writeup of how to use the feature can appear on our wiki. After we release 10.5, we can solicit user feedback and adjust the api accordingly. Then in 10.6 we can expose this feature as solid and official with supporting user documentation. I think that this feature is important enough that we should consider spinning a 10.6 release a couple months after 10.5 if our users provide fast feedback.&lt;/p&gt;</comment>
                            <comment id="12676902" author="chatom" created="Thu, 26 Feb 2009 06:53:49 +0000"  >&lt;p&gt;I have just emailed scanned images of signed ICLA to secretary@apache.org, as instructed by Kathey Marsden.&lt;/p&gt;

&lt;p&gt;Regarding Rick Hillegas&apos; question about the tests included in my patch, there are three sets of unit tests and one functional test.&lt;/p&gt;

&lt;p&gt;The unit tests verify the correctness of my internal data structures.  They are probably not useful to other implementations, unless, for example, they have similar properties to be verified.&lt;/p&gt;

&lt;p&gt;The functional test implements an application in both JAVA and SQL and cross-checks the computed results.  It can indeed be applied to any implementation of storage factory by simply changing the database name for the SQL portion of the test object.  The functional test consists of the following files: &quot;GenMog.java&quot;, &quot;SampMog.java&quot;, &quot;ClusMog.java&quot;, &quot;ClusMogSQL.java&quot;, and &quot;MogTest.java&quot; &amp;#8211; the last file is the JUnit test object.&lt;/p&gt;

&lt;p&gt;However, I have some doubt about whether I have configured/used Derby&apos;s test framework properly in &quot;MogTest.java&quot;.  This file started out as a stand-alone JUnit test.  When I was running it stand-alone, it would incur no disk activity.  After I converted the file to run under Derby&apos;s test framework, the disk activity LED on my computer would go wild every time I ran it.  I wonder if I have unwittingly been testing the default storage factory with the converted test.&lt;/p&gt;</comment>
                            <comment id="12678800" author="kristwaa" created="Wed, 4 Mar 2009 17:26:44 +0000"  >&lt;p&gt;According to the 10.5 release page on the Wiki, the 10.5 branch will be&lt;br/&gt;
created 2008-03-16. This leaves very little time to work on the&lt;br/&gt;
in-memory back end. I&apos;m describing my plan for this user-requested&lt;br/&gt;
feature below. Most of the elements of the plan originates from the&lt;br/&gt;
comments on this Jira issue.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Patch status&lt;br/&gt;
The community has three patches available;&lt;br/&gt;
 A) derby-646-20090222.diff&lt;br/&gt;
 B) derby-646-2a-vfmem_first_rev.diff&lt;br/&gt;
 C) svn.diff&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Patch C is the original patch from Stephen Fitch. It was uploaded in&lt;br/&gt;
March 2006. It is writing the database log to disk. The general state is&lt;br/&gt;
not very well known, but I believe it is not quite &quot;production ready&quot;&lt;br/&gt;
int it&apos;s current form. The patch demonstrates the overall approach,&lt;br/&gt;
which is also used by the two other patches. I can&apos;t speak for A, but B&lt;br/&gt;
is more or less a re-implementation of C. This follows from the&lt;br/&gt;
interfaces that have to be implemented.&lt;br/&gt;
Stephen Fitch has a CLA on file.&lt;/p&gt;

&lt;p&gt;Patch A is from Cheng Che Chen, which has written a solution of his own.&lt;br/&gt;
The solution passes basic ad-hoc testing, and has been successfully used&lt;br/&gt;
in several of the performance tests in the Derby code repository.&lt;br/&gt;
This solution seems to be the most feature rich one, and it also has a&lt;br/&gt;
functional test.&lt;br/&gt;
Cheng Che Chen has a CLA on file.&lt;/p&gt;

&lt;p&gt;Patch B is from Kristian Waagan. The test has passed ad-hoc testing, and&lt;br/&gt;
has been successfully used in several of the performance tests in the&lt;br/&gt;
Derby code repository. The main difference from patch A, is that it&lt;br/&gt;
seems to perform better on CMT machines.&lt;br/&gt;
The solution is able to run most of suites.All without failures.&lt;br/&gt;
Kristian Waagan has a CLA on file.&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Plan&lt;br/&gt;
 1) Commit patch B.&lt;br/&gt;
    (reasons: CMT performance, size, readability)&lt;br/&gt;
 2) Work on the committed code, addressing the TODOs.&lt;br/&gt;
 3) Incorporate tests from patch A and some additional tests.&lt;br/&gt;
    (additional tests: backup in-mem then restore/re-boot with directory&lt;br/&gt;
    (default) storage engine, simple boot/create test)&lt;br/&gt;
 4) Incorporate features from patch A.&lt;br/&gt;
    (persist to disk on exit/shutdown, restore from disk on boot,&lt;br/&gt;
    finalizer, more?)&lt;br/&gt;
 5) Figure out what to do on OOME (if anything).&lt;br/&gt;
 6) General testing and improvements.&lt;br/&gt;
 7) Documentation.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I hope to address at least steps 1-3 before the branch is cut.&lt;br/&gt;
It is not clear to me whether an in-memory back end will be a documented&lt;br/&gt;
and supported feature of 10.5. I like the idea of providing it as-is&lt;br/&gt;
without any documentation in 10.5, and then solidify it in 10.6.&lt;br/&gt;
In the meantime, interested users can try it out and give us feedback,&lt;br/&gt;
and the community can continue to test and improve the feature.&lt;/p&gt;

&lt;p&gt;Unless someone objects, I will commit the patch on Monday.&lt;br/&gt;
I would also like to invite those who plan to contribute actively on the&lt;br/&gt;
feature to let the community know. Feel free to flesh out the details of&lt;br/&gt;
the plan.&lt;/p&gt;

&lt;p&gt;Finally, a great thank you to both Stephen Fitch and Cheng Che Chen for&lt;br/&gt;
contributing their work to the Derby community! I hope continued&lt;br/&gt;
contribution is of interest &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I would be very happy if Cheng could spare some time to get some of his&lt;br/&gt;
more advanced features into the Derby code line.&lt;/p&gt;</comment>
                            <comment id="12680170" author="adriancole" created="Mon, 9 Mar 2009 15:08:36 +0000"  >&lt;p&gt;JBoss Cache would consider switching onto Derby for some internal work, if this feature is implemented.  As of now, our tests take 2 minutes longer with embedded derby then hsqldb due to file i/o.&lt;/p&gt;</comment>
                            <comment id="12680180" author="kristwaa" created="Mon, 9 Mar 2009 15:50:28 +0000"  >&lt;p&gt;I&apos;m postponing the first commit until tomorrow, mostly because I&apos;ve run out of time and want to write a overview of the code for the commit message.&lt;br/&gt;
As soon as the patch is in, users are welcome to test it out.&lt;br/&gt;
Note that the first revision won&apos;t have the features save on shutdown and restore on boot.&lt;/p&gt;</comment>
                            <comment id="12680481" author="kristwaa" created="Tue, 10 Mar 2009 14:41:37 +0000"  >&lt;p&gt;Committed patch &apos;derby-646-2b-vfmem_first_rev.diff&apos; to trunk with revision 752114.&lt;/p&gt;

&lt;p&gt;I expect more work will be done under various sub-tasks of this issue.&lt;br/&gt;
It would be nice to get early feedback from users and developers willing to try out the feature under development.&lt;br/&gt;
Note that I have set the subSubProtocol to be &apos;in-memory&apos; based on the feedback on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4084&quot; title=&quot;Determine the subSubProtocol name for the in-memory back end&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4084&quot;&gt;&lt;del&gt;DERBY-4084&lt;/del&gt;&lt;/a&gt;, but this may change.&lt;/p&gt;

&lt;p&gt;The in-memory back end is working in my environment, but there may be problems on other platforms. For instance, is the case-insensitive mode of Windows a problem?&lt;/p&gt;</comment>
                            <comment id="12680482" author="kristwaa" created="Tue, 10 Mar 2009 14:42:54 +0000"  >&lt;p&gt;Indicating that the first iteration of this feature is targeted for 10.5.&lt;/p&gt;</comment>
                            <comment id="12680931" author="kristwaa" created="Wed, 11 Mar 2009 17:11:05 +0000"  >&lt;p&gt;Patch 3a is a JMX experiment (very poorly documented, not very well tested, contains bad code). It provides two JMX attributes and one operation; getDatabases, estimateSpaceUsage, and estimateSpaceUsage(String).&lt;br/&gt;
You can obtain a list of the databases stored in memory, get a space usage estimate for all the databases or for a single database.&lt;br/&gt;
Is this something we should consider adding?&lt;/p&gt;

&lt;p&gt;We could also allow for deleting databases through JMX, but then we have to do authentication (plus authorization?).&lt;/p&gt;</comment>
                            <comment id="12681006" author="forsini" created="Wed, 11 Mar 2009 19:50:22 +0000"  >&lt;p&gt;+1. Having these (hooks) even as an experiment could be very useful while the in-memory feature is being tested.&lt;/p&gt;

&lt;p&gt;I would probably wait after 10.5 because allowing for database deletion, but that is just me - just because there needs probably more time to investigate it and its possible side effects.&lt;/p&gt;

&lt;p&gt;Maybe worth re-enforcing somewhere (notes if any) that the database is locked and its activity blocked while its estimated space usage is computed.&lt;/p&gt;</comment>
                            <comment id="12681257" author="knutanders" created="Thu, 12 Mar 2009 10:59:49 +0000"  >&lt;p&gt;I came across one issue when I experimented with the in-memory backend. When I exit from ij, I see this exception:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.run(BaseDataFileFactory.java:2684)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeStubs(BaseDataFileFactory.java:1591)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop(BaseDataFileFactory.java:499)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:405)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:349)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:239)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:205)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:231)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:582)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:207)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.cleanupGo(utilMain.java:413)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:246)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:210)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:177)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;/p&gt;

&lt;p&gt;To reproduce, execute the following commands in ij:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:in-memory:mydb;create=true&apos;;&lt;br/&gt;
exit;&lt;/p&gt;

&lt;p&gt;Other than that, it seems to be working fine.&lt;/p&gt;</comment>
                            <comment id="12681285" author="kristwaa" created="Thu, 12 Mar 2009 12:23:30 +0000"  >&lt;p&gt;Thanks for the testing, Knut Anders.&lt;br/&gt;
Seems like I messed up some of the path-handling logic (absolute vs relative) in the patch I committed. I&apos;m looking into the problem now.&lt;/p&gt;</comment>
                            <comment id="12681623" author="chatom" created="Fri, 13 Mar 2009 06:04:48 +0000"  >&lt;p&gt;Kristian, you might want to adapt the functional test that I had submitted for your own in-memory storage factory.  That way, you can have your changes automatically tested to some extent after every build.&lt;/p&gt;

&lt;p&gt;If I understand correctly, you tested your initial implementation by manually changing the default storage factory to point to your implementation and then running the Derby unit tests.&lt;/p&gt;

&lt;p&gt;As for helping out with developing this feature further, I&apos;ll see what I can do.  In the coming weeks, I don&apos;t see much free time to devote to this.  So perhaps for the release after the imminent upcoming one, there&apos;ll be an opportunity.&lt;/p&gt;</comment>
                            <comment id="12681638" author="kristwaa" created="Fri, 13 Mar 2009 08:19:03 +0000"  >&lt;p&gt;Cheng, thank you for your continued interest &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Since the code branch is cut on the coming Monday, there isn&apos;t much more that will be done for the in-memory solution for the upcoming 10.5 release, except testing and stabilization. This leaves plenty of time for an opportunity if you want to contribute later on.&lt;/p&gt;

&lt;p&gt;Regarding testing, I think that is a very good idea. I have already started extracting the Mog test from your patch, and it runs fine with the current code.&lt;br/&gt;
The unit tests aren&apos;t as easy to adopt, as they test somewhat different characteristics / functionality (for instance peek, and mark/reset) and rely partly on internal variables etc. However, it shouldn&apos;t be hard to use your work to write similar tests for the current implementation.&lt;/p&gt;

&lt;p&gt;I&apos;m sorry I&apos;m charging on without waiting for more feedback from you and other interested parties. The reason is merely my wish to get something committed in time for 10.5. This will allow interested users to more easily test out the feature and give the community valuable feedback before the next feature release.&lt;/p&gt;

&lt;p&gt;I&apos;m restating my goal for the feature:&lt;br/&gt;
A basic, working in-memory storage back end that can be used in scenarios where durability isn&apos;t required;&lt;br/&gt;
 o  basic, it won&apos;t have functionality like save on shutdown / JVM exit, or automatic restore on boot.&lt;br/&gt;
 o working, but not tested to the same degree as the rest of the Derby code.&lt;br/&gt;
 o undocumented (in the user docs).&lt;/p&gt;</comment>
                            <comment id="12682899" author="myrna" created="Wed, 18 Mar 2009 03:41:53 +0000"  >&lt;p&gt;So the initial commits are in 10.5. How can we proceed with this?&lt;br/&gt;
New JIRA&apos;s for subsequent work?&lt;/p&gt;</comment>
                            <comment id="12683062" author="kristwaa" created="Wed, 18 Mar 2009 16:33:18 +0000"  >&lt;p&gt;The core functionality is in 10.5 already.&lt;br/&gt;
I&apos;d like to get the following into 10.5 as well (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4085&quot; title=&quot;Improve testing of the in-memory back end&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4085&quot;&gt;&lt;del&gt;DERBY-4085&lt;/del&gt;&lt;/a&gt;):&lt;br/&gt;
 a) Add the functional test written by Cheng.&lt;br/&gt;
 b) Enable the new tests as part of a suite (i.e. suites.All and as the ant junit-core target).&lt;/p&gt;

&lt;p&gt;New features will be logged as separate Jiras and added to the trunk.&lt;br/&gt;
I do plan to write a Wiki-page documenting the feature to some extent. And then I hope users will give us feedback so that we can consider adding more features for the next Derby feature release.&lt;/p&gt;</comment>
                            <comment id="12683063" author="kmarsden" created="Wed, 18 Mar 2009 16:37:02 +0000"  >&lt;p&gt;I think that until this feature is documented and fully supported, it shouldn&apos;t be resolved and be included in the release notes.  The separate Jiras could be subtasks of this one and then the parent issue resolved for 10.6. Just my opinion.&lt;/p&gt;
</comment>
                            <comment id="12683069" author="myrna" created="Wed, 18 Mar 2009 16:44:57 +0000"  >&lt;p&gt;Following Kathey&apos;s recommendation, taking off fix in 10.5 - so this won&apos;t be in the 10.5 fixed bugs list. It&apos;s still on the list of new functionality. We need to somehow point out that this is the first stage, though. Is it ok to say it&apos;s &apos;experimental&apos; or is that too scary?&lt;/p&gt;</comment>
                            <comment id="12683074" author="rhillegas" created="Wed, 18 Mar 2009 16:50:39 +0000"  >&lt;p&gt;I don&apos;t think that we can say that this is a finished, full-fledged feature. However, I would like to see the release notes mention that this is an experimental feature which we&apos;d like users to test-drive. We will need some kind of primer (perhaps a wiki page) and it would be great if the release notes could direct users to that primer for more information.&lt;/p&gt;</comment>
                            <comment id="12688272" author="kristwaa" created="Mon, 23 Mar 2009 11:51:58 +0000"  >&lt;p&gt;Primer at &lt;a href=&quot;http://wiki.apache.org/db-derby/InMemoryBackEndPrimer&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/InMemoryBackEndPrimer&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12688889" author="knutmas2" created="Tue, 24 Mar 2009 21:34:10 +0000"  >&lt;p&gt;Good to see something is happening in this field! Out of curiosity I tried this out on Windows XP, but it failed in embedded mode when creating an in-memory database. &lt;/p&gt;

&lt;p&gt;The error was this assert:&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED serviceName = memory:C:\Documents and Settings\user\workspace\derby\MyDbTest;storageFactory.getCanonicalName() = C:\Documents and Settings\user\workspace\derby\MyDbTest: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;To make it work I altered line 310 in VFMemoryStorageFactory.normalizePath() to allow windows-style paths. I changed it to this: &quot;} else if (dir.charAt(0) != getSeparator() &amp;amp;&amp;amp; !dir.toUpperCase().matches(&quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;a-zA-Z&amp;#93;&lt;/span&gt;&lt;/p&gt;
{1}:{1}
&lt;p&gt;\\\\&lt;/p&gt;
{1}
&lt;p&gt;.*&quot;)){&quot;&lt;/p&gt;

&lt;p&gt;Appart from that i worked great.&lt;/p&gt;

&lt;p&gt;To reduce memory footprint I guess you can reduce the cache to a minimum and maybe discard flushed log records instead of writing them to memory?&lt;/p&gt;


&lt;p&gt;Knut Magne,&lt;br/&gt;
 (previous user knutmas)&lt;/p&gt;</comment>
                            <comment id="12689121" author="kristwaa" created="Wed, 25 Mar 2009 14:43:56 +0000"  >&lt;p&gt;Thanks for testing the new feature, Knut Magne &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;m currently working on a patch, where I&apos;m considering using java.io.File. That should take care of any other OS that has a different style for paths as well.&lt;br/&gt;
Feel free to log a bug in Jira. If you don&apos;t, I will tomorrow.&lt;/p&gt;

&lt;p&gt;Regarding memory footprint, you have to balance the memory overhead against performance. Setting the page cache to the minimum size will degrade performance in many configurations.&lt;br/&gt;
The worst case I saw in my simple testing, was a drop from 28361 (pageCacheSize=1000) tps to 4059 (pageCacheSize=40) tps. This was a single record update test using a page size of 32 K.&lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure how you would go about discarding the log records, but you do need the UNDO log records to support transactions. Doing something in this area should be possible.&lt;br/&gt;
I don&apos;t know the log system well enough to say something more, but maybe someone else does?&lt;/p&gt;</comment>
                            <comment id="12689154" author="knutmas2" created="Wed, 25 Mar 2009 16:44:27 +0000"  >&lt;p&gt;You need the log for undo, but for committed transactions I can&apos;t see why you need to keep the log records for a non-durable in-memory database. It could be hard to do this because you are doing in-memory stuff on this level. I tried to just discard writing log records to virtualFiles, but rollback failed because it was flushing the log and reading undo records from the storage. So we need to keep some log in virtualFiles to get undo working &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12804943" author="kristwaa" created="Tue, 26 Jan 2010 07:56:36 +0000"  >&lt;p&gt;Added link for the issue tracking the addition of user documentation for the in-memory back end.&lt;/p&gt;</comment>
                            <comment id="12845754" author="knutanders" created="Tue, 16 Mar 2010 07:30:21 +0000"  >&lt;p&gt;It seems like the fix for this issue went into 10.5. Could we close it now?&lt;/p&gt;</comment>
                            <comment id="12865092" author="kristwaa" created="Fri, 7 May 2010 10:05:58 +0100"  >&lt;p&gt;Closing issue.&lt;br/&gt;
Further improvements and additions should be tracked under separate Jiras.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12459151">DERBY-4581</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12371319">DERBY-2798</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12446642">DERBY-4525</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12344957" name="derby-646-1a-raw-compiles.diff" size="85299" author="kristwaa" created="Tue, 14 Nov 2006 13:07:41 +0000"/>
                            <attachment id="12344958" name="derby-646-1a-raw-compiles.stat" size="1070" author="kristwaa" created="Tue, 14 Nov 2006 13:07:41 +0000"/>
                            <attachment id="12400721" name="derby-646-20090222.diff" size="200409" author="chatom" created="Sun, 22 Feb 2009 23:01:31 +0000"/>
                            <attachment id="12400720" name="derby-646-20090222.stat" size="2205" author="chatom" created="Sun, 22 Feb 2009 23:01:31 +0000"/>
                            <attachment id="12400531" name="derby-646-2a-vfmem_first_rev.diff" size="89511" author="kristwaa" created="Thu, 19 Feb 2009 17:12:17 +0000"/>
                            <attachment id="12400530" name="derby-646-2a-vfmem_first_rev.stat" size="1224" author="kristwaa" created="Thu, 19 Feb 2009 17:12:17 +0000"/>
                            <attachment id="12401841" name="derby-646-2b-vfmem_first_rev.diff" size="97414" author="kristwaa" created="Tue, 10 Mar 2009 14:41:37 +0000"/>
                            <attachment id="12401944" name="derby-646-3a-jmx_experiment.diff" size="4656" author="kristwaa" created="Wed, 11 Mar 2009 17:11:05 +0000"/>
                            <attachment id="12400859" name="derby-646-performance_comparison_1a.txt" size="2946" author="kristwaa" created="Tue, 24 Feb 2009 14:02:21 +0000"/>
                            <attachment id="12323743" name="svn.diff" size="84609" author="sfitch" created="Mon, 6 Mar 2006 09:39:15 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12416448">DERBY-4084</subtask>
                            <subtask id="12416451">DERBY-4085</subtask>
                            <subtask id="12416829">DERBY-4093</subtask>
                            <subtask id="12416833">DERBY-4094</subtask>
                            <subtask id="12417374">DERBY-4103</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Dec 2005 07:13:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29642</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0qfz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38102</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>