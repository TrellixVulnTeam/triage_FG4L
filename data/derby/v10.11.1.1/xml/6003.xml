<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6003/DERBY-6003.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6003] Create row templates outside of the generated code</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6003</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The constructors for many of the result set classes take GeneratedMethod parameters that create row templates (an ExecRow of a certain size and column types, each column initialized to an SQL null value).&lt;/p&gt;

&lt;p&gt;As an alternative, the compiler could produce an ExecRow instance and put it into the savedObjects field of GenericPreparedStatement, and the constructors could take parameter that points to the object in savedObjects. Where the result sets currently invoke the generated method to produce a fresh template, they could instead clone the saved object.&lt;/p&gt;

&lt;p&gt;Advantages with the suggested approach would be:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reduce the size of the code generator, which should reduce total code complexity.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reduce the amount of generated code, which makes it easier for tools (profilers, static code analyzers, IDEs) to map executable code to source code.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reduce the actual number of generated methods, which makes it less likely that queries need to use reflection to invoke the remaining generated methods (there&apos;s a switchover from DirectCall to ReflectCall when the number of generated methods exceeds 10).&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12617390">DERBY-6003</key>
            <summary>Create row templates outside of the generated code</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Nov 2012 07:02:54 +0000</created>
                <updated>Fri, 23 Aug 2013 13:51:43 +0100</updated>
                            <resolved>Thu, 27 Dec 2012 10:05:22 +0000</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13503094" author="knutanders" created="Fri, 23 Nov 2012 07:12:16 +0000"  >&lt;p&gt;Many of the GeneratedMethod fields in the result set classes are not actually used. To make it easier to look into this issue, I&apos;ve attached a patch (d6003-1a-cleanup.diff) that removes those unused fields. It also removes some other fields that I found were unused, as well as unused imports.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly, so I committed the patch with revision 1412763.&lt;/p&gt;</comment>
                            <comment id="13503840" author="knutanders" created="Mon, 26 Nov 2012 15:35:53 +0000"  >&lt;p&gt;I first said the generated method created and initialized the row templates. That&apos;s not quite right. The row template is created in the generated constructor, and the generated method (re-)initializes it and returns a reference to it.&lt;/p&gt;

&lt;p&gt;I have a mostly working patch in my sandbox. However, the original plan of storing the ExecRow in GenericPreparedStatement.savedObjects didn&apos;t work as smoothly as I&apos;d hoped. Anything stored in savedObjects has to be serializable, which ExecRow isn&apos;t, and making it serializable is not straightforward. It must be serializable so that it can be used in stored prepared statements. We might make ExecRow serializable, but the template ExecRow contains SQL null values, and the writeExternal() and readExternal() methods of the SQL type classes do not work with null, as saving/restoring null values is usually handled at a higher level in the code. The approach used at the higher level actually depends on having a template row to handle nulls, so we run into a chicken-and-egg problem if we try to use the same approach to store the template row.&lt;/p&gt;

&lt;p&gt;I don&apos;t think it&apos;s an option to change the writeExternal() and readExternal() methods of all the SQL type classes so they handle null. Although it is possible to change the stored format of the data types, that will require too much upgrade logic (and testing) to be worthwhile.&lt;/p&gt;

&lt;p&gt;The alternative that I&apos;m exploring now, is to store an array of DataTypeDescriptors from which the result sets can create the ExecRow. DataTypeDescriptor is already serializable, and it has a getNull() method which can be used to create empty SQL values of the right type that we can put in the ExecRow template. There are some problems with that approach too:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RowLocation values don&apos;t have a corresponding DataTypeDescriptor, so they&apos;ll need some special handling. The code that generates the byte code already has a special case for row locations, so the new code shouldn&apos;t be much worse than the current code.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DataTypeDescriptor.readExternal() is not able to read the type descriptor for a UDT written by DataTypeDescriptor.writeExternal(). It doesn&apos;t fail, but some of the state of the original type descriptor isn&apos;t restored, which leads to subsequent NullPointerExceptions. But it looks like writeExternal() does write all necessary information to restore the fields for UDTs too, so I think the bug should be fixable, even without changing the stored format of DataTypeDescriptor.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13504618" author="knutanders" created="Tue, 27 Nov 2012 13:35:36 +0000"  >&lt;p&gt;To fix the above mentioned deserialization problem in DataTypeDescriptor, I think we need to make DataTypeDescriptor.readExternal() call TypeId.getUserDefinedTypeId() instead of TypeId.getBuiltInTypeId() if it&apos;s a user-defined type.&lt;/p&gt;

&lt;p&gt;The getUserDefinedTypeId() takes a boolean parameter called delimitedIdentifier. I don&apos;t know what&apos;s the right value to pass in. But looking closer at it, it looks like the value is never used, and all callers pass in false. So to make the final patch simpler, I&apos;m attaching another cleanup patch (d6003-2a-unused-field.diff) that removes this dead code. That should be an improvement regardless of how we end up fixing the rest of the issue.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with the 2a patch.&lt;/p&gt;</comment>
                            <comment id="13505467" author="knutanders" created="Wed, 28 Nov 2012 14:18:00 +0000"  >&lt;p&gt;Committed 2a to trunk with revision 1414718.&lt;/p&gt;</comment>
                            <comment id="13506517" author="knutanders" created="Thu, 29 Nov 2012 15:05:27 +0000"  >&lt;p&gt;The next speed bump is deserialization issues on downgrade after soft upgrade.&lt;/p&gt;

&lt;p&gt;The problem: Some old versions (those that don&apos;t have the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3870&quot; title=&quot;Concurrent Inserts of rows with XML data results in an exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3870&quot;&gt;&lt;del&gt;DERBY-3870&lt;/del&gt;&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt;) read all of SYS.SYSSTATEMENTS when detecting a version change, including the column that holds the compiled plan. So if the format of the compiled plan changes between versions in a way so that the old release cannot deserialize plans created by the newer version, booting the database with the old version after soft upgrade may fail with deserialization errors.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3870&quot; title=&quot;Concurrent Inserts of rows with XML data results in an exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3870&quot;&gt;&lt;del&gt;DERBY-3870&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt; fixed this problem on upgrade, but left the downgrade problem unresolved. For downgrade, they simply disabled the problematic test cases in the upgrade tests.&lt;/p&gt;

&lt;p&gt;Since I intend to change the format of the stored plans as part of this issue, databases that use triggers will run into this problem again if they are soft-upgraded from one of the broken versions, and then later downgraded back to that version. So some handling of the downgrade problem is needed. Otherwise, the upgrade tests that use triggers will fail when the old version is one of the broken versions, and also users that are still on one of the broken versions, may run into the problem if they do soft upgrade followed by downgrade.&lt;/p&gt;

&lt;p&gt;One way to handle this might be to disable trigger test cases in upgrade tests when we are using one of the broken versions. That won&apos;t fix the problem seen by users, though. Also, it might require extra disabling logic in future test cases that use triggers, so it doesn&apos;t even fix the testing once and for all.&lt;/p&gt;

&lt;p&gt;An alternative I&apos;m exploring now, and that looks promising, is to stop writing the compiled plan of an SPS to disk if we are running in soft upgrade mode and the dictionary version is so old that it is possible to downgrade to a version that might fail to boot because of the new plan. We already do this for meta-data queries (actually even stricter: we never store plans for meta-data queries in soft upgrade).&lt;/p&gt;

&lt;p&gt;The only downside I can think of with this approach, is that trigger statements need to be recompiled after each reboot when running in soft upgrade from one of the affected branches. This should happen automatically, so users shouldn&apos;t notice much except, perhaps, that warmup takes a little longer after a reboot if they have many triggers.&lt;/p&gt;

&lt;p&gt;I think that sounds like a reasonable cost to avoid the deserialization errors. If users experience performance degradation, they can always do a full upgrade and the trigger plans will be stored to disk again.&lt;/p&gt;

&lt;p&gt;By the way, this approach was briefly discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5105&quot; title=&quot;NoSuchMethodError in upgrade tests (testTriggerBasic)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5105&quot;&gt;&lt;del&gt;DERBY-5105&lt;/del&gt;&lt;/a&gt;, but it was skipped because &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5105&quot; title=&quot;NoSuchMethodError in upgrade tests (testTriggerBasic)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5105&quot;&gt;&lt;del&gt;DERBY-5105&lt;/del&gt;&lt;/a&gt; was so limited that a workaround in the upgrade tests was considered enough. If we implement it, the workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5105&quot; title=&quot;NoSuchMethodError in upgrade tests (testTriggerBasic)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5105&quot;&gt;&lt;del&gt;DERBY-5105&lt;/del&gt;&lt;/a&gt;, as well as the workarounds for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4835&quot; title=&quot;Trigger plan does not recompile with upgrade from 10.5.3.0 to 10.6.1.0 causing  java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4835&quot;&gt;&lt;del&gt;DERBY-4835&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5263&quot; title=&quot;xmlTestTriggerWithXMLOperators(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup) fails with java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5263&quot;&gt;&lt;del&gt;DERBY-5263&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt;, can probably be removed from the upgrade tests.&lt;/p&gt;</comment>
                            <comment id="13507325" author="knutanders" created="Fri, 30 Nov 2012 13:40:43 +0000"  >&lt;p&gt;Attaching d6003-3a-safe-downgrade.diff which makes the suggested changes to allow safe downgrade after the format of stored plans has changed.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;p&gt;SPSDescriptor: Added a method that checks if it is safe to store the plan. It is considered safe if the dictionary version is 10.9 or higher, since all released versions on the 10.9 branch have the fixes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3870&quot; title=&quot;Concurrent Inserts of rows with XML data results in an exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3870&quot;&gt;&lt;del&gt;DERBY-3870&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4835&quot; title=&quot;Trigger plan does not recompile with upgrade from 10.5.3.0 to 10.6.1.0 causing  java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4835&quot;&gt;&lt;del&gt;DERBY-4835&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SYSSTATEMENTSRowFactory: When creating a row to store in SYSSTATEMENTS, use the new method in SPSDescriptor to check if it&apos;s safe to store the plan. If it is not, return a row that has the VALID column set to false and the CONSTANTSTATE column (which is where the plan is stored) to null. Changing those two columns is what the clearSPSPlans() method does too when the version has changed.&lt;/p&gt;

&lt;p&gt;DataDictionaryImpl: When a new database is created, set the dictionary version before creating the system tables. Otherwise, the version check in SPSDescriptor will fail with a NullPointerException when the SYSSTATEMENTS table is created.&lt;/p&gt;

&lt;p&gt;BasicSetup: Removed the workarounds for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4835&quot; title=&quot;Trigger plan does not recompile with upgrade from 10.5.3.0 to 10.6.1.0 causing  java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4835&quot;&gt;&lt;del&gt;DERBY-4835&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5105&quot; title=&quot;NoSuchMethodError in upgrade tests (testTriggerBasic)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5105&quot;&gt;&lt;del&gt;DERBY-5105&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5263&quot; title=&quot;xmlTestTriggerWithXMLOperators(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup) fails with java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5263&quot;&gt;&lt;del&gt;DERBY-5263&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt;, as this fix makes downgrade successful for some test cases that used to fail.&lt;/p&gt;</comment>
                            <comment id="13507326" author="knutanders" created="Fri, 30 Nov 2012 13:41:16 +0000"  >&lt;p&gt;All the regression tests ran cleanly with the 3a patch.&lt;/p&gt;</comment>
                            <comment id="13507501" author="mikem" created="Fri, 30 Nov 2012 17:54:23 +0000"  >&lt;p&gt;Changes look good to me.&lt;/p&gt;

&lt;p&gt;With respect to downgrade issue, I wonder if it is necesary.  I don&apos;t understand the performance impact, but a little concerned that we are penalizing a lot of users that will not see the problem.  &lt;br/&gt;
At least in the cases where an apache release exists that fixes the bugs with usual handling of upgrade and downgrade, should we still disable the trigger performance because user may&lt;br/&gt;
downgrade to a release known release with more bugs, ie. say db version is 10.8 and latest 10.8 release has all fixes.&lt;/p&gt;

&lt;p&gt;Also to understand the range of your changes, do you plan on backporting the downgrade changes, or will these just be in 10.10 software and above?&lt;/p&gt;

&lt;p&gt;I understand it helps with the tests.  In general I think we expect to people to at least be able to software upgrade to the latest bug fix release on a given branch.  As we decided previously&lt;br/&gt;
it was reasonable if version X.1 could not boot because of bug that user could could use X.2. Now if there are no available apache releases for a given version your fix seems like an excellent&lt;br/&gt;
help to those users stuck at that release. &lt;/p&gt;</comment>
                            <comment id="13508772" author="knutanders" created="Mon, 3 Dec 2012 14:48:26 +0000"  >&lt;p&gt;Thanks for looking at the patch, Mike.&lt;/p&gt;

&lt;p&gt;I was not planning to backport this change, only commit it to trunk. However, if there are concerns that this fix may be to broad, I can always add workarounds to the upgrade tests instead.&lt;/p&gt;

&lt;p&gt;There are no official releases with the necessary fixes for 10.5, 10.6 or 10.7. Not for the earlier branches either, but it doesn&apos;t appear to be a problem on those branches, probably because &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1107&quot; title=&quot;For existing databases JDBC metadata queries do not get updated properly  between maintenance versions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1107&quot;&gt;&lt;del&gt;DERBY-1107&lt;/del&gt;&lt;/a&gt; was not introduced until 10.5. On 10.8 it was fixed in a maintenance release, and 10.9 included the fixes in the first official release.&lt;/p&gt;</comment>
                            <comment id="13508818" author="knutanders" created="Mon, 3 Dec 2012 16:03:18 +0000"  >&lt;p&gt;Attaching d6003-4a-scanresultset.diff which removes the generated&lt;br/&gt;
methods that create row templates for the ScanResultSet tree. It&lt;br/&gt;
currently depends on the 3a patch in order to make the upgrade tests&lt;br/&gt;
pass.&lt;/p&gt;

&lt;p&gt;There still are other result set classes that use generated methods to&lt;br/&gt;
produce row templates, so the code that generates the code is not&lt;br/&gt;
removed in this patch. I&apos;ll post other patches later to fix the rest&lt;br/&gt;
of the result set tree and remove the generated code.&lt;/p&gt;

&lt;p&gt;This patch adds a new class, called ExecRowBuilder, which can be used&lt;br/&gt;
to produce and reset candidate rows used by the scan result sets. Its&lt;br/&gt;
build() method creates an instance of the correct sub-type of ExecRow&lt;br/&gt;
with SQL null values in the columns used by the scan. This is what was&lt;br/&gt;
previously done in the generated constructor for the activation. Its&lt;br/&gt;
reset() method replaces the existing values in the row with fresh&lt;br/&gt;
instances that represent SQL null of the correct type, which is the&lt;br/&gt;
same as the generated methods previously did.&lt;/p&gt;

&lt;p&gt;Instead of passing a reference to the generated method into the&lt;br/&gt;
ScanResultSet constructor, the compiler now stores an ExecRowBuilder&lt;br/&gt;
in GenericPreparedStatement.savedObjects and passes the array index as&lt;br/&gt;
an argument to the constructor.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/sql/execute/ExecRowBuilder.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;New class, as described above.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As mentioned in an earlier comment, DTD&apos;s deserialization wouldn&apos;t&lt;br/&gt;
fully restore the state of the original instance if it represented a&lt;br/&gt;
user-defined type. Fixed by using TypeId.getUserDefinedTypeId()&lt;br/&gt;
instead of TypeId.getBuiltInTypeId() if the type is user-defined.&lt;/p&gt;

&lt;p&gt;This was needed in order to get ExecRowBuilder to deserialize&lt;br/&gt;
successfully when the query accessed UDTs.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Added a method buildRowTemplate() that creates an ExecRowBuilder of&lt;br/&gt;
the right shape. The logic is essentially the same as in the existing&lt;br/&gt;
ResultColumnList.generateHolder() method, except that generateHolder()&lt;br/&gt;
produces a byte-code representation of how to produce the row, and&lt;br/&gt;
buildRowTemplate() produces a Java data structure holding the same&lt;br/&gt;
information.&lt;/p&gt;

&lt;p&gt;Factored out shared logic from generateHolder() and buildRowTemplate()&lt;br/&gt;
into newRowLocationTemplate().&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use RCL.buildRowTemplate() instead of RCL.generateHolder() when&lt;br/&gt;
creating constructor arguments for a sub-class of ScanResultSet.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/sql/compile/JoinStrategy.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/BaseJoinStrategy.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/HashJoinStrategy.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/NestedLoopJoinStrategy.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changed signatures to allow passing array index into GPS.savedObjects&lt;br/&gt;
instead of generated method as scan parameter.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Create the candidate row using the passed-in ExecRowBuilder, and also&lt;br/&gt;
use the ExecRowBuilder to reset the candidate row.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changed signature of constructor to index into GPS.savedObjects&lt;br/&gt;
instead of generated method. Use the ExecRowBuilder to reset the&lt;br/&gt;
candidate row.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/DependentResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/LastIndexKeyResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/MultiProbeTableScanResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More signature changes to allow passing the GPS.savedObjects index&lt;br/&gt;
instead of the generated method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Bulk insert creates a BulkTableScanResultSet at run-time and needs a&lt;br/&gt;
way to pass a row template to the scan. Previously, it did this by&lt;br/&gt;
wrapping a row instance in a class that implemented the&lt;br/&gt;
GeneratedMethod interface, although it didn&apos;t actually represent a&lt;br/&gt;
generated method. Now, since BulkTableScanResultSet expects an index&lt;br/&gt;
into GPS.savedObjects, we instead save an ExecRowBuilder instance when&lt;br/&gt;
compiling the bulk insert, and let InsertResultSet pass the array&lt;br/&gt;
index to getBulkTableScanResultSet().&lt;/p&gt;

&lt;p&gt;InsertNode also needed a fix in requestBulkInsert(). It does some bind&lt;br/&gt;
logic in the optimize phase (legitimately, because of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4789&quot; title=&quot;Always apply the bulk-insert optimization when inserting from a table function.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4789&quot;&gt;&lt;del&gt;DERBY-4789&lt;/del&gt;&lt;/a&gt;), but&lt;br/&gt;
forgets to update the bulkInsert field which is usually set during&lt;br/&gt;
bind. We now set bulkInsert to true also when this method is called,&lt;br/&gt;
so that we can use the field in the code generation phase.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/DeleteConstantAction.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/UpdatableVTIConstantAction.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Since InsertResultSet now gets its row template added to the plan at&lt;br/&gt;
compile-time, remove the logic to add it to and get it from the&lt;br/&gt;
constant action. This logic was also present for update and delete,&lt;br/&gt;
although it was only used in bulk insert. Remove for update and delete&lt;br/&gt;
too.&lt;/p&gt;</comment>
                            <comment id="13510498" author="knutanders" created="Wed, 5 Dec 2012 14:24:23 +0000"  >&lt;p&gt;Attaching a new patch (d6003-3b-downgrade-workaround-in-tests.diff) which provides an alternative to the 3a patch for working around the downgrade issues.&lt;/p&gt;

&lt;p&gt;Instead of making the engine stop storing SPS plans in the database when running in soft upgrade potentially from one of the affected versions, this patch adds the workaround to the upgrade tests.&lt;/p&gt;

&lt;p&gt;The upgrade tests already have workarounds for the downgrade bug, but those workarounds are spread across multiple test cases. Also, this issue will change the format for more trigger plans, so that most triggers will hit the bug.&lt;/p&gt;

&lt;p&gt;The patch therefore removes the various workarounds for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4835&quot; title=&quot;Trigger plan does not recompile with upgrade from 10.5.3.0 to 10.6.1.0 causing  java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4835&quot;&gt;&lt;del&gt;DERBY-4835&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5105&quot; title=&quot;NoSuchMethodError in upgrade tests (testTriggerBasic)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5105&quot;&gt;&lt;del&gt;DERBY-5105&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5263&quot; title=&quot;xmlTestTriggerWithXMLOperators(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup) fails with java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5263&quot;&gt;&lt;del&gt;DERBY-5263&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt;, and replaces them with one centralized workaround. By centralizing the workaround, it should be safe to add more trigger test cases to the upgrade tests later without worrying abut the downgrade issue.&lt;/p&gt;

&lt;p&gt;The new workaround adds a test case that runs last in the soft upgrade phase if the old version suffers from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4835&quot; title=&quot;Trigger plan does not recompile with upgrade from 10.5.3.0 to 10.6.1.0 causing  java.lang.NoSuchMethodError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4835&quot;&gt;&lt;del&gt;DERBY-4835&lt;/del&gt;&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5289&quot; title=&quot;Unable to boot 10.5.1.1 database - fails during soft/hard upgrade process for a new version number while trying to drop jdbc metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5289&quot;&gt;&lt;del&gt;DERBY-5289&lt;/del&gt;&lt;/a&gt;. The new test case calls a stored procedure that clears all SPS plans in SYS.SYSSTATEMENTS. This should make it safe to boot the database again in the post soft upgrade phase, as there won&apos;t be any stored plans that cause deserialization issues.&lt;/p&gt;

&lt;p&gt;I was hoping to use the new SYSCS_UTIL.SYSCS_INVALIDATE_STORED_STATEMENTS procedure for this. Unfortunately, it only invalidates the stored statements in memory, and leaves their disk representation untouched, so I had to let the test define its own procedure to do this. I also had to expose the clearSPSPlans() methods through the DataDictionary interface so that the test procedure could call it.&lt;/p&gt;

&lt;p&gt;This alternative patch avoids the potential performance degradation for users running soft upgrade from 10.8 or earlier, as it&apos;s worked around entirely in test code, with the exception of the addition of the one method to the DataDictionary interface. If there are no objections to the approach, I intend to go for this patch and drop the 3a patch.&lt;/p&gt;</comment>
                            <comment id="13511389" author="knutanders" created="Thu, 6 Dec 2012 14:05:38 +0000"  >&lt;p&gt;I wasn&apos;t quite happy with the approach in the 3b patch either, as I didn&apos;t like having to expose the clearSPSPlans() method in the DataDictionary interface just for the tests.&lt;/p&gt;

&lt;p&gt;So I went back and tried to find out why the new SYSCS_INVALIDATE_STORED_STATEMENTS procedure didn&apos;t do the trick. The procedure calls SPSDescriptor.makeInvalid() on all the SPSs in SYS.SYSSTATEMENTS. That method sets the VALID to false in the system table, but the actual plan is left there.&lt;/p&gt;

&lt;p&gt;The procedure could potentially help with more bugs if it also cleared the plan. The statement is going to be recompiled on the next execution anyways, so there&apos;s no value in keeping the plan in the system table.&lt;/p&gt;

&lt;p&gt;The attached patch d6003-3c-downgrade-with-stored-proc.diff implements that approach and makes SPSDescriptor.makeInvalid() change both the VALID column and the CONSTANTSTATE column (which holds the plan). It adds the same workaround to the upgrade tests as the 3b patch, only that it calls SYSCS_INVALIDATE_STORED_STATEMENT instead of DataDictionary.clearSPSPlans().&lt;/p&gt;

&lt;p&gt;The patch makes the upgrade tests run cleanly in combination with the 4a patch. It has the following advantages over the 3b patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No new interface methods in the DataDictionary&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It makes SYSCS_INVALIDATE_STORED_STATEMENT useful for a larger class of bugs&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13526361" author="knutanders" created="Fri, 7 Dec 2012 13:10:17 +0000"  >&lt;p&gt;I went ahead and committed the 3c patch with revision 1418296 and the 4a patch with revision 1418297.&lt;/p&gt;</comment>
                            <comment id="13526394" author="knutanders" created="Fri, 7 Dec 2012 13:54:11 +0000"  >&lt;p&gt;Attaching d6003-5a-sort-vti-aggregate-window.diff which makes the&lt;br/&gt;
result sets for distinct scans, VTIs, aggregations and window&lt;br/&gt;
functions use ExecRowBuilder instead of generated methods.&lt;/p&gt;

&lt;p&gt;The code that creates the generated method is still there, since it&apos;s&lt;br/&gt;
still needed by IndexToBaseRowNode. I plan to address that in the next&lt;br/&gt;
patch.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the 5a patch.&lt;/p&gt;

&lt;p&gt;Details:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Signature changes to allow callers to pass a reference to a saved&lt;br/&gt;
object (the ExecRowBuilder) instead of a generated method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/OrderByList.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Push a reference to an ExecRowBuilder as argument to the result set&lt;br/&gt;
creation method instead of generating a row allocator method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/DistinctGroupedAggregateResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/DistinctScalarAggregateResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GenericAggregateResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GroupedAggregateResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/ScalarAggregateResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/SortResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/WindowResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use the ExecRowBuilder to produce the row template instead of invoking&lt;br/&gt;
the generated method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove the two-argument generateHolder() method, as it is no longer used.&lt;/p&gt;</comment>
                            <comment id="13529771" author="knutanders" created="Wed, 12 Dec 2012 09:15:36 +0000"  >&lt;p&gt;Committed 5a to trunk with revision 1420579.&lt;/p&gt;</comment>
                            <comment id="13530884" author="knutanders" created="Thu, 13 Dec 2012 10:39:02 +0000"  >&lt;p&gt;Attaching d6003-6a-index-to-base-row.diff which makes IndexRowToBaseRowResultSet use an ExecRowBuilder instead of a generated method to create the row template used in the scan.&lt;/p&gt;

&lt;p&gt;This was the last remaining caller of ResultColumnList.generateHolder(), so the patch also removes the code that creates byte code for allocating row templates.&lt;/p&gt;

&lt;p&gt;IndexRowToBaseRowResultSet&apos;s invocation of generateHolder() used some extra logic to skip columns already fetched from the index. The patch merges this logic into the buildRowTemplate() method, which now takes an extra parameter to tell whether or not to skip certain columns.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove the generateHolder() and generateHolderMethod() methods.&lt;/p&gt;

&lt;p&gt;Move the missing logic for skipping index columns into the buildRowTemplate() method, and add extra parameter.&lt;/p&gt;

&lt;p&gt;Add shorthand variant of buildRowTemplate() that takes no arguments, since most callers don&apos;t have anything to pass in.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Push a reference to an ExecRowBuilder instead of a generated method as argument to the result set creation method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Use the saved ExecRowBuilder instead of a generated method when creating the row template in the constructor.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Change method signatures to take saved object index instead of generated method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/OrderByList.java&lt;/li&gt;
	&lt;li&gt;java/engine/org/apache/derby/impl/sql/compile/WindowResultSetNode.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Update calls to ResultColumnList.buildRowTemplate() with the correct number of arguments after the signature change to allow skipping index columns.&lt;/p&gt;</comment>
                            <comment id="13539900" author="knutanders" created="Thu, 27 Dec 2012 10:05:22 +0000"  >&lt;p&gt;Committed the 6a patch to trunk, revision 1426151.&lt;/p&gt;

&lt;p&gt;I haven&apos;t found any other places where we generate code for row templates, so I&apos;m resolving the issue.&lt;/p&gt;</comment>
                            <comment id="13541227" author="dagw" created="Mon, 31 Dec 2012 02:31:25 +0000"  >&lt;p&gt;Thanks for working on reducing the amount of generated code, Knut! This is a tricky area and I haven&apos;t been able to follow this issue closely, but your approach seems good to me.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12665201">DERBY-6314</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12554717" name="d6003-1a-cleanup.diff" size="10078" author="knutanders" created="Fri, 23 Nov 2012 07:12:16 +0000"/>
                            <attachment id="12555011" name="d6003-2a-unused-field.diff" size="6482" author="knutanders" created="Tue, 27 Nov 2012 13:35:36 +0000"/>
                            <attachment id="12555505" name="d6003-3a-safe-downgrade.diff" size="9219" author="knutanders" created="Fri, 30 Nov 2012 13:40:43 +0000"/>
                            <attachment id="12556101" name="d6003-3b-downgrade-workaround-in-tests.diff" size="10811" author="knutanders" created="Wed, 5 Dec 2012 14:24:23 +0000"/>
                            <attachment id="12556361" name="d6003-3c-downgrade-with-stored-proc.diff" size="10752" author="knutanders" created="Thu, 6 Dec 2012 14:05:38 +0000"/>
                            <attachment id="12555776" name="d6003-4a-scanresultset.diff" size="77638" author="knutanders" created="Mon, 3 Dec 2012 16:03:18 +0000"/>
                            <attachment id="12559856" name="d6003-5a-sort-vti-aggregate-window.diff" size="36513" author="knutanders" created="Fri, 7 Dec 2012 13:54:11 +0000"/>
                            <attachment id="12560761" name="d6003-6a-index-to-base-row.diff" size="18630" author="knutanders" created="Thu, 13 Dec 2012 10:39:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 30 Nov 2012 17:54:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>291826</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hylabb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>158193</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>