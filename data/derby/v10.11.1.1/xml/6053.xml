<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:51 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6053/DERBY-6053.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6053] Client should use a prepared statement rather than regular statement for Connection.setTransactionIsolation</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6053</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;o.a.d.client.am.Connection setTransactionIsolation() uses a Statement which  it builds up each time for setTransactionIsolation()  is called.&lt;/p&gt;

&lt;p&gt;private Statement setTransactionIsolationStmt = null;&lt;br/&gt;
...&lt;br/&gt;
setTransactionIsolationStmt =&lt;br/&gt;
                    createStatementX(java.sql.ResultSet.TYPE_FORWARD_ONLY,&lt;br/&gt;
                            java.sql.ResultSet.CONCUR_READ_ONLY,&lt;br/&gt;
                            holdability());&lt;br/&gt;
....&lt;br/&gt;
 private void setTransactionIsolationX(int level)&lt;br/&gt;
...&lt;br/&gt;
            setTransactionIsolationStmt.executeUpdate(&lt;br/&gt;
                &quot;SET CURRENT ISOLATION = &quot; + levelString);&lt;/p&gt;


&lt;p&gt;It would be better for performance and also for avoid possible garbage collection issues, to have a single prepared statement with a parameter marker. &lt;/p&gt;

&lt;p&gt;The program below shows repeated calls to setTransactionIsolation.&lt;/p&gt;

&lt;p&gt;import java.sql.*;&lt;br/&gt;
import java.net.*;&lt;br/&gt;
import java.io.*;&lt;br/&gt;
import org.apache.derby.drda.NetworkServerControl;&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Client template starts its own NetworkServer and runs some SQL against it.&lt;/li&gt;
	&lt;li&gt;The SQL or JDBC API calls can be modified to reproduce issues&lt;/li&gt;
	&lt;li&gt;&lt;p&gt; */public class SetTransactionIsolation {&lt;br/&gt;
    public static Statement s;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public static void main(String[] args) throws Exception {&lt;br/&gt;
        try {&lt;br/&gt;
            // Load the driver. Not needed for network server.&lt;/p&gt;

&lt;p&gt;            Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);&lt;br/&gt;
            // Start Network Server&lt;br/&gt;
            startNetworkServer();&lt;br/&gt;
            // If connecting to a customer database. Change the URL&lt;br/&gt;
            Connection conn = DriverManager&lt;br/&gt;
                    .getConnection(&quot;jdbc:derby://localhost:1527/wombat;create=true&quot;);&lt;br/&gt;
            // clean up from a previous run&lt;br/&gt;
            s = conn.createStatement();&lt;br/&gt;
            try &lt;/p&gt;
{
                s.executeUpdate(&quot;DROP TABLE T&quot;);
            }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{
                if (!se.getSQLState().equals(&quot;42Y55&quot;))
                    throw se;
            }

&lt;p&gt;            for (int i = 0; i &amp;lt; 50000; i++) &lt;/p&gt;
{
		conn.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);
		conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);

	    }

&lt;p&gt;            // rs.close();&lt;br/&gt;
            // ps.close();&lt;br/&gt;
            runtimeInfo();&lt;br/&gt;
            conn.close();&lt;br/&gt;
            // Shutdown the server&lt;br/&gt;
            shutdownServer();&lt;br/&gt;
        } catch (SQLException se) {&lt;br/&gt;
            while (se != null) &lt;/p&gt;
{
                System.out.println(&quot;SQLState=&quot; + se.getSQLState()
                        + se.getMessage());
                se.printStackTrace();
                se = se.getNextException();
            }
&lt;p&gt;        }&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;starts the Network server&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;     */&lt;br/&gt;
    public static void startNetworkServer() throws SQLException {&lt;br/&gt;
        Exception failException = null;&lt;br/&gt;
        try {&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            NetworkServerControl networkServer = new NetworkServerControl(&lt;br/&gt;
                    InetAddress.getByName(&quot;localhost&quot;), 1527);&lt;/p&gt;

&lt;p&gt;            networkServer.start(new PrintWriter(System.out));&lt;/p&gt;

&lt;p&gt;            // Wait for the network server to start&lt;br/&gt;
            boolean started = false;&lt;br/&gt;
            int retries = 10; // Max retries = max seconds to wait&lt;/p&gt;

&lt;p&gt;            while (!started &amp;amp;&amp;amp; retries &amp;gt; 0) {&lt;br/&gt;
                try &lt;/p&gt;
{
                    // Sleep 1 second and then ping the network server
                    Thread.sleep(1000);
                    networkServer.ping();
                    
                    // If ping does not throw an exception the server has
                    // started
                    started = true;
                }
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{
                    retries--;
                    failException = e;
                }

&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            // Check if we got a reply on ping&lt;br/&gt;
            if (!started) &lt;/p&gt;
{
                throw failException;
            }
&lt;p&gt;        } catch (Exception e) &lt;/p&gt;
{
            SQLException se = new SQLException(&quot;Error starting network  server&quot;);
            se.initCause(failException);
            throw se;
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    public static void shutdownServer() throws Exception &lt;/p&gt;
{
        NetworkServerControl networkServer = new NetworkServerControl(
                InetAddress.getByName(&quot;localhost&quot;), 1527);
        networkServer.shutdown();
    }

&lt;p&gt;    public static void runtimeInfo() throws Exception &lt;/p&gt;
{
        NetworkServerControl networkServer = new NetworkServerControl(
                InetAddress.getByName(&quot;localhost&quot;), 1527);
        System.out.println(networkServer.getRuntimeInfo());
    }

&lt;p&gt;}&lt;/p&gt;</description>
                <environment></environment>
        <key id="12629277">DERBY-6053</key>
            <summary>Client should use a prepared statement rather than regular statement for Connection.setTransactionIsolation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Jan 2013 15:02:53 +0000</created>
                <updated>Wed, 3 Sep 2014 09:31:27 +0100</updated>
                            <resolved>Thu, 28 Feb 2013 22:43:45 +0000</resolved>
                                                    <fixVersion>10.8.3.3</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13565040" author="mamtas" created="Tue, 29 Jan 2013 03:29:40 +0000"  >&lt;p&gt;I wrote a simple JDBC program outside to see if parameter can be used to set transaction isolation level and it appears that use of ? inside a prepared statement is not allowed by SET CURRENT ISOLATION sql. I got following syntax error&lt;br/&gt;
$ java org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC&lt;br/&gt;
SQLState=42X01Syntax error: Encountered &quot;?&quot; at line 1, column 25.&lt;br/&gt;
java.sql.SQLSyntaxErrorException: Syntax error: Encountered &quot;?&quot; at line 1, column 25.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:92)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2400)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:153)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Driver40.java:102)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1725)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1553)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.lang.MamtaJDBC.main(MamtaJDBC.java:29)&lt;br/&gt;
Caused by: java.sql.SQLException: Syntax error: Encountered &quot;?&quot; at line 1, column 25.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
        ... 10 more&lt;br/&gt;
Caused by: ERROR 42X01: Syntax error: Encountered &quot;?&quot; at line 1, column 25.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(ParserImpl.java:153)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:357)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1103)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:134)&lt;br/&gt;
        ... 4 more&lt;/p&gt;

&lt;p&gt;The JDBC program is as follows&lt;br/&gt;
package org.apache.derbyTesting.functionTests.tests.lang;&lt;br/&gt;
import java.sql.*; &lt;/p&gt;

&lt;p&gt;/** &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sample JDBC program&lt;/li&gt;
	&lt;li&gt;&lt;p&gt; */public class MamtaJDBC { &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public static void main(String[] args) throws Exception { &lt;br/&gt;
        Statement s; &lt;br/&gt;
        PreparedStatement ps; &lt;br/&gt;
        try { &lt;br/&gt;
            // Load the driver.             &lt;br/&gt;
            Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;); &lt;br/&gt;
            Connection conn = DriverManager &lt;br/&gt;
                    .getConnection(&quot;jdbc:derby:c:/dellater/wombat;create=true&quot;); &lt;br/&gt;
            // clean up from a previous run &lt;br/&gt;
            s = conn.createStatement(); &lt;br/&gt;
            try &lt;/p&gt;
{ 
                s.executeUpdate(&quot;DROP TABLE T1&quot;); 
            }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{ 
                if (!se.getSQLState().equals(&quot;42Y55&quot;)) 
                    throw se; 
            }
&lt;p&gt; &lt;br/&gt;
            //Just a sanity check that ? worked for following select statement&lt;br/&gt;
            ps = conn.prepareStatement(&quot;select * from sys.systables where tablename=?&quot;);&lt;br/&gt;
            ps.setString(1, &quot;rr&quot;);&lt;br/&gt;
            ps.execute();&lt;br/&gt;
            ps = conn.prepareStatement(&quot;SET CURRENT ISOLATION = ?&quot;);&lt;br/&gt;
            ps.setString(1, &quot;rr&quot;);&lt;br/&gt;
            ps.execute();&lt;br/&gt;
            ps.close(); &lt;br/&gt;
            s.close();&lt;br/&gt;
            conn.close(); &lt;br/&gt;
        } catch (SQLException se) { &lt;br/&gt;
            while (se != null) &lt;/p&gt;
{ 
                System.out.println(&quot;SQLState=&quot; + se.getSQLState() 
                        + se.getMessage()); 
                se.printStackTrace(); 
                se = se.getNextException(); 
            }
&lt;p&gt; &lt;br/&gt;
        } &lt;br/&gt;
    } &lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;In order to address the performance issues and possible garbage collection issues mentioned by Kathey above, since there are only 4 isolation levels, I was thinking we could create 4 prepared statements in Client side, one for each of the isolation levels and execute one of those PreparedStatement when the user asks for change of isolation levels. This way, we will not be preparing and executing for every isolation level change, instead just execute already prepared PreparedStatemtn.&lt;/p&gt;</comment>
                            <comment id="13567767" author="mamtas" created="Thu, 31 Jan 2013 16:24:09 +0000"  >&lt;p&gt;I worked on the changes to use PreparedStatement rather than Statement to avoid compiling before every execution of change of isolation level. Following shows part of the code changes in o.a.d.client.am.Connection.setTransactionIsolationX&lt;br/&gt;
            if (setRepeatableReadTransactionIsolationStmt == null  ||&lt;br/&gt;
                    !(setRepeatableReadTransactionIsolationStmt.openOnClient_ &amp;amp;&amp;amp;&lt;br/&gt;
                    		setRepeatableReadTransactionIsolationStmt.openOnServer_)) &lt;/p&gt;
{
            	System.out.println(&quot;in new changes&quot;);
            	setRepeatableReadTransactionIsolationStmt =
            			prepareStatementX(
            					&quot;SET CURRENT ISOLATION = &quot; + DERBY_TRANSACTION_REPEATABLE_READ,
            					java.sql.ResultSet.TYPE_FORWARD_ONLY,
            					java.sql.ResultSet.CONCUR_READ_ONLY,
                                holdability(),
                                java.sql.Statement.NO_GENERATED_KEYS,
                                null, null);
            }
&lt;p&gt;But I am finding that setRepeatableReadTransactionIsolationStmt.openOnServer_ check always returns false thus making the if statement always true after the first time set isolation level is changed to repeatable read. I had thought that after it has been prepared the first time around, the subsequent times will make the if statement return false. I looked at o.a.d.client.am.Statement:openOnServer_ and see following comment for it&lt;br/&gt;
    // This means a DERBY server-side section for this statement is in the prepared state.&lt;br/&gt;
    // A client-side jdbc statement may remain open across commits (openOnClient=true),&lt;br/&gt;
    // but the server-side DERBY section moves to an unprepared state (openOnServer=false) across commits,&lt;br/&gt;
    // requiring an implicit re-prepare &quot;under the covers&quot; by the driver.&lt;br/&gt;
    // Unprepared jdbc query statements still have prepared sections on the server.&lt;br/&gt;
    // This openOnServer_ only has implications for preparedstatement&lt;/p&gt;

&lt;p&gt;Based on the comment above, I changed the sample program provided above by Kathey to have commit false on the connection but I still see us preparing the statement every time isolation level change is requested, ie openOnServer_ is still false. I will look further into this but wanted to give a heads up and see if anyone had any insight in this area of the code. Thanks&lt;/p&gt;</comment>
                            <comment id="13567952" author="kmarsden" created="Thu, 31 Jan 2013 19:01:18 +0000"  >&lt;p&gt;Thank you Mamta for looking at this,&lt;/p&gt;

&lt;p&gt; I do not think that comment is true about statements not staying prepared across commits.&lt;br/&gt;
If I prepare a statement and execute it twice with a commit in between from client, I do not see a reprepare in the derby.log .  I think maybe the openOnServer_ property may be a relic of some place or time in the original code base when that was true.&lt;/p&gt;


&lt;p&gt;Thu Jan 31 10:52:46 PST 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,derby.daemons&amp;#93;&lt;/span&gt; (XID = 172), (SESSIONID = 1), (DATABASE = wombat), (DRDAID = .-4398045151445635921&lt;/p&gt;
{2}), End compiling prepared statement: INSERT INTO T VALUES(?,?) :End prepared statement&lt;br/&gt;
Thu Jan 31 10:52:46 PST 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,derby.daemons&amp;#93;&lt;/span&gt; (XID = 172), (SESSIONID = 1), (DATABASE = wombat), (DRDAID = .-4398045151445635921{2}
&lt;p&gt;), Executing prepared statement: INSERT INTO T VALUES(?,?) :End prepared statement with 2 parameters begin parameter #1: 1 :end parameter begin parameter #2: CLOB(5) :end parameter &lt;br/&gt;
Thu Jan 31 10:52:46 PST 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,derby.daemons&amp;#93;&lt;/span&gt; (XID = 172), (SESSIONID = 1), (DATABASE = wombat), (DRDAID = .-4398045151445635921&lt;/p&gt;
{2}), Committing&lt;br/&gt;
Thu Jan 31 10:52:46 PST 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,derby.daemons&amp;#93;&lt;/span&gt; (XID = 174), (SESSIONID = 1), (DATABASE = wombat), (DRDAID = .-4398045151445635921{2}
&lt;p&gt;), Executing prepared statement: INSERT INTO T VALUES(?,?) :End prepared statement with 2 parameters begin parameter #1: 2 :end parameter begin parameter #2: CLOB(7) :end parameter &amp;lt;=== Just execute again after commit.&lt;/p&gt;


&lt;p&gt;At least in this case, I think it can be removed from the condition. It would be good to file an issue to investigate the openOnServer field  in general. &lt;/p&gt;

&lt;p&gt;One aside comment on this change is that for our prepared statements it might be nice to have a  HashTable keyed on the DERBY_TRANSACTION_...  values instead of separate fields for each one and repeat code.&lt;/p&gt;</comment>
                            <comment id="13569184" author="mamtas" created="Fri, 1 Feb 2013 22:42:33 +0000"  >&lt;p&gt;I have made the changes to use PreparedStatement vs Statement(attached a patch DERBY6053_patch1_diff.txt for it) so that we do not compile the statements for isolation level change every single time. When I compile this code though, I get following error from ant all&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: C:\p4clients\svnmain\client3\trunk\java\client\org\apache\derby\client\am\Connection.java uses unchecked or unsafe operations.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Recompile with -Xlint:unchecked for details.&lt;br/&gt;
The subsequent compile doesn&apos;t show this error anymore. I have a feeling this has to do with using Hashtable and Iterator objects, but not 100% yet. Am I correct about that assumption? If so, can this compile time error be ignored since the subsequent compile doesn&apos;t give that error again? Thanks&lt;/p&gt;</comment>
                            <comment id="13569194" author="mamtas" created="Fri, 1 Feb 2013 22:51:09 +0000"  >&lt;p&gt;Here is the correct attachement &lt;/p&gt;</comment>
                            <comment id="13569267" author="mamtas" created="Fri, 1 Feb 2013 23:49:20 +0000"  >&lt;p&gt;I have fired the derbyall and junit tests with the attached patch.&lt;/p&gt;</comment>
                            <comment id="13570499" author="kmarsden" created="Mon, 4 Feb 2013 18:46:15 +0000"  >&lt;p&gt;Thanks Mamta for the patch.&lt;/p&gt;

&lt;p&gt;Do you get the same warning with tis patch and the more strongly typed iterator?&lt;/p&gt;

&lt;p&gt;The patch looks good to me.  A couple minor points.&lt;br/&gt;
Since this catch block might be for more than one prepared statement close, it should probably only set accumulateExceptions to se if accumulatedExceptions is null, otherwise do accumulatedExceptions.setNextException(se)&lt;/p&gt;

&lt;p&gt;               } catch (SQLException se) &lt;/p&gt;
{
                    accumulatedExceptions = se;
                }

&lt;p&gt;There are  tabs mixed in with the spaces even on lines that have otherwise not changed.  The client code should be all space indentation.&lt;/p&gt;




</comment>
                            <comment id="13570684" author="mamtas" created="Mon, 4 Feb 2013 22:20:03 +0000"  >&lt;p&gt;Hi Kathey, thanks for reviewing the patch. I will take care of both your comments. As there are no further comments from anyone else, I will commit the fix for this jira after making the changes suggested by you.&lt;/p&gt;</comment>
                            <comment id="13571057" author="mamtas" created="Tue, 5 Feb 2013 05:14:45 +0000"  >&lt;p&gt;Committed changes into trunk(10.10.0.0 alpha) with revision 1442474.&lt;/p&gt;</comment>
                            <comment id="13571060" author="mamtas" created="Tue, 5 Feb 2013 05:17:33 +0000"  >&lt;p&gt;I think the backport of the changes should be fine(although will it be an issue to have different client versions to a server using different ways of changing the isolation level? ie clients without the changes from this jira will use regular statements whereas clients with the changes from this jira will use prepared statements)&lt;/p&gt;</comment>
                            <comment id="13571307" author="knutanders" created="Tue, 5 Feb 2013 13:55:29 +0000"  >&lt;p&gt;Some post-commit comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As far as I can see, all accesses to isolationLevelPreparedStmts are synchronized on the Connection instance, so maybe it could be an unsynchronized HashMap instead of a synchronized Hashtable?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;isolationLevelPreparedStmts is initialized to a non-null value and never changed, so checking that it&apos;s not null before accessing it shouldn&apos;t be necessary. (Maybe also declare the field as final to make it explicit that it is never changed from the initial non-null value.)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the declaration of isolationLevelPreparedStmts should include type parameters, so that it&apos;s easier to access the values stored in it:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    HashMap&amp;lt;String,PreparedStatement&amp;gt; isolationLevelPreparedStmts = new HashMap&amp;lt;String,PreparedStatement&amp;gt;();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There&apos;s a compiler warning when I build the code. This line looks wrong, and I suppose that&apos;s what the compiler is warning us about:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            for (Iterator&amp;lt;PreparedStatement&amp;gt; it = isolationLevelPreparedStmts.keySet().iterator();&lt;/p&gt;

&lt;p&gt;The keys in the hash table are strings, not prepared statements. So it should say Iterator&amp;lt;String&amp;gt;. (If the type parameters had been included in the declaration of the field, the compiler would have known it was wrong, and it would have produced an error instead of a warning.)&lt;/p&gt;

&lt;p&gt;However, it&apos;s much simpler to use a for-each loop, so I suggest that the loop is changed to something like this:&lt;/p&gt;

&lt;p&gt;        for (PreparedStatement ps : isolationLevelPreparedStmts.values()) {&lt;br/&gt;
            try &lt;/p&gt;
{
                ps.close();
            }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{
                // ...
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When the declaration of isolationLevelPreparedStmts is changed to include the type parameters &amp;lt;String,PreparedStatement&amp;gt;, it is no longer necessary to cast the value returned from isolationLevelPreparedStmts.get(levelString), as the compiler already knows it returns a PreparedStatement.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13571319" author="knutanders" created="Tue, 5 Feb 2013 14:08:03 +0000"  >&lt;p&gt;&amp;gt; The subsequent compile doesn&apos;t show this error anymore. I have a&lt;br/&gt;
&amp;gt; feeling this has to do with using Hashtable and Iterator objects,&lt;br/&gt;
&amp;gt; but not 100% yet. Am I correct about that assumption? If so, can&lt;br/&gt;
&amp;gt; this compile time error be ignored since the subsequent compile&lt;br/&gt;
&amp;gt; doesn&apos;t give that error again?&lt;/p&gt;

&lt;p&gt;You probably didn&apos;t see it again because the second time the class&lt;br/&gt;
file was already built, so it didn&apos;t get recompiled (incremental&lt;br/&gt;
build). I suppose you&apos;d see it again if you ran &quot;ant clean&quot; or &quot;ant&lt;br/&gt;
clobber&quot; first and then built the code.&lt;/p&gt;</comment>
                            <comment id="13571707" author="rhillegas" created="Tue, 5 Feb 2013 20:37:36 +0000"  >&lt;p&gt;Attaching derby-6053-01-aa-lintCheck.diff. This patch adds a -lint directive to the compilation target which compiles Connection.java. Committed at subversion revision 1442732.&lt;/p&gt;

&lt;p&gt;After applying this patch, when you do a clean build, you will see more detail about the compilation warning introduced by revision 1442474. I agree with Knut&apos;s analysis of the warning: the coding bug here will give rise to ClassCastExceptions in production.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/client/build.xml&lt;/p&gt;</comment>
                            <comment id="13571993" author="mamtas" created="Wed, 6 Feb 2013 00:48:37 +0000"  >&lt;p&gt;Knut and Rick, thanks for your feedbacks. I will take care of the comments posted by Knut. Rick, thanks for adding -lint directive, it will be good to see the error from the compiler.&lt;/p&gt;</comment>
                            <comment id="13573657" author="mamtas" created="Thu, 7 Feb 2013 16:44:10 +0000"  >&lt;p&gt;Committed changes recommended by Knut with revision 1443599.&lt;/p&gt;</comment>
                            <comment id="13587994" author="mamtas" created="Wed, 27 Feb 2013 04:43:32 +0000"  >&lt;p&gt;I am working on backporting the 2 commits that went in for this jira into 10.9 codelines. But the declaration of isolationLevelPreparedStmts includes type parameters as shown below&lt;br/&gt;
    final private HashMap&amp;lt;String, PreparedStatement&amp;gt; &lt;br/&gt;
        isolationLevelPreparedStmts = &lt;br/&gt;
            new HashMap&amp;lt;String, PreparedStatement&amp;gt;();&lt;/p&gt;

&lt;p&gt;This code when compiled in 10.9 gives following compile time error&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\p4clients\svn10.9\client1\10.9\java\client\org\apache\derby\client\am\Connection.java:91: generics are not supported in -source 1.4&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; (use -source 5 or higher to enable generics)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     final private HashMap&amp;lt;String, PreparedStatement&amp;gt;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                          ^&lt;/p&gt;

&lt;p&gt;I know there are other clases in 10.9 that include type parameters during HashMap declaration eg org.apache.derby.iapi.jdbc.FailedProperties40 but build.xml has been modified to compile them with compilerLevel16 rather than 1.4. Is it ok to solve the compile time issue with Connection.java by having it compile with compilerLevel16 or should I use the old style HashMap declaration(without the type parameters) which is found scattered around in 10.9 codeline? Thanks for the help.&lt;/p&gt;</comment>
                            <comment id="13588087" author="knutanders" created="Wed, 27 Feb 2013 07:34:44 +0000"  >&lt;p&gt;10.9 is supposed to work on Java 1.4, so I don&apos;t think we should change the compiler level on that branch. (FailedProperties40 is only used on Java 6 and higher, so it&apos;s OK for that class, though.) Declaring the HashMap without the type parameters should be fine.&lt;/p&gt;</comment>
                            <comment id="13588883" author="mamtas" created="Wed, 27 Feb 2013 23:04:07 +0000"  >&lt;p&gt;Backported changes to 10.9 codeline with revision 1451023.&lt;/p&gt;</comment>
                            <comment id="13588888" author="mamtas" created="Wed, 27 Feb 2013 23:05:47 +0000"  >&lt;p&gt;reopening the issue for backporting&lt;/p&gt;</comment>
                            <comment id="13590006" author="mamtas" created="Thu, 28 Feb 2013 22:43:07 +0000"  >&lt;p&gt;Backported changes to 10.8 codeline with revision 1451397.&lt;/p&gt;</comment>
                            <comment id="14119566" author="knutanders" created="Wed, 3 Sep 2014 09:31:27 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12629326">DERBY-6054</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12630769">DERBY-6066</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12567655" name="DERBY6053_patch1_diff.txt" size="4894" author="mamtas" created="Fri, 1 Feb 2013 22:51:09 +0000"/>
                            <attachment id="12568080" name="derby-6053-01-aa-lintCheck.diff" size="364" author="rhillegas" created="Tue, 5 Feb 2013 20:37:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Jan 2013 03:29:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>309337</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hz8gfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293465</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>