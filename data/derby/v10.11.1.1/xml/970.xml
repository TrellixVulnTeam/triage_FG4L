<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:34:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-970/DERBY-970.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-970] Add new metadata methods to network client driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-970</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Implement new JDBC 4.0 DatabaseMetaData methods in the client driver:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;supportsStoredFunctionsUsingCallSyntax()&lt;/li&gt;
	&lt;li&gt;autoCommitFailureClosesAllResultSets()&lt;/li&gt;
	&lt;li&gt;getClientInfoProperties()&lt;/li&gt;
	&lt;li&gt;providesQueryObjectGenerator()&lt;/li&gt;
	&lt;li&gt;getSchemas()&lt;/li&gt;
	&lt;li&gt;getRowIdLifetime()&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12328912">DERBY-970</key>
            <summary>Add new metadata methods to network client driver</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12328834">DERBY-946</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="davidvc">David Van Couvering</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Feb 2006 06:32:44 +0000</created>
                <updated>Tue, 13 Jun 2006 05:28:33 +0100</updated>
                            <resolved>Thu, 20 Apr 2006 19:21:53 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12369251" author="knutanders" created="Tue, 7 Mar 2006 23:44:20 +0000"  >&lt;p&gt;Most of the JDBC 4 DatabaseMetaData methods that return a ResultSet&lt;br/&gt;
are implemented in the embedded driver. I can think of many ways to&lt;br/&gt;
implement them in the client driver, but I don&apos;t like any of them very&lt;br/&gt;
much.&lt;/p&gt;

&lt;p&gt;The current pattern for implementing such methods is:&lt;/p&gt;

&lt;p&gt;  1) write a query and put it in metadata.properties&lt;/p&gt;

&lt;p&gt;  2) implement method in EmbedDatabaseMetaData executing query in&lt;br/&gt;
     metadata.properties&lt;/p&gt;

&lt;p&gt;  3) create system procedure in SystemProcedures, calling the method&lt;br/&gt;
     through the java.sql.DatabaseMetaData interface&lt;/p&gt;

&lt;p&gt;  4) implement method in the client driver, calling the system&lt;br/&gt;
     procedure&lt;/p&gt;

&lt;p&gt;Since JDK 1.6 compilation is optional, step 3 is not possible without&lt;br/&gt;
using reflection. There are (at least) two ways that step can be&lt;br/&gt;
performed with reflection:&lt;/p&gt;

&lt;p&gt;  a) find and invoke the correct JDBC 4 DatabaseMetaData method with&lt;br/&gt;
     reflection&lt;/p&gt;

&lt;p&gt;  b) have some kind of JDBC 4 SystemProcedure factory which can load a&lt;br/&gt;
     class compiled under JDK 1.6&lt;/p&gt;

&lt;p&gt;Then there is the possibility to break the current pattern and let the&lt;br/&gt;
client execute the query directly instead of going through the system&lt;br/&gt;
procedure. Two options:&lt;/p&gt;

&lt;p&gt;  c) hard code the query in the client driver (already used for some&lt;br/&gt;
     metadata methods returning an empty ResultSet, in which case it&lt;br/&gt;
     is OK?)&lt;/p&gt;

&lt;p&gt;  d) let client access metadata.properties (by letting ant copy the&lt;br/&gt;
     file)&lt;/p&gt;

&lt;p&gt;My objections to these approaches are:&lt;/p&gt;

&lt;p&gt;Approach a will result in messy and hard to read code where all sorts&lt;br/&gt;
of exceptions need to be caught and handled.&lt;/p&gt;

&lt;p&gt;Approach b needs at least two additional java files (interface and&lt;br/&gt;
implementation) which seems like too much complexity for something&lt;br/&gt;
this simple.&lt;/p&gt;

&lt;p&gt;Approach c duplicates code (that is, SQL code).&lt;/p&gt;

&lt;p&gt;Approach d can cause compatibility problems if the name of a system&lt;br/&gt;
table/schema changes in a subsequent Derby version.&lt;/p&gt;

&lt;p&gt;Also, approaches c and d won&apos;t create and store an SPS (stored&lt;br/&gt;
prepared statement). Is performance a big issue for metadata calls?&lt;/p&gt;

&lt;p&gt;I would appreciate getting some advice on which of these ugly&lt;br/&gt;
solutions to choose. Of course, if someone has a solution that is not&lt;br/&gt;
ugly, I would appreciate that too!&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12369646" author="knutanders" created="Thu, 9 Mar 2006 23:13:35 +0000"  >&lt;p&gt;Since no one seems to have strong opinions on this, I will go ahead&lt;br/&gt;
using the factory approach. I think that will be the cleanest one, and&lt;br/&gt;
it can be reused in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-924&quot; title=&quot;new JDBC4 metadata API getFunctions() needs to be implemented&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-924&quot;&gt;&lt;del&gt;DERBY-924&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-925&quot; title=&quot;Implement new JDBC 4 metadata API getFunctionParameters()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-925&quot;&gt;&lt;del&gt;DERBY-925&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12369672" author="kmarsden" created="Fri, 10 Mar 2006 01:09:32 +0000"  >&lt;p&gt;Sorry I didn&apos;t look at this earlier I have a few  questions as I try to come up to speed on the issues.&lt;/p&gt;

&lt;p&gt;1) Could you clarify the issue with JDK 1.6?&lt;br/&gt;
From what I understand, the issue is:&lt;br/&gt;
 We just don&apos;t have access to the JDK 1.6 interfaces because in our build we don&apos;t build with JDK 1.6.   Is that correct?   If that is the case, can our SystemProcedure just call our internal implementation?&lt;/p&gt;

&lt;p&gt;2) With your plan will metadata.properties remain as is and we keep the stored prepared statements?&lt;/p&gt;

&lt;p&gt;3)Could you epxplain how thie factory solution would work a little more?&lt;/p&gt;


&lt;p&gt;And a couple of tangental questions:&lt;br/&gt;
4)&lt;br/&gt;
Do you understand how metadata.properties changes are handled with regard to soft upgrade, downgrade, upgrade, etc currentlyy?  I have had on my list for a long time to research what is happenning in Derby with this as it was the source of intractable upgrade issues in the past and the mechanism that I knew of to handle it (dropping the SPS&apos;s whenever the version changed) is no longer in Derby.  I just haven&apos;t been able to get to researching it yet.&lt;/p&gt;


&lt;p&gt;5)  Is there a general problem with incompatiblity of compiled Stored Prepared Statements  in databases that may have been created with different JVM versions?&lt;/p&gt;


&lt;p&gt;On   the earlier suggestions:&lt;/p&gt;

&lt;p&gt;Either c or d  would be a fatal blow to client/server compatibility, so they have all the appeal of euthanasia for client/server compat.&lt;/p&gt;

</comment>
                            <comment id="12369863" author="knutanders" created="Fri, 10 Mar 2006 22:43:15 +0000"  >&lt;p&gt;&amp;gt; Kathey Marsden commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-970&quot; title=&quot;Add new metadata methods to network client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-970&quot;&gt;&lt;del&gt;DERBY-970&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; --------------------------------------&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Sorry I didn&apos;t look at this earlier I have a few questions as I try&lt;br/&gt;
  to come up to speed on the issues.&lt;/p&gt;

&lt;p&gt;Thanks for your comments and suggestions! See my answers below.&lt;/p&gt;

&lt;p&gt;&amp;gt;&lt;br/&gt;
&amp;gt; 1) Could you clarify the issue with JDK 1.6?&lt;br/&gt;
&amp;gt; From what I understand, the issue is:&lt;br/&gt;
&amp;gt; We just don&apos;t have access to the JDK 1.6 interfaces because in our&lt;br/&gt;
&amp;gt; build we don&apos;t build with JDK 1.6.  Is that correct?&lt;/p&gt;

&lt;p&gt;That&apos;s correct. For instance, most of the client driver is compiled&lt;br/&gt;
with 1.4. Code that doesn&apos;t run in 1.3 is wrapped in an if, like this:&lt;/p&gt;

&lt;p&gt;  if (JVMInfo.JDK_ID &amp;gt;= JVMInfo.J2SE_14) &lt;/p&gt;
{
    // call a method that&apos;s not in java 1.3
  }

&lt;p&gt;We could do this with 1.6 code too, but since the 1.6 compiler only&lt;br/&gt;
can be used to compile optional (that is, JDBC 4) modules, the body of&lt;br/&gt;
the if statement needs to be written using reflection.&lt;/p&gt;

&lt;p&gt;&amp;gt; If that is the&lt;br/&gt;
&amp;gt; case, can our SystemProcedure just call our internal implementation?&lt;/p&gt;

&lt;p&gt;Yes, that is basically what alternative a would do. Since the JDBC 4.0&lt;br/&gt;
database metadata methods are implemented in EmbedDatabaseMetaData40,&lt;br/&gt;
we need to use reflection to check whether there is an internal&lt;br/&gt;
implementation of the metadata call.&lt;/p&gt;

&lt;p&gt;Alternatively, we could move the metadata methods from the 4.0 class&lt;br/&gt;
to the base class (or add a dummy method throwing not implemented in&lt;br/&gt;
the base class). In that case we could avoid the reflection.&lt;/p&gt;

&lt;p&gt;Currently, the system procedures do this to get result sets&lt;/p&gt;

&lt;p&gt;  rs&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = getDMD().getXXX(x,y,z);&lt;/p&gt;

&lt;p&gt;We would need to cast the return value from getDMD() to&lt;br/&gt;
EmbedDatabaseMetaData and change the code like this&lt;/p&gt;

&lt;p&gt;  rs&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = ((EmbedDatabaseMetaData) getDMD()).getXXX(x,y,z);&lt;/p&gt;

&lt;p&gt;I was considering this approach earlier, but rejected it because&lt;br/&gt;
  a) I didn&apos;t like casting from the java.sql interface to some&lt;br/&gt;
     internal implementation, and&lt;br/&gt;
  b) It wouldn&apos;t work if the method signatures contained new language&lt;br/&gt;
     constructs&lt;/p&gt;

&lt;p&gt;Looking at it again, at least b) doesn&apos;t seem to be an issue since&lt;br/&gt;
none of the metadata methods added by JDBC 4 use new language&lt;br/&gt;
constructs in their signatures.&lt;/p&gt;

&lt;p&gt;If SystemProcedure.getDMD() is guaranteed to return an&lt;br/&gt;
EmbedDatabaseMetaData object, a) isn&apos;t an issue either. I&apos;ll check if&lt;br/&gt;
that&apos;s the case. If it is, I think I like that solution better than&lt;br/&gt;
the factory.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) With your plan will metadata.properties remain as is and we keep&lt;br/&gt;
&amp;gt;    the stored prepared statements?&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3)Could you epxplain how thie factory solution would work a little&lt;br/&gt;
&amp;gt;   more?&lt;/p&gt;

&lt;p&gt;Methods that need 1.6 to compile are moved out into another class, say&lt;br/&gt;
SysProcHelper40. We would also need a base class, say SysProcHelper,&lt;br/&gt;
which is possible to compile under 1.4. For the new getSchemas()&lt;br/&gt;
method, we would have something like this:&lt;/p&gt;

&lt;p&gt;class SysProcHelper {&lt;br/&gt;
    ResultSet getSchemas(DatabaseMetaData dmd, String arg1, String arg2)&lt;br/&gt;
        throws SQLException &lt;/p&gt;
{
        // throw not implemented
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class SysProcHelper40 extends SysProcHelper {&lt;br/&gt;
    ResultSet getSchemas(DatabaseMetaData dmd, String arg1, String arg2)&lt;br/&gt;
        throws SQLException &lt;/p&gt;
{
        return dmd.getSchemas(arg1, arg2);
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;In SystemProcedures, we would need to add a variable of type&lt;br/&gt;
SysProcHelper, which is initialized (using reflection) to a&lt;br/&gt;
SysProcHelper or SysProcHelper40 instance depending on JVM.&lt;/p&gt;

&lt;p&gt;Then we would implement the system procedure like this:&lt;/p&gt;

&lt;p&gt;  rs&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = sysProcHelper.getSchemas(getDMD(), arg1, arg2);&lt;/p&gt;

&lt;p&gt;This way, we would get code that compiles without 1.6, returns the&lt;br/&gt;
correct result set when running under 1.6 (with JDBC 4 compiled in),&lt;br/&gt;
and throws not implemented when JDBC 4 isn&apos;t enabled.&lt;/p&gt;

&lt;p&gt;&amp;gt; And a couple of tangental questions:&lt;br/&gt;
&amp;gt; 4)&lt;br/&gt;
&amp;gt; Do you understand how metadata.properties changes are handled with&lt;br/&gt;
&amp;gt; regard to soft upgrade, downgrade, upgrade, etc currentlyy?&lt;/p&gt;

&lt;p&gt;Not at all! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I guess adding a new query wouldn&apos;t cause problems, since that will&lt;br/&gt;
just add a new SPS the first time it is used and not affect other&lt;br/&gt;
queries.&lt;/p&gt;

&lt;p&gt;Modifying existing queries, which has to be done for&lt;br/&gt;
DatabaseMetaData.getProcedures() and getProcedureColumns(), is&lt;br/&gt;
probably worse. Dropping the SPS or using a new name for the modified&lt;br/&gt;
query are the two options I can think of.&lt;/p&gt;

&lt;p&gt;&amp;gt; I have&lt;br/&gt;
&amp;gt; had on my list for a long time to research what is happenning in&lt;br/&gt;
&amp;gt; Derby with this as it was the source of intractable upgrade issues&lt;br/&gt;
&amp;gt; in the past and the mechanism that I knew of to handle it (dropping&lt;br/&gt;
&amp;gt; the SPS&apos;s whenever the version changed) is no longer in Derby.  I&lt;br/&gt;
&amp;gt; just haven&apos;t been able to get to researching it yet.&lt;/p&gt;

&lt;p&gt;Why was the dropping of SPSs removed?&lt;/p&gt;

&lt;p&gt;Frankly, I don&apos;t see the value in storing SPSs for metadata calls. Is&lt;br/&gt;
it for performance? If yes, how many applications exist that would&lt;br/&gt;
suffer noticeably from more expensive metadata calls? And if such&lt;br/&gt;
applications exist, wouldn&apos;t it be better to have prepared statements&lt;br/&gt;
whose lifetime didn&apos;t exceed the lifetime of the JVM process? Then the&lt;br/&gt;
queries would be prepared at most once per process, and we wouldn&apos;t&lt;br/&gt;
have the upgrade problem. I&apos;m probably missing something.&lt;/p&gt;

&lt;p&gt;&amp;gt; 5) Is there a general problem with incompatiblity of compiled Stored&lt;br/&gt;
&amp;gt;    Prepared Statements in databases that may have been created with&lt;br/&gt;
&amp;gt;    different JVM versions?&lt;/p&gt;

&lt;p&gt;I don&apos;t think so. Incompatibilities only occur if the SQL text of the&lt;br/&gt;
stored prepared statements change when changing JVM, and that is not&lt;br/&gt;
the case.&lt;/p&gt;

&lt;p&gt;If the SQL text has to change depending on JVM, I think you could&lt;br/&gt;
avoid the problem by giving the queries/SPSs different names.&lt;/p&gt;

&lt;p&gt;&amp;gt; On   the earlier suggestions:&lt;br/&gt;
&amp;gt; Either c or d would be a fatal blow to client/server compatibility,&lt;br/&gt;
&amp;gt; so they have all the appeal of euthanasia for client/server compat.&lt;/p&gt;

&lt;p&gt;Oh, then we &lt;b&gt;certainly&lt;/b&gt; should try to avoid that!&lt;/p&gt;

&lt;p&gt;By the way, how strict is that rule? It seems like the client driver&lt;br/&gt;
already has the queries for these metadata methods hard coded:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getSuperTypes()&lt;/li&gt;
	&lt;li&gt;getSuperTables()&lt;/li&gt;
	&lt;li&gt;getAttributes()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All of these have a corresponding entry in metadata.properties, and&lt;br/&gt;
SPSs which are only used by the embedded driver. However, all of these&lt;br/&gt;
methods return empty result sets.&lt;/p&gt;

&lt;p&gt;I was hoping that I could follow the same pattern for&lt;br/&gt;
getClientInfoProperties() (which also returns an empty result set).&lt;/p&gt;</comment>
                            <comment id="12369894" author="davidvc" created="Sat, 11 Mar 2006 01:43:57 +0000"  >&lt;p&gt;I&apos;ll weigh in on a couple of things:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A lot of the complexity in your solution seems to be dependent on the fact that we can&apos;t require JDK 1.6 to build Derby.  I think that requirement needs to continue to exist until JDK 1.6 goes GA, but are we as a community willing to commit to using JDK 1.6 (assuming we can find a build approach that works) once it&apos;s GA, so we don&apos;t have these kinds of issues come up over and over?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think it makes sense to give new revisions of old metadata stored procs new names&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think it makes a lot of sense to move the new metadata calls into the old metadata class so you don&apos; t have to pick your class at runtime through reflection&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I also agree I don&apos;t see the obvious value making metadata calls stored procedures rather than just prepared statements.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12369895" author="djd" created="Sat, 11 Mar 2006 01:53:43 +0000"  >&lt;p&gt;David Van Couvering wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; but are we as a community willing to commit to using JDK 1.6 &lt;/p&gt;

&lt;p&gt;Not sure what exactly you mean here, require 1.6 to build Derby instead of 1.4?&lt;/p&gt;

&lt;p&gt;You have to remember you cannot regress the ability of someone to build Derby currently,&lt;br/&gt;
questions that arise in my mind are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when will 1.6 be available on mac os,&lt;/li&gt;
	&lt;li&gt;am I forced to use Sun&apos;s JDK to build if no others exist, I happily build &amp;amp; test using IBM&apos;s vms today.&lt;/li&gt;
	&lt;li&gt;if Sun is the only JDK 1.6 vm out there, are it&apos;s licence terms acceptable to most folks, today since&lt;br/&gt;
         the build is 1.4 based, folks have choice.&lt;/li&gt;
	&lt;li&gt;if someone only cares about 1.4/1.5 today, are we forcing them to download 1.6?&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12370029" author="knutanders" created="Sun, 12 Mar 2006 04:33:33 +0000"  >&lt;p&gt;Attaching patch derby-970-part1-v1.diff. This patch makes the JDBC4&lt;br/&gt;
database metadata test (jdbc4/TestDbMetaData.java) also test the&lt;br/&gt;
client driver. Currently, none of the new metadata calls are&lt;br/&gt;
implemented on the client, some of them even throw&lt;br/&gt;
AbstractMethodError. The canon is updated accordingly.&lt;/p&gt;</comment>
                            <comment id="12370031" author="knutanders" created="Sun, 12 Mar 2006 04:43:54 +0000"  >&lt;p&gt;Checked in patch which enables test on client driver in revision&lt;br/&gt;
385157. No actual code changes are committed yet.&lt;/p&gt;</comment>
                            <comment id="12370089" author="knutanders" created="Mon, 13 Mar 2006 03:03:30 +0000"  >&lt;p&gt;Uploaded patch derby-970-part2-v1.diff. The patch is partial and&lt;br/&gt;
implements the non-controversial methods only (at least, I believe&lt;br/&gt;
they are non-controversial).&lt;/p&gt;

&lt;p&gt;This patch implements the following new JDBC 4 DatabaseMetaData&lt;br/&gt;
methods in the client driver:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getRowIdLifetime() - returns RowIdLifetime.ROWID_UNSUPPORTED&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;supportsStoredFunctionsUsingCallSyntax() - returns true&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;autoCommitFailureClosesAllResultSets() - returns false&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;providesQueryObjectGenerator() - returns false&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Canon for jdbc4/TestDbMetaData.java is updated to reflect that the&lt;br/&gt;
methods are implemented on the client.&lt;/p&gt;

&lt;p&gt;New test cases added to TestDbMetaData:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;try to execute a stored procedure using the escape syntax, and see&lt;br/&gt;
    if the success/failure corresponds to the value returned by&lt;br/&gt;
    supportsStoredFunctionsUsingCallSyntax()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;open a holdable result set in auto-commit mode and, on the same&lt;br/&gt;
    connection, execute a query which causes SQLException. Check&lt;br/&gt;
    whether the result set is open or closed, and see if the state&lt;br/&gt;
    corresponds to the value returned by&lt;br/&gt;
    autoCommitFailureClosesAllResultSets()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both derbyall and the jdbc4 suite ran successfully. Please&lt;br/&gt;
review. Thanks.&lt;/p&gt;</comment>
                            <comment id="12370184" author="dyret" created="Mon, 13 Mar 2006 22:06:34 +0000"  >&lt;p&gt;So is the consensus NOT to change any queries in metadata.properties, then? And add new versions of those queries that need to change for JDBC 4.0? &lt;br/&gt;
I need new queries for getProcedures (1093) and getProcedureColumns (1094). If I am going to change the existing queries I need to create new masters for metadata.java and odbc_metadata.java. But with new queries I need to discard changes to those masters, and just update the jdbc4 master.  &lt;/p&gt;</comment>
                            <comment id="12370219" author="kmarsden" created="Tue, 14 Mar 2006 02:51:08 +0000"  >&lt;p&gt;Knut Asked:&lt;br/&gt;
&amp;gt;By the way, how strict is that rule (That metadata queries be handled on the server side and not the client)?  &lt;/p&gt;

&lt;p&gt;The functional requirement is pretty simple.   On upgrade of the  server or client software,  the supported public API&apos;s, such as JDBC,  that worked in  the old  version  should still work  after they plop down the new jar file. There should be no additional intervention required on the part of the user or application developer to get what was working to work once again.  For example they cannot be required to upgrade the software on the other end of the wire or make application changes to get things to work.&lt;/p&gt;

&lt;p&gt;The implementation of this is complex and can get quite messy.  &lt;/p&gt;

&lt;p&gt;For the  metadata queries that means that any query executed by a client needs to work with server versions  past and future.  Putting an empty ResultSet  query in the client might be likely always to work just fine because it uses SQL Syntax that has the same requirement.&lt;/p&gt;

&lt;p&gt;Many  of the metadata queries, however, use internal interfaces and unsupported syntax and refer to system table columns that may have been recently added, so maintaining these on the client would be very difficult.&lt;br/&gt;
For example adding the 10.2 metadata.properties to the 10.2 client and having queries executed that way would break 10.2 client with 10.1 client right away .  To fix with 10.1 we would have to add the 10.1 metadata.properties to the 10.2 client.  We would also need to preserve the internal interfaces on the servers of the future so the old clients would continue to work.&lt;/p&gt;

&lt;p&gt;It seems  easier for these to keep the queries tied to the server and then only the stored procedure names have to stay the same.&lt;/p&gt;

&lt;p&gt;Good references regarding the maintenance of all of this on the Wiki from  more architecturally inclined minds:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/ForwardCompatibility&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ForwardCompatibility&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/SharedComponentVersioningGuidelines#head-021f7965c44f0b0bcb993d3f54922e1b41d53921&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/SharedComponentVersioningGuidelines#head-021f7965c44f0b0bcb993d3f54922e1b41d53921&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12370231" author="kmarsden" created="Tue, 14 Mar 2006 04:08:40 +0000"  >&lt;p&gt;Note: My previous comment had an error. I said:&lt;br/&gt;
&amp;gt;For example adding the 10.2 metadata.properties to the 10.2 client and having queries executed that way would break 10.2 client with 10.1 client right away .&lt;/p&gt;

&lt;p&gt;But should have said:&lt;br/&gt;
&amp;gt;For example adding the 10.2 metadata.properties to the 10.2 client and having queries executed that way would break 10.2 client with 10.1 server  right away.&lt;/p&gt;

&lt;p&gt;I could not see how to delete and repost my comment  to make the correction as I have done in the past..&lt;/p&gt;
</comment>
                            <comment id="12370240" author="davidvc" created="Tue, 14 Mar 2006 05:33:06 +0000"  >&lt;p&gt;To Dyre&apos;s question: I don&apos;t know if there is a consensus, but at least &lt;b&gt;I&lt;/b&gt; support adding new queries instead of modifying old ones.  Just seems safer in terms of maintaining backward compatibility and upgradability...   But I think this may be more of an issue for the network client than the engine, no?&lt;/p&gt;</comment>
                            <comment id="12370324" author="dyret" created="Tue, 14 Mar 2006 16:55:09 +0000"  >&lt;p&gt;Thanks for answering my question, David &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; My only problem now is that 3 committers have expressed 3 different views on this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;David: Make new queries, it is safer!&lt;br/&gt;
Dan:    You should just update the old ones!&lt;br/&gt;
Kathey: Don&apos;t touch anything in metadata.properties!&lt;/p&gt;

&lt;p&gt;So, I&apos;m kinda stuck...&lt;/p&gt;</comment>
                            <comment id="12370361" author="kmarsden" created="Tue, 14 Mar 2006 23:07:47 +0000"  >&lt;p&gt;Dyre said I said&lt;br/&gt;
&amp;gt;Kathey: Don&apos;t touch anything in metadata.properties!&lt;br/&gt;
I don&apos;t think I said that.  What I was trying to say was:&lt;/p&gt;

&lt;p&gt;1) Don&apos;t break anything that works now when you change metadata.properties.&lt;br/&gt;
2) Make sure upgrade/softupgrade and downgrade are tested when you change metdata.properties&lt;br/&gt;
3) Keep metadata.properties on the server.&lt;br/&gt;
4) Be careful in there.  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1107&quot; title=&quot;For existing databases JDBC metadata queries do not get updated properly  between maintenance versions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1107&quot;&gt;&lt;del&gt;DERBY-1107&lt;/del&gt;&lt;/a&gt; creates a mine field which in the past has created bugs which were impossible to fix without solution of the time travel problem.&lt;/p&gt;

&lt;p&gt;As for implementation:&lt;br/&gt;
I think adding additional columns to existing queries is fine and perhaps preferable where possible  because it avoids duplication of queries and should not impact existing applications.&lt;br/&gt;
I think changing the results returned  for existing columns is probably &lt;b&gt;not&lt;/b&gt;  OK.&lt;br/&gt;
I think adding new  queries is fine too if needed.&lt;/p&gt;</comment>
                            <comment id="12370402" author="davidvc" created="Wed, 15 Mar 2006 03:27:27 +0000"  >&lt;p&gt;So, I think Kathey&apos;s answer is the right compromise between mine and Dan&apos;s.  I agree if we &lt;b&gt;can&lt;/b&gt; reuse existing queries without affecting upgrade and compatibility, let&apos;s do so.  I think we need to make sure as part of our tests that upgrade works and we don&apos;t have any compatibility errors when running metadata tests.  I would think running an old client against a new database would be a good thing, as well as upgrading an old database and making sure the new metadata queries work correctly.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12370521" author="dyret" created="Wed, 15 Mar 2006 21:52:25 +0000"  >&lt;p&gt;I have looked at the -part2-v1.diff patch, and I think it looks good. Is it intentional that the &quot;test case&quot; methods. E.g. testAutoCommitFailure(...) just have an ordianary comment, and not proper javadoc? Do we even generate javadoc in in derbyTesting? Anyway, if nobody objects, I think you should go ahead and commit this.&lt;/p&gt;</comment>
                            <comment id="12370657" author="knutanders" created="Thu, 16 Mar 2006 16:57:52 +0000"  >&lt;p&gt;Thanks for looking at the part2 patch, Dyre! I changed two comments in&lt;br/&gt;
the test file to javadoc and committed revision 386290.&lt;/p&gt;</comment>
                            <comment id="12371539" author="knutanders" created="Thu, 23 Mar 2006 18:14:36 +0000"  >&lt;p&gt;Attaching patch derby-970-part3-v1.diff which implements the new JDBC&lt;br/&gt;
4 methods getSchemas(String, String) and getClientInfoProperties() on&lt;br/&gt;
the client driver.&lt;/p&gt;

&lt;p&gt;Description of changes on the embedded side:&lt;/p&gt;

&lt;p&gt;  1) Moved getSchemas(String, String) from EmbedDatabaseMetaData40 to&lt;br/&gt;
     EmbedDatabaseMetaData so that a server running JVM &amp;lt; 1.6 does not&lt;br/&gt;
     fail.&lt;/p&gt;

&lt;p&gt;  2) Extended SystemProcedures.SQLTABLES() (aka SYSIMB.SQLTABLES) to&lt;br/&gt;
     support getSchemas(String, String). It already has support for&lt;br/&gt;
     the zero-parameter getSchemas() by passing an option string&lt;br/&gt;
     &quot;GETSCHEMAS=1&quot;. The new getSchemas() is invoked by passing&lt;br/&gt;
     &quot;GETSCHEMAS=2&quot;.&lt;/p&gt;

&lt;p&gt;Description of changes on the client side:&lt;/p&gt;

&lt;p&gt;  3) New SQLSTATE and error message for the case when a JDBC method is&lt;br/&gt;
     not supported by the server (i.e., when running a new client&lt;br/&gt;
     against an old server). Message text: &quot;JDBC method &lt;/p&gt;
{0}
&lt;p&gt; is not&lt;br/&gt;
     supported by the server. Please upgrade the server.&quot;&lt;/p&gt;

&lt;p&gt;  4) DatabaseMetaData.getClientInfoProperties() returns an empty&lt;br/&gt;
     result set with the correct column names. The query is hard-coded&lt;br/&gt;
     so that an empty result set is returned regardless of server&lt;br/&gt;
     version. (Same pattern is used as in the existing methods&lt;br/&gt;
     getSuperTypes(), getSuperTables() and getAttributes().)&lt;/p&gt;

&lt;p&gt;  5) DatabaseMetaData.getSchemas(String, String) is implemented as a&lt;br/&gt;
     call to SYSIBM.SQLTABLES with the GETSCHEMAS=2 option. Since&lt;br/&gt;
     GETSCHEMAS=2 is not supported by older servers, the JDBC version&lt;br/&gt;
     of the server is checked. If the server does not support JDBC 4,&lt;br/&gt;
     an exception is thrown (without this check, the result of a call&lt;br/&gt;
     to getTables() would have been returned).&lt;/p&gt;

&lt;p&gt;Description of test changes:&lt;/p&gt;

&lt;p&gt;  6) In TestDbMetaData, removed try/catch blocks which were added to&lt;br/&gt;
     make the test continue to run when the methods were not&lt;br/&gt;
     implemented. (The test is still not enabled in DerbyNetClient&lt;br/&gt;
     because getFunctions() and getFunctionParameters() are not&lt;br/&gt;
     implemented yet.)&lt;/p&gt;</comment>
                            <comment id="12371540" author="knutanders" created="Thu, 23 Mar 2006 18:16:45 +0000"  >&lt;p&gt;Patch available. Please review!&lt;/p&gt;</comment>
                            <comment id="12371584" author="kmarsden" created="Fri, 24 Mar 2006 00:44:15 +0000"  >&lt;p&gt;I have not reviewed the patch yet but have a few questions/comments.&lt;/p&gt;

&lt;p&gt;1) What is the soft upgrde impact of this change if any?&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1075&quot; title=&quot;Combine the script and the test available for upgrade testing into a java test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1075&quot;&gt;&lt;del&gt;DERBY-1075&lt;/del&gt;&lt;/a&gt; was checked in last night so you could probably go ahead and add soft upgrade tests for this.&lt;/p&gt;

&lt;p&gt;2) Did you run the derbynetmats suite (JCC) with your change?&lt;/p&gt;

&lt;p&gt;3) I was thinking  to add coverage for specific client/server version code paths, it would be good to add tests to:&lt;br/&gt;
   java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest and run with the original client release and then run with:&lt;br/&gt;
.    original 10.1 client  / trunk server&lt;br/&gt;
    original 10.1 server/ trunk client&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12371723" author="knutanders" created="Fri, 24 Mar 2006 21:11:09 +0000"  >&lt;p&gt;Kathey wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) What is the soft upgrde impact of this change if any?&lt;/p&gt;

&lt;p&gt;There should be no soft upgrade impact of this change.&lt;/p&gt;

&lt;p&gt;getClientInfoProperties() contains a query that always returns an&lt;br/&gt;
empty result set, so you can upgrade and downgrade as much as you&lt;br/&gt;
want, both softly and hard, and still see the same result.&lt;/p&gt;

&lt;p&gt;getSchemas() uses an existing system procedure (SQLTABLES) which is&lt;br/&gt;
available in soft upgrade mode. The system procedure is slightly&lt;br/&gt;
modified, but it&apos;s interface is unchanged, so I can&apos;t see how it&lt;br/&gt;
should be affected by soft upgrade.&lt;/p&gt;

&lt;p&gt;And since both the methods are new in JDBC 4, old clients won&apos;t notice&lt;br/&gt;
any change.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1075&quot; title=&quot;Combine the script and the test available for upgrade testing into a java test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1075&quot;&gt;&lt;del&gt;DERBY-1075&lt;/del&gt;&lt;/a&gt; was checked in last night so you could probably go ahead&lt;br/&gt;
&amp;gt; and add soft upgrade tests for this.&lt;/p&gt;

&lt;p&gt;It doesn&apos;t seem like the upgrade test is quite ready, yet. At least, I&lt;br/&gt;
get a &lt;b&gt;huge&lt;/b&gt; diff when I try to run it. I&apos;m also not sure it&apos;s easy to&lt;br/&gt;
add tests for new JDBC 4 methods (that is, without heavy use of&lt;br/&gt;
reflection).&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) Did you run the derbynetmats suite (JCC) with your change?&lt;/p&gt;

&lt;p&gt;Yes. No failures.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3) I was thinking to add coverage for specific client/server version&lt;br/&gt;
&amp;gt;    code paths, it would be good to add tests to:&lt;br/&gt;
&amp;gt;  java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest&lt;br/&gt;
&amp;gt;   and run with the original client release and then run with:&lt;br/&gt;
&amp;gt; . original 10.1 client / trunk server&lt;br/&gt;
&amp;gt;    original 10.1 server/ trunk client&lt;/p&gt;

&lt;p&gt;Again, I don&apos;t think it&apos;s trivial to add tests for new JDBC 4 methods&lt;br/&gt;
to that test. I also don&apos;t thinks these methods are very interesting&lt;br/&gt;
to have in a compatibility test. getClientInfoProperties() just&lt;br/&gt;
returns an empty result set, getSchemas() is supposed to fail with an&lt;br/&gt;
old server, and old clients don&apos;t even have the methods, so there&lt;br/&gt;
isn&apos;t much compatibility to test.&lt;/p&gt;</comment>
                            <comment id="12371737" author="kmarsden" created="Fri, 24 Mar 2006 22:26:12 +0000"  >&lt;p&gt;Thanks Knut for the clarification.  Metadata  seems such a delicate area right now and as you say the tests  are behind the feature devopment.  I get a little wary  of all the changes happening in this area, given the testing situation and the outstanding bugs.  I  think maybe we should hold off on metadata checkins until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-514&quot; title=&quot;Integrate upgrade tests into test suite&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-514&quot;&gt;&lt;del&gt;DERBY-514&lt;/del&gt;&lt;/a&gt; is complete and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1120&quot; title=&quot;DatabaseMetaData.getColumnPrivileges fails in soft upgrade mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1120&quot;&gt;&lt;del&gt;DERBY-1120&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1124&quot; title=&quot;DatabaseMetaData.getTablePrivileges fails in soft upgrade mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1124&quot;&gt;&lt;del&gt;DERBY-1124&lt;/del&gt;&lt;/a&gt; are resolved.   Also a clear  strategy on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1107&quot; title=&quot;For existing databases JDBC metadata queries do not get updated properly  between maintenance versions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1107&quot;&gt;&lt;del&gt;DERBY-1107&lt;/del&gt;&lt;/a&gt;  would be good as well, but not required.   I know these are not your issues but I think it would be a good cautionary measure to get these core testing issues and bugs resolved  with metadata resolved before checkin in more metadata enhancements.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

</comment>
                            <comment id="12371834" author="knutanders" created="Sat, 25 Mar 2006 15:36:37 +0000"  >&lt;p&gt;Thanks for your comments, Kathey. I have no problems with waiting for those issues to be completed.&lt;/p&gt;</comment>
                            <comment id="12371977" author="dyret" created="Mon, 27 Mar 2006 23:59:55 +0100"  >&lt;p&gt;I have looked at the part3 patch, and I think it looks good. +1 to commit. Should all new jdbc4 *X methods now call checkJdbcVersionX() as you have done in getSchemasX()? &lt;/p&gt;</comment>
                            <comment id="12371984" author="knutanders" created="Tue, 28 Mar 2006 00:34:59 +0100"  >&lt;p&gt;Thanks Dyre, but I have promised that I won&apos;t commit the patch yet.&lt;/p&gt;

&lt;p&gt;To your question about checkJdbcVersionX(): I think all new JDBC 4&lt;br/&gt;
metadata calls that require support by the server should call&lt;br/&gt;
checkJdbcVersionX(). I don&apos;t see any value in calling it for methods&lt;br/&gt;
that return constants (like autoCommitFailureClosesAllResultSets()) or&lt;br/&gt;
empty result sets (like getClientInfoProperties()).&lt;/p&gt;

&lt;p&gt;I think getFunctions() and getFunctionParameters(), which I have seen&lt;br/&gt;
you working on, should call this method.&lt;/p&gt;</comment>
                            <comment id="12373627" author="knutanders" created="Fri, 7 Apr 2006 21:23:15 +0100"  >&lt;p&gt;The part 3 patch has conflicts with the current trunk. Removing &quot;patch available&quot; until a new patch is uploaded.&lt;/p&gt;</comment>
                            <comment id="12373976" author="dyret" created="Tue, 11 Apr 2006 16:58:26 +0100"  >&lt;p&gt;I&apos;m attaching a new patch (check_server_version) for the part of this patch that checks the server version. &lt;br/&gt;
Derbyall passes, but there is no test case for this method (it is protected), but it will be used by the rest of 970, 924, 925.&lt;/p&gt;</comment>
                            <comment id="12373985" author="knutanders" created="Tue, 11 Apr 2006 17:55:28 +0100"  >&lt;p&gt;Modified the check_server_version patch slightly. Added the new message id to splitmessages.java so that the message is copied into the client.&lt;/p&gt;</comment>
                            <comment id="12373988" author="knutanders" created="Tue, 11 Apr 2006 18:12:37 +0100"  >&lt;p&gt;Committed check_server_version-v2.diff in revision 393164.&lt;/p&gt;</comment>
                            <comment id="12374819" author="knutanders" created="Tue, 18 Apr 2006 05:54:25 +0100"  >&lt;p&gt;Uploading a new version of the part3 patch. Tests for getSchemas() and&lt;br/&gt;
getClientInfoProperties() have been added to jdbcapi/metadata.java,&lt;br/&gt;
and metadata.out and Upgrade_10_1_10_2.out have been updated for all&lt;br/&gt;
frameworks/jdks.&lt;/p&gt;

&lt;p&gt;The only implementation change from the previous patch is that the&lt;br/&gt;
embedded implementation of getClientInfoProperties() is moved from&lt;br/&gt;
EmbedDatabaseMetaData40 to EmbedDatabaseMetaData so that it can be&lt;br/&gt;
tested in the metadata test on JVM&amp;lt;1.6.&lt;/p&gt;

&lt;p&gt;Derbyall and the upgrade test ran cleanly on Sun JVM 1.5, Solaris 10&lt;br/&gt;
x86. The jdbc40 suite ran cleanly on JVM 1.6 beta2-b79. The metadata&lt;br/&gt;
test ran cleanly on all combinations of Sun JVM 1.6/1.4/1.3 and&lt;br/&gt;
embedded/DerbyNet/DerbyNetClient.&lt;/p&gt;</comment>
                            <comment id="12375329" author="dyret" created="Thu, 20 Apr 2006 18:42:38 +0100"  >&lt;p&gt;I have looked at the part3-v2 patch and I think it looks good. Even better than the first which was also good ... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; IMHO, it is ready to be committed.&lt;/p&gt;</comment>
                            <comment id="12375336" author="knutanders" created="Thu, 20 Apr 2006 19:21:53 +0100"  >&lt;p&gt;Thanks for the review, Dyre!&lt;/p&gt;

&lt;p&gt;Committed revision 395561.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12325180" name="check_server_version-v2.diff" size="4253" author="knutanders" created="Tue, 11 Apr 2006 17:55:28 +0100"/>
                            <attachment id="12325181" name="check_server_version-v2.stat" size="264" author="knutanders" created="Tue, 11 Apr 2006 17:55:28 +0100"/>
                            <attachment id="12325176" name="check_server_version.diff" size="3478" author="dyret" created="Tue, 11 Apr 2006 16:58:25 +0100"/>
                            <attachment id="12325177" name="check_server_version.stat" size="349" author="dyret" created="Tue, 11 Apr 2006 16:58:26 +0100"/>
                            <attachment id="12325178" name="check_server_version_report.txt" size="3952" author="dyret" created="Tue, 11 Apr 2006 16:58:26 +0100"/>
                            <attachment id="12324058" name="derby-970-part1-v1.diff" size="11329" author="knutanders" created="Sun, 12 Mar 2006 04:33:33 +0000"/>
                            <attachment id="12324059" name="derby-970-part1-v1.stat" size="174" author="knutanders" created="Sun, 12 Mar 2006 04:33:33 +0000"/>
                            <attachment id="12324071" name="derby-970-part2-v1.diff" size="12355" author="knutanders" created="Mon, 13 Mar 2006 03:03:29 +0000"/>
                            <attachment id="12324072" name="derby-970-part2-v1.stat" size="316" author="knutanders" created="Mon, 13 Mar 2006 03:03:30 +0000"/>
                            <attachment id="12324480" name="derby-970-part3-v1.diff" size="17092" author="knutanders" created="Thu, 23 Mar 2006 18:14:33 +0000"/>
                            <attachment id="12324481" name="derby-970-part3-v1.stat" size="589" author="knutanders" created="Thu, 23 Mar 2006 18:14:36 +0000"/>
                            <attachment id="12325458" name="derby-970-part3-v2.diff" size="30673" author="knutanders" created="Tue, 18 Apr 2006 05:54:25 +0100"/>
                            <attachment id="12325459" name="derby-970-part3-v2.stat" size="1075" author="knutanders" created="Tue, 18 Apr 2006 05:54:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Mar 2006 23:44:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29809</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy165j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40647</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>