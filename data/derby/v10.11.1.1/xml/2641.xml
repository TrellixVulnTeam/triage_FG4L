<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2641/DERBY-2641.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2641] Convert lang/staleplans.sql to JUnit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2641</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description></description>
                <environment></environment>
        <key id="12369233">DERBY-2641</key>
            <summary>Convert lang/staleplans.sql to JUnit</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 14 May 2007 10:12:42 +0100</created>
                <updated>Mon, 18 Jun 2007 15:45:51 +0100</updated>
                            <resolved>Wed, 16 May 2007 07:06:00 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12495994" author="knutanders" created="Tue, 15 May 2007 15:11:27 +0100"  >&lt;p&gt;The attached patch adds a JUnit test (StalePlansTest) which tests the same things as lang/staleplans.sql. The patch does not remove the old test.&lt;/p&gt;

&lt;p&gt;One thing that puzzled me with the original test, was that three of the calls to SYSCS_GETRUNTIMESTATISTICS() had comments which said they expected table scans, but the query plans in the master file showed that index scans were used. For now, I left the comments which said we expected table scans and added a note saying that we actually get index scans.&lt;/p&gt;

&lt;p&gt;For those interested, we get the unexpected query plans on the first, second and fourth call to SYSCS_GETRUNTIMESTATISTICS() in the old staleplans.sql test. In the new JUnit test, all the queries with unexpected query plans are found in testStalePlansOnSmallTable(). I would say it is reasonable to expect a table scan in these cases since the table only contains one row, but I don&apos;t know enough about this area to say whether it&apos;s a bug. If someone thinks it&apos;s a bug, I will file a JIRA for it.&lt;/p&gt;</comment>
                            <comment id="12496049" author="army" created="Tue, 15 May 2007 17:43:25 +0100"  >&lt;p&gt;&amp;gt; I would say it is reasonable to expect a table scan in these cases since the table only contains one row, but&lt;br/&gt;
&amp;gt; I don&apos;t know enough about this area to say whether it&apos;s a bug. If someone thinks it&apos;s a bug, I will file a JIRA&lt;br/&gt;
&amp;gt; for it.&lt;/p&gt;

&lt;p&gt;I took a quick look at this and noticed the following comment in the &quot;estimateCost(...)&quot; method of FromBaseTable:&lt;/p&gt;

&lt;p&gt;    /* we prefer index than table scan for concurrency reason, by a small&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;adjustment on estimated row count.  This affects optimizer&apos;s decision&lt;/li&gt;
	&lt;li&gt;especially when few rows are in table. beetle 5006. This makes sense&lt;/li&gt;
	&lt;li&gt;since the plan may stay long before we actually check and invalidate it.&lt;/li&gt;
	&lt;li&gt;And new rows may be inserted before we check and invalidate the plan.&lt;/li&gt;
	&lt;li&gt;Here we only prefer index that has start/stop key from predicates. Non-&lt;/li&gt;
	&lt;li&gt;constant start/stop key case is taken care of by selectivity later.&lt;br/&gt;
     */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think this why the optimizer is choosing an index scan.  It seems intentional, so my guess is that this is &lt;b&gt;not&lt;/b&gt; a bug.  Probably the case that the comments in statelplans.sql were not updated when the above comment (and associated code) was added...?&lt;/p&gt;</comment>
                            <comment id="12496065" author="knutanders" created="Tue, 15 May 2007 18:45:34 +0100"  >&lt;p&gt;Thanks for investigating this, Army! It&apos;s amazing how you could dig up that comment from the middle of a method that spans 1000 lines! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I will update the comments in the test to make it clear that the index scans are intended.&lt;/p&gt;</comment>
                            <comment id="12496069" author="army" created="Tue, 15 May 2007 18:55:37 +0100"  >&lt;p&gt;&amp;gt; I will update the comments in the test to make it clear that the index scans are intended.&lt;/p&gt;

&lt;p&gt;Next question then would be: is the test still testing what it&apos;s trying test?  I.e. if it uses an index scan with 1 row and it uses an index scan with 10 rows (I think that&apos;s what it&apos;s doing), then will we be able to see the changed (or not changed) plans as the test expects?  I haven&apos;t looked in detail, it&apos;s just something that occurred to me while scanning the old .sql script...&lt;/p&gt;</comment>
                            <comment id="12496077" author="knutanders" created="Tue, 15 May 2007 19:27:08 +0100"  >&lt;p&gt;&amp;gt; Next question then would be: is the test still testing what it&apos;s trying test?&lt;/p&gt;

&lt;p&gt;No, the first part of the test (testStalePlansOnSmallTable() in the JUnit test) does not change the plans. The second part (testStalePlansOnLargeTable()) does however change plans exactly as described in the comments, so I think we are covered there. I don&apos;t have any good ideas for how to make the small table test change plans (other than increasing the size of the table, which makes the test more or less identical to the large table test). Do you have any ideas? We could of course leave the test as it is and explain in the comments that the first test case no longer tests stale plans.&lt;/p&gt;</comment>
                            <comment id="12496089" author="army" created="Tue, 15 May 2007 20:01:22 +0100"  >&lt;p&gt;&amp;gt; Do you have any ideas?&lt;/p&gt;

&lt;p&gt;Nothing comes to mind, no.  The easiest way to change a plan is via DDL (ex. add/drop an index), but I think those will invalidate a plan, which would defeat the purpose of the stale plans test.&lt;/p&gt;

&lt;p&gt;&amp;gt; We could of course leave the test as it is and explain in the comments that the first test case no&lt;br/&gt;
&amp;gt; longer tests stale plans.&lt;/p&gt;

&lt;p&gt;Given that the goal of this issue is to &quot;convert&quot; the test and not necessarily to &quot;fix&quot; it, I think this is fine.  If further work is required to make the first part of the test more meaningful, that could easily be a separate Jira...&lt;/p&gt;</comment>
                            <comment id="12496126" author="mikem" created="Tue, 15 May 2007 21:52:00 +0100"  >&lt;p&gt;The intent in derby is definitely to try to pick index scan over table scan for tables with small numbers of rows - EVEN if the performance might be better doing the table scan.  The actual use problems were:&lt;br/&gt;
1) when you pick heap vs. index scan depending on isolation level often one had to set a TABLE lock rather then individual row locks,&lt;br/&gt;
     this is a particular problem with serializable isolation.&lt;br/&gt;
2) more subtle is that if the index scan eliminates rows then we lock less rows than the heap case where minimally we will row lock&lt;br/&gt;
     every row of the heap, this is especially problem with repeatable read and serializable.&lt;br/&gt;
Especially in case where derby needed to pick table locking to do correct isolation level customers were seeing applications fail&lt;br/&gt;
on derby which would run otherwise unchanged.  Also this behavior met what most customers expected.  They created an index,&lt;br/&gt;
the query used the index.  &lt;/p&gt;

&lt;p&gt;This is a case where we choose to weigh concurrency over execution cost in the cost based optimizer.  The hope is:&lt;br/&gt;
1) usually small number of row table performance does not matter.&lt;br/&gt;
2) often the small number of rows is actually growing but we happen to compile at app startup.&lt;/p&gt;</comment>
                            <comment id="12496198" author="knutanders" created="Wed, 16 May 2007 06:52:58 +0100"  >&lt;p&gt;Thanks Army and Mike for explaining this. I updated the comments and committed revision 538441.&lt;/p&gt;</comment>
                            <comment id="12496201" author="knutanders" created="Wed, 16 May 2007 07:06:00 +0100"  >&lt;p&gt;Removed the old test (revision 538444).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12357384" name="derby-2641-1.diff" size="14188" author="knutanders" created="Tue, 15 May 2007 15:11:27 +0100"/>
                            <attachment id="12357385" name="derby-2641-1.stat" size="249" author="knutanders" created="Tue, 15 May 2007 15:11:27 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 May 2007 16:43:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30551</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11pr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39928</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>