<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:56 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-668/DERBY-668.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-668] SysInfo does not print the right information when Derby is not loaded through the classpath.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-668</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;There is a section in the SysInfo tool&apos;s output titled &quot;Derby Information&quot;, which prints location and version information for the major Derby jars. Here is an example of that output:&lt;/p&gt;

&lt;p&gt;--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derby.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbytools.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbynet.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbyclient.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/downloads/derby/db2jcc/lib/db2jcc.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/downloads/derby/db2jcc/lib/db2jcc_license_c.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;/p&gt;

&lt;p&gt;Unfortunately, this tool can be fooled if you arrange for one of these jar files to be loaded from a magic location like $JAVA_HOME/jre/lib/ext.&lt;/p&gt;

&lt;p&gt;For example, I had (accidentally) placed an old version of db2jcc.jar into $JAVA_HOME/jre/lib/ext. When I ran SysInfo, it printed out: &lt;/p&gt;

&lt;p&gt;--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derby.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbytools.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbynet.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/src/derby-subversion/trunk/jars/insane/derbyclient.jar&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (315052M)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/downloads/derby/db2jcc/lib/db2jcc.jar&amp;#93;&lt;/span&gt; 1.0 - (581)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/home/bpendleton/downloads/derby/db2jcc/lib/db2jcc_license_c.jar&amp;#93;&lt;/span&gt; 1.0 - (581)&lt;/p&gt;

&lt;p&gt;However, the &quot;1.0 (581)&quot; information actually came from $JAVA_HOME/jre/lib/ext/db2jcc.jar, NOT from&lt;br/&gt;
/home/bpendleton/downloads/derby/db2jcc/lib/db2jcc.jar.&lt;/p&gt;

&lt;p&gt;It would be nice if SysInfo could detect the difference between a jar file being loaded via the application class loader using $CLASSPATH, and a jar file being loaded via the system class loader using JDK library extensions.&lt;/p&gt;

&lt;p&gt;To reproduce the problem, simply:&lt;br/&gt;
1) Place an older version of db2jcc.jar into $JAVA_HOME/jre/lib/ext&lt;br/&gt;
2) Place a newer version of db2jcc.jar into your $CLASSPATH&lt;br/&gt;
3) Run SysInfo. You will see that it prints the name of the jarfile from $CLASSPATH, but the version info from the JDK copy.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325220">DERBY-668</key>
            <summary>SysInfo does not print the right information when Derby is not loaded through the classpath.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="bryanpendleton">Bryan Pendleton</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Nov 2005 07:16:06 +0000</created>
                <updated>Wed, 9 Aug 2006 07:41:43 +0100</updated>
                            <resolved>Wed, 22 Mar 2006 02:39:37 +0000</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Build tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12356832" author="bryanpendleton" created="Sat, 5 Nov 2005 08:43:25 +0000"  >&lt;p&gt;I think that JavaWorld tip 105 can be used here: &lt;a href=&quot;http://www.javaworld.com/javaworld/javatips/jw-javatip105.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.javaworld.com/javaworld/javatips/jw-javatip105.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In particular, I think that the following code, if inserted at the right place, enables the sysinfo utility to do a better job of printing out &lt;b&gt;exactly&lt;/b&gt; the location where the DB2 JDBC driver was loaded from:&lt;/p&gt;

&lt;p&gt;  this.getClass().getResource(&quot;/com/ibm/db2/jcc/DB2Driver.class&quot;).getFile()&lt;/p&gt;

&lt;p&gt;When I compile and run this code in a standalone Java program, experimenting with various combinations of db2jcc.jar in the classpath versus db2jcc.jar in $JAVA_HOME/jre/lib/ext, the code appears to reliably figure out the actual location from which DB2Driver.class is found.&lt;/p&gt;

&lt;p&gt;So I think it should be possible to use this code in derby/impl/tools/sysinfo/Main.java to print a better message about the location from which various classes are loaded.&lt;/p&gt;

&lt;p&gt;However, I&apos;m getting a little lost trying to figure out sysinfo/Main.java and sysinfo/ZipInfoProperties.java. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It seems to me like the current SysInfo program basically takes the approach of parsing the CLASSPATH variable and printing out information about the things it finds there.&lt;/p&gt;

&lt;p&gt;That algorithm works well, except that it is defeated by &quot;magic&quot; locations like $JAVA_HOME/jre/lib/ext.&lt;/p&gt;

&lt;p&gt;Therefore, it seems like SysInfo needs to be enhanced to use an additional algorithm like the one I propose above, which is to ask the classloader itself for a file-scheme URL to the actual location of the critical class files, and then to print that information out.&lt;/p&gt;

&lt;p&gt;Anyway, that&apos;s as far as I got today, and I wanted to record that investigation so I wouldn&apos;t lose it.&lt;/p&gt;</comment>
                            <comment id="12356896" author="bryanpendleton" created="Mon, 7 Nov 2005 03:35:48 +0000"  >&lt;p&gt;Here is a fix. The fix uses two techniques to detect the case where the DB2Driver class did not come from the expected jar file in the classpath, but rather was loaded from some location (e.g., JAVA_HOME/jre/lib/ext):&lt;/p&gt;

&lt;p&gt;1) Using the JavaWorld Tip 105 technique, we ask the DB2Driver classfile itself for the location from which it was loaded, and we print that location, rather than just assuming that the class was loaded from the db2jcc.jar in the application class path.&lt;br/&gt;
2) If the DB2Driver class has a different class loader than the sysinfo Main class&apos;s class loader, we print a warning.&lt;/p&gt;

&lt;p&gt;To see the effects of this patch, you can run the following experiment:&lt;br/&gt;
a) First, run sysinfo with db2jcc.jar in your classpath as normal.&lt;br/&gt;
b) Second, copy db2jcc.jar into JAVA_HOME/jre/lib/ext and re-run sysinfo with the same classpath. Note that it detects where DB2Driver was &lt;b&gt;really&lt;/b&gt; loaded from, and displays that information.&lt;/p&gt;</comment>
                            <comment id="12358353" author="kmarsden" created="Wed, 23 Nov 2005 21:48:04 +0000"  >
&lt;p&gt;Hi Brian. &lt;/p&gt;

&lt;p&gt;I&apos;d like to clarify the scope of what you are trying to do with this patch.  Is it only to  correctly  report the location of db2jcc.jar if it is both in the classpath and loaded by a different classloader or should it cover &lt;br/&gt;
1) other jars such as derby.jar derbyclient.jar etc..?&lt;br/&gt;
2) The case where there is no jar in the classpath at all, but only loaded by a classloader?&lt;/p&gt;

&lt;p&gt;It seems that if the jar is loaded by the classloader but is not in the classpath it would not report at all, but that perhaps is not the problem you are trying to solve.&lt;/p&gt;


&lt;p&gt;On the patch I think the System.out can be removed.  Probably just the odd location reporting would be good enough.  &lt;/p&gt;

&lt;p&gt;I did not  quite understand  this condition&quot;&lt;br/&gt;
if (loc &lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (&amp;quot;) &amp;amp;&amp;amp; loc.indexOf(&amp;quot;) not found.&lt;/span&gt;&quot;) &amp;gt; 0)&lt;br/&gt;
What does the occurance of ! mean?&lt;/p&gt;

&lt;p&gt;Thanks for looking at this issue.  Having sysinfo properly report jar locations when  jars are not loaded from the classpath is really important.  &lt;/p&gt;


&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12358394" author="bryanpendleton" created="Thu, 24 Nov 2005 02:53:25 +0000"  >&lt;p&gt;Hi Kathey, thanks for the feedback.&lt;/p&gt;

&lt;p&gt;I think we can make sysinfo do a variety of things; I was treading cautiously because I&apos;m unsure of the requirements.&lt;/p&gt;

&lt;p&gt;The current implementation in the reportCloudscape() and getAllInfo() methods is basically a &quot;for each entry in the classpath, print some info about it&quot;, and so I was trying to fit into that implementation without perturbing it very much. Therefore, as you noticed, my change only affects the case where db2jcc.jar is in the classpath but the DB2Driver class turns out to get loaded from some other location. The code that I altered is triggered by finding db2jcc.jar in the classpath.&lt;/p&gt;

&lt;p&gt;It would be possible to write an alternate implementation, such as the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Construct a list of &quot;sentinel&quot; classes, and the jar files that we expect such classes to be loaded from&lt;/li&gt;
	&lt;li&gt;For each sentinel class, load it, then look to see from which jar it was loaded.&lt;/li&gt;
	&lt;li&gt;Print the information about the jar, and decorate that message in a special way if the class was not loaded from the expected jar.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It sort of seems like that is the intent of the useMe() and tryAllClasspaths() methods, which appear to be run only if you pass the &quot;-cp&quot; argument to sysinfo (&lt;a href=&quot;http://db.apache.org/derby/docs/10.1/tools/ctoolssysinfo1002931.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.1/tools/ctoolssysinfo1002931.html&lt;/a&gt;), which I admit I had overlooked.&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look at this part of sysinfo, and investigate how I could improve it, as well.&lt;/p&gt;</comment>
                            <comment id="12358397" author="bryanpendleton" created="Thu, 24 Nov 2005 02:58:05 +0000"  >&lt;p&gt;The business about if (loc &lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (&amp;quot;) &amp;amp;&amp;amp; loc.indexOf(&amp;quot;) not found.&lt;/span&gt;&quot;) &amp;gt; 0)  is as follows:  when we call getResource(x.y.class).getFile(), the string that we get back looks something like:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;file://path/to/the/jar!x.y.class&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://path/to/the/jar!x.y.class&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so I&apos;m just checking for a string of that format and sucking the file name out of it.&lt;/p&gt;

&lt;p&gt;I&apos;ll add a comment to make that more clear.&lt;/p&gt;</comment>
                            <comment id="12358427" author="bryanpendleton" created="Thu, 24 Nov 2005 07:31:13 +0000"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;I re-worked my patch based on your comments, and I think it is more useful now. I abstracted the code out into a subroutine so that it could be shared, added some comments, and, most importantly, used the code in the &quot;sysinfo -cp&quot; code path, where it actually makes a lot more sense and is more useful.&lt;/p&gt;

&lt;p&gt;The net effect of this patch is:&lt;br/&gt;
1) If you run &quot;sysinfo -cp&quot; (and any of its variants), sysinfo now reports the actual location where the class was loaded from, in addition to telling you whether or not it loaded the class successfully.&lt;br/&gt;
2) If you run just &quot;sysinfo&quot;, when it is processing the db2jcc.jar file in your classpath, it now reports the actual location where the DB2Driver class was loaded from, which may not be the db2jcc.jar file in your classpath (if you&apos;ve placed db2jcc.jar somewhere else).&lt;/p&gt;

&lt;p&gt;Please have a look at this new patch when you get a chance and tell me what you think.&lt;/p&gt;</comment>
                            <comment id="12358867" author="kmarsden" created="Wed, 30 Nov 2005 12:36:35 +0000"  >&lt;p&gt;I was thinking I would go ahead and commit this patch since I know it has been sitting for a while, but I ran sysinfo quickly with the patch and even though I have both db2jcc.jar and db2jcc_license_c.jar  in my classpath, sysinfo shows me two db2jcc.jars and no db2jcc_license_c.jar&lt;/p&gt;

&lt;p&gt;With the patch:&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;D:\p4\marsden_patch\classes&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (1)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/D:/p4/marsden_patch/drda/jcc/2.4/db2jcc.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/D:/p4/marsden_patch/drda/jcc/2.4/db2jcc.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Without the patch:&lt;/p&gt;

&lt;p&gt;--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;D:\p4\marsden_patch\classes&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (1)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;D:\p4\marsden_patch\drda\jcc\2.4\db2jcc.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;D:\p4\marsden_patch\drda\jcc\2.4\db2jcc_license_c.jar&amp;#93;&lt;/span&gt; 2.4 - (17)&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;

</comment>
                            <comment id="12358869" author="bryanpendleton" created="Wed, 30 Nov 2005 12:58:53 +0000"  >&lt;p&gt;That&apos;s an interesting point. I think that the line in question was rather misleading, though:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;/D:/p4/marsden_patch/drda/jcc/2.4/db2jcc.jar&amp;#93;&lt;/span&gt; 2.4 - (17) &lt;/p&gt;

&lt;p&gt;The &quot;2.4 - (17)&quot; in this line is printing the results of calling DB2Driver.getMajorVersion() (2),&lt;br/&gt;
DB2Driver.getMinorVersion (4), and DB2Driver.getJCCBuildNumber() (17).&lt;/p&gt;

&lt;p&gt;But, we&apos;re calling these methods on the DB2Driver which is in db2jcc.jar! That is, from&lt;br/&gt;
what I can tell, sysinfo is claiming to report that db2jcc_license_c.jar is version 2.4,&lt;br/&gt;
build 17, but it&apos;s not actually using any information from db2jcc_license_c.jar to derive&lt;br/&gt;
that information.&lt;/p&gt;

&lt;p&gt;I don&apos;t know that db2jcc_license_c.jar even has a concept of a version number.&lt;br/&gt;
From what I can see, it has only a MANIFEST, and a single file, namely &lt;br/&gt;
com.ibm.db2.jcc.licenses.DB2J.&lt;/p&gt;

&lt;p&gt;Is there any documentation available on the DB2J class?&lt;/p&gt;

&lt;p&gt;It would be easy to alter the proposed patch so that sysinfo reverts back to its&lt;br/&gt;
current behavior (that is: print the filename of the db2jcc_license_j jar file, and&lt;br/&gt;
the version information from the DB2Driver which is in the classpath); my question&lt;br/&gt;
is: is that really a useful behavior, or is there something more useful that we&lt;br/&gt;
could print about the db2jcc_license_c.jar file specifically?&lt;/p&gt;</comment>
                            <comment id="12358873" author="kmarsden" created="Wed, 30 Nov 2005 13:33:13 +0000"  >&lt;p&gt;There is no special version information for the license file or documentation for the DB2J class. It has never really changed from release to release so version information is not really relevant.    It is very important that it be listed in sysinfo because I would say its absence is the #1 reported reason JCC doesn&apos;t work.  It&apos;s mere existance seems to be the key.&lt;/p&gt;

&lt;p&gt;As long as it prints the filename it is fine  for it to print the DB2Driver version or even no version at IMO&lt;/p&gt;</comment>
                            <comment id="12358973" author="bryanpendleton" created="Thu, 1 Dec 2005 07:18:04 +0000"  >&lt;p&gt;Hi Kathey, please consider this most recent patch. I&apos;ve reverted the handling of db2jcc_license_c.jar back to the pre-patch behavior, to wit: if we find db2jcc_license_c.jar in the classpath, and if we are also able to load some version of the DB2Driver class or the DB2Version class, then we display the db2jcc_license_c.jar file that we found in the classpath, and we also display the version number information that we fetched from DB2Driver/DB2Version.&lt;/p&gt;

&lt;p&gt;Here&apos;s a bunch of the various tests I ran; in all the cases, I think that the output of the new SysInfo is correct, but I&apos;d like you to confirm my results, please &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;1, 2) java -cp derby.jar:derbytools.jar sysinfo &lt;span class=&quot;error&quot;&gt;&amp;#91;-cp&amp;#93;&lt;/span&gt;&lt;br/&gt;
3, 4) java -cp derby.jar:derbytools.jar:db2jcc.jar sysinfo &lt;span class=&quot;error&quot;&gt;&amp;#91;-cp&amp;#93;&lt;/span&gt;&lt;br/&gt;
5, 6) java -cp derby.jar:derbytools.jar:db2jcc.jar:db2_license_c.jar sysinfo &lt;span class=&quot;error&quot;&gt;&amp;#91;-cp&amp;#93;&lt;/span&gt;&lt;br/&gt;
7, 8) java -cp derby.jar:derbytools.jar:db2_license_c.jar sysinfo &lt;span class=&quot;error&quot;&gt;&amp;#91;-cp&amp;#93;&lt;/span&gt;&lt;br/&gt;
9, 10) (with db2jcc.jar in $JAVA_HOME/jre/lib/ext), java -cp derby.jar:derbytools.jar:db2_license_c.jar sysinfo &lt;span class=&quot;error&quot;&gt;&amp;#91;-cp&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Cases (7) and (8) are particularly interesting. Both the current sysinfo, and the one with my patch, print no information about db2jcc_license_c.jar if we cannot load any version of the DB2Driver or DB2Version classes. I think this is reasonable, but I&apos;d like to hear your opinion on this.&lt;/p&gt;

&lt;p&gt;An alternate implementation would be, as you suggested in your comment, to print a line for db2jcc_license_c.jar in this case, but don&apos;t print any version information. I guess I don&apos;t know how important this is. In your comment, you noted that the primary user mistake was to have db2jcc.jar, but not db2jcc_license_c.jar, rather than vice-versa, so I don&apos;t know if it&apos;s worth adding a bunch more code to try to do something useful about the case where we have db2jcc_license_c.jar in the classpath, but NOT db2jcc.jar. Please tell me what you think.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12358985" author="fuzzylogic" created="Thu, 1 Dec 2005 09:57:07 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;I took a look at version 3 of your patch. It looks good, just a couple comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;On Windows you get a leading slash before the drive spec (i.e. /C:/mydir/jars/...).  Might be worth fixing, but it is just a &apos;polish&apos; issue.&lt;/li&gt;
	&lt;li&gt;In test case 9 above, db2jcc_license_c.jar shows up in the output, but db2jcc.jar does not. It does appear as found in testcase 10. This behavior is the same as the current sysinfo. It would be nice if this were fixed, but this could be treated as a separate issue.&lt;/li&gt;
	&lt;li&gt;My opinion is that it would be nice to have db2jcc_license_c.jar appear in the output if db2jcc.jar is not present. That can also be fixed as a separate issue, though.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also stumbled across some really bizarre behavior (already present - not introduced by your patch), if you put derby.jar or one of the other product jars into the extensions directory, while there are others on the classpath. To see what I mean, try putting just derbynet.jar in the extensions, or putting derby.jar into the extensions dir while you have another on your classpath.&lt;/p&gt;</comment>
                            <comment id="12359011" author="bryanpendleton" created="Thu, 1 Dec 2005 15:13:41 +0000"  >&lt;p&gt;Hi Andrew, Thanks for reviewing my changes.&lt;/p&gt;

&lt;p&gt;Your point about the Windows file syntax is a really good one, and I think it&apos;s worth fixing. Unfortunately, the best thing I&apos;ve been able to think of so far is the rather crude:&lt;/p&gt;

&lt;p&gt;  // On Windows, file: scheme URLs look like &lt;a href=&quot;file:/c:/derby/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/c:/derby/&lt;/a&gt;..., so strip that leading slash, too:&lt;br/&gt;
  if (loc.length() &amp;gt; 3 &amp;amp;&amp;amp; loc.charAt(0) == &apos;/&apos; &amp;amp;&amp;amp; Character.isLetter(loc.charAt(1)) &amp;amp;&amp;amp; loc.charAt(2) == &apos;:&apos;)&lt;br/&gt;
      loc = loc.substring(1);&lt;/p&gt;

&lt;p&gt;Can you think of a cleaner way to code this?&lt;/p&gt;</comment>
                            <comment id="12359096" author="fuzzylogic" created="Fri, 2 Dec 2005 08:10:35 +0000"  >&lt;p&gt;Hi Bryan, here&apos;s an alternative:&lt;/p&gt;

&lt;p&gt;if (System.getProperty(&quot;os.name&quot;).startsWith(&quot;Windows&quot;))&lt;br/&gt;
  loc = loc.substring(1);&lt;/p&gt;

&lt;p&gt;I&apos;ll leave it up to you. Your method is just as good.&lt;/p&gt;</comment>
                            <comment id="12359101" author="djd" created="Fri, 2 Dec 2005 09:05:46 +0000"  >&lt;p&gt;Is this code used?&lt;/p&gt;


&lt;p&gt;+    // Given a loaded class, and the name by which we loaded that class, this&lt;br/&gt;
+    // routine asks the class&apos;s class loader for information about where the&lt;br/&gt;
+    // class was loaded from. Typically, this is a file, which might be&lt;br/&gt;
+    // either a class file or a jar file. The routine figures that out, and&lt;br/&gt;
+    // returns the name of the file. If it can&apos;t figure it out, it returns null&lt;br/&gt;
+    private static String getFileWhichLoadedClass(Class c, String cName)&lt;br/&gt;
+    {&lt;br/&gt;
+        String className = &quot;/&quot; + cName.replace(&apos;.&apos;, &apos;/&apos;) + &quot;.class&quot;;&lt;br/&gt;
+        java.net.URL url = c.getResource(className);&lt;/p&gt;

&lt;p&gt;because I thought a class loader was not allowed to return the .class file as a resource for security reasons.&lt;/p&gt;</comment>
                            <comment id="12359106" author="fuzzylogic" created="Fri, 2 Dec 2005 09:31:27 +0000"  >&lt;p&gt;Class.getResource() doesn&apos;t return the .class file itself, it returns the URL of the location from which the class in question has already been loaded. This is used to determine the actual location of the loaded class, whether it was loaded by the extensions mechanism or from the classpath.&lt;/p&gt;

&lt;p&gt;Because we&apos;re just asking for the location of the file, I don&apos;t believe there are any security manager issues. If we tried to load the class from the URL, that might be a problem if we don&apos;t have sufficient permissions to access the class.&lt;/p&gt;</comment>
                            <comment id="12359108" author="djd" created="Fri, 2 Dec 2005 09:40:08 +0000"  >&lt;p&gt;The comment for ClassLoader.getResource says:&lt;/p&gt;

&lt;p&gt;a URL for reading the resource, or null if the resource could not be found or the caller doesn&apos;t have adequate privileges to get the resource.&lt;/p&gt;

&lt;p&gt;Thus if you don&apos;t have permission to read the class you should get null back.&lt;/p&gt;

&lt;p&gt;Not sure how this affects this patch, I know in the class loader that loads from the database I implemented to return null for any request for a file ending in .class, I&apos;d just assumed most class loaders did that.&lt;/p&gt;</comment>
                            <comment id="12359109" author="fuzzylogic" created="Fri, 2 Dec 2005 09:41:51 +0000"  >&lt;p&gt;Come to think of it, has any work been done to sysinfo to make it run properly with the security manager enabled? It definitely accesses System properties and such without the requisite doPrivileged() blocks.&lt;/p&gt;

&lt;p&gt;Answered my own question:&lt;/p&gt;

&lt;p&gt;java -cp jars/insane/derby.jar -Djava.security.manager org.apache.derby.tools.sysinfo&lt;br/&gt;
------------------ Java Information ------------------&lt;br/&gt;
Java Version:    1.4.2_09&lt;br/&gt;
Java Vendor:     Apple Computer, Inc.&lt;br/&gt;
Java home:       Security Exception: java.security.AccessControlException: access denied (java.util.PropertyPermission java.home read)&lt;br/&gt;
Java classpath:  Security Exception: java.security.AccessControlException: access denied (java.util.PropertyPermission java.class.path read)&lt;br/&gt;
OS name:         Mac OS X&lt;br/&gt;
OS architecture: ppc&lt;br/&gt;
OS version:      10.4.3&lt;br/&gt;
Java user name:  Security Exception: java.security.AccessControlException: access denied (java.util.PropertyPermission user.name read)&lt;br/&gt;
Java user home:  Security Exception: java.security.AccessControlException: access denied (java.util.PropertyPermission user.home read)&lt;br/&gt;
Java user dir:   Security Exception: java.security.AccessControlException: access denied (java.util.PropertyPermission user.dir read)&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.4&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;/org/apache/derby/info/DBMS.properties&amp;#93;&lt;/span&gt; 10.2.0.0 alpha - (233223M)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
------------------------------------------------------&lt;/p&gt;

&lt;p&gt;So that would be a &apos;no&apos;. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12359113" author="fuzzylogic" created="Fri, 2 Dec 2005 10:19:48 +0000"  >&lt;p&gt;Hi Dan, I was looking at the 1.3.1 javadoc at the time, it&apos;s not very specific about the security ramifications of the methods in question. oh well.&lt;/p&gt;

&lt;p&gt;Anyway, if we didn&apos;t have permissions to access the class, we&apos;d already be in trouble by the time this code was called, since we would have already attempted to load the class to pass it into the getFileWhichLoadedClass method.&lt;/p&gt;</comment>
                            <comment id="12359179" author="bryanpendleton" created="Sat, 3 Dec 2005 06:19:05 +0000"  >&lt;p&gt;Attached is an updated version of the patch incorporating Andrew&apos;s suggestion to clean up the display on Windows.&lt;/p&gt;

&lt;p&gt;I haven&apos;t done anything about the security manager issues raised by Dan because I don&apos;t understand them well enough to know what to do.&lt;/p&gt;</comment>
                            <comment id="12365784" author="bryanpendleton" created="Fri, 10 Feb 2006 07:11:45 +0000"  >&lt;p&gt;Andrew McIntyre suggested that the getCodeSource() method included in the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-930&quot; title=&quot;Add support for autoloading of Derby client drivers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-930&quot;&gt;&lt;del&gt;DERBY-930&lt;/del&gt;&lt;/a&gt; could be used to solve this issue, as well.&lt;/p&gt;

&lt;p&gt;I will pursue Andrew&apos;s suggestion, and will investigate using that code in sysinfo to improve its behavior.&lt;/p&gt;</comment>
                            <comment id="12367397" author="kmarsden" created="Thu, 23 Feb 2006 05:05:37 +0000"  >&lt;p&gt;I changed the title of this issue to more accurately depict the seriousness of the problem.&lt;br/&gt;
Currently sysinfo will print the wrong information if Derby is loaded with a custom ClassLoader.&lt;/p&gt;

&lt;p&gt;See this thread on the derby-user list&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/How-can-I-get-sysinfo-for-a-custom-Derby-classloader--t1171044.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/How-can-I-get-sysinfo-for-a-custom-Derby-classloader--t1171044.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12367985" author="kmarsden" created="Tue, 28 Feb 2006 01:57:53 +0000"  >&lt;p&gt;I am changing this to Critical as its impact is apparent even when users are just using classpath and derby automatically loads jars.  For example amidst much confusion about &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1045&quot; title=&quot;forupdate.sql , holdCursorIJ.sql ..etc are failing when run with 10.1 client againest trunk&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1045&quot;&gt;&lt;del&gt;DERBY-1045&lt;/del&gt;&lt;/a&gt; and versions, Knut said:&lt;/p&gt;

&lt;p&gt;&amp;gt;derbytools.jar will automatically put derbyclient.jar in the&lt;br/&gt;
&amp;gt;classpath. Since you have derbytools.jar from trunk before&lt;br/&gt;
&amp;gt;derbyclient.jar version 10.1 in your classpath, derbyclient.jar will&lt;br/&gt;
&amp;gt;be shadowed. Sysinfo will however report that you are using the 10.1&lt;br/&gt;
&amp;gt;version of derbyclient.jar, since it only sees the CLASSPATH variable.&lt;/p&gt;

&lt;p&gt;It seems to me perhaps this particular autoload is not a good idea but I will post separately about that but  this bug seems to make sysinfo not very useful for finding out jar versions.&lt;/p&gt;
</comment>
                            <comment id="12368017" author="bryanpendleton" created="Tue, 28 Feb 2006 05:13:34 +0000"  >&lt;p&gt;Here&apos;s another version of the patch for review.&lt;/p&gt;

&lt;p&gt;The primary difference between this version and the previous 30-Nov-2005 version is that I&apos;ve switched to using the getProtectionDomain().getCodeSource() technique proposed by David vanCouvering. I picked up the code from a patch proposal to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-930&quot; title=&quot;Add support for autoloading of Derby client drivers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-930&quot;&gt;&lt;del&gt;DERBY-930&lt;/del&gt;&lt;/a&gt;, I believe, and copied the 5 lines or so here for use by Sysinfo.&lt;/p&gt;

&lt;p&gt;Here&apos;s a few remarks:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;ve tested this code on Linux and Windows, with various combinations of jars and classes in the classpath and in the JRE/lib/ext, with and without a Security Manager in place, using various combinations of sysinfo arguments. Unfortunately, there are a &lt;b&gt;lot&lt;/b&gt; of permutations here, and I probably missed some. Still, for the cases I tested, it behaved well.&lt;/li&gt;
	&lt;li&gt;Running sysinfo -cp works pretty well with a Security Manager, but running sysinfo &lt;b&gt;without&lt;/b&gt; the -cp argument fails pretty badly under a Security Manager, as Andrew commented earlier in this issue. I didn&apos;t try to fix those problems, though I added a print statement for one particularly egregious case in which a security exception while fetching the CLASSPATH value was quietly swallowed with no output. Now it will at least tell you why it failed to process your CLASSPATH.&lt;/li&gt;
	&lt;li&gt;To run sysinfo -cp with a Security manager, you need a trivial policy file. I used:&lt;br/&gt;
                     grant 
{   permission java.lang.RuntimePermission &quot;getProtectionDomain&quot;; }
&lt;p&gt;;&lt;br/&gt;
   which obviously isn&apos;t ideal, but it was sufficient for testing.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;I also did some testing of the case raised by Knut Anders, in which having derbyclient.jar in the manifest of derbytools.jar causes derbyclient.jar to be pulled from the same directory where derbytools.jar was loaded, even if you have some other derbyclient.jar in your classpath. In my testing, &quot;sysinfo -cp&quot; behaves correctly in this case, and reports the &lt;b&gt;real&lt;/b&gt; derbyclient.jar that is in use, which is good. Unfortunately, the code which explicitly parses the classpath (sysinfo with no arguments) is still fooled by this case and gives a misleading response.&lt;br/&gt;
Fundamentally, as I said in my 23-Nov-2005 comment, I think that the algorithm used by Main.getAllInfo() is just an inferior algorithm. Textual parsing of the CLASSPATH entry is just too easily fooled by a variety of modern class loading situations.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But I think that the algorithm used by &quot;sysinfo -cp&quot; is fundamentally sound, and I think that this patch improves it to make sysinfo better than it was, even if it&apos;s not where we want it to be, yet.&lt;/p&gt;

&lt;p&gt;Please have a renewed look at this patch, and tell me what you think.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12368045" author="fuzzylogic" created="Tue, 28 Feb 2006 08:20:51 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;This looks good to me. Dan would need to comment on the security ramifications of needing the getProtectionDomain permission.&lt;/p&gt;

&lt;p&gt;If you have a chance, take a look at my patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1063&quot; title=&quot;Add new jar file to execute tools/network server with java -jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1063&quot;&gt;&lt;del&gt;DERBY-1063&lt;/del&gt;&lt;/a&gt;, it includes a fix to the &apos;regular&apos; sysinfo (no arguments) case, although it uses getResource() which Dan said might be a problem, although it only loads properties files, not class files. I think the combination of your patch and my patch may cover most of the cases as far as reporting the proper locations of files, or at least the ones we can get to through the default classloader and the classpath. (which would be the ones that mattered, i suppose if you&apos;re running sysinfo in the same environment as your classloading/classpath setup.)&lt;/p&gt;</comment>
                            <comment id="12368063" author="djd" created="Tue, 28 Feb 2006 11:12:36 +0000"  >&lt;p&gt;Minor comments on the code&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;would be good to make the comment for the new method getFileWhichLoadedClass a javadoc method (use /** ... */) show that it shows up in the generated javadoc and IDE&apos;s.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;why check getProtectionDomain() for a null return when the javadoc does not indicate it can return null?&lt;br/&gt;
  I personally don&apos;t like this coding style as it add code for no value, should we check all methods that return references&lt;br/&gt;
   for null, even ones like String.trim()?  It can make the reader have to look to the javadoc to see in what situations the method&lt;br/&gt;
can return null, to understand the code, only to find out it can&apos;t.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m trying to think through the ramifications of using getProtectionDomain() and hence possibly needing the associated permission in the policy file. One issue is that this permission might be needed for all derby jar files, since sysinfo is in all jars.&lt;br/&gt;
It probably comes down to what situations would we expect sysinfo to be executed with a security manager present,&lt;br/&gt;
in those situations how likely is the policy file going to be configured to support sysinfo? Since sysinfo is really meant to&lt;br/&gt;
be a quick check of the classpath, not an integral part of an application.&lt;/p&gt;
</comment>
                            <comment id="12368072" author="djd" created="Tue, 28 Feb 2006 13:38:23 +0000"  >&lt;p&gt;On the &quot;windows specific&quot; code for formatting the output of the URL, would this be needed if instead you did something like&lt;/p&gt;

&lt;p&gt;+                URL result = cs.getLocation ();&lt;/p&gt;

&lt;p&gt;                   String loc;&lt;br/&gt;
                   if (&quot;file&quot;.equals(result.getProtocol))&lt;br/&gt;
                             loc = result.getPath();&lt;br/&gt;
                    else&lt;br/&gt;
                             loc = result.toString():&lt;/p&gt;</comment>
                            <comment id="12368214" author="bryanpendleton" created="Wed, 1 Mar 2006 13:27:10 +0000"  >&lt;p&gt;Regarding Dan&apos;s most recent comment, about the Windows-specific path formatting, the suggestion does not seem to work for me, unfortunately:&lt;/p&gt;

&lt;p&gt;C:\bryan\src\java\urlloc&amp;gt;type x.java&lt;br/&gt;
public class x&lt;br/&gt;
{&lt;br/&gt;
        public static void main(String []args)&lt;br/&gt;
                throws Exception&lt;/p&gt;
        {
                java.net.URL result = (new x()).getClass().
                        getProtectionDomain().getCodeSource().getLocation();
                System.out.println(&quot;proto=&quot; + result.getProtocol());
                System.out.println(&quot;path=&quot; + result.getPath());
                System.out.println(&quot;toString=&quot; + result.toString());
        }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;C:\bryan\src\java\urlloc&amp;gt;java -cp . x&lt;br/&gt;
proto=file&lt;br/&gt;
path=/C:/bryan/src/java/urlloc/&lt;br/&gt;
toString=&lt;a href=&quot;file:/C:/bryan/src/java/urlloc/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/C:/bryan/src/java/urlloc/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12368219" author="bryanpendleton" created="Wed, 1 Mar 2006 13:45:41 +0000"  >&lt;p&gt;Sysinfo_Feb28_2006.diff is a revised version of the sysinfo patch proposal incorporating comments from reviewers. There are two changes as compared to yesterday&apos;s patch proposal:&lt;/p&gt;

&lt;p&gt;1) The method comments have been reformatted to better match javadoc conventions&lt;br/&gt;
2) The unnecessary and confusing check of the getProtectionDomain return value has been removed.&lt;/p&gt;</comment>
                            <comment id="12369401" author="fuzzylogic" created="Wed, 8 Mar 2006 14:35:55 +0000"  >&lt;p&gt;A few small things:&lt;/p&gt;

&lt;p&gt;1 - the class path becoming null issue is probably caused by the reportCloudscape method nulling out the local field classpath on a SecurityException.&lt;/p&gt;

&lt;p&gt;2 - Instead of hardcoding the &quot;Unable to analyze class path&quot; message, could you please add a new message to sysinfomessages.properties and use LocalizedResource to get the localized value?&lt;/p&gt;

&lt;p&gt;3 - Whether or not allowing getProtectionDomain is an appropriate permission to add, perhaps the getProtectionDomain() call should be wrapped in a try/catch block for a SecurityException so that sysinfo can gracefully fail out of getFileWhichLoadedClass()? At least then in an environment where this is not allowed, we can report the problem with a meaningful error message instead of just falling over. A localized message may be needed here as well.&lt;/p&gt;</comment>
                            <comment id="12370041" author="bryanpendleton" created="Sun, 12 Mar 2006 11:00:57 +0000"  >&lt;p&gt;Patch &quot;with_andrews_feedback.diff&quot; incorporates the suggestions from Andrew&apos;s review of March 8 (thanks Andrew):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The message when java.class.path cannot be read is fetched from a translatable property&lt;/li&gt;
	&lt;li&gt;The code now catches the security exception when getProtectionDomain is disallowed and displays a friendly message fetched from a translatable property.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12370766" author="fuzzylogic" created="Fri, 17 Mar 2006 08:22:54 +0000"  >&lt;p&gt;Hi Bryan, the latest patch for this looks good to me. I would say go ahead and commit when you have a chance. &lt;/p&gt;</comment>
                            <comment id="12371258" author="bryanpendleton" created="Wed, 22 Mar 2006 01:00:23 +0000"  >&lt;p&gt;It turns out that there are several tests which run the &apos;sysinfo&apos; code in situations in which a Java security manager is in place, and in these tests the code is not currently being granted the permissions necessary to display the new detailed information  which is added by this patch.&lt;/p&gt;

&lt;p&gt;The tests are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;derbynet/sysinfo.java&lt;/li&gt;
	&lt;li&gt;derybnet/sysinfo_withproperties.java&lt;/li&gt;
	&lt;li&gt;demo/RunClassPathTester.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The two sysinfo tests run the Network Server under a security manager, and then call the &apos;sysinfo&apos; command in client/server mode to print the sysinfo output from that Network Server. But the Network Server is not granted the permission to read java.class.path, so that part of the sysinfo output is blank.&lt;/p&gt;

&lt;p&gt;The RunClassPathTester.java test runs the standalone sysinfo tool under a security manager, passing it the &apos;-cp&apos; flag to print information about Database.class and SimpleApp.class. These classes are indeed in the class path, but the test is not granted the permission to get the ProtectionDomain and CodeSource for them.&lt;/p&gt;

&lt;p&gt;The result, right now, is that the two Sysinfo tests now produce a new line of output stating that permission has not been granted to read the java.class.path property, and the RunClassPathTester test now produces a new line of output stating that permission has not been granted to get the ProtectionDomain.&lt;/p&gt;

&lt;p&gt;I think that output is correct, and so I am tempted to update the master output files to reflect this new correct output.&lt;/p&gt;

&lt;p&gt;Alternatively, I could modify derby_tests.policy to grant additional permissions to the Derby codebase(s).&lt;/p&gt;

&lt;p&gt;What is the better path to pursue?&lt;/p&gt;</comment>
                            <comment id="12371270" author="fuzzylogic" created="Wed, 22 Mar 2006 01:54:20 +0000"  >&lt;p&gt;I believe the goal is to run the tests with as few permissions as possible. Granting additional permissions for these tests might mask security bugs elsewhere in the code.&lt;/p&gt;

&lt;p&gt;So, I agree, I think the thing to do is add master files that include the output of the caught SecurityExceptions.&lt;/p&gt;

&lt;p&gt;Myrna had mentioned enhancing the test harness to be able to provide specific permissions to individual tests. Once that work had been completed, we could add the necessary permissions to these tests only. I thought a JIRA had been field for that, but I wasn&apos;t able to find it at the moment.&lt;/p&gt;</comment>
                            <comment id="12371275" author="bryanpendleton" created="Wed, 22 Mar 2006 02:39:16 +0000"  >&lt;p&gt;Thanks, Andrew. I agree with you.&lt;/p&gt;

&lt;p&gt;I&apos;ve committed this change:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewcvs?rev=387599&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=387599&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12371281" author="bryanpendleton" created="Wed, 22 Mar 2006 02:56:54 +0000"  >&lt;p&gt;I added a brief release note to the CHANGES file mentioning the new behavior and the new security requirement.&lt;/p&gt;</comment>
                            <comment id="12418037" author="bryanpendleton" created="Tue, 27 Jun 2006 22:54:11 +0100"  >&lt;p&gt;Here&apos;s a release note:&lt;/p&gt;

&lt;p&gt;      PROBLEM: Sysinfo classpath information was insufficiently detailed&lt;/p&gt;

&lt;p&gt;      SYMPTOM: Sometimes it was hard to tell where the Derby classes were actually being loaded from in the JVM&lt;/p&gt;

&lt;p&gt;      CAUSE: the algorithm that sysinfo used for analyzing and reporting on the application classpath was not robust.&lt;/p&gt;

&lt;p&gt;      SOLUTION: The sysinfo tool now prints additional information about the origin of the classes and jars that it examines. The origin of a class might be: an entry in the application classpath, an entry in a class loader location&lt;br/&gt;
list, a jar fetched due to being listed in the manifest entry of another jar, a standard extension in the JRE&apos;s extensions directory, a jar installed into the application server, or any of various other possibilities.&lt;/p&gt;

&lt;p&gt;      Note that when sysinfo runs under a Java security manager, it may need special permissions to access this additional information, including the permission to read the java.class.path property, and the permission to call getProtectionDomain on a class. If sysinfo is not granted these permissions, it will display an error message about the security problem in place of displaying the class origin information.&lt;/p&gt;

&lt;p&gt;    SECURITY NOTE: The new permissions are optional. If you do not provide them, you will see a message such as the following in your sysinfo output: Unable to analyze class path: access denied (java.util.PropertyPermission java.class.path read). Such a message does not indicate an error; it simply means that the sysinfo tool was unable to provide detailed classpath information because it did not have permission to read the classpath. In prior releases, under these circumstances, sysinfo would silently print nothing, now it prints an informational message about the reason that it couldn&apos;t provide any classpath information.&lt;/p&gt;</comment>
                            <comment id="12426854" author="fuzzylogic" created="Wed, 9 Aug 2006 07:41:43 +0100"  >&lt;p&gt;Linking this issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1273&quot; title=&quot;Sysinfo should print a better  message when it gets Security Exceptions accessing classpath info when run under security manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1273&quot;&gt;DERBY-1273&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12327847">DERBY-826</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12329522">DERBY-1063</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12332983">DERBY-1273</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12320497" name="Derby-668.diff" size="1474" author="bryanpendleton" created="Mon, 7 Nov 2005 03:35:48 +0000"/>
                            <attachment id="12320917" name="derby-668-2.diff" size="3831" author="bryanpendleton" created="Thu, 24 Nov 2005 07:31:13 +0000"/>
                            <attachment id="12321058" name="derby-668-3.diff" size="4329" author="bryanpendleton" created="Thu, 1 Dec 2005 07:18:04 +0000"/>
                            <attachment id="12321104" name="derby-668-4.diff" size="4606" author="bryanpendleton" created="Sat, 3 Dec 2005 06:19:05 +0000"/>
                            <attachment id="12323468" name="sysinfo_Feb27_2006.diff" size="5324" author="bryanpendleton" created="Tue, 28 Feb 2006 05:13:34 +0000"/>
                            <attachment id="12323542" name="sysinfo_Feb28_2006.diff" size="5090" author="bryanpendleton" created="Wed, 1 Mar 2006 13:45:41 +0000"/>
                            <attachment id="12324064" name="with_andrews_feedback.diff" size="5638" author="bryanpendleton" created="Sun, 12 Mar 2006 11:00:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Nov 2005 21:48:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22083</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14yf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40453</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>