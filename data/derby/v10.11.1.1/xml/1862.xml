<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1862/DERBY-1862.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1862] Simple hash improves performance</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1862</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;We are currently developing a system where we load between 1000 and 5000 objects in one go. The user can load different chunks of objects at any time as he/she is navigating. &lt;br/&gt;
The system consist of a java application which accesses derby via hibernate.&lt;br/&gt;
During profiling we discovered that the org.apache.derby.iapi.util.StringUtil is the biggest bottleneck in the system.&lt;br/&gt;
The method SQLEqualsIgnoreCase(String s1, String s2) is doing upperCase on both s1 and s2, all the time.&lt;br/&gt;
By putting the uppcase value into a Hashtable and using the input-string as key we increates the performance with about 40%. &lt;br/&gt;
Our test-users report that the system now seems to run at  &quot;double speed&quot;. &lt;/p&gt;

&lt;p&gt;The class calling the StringUtil.SQLEqualsIgnoreCase in this case is&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.jdbc.EmbedResultSet&lt;/p&gt;

&lt;p&gt;This class should also be checked as it seems to do a lot of looping.  &lt;br/&gt;
It might be a canditate for hashing, as it is stated in the code:&lt;br/&gt;
&quot;// REVISIT: we might want to cache our own info...&quot;&lt;/p&gt;



&lt;p&gt;Here is a diff agains the 10.1.3.1 source for org.apache.derby.iapi.util.StringUtil&lt;/p&gt;

&lt;p&gt;22a23&lt;br/&gt;
&amp;gt; import java.util.Hashtable;&lt;br/&gt;
319c320,326&lt;br/&gt;
&amp;lt; 			return s1.toUpperCase(Locale.ENGLISH).equals(s2.toUpperCase(Locale.ENGLISH));&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
&amp;gt;       {&lt;br/&gt;
&amp;gt;          String s1Up = (String) uppercaseMap.get(s1);&lt;br/&gt;
&amp;gt;          if (s1Up == null)&lt;br/&gt;
&amp;gt;          &lt;/p&gt;
{
&amp;gt;             s1Up = s1.toUpperCase(Locale.ENGLISH);
&amp;gt;             uppercaseMap.put(s1,s1Up);
&amp;gt;          }
&lt;p&gt;320a328,332&lt;br/&gt;
&amp;gt;          String s2Up = (String) uppercaseMap.get(s2);&lt;br/&gt;
&amp;gt;          if (s2Up == null)&lt;br/&gt;
&amp;gt;          &lt;/p&gt;
{
&amp;gt;             s2Up = s2.toUpperCase(Locale.ENGLISH);
&amp;gt;             uppercaseMap.put(s2,s2Up);
321a334
&amp;gt;          return s1Up.equals(s2Up);
322a336,339
&amp;gt;          //return s1.toUpperCase(Locale.ENGLISH).equals(s2.toUpperCase(Locale.ENGLISH));
&amp;gt;       }
&lt;p&gt;&amp;gt;    }&lt;br/&gt;
&amp;gt;    private static Hashtable uppercaseMap = new Hashtable();&lt;/p&gt;


</description>
                <environment>WinXp, JRE 1.5_6., Hibernate 3.1&lt;br/&gt;
</environment>
        <key id="12350132">DERBY-1862</key>
            <summary>Simple hash improves performance</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andreask">Andreas Korneliussen</assignee>
                                    <reporter username="taoman">Tore Andre Olmheim</reporter>
                        <labels>
                    </labels>
                <created>Mon, 18 Sep 2006 09:27:20 +0100</created>
                <updated>Mon, 29 Jun 2009 15:31:11 +0100</updated>
                            <resolved>Wed, 23 May 2007 02:19:35 +0100</resolved>
                                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                    <fixVersion>10.2.2.0</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12435463" author="andreask" created="Mon, 18 Sep 2006 13:03:56 +0100"  >&lt;p&gt;Attached is a patch which uses another approach to improve the SQLEqualsIgnoreCase method. The patch check the identity and length of the strings to be compared, before doing conversions to uppercase with english locale. &lt;/p&gt;

&lt;p&gt;String.toUpperCase(..) with english locale, should return a string with the same number of characters, and it should therefore be valid to do a check of number of characters before doing any conversions.&lt;/p&gt;

&lt;p&gt;The patch which is posted as part of the description, will leak memory, since strings are never removed from the upperCaseMap.&lt;/p&gt;</comment>
                            <comment id="12435473" author="taoman" created="Mon, 18 Sep 2006 14:30:51 +0100"  >&lt;p&gt;Yes I agree with Andreas that my patch will leak memory.&lt;br/&gt;
In our system this method is mainly called from &lt;br/&gt;
findColumnName(String columnName)  in org.apache.derby.impl.jdbc.EmbedResultSet.&lt;/p&gt;

&lt;p&gt;This method is only comparing column-names, and there is a limited number of column-names in a database&lt;br/&gt;
so the memory leak will not be a big issue.&lt;/p&gt;

&lt;p&gt;But, of course if the SQLEqualsIgnoreCase is used by other classes, then Andreas has a good point.&lt;br/&gt;
I still think my Hashtable version will be the fastest.&lt;/p&gt;

&lt;p&gt;The best solution would be to refactor  findColumnName(String columnName)  in org.apache.derby.impl.jdbc.EmbedResultSet.&lt;/p&gt;

&lt;p&gt;I will leave it to the persons,  who knows the derby design well, to decide what approach to take.&lt;/p&gt;



</comment>
                            <comment id="12436241" author="andreask" created="Wed, 20 Sep 2006 15:17:48 +0100"  >&lt;p&gt;The attached patch makes a map of column names to column number. The map is populated when the first call to findColumn is made.&lt;/p&gt;</comment>
                            <comment id="12436244" author="andreask" created="Wed, 20 Sep 2006 15:19:16 +0100"  >&lt;p&gt;Attached incorrect patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1696&quot; title=&quot;transaction may sometimes keep lock on a row after moving off the resultset in scrollable updatable resultset&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1696&quot;&gt;DERBY-1696&lt;/a&gt;v2.diff). The correct patch is &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1862&quot; title=&quot;Simple hash improves performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1862&quot;&gt;&lt;del&gt;DERBY-1862&lt;/del&gt;&lt;/a&gt;v2.diff.&lt;/p&gt;</comment>
                            <comment id="12436251" author="djd" created="Wed, 20 Sep 2006 15:52:00 +0100"  >&lt;p&gt;The patch looks fine and I assume works correctly, but there is room for improvement, related to performance:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The map is always created, even if it is never used. This will increase memory usage and slow down existing applications a little.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The map is created and filled in for an individual ResultSet, but in fact it&apos;s a property of the compiled plan, so ideally&lt;br/&gt;
there could be one copy of this map per compiled plan. So with a multi-user application running the same statements this&lt;br/&gt;
patch will consume more memory as a factor of the number of users. Now there is probably other meta-data aspects of&lt;br/&gt;
an EmbedResultSet that could be shared at a plan level, so this could be seen as future cleanup.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Rather than using new Integer() as the values for the hash map, the code could use ReuseFactory.getInteger() to&lt;br/&gt;
reduce memory usage.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m fine with the patch being committed, but would like to ensure these optimizations are not lost.&lt;/p&gt;</comment>
                            <comment id="12436846" author="andreask" created="Fri, 22 Sep 2006 14:09:48 +0100"  >&lt;p&gt;Attaching a modified patch where I have taken in the advice of not creating the map object in the constructor, and using ReuseFactory for getting Integer objects. Synchronization is done on &quot;this&quot; to protect the map from concurrent access while creating/populating it.&lt;/p&gt;</comment>
                            <comment id="12436872" author="djd" created="Fri, 22 Sep 2006 15:42:34 +0100"  >&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1862&quot; title=&quot;Simple hash improves performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1862&quot;&gt;&lt;del&gt;DERBY-1862&lt;/del&gt;&lt;/a&gt;v3.dif committed revision 448949. Thanks Andreas for making the performance improvements.&lt;/p&gt;</comment>
                            <comment id="12436920" author="djd" created="Fri, 22 Sep 2006 18:05:00 +0100"  >&lt;p&gt;With a modified version of the simple performance test case in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1876&quot; title=&quot;Investigate overhead of JDBC layer and compiled activation code for simple embedded read-only, forward ResultSets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1876&quot;&gt;&lt;del&gt;DERBY-1876&lt;/del&gt;&lt;/a&gt; (ie. using column names) I saw a 35% performance improvement due to this fix. I will attached the modified test case to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1876&quot; title=&quot;Investigate overhead of JDBC layer and compiled activation code for simple embedded read-only, forward ResultSets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1876&quot;&gt;&lt;del&gt;DERBY-1876&lt;/del&gt;&lt;/a&gt; as it&apos;s interesting for that investigation as well.&lt;/p&gt;

&lt;p&gt;Thanks very much for Tore Andre Olmheim for raising the issue and providing the insight into where the problem lay, and to Andreas Korneliussen for providing the patch.&lt;/p&gt;</comment>
                            <comment id="12498070" author="myrna" created="Wed, 23 May 2007 02:19:34 +0100"  >&lt;p&gt;Closing issue altogether after adjusting fix version&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12341217" name="DERBY-1696v2.diff" size="11545" author="andreask" created="Wed, 20 Sep 2006 15:17:48 +0100"/>
                            <attachment id="12341047" name="DERBY-1862.diff" size="1070" author="andreask" created="Mon, 18 Sep 2006 13:03:56 +0100"/>
                            <attachment id="12341218" name="DERBY-1862v2.diff" size="3581" author="andreask" created="Wed, 20 Sep 2006 15:19:16 +0100"/>
                            <attachment id="12341390" name="DERBY-1862v3.diff" size="3471" author="andreask" created="Fri, 22 Sep 2006 14:09:48 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 18 Sep 2006 12:03:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30164</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wjj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39090</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>