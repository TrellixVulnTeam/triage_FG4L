<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:15 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2447/DERBY-2447.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2447] ejbql and floattypes in org.apache.derbyTesting.functionTests.tests.lang.LangScripts intermittently fails with &apos;expected:&lt;[0.0 ]         &gt; but was:&lt;[-0.0]  &apos;</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2447</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Seen intermittently on Linux since 2007-02-27.&lt;br/&gt;
Seen on Solaris 2007-03-12.&lt;/p&gt;

&lt;p&gt;&amp;lt;signature&amp;gt;&lt;br/&gt;
ejbql(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 454 expected:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0.0 &amp;#93;&lt;/span&gt;         &amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;-0.0&amp;#93;&lt;/span&gt;         &amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:124)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:80)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
&amp;lt;/signature&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;signature&amp;gt;&lt;br/&gt;
floattypes(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 1823 expected:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0.0 &amp;#93;&lt;/span&gt;         &amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;-0.0&amp;#93;&lt;/span&gt;         &amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:100)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:124)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:80)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
&amp;lt;/signature&amp;gt;&lt;/p&gt;
</description>
                <environment>OS: Red Hat Enterprise Linux AS release 4 (Nahant Update 3) 64bits - Linux 2.6.9-34.ELsmp #1 SMP Fri Feb 24 16:56:28 EST 2006 GNU/Linux&lt;br/&gt;
JVM: Sun Microsystems Inc. 1.5.0_07-b03&lt;br/&gt;
&lt;br/&gt;
OS: Solaris 10 6/06 s10s_u2wos_09a SPARC 64bits - SunOS 5.10 Generic_118833-17&lt;br/&gt;
JVM: Sun Microsystems Inc. - 1.5.0_07-b03</environment>
        <key id="12364786">DERBY-2447</key>
            <summary>ejbql and floattypes in org.apache.derbyTesting.functionTests.tests.lang.LangScripts intermittently fails with &apos;expected:&lt;[0.0 ]         &gt; but was:&lt;[-0.0]  &apos;</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="olesolberg">Ole Solberg</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Mar 2007 09:26:02 +0000</created>
                <updated>Fri, 21 Jan 2011 17:49:56 +0000</updated>
                            <resolved>Wed, 6 May 2009 23:41:54 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.5.2.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12526489" author="kmarsden" created="Tue, 11 Sep 2007 16:30:42 +0100"  >&lt;p&gt;Unchecking Regession checkbox as this is not a confirmed product regression&lt;/p&gt;</comment>
                            <comment id="12701923" author="knutanders" created="Thu, 23 Apr 2009 14:03:28 +0100"  >&lt;p&gt;I think this instability is caused by the JVM. At least if I run the attached Java class, which imitates the normalizeREAL() method in NumberDataType, the result of normalizeREAL(-0.0f) varies.&lt;/p&gt;

&lt;p&gt;I&apos;ve tested it on OpenSolaris with the following JVM:&lt;/p&gt;

&lt;p&gt;java version &quot;1.6.0_13&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_13-b03)&lt;br/&gt;
Java HotSpot(TM) Server VM (build 11.3-b02, mixed mode)&lt;/p&gt;

&lt;p&gt;It looks like this line in normalizeREAL() is optimized away when the run-time compiler translates the byte code to native code (haven&apos;t actually verified that, though):&lt;/p&gt;

&lt;p&gt;    if (v == 0.0f) v = 0.0f;&lt;/p&gt;

&lt;p&gt;This line is the one that&apos;s removing the sign for -0.0f, but I&apos;ll need to check if the language specification actually guarantees that it should work.&lt;/p&gt;</comment>
                            <comment id="12701982" author="bryanpendleton" created="Thu, 23 Apr 2009 17:29:33 +0100"  >&lt;p&gt;Hi Knut, this is an interesting observation, and an interesting little snippet of code.&lt;br/&gt;
What might I see when I run it? Am I doing it right:&lt;/p&gt;

&lt;p&gt;-bash-2.05b$ javac Normalize.java&lt;br/&gt;
-bash-2.05b$ java -cp . Normalize&lt;br/&gt;
sum: 0.0&lt;br/&gt;
normalizeREAL(-0.0f): 0.0&lt;/p&gt;

&lt;p&gt;I got these results with both of the following:&lt;/p&gt;

&lt;p&gt;java version &quot;1.5.0_05&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_05-b05)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.5.0_05-b05, mixed mode, sharing)&lt;/p&gt;

&lt;p&gt;java version &quot;1.4.2_13&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.4.2_13-b06)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.4.2_13-b06, mixed mode)&lt;/p&gt;</comment>
                            <comment id="12702022" author="knutanders" created="Thu, 23 Apr 2009 18:38:41 +0100"  >&lt;p&gt;Yes, that&apos;s the correct way to run it.&lt;/p&gt;

&lt;p&gt;The first line of output is not significant, it&apos;s just printed so that the run-time compiler is not allowed to optimize away the loop.&lt;/p&gt;

&lt;p&gt;The second line prints either 0.0 or -0.0. I &lt;b&gt;think&lt;/b&gt; the correct result is 0.0. However, when I run with the server VM I see -0.0 most of the time, but not always. I have only seen 0.0 printed with the client VM, probably because the client VM is not that eager to generate native code.&lt;/p&gt;

&lt;p&gt;You could try &quot;java -server Normalize&quot; to force the use of the server VM.&lt;/p&gt;</comment>
                            <comment id="12702030" author="bryanpendleton" created="Thu, 23 Apr 2009 18:52:22 +0100"  >&lt;p&gt;What about writing that line as:&lt;/p&gt;

&lt;p&gt;    if (v == -0.0f) v = 0.0f; &lt;/p&gt;

&lt;p&gt;If that works, it might also have the desirable effect of making the intent of the code clearer.&lt;/p&gt;</comment>
                            <comment id="12702042" author="knutanders" created="Thu, 23 Apr 2009 19:17:24 +0100"  >&lt;p&gt;Another alternative is to write a helper method which inspects the integer representation of the floating point value&lt;/p&gt;

&lt;p&gt;    private static boolean isNegativeZero(double d) &lt;/p&gt;
{
        // If the most significant bit (sign bit) is 1 and the rest are 0,
        // we have a negative zero.
        return Double.doubleToRawLongBits(d) == 0x8000000000000000L;
    }

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;    if (isNegativeZero(v)) &lt;/p&gt;
{
        v = 0.0f;
    }

&lt;p&gt;This has the additional advantage of only matching values that actually are negative zero.&lt;/p&gt;

&lt;p&gt;Both approaches (comparing to -0.0f and using the helper method) appear to make the test program print 0.0 consistently.&lt;/p&gt;

&lt;p&gt;I don&apos;t find anything in &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.2.3&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.2.3&lt;/a&gt; indicating that there is something wrong with the current implementation of normalizeREAL() and normalizeDOUBLE(), so I&apos;ll file a bug against the JVM, at least to get a verification of whether or not it is a bug.&lt;/p&gt;

&lt;p&gt;JVM bug or not, both of the suggested workarounds will make the code clearer, so I guess changing the Derby code wouldn&apos;t make any harm.&lt;/p&gt;</comment>
                            <comment id="12702043" author="knutanders" created="Thu, 23 Apr 2009 19:20:56 +0100"  >&lt;p&gt;Here&apos;s a patch using the helper method approach. No tests have been run yet.&lt;/p&gt;</comment>
                            <comment id="12702298" author="knutanders" created="Fri, 24 Apr 2009 10:10:41 +0100"  >&lt;p&gt;Derbyall and suites.All ran cleanly. The patch is ready for review.&lt;/p&gt;</comment>
                            <comment id="12702357" author="knutanders" created="Fri, 24 Apr 2009 14:08:19 +0100"  >&lt;p&gt;I&apos;ve logged a bug against Sun&apos;s JVM: &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6833879&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=6833879&lt;/a&gt;&lt;br/&gt;
(The bug report is not visible yet.)&lt;/p&gt;</comment>
                            <comment id="12702386" author="bryanpendleton" created="Fri, 24 Apr 2009 15:26:45 +0100"  >&lt;p&gt;The fix seems fine to me. Given that we believe that the current code is actually&lt;br/&gt;
fine, and that this change is actually working around a bug in the JVM, it seems&lt;br/&gt;
like it would be nice to have a comment to that effect.&lt;/p&gt;

&lt;p&gt;Do we feel that the existing regression test suite covers this area adequately?&lt;/p&gt;</comment>
                            <comment id="12702728" author="knutanders" created="Sat, 25 Apr 2009 17:58:01 +0100"  >&lt;p&gt;Good point about adding a comment about the JVM bug, Bryan. And the more I think about it, the more I think your suggestion about just changing (v == 0.0f) to (v == -0.0f) is better (simpler and just as clear) than the extra helper method. So I&apos;ll post a new patch.&lt;/p&gt;

&lt;p&gt;As to testing, it should be easy enough to write a test that fails reliably on a JVM with this bug. For instance, we could prepare the statement &quot;VALUES -CAST(? AS REAL)&quot;, set the parameter to 0 and execute it 10000 times. After about 5000-6000 executions it should stop returning 0.0 and start returning -0.0. I can add a test case doing that in the next patch (unless someone thinks it&apos;s a bad idea to add a regression test for something that&apos;s arguably a JVM bug).&lt;/p&gt;

&lt;p&gt;Changing issue type from bug to improvement, since this is not a Derby bug and we just add a workaround that happens to make the intention of the code clearer.&lt;/p&gt;</comment>
                            <comment id="12702735" author="bryanpendleton" created="Sat, 25 Apr 2009 18:37:12 +0100"  >&lt;p&gt;I think the test would be useful. Even though it&apos;s not our bug, it&apos;s behavior that we depend on, so having a test which verifies the expected behavior seems helpful.&lt;/p&gt;

&lt;p&gt;Thanks for taking care of this in a thorough fashion. Much appreciated!&lt;/p&gt;

&lt;p&gt;Also, I see that the JVM bug report is now visible and has been marked &quot;accepted&quot; by Sun.&lt;/p&gt;</comment>
                            <comment id="12706324" author="knutanders" created="Wed, 6 May 2009 08:29:27 +0100"  >&lt;p&gt;It looks like a fix for this has been committed in the OpenJDK repository now: &lt;a href=&quot;http://hg.openjdk.java.net/jdk7/hotspot-comp/hotspot/rev/36ee9b69616e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hg.openjdk.java.net/jdk7/hotspot-comp/hotspot/rev/36ee9b69616e&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12706410" author="knutanders" created="Wed, 6 May 2009 14:03:08 +0100"  >&lt;p&gt;Here&apos;s a new patch which includes test cases that expose the bug. Three methods are affected, but only two of them are tested. The untested method is only called from CastNode when a constant double value is cast to a float, in which case the constant double has already been normalized so a negative zero will never be seen there. All three methods were updated for consistency.&lt;/p&gt;

&lt;p&gt;I haven&apos;t run the full regression test suite yet.&lt;/p&gt;</comment>
                            <comment id="12706428" author="bryanpendleton" created="Wed, 6 May 2009 14:48:32 +0100"  >&lt;p&gt;Thanks for adding the test, Knut. It looks good to me. I can&apos;t think of anything else needed here. +1.&lt;/p&gt;</comment>
                            <comment id="12706643" author="knutanders" created="Wed, 6 May 2009 23:41:54 +0100"  >&lt;p&gt;Thanks, Bryan. I committed the patch to trunk with revision 772449. I also merged it to 10.5 and committed revision 772452, so that we&apos;ll get less noise in the release testing when we create a 10.5 maintenance release.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12406230" name="Normalize.java" size="556" author="knutanders" created="Thu, 23 Apr 2009 14:03:28 +0100"/>
                            <attachment id="12407344" name="d2447.diff" size="6390" author="knutanders" created="Wed, 6 May 2009 14:03:08 +0100"/>
                            <attachment id="12406259" name="negative-zero.diff" size="2527" author="knutanders" created="Thu, 23 Apr 2009 19:20:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 11 Sep 2007 15:30:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30450</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0mk7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37473</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>