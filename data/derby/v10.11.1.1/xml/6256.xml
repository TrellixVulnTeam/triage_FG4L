<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6256/DERBY-6256.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6256] Move the XmlVTI into the product.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6256</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The XmlVTI under derbyDemo has been useful to me for many years. It has become even more useful now that Derby supports varargs. That is because varargs make it very easy to declare an XmlVTI. At this point, I think it is worth re-phrasing the XmlVTI in terms of varargs and moving it into the product so that we can use it for internal table functions. There is no rush to expose XmlVTI as part of Derby&apos;s public api, but we could consider doing that if other people find this table function to be useful.&lt;/p&gt;

&lt;p&gt;The XmlVTI is a table function which turns an xml file into a tabular data set which you can query via sql. When you declare an XmlVTI, you state the following arguments:&lt;/p&gt;

&lt;p&gt;1) The url of an xml file.&lt;/p&gt;

&lt;p&gt;2) The name of the element in the xml file which you want to treat as a record or row.&lt;/p&gt;

&lt;p&gt;3) The names of the attributes and subelements of that record which you want to treat as columns. Now that we have varargs, it is possible to represent this trailing argument as a variable length argument list.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12651772">DERBY-6256</key>
            <summary>Move the XmlVTI into the product.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Fri, 7 Jun 2013 20:29:01 +0100</created>
                <updated>Thu, 10 Jul 2014 19:34:52 +0100</updated>
                            <resolved>Thu, 6 Mar 2014 02:41:39 +0000</resolved>
                                    <version>10.11.1.1</version>
                                                    <component>SQL</component>
                    <component>Tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13678348" author="rhillegas" created="Fri, 7 Jun 2013 20:40:30 +0100"  >&lt;p&gt;Attaching derby-6256-01-aa-move-XmlVTI-into-product.diff. This patch moves XmlVTI into the product as described above.&lt;/p&gt;

&lt;p&gt;Here is the header comment on this class:&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;This is a VTI designed to read XML files which are structured like row sets.&lt;/li&gt;
	&lt;li&gt;This VTI takes the following arguments:&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;ul&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;xmlResourceName - An URL identifying an xml resource.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;rowTag - The tag of the element which contains the row-structured content.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;childTags - The attributes and descendant elements inside the row element which should be treated as columns.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;/ul&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;Here is a sample declaration:&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;create function findbugs( xmlResourceName varchar( 32672 ), rowTag varchar( 32672 ), childTags varchar( 32672 )... )&lt;/li&gt;
	&lt;li&gt;returns table&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;className   varchar( 32672 ),&lt;/li&gt;
	&lt;li&gt;bugCount    int&lt;/li&gt;
	&lt;li&gt;)&lt;/li&gt;
	&lt;li&gt;language java parameter style derby_jdbc_result_set no sql&lt;/li&gt;
	&lt;li&gt;external name &apos;org.apache.derby.vti.XmlVTI.xmlVTI&apos;;&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;...and here is a sample invocation:&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;create view findbugs as&lt;/li&gt;
	&lt;li&gt;select *&lt;/li&gt;
	&lt;li&gt;from table&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;findbugs&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;&apos;file:///Users/me/static-analysis/findbugs.xml&apos;,&lt;/li&gt;
	&lt;li&gt;&apos;ClassStats&apos;,&lt;/li&gt;
	&lt;li&gt;&apos;class&apos;, &apos;bugs&apos;&lt;/li&gt;
	&lt;li&gt;)&lt;/li&gt;
	&lt;li&gt;) v;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;select * from findbugs where bugCount != 0;&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
 */&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;

&lt;p&gt;Moves XmlVTI into the VTI package but does not expose it through the public api javadoc.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Pulls XmlVTI into the engine jar file.&lt;/p&gt;</comment>
                            <comment id="13678352" author="jira-bot" created="Fri, 7 Jun 2013 20:44:14 +0100"  >&lt;p&gt;Commit 1490799 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1490799&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1490799&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Commit derby-6256-01-aa-move-XmlVTI-into-product.diff, moving the XmlVTI into the vti package of the product.&lt;/p&gt;</comment>
                            <comment id="13678754" author="kmarsden" created="Sat, 8 Jun 2013 17:02:46 +0100"  >&lt;p&gt;This patch puts XmlVTI.class into derby.jar. I think it would be better placed in derbytools.jar&lt;/p&gt;</comment>
                            <comment id="13679452" author="rhillegas" created="Mon, 10 Jun 2013 13:05:21 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;I thought that derby.jar was a good home for this class for the following reasons:&lt;/p&gt;

&lt;p&gt;1) All of the other classes in that package go into derby.jar.&lt;/p&gt;

&lt;p&gt;2) The class must be wired into the engine classpath in order to be useful, that is accessible to the table function machinery. derbytools.jar contains tools, like ij and sysinfo, which can be run client-side.&lt;/p&gt;

&lt;p&gt;Why do you think derbytools.jar is a better home for XmlVTI? Thanks-Rick&lt;/p&gt;</comment>
                            <comment id="13679567" author="rhillegas" created="Mon, 10 Jun 2013 16:11:29 +0100"  >&lt;p&gt;Attaching derby-6256-02-aa-allowParentTags.diff. This patch adds the capability for an XmlVTI to include attribute/element content from outer elements.&lt;/p&gt;

&lt;p&gt;When people design hierarchical data, they often want inner data to inherit context from the outer levels in which the inner data nests. This patch lets you specify that some of the columns in the returned row should come from data in outer elements which the row element is nested inside.&lt;/p&gt;

&lt;p&gt;Here is additional header javadoc explaining how to declare an XmlVTI containing content from outer elements:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;A second form of this VTI takes the following arguments. This form is useful when&lt;/li&gt;
	&lt;li&gt;some of the columns in the row are &quot;inherited&quot; from outer elements inside which the&lt;/li&gt;
	&lt;li&gt;row element nests:&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;ul&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;xmlResourceName - An URL identifying an xml resource.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;rowTag - The tag of the element which contains the row-structured content.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;parentTags - Attributes and elements (to be treated as columns) from outer elements in which the rowTag is nested.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;li&amp;gt;childTags - Attributes and elements (to be treated as columns) inside the row element.&amp;lt;/li&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;/ul&amp;gt;&lt;br/&gt;
 *&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;Here is a sample declaration of this second form of the XmlVTI. Using the second form&lt;/li&gt;
	&lt;li&gt;involves declaring an ArrayList type and a factory method too:&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;create type ArrayList external name &apos;java.util.ArrayList&apos; language java;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;create function asList( cell varchar( 32672 ) ... ) returns ArrayList&lt;/li&gt;
	&lt;li&gt;language java parameter style derby no sql&lt;/li&gt;
	&lt;li&gt;external name &apos;org.apache.derby.vti.XmlVTI.asList&apos;;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;create function optTrace&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;xmlResourceName varchar( 32672 ),&lt;/li&gt;
	&lt;li&gt;rowTag varchar( 32672 ),&lt;/li&gt;
	&lt;li&gt;parentTags ArrayList,&lt;/li&gt;
	&lt;li&gt;childTags ArrayList&lt;/li&gt;
	&lt;li&gt;)&lt;/li&gt;
	&lt;li&gt;returns table&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;stmtID    int,&lt;/li&gt;
	&lt;li&gt;queryID   int,&lt;/li&gt;
	&lt;li&gt;complete  boolean,&lt;/li&gt;
	&lt;li&gt;summary   varchar( 32672 ),&lt;/li&gt;
	&lt;li&gt;type        varchar( 50 ),&lt;/li&gt;
	&lt;li&gt;estimatedCost        double,&lt;/li&gt;
	&lt;li&gt;estimatedRowCount    int&lt;/li&gt;
	&lt;li&gt;)&lt;/li&gt;
	&lt;li&gt;language java parameter style derby_jdbc_result_set no sql&lt;/li&gt;
	&lt;li&gt;external name &apos;org.apache.derby.vti.XmlVTI.xmlVTI&apos;;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;create view optTrace as&lt;/li&gt;
	&lt;li&gt;select *&lt;/li&gt;
	&lt;li&gt;from table&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;optTrace&lt;/li&gt;
	&lt;li&gt;(&lt;/li&gt;
	&lt;li&gt;&apos;file:///Users/me/derby/mainline/z.xml&apos;,&lt;/li&gt;
	&lt;li&gt;&apos;planCost&apos;,&lt;/li&gt;
	&lt;li&gt;asList( &apos;stmtID&apos;, &apos;queryID&apos;, &apos;complete&apos; ),&lt;/li&gt;
	&lt;li&gt;asList( &apos;summary&apos;, &apos;type&apos;, &apos;estimatedCost&apos;, &apos;estimatedRowCount&apos; )&lt;/li&gt;
	&lt;li&gt;)&lt;/li&gt;
	&lt;li&gt;) v&lt;/li&gt;
	&lt;li&gt;;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;select * from optTrace&lt;/li&gt;
	&lt;li&gt;where stmtID = 6 and complete&lt;/li&gt;
	&lt;li&gt;order by estimatedCost * &amp;lt;/pre&amp;gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;</comment>
                            <comment id="13679570" author="jira-bot" created="Mon, 10 Jun 2013 16:13:10 +0100"  >&lt;p&gt;Commit 1491490 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1491490&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1491490&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Commit derby-6256-02-aa-allowParentTags.diff, allowing XmlVTIs to inherit columns from outer xml elements in which the primary row element is nested.&lt;/p&gt;</comment>
                            <comment id="13679583" author="kmarsden" created="Mon, 10 Jun 2013 16:43:09 +0100"  >&lt;p&gt;My inclination is to put tools in derbytools.jar just on the functional separation that the name implies. I can see your point about it being a server side tool, but in general am concerned about setting a precedent for loading derby.jar up with tools that might cause it to grow larger, especially tools that are not to be part of the public API.  &lt;/p&gt;</comment>
                            <comment id="13680388" author="rhillegas" created="Tue, 11 Jun 2013 14:55:50 +0100"  >&lt;p&gt;Thanks for helping me think through this, Kathey. Note that the XmlVTI class weighs around 6K so it&apos;s very compact. It&apos;s likely that we will want to expose it in the public api some day after we gain more experience with it. I think that it is also likely that we will publicly expose other optional tools which use XmlVTI internally. Thanks.&lt;/p&gt;</comment>
                            <comment id="13680757" author="mikem" created="Tue, 11 Jun 2013 23:20:28 +0100"  >&lt;p&gt;In general I agree with kathey that we should be looking to separate tools/server with clear well understood boundaries.  For me separate jars and separate codelines would be best.  Personally&lt;br/&gt;
I would rather see tools as a separate project from the derby server with maybe even a separate release area.   The server should provide hooks for these kinds of tools, which is what I thought the optional tool work was for, with the&lt;br/&gt;
destination of tools in other jars.  And the more separate the tools are (with clear server supported interfaces), I think the more easily they can be added.  &lt;/p&gt;

&lt;p&gt;I believe existing tools already are not as well tested and not expected to be as bullet proof as other code, so best to make that clear to users also.  Having them in &quot;demo&quot; made that very clear.&lt;br/&gt;
I think most of these tools are meant for developers, meant for debugging, and not meant for production code.  As a developer I think these are useful, and understand that they are likely not tested&lt;br/&gt;
in all cases.   But once they start getting documented in main product, delivered in main product by default it gets hard to tell as a user what is the difference.  &lt;/p&gt;

&lt;p&gt;In general I don&apos;t see these tools as moving us toward the project standards based dbms and would rather see all tools that are developed as part of derby project to be clearly labeled demo and use at own risk.  I would fully support a separate project with a goal of producing production level tools and invite those that want to work on them to do so.&lt;/p&gt;

&lt;p&gt;In the past we have also looked to add these kinds of tools in the debug only server.  Then the production server can be compiled without the code path and code size bloat needed for those debug tools.  We have the build tools framework for this, and the module system allows us to create debug vs production module implementations when necessary.  And doing it this way makes&lt;br/&gt;
a user start a debug server making it very clear that it is not a production mode.&lt;/p&gt;</comment>
                            <comment id="13681386" author="rhillegas" created="Wed, 12 Jun 2013 18:03:07 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Thanks for continuing this discussion. I can move the XmlVTI class into the tools jar if people feel strongly about this. I think of it as similar to the ForeignTableVTI class, which is already in the engine jar. It may look awkward if some of the support VTIs are in the engine jar and some are in the tools jar.&lt;/p&gt;

&lt;p&gt;Note that the ForeignTableVTI is intended for use in production (for ongoing data integration) and for use by tech support during disaster recovery. From discussions on the user list, it&apos;s clear that people use it. This is production code. In my opinion, so is the XmlVTI.&lt;/p&gt;

&lt;p&gt;Right now there are 4 optional tools:&lt;/p&gt;

&lt;p&gt;1) databaseMetaData - This is appropriate for use in production code and we document it.&lt;/p&gt;

&lt;p&gt;2) foreignViews - This is also appropriate for use in production code and we document it.&lt;/p&gt;

&lt;p&gt;3) optimizerTracing - The new xml-style tracing is intended to help diagnose performance problems in production. We don&apos;t currently document either style of optimizer tracing. If we were to document the old-style optimizer trace, I think that all we could tell people would be to send us the output. I think that the xml-style trace could potentially be used to guide a customer to the selection of optimizer overrides for working around a production problem.&lt;/p&gt;

&lt;p&gt;4) optimizerTracingViews - Used in conjunction with xml-style optimizer tracing, this tool can be used in production to guide a customer to a workaround.&lt;/p&gt;

&lt;p&gt;Cloudscape/Derby has always aimed at being an easy-to-use database. But we don&apos;t deliver on this promise when it comes to monitoring/diagnosing production problems. Monitoring and diagnostics are areas where we have under-invested significantly. I don&apos;t know where to draw the line between our monitoring/diagnostic tools and monitoring/diagnostic tools which might be more appropriate for a separate Apache project. But my gut feeling is that we are very far away from that line right now. Within our existing charter, we could devote several releases to building out our monitoring/diagnostic apis. &lt;/p&gt;

&lt;p&gt;The topic of the debug engine probably deserves its own, separate discussion on derby-dev. Derby&apos;s approach to diagnostic information is distinctive and maybe almost unique in our industry. I can&apos;t think of any other product I use which requires me to bring down the application and install separate software in order to run actionable diagnostics. This is clearly awkward for database applications which need to run 24x7. Sometime in the distant past, we seem to have confused the concepts of &quot;development debugging&quot; and &quot;production diagnostics.&quot; Much of our debug code is just for us as we develop features. But some of our debug code is meant to be run in production in order to produce useful diagnostic information. In my opinion, any code that could potentially be useful in production should be in the product. We shouldn&apos;t even ship debug jars as part of our release distributions. The debug jars should only be used during the development of Derby itself. I would not recommend isolating useful production diagnostics in debug code.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13681597" author="mikem" created="Wed, 12 Jun 2013 21:29:54 +0100"  >&lt;p&gt;I agree that debug engine discussion is an orthogonal discussion..  I do think Derby is unique, and I think that is good in many ways.  And the reason I keep raising the resource issues is that&lt;br/&gt;
I think each time we hurt a feature of Derby that is unique and does draw its use.  Derby is uniquely suited to act as an embedded application with a smaller footprint than most other db&apos;s.  It is&lt;br/&gt;
unique that it is written in java and is architected with modules so it has the ability to be different things to different users.  I just want to continue to set precident that this is important, while not&lt;br/&gt;
blocking adding production level support for optional tools.&lt;/p&gt;

&lt;p&gt;We created derbytools.jar for the very reason that some production level tools were not needed by some derby applications and thus we allowed users to decide if they wanted them or not.  It is&lt;br/&gt;
not a production quality issue.  &lt;/p&gt;

&lt;p&gt;Derby continues to meet the needs of some very different applications.  Arguments that make sense for the 24*7 mission critical server application probably don&apos;t apply to the embedded&lt;br/&gt;
lightly weight application that choose it for simple, fast, small standard based sql function library.  Of course 24*7 probably cares nothing about footprint, and will just go ahead and load every&lt;br/&gt;
jar filie it could possibly need, and likely pay boot cost once in forever.  And there are a lot of DB&apos;s that provide just that, but Derby is unique in that it works well at the low end and many DB&apos;s&lt;br/&gt;
don&apos;t.&lt;/p&gt;

&lt;p&gt;So I think my thinking for what goes into derby.jar first starts at the project charter:&lt;br/&gt;
 Apache Derby, an Apache DB subproject, is an open source relational database implemented entirely in Java and available under the Apache License, Version 2.0. Some key advantages include:&lt;/p&gt;

&lt;p&gt;    Derby has a small footprint &amp;#8211; about 2.6 megabytes for the base engine and embedded JDBC driver.&lt;br/&gt;
    Derby is based on the Java, JDBC, and SQL standards.&lt;br/&gt;
    Derby provides an embedded JDBC driver that lets you embed Derby in any Java-based solution.&lt;br/&gt;
    Derby also supports the more familiar client/server mode with the Derby Network Client JDBC driver and Derby Network Server.&lt;br/&gt;
    Derby is easy to install, deploy, and use.&lt;/p&gt;

&lt;p&gt;1) Is it an implementation of a standards based SQL or JDBC feature that can only be implemented in the server and delivered in derby.jar.&lt;br/&gt;
    so even though some derby applications never do updates, I would not have the project deliver a base embedded product that moved update to a different jar.&lt;br/&gt;
2) If it is reasonable for a derby application to not use a given non-standard feature, or a feature that adds overhead to current product then would like effort made&lt;br/&gt;
    to not add the overhead to existing applications.  For me this means at least for things that look like tools to put them in derbytools.jar if they can go there.&lt;br/&gt;
    As I have said in the past it would also be great if new features that add system cats implement themselves such that cats are not created if the feature is&lt;br/&gt;
    not used.  Also features if at all possible should not impact those code paths that don&apos;t use the feature.&lt;/p&gt;

&lt;p&gt;i will address the 4 specfics in another comment.  &lt;/p&gt;</comment>
                            <comment id="13681649" author="mikem" created="Wed, 12 Jun 2013 22:17:49 +0100"  >&lt;p&gt;1) databaseMetaData - This is appropriate for use in production code and we document it.&lt;/p&gt;

&lt;p&gt;2) foreignViews - This is also appropriate for use in production code and we document it.&lt;/p&gt;

&lt;p&gt;I think both 1 &amp;amp; 2 are non-standard tools build on top of exposed Standard table function server technology.  If so I think the tools should go into tools jar, and users who want to&lt;br/&gt;
use it pay the price.  This is a good model for what I think is the right way to provide tool technology in derby.  Implement standards where possible that allow extensions to be&lt;br/&gt;
built outside the core server.  These extensions can be documented/production quality and still not be part of the core server.   Putting it in tools jar makes it obvious that it does&lt;br/&gt;
not affect core technology.&lt;/p&gt;</comment>
                            <comment id="13681660" author="mikem" created="Wed, 12 Jun 2013 22:32:08 +0100"  >&lt;p&gt;3) optimizerTracing - The new xml-style tracing is intended to help diagnose performance problems in production. We don&apos;t currently document either style of optimizer tracing. If we were to document the old-style optimizer trace, I think that all we could tell people would be to send us the output. I think that the xml-style trace could potentially be used to guide a customer to the selection of optimizer overrides for working around a production problem.&lt;/p&gt;

&lt;p&gt;I don&apos;t think old-style optimizer trace is production ready.  It is not documented and not tested as far as I know.  On the other hand it is useful.  So as you said in the past we put this in debug code&lt;br/&gt;
and that made it hard for users.  I assume new style is not really production ready either, as I have not seen much testing, and we are likely looking to improve this based on customer feedback so&lt;br/&gt;
would want it to not get tied to upward compatiblity at this point.  Not sure the intent.  &lt;/p&gt;

&lt;p&gt;As to where to put it, I see many embedded applications are likely to not be able to use it at all no matter what jar, without shutting down/booting.  Others might.  Again I see it as not core, but &lt;br/&gt;
instead optional for those that want to use it.  I was ok with the performance impact description from rick on this feature.  It seemed like those not enabling the tracing did not pay code path&lt;br/&gt;
price.  Would be good to eliminate code bloat default price if possible.  &lt;/p&gt;</comment>
                            <comment id="13681662" author="mikem" created="Wed, 12 Jun 2013 22:33:39 +0100"  >&lt;p&gt;4) optimizerTracingViews - Used in conjunction with xml-style optimizer tracing, this tool can be used in production to guide a customer to a workaround.&lt;/p&gt;

&lt;p&gt;To me this seems obvious tool that has been implemented such that it can be separated from core server, and should go in derbytools.jar.&lt;/p&gt;</comment>
                            <comment id="13682554" author="rhillegas" created="Thu, 13 Jun 2013 19:49:18 +0100"  >&lt;p&gt;Thanks for continuing the discussion about how to factor Derby into jar files, Mike. I think this is a very fruitful discussion and we may be converging on a definition of where the boundaries lie.&lt;/p&gt;

&lt;p&gt;It may be useful to focus on a problem case at the intersection of all of the concerns raised so far:&lt;/p&gt;

&lt;p&gt;i) Runs on a small device&lt;/p&gt;

&lt;p&gt;ii) Must be up and running 24x7&lt;/p&gt;

&lt;p&gt;Examples of such an application might be:&lt;/p&gt;

&lt;p&gt;A) Equipment controller in a hospital, nuclear power plant, or space station.&lt;/p&gt;

&lt;p&gt;B) Switch in a mission-critical network.&lt;/p&gt;

&lt;p&gt;An application like this wants a database product with the following characteristics:&lt;/p&gt;

&lt;p&gt;SMALL) Has a small static footprint.&lt;/p&gt;

&lt;p&gt;COMPLETE) Contains all functionality needed for fast, concurrent multi-user reads and writes, including complex filtering and joins.&lt;/p&gt;

&lt;p&gt;DIAGNOSTIC) Contains all tools we provide for diagnosing and repairing malfunctions and bad performance.&lt;/p&gt;

&lt;p&gt;SPARE) Only faults in the features and tools it actually needs. Unneeded features and tools should not consume CPU, memory, or other constrained resources.&lt;/p&gt;

&lt;p&gt;DWINDLING) Frees constrained resources when features and tools are not in use.&lt;/p&gt;

&lt;p&gt;I think that the debug derby.jar decently addresses COMPLETE and DIAGNOSTIC. It can be argued that it weighs too much to satisfy SMALL.&lt;/p&gt;

&lt;p&gt;I think that the production derby.jar decently addresses SMALL and COMPLETE. However, it does a poor job of addressing DIAGNOSTIC: it&apos;s disappointing that we don&apos;t have line numbers in the stack traces of data-corrupting heisenbugs.&lt;/p&gt;

&lt;p&gt;I don&apos;t think that either version of derby.jar adequately addresses SPARE and DWINDLING. Dag&apos;s work on supporting compact profile 2 was a significant step toward SPARE. In the Java 9 timeframe, I think that we can make more progress toward SPARE by taking advantage of the Java Jigsaw project (&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/projects/jigsaw/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I don&apos;t think that we have given any significant thought to DWINDLING. This suggests that we would need to remove some big, architectural roadblocks. However, there may also be some low-hanging fruit to harvest in the near-term.&lt;/p&gt;

&lt;p&gt;At some point, we may want to move this discussion to a new JIRA, whose intent would be to clarify our jar file boundaries and map out a plan for delivering a derby.jar which would be SMALL, COMPLETE, DIAGNOSTIC, SPARE, and DWINDLING.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13682632" author="rhillegas" created="Thu, 13 Jun 2013 20:54:04 +0100"  >&lt;p&gt;I wanted to share some more thoughts about the boundary between derby.jar and derbytools.jar. In my experience, every real SQL application needs a tool like ij for ongoing maintenance and tuning. Between releases of your application, you always need to pose queries which aren&apos;t in the application yet or which you wouldn&apos;t expose to your end-users. This experience has been confirmed by the structure of JES, the small device stack which my company sells. JES is supposed to run on resource-constrained devices; and it contains both derby.jar and derbytools.jar. Moving code between derby.jar and derbytools.jar will not affect Derby&apos;s static footprint on JES. And I doubt that moving code between derby.jar and derbytools.jar would affect Derby&apos;s static footprint for any real small device application.&lt;/p&gt;

&lt;p&gt;Looking at the sizes of the 10.10 jar files, you can see that derbytools.jar is less than 1/10 the size of derby.jar. Moving code from derby.jar to derbytools.jar doesn&apos;t even significantly affect the size of derby.jar.&lt;/p&gt;

&lt;p&gt;That&apos;s not the point of derbytools.jar.&lt;/p&gt;

&lt;p&gt;I believe that the point of derbytools.jar is to hold code which runs BOTH on the client and on the server. All of the programs in derbytools.jar behave that way.&lt;/p&gt;

&lt;p&gt;I think that derbytools.jar is the wrong location for code which only runs server-side.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13699194" author="rhillegas" created="Wed, 3 Jul 2013 18:16:25 +0100"  >&lt;p&gt;Attaching derby-6256-03-aa-useFileNotURL.diff. This patch changes the meaning of the resource name argument for an XmlVTI. Previously, this was an URL string. Now it is a file name.&lt;/p&gt;

&lt;p&gt;Previously, the xmlResourceName argument was a string of the form &quot;file:///Users/rh161140/derby/mainline/z.txt&quot;. Now it is a file name string, e.g., &quot;/Users/rh161140/derby/mainline/z.txt&quot;. Other file references in our APIs are represented as file name strings so it should be less confusing if XmlVTI follows that existing pattern.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;</comment>
                            <comment id="13699197" author="jira-bot" created="Wed, 3 Jul 2013 18:17:37 +0100"  >&lt;p&gt;Commit 1499484 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1499484&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1499484&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Make XmlVTI take a file name argument rather than a file URL argument; commit derby-6256-03-aa-useFileNotURL.diff.&lt;/p&gt;</comment>
                            <comment id="13699848" author="knutanders" created="Thu, 4 Jul 2013 09:42:58 +0100"  >&lt;p&gt;I haven&apos;t given this much thought, but it struck me that for XmlVTI having it take a URL may in fact be more reasonable. A lot of data on the web is available as XML, and pointing the VTI directly to, say, some RSS feed may be more convenient than downloading it and point the VTI to the local file. Especially if you&apos;re using the client driver and cannot easily add files on the server.&lt;/p&gt;</comment>
                            <comment id="13700629" author="rhillegas" created="Fri, 5 Jul 2013 13:13:54 +0100"  >&lt;p&gt;Thanks, Knut. That&apos;s a good point. I can add a new constructor which takes an URL instead of a string. Because URL is Serializable, that constructor would be usable provided that the user first bound a user-defined type to URL:&lt;/p&gt;

&lt;p&gt;create type URL external name &apos;java.net.URL&apos; language java;&lt;/p&gt;

&lt;p&gt;I think that an URL will survive transmission across the network. Technically, File is Serializable too, so it would be possible to bind a user-defined type to it and add a constructor with a File argument. But I don&apos;t think that File, either in its raw form or in its string form, will be meaningful when sent across a network. The file is only usable when it&apos;s located server-side. It still makes sense to me that the constructor with the string argument should be used for xml resources stored in server-side files. Existing Derby routines represent file arguments as strings and it seems reasonable to me to follow that convention.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13700637" author="knutanders" created="Fri, 5 Jul 2013 13:39:36 +0100"  >&lt;p&gt;I like the simplicity of specifying a URL as a string/varchar better than having to create a user-defined type for the URL. Would it be possible to add another static factory method that takes the URL as a string?&lt;/p&gt;

&lt;p&gt;Something like&lt;/p&gt;

&lt;p&gt;    public static XmlVTI xmlVTIFromURL(String url, String rowTag, String... childTag) &lt;/p&gt;
{ ... }</comment>
                            <comment id="13700638" author="rhillegas" created="Fri, 5 Jul 2013 13:42:24 +0100"  >&lt;p&gt;Hi Knut. Sounds reasonable to me and I agree that it is simpler than having the user create a user-defined type. Thanks.&lt;/p&gt;</comment>
                            <comment id="13701097" author="rhillegas" created="Fri, 5 Jul 2013 20:50:05 +0100"  >&lt;p&gt;Attaching derby-6256-04-aa-addURLFactoryMethodAndTests.diff. This patch adds methods for creating XmlVTIs from URL strings as suggested by Knut. This patch also adds tests for all ways to create XmlVTI table functions. I will run the full tests.&lt;/p&gt;

&lt;p&gt;While I was in there, I pared back the privilege blocks in XmlVTI and OptimizerTracer as Knut recommended in a 2013-07-05 comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;

&lt;p&gt;Add new methods for creating XmlVTIs from URL strings.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java&lt;/p&gt;

&lt;p&gt;Pare back the contents of the privilege block.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/xmlOptimizer.trace&lt;/p&gt;

&lt;p&gt;Tests for XmlVTIs.&lt;/p&gt;</comment>
                            <comment id="13701805" author="knutanders" created="Mon, 8 Jul 2013 07:08:09 +0100"  >&lt;p&gt;Thanks, Rick. The patch looks fine to me. +1&lt;/p&gt;</comment>
                            <comment id="13701982" author="jira-bot" created="Mon, 8 Jul 2013 14:00:35 +0100"  >&lt;p&gt;Commit 1500706 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1500706&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1500706&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Add basic tests for XmlVTIs, including a new way to create XmlVTIs from url strings; tests passed cleanly on derby-6256-04-aa-addURLFactoryMethodAndTests.diff.&lt;/p&gt;</comment>
                            <comment id="13702459" author="dyret" created="Mon, 8 Jul 2013 22:29:21 +0100"  >&lt;p&gt;Hi Rick. Could this have an impact on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5899&quot; title=&quot;Modify the SubversionLogVTI demo  to have a jira_issue column&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5899&quot;&gt;DERBY-5899&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13703260" author="rhillegas" created="Tue, 9 Jul 2013 14:35:46 +0100"  >&lt;p&gt;Thanks for noticing that, Dyre. I have added a comment to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5899&quot; title=&quot;Modify the SubversionLogVTI demo  to have a jira_issue column&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5899&quot;&gt;DERBY-5899&lt;/a&gt;, recommending a solution which involves the XmlVTI in the vti package. Thanks.&lt;/p&gt;</comment>
                            <comment id="13844549" author="rhillegas" created="Tue, 10 Dec 2013 19:05:36 +0000"  >&lt;p&gt;Attaching derby-6256-05-aa-javadocTypo.diff. This patch fixes a typo in the header javadoc for XmlVTI.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;</comment>
                            <comment id="13844550" author="jira-bot" created="Tue, 10 Dec 2013 19:06:33 +0000"  >&lt;p&gt;Commit 1549938 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1549938&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1549938&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Fix typo in javadoc header of XmlVTI; commit derby-6256-05-aa-javadocTypo.diff.&lt;/p&gt;</comment>
                            <comment id="13894828" author="rhillegas" created="Fri, 7 Feb 2014 18:46:23 +0000"  >&lt;p&gt;The vti demos use an old version of the XmlVTI. Rather than maintain that stale version, I think that we should convert the vti demos to  use the new version. Along the way, we should consider packaging the vti demos the same way that the other demos are packaged.&lt;/p&gt;</comment>
                            <comment id="13901901" author="rhillegas" created="Fri, 14 Feb 2014 20:26:34 +0000"  >&lt;p&gt;Attaching derby-6256-06-aa-revampVTIdemos.diff. This patch modernizes the code in derbyDemo/vtis.&lt;/p&gt;

&lt;p&gt;At this point, much of the code prototyped by the VTI demos has moved into the product. XmlVTI is now part of the public api and the foreignViews optional tool provides a standard way to view a foreign database.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Eliminates the early version of XmlVTI which appeared in the VTI demos. References to XmlVTI now point at the version in the public api.&lt;/p&gt;

&lt;p&gt;2) Eliminates the support classes and script for viewing a MySQL database. That support is now provided by the documented foreignViews optional tool.&lt;/p&gt;

&lt;p&gt;3) Simplifies the README file.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/demo/vtis/sql/demoFileVtis.sql&lt;br/&gt;
D       java/demo/vtis/sql/demoForeignDbmsVtis.sql&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/Subscription.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/SnapshotQuery.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/snapshot/SubscriptionSignature.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/VTIHelper.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XmlVTI.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryVTIHelper.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/XMLRow.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/QueryRow.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/core/VTITemplate.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/example/VTIs.java&lt;br/&gt;
M       java/demo/vtis/java/org/apache/derbyDemo/vtis/example/DerbyJiraReportVTI.java&lt;br/&gt;
M       java/demo/vtis/java/org/apache/derbyDemo/vtis/example/ApacheServerLogVTI.java&lt;br/&gt;
D       java/demo/vtis/java/org/apache/derbyDemo/vtis/example/WorldDBSnapshot.java&lt;br/&gt;
M       java/demo/vtis/README&lt;/p&gt;</comment>
                            <comment id="13901905" author="jira-bot" created="Fri, 14 Feb 2014 20:29:40 +0000"  >&lt;p&gt;Commit 1568509 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1568509&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1568509&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Modernize the vti demos and eliminate many obsolete classes; commit derby-6256-06-aa-revampVTIdemos.diff.&lt;/p&gt;</comment>
                            <comment id="13921558" author="myrna" created="Wed, 5 Mar 2014 22:53:51 +0000"  >&lt;p&gt;Looks like fixes have gone in, will this issue be closed, or does it need to stay open until the related issues are fixed?&lt;/p&gt;</comment>
                            <comment id="13921933" author="rhillegas" created="Thu, 6 Mar 2014 02:41:39 +0000"  >&lt;p&gt;Thanks for that nudge, Myrna. Resolving this issue.&lt;/p&gt;</comment>
                            <comment id="14057793" author="rhillegas" created="Thu, 10 Jul 2014 19:34:03 +0100"  >&lt;p&gt;Attaching derby-6256-07-aa-constructorJavadoc.diff. This patch improves the javadoc for the constructor of XmlVTI.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;</comment>
                            <comment id="14057794" author="jira-bot" created="Thu, 10 Jul 2014 19:34:52 +0100"  >&lt;p&gt;Commit 1609549 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1609549&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1609549&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; title=&quot;Move the XmlVTI into the product.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6256&quot;&gt;&lt;del&gt;DERBY-6256&lt;/del&gt;&lt;/a&gt;: Improve javadoc for constructor for XmlVTI; commit derby-6256-07-aa-constructorJavadoc.diff.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12602710">DERBY-5899</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12690886">DERBY-6459</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12638394">DERBY-6123</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12695615">DERBY-6482</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12586776" name="derby-6256-01-aa-move-XmlVTI-into-product.diff" size="9961" author="rhillegas" created="Fri, 7 Jun 2013 20:40:30 +0100"/>
                            <attachment id="12587077" name="derby-6256-02-aa-allowParentTags.diff" size="10431" author="rhillegas" created="Mon, 10 Jun 2013 16:11:29 +0100"/>
                            <attachment id="12590673" name="derby-6256-03-aa-useFileNotURL.diff" size="2394" author="rhillegas" created="Wed, 3 Jul 2013 18:16:25 +0100"/>
                            <attachment id="12591037" name="derby-6256-04-aa-addURLFactoryMethodAndTests.diff" size="107103" author="rhillegas" created="Fri, 5 Jul 2013 20:50:05 +0100"/>
                            <attachment id="12618081" name="derby-6256-05-aa-javadocTypo.diff" size="470" author="rhillegas" created="Tue, 10 Dec 2013 19:05:36 +0000"/>
                            <attachment id="12629109" name="derby-6256-06-aa-revampVTIdemos.diff" size="126479" author="rhillegas" created="Fri, 14 Feb 2014 20:26:34 +0000"/>
                            <attachment id="12655052" name="derby-6256-07-aa-constructorJavadoc.diff" size="1134" author="rhillegas" created="Thu, 10 Jul 2014 19:34:03 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Jun 2013 19:44:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>332097</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzf4tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>332426</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>