<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:30:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2381/DERBY-2381.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2381] ParameterMappingTest fails due to ArrayIndexOutOfBoundsException  executing a procedure</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2381</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The test ParameterMappingTest fails due to a connection reset error during tearDown.  Commenting out the teardown actions I see that the real cause of the connection reset is an ArrayIndexOutOfBoundsException executing a callable statement.  I have not narrowed it down more than this.  Currently the test runs only for embedded. It should be reenabled for client once this bug is fixed.  Below is the stack trace:&lt;/p&gt;


&lt;p&gt;java.lang.ArrayIndexOutOfBoundsException&lt;br/&gt;
	at java.lang.System.arraycopy(Native Method)&lt;br/&gt;
	at org.apache.derby.client.net.Reply.shiftBuffer(Reply.java:107)&lt;br/&gt;
	at org.apache.derby.client.net.Reply.ensureSpaceInBufferForFill(Reply.java:153)&lt;br/&gt;
	at org.apache.derby.client.net.Reply.fill(Reply.java:165)&lt;br/&gt;
	at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java(Compiled Code))&lt;br/&gt;
	at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317)&lt;br/&gt;
	at org.apache.derby.client.net.Reply.peekCodePoint(Reply.java:1008)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:324)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:105)&lt;br/&gt;
	at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:176)&lt;br/&gt;
	at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1464)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2151)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1571)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1556)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testParameterMapping(ParameterMappingTest.java:487)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:60)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:391)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:76)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12363835">DERBY-2381</key>
            <summary>ParameterMappingTest fails due to ArrayIndexOutOfBoundsException  executing a procedure</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Feb 2007 21:41:38 +0000</created>
                <updated>Mon, 14 May 2007 17:31:44 +0100</updated>
                            <resolved>Thu, 3 May 2007 21:39:59 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12481369" author="kmarsden" created="Thu, 15 Mar 2007 23:05:58 +0000"  >&lt;p&gt;I am not having any luck getting a repro for this protocol problem outside of the test.  Below is my attempt to recreate what is happenning at the time of the error, but this passes just fine.&lt;/p&gt;

&lt;p&gt;  public static void main(String[] args) throws Exception {&lt;/p&gt;

&lt;p&gt;        Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);&lt;br/&gt;
        Connection conn =DriverManager.getConnection(&quot;jdbc:derby://localhost:1527/wombat;create=true;traceFile=trace.out&quot;);&lt;br/&gt;
        Statement s = conn.createStatement();&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            s.executeUpdate(&quot;DROP PROCEDURE PMP.TYPE_AS&quot;);
        }
&lt;p&gt; catch (SQLException se) {}&lt;/p&gt;

&lt;p&gt;        String procSQL = &quot;CREATE PROCEDURE PMP.TYPE_AS(&quot; +&lt;br/&gt;
        &quot;IN P1 &quot; +   &quot;SMALLINT&quot; +&lt;br/&gt;
        &quot;, INOUT P2 &quot; + &quot;SMALLINT&quot; +&lt;br/&gt;
        &quot;, OUT P3 &quot; + &quot;SMALLINT&quot; +&lt;/p&gt;

&lt;p&gt;        &quot;) LANGUAGE JAVA PARAMETER STYLE JAVA NO SQL &quot; +&lt;br/&gt;
        &quot; EXTERNAL NAME &apos;org.apache.derbyTesting.functionTests.util.ProcedureTest.pmap&apos;&quot;;&lt;/p&gt;

&lt;p&gt;        s.executeUpdate(procSQL);&lt;/p&gt;

&lt;p&gt;        CallableStatement csp = conn.prepareCall(&quot;CALL PMP.TYPE_AS(?, ?, ?)&quot;);&lt;br/&gt;
        csp.registerOutParameter(2, java.sql.Types.INTEGER);&lt;br/&gt;
        csp.registerOutParameter(3, java.sql.Types.INTEGER);&lt;br/&gt;
        csp.setShort(1, (short) 32);&lt;br/&gt;
        csp.setInt(2, (short) 32);&lt;br/&gt;
        csp.execute();&lt;br/&gt;
         csp.getInt(2);&lt;br/&gt;
        csp.getInt(3);&lt;br/&gt;
        csp.registerOutParameter(2, java.sql.Types.BIGINT);&lt;br/&gt;
        csp.registerOutParameter(3, java.sql.Types.BIGINT);&lt;br/&gt;
        csp.setShort(1, (short) 32);&lt;br/&gt;
        csp.setInt(2, (short) 32);&lt;br/&gt;
       // Error should occur on execution&lt;br/&gt;
        csp.execute();&lt;/p&gt;

&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="12481962" author="knutanders" created="Sun, 18 Mar 2007 17:21:55 +0000"  >&lt;p&gt;I think there is a bug somewhere around client.net.Reply.getData()&lt;br/&gt;
and/or client.net.NetStatementReply.parseFDODTA(), but I don&apos;t know&lt;br/&gt;
the code well enough to say exactly what&apos;s wrong and how to fix&lt;br/&gt;
it. Anyway, here are my observations:&lt;/p&gt;

&lt;p&gt;There is a call to Reply.getData() when ddmScalarLen_ is -1 before the&lt;br/&gt;
test fails (according to the code coverage report at&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~fuzzylogic/codecoverage/428586/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~fuzzylogic/codecoverage/428586/&lt;/a&gt;, it&apos;s always&lt;br/&gt;
-1 when getData() is called). -1 means that the DDM length is unknown&lt;br/&gt;
because the DDM is streamed. getData() calls adjustLengths() which has&lt;br/&gt;
this line:&lt;/p&gt;

&lt;p&gt;        ddmScalarLen_ -= length;&lt;/p&gt;

&lt;p&gt;This will give ddmScalarLen_ a negative value different from -1 (-4),&lt;br/&gt;
which is an illegal state.&lt;/p&gt;

&lt;p&gt;At a later point in the test, NetStatementReply.parseFDODTA() is&lt;br/&gt;
called, and ddmScalarLen_ still has the illegal value&lt;br/&gt;
-4. parseFDODTA() passes the value of ddmScalarLen_ to&lt;br/&gt;
ensureBLayerDataInBuffer() to ensure that there is enough data to read&lt;br/&gt;
from the buffer. Since the argument is negative, no more data is&lt;br/&gt;
fetched into the buffer.&lt;/p&gt;

&lt;p&gt;Since parseFDODTA() has called ensureBLayerDataInBuffer(), it assumes&lt;br/&gt;
that it has enough data and uses &quot;fast&quot; methods to read the data. The&lt;br/&gt;
fast methods read data without calling ensureALayerDataInBuffer()&lt;br/&gt;
(presumably because the caller has already called it). Since no more&lt;br/&gt;
data was read when ensureBLayerDataInBuffer() was called,&lt;br/&gt;
parseFastSQLDTARDdata() and getFastData() suffer from an undetected&lt;br/&gt;
buffer underrun. The underrun causes false data to be read from the&lt;br/&gt;
buffer, and it makes pos_ (the position of the first available byte in&lt;br/&gt;
the buffer) greater than count_ (the position after the last available&lt;br/&gt;
byte in the buffer).&lt;/p&gt;

&lt;p&gt;pos_ should never be greater than count_, and when Reply.shiftBuffer()&lt;br/&gt;
is called later, this will make the length argument to&lt;br/&gt;
System.arraycopy() negative, which is why we get an&lt;br/&gt;
ArrayIndexOutOfBoundsException.&lt;/p&gt;</comment>
                            <comment id="12482830" author="kmarsden" created="Wed, 21 Mar 2007 16:56:45 +0000"  >&lt;p&gt;Thanks Knut Anders for your insights on this problem.  I don&apos;t totally understand all you wrote but am suitably impressed and convinced you are on the right track.  I have had a really hard time trying to narrow this issue down to a smaller test case.  Do you have thoughts on how that could be done?  &lt;/p&gt;</comment>
                            <comment id="12483577" author="knutanders" created="Fri, 23 Mar 2007 13:06:05 +0000"  >&lt;p&gt;I think your test case is pretty close. The only difference from the JUnit test, is that this line&lt;br/&gt;
  csp.setInt(2, (short) 32);&lt;br/&gt;
should be replaced with&lt;br/&gt;
  csp.setLong(2, 32L);&lt;/p&gt;

&lt;p&gt;Attaching a repro which reliably reproduces the ArrayIndexOutOfBoundsException in my environment.&lt;/p&gt;</comment>
                            <comment id="12483580" author="knutanders" created="Fri, 23 Mar 2007 13:08:24 +0000"  >&lt;p&gt;When I run the repro, I get this exception on the server:&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException: java.lang.Integer&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeFdocaVal(DRDAConnThread.java:7255)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeFDODTA(DRDAConnThread.java:6692)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:3847)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:955)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:275)&lt;/p&gt;</comment>
                            <comment id="12483659" author="kmarsden" created="Fri, 23 Mar 2007 17:14:25 +0000"  >&lt;p&gt;Thanks Knut Anders!&lt;/p&gt;</comment>
                            <comment id="12492113" author="kmarsden" created="Thu, 26 Apr 2007 22:00:00 +0100"  >&lt;p&gt;The  ClassCastException occurs because the client sends the parameter type as DRDA_TYPE_NINTEGER8  (0x17),&lt;br/&gt;
because the output parameter is registered as BIGINT and a long value is set with setLong.  The server then does a CallableStatement.getObject()  which is an Integer because the actual procedure has SMALLINT parameters. The server then attempts to cast it to a Long in DRDAConnThread.writeFdocaVal()  &lt;/p&gt;

&lt;p&gt;case DRDAConstants.DRDA_TYPE_NINTEGER8:&lt;br/&gt;
					writer.writeLong(((Long) val).longValue());&lt;br/&gt;
					break;&lt;/p&gt;

&lt;p&gt;I am not sure if&lt;br/&gt;
a) The client should convert the parameter to  DRDA_TYPE_NINTEGER before sending it.&lt;br/&gt;
b)  The server code should handle the conversion if the parameter type sent by the client does not match the actual type.&lt;/p&gt;

&lt;p&gt;I&apos;d appreciate any insight on which approach is best.&lt;/p&gt;</comment>
                            <comment id="12492127" author="knutanders" created="Thu, 26 Apr 2007 23:01:18 +0100"  >&lt;p&gt;Would it work to cast the value to Number instead of Integer/Long/Float/Double/BigInteger etc in writeFdocaVal()?&lt;/p&gt;</comment>
                            <comment id="12492150" author="kmarsden" created="Fri, 27 Apr 2007 00:07:17 +0100"  >&lt;p&gt;The number cast  seems to work ok for everything but BigDecimal as there is no Number.bigDecimalValue(), but I keep thinking it is somehow wrong to be changing the type of the output parameter value, when returning it to the client. I think there might be cases where the output parameter value might get changed when being converted.  I think we need to be able to send the parameter in as one type and out as another, so that when sending output parameters, we switch on the actual type of the parameter, not on the type sent by client.  &lt;/p&gt;


</comment>
                            <comment id="12493238" author="kmarsden" created="Thu, 3 May 2007 00:06:25 +0100"  >&lt;p&gt;Attaching a patch for this issue.  Formerly, the server would rely on the input parameter type information received from the client to determine the output parameter type.  This patch changes the server to look at the parameter metadata to determine the drda type to send.&lt;br/&gt;
It also enables the test ParameterMappingTest for client.&lt;/p&gt;

</comment>
                            <comment id="12493239" author="kmarsden" created="Thu, 3 May 2007 00:08:15 +0100"  >&lt;p&gt;stat file for diff.  Also neglected to say that I ran derbyall and suites.All with the patch.   I got two failures which I also get in an unchanged client and seem unrelated to my change. Likely an environment issue.&lt;/p&gt;</comment>
                            <comment id="12493430" author="kmarsden" created="Thu, 3 May 2007 18:30:04 +0100"  >&lt;p&gt;After syncing up with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2506&quot; title=&quot;Adding the locator information to FD:OCA descriptor (FDODSC) andFD:OCA data (FDODTA)  of the SQLDTA objects&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2506&quot;&gt;&lt;del&gt;DERBY-2506&lt;/del&gt;&lt;/a&gt; (  PreparedCallable_DRDA_v5.diff, adding some BLOB locator support.) the test case attached to this issue and ParameterMappingTest no longer pass with network server.&lt;br/&gt;
The new trace is below. There is no exception on the server.&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException&lt;br/&gt;
        at java.lang.System.arraycopy(Native Method)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.shiftBuffer(Reply.java:107)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.ensureSpaceInBufferForFill(Reply.java:153)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.fill(Reply.java:165)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java:215)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.peekCodePoint(Reply.java:1008)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:324)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:105)&lt;br/&gt;
        at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:176)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1464)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2157)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1577)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.execute(PreparedStatement.java:1562)&lt;br/&gt;
        at d2381.main(D2381.java:39)&lt;/p&gt;</comment>
                            <comment id="12493493" author="kmarsden" created="Thu, 3 May 2007 21:01:34 +0100"  >&lt;p&gt;The problem running ParameterMappingTest was an issue with my environment.  It passes now. I will rerun tests and check in.&lt;/p&gt;</comment>
                            <comment id="12493510" author="kmarsden" created="Thu, 3 May 2007 21:39:59 +0100"  >&lt;p&gt;Committed revision 534985&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12362740">DERBY-2333</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12356674" name="DERBY-2381_diff.txt" size="8262" author="kmarsden" created="Thu, 3 May 2007 00:06:25 +0100"/>
                            <attachment id="12356675" name="DERBY-2381_stat.txt" size="296" author="kmarsden" created="Thu, 3 May 2007 00:08:15 +0100"/>
                            <attachment id="12354069" name="d2381.java" size="1287" author="knutanders" created="Fri, 23 Mar 2007 13:06:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 18 Mar 2007 17:21:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23031</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy12en:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40040</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>