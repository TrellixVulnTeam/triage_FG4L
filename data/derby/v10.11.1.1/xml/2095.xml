<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:18:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2095/DERBY-2095.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2095] Add the ability to populate a database for the order entry toolkit based upon the TPC-C specification.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2095</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description></description>
                <environment></environment>
        <key id="12356017">DERBY-2095</key>
            <summary>Add the ability to populate a database for the order entry toolkit based upon the TPC-C specification.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12353730">DERBY-1987</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="skambha">Sunitha Kambhampati</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Nov 2006 17:47:53 +0000</created>
                <updated>Wed, 24 Jan 2007 01:06:18 +0000</updated>
                            <resolved>Tue, 23 Jan 2007 21:59:09 +0000</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12465574" author="skambha" created="Wed, 17 Jan 2007 21:58:53 +0000"  >&lt;p&gt;I am attaching a patch (oe.load.p1.diff.txt) for review for the load(population) phase for the Order Entry benchmark.&lt;/p&gt;

&lt;p&gt;0)Add interface for Load (oe\client\Load.java) so that the load framework is extensible to have different load &lt;/p&gt;

&lt;p&gt;implementations. &lt;br/&gt;
1)Add the implementation to do the database population using simple insert sql statements per TPC-C specification&lt;br/&gt;
Note, this implementation is single threaded. But in future we can add support for  multiple worker threads to do the &lt;/p&gt;

&lt;p&gt;load phase. (oe\load\SimpleInsert.java)&lt;br/&gt;
2) Add cardinality checks for all the tables &lt;br/&gt;
3) Add driver that includes performance tests for load phase. (oe\run\Load.java)&lt;br/&gt;
4) Add the framework to test the load for a scale of 1 to use it as a functional test. (oe\test\OETest and LoadTester)&lt;br/&gt;
5) Remove the earlier skeleton class that loaded only the schema (Load.java is deleted) and instead&lt;br/&gt;
Populate.java takes care of providing that functionality. &lt;/p&gt;

&lt;p&gt;svn stat:&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\load&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\load\SimpleInsert.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\system\oe\test\OETest.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\test\LoadTester.java&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\system\oe\run\Load.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\run\Populate.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\util&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\util\OERandom.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\client\Load.java&lt;/p&gt;


&lt;p&gt;To run the benchmark:&lt;/p&gt;

&lt;p&gt;By default, this test will load schema, create constraints before load, and populate database for a scale of 1 and then &lt;/p&gt;

&lt;p&gt;perform checks on the tables.&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.system.oe.run.Populate&lt;/p&gt;

&lt;p&gt;The test takes the following arguments:&lt;br/&gt;
/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Populate class takes in following arguments currently:&lt;/li&gt;
	&lt;li&gt;Usage: java org.apache.derbyTesting.system.oe.run.Populate options&lt;/li&gt;
	&lt;li&gt;Options:&lt;/li&gt;
	&lt;li&gt;&amp;lt;OL&amp;gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;LI&amp;gt;-scale warehouse scaling factor. Takes a short value. If not specified defaults to 1&lt;/li&gt;
	&lt;li&gt;&amp;lt;LI&amp;gt;-createConstraintsBeforeLoad create constraints before initial load of data, takes a boolean value. If not&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;specified, defaults to true&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;LI&amp;gt;-doChecks check consistency of data, takes a boolean value. If not specified, defaults to true&lt;/li&gt;
	&lt;li&gt;&amp;lt;LI&amp;gt;-help prints usage&lt;/li&gt;
	&lt;li&gt;&amp;lt;/OL&amp;gt;&lt;/li&gt;
	&lt;li&gt;To load database with scale of 2, to load constraints after the population,&lt;/li&gt;
	&lt;li&gt;and to not do any checks, the command to run the test is as follows:&lt;/li&gt;
	&lt;li&gt;&amp;lt;BR&amp;gt;&lt;/li&gt;
	&lt;li&gt;java org.apache.derbyTesting.system.oe.run.Populate -scale 2 -doChecks false -createConstraintsBeforeLoad false&lt;/li&gt;
	&lt;li&gt;&amp;lt;BR&amp;gt;&lt;br/&gt;
 */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I plan to add some consistency checks also in another later patch. &lt;/p&gt;

&lt;p&gt;Can someone please take a look at this. &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Sunitha.&lt;/p&gt;</comment>
                            <comment id="12465627" author="djd" created="Thu, 18 Jan 2007 00:42:56 +0000"  >&lt;p&gt;I&apos;ll look at committing this.&lt;/p&gt;</comment>
                            <comment id="12465632" author="djd" created="Thu, 18 Jan 2007 01:12:34 +0000"  >&lt;p&gt;I see that you modeled &apos;LoadTester&apos; on &apos;OperationsTester&apos; but I think it&apos;s overkill. This is because most of the methods in  LoadTester are not testing the Load interface, instead they are consistent across any type of load. Thus I think the tests for the row counts can simply be moved into OETest and thus remove the &quot;duplicate&quot; methods that exist now. (OETest.testOrdersRows and LoadTester.testOrdersRows).&lt;/p&gt;

&lt;p&gt;I like the Load interface as a concept but I&apos;m trying to understand why the individual table load methods exist on it and the rowsInTable method is there?&lt;/p&gt;

&lt;p&gt;Seems like the populateAllTables() is sufficient to load the data, when would the other methods be called through the interface?&lt;/p&gt;

&lt;p&gt;I think the SimpleInsert should not have this constructor&lt;br/&gt;
public SimpleInsert(Connection conn, short scale) throws SQLException&lt;br/&gt;
and instead require callers to use the setupLoad on the interface.&lt;br/&gt;
OETest should be testing via the load interface, using setupLoad(Connection, short) rather than the specific constructor.&lt;/p&gt;

&lt;p&gt;Assuming the code works (testing now) I&apos;ll commit the patch shortly, and the above items can be a later cleanup.&lt;/p&gt;</comment>
                            <comment id="12465636" author="skambha" created="Thu, 18 Jan 2007 01:58:29 +0000"  >&lt;p&gt;Thanks Dan for your comments. I agree  the LoadTester is a overkill. I&apos;ll clean it up.&lt;br/&gt;
&amp;gt;I like the Load interface as a concept but I&apos;m trying to understand why the individual table load methods exist &amp;gt;on it and the rowsInTable method is there?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;Seems like the populateAllTables() is sufficient to load the data, when would the other methods be called through the interface?&lt;br/&gt;
Currently for the Order Entry implementation, populateAllTables will be sufficient.   &lt;br/&gt;
My original intention when adding those methods were thinking if this would be useful for other scenarios/test in the future, thinking more of building blocks concept for tests..   Does that make sense or do you think this may be just overkill.. ?&lt;/p&gt;

&lt;p&gt;I&apos;ll cleanup the SimpleInsert constructor in a followup patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12465643" author="djd" created="Thu, 18 Jan 2007 03:49:50 +0000"  >&lt;p&gt;Also the Populate class contains the same checks as LoadTester. On of the nice things about Junit test fixtures is that it&apos;s easy to hook them together. One can see test fixtures as building blocks.&lt;/p&gt;

&lt;p&gt;So if Populate needs to run the tests it could just include checks indvidually, like:&lt;/p&gt;

&lt;p&gt;    suite.addTest(new OETest(&quot;testOrdersRows&quot;));&lt;/p&gt;

&lt;p&gt;or through some suite like:&lt;/p&gt;

&lt;p&gt;    suite.addTest(OETest.checkAllRowCounts());&lt;/p&gt;

&lt;p&gt;Though I think it would be better to have the checks be in a separate class, e.g. Checks, and have OETest and Populate include fixtures from Checks.&lt;/p&gt;</comment>
                            <comment id="12465644" author="djd" created="Thu, 18 Jan 2007 03:55:32 +0000"  >&lt;p&gt;It&apos;s cool that Populate also runs as a pure-Junit test without having to call its main method (as a test anyway since it will default to scale=1).&lt;br/&gt;
Looking at the code though, the setUp method will be called for each fixture, thus as it stands many SimpleInsert objects will be created though only one is actually needed. I think with the clean up of the checks that most likely will disappear.&lt;/p&gt;</comment>
                            <comment id="12465645" author="djd" created="Thu, 18 Jan 2007 04:40:38 +0000"  >&lt;p&gt;It&apos;s not so cool that Populate had a CleanDatabaseSetup decorator that cleaned up the database, thus dropping all the insert rows. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I removed that from the commit so I could look at the data.&lt;/p&gt;

&lt;p&gt;The loaded data does not match the TPC-C spec in one important factor. In the specification identifiers start at 1 (one), e.g. 1-10 for a district identifier, but the patch (and committed) code start with 0 (zero), e.g. 0-9 for district. I know to look out for this because I wasted time once trying to figure out why a TPC-A bechmark was not working at a hardware vendor&apos;s site. I discovered the cause was some of the system was using zero-based identifiers and the rest was one-based. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; In fact double checking the committed code seems to be inconsistent, warehouse and district are 0 based but customer is 1 based, I didn&apos;t check the rest.&lt;/p&gt;

&lt;p&gt;Committed revision 497297 - Thanks Sunitha&lt;/p&gt;

&lt;p&gt;On the load improvements I can&apos;t see any need for per-table loading in the short term. I can see a near-term requirement for incremental loads, e.g. load data for an additional N warehouses. That could be some later improvement.&lt;/p&gt;</comment>
                            <comment id="12466200" author="skambha" created="Sat, 20 Jan 2007 02:32:17 +0000"  >&lt;p&gt;Thanks very much Dan for your review comments. I am glad you caught the 0 and 1 based inconsistency.&lt;/p&gt;

&lt;p&gt;I am attaching a patch (derby2095.p2.diff.txt) that incorporates the review comments, cleanup, and also adds some tests for consistency checks.&lt;/p&gt;

&lt;p&gt;Details are as follows:&lt;br/&gt;
1) Add a new class Checks. This class has fixtures to test for rowcounts, as well as the consistency checks mentioned in Section 3.3.2.1 to 3.3.2.4 of TPC-C specification.&lt;br/&gt;
2) Cleanup  Load interface to remove the single table loads&lt;br/&gt;
3) Remove LoadTester as it is no longer needed&lt;br/&gt;
4) Push fixtures to test the rowcounts to the Checks class from the OETest.OETest as well as the Populate test call test fixtures from Checks class.&lt;br/&gt;
6) Remove SimpleInsert(Connection,short) constructor as it is no longer needed.&lt;br/&gt;
7) Changes in SimpleInsert to make all tables 1 based.&lt;br/&gt;
8) Add a new Test Class -Schema to load the schema and cleanup code in OETest and Populate. &lt;/p&gt;

&lt;p&gt;Also note:&lt;br/&gt;
&amp;#8211; Now that OETest will call the Schema fixtures to run the test, there will be output printed on System.out for the performance response time numbers for the schema creation also.&lt;/p&gt;

&lt;p&gt;&amp;#8211; With this set of cleanup, SimpleInsert object in setUp of Populate will only be created once, for the load test which is required.&lt;br/&gt;
__________________________&lt;/p&gt;

&lt;p&gt;To run the test, its the same command as before. Now there will be 4 more tests run that includes the consistency conditions 1 to 4 if you enable the doChecks option.&lt;/p&gt;

&lt;p&gt;Some e.g&lt;br/&gt;
//scale 1&lt;br/&gt;
java org.apache.derbyTesting.system.oe.run.Populate&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.system.oe.run.Populate -scale 2 -doChecks false -createConstraintsBeforeLoad false&lt;/p&gt;


&lt;p&gt;svn stat:&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\system\oe\load\SimpleInsert.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\system\oe\test\OETest.java&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\system\oe\test\LoadTester.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\run\Checks.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\system\oe\run\Schema.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\system\oe\run\Populate.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\system\oe\client\Load.java&lt;/p&gt;

&lt;p&gt;Can someone please review this patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12466818" author="djd" created="Tue, 23 Jan 2007 20:14:35 +0000"  >&lt;p&gt;Patch 2095.p2.diff.txt Committed revision 499116 - Thanks Sunitha&lt;/p&gt;</comment>
                            <comment id="12466838" author="skambha" created="Tue, 23 Jan 2007 21:59:09 +0000"  >&lt;p&gt;Thanks Dan for the commits.  &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12349300" name="derby2095.p2.diff.txt" size="45332" author="skambha" created="Sat, 20 Jan 2007 02:29:37 +0000"/>
                            <attachment id="12349121" name="oe.load.p1.diff.txt" size="62055" author="skambha" created="Wed, 17 Jan 2007 21:57:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Jan 2007 21:58:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30267</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy13kf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40228</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>