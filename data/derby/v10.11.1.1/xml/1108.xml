<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:26:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1108/DERBY-1108.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1108] The test jdbcapi/setTransactionIsolation.java fails with ibm jvm1.5</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1108</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The test  jdbcapi/setTransactionIsolation.java fails with ibmjvm15.  I think the cause of this failure is , the jvm is not throwing an exception while trying to change the transaction isolation when there is holdable cursor on  a resultset. Other jvms like sun jdk1.5, ibm142 throws the expected exception. while ibm15 does allow to change the transaction isolation when there is a hold cursor on a result set.&lt;/p&gt;

&lt;p&gt;Already reported this issue with the ibmjvm people and they are looking in to it&lt;/p&gt;</description>
                <environment>java version &amp;quot;1.5.0&amp;quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build pwi32dev-20051104)&lt;br/&gt;
IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP x86-32 j9vmwi3223-2005110&lt;br/&gt;
3 (JIT enabled)&lt;br/&gt;
J9VM - 20051027_03723_lHdSMR&lt;br/&gt;
JIT  - 20051027_1437_r8&lt;br/&gt;
GC   - 20051020_AA)&lt;br/&gt;
JCL  - 20051102</environment>
        <key id="12330232">DERBY-1108</key>
            <summary>The test jdbcapi/setTransactionIsolation.java fails with ibm jvm1.5</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mkutty">Manjula Kutty</assignee>
                                    <reporter username="mkutty">Manjula Kutty</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Mar 2006 08:29:52 +0000</created>
                <updated>Mon, 29 Jun 2009 23:58:05 +0100</updated>
                            <resolved>Mon, 20 Nov 2006 15:54:41 +0000</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12370576" author="mkutty" created="Thu, 16 Mar 2006 03:54:43 +0000"  >&lt;p&gt;The stack trace given by all other jvms other than ibm15 is like this :&lt;/p&gt;

&lt;p&gt;ERROR X0X03: Invalid transaction state - held cursor requires same isolation lev&lt;br/&gt;
el&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardEx&lt;br/&gt;
ception.java:301)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIs&lt;br/&gt;
olationLevel(GenericLanguageConnectionContext.java:2353)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(Em&lt;br/&gt;
bedConnection.java:1163)&lt;br/&gt;
        at test.main(test.java:57)&lt;br/&gt;
null&lt;/p&gt;


&lt;p&gt;Does anybody know how to track down which JDBC call is causing the problem so that you can give that information to the jvm team working on the issue?&lt;/p&gt;</comment>
                            <comment id="12370613" author="kmarsden" created="Thu, 16 Mar 2006 07:57:36 +0000"  >&lt;p&gt;Yes. It is so much harder when the problem is that you are &lt;b&gt;not&lt;/b&gt;  throwing the error.   You have to trace back through the code and figure out what return value was not the value  expected.   My line numbers don&apos;t match up to yours but presumably verifyAllHeldResultSetsAreClosed() is returning false instead of the expected true value.&lt;/p&gt;

&lt;p&gt;If you look at verifyAllHeldResultSetsAreClosed() you can see it is relying on this gc:&lt;/p&gt;

&lt;p&gt;// There may be open ResultSet&apos;s that are yet to be garbage collected&lt;br/&gt;
// let&apos;s try and force these out rather than throw an error&lt;br/&gt;
		System.gc();&lt;br/&gt;
		System.runFinalization();&lt;/p&gt;

&lt;p&gt;That would be my first guess as to the cause of the trouble.  Probably this JVM is not garbage collecting the open resultsets in this case.&lt;/p&gt;

&lt;p&gt;In your test case has the resultSet  been explicitly closed or was it left open with the expectation of garbage collection before the setTransaction isolation call?&lt;/p&gt;

</comment>
                            <comment id="12370615" author="mkutty" created="Thu, 16 Mar 2006 08:04:13 +0000"  >&lt;p&gt;No, The test does not close the resultSet explicitly&lt;/p&gt;</comment>
                            <comment id="12370621" author="kmarsden" created="Thu, 16 Mar 2006 08:26:25 +0000"  >&lt;p&gt;Actually maybe I had this backward. Maybe this JVM is being more agressive with the gc().   Anyway, if your resultset is still referenced and the error is supposed to be there,  start with commenting out that gc() call and go from there.  Good Luck!&lt;/p&gt;

</comment>
                            <comment id="12370623" author="mkutty" created="Thu, 16 Mar 2006 08:38:10 +0000"  >&lt;p&gt;Yes Kathey, You are right. When I commented out the gc(), I got the exception. Will be informing the jvm people about this. Thanks for your valuable information&lt;/p&gt;</comment>
                            <comment id="12377443" author="mkutty" created="Wed, 3 May 2006 02:04:15 +0100"  >&lt;p&gt;I&apos;m attaching a simple reproduction. But still there are some gray areas why ibm15 is not throwing the expected exception. &lt;/p&gt;</comment>
                            <comment id="12416665" author="kmarsden" created="Sun, 18 Jun 2006 23:37:29 +0100"  >&lt;p&gt;I told Manjula I would post the response from the IBM JVM Team and what I know about the issue.&lt;/p&gt;

&lt;p&gt;JVM TEAM RESPONSE:&lt;/p&gt;

&lt;p&gt;I don&apos;t believe this is a bug in the IBM JVM - we are legitimately clearing out objects that are no-longer referenced. The difference is that the IBM JVM at Java 5.0 is more agressive at doing this than it was previously.&lt;br/&gt;
The behaviour with  BEA JRockit 5.0 is the same.&lt;/p&gt;

&lt;p&gt;The IBM Java 5.0 implementation now carries out &quot;escape analysis&quot; - this means that an Object becomes eligable for garbage collection after the last time it is used which can be before you would classically expect it to be &quot;out of scope&quot;. Below is a pathological example :&lt;/p&gt;

&lt;p&gt;void testMethod{&lt;/p&gt;

&lt;p&gt;	String myString = new String(&quot;MyString&quot;);&lt;br/&gt;
	myString.toLowercase();&lt;br/&gt;
	System.out.println(myString);&lt;br/&gt;
							&amp;lt;--- Under Java 5.0 myString is eligable for GC here&lt;br/&gt;
	for (int i = 0; i &amp;lt; 10; i++)&lt;/p&gt;
{
		System.out.println(&quot;Count is &quot;+i);
	}
&lt;p&gt;}&lt;br/&gt;
							&amp;lt;-- Under previous versions, myString is eligable for GC here.&lt;/p&gt;


&lt;p&gt;WHAT KATHEY KNOWS ABOUT THE ISSUE&lt;br/&gt;
From  the  behavior we were  seeing and the test case,  that we did not get an exception for this open result set, when setTransactionIsolation was called,   I was under the assumption that it was the ResultSet rs that was getting garbage collected but it must be something else.  Someone will have to take a close look at  what is getting garbage collected here and try to understand how it correlates to escape analysis.    I tried forcing gc() and then using the result set and it seemed to continue to be accessible and retrieve results normally.&lt;/p&gt;

&lt;p&gt;The test code: &lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			
			PreparedStatement ps = conn.prepareStatement(&quot;SELECT * from TAB1&quot;);
			ResultSet rs = ps.executeQuery();
			rs.next();
			// setTransactionIsolation should fail because we have 
			// a holdable cursor open
			// conn.setTransactionIsolation does a gc/finalization and then checks if there are open holdable result sets.
                        // should fail because holdable result set is open.
			    conn.setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);  
		}
&lt;p&gt; catch (SQLException se)&lt;/p&gt;
		{
			System.out.println(&quot;EXPECTED EXCEPTION SQLSTATE:&quot; + 
							   se.getSQLState() + &quot; &quot; +
							   se.getMessage());
			return;
		}



&lt;p&gt;Code to check result set status in  GenericLanguageConnectionContext, called as part of setTransactionIsolation: (Removing this gc causes setTransactionIsolation to fail as expected. )&lt;/p&gt;


&lt;p&gt;// There may be open ResultSet&apos;s that are yet to be garbage collected&lt;br/&gt;
// let&apos;s try and force these out rather than throw an error&lt;/p&gt;

&lt;p&gt;		System.gc();&lt;br/&gt;
		System.runFinalization();&lt;/p&gt;


&lt;p&gt;		/* For every activation */&lt;br/&gt;
		for (int i = acts.size() - 1; i &amp;gt;= 0; i--) {&lt;/p&gt;

&lt;p&gt;			Activation a = (Activation) acts.elementAt&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;/p&gt;

&lt;p&gt;			if (SanityManager.DEBUG)&lt;/p&gt;
			{
				SanityManager.ASSERT(a instanceof CursorActivation, &quot;a is not a CursorActivation&quot;);
			}

&lt;p&gt;			if (!a.isInUse())&lt;/p&gt;
			{
				continue;
			}&lt;br/&gt;
&lt;br/&gt;
			if (!a.getResultSetHoldability())&lt;br/&gt;
			{
				continue;
			}

&lt;p&gt;			ResultSet rs = ((CursorActivation) a).getResultSet();&lt;/p&gt;

&lt;p&gt;			/* is there an open held result set? */&lt;br/&gt;
			if ((rs != null) &amp;amp;&amp;amp; !rs.isClosed() &amp;amp;&amp;amp; rs.returnsRows())&lt;/p&gt;
			{
				return(false);
			}
</comment>
                            <comment id="12416823" author="army" created="Tue, 20 Jun 2006 08:01:49 +0100"  >&lt;p&gt;I&apos;m not very well acquainted with this code, but based on the example of &quot;escape analysis&quot; posted by the JVM team, I think I understand why this test is failing with IBM 1.5.&lt;/p&gt;

&lt;p&gt;If we look at the test program again, we can see that it very closely mimics the example of &quot;escape analysis&quot; offered by the JVM team.  In particular:&lt;/p&gt;

&lt;p&gt; 		System.out.println(&quot;done creating table and inserting data.&quot;);&lt;br/&gt;
   		conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);&lt;br/&gt;
   		ResultSet rs = stmt.executeQuery(&quot;select * from T1&quot;);&lt;br/&gt;
==&amp;gt; Under Java 5.0 rs is eligible for GC here...&lt;br/&gt;
   		System.out.println(&quot;current isolation level: &quot; + getIsoLevelName(conn.getTransactionIsolation()));&lt;br/&gt;
		conn.setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);&lt;br/&gt;
		System.out.println(&quot;current isolation level: &quot; + getIsoLevelName(conn.getTransactionIsolation()));&lt;br/&gt;
==&amp;gt; Under previous versions, rs is eligible for GC here...&lt;/p&gt;

&lt;p&gt;So with ibm15, rs becomes eligible for GC &lt;em&gt;prior&lt;/em&gt; to the call to setTransactionIsolation because it (rs) is no longer referenced after it is created.  Then the call to gc() in verifyAllHeldResultSetsAreClosed() does the escape analysis, sees that rs is now eligible for GC and so collects it.  As part of that collection process the JVM calls &quot;finalize()&quot;, which takes us to EmbedResultSet.finalize(), and there we see this:&lt;/p&gt;

&lt;p&gt;	/**&lt;br/&gt;
		JDBC states that a ResultSet is closed when garbage collected.&lt;br/&gt;
		We simply mark the activation as unused. Some later use&lt;br/&gt;
		of the connection will clean everything up.&lt;/p&gt;

&lt;p&gt;		@exception Throwable Allows any exception to be thrown during finalize&lt;br/&gt;
	*/&lt;br/&gt;
	protected void finalize() throws Throwable {&lt;br/&gt;
		super.finalize();&lt;/p&gt;

&lt;p&gt;		if (finalizeActivation != null) &lt;/p&gt;
{
			finalizeActivation.markUnused();
		}
&lt;p&gt;		&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;Thus finalizeActiviation is now marked as &quot;unused&quot;, which means we end up ignoring the activation in the verifyAllHeldResultSetsAreClosed() method:&lt;/p&gt;

&lt;p&gt;	if (!a.isInUse())&lt;/p&gt;
	{
		continue;
	}

&lt;p&gt;And therefore we return &quot;true&quot; from the method and no error is thrown.&lt;/p&gt;

&lt;p&gt;To prove this, I added a very simple (albeit meaningless) reference to &quot;rs&quot; after the call to setTransactionIsolation:&lt;/p&gt;

&lt;p&gt; 		System.out.println(&quot;done creating table and inserting data.&quot;);&lt;br/&gt;
   		conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);&lt;br/&gt;
   		ResultSet rs = stmt.executeQuery(&quot;select * from T1&quot;);&lt;br/&gt;
   		System.out.println(&quot;current isolation level: &quot; + getIsoLevelName(conn.getTransactionIsolation()));&lt;br/&gt;
		conn.setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);&lt;br/&gt;
		System.out.println(&quot;current isolation level: &quot; + getIsoLevelName(conn.getTransactionIsolation()));&lt;br/&gt;
		System.out.println(rs);  // &amp;lt;== Added by Army&lt;/p&gt;

&lt;p&gt;With this simple line, the escape analysis will &lt;b&gt;not&lt;/b&gt; mark rs eligible for GC prior to setTransactionIsolation, which means we won&apos;t call &quot;finalize()&quot;, which means the activation will remain &quot;in use&quot;, and therefore we&apos;ll get the exception.&lt;/p&gt;

&lt;p&gt;All of that said, I added System.outs to the test program to see what the object id of &quot;rs&quot; is before the call to setTransactionIsolation, and I also added System.outs to see what the object id of the &quot;rs&quot; is inside verifyAllHeldResultSetsAreClosed().  Not surprisingly, the objects are NOT the same.  In the test program we see:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.jdbc.EmbedResultSet20@d0a0d0a&lt;/p&gt;

&lt;p&gt;but in verifyAllHeldResultSetsAreClosed() we see:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.sql.execute.BulkTableScanResultSet@42484248&lt;/p&gt;

&lt;p&gt;So as far as I can tell, the test program no longer references the EmbedResultSet, so it&apos;s marked as &quot;eligible for GC&quot; and is garbage collected by escape analysis; however, that EmbedResultSet was in turn referencing another object-&lt;del&gt;BulkTableScanResultSet&lt;/del&gt;&lt;del&gt;that &lt;b&gt;is&lt;/b&gt; still referenced (by the activation), and that&apos;s the result set that should have caused the error&lt;/del&gt;-but since we &quot;bailed&quot; on the error checking because the activiation was no longer &quot;in use&quot;, we never checked the underlying result set and therefore we didn&apos;t throw the exception.&lt;/p&gt;

&lt;p&gt;That&apos;s my take on it after looking at it briefly.  I still don&apos;t know for sure who&apos;s &quot;at fault&quot; here (the JVM or Derby)--I&apos;d have to look at it more to say one way or the other.  But that&apos;s my first take on the issue...&lt;/p&gt;

&lt;p&gt;Comments/input/feedback are, as always, much appreciated...&lt;br/&gt;
Army&lt;/p&gt;</comment>
                            <comment id="12416825" author="kmarsden" created="Tue, 20 Jun 2006 08:17:28 +0100"  >&lt;p&gt;Thanks Army for the comment.  I think I understand escape analysis better now and how it relatest to this issue and I think&lt;/p&gt;

&lt;p&gt;1) The JVM is ok.  &lt;br/&gt;
It should garbage collect and finalize  rs and all its innards because they can never really be used again.&lt;/p&gt;

&lt;p&gt;2) Derby is ok. &lt;br/&gt;
 setTransactionIsolation() does not need to consider a  ResultSet that can never be used again .&lt;/p&gt;

&lt;p&gt;3) The test is not ok. &lt;br/&gt;
 To test what it wants to test, that we can&apos;t change the isolation in the middle of retrieving results on a held cursor,  it should  have code to use rs after setTransactionIsolation, e.g. add an &lt;br/&gt;
rs.next() after setTransactionIsolation()&lt;/p&gt;

&lt;p&gt;Does that sound right?&lt;/p&gt;</comment>
                            <comment id="12416921" author="army" created="Tue, 20 Jun 2006 23:54:30 +0100"  >
&lt;p&gt;&amp;gt; 3) The test is not ok.&lt;br/&gt;
&amp;gt; To test what it wants to test, that we can&apos;t change the isolation in the middle of retrieving results on a&lt;br/&gt;
&amp;gt; held cursor, it should have code to use rs after setTransactionIsolation, e.g. add an&lt;br/&gt;
&amp;gt; rs.next() after setTransactionIsolation()&lt;/p&gt;

&lt;p&gt;&amp;gt; Does that sound right? &lt;/p&gt;

&lt;p&gt;Sounds goods to me.&lt;/p&gt;</comment>
                            <comment id="12417208" author="mkutty" created="Thu, 22 Jun 2006 06:58:43 +0100"  >&lt;p&gt;I have made a patch with the rs.next after the setTransactionIsolation and the test passes with both ibm1.5 and sun jdk1.5. &lt;/p&gt;</comment>
                            <comment id="12419891" author="kmarsden" created="Sun, 9 Jul 2006 07:03:34 +0100"  >&lt;p&gt;Thanks Manjula for looking at this issue.&lt;/p&gt;

&lt;p&gt;I was not able to apply this patch in Eclipse. The message I got was not in patch format.  Looking at the patch it seems that some lines are split like:&lt;br/&gt;
&amp;#8212; java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransact&lt;br/&gt;
ionIsolation.java       (revision 416106)&lt;/p&gt;

&lt;p&gt;Maybe that is the trouble.  Perhaps a cut and paste of svn diff?&lt;/p&gt;

&lt;p&gt;In terms of content it looks like a lot of white space was added.    It might be good just to revert add in the rs.next() with the comment and regenerate the patch with svn diff  redirected to file.  I&apos;ll uncheck patch available until a new patch is submitted.&lt;/p&gt;</comment>
                            <comment id="12424630" author="mkutty" created="Mon, 31 Jul 2006 20:52:42 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Thanks for your input. I&apos;m attaching the diff again. Please have a look &lt;/p&gt;</comment>
                            <comment id="12425923" author="kmarsden" created="Sat, 5 Aug 2006 02:51:38 +0100"  >&lt;p&gt;Tried test on IBM 1.5 SR2 and Sun JDK 1.4.2 Committed svn_diff.txt.&lt;br/&gt;
Date: Fri Aug  4 18:50:47 2006&lt;br/&gt;
New Revision: 428937&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=428937&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=428937&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks Manjula for the fix.&lt;/p&gt;
</comment>
                            <comment id="12451342" author="myrna" created="Mon, 20 Nov 2006 15:48:53 +0000"  >&lt;p&gt;backporting this fix to 10.1 &lt;/p&gt;</comment>
                            <comment id="12451345" author="myrna" created="Mon, 20 Nov 2006 15:54:41 +0000"  >&lt;p&gt;merge didn&apos;t work, so I applied the change of revision 428937 manually with:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=477228&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=477228&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sending        java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\&lt;br/&gt;
setTransactionIsolation.java&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12333553">DERBY-1320</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12337839" name="svn_diff.txt" size="785" author="mkutty" created="Mon, 31 Jul 2006 20:52:41 +0100"/>
                            <attachment id="12335742" name="svn_diff_06_21.txt" size="8960" author="mkutty" created="Thu, 22 Jun 2006 06:59:04 +0100"/>
                            <attachment id="12335743" name="svn_stat_06_21.txt" size="102" author="mkutty" created="Thu, 22 Jun 2006 06:59:29 +0100"/>
                            <attachment id="12326168" name="test.java" size="2972" author="mkutty" created="Wed, 3 May 2006 02:04:15 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 16 Mar 2006 07:57:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22309</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0vh3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38917</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>