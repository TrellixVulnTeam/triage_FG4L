<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-573/DERBY-573.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-573] Provide support for optimizer overrides in Derby.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-573</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby&apos;s query optimizer usually makes the best choice of join order and access path. The default join strategy ususally works the best too. However, there are some cases in which user may want to override the optimizer or the default values. Providing support for optimizer overrides will allow users to hand-tune the optimizer for queries. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12317017">DERBY-573</key>
            <summary>Provide support for optimizer overrides in Derby.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Sep 2005 13:40:11 +0100</created>
                <updated>Wed, 1 Jul 2009 01:34:32 +0100</updated>
                            <resolved>Mon, 23 Jan 2006 15:52:38 +0000</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12329897" author="rhillegas" created="Tue, 20 Sep 2005 05:36:52 +0100"  >&lt;p&gt;It sounds as though this syntax will not allow the parser to catch typos and that if the user makes a mistake, the parser will silently do the wrong thing. I&apos;m not a big fan of silent failures.&lt;/p&gt;

&lt;p&gt;Why prefer an Oracle-style, comment-based approach to Sybase-style, parser-checked optimizer hints? Is it because we hope that we can run the same query against Oracle and Derby by simply seeding the query with two sets of comments, one for each database? I don&apos;t understand the value of this flexibility. If the application really is going to run against two databases, then the developers will have to build a sql-portability layer anyway. In that case, queries won&apos;t be hard-coded: they will be constructed by a code generator. The code generator will have to be smart enough to handle other differences between the databases and it&apos;s no additional trouble for the code generator to emit database-specific optimizer hints.&lt;/p&gt;</comment>
                            <comment id="12329952" author="mamtas" created="Tue, 20 Sep 2005 15:53:18 +0100"  >&lt;p&gt;There was discussion about various possible options to support optimizer hints in the past. One thread on this is titled &quot;Optimizer hints?&quot; at &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200412.mbox/%3c41C360A6.3050400@Sourcery.Org%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200412.mbox/%3c41C360A6.3050400@Sourcery.Org%3e&lt;/a&gt;. The other thread is titled &quot;Join order and access path&quot; at &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200502.mbox/%3cBAY3-F62B405CA29E874AB32DA5CF6F0@phx.gbl%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200502.mbox/%3cBAY3-F62B405CA29E874AB32DA5CF6F0@phx.gbl%3e&lt;/a&gt;. In the absence of SQL standard way of implementing this and based on the 2 email threads, I proposed to implement this with special comments --PROPERTIES.&lt;/p&gt;

&lt;p&gt;Also, since the time I wrote the functional spec, I have been tweaking the parser to ignore white spaces(this includes &quot; &quot;, &quot;\t&quot;) between &amp;#8211; and PROPERTIES to make parser more flexible about how a user specifies the properties. My work in the parser to support the optimizer hints is not completely finished. Hope to make more progress in couple days.&lt;/p&gt;</comment>
                            <comment id="12330018" author="rhillegas" created="Wed, 21 Sep 2005 02:09:19 +0100"  >&lt;p&gt;Thanks, Mamta, for pointers to these two threads. There is some discussion here about where to put optimizer threads and how to bind them to specific queries. The consensus seems to be to embed hints in individual queries. No argument there.&lt;/p&gt;

&lt;p&gt;However, these threads do not address the problem of the parser silently ignoring mis-typed optimzer directives. I think this is a brittle user api and a serious issue with the current functional spec.&lt;/p&gt;</comment>
                            <comment id="12330020" author="bandaram" created="Wed, 21 Sep 2005 02:31:47 +0100"  >&lt;p&gt;It should be possible to enhance current Derby RunTimeStatistics mechanism to display user specified optimizer directives being used if specified. Since optimizer directives are typically used by application developer, not the end users, it should be easy for them to confirm the directives are taking effect. Derby provides several ways to get execution plans... including RunTimeStatistics or derby.language.logQueryPlan. These mechanisms can specify when optimizer directives are being used.&lt;/p&gt;</comment>
                            <comment id="12330025" author="djd" created="Wed, 21 Sep 2005 02:55:15 +0100"  >&lt;p&gt;I don&apos;t believe that  we should assume that every multiple database application is going to use a code generator, or that Derby&apos;s syntax should force application developers into using one. It is possible to write an application that works against multiple databases, thus the use of comments to provide hints seems a reasonable approach.&lt;/p&gt;

&lt;p&gt;It may  make more sense for the lead-in to be something like DERBY-HINTS or DERBY-PROPERTIES rather than the generic term PROPERTIES.&lt;/p&gt;</comment>
                            <comment id="12330031" author="mamtas" created="Wed, 21 Sep 2005 03:36:19 +0100"  >&lt;p&gt;I can look into modifying the RunTimeStatistics to indicate that user overrides are being used. Also, I will see how parser can be modified to look for --DERBY-HINTS rather than just --PROPERTIES. If people prefer DERBY-PROPERTIES over DERBY-HINTS, please put comment stating so to this JIRA entry.&lt;/p&gt;</comment>
                            <comment id="12331607" author="djd" created="Sat, 8 Oct 2005 02:11:59 +0100"  >&lt;p&gt;Thinking more about this DERBY-HINTS was a bad name since you are providing overrides, not hints. The generic  DERBY-PROPERTIES seems a good choice, that could support hints being added in the future by the name of the property containing the name &apos;hint&apos;.&lt;/p&gt;</comment>
                            <comment id="12357105" author="mamtas" created="Wed, 9 Nov 2005 16:40:48 +0000"  >&lt;p&gt;I have the patch for optimizer overrides support in Derby. Alongwith the patch, I have attached the updated functional spec to the JIRA entry Derby-573.&lt;/p&gt;

&lt;p&gt;Majority of the changes went into the sqlgrammar.jj because Derby engine already has support for them internally. It is the parser that needs to recognize these overrides and pass it on to through the query nodes. The parser now looks for character sequence &amp;#8211; DERBY-PROPERTIES (case insensitive and space between &amp;#8211; and D is optional) and once it finds that, it looks for propertyName=value pairs on that same comment line in parser&apos;s propertyList method. The parser does the basic check to make sure that the same property is not used more than once for a given table. The remaining checks on the properties like checking the existence of user specified index etc are done in the bind phase.&lt;/p&gt;

&lt;p&gt;I also changed the metadata.properties file to use --DERBY-PROPERTIES rather than old PROPERTIES clause to supply optimizer overrides. In addition, added \n at the end of the optimier override comment lines to make sure the comment line does not get concatenated with the next line of the sql.&lt;/p&gt;

&lt;p&gt;Import.java had to be changed to user --DERBY-PROPERTIES rather than PROPERTIES.&lt;/p&gt;

&lt;p&gt;Added a new test optimizerOverrides.sql which runs in both embedded and network server mode.&lt;/p&gt;

&lt;p&gt;Rerunning all the tests after syncing the codeline to make sure nothing has broken. An earlier run of the tests before the sync came out clean.&lt;/p&gt;

&lt;p&gt;I plan to next work on exposing these overrides through runtime statistics so that user can verify that the optimizer overrides are getting used.&lt;/p&gt;

&lt;p&gt;I haven&apos;t researched into upgrade much but will the changes in metadata.properties require some upgrade path for existing databases? Any pointers here will be very useful.&lt;/p&gt;

&lt;p&gt;svn stat&lt;br/&gt;
M      java\engine\org\apache\derby\impl\load\Import.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\sqlgrammar.jj&lt;br/&gt;
M      java\engine\org\apache\derby\impl\jdbc\metadata.properties&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\SQLState.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\db2Compatibility.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\lang\optimizerOverrides.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\checkConstraint.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\access.sql&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\optimizerOverrides.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\db2Compatibility.out&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\optimizerOverrides.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\checkConstraint.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\access.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\derbylang.runall&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\derbynetmats.runall&lt;/p&gt;

&lt;p&gt;Comments/questions on the patch?&lt;/p&gt;</comment>
                            <comment id="12359550" author="mamtas" created="Wed, 7 Dec 2005 16:27:59 +0000"  >&lt;p&gt;Here is the updated patch information which includes optimizer overrides support and database upgrade code. I have attached the patch to the Jira entry.&lt;/p&gt;

&lt;p&gt;The code for optimizer overrides support is same as for the earlier patch. But since the metadata.properties has changed between 10.1 and 10.2 (because of the new user visible optimizer overrides syntax), we need to have proper upgrade code to support this change.&lt;/p&gt;

&lt;p&gt;Following is a brief description of upgrade code&lt;br/&gt;
1)If a 10.1 db is getting run in soft upgrade mode with 10.2, the system tables would still have the old 10.1 optimizer overrides syntax which is not recognized by 10.2 The system tables of the 10.1 db can&apos;t be modified in soft upgrade mode to store the new 10.2 optimizer overrides syntax for metadata queries because in soft upgrade, system tables can&apos;t be modified in a backward incompatible way. To get around this, I have changed the code in EmbedDatabaseMetaData.java to see if db is getting run in soft upgrade mode. If yes, then it should read the metadata queries from metadata.properties rather than system tables. This will work because metadata.properties for 10.2 release has been modified to use the new optimizer overrides syntax.&lt;/p&gt;

&lt;p&gt;2)If a 10.1 db is getting run in hard upgrade mode with 10.2, then we can simply drop the stored queries for metadata calls from system tables and put new queries from metadata.properties into the system table. This is acceptable in hard upgrade, because 10.2 db is not expected to run in 10.1 release. This code is in DD_version.java &lt;/p&gt;

&lt;p&gt;3)I have implemented the above 2 upgrade modes in a generic mode such that in future, with every new release, in soft upgrade mode, we will always read the metadata queries from metadata.properties. And in hard uprgade mode, we will drop and recreate the stored metadata queries in the system tables with the latest metadata queries from metadata.properties. This will take care of any future metadata.properties changes between the releases.&lt;/p&gt;

&lt;p&gt;A little description on changes made to some of the java files for the upgrade code&lt;br/&gt;
1)Added new methods in Statement.java and LanguageConnectionContext.java which will allow us to recognize the queries coming from metadata calls and let such queries use internal SQL syntax. These internal SQL syntaxes are not available to an end user but we have some queries in metadata.properties which rely on them and hence we need to be able to run these queries with their internal syntax. This was not required in the past because metadata calls were always run from the system tables and hence the internal syntax was available to metadata calls at that point. Now, that in soft upgrade mode, we read the queries from metadata.properties file, we need to add these special methods to recognize metadata queries as special internal queries and let them use internal SQL syntax.&lt;br/&gt;
2)In DataDictionary.java, I have added 2 final static variables. One is added to reflect the 10.2 db version, DD_VERSION_DERBY_10_2. The other one is DD_VERSION_THIS_SOFTWARE_VERSION and with every release, it should be updated to the latest DD version final static number. This variable will be used by EmbeddedDatabaseMetaData to determine if we are in soft upgrade mode. Rather than hardcoding 10.2 DD version in EmbeddedDatabaseMetaData, I thought it would be better to use a generice variable DD_VERSION_THIS_SOFTWARE_VERSION.&lt;/p&gt;

&lt;p&gt;In order to test my upgrade changes, I have used derbyTesting/upgradeTests/phaseTester.java which was checked in by Dan sometime back. I have changed this test to be a subclass of metadata.java and then I run the existing metadata tests within phaseTester after various stages of upgrade on a 10.1 db. phaseTester takes 4 parameters, the old derby major version, old derby minor version, old engine derby.jar classpath, new engine derby.jar and derbyTesting.jar classpath. An eg run is as follows&lt;br/&gt;
$ C:/p4clients/main/opensource/java/testing/org/apache/derbyTesting/upgradeTests/runphases 10 1 c:/p4clients/code101/opensource/jars/sane c:/p4clients/main/opensource/jars/sane&lt;br/&gt;
For the command above, phaseTester will &lt;br/&gt;
1)first create a 10.1 db and then will run metadata tests on it.&lt;br/&gt;
2)Then run the 10.1 db with 10.2 software in soft upgrade mode and run the metadata tests on it (this is where the metadata sql will be picked from metadata.properties rather than system table)&lt;br/&gt;
3)The run the soft upgraded 10.1 db back with 10.1 software and rerun the metadata tests&lt;br/&gt;
4)Now run the 10.1 db in hard upgrade mode with 10.2 software. The db will be upgraded to 10.2 version (which means that stored metadata sql from system tables will be dropped and recreated with sql from metadata.properties). Run the metadata tests on this hard upgraded db&lt;br/&gt;
5)Finally, try to use this upgraded 10.2 db with 10.1 software and that will fail because we don&apos;t have backward compatibility.&lt;/p&gt;

&lt;p&gt;This phaseTester test unfortunately is not part of derbyall and has to be run manually. I think we have a beetle entry Derby-514 to make this test available as part of a suite rather than requiring manual runs.&lt;/p&gt;

&lt;p&gt;One another note on the tests, I have merged metadataJdbc20 and metadata.java into one single test by moving all the tests from metadataJdbc20 to metadata.java&apos;s super class metadata_test.java. In the past when we had support from jdk18, we had to have a separate&lt;br/&gt;
test for jdbc20 but since jdk18 support has been phased out, these tests can be merged.&lt;/p&gt;

&lt;p&gt;Also, for reference, I have included the comments for the actual optimizer overrides changes from the previous patch.&lt;br/&gt;
Majority of the changes went into the sqlgrammar.jj because Derby engine already has support for them internally. It is the parser that needs to recognize these overrides and pass it on to through the query nodes. The parser now looks for character sequence &amp;#8211; DERBY-PROPERTIES (case insensitive and space between &amp;#8211; and D is optional) and once it finds that, it looks for propertyName=value pairs on that same comment line in parser&apos;s propertyList method. The parser does the basic check to make sure that the same property is not used more than once for a given table. The remaining checks on the properties like checking the existence of user specified index etc are done in the bind phase. &lt;/p&gt;

&lt;p&gt;I also changed the metadata.properties file to use --DERBY-PROPERTIES rather than old PROPERTIES clause to supply optimizer overrides. In addition, added \n at the end of the optimier override comment lines to make sure the comment line does not get concatenated with the next line of the sql. &lt;/p&gt;

&lt;p&gt;Import.java had to be changed to user --DERBY-PROPERTIES rather than PROPERTIES.&lt;/p&gt;

&lt;p&gt;Added a new test optimizerOverrides.sql which runs in both embedded and network server mode.&lt;/p&gt;

&lt;p&gt;Finally, I have run the derbyall suite and these changes didn&apos;t cause any new failures.&lt;/p&gt;

&lt;p&gt;Please review and send in your comments.&lt;/p&gt;</comment>
                            <comment id="12360193" author="mamtas" created="Mon, 12 Dec 2005 17:16:46 +0000"  >&lt;p&gt;I have addressed Dan&apos;s comments with the latest patch attached to the JIRA entry. &lt;/p&gt;

&lt;p&gt;In addition, I have also added a master file for the phaseTester test in java\testing\org\apache\derbyTesting\functionTests\master&lt;br/&gt;
Output of the manual run of this test can be diffed against the master that I am checking in. In future, if anyone changes this test such that it&apos;s output will change, then they should change the master file accordingly. This way, we can make sure that the test is still running correctly as it is evolving. Once this test is run as part of a suite like other tests, we will not have to run this test manually and any changes to master will be caught easily,&lt;/p&gt;</comment>
                            <comment id="12360240" author="mamtas" created="Tue, 13 Dec 2005 04:09:42 +0000"  >&lt;p&gt;Submitting another patch to JIRA after doing a sync on the client (The Grant/Revoke checkin touched quite a bit of the files that I have modified). I have run the tests and no new failures with the patch.&lt;/p&gt;</comment>
                            <comment id="12360326" author="bandaram" created="Wed, 14 Dec 2005 03:30:40 +0000"  >&lt;p&gt;This patch has been committed to trunk.&lt;/p&gt;

&lt;p&gt;Transmitting file data ........................................&lt;br/&gt;
Committed revision 356562.&lt;/p&gt;

&lt;p&gt;It seems you have also resolved &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-727&quot; title=&quot;Add core language  upgrade infrastructure for  10.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-727&quot;&gt;&lt;del&gt;DERBY-727&lt;/del&gt;&lt;/a&gt; along with this change, so please mark both of them as RESOLVED and close them after testing on trunk build. You figured out several hard issues here 1) Ability to extract hints provided in comments 2) Soft upgrade issues and 3) adding upgrade infrastructure for 10.2. Good job!&lt;/p&gt;</comment>
                            <comment id="12362559" author="mamtas" created="Fri, 13 Jan 2006 03:26:50 +0000"  >&lt;p&gt;I have attached a patch named Derby573OptimizerOverridesAndRunTimeStatistics011206.txt to JIRA Derby573 Provide support for optimizer overrides in Derby. This patch enables users to see the optimizer overrides specified in the sql as part of runtime statistics info. This is achieved by changing the &lt;br/&gt;
generator so that these properties get passed from compile time to execute time. This change in generate phase can be found in FromBaseTable,&lt;br/&gt;
BaseJoinStrategy and JoinNode. The changes in the other classes is for returning the correct number of arguments to the scan. That change is in &lt;br/&gt;
getScanArgs method. &lt;/p&gt;

&lt;p&gt;In addition, I have changed the existing lang/optimizerOverrides.sql to test this patch. derbyall suite has run fine on my Windows XP m/c with Sun&apos;s jdk14.&lt;/p&gt;

&lt;p&gt;svn stat &lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\BaseJoinStrategy.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\NestedLoopJoinStrategy.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\SelectNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\JoinNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\HashJoinStrategy.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\FromBaseTable.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\sqlgrammar.jj&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\HalfOuterJoinNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\HashLeftOuterJoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\HashJoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\LastIndexKeyResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\GenericResultSetFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\DistinctScanResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\HashScanResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\InsertResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\TableScanResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealNestedLoopLeftOuterJoinStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealHashLeftOuterJoinStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealHashJoinStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealJoinResultSetStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealTableScanStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\rts\RealNestedLoopJoinStatistics.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\RealResultSetStatisticsFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\DependentResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\BulkTableScanResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\MergeJoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\NestedLoopJoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\NestedLoopLeftOuterJoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\JoinResultSet.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\compile\Optimizable.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\execute\ResultSetFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\SQLState.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\optimizerOverrides.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\optimizerOverrides.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\optimizerOverrides.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\optimizerOverrides.out&lt;/p&gt;</comment>
                            <comment id="12362904" author="bandaram" created="Tue, 17 Jan 2006 10:12:35 +0000"  >&lt;p&gt;I have submitted this fix to trunk. Thanks for enhancing RUNSTATs to show user specified optimizer hints are being used!&lt;/p&gt;

&lt;p&gt;Transmitting file data .....................................&lt;br/&gt;
Committed revision 369619.&lt;/p&gt;</comment>
                            <comment id="12363623" author="mamtas" created="Mon, 23 Jan 2006 15:52:38 +0000"  >&lt;p&gt;All the code changes for this feature are already checked in. Have entered Derby-855 as a subtask for the documentation changes&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12321901" name="Derby573OptimizerOverridesAndRunTimeStatistics011206.txt" size="245210" author="mamtas" created="Fri, 13 Jan 2006 03:26:50 +0000"/>
                            <attachment id="12321197" name="derby572OptimizerOverridesAndUpgrade120605.txt" size="335059" author="mamtas" created="Wed, 7 Dec 2005 16:27:59 +0000"/>
                            <attachment id="12321280" name="derby572OptimizerOverridesAndUpgrade121105.txt" size="498452" author="mamtas" created="Mon, 12 Dec 2005 17:16:46 +0000"/>
                            <attachment id="12321294" name="derby572OptimizerOverridesAndUpgrade121205.txt" size="498457" author="mamtas" created="Tue, 13 Dec 2005 04:09:42 +0000"/>
                            <attachment id="12320560" name="derby573OptimierOverrides110805.txt" size="134411" author="mamtas" created="Wed, 9 Nov 2005 16:40:48 +0000"/>
                            <attachment id="12320561" name="optimizeroverrides.html" size="26225" author="mamtas" created="Wed, 9 Nov 2005 16:40:48 +0000"/>
                            <attachment id="12314395" name="optimizeroverrides.html" size="24051" author="mamtas" created="Fri, 16 Sep 2005 13:45:17 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12327980">DERBY-855</subtask>
                            <subtask id="12328145">DERBY-878</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Sep 2005 04:36:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29614</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0t1b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38522</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>