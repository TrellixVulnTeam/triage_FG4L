<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:37:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4050/DERBY-4050.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4050] Multithreaded clob update causes growth in table that does not get reclaimed</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4050</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Doing a multithreaded update of a Clob table causes table growth that does not get reclaimed except by compressing the table.  The reproduction has a table with two threads. One  thread  updates row 1 repeatedly with 33,000 character clob. The other thread updates row 2 with a small clob, &quot;hello&quot;.  The problem occurs back to 10.2 but seems much worse on trunk than 10.2.   The trunk database grew to 273MB on trunk after 10000 updates of each row. The 10.2 database grew only to 25MB.  If the update is synchronized there is no growth.&lt;br/&gt;
I will attach the repro.&lt;/p&gt;








</description>
                <environment></environment>
        <key id="12414163">DERBY-4050</key>
            <summary>Multithreaded clob update causes growth in table that does not get reclaimed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Feb 2009 00:52:00 +0000</created>
                <updated>Wed, 27 Jul 2011 20:57:36 +0100</updated>
                            <resolved>Fri, 13 Feb 2009 01:04:12 +0000</resolved>
                                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.1.3.3</fixVersion>
                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12670966" author="kmarsden" created="Fri, 6 Feb 2009 01:00:48 +0000"  >&lt;p&gt;Attached is the repro ClobGrowth.java.  The output on trunk is as below and the database grows to 359MB.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/clobgrowth&amp;#93;&lt;/span&gt; java ClobGrowth&lt;br/&gt;
Iterations to perform = 10000&lt;br/&gt;
Derby database created from main thread&lt;br/&gt;
New thread started&lt;br/&gt;
Derby connection from new thread&lt;br/&gt;
DeployThread update:1000&lt;br/&gt;
update:1000&lt;br/&gt;
DeployThread update:2000&lt;br/&gt;
update:2000&lt;br/&gt;
DeployThread update:3000&lt;br/&gt;
update:3000&lt;br/&gt;
DeployThread update:4000&lt;br/&gt;
update:4000&lt;br/&gt;
DeployThread update:5000&lt;br/&gt;
update:5000&lt;br/&gt;
DeployThread update:6000&lt;br/&gt;
update:6000&lt;br/&gt;
DeployThread update:7000&lt;br/&gt;
update:7000&lt;br/&gt;
DeployThread update:8000&lt;br/&gt;
update:8000&lt;br/&gt;
DeployThread update:9000&lt;br/&gt;
update:9000&lt;br/&gt;
SELECT * FROM new org.apache.derby.diag.SpaceTable(&apos;APP&apos;,&apos;CLOBTAB&apos;) t&lt;br/&gt;
CONGLOMERATENAME&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ISIND&amp;amp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMALLOCATEDPAGES   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMFREEPAGES        &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMUNFILLEDPAGES    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;PAGESIZE   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ESTIMSPACESAVING&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
---------------------------------------------------------------------------------------------------------------&lt;br/&gt;
CLOBTAB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11181               &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32768      &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;65536&lt;br/&gt;
SQL090205165714850&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4096       &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;br/&gt;
Normal shutdown&lt;br/&gt;
Test complete&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;




&lt;p&gt;on 10.4 and earlier,  it still grows , but slower to about 33MB on 10.4&lt;br/&gt;
Iterations to perform = 10000&lt;br/&gt;
Derby database created from main thread&lt;br/&gt;
New thread started&lt;br/&gt;
Derby connection from new thread&lt;br/&gt;
DeployThread update:1000&lt;br/&gt;
update:1000&lt;br/&gt;
DeployThread update:2000&lt;br/&gt;
update:2000&lt;br/&gt;
DeployThread update:3000&lt;br/&gt;
update:3000&lt;br/&gt;
DeployThread update:4000&lt;br/&gt;
update:4000&lt;br/&gt;
DeployThread update:5000&lt;br/&gt;
update:5000&lt;br/&gt;
DeployThread update:6000&lt;br/&gt;
update:6000&lt;br/&gt;
DeployThread update:7000&lt;br/&gt;
update:7000&lt;br/&gt;
DeployThread update:8000&lt;br/&gt;
update:8000&lt;br/&gt;
DeployThread update:9000&lt;br/&gt;
update:9000&lt;br/&gt;
SELECT * FROM new org.apache.derby.diag.SpaceTable(&apos;APP&apos;,&apos;CLOBTAB&apos;) t&lt;br/&gt;
CONGLOMERATENAME&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ISIND&amp;amp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMALLOCATEDPAGES   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMFREEPAGES        &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMUNFILLEDPAGES    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;PAGESIZE   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ESTIMSPACESAVING&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
---------------------------------------------------------------------------------------------------------------&lt;br/&gt;
CLOBTAB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;973                 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32768      &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;65536&lt;br/&gt;
SQL090205165416880&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4096       &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;br/&gt;
Normal shutdown&lt;br/&gt;
Test complete&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/clobgrowth&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



































































































































</comment>
                            <comment id="12670969" author="kmarsden" created="Fri, 6 Feb 2009 01:02:18 +0000"  >&lt;p&gt;Marking this as a regression since the problem is 10 times as bad on trunk.&lt;/p&gt;</comment>
                            <comment id="12671081" author="kristwaa" created="Fri, 6 Feb 2009 10:26:31 +0000"  >&lt;p&gt;From ClobGrowth:&lt;br/&gt;
    String updateString = repeatChar(&quot;a&quot;, 33000); // Anything over 32KB&lt;/p&gt;

&lt;p&gt;Does this mean that you don&apos;t see the issue if the Clob is less than 32 KB, which happens to be the largest page size Derby supports?&lt;/p&gt;


</comment>
                            <comment id="12671169" author="kmarsden" created="Fri, 6 Feb 2009 15:41:18 +0000"  >&lt;p&gt;Yes, I failed to mention that if the clob is less than 32K there is no abnormal growth.&lt;/p&gt;</comment>
                            <comment id="12671209" author="kmarsden" created="Fri, 6 Feb 2009 17:14:53 +0000"  >&lt;p&gt;In an effort to understand why the growth is worse on trunk than 10.4, I synched back to rev 635491 (the revision at which 10.4 branched).   At that trunk revision the problem was still much worse than on the latest of the 10.4 branch.  I&apos;m not quite sure what&apos;s going on.  I will keep looking at it. It is likely user error. &lt;/p&gt;</comment>
                            <comment id="12671216" author="kmarsden" created="Fri, 6 Feb 2009 17:46:25 +0000"  >&lt;p&gt;Unmarking regression.  The trunk difference that I was seeing was due to different behavior with different jvms.  With the IBM 1.6 jvm the growth is much worse.&lt;br/&gt;
java version &quot;1.6.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pwi3260sr3-20081106_07(SR3))&lt;br/&gt;
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260-20081105_25433 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20081105_025433_lHdSMr&lt;br/&gt;
JIT  - r9_20081031_1330&lt;br/&gt;
GC   - 20081027_AB)&lt;br/&gt;
JCL  - 20081106_01&lt;/p&gt;

&lt;p&gt;than with the Sun 1.6 jvm &lt;br/&gt;
java version &quot;1.6.0_01&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_01-b06)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.6.0_01-b06, mixed mode)&lt;/p&gt;

&lt;p&gt;regardless of codeline.&lt;/p&gt;</comment>
                            <comment id="12671242" author="mikem" created="Fri, 6 Feb 2009 19:02:47 +0000"  >&lt;p&gt;in the simplest case a row with a single long clob looks something like&lt;br/&gt;
this:&lt;br/&gt;
main page 1 (access level reads this row):&lt;br/&gt;
slot 0: long column just as short pointer to list of overflow page&lt;br/&gt;
        ---&amp;gt; page 2 -&amp;gt; page 3 -&amp;gt; ...&lt;/p&gt;

&lt;p&gt;When an update of a long row happens we basically change slot 0 row&apos;s column&lt;br/&gt;
to point somewhere else but leave the old chain disconnected:&lt;br/&gt;
slot 0: long column:&lt;br/&gt;
       ---&amp;gt;page 100 -&amp;gt;page 101 -&amp;gt; ....&lt;/p&gt;

&lt;p&gt;We can&apos;t mark the old chain free until commit, since we need to guarantee space in case&lt;br/&gt;
of an abort.  But if we lose the post commit for any reason then the chain is lost, we dont&lt;br/&gt;
have any back pointers.  So it is very bad to lose this kind of space reclamation.  In the&lt;br/&gt;
normal deleted head row, we can always re-walk the pages and find the deleted rows again&lt;br/&gt;
in future.&lt;/p&gt;


&lt;p&gt;Access is in charge of posting post commit events for page 1, but it is up&lt;br/&gt;
to raw store layer to handle freeing the overflow pages (here 2 and onward).  I believe this&lt;br/&gt;
work is handles by the ReclaimSpace class in&lt;br/&gt;
java/engine/org/apache/derby/impl/store/raw/data&lt;br/&gt;
probably the one commented as &quot;reclaim column chain&quot;&lt;/p&gt;

&lt;p&gt;The real work I believe is done in ReclaimSpaceHelper.java, same directory.&lt;/p&gt;

&lt;p&gt;My first guess would be that somehow the concurrency is causing the&lt;br/&gt;
reclaim space to fail, probably on a latch/latch conflict and the code&lt;br/&gt;
does not handle it.  Depending on what the error is we should probably&lt;br/&gt;
wait and/or retry, or maybe requeue the whole post commit.  I suggest some&lt;br/&gt;
prints to the log in this routine and compare the working vs non-working&lt;br/&gt;
test cases.  It looks like there are some traces you can enable first to&lt;br/&gt;
see if it gives any good info:&lt;/p&gt;

&lt;p&gt;if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))&lt;/p&gt;
{
        SanityManager.DEBUG(
                DaemonService.DaemonTrace, &quot; aborted &quot; + work +
                        &quot; because container is locked or dropped&quot;);
}


&lt;p&gt;The following code looks like it could be the problem:&lt;br/&gt;
if (!container_rlock.lockRecordForWrite(&lt;br/&gt;
tran, headRecord, false /* not insert &lt;b&gt;/, false /&lt;/b&gt; nowait */))&lt;/p&gt;
{
    // cannot get the row lock, retry
    tran.abort();
    if (work.incrAttempts() &amp;lt; 3)
        return Serviceable.REQUEUE;
    else
        return Serviceable.DONE;
}

&lt;p&gt;If the above is the problem, I would be interested if either of these&lt;br/&gt;
fix the problem:&lt;br/&gt;
1) change the nowait flag to wait (not a great thing to do in a post commit&lt;br/&gt;
   background thread).&lt;br/&gt;
2) get rid of the 3 and see if it eventually succeeds.  For this test case&lt;br/&gt;
   and multiprocessor concurrency it may never get in.&lt;/p&gt;</comment>
                            <comment id="12671268" author="kmarsden" created="Fri, 6 Feb 2009 19:39:19 +0000"  >&lt;p&gt;Thanks Mike for the hints.&lt;/p&gt;

&lt;p&gt;with derby.debug.true=DaemonTrace we never reach the &quot;aborted&quot; case and from the log it looks like it is happily trying to do the space reclamation.&lt;br/&gt;
Attached are the derby logs with and without growth with the property set.&lt;br/&gt;
There is no appreciable difference to my untrained eye.  I&apos;ll keep digging.&lt;/p&gt;
</comment>
                            <comment id="12671304" author="kmarsden" created="Fri, 6 Feb 2009 20:35:51 +0000"  >&lt;p&gt;The offending code is similar to the code Mike mentioned, but a little later:&lt;/p&gt;

&lt;p&gt;			// Reclaiming a long column chain due to update.  The long column&lt;br/&gt;
			// chain being reclaimed is the before image of the update&lt;br/&gt;
			// operation.  &lt;br/&gt;
			// &lt;br/&gt;
			long headPageId = ((PageKey)headRecord.getPageId()).getPageNumber();&lt;br/&gt;
			StoredPage headRowPage = &lt;br/&gt;
				(StoredPage)containerHdl.getPageNoWait(headPageId);&lt;/p&gt;

&lt;p&gt;			if (headRowPage == null)&lt;/p&gt;
			{
				// Cannot get page no wait, try again later.
				tran.abort();
				if (work.incrAttempts() &amp;lt;  3)
					return Serviceable.REQUEUE;
				else
					return Serviceable.DONE;
			}


&lt;p&gt;If I bump it to work.incrAttempts() &amp;lt; 10000 I see no growth.  &lt;/p&gt;

&lt;p&gt;But my SpaceTable query looks a little weird to me.&lt;br/&gt;
SELECT * FROM new org.apache.derby.diag.SpaceTable(&apos;APP&apos;,&apos;CLOBTAB&apos;) t&lt;br/&gt;
CONGLOMERATENAME&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ISIND&amp;amp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMALLOCATEDPAGES   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMFREEPAGES        &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;NUMUNFILLEDPAGES    &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;PAGESIZE   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ESTIMSPACESAVING&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
---------------------------------------------------------------------------------------------------------------&lt;br/&gt;
CLOBTAB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12                  &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32768      &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;393216&lt;br/&gt;
SQL090206122912800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1                   &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4096       &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;Shouldn&apos;t the NUMALLOCATEDPAGES be greater than NUMFREEPAGES + NUMFILLEDPAGES?&lt;/p&gt;</comment>
                            <comment id="12671323" author="mikem" created="Fri, 6 Feb 2009 21:20:01 +0000"  >&lt;p&gt;note - the column is NUMUNFILLEDPAGES  pages not NUMFILLED.   See below for comments from the diag SpaceTable javadoc about what the fields mean.  &lt;/p&gt;

&lt;p&gt;    &amp;lt;P&amp;gt;The SpaceTable virtual table has the following columns:&lt;br/&gt;
    &amp;lt;UL&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;CONGLOMERATENAME varchar(128) - nullable.  The name of the conglomerate,&lt;br/&gt;
    which is either the table name or the index name. (Unlike the&lt;br/&gt;
    SYSCONGLOMERATES column of the same name, table ID&apos;s do not appear&lt;br/&gt;
    here).&amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;ISINDEX SMALLINT - not nullable.  Is not zero if the conglomerate is an&lt;br/&gt;
    index, 0 otherwise.&amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;NUMALLOCATEDPAGES bigint - not nullable.  The number of pages actively&lt;br/&gt;
    linked into the table.  The total number of pages in the file is the&lt;br/&gt;
    sum of NUMALLOCATEDPAGES + NUMFREEPAGES.&amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;NUMFREEPAGES bigint - not nullable. The number of free pages that&lt;br/&gt;
    belong to the table.  When a new page is to be linked into the table the&lt;br/&gt;
    system will move a page from the NUMFREEPAGES list to the NUMALLOCATEDPAGES&lt;br/&gt;
    list.  The total number of pages in the file is the sum of&lt;br/&gt;
    NUMALLOCATEDPAGES + NUMFREEPAGES.&amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;NUMUNFILLEDPAGES bigint - not nullable.  The number of unfilled pages&lt;br/&gt;
    that belong to the table. Unfilled pages are allocated pages that are not&lt;br/&gt;
    completely full. Note that the number of unfilled pages is an estimate and&lt;br/&gt;
    is not exact. Running the same query twice can give different results on&lt;br/&gt;
    this column. &amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;PAGESIZE integer - not nullable.  The size of the page in bytes for&lt;br/&gt;
    that conglomerate.&lt;br/&gt;
    &amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;LI&amp;gt;ESTIMSPACESAVING bigint - not nullable.  The estimated space which&lt;br/&gt;
    could possibly be saved by compressing the conglomerate, in bytes.&amp;lt;/LI&amp;gt;&lt;br/&gt;
    &amp;lt;/UL&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12671326" author="mikem" created="Fri, 6 Feb 2009 21:25:10 +0000"  >&lt;p&gt;i am surprised it is latch contention and not lock contention, but does make sense that it becomes bigger and bigger problem the more concurrent the JVM and multi-processors.  In this case I think we should just wait on the latch rather than retry.  &lt;/p&gt;

&lt;p&gt;Try getPage() instead of getPageNoWait()&lt;/p&gt;</comment>
                            <comment id="12671331" author="mikem" created="Fri, 6 Feb 2009 21:27:39 +0000"  >&lt;p&gt;When this is fixed the release note should mention that the fix can&apos;t resolve past lost space, only future updates.  Only an&lt;br/&gt;
offline full compress of the table is guaranteed to get all the missing space caused by this problem in the past.&lt;/p&gt;</comment>
                            <comment id="12671346" author="mikem" created="Fri, 6 Feb 2009 21:50:38 +0000"  >&lt;p&gt;This diff just adds some more sanity manager logging to the 3 spots where if the retry&apos;s fail we will lose space until a full compress table is done.&lt;/p&gt;</comment>
                            <comment id="12671374" author="kmarsden" created="Fri, 6 Feb 2009 23:53:31 +0000"  >&lt;p&gt;Attached is a patch for this issue.  Per Mike&apos;s suggestion I changed the code to call getPage()  instead of getPageNoWait.  I kept the null check but got rid of the retries.  I am not totally sure that the null check is still needed though.&lt;/p&gt;

&lt;p&gt;I included  Mike&apos;s debug statements for the other cases where space may not be reclaimed after three tries.  After this issue is resolved I will log another Jira issue to address those cases.  I don&apos;t want to try to address them in this patch because I don&apos;t have reproducible cases for them.&lt;/p&gt;

&lt;p&gt;Also included is a regression test.&lt;/p&gt;

&lt;p&gt;I am running tests now.&lt;/p&gt;
</comment>
                            <comment id="12671376" author="kmarsden" created="Fri, 6 Feb 2009 23:58:21 +0000"  >&lt;p&gt;Need a release note to indicate that a full offline compress is needed to reclaim space consumed by this issue.  The fix will prevent future growth but won&apos;t reclaim old space.&lt;/p&gt;</comment>
                            <comment id="12671497" author="kmarsden" created="Sat, 7 Feb 2009 17:39:48 +0000"  >&lt;p&gt;Regression tests passed except for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3993&quot; title=&quot;With IBM 1.6 T_RawStoreFactory fails with There should be 0 observers, but we still have 1 observers on Win 2K&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3993&quot;&gt;&lt;del&gt;DERBY-3993&lt;/del&gt;&lt;/a&gt;.  Please review.&lt;/p&gt;</comment>
                            <comment id="12671809" author="kristwaa" created="Mon, 9 Feb 2009 11:23:21 +0000"  >&lt;p&gt;I applied the patch and ran the test, which succeeded.&lt;br/&gt;
When I removed the fix in ReclaimSpaceHelper, the test failed as expected. I have also started the regression tests.&lt;/p&gt;

&lt;p&gt;Besides from two formatting issues (line 41 and 93 in the diff), the patch looks good to me.&lt;br/&gt;
I can&apos;t say if calling getPage instead of getPageNoWait is okay without looking more into the code (i.e. how / if it affects the flow), but I see that you have gotten confirmation on this already.&lt;br/&gt;
I also understand that if we get into the situation that causes growth, a sane Derby build will fail iff a specific debug flag is set, otherwise it will forget about the &quot;lost space&quot; and continue to operate as normal.&lt;/p&gt;</comment>
                            <comment id="12671850" author="kmarsden" created="Mon, 9 Feb 2009 13:35:20 +0000"  >&lt;p&gt;Thanks Kristian for reviewing the patch.  Just to clarify, the new debug statements won&apos;t cause a sane build with derby.debug.true=DaemonTrace set to fail.  It will just cause additional debug statements to print to the derby.log.  After this issue is closed I&apos;ll file another issue to investigate and fix space reclamation for the other two cases where we give up after 3 tries.&lt;/p&gt;

</comment>
                            <comment id="12671865" author="kristwaa" created="Mon, 9 Feb 2009 14:21:32 +0000"  >&lt;p&gt;Thanks for correcting me, Kathey.&lt;br/&gt;
My test run just completed, and only testStressMulti failed.&lt;/p&gt;</comment>
                            <comment id="12671930" author="kmarsden" created="Mon, 9 Feb 2009 17:21:05 +0000"  >&lt;p&gt;Attached is the release note. It doesn&apos;t fit very well into our template but should get the message across.&lt;/p&gt;
</comment>
                            <comment id="12671946" author="mikem" created="Mon, 9 Feb 2009 18:04:41 +0000"  >&lt;p&gt;the patch and the test look good to me.  I have the following suggestions which are not necessary for committing the fix.&lt;/p&gt;

&lt;p&gt;o maybe add the same comment from other places in the code to the new code that replaces the retry.  I can&apos;t think of any reason&lt;br/&gt;
    we would get a null here so I don&apos;t think retry is worth it, and shutting down the system is not going to help, but it is a silent failure&lt;br/&gt;
    of the reclaim code - around line 380:&lt;/p&gt;

&lt;p&gt;    // If code gets here, the space will be lost forever, and&lt;br/&gt;
    // can only be reclaimed by a full offline compress of the&lt;br/&gt;
     // table/index.&lt;/p&gt;

&lt;p&gt;o i think the test for checkin is fiine.  It might be interesting to just see what happens if you bump the number of concurrent threads&lt;br/&gt;
   way up to 100 or so.  It may not matter much if the machine you run on is only dual core, but probably worth one run.  maybe we can&lt;br/&gt;
   get someone on the list with an 8+ way to run the test with concurrent users bumped up?&lt;/p&gt;

&lt;p&gt;o i think it would be worth it to file at least jira tasks for investigating the other 2 paths in the code that might leave unreclaimed space.&lt;br/&gt;
   as I said I am surprised the row lock path didn&apos;t fire.  I think one could make the table open path fire if the test were modified to &lt;br/&gt;
   force table level exclusive locking - hopefully a much less likely scenario for user applications.  it might take different statements also.&lt;/p&gt;</comment>
                            <comment id="12672011" author="kmarsden" created="Mon, 9 Feb 2009 21:13:15 +0000"  >&lt;p&gt;attached is an updated patch derby-4050_diff2.txt which &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixes formatting issues pointed out by Kristian.&lt;/li&gt;
	&lt;li&gt;Adds recommended debug output suggested by Mike.&lt;/li&gt;
	&lt;li&gt;Makes it easy to configure the number of threads for ClobReclamationTest.  I ran with 100 threads and saw 201 NUMALLOCATEDPAGES which is expected I think for 100 rows.  Without the patch it grew to something so scary I aborted the test for fear of running out of space on my laptop.  The checked in test will remain at 2 threads.&lt;/li&gt;
	&lt;li&gt;Changes the test to set derby.debug.true to DaemonThread so we can see any interesting output as it runs.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12672228" author="kristwaa" created="Tue, 10 Feb 2009 10:38:25 +0000"  >&lt;p&gt;I ran the latest patch on a 32 way machine with 100 threads. The test succeeded.&lt;br/&gt;
FYI, it took over an hour to complete. I attached the log file as &apos;derby.log-32w100t.txt&apos;, in case anyone wants to have a look.&lt;/p&gt;</comment>
                            <comment id="12672293" author="kmarsden" created="Tue, 10 Feb 2009 15:29:10 +0000"  >&lt;p&gt;Thanks Kristian for running the long test.  I don&apos;t see anything in the log indicating we are hitting one of the places where we give up on reclamation, but I am kind of surprised the log is so small.  Anyway, unless someone objects, I will commit this to trunk later this morning.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12672326" author="kmarsden" created="Tue, 10 Feb 2009 17:16:10 +0000"  >&lt;p&gt;ommitted revision 743023 to trunk.  I plan to backport this one all the way to 10.1 after the nightlies run cleanly so will leave this open until that task is complete.&lt;/p&gt;
</comment>
                            <comment id="12673106" author="kmarsden" created="Fri, 13 Feb 2009 01:01:09 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4054&quot; title=&quot;Multithreaded clob update with exclusive table locking causes table growth that is not reclaimed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4054&quot;&gt;DERBY-4054&lt;/a&gt; is another issue where long columns may not get reclaimed.&lt;/p&gt;</comment>
                            <comment id="12673107" author="kmarsden" created="Fri, 13 Feb 2009 01:01:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4055&quot; title=&quot;Space may not be reclaimed if  row locks are not available after three retries &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4055&quot;&gt;DERBY-4055&lt;/a&gt; is another issue where long columns may not get reclaimed&lt;/p&gt;</comment>
                            <comment id="12673294" author="kmarsden" created="Fri, 13 Feb 2009 16:41:28 +0000"  >&lt;p&gt;another space reclamation issue.&lt;/p&gt;</comment>
                            <comment id="12673295" author="kmarsden" created="Fri, 13 Feb 2009 16:41:56 +0000"  >&lt;p&gt;another space reclamation issue.&lt;/p&gt;</comment>
                            <comment id="12673296" author="kmarsden" created="Fri, 13 Feb 2009 16:43:30 +0000"  >&lt;p&gt;another space reclamation issue.&lt;/p&gt;</comment>
                            <comment id="12683184" author="myrna" created="Wed, 18 Mar 2009 21:40:04 +0000"  >&lt;p&gt;10.5 rel mgnt work: release note generator choked on missing quotes around href.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12414680">DERBY-4054</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12414691">DERBY-4055</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12414731">DERBY-4056</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12414759">DERBY-4057</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12515565">DERBY-5356</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12399608" name="ClobGrowth.java" size="4410" author="kmarsden" created="Fri, 6 Feb 2009 01:00:48 +0000"/>
                            <attachment id="12399697" name="derby-4050_diff.txt" size="9054" author="kmarsden" created="Fri, 6 Feb 2009 23:53:31 +0000"/>
                            <attachment id="12399856" name="derby-4050_diff2.txt" size="10649" author="kmarsden" created="Mon, 9 Feb 2009 21:13:15 +0000"/>
                            <attachment id="12399689" name="derby-4050_more_debug.diff" size="3471" author="mikem" created="Fri, 6 Feb 2009 21:50:38 +0000"/>
                            <attachment id="12399906" name="derby.log-32w100t.txt" size="5034" author="kristwaa" created="Tue, 10 Feb 2009 10:38:25 +0000"/>
                            <attachment id="12399673" name="derby.log.growth" size="96242" author="kmarsden" created="Fri, 6 Feb 2009 19:39:19 +0000"/>
                            <attachment id="12399674" name="derby.log.nogrowth" size="71226" author="kmarsden" created="Fri, 6 Feb 2009 19:39:19 +0000"/>
                            <attachment id="12402512" name="releaseNote.html" size="2607" author="myrna" created="Wed, 18 Mar 2009 21:40:04 +0000"/>
                            <attachment id="12399837" name="releaseNote.html" size="2605" author="kmarsden" created="Mon, 9 Feb 2009 17:21:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Feb 2009 10:26:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23992</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0flb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36344</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>