<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4520/DERBY-4520.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4520] Refactor and extend data type cloning facilities</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4520</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;With the increased use of streams to represent data values, the cloning facilities needs to be improved.&lt;/p&gt;

&lt;p&gt;Unless I get pushback, I will proceed by producing patches to reach the following goals:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;move the functionality provided by CloneableObject into DataValueDescriptor&lt;br/&gt;
   (all classes implementing CloneableObject also implements DataValueDescriptor)&lt;/li&gt;
	&lt;li&gt;introduce the cloning methods cloneValue, cloneState and cloneHolder (all in DataValueDescriptor, see description below)&lt;br/&gt;
   Note that they all return a usable DVD. I&apos;m all ears for better names for the clone methods (another suggestion mentioned is cloneDeep, cloneHalfDeep, and cloneShallow).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;NOTE: See comment below, the method names changed during the course of development.&lt;/p&gt;

&lt;p&gt;cloneValue &amp;lt;deep&amp;gt; (new method, functionality was present through combined calls to the DVD public interface) &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a DVD obtained through cloneValue is independent of other DVDs and the state of the Derby store&lt;/li&gt;
	&lt;li&gt;the data value will be materialized&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;cloneState &amp;lt;halfDeep&amp;gt; (~= DataValueDescriptor.getClone)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a DVD obtained through cloneState is independent of other DVDs, but may depend on the state of the Derby store (due to references to store streams)&lt;/li&gt;
	&lt;li&gt;the data value will be materialized if the value is represented by a non-cloneable stream or if Derby believes materializing the value is more appropriate than keeping the stream representation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;cloneHolder &amp;lt;shallow&amp;gt; (~= CloneableObject.cloneObject)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a DVD obtained through cloneHolder is dependent on the original DVD and its clones made through cloneHolder. If one of the DVDs changes its state, all of them will be affected. Will also be dependent on the state of the Derby store if there are references to store streams.&lt;/li&gt;
	&lt;li&gt;the data value will never be materialized due to cloneHolder being invoked&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For many of the data types, cloneState and cloneHolder will forward to cloneValue.&lt;/p&gt;

&lt;p&gt;cloneState will be used the most. cloneValue is currently only required in the sorter. cloneHolder is required (for performance reasons and maybe to avoid OOME) when DVDs pass through temporary holders (BackingStoreHashtable, TemporaryRowHolderImpl). I have not gone through all the usages of cloneState to see if any of them can be, or has to be, replaced with another clone-call.&lt;/p&gt;

&lt;p&gt;The ability to clone store streams will be added by Mike&apos;s patch attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;New method names:&lt;br/&gt;
It turned out that using only two methods was sufficient:&lt;br/&gt;
cloneHolder &amp;lt;shallow&amp;gt; (as above)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;cloneValue(boolean forceMaterialization) &amp;lt;halfDeep or deep&amp;gt;&lt;br/&gt;
Basically, cloneValue(false) equals cloneState() above, and cloneValue(true) equals cloneValue() above.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12446023">DERBY-4520</key>
            <summary>Refactor and extend data type cloning facilities</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Jan 2010 13:18:21 +0000</created>
                <updated>Thu, 4 Mar 2010 13:45:26 +0000</updated>
                            <resolved>Thu, 4 Mar 2010 13:45:26 +0000</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12802834" author="kristwaa" created="Wed, 20 Jan 2010 13:46:25 +0000"  >&lt;p&gt;Patch 1a removes the use of CloneableObject.cloneObject for RowLocation because it isn&apos;t needed. DataValueDescriptor.getClone is used instead.&lt;br/&gt;
There is an assert in MergeSort (line 462), checking if the objects implement CloneableObject. HeapRowLocation extends DataType, which implements CloneableObject. The assert will be removed in a follow-up patch, together with CloneableObject itself.&lt;/p&gt;

&lt;p&gt;I rewrote the assert code in BaseActivation to avoid creating two clones of the row location in sane builds.&lt;/p&gt;

&lt;p&gt;I plan to commit this patch very soon, after I have once more run the regression tests.&lt;br/&gt;
After these changes, there are just a few usages of CloneableObject.cloneObject left. The method will be moved into DataValueDescriptor.&lt;/p&gt;</comment>
                            <comment id="12802857" author="knutanders" created="Wed, 20 Jan 2010 15:00:36 +0000"  >&lt;p&gt;Patch 1a looks like a good improvement to me.&lt;/p&gt;</comment>
                            <comment id="12803249" author="kristwaa" created="Thu, 21 Jan 2010 10:45:47 +0000"  >&lt;p&gt;Thanks for having a look at the patch, Knut Anders.&lt;/p&gt;

&lt;p&gt;Committed patch 1a to trunk with revision 901642.&lt;/p&gt;</comment>
                            <comment id="12803347" author="kristwaa" created="Thu, 21 Jan 2010 16:08:30 +0000"  >&lt;p&gt;Patch 2a removes the interface CloneableObject.&lt;br/&gt;
I moved the method cloneObject into DataValueDescriptor, and plan to rename it (or maybe merge it with another clone-method). Note that the method now returns a DataValueDescriptor, not an Object.&lt;br/&gt;
Updated some comments and removed some unused imports.&lt;br/&gt;
Regression tests passed.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12803659" author="kristwaa" created="Fri, 22 Jan 2010 10:34:36 +0000"  >&lt;p&gt;Committed patch 2a to trunk with revision 902050.&lt;/p&gt;

&lt;p&gt;I&apos;ll move on to provide the patch for cloning a store stream (extracting the code from the patch attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
Note that cloning a store stream doesn&apos;t materialize the data value. Another stream object will be instantiated which will read data from the same data pages as the original stream.&lt;/p&gt;</comment>
                            <comment id="12803696" author="knutanders" created="Fri, 22 Jan 2010 13:44:59 +0000"  >&lt;p&gt;Patch 2a looks good to me. I found one of the comments a little unclear, though:&lt;/p&gt;

&lt;p&gt;+        // History: We used to &lt;b&gt;not&lt;/b&gt; materialize streams when getting a clone&lt;br/&gt;
+        //          here (i.e. used cloneObject, not getClone). We still do.&lt;br/&gt;
+        // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-802&quot; title=&quot;OutofMemory Error when reading large blob when statement type is ResultSet.TYPE_SCROLL_INSENSITIVE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-802&quot;&gt;&lt;del&gt;DERBY-802&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does &quot;We still do&quot; mean that we still materialize the stream, or that we still do not materialize the stream?&lt;/p&gt;</comment>
                            <comment id="12803708" author="kristwaa" created="Fri, 22 Jan 2010 14:37:47 +0000"  >&lt;p&gt;Attached patch 3a, which does the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adds the required code for cloning store streams&lt;/li&gt;
	&lt;li&gt;modified OverflowInputStream to fill the byte array on the first read instead of at construction/initialization time, which also allowed me to remove some throws-clauses&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The delayed buffer filling should reduce the penalty in cases where we clone and the user never actually access the value. I had to fix the broken/inaccurate error reporting in OverflowInputStream.fillByteHolder to make the regression tests pass. The cause for the failures was that the error got reported in a different way because the real exception got lost.&lt;br/&gt;
Most of the code is from Mike&apos;s patch, but I did make some changes. Also note that I haven&apos;t included any of the real fixes from derby-3650-preliminary_2_diff.txt  (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;

&lt;p&gt;The next step is to introduce and/or modify the various clone methods we need in DataValueDescriptor, wiring in the stream cloning where appropriate.&lt;/p&gt;</comment>
                            <comment id="12803716" author="kristwaa" created="Fri, 22 Jan 2010 14:50:24 +0000"  >&lt;p&gt;Knut&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;confusing comment&amp;#93;&lt;/span&gt; Does &quot;We still do&quot; mean that we still materialize the stream, or that we still do not materialize the stream? &lt;/p&gt;

&lt;p&gt;It means we still don&apos;t materialize. However, I might change the way the stream is cloned (using the terms in the issue description, either cloneState or cloneHolder).&lt;br/&gt;
I will clarify the comment in a later patch.&lt;/p&gt;</comment>
                            <comment id="12803725" author="knutanders" created="Fri, 22 Jan 2010 15:30:08 +0000"  >&lt;p&gt;Patch 3a looks fine, as far as I can tell. A couple of questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Would it be better to place CloneableStream in iapi.services.io instead of iapi.types?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Do you think it would also make sense to remove the call to fillByteHolder() from OverflowInputStream.resetStream(), based on the same reasoning that led to its removal from OverflowInputStream&apos;s constructor?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12804459" author="kristwaa" created="Mon, 25 Jan 2010 09:23:30 +0000"  >&lt;p&gt;Thanks for the suggestions, Knut Anders.&lt;/p&gt;

&lt;p&gt;Moving the interface definitely makes sense.&lt;br/&gt;
I also removed the call to fillByteBuffer in OverflowInputStream.resetStream and ran the regression tests. No tests failed.&lt;br/&gt;
I had a look at the code using the resetStream method, and I think the only thing we change is that any exceptions raised by fillByteBuffer will occur in an InputStream-call instead of in resetStream. In most cases the resetStream is called first, followed by a call to either read or skip.&lt;br/&gt;
I don&apos;t think this last change will have any effect on performance, but it is better to keep the behavior consistent across the different methods.&lt;/p&gt;

&lt;p&gt;I incorporated both changes into patch 3b, and committed it to trunk with revision 902742.&lt;/p&gt;</comment>
                            <comment id="12804482" author="knutanders" created="Mon, 25 Jan 2010 10:20:52 +0000"  >&lt;p&gt;Thanks for making these changes, Kristian. One nit that I missed the last time:&lt;/p&gt;

&lt;p&gt;+    public InputStream cloneStream() {&lt;br/&gt;
+        if (SanityManager.DEBUG)&lt;br/&gt;
+            SanityManager.ASSERT(in instanceof CloneableStream);&lt;/p&gt;

&lt;p&gt;+        InputStream new_input_stream = ((CloneableStream) in).cloneStream();&lt;/p&gt;

&lt;p&gt;Here, the ASSERT is actually making debugging harder, so I think it&apos;s better to remove it. The only thing we will see in debug builds is &quot;assert failed&quot;, whereas non-debug builds will show the more helpful message &quot;ClassCastException: SomeStreamClass cannot be cast to CloneableStream&quot;.&lt;/p&gt;</comment>
                            <comment id="12804499" author="kristwaa" created="Mon, 25 Jan 2010 10:49:23 +0000"  >&lt;p&gt;I wonder if we should just remove the same asserts for init-, close- and resetStream in FormatIdInputStream as well?&lt;/p&gt;</comment>
                            <comment id="12804500" author="knutanders" created="Mon, 25 Jan 2010 10:56:41 +0000"  >&lt;p&gt;Yes, +1 to removing them from FormatIdInputStream too.&lt;/p&gt;</comment>
                            <comment id="12804525" author="kristwaa" created="Mon, 25 Jan 2010 12:51:17 +0000"  >&lt;p&gt;Removed unhelpful asserts, and added @see tags to copy JavaDoc from the interfaces, with revision 902798.&lt;/p&gt;</comment>
                            <comment id="12804547" author="kristwaa" created="Mon, 25 Jan 2010 14:23:19 +0000"  >&lt;p&gt;FYI, I&apos;ve seen the following stream classes passed in to FormatIdInputStream (this list may not be exhaustive):&lt;br/&gt;
  java.io.ByteArrayInputStream&lt;br/&gt;
  org.apache.derby.iapi.services.io.ArrayInputStream&lt;br/&gt;
  org.apache.derby.iapi.services.io.LimitInputStream&lt;br/&gt;
  org.apache.derby.iapi.types.RawToBinaryFormatStream&lt;br/&gt;
  org.apache.derby.iapi.types.ReaderToUTF8Stream&lt;br/&gt;
  org.apache.derby.impl.store.raw.data.OverflowInputStream&lt;/p&gt;</comment>
                            <comment id="12804574" author="kristwaa" created="Mon, 25 Jan 2010 16:05:02 +0000"  >&lt;p&gt;Attached patch 4a, a small patch renaming cloneObject to cloneHolder and modifying a few comments.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;br/&gt;
I hope to commit this tomorrow. Running tests again now due to a last minute change.&lt;/p&gt;</comment>
                            <comment id="12804960" author="kristwaa" created="Tue, 26 Jan 2010 09:59:29 +0000"  >&lt;p&gt;Committed patch 4a to trunk with revision 903150.&lt;/p&gt;</comment>
                            <comment id="12805127" author="dagw" created="Tue, 26 Jan 2010 18:41:16 +0000"  >&lt;p&gt;Patch 4a looks good to me.&lt;/p&gt;

&lt;p&gt;The issue description puzzled me in the explanatiion of cloneHolder&lt;br/&gt;
&amp;lt;shallow&amp;gt;&quot;:&lt;/p&gt;

&lt;p&gt; :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the data value will never be materialized due to cloneHolder being invoked&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; For many of the data types, cloneState and cloneHolder will forward&lt;br/&gt;
 to cloneValue. &lt;/p&gt;

&lt;p&gt;But for cloneValue you say:  &quot;- the data value will be materialized&quot;,&lt;br/&gt;
so presumablu the sentence above should read:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for streams, the data value will never be materialized due to&lt;br/&gt;
   cloneHolder being invoked&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;or some such?&lt;/p&gt;</comment>
                            <comment id="12805191" author="kristwaa" created="Tue, 26 Jan 2010 20:41:07 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Yes, you are right - this is all about streams &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;ll edit the description in a little while (just want to wait for another potential change).&lt;br/&gt;
Regarding the non-stream values, I think it is still correct to say they will be materialized by cloneValue. I haven&apos;t verified this for all data types, but for instance SQLDecimal will transform the value from a byte array (all in memory) to a BigDecimal-object when cloning. If the value is already a BigDecimal, it is shared between the original and the clone (which is fine, BigDecimal is immutable).&lt;/p&gt;

&lt;p&gt;When it comes to the methods from the description, I&apos;m considering merging cloneState and cloneValue into cloneValue(boolean forceMaterialization): false will equal cloneState, true will equal the cloneValue-method from the issue description.&lt;br/&gt;
Running the regression tests with getClone changed to cloneValue(true)  was successful.&lt;br/&gt;
Changing all these to cloneValue(false) resulted in a total of 21 (four distinct error messages) test failures in the following tests:&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbc4.LobSortTest&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.TriggerTest&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.store.StreamingColumnTest&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest&lt;/p&gt;

&lt;p&gt;I don&apos;t know yet if the streams causing these errors are coming from the store or from triggers, procedures or the user - I&apos;ll look into this.&lt;/p&gt;</comment>
                            <comment id="12829579" author="kristwaa" created="Thu, 4 Feb 2010 11:15:47 +0000"  >&lt;p&gt;Attached patch 5a, which main purposes are to rename getClone to cloneValue and to add the boolean argument &apos;forceMaterialization&apos;.&lt;/p&gt;

&lt;p&gt;Regarding the methods mentioned in the issue description, &apos;cloneValue(true)&apos; equals &apos;cloneValue&apos; and &apos;cloneValue(false)&apos; equals &apos;cloneState&apos;.&lt;br/&gt;
The default value of &apos;forceMaterialization&apos; has been set to false. I&apos;m aware of one location where it has to be switched to true (BasicSortObserver). Note that I have not yet changed the methods to actually use the new variable, and further that many types won&apos;t care about its value because they are in a way always materialized (i.e. the value is a primitive, or represented by an immutable object).&lt;/p&gt;

&lt;p&gt;Besides from formatting changes and the renaming, I made a few other changes as well:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;GenericParameter&lt;br/&gt;
Removed a bunch of unused imports (iapi.types.* was imported trice).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;ValueRow&lt;br/&gt;
Removed special handling of RowLocation in &apos;getNewNullRow&apos;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SQLSmallInt, SQLTinyInt&lt;br/&gt;
Made constructor used for cloning only private.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;XML&lt;br/&gt;
Added argument in contructor used for cloning to tell whether the underlying source should be materialized or not.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Regression tests passed.&lt;br/&gt;
Patch ready for review.&lt;/p&gt;

&lt;p&gt;NOTE: Some of our clone methods are unsafe in the sense that it is possible to change a value which is shared between two or more holders (DVDs). One such example is values represented by a byte array.&lt;/p&gt;</comment>
                            <comment id="12829683" author="kristwaa" created="Thu, 4 Feb 2010 18:30:09 +0000"  >&lt;p&gt;Committed patch 5a to trunk with revision 906595.&lt;br/&gt;
I&apos;ll incorporate any feedback in a later patch.&lt;/p&gt;</comment>
                            <comment id="12829695" author="kristwaa" created="Thu, 4 Feb 2010 18:56:51 +0000"  >&lt;p&gt;I factored out the removal of unused imports in the data type sub-trees starting with SQLBinary and SQLChar (which are the most relevant ones regarding the cloning).&lt;br/&gt;
Attached as patch 6a and committed to trunk with revision 906609.&lt;/p&gt;</comment>
                            <comment id="12829709" author="kristwaa" created="Thu, 4 Feb 2010 19:14:06 +0000"  >&lt;p&gt;Patch 7a changes the cloneValue methods for SQLBlob and SQLClob.&lt;br/&gt;
The general idea for the character and binary values is that all streams are materialized when cloning the value, expect for BLOB and CLOB. &lt;br/&gt;
Note that BasicSortObserver is now forcing materialization of streams. This is how it used to be (before patch 5a),  but I think this may cause problems for a few types of queries - for instance &apos;select * from mytable order by length(myClob)&apos;. This will have to be addressed under a different Jira.&lt;/p&gt;

&lt;p&gt;Also note that there are a few TODOs in the clone methods. I&apos;d appreciate feedback on any of these if you have something on your mind.&lt;/p&gt;

&lt;p&gt;Regression tests passed (re-running as well to be sure).&lt;br/&gt;
Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12829733" author="kristwaa" created="Thu, 4 Feb 2010 19:43:38 +0000"  >&lt;p&gt;I need to provide a new revision of patch 7, as I forgot to modify CollatorSQLClob. As it stands now, these CLOB values will always be materialized. I guess we don&apos;t have any tests for large collator CLOBs running in VMs with a small heap...&lt;/p&gt;</comment>
                            <comment id="12831010" author="kristwaa" created="Mon, 8 Feb 2010 17:31:02 +0000"  >&lt;p&gt;Attached patch 7b, which corrects two typos (BLOB -&amp;gt; CLOB) and adds a shortcut for cloning NULLs.&lt;br/&gt;
The shortcut feels better, because using the fall-back case (calling clone.setValue(getBytes()) results in the two DVDs referencing the same byte array for BLOBs.&lt;br/&gt;
I have decided to create a separate Jira for CollatorSQLClob, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4542&quot; title=&quot;Avoid materialization where possible when cloning CollatorSQLClob&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4542&quot;&gt;&lt;del&gt;DERBY-4542&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 907732.&lt;/p&gt;</comment>
                            <comment id="12832948" author="kristwaa" created="Fri, 12 Feb 2010 11:07:11 +0000"  >&lt;p&gt;Changed issue description to mention the resulting two methods (instead of three).&lt;/p&gt;

&lt;p&gt;Also, I&apos;m not sure if more work needs to be done under this issue, but I&apos;ll keep it open for while.&lt;/p&gt;</comment>
                            <comment id="12841256" author="kristwaa" created="Thu, 4 Mar 2010 13:45:26 +0000"  >&lt;p&gt;Closing issue, related / additional work will be done in separate Jiras.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12394964">DERBY-3650</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12430883" name="derby-4520-1a-RowLocation_cloning.diff" size="6006" author="kristwaa" created="Wed, 20 Jan 2010 13:50:15 +0000"/>
                            <attachment id="12430882" name="derby-4520-1a-RowLocation_cloning.diff" size="4574" author="kristwaa" created="Wed, 20 Jan 2010 13:46:25 +0000"/>
                            <attachment id="12431033" name="derby-4520-2a-remove_CloneableObject_iface.diff" size="13096" author="kristwaa" created="Thu, 21 Jan 2010 16:08:30 +0000"/>
                            <attachment id="12431034" name="derby-4520-2a-remove_CloneableObject_iface.stat" size="722" author="kristwaa" created="Thu, 21 Jan 2010 16:08:30 +0000"/>
                            <attachment id="12431112" name="derby-4520-3a-CloneableStream_and_delayed_fill.diff" size="8530" author="kristwaa" created="Fri, 22 Jan 2010 14:37:47 +0000"/>
                            <attachment id="12431113" name="derby-4520-3a-CloneableStream_and_delayed_fill.stat" size="379" author="kristwaa" created="Fri, 22 Jan 2010 14:37:47 +0000"/>
                            <attachment id="12431296" name="derby-4520-3b-CloneableStream_and_delayed_fill.diff" size="8871" author="kristwaa" created="Mon, 25 Jan 2010 09:23:30 +0000"/>
                            <attachment id="12431295" name="derby-4520-3b-CloneableStream_and_delayed_fill.stat" size="385" author="kristwaa" created="Mon, 25 Jan 2010 09:23:30 +0000"/>
                            <attachment id="12431316" name="derby-4520-4a-cloneObject_renamed_cloneHolder.diff" size="7297" author="kristwaa" created="Mon, 25 Jan 2010 16:05:02 +0000"/>
                            <attachment id="12434806" name="derby-4520-5a-getClone_renamed_cloneValue.diff" size="44883" author="kristwaa" created="Thu, 4 Feb 2010 11:15:47 +0000"/>
                            <attachment id="12434807" name="derby-4520-5a-getClone_renamed_cloneValue.stat" size="3496" author="kristwaa" created="Thu, 4 Feb 2010 11:15:47 +0000"/>
                            <attachment id="12434852" name="derby-4520-6a-unused_imports.diff" size="6694" author="kristwaa" created="Thu, 4 Feb 2010 18:56:51 +0000"/>
                            <attachment id="12434860" name="derby-4520-7a-lob_clonevalue_methods.diff" size="8484" author="kristwaa" created="Thu, 4 Feb 2010 19:14:06 +0000"/>
                            <attachment id="12435182" name="derby-4520-7b-lob_clonevalue_methods.diff" size="8697" author="kristwaa" created="Mon, 8 Feb 2010 17:31:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Jan 2010 15:00:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31262</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0r07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38193</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>