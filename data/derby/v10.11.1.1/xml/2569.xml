<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2569/DERBY-2569.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2569] The check to see if two DataTypeDescriptors(DTDs) are comparable or not needs to consider collation into decision.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2569</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently, when Derby needs to check if 2 DTDs are comparable or not, it calls TypeCompiler.comparable method. This method now has to move to DTD because we should consider collation information while deciding if 2 DTDs are comparable or not. That collation information is not available to TypeCompiler but it is available at DTD level. More information on this can be found at &lt;a href=&quot;http://www.nabble.com/Re%3A-Changes-to-comparable-method-in-TypeCompiler-tf3603373.html#a10089238&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A-Changes-to-comparable-method-in-TypeCompiler-tf3603373.html#a10089238&lt;/a&gt;. Some of the important info from the thread is copied below&lt;/p&gt;

&lt;p&gt;&amp;gt; I think what you are suggesting is to move comparable method out from &lt;br/&gt;
&amp;gt; the TypeCompiler and into DataTypeDescriptor altogether. So, the &lt;br/&gt;
&amp;gt; existing code, where we use TypeCompiler to decide if 2 types can be &lt;br/&gt;
&amp;gt; compared or not should now call a method on DTD to determine &lt;br/&gt;
&amp;gt; comparability. This might be cleaner than stuffing collation information &lt;br/&gt;
&amp;gt; in CharTypeCompiler but I am just wondering why was comparable not &lt;br/&gt;
&amp;gt; defined on DTD at the very start. Why do we go through TypeCompiler and &lt;br/&gt;
&amp;gt; what functionality does TypeCompiler provide that DTD does not? In other &lt;br/&gt;
&amp;gt; words, I don&apos;t understand the connection between TypeCompiler and DTD &lt;br/&gt;
&amp;gt; and how they fit together. &lt;/p&gt;

&lt;p&gt;It&apos;s not that TypeCompiler provides functionality that DTD does not, but &lt;br/&gt;
instead DTD has functionality/information that TypeCompiler does not. &lt;br/&gt;
Ignoring the &quot;compiler&quot; aspect for the moment there are two components &lt;br/&gt;
to a DataTypeDescriptor, the underlying SQL type (INTEGER, CHAR, &lt;br/&gt;
VARCHAR, XML etc.) represented as TypeId and attributes of the &lt;br/&gt;
descriptor (nullablity, length, precision, scale and now collation). &lt;/p&gt;

&lt;p&gt;Thus &lt;/p&gt;

&lt;p&gt;  DTD = TypeId + &lt;/p&gt;
{attributes}
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Some functionality is applicable to a type regardless of a specific &lt;br/&gt;
DTD&apos;s attributes, thus methods for that functionality can be declared on &lt;br/&gt;
TypeId instead of DTD. &lt;/p&gt;

&lt;p&gt;Some functionality on the other hand needs the attribute information as &lt;br/&gt;
well, say the display length of a type is a function of its &lt;br/&gt;
length/precision&amp;amp;scale and its underlying SQL type. &lt;/p&gt;

&lt;p&gt;The collation changes have moved the comparable check from being only &lt;br/&gt;
reliant on the SQL type (TypeId) to being dependent on the type&apos;s &lt;br/&gt;
attributes (collation type and implicit/explicit). Thus the original &lt;br/&gt;
location for the comparable method made sense, but now does not. &lt;/p&gt;

&lt;p&gt;The TypeCompiler/TypeId split was due to an early plan to have a &lt;br/&gt;
execute-only version of the technology, this never happened as there was &lt;br/&gt;
no demand for it. One of the benefits of a SQL engine is the ability to &lt;br/&gt;
execute arbitrary queries, which would not be available in an execute &lt;br/&gt;
only version. Code cleanup could be done here which probably would &lt;br/&gt;
decrease the footrprint of derby. &lt;/p&gt;

&lt;p&gt;HTH, &lt;br/&gt;
Dan. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12367644">DERBY-2569</key>
            <summary>The check to see if two DataTypeDescriptors(DTDs) are comparable or not needs to consider collation into decision.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Apr 2007 08:56:14 +0100</created>
                <updated>Thu, 2 May 2013 03:29:06 +0100</updated>
                            <resolved>Mon, 7 May 2007 22:34:59 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12490256" author="mamtas" created="Fri, 20 Apr 2007 09:03:59 +0100"  >&lt;p&gt;I am attaching a patch DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v1_diff.txt which is NOT ready for commit because I am still running the tests but I wanted to put it out in case someone has time to review the changes. Basically, this patch moves the logic for comparable method from various TypeCompiler implementations into DTD. This is because now we need collation information to determine if 2 types are comparable or not and that information is not available to TypeCompilers. In addition, ofcourse, all the callers of TypeCompiler&apos;s comparable method now call DTD.comparable.&lt;/p&gt;

&lt;p&gt;Would greatly appreciate any feedback.&lt;/p&gt;</comment>
                            <comment id="12490270" author="mamtas" created="Fri, 20 Apr 2007 09:43:37 +0100"  >&lt;p&gt;Please disregard the &lt;em&gt;v1&lt;/em&gt; patch. Instead, I have attached DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v2_diff.txt In the earlier patch, I was not returning false in DTD.comparable method for character types if we were not comparing them with date/time/timestamp/boolean or another character type. Have fixed that in &lt;em&gt;v2&lt;/em&gt; and have restarted the tests&lt;/p&gt;</comment>
                            <comment id="12490405" author="djd" created="Fri, 20 Apr 2007 18:13:42 +0100"  >&lt;p&gt;In the v2 patch some of the comments do not match the code, e.g. for TIME and TIMESTAMP compare checks in DTD.comparable(). They say the type is comparable to user types, but the code checks for character types.&lt;/p&gt;

&lt;p&gt;In DTD.comparable() any reason for the switch in checking which type group the current type is?&lt;br/&gt;
The first 1/3 of the method uses the isXXXType() methods which seem more readable to me, but the remainder performs the checks using a switch statement on the jdbc type identifier.&lt;/p&gt;

&lt;p&gt;The return &quot;true&quot; at the end of the method is dubious, would a &quot;fail-safe&quot; of return false be better? So that if a new type is added in the future&lt;br/&gt;
it doesn&apos;t become comparable to all other types automatically?&lt;/p&gt;</comment>
                            <comment id="12490414" author="mamtas" created="Fri, 20 Apr 2007 18:47:03 +0100"  >&lt;p&gt;Looking at the existing comparable code in various implementations of TypeCompiler, it seems that all the types(except for Ref, XML, CLOB, BLOB) are comparable to user types. I will go ahead and add/modify comment regarding this in DTD.comparable.&lt;/p&gt;

&lt;p&gt;I though switch was better in terms of code readability for the base types. The if statements at the beginning of the method are to cover big umbrella checks like no comparison involving CLOB, BLOB, Ref and java classes types. I won&apos;t mind changing it to one style if that seems better, &lt;/p&gt;

&lt;p&gt;Yes, returning false will be th better thing to do. I will go ahead and change that.&lt;/p&gt;</comment>
                            <comment id="12490428" author="mamtas" created="Fri, 20 Apr 2007 20:02:47 +0100"  >&lt;p&gt;Thinking more about it, may be it will be better to not look for individual format id in switch statement because that would mean, in future, when say another numeric type is added, we will have to modify the switch statement to look for that new numeric type. Instead, if I check for isXXX() method, then this code won&apos;t have to be maintained for new types that fall into existing isXXX() umbrella. I will go ahead and commit what I have now(changes from &lt;em&gt;v2&lt;/em&gt; patch : with more comments and method returning false at the end rather than true) in another hr or so and then change the code to use isXXX and check that as subsequent patch.&lt;/p&gt;</comment>
                            <comment id="12490449" author="mamtas" created="Fri, 20 Apr 2007 21:42:37 +0100"  >&lt;p&gt;Commited patch DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v3_diff.txt using revision 530910 with following commit comments&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2569&quot; title=&quot;The check to see if two DataTypeDescriptors(DTDs) are comparable or not needs to consider collation into decision.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2569&quot;&gt;&lt;del&gt;DERBY-2569&lt;/del&gt;&lt;/a&gt; Basically, this commit moves the logic for comparable method from various TypeCompiler implementations into DTD. This is because now we need collation information also to determine if 2 types are comparable or not and that information is not available to TypeCompilers. In addition, ofcourse, all the callers of TypeCompiler&apos;s comparable method now call DTD.comparable.&lt;/p&gt;</comment>
                            <comment id="12491890" author="mamtas" created="Thu, 26 Apr 2007 07:36:43 +0100"  >&lt;p&gt;Committed patch DERBY2569_change_formatid_checks_to_isXXX_checks_v1_diff.txt with revision 532627. The patch is attached to this Jira entry for easy review if anyone is interested.&lt;/p&gt;

&lt;p&gt;The commit comments were as follows&lt;br/&gt;
This is more of a code cleanup for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2569&quot; title=&quot;The check to see if two DataTypeDescriptors(DTDs) are comparable or not needs to consider collation into decision.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2569&quot;&gt;&lt;del&gt;DERBY-2569&lt;/del&gt;&lt;/a&gt;. &lt;br/&gt;
Rather than using switch statement to check for individual format ids, this patch uses isXXX methods wherever applicable to determine if two types are comparable or not. This is because with format id checking, in future, when say another numeric type is added, we will have to modify the switch statement to look for that new numeric type&apos;s format id. Instead, if we check for isXXX() method, then the formatid checks won&apos;t have to be maintained because the new numeric type will fall into existing isXXX() umbrella.  &lt;/p&gt;

</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12362828">DERBY-2335</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12355889" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v1_diff.txt" size="28042" author="mamtas" created="Fri, 20 Apr 2007 09:03:59 +0100"/>
                            <attachment id="12355890" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v1_stat.txt" size="1525" author="mamtas" created="Fri, 20 Apr 2007 09:03:59 +0100"/>
                            <attachment id="12355897" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v2_diff.txt" size="28093" author="mamtas" created="Fri, 20 Apr 2007 09:43:36 +0100"/>
                            <attachment id="12355898" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v2_stat.txt" size="1525" author="mamtas" created="Fri, 20 Apr 2007 09:43:37 +0100"/>
                            <attachment id="12355955" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v3_diff.txt" size="28361" author="mamtas" created="Fri, 20 Apr 2007 21:42:37 +0100"/>
                            <attachment id="12355956" name="DERBY2569_Move_comparable_From_TypeCompiler_To_DTD_v3_stat.txt" size="1525" author="mamtas" created="Fri, 20 Apr 2007 21:42:37 +0100"/>
                            <attachment id="12356296" name="DERBY2569_change_formatid_checks_to_isXXX_checks_v1_diff.txt" size="9039" author="mamtas" created="Thu, 26 Apr 2007 07:36:43 +0100"/>
                            <attachment id="12356297" name="DERBY2569_change_formatid_checks_to_isXXX_checks_v1_stat.txt" size="140" author="mamtas" created="Thu, 26 Apr 2007 07:36:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Apr 2007 17:13:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30519</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0k3r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37075</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>