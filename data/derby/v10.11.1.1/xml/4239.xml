<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4239/DERBY-4239.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4239] Possible corruption if SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE is called during checkpoint </title>
                <link>https://issues.apache.org/jira/browse/DERBY-4239</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;corruption with storerecovery oc_rec? tests.  ERROR XSLA7: Cannot redo operation null in the log when compress occurs during checkpoint, then jvm exits&lt;/p&gt;

&lt;p&gt;I saw corruption on z/OS with the storerecovery tests and 10.5.1.1.  The failure comes in oc_rec3 trying to connect to the database, but the actual problem seems to have occurred with the prior test oc_rec2.  The problem is somewhat intermittent, happening approximately 1/4 times.  I extracted the case from the harness and will attach the reproduction and run the script repro.ksh.  The script will loop up to 50 times until it gets the failure which looks like.&lt;/p&gt;

&lt;p&gt;ERROR XSLA7: Cannot redo operation null in the log.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:311)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:268)&lt;br/&gt;
	at CheckTables.main(CheckTables.java:8)&lt;br/&gt;
Caused by: ERROR XSDBB: Unknown page format at page Page(16,Container(0, 1073)), page dump follows: Hex dump:&lt;br/&gt;
00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
&amp;lt;snip lots of 000&apos;s&amp;gt;&lt;/p&gt;

&lt;p&gt;I ran it with 10.3 and it completed all 50 iterations, so whether JVM or Derby issue it seems new since 10.3. (I haven&apos;t tried with 10.4).  Oddly I have run tests many times before on this machine using in the 10.5.1.1 release and the same jvm and have never seen this failure, so am looking into whether maybe something changed on the machine or environment.&lt;/p&gt;
</description>
                <environment>z/OS z10 processor. &lt;br/&gt;
java version &amp;quot;1.6.0&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pmz3160sr4-20090219_01(SR4))&lt;br/&gt;
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 z/OS s390-31 jvmmz3160-20090215_29883 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20090215_029883_bHdSMr&lt;br/&gt;
JIT  - r9_20090213_2028&lt;br/&gt;
GC   - 20090213_AA)&lt;br/&gt;
JCL  - 20090218_01&lt;br/&gt;
also &lt;br/&gt;
java version &amp;quot;1.6.0&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pmz3160sr2ifix-20081021_01(SR2+IZ32776+IZ33456))&lt;br/&gt;
IBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 z/OS s390-31 jvmmz3160ifx-20081010_24288 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20081009_024288_bHdSMr&lt;br/&gt;
JIT  - r9_20080721_1330ifx2&lt;br/&gt;
GC   - 20080724_AA)&lt;br/&gt;
JCL  - 20080808_02&lt;br/&gt;
</environment>
        <key id="12425976">DERBY-4239</key>
            <summary>Possible corruption if SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE is called during checkpoint </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikem">Mike Matrigali</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 May 2009 00:36:26 +0100</created>
                <updated>Wed, 12 Jan 2011 22:24:29 +0000</updated>
                            <resolved>Fri, 5 Jun 2009 16:33:25 +0100</resolved>
                                    <version>10.1.3.3</version>
                    <version>10.2.2.1</version>
                    <version>10.3.2.1</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.1.3.3</fixVersion>
                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.2.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12711425" author="kmarsden" created="Thu, 21 May 2009 00:42:13 +0100"  >&lt;p&gt;Attaching wombat_with_keeplog.zip -  the database after a failing  run with derby.storage.keepTransactionLog=true&lt;br/&gt;
derby.log - the derby.log from a failing run.&lt;br/&gt;
reproDerby4239.zip - java files and repro.ksh.&lt;/p&gt;

&lt;p&gt;To reproduce, on z/OS unzip reproDerby4239.zip &lt;br/&gt;
javac -g *.java&lt;br/&gt;
repro.ksh&lt;/p&gt;

&lt;p&gt;I tried on Windows and Myrna on Linux and we were not able to reproduce on those platforms.&lt;/p&gt;
</comment>
                            <comment id="12711664" author="kmarsden" created="Thu, 21 May 2009 16:57:04 +0100"  >&lt;p&gt;I have not been able to reproduce with 100 iterations with -Xint, so at first glance it would appear to be a JIT issue.  It does reproduce with -Xjit:optLevel=noOpt,count=0 which removes most of  JIT optimizations.   I was incorrect that it does not produce with 10.3.  I was able to pop the issue with 10.3.3.1 - (765035). I had done the original run with a slightly earlier sane build.  I am not sure yet whether it only reproduces with insane builds.&lt;/p&gt;

&lt;p&gt;Typically with JIT problems you can generate a log of all the compiled methods and their optimization level and 1) Feed that back into the next run to get a consistent reproduction. and 2) Do a binary search with iterative runs with half the log file to narrow down the failing method.&lt;br/&gt;
Unfortunately, neither of these methods work in this case, suggesting some timing or order of compilation issue.&lt;/p&gt;

&lt;p&gt;I would like some tips on how to identify  issue earlier, preferably as the  bad log record as it was written to disk.   Is there any way to do this?&lt;/p&gt;
</comment>
                            <comment id="12711832" author="mikem" created="Thu, 21 May 2009 22:53:46 +0100"  >&lt;p&gt;Kathey asked that I log suggestions about what to look at in corrupt db&apos;s, so logging them here.  I don&apos;t have any conclusions yet what is happening, just&lt;br/&gt;
posting info as I see it.&lt;/p&gt;

&lt;p&gt;The information I am posting is from looking at the wombat_with_keeplog.zip &lt;br/&gt;
posted to this issue.  This is a good one to look at as kathey has managed to &lt;br/&gt;
reproduce and had it set up so that all transaction logs are kept.   This means that&lt;br/&gt;
it is possible to read through these records and get an exact history of all &quot;writing&quot;&lt;br/&gt;
operations.   There a couple of ways to do this.  With a sane server you can set &lt;br/&gt;
derby.storage.keepTransactionLog=true (i am not sure if this works with insane &lt;br/&gt;
server or not).  A supported way of almost doing this is to take a online backup, &lt;br/&gt;
which I believe will then stop logs from being deleted - but note that online backup&lt;br/&gt;
may change the behavior of some operations which are documented in the backup&lt;br/&gt;
docs.&lt;/p&gt;


&lt;p&gt;In this case we are debugging a reproducible boot error, so just starting up &lt;br/&gt;
reproduces the error.   First I set the following which will only work in a SANE&lt;br/&gt;
server.:&lt;br/&gt;
derby.debug.true=LogTrace&lt;br/&gt;
This will dump a short description of each log record that is processed.  For &lt;br/&gt;
recovery this will include all the records that are read at boot time.  Note this &lt;br/&gt;
will not be all the records in the log, it will just dump out the ones looked at during&lt;br/&gt;
normal reboot.&lt;/p&gt;

&lt;p&gt;The first thing I look for is the first occurence of the error and if it is nested the lowest nested error.  In this case I get the following.  From this I get that recovery&lt;br/&gt;
reboot is trying to redo a delete on page 16 of container 1073.  The page version&lt;br/&gt;
is 775 so there have been 775 updates to this page before this.  The instant&lt;br/&gt;
is the basically the log record address (6,447354) - the first part 6 means it is&lt;br/&gt;
in log6.dat, second part is the byte offset into log6.dat:&lt;br/&gt;
Page(16,Container(0, 1073)) pageVersion 775 :  Delete : Slot=1 recordId=7 delete=true instant =&lt;br/&gt;
 (6,447354) logEnd = (6,447413) logIn at 25 available 18^M&lt;/p&gt;

&lt;p&gt;From the stack the operation is reading the page in from disk and getting a page&lt;br/&gt;
of all zero&apos;s when it expects to get a formated page at pageVersion 774.&lt;/p&gt;

&lt;p&gt;snip from log:&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64300 : Page Operation: Page(17,Container(0, 1041)) pageVersion 776 :  Delete : Slot=1 recordId=7 delete=true instant =&lt;br/&gt;
 (6,447236) logEnd = (6,447295) logIn at 25 available 18^M&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64300 : Page Operation: Page(16,Container(0, 1057)) pageVersion 775 :  Delete : Slot=1 recordId=7 delete=true instant =&lt;br/&gt;
 (6,447295) logEnd = (6,447354) logIn at 25 available 18^M&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64300 : Page Operation: Page(16,Container(0, 1073)) pageVersion 775 :  Delete : Slot=1 recordId=7 delete=true instant =&lt;br/&gt;
 (6,447354) logEnd = (6,447413) logIn at 25 available 18^M&lt;/p&gt;

&lt;p&gt;------------  BEGIN SHUTDOWN ERROR STACK -------------&lt;br/&gt;
^M&lt;br/&gt;
ERROR XSLA7: Cannot redo operation Page Operation: Page(16,Container(0, 1073)) pageVersion 775 :  Delete : Slot=1 recordId=7 delete=true in the log.^M&lt;br/&gt;
    at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296)^M&lt;br/&gt;
    at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1525)^M&lt;br/&gt;
    at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)^M&lt;br/&gt;
    at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)^M&lt;br/&gt;
    at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)^M&lt;br/&gt;
    at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)^M&lt;br/&gt;
    at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)^M&lt;br/&gt;
    at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)^M&lt;br/&gt;
    at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)^M&lt;br/&gt;
    at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)^M&lt;br/&gt;
    at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)^M&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)^M&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:374)^M&lt;br/&gt;
    at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)^M&lt;br/&gt;
    at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)^M&lt;br/&gt;
    at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)^M&lt;br/&gt;
    at java.sql.DriverManager.getConnection(DriverManager.java:316)^M&lt;br/&gt;
    at java.sql.DriverManager.getConnection(DriverManager.java:297)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:462)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.util.startJBMS(util.java:542)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.ConnectionEnv.init(ConnectionEnv.java:64)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.utilMain.initFromEnvironment(utilMain.java:164)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.Main.&amp;lt;init&amp;gt;(Main.java:225)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.Main.getMain(Main.java:189)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:174)^M&lt;br/&gt;
    at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)^M&lt;br/&gt;
    at org.apache.derby.tools.ij.main(ij.java:59)^M&lt;br/&gt;
Caused by: ERROR XSDBB: Unknown page format at page Page(16,Container(0, 1073)), page dump follows: Hex dump:&lt;br/&gt;
00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................&lt;br/&gt;
... complete page dump of a page of all ZERO&apos;s&lt;/p&gt;</comment>
                            <comment id="12712063" author="kmarsden" created="Fri, 22 May 2009 13:30:54 +0100"  >&lt;p&gt;attached is a database from when we are able to reconnect and run CheckTables successfully (wombat_keeplog_notcorrupt.zip)  and also two text files showing the log file sizes on 4 good (able to reconnect) with checktables and 4 bad (corrupt) databases, created  with the attached reproduction and derby.storage.keepTransactionLog=true&lt;br/&gt;
along with badlogsizes.txt and goodlogsizes.txt showing the log file sizes.&lt;/p&gt;

&lt;p&gt;I notice the good ones all have 7 log files and the bad ones all have 6, but even between good databases the log sizes vary somewhat.   Why the difference?&lt;/p&gt;

&lt;p&gt;Also I looked at first corrupted database that I posted  and found the corruption in the  index TEST1_IDX_INDCOL2.&lt;/p&gt;

&lt;p&gt;To map the index to the container number  1073, I doctored up the database so I could connect to it and then ran.&lt;br/&gt;
SELECT  C.CONGLOMERATENUMBER, C.CONGLOMERATENAME  FROM SYS.SYSCONGLOMERATES C WHERE CONGLOMERATENUMBER=1073;&lt;/p&gt;

&lt;p&gt;I will check other corrupt databases and see if it is corruption of the same index and  see if the reproduction works without the index.&lt;/p&gt;



</comment>
                            <comment id="12712102" author="kmarsden" created="Fri, 22 May 2009 15:17:43 +0100"  >&lt;p&gt;Looking at some corrupt databases I saw issues with the TEST1 table, TEST1_IDX_INDCOL3, TEST1_IDX_INDCOL1,  and TEST1_IDX_KEYCOL, so it seems to be all over the place except that it is the TEST1 table  and its indexes.&lt;/p&gt;</comment>
                            <comment id="12712107" author="kmarsden" created="Fri, 22 May 2009 15:26:08 +0100"  >&lt;p&gt;reattaching goodlogsizes.txt and badlogsizes.txt as the original ones were unreadable (still in EBCDIC)&lt;/p&gt;</comment>
                            <comment id="12712134" author="kmarsden" created="Fri, 22 May 2009 16:17:44 +0100"  >&lt;p&gt;I used this little script to identify the bad containers.  It should only be run on a copy of the corrupted db in case anything goes wrong.&lt;/p&gt;

&lt;p&gt;You have to get the container number out of derby.log and then run. &lt;/p&gt;

&lt;p&gt;indentifyBadContainer.ksh &amp;lt;database&amp;gt; &amp;lt;containernumber&amp;gt;&lt;/p&gt;

&lt;p&gt;It could be smarter and grep or awk the containernumber out of the log for you and  determine whether this is a table or index and just output the name instead of the query output, but it sufficed for my purposes.&lt;/p&gt;</comment>
                            <comment id="12712245" author="kmarsden" created="Fri, 22 May 2009 21:41:21 +0100"  >&lt;p&gt;Just a few more notes.  &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I reproduced the issue on  IBM 1.5 again on z/OS.&lt;br/&gt;
java version &quot;1.5.0&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build pmz31devifx-20090408 (SR9-2 ))&lt;br/&gt;
IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 z/OS s390-31 j9vmmz3123ifx-20090324 (JIT enabled)&lt;br/&gt;
J9VM - 20090319_32038_bHdSMr&lt;br/&gt;
JIT  - 20081112_1511ifx1_r8&lt;br/&gt;
GC   - 200811_07)&lt;br/&gt;
JCL  - 20090408&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I put a wait for post commit after the delete and again after the compress before exiting the jvm and it still reproduced, so the issue does not seem related to any contention between the delete postcommit operations and the compress or any problem related to not completing the postcommit before exiting the JVM.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It does not seem to reproduce with a clean shutdown, so seems specific to recovery and the log files that were written.  Mike thinks perhaps some timing issue related to when the checkpoint record gets laid down and what log records are after the checkpoint record.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mike said the log records appear to be well formed.  There is not just the random corruption that I would have expected if this were a JVM bug.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I am running with 1.4.2 and haven&apos;t seen it yet after 34  runs. (It of course always seems to pop just after I hit send saying it hasn&apos;t happened.)    I know there are significant changes in the JVM from 1.4.2 to 1.5 and I think also the I/O behavior of Derby under 1.4.2 is different than it is with 1.5 with the incorporation of nio  so this doesn&apos;t really help us determine if it is a JVM or Derby issue.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12712265" author="kmarsden" created="Fri, 22 May 2009 22:12:12 +0100"  >&lt;p&gt;Looking again I see nio is available in 1.4.2.  Does the Derby store behavior change in anyway using 1.4.2. vs 1.5?&lt;/p&gt;
</comment>
                            <comment id="12712555" author="knutanders" created="Sun, 24 May 2009 15:19:16 +0100"  >&lt;p&gt;The cache manager that uses a ConcurrentHashMap is only loaded on JVM&amp;gt;=1.5, and this may affect the timing of the checkpoints.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering if this could be related to the new background cleaner which is used in a different way than the old one. Does the problem reproduce if you make ConcurrentCache.getBackgroundCleaner() always return null?&lt;/p&gt;</comment>
                            <comment id="12712720" author="kmarsden" created="Mon, 25 May 2009 14:32:10 +0100"  >&lt;p&gt;I am not sure if this is another bug or the same problem or a combination of both, but the attached reprodcution reproBackgroundCheckpoint.zip reproduces corruption on Windows with IBM 1.6 Sun JDK 1.6.&lt;/p&gt;

&lt;p&gt;The reproduction is the same as the original one except it has a thread which continually runs checkpoints while the program runs and therefore makes it more likely there is a conflict between the normal checkpoint and the one initiated by the compress.&lt;/p&gt;

&lt;p&gt;To run, compile the java programs and run the script  reprobckchkpt.ksh.  It may take a dozen iterations or so.&lt;/p&gt;

&lt;p&gt;With the Sun JVM, got the same &lt;br/&gt;
Caused by: ERROR XSDBB: Unknown page format at page Page(98,Container(0, 1024)), page dump follows: Hex dump:...&lt;/p&gt;

&lt;p&gt;The exceptions with IBM 1.6 were  different though:&lt;br/&gt;
============= begin nested exception, level (4) ===========&lt;/p&gt;

&lt;p&gt;java.io.EOFException: Reached end of file while attempting to read a whole page.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.RAFContainer4.readFull(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage0(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.CachedPage.readPage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.cache.ConcurrentCache.find(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.BaseContainer.getAnyPage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAnyPage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;/p&gt;

&lt;p&gt;	at CheckTables.main(CheckTables.java:8)&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;Caused by: ERROR XSLAM: Cannot verify database format at &lt;/p&gt;
{1} due to IOException.&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1882)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(LogToFile.java:2985)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(LogToFile.java:2944)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(Scan.java:704)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:206)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1176)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)&lt;br/&gt;
&lt;br/&gt;
	... 7 more&lt;br/&gt;
&lt;br/&gt;
Caused by: java.io.EOFException&lt;br/&gt;
&lt;br/&gt;
	at java.io.RandomAccessFile.readInt(RandomAccessFile.java:739)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1869)&lt;br/&gt;
&lt;br/&gt;
	... 33 more&lt;br/&gt;
&lt;br/&gt;
============= begin nested exception, level (1) ===========&lt;br/&gt;
&lt;br/&gt;
java.sql.SQLException: Cannot verify database format at {1}
&lt;p&gt; due to IOException.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2614)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:374)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;/p&gt;

&lt;p&gt;	at CheckTables.main(CheckTables.java:8)&lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: Cannot verify database format at &lt;/p&gt;
{1} due to IOException.&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
&lt;br/&gt;
	... 9 more&lt;br/&gt;
&lt;br/&gt;
Caused by: ERROR XSLAM: Cannot verify database format at {1}
&lt;p&gt; due to IOException.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1882)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(LogToFile.java:2985)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(LogToFile.java:2944)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(Scan.java:704)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:206)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)&lt;/p&gt;

&lt;p&gt;	... 7 more&lt;/p&gt;

&lt;p&gt;Caused by: java.io.EOFException&lt;/p&gt;

&lt;p&gt;	at java.io.RandomAccessFile.readInt(RandomAccessFile.java:739)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1869)&lt;/p&gt;

&lt;p&gt;	... 33 more&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (1) ===========&lt;/p&gt;

&lt;p&gt;============= begin nested exception, level (2) ===========&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Cannot verify database format at &lt;/p&gt;
{1} due to IOException.&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2614)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:374)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)&lt;br/&gt;
&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;br/&gt;
&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;br/&gt;
&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;br/&gt;
&lt;br/&gt;
	at CheckTables.main(CheckTables.java:8)&lt;br/&gt;
&lt;br/&gt;
Caused by: ERROR XSLAM: Cannot verify database format at {1}
&lt;p&gt; due to IOException.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1882)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(LogToFile.java:2985)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(LogToFile.java:2944)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(Scan.java:704)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:206)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)&lt;/p&gt;

&lt;p&gt;	... 7 more&lt;/p&gt;

&lt;p&gt;Caused by: java.io.EOFException&lt;/p&gt;

&lt;p&gt;	at java.io.RandomAccessFile.readInt(RandomAccessFile.java:739)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1869)&lt;/p&gt;

&lt;p&gt;	... 33 more&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (2) ===========&lt;/p&gt;

&lt;p&gt;============= begin nested exception, level (3) ===========&lt;/p&gt;

&lt;p&gt;ERROR XSLAM: Cannot verify database format at &lt;/p&gt;
{1}
&lt;p&gt; due to IOException.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:296)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1882)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(LogToFile.java:2985)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(LogToFile.java:2944)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(Scan.java:704)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:206)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:374)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;/p&gt;

&lt;p&gt;	at CheckTables.main(CheckTables.java:8)&lt;/p&gt;

&lt;p&gt;Caused by: java.io.EOFException&lt;/p&gt;

&lt;p&gt;	at java.io.RandomAccessFile.readInt(RandomAccessFile.java:739)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1869)&lt;/p&gt;

&lt;p&gt;	... 33 more&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (3) ===========&lt;/p&gt;

&lt;p&gt;============= begin nested exception, level (4) ===========&lt;/p&gt;

&lt;p&gt;java.io.EOFException&lt;/p&gt;

&lt;p&gt;	at java.io.RandomAccessFile.readInt(RandomAccessFile.java:739)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(LogToFile.java:1869)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(LogToFile.java:2985)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(LogToFile.java:2944)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(Scan.java:704)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.Scan.getNextRecord(Scan.java:206)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:924)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:573)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1858)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1724)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1602)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1021)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2581)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:374)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;/p&gt;

&lt;p&gt;	at CheckTables.main(CheckTables.java:8)&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (4) ===========&lt;/p&gt;

&lt;p&gt;2009-05-25 02:28:24.156 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Less severe exception raised during cleanup (ignored) An attempt was made to close a transaction that was still active. The transaction has been aborted.&lt;/p&gt;

&lt;p&gt;ERROR 40XT4: An attempt was made to close a transaction that was still active. The transaction has been aborted.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.xact.Xact.close(Xact.java:1136)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.store.raw.xact.XactContext.cleanupOnError(XactContext.java:140)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(ContextManager.java:333)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(TransactionResourceImpl.java:419)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:584)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:238)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:316)&lt;/p&gt;

&lt;p&gt;	at java.sql.DriverManager.getConnection(DriverManager.java:273)&lt;/p&gt;

&lt;p&gt;	at CheckTables.main(CheckTables.java:8)&lt;/p&gt;

</comment>
                            <comment id="12713059" author="mikem" created="Tue, 26 May 2009 16:37:31 +0100"  >&lt;p&gt;derby_dumponly.log is a derby.log booted on the database that won&apos;t boot, with the following debug flag.  This forces the boot to just print all the log records rather than &lt;br/&gt;
process them:&lt;br/&gt;
derby.debug.true=DumpLogOnly,LogTrace&lt;/p&gt;

&lt;p&gt;Using this I can see what was going on in the db after the problem log record &lt;br/&gt;
causing the crash.  What I see is that toward the end the is a log record for &lt;br/&gt;
the compress of container 1073:&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64851 : Page Operation: Page(0,Container(0, 1073)) pageVersion 107 :  CompressSpaceOperation: newHighestPage = 13;num_p&lt;br/&gt;
ages_truncated = 31 to Page(0,Container(0, 1073)) instant = (6,3249863) logEnd = (6,3249908) logIn at 25 available 4^M&lt;/p&gt;

&lt;p&gt;If I look backward in the log from this point I find the most recent operation on 1073:&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64820 : Page Operation: Page(29,Container(0, 1024)) pageVersion 66 : Purge : 1 slots starting at 12 (recordId=18) insta&lt;br/&gt;
nt = (6,3210739) logEnd = (6,3210791) logIn at 23 available 13^M&lt;/p&gt;

&lt;p&gt;And If I again start at that Compress log record and search backward for a &lt;br/&gt;
checkpoint record I find:&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 61634 : Checkpoint :     redoLWM (4,943)&lt;br/&gt;
        undoLWM (4,943)&lt;br/&gt;
**************************&lt;br/&gt;
org.apache.derby.impl.store.raw.xact.TransactionTable@16ca16ca&lt;br/&gt;
Transaction Table: size = 1 largestUpdateXactId = 61634&lt;br/&gt;
Xid=61634 gid=null firstLog=(4,943) lastLog=null transactionStatus=0 myxact=null update=true recovery=true prepare=false needExclusion=true&lt;br/&gt;
--------------------------- instant = (4,981) logEnd = (4,1056) logIn at 55 available 4^M&lt;/p&gt;

&lt;p&gt;And the last checkpoint in the log is:&lt;br/&gt;
DEBUG LogTrace OUTPUT: scanned 64191 : Checkpoint :     redoLWM (6,24)&lt;br/&gt;
        undoLWM (5,61)&lt;br/&gt;
**************************&lt;br/&gt;
org.apache.derby.impl.store.raw.xact.TransactionTable@64a864a8&lt;br/&gt;
Transaction Table: size = 2 largestUpdateXactId = 64852&lt;br/&gt;
Xid=64191 gid=null firstLog=(6,3250100) lastLog=null transactionStatus=0 myxact=null update=true recovery=true prepare=false needExclusion=true&lt;br/&gt;
Xid=64852 gid=null firstLog=(6,3249980) lastLog=(6,3250018) transactionStatus=0 myxact=null update=true recovery=true prepare=false needExclusion=true&lt;br/&gt;
--------------------------- instant = (6,3250138) logEnd = (6,3250245) logIn at 87 available 4^M&lt;/p&gt;

&lt;p&gt;The problem with this is that for redo recovery of compress space record to work&lt;br/&gt;
properly, there must be a checkpoint with a redo lwm (low water mark) that is after any operation on the container before the compress operation happens.&lt;br/&gt;
Compress calls checkpoint to make this happen.  The reason is that redo &lt;br/&gt;
recovery wants to replay any log record it has making pages march orderly from&lt;br/&gt;
version n to version n+1, ...   But the compress space operation shrinks the file&lt;br/&gt;
on disk losing version n, so version n+1 can&apos;t be redone.  &lt;/p&gt;

&lt;p&gt;In this case the last checkpoint has redo lwm of (6,24) and the last operation is&lt;br/&gt;
after that at (6,3210739)&lt;/p&gt;</comment>
                            <comment id="12713062" author="mikem" created="Tue, 26 May 2009 16:44:10 +0100"  >&lt;p&gt;It looks like the problem is when compress asks for a checkpoint while another checkpoint is in progress.  The current  checkpoint code will either wait for current checkpoint to finish or just return if one is already in progress.  compress needs a path that will wait for current one &lt;br/&gt;
to finish and restart another one, and wait for that one to finish.&lt;/p&gt;

&lt;p&gt;I&apos;ll concentrate on a patch for this.   I am not sure if the last stack that kathey posted is this same bug.  &lt;/p&gt;</comment>
                            <comment id="12713069" author="kmarsden" created="Tue, 26 May 2009 17:02:59 +0100"  >&lt;p&gt;Thanks Mike for looking at this.  If we still see the EOFException  with my background checkpoint repro after your fix,  I will file a separate bug.&lt;/p&gt;</comment>
                            <comment id="12713125" author="kmarsden" created="Tue, 26 May 2009 18:23:11 +0100"  >&lt;p&gt;Changing the affects version to include past versions.   I haven&apos;t actually seen it  with 10.2, but did with 10.1.3.3 and see no reason why 10.2 wouldn&apos;t be affected.&lt;/p&gt;</comment>
                            <comment id="12713208" author="mikem" created="Tue, 26 May 2009 20:44:40 +0100"  >&lt;p&gt;Preliminary patch for this issue.  I have not run full tests yet, but would like feedback from anyone who could reproduce the original error - I have not actually reproduced&lt;br/&gt;
it myself.  &lt;/p&gt;

&lt;p&gt;This patch only includes code changes, no new tests.&lt;/p&gt;

&lt;p&gt;The fix is to add interfaces that allow compress table to tell the underlying store that&lt;br/&gt;
it needs a new checkpoint and needs to wait until that checkpoint has made it into&lt;br/&gt;
the log before proceeding with the operation which will shrink the file destroying &lt;br/&gt;
pages that may otherwise participate in redo recovery.&lt;/p&gt;

&lt;p&gt;I have only altered the behavior for the compress operation and left all other&lt;br/&gt;
checkpoint() calling paths the same, but reading some &lt;br/&gt;
comments while looking at the code makes me concerned that some of the&lt;br/&gt;
backup code and backup for encryption code may have also have problems with&lt;br/&gt;
an ongoing checkpoint.  But would rather address those problems if they exist in&lt;br/&gt;
another issue.&lt;/p&gt;</comment>
                            <comment id="12713314" author="kmarsden" created="Wed, 27 May 2009 00:00:34 +0100"  >&lt;p&gt;Thanks Mike for the quick fix.  With the patch, I got 200 clean runs on z/OS and also 200 clean runs on Windows (IBM 1.6) with the windows repro.&lt;/p&gt;

&lt;p&gt;I took a quick look at the patch and have no useful technical comments but noticed that the patch mixes spaces and tabs.  Also there is an extra @param wait in javadoc(LogFactory:107).&lt;/p&gt;

&lt;p&gt;I have a question though.  Under what conditions would we not want to queue the checkpoint requests and force a new checkpoint?&lt;/p&gt;

&lt;p&gt;When we look at the other cases,  in addition to backup, I think it would be good to look at:&lt;br/&gt;
CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE() to make sure it has no issues.  It seems like it should  force a new checkpoint as well.&lt;/p&gt;



</comment>
                            <comment id="12713331" author="mikem" created="Wed, 27 May 2009 00:55:39 +0100"  >&lt;p&gt;The normal case where we ask for a checkpoint, which is triggered by default when we think &lt;br/&gt;
we have logged approximately 10meg of log is a case where we don&apos;t want to start a new one.&lt;br/&gt;
The only reason we are doing a checkpoint in this case is to minimize recovery time if we happen to crash.  If there is already a checkpoint in progress, then that is good enough.  There&lt;br/&gt;
is no correctness of needed a checkpoint to start NOW and wait for it to finish.&lt;br/&gt;
Checkpoints can really slow down the over all throughput of the system, especially if user&lt;br/&gt;
has increased the cache size, so we don&apos;t want to do additional ones if they are&lt;br/&gt;
unnecessary.&lt;/p&gt;

&lt;p&gt;I am not sure what backup needs.&lt;/p&gt;

&lt;p&gt;In the case of the user callable routine we don&apos;t really say much about what it does:&lt;br/&gt;
The SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE system procedure checkpoints the database by flushing all cached data to disk.  But I would lean toward changing its behavior to&lt;br/&gt;
also do another checkpoint.  &lt;/p&gt;

&lt;p&gt;I am tempted to change the patch to eliminate the wait parameter, and instead all code that &lt;br/&gt;
currently calls wait will always force a new checkpoint and wait for it if it finds a checkpoint in&lt;br/&gt;
progress.  If I do this change I will make sure the &quot;normal&quot; checkpoint does not call this path.  Any opinions?  It would be nice if we could generate bug scripts that show the&lt;br/&gt;
specific bugs that are fixed by adding the additional checkpoints, but this is hard as is&lt;br/&gt;
evidenced we still don&apos;t have a perfect repro for the compress bug.&lt;/p&gt;</comment>
                            <comment id="12713449" author="mikem" created="Wed, 27 May 2009 07:58:07 +0100"  >&lt;p&gt;First patch hung the tests.  Needed to move the retry of the checkpoint out of the synchronized block.  Still not ready for commit, rerunning all tests.&lt;/p&gt;</comment>
                            <comment id="12714208" author="mikem" created="Thu, 28 May 2009 23:44:03 +0100"  >&lt;p&gt;Derby-4239_3.diff is the patch I intend to commit.  It passes complete set of nightly tests.&lt;/p&gt;

&lt;p&gt;After looking at the backup code it seemed like backup really wanted to have the same behavior&lt;br/&gt;
that compress was looking for.  I also changed the behavior of the system procedure checkpoint&lt;br/&gt;
to match backup and compress checkpoint.  &lt;/p&gt;

&lt;p&gt;I moved the waiting code into the subroutine so that it could differ between a checkpoint returning&lt;br/&gt;
false because another a checkpoint was in progress and a couple of other possible conditions.&lt;br/&gt;
Without this change system could get in a state where it looped forever trying to get a checkpoint&lt;br/&gt;
(one case was trying to force a clean shutdown after we had already closed down the logging&lt;br/&gt;
system).&lt;/p&gt;
</comment>
                            <comment id="12714796" author="knutanders" created="Sun, 31 May 2009 01:07:17 +0100"  >&lt;p&gt;Do you think this could be the same as the problem reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3393&quot; title=&quot;Database corruption when adding sleep() in RAFContainer4.writePage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3393&quot;&gt;&lt;del&gt;DERBY-3393&lt;/del&gt;&lt;/a&gt;? I&apos;ve run the storerecovery suite once without the patch and twice with the patch. Without the patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3393&quot; title=&quot;Database corruption when adding sleep() in RAFContainer4.writePage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3393&quot;&gt;&lt;del&gt;DERBY-3393&lt;/del&gt;&lt;/a&gt; was reproduced, but none of the runs with the patch reproduced it.&lt;/p&gt;</comment>
                            <comment id="12714868" author="kmarsden" created="Sun, 31 May 2009 15:38:09 +0100"  >&lt;p&gt;I was doing some more runs on Windows with the patch because I accidentally deleted the database/log with the EOFException and I got a hang.   I don&apos;t really understand what is getting hung up though.&lt;br/&gt;
This is with IBM 1.6 and ReproCorruptionBackgroundCheckpoint.&lt;/p&gt;

&lt;p&gt;2XMFULLTHDDUMP Full thread dump J9 VM (J2RE 6.0 IBM J9 2.4 Windows XP x86-32 build jvmwi3260sr5-20090516_3558820090516_035588_lHdSMr, native threads):&lt;br/&gt;
3XMTHREADINFO      &quot;JIT Compilation Thread&quot; TID:0x41CB1900, j9thread_t:0x00292630, state:CW, prio=10&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x1028, native priority:0xB, native policy:UNKNOWN)&lt;br/&gt;
3XMTHREADINFO      &quot;Gc Slave Thread&quot; TID:0x4209C500, j9thread_t:0x00292FC0, state:CW, prio=5&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x1638, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
3XMTHREADINFO      &quot;derby.antiGC&quot; TID:0x41ED2100, j9thread_t:0x4276259C, state:CW, prio=1&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x970, native priority:0x1, native policy:UNKNOWN)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Native Method)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Object.java:167)&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/services/monitor/AntiGC.run(Bytecode PC:15)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Thread.run(Thread.java:735)&lt;br/&gt;
3XMTHREADINFO      &quot;Thread-2&quot; TID:0x42934500, j9thread_t:0x42762A64, state:CW, prio=5&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x13E8, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Native Method)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Object.java:167)&lt;br/&gt;
4XESTACKTRACE          at java/util/Timer$TimerImpl.run(Timer.java:221)&lt;br/&gt;
3XMTHREADINFO      &quot;derby.rawStoreDaemon&quot; TID:0x42933300, j9thread_t:0x42762F2C, state:CW, prio=5&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0xF30, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Native Method)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Object.wait(Object.java:196(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/services/daemon/BasicDaemon.rest(Bytecode PC:3(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/services/daemon/BasicDaemon.run(Bytecode PC:22)&lt;br/&gt;
4XESTACKTRACE          at java/lang/Thread.run(Thread.java:735)&lt;br/&gt;
3XMTHREADINFO      &quot;Thread-6&quot; TID:0x42933900, j9thread_t:0x42763190, state:CW, prio=5&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x143C, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
4XESTACKTRACE          at sun/nio/ch/FileChannelImpl.force0(Native Method)&lt;br/&gt;
4XESTACKTRACE          at sun/nio/ch/FileChannelImpl.force(FileChannelImpl.java:364(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/io/DirRandomAccessFile4.sync(Bytecode PC:77(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/raw/log/LogToFile.syncFile(Bytecode PC:77(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/raw/log/LogToFile.writeControlFile(Bytecode PC:394(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/raw/log/LogToFile.checkpointWithTran(Bytecode PC:341(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/raw/log/LogToFile.checkpoint(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/raw/RawStore.checkpoint(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/store/access/RAMAccessManager.checkpoint(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/db/BasicDatabase.checkpoint(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/catalog/SystemProcedures.SYSCS_CHECKPOINT_DATABASE(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/exe/acd381409ax0121x944ex95fex00000008ed900.g0(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at sun/reflect/GeneratedMethodAccessor3.invoke(Bytecode PC:16(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at sun/reflect/DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at java/lang/reflect/Method.invoke(Method.java:578(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/services/reflect/ReflectMethod.invoke(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/sql/execute/CallStatementResultSet.open(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/sql/GenericPreparedStatement.executeStmt(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/sql/GenericPreparedStatement.execute(Bytecode PC:4(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/jdbc/EmbedStatement.executeStatement(Bytecode PC:4(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/jdbc/EmbedStatement.execute(Bytecode PC:152(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/impl/jdbc/EmbedStatement.execute(Bytecode PC:7(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at ReproCorruptionBackgroundCheckpoint$1.run(ReproCorruptionBackgroundCheckpoint.java:97(Compiled Code))&lt;br/&gt;
3XMTHREADINFO      &quot;DestroyJavaVM helper thread&quot; TID:0x41CB1300, j9thread_t:0x002923CC, state:CW, prio=5&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x808, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
NULL           ------------------------------------------------------------------------&lt;/p&gt;</comment>
                            <comment id="12714882" author="mikem" created="Sun, 31 May 2009 16:44:23 +0100"  >&lt;p&gt;I am not sure what the expected behavior is of the ReproCorruptionBackgroundCheckpoint() test.   Reading &lt;br/&gt;
the current test it seems like it starts a thread that loops forever doing checkpoints one after another.  The&lt;br/&gt;
stack that you posted doesn&apos;t seem like anything is hanging, it looks like there is a single thread actively doing&lt;br/&gt;
a checkpoint.  &lt;/p&gt;

&lt;p&gt;It seems like the test should stop the user checkpoint thread after the main test has finished.&lt;/p&gt;</comment>
                            <comment id="12714887" author="mikem" created="Sun, 31 May 2009 16:53:51 +0100"  >&lt;p&gt;It seems likely that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3393&quot; title=&quot;Database corruption when adding sleep() in RAFContainer4.writePage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3393&quot;&gt;&lt;del&gt;DERBY-3393&lt;/del&gt;&lt;/a&gt; is related to this.  Changing the write as is suggested in 3393 changes up the timing of checkpoints, and I can imagine that could cause the circumstances &lt;br/&gt;
of 4239.  The errors reported do seem like redo on records that could be explained if compress&lt;br/&gt;
happened on them and a checkpoint was not put down properly to stop redo recovery happening&lt;br/&gt;
on them.&lt;/p&gt;

&lt;p&gt;I am going to run the 3393 case a bunch of times and if it still does not repeat probably close that&lt;br/&gt;
error.  If anyone can cause an error reported in 3393 after the patch for 4239 please post.&lt;/p&gt;</comment>
                            <comment id="12714941" author="kmarsden" created="Mon, 1 Jun 2009 01:07:36 +0100"  >&lt;p&gt;I did another thread dump and confirmed that as you suspected, it was not hung but still looping.&lt;br/&gt;
The thread doing the checkpoint,  is set as a daemon thread, so should have terminated when System.exit() was  called. I am not quite sure why it didn&apos;t with this particular run, but it doesn&apos;t look like a Derby issue, so I won&apos;t pursue it for now.&lt;/p&gt;
</comment>
                            <comment id="12724132" author="kmarsden" created="Thu, 25 Jun 2009 16:41:09 +0100"  >&lt;p&gt;Changing title to be more descriptive and reflect that the problem is not z/OS specific.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12387958">DERBY-3393</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12415707">DERBY-4075</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12426921">DERBY-4252</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12387958">DERBY-3393</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12402150">DERBY-3833</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12409133" name="DERBY-4239_2.diff" size="13340" author="mikem" created="Wed, 27 May 2009 07:58:07 +0100"/>
                            <attachment id="12409315" name="DERBY-4239_3.diff" size="13404" author="mikem" created="Thu, 28 May 2009 23:44:03 +0100"/>
                            <attachment id="12408808" name="badlogsizes.txt" size="2874" author="kmarsden" created="Fri, 22 May 2009 15:26:08 +0100"/>
                            <attachment id="12409065" name="derby-4239_1.diff" size="13441" author="mikem" created="Tue, 26 May 2009 20:44:40 +0100"/>
                            <attachment id="12408745" name="derby.log" size="2296441" author="mikem" created="Thu, 21 May 2009 22:53:46 +0100"/>
                            <attachment id="12408642" name="derby.log" size="198771" author="kmarsden" created="Thu, 21 May 2009 00:42:13 +0100"/>
                            <attachment id="12409046" name="derby_dumponly.zip" size="2239974" author="mikem" created="Tue, 26 May 2009 16:37:31 +0100"/>
                            <attachment id="12408809" name="goodlogsizes.txt" size="2508" author="kmarsden" created="Fri, 22 May 2009 15:26:08 +0100"/>
                            <attachment id="12408812" name="identifyBadContainer.ksh" size="881" author="kmarsden" created="Fri, 22 May 2009 16:17:44 +0100"/>
                            <attachment id="12408948" name="reproBackgroundCheckpoint.zip" size="14922" author="kmarsden" created="Mon, 25 May 2009 14:32:10 +0100"/>
                            <attachment id="12408643" name="reproDerby4239.zip" size="14658" author="kmarsden" created="Thu, 21 May 2009 00:42:13 +0100"/>
                            <attachment id="12408797" name="wombat_keeplog_notcorrupt.zip" size="2469289" author="kmarsden" created="Fri, 22 May 2009 13:30:54 +0100"/>
                            <attachment id="12408641" name="wombat_with_keeplog.zip" size="2467386" author="kmarsden" created="Thu, 21 May 2009 00:42:13 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10364"><![CDATA[Data corruption]]></customfieldvalue>
    <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 21 May 2009 21:53:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24124</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0nzr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37705</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>