<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:16:11 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3819/DERBY-3819.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3819] &apos;Expected Table Scan ResultSet for T3&apos; in &apos;test_predicatePushdown(....PredicatePushdownTest)&apos; since 670215 2008-06-21 18:01:08 MEST</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3819</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;&apos;test_predicatePushdown(org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest)junit.framework.AssertionFailedError: Expected Table Scan ResultSet for T3&apos; since 670215 2008-06-21 18:01:08 MEST &lt;a href=&quot;http://dbtg.thresher.com/derby/test/Daily/UpdateInfo/670215.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/Daily/UpdateInfo/670215.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The failure is seen on SunOS 5.10 / Sun Jvm 1.6.0.&lt;/p&gt;

&lt;p&gt;See e.g. &lt;a href=&quot;http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/sol/682186-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/Daily/jvm1.6/testing/testlog/sol/682186-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test (suites.All) is run with &apos;-XX:-UseThreadPriorities -XX:MaxPermSize=128M -Xmx256M -d64&apos;.&lt;br/&gt;
When run with &apos;-XX:MaxPermSize=128M -Xmx256M&apos; as is used for the other platforms in this set of tests we do not see a failure.&lt;/p&gt;

&lt;p&gt;The failure was also seen on Solaris Express Community Edition snv_86 X86bits - SunOS 5.11 snv_86 (solN+1) between 670215 and 676638.&lt;br/&gt;
(Run w/  -XX:-UseThreadPriorities -XX:MaxPermSize=128M -Xmx256M -d32)&lt;/p&gt;</description>
                <environment>OS: Solaris 10 5/08 s10x_u5wos_10 X86 64bits - SunOS 5.10 Generic_127128-11 (sol)&lt;br/&gt;
JVM: Sun Microsystems Inc.&lt;br/&gt;
java version &amp;quot;1.6.0_06&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_06-b02)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 10.0-b22 mixed mode 64-bit) </environment>
        <key id="12401697">DERBY-3819</key>
            <summary>&apos;Expected Table Scan ResultSet for T3&apos; in &apos;test_predicatePushdown(....PredicatePushdownTest)&apos; since 670215 2008-06-21 18:01:08 MEST</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="olesolberg">Ole Solberg</reporter>
                        <labels>
                            <label>derby_triage10_8</label>
                    </labels>
                <created>Tue, 5 Aug 2008 13:50:49 +0100</created>
                <updated>Wed, 23 Feb 2011 22:11:16 +0000</updated>
                                            <version>10.5.1.1</version>
                                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12619876" author="kmarsden" created="Tue, 5 Aug 2008 14:21:49 +0100"  >&lt;p&gt;I think this will be fixed by changing derby.language.maxMemoryPerTable to 4096, but I know Kristian had some qualms about doing this.   I think the actual calculation of refSize has improved since the change and that is what is making the test fail on the 64 bit machines.   &lt;/p&gt;
</comment>
                            <comment id="12619879" author="kristwaa" created="Tue, 5 Aug 2008 14:42:01 +0100"  >&lt;p&gt;My wish was to see if we got any errors after the refSize calculation was improved. Obviously we do, and now that they are documented I see two options:&lt;br/&gt;
 a) Increase maxMemoryPerTable&lt;br/&gt;
 b) Work on the calculation improvements suggested by Knut before we increase maxMemoryPerTable.&lt;/p&gt;

&lt;p&gt;I don&apos;t have any strong feelings, so if option a) stops the failures feel free to proceed. It is easy to go back later if needed for investigations.&lt;br/&gt;
I think Mike said the current value is based on old assumptions (i.e. done many years ago), so making it more up to date sounds reasonable in any case.&lt;/p&gt;</comment>
                            <comment id="12620358" author="kmarsden" created="Wed, 6 Aug 2008 19:10:55 +0100"  >&lt;p&gt;Well bumping the memory was not as easy as I thought.  It causes another failure:&lt;br/&gt;
1) test_predicatePushdown(org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest)junit.framework.Asserti&lt;br/&gt;
onFailedError: Expected index scan on T3&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest.test_predicatePushdown(PredicatePushdo&lt;br/&gt;
wnTest.java:1139)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if the new plan is ok or not.&lt;/p&gt;
</comment>
                            <comment id="12620391" author="army" created="Wed, 6 Aug 2008 20:17:53 +0100"  >&lt;p&gt;&amp;gt; I&apos;m not sure if the new plan is ok or not.&lt;/p&gt;

&lt;p&gt;The test comments preceding the point of failure (line 1139) say:&lt;/p&gt;

&lt;p&gt;  // Predicate push-down should occur for next two queries. Thus&lt;br/&gt;
  // we we should see Index scans for T3 and T4--and this should be&lt;br/&gt;
  // the case regardless of the order of the FROM list.&lt;/p&gt;

&lt;p&gt;So the test case is specifically expecting pushdown to happen; the fact that you&apos;re seeing a Table Scan instead of an Index Scan comes from the fact that the optimizer has now determined that it&apos;s cheaper to do a hash join than a nested loop join, and predicates don&apos;t get pushed for hash joins.  Since we don&apos;t push the predicate we end up with a table scan.&lt;/p&gt;

&lt;p&gt;Similarly, the test comments preceding the original failure reported in this issue say (line 1373):&lt;/p&gt;

&lt;p&gt;  // In this query the optimizer will consider pushing, but&lt;br/&gt;
  // will find that it&apos;s cheaper to do a hash join and thus&lt;br/&gt;
  // will &lt;em&gt;not&lt;/em&gt; push. So we see hash join with table scan on T3.&lt;/p&gt;

&lt;p&gt;Apparently running with &quot;-d64&quot; makes the optimizer&apos;s estimate change: either the hash join estimate goes up or the nested loop estimate (with predicate pushdown) goes down.  Either way we end up pushing the predicate instead of doing a hash join, so we fail.&lt;/p&gt;

&lt;p&gt;In general, the test cases for PredicatePushdown were created based on the behavior/estimates seen at the time of writing, and were written with the assumption that the optimizer would make the same decisions on all machines given a noTimeout value of &quot;true&quot;.  But that assumption was wrong, esp. in the case of refSize, which varies from machine to machine (esp. 32-bit vs 64 bit).&lt;/p&gt;

&lt;p&gt;So I&apos;m not sure how to go about resolving these issues; it seems quite likely that, as Kathey found out, making hardcoded tweaks here and there to maxMemoryPerTable might fix one problem but lead to another (if not on the same machine then perhaps on a different one).&lt;/p&gt;

&lt;p&gt;I wonder if the test harness could figure out if the machine is 32-bit vs 64-bit and then adjust maxMemoryPerTable accordingly?  Not sure if there&apos;s a reliable way to make that adjustment, but there might be...?&lt;/p&gt;</comment>
                            <comment id="12620432" author="kmarsden" created="Wed, 6 Aug 2008 22:27:48 +0100"  >&lt;p&gt;I wonder if it would work/be appropriate to import ClassSize and have something like:&lt;br/&gt;
 if (ClassSize.getRefSize() &amp;gt; 4)&lt;br/&gt;
            systemProperties.setProperty(&quot;derby.language.maxMemoryPerTable&quot;, &quot;2048&quot;);&lt;/p&gt;

&lt;p&gt;That way we would be sure we are using the same caclulations as the engine to determine whether we bump the memory.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12620477" author="mikem" created="Thu, 7 Aug 2008 00:49:40 +0100"  >&lt;p&gt;what about using optimizer hints to fix the query plan in the desired shape and then check if&lt;br/&gt;
pushdown is happening?  The test is about pushdown rather than hash vs scan choices.  &lt;/p&gt;

&lt;p&gt;it would be nice if we didn&apos;t have to do this, but maybe it would be a reasonable short term fix, and we could log a request to come up with a better test case that would not get different plans on different machines.&lt;/p&gt;</comment>
                            <comment id="12620482" author="army" created="Thu, 7 Aug 2008 01:12:31 +0100"  >&lt;p&gt;&amp;gt; what about using optimizer hints to fix the query plan in the desired shape&lt;/p&gt;

&lt;p&gt;Good point, I think that&apos;s the way to go.  The original test was committed for 10.1 and we didn&apos;t have optimizer hints back then.  But for the current trunk, where we now have a separate JUnit test that is not in earlier versions, I think optimizer hints make sense.&lt;/p&gt;

&lt;p&gt;&amp;gt; it would be nice if we didn&apos;t have to do this, &lt;/p&gt;

&lt;p&gt;Right, it will probably take a while as that test is quite long. But hopefully the comments preceding each test case will indicate to a sufficient degree what the necessary optimizer overrides would be...hopefully...&lt;/p&gt;</comment>
                            <comment id="12620554" author="kristwaa" created="Thu, 7 Aug 2008 09:41:00 +0100"  >&lt;p&gt;A B wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But that assumption was wrong, esp. in the case of refSize, which varies from machine to machine (esp. 32-bit vs 64 bit).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It is my understanding that refSize will be either 4 or 8, depending on whether the VM is 32-bit or 64-bit.&lt;br/&gt;
Assuming &apos;sun.arch.data.model&apos; can only be 32 or 64, this is enforced by the two first steps in the algorithm:&lt;br/&gt;
 a) &apos;sun.arch.data.model&apos; / 8&lt;br/&gt;
 b) &apos;os.arch&apos;; hardcoded values (4 and 8) if the arch string is known&lt;/p&gt;

&lt;p&gt;Step c), which is the original heuristic, can result in values from 4 and up.&lt;br/&gt;
On my machine it calculated refSize to be -26, but no values smaller than 4 are returned.&lt;/p&gt;

&lt;p&gt;According to Knut Anders (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3794&quot; title=&quot;Improve estimates in iapi.services.cache.ClassSize&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3794&quot;&gt;DERBY-3794&lt;/a&gt;), there are other variables used that make the estimates more or less wrong, but they are either constants or based on refSize and we shouldn&apos;t see &quot;random values&quot; as long as refSize is stable.&lt;/p&gt;

&lt;p&gt;The refSize calculation changes are documented in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3731&quot; title=&quot;Improve calculation of refSize in ClassSize.java &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3731&quot;&gt;&lt;del&gt;DERBY-3731&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12621964" author="kmarsden" created="Tue, 12 Aug 2008 21:37:58 +0100"  >&lt;p&gt;Unassigning myself from this issue for now. I don&apos;t think I will have time to rewrite the test to use optimizer directives by the time I leave for vacation.  I will be out August 16 - September 1.&lt;/p&gt;</comment>
                            <comment id="12669100" author="kmarsden" created="Sat, 31 Jan 2009 00:38:15 +0000"  >&lt;p&gt;I started looking at using optimizer directives to get the desired behavior but the approach worries me.  What is the value of forcing a hash join just to make sure our check for a hash join passes?   Seems a reasonable test for DERBY-PROPERTIES but I don&apos;t know that it tests predicate pushdown behavior.&lt;/p&gt;

&lt;p&gt;Perhaps I am way off and it is another directive that I should be using besides joinStrategy. Any thoughts on this would be greatly appreciated.&lt;/p&gt;

</comment>
                            <comment id="12669371" author="knutanders" created="Sun, 1 Feb 2009 11:34:47 +0000"  >&lt;p&gt;I thought the point of the predicate pushdown test wasn&apos;t to verify that the correct join strategy was chosen, but rather to verify that the predicates were correctly pushed down from the outer select statement into the nested select statements. I cannot see that the test does that anymore, though.&lt;/p&gt;</comment>
                            <comment id="12694430" author="olesolberg" created="Wed, 1 Apr 2009 10:08:34 +0100"  >&lt;p&gt;This is seen in our release tests for 10.5.1.0 on 9 (of 13) platforms on 64bit os and 64bit jvms.&lt;/p&gt;

&lt;p&gt;See&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.thresher.com/derby/test/10.5.1.0_RC/jvm1.6-64/testing/Limited/testSummary-757599.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/10.5.1.0_RC/jvm1.6-64/testing/Limited/testSummary-757599.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.thresher.com/derby/test/10.5.1.0_RC/jvm1.6-64/FailReports/757599_bySig.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/10.5.1.0_RC/jvm1.6-64/FailReports/757599_bySig.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(I have rerun these a couple of times: also see .../testSummary-757599-2.html, ..../757599_bySig-2.html etc.)&lt;/p&gt;</comment>
                            <comment id="12741922" author="kmarsden" created="Tue, 11 Aug 2009 17:04:32 +0100"  >&lt;p&gt;I wonder if it would be acceptable to disable this test on 64 bit platforms until we have a fix with a comment that it should be enabled when this issue is fixed.  Currently I think it always fails on 64 bit so adds noise to the test runs.&lt;/p&gt;</comment>
                            <comment id="12742017" author="dagw" created="Tue, 11 Aug 2009 20:03:43 +0100"  >&lt;p&gt;+1 to comment out for now on 64 bits platforms for now.&lt;/p&gt;

&lt;p&gt;I think we could change this test to use the optimizer directives. I agree with Knut that this test should be testing that pushdown happens, not what join strategy is selected. Hopefully other tests cover that...&lt;/p&gt;</comment>
                            <comment id="12747053" author="myrna" created="Mon, 24 Aug 2009 21:29:02 +0100"  >&lt;p&gt;I&apos;m attaching a patch that will not run the offending asserts (after skipping the one reported, I found there were a few more) on 64 bit platforms.&lt;/p&gt;

&lt;p&gt;I didn&apos;t find another test that had this kind of exception &apos;skipping&apos; code, but I used the same logic as was used in org.apache.derby.iapi.services.cache.ClassSize. Even though there&apos;s a slight duplication of code this way I thought it better to keep the testing stuff separate.&lt;/p&gt;

&lt;p&gt;Patch is ready for review.&lt;br/&gt;
I tested by running only the test on 64 bit linux (with 64-bit ibm16) and 32 bit windows xp (with 32 bit ibm16).&lt;br/&gt;
I think this is harmless enough for a workaround, and I&apos;d like to commit tomorrow if there is no feedback...&lt;/p&gt;

&lt;p&gt;After, perhaps this issue should get closed and a new issue opened to adjust the test using optimizer directives and further research to what&apos;s really the correct/intended behavior.&lt;/p&gt;</comment>
                            <comment id="12747361" author="knutanders" created="Tue, 25 Aug 2009 12:34:32 +0100"  >&lt;p&gt;The workaround looks fine to me. Perhaps you&apos;d want to use BaseTestCase.traceit() instead of if (...doTrace()) &lt;/p&gt;
{ System.out.println(...); }
&lt;p&gt; so that redirection of the output works.&lt;/p&gt;</comment>
                            <comment id="12747504" author="myrna" created="Tue, 25 Aug 2009 18:37:25 +0100"  >&lt;p&gt;Thanks, Knut for that suggestion. Uploading a version of that patch where I&apos;ve used BaseTestCase.traceit instead of duplicating the code in that method.&lt;/p&gt;

&lt;p&gt;I plan to commit this shortly.&lt;/p&gt;</comment>
                            <comment id="12747539" author="myrna" created="Tue, 25 Aug 2009 19:26:47 +0100"  >&lt;p&gt;Committed the patch 2 with revision 807733 to trunk and backported to 10.5 with revision 807749.&lt;/p&gt;

&lt;p&gt;I&apos;ll leave this open so someone else can choose to open a new issue for the optimizer directives changes or use this one.&lt;/p&gt;

&lt;p&gt;When the underlying problems are fixed, the asserts need to be reactivated - look in the test for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3819&quot; title=&quot;&amp;#39;Expected Table Scan ResultSet for T3&amp;#39; in &amp;#39;test_predicatePushdown(....PredicatePushdownTest)&amp;#39; since 670215 2008-06-21 18:01:08 MEST&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3819&quot;&gt;DERBY-3819&lt;/a&gt; references and remove the &apos;if&apos;s.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12417520" name="DERBY-3819.diff_64bitskipasserts" size="4104" author="myrna" created="Mon, 24 Aug 2009 21:29:02 +0100"/>
                            <attachment id="12417635" name="DERBY-3819.diff_64bitskipasserts2" size="4350" author="myrna" created="Tue, 25 Aug 2009 18:37:24 +0100"/>
                            <attachment id="12387664" name="new_plan.txt" size="11375" author="kmarsden" created="Wed, 6 Aug 2008 19:10:55 +0100"/>
                            <attachment id="12387663" name="old_plan.txt" size="10943" author="kmarsden" created="Wed, 6 Aug 2008 19:10:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Aug 2008 13:21:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23862</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36673</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>