<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:37:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3618/DERBY-3618.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3618] Perform thread dump with ASSERTS with jdk 1.5 or higher</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3618</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;It would be good to have a stack traces for all threads dump to the derby.log when an assertion occurs with JVM&apos;s that support it.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12393914">DERBY-3618</key>
            <summary>Perform thread dump with ASSERTS with jdk 1.5 or higher</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ebirkenes">Erlend Birkenes</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Mon, 14 Apr 2008 21:07:36 +0100</created>
                <updated>Mon, 4 May 2009 19:22:37 +0100</updated>
                            <resolved>Tue, 22 Jul 2008 20:12:47 +0100</resolved>
                                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12588802" author="kmarsden" created="Mon, 14 Apr 2008 22:31:12 +0100"  >&lt;p&gt;Thanks Erlend for picking up this issue.  You might want to look at the code for org.apache.derbyTesting.functionTests.util.ThreadDump and org.apache.derbyTesting.functionTests.util.TestUtil.dumpAllStackTracesIfSupported for sample code on how to dump the stack traces.  Something similar will need to be brought into org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT for this issue.&lt;/p&gt;

&lt;p&gt;The testing classes are not available from the code.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12588804" author="kmarsden" created="Mon, 14 Apr 2008 22:39:15 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-666&quot; title=&quot;Enhance derby.locks.deadlockTrace to print stack traces for all threads involved in a deadlock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-666&quot;&gt;DERBY-666&lt;/a&gt; is another case where it would be good  to dump stack traces  if permissions allow.&lt;/p&gt;</comment>
                            <comment id="12593377" author="kmarsden" created="Wed, 30 Apr 2008 17:53:26 +0100"  >&lt;p&gt;A couple of things to consider when working on this issue ...&lt;br/&gt;
1) This will require more permissons in the testing policy file for derby.jar. It would be nice if they could be added just for sane builds but I don&apos;t think that is possible.&lt;/p&gt;

&lt;p&gt;The two permissions that will be needed to dump the thread stack traces are:&lt;br/&gt;
permission java.lang.RuntimePermission &quot;getStackTrace&quot;;&lt;br/&gt;
permission java.lang.RuntimePermission &quot;modifyThreadGroup&quot;;&lt;/p&gt;

&lt;p&gt;The change should be as such that if these permissions are not present it will just skip the thread dump.&lt;/p&gt;

&lt;p&gt;2) Testing might be tricky, since we don&apos;t really have JUnit unit testing for internal methods. Maybe it will be easy enough to add if the methods are public. Also the output goes to derby.log which is hard to check. We may just have to settle for manual testing.&lt;/p&gt;
</comment>
                            <comment id="12597524" author="kmarsden" created="Fri, 16 May 2008 17:16:04 +0100"  >&lt;p&gt;To start working with this, you can just use the following program.&lt;br/&gt;
import org.apache.derby.shared.common.sanity.SanityManager;&lt;/p&gt;

&lt;p&gt;public class TestAssert {&lt;/p&gt;

&lt;p&gt;    public static void main(String[] args)  &lt;/p&gt;
{
	SanityManager.ASSERT(true == false);

    }

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;It will just print the assertion to stdout. I still don&apos;t have a suggestion for automated testing to check the derby.log, but this at least will give you something to get started with.  I think the easiest thing will be to add the stack traces to message in  AssertFailure before calling super(message).&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12597571" author="bryanpendleton" created="Fri, 16 May 2008 19:33:58 +0100"  >&lt;p&gt;&amp;gt; don&apos;t have a suggestion for automated testing to check the derby.log&lt;/p&gt;

&lt;p&gt;I&apos;m just blue-sky thinking here, but here are some possible ideas:&lt;/p&gt;

&lt;p&gt;1) Write some common shared utility code that uses java.io.* classes to&lt;br/&gt;
go find the derby.log file on disk and read it.&lt;/p&gt;

&lt;p&gt;2) Inject some sort of &quot;duplicate&quot; or &quot;tee&quot; stream into the output routines&lt;br/&gt;
that write to derby.log so that they can be hooked to emit output &lt;b&gt;both&lt;/b&gt;&lt;br/&gt;
to derby.log and to some other stream (say, an in-memory byte-array&lt;br/&gt;
stream) that can then be examined for the content in question.&lt;/p&gt;

&lt;p&gt;3) Change the output routines that write to derby.log so that they have&lt;br/&gt;
some sort of &quot;registered handler&quot; concept so that, immediately prior&lt;br/&gt;
to writing some data to derby.log, they call back to any registered output&lt;br/&gt;
handlers to give the handler a chance to examine the data that&apos;s about&lt;br/&gt;
to be written.&lt;/p&gt;

&lt;p&gt;One way to look at these options is whether the test hooks should examine&lt;br/&gt;
the derby.log output after-the-fact, as-the-data-is-being-written, or&lt;br/&gt;
before-the-fact.&lt;/p&gt;

&lt;p&gt;Another way is whether the right abstraction layer is to consider the&lt;br/&gt;
file as a whole as a stream of data, or each individual &quot;record&quot; as it&lt;br/&gt;
is being written to the file.&lt;/p&gt;

&lt;p&gt;And yet another way to look at the options is whether it&apos;s easiest to write&lt;br/&gt;
the test code as callback handlers, or as stream-content verifiers. How&lt;br/&gt;
will it be easiest to recognize the logging content that you&apos;re looking for?&lt;/p&gt;

&lt;p&gt;Solutions (2) and (3) assume that the test code is in the same JVM as&lt;br/&gt;
the Derby code being tested, so they wouldn&apos;t work so well for network&lt;br/&gt;
server tests, although for this particular case that might be just fine.&lt;/p&gt;

&lt;p&gt;Just thought I&apos;d try to throw some ideas out there to encourage the discussion.&lt;/p&gt;</comment>
                            <comment id="12599399" author="ebirkenes" created="Fri, 23 May 2008 16:24:16 +0100"  >&lt;p&gt;Is something like this what you had in mind? (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3618&quot; title=&quot;Perform thread dump with ASSERTS with jdk 1.5 or higher&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3618&quot;&gt;&lt;del&gt;DERBY-3618&lt;/del&gt;&lt;/a&gt;_1.diff)&lt;br/&gt;
I couldn&apos;t figure out how to set up the Monitor in my testprogram, but it should print to the log if that is done. If not it just prints it to System.out instead. How should I set up Monitor to test it in a simple program?&lt;/p&gt;</comment>
                            <comment id="12600558" author="kmarsden" created="Wed, 28 May 2008 19:27:46 +0100"  >&lt;p&gt;Thanks Erlend for the patch.&lt;br/&gt;
&amp;#8211; need a license header for ThreadDump&lt;/p&gt;

&lt;p&gt;&amp;#8211; AssertFailure&lt;br/&gt;
We can&apos;t use org.apache.derbyTesting.functionTests.harness.JavaVersionHolder in the engine code. You can use org.apache.derby.iapi.services.info.JVMInfo instead.&lt;/p&gt;

&lt;p&gt;I think that we can keep the System.out backup if there is no stream, but should check to see if Monitor.getStream() is null instead of catching the NullPointerException.&lt;/p&gt;

&lt;p&gt;I wonder if we could try testing this from within a stored procedure, from there there should be a log stream present.&lt;/p&gt;



</comment>
                            <comment id="12600666" author="bryanpendleton" created="Thu, 29 May 2008 03:30:52 +0100"  >&lt;p&gt;As part of moving ThreadDump from the testing sub-tree to the shared sub-tree,&lt;br/&gt;
we should delete the ThreadDump.java from the testing tree and change all&lt;br/&gt;
uses of it to use the new ThreadDump code in the shared sub-tree.&lt;/p&gt;</comment>
                            <comment id="12600895" author="kmarsden" created="Thu, 29 May 2008 20:36:29 +0100"  >&lt;p&gt; I wonder what the status is on sharing classes between jars.  There were conversations long ago about the problems this could cause if there were mixed version jars in the classpath, which I don&apos;t think were resolved.    Is it ok for SanityManager classes because they are only for sane builds.  I also thought that in general the testing code was not supposed to use any product code.  Even though it&apos;s duplicate code. I think I would prefer the testing code be kept separate.&lt;/p&gt;
</comment>
                            <comment id="12600968" author="bryanpendleton" created="Fri, 30 May 2008 00:37:43 +0100"  >&lt;p&gt;Those are all good points, Kathey. I think it&apos;s fine to keep the &lt;br/&gt;
separate ThreadDump.java implementations. It isn&apos;t a lot of duplicated code.&lt;/p&gt;</comment>
                            <comment id="12608164" author="ebirkenes" created="Wed, 25 Jun 2008 20:41:30 +0100"  >
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added license header&lt;/li&gt;
	&lt;li&gt;changed org.apache.derbyTesting.functionTests.harness.JavaVersionHolder to org.apache.derby.iapi.services.info.JVMInfo&lt;/li&gt;
	&lt;li&gt;changed to check to see if Monitor.getStream() is null instead of catching the NullPointerException.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Still haven&apos;t done anything about testing this. I can&apos;t see that there is anything that we really need to test here. The ThreadDump class is very basic and uses only standard java methods and shouldn&apos;t need testing.&lt;/p&gt;

&lt;p&gt;In AssertFeilure we just take the dump-string and pass it on to Monitor.getStream().getPrintWriter(). Isn&apos;t it the Monitors job to set up the output stream correctly? If the PrintWriter points to derby.log it&apos;ll work and if it points to System.err or somewhere else then it&apos;s probably because derby.log doesn&apos;t exist or there is another good reason for it. In any case there will always be a PrintWriter to write to. But testing that writing to the log file works correctly should be tested elsewhere. We should be able to trust that Monitor.getStream().getPrintWriter() can deal with any string correctly.&lt;/p&gt;

&lt;p&gt;Is there anything else  we need to test here?&lt;/p&gt;</comment>
                            <comment id="12608434" author="bryanpendleton" created="Thu, 26 Jun 2008 14:52:05 +0100"  >&lt;p&gt;Can we write a test which intentionally performs an AssertFailure, in order to force the&lt;br/&gt;
new code to be executed? Perhaps all the test needs to do is to instantiate an&lt;br/&gt;
AssertFailure object, since the thread dumping occurs in the AssertFailure constructor?&lt;/p&gt;</comment>
                            <comment id="12613444" author="ebirkenes" created="Mon, 14 Jul 2008 21:28:20 +0100"  >&lt;p&gt;Ok, It took me a while, but here is version 3. &lt;/p&gt;

&lt;p&gt;I added a jUnit test in org.apache.derbyTesting.unitTests.junit.AssertFailureTest that tests that the output produced by AssertFailure is correct in various situations.&lt;/p&gt;

&lt;p&gt;i also changed the output a bit since last time so it looks better and is more useful. It now always prints the AssertFailure stack trace first and then the thread dump if we can get it, if not it prints the reason why we couldn&apos;t. This still gets printed to derby.log if it is available or to System.out if not or if verbose is on.&lt;/p&gt;

&lt;p&gt;I struggled a bit with the permissions for the test, and I ended up with having to give the necessary permissions to all (see org.apache.derbyTesting.unitTests.junit.AssertFailureTest.policy) as this was the only way I could get it to work in all situations, but I&apos;m sure there is a better way to do it. Let me know if you know how. &lt;/p&gt;

&lt;p&gt;Also added the jUnit test to org.apache.derbyTesting.unitTests.junit._Suite.&lt;/p&gt;

&lt;p&gt;Please comment.&lt;/p&gt;
</comment>
                            <comment id="12613507" author="ebirkenes" created="Tue, 15 Jul 2008 02:18:58 +0100"  >
&lt;p&gt;Sorry, there is something wrong with the latest patch. It won&apos;t build properly.&lt;br/&gt;
I&apos;ll post a new patch when it&apos;s fixed.&lt;/p&gt;</comment>
                            <comment id="12613661" author="ebirkenes" created="Tue, 15 Jul 2008 17:58:35 +0100"  >&lt;p&gt;Version 4. &lt;/p&gt;

&lt;p&gt;Fixed a problem in the last patch where a reference to ThreadDump caused the build to fail. This was to get it added to the jars, but this is now properly done by adding it to dnc.properties and extraDBMSclasses.properties.&lt;/p&gt;

&lt;p&gt;But there is still a problem. I&apos;m getting:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/erlend/workspace/Derby/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java:32: package org.apache.derby.iapi.services.info does not exist&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import org.apache.derby.iapi.services.info.JVMInfo;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                            ^&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/erlend/workspace/Derby/java/shared/org/apache/derby/shared/common/sanity/AssertFailure.java:33: package org.apache.derby.iapi.services.monitor does not exist&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import org.apache.derby.iapi.services.monitor.Monitor;&lt;/p&gt;

&lt;p&gt;This packages are compiled after org/apache/derby/shared/ as part if the engine target, which is depending on the shared target.&lt;/p&gt;

&lt;p&gt;How can I fix this?&lt;/p&gt;


&lt;p&gt;-Erlend&lt;/p&gt;</comment>
                            <comment id="12613707" author="kmarsden" created="Tue, 15 Jul 2008 20:42:23 +0100"  >&lt;p&gt;So it looks like you have stumbled upon an old and debated topic of shared code.  There was a long conversation about this a long time ago, but basically there are some serious problems with sharing code between engine and client if mixed jar versions are used, because you don&apos;t know what version will be used.&lt;br/&gt;
There may also be some issues with sealing violations with shared code that I don&apos;t fully understand (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1125&quot; title=&quot;Getting security exception when derbyclient.jar is before derby.jar  because classes in iapi.services.info have been added to derbyclient.jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1125&quot;&gt;&lt;del&gt;DERBY-1125&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I thought that the conclusion was that there would be a shared directory created but that that code would actually only go into client until a  real shared code solution was found.  Also it was determined that it was ok for constants like Attribute.java and SQLState.java to go in because the constants get compiled out.&lt;/p&gt;

&lt;p&gt;Despite that, it looks like the SanityManager code made its way into the shared directory and is actually shared between engine and client.&lt;br/&gt;
 I am guessing it was decided that it was ok to share the SanityManager code because it doesn&apos;t affect production (insane) builds, but that&apos;s just a guess.&lt;/p&gt;

&lt;p&gt;Now for your changes,  I don&apos;t think Monitor and all its dependencies should be shared code and go into derbyclient.jar.  I think the best solution would be to build the trace info into the assertion message and eliminate use of Monitor in the new code.  It doesn&apos;t make sense when used in the context of client anyway.  As for JVMInfo  I tend to think as well, that the cleanest thing is not to use it. You can attempt a Class.forName() on a class only available in JDK 1.5 or higher as a quick check of the vm level.&lt;/p&gt;




</comment>
                            <comment id="12614820" author="ebirkenes" created="Fri, 18 Jul 2008 18:50:41 +0100"  >&lt;p&gt;Version 5.&lt;/p&gt;

&lt;p&gt;Ok, I changed the whole thing. &lt;br/&gt;
The thread dump is now just added to the message in the AssertFailure so we don&apos;t need the Monitor anymore.&lt;br/&gt;
And instead of using JVMInfo I just check that the method Thread.getAllStackTraces is available.&lt;/p&gt;

&lt;p&gt;Please review. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;-Erlend&lt;/p&gt;</comment>
                            <comment id="12614846" author="kmarsden" created="Fri, 18 Jul 2008 20:34:17 +0100"  >&lt;p&gt;I haven&apos;t reviewed the code yet, but I gave the patch on Zos where I am debugging an ASSERT failure in refActions1 (probable jvm issue).  I noticed that my assert looked like this.  I seemed to lose the actual ASSERT message in this case which should have been:&quot;Container closed while IO operations are in progress.&quot;&lt;/p&gt;


&lt;p&gt;Exception trace:&lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure: (Skipping thread dump because of insufficient permissions:&lt;br/&gt;
java.security.AccessControlException: Access denied (java.lang.RuntimePermission getStackTrace))&lt;/p&gt;


&lt;p&gt;        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.closeContainer(RAFContainer4.java:169)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.clearIdentity(FileContainer.java:473)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.evictEntry(ConcurrentCache.java:188)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ClockPolicy.shrinkMe(ClockPolicy.java:658)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ClockPolicy.doShrink(ClockPolicy.java:568)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ClockPolicy.insertEntry(ClockPolicy.java:168)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.insertIntoFreeSlot(ConcurrentCache.java:208)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:284)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(BaseDataFileFactory.java:628)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openDroppedContainer(BaseDataFileFactory.java:578)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.xact.Xact.openDroppedContainer(Xact.java:1305)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.ContainerBasicOperation.findContainer(ContainerBasicOperation.java:145)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.ContainerBasicOperation.needsRedo(ContainerBasicOperation.java:213)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1395)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:920)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:334)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2000)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:554)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2000)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:554)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427)&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:780)&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:2000)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:291)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1837)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1703)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1583)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:1002)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2572)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:365)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:68)&lt;/p&gt;


&lt;p&gt;I think it is good that it prints that it could not print the stack traces, but it should preserve the original message as well.  I&apos;ll try changing derby_tests.policy to include the permssions (which I think we should do) and try again.&lt;/p&gt;

</comment>
                            <comment id="12614863" author="kmarsden" created="Fri, 18 Jul 2008 21:39:51 +0100"  >&lt;p&gt;Thanks Erlend for the new patch. I think we are getting very close. Per earlier comment  need to ...&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fix it so ASSERT message prints even if you don&apos;t have permission to dump threads.&lt;/li&gt;
	&lt;li&gt;add permissions to derby_tests.policy to derby.jar and derbyclient.jar to have permissions to dump threads.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I tried adding the permissions and with the  permissions it worked fine with my assertion and printed the message properly.   It is too bad that our exception stack trace has to print after the thread dump, but I guess there is no way around it now that the thread dump is part of the message?&lt;/p&gt;

&lt;p&gt;On the tests, I don&apos;t see actually where setIO permissions are needed.  Is this perhaps residual from when the thread dump printed to System.out?&lt;/p&gt;

&lt;p&gt;You should be able to give the getStackTrace and modifyThreadGroup permissions to derby.jar and derbyclient.jar and avoid having to grant  permissions to all.  If you have to grant permissions to all there is some sort of problem with a privileged block missing somwhere or something like that.  Take a look at derby_tests.policy for default derby.jar, derbyclient.jar permissions.&lt;/p&gt;


&lt;p&gt;Thanks again Erlend for all the great work. This is indeed tricky stuff.&lt;/p&gt;
</comment>
                            <comment id="12614864" author="kmarsden" created="Fri, 18 Jul 2008 21:41:25 +0100"  >&lt;p&gt;Oh one more thing on the tests. You have &lt;br/&gt;
if (JVMInfo.JDK_ID &amp;gt;= 6) {&lt;br/&gt;
 ... test &lt;/p&gt;

&lt;p&gt;should it b&lt;br/&gt;
if (JVMInfo.JDK_ID &amp;gt;= 5) {&lt;br/&gt;
?&lt;/p&gt;
</comment>
                            <comment id="12614916" author="ebirkenes" created="Sat, 19 Jul 2008 00:55:33 +0100"  >
&lt;p&gt;No, this is correct. 5 is 1.4.2,  6 is 1.5. Misleading, i know.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12614940" author="ebirkenes" created="Sat, 19 Jul 2008 03:50:28 +0100"  >
&lt;p&gt;Version 6.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed it so ASSERT message always prints, as it indeed was meant to, but I had missed it.&lt;/li&gt;
	&lt;li&gt;Added permissions to derby_tests.policy to derby.jar and derbyclient.jar to have permissions to dump threads.&lt;/li&gt;
	&lt;li&gt;Removed setIO prom the policies. That was leftovers from the first test.&lt;/li&gt;
	&lt;li&gt;Given permissions to derby.jar and derbyclient.jar instead of all in the test policy. That worked fine. Thanks for the tip &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-Unfortunately the exception stack trace has to come after the thread dump when we do it this way, as the message can only be set in the constructor, the super constructor has to be called first, and non-static methods can&apos;t be called in it so we can&apos;t get to the stack trace until after the superconstructor. I tried everything to get it into the message, but I don&apos;t think it can be done.&lt;/p&gt;

</comment>
                            <comment id="12615094" author="ebirkenes" created="Sun, 20 Jul 2008 15:51:07 +0100"  >&lt;p&gt;Version 7.&lt;/p&gt;

&lt;p&gt;I must have been really sleepy when I said something couldn&apos;t be done, because obviously &lt;em&gt;anything&lt;/em&gt; can be done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;A simple override of the printStackTrace methods did what Kathey wanted. It now prints the full stack trace of the error and then the thread dump to System.err.&lt;br/&gt;
The thread dump is no longer part of the the message, wich was kind of a ugly hack anyway,  but stored in its own field and accessible by getThreadDump() if someone wants it.&lt;/p&gt;


&lt;p&gt;-E&lt;/p&gt;</comment>
                            <comment id="12615396" author="kmarsden" created="Mon, 21 Jul 2008 21:06:12 +0100"  >&lt;p&gt;Thanks Erlend,&lt;/p&gt;

&lt;p&gt;Looks and runs great.  I&apos;ll run tests and check it in tomorrow.  It would be great however to get another set of eyes on this if someone else has time to look.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12615728" author="kmarsden" created="Tue, 22 Jul 2008 19:44:40 +0100"  >&lt;p&gt;Committed revision 678858.   I made a few minor changes to the test so that it would work on various jvm&apos;s.  Thanks Erlend for all of your hard work on this patch.&lt;/p&gt;</comment>
                            <comment id="12615756" author="knutanders" created="Tue, 22 Jul 2008 20:40:44 +0100"  >&lt;p&gt;A couple of comments to the version 7 patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The description of the issue says that the thread dump should be printed to derby.log, but this patch seems to put the thread dump in the output from printStackTrace(), which goes much broader. Doesn&apos;t this make the stack traces harder to read, and debugging problems where we don&apos;t care about the thread dumps harder? Perhaps it&apos;s better to intercept AssertFailure (or perhaps any error?) in BaseTestCase.runBare() and write the thread dump to a log file?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The added code in AssertFailure.java is inconsistently indented (some lines use tabs, others use spaces, and some use a mix of tabs and spaces)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is the three level nesting of try/catch blocks in AssertFailure.dumpThreads() needed? Could they be merged into one?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The outer catch block in dumpThreads() has an instanceof test and a cast. Could it instead have a separate catch clause for InvocationTargetException?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In dumpThread(), this code could be simplified to Thread.class.getMethod(...):&lt;br/&gt;
+	            Class c = Class.forName(&quot;java.lang.Thread&quot;);&lt;br/&gt;
+	            c.getMethod(&quot;getAllStackTraces&quot;, new Class[] {});&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Perhaps a StringWriter is more appropriate than a ByteArrayOutputStream to generate the string in dumpThread()?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ThreadDump.java has the wrong package name in its header.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AssertFailureTest: Use constant JVMInfo.J2SE_15 for readability?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12615758" author="knutanders" created="Tue, 22 Jul 2008 20:43:47 +0100"  >&lt;p&gt;Oops. Too late with my comment. Sorry about that, but perhaps some of the comments could be addressed in followup patches?&lt;/p&gt;</comment>
                            <comment id="12615765" author="kmarsden" created="Tue, 22 Jul 2008 21:02:51 +0100"  >&lt;p&gt;Sorry Knut I committed before you got your comments in.  Please let me know if you think I should back out the change. I have one comment on your comments.  You  said:&lt;br/&gt;
&amp;gt;  - The description of the issue says that the thread dump should be printed to &amp;gt;derby.log, but this patch seems to put the thread dump in the output from &amp;gt;printStackTrace(), which goes much broader. Doesn&apos;t this make the stack traces harder &amp;gt;to read, and debugging problems where we don&apos;t care about the thread dumps harder? &amp;gt;Perhaps it&apos;s better to intercept AssertFailure (or perhaps any error?) in &amp;gt;BaseTestCase.runBare() and write the thread dump to a log file?&lt;/p&gt;

&lt;p&gt;We sometimes ask users to try to reproduce failures with sane builds in their environments and could use the thread dumps in those  instances.    Having the thread dump code in the junit test harness won&apos;t help in these cases, nor will it help if the assertion happens in derbyall.  I think the change won&apos;t make assertions harder to read, since the stack trace will be right at the top and the thread dump can be ignored if so desired.&lt;/p&gt;
</comment>
                            <comment id="12615769" author="knutanders" created="Tue, 22 Jul 2008 21:10:53 +0100"  >&lt;p&gt;Ah, OK, I think I see now. Since the AssertFailures normally will be wrapped in SQLExceptions before they are presented to the users, the thread dump won&apos;t be printed to the console. However, when the exception is written to derby.log, it is unwrapped, so the thread dump will be picked up by calling printStackTrace() on the unwrapped AssertFailure object. Is this about correct?&lt;/p&gt;</comment>
                            <comment id="12615771" author="knutanders" created="Tue, 22 Jul 2008 21:17:07 +0100"  >&lt;p&gt;Sorry for asking all these questions, but what makes an AssertFailure special compared to, say, a NullPointerException? Instead of limiting this functionality to AssertFailures, should we have a property (derby.stream.error.dumpStackTrace or something) that we could use to turn on thread dumps for all exceptions in derby.log, also in production code?&lt;/p&gt;</comment>
                            <comment id="12615786" author="kmarsden" created="Tue, 22 Jul 2008 21:53:55 +0100"  >&lt;p&gt;Knut asked:&lt;br/&gt;
&amp;gt;Since the AssertFailures normally will be wrapped in SQLExceptions before they are presented to &amp;gt;the users, the thread dump won&apos;t be printed to the console. However, when the exception is &amp;gt;written to derby.log, it is unwrapped, so the thread dump will be picked up by calling &amp;gt;printStackTrace() on the unwrapped AssertFailure object. Is this about correct?&lt;/p&gt;

&lt;p&gt;I verified that this is the case.  When I run a test with an assertion failure I see only the stack trace printed in the test failures and see the thread dump in the derby.log.&lt;/p&gt;


&lt;p&gt;&amp;gt;but what makes an AssertFailure special compared to, say, a NullPointerException? Instead of &amp;gt;limiting this functionality to AssertFailures, should we have a property &amp;gt;(derby.stream.error.dumpStackTrace or something) that we could use to turn on thread dumps for &amp;gt;all exceptions in derby.log, also in production code?&lt;/p&gt;

&lt;p&gt;That sounds like a great improvement.  This issue was just focussed on assertions. That idea would cover &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-666&quot; title=&quot;Enhance derby.locks.deadlockTrace to print stack traces for all threads involved in a deadlock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-666&quot;&gt;DERBY-666&lt;/a&gt; as well.   One thing to consider is that if it goes into production code, the ThreadDump class should no longer be shared.&lt;/p&gt;

</comment>
                            <comment id="12615883" author="kmarsden" created="Wed, 23 Jul 2008 05:56:08 +0100"  >&lt;p&gt;I noticed errors in the regresssion tests.  I am not sure why we are getting a ClassNotFound error.  I didn&apos;t see that in my testing.&lt;br/&gt;
&lt;a href=&quot;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/678939-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/678939-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) testAssertFailureThreadDump(org.apache.derbyTesting.unitTests.junit.AssertFailureTest)java.lang.NoClassDefFoundError: org/apache/derby/shared/common/sanity/AssertFailure&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.AssertFailureTest.testAssertFailureThreadDump(AssertFailureTest.java:78)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: java.lang.ClassNotFoundException: org.apache.derby.shared.common.sanity.AssertFailure&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:200)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:188)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:276)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:251)&lt;br/&gt;
	at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)&lt;br/&gt;
	... 27 more&lt;br/&gt;
2) testAssertFailureNoThreadDump(org.apache.derbyTesting.unitTests.junit.AssertFailureTest)java.lang.NoClassDefFoundError: org/apache/derby/shared/common/sanity/AssertFailure&lt;br/&gt;
	at org.apache.derbyTesting.unitTests.junit.AssertFailureTest.testAssertFailureNoThreadDump(AssertFailureTest.java:107)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;</comment>
                            <comment id="12615884" author="kmarsden" created="Wed, 23 Jul 2008 06:00:05 +0100"  >&lt;p&gt;Of course its because its an insane build.  We will need to disable the test for tests with insane jars.&lt;/p&gt;</comment>
                            <comment id="12616462" author="ebirkenes" created="Thu, 24 Jul 2008 13:26:44 +0100"  >&lt;p&gt;Version 8: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3618&quot; title=&quot;Perform thread dump with ASSERTS with jdk 1.5 or higher&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3618&quot;&gt;&lt;del&gt;DERBY-3618&lt;/del&gt;&lt;/a&gt;_8.diff&lt;/p&gt;

&lt;p&gt;Thanks for the comments Knut Anders! Better late than never &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; This patch fixes most of the things you noted:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed indentation to use only spaces.&lt;/li&gt;
	&lt;li&gt;Merged nested try/catch blocks in AssertFailure.dumpThreads() into one. We cant simply use a catch clause for InvocationTargetException, because the exception thrown is a PrivilegedActionException, containing an InvocationTargetException, containing an AccessControlException which is the one we really want. I changed the Exception clause instead to have only one if/else. Looks much better now and makes more sense. Also by using getCause() instead of getTargetException the cast was made superfluous.&lt;/li&gt;
	&lt;li&gt;Simplified code in dumpThread() to Thread.class.getMethod(...) as you suggested.&lt;/li&gt;
	&lt;li&gt;Changed ByteArrayOutputStream to StringWriter. Don&apos;t know what I was thinking here...&lt;/li&gt;
	&lt;li&gt;Corrected package name in ThreadDump.java header.&lt;/li&gt;
	&lt;li&gt;AssertFailureTest now use constant JVMInfo.J2SE_15 for better readability.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AssertFailureTest.suite() now returns an empty suite in insane builds. (If org.apache.derby.shared.common.sanity.AssertFailure doesn&apos;t exist.) This fixes the error in the regression tests.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-Erlend&lt;/p&gt;</comment>
                            <comment id="12616832" author="knutanders" created="Fri, 25 Jul 2008 11:19:33 +0100"  >&lt;p&gt;Thanks for the new patch, Erlend. The changes look good to me.&lt;br/&gt;
Committed revision 679742.&lt;/p&gt;</comment>
                            <comment id="12616841" author="ebirkenes" created="Fri, 25 Jul 2008 11:36:29 +0100"  >&lt;p&gt;Great. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&apos;Then this issue is ready to be closed. &lt;br/&gt;
Maybe a new jira should be created for Knut Anders&apos; idea about thread dumps for all exceptions?&lt;/p&gt;

&lt;p&gt;-Erlend&lt;/p&gt;</comment>
                            <comment id="12616862" author="knutanders" created="Fri, 25 Jul 2008 13:07:21 +0100"  >&lt;p&gt;I agree. This issue has been solved and can be closed. Adding a property which controls thread dump for all exceptions is another improvement and should be tracked in a separate JIRA issue. Thanks for all the work on this issue!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12325188">DERBY-666</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12382668" name="DERBY-3618_1.diff" size="6729" author="ebirkenes" created="Fri, 23 May 2008 16:24:16 +0100"/>
                            <attachment id="12384701" name="DERBY-3618_2.diff" size="6682" author="ebirkenes" created="Wed, 25 Jun 2008 20:41:30 +0100"/>
                            <attachment id="12386011" name="DERBY-3618_3.diff" size="21657" author="ebirkenes" created="Mon, 14 Jul 2008 21:28:20 +0100"/>
                            <attachment id="12386071" name="DERBY-3618_4.diff" size="22502" author="ebirkenes" created="Tue, 15 Jul 2008 17:58:35 +0100"/>
                            <attachment id="12386421" name="DERBY-3618_5.diff" size="22500" author="ebirkenes" created="Fri, 18 Jul 2008 18:50:41 +0100"/>
                            <attachment id="12386455" name="DERBY-3618_6.diff" size="24170" author="ebirkenes" created="Sat, 19 Jul 2008 03:50:27 +0100"/>
                            <attachment id="12386488" name="DERBY-3618_7.diff" size="27280" author="ebirkenes" created="Sun, 20 Jul 2008 15:51:07 +0100"/>
                            <attachment id="12386793" name="DERBY-3618_8.diff" size="16042" author="ebirkenes" created="Thu, 24 Jul 2008 13:26:44 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 May 2008 18:33:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30925</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xhz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39245</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>