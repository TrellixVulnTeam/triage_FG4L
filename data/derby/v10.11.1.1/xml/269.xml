<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:30 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-269/DERBY-269.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-269] Provide some way to update index cardinality statistics (e.g. reimplement update statistics)</title>
                <link>https://issues.apache.org/jira/browse/DERBY-269</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Performance problems are being reported that can be resolved by updating the cardinality statistics used by the optimizer.  Currently the only time the statistics are guaranteed to be an up-to-date is when the index is first created on a fully populated table.  This is most easily accomplished on an existing table by using the command: &lt;/p&gt;

&lt;p&gt;   alter table &amp;lt;table-name&amp;gt; compress &lt;span class=&quot;error&quot;&gt;&amp;#91;sequential&amp;#93;&lt;/span&gt;  &lt;/p&gt;

&lt;p&gt;Compress table is an I/O intensive task.  A better way to achieve this would be to re-enable parser support for the &apos;update statistics&apos; command or re-implement the update in some other fashion.&lt;/p&gt;</description>
                <environment></environment>
        <key id="32488">DERBY-269</key>
            <summary>Provide some way to update index cardinality statistics (e.g. reimplement update statistics)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="stan">Stan Bradbury</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 May 2005 03:51:04 +0100</created>
                <updated>Fri, 21 Jan 2011 17:48:18 +0000</updated>
                            <resolved>Mon, 21 Jul 2008 19:07:15 +0100</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>6</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="65955" author="kmarsden" created="Sun, 22 May 2005 23:53:32 +0100"  >&lt;p&gt;Some sort of zero admin solution for updating statistics would be prefferable to the manual &apos;update statistics&apos;&lt;/p&gt;</comment>
                            <comment id="12487824" author="kristwaa" created="Tue, 10 Apr 2007 18:00:06 +0100"  >&lt;p&gt;Added 10.2.2.0 to the affected version list, as a user has reported severe performance degradation due to this issue. See &lt;a href=&quot;http://www.nabble.com/Performance-Tuning-Problem-tf3549175.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Performance-Tuning-Problem-tf3549175.html&lt;/a&gt; for details. It is likely that trunk suffers from the same issue, so I&apos;m adding that one as well.&lt;/p&gt;</comment>
                            <comment id="12548115" author="matt_doran" created="Tue, 4 Dec 2007 04:23:31 +0000"  >&lt;p&gt;I agree that it would be great to have a way to update stats without a full compress/rebuild (which is pretty IO intensive).  We user a derby in a commercial application, and we found some extremely poor performance if the stats were not up-to-date.    Updating the stats made the problem query run in less than 1 second (it previously took 22 minutes!)&lt;/p&gt;

&lt;p&gt;See here for the details: &lt;a href=&quot;http://thread.gmane.org/gmane.comp.apache.db.derby.user/8098&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://thread.gmane.org/gmane.comp.apache.db.derby.user/8098&lt;/a&gt;   and here for the resolution: &lt;a href=&quot;http://thread.gmane.org/gmane.comp.apache.db.derby.user/8100/focus=8103&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://thread.gmane.org/gmane.comp.apache.db.derby.user/8100/focus=8103&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would be great if derby could update the statistics itself.  It would probably result in a much better out-of-the-box performance for most users.  For now we&apos;ve implemented a maintenance task in our application that periodically performs the compress operation. &lt;/p&gt;

&lt;p&gt;Maybe an interim step to make the documentation very clear that you &lt;b&gt;must&lt;/b&gt; run the compress operation once your database is populated with representative data.&lt;/p&gt;</comment>
                            <comment id="12604314" author="mikem" created="Wed, 11 Jun 2008 20:37:52 +0100"  >&lt;p&gt;I have not seen any other suggestions, how about the following zero admin solution?  It is not perfect - suggestions welcome.&lt;/p&gt;

&lt;p&gt;Along with the statistics storing, save how many rows were in the table when exact statistics were calculated.  This number is&lt;br/&gt;
0 if none have been calculated because index creation happened on an empty table.  At query compile time when we look&lt;br/&gt;
up statistics we automatically recalculate the statistics at certain threshholds - say something like row count growing past next threshhold : 10, 100, 1000,&lt;br/&gt;
100000 - with upper limit being somewhere around how many rows we can process in some small amount of time - like 1 second on a modern laptop.  If we are worried about response time, maybe we background queue the stat gathering rather than waiting with maybe&lt;br/&gt;
some quick load if no stat has ever been gathered.  The background gathering could be optimized to not interfere with locks by&lt;br/&gt;
using read uncommitted.  &lt;/p&gt;

&lt;p&gt;I think it would be useful to also have the manual call just to make it easy to support customers and debug issues in the field.  There is proably always some dynamic data distribution change that in some case won&apos;t be picked up by the automatic algorithm.&lt;br/&gt;
Also just very useful for those who have complete control of the create ddl, load data, run stats, deliver application process.&lt;/p&gt;</comment>
                            <comment id="12607698" author="mamtas" created="Tue, 24 Jun 2008 18:45:47 +0100"  >&lt;p&gt;I will look at adding some sort of system procedure which can be invoked by the user manually to fix the statistics. Later on, we should look into providing a zero admin solution which should be able to share some of the code provided by the new system procedure.&lt;/p&gt;</comment>
                            <comment id="12608097" author="mamtas" created="Wed, 25 Jun 2008 17:19:35 +0100"  >&lt;p&gt;It appears that we still have core code left for &quot;UPDATE STATISTICS&quot; in Derby. It can be found in impl.sql.execute.UpdateStatisticsConstantAction When I work on writing a system procedure, hopefully I can base my code on what is in UpdateStatisticsConstantAction. Later, UpdateStatisticsConstantAction can then be removed.&lt;/p&gt;

&lt;p&gt;Also, I think the new system procedure should go in SYSCS_UTIL schema where all th other utility procedures like SYSCS_COMPRESS_TABLE, SYSCS_INPLACE_COMPRESS_TABLE etc exist.&lt;/p&gt;</comment>
                            <comment id="12608492" author="mamtas" created="Thu, 26 Jun 2008 17:42:16 +0100"  >&lt;p&gt;************&lt;br/&gt;
A user could want to update the statistics for all the indexes on a given table or s/he might want to update statistics for just a specific index. Because of this, I think we should have 2 separate stored procedures as follows&lt;br/&gt;
1)Following could be used to update statistics for all the indexes on a given table&lt;br/&gt;
SYSCS_UTIL.SYSCS_UPDATE_STATISTICS_ALL_INDEXES(IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128))&lt;br/&gt;
2)Following could be used to update statistics of just one index&lt;br/&gt;
SYSCS_UTIL.SYSCS_UPDATE_STATISTICS_ONE_INDEX(IN SCHEMANAME VARCHAR(128), IN INDEXNAME VARCHAR(128))&lt;br/&gt;
(I would love to hear other suggestions people may have for procedure names).&lt;br/&gt;
************&lt;/p&gt;


&lt;p&gt;************&lt;br/&gt;
If 2 stored procedues look like an overkill then the other possible (concise but not so clear syntax) solution could be to just have one stored procedure for both the options as follows&lt;br/&gt;
SYSCS_UTIL.SYSCS_UPDATE_STATISTICS(IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN INDEXNAME VARCHAR(128))&lt;/p&gt;

&lt;p&gt;If user provides empty string or null for INDEXNAME, then statistics will be updated for all the indexes on the TABLENAME. But if a user specifies a specific INDEXNAME, then statistics will be updated only for the given INDEXNAME. (TABLENAME can be empty string or null when the user provides INDEXNAME. But if user has provided both INDEXNAME and TABLENAME, then that index should exist for the given table. If not, then an exception will be thrown). &lt;br/&gt;
************&lt;/p&gt;


&lt;p&gt;If there are no preferences from the community, then I will go with the option of having 2 stored procedures. Feedback appreciated.&lt;/p&gt;</comment>
                            <comment id="12608726" author="knutanders" created="Fri, 27 Jun 2008 12:15:37 +0100"  >&lt;p&gt;I would have preferred a single procedure with two parameters, schemaname and table_or_index_name. But since it&apos;s not possible to say whether the table or the index was meant if there&apos;s an index that has the same name as a table, I guess that&apos;s not an option. Having a single procedure allows us to have simpler procedure names, but I agree that it&apos;s not so clear with the three parameters.&lt;/p&gt;

&lt;p&gt;As to the naming of the different procedures, could we pick one of them that the users are more likely to run and give a simpler name? For instance:&lt;br/&gt;
  SYSCS_UPDATE_STATISTICS - update one named index&lt;br/&gt;
  SYSCS_UPDATE_STATISTICS_ALL - update all indexes on a table&lt;/p&gt;

&lt;p&gt;One more thing about procedure naming. I know that all the existing procedures in SYSCS_UTIL have names starting with SYSCS_ and cannot be changed. But the SYSCS_ prefix is redundant and makes the names unnecessarily long, so perhaps we could skip it for new procedures?&lt;/p&gt;</comment>
                            <comment id="12608780" author="mamtas" created="Fri, 27 Jun 2008 15:24:41 +0100"  >&lt;p&gt;Knut, thanks for taking the time on this issue. I did further thinking about the implementation after my last comment. I think it will be good for us to use the existing code for ALTER TABLE which does basic schema/table verification, privilege checking etc. This code will be needed for the basic framework of update statistics. In order to make use of that code in ALTER TABLE, I am considering generating internal ALTER TABLE sql for update statistics. So, just like we generate internal alter table syntax for compress table, we will generate internal alter table sql for update statistics. This code of generate ALTER TABLE sql for update statistics will go in catalog.SystemProcedures class.&lt;/p&gt;

&lt;p&gt;In order to generate ALTER TABLE sql, I need to know what table we are dealing with. Because of this, I would like to propose us having just one system procedure with following syntax&lt;br/&gt;
SYSCS_UTIL.UPDATE_STATISTICS(IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128), IN INDEXNAME VARCHAR(128)) &lt;/p&gt;

&lt;p&gt;When user wants to update the statistics of all the indexes, the 3rd parameter, INDEXNAME will be null or empty string. But when user wants to update a specific index, s/he will be required to provide all the three parameters, ie schema, table and index name. I think this keeps the stored procedure interface understandable because we are not making tablename optional sometimes anymore.&lt;/p&gt;

&lt;p&gt;PS I agree that we can determine tablename from indexname if user just provided schema and indexname and then we can still generate ALTER TABLE sql but I think requiring the user to provide schemaname and tablename always and only making indexname optional will simplify the stored procedure interface.&lt;/p&gt;

&lt;p&gt;Any feedback will be appreciated.&lt;/p&gt;</comment>
                            <comment id="12608799" author="knutanders" created="Fri, 27 Jun 2008 15:58:24 +0100"  >&lt;p&gt;The latest proposal looks good to me. If we go for a single procedure, I agree that it&apos;s better to require the table name since it makes the interface easier to explain and understand.&lt;/p&gt;</comment>
                            <comment id="12608809" author="mikem" created="Fri, 27 Jun 2008 16:52:36 +0100"  >&lt;p&gt;I like the proposal for a single procedure with 3 args as described, which can handle both the case of updating stats for all indexes and stats for a single named index.  my vote for name would be SYSCS_UPDATE_STATISTICS().&lt;/p&gt;</comment>
                            <comment id="12608810" author="mikem" created="Fri, 27 Jun 2008 16:56:51 +0100"  >&lt;p&gt;I am ok with following the existing paradigm that other procedures use to implement this, ie. call the parser on new internal&lt;br/&gt;
syntax.  But I wonder if anyone knows how easy it might be to instead call directly whatever the parser generates in this case.&lt;br/&gt;
I don&apos;t know if it really matters, and maybe the current way is best with more code sharing.  I definitely thinks it makes sense&lt;br/&gt;
for the bulk of the code to go into alter table execution where it can share all the existing code for the same type of work.&lt;/p&gt;</comment>
                            <comment id="12608814" author="mamtas" created="Fri, 27 Jun 2008 17:02:15 +0100"  >&lt;p&gt;I am little torn about what the name should be for this new system procedure. I see Knut&apos;s point about prefix SYSCS_ being redundant in the name but I think in order to be consistent with the naming convention for all the existing stored procedures, it may be better to continuee the tradition of starting the procedure name with SYSCS_. I find myself leaning more towards the name SYSCS_UTIL.SYSCS_UPDATE_STATISTICS but I can be pursuaded if the community thinks otherwise.&lt;/p&gt;</comment>
                            <comment id="12613372" author="mamtas" created="Mon, 14 Jul 2008 17:58:35 +0100"  >&lt;p&gt;I have a patch for implementing update statistics as a stored procedure. The main logic is to convert the stored procedure request to an ALTER TABLE... sql(bear in mind that this generated sql is not available for the user to issue directly. This alter table syntax will be accepted only when sql is not coming directly from the user. This is similar in concept to what we do for compress table) and go through the existing ALTER TABLE code to do table/schema/index validation, ensuring proper permissions exist for user to call update statistics etc. The actual code to update the statistics has been (literally) copied from the existing disabled code for update statistics in Derby (impl.sql.execute.UpdateStatisticsConstantAction.java) The user can invoke update statistics for just one index on a table or for all indexes on a table. The syntax of the new stored procedure is as follows&lt;br/&gt;
call syscs_util.SYSCS_UPDATE_STATISTICS(schemaname, tablename, indexname)&lt;br/&gt;
If the user specifies null for the indexname, then all the indexes on the tablename will have their statistics updated. If the user does specify an indexname, then statistics will be updated only for that index.&lt;/p&gt;

&lt;p&gt;The patch here include engine changes and upgrade changes. It also fixes existing tests that were impacted by the engine changes. TODO : I need to add more tests for the actual functionality. The existing disabled test selectivity.sql appears to have some tests for old disabled (non-compliant) update statistics syntax. I will use these existing tests as the basis for the new junit tests for the new stored procedure.&lt;/p&gt;

&lt;p&gt;The files impacted by this patch are as follows. I will briefly go over the actual code changes in the following paragraph&lt;br/&gt;
$ svn stat -q&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\AlterTableNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\sqlgrammar.jj&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\GenericConstantActionFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\AlterTableConstantAction.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DataDictionaryImpl.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DD_Version.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\dictionary\IndexRowGenerator.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\dictionary\DataDictionary.java&lt;br/&gt;
M      java\engine\org\apache\derby\catalog\SystemProcedures.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\RolesTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\GrantRevokeDDLTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests&amp;#95;Suite.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\Changes10_2.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\UpgradeRun.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\Changes10_5.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\db2Compatibility.out&lt;/p&gt;

&lt;p&gt;Parser, compile and execute time changes for the new stored procedure For the stored procedure, we generate one of the following 2 ALTER TABLE ... sqls This sql is generated if user wants us to update the statistics of all the indexes on a table&lt;br/&gt;
ALTER TABLE (schemaname.)tablename ALL UPDATE STATISTICS&lt;br/&gt;
or&lt;br/&gt;
This sql is generated if user wants us to update the statistics of only one index on a table&lt;br/&gt;
ALTER TABLE (schemaname.)tablename UPDATE STATISTICS indexname&lt;/p&gt;

&lt;p&gt;1)sqlgrammar.jj&lt;br/&gt;
We will first make sure that we are at data dictionary version 10.5 or higher in order to accept the new ALTER TABLE sql syntax. Next, we will make sure that this ALTER TABLE was generated through internal code and not from the user code. One these 2 criterias are made, we will generated the compile time node for ALTER TABLE sql.&lt;br/&gt;
2)AlterTableNode.java&lt;br/&gt;
The changes in this class are simple and simply make sure that we are ready to accept the new ALTER TABLE... syntax&lt;br/&gt;
3)GenericConstantActionFactory.java&lt;br/&gt;
Since we have more parameters to pass from compile phase to execute phase for ALTER TABLE now, I needed to make changes into GenericConstantActionFactory.java from those additional params.&lt;br/&gt;
4)AlterTableConstantAction.java&lt;br/&gt;
The changes in this file are copied from the existing disabled code for update statistics in impl.sql.execute.UpdateStatisticsConstantAction.java. This existing code relies on a method in IndexRowGenerator.java which I added back again (this method was removed by Dan a long time back because it was not being used by any active code in Derby. The method was removed as part of revision 565966).&lt;br/&gt;
5)SystemProcedures.java&lt;br/&gt;
This is where we intercept the call to SYSCS_UPDATE_STATISTICS and convert it into internal syntax of ALTER TABLE... sql&lt;/p&gt;

&lt;p&gt;The following changes in engine code are related to upgrade code&lt;br/&gt;
1)DataDictionaryImpl.java&lt;br/&gt;
It marks the database to be at version 10.5 and it adds the new system stored procedure SYSCS_UPDATE_STATISTICS to the data dictionary for 10.5 release.&lt;br/&gt;
2)DD_Version.java&lt;br/&gt;
This provides a way to add the stored procedure SYSCS_UPDATE_STATISTICS to the data dictionary during hard upgrade to 10.5 release of an existing db.&lt;/p&gt;

&lt;p&gt;Following existing tests needed some modifications&lt;br/&gt;
1)RolesTest.java, GrantRevokeDDLTest.java, db2Compatibility.out&lt;br/&gt;
The number of stored procedures have increased by one and hence these tests have to take that into account.&lt;/p&gt;

&lt;p&gt;Following tests changes are for upgrade testing(added a new test for 10.5 release and the new test is called Changes10_5.java&lt;br/&gt;
1)upgradeTests/_Suite.java, Changes10_2.java, UpgradeRun.java&lt;/p&gt;

&lt;p&gt;I will appreciate any feedback on the patch.&lt;/p&gt;</comment>
                            <comment id="12613458" author="mamtas" created="Mon, 14 Jul 2008 22:31:34 +0100"  >&lt;p&gt;I spent time looking through selectivity.sql and tried converting the test cases into just a sql file where we do not rely on the old functionality which is not supported anymore. The existing selectivity.sql depends on the features like Object.methods eg runtimestatistics().rts.getEstimatedRowCount(), runtimestatistics().getScanStatisticsText(&apos;TEMPLATE&apos;) inside of sql. &lt;br/&gt;
eg&lt;br/&gt;
create view showstats as&lt;br/&gt;
select cast (conglomeratename as varchar(20)) indexname, &lt;br/&gt;
	   cast (statistics.toString() as varchar(40)) stats,&lt;br/&gt;
	   creationtimestamp createtime, &lt;br/&gt;
	   colcount ncols&lt;br/&gt;
from sys.sysstatistics, sys.sysconglomerates &lt;br/&gt;
where conglomerateid = referenceid;&lt;/p&gt;

&lt;p&gt;Such object lookup is not available in Derby. I will spend more time on it but it may not work out with the curent Derby functionality.&lt;/p&gt;

&lt;p&gt;I was wondering if community had any ideas/test cases which I can use for the new stored procedure. I can do basic testing which shows that the stored procedure runs etc but it will be nice to see the real impact of running the stored procedure on a query before and after the update statistics runs. Thanks for any help with this.&lt;/p&gt;</comment>
                            <comment id="12613587" author="knutanders" created="Tue, 15 Jul 2008 12:53:14 +0100"  >&lt;p&gt;I&apos;ve only had a brief look at the patch, so I haven&apos;t studied the details, but the general approach looks fine to me. Some questions/comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;since the code is copied from UpdateStatisticsConstantAction, I assume USCA will be removed from the repository in a later patch?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UpdateStatisticsConstantAction uses a strange mix of tabs and spaces for indentation. It would be great if the indentation is cleaned up when the code is moved.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SystemProcedures.SYSCS_UPDATE_STATISTICS() uses tabs/spaces inconsistently&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;comment in upgradeTests/_Suite.java has the wrong version number:&lt;br/&gt;
+        
{10, 4, 1, 3}
&lt;p&gt;, // 10.3.1.4 (April 24, 2008 / SVN 648739)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SYSCS_UPDATE_STATISTICS is added to Changes10_2. Shouldn&apos;t that file only test procedures that were added in Derby 10.2?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12613665" author="mamtas" created="Tue, 15 Jul 2008 18:12:54 +0100"  >&lt;p&gt;Knut, thanks for reviewing the patch. Answers to your questions/comments&lt;br/&gt;
***********************&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;since the code is copied from UpdateStatisticsConstantAction, I assume USCA will be removed from the repository in a later patch?&lt;br/&gt;
Yes, I am planning on removing this file when I commit the changes.&lt;br/&gt;
***********************&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;***********************&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UpdateStatisticsConstantAction uses a strange mix of tabs and spaces for indentation. It would be great if the indentation is cleaned up when the code is moved.&lt;br/&gt;
I took care of indentation in my codeline (sorry, it is not in the patch) in the transferred code to AlterTableConstantAction&lt;br/&gt;
***********************&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;***********************&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;- SystemProcedures.SYSCS_UPDATE_STATISTICS() uses tabs/spaces inconsistently&lt;br/&gt;
I took care of indentation in my codeline (sorry, it is not in the patch).&lt;br/&gt;
**********************&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;**********************&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;comment in upgradeTests/_Suite.java has the wrong version number:&lt;br/&gt;
+ 
{10, 4, 1, 3}
&lt;p&gt;, // 10.3.1.4 (April 24, 2008 / SVN 648739) &lt;br/&gt;
Thanks for catching this. I fixed the version number in my codeline.&lt;br/&gt;
**********************&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;**********************&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SYSCS_UPDATE_STATISTICS is added to Changes10_2. Shouldn&apos;t that file only test procedures that were added in Derby 10.2?&lt;br/&gt;
What I found is if I do not add SYSCS_UPDATE_STATISTICS to the list of stored procedures in Changes10_2, I get error that there are 6 rows in SYSROUTINEPERMS but we are looking only for 5 rows. My understanding of upgrade test is not upto date but it sounds like we are testing the upgrade from 10.2 release to 10.5. If that is right, then I think I do need to add SYSCS_UPDATE_STATISTICS in Changes10_2.&lt;br/&gt;
**********************&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12613987" author="knutanders" created="Wed, 16 Jul 2008 16:28:56 +0100"  >&lt;p&gt;Thanks for the answers, Mamta. I&apos;m not up to date on the upgrade tests either, but I think you&apos;re right, Changes10_2 seems to be testing upgrade from Derby 10.2 (or later) to the current release.&lt;/p&gt;</comment>
                            <comment id="12614060" author="mamtas" created="Wed, 16 Jul 2008 19:30:16 +0100"  >&lt;p&gt;I have final patch DERBY269_update_statistics_svndiff_ver2.txt attached to this jira. The output of svn stat -q is as follows. The patch is not very different from the first patch. The changes in this patch are that &lt;br/&gt;
1)I have added a new test lang\UpdateStatisticsTest.java which does basic testing like &lt;br/&gt;
  a)attempt to update statistics of a table that does not exist &lt;br/&gt;
  b)attempt to update statistics of a non-existent index on a pre-existing table &lt;br/&gt;
  c)create table, create index, load data in table, make sure there is no statistics created for index because there was no data in the table when it was created, create another index, it should get statistics created because there is data in the table, now perform update statistics on first index and it should also get statistics created for it &lt;br/&gt;
  d)issue internally generated ALTER TABLE ... sql for system procedure directly but that will fail because such a sql can only be generated internally and is  not available to the users &lt;br/&gt;
  e)try to issue update statistics on global temporary table and that should fail&lt;br/&gt;
2)I have added a new test in existing GrantRevokeDDLTest.java to show that the new system procedure has public access available on it. The only requirement is the table on which it is being issued should be accessible to the user issuing it.&lt;br/&gt;
3)In my first patch, I had forgotten to add the keyword STATISTICS into non-reserved non-sql92 list and because of that, db2Compatibility test was failing incorrectly and I had provided a fix for the test. But marking the keyword correctly in sqlgrammar.jj makes sure that no changes are required in db2Compatibility test.&lt;br/&gt;
4)In addition, I have reformatted the following files to use correct space/tab format when compared to the first patch.&lt;br/&gt;
5)I have removed UpdateStatisticsConstantAction,java since the code inside it has now been moved to AlterTableConstantAction.&lt;br/&gt;
6)I fixed the incorrect version number that I had in upgradeTests/_Suite.java &lt;/p&gt;

&lt;p&gt;Will appreciate any comments on the patch. If no comments, then work on committing it in a day or two. Thanks&lt;/p&gt;

&lt;p&gt;svn stat -q&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\AlterTableNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\sqlgrammar.jj&lt;br/&gt;
D      java\engine\org\apache\derby\impl\sql\execute\UpdateStatisticsConstantAction.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\GenericConstantActionFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\execute\AlterTableConstantAction.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DataDictionaryImpl.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DD_Version.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\dictionary\IndexRowGenerator.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\sql\dictionary\DataDictionary.java&lt;br/&gt;
M      java\engine\org\apache\derby\catalog\SystemProcedures.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\RolesTest.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\lang\UpdateStatisticsTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang&amp;#95;Suite.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\GrantRevokeDDLTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests&amp;#95;Suite.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\Changes10_2.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\UpgradeRun.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\upgradeTests\Changes10_5.java&lt;/p&gt;</comment>
                            <comment id="12614455" author="knutanders" created="Thu, 17 Jul 2008 18:28:45 +0100"  >&lt;p&gt;I think the changes look good. A couple of comments (none of them are&lt;br/&gt;
important enough to hold a commit):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You may want to make the fields that were added to AlterTableNode&lt;br/&gt;
   private. And the comment describing those fields will probably be&lt;br/&gt;
   clearer if it is split so that it explains each variable in a&lt;br/&gt;
   separate comment (javadoc, preferably) instead of all in the same&lt;br/&gt;
   comment.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The patch adds some trailing blanks which it would be good to clean&lt;br/&gt;
   out.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In AlterTableConstantAction.updateStatistics() I think it would be&lt;br/&gt;
   good to move the assignment of heapCC up before the&lt;br/&gt;
   try/finally. Then we don&apos;t need to check heapCC!=null in the&lt;br/&gt;
   finally clause. The same goes for the assignment of gsc in the same&lt;br/&gt;
   method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think IndexRowGenerator.getNullIndexRow() will be easier to&lt;br/&gt;
   understand if the variable i is declared in the for loop to reduce&lt;br/&gt;
   it&apos;s scope, and the first statement after the for loop is changed&lt;br/&gt;
   from using (i+1) to (baseColumnPositions.length+1).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In SystemProcedures.SYSCS_UPDATE_STATISTICS(), the two if&lt;br/&gt;
   statements could be merged into a single one (the body of the first&lt;br/&gt;
   one could be moved into the else branch of the second one).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The SQL in the javadoc comment of SYSCS_UPDATE_STATISTICS() lacks&lt;br/&gt;
   the update keyword.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Just wondering, but would it be better to move the optional ALL&lt;br/&gt;
   keyword in the syntax, so that the syntax became &quot;UPDATE ALL&lt;br/&gt;
   STATISTICS&quot; instead of &quot;ALL UPDATE STATISTICS&quot;? That feels like a&lt;br/&gt;
   more natural order to me. Not that important as long as it&apos;s just&lt;br/&gt;
   internal SQL, though.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UpdateStatisticsTest has the wrong class name in the header.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UpdateStatisticsTest (five instances): try/catch should call fail()&lt;br/&gt;
   at the end of the try block to ensure that an exception was&lt;br/&gt;
   thrown. Could use helper method&lt;br/&gt;
   BaseJDBCTestCase.assertStatementError() for this.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12614661" author="knutanders" created="Fri, 18 Jul 2008 08:39:30 +0100"  >&lt;p&gt;If I have understood correctly, unique indexes always have up to date cardinality statistics because cardinality == row count. If that&apos;s the case, one possible optimization is to skip the unique indexes when SYSCS_UPDATE_STATISTICS is called.&lt;/p&gt;</comment>
                            <comment id="12614785" author="mikem" created="Fri, 18 Jul 2008 17:48:02 +0100"  >&lt;p&gt;is the cardinality of a unique index 1 or is it row count?&lt;/p&gt;

&lt;p&gt;It is also more complicated than just skipping unique indexes, it depends on the number of columns in the index because &lt;br/&gt;
in a multi-column index, multiple cardinalities are calculated.  So for instance on an index on columns A,B,C there are &lt;br/&gt;
actually 3 cardinalities calculated: &lt;br/&gt;
A&lt;br/&gt;
A,B&lt;br/&gt;
A,B,C&lt;/p&gt;

&lt;p&gt;I agree that the calculation of cardinality of A,B,C could/should be short circuited for a unique index.  &lt;/p&gt;</comment>
                            <comment id="12614841" author="mamtas" created="Fri, 18 Jul 2008 19:55:42 +0100"  >&lt;p&gt;Knut, thanks for your thorough review of the last patch. I have taken care of all the comments (except the one about changing the sql grammar to &quot;UPDATE ALL STATISTICS&quot; instead of &quot;ALL UPDATE STATISTICS&quot;. I hope since this is an internal sql only, it is ok to leave it as it is. Please let me know if you think otherwise.&lt;/p&gt;

&lt;p&gt;I have committed the changes (which also addresses Knut&apos;s comment) in trunk using revision 677998&lt;/p&gt;</comment>
                            <comment id="12614899" author="knutanders" created="Fri, 18 Jul 2008 23:25:30 +0100"  >&lt;p&gt;Thanks Mamta! I&apos;m fine with the changes and with keeping the internal syntax from the previous patches.&lt;/p&gt;

&lt;p&gt;Mike,&lt;br/&gt;
It looks to me as if the cardinality is the number of unique values, so I think the cardinality of a unique index is equal to its row count (for the full key, that is).&lt;br/&gt;
You&apos;re right that we can&apos;t short circuit it if we have a multi-column index. I don&apos;t know if it&apos;s worth the extra complexity to short circuit the A,B,C case, since we&apos;d have to scan the entire index anyway. For a single-column unique index it sounds like a good idea, though.&lt;/p&gt;</comment>
                            <comment id="12615293" author="mamtas" created="Mon, 21 Jul 2008 17:21:05 +0100"  >&lt;p&gt;I just realized that I left some code comments in AlterTableConstantAction which should have been removed when I committed the code last week. Will go ahead and remove those comments shortly.&lt;/p&gt;</comment>
                            <comment id="12615296" author="mamtas" created="Mon, 21 Jul 2008 17:26:17 +0100"  >&lt;p&gt;Cleaned up the code comments with revision 678460.&lt;/p&gt;</comment>
                            <comment id="12615344" author="mamtas" created="Mon, 21 Jul 2008 19:07:15 +0100"  >&lt;p&gt;I am closing this jira entry since it now provides a manual way to update the statistics. I will create a new jira entry for the documentation counterpart of the code changes.&lt;/p&gt;

&lt;p&gt;In addition, I will also enter a new jira entry for providing some automatic way to update the statistics when they are not upto date. &lt;/p&gt;</comment>
                            <comment id="12615361" author="mamtas" created="Mon, 21 Jul 2008 19:49:31 +0100"  >&lt;p&gt;Added jira entry &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3788&quot; title=&quot;Provide a zero-admin way of updating the statisitcs of an index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3788&quot;&gt;&lt;del&gt;DERBY-3788&lt;/del&gt;&lt;/a&gt; Provide a zero-admin way of updating the statisitcs of an index&lt;/p&gt;

&lt;p&gt;Another related jira entry &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3790&quot; title=&quot;Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3790&quot;&gt;&lt;del&gt;DERBY-3790&lt;/del&gt;&lt;/a&gt; Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column.&lt;/p&gt;</comment>
                            <comment id="12617051" author="mikem" created="Fri, 25 Jul 2008 21:47:22 +0100"  >&lt;p&gt;i agree now that the selectivity maintains the &quot;number of unique values&quot;  and then uses this along with the &quot;number of rows&quot; to export a selectivity percentage. &lt;/p&gt;

&lt;p&gt;As to the short circuit discussion, I just don&apos;t know if the optimizer will actually ever ask for the selectivity of something&lt;br/&gt;
that it knows is unique - i actually hope not.  Note that the actual row count is only available with a full scan, the one &lt;br/&gt;
maintained by store is only an estimate.  But in this case it may just be good enough to store the estimate row count as &lt;br/&gt;
both the row count and the number of rows.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12419355">DERBY-4116</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12419334">DERBY-4115</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12400678">DERBY-3787</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12385990" name="DERBY269_update_statistics_svndiff_ver1.txt" size="38085" author="mamtas" created="Mon, 14 Jul 2008 17:58:35 +0100"/>
                            <attachment id="12386209" name="DERBY269_update_statistics_svndiff_ver2.txt" size="52618" author="mamtas" created="Wed, 16 Jul 2008 19:30:16 +0100"/>
                            <attachment id="12385991" name="DERBY269_update_statistics_svnstat_ver1.txt" size="1326" author="mamtas" created="Mon, 14 Jul 2008 17:58:35 +0100"/>
                            <attachment id="12386210" name="DERBY269_update_statistics_svnstat_ver2.txt" size="1507" author="mamtas" created="Wed, 16 Jul 2008 19:30:16 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 22 May 2005 22:53:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29464</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ncn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37601</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>