<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:11:10 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3596/DERBY-3596.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3596] Creation of logical connections from a pooled connection causes resource leak on the server</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3596</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When using ClientConnectionPoolDataSource and connection pooling, a new connection / transaction is created for every new logical connection, and the resources are not freed / cleaned up in the server. They are not even cleaned up when the physical connection (ClientPooledConnection) is closed.&lt;br/&gt;
A logical connection is obtained by invoking ClientPooledConnection.getConnection().&lt;/p&gt;

&lt;p&gt;I have observed that if you run the repro enough times against the same server, the number of transaction in the transaction table will be reduced now and then. I believe this is garbage collection, but I have not investigated the problem enough to tell for sure what&apos;s going on.&lt;/p&gt;

&lt;p&gt;I have also seen some locks not being freed, causing timeouts in some applications. I don&apos;t have a repro for the lock problem at this time, but it is very likely related to this issue.&lt;/p&gt;

&lt;p&gt;Note that XA connections are handled differently on the server, and do probably not have this problem.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12393122">DERBY-3596</key>
            <summary>Creation of logical connections from a pooled connection causes resource leak on the server</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Apr 2008 15:11:29 +0100</created>
                <updated>Mon, 29 Jun 2009 14:47:35 +0100</updated>
                            <resolved>Mon, 30 Jun 2008 08:42:52 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.2.1</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Network Client</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12585539" author="kristwaa" created="Fri, 4 Apr 2008 15:12:48 +0100"  >&lt;p&gt;Corrected messed up affects and fix version...&lt;/p&gt;</comment>
                            <comment id="12585542" author="kristwaa" created="Fri, 4 Apr 2008 15:14:43 +0100"  >&lt;p&gt;Attached repro &apos;ConnectionPoolingBug.java&apos;.&lt;br/&gt;
It runs a test sequence and prints the number of entries in the transaction table.&lt;br/&gt;
You must start a network server manually, and run the repro multiple times to see the GC happening on the server.&lt;/p&gt;</comment>
                            <comment id="12585549" author="dyret" created="Fri, 4 Apr 2008 15:31:18 +0100"  >&lt;p&gt;My understanding is that the statement cache is only available when using ClientConnectionPoolDataSource. Perhaps we should include a reference to this issue in the description of the statement cache feature in the release notes? Seems like anyone wanting to try out the statement cache will likely experience this problem.&lt;/p&gt;</comment>
                            <comment id="12585811" author="knutanders" created="Fri, 4 Apr 2008 23:44:09 +0100"  >&lt;p&gt;Isn&apos;t this the same problem as the one described in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12586257" author="knutanders" created="Mon, 7 Apr 2008 08:19:22 +0100"  >&lt;p&gt;Sorry, I didn&apos;t notice that setAutoCommit(false) was commented out, so this is probably not the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3319&quot; title=&quot;Logical connections do not check if a transaction is active on close&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3319&quot;&gt;&lt;del&gt;DERBY-3319&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12598670" author="kristwaa" created="Wed, 21 May 2008 15:39:54 +0100"  >&lt;p&gt;I have uploaded two fixes that solve the problem.&lt;br/&gt;
None of them are ready for commit, but I&apos;d like to get some comments&lt;br/&gt;
on which approach to go for.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&apos;derby-3596-1a-complex_approach.diff&apos;&lt;br/&gt;
  Solves the problem by maintaining only one physical connection on the&lt;br/&gt;
  server side. This connection has to be reset, which includes setting&lt;br/&gt;
  the isolation level, resetting IDENTITY_VAL_LOCAL and cleaning out&lt;br/&gt;
  temporary tables.&lt;br/&gt;
  The patch basically contains two parts: Detecting and handling a&lt;br/&gt;
  deferred reset in DRDAConnThread and exposing / extending reset&lt;br/&gt;
  functionality (the connection classes).&lt;br/&gt;
  A drawback of this approach is that care must be taken to get the&lt;br/&gt;
  reset logic correct.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&apos;derby-3596-2a-simple_approach.diff&apos;&lt;br/&gt;
  Solves the problem by simply closing the existing connection on the&lt;br/&gt;
  server side before creating a new, if there is one.&lt;br/&gt;
  Only a few lines of code.&lt;br/&gt;
  This solution is far from optimal, since a physical connection is both&lt;br/&gt;
  closed and created on the server for each logical connection on the&lt;br/&gt;
  client side.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Optimal approach&lt;br/&gt;
  This would probably be to rewrite the whole logic, both on the client&lt;br/&gt;
  and the server side. It seems to me there is half-baked support for a&lt;br/&gt;
  lot more advanced functionality than what we are using. I see what we&lt;br/&gt;
  have / had as a first step towards supporting enterprise multi-tiered&lt;br/&gt;
  connection pooling ala what DB2 has. There is support for this in&lt;br/&gt;
  DRDA, where for instance a pooling agent can use a single connection&lt;br/&gt;
  to do work for multiple clients/drivers (one must switch database and&lt;br/&gt;
  user &quot;on the fly&quot;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll attach a few graphs showing the heap usage of the various&lt;br/&gt;
approaches, and also provide a few numbers regarding performance.&lt;/p&gt;

&lt;p&gt;I&apos;m asking for comments on this issue!&lt;/p&gt;</comment>
                            <comment id="12598673" author="kristwaa" created="Wed, 21 May 2008 15:50:54 +0100"  >&lt;p&gt;Attaching three images showing the heap usage of the various builds: no fix, simple fix and complex fix.&lt;br/&gt;
Note the left side axis, it is not the same across all the images!&lt;/p&gt;

&lt;p&gt;I used the attached repro to measure performance, and JConsole to monitor heap usage.  I ran the repro 10 times, each run lasting 30 seconds using Sun JDK 1.6.0 with default settings on my dual core machine with 4 GB memory.&lt;/p&gt;

&lt;p&gt;Number of iterations done by the repro;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;no fix:       48 000 &lt;span class=&quot;error&quot;&gt;&amp;#91;25 - 56&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;simple fix:   78 000 &lt;span class=&quot;error&quot;&gt;&amp;#91;70 - 79&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;complex fix: 125 000 &lt;span class=&quot;error&quot;&gt;&amp;#91;120 - 128&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that the complex fix is not optimal, but feasible without changing&lt;br/&gt;
the client driver as well. I haven&apos;t verified, but I believe it should&lt;br/&gt;
work fine with older client versions. The simple fix keeps the semantics&lt;br/&gt;
unchanged.&lt;/p&gt;</comment>
                            <comment id="12598676" author="kristwaa" created="Wed, 21 May 2008 15:53:14 +0100"  >&lt;p&gt;Forgot to say, Derby quickly gets into trouble running real load without any of the fixes.&lt;br/&gt;
With all these dangling transactions, lock conflicts quickly accumulates...&lt;/p&gt;</comment>
                            <comment id="12599175" author="kmarsden" created="Thu, 22 May 2008 21:28:43 +0100"  >&lt;p&gt;I am about even on the two options.  The simple fix seems less risky and less likely to have bugs, but I don&apos;t know if the complex fix has other performance benefits.  Just a nit on the fix.  It would be good to mention the bug number in the comments where you talk about the bug, so future readers can refer to this conversation.&lt;/p&gt;</comment>
                            <comment id="12599290" author="kristwaa" created="Fri, 23 May 2008 07:59:10 +0100"  >&lt;p&gt;Thanks for looking at the issue Kathey.&lt;br/&gt;
I&apos;ll include the Jira number in the relevant comments when I post an updated patch.&lt;/p&gt;

&lt;p&gt;I agree that the simple fix seems less risky. I get one error when I run the regression tests with it. The failure is in one of the new tests I wrote for JDBC statement pooling, so I have to look into the test and also check how statement pooling is affected by the fix.&lt;/p&gt;

&lt;p&gt;I do have some reservations about the more complex fix. Even though the approach is more optimal, the implementation is a bit hacky due to compatibility constraints. I wonder if it would be better to design and implement a proper mechanism at a later time.&lt;br/&gt;
Will we ever roll a compatibility breaking release? If not, we have to code this using version checking and keep multiple implementations on both the client and server side.&lt;/p&gt;

&lt;p&gt;Also, please note that there are more alternatives than the two I have suggested here. For instance, today we have Database and XADatabase. It might be possible to introduce a PoolingDatabase, taken we can detect when clients are indeed working with pooled connections. The difference between this one and the current complex fix, would be that the former would map client logical connections onto embedded logical connections, whereas the latter would map client logical connections directly onto a single embedded physical connection. This has some implications regarding connection state reset and object creation.&lt;/p&gt;


&lt;p&gt;I&apos;ll work a bit more on the test failure and getting a better grip on things.&lt;br/&gt;
Feel free to add more comments.&lt;/p&gt;</comment>
                            <comment id="12599323" author="knutanders" created="Fri, 23 May 2008 11:31:50 +0100"  >&lt;p&gt;Regardless of which fix we choose, I think the changes to EmbedConnection.resetFromPool() should be part of it. I tried to set the schema on a logical connection with the embedded driver, and when I closed that connection and opened a new logical connection, the current schema had not been reset. (We may consider pushing the resetting all the way into LCC.resetFromPool(), by the way.)&lt;/p&gt;</comment>
                            <comment id="12599334" author="knutanders" created="Fri, 23 May 2008 12:30:20 +0100"  >&lt;p&gt;I logged the problem with the embedded driver as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3690&quot; title=&quot;EmbedPooledConnection doesn&amp;#39;t reset schema when creating a new logical connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3690&quot;&gt;&lt;del&gt;DERBY-3690&lt;/del&gt;&lt;/a&gt; so that we can address it separately.&lt;/p&gt;</comment>
                            <comment id="12599817" author="kristwaa" created="Mon, 26 May 2008 12:50:12 +0100"  >&lt;p&gt;&apos;derby-3596-3a-test_cleanup.diff&apos; contains minor cleanups in a single test in StatementPoolingTest;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;renamed test (added the word &apos;Physical&apos;)&lt;/li&gt;
	&lt;li&gt;added a missing fail()&lt;/li&gt;
	&lt;li&gt;changed some comments&lt;/li&gt;
	&lt;li&gt;added a constant for a SQL statement&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Committed to trunk with revision 660165 and the 10.4 branch with revision 660168.&lt;/p&gt;</comment>
                            <comment id="12600441" author="kristwaa" created="Wed, 28 May 2008 12:28:40 +0100"  >&lt;p&gt;&apos;derby-3596-1b-complex_approach.diff&apos; removes (now) redundant code (added under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3690&quot; title=&quot;EmbedPooledConnection doesn&amp;#39;t reset schema when creating a new logical connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3690&quot;&gt;&lt;del&gt;DERBY-3690&lt;/del&gt;&lt;/a&gt;) and cleans up the patch a little bit. It is actually pretty simple, and I&apos;m leaning towards implementing this approach instead of the one I have called simple.&lt;/p&gt;

&lt;p&gt;The simple one causes some test errors, because of some internal state on the server gets inconsistent.&lt;br/&gt;
Since the complex one is not that complex and gives better performance, I&apos;m strongly considering choosing it over the other solution.&lt;/p&gt;

&lt;p&gt;I would be grateful if someone could have a look at the patch and comment on it (again) or ask questions.&lt;br/&gt;
FYI, the client sends a &quot;reconnect sequence&quot; every time a logical connection is created on the client;  EXCSAT, ACCSEC, SECCHK and  ACCRDB.&lt;br/&gt;
This is probably not the last spin, I have to check if there are other connection properties that have to be reset for logical connection.&lt;/p&gt;</comment>
                            <comment id="12600462" author="knutanders" created="Wed, 28 May 2008 14:01:29 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I don&apos;t know if this can ever happen, but since we always set&lt;br/&gt;
deferredReset to false in parseEXCSAT() if appRequester is null, I&lt;br/&gt;
assume that it is possible that deferredReset is true when&lt;br/&gt;
parseEXCSAT() is called. As the code is now, it won&apos;t set&lt;br/&gt;
deferredReset to false if it&apos;s true when the method is called and it&lt;br/&gt;
is an XA request. Is this intended, or should deferredReset always be&lt;br/&gt;
set to the value of (appRequester != null &amp;amp;&amp;amp; !appRequester.isXARequester())?&lt;/li&gt;
&lt;/ul&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m not sure I understand this comment:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        // Reset the flag again. In sane builds it is used to avoid asserts, but&lt;br/&gt;
+        // we want to reset it as soon as possible to avoid masking real bugs.&lt;br/&gt;
+        this.deferredReset = false;&lt;/p&gt;

&lt;p&gt;I don&apos;t see any asserts that check deferredReset, and I don&apos;t see how&lt;br/&gt;
it masks bugs.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is it safe to skip the user/password check at the end of&lt;br/&gt;
parseSECCHK() when processing a deferred reset? Earlier in that&lt;br/&gt;
method, the user id and password fields of the database object are&lt;br/&gt;
updated with whichever the SECCHK message contains, so even if the&lt;br/&gt;
Derby network client never changes the user id, could a malicious&lt;br/&gt;
client exploit this somehow?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12600499" author="kristwaa" created="Wed, 28 May 2008 16:06:49 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;1) I moved the reset to before &quot;if (appRequester != null)&quot;. It should be true for the shortest time possible, but it must survive for a few iterations in the processCommands loop after it has been set to true.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;2) Sorry, I was at bit unclear. If you look at the end of the method processCommands, you see this inside a SanityManager.DEBUG block:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if (!this.deferredReset &amp;amp;&amp;amp; pbsd != null) {&lt;br/&gt;
        ...&lt;br/&gt;
        SanityManager.ASSERT(!pbsd.isModified(),&lt;/p&gt;

&lt;p&gt;    This assert fails because of the connection reset I do. When the PBSD is written, we&apos;re on track again and the flag can be reset and we execute the assert again for later iterations in the processCommands loop. This workaround is required due to the &quot;hackyness&quot; of the fix...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;3) No, I don&apos;t believe it is entirely safe to skip the user/password check. However, that code is what creates the new connections, which is what we want to avoid. The credentials are verified by actually connecting to the database. Some options:&lt;br/&gt;
    a) Make an extra connection attempt to verify credentials.&lt;br/&gt;
    b) Hang on to the credentials made during the initial connection and see if they have changed for the deferred resets.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Note that our driver had the functionality to change the credentials, but it doesn&apos;t anymore. So I suppose the ability to exploit this depends on if a malicious client can &quot;take over the TCP-IP pipe&quot; and act as the initial user. The new user credential won&apos;t take effect.&lt;br/&gt;
    For the general case, this will cause some overhead, and it is my opinion that the driver shouldn&apos;t send this &quot;reconnection sequence&quot; at all. I&apos;ll try to implement option b) in the next patch, along with some more comments and references to the Jira issue.&lt;/p&gt;</comment>
                            <comment id="12602246" author="kristwaa" created="Wed, 4 Jun 2008 12:26:17 +0100"  >&lt;p&gt;Patches 4a and 5a implements checking the credentials or skipping the SECCHK, respectively.&lt;br/&gt;
Note the change that the database object is not reset if we are dealing with a deferred reset (creating a new logical connection on the client).&lt;/p&gt;

&lt;p&gt;I tried three variants of the skip approach:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;use reader.skipDss().&lt;/li&gt;
	&lt;li&gt;use while loop and reader.skipBytes(),but don&apos;t check anything.&lt;/li&gt;
	&lt;li&gt;use while loop and make sure no invalid code points are received (uploaded patch 5a).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I ran the regression tests with the check creds patch (4a) and the two first skip approaches. Tests for the 5a patch is running now.&lt;/p&gt;

&lt;p&gt;Opinions?&lt;br/&gt;
If I hear nothing, i think I&apos;ll go for patch 5a.&lt;/p&gt;</comment>
                            <comment id="12602368" author="kristwaa" created="Wed, 4 Jun 2008 18:25:19 +0100"  >&lt;p&gt;Regression tests completed without failures with patch 5a applied (Sun JDK 1.6, Solaris 10).&lt;/p&gt;</comment>
                            <comment id="12603821" author="knutanders" created="Tue, 10 Jun 2008 10:56:31 +0100"  >&lt;p&gt;5a looks good to me. I agree that it&apos;s better to keep this code simple and that 5a is preferable to 4a.&lt;/p&gt;</comment>
                            <comment id="12603857" author="kristwaa" created="Tue, 10 Jun 2008 13:54:05 +0100"  >&lt;p&gt;Thank you for looking at the new patches Knut Anders.&lt;/p&gt;

&lt;p&gt;Committed &apos;derby-3596-5a-complex_skip_creds.diff&apos; to trunk with revision 666088.&lt;br/&gt;
This must be backported to 10.4, but I want to wait for a while to see if any issues are detected.&lt;/p&gt;

&lt;p&gt;I think this patch concludes the work on the issue unless new problems surface. Note that I discovered a performance issue that I will handle under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3441&quot; title=&quot;Determine and implement a proper procedure for resetting a prepared statement for reuse in a statement pool&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3441&quot;&gt;&lt;del&gt;DERBY-3441&lt;/del&gt;&lt;/a&gt;. The client driver reset procedure causes the query &quot;VALUES CURRENT SCHEMA&quot; to be executed on every connection reset. I will post more details under the mentioned Jira issue. &lt;/p&gt;</comment>
                            <comment id="12603858" author="kristwaa" created="Tue, 10 Jun 2008 13:55:40 +0100"  >&lt;p&gt;(Uploaded new 5a patch file where tabs on a single line are removed.)&lt;/p&gt;</comment>
                            <comment id="12609171" author="kristwaa" created="Mon, 30 Jun 2008 08:42:52 +0100"  >&lt;p&gt;Merged fix 5a to 10.4 with revision 672719.&lt;br/&gt;
Regression tests ran without failures on the 10.4 branch.&lt;/p&gt;</comment>
                            <comment id="12609172" author="kristwaa" created="Mon, 30 Jun 2008 08:45:49 +0100"  >&lt;p&gt;Updated fix version and also ticked the performance category.&lt;br/&gt;
Before this fix, resources would leak and garbage collection would cause severe (periodic) performance degradation.&lt;/p&gt;</comment>
                            <comment id="12619433" author="kristwaa" created="Mon, 4 Aug 2008 08:33:09 +0100"  >&lt;p&gt;Closing, no issues reported.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12385979">DERBY-3313</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12379391" name="ConnectionPoolingBug.java" size="3474" author="kristwaa" created="Fri, 4 Apr 2008 15:14:43 +0100"/>
                            <attachment id="12382474" name="complex-fix-heap.png" size="74271" author="kristwaa" created="Wed, 21 May 2008 15:50:54 +0100"/>
                            <attachment id="12382470" name="derby-3596-1a-complex_approach.diff" size="9684" author="kristwaa" created="Wed, 21 May 2008 15:39:54 +0100"/>
                            <attachment id="12382919" name="derby-3596-1b-complex_approach.diff" size="5391" author="kristwaa" created="Wed, 28 May 2008 12:28:40 +0100"/>
                            <attachment id="12382469" name="derby-3596-2a-simple_approach.diff" size="567" author="kristwaa" created="Wed, 21 May 2008 15:39:54 +0100"/>
                            <attachment id="12382766" name="derby-3596-3a-test_cleanup.diff" size="3243" author="kristwaa" created="Mon, 26 May 2008 12:50:12 +0100"/>
                            <attachment id="12383371" name="derby-3596-4a-complex_check_creds.diff" size="10048" author="kristwaa" created="Wed, 4 Jun 2008 12:26:17 +0100"/>
                            <attachment id="12383745" name="derby-3596-5a-complex_skip_creds.diff" size="8260" author="kristwaa" created="Tue, 10 Jun 2008 13:55:40 +0100"/>
                            <attachment id="12383372" name="derby-3596-5a-complex_skip_creds.diff" size="8248" author="kristwaa" created="Wed, 4 Jun 2008 12:26:17 +0100"/>
                            <attachment id="12382472" name="nofix-heap.png" size="64082" author="kristwaa" created="Wed, 21 May 2008 15:50:54 +0100"/>
                            <attachment id="12382473" name="simple-fix-heap.png" size="76768" author="kristwaa" created="Wed, 21 May 2008 15:50:54 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Apr 2008 14:31:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23736</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wqn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39122</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>