<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:31:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2618/DERBY-2618.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2618] EmbedClob.setAsciiStream does not handle non-ascii characters correctly</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2618</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If non-ascii characters are written to the Writer returned by EmbedClob.setAsciiStream, Derby fails with a &apos;java.io.UTFDataFormatException&apos; when the CLOB value is read back.&lt;/p&gt;

&lt;p&gt;I&apos;m filing this bug with &apos;Major&apos; priority, as the bug does not manifest itself when entering data, just when you try to get it back. Except from filtering the data yourself before entering it, I don&apos;t think there is any workaround.&lt;/p&gt;

&lt;p&gt;Sample stack trace from a modified test:&lt;/p&gt;

&lt;p&gt;1) testClobAsciiWrite1ParamKRISTIWAA(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest)java.sql.SQLException: Unable to set stream: &apos;java.io.UTFDataFormatException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.setStreamFailure(Util.java:246)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedClob.length(EmbedClob.java:190)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setClob(EmbedPreparedStatement.java:1441)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobAsciiWrite1ParamKRISTIWAA(LobStreamsTest.java:255)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88)&lt;br/&gt;
Caused by: java.sql.SQLException: Unable to set stream: &apos;java.io.UTFDataFormatException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        ... 22 more&lt;/p&gt;</description>
                <environment></environment>
        <key id="12368767">DERBY-2618</key>
            <summary>EmbedClob.setAsciiStream does not handle non-ascii characters correctly</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 May 2007 14:06:27 +0100</created>
                <updated>Wed, 20 Jun 2007 08:10:34 +0100</updated>
                            <resolved>Thu, 24 May 2007 16:11:30 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12494066" author="djd" created="Mon, 7 May 2007 16:54:47 +0100"  >&lt;p&gt;I&apos;m a little confused, how can non-ASCII characters be written to the OutputStream (not Writer) returned by setAsciiStream?&lt;br/&gt;
JDBC defines ASCII values as 0-255, see appendix C2 JDBC 4&lt;/p&gt;

&lt;p&gt; &quot;CHAR(code) Character with ASCII code value code, where code is between 0 and 255&quot;&lt;/p&gt;

&lt;p&gt;Is there a repro that shows which ascii code values cause the problem?&lt;/p&gt;</comment>
                            <comment id="12495542" author="kristwaa" created="Mon, 14 May 2007 11:23:57 +0100"  >&lt;p&gt;Seems there are more than one kind of bug in this area.&lt;br/&gt;
From the users perspective, you can write any int to the clob ascii stream, since it is a OutputStream and has the method write(int).&lt;/p&gt;

&lt;p&gt;I see errors happening in two places; some when calling write, some when calling read when reading the value back.&lt;br/&gt;
Would be nice if anyone could try the repro and confirm my findings, or let me know if I have been using the JDBC API incorrectly. Note that the repro must be run with Java SE 6 because it uses Connection.createClob().&lt;/p&gt;


&lt;p&gt;I have not looked at this in detail, but I think the stream used to write to the Clob must do some filtering on the value. &lt;br/&gt;
This is typically ANDing with 0xff and/or replacing the incoming int with the Unicode marker for unknown character (\uFFFD).&lt;/p&gt;

&lt;p&gt;Then the question is, which values are considered &quot;non-ASCII&quot;?&lt;br/&gt;
According to JDBC, an ASCII value is between 0 and 255, inclusive. Represented as byte, you will get negative values for a part of this range. I assume ISO-8859-1 is the encoding standard to be used, and further that these values will be mapped directly into Unicode.&lt;/p&gt;

&lt;p&gt;Say the Tamil letter with Unicode value &apos;\u0B88&apos; is written to the stream returned by Clob.setAsciiStream(1) with OutputStream.write(int). Should we do &quot;if i &amp;gt; 255 write &apos;\uFFFD&apos;&quot;, or should we ignore the higher bits and say this is value 136 (this is mentioned in the comment for ClobAsciiStream), which happens to be an unused code in ISO-8859-1?&lt;/p&gt;

&lt;p&gt;When/if the unknown character code is stored internally (\uFFFD), it must be converted to &apos;?&apos; if it is read back using getAsciiStream (returns an InputStream).&lt;/p&gt;

&lt;p&gt;The default behavior for OutputStream.write(int), is to cast the int to char and then call the abstract method write(char[],int,int).&lt;/p&gt;

&lt;p&gt;No matter what the answers to the questions above are, Derby should not fail with a UTFDataFormatException when reading data you have already been allowed to insert.&lt;/p&gt;

&lt;p&gt;I&apos;m on thin ice for how to correctly handle these issues, and I&apos;m sure there are more, so please correct me and add additional information.&lt;/p&gt;</comment>
                            <comment id="12495548" author="kristwaa" created="Mon, 14 May 2007 11:51:53 +0100"  >&lt;p&gt;Forgot to say that I also believe a subset of the issues mentioned above is also valid for the other write-methods.&lt;br/&gt;
It should also be noted that there is a stack of streams, and I do now know at which level the real bug is present.&lt;/p&gt;</comment>
                            <comment id="12495550" author="kristwaa" created="Mon, 14 May 2007 11:55:17 +0100"  >&lt;p&gt;Unassigning myself, as I won&apos;t have time to work with this issue immediately.&lt;/p&gt;</comment>
                            <comment id="12495695" author="djd" created="Mon, 14 May 2007 18:47:31 +0100"  >&lt;p&gt;&amp;gt; The default behavior for OutputStream.write(int), is to cast the int to char and then call the abstract method write(char[],int,int). &lt;/p&gt;

&lt;p&gt;That&apos;s incorrect, the defined behaviour for OutputStream.write(int) is (jdk 6 javadoc):&lt;/p&gt;

&lt;p&gt;   &quot;The byte to be written is the eight low-order bits of the argument b. The 24 high-order bits of b are ignored.&quot;&lt;/p&gt;

&lt;p&gt;Thus when using setAsciiStream() there are no no-ASCII characters, since each write call only handles values as bytes (0-255).&lt;/p&gt;

&lt;p&gt;I agree Derby should not fail with a UTFDataFormatException when using setAsciiStream() but it should not treat any characters as invalid,&lt;br/&gt;
all values passed into the write() calls are valid.&lt;/p&gt;</comment>
                            <comment id="12495704" author="djd" created="Mon, 14 May 2007 19:16:05 +0100"  >&lt;p&gt;Looks like ClobAsciiStream is not fulfiling the contract of OutputStream.&lt;br/&gt;
For write(int) it juts passes the int value onto the writer.&lt;br/&gt;
I think the write(byte) may also have the same issue, and is implemented inefficiently. It creates a char[] for every call,&lt;br/&gt;
it should create a char[] once and re-use it.&lt;/p&gt;</comment>
                            <comment id="12495777" author="djd" created="Mon, 14 May 2007 21:39:28 +0100"  >&lt;p&gt;Partial patch which does:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Make ClobAsciiStream obey the contract for write(int) by ignoring the high bytes of an integer.&lt;/li&gt;
	&lt;li&gt;Optimize ClobAsciiStream.write(byte,int,int) by reusing a single array&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove an out of place break in XXXX&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Even with these changes the repro shows UTF8Exceptions because I think the code that is implementing updating a Clob has problems. I thought it might be due to the extra break statement in XXX but I think there are more problems.&lt;/p&gt;

&lt;p&gt;jdbc4._Suite passes and jdbcapi.LobStreamsTest which are the only tests to use Clob.setAsciiStream&lt;/p&gt;
</comment>
                            <comment id="12495778" author="djd" created="Mon, 14 May 2007 21:42:19 +0100"  >&lt;p&gt;The XXXX should have been ClobStreamControl in the last comment, to read&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove an out of place break in ClobStreamControl&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12495783" author="djd" created="Mon, 14 May 2007 21:57:27 +0100"  >&lt;p&gt;Ok - I now see ClobStreamControl.getStreamPosition() is incorrect. It is reading UTF8 encoded &lt;b&gt;bytes&lt;/b&gt; from a CLOB value but performs the checks to see if the encoding is 1,2 or 3 characters incorrectly. It treats the first byte read as a unicode character value, rather than an encoded byte.&lt;br/&gt;
Utf8Reader.fillBuffer() or SQLChar.readExternal has correct logic to decode a UTF8 stream.&lt;/p&gt;</comment>
                            <comment id="12495788" author="djd" created="Mon, 14 May 2007 22:32:26 +0100"  >&lt;p&gt;Improved patch which attempts to fix ClobStreamControl.getStreamPosition() handling of formatted UTF8 data.&lt;/p&gt;

&lt;p&gt;Still does not fix the problems seen with the repro because ClobStreamControl has various errors with its handling of positions.&lt;/p&gt;

&lt;p&gt;One potential fix was made in ClobStreamControl.getWriter (long pos).&lt;/p&gt;

&lt;p&gt;The old code had:&lt;/p&gt;

&lt;p&gt; long charPos = getStreamPosition (0, pos);&lt;/p&gt;

&lt;p&gt;but getStreamPosition() is defined as returning a &lt;b&gt;byte&lt;/b&gt; position for a character position, so the name of the variable is confusing.&lt;/p&gt;

&lt;p&gt;Possibly due to this confusion then code then subsequently did:&lt;/p&gt;

&lt;p&gt; new ClobUtf8Writer (this, getStreamPosition (0, charPos))&lt;/p&gt;

&lt;p&gt;thus the &lt;b&gt;byte&lt;/b&gt; position was converted into a byte position again, which is bound to cause problems.&lt;/p&gt;

&lt;p&gt;The change has renamed the variable to bytePos and passed in directly into new ClobUtf8Writer.&lt;/p&gt;

&lt;p&gt;There are still issues with the code in ClobStreamControl but I&apos;ll put those in a different comment.&lt;/p&gt;</comment>
                            <comment id="12495790" author="djd" created="Mon, 14 May 2007 22:40:22 +0100"  >&lt;p&gt;ClobStreamControl has issues over its handling of positions, getting confused between byte position, character position, byte length and stream length.&lt;br/&gt;
If anyone knows the code could they supply some guidance?&lt;/p&gt;

&lt;p&gt;ClobUtf8Writer maintains a field pos that is the position of the writer in bytes. On its write call it calls ClobStreamControl.insertString() and increments the position by the return from insertString(). This is where the problem comes:&lt;/p&gt;

&lt;p&gt;  ClobUtf8Writer.write() is expecting ClobStreamControl.insertString()  to return the number of (UTF8 encoded) bytes written:&lt;/p&gt;

&lt;p&gt;  ClobStreamControl.insertString() javadoc indicates it returns the current position in bytes&lt;/p&gt;

&lt;p&gt;   ClobStreamControl.insertString() actually returns the number of &lt;b&gt;characters&lt;/b&gt; written.&lt;/p&gt;

&lt;p&gt;These three items are inconsistent.&lt;/p&gt;

&lt;p&gt;There is another caller (EmbedClob.setString) of ClobStreamControl.insertString() that does expect it to return the number of characters written, but I think that can be obtained from its parameter &apos;len&apos;. Or is there a situation where less characters would be written?&lt;/p&gt;</comment>
                            <comment id="12495876" author="kristwaa" created="Tue, 15 May 2007 08:01:17 +0100"  >
&lt;p&gt;Thanks Dan,&lt;/p&gt;

&lt;p&gt;I mixed things up and looked at Writer instead of OutputStream...&lt;/p&gt;

&lt;p&gt;Regarding the problems you have encountered in the lower layers, I&apos;m &lt;br/&gt;
planning to spend some time looking at them as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2346&quot; title=&quot;Provide set methods for clob for embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2346&quot;&gt;&lt;del&gt;DERBY-2346&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
I&apos;m thinking about opening a subtaskto handle this, as there might be a &lt;br/&gt;
series of smaller patches. Feel free to provide input there as well.&lt;/p&gt;



&lt;p&gt;&amp;#8211; &lt;br/&gt;
Kristian&lt;/p&gt;

</comment>
                            <comment id="12495879" author="knutanders" created="Tue, 15 May 2007 08:21:55 +0100"  >&lt;p&gt;Dan, many of the inconsistencies you have found have been commented in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2346&quot; title=&quot;Provide set methods for clob for embedded driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2346&quot;&gt;&lt;del&gt;DERBY-2346&lt;/del&gt;&lt;/a&gt;, which is pending a follow-up patch. The v2 patch looks correct to me. +1 to commit. My only minor nit is that I would have preferred &quot;int clen = Math.min(len, buffer.length);&quot; to &quot;int clen = len &amp;gt; buffer.length ? buffer.length : len;&quot; in ClobAsciiStream.write() (I find it a bit clearer, but others may see it differently, so feel free to ignore it).&lt;/p&gt;</comment>
                            <comment id="12495954" author="anurag" created="Tue, 15 May 2007 12:06:14 +0100"  >&lt;p&gt;I have updated v2 patch with fix in ClobStreamControl.insertString.&lt;/p&gt;</comment>
                            <comment id="12495965" author="anurag" created="Tue, 15 May 2007 12:35:30 +0100"  >&lt;p&gt;Problem with insertString was that it internally considered the pos argument as byte length where as all the user of this method were send char length. I have modified the method and the javadoc to accept pos parameter in char length.&lt;/p&gt;</comment>
                            <comment id="12496029" author="djd" created="Tue, 15 May 2007 17:05:37 +0100"  >&lt;p&gt;Cleanup required elswhere to ensure this bug is fixed.&lt;/p&gt;</comment>
                            <comment id="12496031" author="djd" created="Tue, 15 May 2007 17:08:06 +0100"  >&lt;p&gt;On patch v3, I assume this now means the position &apos;pos&apos; in ClobUtf8Writer is now the position in characters, not bytes.&lt;br/&gt;
If this is the case then I can update the comment for that field, which currently states it is in bytes.&lt;/p&gt;</comment>
                            <comment id="12496034" author="djd" created="Tue, 15 May 2007 17:12:24 +0100"  >&lt;p&gt;Then again ClobUtf8Writer&apos;s constructor is being called with a byte position.&lt;br/&gt;
I think I will commit just the changes related to cleaning up ClobAsciiStream&lt;br/&gt;
and those fixing the handling of the utf8 stream in ClobStreamControl. I think the byte/character position cleanup&lt;br/&gt;
needs to be handled separately and consistently.&lt;/p&gt;</comment>
                            <comment id="12496047" author="kristwaa" created="Tue, 15 May 2007 17:35:40 +0100"  >&lt;p&gt;Hello Dan,&lt;/p&gt;

&lt;p&gt;Are you planning to do more work on the ClobStreamControl issues at the moment?&lt;br/&gt;
One of the things I would like to investigate, is separating the code for handling LOBs in memory and on disk (reorganizing the code). As part of this, I would be able to do a review-pass, and hopefully fix some of the bugs (or make the code clearer). However, if you plan to work on this issue as well, we would conflict heavily.&lt;/p&gt;

&lt;p&gt;As a second task, I also considered moving the LOB classes to a separate package, as the number of LOB related classes is starting to get high. What do you, or others, think of that?&lt;br/&gt;
I would not do this now anyway.&lt;/p&gt;

&lt;p&gt;Third, the issue around synchronization for LOBs must be reviewed. I hope to give this a first shot to as part of the reorg.&lt;/p&gt;</comment>
                            <comment id="12496060" author="djd" created="Tue, 15 May 2007 18:36:50 +0100"  >&lt;p&gt;I&apos;m only going to commit derby2618_partial_v4.txt, which is a subset of the v2 patch.&lt;br/&gt;
I agree the cleanup needs to be more extensive, the code is confusing and subject&lt;br/&gt;
to bugs until some clarity is brought to it, especially with respect to byte/char offsets.&lt;br/&gt;
One off fixes for various items, such as the changes in the v2/v3 patch are likely to&lt;br/&gt;
cause more problems, as one method is changed to take a byte/char postion&lt;br/&gt;
but the change isn&apos;t followed through the complete code.&lt;/p&gt;</comment>
                            <comment id="12496062" author="djd" created="Tue, 15 May 2007 18:42:33 +0100"  >&lt;p&gt;attach with ALv2 grant&lt;/p&gt;</comment>
                            <comment id="12496153" author="djd" created="Tue, 15 May 2007 23:08:29 +0100"  >&lt;p&gt;Patch 2618_partial_v4.txt committed - svn 538311&lt;/p&gt;</comment>
                            <comment id="12498676" author="kristwaa" created="Thu, 24 May 2007 16:06:33 +0100"  >&lt;p&gt;&apos;derby2618_partial_v5-ontopofv4.diff&apos; fixes another bug in ClobAsciiStream. Bytes were not and-ed with 0xff, causing for instance &apos;\u00c6&apos; to come back as &apos;\uffc6&apos;.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 541315.&lt;br/&gt;
suites.All ran clean.&lt;/p&gt;</comment>
                            <comment id="12498677" author="kristwaa" created="Thu, 24 May 2007 16:11:30 +0100"  >&lt;p&gt;Resolving as invalid, since there is no such thing as a non-ascii character if the stream is behaving according to contract.&amp;lt; (ignoring high order bits). Note that in JDBC ASCII is defined to by any value between 0 and 255 (inclusive).&lt;/p&gt;

&lt;p&gt;Also note that there has been some fixes done as part of this issue.&lt;br/&gt;
There might be underlying issues that have not yet been solved. They are handled by other Jiras.&lt;/p&gt;

&lt;p&gt;I expect to close this issue soon.&lt;/p&gt;</comment>
                            <comment id="12498685" author="djd" created="Thu, 24 May 2007 16:41:09 +0100"  >&lt;p&gt;Is there an Jira bug for the UTF8Exceptions that get thrown when using this api?&lt;/p&gt;</comment>
                            <comment id="12498694" author="kristwaa" created="Thu, 24 May 2007 17:00:18 +0100"  >&lt;p&gt;Not directly, but I will address them as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2646&quot; title=&quot;Cleanup of Clob control/support structures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2646&quot;&gt;&lt;del&gt;DERBY-2646&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
It will involve some rewriting of the existing code, and I hope to submit a patch in a day or two. As time is getting short, anyone willing to review the patch is very much welcomed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12506417" author="kristwaa" created="Wed, 20 Jun 2007 08:10:34 +0100"  >&lt;p&gt;The initially reported bug turned out to be invalid (there are no invalid ASCII characters in JDBC, possible values are 0 - 255).&lt;br/&gt;
The other issues are hopefully addressed as part of other Jiras (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2646&quot; title=&quot;Cleanup of Clob control/support structures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2646&quot;&gt;&lt;del&gt;DERBY-2646&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12363010">DERBY-2346</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12357244" name="Derby2618BugsInClobAsciiStream.java" size="6038" author="kristwaa" created="Mon, 14 May 2007 11:23:57 +0100"/>
                            <attachment id="12357376" name="derby-2618v3.diff" size="7005" author="anurag" created="Tue, 15 May 2007 12:06:14 +0100"/>
                            <attachment id="12357312" name="derby2618_partial_v1.txt" size="2706" author="djd" created="Mon, 14 May 2007 21:39:28 +0100"/>
                            <attachment id="12357316" name="derby2618_partial_v2.txt" size="5940" author="djd" created="Mon, 14 May 2007 22:32:26 +0100"/>
                            <attachment id="12357408" name="derby2618_partial_v4.txt" size="4297" author="djd" created="Tue, 15 May 2007 18:42:33 +0100"/>
                            <attachment id="12358131" name="derby2618_partial_v5-ontopofv4.diff" size="614" author="kristwaa" created="Thu, 24 May 2007 16:06:33 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 May 2007 15:54:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23133</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11mf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39913</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>