<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-733/DERBY-733.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-733] Starvation in RAFContainer.readPage()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-733</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When Derby is completely disk bound, threads might be starved in&lt;br/&gt;
RAFContainer.readPage(). This is a real problem when multiple clients&lt;br/&gt;
are repeatedly accessing one or a small number of large tables. In&lt;br/&gt;
cases like this, I have observed very high maximum response times&lt;br/&gt;
(several minutes in the worst cases) on simple transactions. The&lt;br/&gt;
average response time is not affected by this.&lt;/p&gt;

&lt;p&gt;The starvation is caused by a synchronized block in&lt;br/&gt;
RAFContainer.readPage():&lt;/p&gt;

&lt;p&gt;  synchronized (this) &lt;/p&gt;
{
      fileData.seek(pageOffset);
      fileData.readFully(pageData, 0, pageSize);
  }

&lt;p&gt;If many threads want to read pages from the same file, there will be a&lt;br/&gt;
long queue of threads waiting for this monitor. Since the Java&lt;br/&gt;
specification does not guarantee that threads waiting for monitors are&lt;br/&gt;
treated fairly, some threads might have to wait for a long time before&lt;br/&gt;
they get the monitor. (Usually, a couple of threads get full throughput&lt;br/&gt;
while the others have to wait.)&lt;/p&gt;</description>
                <environment>Solaris x86 and Linux with Sun JVM 1.5.0. Derby embedded and client/server.</environment>
        <key id="12326209">DERBY-733</key>
            <summary>Starvation in RAFContainer.readPage()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Dec 2005 01:02:52 +0000</created>
                <updated>Mon, 29 Jun 2009 15:43:30 +0100</updated>
                            <resolved>Sat, 17 Dec 2005 17:45:51 +0000</resolved>
                                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12358925" author="knutanders" created="Thu, 1 Dec 2005 01:04:06 +0000"  >&lt;p&gt;I have tried to put calls to the lock() and unlock() methods in the&lt;br/&gt;
Java 1.5 ReentrantLock class around the synchronized block. With this&lt;br/&gt;
change, the difference between the maximum response time and the&lt;br/&gt;
average response time is decreased to an acceptable level.&lt;/p&gt;

&lt;p&gt;Since Derby can&apos;t rely on features from Java 1.5, we have to implement&lt;br/&gt;
our own lock class which works on Java 1.3 and 1.4. This should be&lt;br/&gt;
relatively simple. I will try to implement a class which can be used&lt;br/&gt;
as a drop-in replacement for java.util.concurrent.locks.ReentrantLock&lt;br/&gt;
and test it to be sure that it doesn&apos;t pose any significant&lt;br/&gt;
overhead. I think the overhead posed by maintaining a queue of waiters&lt;br/&gt;
will be small compared to the time it takes to read a page from the&lt;br/&gt;
disk.&lt;/p&gt;</comment>
                            <comment id="12359331" author="mikem" created="Tue, 6 Dec 2005 03:47:40 +0000"  >&lt;p&gt;I agree something should be done to address this issue.  I liked the proposed solution of enabling multiple&lt;br/&gt;
open files on a single container, with some mechanism to tie these open files into a single open file cache&lt;br/&gt;
so that the resource is not unlimited.  &lt;/p&gt;

&lt;p&gt;Marking it as an improvement as the current code works, it is just not optimal.&lt;/p&gt;</comment>
                            <comment id="12359401" author="knutanders" created="Tue, 6 Dec 2005 19:23:38 +0000"  >&lt;p&gt;Mike, I agree that a pool of open file descriptors is a good idea, but&lt;br/&gt;
you will run into the same problem with highly unstable response times&lt;br/&gt;
when the number of threads accessing the same file exceeds the number&lt;br/&gt;
of file descriptors. I think we should use ReentrantLock for Java 1.5&lt;br/&gt;
and higher, since the introduction of this class has allowed the&lt;br/&gt;
implementers of JVMs to prioritize throughput over fairness in the&lt;br/&gt;
handling of monitors. We should file a separate enhancement request&lt;br/&gt;
for the file descriptor pool.&lt;/p&gt;

&lt;p&gt;I have attached a patch which invokes ReentrantLock.lock() and&lt;br/&gt;
unlock() when reading in a page from disk. I did not build my own&lt;br/&gt;
ReentrantLock replacement, as I said I would. Instead, I have used&lt;br/&gt;
reflection to enable this feature if the JVM supports it. This seemed&lt;br/&gt;
like an easier approach, and I also discovered that the handling of&lt;br/&gt;
threads waiting for monitors had changed between 1.4 and 1.5 and that&lt;br/&gt;
this issue was not so serious on 1.4.&lt;/p&gt;

&lt;p&gt;The maximum response time was drastically reduced in the disk-bound&lt;br/&gt;
case. Derbyall ran successfully on both Sun JVM 1.4.2 and 1.5.0. I&lt;br/&gt;
have also tested the performance, and I could not see any change in&lt;br/&gt;
throughput or CPU usage. (The performance test was run with a very&lt;br/&gt;
small page cache and with a database that was many times bigger than&lt;br/&gt;
the page cache, but smaller than the file system cache. This way,&lt;br/&gt;
Derby called readPage() very often, but it was CPU-bound since the&lt;br/&gt;
requested page always was in the file system cache.)&lt;/p&gt;

&lt;p&gt;Could someone please review this patch?&lt;/p&gt;

&lt;p&gt;% svn stat&lt;br/&gt;
M      java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java&lt;/p&gt;</comment>
                            <comment id="12360447" author="djd" created="Thu, 15 Dec 2005 04:19:45 +0000"  >&lt;p&gt;I wonder if we can use the existing lock manager, which provides predictable queueing behaviour on granting locks,&lt;br/&gt;
rather than add a new mechansm.&lt;/p&gt;</comment>
                            <comment id="12360454" author="oysteing" created="Thu, 15 Dec 2005 06:16:15 +0000"  >&lt;p&gt;It is possible to use the lock manager for a lock that is local to the object?  I do not think it is a good idea to enter the lock into the general lock pool.  That seems like quite a lot of unnecessary overhead.  &lt;/p&gt;

&lt;p&gt;I also think that in the long run we should consider replacing the current latches with the built-in locks provided by Java.&lt;/p&gt;</comment>
                            <comment id="12360463" author="djd" created="Thu, 15 Dec 2005 08:34:20 +0000"  >&lt;p&gt;The issue I have with this current patch is that is is localized to one use in RAFContainer, when reading files.&lt;br/&gt;
Most likely there are other locations where such a facility would be useful, especially on the write for RAFContainer.&lt;br/&gt;
Are we going to have similar if (java5) statements everywhere. The module api already supports loading different&lt;br/&gt;
code for different environments, I think that this functionality could be added to the LockManager  or  maybe a separate&lt;br/&gt;
module. This would be an improvement, but I think it would be a mistake to have similar code to this patch in many&lt;br/&gt;
areas of Derby. And yes, maybe we could work on improving Latch performance along these lines.&lt;/p&gt;</comment>
                            <comment id="12360569" author="knutanders" created="Fri, 16 Dec 2005 19:34:45 +0000"  >&lt;p&gt;I have attached a test case that makes it possible to reproduce the&lt;br/&gt;
reported issue. There are two files:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Insert.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   Creates a database &quot;mydb&quot; in the current directory and fills it&lt;br/&gt;
   with about five gigabytes of data. (If you have more than 1 GB of&lt;br/&gt;
   RAM, you might consider increasing the database size since some&lt;br/&gt;
   operating systems use all available main memory for file system&lt;br/&gt;
   caching, and then you won&apos;t be testing disk accesses.) The database&lt;br/&gt;
   consists of one table with two columns:&lt;/p&gt;

&lt;p&gt;     (id int primary key, text char(100))&lt;/p&gt;

&lt;p&gt;   The command &quot;java Insert&quot; will start the program.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Select.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   Start the program with &quot;java Select &amp;lt;clients&amp;gt; &amp;lt;seconds&amp;gt;&quot;, where&lt;br/&gt;
   &amp;lt;clients&amp;gt; is the number of clients you want to test and &amp;lt;seconds&amp;gt;&lt;br/&gt;
   is the number of seconds the test will run. The program will start&lt;br/&gt;
   as many clients as requested, and each client will repeatedly&lt;br/&gt;
   select a random row from the table generated by the Insert&lt;br/&gt;
   program. Every ten seconds the progress of each client is printed&lt;br/&gt;
   (number of transactions in the last ten seconds). When the test has&lt;br/&gt;
   finished, it prints the throughput and the avg/min/max response&lt;br/&gt;
   time.&lt;/p&gt;

&lt;p&gt;I have run this test (40 clients/10 minutes) on Linux 2.6.14 with the&lt;br/&gt;
following results (this is NOT a benchmark):&lt;/p&gt;

&lt;p&gt;  Before revision 356884 was committed:&lt;/p&gt;

&lt;p&gt;     Sun JVM 1.4.2: 78.3 tps /    727 ms max resp&lt;br/&gt;
     IBM JVM 1.4.2: 78.2 tps /   1079 ms max resp&lt;br/&gt;
   Blackdown 1.4.2: 78.9 tps /    717 ms max resp&lt;br/&gt;
     Sun JVM 1.5.0: 78.2 tps / 609483 ms max resp&lt;br/&gt;
     IBM JVM 1.5.0: Went into infinite loop because of I/O error&lt;/p&gt;

&lt;p&gt;  After revision 356884 was committed:&lt;/p&gt;

&lt;p&gt;     Sun JVM 1.4.2: 78.7 tps /  690 ms max resp&lt;br/&gt;
     IBM JVM 1.4.2: 78.1 tps / 1080 ms max resp&lt;br/&gt;
   Blackdown 1.4.2: 79.3 tps /  656 ms max resp&lt;br/&gt;
     Sun JVM 1.5.0: 79.1 tps /  682 ms max resp&lt;br/&gt;
     IBM JVM 1.5.0: Went into infinite loop because of I/O error&lt;/p&gt;</comment>
                            <comment id="12360589" author="knutanders" created="Sat, 17 Dec 2005 00:45:59 +0000"  >&lt;p&gt;Attached patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-733&quot; title=&quot;Starvation in RAFContainer.readPage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-733&quot;&gt;&lt;del&gt;DERBY-733&lt;/del&gt;&lt;/a&gt;-more-exception-handling.diff) that addresses&lt;br/&gt;
Mike&apos;s concerns for exception handling. If something goes wrong when&lt;br/&gt;
locking, Derby will now fall back to the old behaviour.&lt;/p&gt;

&lt;p&gt;Derbyall ran without failures.&lt;/p&gt;

&lt;p&gt;% svn stat -q&lt;br/&gt;
M      java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java&lt;/p&gt;</comment>
                            <comment id="12360655" author="knutanders" created="Sat, 17 Dec 2005 17:45:51 +0000"  >&lt;p&gt;Fixed in revision 357275. Thanks for taking the time to review and commit, Mike.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12321369" name="DERBY-733-more-exception-handling.diff" size="1708" author="knutanders" created="Sat, 17 Dec 2005 00:45:59 +0000"/>
                            <attachment id="12321163" name="DERBY-733.diff" size="3518" author="knutanders" created="Tue, 6 Dec 2005 19:23:38 +0000"/>
                            <attachment id="12321365" name="Insert.java" size="1802" author="knutanders" created="Fri, 16 Dec 2005 19:34:45 +0000"/>
                            <attachment id="12321366" name="Select.java" size="4394" author="knutanders" created="Fri, 16 Dec 2005 19:34:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Dec 2005 03:47:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wen:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39068</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>