<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4249/DERBY-4249.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4249] Create a simple store recovery test in JUnit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4249</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;It would be good to be able to start converting the store  recovery tests  or at least be able to write new recovery tests in JUnit.   We could start by writing a simple recovery test just to establish the framework.  The test should.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Connect, create a table, commit and shutdown the database.&lt;/li&gt;
	&lt;li&gt;fork a jvm, add one row, commit, add another row, exit  the jvm.&lt;/li&gt;
	&lt;li&gt;Reconnect with the first jvm and verify that the first row is there and the second is not.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I guess the main thing to decide is how to spawn the second jvm and check results.    I tend to think the second jvm should actually execute another JUnit test, verify the exit code (assuming a failed test has a non-zero exit code) and then put the output in the fail assertion if it fails so it shows up in the report at the end of the Suite execution.   I think we could create a test runner that takes a class and a specific test to run instead of the whole suite, so we could keep our methods consolidated in a single class for the test, but all pure conjecture at this point.  I&apos;ll have to give it a try, but wanted to first see if folks thought this was a reasonable approach.&lt;/p&gt;




</description>
                <environment></environment>
        <key id="12426598">DERBY-4249</key>
            <summary>Create a simple store recovery test in JUnit</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="siddharthsrivastava">Siddharth Srivastava</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 May 2009 17:22:28 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:18 +0100</updated>
                            <resolved>Wed, 24 Aug 2011 18:38:31 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13046242" author="siddharthsrivastava" created="Wed, 8 Jun 2011 22:32:13 +0100"  >&lt;p&gt;Hi Kathey&lt;/p&gt;

&lt;p&gt;Can you please assign this issue to me ?&lt;/p&gt;

&lt;p&gt;Are there any recommended tests which I should study/look upon as a reference to understand things better ?&lt;/p&gt;
</comment>
                            <comment id="13060830" author="kmarsden" created="Wed, 6 Jul 2011 21:52:24 +0100"  >&lt;p&gt;I think  ultimately we are going to want have a fixture that launches a jvm to run another fixture that lives in the same class. So, perhaps the best way to start would be by making a command line test runner that will run a single fixture in embedded mode.  It might be run something like:&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.functionTests.util.SingleFixtureRunner &amp;lt;test class&amp;gt; &amp;lt;fixture name&amp;gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;br/&gt;
java  org.apache.derbyTesting.functionTests.util.SingleFixtureRunner org.apache.derbyTesting.functionTests.tests.lang.SimpleTest testBugFixes&lt;/p&gt;

&lt;p&gt;I think this would be a useful tool in and of itself and is something we can use for the recover test. At least for the initial version it will be just straight embedded with no decorators.&lt;/p&gt;

&lt;p&gt;The code would have to use reflection to kick off the fixture and on error could just print the error info and stack trace to System.err.  It might look something like this (totally untested and printFailInfo left as exercise).&lt;/p&gt;

&lt;p&gt;      String testClassName = args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;;&lt;br/&gt;
       String fixtureName = args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
       Class testClass = Class.forName(testClassName);&lt;br/&gt;
       Constructor classConstr = testClass.getDeclaredConstructor(new Class[] &lt;/p&gt;
{String.class}
&lt;p&gt;);&lt;br/&gt;
       Test testToRun = (Test) classConstr.newInstance(new Object[] &lt;/p&gt;
{fixtureName}
&lt;p&gt;);&lt;br/&gt;
       TestResult result  = new TestResult();&lt;br/&gt;
       testToRun.run(result);&lt;br/&gt;
       if (result.wasSuccessful())&lt;br/&gt;
           return;&lt;br/&gt;
       if (result.failureCount() &amp;gt; 0)&lt;br/&gt;
           printFailInfo(result.failures());&lt;br/&gt;
       if (result.errorCount() &amp;gt; 0)&lt;br/&gt;
           printFailInfo(result.errors());&lt;br/&gt;
       System.exit(-1);&lt;/p&gt;

&lt;p&gt;If you get that done, then next we can add an assertLaunchJunitFixture() method to BaseTestCase  which prints the error output to System.err if  the launch fails.  Then we should have all the parts we need for the basic recovery test.&lt;/p&gt;

</comment>
                            <comment id="13062783" author="siddharthsrivastava" created="Sun, 10 Jul 2011 19:34:37 +0100"  >&lt;p&gt;Thanks Kathey.&lt;br/&gt;
I have attached the patch for SingleFixtureRunner.&lt;/p&gt;
</comment>
                            <comment id="13063351" author="knutanders" created="Mon, 11 Jul 2011 15:11:36 +0100"  >&lt;p&gt;I think junit.textui.TestRunner can do the same with the -m option:&lt;/p&gt;

&lt;p&gt;java junit.textui.TestRunner -m &amp;lt;classname&amp;gt;.&amp;lt;methodname&amp;gt;&lt;/p&gt;</comment>
                            <comment id="13063446" author="kmarsden" created="Mon, 11 Jul 2011 18:29:47 +0100"  >&lt;p&gt;Thanks Knut, that sounds neat, but doesn&apos;t seem to work for me.&lt;br/&gt;
$ java junit.textui.TestRunner -m org.apache.derbyTesting.functionTests.tests.&lt;br/&gt;
ang.SimpleTest.testBugFixes&lt;br/&gt;
Class not found &quot;org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.testBugFixes&quot;&lt;/p&gt;

&lt;p&gt;Nor do I see it in the javadoc&lt;br/&gt;
&lt;a href=&quot;http://junit.sourceforge.net/junit3.8.1/javadoc/junit/textui/TestRunner.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://junit.sourceforge.net/junit3.8.1/javadoc/junit/textui/TestRunner.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What might I be doing wrong?&lt;/p&gt;</comment>
                            <comment id="13063482" author="knutanders" created="Mon, 11 Jul 2011 20:26:23 +0100"  >&lt;p&gt;The -m command line option was added in JUnit 3.8.2, so it won&apos;t work with 3.8.1. (3.8.2 is the version we tell people to download in BUILDING.html, by the way.) There used to be problems with running the Java ME tests on 3.8.2 (according to &lt;a href=&quot;http://wiki.apache.org/db-derby/JunitVmIssues&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JunitVmIssues&lt;/a&gt;) but they seem to affect Foundation 1.0 only, which we don&apos;t support anymore. So hopefully a dependency on 3.8.2 would be fine these days.&lt;/p&gt;</comment>
                            <comment id="13066507" author="siddharthsrivastava" created="Sat, 16 Jul 2011 20:16:45 +0100"  >&lt;p&gt;I trying to fork the JVM and insert rows into the database. But the test fails:&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
------------------------------------------------------------------------------------&lt;br/&gt;
1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryT&lt;br/&gt;
est)junit.framework.AssertionFailedError: Unexpected row count: expected:&amp;lt;1&amp;gt; but&lt;br/&gt;
 was:&amp;lt;0&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.jav&lt;br/&gt;
a:1020)&lt;br/&gt;
        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.assert&lt;br/&gt;
Database(RecoveryTest.java:78)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBa&lt;br/&gt;
sicRecovery(RecoveryTest.java:58)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
113)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;br/&gt;
-------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;It seems that launchRecoveryInsert() isn&apos;t executed at all.&lt;br/&gt;
Also if I check exitValue(), the assertLaunchedJUnitFixture generates a IllegalThreadStateException.&lt;/p&gt;

&lt;p&gt;What am I doing wrong ?&lt;/p&gt;

&lt;p&gt;Note: Please ignore some commented out and ugly looking code(and functions) in the diff&lt;/p&gt;</comment>
                            <comment id="13067001" author="kmarsden" created="Mon, 18 Jul 2011 13:54:57 +0100"  >&lt;p&gt;Hi Siddharth,&lt;/p&gt;

&lt;p&gt;I did not apply but looked briefly at why the process might not execute.&lt;br/&gt;
           String[] cmd= new String[]&lt;/p&gt;
{&quot;java junit.textui.TestRunner -m org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.launchRecoveryInsert&quot;}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;The individual arguments should be broken out into separate String array elements and also java should not be included in what is passed to execJavaCmd as the java executable is determined by execJavaCmd.  I&apos;d suggest you make that change and then run the test with -Dderby.tests.debug=true and then execJavaCmd will show exactly what it is trying to execute. You can then cut and paste that into a shell to see what might be going wrong.  You can also use BaseTestCase.readProcessOutput to read the output and see what error is being encountered.  This method will probably be useful as well to get the output if the  process fails.&lt;/p&gt;


&lt;p&gt;As an aside, ultimately you will want to pass the class and fixture into  assertLaunchedJUnitFixture() so it can be used generically.&lt;/p&gt;
</comment>
                            <comment id="13069707" author="siddharthsrivastava" created="Fri, 22 Jul 2011 21:19:10 +0100"  >&lt;p&gt;Attached is the patch for this issue.Any suggestions/improvements would be nice.&lt;/p&gt;</comment>
                            <comment id="13069730" author="siddharthsrivastava" created="Fri, 22 Jul 2011 21:42:48 +0100"  >&lt;p&gt;Sorry, mistakenly uploaded wrong patch earlier. This is the latest one.&lt;/p&gt;</comment>
                            <comment id="13070495" author="dagw" created="Mon, 25 Jul 2011 14:39:40 +0100"  >&lt;p&gt;I tried to let the nested VM exit with a System.exit(1) but the top level test still passed. I guess the top level test should discover if its child exited with anything but clean status?&lt;/p&gt;

&lt;p&gt;Should the nested system out from running the JUnit be visible on the top level System.out by default? It could get confusing as we add more fixtures what belongs to what level...&lt;/p&gt;

&lt;p&gt;Another question, the way the nested VM&apos;s database is stopped now, we do get a checkpoint performed, although the transaction is not rolled back (I checked the log file with Rick&apos;s LogFileReader and saw a checkpoint operation, but no logical undo). Is this the way it happens in the old recovery tests or do they not lead to checkpoints?&lt;/p&gt;</comment>
                            <comment id="13070975" author="knutanders" created="Tue, 26 Jul 2011 07:48:14 +0100"  >&lt;p&gt;Some comments in addition to what Dag said:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;On the terminology: My understanding is that &quot;fixture&quot; refers to the fixed state created by the setUp() method, so it&apos;s not something one can launch. It would probably be clearer to call the method something like &quot;assertLaunchedJUnitTestMethod&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the assert method should throw any exceptions it encounters, not catch them and print them.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Perhaps we could take advantage of the existing assertExecJavaCmdAsExpected() method? That method checks both the exit status and the presence of expected strings in the output, and it only prints the output from the nested test if it&apos;s not what we expected, so it would probably address Dag&apos;s first two comments. Something like this might work:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    String[] cmd = new String[] &lt;/p&gt;
{ &quot;junit.textui.TestRunner&quot;, &quot;-m&quot;, testMethod }
&lt;p&gt;;&lt;br/&gt;
    assertExecJavaCmdAsExpected(new String[] &lt;/p&gt;
{ &quot;OK (1 test)&quot; }
&lt;p&gt;, cmd, 0);&lt;/p&gt;</comment>
                            <comment id="13071403" author="kmarsden" created="Tue, 26 Jul 2011 23:45:48 +0100"  >&lt;p&gt;I agree that the test should definitely fail if the launched test method fails. It sounds good to use assertExecJavaCmdAsExpected.  It would be good to enhace that method on failure to in the fail message to include full error output so we get the stack trace of the failed method.&lt;/p&gt;

&lt;p&gt;On the test itself I think it would actually be good to inline createBasicSetup() and assertDatabase() into testBasicRecovery() method and also add javadoc comments about the purpose of the test in order to provide some context of what we are testing here and also reduce clutter if more fixtures are added.&lt;/p&gt;

&lt;p&gt;I think the reason we are seeing the checkpoint is that launchRecoveryInsert is shutting down the database which it should not.  It should just insert /commit/insert /return. I would not even close the statement and connection here and as mentioned before just let the errors be thrown in all cases so the test will fail.  Typically the only time in a JUnit test that we need a try/catch is when it is a negative test and we are expecting an exception and then there would be a fail before the catch and then an assertSQLState() or some such to verify we got the right  exception.  Bottom line is for JUnit the pass or fail state of the test should be an assertion, not the printed output.&lt;/p&gt;

&lt;p&gt;Why does the test need to run without security manager?  Security Manager should be on unless there is a good reason for it to be off.&lt;/p&gt;

&lt;p&gt;One nit. The class name at the top of the license header should be the full class name.&lt;/p&gt;

&lt;p&gt;On  another note if you want to print output for debug purposes and think it might be useful to others in the future debugging failures you can just use println instead of System.out.println and then run with -Dderby.tests.debug=true&lt;/p&gt;

&lt;p&gt;Thank you Siddharth for your work on this important test and framework for the recovery tests. I&apos;ll be out for a few weeks starting Thursday.  I appreciate the community continuing to look at the patch revisions while I am out.&lt;/p&gt;



</comment>
                            <comment id="13073183" author="siddharthsrivastava" created="Sat, 30 Jul 2011 15:35:26 +0100"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;Thanks for your suggestions Dag, Knut, Kathey.&lt;br/&gt;
I have incorporated all the suggestions &lt;/p&gt;

&lt;p&gt;As far as Security Manager is concerned, I expected a FilePermissions issue. Without disabling the security issue, following error is thrown:&lt;/p&gt;

&lt;p&gt;.java.security.AccessControlException: access denied (java.io.FilePermission C:\&lt;br/&gt;
Program Files\Java\jre6\bin\java execute)&lt;br/&gt;
        at java.security.AccessControlContext.checkPermission(Unknown Source)&lt;br/&gt;
        at java.security.AccessController.checkPermission(Unknown Source)&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(Unknown Source)&lt;br/&gt;
        at java.lang.SecurityManager.checkExec(Unknown Source)&lt;br/&gt;
        at java.lang.ProcessBuilder.start(Unknown Source)&lt;br/&gt;
        at java.lang.Runtime.exec(Unknown Source)&lt;br/&gt;
        at java.lang.Runtime.exec(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase$8.run(BaseTestCase.java:56&lt;br/&gt;
6)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.execJavaCmd(BaseTestCase.j&lt;br/&gt;
ava:562)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitFixture&lt;br/&gt;
(BaseTestCase.java:832)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBa&lt;br/&gt;
sicRecovery(RecoveryTest.java:67)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
        at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
        at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
106)&lt;br/&gt;
        at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
        at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
        at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
        at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
F&lt;br/&gt;
Time: 13.915&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryT&lt;br/&gt;
est)junit.framework.AssertionFailedError: Unexpected row count: expected:&amp;lt;1&amp;gt; but&lt;br/&gt;
 was:&amp;lt;0&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.jav&lt;br/&gt;
a:1020)&lt;br/&gt;
        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850)&lt;/p&gt;

&lt;p&gt;        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.assert&lt;br/&gt;
Database(RecoveryTest.java:111)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBa&lt;br/&gt;
sicRecovery(RecoveryTest.java:68)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
106)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;/p&gt;


&lt;p&gt;I am executing it with Administrative privileges and have revoked read only permissions from the concerned java directory. &lt;br/&gt;
So Is this issue faced only by me (hoping that my platform specific issues are not back again)&lt;/p&gt;</comment>
                            <comment id="13073206" author="siddharthsrivastava" created="Sat, 30 Jul 2011 16:35:03 +0100"  >&lt;p&gt;Updated patch&lt;/p&gt;</comment>
                            <comment id="13083422" author="espinha" created="Thu, 11 Aug 2011 20:33:03 +0100"  >&lt;p&gt;Siddharth, is this patch ready for commit? Have you run regressions on it?&lt;/p&gt;

&lt;p&gt;It looks good to me. I see the patch has again white space changes in the first chunk. We&apos;ll let it go this time but let&apos;s try to get rid of those in the future.&lt;/p&gt;</comment>
                            <comment id="13084260" author="siddharthsrivastava" created="Fri, 12 Aug 2011 18:17:05 +0100"  >&lt;p&gt;Hi Tiago&lt;/p&gt;

&lt;p&gt;It has passed the regressions tests.&lt;/p&gt;</comment>
                            <comment id="13085739" author="kmarsden" created="Tue, 16 Aug 2011 15:32:51 +0100"  >&lt;p&gt;On the permissions issues it might help to add to derby_tests.policy for derbyTesting.jar and derbyTesting.codeclasses, something like&lt;br/&gt;
  permission java.io.FilePermission &quot;$&lt;/p&gt;
{java.home}
&lt;p&gt;$&lt;/p&gt;
{/}
&lt;p&gt;-&quot;,  &quot;execute&quot; &lt;/p&gt;

&lt;p&gt;but I am not sure why other tests that use this method don&apos;t have the same problem.&lt;/p&gt;</comment>
                            <comment id="13086509" author="kmarsden" created="Wed, 17 Aug 2011 19:40:37 +0100"  >&lt;p&gt;Thank you Siddharth for the patch.  I think it is looking very good as a model for the recovery tests.&lt;/p&gt;

&lt;p&gt;I updated the patch with a few changes which I am attaching as derby4249. I enabled security manager by adding the needed lines to the policy file and fixed a preexisting problem with the output when the launched method fails so that it prints the expected output strings and not just the array reference.&lt;br/&gt;
I also added a CleanDatabaseTestSetup decorator so that the schema objects get cleaned up. If nobody objects I will commit after I run some tests.&lt;/p&gt;
</comment>
                            <comment id="13086649" author="kmarsden" created="Wed, 17 Aug 2011 23:29:47 +0100"  >&lt;p&gt;This test can&apos;t run on weme until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4647&quot; title=&quot;BaseTestCase.execJavaCmd() does not work with weme 6.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4647&quot;&gt;&lt;del&gt;DERBY-4647&lt;/del&gt;&lt;/a&gt; is fixed.&lt;/p&gt;</comment>
                            <comment id="13087114" author="kmarsden" created="Thu, 18 Aug 2011 17:59:32 +0100"  >&lt;p&gt;The IBM runs failed for the new test last night, I believe because they are still using Junit  3.8.1.&lt;br/&gt;
The test requires JUnit 3.8.2 to allow the -m option to be used. Right now the failure looks like:&lt;br/&gt;
1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)junit.framework.AssertionFailedError: expectedExitValue:0 does not match exitValue:1&lt;br/&gt;
expected output strings:&lt;br/&gt;
	&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;OK (1 test)&lt;br/&gt;
 actual output: expected:&amp;lt;0&amp;gt; but was:&amp;lt;1&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(BaseTestCase.java:512)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(BaseTestCase.java:821)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBasicRecovery(RecoveryTest.java:92)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:51)&lt;/p&gt;


&lt;p&gt;I am going to post a new patch to improve the error output, but thought I should mention this in case anyone else is still at 3.8.1 and seeing this problem.&lt;/p&gt;

</comment>
                            <comment id="13087127" author="kmarsden" created="Thu, 18 Aug 2011 18:22:35 +0100"  >&lt;p&gt;Here is a patch to include the error output in the error if a launched process fails.  With the patch the output when using junit 3.8.1 is:&lt;/p&gt;

&lt;p&gt;1) testBasicRecovery(org.apache.derbyTesting.functionTests.tests.store.RecoveryTest)junit.framework.AssertionFailedError: expectedExi&lt;br/&gt;
 match exitValue:1&lt;br/&gt;
expected output strings:&lt;br/&gt;
        &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;OK (1 test)&lt;br/&gt;
 actual output:&amp;lt;STDOUT&amp;gt; &amp;lt;END STDOUT&amp;gt;&lt;br/&gt;
&amp;lt;STDERR&amp;gt;Class not found &quot;org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.launchRecoveryInsert&quot;&lt;br/&gt;
&amp;lt;END STDERR&amp;gt;&lt;br/&gt;
 expected:&amp;lt;0&amp;gt; but was:&amp;lt;1&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(BaseTestCase.java:512)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.assertLaunchedJUnitTestMethod(BaseTestCase.java:836)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.RecoveryTest.testBasicRecovery(RecoveryTest.java:92)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;/p&gt;

</comment>
                            <comment id="13090359" author="kmarsden" created="Wed, 24 Aug 2011 18:38:31 +0100"  >&lt;p&gt;This test now runs on weme 6.2 with the resolution &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4647&quot; title=&quot;BaseTestCase.execJavaCmd() does not work with weme 6.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4647&quot;&gt;&lt;del&gt;DERBY-4647&lt;/del&gt;&lt;/a&gt;.  Resolving the issue. Thank you Siddharth for the new test.  It is great to have a framework for converting the recovery tests.&lt;/p&gt;

</comment>
                            <comment id="13685192" author="knutanders" created="Mon, 17 Jun 2013 10:19:18 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12464015">DERBY-4647</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12486004" name="d4249.diff" size="2907" author="siddharthsrivastava" created="Sun, 10 Jul 2011 19:34:37 +0100"/>
                            <attachment id="12486736" name="d4249_1.diff" size="9688" author="siddharthsrivastava" created="Sat, 16 Jul 2011 20:16:45 +0100"/>
                            <attachment id="12487472" name="d4249_2.diff" size="7794" author="siddharthsrivastava" created="Fri, 22 Jul 2011 21:19:10 +0100"/>
                            <attachment id="12487476" name="d4249_3.diff" size="8041" author="siddharthsrivastava" created="Fri, 22 Jul 2011 21:42:48 +0100"/>
                            <attachment id="12488312" name="derby4249.diff" size="6948" author="siddharthsrivastava" created="Sat, 30 Jul 2011 16:35:03 +0100"/>
                            <attachment id="12488307" name="derby4249.diff" size="6994" author="siddharthsrivastava" created="Sat, 30 Jul 2011 15:35:26 +0100"/>
                            <attachment id="12490683" name="derby4249_secmgr_diff.txt" size="9190" author="kmarsden" created="Wed, 17 Aug 2011 19:40:37 +0100"/>
                            <attachment id="12490820" name="derby4249_showlaunchederr_diff.txt" size="2556" author="kmarsden" created="Thu, 18 Aug 2011 18:22:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 8 Jun 2011 21:32:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31173</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ffj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36318</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>