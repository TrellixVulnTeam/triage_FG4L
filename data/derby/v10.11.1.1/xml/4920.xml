<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:18:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4920/DERBY-4920.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4920] suites.All stuck in RAFContainer4.awaitRestoreChannel()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4920</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have suites.All running on trunk, and it seems to be stuck in a call to RAFContainer4.awaitRestoreChannel(). Here&apos;s the stack for the waiting thread:&lt;/p&gt;

&lt;p&gt;&quot;main&quot; prio=3 tid=0x08070800 nid=0x2 waiting on condition &lt;span class=&quot;error&quot;&gt;&amp;#91;0xfe61e000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: TIMED_WAITING (sleeping)&lt;br/&gt;
        at java.lang.Thread.sleep(Native Method)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.awaitRestoreChannel(RAFContainer4.java:698)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(RAFContainer4.java:593)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.writePage(CachedPage.java:787)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:610)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(ConcurrentCache.java:551)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(ConcurrentCache.java:509)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(ConcurrentCache.java:460)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint(BaseDataFileFactory.java:1211)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(LogToFile.java:1710)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(LogToFile.java:1507)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.RawStore.stop(RawStore.java:368)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.stop(TopService.java:442)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.shutdown(TopService.java:393)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:229)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(BaseMonitor.java:199)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:231)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:119)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:582)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:154)&lt;br/&gt;
        at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:137)&lt;br/&gt;
        at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:120)&lt;br/&gt;
        at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1599)&lt;br/&gt;
        at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:83)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
        at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
        at junit.textui.TestRunner.main(TestRunner.java:143)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12480946">DERBY-4920</key>
            <summary>suites.All stuck in RAFContainer4.awaitRestoreChannel()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 25 Nov 2010 20:04:06 +0000</created>
                <updated>Tue, 19 Apr 2011 13:39:08 +0100</updated>
                            <resolved>Tue, 14 Dec 2010 16:40:33 +0000</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.1.2</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12935861" author="dagw" created="Thu, 25 Nov 2010 20:06:25 +0000"  >&lt;p&gt;Thanks, Knut. Good to get these issues flushed out. It appears to be an issue during shutdown, Ill look at it asap.&lt;/p&gt;</comment>
                            <comment id="12935873" author="lilywei" created="Thu, 25 Nov 2010 21:10:02 +0000"  >&lt;p&gt;Hi Knut:&lt;br/&gt;
     If the test is stuck, how do you print out the stack trace for the waiting thread? I think we can use the same tactic to be the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4856&quot; title=&quot;Add thread dump information when derby crash&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4856&quot;&gt;&lt;del&gt;DERBY-4856&lt;/del&gt;&lt;/a&gt;. Thanks.&lt;/p&gt;</comment>
                            <comment id="12935901" author="kristwaa" created="Thu, 25 Nov 2010 22:49:02 +0000"  >&lt;p&gt;Lily, one way to do it is to use the command &apos;jstack&apos;, which comes with the JDK. I believe you can also press CTRL-BREAK (in the window running the Java process).&lt;br/&gt;
You can also use other tools, like VisualVM, or send the signal QUIT to the process.&lt;/p&gt;

&lt;p&gt;I usually use jstack. To find the pid of the Java process, use &apos;jps&apos; (also comes with the JDK).&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;/p&gt;</comment>
                            <comment id="12935950" author="knutanders" created="Fri, 26 Nov 2010 08:26:46 +0000"  >&lt;p&gt;Yes, that&apos;s exactly how I obtained the stack trace above. I used jps to get the pid, and jstack to dump the stack for all threads.&lt;/p&gt;</comment>
                            <comment id="12936016" author="dagw" created="Fri, 26 Nov 2010 14:47:07 +0000"  >&lt;p&gt;Interestingly, this happens after an interrupt sent by Derby to itself during shutdown, cf. BaseMonitor#shutdown ca line 176, where we see:&lt;/p&gt;

&lt;p&gt;// Shutdown all threads by iterrupting them&lt;br/&gt;
contextService.notifyAllActiveThreads((Context) null);&lt;/p&gt;

&lt;p&gt;Further down, we stop TopServices.shutdown, which is included in the error trace stack.&lt;/p&gt;

&lt;p&gt;So, this hang occurs during check-pointing when we are trying to recover an interrupted IO. Obviously, there is a bug in the new recovery code (also).&lt;/p&gt;

&lt;p&gt;But furthermore, I think this means that in the existing implementation, we would sometimes get check-pointing during shutdown erroneously interrupted (since we introduced NIO in RAFContainer4). I am not aware that we have had reports on this, presumably because Derby will recover from the logs anyway at the next reboot..&lt;/p&gt;</comment>
                            <comment id="12966509" author="knutanders" created="Fri, 3 Dec 2010 12:28:43 +0000"  >&lt;p&gt;The Tinderbox got stuck again when testing revision 1041375. It looks like it happens in the setup for jdbc4/LobSortTest.&lt;/p&gt;

&lt;p&gt;Attaching thread dump (jstack.19071.txt). It happened on a Solaris 10 machine with Java version 1.6.0_18 (32-bit). suites.All ran with these flags: -Xmx512M -XX:MaxPermSize=256M -DderbyTesting.oldReleasePath=/usr/local/share/java/derby/lib -Dderby.tests.trace=true -Dderby.tests.ThreadsMinutes=33x3&lt;/p&gt;</comment>
                            <comment id="12966530" author="dagw" created="Fri, 3 Dec 2010 13:51:50 +0000"  >&lt;p&gt;Thanks, Knut! I&apos;ll start working on a diagnostic patch to collect some info so we can know more when it happens.&lt;/p&gt;</comment>
                            <comment id="12966655" author="lilywei" created="Fri, 3 Dec 2010 20:24:17 +0000"  >&lt;p&gt;Why will RAFContainer4.awaitRestoreChannel waiting when jdbc4/LobSortTest is just setting up? Was there some transaction not being finish somewhere? Hmm... It is really odd. I tried to reproduce it by having another connection open while running jdbc4/LobSortTest. No luck though. ...&lt;/p&gt;</comment>
                            <comment id="12966687" author="myrna" created="Fri, 3 Dec 2010 21:49:38 +0000"  >&lt;p&gt;I saw this yesterday in our nightly test of trunk on linux; in derbyall test lang/db2Compatibility.sql.&lt;br/&gt;
This was with ibm 1.5 (SR11 FP1).&lt;/p&gt;

&lt;p&gt;I&apos;m attaching the stack of the hanging process main thread...&lt;/p&gt;</comment>
                            <comment id="12967040" author="dagw" created="Sun, 5 Dec 2010 22:50:14 +0000"  >&lt;p&gt;Over the week-end I have been able to reproduce this on two different machines, thanks for your help so far. As in Knut&apos;s observation it happens in the setup for jdbc4/LobSortTest. On one of the machines there was a lingering NetworkServerControl still running.&lt;/p&gt;</comment>
                            <comment id="12968517" author="dagw" created="Tue, 7 Dec 2010 00:45:50 +0000"  >&lt;p&gt;Preliminary result of a history collection patch seems to indicate that the container was closed due to an in-line compress prior to the shutdown&apos;s checkpointing. Weird. Digging further..&lt;/p&gt;</comment>
                            <comment id="12968716" author="knutanders" created="Tue, 7 Dec 2010 13:06:54 +0000"  >&lt;p&gt;I just got the hang again when running the jdbc4 suite separately, so it seems we don&apos;t need to run the full suites.All to reproduce it, at least.&lt;/p&gt;</comment>
                            <comment id="12968726" author="kristwaa" created="Tue, 7 Dec 2010 13:33:05 +0000"  >&lt;p&gt;Same with me. I ran with the parallel runner (slightly modified) that Knut posted a while back. The stack trace was the same as the one posted above.&lt;/p&gt;</comment>
                            <comment id="12968787" author="dagw" created="Tue, 7 Dec 2010 15:26:50 +0000"  >&lt;p&gt;Thanks for that observation, I&apos;ll try that to increase turn-around while tracking this down.&lt;/p&gt;</comment>
                            <comment id="12968950" author="dagw" created="Tue, 7 Dec 2010 20:31:46 +0000"  >&lt;p&gt;The test which I see hanging is LobSortTest. The test uses a pseudo-random seed and it also claims to be sensitive to heap size, which could explain why we see the hang only now and then. Possible I can make it reproducible by reusing the seed seen when it hangs, we shall see. &lt;/p&gt;</comment>
                            <comment id="12970942" author="dagw" created="Mon, 13 Dec 2010 18:31:34 +0000"  >&lt;p&gt;I was finally able to track this one down by instrumenting RAFContainer4 to collect a bit of history, cf. uploaded patch &quot;RAFContainer4-instrumentation&quot;. (Thanks to Knut for noticing it happens more often when running on an in-memory file system e.g. /tmp on Solaris). Turned out the timing was slightly different there: instead of happening very infrequently, it happened more often than not when running the test that we saw hang: LobSortTest.&lt;/p&gt;

&lt;p&gt;(Aside: trying to reproduce on Solaris made it even harder since the interrupt would sometimes get swallowed by non-NIO IO calls: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6871306&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6871306&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In any case, this is what happens: The test shuts down the database to modify static properties (&quot;SystemPropertyTestSetup&quot;) after having created the table MIXED_LOBS in CleanDatabaseTestSetup#decorateSQL. The raw store demon thread is performing a check-point at the time the user thread shuts down Derby.  The shutdown interrupts the demon while it is doing NIO. The demon tries to recover the channel. This fails due a ShutdownException thrown when InterruptStatus.setInterrupted tries to find the lcc by calling ContextService#getContextOrNull. (RAFContainer4#recoverContainerAfterInterrupt calls noteAndClearInterrupt. The latter in turn calls setInterrupted.)&lt;/p&gt;

&lt;p&gt;Later during shutdown, the user thread detects that there are still dirty pages and tries (again) to perform the check-point, but now the channel is closed, since the demon&apos;s recovery failed. This leads to the hang because the user thread keeps waiting for recovery to happen.&lt;/p&gt;

&lt;p&gt;The fix is simple, just make ContextService#getContextOrNull ignore ShutdownException (as we did for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4911&quot; title=&quot;restoreIntrFlagIfSeen may throw ShutdownException causing confusing console stack trace at server shutdown&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4911&quot;&gt;&lt;del&gt;DERBY-4911&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Note that this conforms my hypothesis that the check-pointing at shutdown has been faulty since we introduced NIO containers in 10.2: The interrupted state of the channel was masked by the shutdown.  It would only ever be an issue if there was a background thread doing check-pointing at shutdown time, however. The next reboot would read the logs and recover, of course, so that&apos;s probably why we never have had a report on this.&lt;/p&gt;


&lt;p&gt;Patch details:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;InterruptStatus.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Make sure we always catch ShutdownException when we access the context looking for lcc.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;RAFContainer4.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Improved some comments, added a final, added a max count for a retry loop that missed it: will throw FILE_IO_INTERRUPTED if it exceeds MAX_INTERRUPT_RETRIES (as elsewhere when we give up).&lt;/p&gt;

&lt;p&gt;Running regressions again.&lt;/p&gt;</comment>
                            <comment id="12971076" author="dagw" created="Mon, 13 Dec 2010 23:21:33 +0000"  >&lt;p&gt;Regressions passed.nI also ran LobSortTest with the config that hang (Solaris, on /tmp) in a loop for a while without seeing the hang after I applied the patch.&lt;/p&gt;

&lt;p&gt; I will commit this tomorrow.&lt;/p&gt;</comment>
                            <comment id="12971301" author="dagw" created="Tue, 14 Dec 2010 16:39:57 +0000"  >&lt;p&gt;Committed as svn 1049150, resolving&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12465279" name="DERBY-4920_db2compatibility.txt" size="3044" author="myrna" created="Fri, 3 Dec 2010 21:49:38 +0000"/>
                            <attachment id="12466158" name="RAFContainer4-instrumentation.diff" size="11764" author="dagw" created="Mon, 13 Dec 2010 18:32:02 +0000"/>
                            <attachment id="12466156" name="derby-4920-a.diff" size="4219" author="dagw" created="Mon, 13 Dec 2010 18:31:34 +0000"/>
                            <attachment id="12466168" name="derby-4920-a.stat" size="144" author="dagw" created="Mon, 13 Dec 2010 20:40:24 +0000"/>
                            <attachment id="12465229" name="jstack.19071.txt" size="11209" author="knutanders" created="Fri, 3 Dec 2010 12:28:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Nov 2010 20:06:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24533</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0go7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36519</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>