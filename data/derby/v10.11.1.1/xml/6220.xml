<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:26 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6220/DERBY-6220.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6220] Provide a way for users to determine the value of a Derby property</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6220</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby properties can be specified as system properties, values stored in derby.properties, and values stored in the database via the syscs_set_database_property procedure. The rules for how these property sets interact are confusing. It would be good to provide users a way to figure out what Derby thinks a property is set to. Maybe we could provide a builtin or system function for this purpose.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12646802">DERBY-6220</key>
            <summary>Provide a way for users to determine the value of a Derby property</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Thu, 9 May 2013 14:59:54 +0100</created>
                <updated>Tue, 25 Jun 2013 05:00:48 +0100</updated>
                                            <version>10.11.1.1</version>
                                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13652967" author="rhillegas" created="Thu, 9 May 2013 15:05:26 +0100"  >&lt;p&gt;A need for this function is discussed on this user email thread: &lt;a href=&quot;http://apache-database.10148.n7.nabble.com/Native-authentication-and-password-expiry-date-td130046.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://apache-database.10148.n7.nabble.com/Native-authentication-and-password-expiry-date-td130046.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13671700" author="rhillegas" created="Fri, 31 May 2013 19:10:37 +0100"  >&lt;p&gt;As a first step toward analyzing this issue, I have searched the codeline for how the properties in Property.java are used. Here is my summary:&lt;/p&gt;

&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;Internal only:&lt;/p&gt;

&lt;p&gt;DELETE_ON_CREATE&lt;br/&gt;
BOOT_DB_CLASSPATH&lt;br/&gt;
DERBY_INSTALL_URL&lt;br/&gt;
DERBY_SECURITY_HOST&lt;br/&gt;
PROPERTIES_CONGLOM_ID&lt;br/&gt;
LOG_ARCHIVE_MODE&lt;br/&gt;
LOG_DEVICE_AT_BACKUP&lt;br/&gt;
LOG_ARCHIVE_MODE&lt;br/&gt;
IN_RESTORE_FROM_BACKUP&lt;br/&gt;
DELETE_ROOT_ON_ERROR&lt;br/&gt;
SERVICE_PROTOCOL&lt;br/&gt;
SERVICE_LOCALE&lt;br/&gt;
STORAGE_DATA_NOT_SYNCED_AT_CHECKPOINT&lt;br/&gt;
STORAGE_DATA_NOT_SYNCED_AT_ALLOCATION&lt;br/&gt;
STORAGE_LOG_NOT_SYNCE&lt;br/&gt;
SERVER_STARTED_FROM_CMD_LINE&lt;/p&gt;


&lt;p&gt;Undocumented:&lt;/p&gt;

&lt;p&gt;FILESYNC_TRANSACTION_LOG&lt;br/&gt;
LANG_PERMISSIONS_CACHE_SIZE&lt;br/&gt;
LANG_TD_CACHE_SIZE&lt;br/&gt;
STORAGE_AUTO_INDEX_STATS_DEBUG_CREATE_THRESHOLD&lt;br/&gt;
STORAGE_AUTO_INDEX_STATS_DEBUG_ABSDIFF_THRESHOLD&lt;br/&gt;
STORAGE_AUTO_INDEX_STATS_DEBUG_LNDIFF_THRESHOLD&lt;br/&gt;
STORAGE_AUTO_INDEX_STATS_DEBUG_QUEUE_SIZE&lt;br/&gt;
STORAGE_AUTO_INDEX_STATS_DEBUG_KEEP_DISPOSABLE_STATS&lt;br/&gt;
LOG_SWITCH_INTERVAL&lt;br/&gt;
CHECKPOINT_INTERVAL&lt;br/&gt;
LOG_BUFFER_SIZE&lt;br/&gt;
ALPHA_BETA_ALLOW_UPGRADE&lt;br/&gt;
COLLATION&lt;/p&gt;

&lt;p&gt;Externally visible but undocumented:&lt;/p&gt;

&lt;p&gt;LANG_SPS_CACHE_SIZE&lt;br/&gt;
LANG_SEQGEN_CACHE_SIZE&lt;br/&gt;
LANGUAGE_STALE_PLAN_CHECK_INTERVAL&lt;/p&gt;

&lt;p&gt;Undocumented and unused:&lt;/p&gt;

&lt;p&gt;LOG_ARCHIVAL_DIRECTORY&lt;/p&gt;



&lt;p&gt;Currently documented but should not be:&lt;/p&gt;

&lt;p&gt;USER_PROPERTY_PREFIX&lt;/p&gt;


&lt;p&gt;----------------------------&lt;/p&gt;

&lt;p&gt;LOG_SEVERITY_LEVEL&lt;br/&gt;
  PropertyUtil.getSystemInt(Property.LOG_SEVERITY_LEVEL, SanityManager.DEBUG ? 0 : ExceptionSeverity.SESSION_SEVERITY);&lt;/p&gt;

&lt;p&gt;EXT_DIAG_SEVERITY_LEVEL&lt;br/&gt;
  PropertyUtil.getSystemInt(Property.EXT_DIAG_SEVERITY_LEVEL,ExceptionSeverity.SESSION_SEVERITY);&lt;/p&gt;

&lt;p&gt;LOG_BOOT_TRACE&lt;br/&gt;
  Boolean.valueOf(startParams.getProperty(Property.LOG_BOOT_TRACE, PropertyUtil.getSystemProperty(Property.LOG_BOOT_TRACE))).booleanValue();&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.LOG_BOOT_TRACE);&lt;/p&gt;

&lt;p&gt;ERRORLOG_FILE_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.ERRORLOG_FILE_PROPERTY);&lt;/p&gt;

&lt;p&gt;ERRORLOG_METHOD_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.ERRORLOG_METHOD_PROPERTY);&lt;/p&gt;

&lt;p&gt;ERRORLOG_FIELD_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.ERRORLOG_FIELD_PROPERTY);&lt;/p&gt;

&lt;p&gt;LOG_FILE_APPEND&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.LOG_FILE_APPEND);&lt;/p&gt;

&lt;p&gt;SYSTEM_HOME_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY );&lt;br/&gt;
  System.getProperty( Property.SYSTEM_HOME_PROPERTY );&lt;br/&gt;
  System.getProperty(Property.SYSTEM_HOME_PROPERTY,&quot;.&quot;);&lt;br/&gt;
  also read by NetworkServerMBeanImpl but the code looks buggy&lt;/p&gt;

&lt;p&gt;BOOT_ALL&lt;br/&gt;
  Boolean.valueOf(PropertyUtil.getSystemProperty(Property.BOOT_ALL)).booleanValue();&lt;/p&gt;

&lt;p&gt;NO_AUTO_BOOT&lt;br/&gt;
  Boolean.valueOf(serviceProperties.getProperty(Property.NO_AUTO_BOOT)).booleanValue();&lt;/p&gt;

&lt;p&gt;FORCE_DATABASE_LOCK&lt;br/&gt;
  startParams.getProperty(Property.FORCE_DATABASE_LOCK,PropertyUtil.getSystemProperty(Property.FORCE_DATABASE_LOCK));&lt;/p&gt;

&lt;p&gt;LOCKS_ESCALATION_THRESHOLD&lt;br/&gt;
  PropertyUtil.getServiceInt&lt;br/&gt;
    (tranCtrl,Property.LOCKS_ESCALATION_THRESHOLD,&lt;br/&gt;
     Property.MIN_LOCKS_ESCALATION_THRESHOLD,Integer.MAX_VALUE,Property.DEFAULT_LOCKS_ESCALATION_THRESHOLD);&lt;/p&gt;

&lt;p&gt;DEADLOCK_TIMEOUT&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(dbOnly, p, key);&lt;/p&gt;

&lt;p&gt;DEADLOCK_MONITOR&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(dbOnly, p, key);&lt;br/&gt;
  PropertyUtil.booleanProperty(Property.DEADLOCK_MONITOR, svalue, false) ? StandardException.REPORT_ALWAYS : StandardException.REPORT_DEFAULT;&lt;/p&gt;

&lt;p&gt;DEADLOCK_TRACE&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(dbOnly, p, key);&lt;br/&gt;
  PropertyUtil.booleanProperty(Property.DEADLOCK_TRACE, svalue, false)&lt;/p&gt;

&lt;p&gt;LOCKWAIT_TIMEOUT&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(dbOnly, p, key);&lt;br/&gt;
  PropertyUtil.handleInt(value, Integer.MIN_VALUE, Integer.MAX_VALUE / 1000, defaultValue);&lt;/p&gt;

&lt;p&gt;DATABASE_CLASSPATH&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(startParams,Property.DATABASE_CLASSPATH);&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DATABASE_CLASSPATH, &quot;&quot;);&lt;br/&gt;
  PropertyUtil.getServiceProperty(ps, Property.DATABASE_CLASSPATH);&lt;/p&gt;

&lt;p&gt;DATABASE_PROPERTIES_ONLY&lt;br/&gt;
  PropertyUtil.getDatabaseProperty(tc, key);&lt;/p&gt;

&lt;p&gt;PAGE_SIZE_PARAMETER&lt;br/&gt;
  PropertyUtil.getServiceProperty(lcc.getTransactionCompile(), Property.PAGE_SIZE_PARAMETER)&lt;/p&gt;

&lt;p&gt;ROW_LOCKING&lt;br/&gt;
  PropertyUtil.getServiceBoolean(tc, Property.ROW_LOCKING, true)&lt;/p&gt;

&lt;p&gt;STORAGE_TEMP_DIRECTORY&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.STORAGE_TEMP_DIRECTORY)&lt;/p&gt;

&lt;p&gt;DURABILITY_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DURABILITY_PROPERTY)&lt;/p&gt;

&lt;p&gt;LANG_SEQUENCE_PREALLOCATOR&lt;br/&gt;
  PropertyUtil.getServiceProperty( tc, Property.LANG_SEQUENCE_PREALLOCATOR );&lt;/p&gt;

&lt;p&gt;STATEMENT_CACHE_SIZE&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(startParams, org.apache.derby.iapi.reference.Property.STATEMENT_CACHE_SIZE)&lt;/p&gt;

&lt;p&gt;STORAGE_AUTO_INDEX_STATS&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.STORAGE_AUTO_INDEX_STATS, true);&lt;br/&gt;
  PropertyUtil.getDatabaseProperty(bootingTC,Property.STORAGE_AUTO_INDEX_STATS);&lt;/p&gt;

&lt;p&gt;STORAGE_AUTO_INDEX_STATS_LOGGING&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.STORAGE_AUTO_INDEX_STATS_LOGGING);&lt;br/&gt;
  PropertyUtil.getDatabaseProperty(bootingTC, Property.STORAGE_AUTO_INDEX_STATS_LOGGING);&lt;/p&gt;

&lt;p&gt;STORAGE_AUTO_INDEX_STATS_TRACING&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.STORAGE_AUTO_INDEX_STATS_TRACING, &quot;off&quot;);&lt;br/&gt;
  PropertyUtil.getDatabaseProperty(bootingTC,Property.STORAGE_AUTO_INDEX_STATS_TRACING);&lt;/p&gt;

&lt;p&gt;PROP_XA_TRANSACTION_TIMEOUT&lt;br/&gt;
  PropertyUtil.getServiceInt&lt;br/&gt;
    (tc,Property.PROP_XA_TRANSACTION_TIMEOUT,0,Integer.MAX_VALUE,Property.DEFAULT_XA_TRANSACTION_TIMEOUT);&lt;/p&gt;

&lt;p&gt;SQL_AUTHORIZATION_PROPERTY&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.SQL_AUTHORIZATION_PROPERTY)&lt;br/&gt;
  PropertyUtil.getDatabaseProperty(bootingTC,Property.SQL_AUTHORIZATION_PROPERTY);&lt;/p&gt;

&lt;p&gt;DEFAULT_CONNECTION_MODE_PROPERTY&lt;br/&gt;
  SYSCS_GET_DATABASE_PROPERTY(Property.DEFAULT_CONNECTION_MODE_PROPERTY);&lt;br/&gt;
  PropertyUtil.getServiceProperty(tc,Property.DEFAULT_CONNECTION_MODE_PROPERTY);&lt;/p&gt;

&lt;p&gt;READ_ONLY_ACCESS_USERS_PROPERTY&lt;br/&gt;
  PropertyUtil.getServiceProperty(tc, PropertyUtil.READ_ONLY_ACCESS_USERS_PROPERTY);&lt;/p&gt;

&lt;p&gt;FULL_ACCESS_USERS_PROPERTY&lt;br/&gt;
  SYSCS_GET_DATABASE_PROPERTY(Property.FULL_ACCESS_USERS_PROPERTY);&lt;br/&gt;
  PropertyUtil.getServiceProperty(tc, PropertyUtil.FULL_ACCESS_USERS_PROPERTY);&lt;/p&gt;

&lt;p&gt;REQUIRE_AUTHENTICATION_PARAMETER&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(properties,org.apache.derby.iapi.reference.Property.REQUIRE_AUTHENTICATION_PARAMETER);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_PROVIDER_PARAMETER&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(properties,Property.AUTHENTICATION_PROVIDER_PARAMETER);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_SERVER_PARAMETER&lt;br/&gt;
  PropertyUtil.getServiceProperty(tc,AUTHENTICATION_SERVER_PARAMETER,(String) null);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_NATIVE_PASSWORD_LIFETIME&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(properties,Property.AUTHENTICATION_NATIVE_PASSWORD_LIFETIME);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_PASSWORD_EXPIRATION_THRESHOLD&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(properties,Property.AUTHENTICATION_PASSWORD_EXPIRATION_THRESHOLD);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_BUILTIN_SALT_LENGTH&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(props, key);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_BUILTIN_ITERATIONS&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(props, key);&lt;/p&gt;

&lt;p&gt;AUTHENTICATION_BUILTIN_ALGORITHM&lt;br/&gt;
  PropertyUtil.getPropertyFromSet(props, key);&lt;/p&gt;

&lt;p&gt;REPLICATION_LOG_BUFFER_SIZE&lt;br/&gt;
  PropertyUtil.getSystemInt(Property.REPLICATION_LOG_BUFFER_SIZE,DEFAULT_LOG_BUFFER_SIZE);&lt;/p&gt;

&lt;p&gt;REPLICATION_MIN_SHIPPING_INTERVAL&lt;br/&gt;
  getSystemInt(Property.REPLICATION_MIN_SHIPPING_INTERVAL, (int)MIN);&lt;/p&gt;

&lt;p&gt;REPLICATION_MAX_SHIPPING_INTERVAL&lt;br/&gt;
  getSystemInt(Property.REPLICATION_MAX_SHIPPING_INTERVAL, (int)MAX);&lt;/p&gt;

&lt;p&gt;REPLICATION_VERBOSE&lt;br/&gt;
  PropertyUtil.getSystemBoolean(Property.REPLICATION_VERBOSE,true);&lt;/p&gt;

&lt;p&gt;START_DRDA&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.START_DRDA);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_LOGCONNECTIONS&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_LOGCONNECTIONS);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_TRACEALL&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_TRACEALL);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_TRACE&lt;br/&gt;
  PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY )&lt;/p&gt;

&lt;p&gt;DRDA_PROP_TRACEDIRECTORY&lt;br/&gt;
  PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY )&lt;/p&gt;

&lt;p&gt;DRDA_PROP_MINTHREADS&lt;br/&gt;
  PropertyUtil.getSystemProperty( Property.DRDA_PROP_MINTHREADS);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_MAXTHREADS&lt;br/&gt;
  PropertyUtil.getSystemProperty( Property.DRDA_PROP_MAXTHREADS);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_TIMESLICE&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_TIMESLICE);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_SSL_MODE&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_SSL_MODE);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_SECURITYMECHANISM&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_SECURITYMECHANISM);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_PORTNUMBER&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_PORTNUMBER);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_HOSTNAME&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_HOSTNAME);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_KEEPALIVE&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.DRDA_PROP_KEEPALIVE);&lt;/p&gt;

&lt;p&gt;DRDA_PROP_STREAMOUTBUFFERSIZE&lt;br/&gt;
  PropertyUtil.getSystemInt( Property.DRDA_PROP_STREAMOUTBUFFERSIZE ,0 );&lt;/p&gt;

&lt;p&gt;STORAGE_USE_DEFAULT_FILE_PERMISSIONS&lt;br/&gt;
  PropertyUtil.getSystemProperty(Property.STORAGE_USE_DEFAULT_FILE_PERMISSIONS);&lt;/p&gt;</comment>
                            <comment id="13671718" author="rhillegas" created="Fri, 31 May 2013 19:25:50 +0100"  >&lt;p&gt;Attaching derby-6220-01-aa-cleanupProperty.diff. This patch adds comments to flag more properties which are undocumented. In addition, this patch removes the unused LOG_ARCHIVAL_DIRECTORY property. Committed at subversion revision 1488345.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Property.java&lt;/p&gt;</comment>
                            <comment id="13673223" author="rhillegas" created="Mon, 3 Jun 2013 16:45:55 +0100"  >&lt;p&gt;Here is an attempt to distill the information from the previous analysis.&lt;/p&gt;

&lt;p&gt;The derby.* properties live in several property sets:&lt;/p&gt;

&lt;p&gt;JVM - Properties set on the JVM boot command line (mentioned in the Developer&apos;s Guide).&lt;br/&gt;
DB - Properties set in the database (mentioned in the Developer&apos;s Guide).&lt;br/&gt;
DERBY - Properties set in derby.properties (mentioned in the Developer&apos;s Guide).&lt;br/&gt;
SERVICE - The service.properties file of the database (not documented).&lt;/p&gt;

&lt;p&gt;These sets are searched in several orders, depending on which property is needed. Details of these search orders follow later in this comment:&lt;/p&gt;

&lt;p&gt;SYSTEM_ORDER (via the PropertyUtil.getSystem*() methods)&lt;br/&gt;
SERVICE_ORDER (via the PropertyUtil.getService*() methods)&lt;br/&gt;
BOOT_ORDER (via PropertyUtil.getPropertyFromSet())&lt;br/&gt;
DB_ONLY_ORDER (via PropertyUtil.getDatabaseProperty())&lt;br/&gt;
PRIVATE_ORDER (what&apos;s in service.properties)&lt;br/&gt;
INDEX_STATS_ORDER (a special set of rules)&lt;br/&gt;
SQL_AUTH_ORDER (a special set of rules)&lt;/p&gt;

&lt;p&gt;-------------- SYSTEM_ORDER (via the PropertyUtil.getSystem*() methods) ------------------&lt;/p&gt;

&lt;p&gt;   look in JVM;&lt;br/&gt;
   otherwise look in DERBY;&lt;/p&gt;

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     LOG_SEVERITY_LEVEL&lt;br/&gt;
     EXT_DIAG_SEVERITY_LEVEL&lt;br/&gt;
     LOG_BOOT_TRACE&lt;br/&gt;
     ERRORLOG_FILE_PROPERTY&lt;br/&gt;
     ERRORLOG_METHOD_PROPERTY&lt;br/&gt;
     ERRORLOG_FIELD_PROPERTY&lt;br/&gt;
     LOG_FILE_APPEND&lt;br/&gt;
     SYSTEM_HOME_PROPERTY&lt;br/&gt;
     BOOT_ALL&lt;br/&gt;
     FORCE_DATABASE_LOCK&lt;br/&gt;
     STORAGE_TEMP_DIRECTORY&lt;br/&gt;
     DURABILITY_PROPERTY&lt;br/&gt;
     REPLICATION_LOG_BUFFER_SIZE&lt;br/&gt;
     REPLICATION_MIN_SHIPPING_INTERVAL&lt;br/&gt;
     REPLICATION_MAX_SHIPPING_INTERVAL&lt;br/&gt;
     REPLICATION_VERBOSE&lt;br/&gt;
     START_DRDA&lt;br/&gt;
     DRDA_PROP_LOGCONNECTIONS&lt;br/&gt;
     DRDA_PROP_TRACEALL&lt;br/&gt;
     DRDA_PROP_TRACE&lt;br/&gt;
     DRDA_PROP_TRACEDIRECTORY&lt;br/&gt;
     DRDA_PROP_MINTHREADS&lt;br/&gt;
     DRDA_PROP_MAXTHREADS&lt;br/&gt;
     DRDA_PROP_TIMESLICE&lt;br/&gt;
     DRDA_PROP_SSL_MODE&lt;br/&gt;
     DRDA_PROP_SECURITYMECHANISM&lt;br/&gt;
     DRDA_PROP_PORTNUMBER&lt;br/&gt;
     DRDA_PROP_HOSTNAME&lt;br/&gt;
     DRDA_PROP_KEEPALIVE&lt;br/&gt;
     DRDA_PROP_STREAMOUTBUFFERSIZE&lt;br/&gt;
     STORAGE_USE_DEFAULT_FILE_PERMISSIONS&lt;/p&gt;


&lt;p&gt;-------------- SERVICE_ORDER (via the PropertyUtil.getService*() methods) ------------------&lt;/p&gt;

&lt;p&gt;      if ( derby.database.propertiesOnly is set in the database )&lt;/p&gt;
      {
          then only look in DB;
      }
&lt;p&gt;      else&lt;/p&gt;
      {
          look in JVM;
          otherwise look in DB;
          otherwise look in DERBY;
      }

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     LOCKS_ESCALATION_THRESHOLD&lt;br/&gt;
     PAGE_SIZE_PARAMETER&lt;br/&gt;
     ROW_LOCKING&lt;br/&gt;
     LANG_SEQUENCE_PREALLOCATOR&lt;br/&gt;
     PROP_XA_TRANSACTION_TIMEOUT&lt;br/&gt;
     READ_ONLY_ACCESS_USERS_PROPERTY&lt;br/&gt;
     AUTHENTICATION_SERVER_PARAMETER&lt;br/&gt;
     DEFAULT_CONNECTION_MODE_PROPERTY&lt;br/&gt;
     FULL_ACCESS_USERS_PROPERTY&lt;br/&gt;
     DATABASE_CLASSPATH&lt;/p&gt;


&lt;p&gt;-------------- BOOT_ORDER (via PropertyUtil.getPropertyFromSet()) ------------------&lt;/p&gt;

&lt;p&gt;     dbOnly = true if derby.database.propertiesOnly=true&lt;/p&gt;

&lt;p&gt;     if ( !dbOnly ) &lt;/p&gt;
{ look in JVM; }
&lt;p&gt;     otherwise look in DB;&lt;br/&gt;
     otherwise look in SERVICE;&lt;br/&gt;
     if ( dbOnly ) &lt;/p&gt;
{ not found; }
&lt;p&gt;     otherwise look in JVM;&lt;br/&gt;
     otherwise look in DERBY;&lt;/p&gt;

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     DEADLOCK_TIMEOUT&lt;br/&gt;
     DEADLOCK_MONITOR&lt;br/&gt;
     DEADLOCK_TRACE&lt;br/&gt;
     LOCKWAIT_TIMEOUT&lt;br/&gt;
     STATEMENT_CACHE_SIZE&lt;br/&gt;
     REQUIRE_AUTHENTICATION_PARAMETER&lt;br/&gt;
     AUTHENTICATION_PROVIDER_PARAMETER&lt;br/&gt;
     AUTHENTICATION_NATIVE_PASSWORD_LIFETIME&lt;br/&gt;
     AUTHENTICATION_PASSWORD_EXPIRATION_THRESHOLD&lt;br/&gt;
     AUTHENTICATION_BUILTIN_SALT_LENGTH&lt;br/&gt;
     AUTHENTICATION_BUILTIN_ITERATIONS&lt;br/&gt;
     AUTHENTICATION_BUILTIN_ALGORITHM&lt;/p&gt;

&lt;p&gt;-------------- DB_ONLY_ORDER (via PropertyUtil.getDatabaseProperty()) ------------------&lt;/p&gt;

&lt;p&gt;   look in DB&lt;/p&gt;

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     DATABASE_PROPERTIES_ONLY&lt;/p&gt;

&lt;p&gt;-------------- PRIVATE_ORDER (what&apos;s in service.properties) ------------------&lt;/p&gt;

&lt;p&gt;   look in SERVICE&lt;/p&gt;

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     NO_AUTO_BOOT&lt;/p&gt;

&lt;p&gt;-------------- INDEX_STATS_ORDER (a special set of rules) ------------------&lt;/p&gt;

&lt;p&gt;This search order covers the properties which control automatic statistics collection. Some of these properties default to being on and some to being off. This order is:&lt;/p&gt;

&lt;p&gt;     look in DB;&lt;br/&gt;
     otherwise look in JVM;&lt;br/&gt;
     otherwise look in DERBY;&lt;/p&gt;

&lt;p&gt;Covers these properties:&lt;/p&gt;

&lt;p&gt;     STORAGE_AUTO_INDEX_STATS (default true)&lt;br/&gt;
     STORAGE_AUTO_INDEX_STATS_LOGGING (default false)&lt;br/&gt;
     STORAGE_AUTO_INDEX_STATS_TRACING (default &quot;off&quot;)&lt;/p&gt;

&lt;p&gt;-------------- SQL_AUTH_ORDER (a special set of rules) ------------------&lt;/p&gt;

&lt;p&gt;SQL_AUTHORIZATION_PROPERTY is true if either of the following conditions is true:&lt;/p&gt;

&lt;p&gt;    SQL_AUTHORIZATION_PROPERTY is true in DB&lt;br/&gt;
    or the database uses NATIVE authentication&lt;/p&gt;</comment>
                            <comment id="13674276" author="dagw" created="Tue, 4 Jun 2013 12:07:49 +0100"  >&lt;p&gt;Thanks for researching this, Rick! I believe this summary will be very useful for anyone wanting to touch this (brittle IMHO) part of Derby. Would putting the summary in our Wiki be useful, perhaps?&lt;/p&gt;</comment>
                            <comment id="13674449" author="rhillegas" created="Tue, 4 Jun 2013 15:43:05 +0100"  >&lt;p&gt;Thanks for helping me think through this problem, Dag. Right now, each property is handled by custom logic. The custom logic is scattered across Derby&apos;s modules. Some support for common search orders has been isolated in PropertyUtil.&lt;/p&gt;

&lt;p&gt;A less brittle approach to property management might be to centralize all property determination. That is, to move the custom logic from the modules into PropertyUtil. Then we could write a new system function which called the centralized logic. That would give us confidence that we were telling users the real, effective values of properties. As we added more properties over time, we could be confident that we were still aligning Derby and the user&apos;s understanding of property values.&lt;/p&gt;

&lt;p&gt;At first blush, this looks like a fair amount of work, for a couple reasons:&lt;/p&gt;

&lt;p&gt;o There are a lot of properties to isolate.&lt;/p&gt;

&lt;p&gt;o Sometimes custom logic looks for properties in a PersistentSet (the transaction), sometimes in a vanilla Properties object, and sometimes in a DoubleProperties object which layers the PersistentSet on top of service.properties.&lt;/p&gt;

&lt;p&gt;o The custom logic also supplies defaults for missing properties. Users probably want to know what those defaulted values are too. However, those defaults are private to the modules and exporting them could be seen as an encapsulation issue.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure that this problem is worth that much effort compared to other projects we could work on. Cheaper solutions include:&lt;/p&gt;

&lt;p&gt;1) Stop now. Point users at this JIRA when they wonder what Derby thinks a property resolves to.&lt;/p&gt;

&lt;p&gt;2) Copy this information to the wiki and point curious users there.&lt;/p&gt;

&lt;p&gt;3) Add a system function which captures the rules described on this JIRA.&lt;/p&gt;

&lt;p&gt;All of these cheap solutions are brittle. There is no guarantee that I haven&apos;t made mistakes in my analysis. Even if my analysis is largely correct, there&apos;s no guarantee that the custom logic won&apos;t change underneath us as time goes on. None of the cheap solutions address those problems.&lt;/p&gt;

&lt;p&gt;That said, I have mocked up solution (3) and will attach it to this JIRA soon. It could serve as an incremental basis for the complete solution if someone wants to tackle that in the future. But it might just be a waste of time because of its brittleness. I would appreciate your feedback.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13674500" author="rhillegas" created="Tue, 4 Jun 2013 16:30:51 +0100"  >&lt;p&gt;Attaching derby-6220-01-aa-newSystemFunction.diff. This patch would add a new system function for reporting what Derby thinks a property resolves to.&lt;/p&gt;

&lt;p&gt;This patch simply hard-codes the analysis provided on this JIRA. The patch adds a method to PropertyUtil which applies the rules on this JIRA to all of the documented Derby properties except for NO_AUTO_BOOT. I omitted that property because I was a bit baffled about how to look up the property set in service.properties when outside the store after boot time.&lt;/p&gt;

&lt;p&gt;The new PropertyUtil method is then wrapped by a new system function:&lt;/p&gt;

&lt;p&gt;    VARCHAR( 32672 ) SYSCS_UTIL.SYSCS_GET_PROPERTY( IN PROPERTY_NAME VARCHAR(32672) )&lt;/p&gt;

&lt;p&gt;The new system function behaves as follows:&lt;/p&gt;

&lt;p&gt;o Applies the rules described on this JIRA to resolve a documented property name (other than NO_AUTO_BOOT). The result could be null. No attempt is made to further resolve a property which is null after applying these rules. That is, no attempt is made to look up default values hard-coded in the custom logic inside Derby modules.&lt;/p&gt;

&lt;p&gt;o Raises an exception if passed an undocumented property (or NO_AUTO_BOOT).&lt;/p&gt;

&lt;p&gt;The following script gives an example of running this new system function:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;create function setSystemProperty( propertyName varchar( 32672 ), propertyValue varchar( 32672 ) )&lt;br/&gt;
returns varchar( 32672 )&lt;br/&gt;
language java parameter style java no sql&lt;br/&gt;
external name &apos;java.lang.System.setProperty&apos;;&lt;/p&gt;

&lt;p&gt;&amp;#8211; no value yet (call the new system function)&lt;br/&gt;
values syscs_util.syscs_get_property( &apos;derby.authentication.builtin.saltLength&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; set the property at the system level&lt;br/&gt;
values setSystemProperty( &apos;derby.authentication.builtin.saltLength&apos;, &apos;50&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; now it has a value (call the new system function)&lt;br/&gt;
values syscs_util.syscs_get_property( &apos;derby.authentication.builtin.saltLength&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; set a different value in the database too&lt;br/&gt;
call syscs_util.syscs_set_database_property( &apos;derby.authentication.builtin.saltLength&apos;, &apos;90&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; but we still get the system value because of Derby&apos;s rules (call the new system function)&lt;br/&gt;
values syscs_util.syscs_get_property( &apos;derby.authentication.builtin.saltLength&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; unless we specify database properties only&lt;br/&gt;
call syscs_util.syscs_set_database_property( &apos;derby.database.propertiesOnly&apos;, &apos;true&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; and now we get the value stored in the database (call the new system function)&lt;br/&gt;
values syscs_util.syscs_get_property( &apos;derby.authentication.builtin.saltLength&apos; );&lt;/p&gt;


&lt;p&gt;A battery of tests would be needed if we decided to add this proposed new system function.&lt;/p&gt;

&lt;p&gt;This approach could be the basis for a more complete solution. However, there is no denying that this approach is brittle as-is. I would appreciate feedback about whether people think this approach is work pursuing.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java&lt;/p&gt;

&lt;p&gt;The new method which hard-codes the analysis given on this JIRA. The code would look a lot cleaner if we could switch on Strings, but that&apos;s not possible since this class needs to compile on Java 6.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Machinery (including upgrade logic) for adding the new system procedure.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;A new error message, raised for unknown property names.&lt;/p&gt;</comment>
                            <comment id="13675557" author="dagw" created="Wed, 5 Jun 2013 04:21:31 +0100"  >&lt;p&gt;Thanks, Rick. I am a bit concerned that the new function could &quot;lie&quot;, since it doesn&apos;t know about the code defaults if no value has been set and, as you point out, it also presumes the analysis is correct (which I believe it largely is, but the devil is in the details here)...&lt;br/&gt;
I would like to see the non-brittle solution, i.e. a centralized property determination, but I agree it is much work to code and test. I think we should just archive the code for now until such time as we might want to tackle this, and just document the behavior as you did above. Wiki or user docs, not sure...&lt;/p&gt;

</comment>
                            <comment id="13675634" author="knutanders" created="Wed, 5 Jun 2013 07:25:05 +0100"  >&lt;p&gt;If we document it with the intention of changing it later, I&apos;d prefer we do it on the wiki instead of the user docs, as the user docs are more normative and may lead more users into depending on corner cases in the current property resolution.&lt;/p&gt;

&lt;p&gt;Maybe we could also make PropertyUtil write a warning to derby.log if it finds a property that&apos;s shadowed.&lt;/p&gt;

&lt;p&gt;Or we could add a new property (resolved how? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; that makes PropertyUtil write a line to derby.log about where it took a property from, each time a property is read.&lt;/p&gt;</comment>
                            <comment id="13675868" author="rhillegas" created="Wed, 5 Jun 2013 13:38:50 +0100"  >&lt;p&gt;Attaching derby-6220-02-ab-newSystemFunction.diff. This patch adds an upgrade test and a permissions test for the new system function.&lt;/p&gt;

&lt;p&gt;Thanks for that feedback, Dag and Knut. I&apos;m going to stop work on this issue. Hopefully this analysis and patch will be useful if someone wants to tackle the complete solution. I do not plan to do any more work on this issue but I will leave the issue open.&lt;/p&gt;

&lt;p&gt;Touches the following additional files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12599161">DERBY-5861</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12585652" name="derby-6220-01-aa-cleanupProperty.diff" size="9896" author="rhillegas" created="Fri, 31 May 2013 19:25:50 +0100"/>
                            <attachment id="12586122" name="derby-6220-01-aa-newSystemFunction.diff" size="12855" author="rhillegas" created="Tue, 4 Jun 2013 16:30:51 +0100"/>
                            <attachment id="12586306" name="derby-6220-02-ab-newSystemFunction.diff" size="20502" author="rhillegas" created="Wed, 5 Jun 2013 13:38:50 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Jun 2013 11:07:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>327160</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzeahr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>327504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>