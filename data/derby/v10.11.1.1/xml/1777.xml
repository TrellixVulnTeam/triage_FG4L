<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:15:11 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1777/DERBY-1777.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1777] Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1777</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;However, here&apos;s a query that works in 10.1.2.1 but not in 10.2.1.1  &amp;#8211; database can be assumed to be the same in Derby - 1205&lt;/p&gt;

&lt;p&gt;SELECT DISTINCT &lt;br/&gt;
ZONE.ZONE_ID ZONE_ID, &lt;br/&gt;
PORT.PORT_ID PORT_ID, &lt;br/&gt;
ENTITY_TO_PORT.TYPE, &lt;br/&gt;
ENTITY_TO_PORT.PREFIX_ID, &lt;br/&gt;
ENTITY_TO_PORT.ENTITY_ID, &lt;br/&gt;
ENTITY_TO_PORT.DISPLAY_NAME, &lt;br/&gt;
ENTITY_TO_PORT.PORT_DISPLAY_NAME, &lt;br/&gt;
PORT2ZONE.MEMBER_NAME, &lt;br/&gt;
PORT2ZONE.ZONE_MEMBER_ID, &lt;br/&gt;
PORT.PORT_NUMBER &lt;br/&gt;
FROM &lt;br/&gt;
T_RES_ZONE ZONE left outer join T_VIEW_PORT2ZONE PORT2ZONE on &lt;br/&gt;
ZONE.ZONE_ID = PORT2ZONE.ZONE_ID left outer join T_RES_PORT PORT on &lt;br/&gt;
PORT2ZONE.PORT_ID = PORT.PORT_ID left outer join T_VIEW_ENTITY_TO_PORT ENTITY_TO_PORT on &lt;br/&gt;
PORT2ZONE.PORT_ID = ENTITY_TO_PORT.PORT_ID and &lt;br/&gt;
PORT2ZONE.ZONE_ID = ENTITY_TO_PORT.ZONE_ID, T_RES_FABRIC FABRIC &lt;br/&gt;
WHERE PORT2ZONE.ZONE_ID = ZONE.ZONE_ID and &lt;br/&gt;
ZONE.FABRIC_WWN = FABRIC.FABRIC_WWN and &lt;br/&gt;
FABRIC.FABRIC_ID = 1 &lt;/p&gt;

&lt;p&gt;Same db as before. &lt;/p&gt;

&lt;p&gt;In 10.2.1.1 it gives the following error (should this be a new issue?) &lt;/p&gt;


&lt;p&gt;java.sql.SQLException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U &lt;br/&gt;
at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source) &lt;br/&gt;
at org.eclipse.aperi.server.guireq.topology.views.ViewerSanL1.init(ViewerSanL1.java:1828) &lt;br/&gt;
at org.eclipse.aperi.server.guireq.topology.views.ViewerInit.init(ViewerInit.java:41) &lt;br/&gt;
at org.eclipse.aperi.server.guireq.topology.views.ViewerInit.main(ViewerInit.java:69) &lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U &lt;br/&gt;
at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source) &lt;br/&gt;
at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source) &lt;br/&gt;
... 4 more &lt;/p&gt;</description>
                <environment>WinXP SP2 dualcore 2.8 GHz 2 GBmemory</environment>
        <key id="12348858">DERBY-1777</key>
            <summary>Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="army">A B</assignee>
                                    <reporter username="psarkar">Prasenjit Sarkar</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Aug 2006 15:49:04 +0100</created>
                <updated>Fri, 26 Feb 2010 15:10:05 +0000</updated>
                            <resolved>Fri, 22 Sep 2006 17:09:18 +0100</resolved>
                                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12431322" author="rhillegas" created="Tue, 29 Aug 2006 19:52:29 +0100"  >&lt;p&gt;Assign this regression to 10.2.&lt;/p&gt;</comment>
                            <comment id="12431425" author="psarkar" created="Wed, 30 Aug 2006 01:24:46 +0100"  >&lt;p&gt;There are 15 other queries that fail. Here&apos;s one more:&lt;br/&gt;
1.&lt;br/&gt;
	    SELECT  &lt;br/&gt;
			OTHER2PORT2PORT.PORT_ID PORT_ID,  &lt;br/&gt;
			OTHER2PORT2PORT.DETECTABLE DETECTABLE, &lt;br/&gt;
			OTHER2PORT2PORT.PORT_ID2 PORT_ID2, &lt;br/&gt;
	    	 CASE  &lt;br/&gt;
	    		WHEN T_RES_PORT.DISPLAY_NAME IS NOT NULL THEN T_RES_PORT.DISPLAY_NAME &lt;br/&gt;
	    		ELSE T_RES_PORT.NAME  &lt;br/&gt;
	    	END PORT2_NAME,  &lt;br/&gt;
	    	T_RES_PORT.PORT_NUMBER PORT_NUMBER, &lt;br/&gt;
			OTHER2PORT2PORT.PORT2PORT_ID PORT2PORT_ID, &lt;br/&gt;
			ENTITY2PORT.PREFIX_ID, &lt;br/&gt;
			ENTITY2PORT.ENTITY_ID  &lt;br/&gt;
	    FROM  &lt;br/&gt;
		   T_RES_PORT, &lt;br/&gt;
	    (SELECT   &lt;br/&gt;
			PORT2PORT.PORT_ID2 PORT_ID, &lt;br/&gt;
			OTHER2PORT.OTHER_ID OTHER_ID,  &lt;br/&gt;
			OTHER2PORT.PREFIX_ID PREFIX_ID,  &lt;br/&gt;
			OTHER2PORT.PORT_ID PORT_ID2, &lt;br/&gt;
			PORT2PORT.DETECTABLE DETECTABLE, &lt;br/&gt;
		   PORT2PORT.PORT2PORT_ID PORT2PORT_ID &lt;br/&gt;
	    FROM   &lt;br/&gt;
	    T_VIEW_PORT2PORT PORT2PORT, &lt;br/&gt;
	    T_VIEW_VOTHER2PORT OTHER2PORT &lt;br/&gt;
		WHERE &lt;br/&gt;
		    PORT2PORT.PORT_ID1 = OTHER2PORT.PORT_ID) OTHER2PORT2PORT, T_VIEW_ENTITY2PORT ENTITY2PORT  &lt;br/&gt;
		WHERE  &lt;br/&gt;
		    ENTITY2PORT.PORT_ID = T_RES_PORT.PORT_ID and  &lt;br/&gt;
			 T_RES_PORT.PORT_ID = OTHER2PORT2PORT.PORT_ID and  &lt;br/&gt;
		    OTHER2PORT2PORT.OTHER_ID = 1 and  &lt;br/&gt;
			 OTHER2PORT2PORT.PREFIX_ID = &apos;x&apos;&lt;/p&gt;

</comment>
                            <comment id="12431609" author="army" created="Wed, 30 Aug 2006 17:00:56 +0100"  >&lt;p&gt;&amp;gt;  There are 15 other queries that fail. &lt;/p&gt;

&lt;p&gt;Do all of them fail with the same error and same stack trace?  Or are the failures different?  When the queries fail, is there anything in the derby.log file that might indicate a problem?&lt;/p&gt;

&lt;p&gt;Also, for the most recent query that you posted, what are the expected results?&lt;/p&gt;

&lt;p&gt;I ran the most recently-posted query in client/server mode against 10.1.2 (before any optimizer changes went in), 10.2 beta (the latest), and 10.3 (with some early changes that I have for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1315&quot; title=&quot;Statement optimization/compilation fails with OutOfMemoryException in largeCodeGen test  with embedded and framework DerbyNetClient&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1315&quot;&gt;&lt;del&gt;DERBY-1315&lt;/del&gt;&lt;/a&gt;).   In all cases the query compiles and executes without error.&lt;/p&gt;

&lt;p&gt;I think this means that the problem isn&apos;t so much the specific query as it is the state of the client/server communication at the time these queries are executed.  That in turn suggests that the series of events preceding the failed statements are somehow related to the failures, or else perhaps that some other error occured in the Derby engine and that error causes problems in the client/server communication.&lt;/p&gt;

&lt;p&gt;To help track the latter, add the property:&lt;/p&gt;

&lt;p&gt;  derby.stream.error.logSeverityLevel=0&lt;/p&gt;

&lt;p&gt;and then check derby.log to see if there are any errors recorded when the failure occurs.&lt;/p&gt;

&lt;p&gt;To help track the former (client/server communication) it would be great if you could enable client and server tracing and then post the traces to this issue (NOTE: these traces can be somewhat large).  For info on how to enable client/server tracing, see:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t know how much of that is possible in your environment, but the more info you can provide about Derby status at the time of the failure, the better.  Hopefully these initial steps can provide some insight....&lt;/p&gt;</comment>
                            <comment id="12431623" author="psarkar" created="Wed, 30 Aug 2006 17:52:36 +0100"  >&lt;p&gt;All of them fail with the same stack trace. All failures are repeatable and affect only certain queries and not others. Here is the derby.log for one failure that indicates an optimizer problem rather than a connection problem&lt;/p&gt;

&lt;p&gt;2006-08-30 00:57:44.062 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_3,5,main&amp;#93;&lt;/span&gt; (XID = 47607), (SESSIONID = 0), (DATABASE = Aperi), (DRDAID = NF000001.H18F-520727550015307819&lt;/p&gt;
{2}
&lt;p&gt;), Failed Statement is: SELECT DISTINCT &lt;br/&gt;
		 	FABRIC.FABRIC_ID &lt;br/&gt;
		FROM &lt;br/&gt;
		T_VIEW_VOTHER2PORT OTHER2PORT, &lt;br/&gt;
		T_VIEW_PORT2ZSET PORT2ZSET,&lt;br/&gt;
		    T_RES_ZSET, T_RES_FABRIC FABRIC &lt;br/&gt;
		WHERE &lt;br/&gt;
	    	 OTHER2PORT.PREFIX_ID = &apos;x&apos; and  &lt;br/&gt;
	        OTHER2PORT.OTHER_ID = 1 and  &lt;br/&gt;
	    	 OTHER2PORT.PORT_ID = PORT2ZSET.PORT_ID and &lt;br/&gt;
		    PORT2ZSET.ZSET_ID = T_RES_ZSET.ZSET_ID and  &lt;br/&gt;
			 T_RES_ZSET.FABRIC_WWN = FABRIC.FABRIC_WWN&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.uniqueJoin(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.uniqueJoin(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.uniqueJoinWithOuterTable(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.estimateTotalCost(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costBasedCostOptimizable(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costOptimizable(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.DMLStatementNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CursorNode.optimize(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.prepareStatementJDBC3(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.prepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;/p&gt;

&lt;p&gt;I will try increase the severity log and report the results&lt;/p&gt;

</comment>
                            <comment id="12433251" author="psarkar" created="Thu, 7 Sep 2006 22:47:03 +0100"  >&lt;p&gt;I am attaching a project called Derby1777 that consistently recreates this issue - the derby.properties and the derby.jar files used (10.1.2.1) are part of the zip file.&lt;/p&gt;

&lt;p&gt;The zip files also contain the java files necessary for recreation. To recreate run ViewerInit.main().&lt;/p&gt;

&lt;p&gt;I think if you can run the entire ViewerInit.main() without problems, our project would have crossed a major hurdle.&lt;/p&gt;</comment>
                            <comment id="12433252" author="psarkar" created="Thu, 7 Sep 2006 22:48:04 +0100"  >&lt;p&gt;Here is the file referred to by the above comment&lt;/p&gt;</comment>
                            <comment id="12433270" author="army" created="Fri, 8 Sep 2006 00:18:05 +0100"  >&lt;p&gt;When I try to run the repro I get the following error:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: The connection was refused because the database Aperi was not found.&lt;/p&gt;

&lt;p&gt;I did a quick grep of the java files and there don&apos;t appear to be any occurrences of &quot;create&quot; in any of them.  Do you have the &quot;Aperi&quot; database somewhere?  Sorry if I just overlooked something...&lt;/p&gt;</comment>
                            <comment id="12433276" author="psarkar" created="Fri, 8 Sep 2006 00:35:14 +0100"  >&lt;p&gt;I have attached the Aperi database.&lt;/p&gt;

&lt;p&gt;Alternatively, you could have also renamed Aperi to TPCDB in order to use the db attached to Derby-1205, but at this point, it might be better to use the Aperi db..&lt;/p&gt;</comment>
                            <comment id="12434008" author="army" created="Mon, 11 Sep 2006 23:43:13 +0100"  >&lt;p&gt;I ran the ViewerInit program attached to this issue and I hit two different NPE&apos;s.  For more details, see &quot;Details&quot; section below.&lt;/p&gt;

&lt;p&gt;The short story is that I was able to determine the cause of the NPEs and have a patch, d1777_v1.patch, to resolve them.  There is, however, another issue that prevents the ViewerInit program from running to completion (more on that below).  Nonetheless, d1777_v1.patch is at least a step in the right direction as it corrects the two compile-time NPEs described below.&lt;/p&gt;

&lt;p&gt;I ran derbyall on Red Hat Linux with ibm142 and sane jars, and I saw the following failure in jdbcapi/secureUsers1.sql:&lt;/p&gt;

&lt;p&gt;33a34,37&lt;br/&gt;
&amp;gt; do_ypcall: clnt_call: RPC: Unable to receive; errno = Connection refused&lt;br/&gt;
&amp;gt; YPBINDPROC_DOMAIN: Domain not bound&lt;br/&gt;
&amp;gt; do_ypcall: clnt_call: RPC: Unable to receive; errno = Connection refused&lt;br/&gt;
&amp;gt; YPBINDPROC_DOMAIN: Domain not bound&lt;br/&gt;
Test Failed.&lt;/p&gt;

&lt;p&gt;When I ran the test standalone it passes against all frameworks, so I&apos;m not sure what happened.  But in any event this does not appear to be related to my changes.&lt;/p&gt;

&lt;p&gt;So I&apos;m posting d1777_v1.patch for review.  Despite my efforts I haven&apos;t been able to come up with a test case that can go into derbyall, but I&apos;m still trying.  In the meantime, any comments/feedback would be appreciated.&lt;/p&gt;

&lt;p&gt;--------&lt;br/&gt;
Details&lt;br/&gt;
--------&lt;/p&gt;

&lt;p&gt;The first NPE came from BinaryRelationalOperatorNode.getScopedOperand() and was caused by the fact that, when scoping a predicate for pushing, Derby couldn&apos;t find the target result column to which the scoped predicate was supposed to point.  I confirmed this by running in SANE mode, where instead of an NPE I saw the following ASSERT FAILURE:&lt;/p&gt;

&lt;p&gt;ERROR XJ001: Java exception: &apos;ASSERT FAILED Failed to locate scope target result column when trying to scope operand &apos;ENTITY_TO_PORT.PORT_ID&apos;.: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;An example query that leads to this NPE/assertion failure is as follows:&lt;/p&gt;

&lt;p&gt;  SELECT DISTINCT&lt;/p&gt;

&lt;p&gt;     ZONE.ZONE_ID ZONE_ID,&lt;br/&gt;
     PORT.PORT_ID PORT_ID,&lt;br/&gt;
     ENTITY_TO_PORT.TYPE,&lt;br/&gt;
     ENTITY_TO_PORT.PREFIX_ID,&lt;br/&gt;
     ENTITY_TO_PORT.ENTITY_ID,&lt;br/&gt;
     ENTITY_TO_PORT.DISPLAY_NAME,&lt;br/&gt;
     ENTITY_TO_PORT.PORT_DISPLAY_NAME,&lt;br/&gt;
     PORT2ZONE.MEMBER_NAME,&lt;br/&gt;
     PORT2ZONE.ZONE_MEMBER_ID,&lt;br/&gt;
     PORT.PORT_NUMBER&lt;/p&gt;

&lt;p&gt;  FROM&lt;/p&gt;

&lt;p&gt;     T_RES_ZONE ZONE&lt;br/&gt;
       left outer join&lt;br/&gt;
           T_VIEW_PORT2ZONE PORT2ZONE&lt;br/&gt;
       on&lt;br/&gt;
           ZONE.ZONE_ID = PORT2ZONE.ZONE_ID&lt;br/&gt;
     left outer join&lt;br/&gt;
           T_RES_PORT PORT&lt;br/&gt;
       on&lt;br/&gt;
           PORT2ZONE.PORT_ID = PORT.PORT_ID&lt;br/&gt;
     left outer join&lt;br/&gt;
           T_VIEW_ENTITY_TO_PORT ENTITY_TO_PORT&lt;br/&gt;
       on&lt;br/&gt;
           PORT2ZONE.PORT_ID = ENTITY_TO_PORT.PORT_ID&lt;br/&gt;
           and PORT2ZONE.ZONE_ID = ENTITY_TO_PORT.ZONE_ID,&lt;br/&gt;
     T_RES_FABRIC FABRIC&lt;/p&gt;

&lt;p&gt;  WHERE&lt;/p&gt;

&lt;p&gt;     PORT2ZONE.ZONE_ID = ZONE.ZONE_ID&lt;br/&gt;
     and ZONE.FABRIC_WWN = FABRIC.FABRIC_WWN&lt;br/&gt;
     and FABRIC.FABRIC_ID = ?&lt;/p&gt;

&lt;p&gt;When scoping predicates for this query, we run into a situation where the target result column corresponds to a subquery that has been flattened.  Since the process of flattening a query leads to the creation of &quot;redundant&quot; result columns, we have to correctly handle the redundant result columns in order to find the scope target column.  That said, the logic for redundant result columns is in ColumnReference.getSourceResultSet(int[]):&lt;/p&gt;

&lt;p&gt;        rcExpr = rc.getExpression();&lt;br/&gt;
        colNum&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = getColumnNumber();&lt;/p&gt;

&lt;p&gt;        while ((rcExpr != null) &amp;amp;&amp;amp; (rcExpr instanceof ColumnReference))&lt;/p&gt;
        {
            colNum[0] = ((ColumnReference)rcExpr).getColumnNumber();
            rc = ((ColumnReference)rcExpr).getSource();

            /* If &quot;rc&quot; is redundant then that means ...
            ...
        }

&lt;p&gt;The thing to note here is that the logic for handling redundant rc&apos;s is inside the &quot;while&quot; loop.  This leads to an edge case that the above code won&apos;t catch: namely, if the original &quot;rc&quot; as it exists BEFORE we enter the &quot;while&quot; loop is redundant, we&apos;ll only execute the redundancy logic IF rcExpr is an instance of ColumnReference.  But there&apos;s no guarantee that rcExpr will actually be a ColumnReference--and if it&apos;s not, we&apos;ll incorrectly skip the logic for handling the redundant rc.  That in turn means we&apos;ll be unable to find the actual source result set, and thus the method will return null, leading to the above-mentioned assertion failure/NPE.&lt;/p&gt;

&lt;p&gt;To fix this, I made a small change to ensure that the redundancy logic always get executed if rc is redundant:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;while ((rcExpr != null) &amp;amp;&amp;amp; (rcExpr instanceof ColumnReference))&lt;br/&gt;
+        /* We have to make sure we enter this loop if rc is redundant,&lt;br/&gt;
+         * so that we can navigate down to the actual source result&lt;br/&gt;
+         * set (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1777&quot; title=&quot;Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1777&quot;&gt;&lt;del&gt;DERBY-1777&lt;/del&gt;&lt;/a&gt;). If rc &lt;b&gt;is&lt;/b&gt; redundant, then rcExpr is not&lt;br/&gt;
+         * guaranteed to be a ColumnReference, so we have to check&lt;br/&gt;
+         * for that case inside the loop.&lt;br/&gt;
+         */&lt;br/&gt;
+        while ((rcExpr != null) &amp;amp;&amp;amp;&lt;br/&gt;
+            (rc.isRedundant() || (rcExpr instanceof ColumnReference)))&lt;br/&gt;
         {&lt;/li&gt;
	&lt;li&gt;colNum&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = ((ColumnReference)rcExpr).getColumnNumber();&lt;/li&gt;
	&lt;li&gt;rc = ((ColumnReference)rcExpr).getSource();&lt;br/&gt;
+            if (rcExpr instanceof ColumnReference)&lt;br/&gt;
+            
{
+                colNum[0] = ((ColumnReference)rcExpr).getColumnNumber();
+                rc = ((ColumnReference)rcExpr).getSource();
+            }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;             /* If &quot;rc&quot; is redundant then that means ...&lt;br/&gt;
             ...&lt;br/&gt;
         }&lt;/p&gt;

&lt;p&gt;Once this change was made, the first NPE went away and the ViewerInit program ran a little longer, then failed with a second NPE.  As it turns out, the second NPE is intermittent and very time-sensitive.  When it happens, the failure occurs because the &quot;outerCost&quot; field that is passed to a query subtree from OptimizerImpl.costPermutation() is null:&lt;/p&gt;

&lt;p&gt;        /*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Get the cost of the outer plan so far.  This gives us the current&lt;/li&gt;
		&lt;li&gt;estimated rows, ordering, etc.&lt;br/&gt;
        */&lt;br/&gt;
        CostEstimate outerCost;&lt;br/&gt;
        if (joinPosition == 0)
        {
            outerCost = outermostCostEstimate;
        }
&lt;p&gt;        else&lt;/p&gt;
        {
            /*
            ** NOTE: This is somewhat problematic.  We assume here that the
            ** outer cost from the best access path for the outer table
            ** is OK to use even when costing the sort avoidance path for
            ** the inner table.  This is probably OK, since all we use
            ** from the outer cost is the row count.
            */
            outerCost =
                optimizableList.getOptimizable(
                    proposedJoinOrder[joinPosition - 1]).
                        getBestAccessPath().getCostEstimate();
        }&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At this point we expect outerCost to be non-null, but it turns out that there&apos;s a bug elsewhere in the code that leads to a null outerCost here, which is then passed down the tree:&lt;/p&gt;

&lt;p&gt;        /* Cost the optimizable at the current join position */&lt;br/&gt;
        optimizable.optimizeIt(this,&lt;br/&gt;
                               predicateList,&lt;br/&gt;
                               outerCost,&lt;br/&gt;
                               currentRowOrdering);&lt;/p&gt;

&lt;p&gt;Any attempts to access outerCost further down the tree will then result in an NPE.&lt;/p&gt;

&lt;p&gt;An example of a query that (intermittently) shows this NPE (against the &quot;Aperi&quot; database):&lt;/p&gt;

&lt;p&gt;  SELECT DISTINCT&lt;/p&gt;

&lt;p&gt;     &apos;&apos;server:&apos;&apos; || CAST(HOST2PORT.HOST_ID as CHAR) ENTITY_KEY,&lt;br/&gt;
     PORT2ZONE.ZONE_ID ZONE_ID&lt;/p&gt;

&lt;p&gt;  FROM&lt;/p&gt;

&lt;p&gt;     T_VIEW_VHOST2PORT HOST2PORT,&lt;br/&gt;
     T_VIEW_PORT2ZONE PORT2ZONE&lt;/p&gt;

&lt;p&gt;  WHERE&lt;/p&gt;

&lt;p&gt;     HOST2PORT.HOST_ID = ?&lt;br/&gt;
     and HOST2PORT.PORT_ID = PORT2ZONE.PORT_ID&lt;/p&gt;


&lt;p&gt;The actual bug is in the getNextPermutation() method of the same class (OptimizerImpl):&lt;/p&gt;

&lt;p&gt;    // If we were in the middle of a join order when this&lt;br/&gt;
    // happened, then reset the join order before jumping.&lt;br/&gt;
    // The call to rewindJoinOrder() here will put joinPosition&lt;br/&gt;
    // back to 0.  But that said, we&apos;ll then end up incrementing &lt;br/&gt;
    // joinPosition before we start looking for the next join&lt;br/&gt;
    // order (see below), which means we need to set it to -1&lt;br/&gt;
    // here so that it gets incremented to &quot;0&quot; and then&lt;br/&gt;
    // processing can continue as normal from there.  Note:&lt;br/&gt;
    // we don&apos;t need to set reloadBestPlan to true here&lt;br/&gt;
    // because we only get here if we have &lt;b&gt;not&lt;/b&gt; found a&lt;br/&gt;
    // best plan yet.&lt;br/&gt;
    if (joinPosition &amp;gt; 0)&lt;/p&gt;
    {
        rewindJoinOrder();
        joinPosition = -1;
    }

&lt;p&gt;The problem with this code is that it only rewinds the join order if joinPosition is GREATER than 0--but a joinPosition that is EQUAL to zero indicates that we&apos;re &quot;in the middle of a join order&quot;, as well, and thus we need to rewind in that case, too.  If we don&apos;t rewind, we can end up with an invalid join order and that indirectly leads to the NPE mentioned above.&lt;/p&gt;

&lt;p&gt;As a brief example, assume we have an optimizable list with two Optimizables in it, O1 and O2.  Let&apos;s also assume that we&apos;ve just finished optimizing the first one.  So the current join order will be &lt;span class=&quot;error&quot;&gt;&amp;#91;O1, -&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Then timeout occurs so we enter the block of code in which the above &quot;if&quot; statement sits.  At that point joinPosition will be &quot;0&quot; because we just found the best cost for the first optimizable and we haven&apos;t incremented joinPosition yet.  We&apos;ll then &quot;jump&quot; to what we think is going to be the best join order, which we call &quot;firstLookOrder&quot; (see the code for more details).  Let&apos;s assume firstLookOrder is &lt;span class=&quot;error&quot;&gt;&amp;#91;O2,O1&amp;#93;&lt;/span&gt;.  Now, because joinPosition is 0 we won&apos;t enter the above the &quot;if&quot; block and thus we will NOT rewind the join order.  So we&apos;ll then increment joinPosition to &quot;1&quot; and we&apos;ll choose the optimizable at firstLookOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;joinPosition&amp;#93;&lt;/span&gt; as the next one in the current join order.  firstLookOrder&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; returns optimizable &quot;O1&quot;, which means that, since we didn&apos;t &quot;rewind&quot; the join order, our new current join order becomes &lt;span class=&quot;error&quot;&gt;&amp;#91;O1, O1&amp;#93;&lt;/span&gt;--which is not a valid join order.&lt;/p&gt;

&lt;p&gt;The reason this leads to an NPE is that whenever an optimizable is placed, the best cost estimate for that optimizable is set to null.  Thus when we place O1 at position &quot;1&quot; we set it&apos;s best access path&apos;s cost estimate to null.  Then later, when we get to the costPermutation() code shown above, we take the best cost of the optimizable at position &quot;0&quot; and use that as the &quot;outerCost&quot; for the optimizable at position &quot;1&quot;.  But in this  those two optimizables are the SAME--namley, O1.  So we effectively nulled out O1&apos;s best cost, then we used that very same (null) cost as the &quot;outerCost&quot; for optimizing O1.  When that outerCost is eventually referenced later, we end up with the NPE.&lt;/p&gt;

&lt;p&gt;All of that said, note the above &quot;if&quot; statement is only executed in situations where we have an optimizer timeout at a very particular point during optimization.  This is why the NPE is intermittent, and it also explains why it\ won&apos;t reproduce if optimizer timeout is disabled.&lt;/p&gt;

&lt;p&gt;The fix for this NPE is a one-line change (plus relevant comment updates):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (joinPosition &amp;gt; 0)&lt;br/&gt;
+    /* If we already assigned at least one position in the&lt;br/&gt;
+     * join order when this happened (i.e. if joinPosition&lt;br/&gt;
+     * is greater than &lt;b&gt;or equal&lt;/b&gt; to zero; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1777&quot; title=&quot;Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1777&quot;&gt;&lt;del&gt;DERBY-1777&lt;/del&gt;&lt;/a&gt;), then &lt;br/&gt;
+     * reset the join order before jumping.  The call to&lt;br/&gt;
+     * rewindJoinOrder() here will put joinPosition back&lt;br/&gt;
+     * to 0.  But that said, we&apos;ll then end up incrementing&lt;br/&gt;
+     * joinPosition before we start looking for the next&lt;br/&gt;
+     * join order (see below), which means we need to set&lt;br/&gt;
+     * it to -1 here so that it gets incremented to &quot;0&quot; and&lt;br/&gt;
+     * then processing can continue as normal from there.  &lt;br/&gt;
+     * Note: we don&apos;t need to set reloadBestPlan to true&lt;br/&gt;
+     * here because we only get here if we have &lt;b&gt;not&lt;/b&gt; found&lt;br/&gt;
+     * a best plan yet.&lt;br/&gt;
+     */&lt;br/&gt;
+    if (joinPosition &amp;gt;= 0)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m attaching a patch, d1777_v1.patch, that makes these two changes to resolve the NPE&apos;s discussed here.  Note, though, that I still need to add an appropriate test case to derbyall.  This test case will only be for the first NPE; the second NPE is timing-dependent and will not reproduce with &quot;noTimeout&quot; set to true, so I don&apos;t think we&apos;ll have a test case for that one.&lt;/p&gt;

&lt;p&gt;Also note: with d1777_v1.patch applied, the repro program attached to this Jira still will not run without error (sigh).  The two NPE&apos;s disappear and the test program gets to the &quot;L2&quot; queries, but at that point the queries take a very (very) long time to compile and then fail with an ASSERT failure at execution time:&lt;/p&gt;

&lt;p&gt;org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED &lt;br/&gt;
sourceResultSetNumber expected to be &amp;gt;= 0 for SWITCH.SWITCH_ID&lt;/p&gt;

&lt;p&gt;That is (of course) with SANE jars; I don&apos;t know what that translates into for INSANE jars because I haven&apos;t had the time to re-run the queries with sane jars.  It could end up being an execution-time (as opposed to a compile-time) NPE but I don&apos;t that for sure.  I&apos;m still investigating.&lt;/p&gt;</comment>
                            <comment id="12434553" author="army" created="Wed, 13 Sep 2006 22:57:44 +0100"  >&lt;p&gt;Attaching a second version of the patch, d1777_v2.patch, that includes a test case for catching regressions of the first NPE described above.  As mentioned in previous comments, I don&apos;t think it&apos;s going to be possible to add a test case for the second NPE because it&apos;s intermittent and time-sensitive (and does not reproduce with &quot;noTimeout=true&quot;).&lt;/p&gt;

&lt;p&gt;Aside from the new test case in lang/predicatePushdown.sql, the _v2 patch is identical to the _v1 patch.  The patch is actually quite small--only about 10 lines of actual code changes.  The rest is comments and test case/master updates.&lt;/p&gt;

&lt;p&gt;Any review comments and/or commit would be greatly appreciated.&lt;/p&gt;</comment>
                            <comment id="12434780" author="bryanpendleton" created="Thu, 14 Sep 2006 20:21:12 +0100"  >&lt;p&gt;Don&apos;t have much to offer, but I read the code and I read your writeup &lt;br/&gt;
and I don&apos;t see any improvements to suggest to your change. Not much of a review,&lt;br/&gt;
I know, but I did want to let you know that I did at least this much of a review.&lt;/p&gt;</comment>
                            <comment id="12434795" author="army" created="Thu, 14 Sep 2006 21:14:30 +0100"  >&lt;p&gt;&amp;gt; Not much of a review, know, but I did want to let you know that I did at least this much of a review. &lt;/p&gt;

&lt;p&gt;Thanks Bryan!  Every little bit helps &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12435138" author="rhillegas" created="Fri, 15 Sep 2006 23:13:46 +0100"  >&lt;p&gt;Thanks for the patch Army. The changes are small and focussed and look like an incremental improvement. I will run regression tests tonight.&lt;/p&gt;</comment>
                            <comment id="12435265" author="rhillegas" created="Sat, 16 Sep 2006 20:26:24 +0100"  >&lt;p&gt;Derbyall ran cleanly on linux except for message encoding diffs in urlLocale, messageLocale, and iepnegativetests_ES. Committed at subversion revision 446924.&lt;/p&gt;</comment>
                            <comment id="12435501" author="army" created="Mon, 18 Sep 2006 16:37:06 +0100"  >&lt;p&gt;Thank you for the review and commit, Rick.&lt;/p&gt;

&lt;p&gt;I know you recently sent an email about the imminent 10.2 release candidate--are you planning to do another mega-merge before the candidate?  If not, would you be willing to commit this to 10.2, as well?&lt;/p&gt;

&lt;p&gt;Thanks for your time!&lt;/p&gt;</comment>
                            <comment id="12435806" author="rhillegas" created="Tue, 19 Sep 2006 15:34:21 +0100"  >&lt;p&gt;Hi Army,&lt;/p&gt;

&lt;p&gt;Yes, this bugfix will be swept up in the next mega-merge to 10.2. Cheers-Rick&lt;/p&gt;</comment>
                            <comment id="12435964" author="army" created="Tue, 19 Sep 2006 19:31:10 +0100"  >&lt;p&gt;Filed a separate Jira, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1866&quot; title=&quot;Assert failure in sane mode for queries that used to work in 10.1.2.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1866&quot;&gt;&lt;del&gt;DERBY-1866&lt;/del&gt;&lt;/a&gt;, to track the ASSERT failure mentioned in previous comments.  So when this patch is ported back to 10.2 and 10.1, I think this particular issue can be closed.&lt;/p&gt;

&lt;p&gt;That said, Rick has indicated that the patch will be mega-merged to 10.2 later.  As for 10.1, the merge command to port this back to 10.1 is straightforward:&lt;/p&gt;

&lt;p&gt;  svn merge -r 446923:446924 &lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/trunk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did the merge but haven&apos;t run derbyall on the 10.1 codeline; will do so shortly...&lt;/p&gt;</comment>
                            <comment id="12436058" author="army" created="Wed, 20 Sep 2006 00:37:28 +0100"  >&lt;p&gt;&amp;gt; I did the merge but haven&apos;t run derbyall on the 10.1 codeline; will do so shortly...&lt;/p&gt;

&lt;p&gt;I ran derbyall on Red Hat with ibm142 using sane jars against a 10.1 built after the merge command, and there were no new failures.  So this should be a straightforward merge to 10.1 using the svn merge command shown above.&lt;/p&gt;</comment>
                            <comment id="12436069" author="mikem" created="Wed, 20 Sep 2006 01:34:49 +0100"  >&lt;p&gt;committed the merge of the change from trunk to 10.1 branch:&lt;/p&gt;

&lt;p&gt;m101_142:186&amp;gt;svn commit&lt;/p&gt;

&lt;p&gt;Sending        java\engine\org\apache\derby\impl\sql\compile\ColumnReference.jav&lt;br/&gt;
a&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\OptimizerImpl.java&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\master\predica&lt;br/&gt;
tePushdown.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\lang\pre&lt;br/&gt;
dicatePushdown.sql&lt;br/&gt;
Transmitting file data ....&lt;br/&gt;
Committed revision 448018.&lt;/p&gt;</comment>
                            <comment id="12436899" author="army" created="Fri, 22 Sep 2006 17:09:18 +0100"  >&lt;p&gt;Patch committed to trunk and 10.1 and mega-merged to 10.2, so updating Fixin, unchecking &quot;Patch Available&quot;, and resolving the issue.&lt;/p&gt;</comment>
                            <comment id="12443565" author="army" created="Thu, 19 Oct 2006 17:21:55 +0100"  >&lt;p&gt;Fix is in 10.3, 10.2, and 10.1, and I haven&apos;t heard any follow-up feedback, so marking it as closed.&lt;/p&gt;</comment>
                            <comment id="12838880" author="mihirkumarpaulatsya" created="Fri, 26 Feb 2010 14:19:43 +0000"  >&lt;p&gt;The status of this issue says that it has been closed.&lt;/p&gt;

&lt;p&gt;The history also says that it was working in 10.2.4.&lt;/p&gt;


&lt;p&gt;-&amp;gt;But Right now I am using derby 10.4 and facing the issue.&lt;/p&gt;


&lt;p&gt;Is there any help availabe for this??? or should I think of any workaround???&lt;/p&gt;</comment>
                            <comment id="12838895" author="bryanpendleton" created="Fri, 26 Feb 2010 15:10:05 +0000"  >&lt;p&gt;Can you post the query that you run, and the CREATE TABLE statements that go with it,&lt;br/&gt;
which is resulting in the error?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12350272">DERBY-1866</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12340426" name="Aperi.zip" size="440248" author="" created="Fri, 8 Sep 2006 00:33:00 +0100"/>
                            <attachment id="12340415" name="Derby1777.zip" size="2872933" author="psarkar" created="Thu, 7 Sep 2006 22:48:04 +0100"/>
                            <attachment id="12340608" name="d1777_v1.patch" size="3773" author="army" created="Mon, 11 Sep 2006 23:43:13 +0100"/>
                            <attachment id="12340778" name="d1777_v2.patch" size="7402" author="army" created="Wed, 13 Sep 2006 22:57:44 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Aug 2006 18:52:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22699</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0r1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38199</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>