<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4370/DERBY-4370.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4370] Implement JOIN ... USING syntax</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4370</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The SQL standard defines two ways to specify the join condition in an INNER JOIN or a (LEFT/RIGHT/FULL) OUTER JOIN: with an ON clause or with a USING clause. Derby currently only accepts joins with an ON clause. Internally, Derby has code that supports USING. This code should be enabled to ease the migration to Derby. We must also verify that the implementation adheres to the standard before we enable it.&lt;/p&gt;

&lt;p&gt;Since USING is already a reserved keyword in Derby&apos;s parser, enabling the USING syntax should not cause any compatibility issues for existing queries.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12434984">DERBY-4370</key>
            <summary>Implement JOIN ... USING syntax</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Sep 2009 10:54:58 +0100</created>
                <updated>Thu, 15 Oct 2009 15:34:57 +0100</updated>
                            <resolved>Thu, 8 Oct 2009 12:09:47 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12752103" author="knutanders" created="Mon, 7 Sep 2009 12:46:19 +0100"  >&lt;p&gt;The attached patch enables the USING syntax in the parser.&lt;/p&gt;

&lt;p&gt;It appears to do the right thing in the simple queries below. The columns specified in the USING clause come first in the result, then all the columns in T1 except those in USING, and then all the columns in T2 except those in USING.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t1(a int, b int, c int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t1 values (1,2,3),(2,3,1),(4,4,4);&lt;br/&gt;
3 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t2(b int, c int, d int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t2 values (1,2,3),(2,3,1),(5,5,5);&lt;br/&gt;
3 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from t1 join t2 using (b,c);&lt;br/&gt;
B          |C          |A          |D          &lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
2          |3          |1          |1          &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; select * from t1 join t2 using (b);&lt;br/&gt;
B          |A          |C          |C          |D          &lt;br/&gt;
-----------------------------------------------------------&lt;br/&gt;
2          |1          |3          |3          |1          &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; select * from t1 right join t2 using (b,c);&lt;br/&gt;
B          |C          |A          |D          &lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
1          |2          |NULL       |3          &lt;br/&gt;
2          |3          |1          |1          &lt;br/&gt;
5          |5          |NULL       |5          &lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;There are some problems that would need to be resolved, though. Some quick tests revealed this:&lt;/p&gt;

&lt;p&gt;1) NullPointerException if none of the columns in the USING clause are shared between the tables that are being joined:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select * from t1 join t2 using (a,d);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;/p&gt;


&lt;p&gt;2) I&apos;m not sure which behaviour is correct according to the standard, but at least this query differs from PostgreSQL and MySQL in which columns to return:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select t1.&lt;b&gt;, t2.&lt;/b&gt; from t1 join t2 using (b,c);&lt;br/&gt;
A          |D          &lt;br/&gt;
-----------------------&lt;br/&gt;
1          |1          &lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;PostgreSQL and MySQL return more columns (results below from PostgreSQL):&lt;/p&gt;

&lt;p&gt;kh160127=# select t1.&lt;b&gt;, t2.&lt;/b&gt; from t1 join t2 using (b,c);&lt;br/&gt;
 a | b | c | b | c | d &lt;br/&gt;
--&lt;del&gt;&lt;ins&gt;&lt;/del&gt;-&lt;del&gt;&lt;/ins&gt;&lt;/del&gt;-&lt;del&gt;&lt;ins&gt;&lt;/del&gt;-&lt;del&gt;&lt;/ins&gt;&lt;/del&gt;-&lt;del&gt;+&lt;/del&gt;--&lt;br/&gt;
 1 | 2 | 3 | 2 | 3 | 1&lt;br/&gt;
(1 row)&lt;/p&gt;</comment>
                            <comment id="12752259" author="dagw" created="Mon, 7 Sep 2009 22:09:25 +0100"  >&lt;p&gt;Patch looks simple enough, I don&apos;t know about the behavior you mention, I&apos;ll go see if I can grok the standard on this.&lt;/p&gt;</comment>
                            <comment id="12752265" author="dagw" created="Mon, 7 Sep 2009 22:35:29 +0100"  >&lt;p&gt;I think Derby is correct in suppressing the join column in the case&lt;br/&gt;
you show above.  Consider this stanza from SQl 2003, vol 2, section&lt;br/&gt;
7.12 &amp;lt;query specification&amp;gt;, syntax rule 7 on &amp;lt;asterisked identifier&lt;br/&gt;
chain&amp;gt;, paragraph g), case i):&lt;/p&gt;

&lt;p&gt;   &quot;If the basis is a &amp;lt;table or query name&amp;gt; or &amp;lt;correlation name&amp;gt;, then&lt;br/&gt;
   let TQ be the table associated with the basis. The &amp;lt;select sublist&amp;gt; is&lt;br/&gt;
   equivalent to a &amp;lt;value expression&amp;gt; sequence in which each &amp;lt;value&lt;br/&gt;
   expression&amp;gt; is a column reference CR that references a column of TQ&lt;br/&gt;
   that is not a common column of a &amp;lt;joined table&amp;gt;. Each column of TQ&lt;br/&gt;
   ***************************&lt;br/&gt;
   that is not a referenced common column shall be referenced exactly&lt;br/&gt;
   once. The columns shall be referenced in the ascending sequence of&lt;br/&gt;
   their ordinal positions within TQ.&quot;&lt;/p&gt;

&lt;p&gt;Note my underlining. A &quot;common column&quot; (below) is the one used in the USING&lt;br/&gt;
clause, so those columns should be omitted, as does Derby.&lt;/p&gt;

&lt;p&gt;For the definition of &quot;common column&quot;, see section 7.7 &amp;lt;joined table&amp;gt;,&lt;br/&gt;
syntax rule 7, paragraphs a) and b):&lt;/p&gt;

&lt;p&gt;   &quot;7) If NATURAL is specified or if a &amp;lt;join specification&amp;gt; immediately&lt;br/&gt;
    containing a &amp;lt;named columns join&amp;gt; is specified, then:&lt;/p&gt;

&lt;p&gt;      a) If NATURAL is specified, then let common column name be a &amp;lt;field&lt;br/&gt;
      name&amp;gt; that is equivalent to the &amp;lt;field name&amp;gt; of exactly one field of&lt;br/&gt;
      RT1 and the &amp;lt;field name&amp;gt; of exactly one field of RT2. RT1 shall not&lt;br/&gt;
      have any duplicate common column names and RT2 shall not have any&lt;br/&gt;
      duplicate common column names. Let corresponding join columns refer to&lt;br/&gt;
      all fields of RT1 and RT2 that have common column names, if any.&lt;/p&gt;

&lt;p&gt;      b) If a &amp;lt;named columns join&amp;gt; is specified, then every &amp;lt;column name&amp;gt;&lt;br/&gt;
      in the &amp;lt;join column list&amp;gt; shall be equivalent to the &amp;lt;field name&amp;gt;&lt;br/&gt;
      of exactly one field of RT1 and the &amp;lt;field name&amp;gt; of exactly one&lt;br/&gt;
      field of RT2. Let common column name be the name of such a&lt;br/&gt;
      column. Let corresponding join columns refer to the columns&lt;br/&gt;
      identified in the &amp;lt;join column list&amp;gt;.&quot;&lt;/p&gt;

&lt;p&gt;So, this suppression also applies for NATURAL JOIN, if we want to&lt;br/&gt;
implement that.&lt;/p&gt;</comment>
                            <comment id="12752589" author="knutanders" created="Tue, 8 Sep 2009 16:58:06 +0100"  >&lt;p&gt;Thanks for digging into the standard, Dag. I agree that what you quoted above must mean that the behaviour seen with the patch is in accordance with the standard. It&apos;s strange, though, that both PostgreSQL and MySQL have interpreted this in another way. Does anyone have access to other DBMSs where they could test this query and see which columns they return?&lt;/p&gt;</comment>
                            <comment id="12754935" author="knutanders" created="Mon, 14 Sep 2009 12:37:07 +0100"  >&lt;p&gt;Uploading an updated patch (v2). Changes from the previous revision:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed the NPE when referencing non-common columns in the USING clause. This condition was probably detected earlier originally when the USING code was written and thereby preventing that the code that threw NPE was reached. Now columns out of scope are detected very late in the bind phase (in JoinNode.deferredBindExpressions(), see also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4284&quot; title=&quot;All Columns become Nullable when Using left join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4284&quot;&gt;&lt;del&gt;DERBY-4284&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2916&quot; title=&quot;Change/error? in &amp;#39;Ordered null semantics&amp;#39; output from &amp;#39;SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()&amp;#39; in lang/wisconsin.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2916&quot;&gt;DERBY-2916&lt;/a&gt; for other issues related to late binding in JoinNode). The fix was simple: just check the value returned by getResultColumn(columnName) in ResultColumnList.getJoinColumns() and raise a StandardException if it&apos;s null.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added various test cases for USING in JoinTest. Verified that PostgreSQL gave the same results (except for the case with asterisks with table qualifiers, as discussed above).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed negative test case from lang/db2Compatibility.sql.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updated canon for lang/innerjoin.sql because the message (not the SQLState) for a syntax error was changed for a negative test case because of the grammar changes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12763446" author="knutanders" created="Thu, 8 Oct 2009 12:09:46 +0100"  >&lt;p&gt;Committed revision 823126.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12437600">DERBY-4401</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12438211">DERBY-4410</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12437971">DERBY-4407</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12418800" name="using.diff" size="988" author="knutanders" created="Mon, 7 Sep 2009 12:46:19 +0100"/>
                            <attachment id="12419513" name="using_v2.diff" size="18251" author="knutanders" created="Mon, 14 Sep 2009 12:37:07 +0100"/>
                            <attachment id="12419514" name="using_v2.stat" size="486" author="knutanders" created="Mon, 14 Sep 2009 12:37:07 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Sep 2009 21:09:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31214</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rpb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38306</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>