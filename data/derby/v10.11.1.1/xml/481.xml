<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:29:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-481/DERBY-481.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-481] implement SQL generated columns</title>
                <link>https://issues.apache.org/jira/browse/DERBY-481</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Satheesh has pointed out that generated columns, a SQL 2003 feature, would satisfy the performance requirements of Expression Indexes (bug 455). Generated columns may not be as elegant as Expression Indexes, but they are easier to implement. We would allow the following new kind of column definition in CREATE TABLE and ALTER TABLE statements:&lt;/p&gt;

&lt;p&gt;    columnName GENERATED ALWAYS AS ( expression )&lt;/p&gt;

&lt;p&gt;If expression were an indexableExpression (as defined in bug 455), then we could create indexes on it. There is no work for the optimizer to do here. The Language merely has to compute the generated column at INSERT/UPDATE time.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12312855">DERBY-481</key>
            <summary>implement SQL generated columns</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Sat, 30 Jul 2005 11:01:02 +0100</created>
                <updated>Thu, 2 May 2013 03:29:19 +0100</updated>
                            <resolved>Tue, 20 Jan 2009 21:17:34 +0000</resolved>
                                    <version>10.0.2.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12580425" author="rhillegas" created="Wed, 19 Mar 2008 16:03:53 +0000"  >&lt;p&gt;Attaching a first rev of a functional spec for this feature: GeneratedColumns.html&lt;/p&gt;</comment>
                            <comment id="12580439" author="djd" created="Wed, 19 Mar 2008 16:33:42 +0000"  >&lt;p&gt;In the spec:&lt;br/&gt;
&amp;gt; We rename the sqlAllowed field of RoutineAliasInfo and borrow one of its bits to encode whether a routine is DETERMINISTIC.&lt;/p&gt;

&lt;p&gt;RoutineAliasInfo already has a field set up for expansion, I think we can use this in a smart way instead of making a single field handle multiple meanings (less clear). I&apos;ve always been planning to add all the possible future options for routines into RoutineAliasInfo, I&apos;d be willing to handle that portion for this improvement.&lt;/p&gt;</comment>
                            <comment id="12580443" author="rhillegas" created="Wed, 19 Mar 2008 16:44:02 +0000"  >&lt;p&gt;Thanks, Dan. That would be great.&lt;/p&gt;</comment>
                            <comment id="12580458" author="rhillegas" created="Wed, 19 Mar 2008 17:22:22 +0000"  >&lt;p&gt;This feature was introduced to the SQL Standard in 2003. There it is called T175. Here is some information on what other databases do:&lt;/p&gt;

&lt;p&gt;DB2 - Appears to implement the full language for T175.&lt;/p&gt;

&lt;p&gt;Oracle - Does not appear to implement T175. However, some similar functionality is available. &quot;Although Oracle does not support generated columns, a function-based index can be used to index on the result of an expression&quot; according to &lt;a href=&quot;http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/ap_standard_sql004.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/ap_standard_sql004.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Postgres - Does not appear to implement T175. However, according to section 5.2 of the Postgres 8.3 reference manual, it appears that you can declare the DEFAULT value of a column to be computed by an expression which can contain functions. In addition, according to section 11.7, Postgres lets you define indexes on expressions made up of functions and columns in the base row.&lt;/p&gt;

&lt;p&gt;MySQL - According to section 12.1.10 of the MySQL 6.0 reference manual, MySQL only allows constants and CURRENT_TIMESTAMP as default values for columns.&lt;/p&gt;</comment>
                            <comment id="12582121" author="djd" created="Wed, 26 Mar 2008 04:17:53 +0000"  >&lt;p&gt;Since DeterministicCharacteristic  is an independent feature to generated columns should it be its own Jira issue.&lt;br/&gt;
If not we may land in a similar situation to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; where independent functionality is implemented but no record exists in Jira.&lt;/p&gt;</comment>
                            <comment id="12582272" author="rhillegas" created="Wed, 26 Mar 2008 12:45:07 +0000"  >&lt;p&gt;Sounds like a good idea. We&apos;ll need to divide this work into subtasks as we go along. I&apos;ve created a separate subtask (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3570&quot; title=&quot;Implement DETERMINISTIC keyword for procedures and functions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3570&quot;&gt;&lt;del&gt;DERBY-3570&lt;/del&gt;&lt;/a&gt;) to track the DETERMINISTIC work.&lt;/p&gt;</comment>
                            <comment id="12641819" author="rhillegas" created="Wed, 22 Oct 2008 14:29:08 +0100"  >&lt;p&gt;Attaching a prototype implementation of basic machinery for generated columns. I intend to split this up into smaller chunks that are easier to review. This patch provides basic support for declaring generated columns and for populating them at insert/update time.&lt;/p&gt;

&lt;p&gt;o Basic tests written for:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CREATE TABLE&lt;/li&gt;
	&lt;li&gt;Cooperation of INSERT/UPDATE with constraints, triggers, and indexes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;o Known not to work:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Omitting the column datatype when declaring a generation clause&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;o Not tested at all:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Schema evolution and statement invalidation&lt;/li&gt;
	&lt;li&gt;Permissions&lt;/li&gt;
	&lt;li&gt;dblook&lt;/li&gt;
	&lt;li&gt;Upgrade&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Contents of the patch:&lt;/p&gt;


&lt;p&gt;UTILITIES, MESSAGES, TESTS&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/util/StringUtil.java&lt;br/&gt;
M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;


&lt;p&gt;CATALOG SUPPORT&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/DefaultInfo.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java&lt;/p&gt;


&lt;p&gt;DECLARING GENERATED COLUMNS&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;br/&gt;
A      java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/C_NodeTypes.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java&lt;/p&gt;


&lt;p&gt;INSERTING GENERATED COLUMNS&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ExpressionClassBuilder.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ValueNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;/p&gt;


&lt;p&gt;UPDATING GENERATED COLUMNS&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/Activation.java&lt;/p&gt;</comment>
                            <comment id="12641929" author="rhillegas" created="Wed, 22 Oct 2008 19:22:32 +0100"  >&lt;p&gt;Attaching derby-481-01-aa-catalog.diff, the first small patch cut out of the prototype. Presented for review. Tests pass cleanly for me. Tests for these catalog changes will appear in later patches.&lt;/p&gt;

&lt;p&gt;This patch provides the catalog support for generated columns. Catalog support turned out to be simpler than the functional spec imagined. There is no need to add another column to SYS.SYSCOLUMNS. Instead, we can re-use the existing COLUMNDEFAULT column to store the generation clause.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/DefaultInfo.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java&lt;/p&gt;

&lt;p&gt;Special constructor for default descriptors which describe generated columns. A default descriptor can tell you whether it represents a generated column. If it does, it can also tell you what other columns the generation clause references.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/ColumnDescriptor.java&lt;/p&gt;

&lt;p&gt;Column descriptors can now tell you if they are bound to generation clauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;The table descriptor can now return a list of all the columns which have generation clauses.&lt;/p&gt;</comment>
                            <comment id="12641959" author="bryanpendleton" created="Wed, 22 Oct 2008 21:38:31 +0100"  >&lt;p&gt;I think the incremental approach is great, but why not do the tests incrementally,&lt;br/&gt;
at the same time?&lt;/p&gt;</comment>
                            <comment id="12641967" author="rhillegas" created="Wed, 22 Oct 2008 21:54:54 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Thanks for your interest in this patch! In general, I do want to provide tests with patches. For the catalog changes, however, I need grammar changes before I can really test anything meaningful. I considered introducing the catalog changes along with the grammar patch but I thought it would be better to chunk the catalog piece in first in order to reduce the size of the grammar patch.&lt;/p&gt;</comment>
                            <comment id="12641969" author="bryanpendleton" created="Wed, 22 Oct 2008 21:58:17 +0100"  >&lt;p&gt;That makes sense. Thanks for the clarification, and thanks for working on this feature!&lt;/p&gt;</comment>
                            <comment id="12642200" author="rhillegas" created="Thu, 23 Oct 2008 17:52:28 +0100"  >&lt;p&gt;Committed derby-481-01-aa-catalog.diff at subversion revision 707414.&lt;/p&gt;</comment>
                            <comment id="12642328" author="rhillegas" created="Thu, 23 Oct 2008 23:47:22 +0100"  >&lt;p&gt;Attaching derby-481-02-aa-utilities.diff. This patch adds some small, miscellaneous support which will be turned on in later patches. Regression tests pass cleanly for me. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/util/StringUtil.java&lt;/p&gt;

&lt;p&gt;Added utility routine to stringify an int array.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages related to generated columns.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;A number of new test cases. New test cases are commented out right now but will be uncommented as we check in the functionality that they verify.&lt;/p&gt;</comment>
                            <comment id="12642454" author="rhillegas" created="Fri, 24 Oct 2008 13:51:34 +0100"  >&lt;p&gt;Committed derby-481-02-aa-utilities.diff at subversion revision 707619.&lt;/p&gt;</comment>
                            <comment id="12642530" author="rhillegas" created="Fri, 24 Oct 2008 21:13:58 +0100"  >&lt;p&gt;Attaching derby-481-03-aa-grammar.diff. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch does the following:&lt;/p&gt;

&lt;p&gt;1) Makes it possible to declare generated columns in CREATE TABLE statements.&lt;/p&gt;

&lt;p&gt;2) Adjusts the dblook tool to emit the correct DDL for tables with generated columns.&lt;/p&gt;

&lt;p&gt;3) Adds some basic syntax tests for CREATE TABLE statements which declare generated columns.&lt;/p&gt;

&lt;p&gt;4) Verifies that you can declare generated columns only after hard-upgrading to 10.5.&lt;/p&gt;


&lt;p&gt;I will file new JIRAs to track the following known deficiencies:&lt;/p&gt;

&lt;p&gt;A) You cannot add generated columns using ALTER TABLE yet. This behavior can not be tested until we check in the UPDATE logic for generated columns.&lt;/p&gt;

&lt;p&gt;B) The ANSI/ISO grammar lets you omit the column datatype on columns with generation clauses. The patch does not support this elegant shorthand.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;


&lt;p&gt;----------------&lt;br/&gt;
&amp;#8211; PARSING&lt;br/&gt;
----------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Wires GENERATED ALWAYS AS (...) into the CREATE/ALTER TABLE grammar. This bit of grammar is known in the SQL spec as a &quot;generation clause&quot;.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/C_NodeTypes.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/C_NodeNames.java&lt;br/&gt;
A      java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java&lt;br/&gt;
M     java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java&lt;/p&gt;

&lt;p&gt;Adds a new kind of Abstract Syntax Tree (AST) node to represent generation clauses. In the AST, generation clauses decorate column definitions.&lt;/p&gt;


&lt;p&gt;----------------&lt;br/&gt;
&amp;#8211; BINDING&lt;br/&gt;
----------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;/p&gt;

&lt;p&gt;Logic to drive the bind() phase for generation clauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/ValueNode.java&lt;/p&gt;

&lt;p&gt;Bind-time logic to prevent non-deterministic functions from appearing in generation clauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java&lt;/p&gt;

&lt;p&gt;Factored some very similar bind-time logic out of the AST nodes for CREATE and ALTER TABLE. Consolidated this logic in the superclass of these two nodes.&lt;/p&gt;


&lt;p&gt;----------------&lt;br/&gt;
&amp;#8211; TOOLS&lt;br/&gt;
----------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java&lt;br/&gt;
M      java/tools/org/apache/derby/impl/tools/dblook/DB_Table.java&lt;/p&gt;

&lt;p&gt;Code to make the dblook utility correctly emit generation clauses when printing CREATE TABLE statements.&lt;/p&gt;


&lt;p&gt;----------------&lt;br/&gt;
&amp;#8211; TESTS&lt;br/&gt;
----------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Uncomments the basic grammar tests. Adds a test to verify that generation clauses are correctly stored in SYSCOLUMNS.COLUMNDEFAULT.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_5.java&lt;/p&gt;

&lt;p&gt;Adds a test case to verify that you can declare generation clauses only after hard-upgrading to 10.5.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_makeDB.sql&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/dblook_test_net.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/dblook_test_net_territory.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/dblook_test_territory.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/dblook_test_net.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/dblook_test_net_territory.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/dblook_test.out&lt;/p&gt;

&lt;p&gt;Beefs up the dblook test with some examples of CREATE TABLE statements which have generation clauses.&lt;/p&gt;</comment>
                            <comment id="12642559" author="rhillegas" created="Fri, 24 Oct 2008 23:30:57 +0100"  >&lt;p&gt;Tests ran cleanly for me on the derby-481-03-aa-grammar.diff patch.&lt;/p&gt;</comment>
                            <comment id="12642572" author="bryanpendleton" created="Sat, 25 Oct 2008 00:42:50 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I read through the first 4 patches and they look very good to me. Thanks for the&lt;br/&gt;
effort in writing the comments and the tests.&lt;/p&gt;

&lt;p&gt;I was wondering if you could briefly outline how you expect the execution-time&lt;br/&gt;
logic to go: will we generate code to implement the generation expression?&lt;br/&gt;
Or will there be some sort of interpreter that runs as part of update processing&lt;br/&gt;
and interprets the generation expression?&lt;/p&gt;

&lt;p&gt;Also, when are the generated columns evaluated? Is it only when their value&lt;br/&gt;
is retrieved by a SELECT? Or is the generated column evaluated whenever&lt;br/&gt;
anything that it references is updated?&lt;/p&gt;

&lt;p&gt;So for example, if I have:&lt;br/&gt;
  create table bry (a int, b int, c int generated always as (2 * b))&lt;br/&gt;
then is the value of column c generated:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;only when c is selected?&lt;/li&gt;
	&lt;li&gt;when the value of b changes?&lt;/li&gt;
	&lt;li&gt;when the value of either a or b changes?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;
</comment>
                            <comment id="12642912" author="rhillegas" created="Mon, 27 Oct 2008 13:19:19 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Thanks for reading the patches. I appreciate having another set of eyes on this!&lt;/p&gt;

&lt;p&gt;I think that your questions will be addressed in the next couple of patches, which should introduce INSERT-time and UPDATE-time processing. In coding INSERT/UPDATE support, I took CHECK constraints as my model. This is what&apos;s going on in the prototype:&lt;/p&gt;

&lt;p&gt;When you INSERT into a table which has a generated column:&lt;/p&gt;

&lt;p&gt;1) During compilation, at generate() time, we build a function to evaluate the generation clause.&lt;/p&gt;

&lt;p&gt;2) At execution time, we run that function on every row that will be inserted into the table. The function runs AFTER the non-generated columns are populated but BEFORE we run triggers, enforce constraints, and build index rows. All of this happens before the base and index rows are handed to the Store.&lt;/p&gt;

&lt;p&gt;When you UPDATE a table which has a generated column:&lt;/p&gt;

&lt;p&gt;3) During compilation, at bind() time we determine whether we need to re-evaluate any of the generation clauses. We decide to re-generate a column if we see that one of the columns that it references is being changed. So in the example you gave, we would decide to re-generate c given the following update statement:&lt;/p&gt;

&lt;p&gt;  update bry set b = b + 3&lt;/p&gt;

&lt;p&gt;but we would decide NOT to re-generate c given the following update statement&lt;/p&gt;

&lt;p&gt;  update bry set a = a + 3&lt;/p&gt;

&lt;p&gt;4) At execution time, we run that function on every row that is being updated. As with INSERT, the function runs AFTER the non-generated columns are populated but BEFORE we run triggers, enforce constraints, and build index rows.&lt;/p&gt;

&lt;p&gt;That, at least, is how the prototype is supposed to work! So to answer your questions directly:&lt;/p&gt;

&lt;p&gt;A) Generation clauses are evaluated when you INSERT and UPDATE rows.&lt;/p&gt;

&lt;p&gt;B) For UPDATEs, we re-evaluate a generation clause only if we are changing one of the columns that it references.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12642953" author="rhillegas" created="Mon, 27 Oct 2008 16:26:52 +0000"  >&lt;p&gt;Commited derby-03-aa-grammar.diff at subversion revision 708169.&lt;/p&gt;</comment>
                            <comment id="12642956" author="rhillegas" created="Mon, 27 Oct 2008 16:30:46 +0000"  >&lt;p&gt;Attaching derby-481-04-aa-insert.diff. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch wires in INSERT support for generated columns. I threaded my way through the INSERT machinery largely by following the way that CHECK constraints are handled.&lt;/p&gt;

&lt;p&gt;Before this patch, the compiler built 2 significant methods for evaluating expressions:&lt;/p&gt;

&lt;p&gt;1) A method which populates the base row from whatever data source is driving the INSERT. That data source could be, for instance, a list of literal values or a SELECT statement.&lt;/p&gt;

&lt;p&gt;2) A method which runs the CHECK constraints.&lt;/p&gt;

&lt;p&gt;My first attempt to support INSERT involved building the generation clauses into method (1). Unfortunately, that method is generated by the data sources, not by the driving INSERT node. I got this approach to work for the degenerate case of inserting a single literal value. But this approach failed when I tried to insert multiple literal values (where the data source is a UNION) and it failed when the data source was a SELECT. It became apparent that this approach would involve wiring code-generation logic into all implementations of ResultSet--there are quite a few. This began to look too complicated so I abandoned this approach.&lt;/p&gt;

&lt;p&gt;The current patch represents a second attempt. Here the approach is to give the generation clauses their own method. Now the compiler builds 3 significant methods for evaluating expressions:&lt;/p&gt;

&lt;p&gt;1&apos;) The original method which populates the base row from a data source (see above).&lt;/p&gt;

&lt;p&gt;2&apos;) A new method which runs the generation clauses, looking for referenced columns in the row built by (1&apos;) and poking the generated values into that row.&lt;/p&gt;

&lt;p&gt;3&apos;) The original method which runs the CHECK constraints (see above).&lt;/p&gt;

&lt;p&gt;That was the tricky bit for compilation.&lt;/p&gt;

&lt;p&gt;The tricky bit for execution was this: the base row has to be poked into the Activation so that it is visible to the generation clauses when (2&apos;) runs. A similar poking is done for CHECK constraints. If you examine this poking for CHECK constraints, you will notice that sometimes the poking is undone after the constraints run and sometimes we don&apos;t bother to undo the poking. I don&apos;t understand the difference between these code paths. As a result, I have defensively coded the new poking which we need for generated columns. I poke the base row into the Activation just before the generation clauses run. After the generation clauses run, I return the Activation to its previous state.&lt;/p&gt;

&lt;p&gt;Here is a little more detail on the implementation:&lt;/p&gt;

&lt;p&gt;A) At bind() time we do the following:&lt;/p&gt;

&lt;p&gt;i) Prune out explicit mentions of generated columns. These can arise if the user sets a generated column to the literal DEFAULT--as allowed by the ANSI/ISO syntax. So for instance, the following is legal:&lt;/p&gt;

&lt;p&gt;  insert into T( refCol, generatedCol ) values ( 1, default )&lt;/p&gt;

&lt;p&gt;We prune out the explicitly added generated columns because, later on in the bind() phase, the insert list is expanded to include all columns with defaults (not just generated columns).&lt;/p&gt;

&lt;p&gt;ii) When the insert list is expanded to include all defaulted columns, we add in the generated columns but we don&apos;t bind their expressions. This is because the generation clause may refer to other columns in the base row. This, in turn, creates an ordering problem. In addition we we don&apos;t yet have a result set number for the base row--we need that number in order to bind references to other columns which may appear in the generation clauses.&lt;/p&gt;

&lt;p&gt;iii) Later on, just before we parse and bind the CHECK constraints, we parse and bind the generation clauses. At this point, we have enough context to bind the referenced columns.&lt;/p&gt;

&lt;p&gt;B) At generate() time, we generate method (2&apos;) in between generating (1&apos;) and (3&apos;). The generated (2&apos;) method is now one of the arguments to the factory method which creates the execution-driver, the InsertResultSet. This is just like what we do for CHECK constraints: the generated (3&apos;) method is also an argument to the instantiation of the InsertResultSet.&lt;/p&gt;

&lt;p&gt;C) At execution time, we evaluate (2&apos;) just before we evaluate (3&apos;).&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;br/&gt;
&amp;#8211; BINDING&lt;br/&gt;
--------------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java&lt;/p&gt;

&lt;p&gt;Adds a method so that a ResultColumn can report whether it represents a generated column. I also forced all overrides of the expression field to go through the setExpression() method. This, technically speaking, is not necessary--but it made debugging easier for me and I think it will be useful for other developers who need to debug this node.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;Changes are made to support both binding and code-generation. These are the bind() changes:&lt;/p&gt;

&lt;p&gt;i) Adds a method to object if the user tries to override the value in a generated column with any value other than the DEFAULT literal. For instance, the following is illegal:&lt;/p&gt;

&lt;p&gt;  insert into T( refCol, generatedCol ) values ( 1, 70 )&lt;/p&gt;

&lt;p&gt;In addition, we remove explicit mentions of generated columns because we will add them back when we enhance the INSERT statement with defaulted columns.&lt;/p&gt;

&lt;p&gt;ii) Adds logic to parse and bind generated columns. This is modelled on the logic which parses and binds CHECK constraints.&lt;/p&gt;

&lt;p&gt;iii) Renames bindCheckConstraint() to bindRowScopedExpression() because this method is now shared by the logic which binds CHECK constraints and the logic which binds generation clauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;/p&gt;

&lt;p&gt;Short-circuits the logic which enhances the base row with defaulted columns. Adds in the generated columns but does not add their generation clauses. This is because the clauses cannot be bound at the same time as the rest of the columns in the base row. We wait to bind them until the time that we bind CHECK constraints.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;/p&gt;

&lt;p&gt;Wires binding and code-generation calls into bindStatement() and generate().&lt;/p&gt;


&lt;p&gt;--------------------&lt;br/&gt;
&amp;#8211; CODE GENERATION&lt;br/&gt;
--------------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Skips code-generation for generated columns when walking the base row. The generateCore() method generates (1&apos;). We need to build the generation clauses into (2&apos;) instead and this is done later on.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;In addition to the bind() changes described above, adds logic to generate the (2&apos;) method.&lt;/p&gt;


&lt;p&gt;--------------------&lt;br/&gt;
&amp;#8211; EXECUTION&lt;br/&gt;
--------------------&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;/p&gt;

&lt;p&gt;Adds (2&apos;) as an argument to the factory method which instantiates InsertResultSets.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/Activation.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;/p&gt;

&lt;p&gt;Adds a method for retrieving the current row from the Activation. This allows us to return the Activation to its original state after we have run (2&apos;).&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;/p&gt;

&lt;p&gt;Evaluates generation clauses close to where CHECK constraints are evaluated.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Uncomments basic INSERT tests.&lt;/p&gt;</comment>
                            <comment id="12643073" author="rhillegas" created="Mon, 27 Oct 2008 21:50:38 +0000"  >&lt;p&gt;Tests pass cleanly for me on derby-481-04-aa-insert.diff.&lt;/p&gt;</comment>
                            <comment id="12643116" author="bryanpendleton" created="Tue, 28 Oct 2008 02:27:52 +0000"  >&lt;p&gt;Modeling the overall execution behaviors on CHECK constraints seems like&lt;br/&gt;
a reasonable approach to me. Thanks for taking the time to explain your&lt;br/&gt;
thinking. It seems like you&apos;ve found a couple of thorny implementation details,&lt;br/&gt;
your strategy of addressing them seems fine to me.&lt;/p&gt;</comment>
                            <comment id="12643195" author="rhillegas" created="Tue, 28 Oct 2008 13:10:53 +0000"  >&lt;p&gt;Thanks for puzzling through the patch summary, Bryan. I appreciate the sanity-check.  I committed derby-481-04-aa-insert.diff at subversion revision 708561.&lt;/p&gt;</comment>
                            <comment id="12643212" author="rhillegas" created="Tue, 28 Oct 2008 14:04:34 +0000"  >&lt;p&gt;Attaching derby-481-05-aa-update.diff, the last chunk from the prototype patch. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch wires in UPDATE support for generated columns. As with INSERT, I threaded my way through the UPDATE machinery largely by following the way that CHECK constraints are handled.&lt;/p&gt;

&lt;p&gt;UPDATE presents a couple extra issues in addition to the issues raised by INSERT:&lt;/p&gt;

&lt;p&gt;1) We don&apos;t have to enhance the target row with defaulted columns. Instead, we have to enhance the update list with all generated columns whose generation clauses reference columns in the update list.&lt;/p&gt;

&lt;p&gt;2) If a generated column is added to the update list, then the columns it references must be added to the list of columns which are read from the base row.&lt;/p&gt;

&lt;p&gt;3) The target row for UPDATE holds two copies of each column that either has to be written or read: the before value of the column and the after value. This gives rise to some trickiness.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;


&lt;p&gt;------------------------------------------------------------------&lt;br/&gt;
&amp;#8211; BINDING AND CODE GENERATION&lt;br/&gt;
------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;Adds generated columns to the update list if they are affected by the update. For all generated columns in the update list, adds the columns they reference to the list of columns to be read from disk. Forbids the setting of a generated column to anything except the DEFAULT literal. Generates a method to fill in computed columns at execution time--this is the (2&apos;) method described above in the summary of patch derby-04-aa-insert.diff.&lt;/p&gt;


&lt;p&gt;------------------------------------------------------------------&lt;br/&gt;
&amp;#8211; EXECUTION&lt;br/&gt;
------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;/p&gt;

&lt;p&gt;Adds the (2&apos;) method as an argument to the factory methods that create UpdateResultSets.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;Invokes (2&apos;) close to where we invoke (3&apos;) already.&lt;/p&gt;


&lt;p&gt;------------------------------------------------------------------&lt;br/&gt;
&amp;#8211; TESTS&lt;br/&gt;
------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Uncommented basic tests for updates. Uncommented basic tests for the interaction of generated columns with triggers and foreign keys.&lt;/p&gt;</comment>
                            <comment id="12643254" author="rhillegas" created="Tue, 28 Oct 2008 16:47:07 +0000"  >&lt;p&gt;Tests ran cleanly for me on the derby-481-05-aa-update.diff patch.&lt;/p&gt;</comment>
                            <comment id="12643479" author="rhillegas" created="Wed, 29 Oct 2008 13:08:00 +0000"  >&lt;p&gt;Committed derby-481-05-aa-update.diff at subversion revision 708900.&lt;/p&gt;</comment>
                            <comment id="12643991" author="rhillegas" created="Thu, 30 Oct 2008 15:18:58 +0000"  >&lt;p&gt;Attaching derby-481-06-aa-genReferences.diff. This patch makes it illegal for generated columns to reference other generated columns, per the functional spec. Running regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;Adds some small helper methods to assist the machinery in TableElementList.bindAndValidateGenerationClauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;/p&gt;

&lt;p&gt;Adds logic to raise an exception if a generation clause mentions generated columns.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java&lt;/p&gt;

&lt;p&gt;Adds new argument to calls to TableElementList.bindAndValidateGenerationClauses.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds new error message raised when generation clauses reference generated columns.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds tests for this behavior. While I was in there, I added tests to verify some other functionality: generation clauses can&apos;t reference other tables or run subqueries.&lt;/p&gt;</comment>
                            <comment id="12644058" author="rhillegas" created="Thu, 30 Oct 2008 18:09:53 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-481-06-aa-genReferences.diff. Committed at subversion revision 709219.&lt;/p&gt;</comment>
                            <comment id="12644109" author="rhillegas" created="Thu, 30 Oct 2008 21:09:05 +0000"  >&lt;p&gt;Attaching derby-481-07-aa-noSQLinRoutines.diff. Tests are running now. This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Rejects generation clauses which contain user functions which may contain SQL, per the functional spec.&lt;/p&gt;

&lt;p&gt;2) Adds tests for the above change.&lt;/p&gt;

&lt;p&gt;3) Adds tests to verify that aggregates are not allowed in generation clauses.&lt;/p&gt;

&lt;p&gt;4) Adds tests to verify that generation clauses may not contain unstable system functions like current_user (the functions listed in Appendix A of the functional spec). Tests don&apos;t yet verify that you can&apos;t include current_role--to test that we need another test which runs with authorization turned on.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds new error message which objects that generation clauses may not contain sql-issuing functions.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/compile/CompilerContext.java&lt;/p&gt;

&lt;p&gt;Wires in the prohibition in (1).&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds new tests.&lt;/p&gt;</comment>
                            <comment id="12644294" author="rhillegas" created="Fri, 31 Oct 2008 13:54:44 +0000"  >&lt;p&gt;Attaching derby-481-07-ab-noSQLinRoutines.diff. This is identical to the previous patch except that it adds negative tests for MAX, MIN, and COUNT aggregates in generation clauses. Tests run cleanly for me. Committed at subversion revision 709415.&lt;/p&gt;</comment>
                            <comment id="12644366" author="dagw" created="Fri, 31 Oct 2008 17:19:07 +0000"  >&lt;p&gt;Started playing a bit with generated columns, this behavior seems wrong?&lt;/p&gt;

&lt;p&gt;create table bar (i int, j int generated always as (-i));&lt;br/&gt;
insert into bar(i,j) values (1, default); &amp;#8211; works&lt;br/&gt;
insert into bar values (2, default); &amp;#8211; fails trying to bind &quot;i&quot;&lt;/p&gt;

&lt;p&gt;ERROR 42X04: Column &apos;I&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;I&apos; is not a column in the target table.&lt;/p&gt;</comment>
                            <comment id="12644368" author="dagw" created="Fri, 31 Oct 2008 17:24:45 +0000"  >&lt;p&gt;I tried this fragment which seems to be forbidden by section 11.8, SR 12a), p.549:&lt;/p&gt;

&lt;p&gt;create table bar2 (i int, j int generated always as (i*2) references foo&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; on delete set null);&lt;/p&gt;

&lt;p&gt;The &quot;set null&quot; part here is not flagged, but probably should be (conflict with generated clause)?&lt;br/&gt;
 Sorry if this is pending work, I am just working my way through the standard &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</comment>
                            <comment id="12644374" author="rhillegas" created="Fri, 31 Oct 2008 17:39:53 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for digging into this!&lt;/p&gt;

&lt;p&gt;1) &quot;insert into bar values (2, default); &amp;#8211; fails trying to bind &quot;i&quot; &quot; - This looks like a bug to me.&lt;/p&gt;

&lt;p&gt;2) I didn&apos;t notice section 11.8, SR 12a) when I wrote the functional spec. I should add that to the functional spec and make sure that those cases are forbidden.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12644382" author="rhillegas" created="Fri, 31 Oct 2008 18:06:23 +0000"  >&lt;p&gt;Attaching derby-481-08-aa-castToDeclaredType.diff. Running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch adds a run-time cast on top of the generation clause in order to guarantee that generation clauses are correctly converted to the declared type of their columns per the functional spec. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;Adds the cast.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds tests verifying that generation clauses are correctly assigned to declared types for all of the assignments documented in the Reference Guide section titled &quot;Data type assignments and comparison, sorting, and ordering&quot;.&lt;/p&gt;</comment>
                            <comment id="12644436" author="rhillegas" created="Fri, 31 Oct 2008 21:44:58 +0000"  >&lt;p&gt;Tests ran cleanly for me on derby-481-aa-castToDeclaredType.diff. Committed at subversion revision 709577.&lt;/p&gt;</comment>
                            <comment id="12644440" author="rhillegas" created="Fri, 31 Oct 2008 21:59:56 +0000"  >&lt;p&gt;Attaching derby-481-09-aa-dummyDefaults.diff. This patch addresses a bug found by Dag: If you tried to poke the literal DEFAULT into a generated column using an INSERT without a target list (meaning all values in the row had to be specified), then we bombed trying to bind the generation clause prematurely.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;At the point where we substitute default values for DEFAULT literals, we just substitute an untyped NULL for generation clauses. Later on, when we have enough context to bind the generation clauses, we replace these NULLs with the actual generation clauses.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Tests for the problem case which Dag found.&lt;/p&gt;</comment>
                            <comment id="12644732" author="rhillegas" created="Mon, 3 Nov 2008 14:45:58 +0000"  >&lt;p&gt;Tests ran cleanly for me on derby-481-09-aa-dummyDefaults.diff. Committed at subversion revision 710071.&lt;/p&gt;</comment>
                            <comment id="12644779" author="rhillegas" created="Mon, 3 Nov 2008 18:57:27 +0000"  >&lt;p&gt;Attaching derby-481-10-aa-foreignKeyActions.diff. Running tests now. This patch addresses the second issue which Dag raised, preventing users from adding foreign keys on generated columns when the foreign keys have SET NULL or SET DEFAULT delete actions.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;/p&gt;

&lt;p&gt;Adds a method to identify and raise exceptions on these forbidden foreign keys.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java&lt;/p&gt;

&lt;p&gt;Wires the new method into the bind-time logic for CREATE/ALTER TABLE.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds a new error message for the illegal foreign keys.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds tests for the illegal foreign keys.&lt;/p&gt;</comment>
                            <comment id="12644807" author="rhillegas" created="Mon, 3 Nov 2008 21:02:42 +0000"  >&lt;p&gt;Tests ran cleanly for me on deby-481-10-aa-foreignKeyActions.diff.&lt;/p&gt;</comment>
                            <comment id="12644859" author="rhillegas" created="Tue, 4 Nov 2008 00:12:25 +0000"  >&lt;p&gt;Committed derby-481-10-aa-foreignKeyActions.diff at subversion revision 711135.&lt;/p&gt;</comment>
                            <comment id="12645078" author="rhillegas" created="Tue, 4 Nov 2008 21:05:32 +0000"  >&lt;p&gt;Attaching derby-481-11-aa-notNull.diff. Running tests now. This patch adds support for NOT NULL constraints on generated columns. Makes the following changes:&lt;/p&gt;

&lt;p&gt;A) Exposes the &quot;normalization&quot; logic in NormalizeResultSet and applies this logic to generated columns. This logic is what enforces NOT NULL constraints. This logic was already being called by the INSERT and UPDATE execution-time logic after populating the target row. Using the terms introduced above with the summary of patch derby-481-04-aa-insert.diff: the normalization logic was being called immediately after (1&apos;) executed but it wasn&apos;t being called after (2&apos;) was executed. Now this logic is also called on generated columns after they are populated--that is, after (2&apos;) runs.&lt;/p&gt;

&lt;p&gt;B) Loosens a condition which prevents ALTER TABLE from adding new columns which don&apos;t have DEFAULT clauses. Now it&apos;s ok to add these clauses with NOT NULL if they are generated columns.&lt;/p&gt;

&lt;p&gt;C) Adds some tests to verify (A) and (B).&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java&lt;/p&gt;

&lt;p&gt;Exposes the &quot;normalization&quot; logic which is called after (1&apos;) runs.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/ResultColumnDescriptor.java&lt;/p&gt;

&lt;p&gt;Adds a new method to ResultColumnDescriptors so that they can be asked whether they represent generated columns. This is useful so that we only call the normalization logic on generated columns rather than all columns in the target row.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;/p&gt;

&lt;p&gt;Calls the normalization logic on generated columns just after (2&apos;) runs. Slightly changes the signature of evaluateGenerationClauses().&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;Reworks calls to evaluateGenerationClauses().&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java&lt;/p&gt;

&lt;p&gt;Changes the ALTER TABLE logic for (B).&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds new tests.&lt;/p&gt;</comment>
                            <comment id="12645225" author="rhillegas" created="Wed, 5 Nov 2008 14:20:29 +0000"  >&lt;p&gt;Tests against derby-481-11-aa-notNull.diff ran cleanly for me except for the heisenbugs in StressMultiTest. Committed at subversion revision 711571.&lt;/p&gt;</comment>
                            <comment id="12645234" author="rhillegas" created="Wed, 5 Nov 2008 14:55:06 +0000"  >&lt;p&gt;Attaching derby-481-12-aa-padding.diff. This adds some more tests of generated columns involving different length character and numeric columns. Committed at subversion revision 711579. Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;</comment>
                            <comment id="12645295" author="rhillegas" created="Wed, 5 Nov 2008 19:11:10 +0000"  >&lt;p&gt;Attaching derby-481-13-aa-alterDatatype.diff. This patch adds tests for changing the datatype of generated columns and of the columns they reference. Committed at subversion revision 711663.&lt;/p&gt;</comment>
                            <comment id="12645854" author="rhillegas" created="Fri, 7 Nov 2008 19:10:40 +0000"  >&lt;p&gt;Attaching derby-481-14-ab-dropColumn.diff. Running tests now. This patch implements CASCADEd and RESTRICTed drops of columns which are referenced by generated columns, per the spec. In short, if a generated column depends on the column being dropped, then RESTRICT aborts the drop and CASCADE causes the generated column to be dropped along with the original column. Makes the following changes:&lt;/p&gt;

&lt;p&gt;A) Reworks the implementation of the default descriptor so that it contains an array of referenced column names rather than column positions. This eliminates the need to remap those column positions when other columns are dropped.&lt;/p&gt;

&lt;p&gt;B) Makes the drop column logic recursively call itself for generated columns which depend on the original column being dropped.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/catalog/DefaultInfo.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java&lt;/p&gt;

&lt;p&gt;Changes to the default descriptor needed for (A).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;Accomodations for (A) in code which uses default descriptors.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java&lt;/p&gt;

&lt;p&gt;Reworks dropColumnFromTable() so that it calls itself on affected generated columns.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message and warning.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;New tests for ALTER TABLE DROP COLUMN scenarios involving generated columns.&lt;/p&gt;</comment>
                            <comment id="12645891" author="rhillegas" created="Fri, 7 Nov 2008 22:14:28 +0000"  >&lt;p&gt;Tests ran cleanly for me on derby-481-14-ab-dropColumn.diff except for 4 errors. These errors were in ClobUpdatableReaderTest, NetworkServerMBeanTest, and StressMultiTest. I think these are either errors introduced by recent submissions or outstanding heisenbugs:&lt;/p&gt;

&lt;p&gt;There were 4 errors:&lt;br/&gt;
1) testUpdateableStoreReader(org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest)java.sql.SQLException: Java exception: &apos;Bad file descriptor: java.io.IOException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(EmbedConnection.java:3097)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.rollback(EmbedConnection.java:1765)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.rollback(BaseJDBCTestCase.java:378)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.tearDown(ClobUpdatableReaderTest.java:304)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.io.IOException: Bad file descriptor&lt;br/&gt;
	at java.io.RandomAccessFile.close0(Native Method)&lt;br/&gt;
	at java.io.RandomAccessFile.close(RandomAccessFile.java:532)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.LOBFile.close(LOBFile.java:148)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(EmbedConnection.java:3095)&lt;br/&gt;
	... 29 more&lt;br/&gt;
2) testUpdateableReader(org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest)java.sql.SQLException: Table/View &apos;UPDATECLOB&apos; already exists in Schema &apos;APP&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.setUp(ClobUpdatableReaderTest.java:284)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: ERROR X0Y32: Table/View &apos;UPDATECLOB&apos; already exists in Schema &apos;APP&apos;.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:373)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(DataDictionaryImpl.java:1817)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(DataDictionaryImpl.java:1808)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(CreateTableConstantAction.java:238)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 29 more&lt;br/&gt;
3) testMultiplexedOperationProblem(org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest)java.sql.SQLException: Table/View &apos;UPDATECLOB&apos; already exists in Schema &apos;APP&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.setUp(ClobUpdatableReaderTest.java:284)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: ERROR X0Y32: Table/View &apos;UPDATECLOB&apos; already exists in Schema &apos;APP&apos;.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:373)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(DataDictionaryImpl.java:1817)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(DataDictionaryImpl.java:1808)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(CreateTableConstantAction.java:238)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 29 more&lt;br/&gt;
4) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011d-78ed-5899-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011d-78ed-5899-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) testStressMulti(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest)junit.framework.AssertionFailedError: Caused by: &lt;br/&gt;
java.sql.SQLException: Java exception: &apos;ASSERT FAILED transaction table has null entry: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4321)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:463)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:367)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertDrainResults(JDBC.java:627)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertDrainResults(JDBC.java:604)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest$StressMultiRunnable.select(StressMultiTest.java:536)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest$StressMultiRunnable.run(StressMultiTest.java:409)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:613)&lt;br/&gt;
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED transaction table has null entry&lt;br/&gt;
	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.TransactionTable.getTransactionInfo(TransactionTable.java:968)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.XactFactory.getTransactionInfo(XactFactory.java:991)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.getTransactionInfo(RawStore.java:1158)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.getTransactionInfo(RAMAccessManager.java:912)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.Deadlock.buildException(Deadlock.java:266)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:613)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.zeroDurationLockObject(ConcurrentLockSet.java:855)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.AbstractPool.zeroDurationlockObject(AbstractPool.java:297)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(RowLocking2nohold.java:89)&lt;br/&gt;
	at org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForRead(OpenConglomerate.java:436)&lt;br/&gt;
	at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:683)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(HeapScan.java:324)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray(BulkTableScanResultSet.java:327)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore(BulkTableScanResultSet.java:282)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423)&lt;br/&gt;
	... 6 more&lt;/p&gt;

&lt;p&gt;	at org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.handleException(StressMultiTest.java:331)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest.access$200(StressMultiTest.java:70)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest$StressMultiRunnable.run(StressMultiTest.java:425)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:613)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 8888,  Failures: 1,  Errors: 4&lt;/p&gt;</comment>
                            <comment id="12645988" author="rhillegas" created="Sat, 8 Nov 2008 15:03:54 +0000"  >&lt;p&gt;Committed derby-481-14-ab-dropColumn.diff at subversion revision 712400.&lt;/p&gt;</comment>
                            <comment id="12646271" author="rhillegas" created="Mon, 10 Nov 2008 14:30:50 +0000"  >&lt;p&gt;Attaching derby-481-15-aa-renameAndAddDefault.diff. Tests ran cleanly for me. Committed at subversion revision 712664.&lt;/p&gt;

&lt;p&gt;This patch makes two changes, per the spec:&lt;/p&gt;

&lt;p&gt;A) Prevents users from renaming columns which are referenced by generation clauses.&lt;/p&gt;

&lt;p&gt;B) Prevents users from using ALTER TABLE to add defaults to generated columns. Note that the parser already prevents you from adding defaults to generated columns via CREATE TABLE.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/RenameNode.java&lt;/p&gt;

&lt;p&gt;Raises an error if you try to rename a column referenced by a generation clause.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java&lt;/p&gt;

&lt;p&gt;Raises an error if you try to add a default to a generated column.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages for the newly forbidden conditions.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;</comment>
                            <comment id="12646329" author="rhillegas" created="Mon, 10 Nov 2008 19:10:10 +0000"  >&lt;p&gt;Attaching derby-481-16-aa-dropFunction.diff. Running tests now. This patch prevents you from dropping a function mentioned in a generation clause, per the spec.&lt;/p&gt;

&lt;p&gt;The patch builds on the fact that generation clauses are implemented as a kind of default. Defaults, in turn, are a persistent object for which we already have good support in our dependency subsystem.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/ColumnInfo.java&lt;/p&gt;

&lt;p&gt;Adds dependency information to this  driving data structure.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;/p&gt;

&lt;p&gt;Adds bind-time logic to fill the ColumnInfo with the dependencies of generated columns. These dependencies were already being identified but the information was being thrown on the floor.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/AlterTableNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateViewNode.java&lt;/p&gt;

&lt;p&gt;Adds execution-time logic to hammer the dependencies into SYS.SYSDEPENDS. The enforcement of the dependencies is handled by existing machinery in the dependency subsystem.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;p&gt;Adds test cases.&lt;/p&gt;</comment>
                            <comment id="12646369" author="rhillegas" created="Mon, 10 Nov 2008 21:32:32 +0000"  >&lt;p&gt;Tests ran cleanly for me on derby-481-16-aa-dropFunction.diff. Committed at subversion revision 712840.&lt;/p&gt;</comment>
                            <comment id="12646915" author="dagw" created="Wed, 12 Nov 2008 14:50:42 +0000"  >&lt;p&gt;I am trying to understand if the following is allowed by the standard:&lt;br/&gt;
Assume this ij fragment:&lt;/p&gt;

&lt;p&gt;&amp;gt; create table t (i int, j int, k int generated always as (-j));&lt;br/&gt;
&amp;gt; create function myfunc (i int) returns int language java external name &lt;br/&gt;
&amp;gt;        &apos;M.myfunc&apos; parameter style java;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; insert into t values (1,2,default), (3,4,default);&lt;br/&gt;
&amp;gt; create trigger tr no cascade before update on t &lt;br/&gt;
&amp;gt;        referencing new as new  for each row values myfunc(new.k);&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; update t set j=10 where i=1;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; // myfunc prints -10 here&lt;/p&gt;

&lt;p&gt;In the standard, section 11.39, SR 12 c) I see this provision:&lt;/p&gt;

&lt;p&gt;   12) If BEFORE is specified, then:&lt;br/&gt;
     :&lt;br/&gt;
     c) The &amp;lt;triggered action&amp;gt; shall not contain a &amp;lt;field reference&amp;gt; that&lt;br/&gt;
     references a field in the new transition variable corresponding to a&lt;br/&gt;
     generated column of T.&lt;/p&gt;

&lt;p&gt;It would seem that the reference to k is illegal here. What do you&lt;br/&gt;
think? Not sure I understand why this should be prohibited, though....&lt;/p&gt;</comment>
                            <comment id="12646929" author="rhillegas" created="Wed, 12 Nov 2008 15:30:14 +0000"  >&lt;p&gt;Thanks for finding this issue with BEFORE triggers, Dag. I don&apos;t understand why the standard forbids these references in BEFORE triggers. This would be a good question to ask the SQL committee. I think we should follow the standard here. We can relax this restriction later if we come to understand that it really is harmless.&lt;/p&gt;</comment>
                            <comment id="12646973" author="dagw" created="Wed, 12 Nov 2008 17:49:15 +0000"  >&lt;p&gt;I agree.&lt;/p&gt;

&lt;p&gt;Another thing:&lt;/p&gt;

&lt;p&gt;What is the correct behavior for this case? Here the generation&lt;br/&gt;
expression needs a privilege which gets revoked...&lt;/p&gt;

&lt;p&gt;ij(CONNECTION0)&amp;gt; create table t (i int, j int, k int generated always as (dag.myfunc(j)));&lt;br/&gt;
ERROR 42504: User &apos;KNUT&apos; does not have execute permission on FUNCTION &apos;DAG&apos;.&apos;MYFUNC&apos;.&lt;br/&gt;
ij(CONNECTION0)&amp;gt; set role bar; &amp;#8211; this role has the privilege and is granted to KNUT earlier&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(CONNECTION0)&amp;gt; create table t (i int, j int, k int generated always as (dag.myfunc(j)));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(CONNECTION0)&amp;gt; set connection connection1;&lt;br/&gt;
ij(CONNECTION1)&amp;gt; revoke bar from knut;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(CONNECTION1)&amp;gt; set connection connection0;&lt;br/&gt;
ij(CONNECTION0)&amp;gt; insert into t values (1,2,default);&lt;br/&gt;
ERROR 42504: User &apos;KNUT&apos; does not have execute permission on FUNCTION &apos;DAG&apos;.&apos;MYFUNC&apos;.&lt;/p&gt;

&lt;p&gt;Triggers, view and constraints in similar circumstances get dropped; should the generated column get dropped too?&lt;/p&gt;</comment>
                            <comment id="12647146" author="dagw" created="Thu, 13 Nov 2008 00:59:44 +0000"  >&lt;p&gt;Is this the right behavior? It seems a bit non-intuitive to require the&lt;br/&gt;
result set inserted to have two columns when only one is used anyway...&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table a(i int, j int generated always as (-i));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table b(i int, j int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into b values  (1,1);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into a select * from b;&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from a;&lt;br/&gt;
I          |J          &lt;br/&gt;
-----------------------&lt;br/&gt;
1          |-1         &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; insert into a select i from b;&lt;br/&gt;
ERROR 42802: The number of values assigned is not the same as the number of specified or implied columns.&lt;br/&gt;
ij&amp;gt; insert into a select i,0 from b;&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from a;&lt;br/&gt;
I          |J          &lt;br/&gt;
-----------------------&lt;br/&gt;
1          |-1         &lt;br/&gt;
1          |-1         &lt;/p&gt;

&lt;p&gt;2 rows selected&lt;/p&gt;</comment>
                            <comment id="12647156" author="dagw" created="Thu, 13 Nov 2008 01:58:17 +0000"  >&lt;p&gt;Looked at derby-481-01-aa-catalog.diff, looks good. Only&lt;br/&gt;
small notes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;weird indentation for variable &quot;count&quot; in getGeneratedColumns&lt;/li&gt;
	&lt;li&gt;In DefaultInfoImpl, specify BITS_MASK_IS_GENERATED_COLUMN as = 0x1 &amp;lt;&amp;lt; 1 to follow&lt;br/&gt;
  pattern ?&lt;/li&gt;
	&lt;li&gt;New DefaultInfoImpl constructor has weird indentation for&lt;br/&gt;
  referencedColumnIDs arg.&lt;/li&gt;
	&lt;li&gt;Lines &amp;gt; 80 chars&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12647275" author="knutanders" created="Thu, 13 Nov 2008 12:49:26 +0000"  >&lt;p&gt;&amp;gt; Is this the right behavior?&lt;/p&gt;

&lt;p&gt;I would have expected that attempts to set a column which is GENERATED&lt;br/&gt;
ALWAYS AS failed. Similarly to what happens if you try to specify the&lt;br/&gt;
value of an identity column (GENERATED ALWAYS AS IDENTITY):&lt;/p&gt;

&lt;p&gt;ij&amp;gt; insert into tt select * from b;&lt;br/&gt;
ERROR 42Z23: Attempt to modify an identity column &apos;B&apos;. &lt;/p&gt;

&lt;p&gt;&amp;gt; It seems a bit non-intuitive to require the&lt;br/&gt;
&amp;gt; result set inserted to have two columns when only one is used anyway...&lt;/p&gt;

&lt;p&gt;Note that you could specify that you only set some of the columns in&lt;br/&gt;
the insert (again similarly to how you&apos;d do it if you had an identity&lt;br/&gt;
column):&lt;/p&gt;

&lt;p&gt;  insert into a&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; select i from b&lt;/p&gt;</comment>
                            <comment id="12647290" author="dagw" created="Thu, 13 Nov 2008 13:47:28 +0000"  >&lt;p&gt;Knut&amp;gt; I would have expected that attempts to set a column which is&lt;br/&gt;
Knut&amp;gt; GENERATED ALWAYS AS failed. &lt;/p&gt;

&lt;p&gt;Yes. Note, though, that the generated column gets the correct&lt;br/&gt;
(generated) value, Derby presently just requires the number of columns&lt;br/&gt;
to be 2, the last (2nd) column in the RS is discarded...&lt;/p&gt;

&lt;p&gt;Knut&amp;gt; insert into a&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; select i from b&lt;/p&gt;

&lt;p&gt;Yes, I was just wondering if the column specification could be dropped&lt;br/&gt;
legally in this case or not. If yes, the required result set should&lt;br/&gt;
have 1, not 2 columns. But it might be column indication is always&lt;br/&gt;
required here.&lt;/p&gt;</comment>
                            <comment id="12647291" author="rhillegas" created="Thu, 13 Nov 2008 13:48:32 +0000"  >&lt;p&gt;Thanks for your comments, Dag and Knut. Knut is right, the following statements should fail because we are trying to override a generation clause:&lt;/p&gt;

&lt;p&gt;insert into a select * from b;&lt;br/&gt;
insert into a select i,0 from b;&lt;/p&gt;

&lt;p&gt;Thanks for finding these problems.&lt;/p&gt;</comment>
                            <comment id="12647466" author="dagw" created="Thu, 13 Nov 2008 23:43:04 +0000"  >&lt;p&gt;I read the specification again, clear and easy to read!&lt;/p&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Overview&lt;br/&gt;
  2nd sentence. Maybe add ALTER TABLE as well.&lt;br/&gt;
  3rd sentence. &quot;The user declares&quot; -&amp;gt; &quot;The user can declare&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SQL standard:&lt;br/&gt;
  Add sections 11.8, 11.39&lt;br/&gt;
  Reference to section 14.18 should be to 11.18, I think&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;syntax:&lt;br/&gt;
  generation-clause ::= GENERATED ALWAYS ( value-expression )
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;
										&lt;ul&gt;
											&lt;li&gt;
											&lt;ul&gt;
												&lt;li&gt;
												&lt;ul&gt;
													&lt;li&gt;
													&lt;ul&gt;
														&lt;li&gt;
														&lt;ul&gt;
															&lt;li&gt;
															&lt;ul&gt;
																&lt;li&gt;
																&lt;ul&gt;
																	&lt;li&gt;
																	&lt;ul&gt;
																		&lt;li&gt;
																		&lt;ul&gt;
																			&lt;li&gt;
																			&lt;ul&gt;
																				&lt;li&gt;
																				&lt;ul&gt;
																					&lt;li&gt;
																					&lt;ul&gt;
																						&lt;li&gt;
																						&lt;ul&gt;
																							&lt;li&gt;
																							&lt;ul&gt;
																								&lt;li&gt;
																								&lt;ul&gt;
																									&lt;li&gt;
																									&lt;ul&gt;
																										&lt;li&gt;
																										&lt;ul&gt;
																											&lt;li&gt;
																											&lt;ul&gt;
																												&lt;li&gt;
																												&lt;ul&gt;
																													&lt;li&gt;
																													&lt;ul&gt;
																														&lt;li&gt;
																														&lt;ul&gt;
																															&lt;li&gt;
																															&lt;ul&gt;
																																&lt;li&gt;
																																&lt;ul&gt;
																																	&lt;li&gt;
																																	&lt;ul&gt;
																																		&lt;li&gt;
																																		&lt;ul&gt;
																																			&lt;li&gt;
																																			&lt;ul&gt;
																																				&lt;li&gt;
																																				&lt;ul&gt;
																																					&lt;li&gt;&quot;AS&quot; keyword required after ALWAYS but missing&lt;/li&gt;
																																				&lt;/ul&gt;
																																				&lt;/li&gt;
																																			&lt;/ul&gt;
																																			&lt;/li&gt;
																																		&lt;/ul&gt;
																																		&lt;/li&gt;
																																	&lt;/ul&gt;
																																	&lt;/li&gt;
																																&lt;/ul&gt;
																																&lt;/li&gt;
																															&lt;/ul&gt;
																															&lt;/li&gt;
																														&lt;/ul&gt;
																														&lt;/li&gt;
																													&lt;/ul&gt;
																													&lt;/li&gt;
																												&lt;/ul&gt;
																												&lt;/li&gt;
																											&lt;/ul&gt;
																											&lt;/li&gt;
																										&lt;/ul&gt;
																										&lt;/li&gt;
																									&lt;/ul&gt;
																									&lt;/li&gt;
																								&lt;/ul&gt;
																								&lt;/li&gt;
																							&lt;/ul&gt;
																							&lt;/li&gt;
																						&lt;/ul&gt;
																						&lt;/li&gt;
																					&lt;/ul&gt;
																					&lt;/li&gt;
																				&lt;/ul&gt;
																				&lt;/li&gt;
																			&lt;/ul&gt;
																			&lt;/li&gt;
																		&lt;/ul&gt;
																		&lt;/li&gt;
																	&lt;/ul&gt;
																	&lt;/li&gt;
																&lt;/ul&gt;
																&lt;/li&gt;
															&lt;/ul&gt;
															&lt;/li&gt;
														&lt;/ul&gt;
														&lt;/li&gt;
													&lt;/ul&gt;
													&lt;/li&gt;
												&lt;/ul&gt;
												&lt;/li&gt;
											&lt;/ul&gt;
											&lt;/li&gt;
										&lt;/ul&gt;
										&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SYSCOLUMNS:&lt;br/&gt;
  no new column was added, so I guess this section should be modified to&lt;br/&gt;
  reflect the implementation now?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  If we decide REVOKE execute privilege from &amp;lt;role&amp;gt; will impact functions&lt;br/&gt;
  references in generated columns (as in dropping them), this should probably be documented&lt;br/&gt;
  along with the new doc for REVOKE &amp;lt;priv&amp;gt; from &amp;lt;role&amp;gt; and DROP&lt;br/&gt;
  &amp;lt;role&amp;gt;.&lt;/p&gt;

&lt;p&gt;  Add note in INSERT on the use of &quot;default&quot;, perhaps?&lt;/p&gt;

&lt;p&gt;Appendix A: Possibly Non-deterministic System Functions&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add CURRENT SCHEMA&lt;/li&gt;
	&lt;li&gt;add CURRENT SQLID&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12647470" author="dagw" created="Thu, 13 Nov 2008 23:50:51 +0000"  >&lt;p&gt;Reviewing patch derby-481-02-aa-utilities.diff.&lt;/p&gt;

&lt;p&gt;Patch looks good to me. Some small notes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;javadoc for StringUtil#stringify: would be nice to specify the format of&lt;br/&gt;
  the output: Some such:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  &apos;null&apos; | &apos;[ &apos; [ &amp;lt;decimal int&amp;gt; &lt;/p&gt;
{ &apos;, &apos; &amp;lt;decimal int&amp;gt; }
&lt;p&gt;* ] &apos; ]&apos;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GeneratedColumnsTest#expectExecutionError: closing of ps is missing&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GeneratedColumnsTest#assertResults&lt;br/&gt;
    :&lt;br/&gt;
    assertEquals( (expectedValue == null), rs.wasNull() );&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if ( expectedValue == null )    &lt;/p&gt;
{ assertNull( actualValue ); }

&lt;p&gt;  Isn&apos;t the latter assert redundant after the first assert?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GeneratedColumnsTest: lines &amp;gt; 80 long&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SQLState.java: it would look better to align the values for the new&lt;br/&gt;
  errors with the existing declarations (in column 72).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I didn&apos;t check the commented out new code much, since its not live yet.&lt;/p&gt;</comment>
                            <comment id="12647571" author="knutanders" created="Fri, 14 Nov 2008 10:32:36 +0000"  >&lt;p&gt;&amp;gt; - javadoc for StringUtil#stringify: would be nice to specify the format of&lt;br/&gt;
&amp;gt;   the output: Some such:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   &apos;null&apos; | &apos;[ &apos; [ &amp;lt;decimal int&amp;gt; &lt;/p&gt;
{ &apos;, &apos; &amp;lt;decimal int&amp;gt; }
&lt;p&gt;* ] &apos; ]&apos;&lt;/p&gt;

&lt;p&gt;Except for the space after the opening bracket and before the closing&lt;br/&gt;
bracket, the format is identical to what you get from&lt;br/&gt;
java.util.Arrays.toString(int[]), which is not available prior to Java&lt;br/&gt;
1.5. Perhaps it&apos;s better just to document that it should return the&lt;br/&gt;
same as Arrays.toString() so that we can replace it with a call to the&lt;br/&gt;
standard library once we move to Java 1.5. Currently, the the method&lt;br/&gt;
is only used by test code, so maybe it should be moved out of the&lt;br/&gt;
production jars?&lt;/p&gt;

&lt;p&gt;&amp;gt; - GeneratedColumnsTest#expectExecutionError: closing of ps is missing&lt;/p&gt;

&lt;p&gt;Or even better: use BaseJDBCTestCase.prepareStatement() instead of&lt;br/&gt;
Connection.prepareStatement(). Then you get automatic cleanup in&lt;br/&gt;
tearDown().&lt;/p&gt;</comment>
                            <comment id="12647578" author="knutanders" created="Fri, 14 Nov 2008 10:58:34 +0000"  >&lt;p&gt;All callers of StringUtil.stringify() were removed in derby-481-14-ab-dropColumn.diff, so we might just as well remove the method now.&lt;/p&gt;</comment>
                            <comment id="12647717" author="rhillegas" created="Fri, 14 Nov 2008 20:47:36 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for your continued attention to this issue. I am catching up with some of your comments now. This is reference to the role-related question you asked on 12/Nov/08 09:49 AM. I think that if views are supposed to be dropped because an underlying, role-based permission has vanished, then tables should also be dropped if they require a role-based permission that has vanished. I am going to create an issue to track this. If you think this is not the correct behavior, please elaborate. Thanks.&lt;/p&gt;</comment>
                            <comment id="12647730" author="rhillegas" created="Fri, 14 Nov 2008 21:46:45 +0000"  >&lt;p&gt;Attaching a revised version of the functional spec, addressing Dag&apos;s comments. Thanks, Dag!&lt;/p&gt;</comment>
                            <comment id="12647756" author="rhillegas" created="Fri, 14 Nov 2008 23:32:17 +0000"  >&lt;p&gt;Attaching derby-481-17-aa-currentSchema.diff which adds test to GeneratedColumnsTest to verify that generation clauses can&apos;t mention unstable system functions  CURRENT SCHEMA and CURRENT SQLID. Committed at subversion revision 714188.&lt;/p&gt;</comment>
                            <comment id="12647780" author="dagw" created="Sat, 15 Nov 2008 01:04:37 +0000"  >&lt;p&gt;Reviewed derby-481-03-aa-grammar.diff, looks good! Interesting to see more of the compile-time&lt;br/&gt;
mechinery involved here.&lt;/p&gt;

&lt;p&gt;Minor notes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;DDLStatementNode.java&lt;br/&gt;
makeFromList javadoc misses @param for 2 parameters&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TableElementList.java&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This comment in bindAndValidateGenerationClauses is a cut/paste palimpsest:&lt;br/&gt;
  // bind the check condition&lt;br/&gt;
  // verify that it evaluates to a boolean&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shouldn&apos;t finally clause in bindAndValidateGenerationClauses also&lt;br/&gt;
  reset the current auxiliary provider list?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;StaticMethodCallNode.java&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;two spurious blank line diffs&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;GenerationClauseNode.java&lt;br/&gt;
toString should include &quot;AS&quot; keyword after ALWAYS.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;GeneratedColumnsTest.java&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would be nice to add a comment that the test can not be run&lt;br/&gt;
  in client server mode due to the casting to internal Derby objects&lt;br/&gt;
  of some result set columns for dictionary tables.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;DB_Table.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Will an unqualified function name necessarily be output correctly by&lt;br/&gt;
dblook? Do we need to expand the generation text in SYSCOLUMN to&lt;br/&gt;
include the fully qualified name for functions?&lt;/p&gt;</comment>
                            <comment id="12647782" author="dagw" created="Sat, 15 Nov 2008 01:12:43 +0000"  >&lt;p&gt;&amp;gt; I think that if views are supposed to be dropped because an&lt;br/&gt;
&amp;gt; underlying, role-based permission has vanished, then tables should&lt;br/&gt;
&amp;gt; also be dropped if they require a role-based permission that has&lt;br/&gt;
&amp;gt; vanished.&lt;/p&gt;

&lt;p&gt;I am not sure; I haven&apos;t yet been able to find any mention of this&lt;br/&gt;
scneario in the standard.  It seems a bit harsh; dropping a view,&lt;br/&gt;
constraint or trigger doesn&apos;t actually delete any data, whereas&lt;br/&gt;
deleting a table would..&lt;/p&gt;

&lt;p&gt;Maybe it&apos;s ok to just let inserts and updates (if the generated column&lt;br/&gt;
would need regeneration) to that table fail as long as execute&lt;br/&gt;
privileges are not in place for any function referenced in the&lt;br/&gt;
generation expression.. I&apos;ll see if I can find anything in the std.&lt;/p&gt;</comment>
                            <comment id="12648477" author="dagw" created="Tue, 18 Nov 2008 03:29:45 +0000"  >&lt;p&gt;Reviewed derby-481-04-aa-insert.  Quite a mouthful, this one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Looks&lt;br/&gt;
good, though. Thanks for the detailed explanation of the code; very&lt;br/&gt;
helpful.  I wasn&apos;t able to locate the &quot;similar poking&quot; being done for&lt;br/&gt;
the CHECK codepaths; could you point me to that?&lt;/p&gt;

&lt;p&gt;Minor notes:&lt;/p&gt;

&lt;p&gt;M java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think createGeneratedColumn can be simplified by using arg&lt;br/&gt;
  getNullNode(colDesc.getType()) instead of the dummy declaration?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;javadocs for forbidGenerationOverrides, parseAndBindGenerationClauses&lt;br/&gt;
  and generateGenerationClauses lack @params&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The &quot;continue&quot; statement after hasGenerationClauses has been&lt;br/&gt;
  established as true can be replaced by a break; no need to see more.&lt;br/&gt;
  The initial comment in this loop (&quot;generate statements of the&lt;br/&gt;
  form..&quot;)  seem misplaced too, since this loop is only used to detect&lt;br/&gt;
  is there exists a generation clause. It should probably be moved to&lt;br/&gt;
  after the loop?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I see you have just followed the pattern from check constraints, but&lt;br/&gt;
  I am not sure I like the fact that there are two overloaded public&lt;br/&gt;
  methods called generateGenerationClauses which seem to be on&lt;br/&gt;
  different levels of abstraction. The innermost can be private,&lt;br/&gt;
  btw. I would have preferred different names for them.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;has lots of spurious diffs; only one significant change.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The method evaluateGenerationClauses could be made protected and&lt;br/&gt;
  moved down to DMLWriteResultSet. It lacks @params for its javadoc.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12648689" author="dagw" created="Tue, 18 Nov 2008 18:18:03 +0000"  >&lt;p&gt;Reviewed derby-481-05-aa-update. Thanks for all this work, Rick! &lt;br/&gt;
Thorough work, I think, and the approach is well integrated with the rest of the&lt;br/&gt;
machinery.  Explanations again helped me through this one; some&lt;br/&gt;
unclear points (&quot;why is this needed?&quot;) from the the preceding &quot;insert&quot; patch became&lt;br/&gt;
clear now.&lt;/p&gt;

&lt;p&gt;Minor notes:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;import of C_NodeTypes occurs twice now. New imports of&lt;br/&gt;
  java.util.ArrayList and java.util.Array is also unneeded.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;comment ca line 578 starting &quot;Get and bind all check constraints..&quot;&lt;br/&gt;
  should mention generated columns too.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;addGeneratedColumns&apos;s dummy declaration can omitted by using&lt;br/&gt;
  getNullNode(gc.getType()) instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;At declaration time of bindStatement&apos;s addedGeneratedColumns, it&lt;br/&gt;
  would be nice to mention what this variable is used for (grant&lt;br/&gt;
  &quot;forgiveness&quot; in forbidGenerationOverrides).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;pedantic note: assertTriggerStatus makes a select which does no&lt;br/&gt;
  ORDER BY before comparison with canon; it&apos;s OK here of course, since&lt;br/&gt;
  it&apos;s a VTI for which we have control over the order of the rows&lt;br/&gt;
  handed out..&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12648798" author="dagw" created="Tue, 18 Nov 2008 23:08:26 +0000"  >&lt;p&gt;Reviewed derby-481-06-aa-genreferences. Looks good! I verified that without the rest of this &lt;br/&gt;
patch, the extended GeneratedColumnsTest fails on the first case of&lt;br/&gt;
referencing other generated columns. Notes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The javadoc for TableDescriptor#makeColumnMap lacks @param and @return tags.&lt;/li&gt;
	&lt;li&gt;The javadoc for ResultColumnList#getPosition has @param, but lacks @return tag.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12648832" author="dagw" created="Wed, 19 Nov 2008 00:17:54 +0000"  >&lt;p&gt;Reviewed derby-481-07-ab-noSQLinRoutines. Good patch, verified that&lt;br/&gt;
the extended test fails without the rest of the patch. Notes:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;throwReliabilityException: new argument fragmentBitMask lacks @param&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You have used the reliability constant SQL_IN_ROUTINES_ILLEGAL.&lt;br/&gt;
  Isn&apos;t the name &quot;routines&quot; that overly wide here, since only functions are&lt;br/&gt;
  ever allowed in generation clauses?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12649685" author="rhillegas" created="Fri, 21 Nov 2008 15:05:21 +0000"  >&lt;p&gt;Attaching a new version of the functional spec. This repairs the description of ALTER COLUMN in the Behavior section. That bullet had been cut off.&lt;/p&gt;</comment>
                            <comment id="12649718" author="rhillegas" created="Fri, 21 Nov 2008 17:52:51 +0000"  >&lt;p&gt;Attaching derby-481-18-aa-updatableResultSets.diff. This patch adds some tests to verify that you can&apos;t use updatable ResultSets to corrupt generated columns. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 719656.&lt;/p&gt;</comment>
                            <comment id="12649787" author="rhillegas" created="Fri, 21 Nov 2008 20:22:30 +0000"  >&lt;p&gt;Attaching derby-481-19-aa-cleanup.diff, a cleanup patch incorporating feedback from Dag and Knut on previous patches. Thanks, Dag and Knut! Running tests now. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/TableElementList.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/GenerationClauseNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/util/StringUtil.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;/p&gt;</comment>
                            <comment id="12649864" author="rhillegas" created="Sat, 22 Nov 2008 00:22:14 +0000"  >&lt;p&gt;Tests ran cleanly for me except for the heisenbugs in the stressmulti tests. Committed derby-481-19-aa-cleanup.diff at subversion revision 719760.&lt;/p&gt;</comment>
                            <comment id="12650238" author="dagw" created="Mon, 24 Nov 2008 16:12:15 +0000"  >&lt;p&gt;Thanks for your incorporating the comments, Rick!&lt;/p&gt;

&lt;p&gt;Reviewed derby-481-08-aa-castToDeclaredType.diff&lt;/p&gt;

&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;p&gt;Some small notes on the test: I compared with the&lt;br/&gt;
table found in the refman under the CAST function&lt;br/&gt;
(&lt;a href=&quot;http://db.apache.org/derby/docs/dev/ref/rrefsqlj33562.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/ref/rrefsqlj33562.html&lt;/a&gt;) to check&lt;br/&gt;
that all conversions are included.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;smallint, int, bigint and decimal lacks a testcase for char&lt;/li&gt;
	&lt;li&gt;char lacks testcases for smallint, int, bigint and decimal&lt;/li&gt;
	&lt;li&gt;the varchar test seems wrong (identical to the char case; copy/paste&lt;br/&gt;
  error?)&lt;/li&gt;
	&lt;li&gt;the three bitdata cases lack cases for clob and blob&lt;/li&gt;
	&lt;li&gt;timestamp lacks cases for date and time&lt;/li&gt;
	&lt;li&gt;xml is omitted&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some of the omissions may be intentional (xml), if so it would be good&lt;br/&gt;
to indicate why they are omitted in this test.&lt;/p&gt;
</comment>
                            <comment id="12650250" author="dagw" created="Mon, 24 Nov 2008 17:25:13 +0000"  >&lt;p&gt;Reviewed derby-481-09-aa-dummyDefaults.&lt;br/&gt;
Patch looks fine.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;InsertNode.java&lt;br/&gt;
  Comment ca line 301 &quot;Replace any DEFAULTs with the associated tree&quot;&lt;br/&gt;
  is now only conditionally true; for generated columns&lt;br/&gt;
  this happens later. It would be nice to improve this comment to&lt;br/&gt;
  explain where it happens for such column.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The javadoc for the ResultSetNode#replaceDefaults would also benefit from this caveat.&lt;br/&gt;
Similarly for RowResultSet, SingleChildResultSetNode and TableOperatorNode, I guess..&lt;/p&gt;
</comment>
                            <comment id="12650666" author="dagw" created="Tue, 25 Nov 2008 18:22:02 +0000"  >&lt;p&gt;Reviewed patch derby-481-10-aa-foreignKeyActions. Looks correct to&lt;br/&gt;
me. Thanks, Rick!&lt;/p&gt;

&lt;p&gt;My notes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;error messages&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  &apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos; is a generated column. It cannot be part of a foreign key whose&lt;br/&gt;
  referential action is SET NULL or SET DEFAULT or whose update rule is&lt;br/&gt;
  ON UPDATE CASCADE&lt;/p&gt;

&lt;p&gt;  Would perhaps be better to say &quot;referential action for delete is SET&lt;br/&gt;
  NULL or SET DEFAULT or whose referential action for update is&lt;br/&gt;
  CASCADE&quot; to make the the two cases more symmetrically explained. As&lt;br/&gt;
  it stands, the first part doesn&apos;t explicitly say this concerns ON&lt;br/&gt;
  DELETE.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;AlterTableNode.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This code fragment:&lt;br/&gt;
  :&lt;br/&gt;
  if  (numGenerationClauses &amp;gt; 0)&lt;/p&gt;
  { tableElementList.bindAndValidateGenerationClauses(fromList, generatedColumns ); }
&lt;p&gt;  if ( numReferenceConstraints &amp;gt; 0) &lt;/p&gt;
{ tableElementList.validateForeignKeysOnGenerationClauses( fromList, generatedColumns ); }

&lt;p&gt;The latter if statement could be conditional on numGenerationClauses &amp;gt; 0, too,&lt;br/&gt;
I think&lt;/p&gt;

&lt;p&gt;  if  (numGenerationClauses &amp;gt; 0) { &lt;br/&gt;
     tableElementList.bindAndValidateGenerationClauses(&lt;br/&gt;
         fromList, generatedColumns ); &lt;/p&gt;

&lt;p&gt;     if (numReferenceConstraints &amp;gt; 0) &lt;/p&gt;
{ 
         tableElementList.validateForeignKeysOnGenerationClauses(
             fromList, generatedColumns ); }
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;Even if validateForeignKeysOnGenerationClauses tests for the presence&lt;br/&gt;
of generation clauses, it seems more logical to me to just not call&lt;br/&gt;
it. &lt;/p&gt;

&lt;p&gt;Ditto in CreateTableNode.java.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;TableElementList.java&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo: &quot;rulse&quot; -&amp;gt; rule&lt;/li&gt;
	&lt;li&gt;This logic&lt;br/&gt;
            if (&lt;br/&gt;
                ( deleteRule != StatementType.RA_SETNULL ) &amp;amp;&amp;amp;&lt;br/&gt;
                ( deleteRule != StatementType.RA_SETDEFAULT )&lt;br/&gt;
                )
            { continue; }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  I think is more readable as:&lt;/p&gt;

&lt;p&gt;            if( ! (deleteRule == StatementType.RA_SETNULL ||&lt;br/&gt;
                   deleteRule == StatementType.RA_SETDEFAULT ) )&lt;/p&gt;
            { continue }

&lt;p&gt;  Ideally, though, I would prefer&lt;/p&gt;

&lt;p&gt;            if( deleteRule == StatementType.RA_SETNULL ||&lt;br/&gt;
                deleteRule == StatementType.RA_SETDEFAULT ) &lt;/p&gt;
{
               // do our thing
            }
&lt;p&gt; else &lt;/p&gt;
{
               continue
            }

&lt;p&gt;in spite of the extra indentation, but that&apos;s me... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;GeneratedColumnsTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks for the extra tests! Cf. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3964&quot; title=&quot;NullPointerException when re-evaluating generated column during ON DELETE SET NULL referential action&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3964&quot;&gt;&lt;del&gt;DERBY-3964&lt;/del&gt;&lt;/a&gt; though.&lt;/p&gt;</comment>
                            <comment id="12651059" author="dagw" created="Wed, 26 Nov 2008 16:57:34 +0000"  >&lt;p&gt;Reviewing derby-481-11-aa-notNull. Thanks for the good explanations,&lt;br/&gt;
Rick, really helped! Good patch.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/NormalizeResultSet.java&lt;/p&gt;

&lt;p&gt;Good that you refactored this class a bit; was a bit messy before..&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Javadoc for normalizeColumn starts with the text &quot;Normalize a&lt;br/&gt;
  row&quot;. It should probably be &quot;Normalize a column&quot;. What about the&lt;br/&gt;
  rest of that comment? It speaks of not yet having data type&lt;br/&gt;
  conversions.. Is this still relevant? We do have casts, but maybe&lt;br/&gt;
  this is something else. Asking since you touched it by moving it&lt;br/&gt;
  around &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I think the normalizeColumn method should take sourceCol as an&lt;br/&gt;
  argument, rather than sourceRow (less scope; only one column is ever&lt;br/&gt;
  used inside normalizeColumn).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;normalizeColumn javadoc lacks @params and @return.&lt;/li&gt;
	&lt;li&gt;private member numColumns is no longer needed.&lt;/li&gt;
	&lt;li&gt;computeStartColumn lacks @return and @params.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;would be nice to comment usage of new members firstColumn,&lt;br/&gt;
  generatedColumnPositions, normalizedGeneratedValues&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;maybe I am missing something here, but couldn&apos;t the two conditional&lt;br/&gt;
  actions below be put inside one &apos;if&apos; in that they always happen together?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;                if ( firstColumn &amp;lt; 0 ) &lt;/p&gt;
{ firstColumn = NormalizeResultSet.computeStartColumn( isUpdate, activation.getResultDescription() ); }
&lt;p&gt;                if ( generatedColumnPositions == null ) &lt;/p&gt;
{ setupGeneratedColumns( activation, (ValueRow) newRow ); }

&lt;ul&gt;
	&lt;li&gt;Javadoc for setupGeneratedColumns could use some more explanation, a&lt;br/&gt;
  bit on the concise side now, I think. It has side-effects.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;The javadoc for ResultColumn#hasGenerationClause can now refer to&lt;br/&gt;
  the javadoc in the interface ResultColumnDescriptor (to avoid&lt;br/&gt;
  redundancy in description).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12651062" author="dagw" created="Wed, 26 Nov 2008 17:08:13 +0000"  >&lt;p&gt;Looking at derby-481-12-aa-padding, thanks for the new tests.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shouldn&apos;t the type of column a in table t_cc_varchar be a varchar? It is a char now.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12651068" author="dagw" created="Wed, 26 Nov 2008 17:19:09 +0000"  >&lt;p&gt;Looked at derby-481-13-aa-alterDatatype.diff, looks good! Thanks.&lt;/p&gt;</comment>
                            <comment id="12651231" author="dagw" created="Thu, 27 Nov 2008 02:50:20 +0000"  >&lt;p&gt;Reviewed derby-481-14-ab-dropColumn. Thanks again Rick!  The patch is&lt;br/&gt;
good to commit. My notes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;AlterTableConstantAction.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The following fragment threw me off at first:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; int sizeAfterCascadedDrops = td.getColumnDescriptorList().size() - cascadedDrops;&lt;br/&gt;
&amp;gt; // can NOT drop a column if it is the only one in the table&lt;br/&gt;
&amp;gt; if (sizeAfterCascadedDrops == 1)&lt;/p&gt;

&lt;p&gt;Surely,, since we are talkign about size after cascaded drops, th test&lt;br/&gt;
should be against 0? But no, the quantity sizeAfterCascadedDrops does&lt;br/&gt;
not include the original dropped column, so the code works, but is a&lt;br/&gt;
bit misleading. Maybe do:&lt;/p&gt;

&lt;p&gt; int sizeAfterCascadedDrops = td.getColumnDescriptorList().size() - 1 - cascadedDrops;&lt;br/&gt;
 // Can not drop a column if it there would be no columns left:&lt;br/&gt;
 if (sizeAfterCascadedDrops == 0)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Maybe it would be informative to add a comment on the recursive call&lt;br/&gt;
  that it never exceeds 2 in depth since generated columns don&apos;t&lt;br/&gt;
  reference other generated columns.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The new error message LANG_CASCADED_GEN_COL_DROP doesn&apos;t appear to be&lt;br/&gt;
  used in the patch?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Is the intention that it be used in this exception?&lt;/p&gt;

&lt;p&gt;   throw StandardException.newException(&lt;br/&gt;
   SQLState.LANG_PROVIDER_HAS_DEPENDENT_OBJECT,&lt;br/&gt;
      dm.getActionString(DependencyManager.DROP_COLUMN),&lt;br/&gt;
      &quot;THE &lt;b&gt;LAST&lt;/b&gt; COLUMN &quot; + columnName,&lt;br/&gt;
      &quot;TABLE&quot;,&lt;br/&gt;
      td.getQualifiedName() );&lt;/p&gt;

&lt;p&gt;  The new tests use LANG_PROVIDER_HAS_DEPENDENT_OBJECT (X0Y25), so&lt;br/&gt;
  perhaps LANG_CASCADED_GEN_COL_DROP is cruft?&lt;br/&gt;
  The wording of X0Y25 doesn&apos;t really precisely describe the problem,&lt;br/&gt;
  though, so a new error message would be nice, I think...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The string &quot;THE &lt;b&gt;LAST&lt;/b&gt; COLUMN &quot; is not i18n safe.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If generated column were to be dropped indirectly, columnName could&lt;br/&gt;
  not &lt;b&gt;appear&lt;/b&gt; to the user to be THE &lt;b&gt;LAST&lt;/b&gt; COLUMN; I think the error&lt;br/&gt;
  should point out in such cases that, after cascade action, we would&lt;br/&gt;
  have 0 columns left. Perhaps the wording can be word-smithed to&lt;br/&gt;
  handle both cases well.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The error message wording of LANG_CASCADED_GEN_COL_DROP is also&lt;br/&gt;
  confusing to me:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  &quot;Dropping column &apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos; would orphan the generated column &apos;&lt;/p&gt;
{1}
&lt;p&gt;&apos; which&lt;br/&gt;
  references it. You must drop the generated column first.&lt;/p&gt;

&lt;p&gt;  I interpret this to mean that if 0 is dropped, 1 would be the only&lt;br/&gt;
  column left and a computed column can obviously not be alone in a&lt;br/&gt;
  table. But the issue would be clearer explained by saying that after&lt;br/&gt;
  1 is removed by cascade, there would be &lt;b&gt;no&lt;/b&gt; columns left. I also&lt;br/&gt;
  don&apos;t understand the point about dropping the generated column&lt;br/&gt;
  first? Dropping 0 after having dropped 1 wouldn&apos;t improve things&lt;br/&gt;
  unless another column were added in the meantime? Or maybe I am&lt;br/&gt;
  misunderstanding here.. getting late &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;GeneratedColumnsTest.java&lt;/li&gt;
&lt;/ul&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The verification that an index on a generated column is actually&lt;br/&gt;
  dropped could be better, I think. Presently, you only verify that&lt;br/&gt;
  an insert previosly blocked by the index is legal after the dropping&lt;br/&gt;
  of the column.  It would be good to inspect the dictionary to see&lt;br/&gt;
  that it is actually gone physically as well.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Under verification that constraints are dropped, I started&lt;br/&gt;
  wondering.. I think this expected error is not according to the&lt;br/&gt;
  standard:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  :&lt;br/&gt;
  create table t_dc_10( a int generated always as ( -b ) check ( a is not null ), b int, c int )&quot;&lt;br/&gt;
  alter table t_dc_10 drop column a restrict  // gives X0Y25&lt;br/&gt;
  :&lt;/p&gt;

&lt;p&gt;  According to section 11.18, we have:&lt;/p&gt;

&lt;p&gt;  &quot;5) If RESTRICT is specified, then C shall not be referenced in any of the following:&lt;br/&gt;
  a) The &amp;lt;query expression&amp;gt; of any view descriptor.&lt;/p&gt;

&lt;p&gt;  b) The &amp;lt;search condition&amp;gt; of any constraint descriptor other than a&lt;br/&gt;
     table constraint descriptor that contains references to no other column and &lt;br/&gt;
                                                          *********************************************************************&lt;br/&gt;
     that is included in the table descriptor of T.&lt;/p&gt;

&lt;p&gt;  c) The SQL routine body of any routine descriptor.&lt;/p&gt;

&lt;p&gt;  d) Either an explicit trigger column list or a triggered action&lt;br/&gt;
     column set of any trigger descriptor.&lt;/p&gt;

&lt;p&gt;  e) The generation expression of any column descriptor.&quot;&lt;/p&gt;

&lt;p&gt;  It would seem to be that in this case we are covered under item 5b),&lt;br/&gt;
  the check constraint only references the dropped column &quot;a,&quot; so&lt;br/&gt;
  RESTRICT should not block this dropping. This is not&lt;br/&gt;
  behavior particular to generated columns, so if you agree with my interpretation, we should&lt;br/&gt;
  file a JIRA for it.&lt;/p&gt;</comment>
                            <comment id="12652143" author="rhillegas" created="Mon, 1 Dec 2008 20:29:28 +0000"  >&lt;p&gt;Thanks for the great feedback, Dag! Attaching derby-481-20-aa-cleanup.diff, incorporating Dag&apos;s comments. Committed at subversion revision 722214.&lt;/p&gt;</comment>
                            <comment id="12652147" author="rhillegas" created="Mon, 1 Dec 2008 20:40:08 +0000"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Thanks for your second batch of comments on November 26. I agree that it seems silly for RESTRICT to prevent you from dropping a column which is constrained by a CHECK constraint that only mentions that column. I&apos;m not sure that the language of section 11.18 addresses this silliness, though. In the example from our test code, the CHECK constraint seems to me to be a column level CHECK constraint, not a table level constraint--so the exception in syntax rule (5b) doesn&apos;t apply. This is puzzling though. I don&apos;t know why the CHECK constraint would block a RESTRICTed DROP when phrased at the column level but would not block the DROP when phrased at the table level.&lt;/p&gt;</comment>
                            <comment id="12658603" author="dagw" created="Mon, 22 Dec 2008 17:53:41 +0000"  >&lt;p&gt;Hmm indeed puzzling that distinction about the table vs column level constraint.&lt;br/&gt;
So, if it is a table level constraint, we do not restrict in the single column case?&lt;/p&gt;</comment>
                            <comment id="12658604" author="dagw" created="Mon, 22 Dec 2008 18:01:35 +0000"  >&lt;p&gt;A possible answer may be that a column level constraints is defined as &lt;b&gt;equivalent&lt;/b&gt; to&lt;br/&gt;
table level constraints in section 11.4 SR 12. Since this is a syntactic rule, I guess we could&lt;br/&gt;
argue that the standard sees column level constraints as a syntactic variation of a table level constraint,&lt;br/&gt;
in which case the RESTRICT behavior discussed above would apply to it as well. What do you think?&lt;/p&gt;</comment>
                            <comment id="12658654" author="rhillegas" created="Mon, 22 Dec 2008 20:32:01 +0000"  >&lt;p&gt;Hi Dag. I think your interpretation is reasonable.&lt;/p&gt;</comment>
                            <comment id="12659113" author="rhillegas" created="Wed, 24 Dec 2008 16:11:10 +0000"  >&lt;p&gt;Attaching derby-481-21-aa-bulkImport.diff, which adds tests for bulk import of generated columns. Committed at subversion revision 729329. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_bi_1.dat&lt;/p&gt;</comment>
                            <comment id="12665567" author="rhillegas" created="Tue, 20 Jan 2009 21:17:34 +0000"  >&lt;p&gt;I believe that the work on this issue is done now that Kim has checked in the user documentation. Thanks, Kim!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12408290">DERBY-3945</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12408528">DERBY-3948</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12408529">DERBY-3949</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12408530">DERBY-3950</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12408930">DERBY-3957</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12409207">DERBY-3964</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12409668">DERBY-3969</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12392338">DERBY-3570</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12407554">DERBY-3932</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12407199">DERBY-3922</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12407200">DERBY-3923</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12421939">DERBY-4142</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12348433">DERBY-1748</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12409003">DERBY-3959</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12408012">DERBY-3940</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12312161">DERBY-455</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12475740">DERBY-4831</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12332755">DERBY-1257</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12409003">DERBY-3959</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12394424" name="GeneratedColumns.html" size="23665" author="rhillegas" created="Fri, 21 Nov 2008 15:05:21 +0000"/>
                            <attachment id="12393960" name="GeneratedColumns.html" size="23231" author="rhillegas" created="Fri, 14 Nov 2008 21:46:45 +0000"/>
                            <attachment id="12378246" name="GeneratedColumns.html" size="21547" author="rhillegas" created="Wed, 19 Mar 2008 16:03:53 +0000"/>
                            <attachment id="12392658" name="derby-481-00-aa-prototype.diff" size="135181" author="rhillegas" created="Wed, 22 Oct 2008 14:29:08 +0100"/>
                            <attachment id="12392672" name="derby-481-01-aa-catalog.diff" size="5164" author="rhillegas" created="Wed, 22 Oct 2008 19:22:32 +0100"/>
                            <attachment id="12392760" name="derby-481-02-aa-utilities.diff" size="35167" author="rhillegas" created="Thu, 23 Oct 2008 23:47:22 +0100"/>
                            <attachment id="12392801" name="derby-481-03-aa-grammar.diff" size="61385" author="rhillegas" created="Fri, 24 Oct 2008 21:13:58 +0100"/>
                            <attachment id="12392871" name="derby-481-04-aa-insert.diff" size="48977" author="rhillegas" created="Mon, 27 Oct 2008 16:30:46 +0000"/>
                            <attachment id="12392931" name="derby-481-05-aa-update.diff" size="52714" author="rhillegas" created="Tue, 28 Oct 2008 14:04:34 +0000"/>
                            <attachment id="12393065" name="derby-481-06-aa-genreferences.diff" size="12686" author="rhillegas" created="Thu, 30 Oct 2008 15:18:58 +0000"/>
                            <attachment id="12393106" name="derby-481-07-aa-noSQLinRoutines.diff" size="10324" author="rhillegas" created="Thu, 30 Oct 2008 21:09:05 +0000"/>
                            <attachment id="12393154" name="derby-481-07-ab-noSQLinRoutines.diff" size="10872" author="rhillegas" created="Fri, 31 Oct 2008 13:54:44 +0000"/>
                            <attachment id="12393173" name="derby-481-08-aa-castToDeclaredType.diff" size="19514" author="rhillegas" created="Fri, 31 Oct 2008 18:06:23 +0000"/>
                            <attachment id="12393178" name="derby-481-09-aa-dummyDefaults.diff" size="3036" author="rhillegas" created="Fri, 31 Oct 2008 21:59:56 +0000"/>
                            <attachment id="12393260" name="derby-481-10-aa-foreignKeyActions.diff" size="15969" author="rhillegas" created="Mon, 3 Nov 2008 18:57:26 +0000"/>
                            <attachment id="12393330" name="derby-481-11-aa-notNull.diff" size="19715" author="rhillegas" created="Tue, 4 Nov 2008 21:05:32 +0000"/>
                            <attachment id="12393376" name="derby-481-12-aa-padding.diff" size="4415" author="rhillegas" created="Wed, 5 Nov 2008 14:55:05 +0000"/>
                            <attachment id="12393390" name="derby-481-13-aa-alterDatatype.diff" size="4835" author="rhillegas" created="Wed, 5 Nov 2008 19:11:10 +0000"/>
                            <attachment id="12393523" name="derby-481-14-ab-dropColumn.diff" size="45757" author="rhillegas" created="Fri, 7 Nov 2008 19:10:40 +0000"/>
                            <attachment id="12393640" name="derby-481-15-aa-renameAndAddDefault.diff" size="7064" author="rhillegas" created="Mon, 10 Nov 2008 14:30:50 +0000"/>
                            <attachment id="12393653" name="derby-481-16-aa-dropFunction.diff" size="15122" author="rhillegas" created="Mon, 10 Nov 2008 19:10:10 +0000"/>
                            <attachment id="12393971" name="derby-481-17-aa-currentSchema.diff" size="945" author="rhillegas" created="Fri, 14 Nov 2008 23:32:17 +0000"/>
                            <attachment id="12394433" name="derby-481-18-aa-updatableResultSets.diff" size="6020" author="rhillegas" created="Fri, 21 Nov 2008 17:52:51 +0000"/>
                            <attachment id="12394442" name="derby-481-19-aa-cleanup.diff" size="10836" author="rhillegas" created="Fri, 21 Nov 2008 20:22:30 +0000"/>
                            <attachment id="12395039" name="derby-481-20-aa-cleanup.diff" size="8223" author="rhillegas" created="Mon, 1 Dec 2008 20:29:28 +0000"/>
                            <attachment id="12396739" name="derby-481-21-aa-bulkImport.diff" size="5053" author="rhillegas" created="Wed, 24 Dec 2008 16:11:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Mar 2008 16:33:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29570</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0p9b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37910</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>