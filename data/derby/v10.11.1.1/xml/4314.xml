<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4314/DERBY-4314.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4314] With derby client setTransactionIsolation executes and commits even if isolation has not changed </title>
                <link>https://issues.apache.org/jira/browse/DERBY-4314</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;With in EmbedConnection.setIsolation() we have a check to see if the isolation level is the same and if so just return without doing a commit:&lt;br/&gt;
  public void setTransactionIsolation(int level) throws SQLException {&lt;/p&gt;

&lt;p&gt;		if (level == getTransactionIsolation())&lt;br/&gt;
			return;&lt;/p&gt;


&lt;p&gt;with org.apache.derby.client.am.Connection we have no such check. It would be good if the client driver acted like embedded.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12430813">DERBY-4314</key>
            <summary>With derby client setTransactionIsolation executes and commits even if isolation has not changed </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lilywei">Lily Wei</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_backport_reject_10_6</label>
                    </labels>
                <created>Fri, 17 Jul 2009 21:44:38 +0100</created>
                <updated>Tue, 15 Mar 2011 20:20:23 +0000</updated>
                            <resolved>Tue, 15 Mar 2011 20:20:23 +0000</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12732936" author="lilywei" created="Sat, 18 Jul 2009 22:25:09 +0100"  >&lt;p&gt;This is the diff from trunk for the patch.&lt;/p&gt;</comment>
                            <comment id="12732937" author="lilywei" created="Sat, 18 Jul 2009 22:30:55 +0100"  >&lt;p&gt;The patch is to change org.apache.derby.client.am.Connection according to the bug description. When running suites.All, SetTransactionIsolationTest test failed. I think the failure was due to the old behavior of DerbyNetClient. I change the test to reflect the new behavior. I did not take out the logic for the old behavior. If I need to, I will be happy to do that. The changes is made to trunk. I am running derbyall tests now.&lt;/p&gt;</comment>
                            <comment id="12732939" author="kmarsden" created="Sat, 18 Jul 2009 22:58:46 +0100"  >&lt;p&gt;Thanks Lily for looking at this issue.   Here are some comments.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think it would be good to put the check after the trace call so the call will still get logged if tracing is on.&lt;/li&gt;
	&lt;li&gt;In the test, I guess  we can just remove the whole switch statment passCommitCheck etc. and   just have.&lt;br/&gt;
assertEquals(1,count);  since the behavior is the same for the drivers.  The comment in the beginning of the test is no longer relevant and maybe the fixture name should be changed to testSetTransactionIsolationDoesNotCommit() or some such.&lt;/li&gt;
	&lt;li&gt;I guess there was already an issue for this &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2064&quot; title=&quot;Network client setTransactionIsolation() commits any active transactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2064&quot;&gt;&lt;del&gt;DERBY-2064&lt;/del&gt;&lt;/a&gt; which should be duped to this one, since you are posting your work here.&lt;/li&gt;
	&lt;li&gt;I think  calling getTransactionIsolation()  will introduce another server round trip to get the isolation if it is not cached.  Under what circumstances will the isolation be cached or not cached? Is this a performance issue or does it happen rarely?&lt;/li&gt;
	&lt;li&gt;Also calling getTransactionIsolation() directly will cause the getTransactionIsolation call to get traced which it probably shouldn&apos;t.   We might need to make a getTransactionIsolationX() which does the work but doesn&apos;t have the tracing call.  and then have the X method  called by getTransasctionIsolation() and setTransactionIsolation()&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12733035" author="lilywei" created="Sun, 19 Jul 2009 19:49:30 +0100"  >&lt;p&gt;Thanks Kathey for looking at the patch. I change the check to be after trace. I will mark &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2064&quot; title=&quot;Network client setTransactionIsolation() commits any active transactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2064&quot;&gt;&lt;del&gt;DERBY-2064&lt;/del&gt;&lt;/a&gt; as dup of this bug. I think getTransactionIsolation() will introduce server round trip. I am not sure the performance impact will be huge. I add a check for supportsSessionDataCaching() to prevent introduce server round trip if it is not cache. getTransactionIsolationX()is introduce and setTransactionIsolation() and getTransactionIsolation() will be calling it. testSetTransactionIsolationCommitRollback will be checking for assertEquals(1, count) thanks to Kathey&apos;s great points. I run suits.all again and all the tests passed. I am running derbyall now.&lt;/p&gt;</comment>
                            <comment id="12733151" author="kristwaa" created="Mon, 20 Jul 2009 08:32:56 +0100"  >&lt;p&gt;FYI, there are some related comments (and code) in Connection.completeReset.&lt;/p&gt;</comment>
                            <comment id="12734793" author="kmarsden" created="Thu, 23 Jul 2009 22:23:18 +0100"  >&lt;p&gt;For &lt;br/&gt;
if (supportsSessionDataCaching() &amp;amp;&amp;amp; level == getTransactionIsolationX())&lt;br/&gt;
			return;&lt;/p&gt;

&lt;p&gt;I think we need to remove supportsSessionDataCaching()  because we don&apos;t want setTrasactionIsolation to behave differently and always commit if the server does not support session data caching.&lt;/p&gt;

&lt;p&gt;It seems that _isolation is set to TRANSACTION_UNKNOWN for new connections.  This means we will always make an extra round trip for the first setTransactionIsolation call on a connection.  Can we initialize _isolation to READ_COMMITTED when  session data caching is supported instead since that is the default for new connections?&lt;/p&gt;
</comment>
                            <comment id="12735097" author="lilywei" created="Fri, 24 Jul 2009 18:01:01 +0100"  >&lt;p&gt;After chatting with Kathey and Kristian, I made this new patch. I run suites.all and derbyall is running now. All tests passed on suites.all with this patch change.&lt;/p&gt;

&lt;p&gt;When debugging with the existing tests, I do see we do round trip for the first setTransactionIsolation call on a connection. However, I am not totally sure it justifies setting _isolation to TRANSACTION_UNKNOWN. Kristian was telling me client driver will ask the server about isolation level if it is unknown. This might be avoidable if piggybacking is available.&lt;/p&gt;</comment>
                            <comment id="12735535" author="kristwaa" created="Mon, 27 Jul 2009 10:16:30 +0100"  >&lt;p&gt;I found some useful information about the piggybacking here: &lt;a href=&quot;http://wiki.apache.org/db-derby/Derby3192Writeup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/Derby3192Writeup&lt;/a&gt;&lt;br/&gt;
Thank you, Dyre!&lt;/p&gt;

&lt;p&gt;Kathey wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It seems that _isolation is set to TRANSACTION_UNKNOWN for new connections. This means we will always make an extra round trip for the first setTransactionIsolation call on a connection. Can we initialize _isolation to READ_COMMITTED when session data caching is supported instead since that is the default for new connections?&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I&apos;m slightly skeptical about this suggested change:&lt;br/&gt;
 1) It seems we have had bugs regarding assumptions about and caching of the isolation level earlier.&lt;br/&gt;
 2) What happens if we in the future add the option to configure the default isolation level on the server?&lt;br/&gt;
    It seems I have already introduced an assumption in the client code that may break (hard-coded assumption that the default level is RC, limited to pooled/XA connections - see Connection.completeReset).&lt;br/&gt;
 3) This happens once for each connection if setTransactionIsolation is called before any other round trip to the server, assuming session state caching is available. Shouldn&apos;t applications creating loads of connections use a connection pool?&lt;/p&gt;

&lt;p&gt;It seems to me that the client should be informed about the default isolation level as part of the connection initialization sequence. The default value could be stored, and used later on connection resets etc. I don&apos;t know if the DRDA specification allows this somehow. One solution could be the product specific code points.&lt;/p&gt;


&lt;p&gt;The latest patch looks good to me. Nitpicks:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;mixed tabs/spaces indentation at @@ -909,6 +909,9 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;mixed tabs/spaces indentation at @@ -1005,8 +1008,21 @@&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;traceExit is used instead of traceEntry. Is this intended?&lt;br/&gt;
    (I see this is also done in some other places in the client code)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12736485" author="lilywei" created="Wed, 29 Jul 2009 08:26:31 +0100"  >&lt;p&gt;This patch fixs &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;mixed tabs/spaces indentation at @@ -909,6 +909,9 @@&lt;/li&gt;
	&lt;li&gt;mixed tabs/spaces indentation at @@ -1005,8 +1008,21 @@&lt;/li&gt;
	&lt;li&gt;use traceEntry instead of traceExit&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If it will be better for performance, I will be better to change the _isolation to READ_COMMITTED. However, we have to handle the assumption in the code and piggybacking situation. Is this the best place to change the current assumption?&lt;/p&gt;</comment>
                            <comment id="12737583" author="lilywei" created="Fri, 31 Jul 2009 17:14:25 +0100"  >&lt;p&gt;Run Suites.all and derbyall against trunk 799169. No failure.&lt;/p&gt;</comment>
                            <comment id="12740335" author="kmarsden" created="Fri, 7 Aug 2009 01:55:03 +0100"  >&lt;p&gt;I posted a program to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;  which would be interesting to run with this patch with tracing on to understand the server round trips in various scenarios.  Of course the assertion failure would have to be fixed first.  I am curious though if this patch might actually fix that bug.&lt;/p&gt;

</comment>
                            <comment id="12749916" author="kristwaa" created="Tue, 1 Sep 2009 15:04:52 +0100"  >&lt;p&gt;Attaching patch 6a, which demonstrates the piggy-backing of session data on connection initialization.&lt;/p&gt;

&lt;p&gt;Comments on the approach/patch is welcome.&lt;br/&gt;
Note the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I inserted the PBSD (session data code point(s)) at the end of the ACCRDB reply. Is this allowed by the DRDA standard?&lt;br/&gt;
   It will only be sent if the client is Derby and the version is 10.6 or greater.&lt;/li&gt;
	&lt;li&gt;I have not yet implemented the change suggested, where the isolation level is initialized to READ_COMMITTED unconditionally in the client.&lt;/li&gt;
	&lt;li&gt;The extra completeInitialPiggyBackSchema method was added because the debug assert fails with NPE (the metadata object hasn&apos;t been created yet, this happens in completeConnection).&lt;/li&gt;
	&lt;li&gt;My test run hasn&apos;t completed yet.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12756932" author="lilywei" created="Fri, 18 Sep 2009 04:12:01 +0100"  >&lt;p&gt;Thanks Kristian. I apply the patch. I don&apos;t know about your question to DRDA standard. &lt;br/&gt;
I run it against the repro from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt; TestConnReuser.java. I got the ASSERT failure with defaultisolation change. This is my output from running TestConnReuse.java&lt;br/&gt;
$ java TestConnReuse&lt;br/&gt;
FirstConnection&lt;br/&gt;
count = 22&lt;br/&gt;
Seccond Connection. Reuse Connection&lt;br/&gt;
Third Connection. Set same isolation&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.derby.shared.common.sanity.AssertFailure:&lt;br/&gt;
ASSERT FAILED&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityMana&lt;br/&gt;
ger.java:98)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolationX(Connec&lt;br/&gt;
tion.java:987)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolation(Connect&lt;br/&gt;
ion.java:915)&lt;br/&gt;
        at org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(&lt;br/&gt;
LogicalConnection.java:253)&lt;br/&gt;
        at TestConnReuse.main(TestConnReuse.java:33)&lt;br/&gt;
---------------&lt;br/&gt;
Stack traces for all live threads:&lt;br/&gt;
Thread name=Finalizer id=3 priority=8 state=WAITING isdaemon=true&lt;br/&gt;
        java.lang.Object.wait(Native Method)&lt;br/&gt;
        java.lang.ref.ReferenceQueue.remove(Unknown Source)&lt;br/&gt;
        java.lang.ref.ReferenceQueue.remove(Unknown Source)&lt;br/&gt;
        java.lang.ref.Finalizer$FinalizerThread.run(Unknown Source)&lt;/p&gt;

&lt;p&gt;Thread name=main id=1 priority=5 state=RUNNABLE isdaemon=false&lt;br/&gt;
        java.lang.Thread.dumpThreads(Native Method)&lt;br/&gt;
        java.lang.Thread.getAllStackTraces(Unknown Source)&lt;br/&gt;
        org.apache.derby.shared.common.sanity.ThreadDump.getStackDumpString(Thre&lt;br/&gt;
adDump.java:34)&lt;br/&gt;
        sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
        org.apache.derby.shared.common.sanity.AssertFailure$1.run(AssertFailure.&lt;br/&gt;
java:165)&lt;/p&gt;

&lt;p&gt;Do you think I am missing something?&lt;/p&gt;</comment>
                            <comment id="12852897" author="lilywei" created="Fri, 2 Apr 2010 19:11:44 +0100"  >&lt;p&gt;After careful review the code, I think there might be some issue relate to DRDA protocal with the patch. When running suites.all test suite, testSetIsolationWithStatement failed with the following assertion:&lt;br/&gt;
There was 1 error:&lt;br/&gt;
1) testSetIsolationWithStatement(org.apache.derbyTesting.functionTests.tests.jdb&lt;br/&gt;
capi.J2EEDataSourceTest)org.apache.derby.client.am.XaException: XAER_DUPID : Err&lt;br/&gt;
or executing a XAResource.start(), server returned XAER_DUPID.&lt;br/&gt;
        at org.apache.derby.client.net.NetXAResource.throwXAException(NetXAResou&lt;br/&gt;
rce.java:756)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAResource.start(NetXAResource.java:64&lt;br/&gt;
7)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTes&lt;br/&gt;
t.testSetIsolationWithStatement(J2EEDataSourceTest.java:1623)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;/p&gt;

&lt;p&gt;Looking at NetXAResource.start with Xid xid2 = new cdsXid(1, (byte) 93, (byte) 103);&lt;br/&gt;
        xar.start(xid2, XAResource.TMNOFLAGS); on J2EEDataSourceTest, I am thinking it might be relate to change of behavior of DRDA protocal. I need to further investigate on this.&lt;/p&gt;

&lt;p&gt;       With repro on Derby-4343 (Please refer to second attachment file TestConnReuse.java), if the third connection does not set the transaction isolation level to Connection.TRANSACTION_READ_COMMITTED but Connection.TRANSACTION_READ_UNCOMMITTED, we can get third connection without assertion. &lt;/p&gt;

&lt;p&gt;       This is the assertion trace if the third connection set the transcationIsolation to Connection.TRANSACTION_READ_COMMITTED.&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.derby.shared.common.sanity.AssertFailure:&lt;br/&gt;
ASSERT FAILED&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityMana&lt;br/&gt;
ger.java:98)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolationX(Connec&lt;br/&gt;
tion.java:987)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolation(Connect&lt;br/&gt;
ion.java:915)&lt;br/&gt;
        at org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(&lt;br/&gt;
LogicalConnection.java:253)&lt;br/&gt;
        at TestConnReuse.main(TestConnReuse.java:33)&lt;/p&gt;

&lt;p&gt;       Any guideline on the cause of reason is highly appreciated.&lt;/p&gt;
</comment>
                            <comment id="12857125" author="lilywei" created="Wed, 14 Apr 2010 23:27:29 +0100"  >&lt;p&gt;Hi Kristian or Knut:&lt;br/&gt;
    Would you mind provide any information to 6b patch which has Kristian&apos;s piggy backing change of session data change cause TestConnReuse to give exception on Connection.setTransactionIsolationX at the first connection when the isolation level is TRANSACTION_READ_COMMITTED? Thanks, Lily&lt;/p&gt;</comment>
                            <comment id="12857275" author="knutanders" created="Thu, 15 Apr 2010 12:00:22 +0100"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;I&apos;m afraid I&apos;m not able to reproduce the assert failure when I apply the 6b patch on head of trunk and run TestConnReuse. I tried to change the isolation levels as described above, but I may have got it wrong. Perhaps you could attach an updated version of TestConnReuse.java that shows the problem with no modification? Thanks.&lt;/p&gt;</comment>
                            <comment id="12859879" author="lilywei" created="Thu, 22 Apr 2010 17:44:58 +0100"  >&lt;p&gt;Thank you, Knut. You are right. The repro is passing with 6b. I did not merge right after Connection.java has newer version. However, I am still seeing J2EEDataSourceTest exception from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1325&quot; title=&quot;Isolation level of local connection does not get reset after exiting a global transaction if the isolation level was changed using SQL&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1325&quot;&gt;&lt;del&gt;DERBY-1325&lt;/del&gt;&lt;/a&gt; repro. I am seeing exception as following:&lt;br/&gt;
1) testSetIsolationWithStatement(org.apache.derbyTesting.functionTests.tests.jdb&lt;br/&gt;
capi.J2EEDataSourceTest)org.apache.derby.client.am.XaException: XAER_DUPID : Err&lt;br/&gt;
or executing a XAResource.start(), server returned XAER_DUPID.&lt;br/&gt;
        at org.apache.derby.client.net.NetXAResource.throwXAException(NetXAResou&lt;br/&gt;
rce.java:756)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAResource.start(NetXAResource.java:64&lt;br/&gt;
7)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTes&lt;br/&gt;
t.testSetIsolationWithStatement(J2EEDataSourceTest.java:1623)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;/p&gt;

&lt;p&gt;I am thinking this is related to piggy backing of session data. However, I am all open to new suggestion.&lt;/p&gt;</comment>
                            <comment id="12861001" author="lilywei" created="Mon, 26 Apr 2010 18:18:41 +0100"  >&lt;p&gt;Post the diff after merge Connection.java&lt;/p&gt;</comment>
                            <comment id="12861038" author="kmarsden" created="Mon, 26 Apr 2010 19:40:09 +0100"  >&lt;p&gt;I think the more relevant failure is the first one that occurs:&lt;/p&gt;

&lt;p&gt;1) testGlobalLocalInterleaf(org.apache.derbyTesting.functionTests.tests.jdbcapi.&lt;br/&gt;
J2EEDataSourceTest)junit.framework.AssertionFailedError: expected:&amp;lt;1&amp;gt; but was:&amp;lt;2&lt;br/&gt;
&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTes&lt;br/&gt;
t.assertConnectionState(J2EEDataSourceTest.java:3341)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTes&lt;br/&gt;
t.testGlobalLocalInterleaf(J2EEDataSourceTest.java:1501)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.&lt;br/&gt;
java:48)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces&lt;br/&gt;
sorImpl.java:37)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;/p&gt;


&lt;p&gt;Around line 1406 we end a global transaction:&lt;br/&gt;
   assertConnectionState(&lt;br/&gt;
            ResultSet.CLOSE_CURSORS_AT_COMMIT, &lt;br/&gt;
            Connection.TRANSACTION_READ_UNCOMMITTED,&lt;br/&gt;
            false, ReadOnly, cs1);&lt;/p&gt;

&lt;p&gt;        xar.end(xid, XAResource.TMSUCCESS);&lt;/p&gt;


&lt;p&gt;Then we get a new logical connection in between (with isolation READ_COMMITTED) and then&lt;/p&gt;

&lt;p&gt;about 1499 we join the global transaction&lt;br/&gt;
     xar.start(xid, XAResource.TMJOIN);&lt;br/&gt;
        cs1 = xac.getConnection();&lt;br/&gt;
        // re-join with new handle X1&lt;br/&gt;
        assertConnectionState(&lt;br/&gt;
            ResultSet.CLOSE_CURSORS_AT_COMMIT, &lt;br/&gt;
            Connection.TRANSACTION_READ_UNCOMMITTED,&lt;br/&gt;
            false, ReadOnly, cs1);&lt;/p&gt;

&lt;p&gt;But we get the error &lt;br/&gt;
J2EEDataSourceTest)junit.framework.AssertionFailedError: expected:&amp;lt;1&amp;gt; but was:&amp;lt;2&lt;br/&gt;
&amp;gt;&lt;br/&gt;
So the isolation level was not restored to READ_UNCOMMITED when we joined.   I haven&apos;t looked at the patch, but I think this is the issue that would be best to look at first. I think the DUPID error may be just a cascading failure that occurs because of this one.&lt;/p&gt;
</comment>
                            <comment id="12861114" author="kmarsden" created="Mon, 26 Apr 2010 22:11:12 +0100"  >&lt;p&gt;Here is a reproduction for the problem with the c patch where the isolation level is not restored after rejoining the global transaction.  ReproIsoLost and utilXID,  Run like&lt;br/&gt;
java ReproIsoLost &lt;/p&gt;

&lt;p&gt;with the patch we get:&lt;br/&gt;
FAIL: Isolation is:TRANSACTION_READ_COMMITTED instead of READ_UNCOMMITTED&lt;/p&gt;</comment>
                            <comment id="12861181" author="kmarsden" created="Tue, 27 Apr 2010 01:25:05 +0100"  >&lt;p&gt;I noticed, with the patch,  if I add&lt;/p&gt;

&lt;p&gt;	Statement s = cs1.createStatement();&lt;br/&gt;
	s.executeUpdate(&quot;create table foo (i int)&quot;);&lt;/p&gt;

&lt;p&gt;just before &lt;br/&gt;
	xar.end(xid, XAResource.TMSUCCESS);&lt;/p&gt;

&lt;p&gt;I get on the subsequent 	cs1 = xaconn.getConnection();&lt;br/&gt;
$ java ReproIsoLost&lt;br/&gt;
2010-04-27 00:18:34.201 GMT : Apache Derby Network Server - 10.7.0.0 alpha - (93&lt;br/&gt;
8130:938140M) started and ready to accept connections on port 1597&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLNonTransientConnectionException: An error&lt;br/&gt;
 occurred during connect reset and the connection has been terminated.  See chai&lt;br/&gt;
ned exceptions for details.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLE&lt;br/&gt;
xceptionFactory40.java:70)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.&lt;br/&gt;
java:358)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.getConnection(ClientPo&lt;br/&gt;
oledConnection.java:259)&lt;br/&gt;
        at org.apache.derby.client.ClientXAConnection.getConnection(ClientXAConn&lt;br/&gt;
ection.java:70)&lt;br/&gt;
        at ReproIsoLost.main(ReproIsoLost.java:51)&lt;br/&gt;
Caused by: org.apache.derby.client.am.DisconnectException: An error occurred dur&lt;br/&gt;
ing connect reset and the connection has been terminated.  See chained exception&lt;br/&gt;
s for details.&lt;br/&gt;
        at org.apache.derby.client.am.Connection.reset(Connection.java:2175)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.getConnection(ClientPo&lt;br/&gt;
oledConnection.java:245)&lt;br/&gt;
        ... 2 more&lt;/p&gt;


&lt;p&gt;In the derby.log I have:&lt;br/&gt;
, (SESSIONID = 3), (DATABASE = wombat), (DRDAID = NF000001.GC36-867504605894726310&lt;/p&gt;
{2}
&lt;p&gt;), Failed Statement is: SET CURRENT ISOLATION = CS&lt;/p&gt;

&lt;p&gt;ERROR X0Y77: Cannot issue set transaction isolation statement on a global transaction that is in progress because it would have implicitly committed the global transaction.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIsolationLevel(GenericLanguageConnectionContext.java:2650)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.SetTransactionIsolationConstantAction.executeConstantAction(SetTransactionIsolationConstantAction.java:86)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:61)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1232)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLIMM(DRDAConnThread.java:5133)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:755)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)&lt;/p&gt;

&lt;p&gt;Cleanup action completed&lt;/p&gt;


&lt;p&gt;This passes with 10.5 and presumably without the patch.&lt;/p&gt;</comment>
                            <comment id="12861965" author="lilywei" created="Wed, 28 Apr 2010 23:13:27 +0100"  >&lt;p&gt;At this point, I am hesitate to keep working on piggy-backing fix due to the fact that we can not execute a statement in the local transaction when we rejoin to the global transaction per Kathey&apos;s example( please see ReproIsoLost.java). With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;-5 fix, we don&apos;t commit when calling setTransactionIsolation(). However, we do have performance issue when connection is not cache. We will have server round-trip when we first call seTransactionIsolation when creating the connection, we will have two round trip when isolation is not set to READ_COMMITTED (check + change) In any case, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;-5 do fix setTransctonIsolation() not perform commit issue. Therefore, I am leading toward to submit &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;-5 change and open a new JIRA for the performance issue. From the new JIRA, we can investigate further about the piggybacking issue and beyond and have conclusion on this issue and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;. Is this sound like a reasonable solution for this issue?&lt;/p&gt;</comment>
                            <comment id="12862688" author="kristwaa" created="Fri, 30 Apr 2010 15:41:25 +0100"  >&lt;p&gt;Attached patch 6d, which is a combined patch with some additional XA changes in the client.&lt;/p&gt;

&lt;p&gt;Can someone with more knowledge about XA have a look?&lt;br/&gt;
Briefly described, I have made the client &lt;b&gt;not&lt;/b&gt; reset the isolation level when we are doing a join or resume. Instead, we pick up the piggy-backed value from the server. The server, I believe, is keeping track of the correct value for the isolation level &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;The full regression tests are running, I verified that the tests that failed with the previous patch(es) passed.&lt;/p&gt;</comment>
                            <comment id="12862722" author="lilywei" created="Fri, 30 Apr 2010 16:42:31 +0100"  >&lt;p&gt;This is the version I intent to submit for this fix.&lt;br/&gt;
This fix avoid assertion like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt; by short-circuiting setTransactionIsolation. &lt;br/&gt;
For case as users obtaining the pooled connection for the third time, the variable&lt;br/&gt;
isolation_ is reset Connection.completeReset. If users call setTransactionIsolation and executed, the server does not send any piggybacking update because the isolation level has not changed.&lt;br/&gt;
 Isolation_ remain as UNKNOWN until getTransactionIsolation is called&lt;br/&gt;
 or a different statement causing a change of the isolation level&lt;br/&gt;
 is executed.  As mention before, we should think about change this to READ_UNCOMMITTED.&lt;br/&gt;
With introducing getTransactionIsolationX and assertion is never reach. Therefore, no assertion.&lt;br/&gt;
The client driver acts as embedded as without commit action when setTransactionIsolation is called.&lt;br/&gt;
Performance concern: This fix does not improve performance, it will just move the server round-trip. In some cases performance will be worse for the initial setTransactionIsolation call, depending on&lt;br/&gt;
 whether isolation_ value being set to READ_COMMITTED or not. If it is, one round-trip (check + short-circuit). If it is not, two round-trip (check + change).&lt;/p&gt;

&lt;p&gt;I don&apos;t fully understand piggybacking. Any suggestion is welcome.  I simply think this is a good place to address this bug and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;. I will suggestion to open a new JIRA for the performance concern.&lt;/p&gt;

&lt;p&gt;I run suits.all and derbyall. &lt;/p&gt;</comment>
                            <comment id="12862837" author="kristwaa" created="Fri, 30 Apr 2010 20:57:44 +0100"  >&lt;p&gt;Patch 6d ran without failures.&lt;/p&gt;

&lt;p&gt;If I&apos;m not mistaken, Lily&apos;s latest patch is a &quot;sub-patch&quot; of 6d, so committing it here and creating a new issue for the piggy-backing is fine with me.&lt;/p&gt;</comment>
                            <comment id="12863158" author="lilywei" created="Sun, 2 May 2010 18:04:02 +0100"  >&lt;p&gt;Thanks Kristian for combined patch with some additional XA changes in the client. I believe the fix also address the server does not send any piggybacking update and improve the performance concern since we are getting the right isolation level. We still need to think about whether to check isolation_ value to TRANSACTION_READ_COMMITTED. With this patch, I also add more comment on setTransactionIsolation since that was why we commit when call setTransactionIsolation. &lt;/p&gt;

&lt;p&gt;Suite.all and derby tests passed.&lt;/p&gt;</comment>
                            <comment id="12863444" author="kmarsden" created="Mon, 3 May 2010 19:20:24 +0100"  >&lt;p&gt;I will look at the 7b-combine patch and commit. Thanks Lily and Kristian for this collaborative effort !&lt;/p&gt;</comment>
                            <comment id="12864337" author="lilywei" created="Wed, 5 May 2010 15:16:05 +0100"  >&lt;p&gt;Thanks to Kathey and Kristian, with #940620, setTransactionIsolation will not commit and it behaves the same for network server and embedded server. The nightly tests are coming up.&lt;/p&gt;</comment>
                            <comment id="12865859" author="lilywei" created="Mon, 10 May 2010 19:45:37 +0100"  >&lt;p&gt;Change fix version information and add patch available&lt;/p&gt;</comment>
                            <comment id="12874503" author="kristwaa" created="Wed, 2 Jun 2010 09:44:15 +0100"  >&lt;p&gt;The issue &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2064&quot; title=&quot;Network client setTransactionIsolation() commits any active transactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2064&quot;&gt;&lt;del&gt;DERBY-2064&lt;/del&gt;&lt;/a&gt;, marked as a duplicate, has Release Note Needed set.&lt;br/&gt;
Is a release note needed?&lt;br/&gt;
If so, it should be written and the issue should be resolved.&lt;/p&gt;</comment>
                            <comment id="12874643" author="kmarsden" created="Wed, 2 Jun 2010 17:23:13 +0100"  >&lt;p&gt;Yes, I think we should have a release note saying that the client Driver will no longer commit on setTransactionIsolation if the isolation level does not change. Users relying on the previous behavior to commit their transaction, should now add an explicit commit to their code.&lt;/p&gt;

&lt;p&gt;See Writing a release note at: &lt;a href=&quot;http://wiki.apache.org/db-derby/ReleaseNoteProcess&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ReleaseNoteProcess&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12878752" author="lilywei" created="Mon, 14 Jun 2010 22:29:20 +0100"  >&lt;p&gt;Thanks to Kathey, I am able to prepare the release note for setTransactionIsolation change. The change was made to client to match the embedded behavior and to improve client performance.&lt;/p&gt;</comment>
                            <comment id="12881186" author="kristwaa" created="Tue, 22 Jun 2010 13:27:45 +0100"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;Here are my comments on the release note:&lt;br/&gt;
&amp;#8212; Summary of Change&lt;br/&gt;
 a) Typo in method name. Maybe use &amp;lt;tt&amp;gt;&amp;lt;/tt&amp;gt; around method names? Include the API class, i.e. Connection.getTransactionIsolation?&lt;br/&gt;
I.e. &quot;&amp;lt;tt&amp;gt;Connection.setTransactionIsolation&amp;lt;/tt&amp;gt; in the Derby client driver will not issue a commit if the isolation level does not change.&quot;&lt;br/&gt;
&amp;#8212; Symptoms Seen by Applications Affected by Change&lt;br/&gt;
 b) &quot;Application&quot; -&amp;gt; &quot;Applications&quot;&lt;br/&gt;
&amp;#8212; Incompatibilities with Previous Release&lt;br/&gt;
 c) &quot;In previous releases, &amp;lt;tt&amp;gt;Connection.setTransactionIsolation&amp;lt;/tt&amp;gt; in the Derby client driver would issue a commit even if the isolation level did not change.&quot;&lt;br/&gt;
 d) Skip the rest of the paragraph, it is already mentioned under summary of change?&lt;br/&gt;
&amp;#8212; Rationale for Change&lt;br/&gt;
 e) &quot; ...embedded behavior...&quot; -&amp;gt; &quot;...behavior of the embedded driver...&quot;&lt;br/&gt;
&amp;#8212; Application Changes Required&lt;br/&gt;
 f) &quot;transactions&quot; -&amp;gt; &quot;transaction&quot;?&lt;/p&gt;

&lt;p&gt;Use your own judgment on the suggestions &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12881212" author="lilywei" created="Tue, 22 Jun 2010 15:30:06 +0100"  >&lt;p&gt;Thanks Kristian for reviewing the release note. I make the change accordingly.&lt;br/&gt;
a) Typo in method name. Maybe use &amp;lt;tt&amp;gt;&amp;lt;/tt&amp;gt; around method names? Include the API class, i.e. Connection.getTransactionIsolation?&lt;br/&gt;
I.e. &quot;&amp;lt;tt&amp;gt;Connection.setTransactionIsolation&amp;lt;/tt&amp;gt; in the Derby client driver will not issue a commit if the isolation level does not change.&quot;&lt;br/&gt;
 &amp;lt;tt&amp;gt;&amp;lt;/tt&amp;gt; has been added to API class for the releaseNote of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
&amp;#8212; Symptoms Seen by Applications Affected by Change&lt;br/&gt;
b) &quot;Application&quot; -&amp;gt; &quot;Applications&quot;&lt;br/&gt;
This has been changed.&lt;br/&gt;
&amp;#8212; Incompatibilities with Previous Release&lt;br/&gt;
c) &quot;In previous releases, &amp;lt;tt&amp;gt;Connection.setTransactionIsolation&amp;lt;/tt&amp;gt; in the Derby client driver would issue a commit even if the isolation level did not change.&quot;&lt;br/&gt;
The change has been made accordingly.&lt;br/&gt;
d) Skip the rest of the paragraph, it is already mentioned under summary of change?&lt;br/&gt;
As it for me, it is clearer to have it there. I decide to keep it there. I hope that is okay with everybody. If not, we can take it out.&lt;br/&gt;
&amp;#8212; Rationale for Change&lt;br/&gt;
e) &quot; ...embedded behavior...&quot; -&amp;gt; &quot;...behavior of the embedded driver...&quot;&lt;br/&gt;
Changed.&lt;br/&gt;
&amp;#8212; Application Changes Required&lt;br/&gt;
f) &quot;transactions&quot; -&amp;gt; &quot;transaction&quot;?&lt;br/&gt;
Fix the typo.&lt;/p&gt;

&lt;p&gt;Thank you so much for all the help,&lt;br/&gt;
Lily&lt;/p&gt;</comment>
                            <comment id="13007142" author="kmarsden" created="Tue, 15 Mar 2011 20:19:36 +0000"  >&lt;p&gt;reopen to add label&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12355129">DERBY-2064</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12432457">DERBY-4343</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12413957" name="DERBY-4314-2.diff" size="3766" author="lilywei" created="Sun, 19 Jul 2009 19:49:30 +0100"/>
                            <attachment id="12414454" name="DERBY-4314-3.diff" size="3734" author="lilywei" created="Fri, 24 Jul 2009 18:01:01 +0100"/>
                            <attachment id="12414855" name="DERBY-4314-5.diff" size="3750" author="lilywei" created="Wed, 29 Jul 2009 08:26:31 +0100"/>
                            <attachment id="12440631" name="DERBY-4314-6b-combinepiggybacking.diff" size="11243" author="lilywei" created="Fri, 2 Apr 2010 19:11:44 +0100"/>
                            <attachment id="12442869" name="DERBY-4314-6c-combineaftermerge.diff" size="11389" author="lilywei" created="Mon, 26 Apr 2010 18:18:41 +0100"/>
                            <attachment id="12443295" name="DERBY-4314-7-withoutpiggybacking.diff" size="4965" author="lilywei" created="Fri, 30 Apr 2010 16:42:31 +0100"/>
                            <attachment id="12443415" name="DERBY-4314-7b-combine.diff" size="16115" author="lilywei" created="Sun, 2 May 2010 18:04:02 +0100"/>
                            <attachment id="12413933" name="DERBY-4314.diff" size="1430" author="lilywei" created="Sat, 18 Jul 2009 22:25:09 +0100"/>
                            <attachment id="12442898" name="ReproIsoLost.java" size="4074" author="kmarsden" created="Mon, 26 Apr 2010 22:11:12 +0100"/>
                            <attachment id="12440632" name="TestConnReuse.java" size="1831" author="lilywei" created="Fri, 2 Apr 2010 19:11:44 +0100"/>
                            <attachment id="12418246" name="derby-4314-6a-initial_piggybacking.diff" size="7759" author="kristwaa" created="Tue, 1 Sep 2009 15:04:52 +0100"/>
                            <attachment id="12418247" name="derby-4314-6a-initial_piggybacking.stat" size="197" author="kristwaa" created="Tue, 1 Sep 2009 15:04:52 +0100"/>
                            <attachment id="12443291" name="derby-4314-6d-handle_xa.diff" size="15559" author="kristwaa" created="Fri, 30 Apr 2010 15:41:25 +0100"/>
                            <attachment id="12447704" name="releaseNote.html" size="4281" author="lilywei" created="Tue, 22 Jun 2010 15:30:06 +0100"/>
                            <attachment id="12447069" name="releaseNote.html" size="4169" author="lilywei" created="Mon, 14 Jun 2010 22:29:20 +0100"/>
                            <attachment id="12442899" name="utilXid.java" size="1591" author="kmarsden" created="Mon, 26 Apr 2010 22:11:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 18 Jul 2009 21:25:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31191</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36637</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>