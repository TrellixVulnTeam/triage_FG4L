<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:35:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-775/DERBY-775.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-775] Network client: Add support for scrollable, updatable, insensitive result sets</title>
                <link>https://issues.apache.org/jira/browse/DERBY-775</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is a part of the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; effort.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12326898">DERBY-775</key>
            <summary>Network client: Add support for scrollable, updatable, insensitive result sets</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Dec 2005 02:44:23 +0000</created>
                <updated>Thu, 13 Jan 2011 17:16:59 +0000</updated>
                            <resolved>Fri, 21 Apr 2006 20:14:59 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12360850" author="dagw" created="Tue, 20 Dec 2005 02:56:14 +0000"  >&lt;p&gt;Posting this in the hope that some of you DRDA experts can comment on&lt;br/&gt;
it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have been trying to figure out how to map JDBC scrollable,&lt;br/&gt;
updatable, insensitive result sets (SUR for short) onto DRDA and have&lt;br/&gt;
three questions (below).  I am assuming the semantics described in the&lt;br/&gt;
attachedment to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some background: &lt;/p&gt;

&lt;p&gt;DRDA has no concept of JDBC result sets, so the solution used in Derby&lt;br/&gt;
is to map JDBC result sets onto the DRDA cursor mechanism. Appendix B&lt;br/&gt;
in &quot;DRDA, Version 3, Volume 1: Distributed Relational Database&lt;br/&gt;
Architecture (DRDA)&quot; gives an overview of &quot;Scrollable Cursors&quot; (p&lt;br/&gt;
655).&lt;/p&gt;

&lt;p&gt;a) Sensitivity&lt;/p&gt;

&lt;p&gt;I first considered to map SUR to &quot;insensitive scrollable cursors&quot;, but&lt;br/&gt;
DRDA states that these are read only (B.2.2). It seems the &quot;sensitive&lt;br/&gt;
static cursors&quot; better matches the semantics we want: For this&lt;br/&gt;
category of cursors, the size of the result set (&quot;result table&quot; in&lt;br/&gt;
DRDA parlance) as well as the ordering of rows are fixed and this&lt;br/&gt;
cursor is updatable, cf. quote on page 656:&lt;/p&gt;

&lt;p&gt;     &quot;The cursor is always immediately sensitive to changes made using&lt;br/&gt;
     the cursor (that is, positioned updates and deletes using the&lt;br/&gt;
     same cursor).&lt;/p&gt;

&lt;p&gt;     The size of the result table does not grow after the cursor is&lt;br/&gt;
     opened and the rows are materialized. The order of the rows is&lt;br/&gt;
     established as the result table is materialized.&quot;&lt;/p&gt;

&lt;p&gt;Combined with the proper fetch, i.e. fetch INSENSITIVE (p 658) on&lt;br/&gt;
CNTQRY (i.e. we are INSENSITIVE to changes made by others), the&lt;br/&gt;
semantics match those of JDBC&apos;s insensitive result sets as we have&lt;br/&gt;
specified them :&lt;/p&gt;

&lt;p&gt;      ownDeletesAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; true&lt;br/&gt;
      ownInsertsAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; false&lt;br/&gt;
      ownUpdatesAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; true&lt;/p&gt;

&lt;p&gt;      othersDeletesAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; false&lt;br/&gt;
      othersInsertsAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; false&lt;br/&gt;
      othersUpdatesAreVisible(TYPE_SCROLL_INSENSITIVE) -&amp;gt; false&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Question 1&lt;/b&gt;: Can anyone see a problem with mapping JDBC &quot;updatable,&lt;br/&gt;
insensitive&quot; onto DRDA &quot;sensitive static&quot;? Would this be violating&lt;br/&gt;
(the spirit of) the DRDA in any way?&lt;/p&gt;


&lt;p&gt;b) Detectability&lt;/p&gt;

&lt;p&gt;In the spec, we required that we be able to detect deletes and updates&lt;br/&gt;
to the rows in the result set:&lt;/p&gt;

&lt;p&gt;      deletesAreDetected(TYPE_SCROLL_INSENSITIVE) -&amp;gt; true&lt;br/&gt;
      updatesAreDetected(TYPE_SCROLL_INSENSITIVE) -&amp;gt; true&lt;/p&gt;

&lt;p&gt;(Since inserts are not visible, they can not be detectable, either).&lt;br/&gt;
DRDA supports detection of holes in the following manner (quote,&lt;br/&gt;
P. 656):&lt;/p&gt;

&lt;p&gt;    &quot;To present a static size and static ordering for the result table, the&lt;br/&gt;
    relational database may return a hole to the application that fetches&lt;br/&gt;
    an updated or deleted row in the result table. A hole in the result&lt;br/&gt;
    table occurs when there is a difference between the result table and&lt;br/&gt;
    the underlying base table. No data can be fetched from a hole, and the&lt;br/&gt;
    hole is manifested in the QRYDTA as a row consisting of a non-null&lt;br/&gt;
    SQLCARD and a null data group.&lt;/p&gt;

&lt;p&gt;    When the current value of a row no longer satisfies the&lt;br/&gt;
    select-statement or statement-name, that row is visible in the cursor&lt;br/&gt;
    as an update hole , where the SQLCARD has a warning SQLSTATE of 02502.&lt;/p&gt;

&lt;p&gt;    When a row of the result table is deleted from the underlying base&lt;br/&gt;
    table, the row is visible in the cursor as a delete hole , where the&lt;br/&gt;
    SQLCARD has a warning SQLSTATE of 02502.&quot;&lt;/p&gt;

&lt;p&gt;For deletes, the &quot;delete hole&quot; is exactly what we need to support&lt;br/&gt;
ResultSet#rowDeleted().&lt;/p&gt;

&lt;p&gt;For updates, is is not exactly what we want, since we do not intend to&lt;br/&gt;
requalify a row after it has been updated (thereby possibly making it&lt;br/&gt;
an &quot;update hole&quot;). On the other hand, when we update a row and let it&lt;br/&gt;
remain in the result table, DRDA offers no means of conveying that the&lt;br/&gt;
row has been changed in the sense of JDBC ResultSet#rowUpdated(), as&lt;br/&gt;
far as I can tell.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Question 2&lt;/b&gt;: Is there some way we can detect the latter without&lt;br/&gt;
violating the protocol? One could imagine signalling this using&lt;br/&gt;
another warning SQLSTATE. Would this be an acceptable tweaking of the&lt;br/&gt;
DRDA?&lt;/p&gt;

&lt;p&gt;c) Query protocol&lt;/p&gt;

&lt;p&gt;For scrollable result sets, Derby uses the &quot;Limited Block Query&lt;br/&gt;
Protocol&quot;. This is allowable also for &quot;static sensitive&quot;, so I assume&lt;br/&gt;
we can use that also for SUR in the way it is presently used for&lt;br/&gt;
scrollable, read-only result sets. &lt;/p&gt;

&lt;p&gt;d) Rowset cursors (p 667)&lt;/p&gt;

&lt;p&gt;&quot;Rowset cursors&quot; seem not to be in use by the server, but the client&lt;br/&gt;
has code for handling it. Not sure at this if this code needs updating&lt;br/&gt;
for SUR.. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Question 3&lt;/b&gt;: Is it a requirement that the client be able to handle&lt;br/&gt;
row sets to be DRDA compliant? (We know our server doesn&apos;t use it for&lt;br/&gt;
now....) &lt;/p&gt;

&lt;p&gt;d) Equality of result set modification and positioned delete/update.&lt;/p&gt;

&lt;p&gt;The same cursor is being used, and the server (and our proposed&lt;br/&gt;
implementation of SUR) is agnostic to whether an updateRow/deleteRow&lt;br/&gt;
or a positioned update/delete is being invoked by the network client&lt;br/&gt;
driver, the only difference being the autocommit semantics, which is&lt;br/&gt;
handled by the driver.&lt;/p&gt;</comment>
                            <comment id="12373029" author="dagw" created="Tue, 4 Apr 2006 07:02:46 +0100"  >&lt;p&gt;Here is a patch and write-up for the client-server version of SUR. Tested&lt;br/&gt;
with derbyall on Solaris 10/x86, Sun JVM 1.4.2 with these errors:&lt;/p&gt;

&lt;p&gt;NSinSameJVM.java, DerbyNetNewServer.java, sysinfo.java, sysinfo_withproperties.java&lt;br/&gt;
on both DerbyNet and DerbyNetClient frameworks, believed to be non-related to this&lt;br/&gt;
patch.&lt;/p&gt;

&lt;p&gt;I would appreciate if someone can start looking at it; it is much smaller than the &lt;br/&gt;
patch for embedded SUR.&lt;/p&gt;</comment>
                            <comment id="12373039" author="bryanpendleton" created="Tue, 4 Apr 2006 11:44:41 +0100"  >&lt;p&gt;Thanks for the writeup file! That is very helpful.&lt;/p&gt;

&lt;p&gt;The patch applies cleanly for me, but &quot;ant all&quot; gives:&lt;/p&gt;

&lt;p&gt;compilet1:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 27 source files to /home/bpendleton/src/derby/commit/trunk/classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/bpendleton/src/derby/commit/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java:59: cannot resolve symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : variable QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         assertWarning(warn, QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                             ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /home/bpendleton/src/derby/commit/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURTest.java:83: cannot resolve symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : variable QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         assertWarning(warn, QUERY_NOT_QUALIFIED_FOR_UPDATABLE_RESULTSET);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                             ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 2 errors&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 3 warnings&lt;/p&gt;

&lt;p&gt;Any ideas what might be wrong?&lt;/p&gt;</comment>
                            <comment id="12373040" author="dagw" created="Tue, 4 Apr 2006 11:59:48 +0100"  >&lt;p&gt;Note: I did not update the 1.6 canons, as they seemed not up-to-date&lt;br/&gt;
before. I could look into that.&lt;/p&gt;

&lt;p&gt;I also intend to run the upgrade test before asking for a commit (see also&lt;br/&gt;
upgrade comments in the attached write-up).&lt;/p&gt;</comment>
                            <comment id="12373303" author="dagw" created="Wed, 5 Apr 2006 21:46:48 +0100"  >&lt;p&gt;The merge conflict that Bryan saw has been resolved. The conflicting&lt;br/&gt;
patch contained a new test which exposed a difference in SUR behavior&lt;br/&gt;
in the client relative to embedded. This has been fixed: After a&lt;br/&gt;
commit, with holdability, the client, in contrast with embedded,&lt;br/&gt;
automatically did a repositioning. This has been changed so both&lt;br/&gt;
drivers require the app to reposition the result set after a commit.&lt;/p&gt;

&lt;p&gt;&quot;derbyall&quot; has been run again with no unexpected failures.&lt;/p&gt;
</comment>
                            <comment id="12373360" author="oysteing" created="Wed, 5 Apr 2006 22:57:51 +0100"  >&lt;p&gt;So far I have reviewed all code except test changes.  The patch looks&lt;br/&gt;
good.  I have a few comments/questions:&lt;/p&gt;

&lt;p&gt;1. metadata_net.properties:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is the format and constant values used here documented anywhere?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. DRDAConnThread&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;parseSQLATTR(): Variable insensitive can be removed entirely.  It&lt;br/&gt;
  serves no purpose anymore.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3. NetResultSet/NetResultSet40&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Parameters of constructor has comments with possible values.  This&lt;br/&gt;
  needs to be updated to include QRYSNSSTC.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4. NetCursor&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The writeup says the purpose is to pop warnings, but the code seems&lt;br/&gt;
  to only handle a single warning.&lt;/li&gt;
	&lt;li&gt;Why do you have to delay the call to setIsUpdataDeleteHole until&lt;br/&gt;
  later and not do it when testing for warnings?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;5. NetStatementReply&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Call to ClientJDBCObjectFactory.newNetResultSet() lists possible&lt;br/&gt;
  values.  This needs to be updated to include QRYSNSSTC.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;6. Statement&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why have you made warnings_ protected?  It seems like it is package&lt;br/&gt;
  private that is needed.  Why not keep it private and supply a&lt;br/&gt;
  get-method?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;7. ResultSet&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why have you made suggestedFetchSize_ public?  It seems like it&lt;br/&gt;
  could be protected.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Comments for fetchSize_ and suggestedFetchSize_ are a bit brief.&lt;br/&gt;
  (And if they are to be public, you should supply javadoc).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;relativex(): Why do not the isBeforeFirstX()/isAfterLastX() test for&lt;br/&gt;
  all result sets?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;relativex(): It seems like the code to call getAbsoluteResultSet is&lt;br/&gt;
  duplicated.  I do not think the second call will ever be executed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rowUpdated():  Why not always call getIsRowUpdated?  I would&lt;br/&gt;
  think it was valid for all result sets.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rowUpdated()/rowDeleted():  Thss methods are a bit asymmetric.&lt;br/&gt;
  rowUpdated() calls a get-method while rowDeleted accesses&lt;br/&gt;
  isUpdateDeleteHole_ directly.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;updateRow(): I tried to browse the spec and the javadoc and I did&lt;br/&gt;
  not find anything that said that there is a difference&lt;br/&gt;
  between forward only cursors and scrollable cursors with respect to&lt;br/&gt;
  validity of the current position after and update.  Where is this&lt;br/&gt;
  stated?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;checkForUpdatableResultSet(): What is the difference between this&lt;br/&gt;
  new method and the existing checkUpdatableCursor()?  It seems better&lt;br/&gt;
  to change the existing than to make a new method.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12373559" author="dagw" created="Fri, 7 Apr 2006 10:02:29 +0100"  >&lt;p&gt;Here are answers to &#216;ysteins comments and questions. &lt;/p&gt;

&lt;p&gt;A new version of the patch (#3) reflecting those answers has been&lt;br/&gt;
uploaded.  In this version, some too long lines added or changed have&lt;br/&gt;
also been normalized (&amp;lt;= 80 chars wide). I also fixed added or changed&lt;br/&gt;
lines to comply with surrounding whitespace styles (tab or not).&lt;/p&gt;

&lt;p&gt;I ran derbyall using Solaris 10/x86 Sun JRE 1.4.2 with no untoward&lt;br/&gt;
results.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &quot;&#216;ystein&quot; == &#216;ystein Gr&#248;vlen (JIRA) &amp;lt;derby-dev@db.apache.org&amp;gt; wrote:&lt;br/&gt;
&#216;ystein&amp;gt; 1. metadata_net.properties:&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Is the format and constant values used here documented anywhere?&lt;/p&gt;

&lt;p&gt;As part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-965&quot; title=&quot;DatabaseMetadata method supportsResultSetConcurrency returns wrong result on network client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-965&quot;&gt;&lt;del&gt;DERBY-965&lt;/del&gt;&lt;/a&gt;, I added some comments explaining the syntax of&lt;br/&gt;
the fields I touched, please see the file from line 197 onwards. I&lt;br/&gt;
am not aware of any other documentation.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; 2. DRDAConnThread&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - parseSQLATTR(): Variable insensitive can be removed entirely.  It&lt;br/&gt;
&#216;ystein&amp;gt;   serves no purpose anymore.&lt;/p&gt;

&lt;p&gt;Agreed, removed.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; 3. NetResultSet/NetResultSet40&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Parameters of constructor has comments with possible values.  This&lt;br/&gt;
&#216;ystein&amp;gt;   needs to be updated to include QRYSNSSTC.&lt;/p&gt;

&lt;p&gt;Agreed, done.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; 4. NetCursor&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - The writeup says the purpose is to pop warnings, but the code seems&lt;br/&gt;
&#216;ystein&amp;gt;   to only handle a single warning.&lt;/p&gt;

&lt;p&gt;Currently, chained warnings are not being sent over DRDA. I know&lt;br/&gt;
Fernanda is working on a patch for that. Eventually is will be a&lt;br/&gt;
&quot;pop&quot;, right now maximum one warning is being transmitted.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; - Why do you have to delay the call to setIsUpdataDeleteHole until&lt;br/&gt;
&#216;ystein&amp;gt;   later and not do it when testing for warnings?&lt;/p&gt;

&lt;p&gt;The existing code checked for update/delete holes by relying only&lt;br/&gt;
nulldata, which is parsed later than the warning. For SUR, in addition&lt;br/&gt;
to nulldata, we send a warning (SQLState.ROW_DELETED) since this is&lt;br/&gt;
required by DRDA, cf the write-up section on this. The existing code&lt;br/&gt;
is probably non-compliant. Rather than calling setIsUpdataDeleteHole()&lt;br/&gt;
in two places, we chose to use the existing code location for calling&lt;br/&gt;
it, using the helper variable receivedDeleteHoleWarning in the SUR&lt;br/&gt;
case. I agree the code could be simplified by removing the old logic&lt;br/&gt;
(relying only on nulldata), but we chose the conservative approach.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; 5. NetStatementReply&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Call to ClientJDBCObjectFactory.newNetResultSet() lists possible&lt;br/&gt;
&#216;ystein&amp;gt;   values.  This needs to be updated to include QRYSNSSTC.&lt;/p&gt;

&lt;p&gt;Agreed, done.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; 6. Statement&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Why have you made warnings_ protected?  It seems like it is package&lt;br/&gt;
&#216;ystein&amp;gt;   private that is needed.  Why not keep it private and supply a&lt;br/&gt;
&#216;ystein&amp;gt;   get-method?&lt;/p&gt;

&lt;p&gt;Agreed, done. The old code is too not good on encapsulation, so it&lt;br/&gt;
leads one astray &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Introduced a protected method&lt;br/&gt;
Statement#getWarnings_, an accessor for warnings_, which is now&lt;br/&gt;
private.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; 7. ResultSet&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Why have you made suggestedFetchSize_ public?  It seems like it&lt;br/&gt;
&#216;ystein&amp;gt;   could be protected.&lt;/p&gt;

&lt;p&gt;Yes. I made it protected.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - Comments for fetchSize_ and suggestedFetchSize_ are a bit brief.&lt;/p&gt;

&lt;p&gt;Expanded those comments, included here for your convenience:&lt;/p&gt;

&lt;p&gt;    // Gets its initial value from the statement when the result set is created.&lt;br/&gt;
    // It can be modified by setFetchSize and retrieved via getFetchSize.&lt;br/&gt;
    protected int suggestedFetchSize_;&lt;/p&gt;

&lt;p&gt;    // Set by the net layer based on suggestedFetchSize_, protocol&lt;br/&gt;
    // type, scrollability and presence of lobs.&lt;br/&gt;
    public int fetchSize_;&lt;/p&gt;


&lt;p&gt;&#216;ystein&amp;gt;   (And if they are to be public, you should supply javadoc).&lt;br/&gt;
&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - relativex(): Why do not the isBeforeFirstX()/isAfterLastX() test for&lt;br/&gt;
&#216;ystein&amp;gt;   all result sets?&lt;/p&gt;

&lt;p&gt;For SUR, the check is performed by the getAbsoluteRowset. &lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; - relativex(): It seems like the code to call getAbsoluteResultSet is&lt;br/&gt;
&#216;ystein&amp;gt;   duplicated.  I do not think the second call will ever be executed.&lt;/p&gt;

&lt;p&gt;Yes, you are right. Vestige from a re-write. I removed this.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - rowUpdated():  Why not always call getIsRowUpdated?  I would&lt;br/&gt;
&#216;ystein&amp;gt;   think it was valid for all result sets.&lt;/p&gt;

&lt;p&gt;This method used to return false for all result sets, since&lt;br/&gt;
detectability was not implemented in Derby (for any result set). This&lt;br/&gt;
patch implements it for SUR, so getIsRowUpdated is only called for&lt;br/&gt;
SUR.  I changed this as you suggest, making sure it will return false&lt;br/&gt;
in non-SUR cases.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - rowUpdated()/rowDeleted():  Thss methods are a bit asymmetric.&lt;br/&gt;
&#216;ystein&amp;gt;   rowUpdated() calls a get-method while rowDeleted accesses&lt;br/&gt;
&#216;ystein&amp;gt;   isUpdateDeleteHole_ directly.&lt;/p&gt;

&lt;p&gt;The old code had the isUpdateDeleteHole as &quot;public&quot; and I tried to&lt;br/&gt;
make patch as small as possible, but I agree it&apos;s asymmetric. I&lt;br/&gt;
changed the access into using a getter method.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; - updateRow(): I tried to browse the spec and the javadoc and I did&lt;br/&gt;
&#216;ystein&amp;gt;   not find anything that said that there is a difference&lt;br/&gt;
&#216;ystein&amp;gt;   between forward only cursors and scrollable cursors with respect to&lt;br/&gt;
&#216;ystein&amp;gt;   validity of the current position after and update.  Where is this&lt;br/&gt;
&#216;ystein&amp;gt;   stated?&lt;/p&gt;

&lt;p&gt;This is not mandated by JDBC. I remember asking Dan about it once, but&lt;br/&gt;
I don&apos;t rememeber the rationale for making forward only cursors lose&lt;br/&gt;
the position after an updateRow. I checked the SQL 2003 standard just&lt;br/&gt;
now, but I could not find it is a requirement for positioned update,&lt;br/&gt;
either.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; - checkForUpdatableResultSet(): What is the difference between this&lt;br/&gt;
&#216;ystein&amp;gt;   new method and the existing checkUpdatableCursor()?  It seems better&lt;br/&gt;
&#216;ystein&amp;gt;   to change the existing than to make a new method.&lt;/p&gt;

&lt;p&gt;Merged these methods into one and updated masters to match the changed&lt;br/&gt;
(and better) exceptions.&lt;/p&gt;</comment>
                            <comment id="12373613" author="oysteing" created="Fri, 7 Apr 2006 19:05:45 +0100"  >&lt;p&gt;Changes looks good.  Just a few follow-up comments/questions:&lt;/p&gt;

&lt;p&gt;Dag H. Wanvik (JIRA) wrote:&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &quot;&#216;ystein&quot; == &#216;ystein Gr&#248;vlen (JIRA) &amp;lt;derby-dev@db.apache.org&amp;gt; wrote:&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; 1. metadata_net.properties:&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; - Is the format and constant values used here documented anywhere?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; As part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-965&quot; title=&quot;DatabaseMetadata method supportsResultSetConcurrency returns wrong result on network client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-965&quot;&gt;&lt;del&gt;DERBY-965&lt;/del&gt;&lt;/a&gt;, I added some comments explaining the syntax of&lt;br/&gt;
&amp;gt; the fields I touched, please see the file from line 197 onwards. I&lt;br/&gt;
&amp;gt; am not aware of any other documentation.&lt;/p&gt;

&lt;p&gt;What about the constants like 1004.  How did you figure out which&lt;br/&gt;
values to use?&lt;/p&gt;

&lt;p&gt;&amp;gt; &#216;ystein&amp;gt; 4. NetCursor&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; - Why do you have to delay the call to setIsUpdataDeleteHole until&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   later and not do it when testing for warnings?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; The existing code checked for update/delete holes by relying only&lt;br/&gt;
&amp;gt; nulldata, which is parsed later than the warning. For SUR, in addition&lt;br/&gt;
&amp;gt; to nulldata, we send a warning (SQLState.ROW_DELETED) since this is&lt;br/&gt;
&amp;gt; required by DRDA, cf the write-up section on this. The existing code&lt;br/&gt;
&amp;gt; is probably non-compliant. Rather than calling setIsUpdataDeleteHole()&lt;br/&gt;
&amp;gt; in two places, we chose to use the existing code location for calling&lt;br/&gt;
&amp;gt; it, using the helper variable receivedDeleteHoleWarning in the SUR&lt;br/&gt;
&amp;gt; case. I agree the code could be simplified by removing the old logic&lt;br/&gt;
&amp;gt; (relying only on nulldata), but we chose the conservative approach.&lt;/p&gt;

&lt;p&gt;It might be conservative, but it is not very cautious.  It seems like&lt;br/&gt;
you silently ignore scenarios where you get both a warning and data,&lt;br/&gt;
and the case where you get no data and no warning.  Should not these&lt;br/&gt;
scenarios generate an error or at least be handled by an assert?&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; 6. Statement&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; - Why have you made warnings_ protected?  It seems like it is package&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   private that is needed.  Why not keep it private and supply a&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   get-method?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Agreed, done. The old code is too not good on encapsulation, so it&lt;br/&gt;
&amp;gt; leads one astray &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Introduced a protected method&lt;br/&gt;
&amp;gt; Statement#getWarnings_, an accessor for warnings_, which is now&lt;br/&gt;
&amp;gt; private.&lt;/p&gt;

&lt;p&gt;&apos;_&apos;-suffix for method names. Is that common?&lt;/p&gt;


&lt;p&gt;&amp;gt; &#216;ystein&amp;gt; - relativex(): Why do not the isBeforeFirstX()/isAfterLastX() test for&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   all result sets?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; For SUR, the check is performed by the getAbsoluteRowset. &lt;/p&gt;

&lt;p&gt;Is there a particular reason why this code cannot be common to all&lt;br/&gt;
result sets?&lt;/p&gt;

&lt;p&gt;&amp;gt; &#216;ystein&amp;gt; - updateRow(): I tried to browse the spec and the javadoc and I did&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   not find anything that said that there is a difference&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   between forward only cursors and scrollable cursors with respect to&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   validity of the current position after and update.  Where is this&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   stated?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; This is not mandated by JDBC. I remember asking Dan about it once, but&lt;br/&gt;
&amp;gt; I don&apos;t rememeber the rationale for making forward only cursors lose&lt;br/&gt;
&amp;gt; the position after an updateRow. I checked the SQL 2003 standard just&lt;br/&gt;
&amp;gt; now, but I could not find it is a requirement for positioned update,&lt;br/&gt;
&amp;gt; either.&lt;/p&gt;

&lt;p&gt;To me it seems like a common behavior for forward-only and scrollable&lt;br/&gt;
cursors should be more important than a specific behavior for any of&lt;br/&gt;
them.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; - checkForUpdatableResultSet(): What is the difference between this&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   new method and the existing checkUpdatableCursor()?  It seems better&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt;   to change the existing than to make a new method.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Merged these methods into one and updated masters to match the changed&lt;br/&gt;
&amp;gt; (and better) exceptions.&lt;/p&gt;

&lt;p&gt;Good.  I see there are few other places that could have used this&lt;br/&gt;
method (insertRow(), refreshRow(), checkUpdatePreconditions().  Either&lt;br/&gt;
you could change that, or we should send a note to David to make him&lt;br/&gt;
aware of it for his internationalization work.&lt;/p&gt;</comment>
                            <comment id="12373647" author="oysteing" created="Fri, 7 Apr 2006 23:54:36 +0100"  >&lt;p&gt;I have had a look at the test changes in this patch.  I realize most&lt;br/&gt;
of my comments are general comments to SUR-tests rather than&lt;br/&gt;
particular to this patch.  Hence, I do not think it needs to be&lt;br/&gt;
resolved before this patch is checked in.&lt;/p&gt;

&lt;p&gt;8. SURBaseTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertWarning(): Why is the SQLState not tested for&lt;br/&gt;
  DerbyNetClientFramework()?  Would it not be more general to skip the&lt;br/&gt;
  test if SQLState was null?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;9. SURQueryMixTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I do not think the Javadoc for testNavigation is up-to-date.  It&lt;br/&gt;
  says that it requires that the resultset is position before the&lt;br/&gt;
  first row, but starts with a call to afterLast().  It is a void&lt;br/&gt;
  function, but Javadoc says it returns a map.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It seems like this test is based on making an update, read the&lt;br/&gt;
  updated row into a map and use that for comparison when you&lt;br/&gt;
  renavigate to that row.  This assumes that what you read after an&lt;br/&gt;
  update reflects the updates just made.  Do you have a test that&lt;br/&gt;
  tests that the intended update is actually reflected?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;10. HoldabilityTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do you not check warnings for isDerbyNetClientFramework?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;11. SURTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why are some of the tests on forward-only result sets and not on&lt;br/&gt;
  scrollable?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;12. updatableResultSet&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I see from the master files that different SQLStates are used in the&lt;br/&gt;
  embedded versus in the client.  E.g., 01J02 vs. 01X02, 24000 vs.&lt;br/&gt;
  XCL07/XCL08/XCL16.  Is that the way it is supposed to be?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12373751" author="dagw" created="Sun, 9 Apr 2006 12:18:45 +0100"  >&lt;p&gt;Answers to &#216;ystein&apos;s latest comments and questions. I synced up to svn&lt;br/&gt;
392313 and ran derbyall again (Solaris 10/x86, Sun JDK 1.4.2).&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &quot;&#216;ystein&quot; == &#216;ystein Gr&#248;vlen (JIRA) &amp;lt;derby-dev@db.apache.org&amp;gt; wrote:&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; What about the constants like 1004.  How did you figure out&lt;br/&gt;
&#216;ystein&amp;gt; which values to use?&lt;/p&gt;

&lt;p&gt;These constants are from the Java ResultSet interface:&lt;/p&gt;

&lt;p&gt;../jdk1.5.0/src.zip:java/sql/ResultSet.java:&lt;br/&gt;
    :&lt;br/&gt;
    int TYPE_FORWARD_ONLY = 1003;&lt;br/&gt;
    :&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; It might be conservative, but it is not very cautious.  It&lt;br/&gt;
&#216;ystein&amp;gt; seems like you silently ignore scenarios where you get both a&lt;br/&gt;
&#216;ystein&amp;gt; warning and data, and the case where you get no data and no&lt;br/&gt;
&#216;ystein&amp;gt; warning.  Should not these scenarios generate an error or at&lt;br/&gt;
&#216;ystein&amp;gt; least be handled by an assert?&lt;/p&gt;

&lt;p&gt;I think changing existing code semantics is less cautious than keeping&lt;br/&gt;
it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But I agree it could be useful to include an assert of the new&lt;br/&gt;
case ensuring that there is nulldata whenever we get the new warning&lt;br/&gt;
(SUR scenario).  Did that. For the &quot;old&quot; case, I am &lt;b&gt;not&lt;/b&gt; certain it&lt;br/&gt;
could never happen in some scenario, so I won&apos;t add an assert for&lt;br/&gt;
that.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; &lt;br/&gt;
&#216;ystein&amp;gt; &apos;_&apos;-suffix for method names. Is that common?&lt;/p&gt;

&lt;p&gt;There is already a API method called getWarnings, so I added a suffix&lt;br/&gt;
to indicate that this is an internal method. But you are right, this&lt;br/&gt;
suffix is not in frequent use, so I have changed the name to&lt;br/&gt;
getSqlWarnings.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; Is there a particular reason why this code cannot be common&lt;br/&gt;
&#216;ystein&amp;gt; to all result sets?&lt;/p&gt;

&lt;p&gt;I guess not, but I think the call to getAbsoluteRowset is necessary&lt;br/&gt;
and sufficient.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; To me it seems like a common behavior for forward-only and&lt;br/&gt;
&#216;ystein&amp;gt; scrollable cursors should be more important than a specific&lt;br/&gt;
&#216;ystein&amp;gt; behavior for any of them.&lt;/p&gt;

&lt;p&gt;I guess in a forward-only updatable result set, the expectation would&lt;br/&gt;
be that after updating a row you would want to reposition to the next&lt;br/&gt;
row always.&lt;/p&gt;

&lt;p&gt;In a scrollable result set we have no a priori direction in which to&lt;br/&gt;
move after an update, so IMHO it does not seem logical to inherit the&lt;br/&gt;
behavior of forward-only for scrollable.&lt;/p&gt;

&lt;p&gt;If anything, I would suggest removing this behavior for&lt;br/&gt;
forward-only. Anyway, the embedded SUR does not require repositioning&lt;br/&gt;
either, so if you want this changed, you should log a JIRA issue, I&lt;br/&gt;
think.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; Good.  I see there are few other places that could have used&lt;br/&gt;
&#216;ystein&amp;gt; this method (insertRow(), refreshRow(),&lt;br/&gt;
&#216;ystein&amp;gt; checkUpdatePreconditions().  Either you could change that, or&lt;br/&gt;
&#216;ystein&amp;gt; we should send a note to David to make him aware of it for&lt;br/&gt;
&#216;ystein&amp;gt; his internationalization work.&lt;/p&gt;

&lt;p&gt;I agree. Although it might make as much sense do do this as part of a&lt;br/&gt;
general clean-up, I changed those to use the same method&lt;br/&gt;
(checkForUpdatableResultSet), as well, since it moves in the right&lt;br/&gt;
direction and is SUR-related.&lt;/p&gt;</comment>
                            <comment id="12373845" author="andreask" created="Mon, 10 Apr 2006 21:11:38 +0100"  >&lt;p&gt;This patch (derby-775-5.diff) addresses comments about the test changes. The patch is a modification of derby-775-4.diff.&lt;/p&gt;

&lt;p&gt;The test changes are:&lt;/p&gt;

&lt;p&gt;SURBaseTest:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;assertWarning: asserts that warning has correct SQLState. If the warning is null, this is accepted if not in embedded framework.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;SURQueryMixTest:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Previously the test would accept that the ResultSet got concurrency mode CONCUR_READ_ONLY and skip update testing. Now it will assert here, to prevent regression.&lt;/li&gt;
	&lt;li&gt;updated javadoc for testNavigation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HoldabilityTest:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;uses assertWarning from SURBaseTest. It also asserts on concurrency mode, instead of skipping the update part, to prevent regression.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12374929" author="oysteing" created="Tue, 18 Apr 2006 21:00:28 +0100"  >&lt;p&gt;Changes looks good.  I have follow-up comments on a two issues:&lt;/p&gt;

&lt;p&gt;Dag H. Wanvik (JIRA) wrote:&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; least be handled by an assert?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think changing existing code semantics is less cautious than keeping&lt;br/&gt;
&amp;gt; it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But I agree it could be useful to include an assert of the new&lt;br/&gt;
&amp;gt; case ensuring that there is nulldata whenever we get the new warning&lt;br/&gt;
&amp;gt; (SUR scenario).  Did that. For the &quot;old&quot; case, I am &lt;b&gt;not&lt;/b&gt; certain it&lt;br/&gt;
&amp;gt; could never happen in some scenario, so I won&apos;t add an assert for&lt;br/&gt;
&amp;gt; that.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;That you are not certain that it could never happen, worries me even&lt;br/&gt;
more since you have disabled the handling of this case.  Earlier, this&lt;br/&gt;
case would result in a &quot;delete hole&quot;.  Now, it is just ignored.  What&lt;br/&gt;
will happen if a client tries to access the current record?&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; To me it seems like a common behavior for forward-only and&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; scrollable cursors should be more important than a specific&lt;br/&gt;
&amp;gt; &#216;ystein&amp;gt; behavior for any of them.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I guess in a forward-only updatable result set, the expectation would&lt;br/&gt;
&amp;gt; be that after updating a row you would want to reposition to the next&lt;br/&gt;
&amp;gt; row always.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; In a scrollable result set we have no a priori direction in which to&lt;br/&gt;
&amp;gt; move after an update, so IMHO it does not seem logical to inherit the&lt;br/&gt;
&amp;gt; behavior of forward-only for scrollable.&lt;/p&gt;

&lt;p&gt;I cannot see how direction is relevant.  This is about being able to&lt;br/&gt;
access the current record after it has been updated before any&lt;br/&gt;
navigation.  I do not understand why that should make more or less&lt;br/&gt;
sense for SUR than for forward-only result sets.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; If anything, I would suggest removing this behavior for&lt;br/&gt;
&amp;gt; forward-only. Anyway, the embedded SUR does not require repositioning&lt;br/&gt;
&amp;gt; either, so if you want this changed, you should log a JIRA issue, I&lt;br/&gt;
&amp;gt; think.&lt;/p&gt;

&lt;p&gt;I think you are saying that for SUR it makes most sense to still be&lt;br/&gt;
able to access the current record after it has been updated.  I agree,&lt;br/&gt;
and I also agree that would be the ideal solution for forward-only.&lt;br/&gt;
However, given that forward-only has a different behavior, my question&lt;br/&gt;
is why you think it is more important to implement the proposed&lt;br/&gt;
behavior for SUR than to have a common behavior for both?&lt;/p&gt;
</comment>
                            <comment id="12375138" author="dagw" created="Wed, 19 Apr 2006 22:51:07 +0100"  >&lt;p&gt;A new version of the patch. Changes details&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Merge conflict with David&apos;s changes for am/ResultSet.java have&lt;br/&gt;
    been resolved, in some cases by keeping his changes and dropping&lt;br/&gt;
    similar changes in the previous version of this patch, in other&lt;br/&gt;
    cases vice versa. Notably this patch in a few places replaces&lt;br/&gt;
    XJ086 with XJ083. This makes for more precise indication on&lt;br/&gt;
    offending operation and more similarity to embedded). David, it&lt;br/&gt;
    would be nice if you could have a look at this to see if it is ok&lt;br/&gt;
    with you.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed a wrong operation string (cancelRowUpdates) to&lt;br/&gt;
    checkForUpdatableResultSet. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;An added sane assertion for the case &#216;ystein asked for in&lt;br/&gt;
    net/NetCursor.java &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A fix to make sure detectability for rowDeleted isn&apos;t introduced&lt;br/&gt;
    for FORWARD_ONLY result sets (side-effect of offering it for SUR).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed a test comment line no longer pertinent in&lt;br/&gt;
    lang/updatableResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have run derbyall for Solaris 10/x86 with Sun JDK 1.5 again.&lt;/p&gt;

&lt;p&gt;Answers and comments to &#216;ystein&apos;s latest comments.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &quot;&#216;ystein&quot; == &#216;ystein Gr&#248;vlen (JIRA) &amp;lt;derby-dev@db.apache.org&amp;gt; wrote:&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; That you are not certain that it could never happen, worries&lt;br/&gt;
&#216;ystein&amp;gt; me even more since you have disabled the handling of this&lt;br/&gt;
&#216;ystein&amp;gt; case.  Earlier, this case would result in a &quot;delete hole&quot;.&lt;br/&gt;
&#216;ystein&amp;gt; Now, it is just ignored.  What will happen if a client tries&lt;br/&gt;
&#216;ystein&amp;gt; to access the current record?&lt;/p&gt;

&lt;p&gt;You are right, I added a sane mode invariant check.&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; I cannot see how direction is relevant.  This is about being&lt;br/&gt;
&#216;ystein&amp;gt; able to access the current record after it has been updated&lt;br/&gt;
&#216;ystein&amp;gt; before any navigation.  I do not understand why that should&lt;br/&gt;
&#216;ystein&amp;gt; make more or less sense for SUR than for forward-only result&lt;br/&gt;
&#216;ystein&amp;gt; sets.&lt;/p&gt;

&lt;p&gt;I was just trying to guess at why the restriction was introduced or&lt;br/&gt;
why it was felt acceptable. My thought was it might be easier to&lt;br/&gt;
specify the cursor&apos;s whereabouts in the forward only case (&quot;just&lt;br/&gt;
before next row&quot;).&lt;/p&gt;

&lt;p&gt;&#216;ystein&amp;gt; I think you are saying that for SUR it makes most sense to&lt;br/&gt;
&#216;ystein&amp;gt; still be able to access the current record after it has been&lt;br/&gt;
&#216;ystein&amp;gt; updated.  I agree, and I also agree that would be the ideal&lt;br/&gt;
&#216;ystein&amp;gt; solution for forward-only.  However, given that forward-only&lt;br/&gt;
&#216;ystein&amp;gt; has a different behavior, my question is why you think it is&lt;br/&gt;
&#216;ystein&amp;gt; more important to implement the proposed behavior for SUR&lt;br/&gt;
&#216;ystein&amp;gt; than to have a common behavior for both?&lt;/p&gt;

&lt;p&gt;I guess you could argue that keeping the forward-only behavior and&lt;br/&gt;
then possibly changing both FO and SUR at a later date is a better&lt;br/&gt;
(more conservative) approach. But lifting the requirement should&lt;br/&gt;
hopefully not prove too problematic for the end user.  Anyway, this&lt;br/&gt;
patch is about making the client version of SUR; embedded behaves the&lt;br/&gt;
same way, so I suggest we don&apos;t change this for now. If you think SUR&lt;br/&gt;
should be changed to follow the semantics of forward-only, please file&lt;br/&gt;
a JIRA for it. Alternately we should file a JIRA to the lift the&lt;br/&gt;
requirement for FO unless there is a good reason to keep it the way it&lt;br/&gt;
is.&lt;/p&gt;
</comment>
                            <comment id="12375170" author="davidvc" created="Thu, 20 Apr 2006 01:44:43 +0100"  >&lt;p&gt;Hi, Dag.  These changes look fine to me.  I generally believe you know better than I what the appropriate message is.  I&apos;m going through completely out of context trying to convert these hardcoded strings to internationalized strings, but you actually know what&apos;s going on in the code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="12375330" author="oysteing" created="Thu, 20 Apr 2006 18:45:53 +0100"  >&lt;p&gt;Changes look good.  I think this patch is ready for commit.&lt;/p&gt;

&lt;p&gt;I agree that at this stage it makes most sense to leave the issue of validity of current row after an update to a separate Jira issue.  &lt;/p&gt;</comment>
                            <comment id="12375377" author="dagw" created="Thu, 20 Apr 2006 23:15:48 +0100"  >&lt;p&gt;Patch did not apply correctly any longer, fixed a merge conflict with spilitmessages.java. &lt;br/&gt;
Made sure it applies and compiles again.&lt;/p&gt;</comment>
                            <comment id="12375544" author="bernt" created="Fri, 21 Apr 2006 20:14:59 +0100"  >&lt;p&gt;Committed revision 395866.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12325456">DERBY-690</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12324908" name="775-writeup.txt" size="7509" author="dagw" created="Tue, 4 Apr 2006 07:02:46 +0100"/>
                            <attachment id="12324910" name="derby-775-1.diff" size="96347" author="dagw" created="Tue, 4 Apr 2006 07:02:46 +0100"/>
                            <attachment id="12324909" name="derby-775-1.stat" size="2834" author="dagw" created="Tue, 4 Apr 2006 07:02:46 +0100"/>
                            <attachment id="12324981" name="derby-775-2.diff" size="97954" author="dagw" created="Wed, 5 Apr 2006 21:46:48 +0100"/>
                            <attachment id="12324980" name="derby-775-2.stat" size="2911" author="dagw" created="Wed, 5 Apr 2006 21:46:46 +0100"/>
                            <attachment id="12325022" name="derby-775-3.diff" size="106855" author="dagw" created="Fri, 7 Apr 2006 10:02:29 +0100"/>
                            <attachment id="12325021" name="derby-775-3.stat" size="3020" author="dagw" created="Fri, 7 Apr 2006 10:02:27 +0100"/>
                            <attachment id="12325092" name="derby-775-4.diff" size="137177" author="dagw" created="Sun, 9 Apr 2006 12:18:45 +0100"/>
                            <attachment id="12325091" name="derby-775-4.stat" size="3010" author="dagw" created="Sun, 9 Apr 2006 12:18:45 +0100"/>
                            <attachment id="12325133" name="derby-775-5.diff" size="141569" author="andreask" created="Mon, 10 Apr 2006 21:11:38 +0100"/>
                            <attachment id="12325134" name="derby-775-5.stat" size="3010" author="andreask" created="Mon, 10 Apr 2006 21:11:38 +0100"/>
                            <attachment id="12325561" name="derby-775-6.diff" size="161550" author="dagw" created="Wed, 19 Apr 2006 22:51:07 +0100"/>
                            <attachment id="12325560" name="derby-775-6.stat" size="3076" author="dagw" created="Wed, 19 Apr 2006 22:51:07 +0100"/>
                            <attachment id="12325622" name="derby-775-7.diff" size="161704" author="dagw" created="Thu, 20 Apr 2006 23:15:48 +0100"/>
                            <attachment id="12325621" name="derby-775-7.stat" size="3076" author="dagw" created="Thu, 20 Apr 2006 23:15:48 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Apr 2006 10:44:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29698</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0nsv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37674</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>