<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-712/DERBY-712.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-712] Support for sequences</title>
                <link>https://issues.apache.org/jira/browse/DERBY-712</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Would like to see support added for sequences.  This would permit a select against the sequence to always obtain a ever increasing/decreasing value.  The identity column works fine but there are times for applications where the application needs to obtain the sequence number and use it prior to the database write.  Subsequent calls to the table/column would result in a new number on each call.&lt;/p&gt;

&lt;p&gt;SQL such as the following:&lt;br/&gt;
SELECT NEXT VALUE FOR sequence_name FROM sometable ; would result in a next value.&lt;/p&gt;</description>
                <environment>feature request </environment>
        <key id="12325742">DERBY-712</key>
            <summary>Support for sequences</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="suranjay">Suran Jayathilaka</assignee>
                                    <reporter username="tdahbura">Tony Dahbura</reporter>
                        <labels>
                    </labels>
                <created>Thu, 17 Nov 2005 13:08:47 +0000</created>
                <updated>Tue, 4 Mar 2014 19:04:32 +0000</updated>
                            <resolved>Wed, 7 Apr 2010 14:30:07 +0100</resolved>
                                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>17</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12374817" author="pistachon" created="Tue, 18 Apr 2006 05:38:25 +0100"  >&lt;p&gt;There&apos;s a way to get the current value of a sequence in Oracle.&lt;/p&gt;

&lt;p&gt;SELECT sequence_name.CURRVAL FROM DUAL.&lt;/p&gt;

&lt;p&gt;Is that what you need?&lt;/p&gt;</comment>
                            <comment id="12516727" author="zhamdi" created="Tue, 31 Jul 2007 17:14:21 +0100"  >&lt;p&gt;Hi people there,&lt;/p&gt;

&lt;p&gt;I&apos;m using derby as a jee/jpa application endpoint (through hibernate), before I encountred this missing feature Derby seamed to me the perfect product, evolving drastically even in performance if I beleive what was said in the sun tech days(compared to mySql). I think the sequence mecanism is one that should be implemented by a serious database like Derby, one &lt;del&gt;but not the only&lt;/del&gt; good reason for that is that persistence frameworks are more and more present in applications, and to have portability between databases (to be able to migrate to Derby), it&apos;s important to have this feature that I imagine doesn&apos;t take a lot to implement / compared to what it brings to users.&lt;/p&gt;

&lt;p&gt;I&apos;ll try the @TableGenerator approach, hoping it will work.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Zied Hamdi&lt;/p&gt;</comment>
                            <comment id="12516735" author="zhamdi" created="Tue, 31 Jul 2007 17:56:37 +0100"  >&lt;p&gt;Ok I&apos;m happy it works:&lt;/p&gt;

&lt;p&gt;using these annotations:&lt;/p&gt;

&lt;p&gt;	@Id&lt;br/&gt;
	@GeneratedValue(strategy = TABLE, generator = &quot;persistent_gen&quot;)&lt;br/&gt;
	@TableGenerator(name = &quot;persistent_gen&quot;, table = &quot;persistent_key_gen&quot;, pkColumnName = &quot;seq_name&quot;, &lt;br/&gt;
			valueColumnName = &quot;seq_value&quot;, pkColumnValue = &quot;Persistence_seq&quot;, initialValue = 1, allocationSize = 1)&lt;/p&gt;


&lt;p&gt;Regards,&lt;br/&gt;
Zied Hamdi&lt;/p&gt;</comment>
                            <comment id="12518159" author="ndeloof" created="Tue, 7 Aug 2007 15:12:16 +0100"  >&lt;p&gt;I&apos;d like to use Derby as a replacement for Oracle during development, to allow the &quot;database per developer&quot; principle.&lt;/p&gt;

&lt;p&gt;I can&apos;t change my hibernate/jpa annotations and have to set the generator to &quot;sequence&quot;. Having support for them in derby would be great for me !&lt;/p&gt;</comment>
                            <comment id="12521145" author="rsshilli" created="Mon, 20 Aug 2007 17:36:08 +0100"  >&lt;p&gt;FWIW, this would be very high value.  Currently our work around is to create tables with auto-increment that look like sequences.  Sucks.&lt;/p&gt;

&lt;p&gt;Also, I believe that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-103&quot; title=&quot;Global Oracle/Axion style sequence generator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-103&quot;&gt;&lt;del&gt;DERBY-103&lt;/del&gt;&lt;/a&gt; is a duplicate of this issue.  It has lots of votes too.&lt;/p&gt;</comment>
                            <comment id="12626451" author="noodlez84" created="Thu, 28 Aug 2008 07:45:48 +0100"  >&lt;p&gt;Is this still true?  I ask because the last post here was over a here ago, and perhaps Derby got sequence support along the way. =)&lt;/p&gt;</comment>
                            <comment id="12626545" author="rhillegas" created="Thu, 28 Aug 2008 13:37:08 +0100"  >&lt;p&gt;Hi Karl,&lt;/p&gt;

&lt;p&gt;No-one has picked up this enhancement request. Support for sequence numbers did not change in the latest feature release, 10.4.&lt;/p&gt;</comment>
                            <comment id="12663385" author="suranjay" created="Tue, 13 Jan 2009 17:57:46 +0000"  >&lt;p&gt;Hi!&lt;/p&gt;

&lt;p&gt;I would like to work on adding this much desired feature to Derby. I have already started reading up on Sequences and going through the code. I would be very grateful for some pointers from experienced Derby developers as to a entry point to begin development.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran.&lt;/p&gt;</comment>
                            <comment id="12663457" author="rhillegas" created="Tue, 13 Jan 2009 20:25:07 +0000"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for expressing interest in this feature. It would be a great addition to Derby.&lt;/p&gt;

&lt;p&gt;I think that a successful feature starts out with a good plan. You will want to think about the following:&lt;/p&gt;

&lt;p&gt;A) Figure out how much of the ANSI/ISO syntax you want to implement.&lt;/p&gt;

&lt;p&gt;B) Understand how much work is involved.&lt;/p&gt;

&lt;p&gt;I recommend reading a functional spec for one of our new features in order to get a good overview of what you will need to think about. I recommend taking a look at the functional spec for generated columns. See &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-481&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-481&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don&apos;t already have a copy of the 2008 SQL standard, you can get it here: &lt;a href=&quot;http://www.wiscorp.com/SQLStandards.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.wiscorp.com/SQLStandards.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More comments below.&lt;/p&gt;

&lt;p&gt;------------ A ----------------&lt;/p&gt;

&lt;p&gt;I think that the right place to start is to indicate how much of the ANSI/ISO syntax you want to implement.&lt;/p&gt;

&lt;p&gt;The key syntax sections of the 2008 SQL Standard seem to be in part 2:&lt;/p&gt;

&lt;p&gt;4.21 Sequence generators (The overview of how sequence generators behave)&lt;/p&gt;

&lt;p&gt;6.13 &amp;lt;next value expression&amp;gt; (The syntax for selecting the next value from a sequence generator)&lt;/p&gt;

&lt;p&gt;11.62&amp;lt;sequence generator definition&amp;gt; (The syntax for declaring a sequence generator)&lt;/p&gt;

&lt;p&gt;11.63&amp;lt;alter sequence generator statement&amp;gt; (The syntax for changing a sequence generator)&lt;/p&gt;

&lt;p&gt;11.64&amp;lt;drop sequence generator statement&amp;gt; (The syntax for deleting a sequence generator)&lt;/p&gt;

&lt;p&gt;I recommend starting out with a modest plan, which you can grow incrementally over time. Start out with the simplest create/drop syntax:&lt;/p&gt;

&lt;p&gt;   CREATE SEQUENCE schemaName.sequenceGeneratorName&lt;/p&gt;

&lt;p&gt;   DROP SEQUENCE schemaName.sequenceGeneratorName RESTRICT&lt;/p&gt;

&lt;p&gt;That is,&lt;/p&gt;

&lt;p&gt;1) Don&apos;t start out implementing the fancy clauses on the CREATE SEQUENCE statement.&lt;/p&gt;

&lt;p&gt;2) Don&apos;t bother implementing ALTER SEQUENCE right away.&lt;/p&gt;

&lt;p&gt;3) Don&apos;t bother implementing DROP SEQUENCE ... CASCADE right away.&lt;/p&gt;

&lt;p&gt;When you add support for&lt;/p&gt;

&lt;p&gt;   NEXT VALUE FOR schemaName.sequenceGeneratorName&lt;/p&gt;

&lt;p&gt;you will need to prevent this clause from appearing in a number of contexts.&lt;/p&gt;


&lt;p&gt;Besides the syntax, catalog support will be the other major piece of the external api for your feature. You will probably end up adding a new system catalog, SYS.SYSSEQUENCES. A good place to start here is to study the layout of the SEQUENCES table in part 11 of the 2008 SQL standard, section 6.42.&lt;/p&gt;

&lt;p&gt;I don&apos;t think this feature has any implications for Derby&apos;s implementations of JDBC metadata.&lt;/p&gt;


&lt;p&gt;------------ B ----------------&lt;/p&gt;

&lt;p&gt;If you read one of our recent functional specs, you will see that you will need to plan for the following pieces of work. Other people may volunteer to do some of this work. At a minimum, I&apos;m sure the community will give you plenty of advice:&lt;/p&gt;

&lt;p&gt;1) Syntax (discussed above)&lt;br/&gt;
2) Catalog support (discussed above)&lt;br/&gt;
3) Dependency management&lt;br/&gt;
4) Upgrade logic&lt;br/&gt;
5) dblook support for recreating your CREATE SEQUENCE statements&lt;br/&gt;
6) User documentation&lt;/p&gt;</comment>
                            <comment id="12680568" author="rhillegas" created="Tue, 10 Mar 2009 18:21:45 +0000"  >&lt;p&gt;Attaching the first rev of a functional spec for sequence generators. This spec describes changes needed to create, invoke, and drop sequence generators. This spec does not address the incremental work needed to:&lt;/p&gt;

&lt;p&gt;1) alter an existing sequence generator&lt;/p&gt;

&lt;p&gt;2) wire sequence generators into the Statement.getGeneratedKeys() logic&lt;/p&gt;</comment>
                            <comment id="12683527" author="suranjay" created="Thu, 19 Mar 2009 17:22:12 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;First of all thank you very much for posting this detailed functional specification.&lt;/p&gt;

&lt;p&gt;For the Computer Science degree course I am following in my university, we&apos;re supposed to complete a research or implementation based project. Having had a wonderful experience working with the Derby community last year, I decided to contribute to Derby as fulfillment of this requirement, and selected this issue, i.e. Adding sequence generators for Apache Derby. In the days since I assigned this issue to myself, I did some background research and submitted a project proposal, literature survey and interim report which were accepted by the university project committee. My plan was to begin the implementation work immediately after the semester exams which have only just finished.&lt;/p&gt;

&lt;p&gt;Although I haven&apos;t been able to produce any work I can share with the community, I am now ready to begin with the coding, and would be very much obliged if you&apos;d be willing to act as a mentor to me during the implementation process.&lt;/p&gt;

&lt;p&gt;Furthermore, since Google Summer of Code 2009 is starting, I would like to submit a proposal for implementing sequence generators for Derby, and would like to have your feedback.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;



</comment>
                            <comment id="12683918" author="rhillegas" created="Fri, 20 Mar 2009 16:03:47 +0000"  >&lt;p&gt;Hi Suran. This is terrific. I would be delighted to mentor you as you implement this feature. I have added this project as one of Derby&apos;s Summer of Code possibilities: &lt;a href=&quot;http://wiki.apache.org/general/SummerOfCode2009#derby-project&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/general/SummerOfCode2009#derby-project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you are ready to code, I would recommend starting with the catalog work:&lt;/p&gt;

&lt;p&gt;1) Add the new SYSSEQUENCES and SYSPERMS tables&lt;/p&gt;

&lt;p&gt;2) Add upgrade logic and tests to support the creation of these catalogs in old (10.5 and earlier) databases&lt;/p&gt;

&lt;p&gt;The SYSROLES table was just added to Derby in 10.5 and should serve as a good example of how to add a new catalog.&lt;/p&gt;

&lt;p&gt;Feel free to pepper me with questions. Thanks!&lt;/p&gt;</comment>
                            <comment id="12683950" author="suranjay" created="Fri, 20 Mar 2009 17:20:07 +0000"  >&lt;p&gt;Hi Rick!&lt;/p&gt;

&lt;p&gt;Thank you for your prompt reply. This is verily a delightful opportunity for me.&lt;/p&gt;

&lt;p&gt;I have started working on the catalogs as you suggested, and will submit a proposal for GSoC when the accepting of proposals commences. I will definitely seek guidance from you and the community should I run into any problem.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12712573" author="suranjay" created="Sun, 24 May 2009 17:51:48 +0100"  >&lt;p&gt;Following are some questions that I asked Rick Hillegas and Rick&apos;s answers to them. Posting here because the conversation wasn&apos;t sent to the mailing list, which I will do henceforth.&lt;br/&gt;
-----------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;1. Once I have the barebones classes for the SEQUENCE catalog, what&apos;s the best way to get about testing them and fleshing them out?&lt;br/&gt;
A: It&apos;s usually easiest to write the test after you&apos;ve done the parser changes for CREATE/DROP&apos;ing your schema objects. Right now, you could add an upgrade test to verify that the new catalog is created after hard-upgrade but not after soft-upgrade. The upgrade tests live in trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/&lt;/p&gt;

&lt;p&gt;2. How can I define what comes in the indexColumnPositions array in the SYSSEQUENCESRowFactory?&lt;br/&gt;
    I currently have&lt;br/&gt;
    private static final int[][] indexColumnPositions =&lt;br/&gt;
       {&lt;br/&gt;
           &lt;/p&gt;
{SYSSEQUENCES_SEQUENCEID}
&lt;p&gt;,&lt;/p&gt;
           {SYSSEQUENCES_SEQUENCENAME, SYSSEQUENCES_SCHEMAID}
&lt;p&gt;       };&lt;br/&gt;
A: That looks like a good start. That is the array which defines the number and shapes of the indexes defined on your catalog. As you get into coding support for compilation and dependency tracking, you may discover that you need to define some other indexes to speed up access to the sequence descriptors. You can add more indexes later if you need them, so you don&apos;t have to worry too much about this right now...&lt;/p&gt;

&lt;p&gt;3. What&apos;s the use of the &quot;uniqueness&quot; array?&lt;br/&gt;
A: The array is null if ALL of the indexes on the catalog are unique indexes. If any of the indexes is non-unique, then you need to fill in an array of booleans, one per index. The slot in that array is true if the corresponding index is unique, and false otherwise. See for instance SYSCOLPERMSRowFactory. Right now both of your indexes are unique so you can leave the uniqueness array as null.&lt;/p&gt;

&lt;p&gt;4. In StoredFormatIds, I see 2 fields for some elements like TRIGGERS&lt;br/&gt;
    i.e.&lt;br/&gt;
    /**&lt;br/&gt;
       class org.apache.derby.impl.sql.catalog.TriggerDescriptorFinder&lt;br/&gt;
        */&lt;br/&gt;
       static public final int TRIGGER_DESCRIPTOR_FINDER_V01_ID =   (MIN_ID_2 + 320);&lt;/p&gt;

&lt;p&gt;       /**&lt;br/&gt;
       class org.apache.derby.impl.sql.catalog.TriggerDescriptorFinder&lt;br/&gt;
        */&lt;br/&gt;
       static public final int TRIGGER_DESCRIPTOR_V01_ID =  (MIN_ID_2 + 316);&lt;br/&gt;
   What&apos;s the difference in usage of these 2 IDs? And why is there not a class named TriggerDescriptorFinder as mentioned in the comments here?&lt;br/&gt;
A: I think that at one point there was a DependableFinder for every kind of TupleDescriptor. The DependableFinders are objects which are serialized into the DEPENDENTFINDER and PROVIDERFINDER columns of SYSDEPENDS. When they are deserialized, they are capable of asking the data dictionary for the correct kind of TupleDescriptors for the corresponding UUID columns in SYSDEPENDS. This is how persistent dependencies are serialized and how they reconstruct the dependency graph when they are read in.&lt;br/&gt;
At some point most of the DependableFinders were collapsed into a single class, DDdependableFinder and some tricky (de)serialization logic was added so that the serialized form of the DependableFinders could be as simple as possible, namely a format id corresponding to the appropriate kind of TupleDescriptor.&lt;br/&gt;
Because triggers can invoke sequence generators, you will have to use SYSDEPENDS to record persistent dependencies between triggers and sequences. So you will need to add a DependableFinder format id as well as a format id for the SequenceDescriptor.&lt;/p&gt;

&lt;p&gt;5. In the Authorizer class, do I need to add fields for creating/modifying/dropping sequences and perms, or are they covered in SCHEMA privileges?&lt;br/&gt;
A: Creating/dropping sequences should behave like the creating/dropping of other schema objects: If you own the schema, then you implicitly have permission to create/drop any kind of schema object inside that schema. So no new privileges are needed just to create/drop sequences.&lt;br/&gt;
   To invoke a sequence, however, a new privilege is needed: USAGE.  This is like EXECUTE_PRIV or INSERT_PRIV.&lt;/p&gt;

&lt;p&gt;6. Where in the code do the catalog tables get created when creating a new database?&lt;br/&gt;
A: That happens in DataDictionaryImpl.createDictionaryTables().&lt;/p&gt;

&lt;p&gt;7. Do I need to add entries to the C_NodeTypes class? I didn&apos;t fully understand the purpose of this class from the javadoc comments.&lt;br/&gt;
A: This class was introduced in order to eliminate a large NodeFactory interface. That was a worthy goal, but I think that as a result, node creation has been made weakly typed and hard to follow. Each kind of node has its own corresponding node type. When you get to the parser work, you will need to add a CreateSequenceNode, a DropSequenceNode, and a NextValue node--each with its own node type in C_NodeTypes.&lt;/p&gt;
</comment>
                            <comment id="12712764" author="suranjay" created="Mon, 25 May 2009 19:27:51 +0100"  >&lt;p&gt;Attaching initial patch (ctalogsa.patch) for the SYSSEQUENCES and SYSPERMS catalogs. Made from svn diff against the updated trunk code. I&apos;m certain there will be quite a few shortcomings in this patch and am eagerly awaiting your feedback. So please review and comment.&lt;br/&gt;
Thanks!&lt;br/&gt;
Suran&lt;/p&gt;
</comment>
                            <comment id="12713202" author="rhillegas" created="Tue, 26 May 2009 20:31:12 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the first rev of the patch. Lots of good stuff. Here are some comments. Despite all of the great work here, I think that another patch will be needed and that in turn will probably need some adjusting. Don&apos;t be discouraged, this is an iterative process and your foundation here is solid.&lt;/p&gt;

&lt;p&gt;o In a couple of the files, you have removed the imports of individual classes and replaced them with a bulk import of all the classes in a package. Perhaps your IDE did this for you. The convention in Derby is to declare each import individually. I have weak religion on this style topic, but there are some reasons for this convention, which you can find at &lt;a href=&quot;http://stackoverflow.com/questions/147454/why-is-using-a-wild-card-with-a-java-import-statement-bad/147532&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/147454/why-is-using-a-wild-card-with-a-java-import-statement-bad/147532&lt;/a&gt; and &lt;a href=&quot;http://192.220.96.201/essays/java-style/structure.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://192.220.96.201/essays/java-style/structure.html&lt;/a&gt; I recommend sticking with the Derby style at least for your initial submissions.&lt;/p&gt;

&lt;p&gt;o There are funny line endings for the new files in the patch. I think this may be because you haven&apos;t set the new files to have native eol-style. Before generating the patch, you need to issue the following command on each of the new files:&lt;/p&gt;

&lt;p&gt;  svn propset svn:eol-style native $NEW_FILE&lt;/p&gt;

&lt;p&gt;o I think that PermDescriptor should extend PermissionsDescriptor. This will make the code easier to understand and it will probably make some existing logic just work for the USAGE privilege when you code support for USAGE. Consult RoutinePermsDescriptor for the pattern to follow.&lt;/p&gt;

&lt;p&gt;o Similarly, I suspect that SYSPERMSRowFactory should extend PermissionsCatalogRowFactory and follow the pattern of SYSROUTINEPERMSRowFactory.&lt;/p&gt;

&lt;p&gt;o For some reason one of your new classes, SYSSEQUENCESRowFactory, appears in the patch as a diff from SYSROLESRowFactory rather than as a new class. This makes it impossible to apply the patch and it makes the patch hard to read.&lt;/p&gt;

&lt;p&gt;o Following the existing pattern in DataDictionaryImpl, dropSequence() should be dropSequenceDescriptor() and the argument should be a SequenceDescriptor. I don&apos;t think that this drop code is going to do the right thing. It looks to me as though it is trying to use the sequence name (a String datum) as a sequence id (a UUID datum) in order to drop the sequence by using the unique index on sequence id. Take a look at DataDictionaryImpl.dropTrigger() for the pattern to follow.&lt;/p&gt;

&lt;p&gt;o Similarly, getSequenceDescriptor(String sequenceName) should be getSequenceDescriptor(String sequenceName, SchemaDescriptor sd). This is because the sequence name is not globally unique, it is only unique within a given schema. The code here is not going to work. It is trying to use the sequence name as a UUID in order to look up the sequence descriptor using the index on sequence id. Instead, it needs to use the second index on SYSSEQUENCES, the one which has a name and a UUID key. Again, see getTriggerDescriptor(String name, SchemaDescriptor sd) for the pattern to follow.&lt;/p&gt;

&lt;p&gt;o I don&apos;t understand how DataDictionaryImpl.dropPerm()  and getPermDescriptor() will be used. I suspect that if you make PermDescriptor follow the pattern of RoutinePermDescriptor, then you will not need these methods--you will need other methods!&lt;/p&gt;

&lt;p&gt;o In SYSPERMSRowFactory, it looks as though you have allocated UUIDs for 3 indexes but you have only defined one of them. I suspect you will need more than 1 index. In any event, the index you have defined is the first index, not the 3rd index as indicated in the list of UUIDs.&lt;/p&gt;

&lt;p&gt;o Don&apos;t forget to write header comments for the new methods which you add to the DataDictionary interface&lt;/p&gt;

&lt;p&gt;o I think that FileInfoDescriptor would be a good pattern to follow for SequenceDescriptor. In particular, I think you will want SequenceDescriptor to implement UniqueSQLObjectDescriptor. I don&apos;t understand why SequenceDescriptor needs a writeExternal() method. Will these descriptors be persisted in any way other than being flattened into tuples in SYSSEQUENCES? I understand the need for the getXXX() methods, but why are the setXXX() methods necessary? I would eliminate them unless these objects really need to be mutable.&lt;/p&gt;

&lt;p&gt;o On second thought, I don&apos;t think you need a Formatable id for the the SequenceDescriptors in StoredFormatIds. I apologize for misleading you there. I think you just need a Formatable id for the SequenceDescriptorFinder.&lt;/p&gt;

&lt;p&gt;o Have you tried running the regression tests with this patch? Usually when someone adds a new catalog, this breaks the tests which track the shape of the system schema. You probably need to submit some updated tests and/or test canons with this patch.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12718241" author="suranjay" created="Wed, 10 Jun 2009 23:44:41 +0100"  >&lt;p&gt;Thanks Rick for the detailed suggestions on rectifications in the previous patch. Far from being discouraged, the amount of learning and insight I receive is invaluable.&lt;/p&gt;

&lt;p&gt;I attempted to cover most of them in this revised patch. Please review and comment. &lt;/p&gt;</comment>
                            <comment id="12718862" author="rhillegas" created="Fri, 12 Jun 2009 15:52:33 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;The new catalogs_b.patch looks very good. It will need another round or two of adjusting but it is definitely looking solid. I have applied the patch and am running regression tests now. I will post my results when the tests finish.&lt;/p&gt;

&lt;p&gt;I have some comments on the new patch:&lt;/p&gt;

&lt;p&gt;PermDescriptor&lt;/p&gt;

&lt;p&gt;o You should remove the permUUID field from this class since it shadows the oid field in the superclass. In my experience, this kind of shadowing always causes bugs in the future because it is so easy to lose track of which copy of the redundant field is being used. So the constructor for this class should call setUUID( permUUID ) rather than stuffing the shadowing field via &quot;this.permUUID = permUUID&quot;.&lt;/p&gt;

&lt;p&gt;o Once you do that, you can get rid of the getUUID(), setUUID(), and getObjectID() methods in this class.&lt;/p&gt;

&lt;p&gt;o I have reservations about the second constructor for this class (the one which is used to create a key descriptor rather than a full-fledged permissions descriptor). However, I see that you are following the data dictionary patterns for the other permissions descriptors. I think you are right to follow the existing patterns. But we should put a sticky note on our brains to remind ourselves to clean up this pattern in the future--partially initialized data is brittle. This is something we can revisit when we collapse all of the permissions catalogs into the master catalog which you are creating. Don&apos;t worry, that&apos;s another project and not part of the sequence generator work.&lt;/p&gt;


&lt;p&gt;SYSSEQUENCESRowFactory&lt;/p&gt;

&lt;p&gt;o I think that you should flip the order of the keys in the second index. That is, the key order should be ( schemaID, sequenceName ) rather than ( sequenceName, schemaID ). This will speed up the check in DataDictionaryImpl.isSchemaEmpty(). But maybe you have a use for an index with key order ( sequenceName, schemaID ) which I&apos;m not seeing. If so, then I would recommend adding a third index. Note that if you swap the key order, then you will need to make a corresponding change to DataDictionaryImpl.getSequenceDescriptor(String, SchemaDescriptor)&lt;/p&gt;


&lt;p&gt;o I think that buildColumnList() should return an array of 10 column descriptors, one for each column in the table. See, for instance, the corresponding method in SYSALIASESRowFactory.&lt;/p&gt;


&lt;p&gt;SYSROLESRowFactory&lt;/p&gt;

&lt;p&gt;o As with SYSSEQUENCESRowFactory, I think that buildColumnList() should return a larger array, one cell for each column in the table.&lt;/p&gt;


&lt;p&gt;DataDictionary&lt;/p&gt;

&lt;p&gt;o The header comment for getPermDescriptor() does not seem to describe the method.&lt;/p&gt;


&lt;p&gt;EmptyDictionary&lt;/p&gt;

&lt;p&gt;o I think that you can remove the stub for dropSequenceDescriptor(String, TransactionController) because you have removed this method from the DataDictionary interface.&lt;/p&gt;


&lt;p&gt;DataDictionaryImpl&lt;/p&gt;

&lt;p&gt;o The header comments on getUncachedPermDescriptor() getPermDescriptor(), and dropAllPermDescriptors() look like they were copied from pre-existing methods, so they should be revised to describe the new methods.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12718882" author="rhillegas" created="Fri, 12 Jun 2009 16:39:47 +0100"  >&lt;p&gt;My regression test run finished. As expected, the catalogs_b.patch introduces a number of errors, largely related to the fact that the existing tests need to be made aware of the new catalogs:&lt;/p&gt;

&lt;p&gt;Failures in tests run under the old harness:&lt;/p&gt;

&lt;p&gt;altertable&lt;br/&gt;
compressTable&lt;br/&gt;
dropcrash2&lt;/p&gt;

&lt;p&gt;Failures in JUnit tests:&lt;/p&gt;

&lt;p&gt;SystemCatalogTest&lt;br/&gt;
DatabaseMetaDataTest&lt;br/&gt;
PrimaryKeyTest&lt;br/&gt;
ViewsTest&lt;br/&gt;
metadataMultiConnTest&lt;br/&gt;
OfflineBackupTest&lt;br/&gt;
CollationTest&lt;br/&gt;
GrantRevokeDDLTest&lt;br/&gt;
DMDBugsTest&lt;br/&gt;
ToolScripts&lt;/p&gt;</comment>
                            <comment id="12722782" author="suranjay" created="Mon, 22 Jun 2009 20:56:21 +0100"  >&lt;p&gt;Added changes to the JUnit test cases so that they pass now.&lt;br/&gt;
I&apos;m having a hard time finding where the failures are occurring in the the harness tests, so I thought I&apos;d submit this updated patch and keep working on them.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12723107" author="rhillegas" created="Tue, 23 Jun 2009 16:22:35 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the revised patch with test fixes. I haven&apos;t re-run the tests with this patch but in general the changes to the tests look good. A couple points:&lt;/p&gt;

&lt;p&gt;o In GrantRevokeDDLTest, it looks like the name of SYSPERMS has been mis-spelled.&lt;/p&gt;

&lt;p&gt;o There&apos;s a new println in JDBC. That may be ok but it looks like it might be a piece of debug scaffolding which wasn&apos;t removed before the patch was generated.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12723190" author="suranjay" created="Tue, 23 Jun 2009 18:08:31 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;In catalogs_d.patch I removed the typo in GrantRevokeDDLTest and the println in JDBC which was indeed a debug line I&apos;d forgotten to delete.&lt;/p&gt;

&lt;p&gt;I&apos;ve also attached the diff file from running lang/altertable.sql. Could you please have a look and help me understand what&apos;s causing this test to fail?&lt;/p&gt;

&lt;p&gt;Also, how do I run tests like dropcrash2 which aren&apos;t JUnit tests nor harness tests?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12723241" author="rhillegas" created="Tue, 23 Jun 2009 19:35:31 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;The altertable.diff indicates that the test was run under the old harness using the Derby client.  Looking through the output of a full test run, which I launched earlier today, I only see altertable.sql logged once--as an embedded test. Are you sure that you are supposed to run this test under the Derby client?&lt;/p&gt;

&lt;p&gt;The dropcrash2 test is one of the Store tests which is never run standalone. It depends on the setup performed by tests which run before it in the storerecovery suite, so dropcrash2 is only run as part of that suite. You run that suite like this:&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.functionTests.harness.RunSuite storerecovery&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12725748" author="suranjay" created="Tue, 30 Jun 2009 20:01:18 +0100"  >&lt;p&gt;With this patch all the tests that were failing due to the new catalogs are passing. Please review and comment.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12726170" author="rhillegas" created="Wed, 1 Jul 2009 19:29:04 +0100"  >&lt;p&gt;Thanks for the new patch, Suran. All of the old harness tests pass for me now. However, I am seeing some errors in the JUnit tests. Before I describe those errors, I have some comments on the code:&lt;/p&gt;

&lt;p&gt;DataDictionaryImpl.dropAllPermDescriptors() - It looks to me as though the id of the privileged object (e.g., the sequence generator) is being used as the key for an index built on a permissions id. This will fail to match any rows. In addition, one of the comments in this method refers to the passed-in id as a table id, which is probably not true.&lt;/p&gt;


&lt;p&gt;I see the following error when I run the JUnit suite org.apache.derbyTesting.functionTests.tests.derbynet._Suite. I do not see this error when I run this suite on a clean codeline before the patch is applied:&lt;/p&gt;

&lt;p&gt;.........................................&lt;br/&gt;
.........................................&lt;br/&gt;
...............java.net.SocketException: Connection reset&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:168)&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:90)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2764)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(NetworkServerControlImpl.java:2708)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(NetworkServerControlImpl.java:1169)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(NetworkServerControlImpl.java:1144)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.ping(NetworkServerControl.java:395)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:561)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:256)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:448)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
java.net.SocketException: Connection reset&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:168)&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:90)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2764)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(NetworkServerControlImpl.java:2708)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(NetworkServerControlImpl.java:1169)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(NetworkServerControlImpl.java:1144)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.ping(NetworkServerControl.java:395)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:561)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:256)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:448)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
..........................&lt;br/&gt;
..............&lt;/p&gt;

&lt;p&gt;In addition, when I ran the full JUnit test suite, I saw the following error:&lt;/p&gt;

&lt;p&gt;1) testGetSchemasModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)java.sql.SQLException: The conglomerate (-1) requested does not exist.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.dropSchema(JDBC.java:323)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.tearDown(DatabaseMetaDataTest.java:184)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: ERROR XSAI2: The conglomerate (-1) requested does not exist.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:399)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(DataDictionaryImpl.java:2305)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(DataDictionaryImpl.java:2241)&lt;br/&gt;
	at org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.drop(SchemaDescriptor.java:419)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.DropSchemaConstantAction.executeConstantAction(DropSchemaConstantAction.java:99)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 85 more&lt;/p&gt;

&lt;p&gt;and then 81 instances of this error:&lt;/p&gt;

&lt;p&gt;2) testGetColumnsModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)java.sql.SQLException: Schema &apos;ONE_DMD_TEST&apos; already exists.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createSchemasForTests(DatabaseMetaDataTest.java:980)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createTablesForTest(DatabaseMetaDataTest.java:1333)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetColumnsModify(DatabaseMetaDataTest.java:1402)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: ERROR X0Y68: Schema &apos;ONE_DMD_TEST&apos; already exists.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:303)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantActionMinion(CreateSchemaConstantAction.java:138)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(CreateSchemaConstantAction.java:104)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 91 more&lt;/p&gt;

&lt;p&gt;I don&apos;t know a smaller test scenario which shows these problems. I did not see these errors when I ran the JUnit suite org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.&lt;/p&gt;</comment>
                            <comment id="12727698" author="suranjay" created="Mon, 6 Jul 2009 19:59:18 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I changed the DataDictionaryImpl.dropAllPermDescriptors() method as follows by changing the index in the ti.getRow() call to 3, which is the index of the object Id. I think it should behave correctly now. If this is correct, I will attach the revised patch when the tests are finished. &lt;/p&gt;

&lt;p&gt;public void dropAllPermDescriptors(UUID objectID, TransactionController tc)&lt;br/&gt;
            throws StandardException {&lt;br/&gt;
        TabInfoImpl ti = getNonCoreTI(SYSPERMS_CATALOG_NUM);&lt;br/&gt;
        SYSPERMSRowFactory rf = (SYSPERMSRowFactory) ti.getCatalogRowFactory();&lt;br/&gt;
        DataValueDescriptor objIdOrderable;&lt;br/&gt;
        ExecRow curRow;&lt;br/&gt;
        PermissionsDescriptor perm;&lt;/p&gt;

&lt;p&gt;        // In Derby authorization mode, permission catalogs may not be present&lt;br/&gt;
        if (!usesSqlAuthorization)&lt;br/&gt;
            return;&lt;/p&gt;

&lt;p&gt;        /* Use objIDOrderable in both start and stop position for scan. */&lt;br/&gt;
        objIdOrderable = getIDValueAsCHAR(objectID);&lt;/p&gt;

&lt;p&gt;        /* Set up the start/stop position for the scan */&lt;br/&gt;
        ExecIndexRow keyRow = exFactory.getIndexableRow(1);&lt;br/&gt;
        keyRow.setColumn(1, objIdOrderable);&lt;/p&gt;

&lt;p&gt;        while ((curRow = ti.getRow(tc, keyRow, 3)) != null) &lt;/p&gt;
{
            perm = (PermDescriptor) rf.buildDescriptor(curRow, (TupleDescriptor) null, this);
            removePermEntryInCache(perm);

            // Build new key based on UUID and drop the entry as we want to drop
            // only this row
            ExecIndexRow uuidKey;
            uuidKey = rf.buildIndexKeyRow(rf.PERMS_UUID_IDX_NUM, perm);
            ti.deleteRow(tc, uuidKey, rf.PERMS_UUID_IDX_NUM);
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;Also, when I ran org.apache.derbyTesting.functionTests.tests.derbynet._Suite, I did not see the failure which you mentioned. I am currently running suites.All and will check if there are remaining test failures.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12727735" author="rhillegas" created="Mon, 6 Jul 2009 20:55:42 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;I don&apos;t think that fix is going to work. The third argument to ti.getRow() is the id of an index, not a column position in a base row. I think that the problem is that there is no usable index into SYSPERMS keyed on OBJECTID. I believe that you need to add such an index to SYSPERMS and then use its id in all of the calls inside the while loop (ti.getRow(), rf.buildIndexKeyRow(), ti.deleteRow()).&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12727800" author="suranjay" created="Mon, 6 Jul 2009 22:58:14 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;Thank you for your quick reply. When I ran suites.All on an updated trunk codebase (with my changes), I did not see the test failures you mentioned above. lang.AlterTableTest failed, which I have rectified in my next revision of the patch. &lt;/p&gt;

&lt;p&gt;In this revision I added an index on ObjectId to SYSPERMSRowFactory.&lt;/p&gt;

&lt;p&gt;I&apos;m running tests on Vista 64, AMD Phenom II CPU and Sun JDK 1.6.0_10.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;
</comment>
                            <comment id="12727804" author="suranjay" created="Mon, 6 Jul 2009 23:11:12 +0100"  >&lt;p&gt;Reattaching modified patch (catalogs_f_2.patch) since 2 required changes in  dropAllPermDescriptors() were missing in catalogs_f.patch.&lt;/p&gt;</comment>
                            <comment id="12728079" author="rhillegas" created="Tue, 7 Jul 2009 14:05:09 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the new patch, which adds another index to SYSPERMS. After looking at dropAllPermDescriptors() again, I realized that I misled you: The while loop needs to use 2 indexes. The first is the index you just added-&lt;del&gt;the one which is keyed on the id of the privileged object. The second is the original index which you were using&lt;/del&gt;-the one which is keyed on the unique id of the permissions tuple itself. I tweaked dropAllPermDescriptors() accordingly. I also tweaked SYSPERMSRowFactory: now that there are 2 indexes, the uniqueness array needs to be filled in (one of the indexes is unique, the other isn&apos;t). I have regenerated the patch and am attaching it as catalogs_g.diff&lt;/p&gt;

&lt;p&gt;Am running the regressions tests now. Thanks!&lt;/p&gt;</comment>
                            <comment id="12728199" author="rhillegas" created="Tue, 7 Jul 2009 18:12:48 +0100"  >&lt;p&gt;I am still seeing errors in the JUnit tests. I am running against the jar files. I see these errors:&lt;/p&gt;

&lt;p&gt;1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-0122-55c7-0fa8-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-0122-55c7-0fa8-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;br/&gt;
2) testGetSchemasModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)java.sql.SQLException: The conglomerate (-1) requested does not exist.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.dropSchema(JDBC.java:323)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.tearDown(DatabaseMetaDataTest.java:184)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: ERROR XSAI2: The conglomerate (-1) requested does not exist.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:286)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:399)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(DataDictionaryImpl.java:2305)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(DataDictionaryImpl.java:2241)&lt;br/&gt;
	at org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.drop(SchemaDescriptor.java:419)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.DropSchemaConstantAction.executeConstantAction(DropSchemaConstantAction.java:99)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 85 more&lt;/p&gt;


&lt;p&gt;and then 81 errors like this:&lt;/p&gt;

&lt;p&gt;3) testGetColumnsModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)java.sql.SQLException: Schema &apos;ONE_DMD_TEST&apos; already exists.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createSchemasForTests(DatabaseMetaDataTest.java:980)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createTablesForTest(DatabaseMetaDataTest.java:1333)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetColumnsModify(DatabaseMetaDataTest.java:1402)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: ERROR X0Y68: Schema &apos;ONE_DMD_TEST&apos; already exists.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:303)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantActionMinion(CreateSchemaConstantAction.java:138)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(CreateSchemaConstantAction.java:104)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 91 more&lt;/p&gt;


&lt;p&gt;I will put some time into diagnosing what&apos;s going on here.&lt;/p&gt;</comment>
                            <comment id="12728294" author="rhillegas" created="Tue, 7 Jul 2009 19:55:31 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;We are getting very close with this patch but there is still a little more work to do. Now you need to add upgrade logic which will create the new catalogs in old databases which are hard-upgraded to 10.6. This is really easy to do.&lt;/p&gt;

&lt;p&gt;The test failures in the DatabaseMetaData cases occur when those cases are run as part of the upgrade tests. You need to add some upgrade logic to DD_Version.doFullUpgrade(). That logic will create the new SYSSEQUENCES and SYSPERMS catalogs in old databases. You will want to add these catalogs if the original database version is 10.5 or earlier. Look for the addition of SYSROLES as a template for how to do this.&lt;/p&gt;

&lt;p&gt;To verify that you have done this correctly, you will want to run the upgrade tests. The following works for me:&lt;/p&gt;

&lt;p&gt;java -XX:MaxPermSize=128M -Xmx512m -DderbyTesting.oldReleasePath=$OLD_RELEASE_DIRECTORY junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite&lt;/p&gt;

&lt;p&gt;where $OLD_RELEASE_DIRECTORY is the full pathname of the directory which holds your old Derby releases. That directory should have a directory for each previous release on which you want to test upgrade. For instance, my old release directory has the following subdirectories (for the purposes of this work, you could probably just get away with the 10.5.1.1 release):&lt;/p&gt;

&lt;p&gt;10.0.2.1&lt;br/&gt;
10.1.1.0&lt;br/&gt;
10.1.2.1&lt;br/&gt;
10.1.3.1&lt;br/&gt;
10.2.1.6&lt;br/&gt;
10.2.2.0&lt;br/&gt;
10.2.2.1&lt;br/&gt;
10.3.1.4&lt;br/&gt;
10.3.2.1&lt;br/&gt;
10.3.3.0&lt;br/&gt;
10.4.1.3&lt;br/&gt;
10.4.2.0&lt;br/&gt;
10.4.2.1&lt;br/&gt;
10.5.1.1&lt;/p&gt;

&lt;p&gt;Each of those subdirectories, in turn, should hold the jar files for that release.&lt;/p&gt;

&lt;p&gt;I think that you did not trip across these test failures because when you run the JUnit tests, you don&apos;t set the -DderbyTesting.oldReleasePath flag on the command line. That&apos;s what triggers the upgrade tests. To make sure that you always run the upgrade tests as part of your regression test run, make sure to use that flag. E.g.:&lt;/p&gt;

&lt;p&gt;java -XX:MaxPermSize=128M -Xmx512m -DderbyTesting.oldReleasePath=$OLD_RELEASE_DIRECTORY  junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12728376" author="suranjay" created="Tue, 7 Jul 2009 22:43:31 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;Thanks for fixing the patch. I made those changes in dropAllPermDescriptors() and the uniqueness array in my own code (which I think are the only 2 places that needed to be changed?).&lt;/p&gt;

&lt;p&gt;I added the following in DD_Version.doFullUpgrade().&lt;/p&gt;

&lt;p&gt;--------------------------------------------------------------------------&lt;br/&gt;
if (fromMajorVersionNumber &amp;lt;= DataDictionary.DD_VERSION_DERBY_10_5)&lt;/p&gt;
        {
            // On ugrade from versions before 10.6, create system procedures
            // added in 10.6.
            bootingDictionary.create_10_6_system_procedures(tc,
                    newlyCreatedRoutines);

            // On upgrade from versions before 10.6, create system catalogs
            // added in 10.6
            bootingDictionary.upgradeMakeCatalog(
                    tc, DataDictionary.SYSSEQUENCES_CATALOG_NUM);
            bootingDictionary.upgradeMakeCatalog(
                    tc, DataDictionary.SYSPERMS_CATALOG_NUM);
        }
&lt;p&gt;-----------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;When I ran upgrade tests with 10.5.1.1. as the sole old release, I did see the test failures you ran into.&lt;/p&gt;

&lt;p&gt;&amp;gt;java -XX:MaxPermSize=128M -Xmx512m -DderbyTesting.oldReleasePath=D:/projects/derby-trunk/tests/old-rels junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite &lt;br/&gt;
...&lt;br/&gt;
...&lt;br/&gt;
ALARM: Non-existing location for jar files: &apos;D:/projects/derby-trunk/tests/old-rels\10.4.2.0&apos;. Upgrade tests can NOT be run!&lt;br/&gt;
...............E...............E..E.E........&lt;br/&gt;
.......................E..................&lt;br/&gt;
.................&lt;br/&gt;
Time: 78.156&lt;br/&gt;
There were 5 errors:&lt;br/&gt;
1) testGetTablesModify(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)java.sql.SQLException: The conglomerate (-1) requested does not exist.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.dropSchema(JDBC.java:323)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.tearDown(DatabaseMetaDataTest.java:184)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
...&lt;br/&gt;
Tests run: 99,  Failures: 0,  Errors: 5&lt;/p&gt;

&lt;p&gt;I can&apos;t figure out what&apos;s causing this failure, which I think is causing the remaining failures in turn.&lt;/p&gt;</comment>
                            <comment id="12728739" author="rhillegas" created="Wed, 8 Jul 2009 16:22:15 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;The failures occur during the test of soft-upgrade. The initial failure is caused because the test is trying to drop a schema. In doing so, the data dictionary checks to see whether the schema is empty. Since you added a new kind of schema object (sequences) and logic to check whether SYSSEQUENCES is empty, the data dictionary tries to scan SYSSEQUENCES. But in soft-upgrade mode, this table doesn&apos;t exist. It is only created during hard upgrade. That&apos;s what results in the funny -1 conglomerate id, which raises the initial exception.The fix is to only scan SYSSEQUENCES if the data dictionary is at level 10.6 or greater. I added this check on top of the changes you made to DD_Version and have uploaded the resulting patch: catalogs_h.diff&lt;/p&gt;

&lt;p&gt;With this patch, the upgrade tests run cleanly for me. So does standalone DatabaseMetaDataTests. I am running the full regression tests now.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12728829" author="rhillegas" created="Wed, 8 Jul 2009 19:03:26 +0100"  >&lt;p&gt;Thanks again for all of your hard work on this first increment, Suran. With the small tweak in the catalogs_h.diff patch, the tests ran cleanly for me. I have committed that patch at subversion revision 792245.&lt;/p&gt;

&lt;p&gt;Congratulations!&lt;/p&gt;

&lt;p&gt;Now I think you could get started on the work for CREATE/DROP SEQUENCE. I think that the machinery for CREATE/DROP FUNCTION would be a useful template.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12728837" author="suranjay" created="Wed, 8 Jul 2009 19:23:28 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;That&apos;s great news indeed.&lt;br/&gt;
Thanks so much for your extreme patience and help! I will get started on the CREATE/DROP SEQUENCE work right away.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12729860" author="kmarsden" created="Fri, 10 Jul 2009 23:08:44 +0100"  >&lt;p&gt;I asked this question in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053&quot; title=&quot;Network Server&amp;#39;s failure to rollback local transactions on shutdown can cause  hang on startup with message java.net.BindException: Address already in use: NET_Bind in derby.log &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4053&quot;&gt;&lt;del&gt;DERBY-4053&lt;/del&gt;&lt;/a&gt; but decided it was better to ask here.&lt;br/&gt;
Are 10.6 databases before the  792245 change expected to be unusable after that change?&lt;br/&gt;
Please note the following comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053&quot; title=&quot;Network Server&amp;#39;s failure to rollback local transactions on shutdown can cause  hang on startup with message java.net.BindException: Address already in use: NET_Bind in derby.log &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4053&quot;&gt;&lt;del&gt;DERBY-4053&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053?focusedCommentId=12729806&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12729806&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-4053?focusedCommentId=12729806&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12729806&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053?focusedCommentId=12729857&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12729857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-4053?focusedCommentId=12729857&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12729857&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12733232" author="rhillegas" created="Mon, 20 Jul 2009 15:38:06 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;792245 added two new catalogs. This means that you need to throw away and recreate databases which were created by previous versions of the 10.6 trunk.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12735411" author="suranjay" created="Sun, 26 Jul 2009 19:50:11 +0100"  >&lt;p&gt;Posting some question I had and the answers given by Rick. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Like CreateTriggerNode etc, why isn&apos;t there a CreateFunctionNode? the functionDefinition() method is using the CreateAliasNode class.&lt;br/&gt;
Good point. CREATE FUNCTION is a good template from the perspective of the parser but maybe a bit confusing from the perspective of the data structures. Derby SQL routines (functions and procedures) are called Aliases internally. This is because functions and procedures used to be much lighter-weight objects. Originally, Derby functions and procedures were just names (aliases) for user-coded static java methods, and declaring them was just a simple matter of binding a Derby name to the external code. This, however, is not the ANSI syntax for declaring functions and procedures. Today, Derby uses the ANSI language for declaring functions and procedures, which means that functions and procedures are much more heavy-weight than the original aliases were.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;How are the various jj_2_*() mthods in SQLParser used?&lt;/li&gt;
	&lt;li&gt;In SQLParser, What&apos;s the sue of the jj_la1_* arrays?&lt;br/&gt;
Ah, looks like you are poking around in SQLParser. Don&apos;t bother with that file. The grammar lives in sqlgrammar.jj, a yacc-like grammar which is much easier to understand and extend. We use the javacc grammar generator to turn the sqlgrammar.jj source into a number of generated files, one of which is the barely readable SQLParser which you&apos;re looking at right now. Let me know if you need help understanding sqlgrammar.jj. It&apos;s fairly straightforward if you are familiar with yacc-style grammars but you may need some pointers if you haven&apos;t worked on one of these grammars before.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12741143" author="suranjay" created="Sun, 9 Aug 2009 22:08:20 +0100"  >&lt;p&gt;Attaching initial (incomplete) draft of the create sequences patch for review. Tests were not run with this patch.&lt;/p&gt;

&lt;p&gt;A couple of questions:&lt;br/&gt;
1. &lt;br/&gt;
Is it necessary to require a PRIVILEGE in CreateSequenceNode.bindStatement(), like done in CreateRoleNode (below)?&lt;br/&gt;
----------------&lt;br/&gt;
if (isPrivilegeCollectionRequired()) &lt;/p&gt;
{
            cc.addRequiredRolePriv(name, Authorizer.CREATE_ROLE_PRIV);
        }
&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;If yes, do I use the MODIFY_SCHEMA_PRIV or define new ones as CREATE_SEQUENCE_PRIV ?&lt;/p&gt;

&lt;p&gt;2. &lt;br/&gt;
In the very basic testcase I&apos;ve added I attempt to execute a Create Sequence statement without specifying a schema. This fails saying the schema name is null. Why isn&apos;t the default schema being picked up?&lt;/p&gt;

&lt;p&gt;-------------&lt;br/&gt;
Also adding here with thanks, a question answered by Rick Hillegas.&lt;/p&gt;

&lt;p&gt;Q: What&apos;s the method to get the schema name in sqlgrammar.jj?&lt;/p&gt;

&lt;p&gt;A:&lt;br/&gt;
The data structure you are looking for is called TableName. It contains a schema name and an object name within that schema. The bind() phase of compilation knows how to fill in the default schema name if the user doesn&apos;t supply an explicit schema name. For an example of how to use TableName, see sqlgrammar.functionDefinition(). Your code will end up looking something like this:&lt;/p&gt;

&lt;p&gt;StatementNode&lt;br/&gt;
sequenceDefinition() throws StandardException :&lt;/p&gt;
{
  TableName qualifiedName = null;
}
&lt;p&gt;{       &amp;lt;SEQUENCE&amp;gt; qualifiedName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)&lt;/p&gt;
</comment>
                            <comment id="12741357" author="rhillegas" created="Mon, 10 Aug 2009 16:07:06 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the patch. Here are some answers to your questions:&lt;/p&gt;

&lt;p&gt;1) You don&apos;t need to add the permissions check which you saw in CREATE ROLE. The only permission you need to worry about is the permission to create objects in the target schema. I address that topic below.&lt;/p&gt;

&lt;p&gt;2) The bind() logic is responsible for filling in the current schema name if the user doesn&apos;t specify a schema. I address that topic below too.&lt;/p&gt;

&lt;p&gt;Here is a quick review of CreateSequenceNode:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I don&apos;t understand why initAndCheck() is called twice. I think that all you need is the call which takes sequenceName as arg. But let me know your motivation for adding this line if you think it is necessary.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The header comment of bindStatement() should be revised. The main points of this method are to resolve the schema name, determine privilege checks, and vet the variables in the CREATE SEQUENCE statement.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In bindStatement() you will want to resolve the schema name. Something like the following should do the trick. This will verify that the schema name is valid (if specified) and if the schema name is not specified, this will fill in the name of the session&apos;s current schema:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  sequenceName.bind( getDataDictionary() );&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If you add the following code to bindStatement() (after you have bound the schema name), then a runtime check will be made to verify that the creator has permission to create objects in the target schema:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  SchemaDescriptor sd = getSchemaDescriptor();&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12741493" author="suranjay" created="Mon, 10 Aug 2009 19:57:25 +0100"  >&lt;p&gt;Hi Rick, &lt;/p&gt;

&lt;p&gt;The call to initAndCheck(null) in CreateSequenceNode.init() was a line left in the code by mistake.&lt;/p&gt;

&lt;p&gt;In this patch I added basic implementation of DROP SEQUENCE.&lt;/p&gt;

&lt;p&gt;When running the SequenceTest, while the CREATE statement seems to execute ok, I get the following exception for DROP.&lt;/p&gt;

&lt;p&gt;1) testDropSequence(org.apache.derbyTesting.functionTests.tests.lang.SequenceTest)java.sql.SQLException: Java exception: &apos;org.apache.derby.catalog.types.TypeDescriptorImpl cannot b&lt;br/&gt;
e cast to org.apache.derby.iapi.types.DataTypeDescriptor: java.lang.ClassCastException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:614)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.lang.SequenceTest.testDropSequence(SequenceTest.java:118)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;org.apache.derby.catalog.types.TypeDescriptorImpl cannot be cast to org.apache.derby.iapi.types.DataTypeDescriptor: java.lang.Cla&lt;br/&gt;
ssCastException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        ... 34 more&lt;br/&gt;
Caused by: java.lang.ClassCastException: org.apache.derby.catalog.types.TypeDescriptorImpl cannot be cast to org.apache.derby.iapi.types.DataTypeDescriptor&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.SYSSEQUENCESRowFactory.buildDescriptor(SYSSEQUENCESRowFactory.java:235)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:8673)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:8388)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSequenceDescriptor(DataDictionaryImpl.java:12747)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.DropSequenceNode.bindStatement(DropSequenceNode.java:81)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:316)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:822)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;br/&gt;
        ... 27 more&lt;/p&gt;

&lt;p&gt;I don&apos;t get where the datatype, which is a DataTypeDescriptor object at the time of creation,  turned into a TypeDescriptorImpl instance.&lt;/p&gt;

&lt;p&gt;Also, in the executeConstantAction() method of DropSequenceConstantAction, what&apos;s the SQLState code that I should use for the exception when the sequenceDescriptor is null?&lt;/p&gt;</comment>
                            <comment id="12742007" author="rhillegas" created="Tue, 11 Aug 2009 19:37:53 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the create_drop patch. Looks like good progress. I have a couple comments:&lt;/p&gt;

&lt;p&gt;1) I see from your &quot;drop sequence&quot; stack trace that you are dealing with the Derby type system now. There should be only one type system, but by now Derby has at least four type systems. The root of the problem is that the original Cloudscape type system muddled the distinction between data types and data values. The other type systems then developed organically in order to compensate for that original design problem. What you want to do is to follow the example of the other datatype code in the catalogs, viz., the datatype column in SYSCOLUMNS. You need to borrow the datatype translation code from SYSCOLUMNS.buildDescriptor(). Replace the exception-raising line in SYSSEQUENCESRowFactory.buildDescriptor() with the following code:&lt;/p&gt;

&lt;p&gt;		TypeDescriptor catalogType = (TypeDescriptor) row.getColumn(SYSSEQUENCES_SEQUENCEDATATYPE).getObject();&lt;br/&gt;
		DataTypeDescriptor dataType = DataTypeDescriptor.getType(catalogType);&lt;/p&gt;

&lt;p&gt;The explanation for why you do this is offered by the comment around the corresponding coercion logic in SYSCOLUMNSRowFactory.buildDescriptor().&lt;/p&gt;

&lt;p&gt;2) I think that the missing sequence descriptor condition can be handled with the same SQLState used by other DROP code. See, for instance, the corresponding code in DropTriggerConstantAction. You would write something like this:&lt;/p&gt;

&lt;p&gt;			throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND_DURING_EXECUTION, &quot;SEQUENCE&quot;,&lt;br/&gt;
					(schemaName + &quot;.&quot; + sequenceName));&lt;/p&gt;

&lt;p&gt;3) Also, I notice that I get an assertion failure on the second CREATE statement in this batch:&lt;/p&gt;

&lt;p&gt;   create sequence foo;&lt;br/&gt;
   create sequence foo;&lt;/p&gt;

&lt;p&gt;This is because you need to implement some more methods in SequenceDescriptor. Take a look at the TupleDescriptor superclass for all methods which raise NOTREACHED assertions if they are not overridden.&lt;/p&gt;

&lt;p&gt;4) Your SequenceDescriptor.drop() code is a good start, but you also need to invalidate other compiled statements which depend on the sequence which is about to disappear. The next time one of those statements executes, this invalidation will cause the statement to recompile, discover that the sequence no longer exists, and fail. You need to call DependencyManager.invalidateFor(). See the drop() logic in the other tuple descriptors for examples of how to do this.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12742070" author="suranjay" created="Tue, 11 Aug 2009 22:28:45 +0100"  >&lt;p&gt;Thanks a lot for your comments Rick. &lt;br/&gt;
This patch contains the changes you suggested. Please review and comment. &lt;/p&gt;

&lt;p&gt;What do you suggest as my next step in the implementation?&lt;br/&gt;
Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12742477" author="rhillegas" created="Wed, 12 Aug 2009 18:47:17 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the additional work on the patch. I think it&apos;s very close to being ready for a regression test run and checkin.&lt;/p&gt;

&lt;p&gt;I ran some more experiments and it seems that we need more work on the bind() logic for CREATE SEQUENCE. In particular, I noticed that we were not implicitly creating the schema if the sequence is the first object in it. We do implicitly create the schema for other objects. I wanted to get the following script to run cleanly and verify the correct behavior of various aspects of sequence creation. I noticed that the first CREATE SEQUENCE statement failed unexpectedly.&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:patient;create=true;user=admin;password=adminpassword&apos; as admin_conn;&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:patient;user=alice;password=alicepassword&apos; as alice_conn;&lt;/p&gt;

&lt;p&gt;&amp;#8211; should implicitly create the ALICE schema&lt;br/&gt;
create sequence alice_seq;&lt;/p&gt;

&lt;p&gt;&amp;#8211; should fail because the sequence already exists&lt;br/&gt;
create sequence alice_seq;&lt;/p&gt;


&lt;p&gt;connect &apos;jdbc:derby:memory:patient;user=ruth;password=ruthpassword&apos; as ruth_conn;&lt;/p&gt;

&lt;p&gt;&amp;#8211; should not be able to drop someone else&apos;s objects&lt;br/&gt;
drop sequence alice.alice_seq;&lt;/p&gt;

&lt;p&gt;&amp;#8211; should not be able to create objects in someone else&apos;s schema&lt;br/&gt;
create sequence alice.ruth_seq;&lt;/p&gt;


&lt;p&gt;set connection alice_conn;&lt;/p&gt;

&lt;p&gt;--should succeed&lt;br/&gt;
drop sequence alice_seq;&lt;/p&gt;

&lt;p&gt;&amp;#8211; should succeed&lt;br/&gt;
create sequence alice_seq;&lt;/p&gt;

&lt;p&gt;I ran this script as follows:&lt;/p&gt;

&lt;p&gt;java -cp $CLASSPATH \&lt;br/&gt;
  -Dderby.connection.requireAuthentication=true  \&lt;br/&gt;
  -Dderby.authentication.provider=BUILTIN \&lt;br/&gt;
  -Dderby.user.admin=adminpassword \&lt;br/&gt;
  -Dderby.user.alice=alicepassword \&lt;br/&gt;
  -Dderby.user.ruth=ruthpassword \&lt;br/&gt;
  -Dderby.database.sqlAuthorization=true \&lt;br/&gt;
  org.apache.derby.tools.ij  script.sql&lt;/p&gt;



&lt;p&gt;To fix the schema-creation problem, I&apos;m recommending some changes to the code in CreateSequenceNode to implicitly create the user schema as is done with other schema objects. See below.&lt;/p&gt;


&lt;p&gt;Here are some comments on the attached code:&lt;/p&gt;

&lt;p&gt;CreateSequenceNode&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;init() We need to add the following statement to the end of this method:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        implicitCreateSchema = true;&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;bindStatement() We need to rewrite this method:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    public void bindStatement() throws StandardException {&lt;br/&gt;
        CompilerContext cc = getCompilerContext();&lt;/p&gt;

&lt;p&gt;        // implicitly create the schema if it does not exist.&lt;br/&gt;
        // this method also compiles permissions checks&lt;br/&gt;
        SchemaDescriptor sd = getSchemaDescriptor();&lt;/p&gt;

&lt;p&gt;        // set the default schema name if the user did not explicitly specify a schema&lt;br/&gt;
        if ( sequenceName.getSchemaName() == null ) &lt;/p&gt;
{ sequenceName.setSchemaName( sd.getSchemaName() ); }
&lt;p&gt;     }&lt;/p&gt;


&lt;p&gt;GenericConstantActionFactory.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getDropSequenceConstantAction() The header should say DROP SEQUENCE rather than DROP ROLE&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Tests&lt;/p&gt;

&lt;p&gt;A couple comments about tests:&lt;/p&gt;

&lt;p&gt;1) I don&apos;t understand why SequenceTest limits itself to JDBC3 and higher. It seems to me that this functionality ought to work in JSR169 environments too.&lt;/p&gt;

&lt;p&gt;2) I recommend adding some more test cases to SequenceTest. I would add cases to verify that the script above runs correctly.&lt;/p&gt;

&lt;p&gt;3) Right now SequenceTest is a standalone test. I think that it should be wired into the _Suite in its package.&lt;/p&gt;

&lt;p&gt;4) I recommend adding an upgrade test case to verify that the CREATE/DROP SEQUENCE statements work in legacy databases only after they have been hard-upgraded to 10.6.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12742529" author="rhillegas" created="Wed, 12 Aug 2009 20:17:11 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;As you noted, you&apos;ll need to move on to the next task after you are done with the machinery for basic CREATE/DROP SEQUENCE. I think that the best next step would be to build the machinery for actually using sequences in statements. I think it will be easier if you do this first and then come back later to add the GRANT/REVOKE USAGE ON SEQUENCE machinery, which restricts who can use a given sequence.&lt;/p&gt;

&lt;p&gt;So I recommened starting out allowing anybody to use a NEXT VALUE FOR &amp;lt;sequence&amp;gt; right now. At the same time, link &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt; to a new JIRA for adding the GRANT/REVOKE machinery.&lt;/p&gt;

&lt;p&gt;The semantics of the NEXT VALUE clause are:&lt;/p&gt;

&lt;p&gt;i) It can appear in scalar expressions.&lt;/p&gt;

&lt;p&gt;ii) It is forbidden in certain contexts (see the section in the functional spec titled &quot;New Syntax for Using Sequences&quot;).&lt;/p&gt;

&lt;p&gt;You will need to make the following changes, described below. To speed up review, you may want to chunk in these changes in this order:&lt;/p&gt;

&lt;p&gt;A) Parser changes.&lt;/p&gt;

&lt;p&gt;B) Binding changes.&lt;/p&gt;

&lt;p&gt;C) Code generation changes.&lt;/p&gt;

&lt;p&gt;D) Execution changes.&lt;/p&gt;


&lt;p&gt;(A) Parser Changes&lt;/p&gt;

&lt;p&gt;In the AST, I think you will want to represent NEXT VALUE FOR &amp;lt;sequence&amp;gt; with a new NextSequenceNode, a kind of ValueNode. I think you will get into the least trouble if you follow the ANSI grammar as closely as possible. According to part 2, section 6.3 of the ANSI spec, a &amp;lt;next value expression&amp;gt; is one of the possibilities for a &amp;lt;value expression primary&amp;gt;. So I would make NextSequenceNode one of the  possibilities for  valueExpressionPrimary() in sqlgrammar.&lt;/p&gt;


&lt;p&gt;(B) Binding Changes&lt;/p&gt;

&lt;p&gt;When binding a NextSequenceNode, you will want to enforce the restrictions in the spec section titled &quot;New Syntax for Using Sequences&quot;. I think this will be easiest if you push/pop and inspect restriction contexts using the CompilerContext.getReliability()/setReliability() machinery. You can use the GENERATION_CLAUSE_RESTRICTION logic as a template.&lt;/p&gt;


&lt;p&gt;(C) Code Generation and Execution Changes&lt;/p&gt;

&lt;p&gt;Fortunately, sequences are a lot like autoincrement columns. I think you will want a SequenceCounter object which is a lot like an AutoincrementCounter. I think it&apos;s fine to let GenericLanguageConnectionContext manage a cache of SequenceCounters.&lt;/p&gt;

&lt;p&gt;A big difference between sequences and autoincrement counters is this: multiple NEXT SEQUENCE FOR &amp;lt;sequence&amp;gt; clauses in a single statement should resolve to the same value, whereas multiple rows in a single INSERT statement will each get their own unique autoincrement value. I think this means that you will want to cache the NEXT SEQUENCE value in the statement&apos;s Activation.&lt;/p&gt;

&lt;p&gt;That, in turn, means that when you generate() the executable code, you will want to generate a call to some new method on the Activation rather than directly to a method on the LanguageConnectionContext.&lt;/p&gt;

&lt;p&gt;This is just a sketch of what makes sense to me. You will probably have a lot of questions and after looking into the code, you may have some better ideas.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12743923" author="suranjay" created="Mon, 17 Aug 2009 00:00:58 +0100"  >&lt;p&gt;After the changes, I ran the SQL script and it execute successfuly. Following is the output I got&lt;br/&gt;
-------------------------------------&lt;br/&gt;
ij version 10.6&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:memory:patient;create=true;user=admin;password=adminpassword&apos; as admin_conn;&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:memory:patient;user=alice;password=alicepassword&apos; as alice_conn;&lt;br/&gt;
ij(ALICE_CONN)&amp;gt; &amp;#8211; should implicitly create the ALICE schema&lt;br/&gt;
create sequence alice_seq;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(ALICE_CONN)&amp;gt; &amp;#8211; should fail because the sequence already exists&lt;br/&gt;
create sequence alice_seq;&lt;br/&gt;
ERROR X0Y68: Sequence &apos;ALICE_SEQ&apos; already exists.&lt;br/&gt;
ij(ALICE_CONN)&amp;gt; connect &apos;jdbc:derby:memory:patient;user=ruth;password=ruthpassword&apos; as ruth_conn;&lt;br/&gt;
ij(RUTH_CONN)&amp;gt; &amp;#8211; should not be able to drop someone else&apos;s objects&lt;br/&gt;
drop sequence alice.alice_seq;&lt;br/&gt;
ERROR 42507: User &apos;RUTH&apos; can not perform the operation in schema &apos;ALICE&apos;.&lt;br/&gt;
ij(RUTH_CONN)&amp;gt; &amp;#8211; should not be able to create objects in someone else&apos;s schema&lt;br/&gt;
create sequence alice.ruth_seq;&lt;br/&gt;
ERROR 42507: User &apos;RUTH&apos; can not perform the operation in schema &apos;ALICE&apos;.&lt;br/&gt;
ij(RUTH_CONN)&amp;gt; set connection alice_conn;&lt;br/&gt;
ij(ALICE_CONN)&amp;gt; --should succeed&lt;br/&gt;
drop sequence alice_seq;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(ALICE_CONN)&amp;gt; &amp;#8211; should succeed&lt;br/&gt;
create sequence alice_seq;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(ALICE_CONN)&amp;gt;&lt;br/&gt;
----------------------------&lt;br/&gt;
When recreating these actions in JUnit, I found that testDropOtherSchemaSequence() and testCreateOtherSchemaSequence() tests take a long time to finish and they fail. I&apos;m not sure if I&apos;m taking the right way for creating different user connections. Theses two tests are commented out in the testcase.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12744124" author="rhillegas" created="Mon, 17 Aug 2009 17:30:53 +0100"  >&lt;p&gt;Hi Suran,&lt;/p&gt;

&lt;p&gt;Thanks for the new create_drop_seequence_c.patch. I have a couple comments:&lt;/p&gt;


&lt;p&gt;SequenceDescriptor.drop() - I would also add a call to dm.clearDependencies() as is done in the corresponding code in TriggerDescriptor.&lt;/p&gt;

&lt;p&gt;org.apache.derbyTesting.functionTests.tests.lang._Suite.suite() - This method still needs to add SequenceTest to its list of tests. This is what wires SequenceTest into the regression tests so that it is not just a standalone test.&lt;/p&gt;

&lt;p&gt;SequenceTest - It does not appear to me that this test is running with authentication turned on. Take a look at GeneratedColumnsPermsTest for an example of how to do this. You should be able to get user-specific connections by calling openUserConnection() rather than by calling DriverManager.getConnection(). Once you have made this change, it will be interesting to see what happens to the test cases you have commented out. This will also be a good foundation for adding GRANT/REVOKE tests when you get to that part of the project.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12749624" author="suranjay" created="Mon, 31 Aug 2009 22:08:43 +0100"  >&lt;p&gt;This revision adds the suggested changes.&lt;/p&gt;

&lt;p&gt;When I made SequenceDescriptor implement the Dependent interface to be able to call dm.clearDependencies() in the drop() method, I added the other required methods in the interface.&lt;br/&gt;
For now, is it correct to only invalidate for DependencyManager.USER_RECOMPILE_REQUEST and to add actions for DependencyManager.REVOKE_PRIVILEGE etc. after GRANT/REVOKE functionality has been added? If this revision looks ok I will start running the regression tests.&lt;/p&gt;

&lt;p&gt;After enabling authentication for SequenceTest, the current tests run fine. What other test scenarios should be added to this test class?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12749939" author="rhillegas" created="Tue, 1 Sep 2009 16:10:00 +0100"  >&lt;p&gt;Thanks for the new patch, Suran. &lt;/p&gt;

&lt;p&gt;&amp;gt; For now, is it correct to only invalidate for DependencyManager.USER_RECOMPILE_REQUEST and to add actions for DependencyManager.REVOKE_PRIVILEGE etc. after GRANT/REVOKE functionality has been added? If this revision looks ok I will start running the regression tests.&lt;/p&gt;

&lt;p&gt;Sounds good to me.&lt;/p&gt;

&lt;p&gt;&amp;gt; After enabling authentication for SequenceTest, the current tests run fine. What other test scenarios should be added to this test class? &lt;/p&gt;

&lt;p&gt;I think the tests you have now are adequate. As you add more functionality, there will be more to test.&lt;/p&gt;

&lt;p&gt;By the way, the test failed for me when I ran it against jar files. That is because a ClassNotFoundException was being raised when the engine tried to fault in CreateSequenceNode. That, in turn, was because the same property name was being used for CreateSequenceNode and DropSequenceNode in DBMSnodes.properties. The test ran cleanly for me after I made the following change to DBMSnodes.properties:&lt;/p&gt;

&lt;p&gt;-derby.module.cloudscapenodes.gw=org.apache.derby.impl.sql.compile.DropSequenceNode&lt;br/&gt;
+derby.module.cloudscapenodes.gx=org.apache.derby.impl.sql.compile.DropSequenceNode&lt;/p&gt;

&lt;p&gt;I am running the full regression tests now. Thanks.&lt;/p&gt;</comment>
                            <comment id="12750018" author="rhillegas" created="Tue, 1 Sep 2009 19:09:48 +0100"  >&lt;p&gt;Thanks again for the patch, Suran. The tests passed cleanly for me. Committed create_drop_sequence_d.patch at subversion revision 810151 (note: I made that small change to DBMSnodes.properties).&lt;/p&gt;</comment>
                            <comment id="12774398" author="suranjay" created="Fri, 6 Nov 2009 20:49:42 +0000"  >&lt;p&gt;Sequence NEXT VALUE implementation work Q &amp;amp; A: &lt;br/&gt;
Thanks to Rick Hillegas for answers.&lt;/p&gt;

&lt;p&gt;1. How does escapedValueFunction work in valueExpressionPrimary?&lt;br/&gt;
If you run the &quot;javadoc&quot; ant target, you can browse a nice summary of the grammar in&lt;br/&gt;
 javadoc/language/sqlgrammar.html&lt;br/&gt;
There you will see that escapedValueFunction covers invocations of Derby-supplied functions. These can be aliased as JDBC escaped functions. These in turn are functions whose api the JDBC spec tries to standardize--most databases support these functions but the SQL committee never got around to standardizing the apis.&lt;/p&gt;

&lt;p&gt;2. In fact, what is the purpose of the valueExpressionPrimary() method?&lt;br/&gt;
In general, the Derby grammar does a pretty good job of following the grammar laid out in part 2 of the SQL Standard. In this case, valueExpressionPrimary() is trying to model the &amp;lt;value expression primary&amp;gt; clause in section 6.3 of the Standard (you can find the Standard here: &lt;a href=&quot;http://www.wiscorp.com/SQLStandards.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.wiscorp.com/SQLStandards.html&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;3. How can I add NextSequenceNode as an option here?&lt;br/&gt;
As you can see from the Standard grammar, &amp;lt;next value expression&amp;gt; is a kind of &amp;lt;value expression primary&amp;gt; and lives in the grammar parallel to &amp;lt;column reference&amp;gt; and &amp;lt;cast specification&amp;gt;. So I would recommend adding nextValueExpression() as another option inside valueExpressionPrimary().&lt;/p&gt;</comment>
                            <comment id="12786942" author="rhillegas" created="Mon, 7 Dec 2009 15:21:32 +0000"  >&lt;p&gt;Attaching derby-712-02-aa-privilegeNodeCleanup.diff. This slightly reworks the code in PrivilegeNode so that it will be easier to add the USAGE privilege. GrantRevokeDDLTest runs cleanly. I intend to commit this patch if the full regression tests pass.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Abstracts out the notion of a qualified objectName, which is common to all privileges.&lt;/p&gt;

&lt;p&gt;2) Moves the self-revoke check outside the individual bind() cases so that it doesn&apos;t have to be repeated for each case.&lt;/p&gt;

&lt;p&gt;3) Adds braces around dangling conditional consequences because, in my experience, unbraced single-line consequences are a brittle source of bugs.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java&lt;/p&gt;</comment>
                            <comment id="12787016" author="rhillegas" created="Mon, 7 Dec 2009 18:03:55 +0000"  >&lt;p&gt;Tests passed cleanly. Committed derby-712-02-aa-privilegeNodeCleanup.diff at subversion revision 888060.&lt;/p&gt;</comment>
                            <comment id="12787462" author="kristwaa" created="Tue, 8 Dec 2009 13:45:27 +0000"  >&lt;p&gt;Patch &apos;derby-712-02-aa-privilegeNodeCleanup.diff&apos; introduces a SanityManager.THROWASSERT which isn&apos;t guarded by an &quot;if (SanityManager.DEBUG)&quot;. This causes the SanityManager class to be included in the insane builds, which again chokes maven2/SetDerbyVersion.java (I just committed it).&lt;/p&gt;

&lt;p&gt;From PrivilegeNode:&lt;br/&gt;
+&lt;br/&gt;
+        default:&lt;br/&gt;
+                SanityManager.THROWASSERT( &quot;Invalid privilege objectType: &quot; + this.objectType);&lt;/p&gt;</comment>
                            <comment id="12787483" author="rhillegas" created="Tue, 8 Dec 2009 14:57:15 +0000"  >&lt;p&gt;Thanks, Kristian. Added the sanity manager guard in subversion revision 888421.&lt;/p&gt;</comment>
                            <comment id="12794319" author="suranjay" created="Thu, 24 Dec 2009 06:10:15 +0000"  >&lt;p&gt;First patch for NEXT VALUE implementation.&lt;br/&gt;
TODO : Implement actual logic for getting the next value for a sequence, replacing the constant returning logic in this patch.&lt;/p&gt;</comment>
                            <comment id="12794633" author="rhillegas" created="Sat, 26 Dec 2009 16:24:04 +0000"  >&lt;p&gt;Thanks Suran. The patch looks good. I made a couple changes:&lt;/p&gt;

&lt;p&gt;1) I fixed DBMSNodes.properties. The addition of the NextSequenceNode to the jar file pushed the DropSequenceNode out of the jar file.&lt;/p&gt;

&lt;p&gt;2) I changed the test case for NEXT VALUE FOR to call execute() rather than executeUpdate(). The latter call kills the statement.&lt;/p&gt;

&lt;p&gt;With these changes, the regression tests passed cleanly for me. Committed at subversion revision 894002. Thanks!&lt;/p&gt;</comment>
                            <comment id="12794790" author="knutanders" created="Mon, 28 Dec 2009 09:53:13 +0000"  >&lt;p&gt;After the last commit, derby.jar contains no classes at all when I build in my environment. The same thing seems to have happened in the Tinderbox: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-894002.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-894002.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12794794" author="knutanders" created="Mon, 28 Dec 2009 10:22:03 +0000"  >&lt;p&gt;Looks like NextSequenceNode.java was forgotten in the previous commit. Added that file and committed revision 894146.&lt;/p&gt;</comment>
                            <comment id="12797187" author="rhillegas" created="Wed, 6 Jan 2010 17:25:21 +0000"  >&lt;p&gt;Attaching derby-712-03-aa-usagePrivilege.diff. This patch adds support for the USAGE privilege on sequences. While I was in there, I also made it illegal to drop a schema that contains sequences. I am running regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;Wire in checking for the USAGE privilege.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Fixed a bug which prevented us from detecting that a schema has sequences in it.&lt;/p&gt;


&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;Regression tests for USAGE privilege on sequences.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Made the CleanDatabaseTestSetup decorator drop sequences too when it is dropping schema objects.&lt;/p&gt;</comment>
                            <comment id="12797629" author="rhillegas" created="Thu, 7 Jan 2010 13:59:49 +0000"  >&lt;p&gt;Attaching derby-712-03-ac-usagePrivilege.diff. This improves the unit test cleanup logic to prevent it from trying to drop sequences when the server hasn&apos;t been upgraded to 10.6. This version passes the regression tests cleanly. Committed at subversion revision 896883.&lt;/p&gt;</comment>
                            <comment id="12798946" author="rhillegas" created="Tue, 12 Jan 2010 00:03:58 +0000"  >&lt;p&gt;Attaching derby-712-04-aa-dblook.diff. This adds dblook support for sequences. This includes generating the privilege ddl. The regression tests passed cleanly for me. Committed at subversion revision 898123.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/tools/org/apache/derby/tools/dblook.java&lt;br/&gt;
A      java/tools/org/apache/derby/impl/tools/dblook/DB_Sequence.java&lt;br/&gt;
M      java/tools/org/apache/derby/impl/tools/dblook/DB_Alias.java&lt;/p&gt;

&lt;p&gt;Logic to recreate the CREATE SEQUENCE statements.&lt;/p&gt;


&lt;p&gt;M      java/tools/org/apache/derby/impl/tools/dblook/DB_GrantRevoke.java&lt;/p&gt;

&lt;p&gt;Logic to recreate the GRANT USAGE ON SEQUENCE statements.&lt;/p&gt;


&lt;p&gt;M      java/tools/org/apache/derby/loc/toolsmessages.properties&lt;/p&gt;

&lt;p&gt;Banners for the sequences ddl and privileges.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/CreateSequenceConstantAction.java&lt;/p&gt;

&lt;p&gt;In reconstructing generic CREATE SEQUENCE ddl, I needed to generate the optional clauses of that statement. I added parser support for the optional clauses.  However, at bind-time, we raise an exception for anything but the vanilla CREATE SEQUENCE statement. While I was in there, I amended the creation of the sequence tuple so that the default start value is the smallest (most negative) integer. This is what the spec says should be done.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_makeDB_2.sql&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/dblook_test_territory.out&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/master/dblook_test.out&lt;/p&gt;

&lt;p&gt;Heartbeat test for recreating sequence ddl.&lt;/p&gt;</comment>
                            <comment id="12803499" author="suranjay" created="Thu, 21 Jan 2010 21:55:00 +0000"  >&lt;p&gt;This draft patch contains the binding changes for the optional clauses of Sequence creation. I&apos;ve added some tests to SequenceTests but there are more creation scenarios that need to be covered. Please review and comment.&lt;/p&gt;

&lt;p&gt;What is the correct SQLState code to be used for Exception messages in cases like the INCREMENT BY value being given as &apos;0&apos; or the MINVALUE being larger than MAXVALUE? In this patch I used message ID &quot;22008.S&quot; (LANG_INVALID_FUNCTION_ARGUMENT) for such scenarios.&lt;/p&gt;

&lt;p&gt;Also, I noticed that the START WITH and INCREMENT BY options are order bound, i.e. they have to appear just after the DATATYPE, and INCREMENT BY has to follow START WITH if both are present. Is this a valid constraint or does the parser code need to be modified? &lt;/p&gt;

</comment>
                            <comment id="12803500" author="suranjay" created="Thu, 21 Jan 2010 21:57:22 +0000"  >&lt;p&gt;Reattaching patch, as previous attachment was excluded from ASF license by mistake.&lt;/p&gt;</comment>
                            <comment id="12803804" author="rhillegas" created="Fri, 22 Jan 2010 18:24:44 +0000"  >&lt;p&gt;Thanks for the new patch, Suran. It looks very good. First some responses to your questions:&lt;/p&gt;

&lt;p&gt;&amp;gt;What is the correct SQLState code to be used for Exception messages in cases like the INCREMENT BY value being given as &apos;0&apos; or the MINVALUE being larger than MAXVALUE? In this patch I used message ID &quot;22008.S&quot; (LANG_INVALID_FUNCTION_ARGUMENT) for such scenarios.&lt;/p&gt;

&lt;p&gt;You will need to create some new codes in org.apache.derby.shared.common.reference.SQLState and some corresponding new messages in trunk/java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;For the codes themselves, I can&apos;t find any guidance in the ANSI/ISO standard beyond the general rule that SQLStates for syntax errors should begin with 42. I see that there is an empty range of Derby SQLStates starting with 42XAC. I recommend that you allocate your codes out of that range.&lt;/p&gt;


&lt;p&gt;&amp;gt;Also, I noticed that the START WITH and INCREMENT BY options are order bound, i.e. they have to appear just after the DATATYPE, and INCREMENT BY has to follow START WITH if both are present. Is this a valid constraint or does the parser code need to be modified?&lt;/p&gt;

&lt;p&gt;You are right, Derby is being over-strict here. The ANSI/ISO standard allows the optional clauses to appear in any order. The only restriction is that a given option can be specified at most once. You are welcome to relax Derby&apos;s restrictions here. You may want to use the CREATE FUNCTION/PROCEDURE syntax as a template for how to do this. However, I would recommend doing this work in another patch after you have finished the bind() logic for the optional clauses.&lt;/p&gt;


&lt;p&gt;Concerning the patch:&lt;/p&gt;

&lt;p&gt;In CreateSequenceNode, I like the way that you put the defaulting logic in the initializer and left validation to the bind() stage.&lt;/p&gt;

&lt;p&gt;As noted above, you will want to create specific error messages for the validation checks you perform in CreateSequenceNode.bindStatement(). The generic error messages don&apos;t give the user enough information to figure out what the problem is.&lt;/p&gt;

&lt;p&gt;It seems to me that you only need to compare max, min, and initial values in one place, rather than duplicating this check for each datatype.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12805071" author="rhillegas" created="Tue, 26 Jan 2010 15:57:58 +0000"  >&lt;p&gt;Attaching derby-712-05-af-sequenceGenerator.diff. This patch adds cached sequence generators to the data dictionary and makes the NEXT VALUE FOR clause yield the expected results. Regression tests have passed for me but I am re-running them just to be safe.&lt;/p&gt;

&lt;p&gt;User-visible behavior changes as follows:&lt;/p&gt;

&lt;p&gt;A) When you issue a NEXT VALUE FOR clause, the value of the sequence generator really advances as expected.&lt;/p&gt;

&lt;p&gt;B) If you shutdown the database after using a sequence generator, the generator may leak up to 5 values. That is, when you reboot, the next value for the generator may be up to 5 steps beyond what you expected.&lt;/p&gt;

&lt;p&gt;Here is the approach I adopted:&lt;/p&gt;

&lt;p&gt;1) SequenceGenerator - This is a general class which manages ranges of sequence values. It advances a counter and hands out the next sequence value in a range. In addition, it calculates chunk sizes for sub-ranges which can be pre-allocated. Right now, pre-allocation is pretty dumb: we just pre-allocate 5 numbers at a time. In the future we could do something fancier. For instance, we could give the user a property for tuning the size of pre-allocated ranges, or Derby could auto-tune this number itself based on run-time behavior.&lt;/p&gt;

&lt;p&gt;2) SequenceUpdater - This is an abstract class. It is a Cacheable to be stored in the data dictionary. Concrete subclasses are responsible for particular types of sequences. For instance, there is an inner subclass which is responsible for ANSI/ISO sequence generators. In the future, we could add another inner subclass which is responsible for identity columns. There is also a testing subclass which I used to test boundary conditions related to the currently unimplemented optional clauses of the CREATE SEQUENCE statement. The SequenceUpdater does the following tasks:&lt;/p&gt;

&lt;p&gt;a) It calls its corresponding SequenceGenerator to calculate the next value in a sequence.&lt;/p&gt;

&lt;p&gt;b) It manages the updating of the system tables when a pre-allocated range needs to be recorded on disk.&lt;/p&gt;

&lt;p&gt;c) It reclaims unused pre-allocated values when the data dictionary caches have to be flushed. This prevents us from leaking values when DDL is performed. In the future, similar reclamation could be performed during the orderly shutdown of a database. This probably requires some discussion.&lt;/p&gt;

&lt;p&gt;There are some tricky bits in the implementation:&lt;/p&gt;

&lt;p&gt;i) There are a couple synchronized methods in SequenceGenerator. It is my hope that these critical sections are short.&lt;/p&gt;

&lt;p&gt;ii) The on-disk catalog value (in this case, SYS.SYSSEQUENCES.CURRENTVALUE) is updated in a read/write subtransaction of the session&apos;s execution transaction if possible--and that subtransaction is then immediately committed. However, if it is not possible to obtain an immediate lock on the catalog row, we fall back to updating the row in the parent transaction, that is, in the session&apos;s execution transaction. This is similar to what is done for identity columns today.&lt;/p&gt;

&lt;p&gt;iii) Updating the value in the catalog row is managed by a little hopping back and forth among the DataDictionary, the SequenceUpdater, and the SequenceGenerator. Here&apos;s what the flow of control looks like:&lt;/p&gt;

&lt;p&gt;o An Activation asks the DataDictionary for the next value in a sequence.&lt;/p&gt;

&lt;p&gt;o The DataDictionary forwards the request to the SequenceUpdater.&lt;/p&gt;

&lt;p&gt;o The SequenceUpdater forwards the request to the SequenceGenerator.&lt;/p&gt;

&lt;p&gt;o If the SequenceGenerator determines that a new range needs to be allocated, it calculates the new endpoint of the range. Then the SequenceGenerator asks the SequenceUpdater to allocate the new range.&lt;/p&gt;

&lt;p&gt;o The SequenceUpdater forwards that request to the DataDictionary.&lt;/p&gt;

&lt;p&gt;o The DataDictionary updates the catalog row.&lt;/p&gt;

&lt;p&gt;o Everyone returns and the Activation gets the value it asked for.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;

&lt;p&gt;A      java/engine/org/apache/derby/impl/sql/catalog/SequenceGenerator.java&lt;/p&gt;

&lt;p&gt;The SequenceGenerator described in (1) above.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;


&lt;p&gt;A      java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;The SequenceUpdater described in (2) above.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/reference/Property.java&lt;br/&gt;
M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;/p&gt;

&lt;p&gt;DataDictionary support for cached sequence generators.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SYSSEQUENCESRowFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/CreateSequenceConstantAction.java&lt;/p&gt;

&lt;p&gt;A null in SYS.SYSSEQUENCES.CURRENTVALUE now means that a non-cycling sequence generator is exhausted. That is, it has run through its range of legal values.&lt;/p&gt;


&lt;p&gt;-------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message for exhausted sequence generators.&lt;/p&gt;


&lt;p&gt;-------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java&lt;/p&gt;

&lt;p&gt;Code-generation for the NEXT VALUE FOR clause.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;/p&gt;

&lt;p&gt;Run-time support for the NEXT VALUE FOR clause.&lt;/p&gt;


&lt;p&gt;-------&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SGVetter.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;Regression tests for cached sequence generators. SGVetter is a re-implementation of sequence generation used to test the correctness of the production SequenceGenerator. SGVetter is less efficient than SequenceGenerator but it is easier to reason about its correctness.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;</comment>
                            <comment id="12805137" author="rhillegas" created="Tue, 26 Jan 2010 18:58:28 +0000"  >&lt;p&gt;Regression tests passed cleanly for me on derby-712-05-af-sequenceGenerator.diff.&lt;/p&gt;</comment>
                            <comment id="12805529" author="knutanders" created="Wed, 27 Jan 2010 15:04:34 +0000"  >&lt;p&gt;I had a look at the 05-af patch, and the approach looks good to me (obligatory nit-pick: many lines exceed 80 characters).&lt;/p&gt;

&lt;p&gt;I&apos;m not sure, though, if clearIdentity() is the right place to update the system tables to prevent holes in the sequences. Perhaps clean() is a better place. That method can more easily be called from checkpoint/shutdown, so that we don&apos;t get holes when rebooting the database. It also allows throwing exceptions, so that we don&apos;t need try/catch to suppress exceptions seen when updating the value on disk.&lt;/p&gt;</comment>
                            <comment id="12805918" author="rhillegas" created="Thu, 28 Jan 2010 13:37:33 +0000"  >&lt;p&gt;Thanks for the quick review, Knut. I will make the change you suggest. I think there is also an unchecked deadlock in this solution which arises if we have to update the catalog tuple in the execution transaction (not the subtransaction). That work happens inside the critical section and I think that the Java synchronization could deadlock with the Store lock. Need to think about how to tackle this. Thanks.&lt;/p&gt;</comment>
                            <comment id="12806101" author="knutanders" created="Thu, 28 Jan 2010 21:31:51 +0000"  >&lt;p&gt;One small thing I forgot to mention is that the name of the property that controls the size of the sequence generator cache is a little cryptic. Should we call it derby.language.sequenceGeneratorCache instead?&lt;/p&gt;</comment>
                            <comment id="12806120" author="rhillegas" created="Thu, 28 Jan 2010 21:54:16 +0000"  >&lt;p&gt;Thanks, Knut. I&apos;m happy with your proposed property name. I&apos;ll make that change in the next rev of the patch.&lt;/p&gt;</comment>
                            <comment id="12806140" author="knutanders" created="Thu, 28 Jan 2010 22:46:59 +0000"  >&lt;p&gt;Of course I meant to say derby.language.sequenceGeneratorCacheSize...&lt;/p&gt;</comment>
                            <comment id="12806858" author="suranjay" created="Sun, 31 Jan 2010 19:03:35 +0000"  >&lt;p&gt;I added SQLState codes 42XAC through 42XAG and corresponding messages. Also changed the bind time arg checks as suggested. Please review and comment.&lt;br/&gt;
Thanks!&lt;br/&gt;
Suran&lt;/p&gt;</comment>
                            <comment id="12828150" author="rhillegas" created="Mon, 1 Feb 2010 15:30:22 +0000"  >&lt;p&gt;Thanks, Suran. The patch looks great. I am running tests now.&lt;/p&gt;</comment>
                            <comment id="12828225" author="rhillegas" created="Mon, 1 Feb 2010 19:01:29 +0000"  >&lt;p&gt;Thanks again for the patch, Suran. I have committed it at subversion revision 905369. Along the way I also updated the canons for dblook_test and dblook_test_territory since this patch changes the results slightly. Thanks!&lt;/p&gt;</comment>
                            <comment id="12829878" author="rhillegas" created="Fri, 5 Feb 2010 00:34:40 +0000"  >&lt;p&gt;Attaching derby-712-05-al-sequenceGenerator.diff. This reworks the previous version of the patch, replacing a deadlock situation with a potential race-condition.&lt;/p&gt;

&lt;p&gt;The separation of functionality between SequenceUpdater and SequenceGenerator is now more clear:&lt;/p&gt;

&lt;p&gt;o SequenceUpdater handles handshaking with the catalog.&lt;/p&gt;

&lt;p&gt;o SequenceGenerator is just a calculator which does no i/o.&lt;/p&gt;

&lt;p&gt;This patch includes more extensive header comments for both classes,explaining how they are used. The basic logic flow is documented in in SequenceUpdater.  Hopefully this is clear enough that other people will be able to reason about its correctness and spot flaws. Here is that header comment:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;Here is the algorithm pursued when the caller asks for the next number in a sequence:&lt;/p&gt;

&lt;p&gt;o We try to get the next number from a cache of pre-allocated numbers. The endpoint (last number in the pre-allocated range) was previously recorded in the catalog row which describes this sequence. If we are successful in getting the next number, we return it and all is well.&lt;/p&gt;

&lt;p&gt;o Otherwise, we must allocate a new range by updating the catalog row. At this point we may find ourselves racing another session, which also needs the next number in the sequence.&lt;/p&gt;

&lt;p&gt;o When we try to update the catalog row, we check to see whether the current value there is what we expect it to be. If it is, then all is well: we update the catalog row then return to the first step to try to get the next number from the new cache of pre-allocated numbers.&lt;/p&gt;

&lt;p&gt;o If, however, the value in the catalog row is not what we expect, then another session has won the race to update the catalog. We accept this fact gracefully and do not touch the catalog. Instead, we return to the first step and try to get the next number from the new cache of numbers which the other session has just pre-allocated.&lt;/p&gt;

&lt;p&gt;o We only allow ourselves to retry this loop a small number of times. If we still can&apos;t get the next number in the sequence, we raise an exception complaining that there is too much contention on the generator.&lt;/p&gt;


&lt;p&gt;If applications start seeing exceptions complaining that there is too much contention on a sequence generator, then we should improve this algorithm. Here are some options based on the idea that contention should go down if we increase the number of pre-allocated numbers:&lt;/p&gt;

&lt;p&gt;o We can let the user change the size of the pre-allocated range.&lt;/p&gt;

&lt;p&gt;o Derby can increase the size of the pre-allocated range when Derby detects too much contention.&lt;/p&gt;

&lt;p&gt;-------&lt;/p&gt;</comment>
                            <comment id="12830942" author="rhillegas" created="Mon, 8 Feb 2010 13:52:17 +0000"  >&lt;p&gt;Committed derby-712-05-al-sequenceGenerator.diff at subversion revision 907654.&lt;/p&gt;</comment>
                            <comment id="12833398" author="rhillegas" created="Sat, 13 Feb 2010 15:10:39 +0000"  >&lt;p&gt;Attaching derby-712-06-aa-restrictedDrops.diff. This patch limits DROP SEQUENCE to RESTRICTed drops. This makes the syntax conform to the current behavior. The DROP SEQUENCE statement raises an error if any triggers or views mention the sequence. This is NOT the behavior described by the functional spec. The spec called for CASCADEd drops. The spec will be revised after this syntax change is checked in. Tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Require the RESTRICT keyword in DROP SEQUENCE statements.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java&lt;/p&gt;

&lt;p&gt;Added a comment noting the RESTRICTed behavior of sequence drops.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequencePermsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTPermsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Alter the tests to reflect this syntax change.&lt;/p&gt;</comment>
                            <comment id="12833880" author="rhillegas" created="Mon, 15 Feb 2010 16:37:51 +0000"  >&lt;p&gt;Committed derby-712-05-al-sequenceGenerator.diff at subversion revision 910255.&lt;/p&gt;</comment>
                            <comment id="12833881" author="rhillegas" created="Mon, 15 Feb 2010 16:40:48 +0000"  >&lt;p&gt;Attaching rev 2 of the functional spec, with these changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Only allow REVOKE USAGE with RESTRICT.&lt;/li&gt;
	&lt;li&gt;Clarify restrictions on usage of NEXT VALUE FOR expressions.&lt;/li&gt;
	&lt;li&gt;Only allow RESTRICTed drops of sequences.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More testing needs to be done, but I believe that the functionality described by this spec has been implemented.&lt;/p&gt;</comment>
                            <comment id="12854490" author="rhillegas" created="Wed, 7 Apr 2010 14:30:07 +0100"  >&lt;p&gt;Resolving this issue. I believe that the work is done.&lt;/p&gt;</comment>
                            <comment id="12988652" author="brettw" created="Mon, 31 Jan 2011 05:36:40 +0000"  >&lt;p&gt;FAQ needs to be updated.&lt;/p&gt;</comment>
                            <comment id="12988808" author="dagw" created="Mon, 31 Jan 2011 17:41:17 +0000"  >&lt;p&gt;Thanks, Brett. I just did. It will take some time before the update is reflected on the web site, though.&lt;/p&gt;</comment>
                            <comment id="13685313" author="knutanders" created="Mon, 17 Jun 2013 10:19:39 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12502326">DERBY-5151</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12445329">DERBY-4513</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12458945">DERBY-4580</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12455475">DERBY-4539</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443866">DERBY-4487</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12457305">DERBY-4565</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12437003">DERBY-4393</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12508843">DERBY-5254</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="29039">DERBY-103</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12698699">DERBY-6494</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12440016">DERBY-4437</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12523908">DERBY-5426</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12457430">DERBY-4568</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12435885" name="SequenceGenerator.html" size="24847" author="rhillegas" created="Mon, 15 Feb 2010 16:40:48 +0000"/>
                            <attachment id="12401852" name="SequenceGenerator.html" size="24249" author="rhillegas" created="Tue, 10 Mar 2009 18:21:45 +0000"/>
                            <attachment id="12411553" name="altertable.diff" size="18891" author="suranjay" created="Tue, 23 Jun 2009 18:08:31 +0100"/>
                            <attachment id="12408958" name="catalogs_a.patch" size="58662" author="suranjay" created="Mon, 25 May 2009 19:27:51 +0100"/>
                            <attachment id="12410348" name="catalogs_b.patch" size="53307" author="suranjay" created="Wed, 10 Jun 2009 23:44:41 +0100"/>
                            <attachment id="12411445" name="catalogs_c.patch" size="71682" author="suranjay" created="Mon, 22 Jun 2009 20:56:21 +0100"/>
                            <attachment id="12411552" name="catalogs_d.patch" size="71125" author="suranjay" created="Tue, 23 Jun 2009 18:08:31 +0100"/>
                            <attachment id="12412191" name="catalogs_e.patch" size="70666" author="suranjay" created="Tue, 30 Jun 2009 20:01:18 +0100"/>
                            <attachment id="12412658" name="catalogs_f.patch" size="70441" author="suranjay" created="Mon, 6 Jul 2009 22:58:14 +0100"/>
                            <attachment id="12412659" name="catalogs_f_2.patch" size="70449" author="suranjay" created="Mon, 6 Jul 2009 23:11:12 +0100"/>
                            <attachment id="12412736" name="catalogs_g.diff" size="70312" author="rhillegas" created="Tue, 7 Jul 2009 14:05:09 +0100"/>
                            <attachment id="12412875" name="catalogs_h.diff" size="71585" author="rhillegas" created="Wed, 8 Jul 2009 16:22:15 +0100"/>
                            <attachment id="12416102" name="create_drop_sequence_a.patch" size="30130" author="suranjay" created="Mon, 10 Aug 2009 19:57:25 +0100"/>
                            <attachment id="12416248" name="create_drop_sequence_b.patch" size="34573" author="suranjay" created="Tue, 11 Aug 2009 22:28:45 +0100"/>
                            <attachment id="12416729" name="create_drop_sequence_c.patch" size="39454" author="suranjay" created="Mon, 17 Aug 2009 00:00:58 +0100"/>
                            <attachment id="12418178" name="create_drop_sequence_d.patch" size="40651" author="suranjay" created="Mon, 31 Aug 2009 22:08:43 +0100"/>
                            <attachment id="12416008" name="create_sequence_a.patch" size="18516" author="suranjay" created="Sun, 9 Aug 2009 22:08:20 +0100"/>
                            <attachment id="12431068" name="createseq_args_bind_a.diff" size="16829" author="suranjay" created="Thu, 21 Jan 2010 21:57:22 +0000"/>
                            <attachment id="12431917" name="createseq_args_bind_b.diff" size="22371" author="suranjay" created="Sun, 31 Jan 2010 19:03:35 +0000"/>
                            <attachment id="12427186" name="derby-712-02-aa-privilegeNodeCleanup.diff" size="10687" author="rhillegas" created="Mon, 7 Dec 2009 15:21:31 +0000"/>
                            <attachment id="12429551" name="derby-712-03-aa-usagePrivilege.diff" size="16968" author="rhillegas" created="Wed, 6 Jan 2010 17:25:21 +0000"/>
                            <attachment id="12429642" name="derby-712-03-ac-usagePrivilege.diff" size="18050" author="rhillegas" created="Thu, 7 Jan 2010 13:59:49 +0000"/>
                            <attachment id="12429957" name="derby-712-04-aa-dblook.diff" size="28655" author="rhillegas" created="Tue, 12 Jan 2010 00:03:58 +0000"/>
                            <attachment id="12431431" name="derby-712-05-af-sequenceGenerator.diff" size="89005" author="rhillegas" created="Tue, 26 Jan 2010 15:57:58 +0000"/>
                            <attachment id="12434908" name="derby-712-05-al-sequenceGenerator.diff" size="101887" author="rhillegas" created="Fri, 5 Feb 2010 00:34:40 +0000"/>
                            <attachment id="12435773" name="derby-712-06-aa-restrictedDrops.diff" size="11816" author="rhillegas" created="Sat, 13 Feb 2010 15:10:39 +0000"/>
                            <attachment id="12428893" name="sequences_next_value_a.patch" size="10696" author="suranjay" created="Thu, 24 Dec 2009 06:10:15 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Apr 2006 04:38:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29671</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0f9j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36291</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>