<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2861/DERBY-2861.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2861] Thread safety issue in TableDescriptor</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2861</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;A NullPointerException occurs in org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName when accessing the same object on many threads (each with its own connection).  The attached test program starts N threads each creating and then dropping a separate view against the same source view, repeated M times.  I can reproduce the problem with N=100 and M=100 on my machine, but not every run.&lt;/p&gt;

&lt;p&gt;An instance member named referencedColumnMap is checked for null at the top of the getObjectName method, but later when it is dereferenced it is null, because it was set to null by another thread.  I am not sure what getObjectName is used for other than error reporting.  I have considered a fix of just saving the non-null reference as a method variable, to avoid the later NullPointerException.   But I don&apos;t know what unintended consequences this may have. &lt;/p&gt;

&lt;p&gt;When the test program does show the exception, the stack trace looks like this:&lt;/p&gt;

&lt;p&gt; java.lang.NullPointerException&lt;br/&gt;
   at org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName(TableDescriptor.java:758)&lt;br/&gt;
   at org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(BasicDependencyManager.java:677)&lt;br/&gt;
   at org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:287)&lt;br/&gt;
   at org.apache.derby.impl.sql.compile.CreateViewNode.bind(CreateViewNode.java:183)&lt;br/&gt;
   at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:345)&lt;br/&gt;
   at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:119)&lt;br/&gt;
   at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:745)&lt;br/&gt;
   at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:568)&lt;br/&gt;
   at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517)&lt;br/&gt;
   at TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:109)&lt;br/&gt;
   at TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:10)&lt;br/&gt;
   at TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:173)&lt;br/&gt;
   at java.lang.Thread.run(Thread.java:534)&lt;/p&gt;

</description>
                <environment>Tested on a dual-core 3GHz Pentium machine running Windows Vista Business, using JDK 1.4.2_13 and Derby trunk revision 548822.</environment>
        <key id="12372221">DERBY-2861</key>
            <summary>Thread safety issue in TableDescriptor</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="clary2137">Jeff Clary</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Jun 2007 15:58:30 +0100</created>
                <updated>Fri, 21 Jan 2011 17:50:26 +0000</updated>
                            <resolved>Sun, 22 Jun 2008 02:18:14 +0100</resolved>
                                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12507409" author="clary2137" created="Fri, 22 Jun 2007 16:00:25 +0100"  >&lt;p&gt;Command line arguments are NUMBER_OF_THREADS NUMBER_OF_ITERATIONS.  I have seen the error occur with 100 threads after a few iterations.&lt;/p&gt;</comment>
                            <comment id="12577233" author="kmarsden" created="Mon, 10 Mar 2008 22:34:43 +0000"  >&lt;p&gt;I can&apos;t seem to reproduce this on trunk or latest on 10.3. I get only lock timeouts. e.g.&lt;br/&gt;
java.sql.SQLException: A lock could not be obtained within the time requested&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:201)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:391)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2082)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1325)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
        at TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;br/&gt;
        at TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;br/&gt;
        at TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:189)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:803)&lt;br/&gt;
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:276)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:602)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:117)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(RowLocking2.java:165)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScan(B2IRowLocking3.java:127)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScan(B2IRowLocking3.java:739)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:662)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:112)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(BTreeScan.java:436)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeForwardScan.positionAtStartPosition(BTreeForwardScan.java:71)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:123)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.next(BTreeScan.java:1756)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexChanger.doDelete(IndexChanger.java:335)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexChanger.delete(IndexChanger.java:544)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexSetChanger.delete(IndexSetChanger.java:250)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.RowChangerImpl.deleteRow(RowChangerImpl.java:476)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(TabInfoImpl.java:750)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(TabInfoImpl.java:581)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnDescriptorCore(DataDictionaryImpl.java:2950)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllColumnDescriptors(DataDictionaryImpl.java:2452)&lt;br/&gt;
        at org.apache.derby.iapi.sql.dictionary.ViewDescriptor.drop(ViewDescriptor.java:411)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DropViewConstantAction.executeConstantAction(DropViewConstantAction.java:13&lt;br/&gt;
4)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:64)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:372)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
        ... 6 more&lt;/p&gt;

&lt;p&gt;Are the lock timeouts expected? Can anyone still reproduce this?&lt;/p&gt;</comment>
                            <comment id="12604222" author="bryanpendleton" created="Wed, 11 Jun 2008 14:47:24 +0100"  >&lt;p&gt;I ran the test program a number of times with the current trunk.&lt;/p&gt;

&lt;p&gt;Sometimes the program ran successfully, sometimes I got&lt;br/&gt;
lock timeout errors, sometimes I got &quot;table/view already exists&quot; errors.&lt;/p&gt;

&lt;p&gt;I never saw the NPE observed by the original poster.&lt;/p&gt;

&lt;p&gt;This was on Ubuntu 8 with Sun JDK 1.5 on a fairly slow old machine.&lt;/p&gt;</comment>
                            <comment id="12604392" author="dagw" created="Thu, 12 Jun 2008 01:22:35 +0100"  >&lt;p&gt;I was able to reproduce this error on trunk on a dual-cpu x86 box running Solaris 10 using&lt;br/&gt;
10 threads and 100 iterations on the first attempt. Next 10 attempts worked well..  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In all cases I got the error:&lt;br/&gt;
Table/View &apos;SOURCETABLE&apos; already exists in Schema &apos;SCHEMAMAIN&apos;&lt;/p&gt;

&lt;p&gt;My stack trace is similar:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2183)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:614)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;br/&gt;
	at TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;br/&gt;
	at TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:188)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
	... 12 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName(TableDescriptor.java:775)&lt;br/&gt;
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(BasicDependencyManager.java:681)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:287)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement(CreateViewNode.java:181)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;br/&gt;
	... 5 more&lt;/p&gt;</comment>
                            <comment id="12605113" author="dagw" created="Sun, 15 Jun 2008 00:56:11 +0100"  >&lt;p&gt;It seems there is a race condition here in that referencedColumnMap&lt;br/&gt;
is being set to null &lt;b&gt;after&lt;/b&gt; the test at the start of getObjectName but before&lt;br/&gt;
the usage.&lt;/p&gt;

&lt;p&gt;By inserting a Thread.sleep(1000) at a line just before the access&lt;/p&gt;

&lt;p&gt;&amp;gt;    if (referencedColumnMap.isSet(cd.getPosition())&lt;/p&gt;

&lt;p&gt;I can reliably reproduce the error. I will try to find out what usage/access sets &lt;br/&gt;
referencedColumnMap to null now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12605115" author="dagw" created="Sun, 15 Jun 2008 01:30:12 +0100"  >&lt;p&gt;I instrumented the  code that sets referencedColumnMap to collect the thread and the thread&apos;s&lt;br/&gt;
stacktrace when it sets it to null,  and printed that as well as the current thread and the stacktrace &lt;br/&gt;
when the error occurs:&lt;/p&gt;

&lt;p&gt;I got these two stack traces that show how two threads get in each others way here.&lt;/p&gt;


&lt;p&gt;---&amp;gt;thread 1: Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-10,5,main&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;org.apache.derby.iapi.sql.dictionary.TableDescriptor.setReferencedColumnMap(TableDescriptor.java:381)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.depend.BasicDependencyManager.clearColumnInfoInProviders(BasicDependencyManager.java:707)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:290)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement(CreateViewNode.java:181)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:188)&lt;/li&gt;
		&lt;li&gt;java.lang.Thread.run(Thread.java:619)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;---&amp;gt;thread 2: Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-5,5,main&amp;#93;&lt;/span&gt;&lt;br/&gt;
java.lang.Exception: Stack trace&lt;br/&gt;
	at java.lang.Thread.dumpStack(Thread.java:1206)&lt;br/&gt;
	at org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName(TableDescriptor.java:796)&lt;br/&gt;
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(BasicDependencyManager.java:681)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:287)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement(CreateViewNode.java:181)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;br/&gt;
	at TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;br/&gt;
	at TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:188)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;

&lt;p&gt;These lines in CreatViewNode#bindViewDefinition account for both thread stacks:&lt;/p&gt;

&lt;p&gt;(2) ProviderInfo[] providerInfos = dm.getPersistentProviderInfos(apl);&lt;br/&gt;
      // need to clear the column info in case the same table descriptor&lt;br/&gt;
      // is reused, eg., in multiple target only view definition&lt;br/&gt;
(1) dm.clearColumnInfoInProviders(apl);&lt;/p&gt;

&lt;p&gt;Thread 1 is excuting line marked (1), thread 2 is executing line marked (2).&lt;/p&gt;</comment>
                            <comment id="12605116" author="dagw" created="Sun, 15 Jun 2008 02:26:25 +0100"  >&lt;p&gt;When I added synchronized(this) for both dm.getPersistentProviderInfos and dm.clearColumnInfoInProviders&lt;br/&gt;
I observed another race:&lt;/p&gt;

&lt;p&gt;Table: SCHEMAMAIN.SOURCETABLE&lt;br/&gt;
---&amp;gt;thread 1: Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-11,5,main&amp;#93;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;org.apache.derby.iapi.sql.dictionary.TableDescriptor.setReferencedColumnMap(TableDescriptor.java:381)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(DataDictionaryImpl.java:1997)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.QueryTreeNode.getTableDescriptor(QueryTreeNode.java:1228)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor(FromBaseTable.java:2445)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(FromBaseTable.java:2175)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromList.bindTables(FromList.java:310)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(SelectNode.java:390)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromSubquery.bindNonVTITables(FromSubquery.java:154)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(FromBaseTable.java:2290)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.FromList.bindTables(FromList.java:310)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(SelectNode.java:390)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:259)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement(CreateViewNode.java:181)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;/li&gt;
		&lt;li&gt;org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;/li&gt;
		&lt;li&gt;TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:188)&lt;/li&gt;
		&lt;li&gt;java.lang.Thread.run(Thread.java:619)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;---&amp;gt;thread 2: Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-8,5,main&amp;#93;&lt;/span&gt;&lt;br/&gt;
java.lang.Exception: Stack trace&lt;br/&gt;
	at java.lang.Thread.dumpStack(Thread.java:1206)&lt;br/&gt;
	at org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName(TableDescriptor.java:796)&lt;br/&gt;
	at org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(BasicDependencyManager.java:683)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(CreateViewNode.java:287)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement(CreateViewNode.java:181)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:314)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:794)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:606)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at TestEmbeddedMultiThreading.executeStatement(TestEmbeddedMultiThreading.java:124)&lt;br/&gt;
	at TestEmbeddedMultiThreading.access$100(TestEmbeddedMultiThreading.java:25)&lt;br/&gt;
	at TestEmbeddedMultiThreading$ViewCreatorDropper.run(TestEmbeddedMultiThreading.java:188)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;</comment>
                            <comment id="12605117" author="dagw" created="Sun, 15 Jun 2008 02:37:08 +0100"  >&lt;p&gt;I got rid of that one by adding:&lt;/p&gt;

&lt;p&gt;     synchronized(getDataDictionary().getDependencyManager()) {&lt;br/&gt;
          :&lt;/p&gt;

&lt;p&gt;to setReferencedColumnMap. But this all seems problematic,&lt;br/&gt;
since the referenceColumnMap is used unsynchronized also from:&lt;/p&gt;

&lt;p&gt;    FromBaseTable#getMatchingColumn&lt;/p&gt;

&lt;p&gt;It seems the mechanism of this shared state (refrencedColumnMap) in the TableDescriptor which is being manipulated by several threads is not sound and needs some rethinking.&lt;/p&gt;

&lt;p&gt;Uploading the patch I used to get this far, experiment.diff.&lt;/p&gt;
</comment>
                            <comment id="12605118" author="dagw" created="Sun, 15 Jun 2008 02:45:54 +0100"  >&lt;p&gt;Note, the patch contains the instrumentation as well.&lt;br/&gt;
By removing the synchronizations I added you should be able to see the &lt;br/&gt;
bug in the repro.&lt;/p&gt;</comment>
                            <comment id="12605788" author="dagw" created="Wed, 18 Jun 2008 01:41:33 +0100"  >&lt;p&gt;It seems the TableDescriptors are only ever taken from the cache&lt;br/&gt;
(i.e. not read from SYSTABLES) during compile time. The problem seen&lt;br/&gt;
in the repro happens at compile time when threads access the same&lt;br/&gt;
TableDescriptor instance and use save state in referencedColumnMap.&lt;/p&gt;

&lt;p&gt;Attaching a patch which makes the &quot;sleep modified&quot; repro work.  It&lt;br/&gt;
makes the field referencedColumnMap thread local. This should be OK&lt;br/&gt;
since the field is not present in SYSTABLES, so it must be transitory.&lt;br/&gt;
So with this patch, each new thread will experience that the field is&lt;br/&gt;
null when the thread first accesses it.&lt;/p&gt;

&lt;p&gt;Quoting the comment from TableDescriptor.java:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;It contains a weak hash map keyed by the the TableDescriptor&lt;/li&gt;
	&lt;li&gt;and the value is the actual referencedColumnMap bitmap.  So,&lt;/li&gt;
	&lt;li&gt;each thread has a weak hash map it uses to find the appropriate&lt;/li&gt;
	&lt;li&gt;referencedColumnMap for &apos;this&apos; TableDescriptor.&lt;br/&gt;
*&lt;/li&gt;
	&lt;li&gt;Since the hash map is weak, when the TableDescriptor is no&lt;/li&gt;
	&lt;li&gt;longer referenced the hash entry can be garbage collected (it&lt;/li&gt;
	&lt;li&gt;is the &lt;b&gt;key&lt;/b&gt; of a weak hash map that is weak, not the value).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I did not add any test since I don&apos;t know how to reliably make one. &lt;br/&gt;
Running regressions now.&lt;/p&gt;</comment>
                            <comment id="12605910" author="kristwaa" created="Wed, 18 Jun 2008 12:12:22 +0100"  >&lt;p&gt;Two comments on the patch &apos;derby-2861-1.diff&apos;:&lt;br/&gt;
 a) What is the purpose of &apos;synchronized&apos; keyword in the signature of ThreadLocal.initialValue?&lt;br/&gt;
 b) Can the import of ThreadLocal be removed? (it is commented out)&lt;/p&gt;</comment>
                            <comment id="12605917" author="dagw" created="Wed, 18 Jun 2008 12:30:46 +0100"  >&lt;p&gt;Thanks for looking at this, Kristian!&lt;/p&gt;

&lt;p&gt;Uploading a new version, #2. Btw, regression tests passed for #1.&lt;br/&gt;
As for your comments: &lt;/p&gt;

&lt;p&gt;a) Yes, bad cut and paste job from the javadoc sample code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Fixed.&lt;br/&gt;
b) Yes, I forgot, thank. Fixed.&lt;/p&gt;</comment>
                            <comment id="12607057" author="dagw" created="Sun, 22 Jun 2008 02:18:14 +0100"  >&lt;p&gt;Committed derby-2861-2 as svn 670286. &lt;/p&gt;

&lt;p&gt;Resolving. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12479510">DERBY-4895</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12360369" name="TestEmbeddedMultiThreading.java" size="9142" author="clary2137" created="Fri, 22 Jun 2007 16:00:17 +0100"/>
                            <attachment id="12384168" name="derby-2861-1.diff" size="3487" author="dagw" created="Wed, 18 Jun 2008 01:41:33 +0100"/>
                            <attachment id="12384209" name="derby-2861-2.diff" size="3440" author="dagw" created="Wed, 18 Jun 2008 12:30:45 +0100"/>
                            <attachment id="12384019" name="experiment.diff" size="6213" author="dagw" created="Sun, 15 Jun 2008 02:45:54 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Mar 2008 22:34:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23286</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy088f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>