<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6378/DERBY-6378.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6378] OFFSET/FETCH NEXT ignored when query is enclosed in parentheses</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6378</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;ij version 10.10&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create table t(x int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t values 1,2,3;&lt;br/&gt;
3 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from t offset 1 row fetch first 1 row only;&lt;br/&gt;
X          &lt;br/&gt;
-----------&lt;br/&gt;
2          &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; (select * from t offset 1 row fetch first 1 row only);&lt;br/&gt;
X          &lt;br/&gt;
-----------&lt;br/&gt;
1          &lt;br/&gt;
2          &lt;br/&gt;
3          &lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;I would have expected that both of the queries had returned a single row.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12673891">DERBY-6378</key>
            <summary>OFFSET/FETCH NEXT ignored when query is enclosed in parentheses</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Tue, 15 Oct 2013 15:12:45 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:32 +0000</updated>
                            <resolved>Wed, 5 Mar 2014 13:49:39 +0000</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13796330" author="bryanpendleton" created="Wed, 16 Oct 2013 03:02:25 +0100"  >&lt;p&gt;I wonder if this is related to whether or not the query is a &quot;top level query&quot;, or is a &quot;subquery&quot;.&lt;/p&gt;

&lt;p&gt;See, e.g., &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4398&quot; title=&quot;Allow OFFSET/FETCH in subqueries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4398&quot;&gt;&lt;del&gt;DERBY-4398&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="13796753" author="dagw" created="Wed, 16 Oct 2013 14:00:34 +0100"  >&lt;p&gt;This is obviously an error; I&apos;ll have a look.&lt;/p&gt;</comment>
                            <comment id="13797148" author="dagw" created="Wed, 16 Oct 2013 20:15:33 +0100"  >&lt;p&gt;Attaching a patch which solves the problem. From my sandbox commit log:&lt;/p&gt;

&lt;p&gt;Patch derby-6378-1. A cursor node is generated in another way here than normal since the top level is an expression, and the ORDER BY and offset/fetch info is attached to the SELECT at the outset, rather than to the CursorNode.&lt;/p&gt;

&lt;p&gt;The issue was that the generated cursor node&apos;s (empty) offset/fetch got pushed onto the SELECT&apos;s versions in this case, effectively clobbering them. The patch adds checks for null as is done for ORDER BY and this solved the problem. Added a new test case to OffsetFetchNextTest.&lt;/p&gt;</comment>
                            <comment id="13797153" author="dagw" created="Wed, 16 Oct 2013 20:16:32 +0100"  >&lt;p&gt;Regressions ran ok, please review.&lt;/p&gt;</comment>
                            <comment id="13797710" author="knutanders" created="Thu, 17 Oct 2013 09:22:32 +0100"  >&lt;p&gt;The fix seems to work if the OFFSET/FETCH clauses are located either in the top-level query or in the subquery. But if both of them contain such clauses, it seems like the outer ones still overwrite the inner ones.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1 (x int);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t1 values 1,2,3,4,5;
5 rows inserted/updated/deleted
ij&amp;gt; (select * from t1 order by x offset 3 rows);
X          
-----------
4          
5          

2 rows selected
ij&amp;gt; (select * from t1 order by x offset 3 rows) fetch next 1 row only;
X          
-----------
1          

1 row selected
ij&amp;gt; (select * from t1 order by x offset 100 rows) offset 0 rows;
X          
-----------
1          
2          
3          
4          
5          

5 rows selected
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first SELECT statement returns the expected result with the patch.&lt;/p&gt;

&lt;p&gt;The second SELECT statement should have returned 4, not 1, I think. Looks like &lt;tt&gt;offset = null&lt;/tt&gt; gets pushed from the &lt;tt&gt;CursorNode&lt;/tt&gt; and removes the OFFSET clause from the subquery.&lt;/p&gt;

&lt;p&gt;The third SELECT statement should have returned empty results. Seems like OFFSET 0 ROWS is pushed from the top-level query and overwrites the OFFSET 100 ROWS clause in the subquery.&lt;/p&gt;</comment>
                            <comment id="13797871" author="dagw" created="Thu, 17 Oct 2013 14:14:18 +0100"  >&lt;p&gt;Ha! That&apos;s a weird syntax; is this legal SQL I wonder?&lt;/p&gt;</comment>
                            <comment id="13797933" author="dagw" created="Thu, 17 Oct 2013 15:21:03 +0100"  >&lt;p&gt;The following code failed with an assert failure. It&apos;s a similar unexpected push down for&lt;br/&gt;
ORDER BY:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(select * from t1 order by a,b fetch first 1 rows only) order by a,b desc
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;AssertFailure&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testDerby6378(org.apache.derbyTesting.functionTests.tests.lang.OffsetFetchNextTest)java.sql.SQLException: Java exception: &apos;ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:331)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2395)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:691)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:147)
	at org.apache.derbyTesting.functionTests.tests.lang.OffsetFetchNextTest.testDerby6378(OffsetFetchNextTest.java:663)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at singlederbyjunittest.SingleDerbyJunitTest.main(SingleDerbyJunitTest.java:22)
Caused by: java.sql.SQLException: Java exception: &apos;ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure&apos;.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
	... 34 more
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED
	at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)
	at org.apache.derby.impl.sql.compile.SelectNode.pushOrderByList(SelectNode.java:986)
	at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(CursorNode.java:591)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:459)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1109)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)
	... 27 more
2) testDerby6378(org.apache.derbyTesting.functionTests.tests.lang.OffsetFetchNextTest)java.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailure�ASSERT FAILED�XJ001.U
	at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:112)
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)
	at org.apache.derby.client.am.ClientStatement.executeQuery(ClientStatement.java:515)
	at org.apache.derbyTesting.functionTests.tests.lang.OffsetFetchNextTest.testDerby6378(OffsetFetchNextTest.java:663)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at singlederbyjunittest.SingleDerbyJunitTest.main(SingleDerbyJunitTest.java:22)
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailure�ASSERT FAILED�XJ001.U
	at org.apache.derby.client.am.ClientStatement.completeSqlca(ClientStatement.java:2119)
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(NetStatementReply.java:579)
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(NetStatementReply.java:145)
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(NetStatementReply.java:54)
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(StatementReply.java:41)
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(NetStatement.java:156)
	at org.apache.derby.client.am.ClientStatement.readPrepareDescribeOutput(ClientStatement.java:1703)
	at org.apache.derby.client.am.ClientStatement.flowExecute(ClientStatement.java:2392)
	at org.apache.derby.client.am.ClientStatement.executeQueryX(ClientStatement.java:521)
	at org.apache.derby.client.am.ClientStatement.executeQuery(ClientStatement.java:506)
	... 35 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13797963" author="knutanders" created="Thu, 17 Oct 2013 15:42:58 +0100"  >&lt;p&gt;I think it is legal syntax, actually. SQL:2011 says:&lt;/p&gt;

&lt;blockquote&gt;&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;query expression&amp;gt; ::=
[ &amp;lt;with clause&amp;gt; ] &amp;lt;query expression body&amp;gt;
[ &amp;lt;order by clause&amp;gt; ] [ &amp;lt;result offset clause&amp;gt; ] [ &amp;lt;fetch first clause&amp;gt; ]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;Which means you can have ORDER BY, OFFSET and FETCH on the top-level. Furthermore, you can follow the production rules for &amp;lt;query expression body&amp;gt; via &amp;lt;query term&amp;gt; to &amp;lt;query primary&amp;gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;query primary&amp;gt; ::=
&amp;lt;simple table&amp;gt;
| &amp;lt;left paren&amp;gt; &amp;lt;query expression body&amp;gt;
[ &amp;lt;order by clause&amp;gt; ] [ &amp;lt;result offset clause&amp;gt; ] [ &amp;lt;fetch first clause&amp;gt; ] &amp;lt;right
paren&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;Which shows that you can have the parenthesized expression with ORDER BY, OFFSET and FETCH in the &amp;lt;query expression body&amp;gt; of the top-level &amp;lt;query expression&amp;gt;. Looks like these expressions can also be nested indefinitely.&lt;/p&gt;</comment>
                            <comment id="13799110" author="dagw" created="Fri, 18 Oct 2013 14:56:48 +0100"  >&lt;p&gt;Yes, agreed. I just did the same analysis before reading your reply. So, if possible we should support these constructions.&lt;/p&gt;</comment>
                            <comment id="13799294" author="dagw" created="Fri, 18 Oct 2013 17:57:24 +0100"  >&lt;p&gt;I think a consequence of this is that we need to be able to push down any number of ORDER BY and fetch/offset clauses onto SELECT, VALUES, UNION and INTERSECT nodes, so these would need to handle/generate a stack of such clauses, the innermost being evaluated immediately after the SELECT, VALUES, UNION and SELECT operations, the topmost clause being evaluated last.&lt;/p&gt;
</comment>
                            <comment id="13802040" author="dagw" created="Tue, 22 Oct 2013 18:24:30 +0100"  >&lt;p&gt;Uploading a second patch for this issue, which introduces a stack mechanism for order by and offset/fetch clauses, factored out into ResultSetNode#QueryExpressionClause (nested class). From the javadoc for that class&lt;/p&gt;
&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;For ease of handling order by clause, offset clause and fetch first/next clauses in subclasses. Clauses on the same nesting level have the same index in the lists, so at any level, any of the lists&apos; elements may be empty. For example, (select * from t order by a fetch next 5 rows only) order by b would have&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;            obl[0] = &quot;order by a&quot;,
            offset[0] = null,
            fetchFirst[0] = &quot;next 5 rows&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;            obl[1] = &quot;order by b&quot;,
            offset[1] = null
            fetchFirst[1] = null
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When starting a new level, always remember to do a push() before adding clauses via setOffset(org.apache.derby.impl.sql.compile.ValueNode), setFetchFirst(org.apache.derby.impl.sql.compile.ValueNode), setOrderByList(org.apache.derby.impl.sql.compile.OrderByList) and setHasJDBCLimitClause(java.lang.Boolean).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Added tests to OrderByAndOffsetFetchInSubqueries in #testDerby6378, running regressions.&lt;/p&gt;</comment>
                            <comment id="13802140" author="dagw" created="Tue, 22 Oct 2013 20:04:26 +0100"  >&lt;p&gt;Uploading version #3 of the patch, the regressions revealed a couple of typos. Some other small improvements. Rerunning regressions.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;Update: regressions passed&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13806679" author="knutanders" created="Mon, 28 Oct 2013 10:36:53 +0000"  >&lt;p&gt;Thanks, Dag. The approach in the #3 patch looks good to me.&lt;/p&gt;

&lt;p&gt;Some comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would be good to add a sentence to the javadoc comments of pushOrderBy() and pushOffsetFetchFirst() about the requirement to call pushQueryExpressionSuffix() first.&lt;/li&gt;
	&lt;li&gt;The &quot;test is necessary&quot; comment in CursorNode is a bit cryptic.&lt;/li&gt;
	&lt;li&gt;RSN.pushQueryExpressionSuffix() could have a javadoc comment saying what it does (currently it only says who should override it).&lt;/li&gt;
	&lt;li&gt;RSN.pushQueryExpressionSuffix() could be made package-private (its siblings pushOrderByList() and pushOffsetFetchFirst() already are).&lt;/li&gt;
	&lt;li&gt;QueryExpressionClauses does not reference its parent instance, so it may be declared static. Since the class is package-private, its methods are effectively non-public, so it might be clearer not to declare them with the &quot;public&quot; modifier.&lt;/li&gt;
	&lt;li&gt;QueryExpressionClauses.hasOffsetFetchFirst() could access the offset and fetchFirst fields directly without going through the getter methods and thereby avoid creating temporary array objects.&lt;/li&gt;
	&lt;li&gt;Code such as &lt;tt&gt;qec.getFetchFirsts()[i] = (ValueNode)fetchFirst.accept&amp;#40;v&amp;#41;;&lt;/tt&gt; looks a bit suspicious, since getFetchFirsts() returns a fresh array, so the assignment will only be performed on an array that is immediately eligible for gc. (Similar code exists for getOrderByLists() and getOffsets() too.) Was it supposed to update the QEC&apos;s ArrayList instead?&lt;/li&gt;
	&lt;li&gt;All calls to getFetchFirsts() and friends seem to look at only one element of the returned array and throw the rest of the array away. We might change these getters to take the level as an argument and return a single node instead. Then we don&apos;t need the temporary arrays.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13806712" author="dagw" created="Mon, 28 Oct 2013 12:18:11 +0000"  >&lt;p&gt;Thanks for having a look at this, Knut. These seems like good improvements; I&apos;ll roll a new patch. And, yes, the visitor code is broken (I had changed the underlying data structure from array without updating that modification access).&lt;/p&gt;</comment>
                            <comment id="13807166" author="dagw" created="Mon, 28 Oct 2013 20:00:51 +0000"  >&lt;p&gt;Uploading revision #4 of the patch; regressions passed. It believe it addresses Knut&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="13807192" author="jira-bot" created="Mon, 28 Oct 2013 20:37:35 +0000"  >&lt;p&gt;Commit 1536507 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1536507&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1536507&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6378&quot; title=&quot;OFFSET/FETCH NEXT ignored when query is enclosed in parentheses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6378&quot;&gt;&lt;del&gt;DERBY-6378&lt;/del&gt;&lt;/a&gt; OFFSET/FETCH NEXT ignored when query is enclosed in parentheses&lt;/p&gt;

&lt;p&gt;Patch derby-6378-4.&lt;/p&gt;

&lt;p&gt;To address the required generality of several layers of nested&lt;br/&gt;
multiple clauses allowed by SQL, this patch introduces a stack&lt;br/&gt;
mechanism for order by and offset/fetch clauses, factored out into&lt;br/&gt;
ResultSetNode#QueryExpressionClause (nested class). From the javadoc&lt;br/&gt;
for that class:&lt;/p&gt;

&lt;p&gt;For ease of handling order by clause, offset clause and fetch&lt;br/&gt;
first/next clauses in subclasses. Clauses on the same nesting level&lt;br/&gt;
have the same index in the lists, so at any level, any of the lists&apos;&lt;br/&gt;
elements may be empty. For example, (select * from t order by a fetch&lt;br/&gt;
next 5 rows only) order by b would have&lt;/p&gt;

&lt;p&gt;            obl&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = &quot;order by a&quot;,&lt;br/&gt;
            offset&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = null,&lt;br/&gt;
            fetchFirst&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = &quot;next 5 rows&quot;&lt;br/&gt;
and&lt;br/&gt;
            obl&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; = &quot;order by b&quot;,&lt;br/&gt;
            offset&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; = null&lt;br/&gt;
            fetchFirst&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; = null&lt;/p&gt;

&lt;p&gt;When starting a new level, always remember to do a push() before&lt;br/&gt;
adding clauses via&lt;br/&gt;
setOffset(org.apache.derby.impl.sql.compile.ValueNode),&lt;br/&gt;
setFetchFirst(org.apache.derby.impl.sql.compile.ValueNode),&lt;br/&gt;
setOrderByList(org.apache.derby.impl.sql.compile.OrderByList) and&lt;br/&gt;
setHasJDBCLimitClause(java.lang.Boolean).&lt;/p&gt;

&lt;p&gt;Added tests to OrderByAndOffsetFetchInSubqueries in #testDerby6378,&lt;br/&gt;
running regressions.&lt;/p&gt;</comment>
                            <comment id="13808601" author="myrna" created="Wed, 30 Oct 2013 00:01:31 +0000"  >&lt;p&gt;In one of my environments, I now see the following javadoc warning:&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; D:\svnnightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\compile\ResultSetNode.java:1973: warning - Tag @link: can&apos;t find QueryExpressionClauses in org.apache.derby.impl.sql.compile.ResultSetNode&lt;/p&gt;

&lt;p&gt;In another environment I do not see this warning show up, and I&apos;m not sure it&apos;s worth while checking the differences; as QueryExpressionClauses is an internal class, should this be something like &apos;@link QueryExpressionClauses#QueryExpressionClauses&apos; ?&lt;/p&gt;</comment>
                            <comment id="13810650" author="jira-bot" created="Thu, 31 Oct 2013 20:14:44 +0000"  >&lt;p&gt;Commit 1537618 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1537618&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1537618&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6378&quot; title=&quot;OFFSET/FETCH NEXT ignored when query is enclosed in parentheses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6378&quot;&gt;&lt;del&gt;DERBY-6378&lt;/del&gt;&lt;/a&gt; OFFSET/FETCH NEXT ignored when query is enclosed in parentheses&lt;/p&gt;

&lt;p&gt;Javadoc fix.&lt;/p&gt;</comment>
                            <comment id="13923282" author="myrna" created="Fri, 7 Mar 2014 00:00:57 +0000"  >&lt;p&gt;I tried a merge to see how easy it would be to backport this, but this is not a simple fix, and I am getting conflicts which appear to be caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt; and so I&apos;d say this is not suitable for backport.&lt;br/&gt;
Dag, do you agree?&lt;/p&gt;</comment>
                            <comment id="13925870" author="myrna" created="Mon, 10 Mar 2014 16:37:21 +0000"  >&lt;p&gt;I went ahead and marked this as backport reject for 10.10 (and older); the backport shows a lot of conflicts because of other changes and it seems more work than the issue warrants to try to rework the same fix for older branches.&lt;/p&gt;</comment>
                            <comment id="13926346" author="dagw" created="Mon, 10 Mar 2014 22:27:38 +0000"  >&lt;p&gt;Myrna, I agree it&apos;s a corner case, so backporting may not be crucial. The conflicts should be resolvable though: I don&apos;t think there is any fundamental reason for them other than the simplifications introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13929974" author="myrna" created="Tue, 11 Mar 2014 05:37:31 +0000"  >&lt;p&gt;I tried to do an elaborate manual backport of the 5 nodes which had conflicts (ResultSetNode, SelectNode, UnionNode, RowResultSetNode, SetOperatorNode and InterSectOrExceptNode) which was entertaining. &lt;br/&gt;
I&apos;m attaching a patch of the diff.&lt;/p&gt;

&lt;p&gt;But in the end it doesn&apos;t compile - initially with errors like:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\derby\10.10\java\engine\org\apache\derby\impl\sql\compile\IntersectOrExceptNode.java:341: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : method getNode(int,org.apache.derby.impl.sql.compile.ResultSetNode,org.apache.derby.impl.sql.compile.ResultColumnList,org.apache.derby.impl.sql.compile.ValueNode,org.apache.derby.impl.sql.compile.ValueNode,boolean,org.apache.derby.iapi.services.context.ContextManager)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.derby.iapi.sql.compile.NodeFactory&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                 treeTop = (ResultSetNode)getNodeFactory().getNode(&lt;/p&gt;

&lt;p&gt;If I then hit ant all again, it goes on to complain about the parser:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\derby\10.10\generated\java\org\apache\derby\impl\sql\compile\SQLParser.java:5265: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : class ParseException&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: class org.apache.derby.impl.sql.compile.SQLParser&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;   final public int multiplicativeOperator() throws ParseException, StandardException {&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                                    ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 100 errors&lt;/p&gt;

&lt;p&gt;So, I&apos;m giving up on this after all/again.&lt;/p&gt;</comment>
                            <comment id="14284817" author="myrna" created="Wed, 21 Jan 2015 00:23:32 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12633859" name="DERBY-3678_bp1010fail.diff" size="76248" author="myrna" created="Tue, 11 Mar 2014 05:37:31 +0000"/>
                            <attachment id="12608781" name="derby-6378-1.diff" size="2126" author="dagw" created="Wed, 16 Oct 2013 20:15:33 +0100"/>
                            <attachment id="12609687" name="derby-6378-2.diff" size="81349" author="dagw" created="Tue, 22 Oct 2013 18:30:55 +0100"/>
                            <attachment id="12609686" name="derby-6378-2.status" size="1526" author="dagw" created="Tue, 22 Oct 2013 18:30:55 +0100"/>
                            <attachment id="12609706" name="derby-6378-3.diff" size="81825" author="dagw" created="Tue, 22 Oct 2013 20:04:26 +0100"/>
                            <attachment id="12609707" name="derby-6378-3.status" size="1526" author="dagw" created="Tue, 22 Oct 2013 20:04:26 +0100"/>
                            <attachment id="12610636" name="derby-6378-4.diff" size="84233" author="dagw" created="Mon, 28 Oct 2013 20:00:51 +0000"/>
                            <attachment id="12610637" name="derby-6378-4.status" size="1526" author="dagw" created="Mon, 28 Oct 2013 20:00:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 16 Oct 2013 02:02:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353514</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hziskn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353806</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>