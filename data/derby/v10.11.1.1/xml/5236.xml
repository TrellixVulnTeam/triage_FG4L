<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:28:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5236/DERBY-5236.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5236] Client driver silently truncates strings that exceed 32KB</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5236</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Can be seen with this JUnit test case that retrieves a VARCHAR value with 20000 characters. With the client driver, the string is truncated to 10900 characters (32700 bytes when encoded in UTF-8).&lt;/p&gt;

&lt;p&gt;    public void testLongColumn() throws SQLException &lt;/p&gt;
{
        PreparedStatement ps = prepareStatement(
                &quot;values cast(? as varchar(20000))&quot;);

        char[] chars = new char[20000];
        Arrays.fill(chars, &apos;\u4e10&apos;);
        String str = new String(chars);

        ps.setString(1, str);
        JDBC.assertSingleValueResultSet(ps.executeQuery(), str);
    }</description>
                <environment></environment>
        <key id="12507507">DERBY-5236</key>
            <summary>Client driver silently truncates strings that exceed 32KB</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 May 2011 16:54:38 +0100</created>
                <updated>Wed, 15 Jan 2014 13:36:39 +0000</updated>
                            <resolved>Mon, 12 Sep 2011 12:34:18 +0100</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13034840" author="knutanders" created="Tue, 17 May 2011 17:07:20 +0100"  >&lt;p&gt;The attached patch adds a regression test case for the bug. The test case isn&apos;t enabled in any suites yet. Committed revision 1104365.&lt;/p&gt;

&lt;p&gt;The test case passes with the embedded driver, and fails like this with the client driver:&lt;/p&gt;

&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) testLongColumn(org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5236Test)junit.framework.AssertionFailedError: Column value mismatch @ column &apos;1&apos;, row 1:&lt;br/&gt;
    Expected: &amp;gt;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;(...)&amp;lt;&lt;br/&gt;
    Found:    &amp;gt;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;&#19984;(...)&amp;lt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1213)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1125)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1012)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:935)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:892)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:850)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(JDBC.java:835)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5236Test.testLongColumn(Derby5236Test.java:57)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;</comment>
                            <comment id="13034855" author="rhillegas" created="Tue, 17 May 2011 17:26:37 +0100"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5235&quot; title=&quot;Remove the artificial limit on the length of VARCHAR values, allowing them to be java.lang.Integer.MAX_VALUE long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5235&quot;&gt;DERBY-5235&lt;/a&gt; since Knut discovered this wrong-results bug as part of the discussion on that issue.&lt;/p&gt;</comment>
                            <comment id="13039110" author="knutanders" created="Wed, 25 May 2011 14:19:50 +0100"  >&lt;p&gt;DDMWriter.writeLDString() truncates the string down to LONGVARCHAR_MAX_LEN bytes (not characters). I tried to change it to just send the full string, regardless of its length (see the attached patch), and that made the repro pass. (I haven&apos;t run any other tests.)&lt;/p&gt;

&lt;p&gt;At the location where DRDAConnThread calls writeLDString(), there is a comment about the truncation:&lt;/p&gt;

&lt;p&gt;					//WriteLDString and generate warning if truncated&lt;br/&gt;
					// which will be picked up by checkWarning()&lt;br/&gt;
					writer.writeLDString(val.toString(), index);&lt;/p&gt;

&lt;p&gt;But there is no code that actually generates the warning if the string is truncated.&lt;/p&gt;</comment>
                            <comment id="13039597" author="knutanders" created="Thu, 26 May 2011 09:59:39 +0100"  >&lt;p&gt;All the regression tests pass with the patch, but I don&apos;t think it&apos;s the correct solution. At least not a complete solution.&lt;/p&gt;

&lt;p&gt;The patch does make the repro pass, but that repro uses a string that&apos;s only 20000 characters and needs 60000 bytes in UTF-8. But since a VARCHAR may contain up to ~32K characters, it may need as much as 96KB when represented in UTF-8. But writeLDString() uses a two-byte length field, so it can only be used for strings that take up to 64KB. If I change the repro to use a 25000 character string that takes 75000 bytes, it still fails.&lt;/p&gt;</comment>
                            <comment id="13058601" author="kmarsden" created="Fri, 1 Jul 2011 16:36:47 +0100"  >&lt;p&gt;Does it make sense  to check in the partial solution to trunk and 10.8?  It seems like a significant improvement.&lt;br/&gt;
We could resolve this issue and then open a new one for Strings  larger than the one handled by this patch.&lt;/p&gt;
</comment>
                            <comment id="13058611" author="knutanders" created="Fri, 1 Jul 2011 16:53:17 +0100"  >&lt;p&gt;I think we could do that. I&apos;ll refresh the patch, as I think in its current form it might have made some existing bad behaviour slightly worse. That is, if we get an overflow in the length field, the string will be truncated even more than it was before. Perhaps we should raise an exception in case of an overflow? Sounds better than silently returning the wrong result, IMO.&lt;/p&gt;

&lt;p&gt;By the way, I did a quick check of the DRDA spec back when I looked into this issue, and I found some indications that this length field was supposed to contain the number of characters, not the number of bytes. If that turns out to be the case, the two-byte field should be sufficient for all VARCHARs with the current ~32K limit. Whether we can change the meaning of the length field without breaking client/server compatibility is another question...&lt;/p&gt;</comment>
                            <comment id="13058615" author="kmarsden" created="Fri, 1 Jul 2011 17:06:26 +0100"  >&lt;p&gt;Thank you for working on this. I agree it is better to raise an exception for overflow.&lt;br/&gt;
It is surprising to me that it would be the number of characters. I thought it was all about how many bytes to read. I&apos;ll have to take a look.&lt;/p&gt;</comment>
                            <comment id="13059027" author="knutanders" created="Sat, 2 Jul 2011 15:14:50 +0100"  >&lt;p&gt;Right, I only did a quick search for how length was represented various places, and I haven&apos;t yet done any research into what&apos;s the relevant definition for the length field in this particular method. One example I found was in V4, vol 2, p 48:&lt;/p&gt;

&lt;p&gt;Field Length&lt;br/&gt;
    format: signed binary integer&lt;br/&gt;
    units: characters for DBCS; else bytes&lt;br/&gt;
    value:&lt;br/&gt;
        0 - 32767 for SBCS and mixed SBCS/DBCS&lt;br/&gt;
        0 - 16383 for DBCS&lt;/p&gt;

&lt;p&gt;I believe SBCS is single-byte character set and DBCS is double-byte character set. Now, UTF-8 is a variable-width encoding and therefore neither SBCS nor DBCS, strictly speaking.&lt;/p&gt;</comment>
                            <comment id="13061242" author="knutanders" created="Thu, 7 Jul 2011 13:12:50 +0100"  >&lt;p&gt;An alternative to failing when the column is too long, is to add a&lt;br/&gt;
data truncation warning to the result set. The javadoc for&lt;br/&gt;
java.sql.DataTruncation says:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/sql/DataTruncation.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/6/docs/api/java/sql/DataTruncation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; An exception thrown as a DataTruncation exception (on writes) or&lt;br/&gt;
&amp;gt; reported as a DataTruncation warning (on reads) when a data values is&lt;br/&gt;
&amp;gt; unexpectedly truncated for reasons other than its having execeeded&lt;br/&gt;
&amp;gt; MaxFieldSize.&lt;/p&gt;

&lt;p&gt;That description seems to match the scenario in this bug report. And&lt;br/&gt;
it also looks like that was what the code intended to do (it had&lt;br/&gt;
comments about adding a warning, just not the code to do it).&lt;/p&gt;</comment>
                            <comment id="13061269" author="dagw" created="Thu, 7 Jul 2011 14:01:27 +0100"  >&lt;p&gt;+1 to error  or warning when this happens. Since client behavior is different than the embedded driver here, I&apos;d personally prefer an error since warnings are typically not checked, but I agree DataTruncation warning is reasonable. I wish there were a way to get the entire string over the protocol, though...&lt;/p&gt;</comment>
                            <comment id="13068988" author="knutanders" created="Thu, 21 Jul 2011 15:03:55 +0100"  >&lt;p&gt;I previously mentioned that strings are still truncated when they are longer than 64 KB (because of overflow in the length field). But it also turns out that strings that are just below 64 KB cause a StringIndexOutOfBoundsException on the client. So the current state is:&lt;/p&gt;

&lt;p&gt;0-65514 bytes: OK&lt;br/&gt;
65515 - 65535 bytes: StringIndexOutOfBoundsException&lt;br/&gt;
&amp;gt;=65536: Truncated result&lt;/p&gt;

&lt;p&gt;I&apos;m looking into why the client has a limit at 65514 bytes.&lt;/p&gt;</comment>
                            <comment id="13090350" author="kmarsden" created="Wed, 24 Aug 2011 18:18:22 +0100"  >&lt;p&gt;Knut said So the current state is:&lt;/p&gt;

&lt;p&gt;0-65514 bytes: OK&lt;br/&gt;
65515 - 65535 bytes: StringIndexOutOfBoundsException&lt;br/&gt;
&amp;gt;=65536: Truncated result &lt;/p&gt;

&lt;p&gt;Is that the current state of trunk or the current state of the patch? It seems it would be good to get these improvements into 10.8.2 for the release as the extension to 65514 would be a good improvement even if the StringIndexOutOfBounds is not understood.&lt;/p&gt;</comment>
                            <comment id="13090978" author="knutanders" created="Thu, 25 Aug 2011 13:36:33 +0100"  >&lt;p&gt;The StringIndexOutOfBoundsException only happens with the patch (and I said the wrong number, it fails on 65510 bytes). The current state of trunk is to send only 32700 bytes, so it&apos;ll never attempt to send strings of that size.&lt;/p&gt;

&lt;p&gt;I had a look in a debugger, and it looks like 65509 bytes completely fills two DSSs, and the client never sees the last byte in the 65510-byte string. I haven&apos;t figured out yet if the server doesn&apos;t send the byte or if it&apos;s the client that just doesn&apos;t fetch it.&lt;/p&gt;</comment>
                            <comment id="13091723" author="knutanders" created="Fri, 26 Aug 2011 13:04:30 +0100"  >&lt;p&gt;The problem with strings that take 65510 bytes is indeed related to the string being split in three parts on transfer from the server. The client already knows that values can be split, and handles that by sending a CNTQRY command to the server when it detects that it needs more data, but it implicitly assumes that each value is only split once. That assumption is valid currently, since we never send strings long enough to span three blocks. This changed with the server-side fix to stop truncating the strings, and the client stops sending CNTQRY commands too early, and there&apos;s not enough data in the receive buffer to construct the string when ResultSet.getString() is called.&lt;/p&gt;

&lt;p&gt;Just changing an &quot;if&quot; statement to a &quot;while&quot; statement in NetCursor.skipFdocaBytes() appears to be enough to get the client to send CNTQRY commands until the entire value has been retreived. This pattern is repeated in many methods in NetCursor. I think only skipFdocaBytes() will ever need to send more than one CNTQRY, even when the truncation is fixed on the server, but for completeness and consistency I factored out the common code into a helper method so that all of them now call CNTQRY in a loop. See the attached patch d5236-1a-client-fetch-complete.diff.&lt;/p&gt;

&lt;p&gt;With the d5236-1a patch in combination with the write-full-string.diff patch, strings up to 65535 (2^16-1) bytes can be fetched. Larger strings will still cause problems because they overflow the two-byte length field.&lt;/p&gt;</comment>
                            <comment id="13091748" author="knutanders" created="Fri, 26 Aug 2011 13:52:25 +0100"  >&lt;p&gt;All the regression tests ran cleanly with the d5236-1a patch. I think that patch can go in separately before we go on with the server-side fix, so I&apos;m setting the patch available flag.&lt;/p&gt;</comment>
                            <comment id="13091782" author="bryanpendleton" created="Fri, 26 Aug 2011 15:05:27 +0100"  >&lt;p&gt;I remember wondering about this years ago when I looked at the DRDA code. Your approach&lt;br/&gt;
seems simple and reasonable, and I am pleased with the reduction in code by extracting all&lt;br/&gt;
that common logic to a single place. Nice work!&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13093554" author="knutanders" created="Tue, 30 Aug 2011 09:36:49 +0100"  >&lt;p&gt;Thanks for the quick review, Bryan!&lt;/p&gt;

&lt;p&gt;Committed revision 1163131.&lt;/p&gt;</comment>
                            <comment id="13093637" author="knutanders" created="Tue, 30 Aug 2011 11:44:22 +0100"  >&lt;p&gt;Attached is a patch that improves the &quot;write-full-string.diff&quot; patch in the following ways:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Truncate long strings to 65535 bytes to avoid overflow in the length field (which caused protocol errors)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Align with character boundaries when truncating so that the server doesn&apos;t send invalid UTF-8 sequences to the client&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add more test cases and move them into the existing derbynet.PrepareStatementTest&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch still doesn&apos;t make the queries fail or add any warnings if the strings are truncated, but I think it can go in separately since it allows more strings to be sent untruncated, and those that are still truncated are sent as longer values than currently.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13093650" author="knutanders" created="Tue, 30 Aug 2011 12:01:42 +0100"  >&lt;p&gt;Marking patch available.&lt;/p&gt;

&lt;p&gt;In a later patch, we may want to change the truncation logic so that it only allows these longer strings if the client has the fix that makes it able to handle them. Otherwise, the StringIndexOutOfBoundsException might show up in mixed version environments. Falling back to the old behaviour (truncating to 32700 bytes) would probably be good enough if the server detects that the client is too old.&lt;/p&gt;</comment>
                            <comment id="13095932" author="knutanders" created="Fri, 2 Sep 2011 13:00:52 +0100"  >&lt;p&gt;Committed revision 1164495.&lt;/p&gt;</comment>
                            <comment id="13100269" author="knutanders" created="Thu, 8 Sep 2011 13:46:22 +0100"  >&lt;p&gt;I don&apos;t see a quick solution to get the entire string sent to the client, so I&apos;m adding a patch that adds a java.sql.DataTruncation warning to the result instead for now.&lt;/p&gt;

&lt;p&gt;The server adds warnings before the row data. However, we don&apos;t know until after we&apos;ve tried writing the data whether we had to truncate any values. Because of this, I&apos;ve changed the server code to save the position of the SQLCAGRP section in which the warnings are written, and if it detects that data was truncated, it goes back and overwrites it with the data truncation warnings later.&lt;/p&gt;

&lt;p&gt;On the client side, some changes were needed for it to correctly deserialize a java.sql.DataTruncation object. It wouldn&apos;t break without these changes, but it would create an ordinary SQLWarning instead of DataTruncation. The DataTruncation object has fields so that the caller can find out exactly which column was truncated, and by how much.&lt;/p&gt;

&lt;p&gt;Unfortunately, the server isn&apos;t capable of sending chained warnings yet, so in the case of multiple columns being truncated, we only get a warning for the first one. But that&apos;s another bug...&lt;/p&gt;

&lt;p&gt;The patch also makes the test verify that the proper DataTruncation warnings are received, and a test case that verifies that it also works as expected with output parameters in stored procedures has been added.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13101034" author="knutanders" created="Fri, 9 Sep 2011 07:48:30 +0100"  >&lt;p&gt;Committed revision 1167017.&lt;/p&gt;</comment>
                            <comment id="13101085" author="knutanders" created="Fri, 9 Sep 2011 10:24:45 +0100"  >&lt;p&gt;Attaching a new patch that disables the server-side fix when talking to old clients, since those clients may get a StringIndexOutOfBoundsException if they receive longer strings, and also because they don&apos;t know exactly how to handle java.sql.DataTruncation warnings.&lt;/p&gt;

&lt;p&gt;I&apos;ve manually verified that old clients (tested 10.1.2.1 and 10.8.1.2) receive shorter strings (just like they did before this issue) instead of failing with a StringIndexOutOfBoundsException for these longer strings. Running the full regression test suite now.&lt;/p&gt;

&lt;p&gt;The fix is only disabled on releases prior to 10.8.2, on the assumption that the fix gets into the upcoming 10.8.2 release. If it doesn&apos;t we&apos;ll have to change that logic on trunk.&lt;/p&gt;</comment>
                            <comment id="13101156" author="knutanders" created="Fri, 9 Sep 2011 13:38:09 +0100"  >&lt;p&gt;The tests didn&apos;t pass because the AppRequester used to check the client version wasn&apos;t available when the requests came from NetworkServerControl, which caused NPEs. Will try to come up with a new patch.&lt;/p&gt;</comment>
                            <comment id="13101600" author="kmarsden" created="Fri, 9 Sep 2011 23:08:36 +0100"  >&lt;p&gt;I guess this means it will be hard to backport this change to older branches without making a new release where we can bump the third digit. I have some vague recollection of a DRDA maintenance version that could be bumped for such a fix.&lt;/p&gt;
</comment>
                            <comment id="13101999" author="knutanders" created="Sat, 10 Sep 2011 07:56:34 +0100"  >&lt;p&gt;Yes, I think that&apos;s right. But since the fix only reduces the original problem (strings are still truncated, just not as much as before), I&apos;m not sure it&apos;s worthwhile putting too much effort into backporting it far back.&lt;/p&gt;</comment>
                            <comment id="13102004" author="knutanders" created="Sat, 10 Sep 2011 08:06:54 +0100"  >&lt;p&gt;Attached is an updated patch (4b) which handles the case where&lt;br/&gt;
writeLDString() sends data to a NetworkServerControl client and the&lt;br/&gt;
AppRequester is null. In that case, we don&apos;t need to disable the fix,&lt;br/&gt;
since the StringIndexOutOfBoundsException we&apos;re trying to avoid, only&lt;br/&gt;
happens in the client JDBC driver.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with this version of the patch.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 1167470.&lt;/p&gt;</comment>
                            <comment id="13102105" author="knutanders" created="Sat, 10 Sep 2011 19:45:00 +0100"  >&lt;p&gt;It turns out I misunderstood the third parameter to AppRequester.greaterThanOrEqualTo(). It&apos;s not the third digit of the version number, it&apos;s actually the DRDA maintenance version Kathey mentioned. The product id sent by the 10.8.1.2 client is DNC10080, and that won&apos;t change when we bump the version number. So it looks like it&apos;s the DRDA maintenance version and not the Derby version number we should bump when backporting.&lt;/p&gt;</comment>
                            <comment id="13102552" author="knutanders" created="Mon, 12 Sep 2011 12:15:57 +0100"  >&lt;p&gt;Attaching d5236-5a-fix-version-check.diff which fixes the version check in AppRequester.supportsLongerLDStrings() to check for the DRDA maintenance version (1) instead of the third digit in the version number (2).&lt;/p&gt;

&lt;p&gt;Committed revision 1169692.&lt;/p&gt;</comment>
                            <comment id="13102562" author="knutanders" created="Mon, 12 Sep 2011 12:34:18 +0100"  >&lt;p&gt;I&apos;ve merged all the fixes to the 10.8 branch and bumped the DRDA maintenance version on the branch. Committed revision 1169698.&lt;/p&gt;

&lt;p&gt;Marking the issue as resolved.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12507490">DERBY-5235</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12506420">DERBY-5220</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12688576">DERBY-6456</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12491770" name="d5236-1a-client-fetch-complete.diff" size="14672" author="knutanders" created="Fri, 26 Aug 2011 13:04:30 +0100"/>
                            <attachment id="12492224" name="d5236-2a-longer-strings.diff" size="10171" author="knutanders" created="Tue, 30 Aug 2011 11:44:22 +0100"/>
                            <attachment id="12493578" name="d5236-3a-warning.diff" size="26521" author="knutanders" created="Thu, 8 Sep 2011 13:46:22 +0100"/>
                            <attachment id="12493753" name="d5236-4a-client-compatibility.diff" size="3854" author="knutanders" created="Fri, 9 Sep 2011 10:24:45 +0100"/>
                            <attachment id="12493902" name="d5236-4b.diff" size="3716" author="knutanders" created="Sat, 10 Sep 2011 08:06:53 +0100"/>
                            <attachment id="12494018" name="d5236-5a-fix-version-check.diff" size="1326" author="knutanders" created="Mon, 12 Sep 2011 12:15:57 +0100"/>
                            <attachment id="12479468" name="repro.diff" size="2639" author="knutanders" created="Tue, 17 May 2011 17:07:20 +0100"/>
                            <attachment id="12480408" name="write-full-string.diff" size="2660" author="knutanders" created="Wed, 25 May 2011 14:19:50 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 17 May 2011 16:26:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24726</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0au7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35574</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>