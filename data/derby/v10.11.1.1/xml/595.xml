<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-595/DERBY-595.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-595] Using derby.language.logStatementText=true can mask certain exceptions and lead to incorrect behavior in some cases</title>
                <link>https://issues.apache.org/jira/browse/DERBY-595</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Using derby.language.logStatementText=true can mask certain exceptions and lead to incorrect behavior.&lt;/p&gt;

&lt;p&gt;I observed this with tests using streams, where if valid (expected) exceptions are raised when DVD.getString() is called, the exception gets eaten up when this property is set. &lt;/p&gt;

&lt;p&gt;See &lt;br/&gt;
1)in GenericParameter.toString()&lt;br/&gt;
try&lt;br/&gt;
{&lt;br/&gt;
return value.getString();&lt;br/&gt;
}&lt;br/&gt;
catch (StandardException se)&lt;br/&gt;
{&lt;br/&gt;
return &quot;unexpected exception from getString() - &quot; + se;&lt;br/&gt;
}&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;2)in GenericPreparedStatement.execute(), where pvs.toString() is called for the parameters.&lt;br/&gt;
________&lt;/p&gt;

&lt;p&gt;Reproduction:   Run the test jdbcapi/resultsetStream.java , with derby.language.logStatementText=true and  expected error exceptions wont be thrown for the error cases.  &lt;/p&gt;


&lt;p&gt;I looked at the tests that use streams , only the store/streamingColumn.java  uses derby.language.logStatementText=true. I&apos;ll file another bug to resolve this test.&lt;/p&gt;</description>
                <environment>all</environment>
        <key id="12317500">DERBY-595</key>
            <summary>Using derby.language.logStatementText=true can mask certain exceptions and lead to incorrect behavior in some cases</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mayureshnirhali">Mayuresh Nirhali</assignee>
                                    <reporter username="skambha">Sunitha Kambhampati</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Oct 2005 12:26:30 +0100</created>
                <updated>Mon, 5 Jul 2010 18:12:49 +0100</updated>
                            <resolved>Wed, 25 Apr 2007 11:58:55 +0100</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.2.1.6</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12461512" author="bryanpendleton" created="Sat, 30 Dec 2006 16:48:59 +0000"  >&lt;p&gt;I notice that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1693&quot; title=&quot;Out of Memory Error with derby.language.logStatementText=true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1693&quot;&gt;&lt;del&gt;DERBY-1693&lt;/del&gt;&lt;/a&gt; has added a getTraceString() method to DataValueDescriptor.&lt;/p&gt;

&lt;p&gt;Does that make it easier to fix this bug? Could we, for example, arrange it so that&lt;br/&gt;
exceptions from getTraceString were safe to swallow in the logging code, but exceptions&lt;br/&gt;
from getString would still show through to the user?&lt;/p&gt;</comment>
                            <comment id="12479234" author="mayureshnirhali" created="Thu, 8 Mar 2007 06:02:59 +0000"  >&lt;p&gt;After some debugging, I found that the call to getString returns the Exception as a String and, more importantly, leaves the DVD in inconsistent state. Here is why.&lt;/p&gt;

&lt;p&gt;The logging code calls the getTraceString to identify the data length. In case of Streams, such objects are fully read when getString is called populating a DVD object. So, after the statement logging is done, the object is treated as DVD itself and not a stream, So the expected exception would not occur. &lt;br/&gt;
Now, currently In the current statement logging code, the exception is returned as a String so it is thrown properly to the user.&lt;/p&gt;

&lt;p&gt;For the specific case of input stream having too few bytes (less bytes actually on stream than expected), the DVD that is populated is not in consistent state. This is because the java.io.DataInputStream will read until input data is available, end of file is detected, or an exception occurs. As the bytes available are fewer than expected the DIStream will believe that there are some more bytes to be read even after reading the available bytes. This next read call returns -1 and puts the DVD in invalid state.&lt;/p&gt;

&lt;p&gt;So, eating up the Exception in the logging code does not seem to work.&lt;/p&gt;

&lt;p&gt;Only 2 options come to my mind, at this point.&lt;/p&gt;

&lt;p&gt;1. Handle the Exception properly in the statement logging code, so that any errors in the stream object will be properly notified to the user.&lt;br/&gt;
2. Defer full read of stream until statement logging is complete. During statement logging only provide expected length of the stream. This behavior will be exactly same as the behavior when logStatementText is FALSE in terms of when the stream is fully read.&lt;/p&gt;

&lt;p&gt;I would appreciate experts&apos; opinion here... and please let me know if there is any other way this bug can be fixed.&lt;/p&gt;

&lt;p&gt;TIA&lt;br/&gt;
Mayuresh&lt;/p&gt;</comment>
                            <comment id="12479280" author="kristwaa" created="Thu, 8 Mar 2007 09:52:32 +0000"  >&lt;p&gt;Hello Mayuresh,&lt;/p&gt;

&lt;p&gt;I had a look at this. It seems &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1693&quot; title=&quot;Out of Memory Error with derby.language.logStatementText=true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1693&quot;&gt;&lt;del&gt;DERBY-1693&lt;/del&gt;&lt;/a&gt; fixed this problem for &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob, but not for other data types. The fix was too specific/narrow (sorry &apos;bout that...).&lt;/p&gt;

&lt;p&gt;One way to fix this, would be to implement a mechanism similar to what is found in SQLClob.getTraceString for all data types that can be set from a stream (or where draining the stream would cause problems). I do not know if there is a single point of interception for this, or if we must implement the method in each appropriate data type. It might also depend on whether we want to include the name of the data type in the trace string.&lt;/p&gt;

&lt;p&gt;I would suggest having a look at the type hierarchy in &apos;iapi.types&apos; and see if a clear solution stands out. &lt;br/&gt;
The current intent of getTraceString for streamable types, is to not drain the stream if the data is represented as a stream. Obtaining length information in this case is not feasible. One must also consider if the data itself should be printed to the log, or only the length. For Clob,  &quot;CLOB(32453)&quot; is printed if the data is materialized, &quot;CLOB(some.kind.of.stream.Class@15f4a7f)&quot; otherwise.&lt;/p&gt;

&lt;p&gt;When I applied a temporary fix to SQLLongVarbit, &apos;resultsetStream&apos; passed with statement logging enabled.&lt;/p&gt;</comment>
                            <comment id="12486316" author="mayureshnirhali" created="Tue, 3 Apr 2007 12:32:54 +0100"  >&lt;p&gt;Thanks Kristian.&lt;/p&gt;

&lt;p&gt;I agree with you that implementing getTraceString will solve the problem of not draining out the stream when logStatementText is true.&lt;/p&gt;

&lt;p&gt;On my investigation to identify which SQL types will be affected by this, I found out that jdbcapi/CharacterStreamsTest also fails due to same problem with logStatementText=true. This particular test uses 4 types, SQLChar, SQLVarChar, SQLLongVarchar, SQLClob and the test failed for 3 types (except SQLClob due to fix for 1683). I tried moving the getTraceString implementation from SQLClob to SQLChar and the test passed.&lt;/p&gt;

&lt;p&gt;Currently, I am running all the tests with logStatementText = true (on a fresh sandbox). This will present a clear and complete picture of 595.&lt;/p&gt;</comment>
                            <comment id="12487277" author="mayureshnirhali" created="Fri, 6 Apr 2007 18:00:32 +0100"  >&lt;p&gt;Attaching patch for review with this comment.&lt;/p&gt;

&lt;p&gt;The implementation of getTraceString methods has been moved from SQLBlob, SQLClob to SQLBinary, SQLChar respectively with minor modifications. This will ensure that Character/Binary stream associated with subtypes of SQLBinary and SQLChar will not be drained in logStatementText=true mode.&lt;/p&gt;

&lt;p&gt;As for the text written in the log, the class name of the SQLType will be printed along with stream object. I would like to know if printing the class name is okay ??&lt;/p&gt;

&lt;p&gt;Also, as mentioned in 1693, if the Object does not have stream associated with it, only the classname and its length is printed in log. This behavior will remain as is even after this fix. This will now be applicable to almost all the types, so I would like to know specific comments on this from someone who is more familiar with this part of the code.&lt;/p&gt;

&lt;p&gt;The failing tests, jdbcapi/resultsetStream.java, lang/CharasterStreamsTest now pass with logStatementText=true. The Repro for 1693 also passes.&lt;br/&gt;
Derbyall and Suites.All ran clean.&lt;/p&gt;</comment>
                            <comment id="12488036" author="kristwaa" created="Wed, 11 Apr 2007 10:50:50 +0100"  >&lt;p&gt;I had a look at the patch and have a few comments.&lt;/p&gt;

&lt;p&gt;I am not sure I like the class name for the column type. This might be okay for developers, but for users reading the log they provide little use. Could we use the SQL type instead?&lt;br/&gt;
We could also consider another representation for the streams, but I can&apos;t think of any good ones except for possibly removing the package names. The memory location could be useful during debugging.&lt;/p&gt;

&lt;p&gt;Here is an example of the log when inserting a CLOB with a stream and a string of length eight into a VARCHAR column:&lt;br/&gt;
2007-04-11 09:20:08.854 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 3400), (SESSIONID = 0), (DATABASE = ReproDerby1693DB), (DRDAID = null), Executing prepared statement: insert into clobs values &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; :End prepared statement with 1 parameters begin parameter #1: class org.apache.derby.iapi.types.SQLClob(org.apache.derby.iapi.types.ReaderToUTF8Stream@19ce060) :end parameter&lt;/p&gt;

&lt;p&gt;2007-04-11 09:20:14.587 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 5010), (SESSIONID = 0), (DATABASE = ReproDerby1693DB), (DRDAID = null), Executing prepared statement: insert into varchars values &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; :End prepared statement with 1 parameters begin parameter #1: class org.apache.derby.iapi.types.SQLVarchar:Length=8 :end parameter&lt;/p&gt;

&lt;p&gt;Next, I like to see the actual values in the log for types where this is &quot;suitable&quot;. The problem is defining what is suitable. Any VARCHAR up to the maximum length? If the length of the string is less than N? Just for string types, not binary?&lt;br/&gt;
I believe the patch do change the behavior. Where strings (CHAR, VARCHAR) were printed earlier, there will now be a class name and a length.&lt;/p&gt;

&lt;p&gt;I hope someone else can express their opinions on these issues.&lt;/p&gt;


&lt;p&gt;Last, there are a few whitespace issues I&apos;d like to see fixed, but I believe they can be handled on commit if necessary. I like to have a blank line between methods (last line of previous method and the JavaDoc/signature of the next), and also spaces in string constructions. You may ignore these as my personal likings, but I mention them because I mean they improve the readability of the code.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12489458" author="mayureshnirhali" created="Tue, 17 Apr 2007 17:50:54 +0100"  >&lt;p&gt;Kristian, I have tried to address your comments in this next patch.&lt;/p&gt;

&lt;p&gt;Instead of classname, I am now using getTypeName(). This seems to be the best choice which I should have got to sooner. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Also, the getTraceString method in SQLChar is not final now, it will call toString method so that the actual values for char/varchar are populated. I am keeping the getTraceString() method from SQLClob as per the derby1693 fix, but with minor changes.&lt;/p&gt;

&lt;p&gt;I have ran the tests which showed problems and also 1693 repro case.&lt;br/&gt;
I will run the regression tests tomorrow.&lt;/p&gt;</comment>
                            <comment id="12489677" author="mayureshnirhali" created="Wed, 18 Apr 2007 11:01:26 +0100"  >&lt;p&gt;derbyall and junit tests passed.&lt;/p&gt;

&lt;p&gt;Patch is ready for review!!&lt;/p&gt;</comment>
                            <comment id="12489697" author="kristwaa" created="Wed, 18 Apr 2007 12:26:30 +0100"  >&lt;p&gt;Committed &apos;derby595_v2.diff&apos; to trunk with revision 529983.&lt;/p&gt;

&lt;p&gt;Ran suites.All (JDK 1.5) without failures. Running derbyall and suites.All with JDK 1.6 as we speak.&lt;br/&gt;
Will report back when done and look at merging the fix with the 10.2 branch.&lt;/p&gt;</comment>
                            <comment id="12494202" author="kristwaa" created="Tue, 8 May 2007 08:01:49 +0100"  >&lt;p&gt;Merged fix (&apos;derby595_v2.diff&apos;) to 10.2 with revision 536104.&lt;br/&gt;
Ran derbyall without failures (1.6).&lt;/p&gt;</comment>
                            <comment id="12871095" author="kristwaa" created="Tue, 25 May 2010 12:18:44 +0100"  >&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12355088" name="derby595.diff" size="3815" author="mayureshnirhali" created="Fri, 6 Apr 2007 18:00:26 +0100"/>
                            <attachment id="12355703" name="derby595_v2.diff" size="3219" author="mayureshnirhali" created="Tue, 17 Apr 2007 17:50:54 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 30 Dec 2006 16:48:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22037</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ps7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37995</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>