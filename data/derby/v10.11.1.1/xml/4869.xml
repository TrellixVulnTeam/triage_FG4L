<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:30:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4869/DERBY-4869.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4869] Implement JDBC 4.1, the api increment introduced by Java 7</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4869</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is a master issue logged to track our work implementing JDBC 4.1, the changes to the java.sql and javax.sql packages introduced by Java 7.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12478490">DERBY-4869</key>
            <summary>Implement JDBC 4.1, the api increment introduced by Java 7</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Oct 2010 20:29:45 +0100</created>
                <updated>Fri, 14 Jun 2013 17:55:55 +0100</updated>
                            <resolved>Fri, 14 Jun 2013 17:55:48 +0100</resolved>
                                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12925519" author="rhillegas" created="Wed, 27 Oct 2010 20:32:49 +0100"  >&lt;p&gt;Attaching JDBC_4.1_Changes.html, a page describing what we need to do to implement JDBC 4.1. The spec for these changes is contained in the Java 7 javadoc, which can be browsed here: &lt;a href=&quot;http://download.java.net/jdk7/docs/api/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/jdk7/docs/api/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12926286" author="knutanders" created="Fri, 29 Oct 2010 15:03:00 +0100"  >&lt;p&gt;I ran suites.All with 1.7.0-ea-b115 and saw that the following tests failed because they couldn&apos;t find implementations of all the methods in the java.sql.* interfaces:&lt;/p&gt;

&lt;p&gt;org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest&lt;/p&gt;</comment>
                            <comment id="12932002" author="knutanders" created="Mon, 15 Nov 2010 07:41:10 +0000"  >&lt;p&gt;Attaching a patch that disables the failing tests on JDK 7 for now, so that we won&apos;t see all this noise when testing the 10.7.1 release candidate. The tests should be re-enabled when we have implemented the missing methods.&lt;/p&gt;

&lt;p&gt;Committed revision 1035164.&lt;/p&gt;</comment>
                            <comment id="12972200" author="rhillegas" created="Thu, 16 Dec 2010 20:32:48 +0000"  >&lt;p&gt;The following wiki page tracks the progress of this master task: &lt;a href=&quot;http://wiki.apache.org/db-derby/JdbcFourOne&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JdbcFourOne&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12973738" author="rhillegas" created="Tue, 21 Dec 2010 16:26:35 +0000"  >&lt;p&gt;Attaching derby-4869-01-ac-rs-getObject.diff. This adds new JDBC 4.1 methods to ResultSet. I added a test case for these methods to the JDBC 4.0 test of ResultSets. That test runs cleanly for me on Java 6. I haven&apos;t run the test on Java 7 yet because the Linux installers for JDK 7 don&apos;t work. But I will look for another platform to test-drive these changes on Java 7. I am running the full regression test suites now.&lt;/p&gt;

&lt;p&gt;Adds the following new methods to Derby&apos;s JDBC 4.0 implementations of ResultSet:&lt;/p&gt;

&lt;p&gt;    public  &amp;lt;T&amp;gt; T getObject( int columnIndex, Class&amp;lt;T&amp;gt; type ) throws SQLException;&lt;br/&gt;
    public  &amp;lt;T&amp;gt; T getObject( String columnName, Class&amp;lt;T&amp;gt; type ) throws SQLException;&lt;/p&gt;

&lt;p&gt;The implementations simply switch on the Class type and forward calls to the appropriate pre-existing getters.&lt;/p&gt;

&lt;p&gt;I added a test for these methods to the test for JDBC 4.0 ResultSets. To simplify the code, I wrapped the Derby ResultSets in a class which exposes the new methods. We may want to revisit this test after Java 7 goes GA and we are allowed to ship a derbyTesting.jar which is built with the Java 7 compiler.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java&lt;/p&gt;

&lt;p&gt;Added new forwarding methods to the embedded ResultSet.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/ResultSet.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetResultSet40.java&lt;/p&gt;

&lt;p&gt;Added new forwarding methods to the network ResultSet.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java&lt;/p&gt;

&lt;p&gt;Added a test for the new ResultSet methods.&lt;/p&gt;</comment>
                            <comment id="12973807" author="rhillegas" created="Tue, 21 Dec 2010 18:32:42 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-01-ac-rs-getObject.diff.&lt;/p&gt;</comment>
                            <comment id="12973856" author="rhillegas" created="Tue, 21 Dec 2010 20:05:41 +0000"  >&lt;p&gt;ResultSetTest passed cleanly for me on JDK 7 (build 122) on 64-bit x86 Solaris.&lt;/p&gt;</comment>
                            <comment id="12973872" author="rhillegas" created="Tue, 21 Dec 2010 20:44:38 +0000"  >&lt;p&gt;Attaching derby-4869-02-aa-cs-ps-addBatch.diff. This patch enforces the spec clarification that PreparedStatement.addBatch(String) and CallableStatement.addBatch(String) should raise exceptions. I will run regression tests.&lt;/p&gt;

&lt;p&gt;This behavior was already enforced by the embedded driver. This patch makes the network driver enforce this behavior. In addition, a test case is added to verify this behavior.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/PreparedStatement.java&lt;/p&gt;

&lt;p&gt;Make the network driver conform to the spec.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java&lt;/p&gt;

&lt;p&gt;Add a test case verifying the correct behavior.&lt;/p&gt;</comment>
                            <comment id="12973976" author="rhillegas" created="Tue, 21 Dec 2010 23:34:22 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-02-aa-cs-ps-addBatch.diff except for the testPing heisenbug.&lt;/p&gt;</comment>
                            <comment id="12974148" author="knutanders" created="Wed, 22 Dec 2010 11:02:00 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I looked at the getObject() patch. Some possible improvements:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;For byte[], instead of doing a Class.forName(&quot;[B&quot;), I think you&lt;br/&gt;
  could check (type.isArray() &amp;amp;&amp;amp; type.getComponentType().equals(byte.class)),&lt;br/&gt;
  which would remove the need for catching/ignoring ClassNotFoundException.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Would it make sense to try getObject() unconditionally if no other&lt;br/&gt;
  types match? Then the following code would work (I think) for most&lt;br/&gt;
  numeric column types:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Number num = rs.getObject(&quot;VALUE&quot;, Number.class);&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The API javadoc explicitly mentions that type==null should result in&lt;br/&gt;
  an SQLException. For completeness, add a test case for that?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The API javadoc for Boolean, Byte, Short, Integer, Long, Float and&lt;br/&gt;
  Double recommend the use of valueOf() instead of the constructor, as&lt;br/&gt;
  valueOf() &quot;is likely to yield significantly better space and time&lt;br/&gt;
  performance&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If the type conversion is not supported, an&lt;br/&gt;
  SQLFeatureNotSupportedException is thrown. As far as I understand&lt;br/&gt;
  the javadoc, this exception is reserved for the situation where the&lt;br/&gt;
  method is not supported by the JDBC driver, which is not the case&lt;br/&gt;
  here.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The client implementation makes closeCloseFilterInputStream()&lt;br/&gt;
  non-private in order to call it from the new method. I think all the&lt;br/&gt;
  getters called from the new getObject() method will call&lt;br/&gt;
  closeCloseFilterInputStream(), so this code is probably not&lt;br/&gt;
  necessary.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12974158" author="knutanders" created="Wed, 22 Dec 2010 11:24:12 +0000"  >&lt;p&gt;The addBatch() patch looks fine to me. One minor nit: The test could use the helper methods in prepareStatement() and prepareCall() in BaseJDBCTestCase. That would remove the need for calls to getConnection() and close().&lt;/p&gt;</comment>
                            <comment id="12974199" author="rhillegas" created="Wed, 22 Dec 2010 13:35:55 +0000"  >&lt;p&gt;Thanks for the quick review of the addBatch() patch, Knut. I polished the test as you suggested. Committed a second rev of the patch, derby-4869-02-ab-cs-ps-addBatch.diff, at subversion revision 1051890.&lt;/p&gt;</comment>
                            <comment id="12974232" author="rhillegas" created="Wed, 22 Dec 2010 15:08:49 +0000"  >&lt;p&gt;Thanks for the great suggestions on the getObject() patch, Knut. And thanks to Lance for the additional responses on derby-dev. I have incorporated your feedback in a new version of the patch, derby-4869-01-ad-rs-getObject.diff. Committed at subversion revision 1051937. I notice that I have introduced a new warning in the build. I will fix that.&lt;/p&gt;</comment>
                            <comment id="12974242" author="rhillegas" created="Wed, 22 Dec 2010 15:22:18 +0000"  >&lt;p&gt;Compiler warning suppressed at subversion revision 1051947.&lt;/p&gt;</comment>
                            <comment id="12974250" author="knutanders" created="Wed, 22 Dec 2010 15:53:07 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;In the latest getObject() patch, SQLExceptions are created by calling the SQLException constructor directly. Shouldn&apos;t we use SQLExceptionFactory to get the correct subclass of SQLException?&lt;/p&gt;</comment>
                            <comment id="12974253" author="knutanders" created="Wed, 22 Dec 2010 15:55:22 +0000"  >&lt;p&gt;Not only to get the correct subclass, by the way, but also to get the correct message text.&lt;/p&gt;</comment>
                            <comment id="12974352" author="rhillegas" created="Wed, 22 Dec 2010 19:37:18 +0000"  >&lt;p&gt;Thanks for spotting that howler, Knut. It turns out that the error handling was equally goofy in the embedded case. Attaching derby-4869-03-aa-rs-getObject-errorCleanup.diff. This patch corrects the error messages returned when coercion errors occur in ResultSet.getObject(int,Class). Committed at subversion revision 1052044.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetResultSet40.java&lt;/p&gt;</comment>
                            <comment id="12974384" author="knutanders" created="Wed, 22 Dec 2010 20:55:26 +0000"  >&lt;p&gt;In the last patch, NetResultSet40 preserves the ClassCastException whereas EmbedResultSet40 doesn&apos;t. Any reason for this difference?&lt;/p&gt;

&lt;p&gt;The following code...&lt;/p&gt;

&lt;p&gt;+                Object  result = getObject( columnIndex );&lt;br/&gt;
+                if ( !type.isInstance( result ) ) &lt;/p&gt;
{ throw new ClassCastException( type.getName() ); }
&lt;p&gt;+                return (T) result;&lt;/p&gt;

&lt;p&gt;...could be simplified to:&lt;/p&gt;

&lt;p&gt;    return type.cast(getObject(columnIndex));&lt;/p&gt;

&lt;p&gt;The latter variant will also give a clearer error message (example: &quot;Cannot cast java.lang.Boolean to java.lang.Integer&quot; vs just &quot;java.lang.Integer&quot;).&lt;/p&gt;</comment>
                            <comment id="12974395" author="rhillegas" created="Wed, 22 Dec 2010 21:12:47 +0000"  >&lt;p&gt;I will try the simplification you recommend.&lt;/p&gt;

&lt;p&gt;In the network case, it was easy to pass the error from the getter to the factory method which makes the SQLException. In the embedded case, this would involve adding some new overloads of the corresponding factory methods. Those overloads didn&apos;t seem justified by this use case: the information in the swallowed ClassCastException seemed pretty vacuous.&lt;/p&gt;</comment>
                            <comment id="12974448" author="knutanders" created="Thu, 23 Dec 2010 00:16:11 +0000"  >&lt;p&gt;Thanks, Rick. I agree that the ClassCastException doesn&apos;t provide much additional information here.&lt;/p&gt;

&lt;p&gt;One more issue: The catch clause in NetResultSet40 now catches all exceptions, not only ClassCastException, which means it will handle all errors in the getters as conversion errors. Take this example:&lt;/p&gt;

&lt;p&gt;        ResultSet rs = s.executeQuery(&quot;values cast (&apos;abc&apos; as clob)&quot;);&lt;br/&gt;
        while (rs.next()) &lt;/p&gt;
{
            rs.getObject(1, Clob.class);
            rs.getObject(1, Clob.class);
        }

&lt;p&gt;Here, the problem is that getClob() is called twice on the same column, but the error reported is:&lt;/p&gt;

&lt;p&gt;java.sql.SQLDataException: An attempt was made to get a data value of type &apos;java.sql.Clob&apos; from a data value of type &apos;CLOB&apos;.&lt;/p&gt;

&lt;p&gt;The real problem is also reported, but that&apos;s hidden further down in the exception chain:&lt;/p&gt;

&lt;p&gt;...&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: An attempt was made to get a data value of type &apos;java.sql.Clob&apos; from a data value of type &apos;CLOB&apos;.&lt;br/&gt;
...&lt;br/&gt;
Caused by: java.sql.SQLException: Stream or LOB value cannot be retrieved more than once&lt;br/&gt;
...&lt;/p&gt;</comment>
                            <comment id="12974474" author="rhillegas" created="Thu, 23 Dec 2010 02:10:37 +0000"  >&lt;p&gt;Thanks for pointing that out, Knut. I guess that means that I&apos;ll have to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4949&quot; title=&quot;Backward, confusing error message when you use the wrong ResultSet.getXXX() method in the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4949&quot;&gt;&lt;del&gt;DERBY-4949&lt;/del&gt;&lt;/a&gt; before I declare victory on this one.&lt;/p&gt;</comment>
                            <comment id="12974623" author="rhillegas" created="Thu, 23 Dec 2010 13:52:09 +0000"  >&lt;p&gt;Attaching the cast simplification suggested by Knut: derby-4869-04-aa-rs-getObject-simplification.diff. Committed at subversion revision 1052268.&lt;/p&gt;</comment>
                            <comment id="12974631" author="rhillegas" created="Thu, 23 Dec 2010 14:38:23 +0000"  >&lt;p&gt;Attaching derby-4869-05-aa-rs-getObject-exception.diff, which removes the over-aggressive exception swallowing in NetResultSet40.getObject(int,Class). The coercion errors now look goofy, so I will go tackle derby-4949. Committed at subversion revision 1052271.&lt;/p&gt;</comment>
                            <comment id="12974736" author="rhillegas" created="Thu, 23 Dec 2010 21:02:43 +0000"  >&lt;p&gt;Attaching derby-4869-06-aa-cs-getObject.diff. This is a preliminary patch for adding the new getObject() overloads to our CallableStatement implementations. The production code is ready for review. However, I am still writing the tests.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/engine/build.xml&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement40.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement40.java&lt;/p&gt;

&lt;p&gt;Changes to embedded driver.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/LogicalCallableStatement40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/CallableStatement.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/CallableStatement40.java&lt;/p&gt;

&lt;p&gt;Changes to network driver.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Test.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ResultSetTest.java&lt;/p&gt;

&lt;p&gt;Tests. I am trying to use the same verification code on ResultSet.getObject() and CallableStatement.getObject().&lt;/p&gt;</comment>
                            <comment id="12976799" author="rhillegas" created="Mon, 3 Jan 2011 16:19:19 +0000"  >&lt;p&gt;Attaching the second rev of the CallableStatement.getObject() patch: derby-4869-06-ab-cs-getObject.diff. This version adds regression tests for the new behavior. I am running the regression suite now.&lt;/p&gt;

&lt;p&gt;Touches the same files as the previous rev.&lt;/p&gt;</comment>
                            <comment id="12976869" author="rhillegas" created="Mon, 3 Jan 2011 18:50:22 +0000"  >&lt;p&gt;Tests passed cleanly for me except for the heisenbug in NetworkServerMBeanTest. Committed derby-4869-06-ab-cs-getObject.diff at subversion revision 1054706.&lt;/p&gt;</comment>
                            <comment id="12976957" author="rhillegas" created="Mon, 3 Jan 2011 21:03:37 +0000"  >&lt;p&gt;Attaching derby-4869-07-aa-timedisplacement.diff, an attempt to correct what seems to be a time-displacement bug in the regression test for CallableStatement.getObject(). Committed at subversion revision 1054746.&lt;/p&gt;</comment>
                            <comment id="12976964" author="knutanders" created="Mon, 3 Jan 2011 21:27:34 +0000"  >&lt;p&gt;The getObject() methods don&apos;t seem to handle NULL values correctly. Take this code:&lt;/p&gt;

&lt;p&gt;        ResultSet rs = s.executeQuery(&quot;values cast(null as integer)&quot;);&lt;br/&gt;
        rs.next();&lt;br/&gt;
        System.out.println(rs.getObject(1, Integer.class));&lt;/p&gt;

&lt;p&gt;It prints &quot;0&quot;, but I think it should have printed &quot;null&quot;.&lt;/p&gt;</comment>
                            <comment id="12976970" author="knutanders" created="Mon, 3 Jan 2011 21:38:57 +0000"  >&lt;p&gt;All the new getObject() methods are annotated with @SuppressWarnings(&quot;unchecked&quot;), presumably because they contain unchecked casts like this:&lt;/p&gt;

&lt;p&gt;            if ( String.class.equals( type ) ) &lt;/p&gt;
{ return (T) getString( parameterIndex ); }

&lt;p&gt;I&apos;m wondering if it might be worthwhile to restructure the methods slightly and make the casts checked, so that we don&apos;t need to suppress warnings. Something like this would silence the warnings, I think:&lt;/p&gt;

&lt;p&gt;Object ret;&lt;/p&gt;

&lt;p&gt;if (String.class.equals(type)) &lt;/p&gt;
{
    ret = getString(parameterIndex);
}
&lt;p&gt; else if (Integer.class.equals(type)) &lt;/p&gt;
{
    ret = getInt(parameterIndex);
}
&lt;p&gt; else if (....) &lt;/p&gt;
{
    ....
}
&lt;p&gt; else &lt;/p&gt;
{
    ret = getObject(parameterIndex);
}

&lt;p&gt;return type.cast(ret);&lt;/p&gt;</comment>
                            <comment id="12977173" author="knutanders" created="Tue, 4 Jan 2011 08:54:03 +0000"  >&lt;p&gt;The tests still fail on this side of the Atlantic, so I took the liberty of adding some code to the tests to calculate the expected timestamps in a way that takes the current time zone into account. The tests ran cleanly for me with these changes. I also changed the timezone on my machine to PST and ran jdbc4.ResultSetTest/jdbc4.CallableStatementTest with no failures.&lt;/p&gt;

&lt;p&gt;Committed timezone.diff to trunk with revision 1054933.&lt;/p&gt;</comment>
                            <comment id="12977271" author="rhillegas" created="Tue, 4 Jan 2011 13:27:17 +0000"  >&lt;p&gt;Thanks for the comments and the test-tweaking, Knut. I agree that the treatment of nulls looks wrong. I will try your suggestion for suppressing the suppression annotation too.&lt;/p&gt;</comment>
                            <comment id="12978320" author="rhillegas" created="Thu, 6 Jan 2011 13:51:02 +0000"  >&lt;p&gt;Attaching derby-4869-08-ac-nullHandling.diff. This is very close to the patch which I just committed at subversion revision 1055872. I made a couple additional changes to CallableStatementTest to remove some cruft and re-enable a test which I had disabled while working on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4959&quot; title=&quot;NPE in network server trying to return a null LOB as a procedure output arg&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4959&quot;&gt;&lt;del&gt;DERBY-4959&lt;/del&gt;&lt;/a&gt;. Now that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4958&quot; title=&quot;Wrapper types not recognized when resolving procedures with OUT arguments.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4958&quot;&gt;&lt;del&gt;DERBY-4958&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4959&quot; title=&quot;NPE in network server trying to return a null LOB as a procedure output arg&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4959&quot;&gt;&lt;del&gt;DERBY-4959&lt;/del&gt;&lt;/a&gt; are fixed, I am able to cleanly run new test cases which verify the following fixes which Knut suggested:&lt;/p&gt;

&lt;p&gt;1) Fix the handling of null values in the new getObject() overloads.&lt;/p&gt;

&lt;p&gt;2) Rework the getObject() logic to remove the @SuppressWarnings annotation.&lt;/p&gt;</comment>
                            <comment id="12980000" author="knutanders" created="Tue, 11 Jan 2011 08:34:27 +0000"  >&lt;p&gt;The null-handling patch looks fine to me. Thanks, Rick!&lt;/p&gt;

&lt;p&gt;Two tiny nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the catch-all case where we call getObject(int), we now have a redundant call to Class.cast()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Since there&apos;s only one place where we do a cast now, the try/catch that ignores ClassCastException could be narrowed down to enclose that single line only. And probably a little comment explaining why we ignore the exception is in order. Alternatively, the intention of the code may be clearer if we remove the try/catch altogether and instead do an explicit check, something like&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if (retval == null || type.isInstance(retval)) &lt;/p&gt;
{
        return type.cast(retval);
    }</comment>
                            <comment id="12980186" author="rhillegas" created="Tue, 11 Jan 2011 17:05:19 +0000"  >&lt;p&gt;Thanks for those suggestions, Knut. I am attaching derby-4869-exp-01-aa-noTryCatch.diff. This patch eliminates the try-catch block. With this patch in place, the new getObject() overload no longer catches cast exceptions raised by the forwarded getXXX() methods. This causes an error in CallableStatementTest because getObject() raises a ClassCastException rather than the more informative type-mismatch error. I do not see that as an improvement. You are welcome to continue polishing this patch if you want to. Thanks.&lt;/p&gt;</comment>
                            <comment id="12980762" author="knutanders" created="Wed, 12 Jan 2011 15:51:21 +0000"  >&lt;p&gt;Thanks for trying it out, Rick. It sounds like a bug that a getXXX() method throws a ClassCastException instead of an SQLException, so I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4970&quot; title=&quot;ClassCastException from getBlob() on string parameter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4970&quot;&gt;&lt;del&gt;DERBY-4970&lt;/del&gt;&lt;/a&gt; to track it.&lt;/p&gt;</comment>
                            <comment id="12981200" author="knutanders" created="Thu, 13 Jan 2011 10:00:35 +0000"  >&lt;p&gt;Now that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4970&quot; title=&quot;ClassCastException from getBlob() on string parameter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4970&quot;&gt;&lt;del&gt;DERBY-4970&lt;/del&gt;&lt;/a&gt; has been fixed I don&apos;t see any failures with the noTryCatch patch, so I think it would be fine to check it in. Thanks.&lt;/p&gt;</comment>
                            <comment id="12981249" author="rhillegas" created="Thu, 13 Jan 2011 13:45:25 +0000"  >&lt;p&gt;Thanks, Knut. ResultSetTest and CallableStatementTest pass cleanly now. Committed derby-4869-exp-01-aa-noTryCatch.diff at subversion revision 1058554.&lt;/p&gt;</comment>
                            <comment id="12981458" author="rhillegas" created="Thu, 13 Jan 2011 20:20:04 +0000"  >&lt;p&gt;JDBC 4.1 adds a new method to Connecton: abort(Executor). This method attempts to terminate the Connection and release its resources. If a SecurityManager is in place, the new method expects that SQLPermission( &quot;callAbort&quot; ) ) will have been granted to the abort() method. I believe that the motivation for this permission is to prevent an ordinary user of a pooled connection from accidentally destroying the underlying physical connection to the database, since that is one of the consequences of calling abort(). Only privileged code would be allowed to intervene and abort runaway connections.&lt;/p&gt;

&lt;p&gt;I think that we should document how to grant this permission, probably in the JDBC section of the Reference Guide.&lt;/p&gt;

&lt;p&gt;I also think that our default and template security policies should not grant this permission to any of the Derby code domains. My sense right now is that the permission should be granted to an outer application code domain only accessed by superusers.&lt;/p&gt;

&lt;p&gt;Other or concurring opinions?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12981889" author="rhillegas" created="Fri, 14 Jan 2011 19:30:26 +0000"  >&lt;p&gt;All righty then. My previous comment was a little muddled. This is the shape of something that actually works:&lt;/p&gt;

&lt;p&gt;1) SQLPermission( &quot;callAbort&quot; ) must be granted to derby.jar and to derbyclient.jar. Note, however, that Derby&apos;s implementations of abort(Executor) are not wrapped in doPrivileged blocks. That means that outer (application) code domains are NOT absolved of the need to be granted this permission also. The application designer controls who can call this method by only granting this permission to tools used by superusers.&lt;/p&gt;

&lt;p&gt;2) Our JDBC documentation in the Reference Guide should explain the need to grant this permission both to Derby and to the superuser tools.&lt;/p&gt;

&lt;p&gt;3) We will need to make similar statements in the Developer&apos;s Guide in the section titled &quot;Running Derby under a security manager&quot;.&lt;/p&gt;</comment>
                            <comment id="12981913" author="rhillegas" created="Fri, 14 Jan 2011 20:23:45 +0000"  >&lt;p&gt;Attaching derby-4869-09-ac-abort.diff. This is the first increment of support for Connection.abort(Executor). I will run regression tests.&lt;/p&gt;

&lt;p&gt;This patch adds the new abort() method to the JDBC 4.0 physical connections (EmbedConnection40 and NetConnection40). The abort method does the following:&lt;/p&gt;

&lt;p&gt;1) Checks for SQLPermission( &quot;callAbort&quot; ).&lt;/p&gt;

&lt;p&gt;2) Marks the physical connection as closed so that new work cannot start in it.&lt;/p&gt;

&lt;p&gt;3) Runs the rollback() and close() methods inside the Executor.&lt;/p&gt;

&lt;p&gt;This patch also includes a basic test of the physical connections in an environment which enjoys the correct SQLPermission.&lt;/p&gt;

&lt;p&gt;Follow-on patches should supply additional tests. In particular, the following areas should be explored:&lt;/p&gt;

&lt;p&gt;1) Security concerns. Exercise abort() when there is no SecurityManager and when there is a SecurityManager but the correct SQLPermission has not been granted to the caller.&lt;/p&gt;

&lt;p&gt;2) Calling abort() on pooled connections.&lt;/p&gt;

&lt;p&gt;3) Calling abort() on XA connections.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/Util.java&lt;/p&gt;

&lt;p&gt;Add abort() logic to the embedded physical connection.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/net/NetConnection40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Connection.java&lt;/p&gt;

&lt;p&gt;Add abort() logic to the network physical connection.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/LogicalConnection40.java&lt;/p&gt;

&lt;p&gt;Add abort() forwarding to the wrapper connections.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/drda/org/apache/derby/drda/server.policy&lt;br/&gt;
M      java/drda/org/apache/derby/drda/template.policy&lt;/p&gt;

&lt;p&gt;Add the appropriate new SQLPermission to Derby&apos;s policy files.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Conn.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/util/derby_tests.policy&lt;/p&gt;

&lt;p&gt;Basic test for abort().&lt;/p&gt;</comment>
                            <comment id="12983231" author="rhillegas" created="Tue, 18 Jan 2011 15:38:36 +0000"  >&lt;p&gt;Tests ran cleanly for me. Committed derby-4869-09-ac-abort.diff at subversion revision 1060422.&lt;/p&gt;</comment>
                            <comment id="12983271" author="knutanders" created="Tue, 18 Jan 2011 17:16:09 +0000"  >&lt;p&gt;With the public run() and beginAborting() methods, couldn&apos;t malicious code bypass the SQLPermission check by doing something like&lt;/p&gt;

&lt;p&gt;    ((EmbedConnection) conn).beginAborting();&lt;br/&gt;
    executor.execute((Runnable) conn);&lt;/p&gt;

&lt;p&gt;?&lt;/p&gt;</comment>
                            <comment id="12983277" author="rhillegas" created="Tue, 18 Jan 2011 17:24:03 +0000"  >&lt;p&gt;Thanks for noticing that Knut. I&apos;ll give some thought to hiding that behavior.&lt;/p&gt;</comment>
                            <comment id="12983309" author="rhillegas" created="Tue, 18 Jan 2011 18:29:05 +0000"  >&lt;p&gt;Attaching derby-4869-10-aa-abortSecurityTest.diff. This adds more tests for Connection.abort(Executor). Committed at subversion revision 1060509.&lt;/p&gt;

&lt;p&gt;1) Test that abort() works when there is no SecurityManager installed.&lt;/p&gt;

&lt;p&gt;2) Test that abort() fails when there is a SecurityManager but the correct permission has not been granted by the policy file.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A         java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java&lt;br/&gt;
M        java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java&lt;br/&gt;
M        java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/copyfiles.ant&lt;br/&gt;
A         java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/noAbortPermission.policy&lt;/p&gt;</comment>
                            <comment id="12983328" author="rhillegas" created="Tue, 18 Jan 2011 18:54:46 +0000"  >&lt;p&gt;Attaching derby-4869-11-aa-abortHidePrivates.diff. This is an attempt to address Knut&apos;s concerns about exposing dangerous behavior to applications. Committed at subversion revision 1060535.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetConnection40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Connection.java&lt;/p&gt;</comment>
                            <comment id="12983360" author="rhillegas" created="Tue, 18 Jan 2011 20:20:38 +0000"  >&lt;p&gt;Attaching derby-4869-12-aa-xaAndPooledAborts.diff. This patch adds tests for calling abort() on pooled and xa connections. Committed at subversion revision 1060557.&lt;/p&gt;

&lt;p&gt;The tests disclosed bugs in the forwarding of the abort() call. Those bugs are fixed here.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/LogicalConnection40.java&lt;/p&gt;

&lt;p&gt;Fixes the wrappers to check for the liveness of the physical connection before forwarding the abort() call.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;/p&gt;

&lt;p&gt;New tests for calling abort() on pooled and xa connections.&lt;/p&gt;</comment>
                            <comment id="12983373" author="rhillegas" created="Tue, 18 Jan 2011 20:51:52 +0000"  >&lt;p&gt;Attaching derby-4869-13-aa-xaAndPooledAbortsSecurityManager.diff. This patch adds pooled and xa connections to the tests of Connection.abort() with and without a SecurityManager. Committed at subversion revision 1060570.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/AbortTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Conn.java&lt;/p&gt;</comment>
                            <comment id="12984394" author="rhillegas" created="Thu, 20 Jan 2011 20:57:05 +0000"  >&lt;p&gt;Attaching derby-4869-14-ac-closeOnCompletion.diff. This implements the new JDBC 4.1 methods Statement.closeOnCompletion() and Statement.isCloseOnCompletion(). I will run regression tests.&lt;/p&gt;

&lt;p&gt;The patch takes advantage of the fact that the physical statements already keep pointers to their open ResultSets. Both physical statements already have a method which closes all of the dependent ResultSets before advancing to the next operation which creates ResultSets. The new closeOnCompletion logic simply follows the same roster of dependent objects. This might be brittle and worth encapsulating in an object which explicitly tracks dependencies. Or, that alternative approach might be seen as over-engineering the problem. I don&apos;t have strong religion on this point and welcome your opinions.&lt;/p&gt;

&lt;p&gt;I have written some basic regression tests for this functionality. The following areas could use more testing:&lt;/p&gt;

&lt;p&gt;1) Statements with generated keys.&lt;/p&gt;

&lt;p&gt;2) Situations in which mere navigation implicitly closes ResultSets.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;/p&gt;

&lt;p&gt;Changes to the embedded physical statement.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/EngineStatement.java&lt;/p&gt;

&lt;p&gt;Changes to the wrapped embedded statement.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/ResultSet.java&lt;/p&gt;

&lt;p&gt;Changes to the network physical statement.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/LogicalStatementEntity.java&lt;/p&gt;

&lt;p&gt;Changes to the wrapped network statement.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Wrapper41Statement.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java&lt;/p&gt;

&lt;p&gt;Basic tests.&lt;/p&gt;</comment>
                            <comment id="12984755" author="rhillegas" created="Fri, 21 Jan 2011 14:45:14 +0000"  >&lt;p&gt;The tests ran cleanly for me except for 3 errors. 2 of the errors were familiar heisenbugs in testPing and ManagementMBeanTest. The third error I have not seen before:&lt;/p&gt;

&lt;p&gt;2) testInvalidLDAPServerConnectionError(org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest)junit.framework.AssertionFailedError&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.testInvalidLDAPServerConnectionError(InvalidLDAPServerAuthenticationTest.java:122)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:110)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;This error seems very far away from the code I touched. The test ran cleanly when I ran it standalone. I am inclined to regard this as another heisenbug in the tests.&lt;/p&gt;

&lt;p&gt;Committed derby-4869-14-ac-closeOnCompletion.diff at subversion revision 1061824.&lt;/p&gt;</comment>
                            <comment id="12984822" author="rhillegas" created="Fri, 21 Jan 2011 17:28:24 +0000"  >&lt;p&gt;Attaching derby-4869-15-aa-autoGenKeys.diff. This patch fixes the handling of the autogenerated keys ResultSet for auto-completion of network Statements. I will run regression tests.&lt;/p&gt;

&lt;p&gt;One of the dependent ResultSets which a Statement can return is the ResultSet which describes the identity values generated while processing the statement. If the application has requested these values, then the Statement should not be auto-closed until the application has had a chance to inspect them. But when the ResultSet of generated values is closed, then the Statement should be cleaned up if it has requested closeOnCompletion().&lt;/p&gt;

&lt;p&gt;For network Statements, a separate dependent PreparedStatement is generated to help return these keys. I have some reservations about this approach. I think that the returned ResultSet of identity values will not have the correct Statement associated with it. I believe that the Statement returned by ResultSet.getStatement() should be the original, outer Statement. However, it looks like the Statement associated with this ResultSet is the special internal Statement cooked up to retrieve the identity values.&lt;/p&gt;

&lt;p&gt;I am not going to fix that oddity in this patch. But we may want to clean it up later.&lt;/p&gt;

&lt;p&gt;One consequence of this oddity is that closing the ResultSet of generated keys did not trigger the closing of the outer, original Statement. The fix was to make the network ResultSet track its attachment to the outer Statement. This makes the cleanup logic for the network ResultSet look more like the cleanup logic for the embedded ResultSet, which also tracks an outer statement.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/ResultSet.java&lt;/p&gt;

&lt;p&gt;Changes to make the ResultSet of generated keys track its attachment&lt;br/&gt;
to the original, outer Statement.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java&lt;/p&gt;

&lt;p&gt;Regression test to verify that closing the ResultSet of generated keys triggers Statement closure when closeOnCompletion() has been requested.&lt;/p&gt;</comment>
                            <comment id="12984887" author="rhillegas" created="Fri, 21 Jan 2011 19:32:27 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-15-aa-autoGenKeys.diff. Committed at subversion revision 1061977.&lt;/p&gt;</comment>
                            <comment id="12985729" author="rhillegas" created="Mon, 24 Jan 2011 15:13:05 +0000"  >&lt;p&gt;Attaching derby-4869-16-aa-clarifyStatementSpec.diff. This patch adds a test case to verify a spec clarification: an exception should be raised if a PreparedStatement or CallableStatement is used to compile SQL text. Committed at subversion revision 1062822.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/StatementJdbc20Test.java&lt;/p&gt;</comment>
                            <comment id="12985742" author="dagw" created="Mon, 24 Jan 2011 15:43:43 +0000"  >&lt;p&gt;Looked at the spec vs derby-4869-16-aa-clarifyStatementSpec.diff. Looks good to me. +1&lt;/p&gt;</comment>
                            <comment id="12985954" author="rhillegas" created="Mon, 24 Jan 2011 20:07:40 +0000"  >&lt;p&gt;Attaching derby-4869-17-aa-statementTimeoutException.diff. This patch makes query timeouts raise a SQLTimeoutException per the JDBC 4.1 spec clarification. I will run regression tests.&lt;/p&gt;

&lt;p&gt;The SQLExceptionFactories were updated to look for the timeout SQLState and wrap the timeout SQLState with a SQLTimeoutException.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/SQLExceptionFactory40.java&lt;/p&gt;

&lt;p&gt;JDBC 4.0 introduced SQLTimeoutException and other refined exceptions, which are supposed to be raised instead of plain SQLExceptions. Updated the factories which map SQLStates to refined exception classes.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTestSetup.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetQueryTimeoutTest.java&lt;/p&gt;

&lt;p&gt;Added a test case to verify that SQLTimeoutException is raised.&lt;/p&gt;</comment>
                            <comment id="12986398" author="rhillegas" created="Tue, 25 Jan 2011 14:24:52 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-17-aa-statementTimeoutException.diff except for Heisenbugs in testPing and InvalidLDAPServerAuthenticationTest. Committed at subversion revision 1063295.&lt;/p&gt;</comment>
                            <comment id="12986586" author="rhillegas" created="Tue, 25 Jan 2011 18:33:38 +0000"  >&lt;p&gt;Attaching derby-4869-18-aa-getSetSchema.diff. This patch implements the new JDBC 4.1 methods Connection.getSchema() and Connection.setSchema(). I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch takes advantage of existing shortcuts for getSchema() in both the embedded and network cases. The setSchema() method has more error paths so I opted for implementing it on top of the SQL layer. We may want to revisit this implementation if it causes a performance drag in the wild.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/EngineConnection.java&lt;/p&gt;

&lt;p&gt;Embedded implementation.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;


&lt;p&gt;M      java/client/org/apache/derby/client/am/Connection.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/LogicalConnection.java&lt;/p&gt;

&lt;p&gt;Network implementation.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Conn.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="12986669" author="rhillegas" created="Tue, 25 Jan 2011 20:27:45 +0000"  >&lt;p&gt;Tests passed cleanly for me derby-4869-18-aa-getSetSchema.diff except for the Heisenbug in InvalidLDAPServerAuthenticationTest.&lt;/p&gt;</comment>
                            <comment id="12987011" author="rhillegas" created="Wed, 26 Jan 2011 14:01:54 +0000"  >&lt;p&gt;Committed derby-4869-18-aa-getSetSchema.diff at subversion revision 1063723.&lt;/p&gt;</comment>
                            <comment id="12987026" author="knutanders" created="Wed, 26 Jan 2011 14:55:44 +0000"  >&lt;p&gt;On the client side, the connection has the current schema cached in most cases. Would it make sense to let the client version of setSchema() check the cached value if it exists and do nothing if the new schema is the same as the old one? The use case I&apos;m thinking about is applications that start each chunk of work with setting the schema.&lt;/p&gt;

&lt;p&gt;And some nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The try-finally-close code in the setSchema() methods could be simplified by moving the call to prepareStatement() out of the try block and up to the declaration of the ps variable. Then the ps could be closed unconditionally in the finally block.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The new methods are indented with a mix of tabs and blanks.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12987079" author="rhillegas" created="Wed, 26 Jan 2011 16:15:11 +0000"  >&lt;p&gt;Thanks, Knut. Those sound like good improvements to me. I will address them in a follow-on patch.&lt;/p&gt;</comment>
                            <comment id="12987086" author="rhillegas" created="Wed, 26 Jan 2011 16:46:04 +0000"  >&lt;p&gt;Attaching derby-4869-19-aa-getSetNetworkTimeout.diff. This patch provides stubs which raise SQLFeatureNotSupportedException for the optional Connection.getNetworkTimeout() and setNetworkTimeout() methods added by JDBC 4.1. I will run regression tests.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java&lt;/p&gt;

&lt;p&gt;Embedded stubs.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/net/NetConnection40.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/LogicalConnection40.java&lt;/p&gt;

&lt;p&gt;Network stubs.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Conn.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="12987156" author="rhillegas" created="Wed, 26 Jan 2011 18:45:37 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-19-aa-getSetNetworkTimeout.diff. Committed at subversion revision 1063822.&lt;/p&gt;</comment>
                            <comment id="12987166" author="rhillegas" created="Wed, 26 Jan 2011 19:04:08 +0000"  >&lt;p&gt;Attaching derby-4869-20-aa-setSchemaFastPath.diff. This adds the optimization Knut suggested: In the network case, don&apos;t bother trying to change the schema if session data is being cached and the old schema name is the same as the new name passed to Connection.setSchema(). Committed at subversion revision 1063831.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Connection.java&lt;/p&gt;</comment>
                            <comment id="12987720" author="rhillegas" created="Thu, 27 Jan 2011 19:51:05 +0000"  >&lt;p&gt;Attaching derby-4869-22-aa-unstableStatementTest.diff. This patch attempts to reduce the risk of instability in StatementTest.test_jdbc4_1_queryTimeoutException(). Committed at subversion revision 1064281.&lt;/p&gt;

&lt;p&gt;The test case tries to force a query timeout. The test failed to induce a timeout on the tinderbox test run at 2011-01-27 17:12:14 CET: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1064174-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1064174-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This patch retries the timeout-inducing query ten times, hoping to force a timeout on one of those runs. If the test continues to fail, I will have to do something smarter.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;/p&gt;</comment>
                            <comment id="12988087" author="rhillegas" created="Fri, 28 Jan 2011 14:02:39 +0000"  >&lt;p&gt;Attaching derby-4869-21-aa-implicitlyClosedResultSets.diff. This patch causes closeOnCompletion() Statements to close when their forward-only ResultSets implicitly close after being drained in autocommit mode.&lt;/p&gt;

&lt;p&gt;The change to EmbeddedResultSet seemed straightforward.&lt;/p&gt;

&lt;p&gt;I have misgivings about the change to the network ResultSet. I think that the Statement-closing trigger should be placed in the markClosed() method. However, when I put the trigger there, I see protocol errors. It seems that that method is called from inside the network protocol itself. That looks like a layering problem to me: I don&apos;t think that the network layer should be calling back up into the JDBC layer. Fixing that layering problem looks like a mini-project outside the scope of the current issue.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java&lt;/p&gt;

&lt;p&gt;Change to embedded behavior.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/ResultSet.java&lt;/p&gt;

&lt;p&gt;Change to network behavior.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;/p&gt;

&lt;p&gt;Test to verify Statement closure when a ResultSet implicitly closes.&lt;/p&gt;</comment>
                            <comment id="12988183" author="rhillegas" created="Fri, 28 Jan 2011 18:58:56 +0000"  >&lt;p&gt;Attaching derby-4869-23-aa-dbmd.diff. This patch makes the JDBC 4.1 changes to DatabaseMetaData. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes to Derby&apos;s implementations of DatabaseMetaData:&lt;/p&gt;

&lt;p&gt;1) Adds generatedKeyAlwaysReturned(), which returns true.&lt;/p&gt;

&lt;p&gt;2) Adds getPseudoColumns(), which returns an empty ResultSet.&lt;/p&gt;

&lt;p&gt;3) Adds an IS_GENERATEDCOLUMN column to the ResultSet returned by getColumns(). This column is &quot;YES&quot; for columns defined by generation clauses and &quot;NO&quot; otherwise.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/metadata.properties&lt;/p&gt;

&lt;p&gt;New query for getPseudoColumn() and new column added to the getColumns() query.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;New bits in the embedded metadata.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/DatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;New bits in the network metadata.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Wrapper41DBMD.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="12988194" author="dagw" created="Fri, 28 Jan 2011 19:43:32 +0000"  >&lt;p&gt;&amp;gt;I have misgivings about the change to the network ResultSet. I think that the Statement-closing trigger should be placed in the markClosed() method. However, when I put the trigger there, I see protocol errors. It seems that that method is called from inside the network protocol itself.&lt;/p&gt;

&lt;p&gt;How does markClosed get called from inside the network layer? I searched for usages there, but I didn&apos;t see any..&lt;br/&gt;
I found usages from Connection, ResultSet, Statement and PrepareStatement (all on am level)..&lt;/p&gt;</comment>
                            <comment id="12988200" author="rhillegas" created="Fri, 28 Jan 2011 19:52:58 +0000"  >&lt;p&gt;Thanks for helping me puzzle through this, Dag. Here is the stack trace I saw:&lt;/p&gt;

&lt;p&gt;	at java.lang.Thread.dumpStack(Thread.java:1230)&lt;br/&gt;
	at org.apache.derby.client.am.ResultSet.markClosed(ResultSet.java:4420)&lt;br/&gt;
	at org.apache.derby.client.am.ResultSet.markClosed(ResultSet.java:4408)&lt;br/&gt;
	at org.apache.derby.client.am.ResultSet.completeLocalCommit(ResultSet.java:4365)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.completeLocalCommit(Connection.java:2026)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseENDUOWRM(NetConnectionReply.java:789)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseRDBCMMreply(NetConnectionReply.java:198)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.readLocalCommit(NetConnectionReply.java:135)&lt;br/&gt;
	at org.apache.derby.client.net.ConnectionReply.readLocalCommit(ConnectionReply.java:43)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.readLocalCommit_(NetConnection.java:1507)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.readCommit(Connection.java:640)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.flowCommit(Connection.java:589)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.flowAutoCommit(Connection.java:598)&lt;br/&gt;
	at org.apache.derby.client.am.Statement.resultSetCommitting(Statement.java:3009)&lt;br/&gt;
	at org.apache.derby.client.am.Statement.resultSetCommitting(Statement.java:2969)&lt;br/&gt;
	at org.apache.derby.client.am.ResultSet.nextX(ResultSet.java:361)&lt;br/&gt;
	at org.apache.derby.client.am.ResultSet.next(ResultSet.java:282)&lt;/p&gt;</comment>
                            <comment id="12988222" author="dagw" created="Fri, 28 Jan 2011 20:45:18 +0000"  >&lt;p&gt;Right, indirect call then. So net layer is calling up into am in reply to a client commit request which was acknowledged by the server (case CodePoint.RDBCMM&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, so the client needs to mark its result set closed, too. Sounds like a typical &quot;callback&quot; action to me. Not sure how you could avoid that as long as state is kept on the am level, too.&lt;/p&gt;</comment>
                            <comment id="12988224" author="rhillegas" created="Fri, 28 Jan 2011 20:51:35 +0000"  >&lt;p&gt;Tests passed cleanly for me on the JDBC 4.1 changes to DatabaseMetaData. Committed derby-4869-23-aa-dbmd.diff at subversion revision 1064868.&lt;/p&gt;</comment>
                            <comment id="12988267" author="dagw" created="Fri, 28 Jan 2011 22:03:05 +0000"  >&lt;p&gt;Am I correct that this test code should work as well? It does work on embedded, but fails in c/s..&lt;/p&gt;

&lt;p&gt;       conn.setAutoCommit( false );&lt;/p&gt;

&lt;p&gt;        ps = conn.prepareStatement( &quot;values ( 1 )&quot; );&lt;br/&gt;
        println( &quot;Testing implicit closure on a &quot; +&lt;br/&gt;
                 ps.getClass().getName() + &quot; with autocommit==false&quot;);&lt;br/&gt;
        wrapper = new Wrapper41Statement( ps );&lt;br/&gt;
        wrapper.closeOnCompletion();&lt;br/&gt;
        rs = ps.executeQuery();&lt;br/&gt;
        rs.next();&lt;br/&gt;
        rs.next();&lt;br/&gt;
        assertFalse( rs.isClosed() );&lt;br/&gt;
        assertFalse( ps.isClosed() );&lt;br/&gt;
        conn.commit();&lt;br/&gt;
        assertTrue( rs.isClosed() );&lt;br/&gt;
        assertTrue( ps.isClosed() );   &amp;lt;---- FAILS in C/S mode&lt;/p&gt;</comment>
                            <comment id="12988785" author="rhillegas" created="Mon, 31 Jan 2011 16:17:11 +0000"  >&lt;p&gt;Thanks for that problem case, Dag. I am able to reproduce your results when I also direct the Connection to close cursors at commit time:&lt;/p&gt;

&lt;p&gt;        conn.setHoldability( ResultSet.CLOSE_CURSORS_AT_COMMIT );&lt;/p&gt;

&lt;p&gt;Without that directive, the cursors and the statement remain open (that seems correct).&lt;/p&gt;

&lt;p&gt;I agree that the client/server behavior looks wrong when CLOSE_CURSORS_AT_COMMIT is set. Thanks.&lt;/p&gt;</comment>
                            <comment id="12988807" author="rhillegas" created="Mon, 31 Jan 2011 17:39:05 +0000"  >&lt;p&gt;Thanks for that problem case, Dag. I am able to reproduce your results when I direct the Connection to close cursors at commit time:&lt;/p&gt;

&lt;p&gt;        conn.setHoldability( ResultSet.CLOSE_CURSORS_AT_COMMIT );&lt;/p&gt;

&lt;p&gt;Without that directive, the cursors and the statement remain open (that seems correct).&lt;/p&gt;

&lt;p&gt;I agree that the client/server behavior looks wrong when CLOSE_CURSORS_AT_COMMIT is set. Thanks.&lt;/p&gt;</comment>
                            <comment id="12988826" author="dagw" created="Mon, 31 Jan 2011 18:13:39 +0000"  >&lt;p&gt;Right, sorry I forgot to specify holdability, you are correct of course. I think we need somehow to move to let statement be driven from the actual rs/cursor being closed as you tried initially..?&lt;/p&gt;</comment>
                            <comment id="12989277" author="rhillegas" created="Tue, 1 Feb 2011 16:52:20 +0000"  >&lt;p&gt;Thanks for the encouragement, Dag. Attaching derby-4869-21-ab-implicitlyClosedResultSets.diff. This is a second rev of the patch for handling closeOnCompletion() when ResultSets close implicitly. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;In this version of the patch, the Statement-closing logic is moved inside ResultSet.markClosed(). I found that I could make this work by factoring Statement.markClosed() into 2 pieces:&lt;/p&gt;

&lt;p&gt;1) A piece which closes the ResultSets.&lt;/p&gt;

&lt;p&gt;2) A piece which closes all of the other Statement resources.&lt;/p&gt;

&lt;p&gt;Now the closeOnCompletion logic calls only the second piece of the Statement.markClosed() logic. This ought to be safe since the ResultSets have already been closed.&lt;/p&gt;

&lt;p&gt;I have added Dag&apos;s test case to the regression test for this behavior.&lt;/p&gt;


&lt;p&gt;Touches the same files as the previous version of the patch.&lt;/p&gt;</comment>
                            <comment id="12989315" author="rhillegas" created="Tue, 1 Feb 2011 18:37:47 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-21-ab-implicitlyClosedResultSets.diff. Committed at subversion revision 1066127.&lt;/p&gt;</comment>
                            <comment id="12989369" author="dagw" created="Tue, 1 Feb 2011 20:20:58 +0000"  >&lt;p&gt;Thanks, Rick! Looks like a good solution to me. +1&lt;br/&gt;
Nit: some lines &amp;gt;&#160;80 columns.&lt;/p&gt;</comment>
                            <comment id="12989651" author="knutanders" created="Wed, 2 Feb 2011 14:36:42 +0000"  >&lt;p&gt;The set/getNetworkTimeout patch makes the new unsupported methods throw different exceptions depending on whether or not the connection is closed. Other methods that we don&apos;t implement throw SQLFeatureNotSupportedException unconditionally, see for example createArrayOf(), createNClob(), createSQLXML() and createStruct() in the Connection classes. For consistency, we should probably make setNetworkTimeout() and getNetworkTimeout() do the same.&lt;/p&gt;</comment>
                            <comment id="12989652" author="rhillegas" created="Wed, 2 Feb 2011 14:42:57 +0000"  >&lt;p&gt;Thanks, Knut. I will confirm with Lance Andersen about whether the Derby behavior for the other methods is acceptable. If so, then I agree that consistency is a good idea.&lt;/p&gt;</comment>
                            <comment id="12990722" author="rhillegas" created="Fri, 4 Feb 2011 20:15:32 +0000"  >&lt;p&gt;Attaching derby-4869-24-ab-getParentLogger.diff. This patch adds the new getParentLogger() method to Derby&apos;s JDBC 4.0 implementations of java.sql.Driver and javax.sql.CommonDataSource. I will run regression tests.&lt;/p&gt;

&lt;p&gt;For the moment, these methods throw SQLFeatureNotSupportedException. Some day we may decide to implement JDBC support for the Logger idiom.&lt;/p&gt;

&lt;p&gt;The two drivers which we actually register with DriverManager are AutoloadedDriver (in the embedded case) and ClientDriver (in the client/server case). The new method could not be put into these existing classes because the new method must raise a Java 6 exception. This patch introduces subclasses of these drivers for use on Java 6 and higher platforms. A little static inititialization sorts out which drivers to load based on the platform.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/jdbc/AutoloadedDriver.java&lt;br/&gt;
A      java/engine/org/apache/derby/jdbc/AutoloadedDriver40.java&lt;br/&gt;
M      tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Changes to the embedded driver.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/jdbc/ClientDriver.java&lt;br/&gt;
A      java/client/org/apache/derby/jdbc/ClientDriver40.java&lt;br/&gt;
M      tools/jar/dnc.properties&lt;/p&gt;

&lt;p&gt;Changes to the client/server driver.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/jdbc/EmbeddedXADataSource40.java&lt;br/&gt;
M      java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java&lt;br/&gt;
M      java/engine/org/apache/derby/jdbc/EmbeddedConnectionPoolDataSource40.java&lt;/p&gt;

&lt;p&gt;Changes to the embedded DataSources.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/jdbc/ClientXADataSource40.java&lt;br/&gt;
M      java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java&lt;br/&gt;
M      java/client/org/apache/derby/jdbc/ClientDataSource40.java&lt;/p&gt;

&lt;p&gt;Changes to the client/server DataSources&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40Test.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41DataSource.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/DataSourceTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DriverTest.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="12990879" author="rhillegas" created="Sat, 5 Feb 2011 02:12:20 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4869-24-ab-getParentLogger.diff except for known heisenbugs in testPing and InvalidLDAPServerAuthenticationTest.&lt;/p&gt;</comment>
                            <comment id="12991402" author="rhillegas" created="Mon, 7 Feb 2011 14:55:08 +0000"  >&lt;p&gt;Committed derby-4869-24-ab-getParentLogger.diff at subversion revision 1067954.&lt;/p&gt;</comment>
                            <comment id="12991426" author="knutanders" created="Mon, 7 Feb 2011 15:59:23 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;The following code causes a ClassCastException in my environment:&lt;/p&gt;

&lt;p&gt;        Driver d1 = DriverManager.getDriver(&quot;jdbc:derby:db&quot;);&lt;br/&gt;
        System.out.println(d1);&lt;br/&gt;
        try &lt;/p&gt;
{
            d1.getParentLogger();
            System.out.println(&quot;what?!?&quot;);
        }
&lt;p&gt; catch (SQLFeatureNotSupportedException ex) &lt;/p&gt;
{
            // expected
        }

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.ClassCastException: org.apache.derby.impl.jdbc.EmbedSQLException cannot be cast to java.sql.SQLFeatureNotSupportedException&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver40.getParentLogger(AutoloadedDriver40.java:48)&lt;br/&gt;
	at Drv41.main(Drv41.java:7)&lt;/p&gt;

&lt;p&gt;It does not fail if I add Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;) before the call to DriverManager.getDriver(), only when I use the auto-loaded driver.&lt;/p&gt;</comment>
                            <comment id="12991428" author="rhillegas" created="Mon, 7 Feb 2011 16:05:30 +0000"  >&lt;p&gt;Attaching derby-4869-25-aa-removeClosureCheck.diff. This patch makes Connection.get/setNetworkTimeout() always raise a SQLFeatureNotSupportedException, even when the Connection is closed. Committed at subversion revision 1067991.&lt;/p&gt;

&lt;p&gt;I have confirmed with Lance Andersen that this behavior is acceptable. It makes the behavior consistent with other Connection methods which raise SQLFeatureNotSupportedException.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionMethodsTest.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetConnection40.java&lt;/p&gt;</comment>
                            <comment id="12991429" author="knutanders" created="Mon, 7 Feb 2011 16:06:02 +0000"  >&lt;p&gt;Another related issue. If I unload the embedded driver and reload it using Class.forName(...).newInstance(), the new driver is not the more capable one, and an attempt to call getParentLogger() results in an AbstractMethodError.&lt;/p&gt;

&lt;p&gt;See the attached program Drv41.java, which fails with this stack trace:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.AbstractMethodError&lt;br/&gt;
	at Drv41.main(Drv41.java:26)&lt;/p&gt;</comment>
                            <comment id="12991444" author="rhillegas" created="Mon, 7 Feb 2011 16:33:13 +0000"  >&lt;p&gt;Thanks, Knut. I will take a look at those issues.&lt;/p&gt;</comment>
                            <comment id="12991476" author="knutanders" created="Mon, 7 Feb 2011 17:11:51 +0000"  >&lt;p&gt;The fix for the instability in StatementTest.test_jdbc4_1_queryTimeoutException() doesn&apos;t seem to be quite enough. It&apos;s still failing sometimes in the nightly tests: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/sol32/1067702-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/testlog/sol32/1067702-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12991536" author="rhillegas" created="Mon, 7 Feb 2011 19:35:09 +0000"  >&lt;p&gt;Attaching derby-4869-27-aa-driver40.diff. This patch adds getParentLogger() to Driver40. On my machine this fixes the problem which surfaced in the tinderbox tests after committing derby-4869-24-ab-getParentLogger.diff. Committed at subversion revision 1068073.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/jdbc/Driver40.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Wrapper41Driver.java&lt;/p&gt;</comment>
                            <comment id="12991602" author="rhillegas" created="Mon, 7 Feb 2011 20:57:17 +0000"  >&lt;p&gt;The second issue raised by Knut (AbstractMethodError thrown after reloading the engine) is fixed by my previous submission (the addition of getParentLogger() to Driver40). It seems that the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2905&quot; title=&quot;Shutting down embedded Derby does not remove all code, the AutoloadDriver is left registered in the DriverManager.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2905&quot;&gt;&lt;del&gt;DERBY-2905&lt;/del&gt;&lt;/a&gt; has resulted in a Driver40 being registered when you reload the engine. Before the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2905&quot; title=&quot;Shutting down embedded Derby does not remove all code, the AutoloadDriver is left registered in the DriverManager.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2905&quot;&gt;&lt;del&gt;DERBY-2905&lt;/del&gt;&lt;/a&gt;, the engine reload would re-register AutoloadedDriver.&lt;/p&gt;</comment>
                            <comment id="12992015" author="rhillegas" created="Tue, 8 Feb 2011 15:51:08 +0000"  >&lt;p&gt;Attaching derby-4869-28-ab-autoloadExceptionFactory.diff. This fixes the other problem found by Knut: If the embedded driver has not booted, then the JDBC 4.0 exception factory is not installed and getParentLogger() trips over a ClassCastException because the refined JDBC 4.0 exception classes aren&apos;t being used. Committed at subversion revision 1068451.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/jdbc/AutoloadedDriver40.java&lt;/p&gt;

&lt;p&gt;Loads the JDBC 4.0 exception factory on initialization.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java&lt;/p&gt;

&lt;p&gt;Adds a test for this case.&lt;/p&gt;</comment>
                            <comment id="12992059" author="rhillegas" created="Tue, 8 Feb 2011 17:37:23 +0000"  >&lt;p&gt;Attaching derby-4869-26-aa-signatureTests.diff. This patch uncomments the signature-matching tests on Java 7. Now that all of the JDBC 4.1 methods have been added, those tests should pass. Committed at subversion revision 1068489.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/LogicalDatabaseMetaData40.java&lt;/p&gt;

&lt;p&gt;The tests showed that this wrapper still needed to forward new methods to the embedded DatabaseMetaData.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/net/NetResultSet40.java&lt;/p&gt;

&lt;p&gt;The tests objected that the text of the error message for ResultSet.getObject( int, Class ) was not what was expected even though the SQLState was correct.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/VerifySignatures.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java&lt;/p&gt;

&lt;p&gt;Uncommented these tests on Java 7.&lt;/p&gt;</comment>
                            <comment id="12992106" author="rhillegas" created="Tue, 8 Feb 2011 18:59:06 +0000"  >&lt;p&gt;Attaching derby-4869-29-aa-fixAutoloadTest.diff. This patch makes the AutoloadTest aware of the new driver classes introduced by the work on getParentLogger(). This fixes the test failures seen in AutoloadTest here: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/Limited/testSummary-1068013.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/Daily/jvm1.6/testing/Limited/testSummary-1068013.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 1068524.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java&lt;/p&gt;</comment>
                            <comment id="12992177" author="rhillegas" created="Tue, 8 Feb 2011 20:55:52 +0000"  >&lt;p&gt;Hi Knut: Concerning the query timeout failures on Solaris, has the frequency of the failures gone down? Thanks.&lt;/p&gt;</comment>
                            <comment id="12992232" author="knutanders" created="Tue, 8 Feb 2011 23:23:13 +0000"  >&lt;p&gt;The query timeout test has failed in the last two test cycles on both Solaris 10 x86 and Windows 2003. In the last test cycle it also failed on SUSE and Solaris 10 SPARC. So I don&apos;t think the frequency of the failures has gone down much.&lt;/p&gt;</comment>
                            <comment id="12992702" author="rhillegas" created="Wed, 9 Feb 2011 20:27:06 +0000"  >&lt;p&gt;Attaching derby-4869-30-aa-unstableStatementTest.diff. This is a second attempt to remove the instability in StatementTest. Committed at subversion revision 1069070.&lt;/p&gt;

&lt;p&gt;This patch changes the test in 2 ways:&lt;/p&gt;

&lt;p&gt;1) Doubles the number of attempts to force a timeout.&lt;/p&gt;

&lt;p&gt;2) Just soldiers on if a timeout could not be forced.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;/p&gt;</comment>
                            <comment id="12992716" author="knutanders" created="Wed, 9 Feb 2011 21:03:37 +0000"  >&lt;p&gt;Maybe this comment in SetQueryTimeoutTest gives a hint as to how we can stabilize the test?&lt;/p&gt;

&lt;p&gt;        /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The reason for using the mod function here is to force&lt;/li&gt;
	&lt;li&gt;at least one invocation of ResultSet.next() to read&lt;/li&gt;
	&lt;li&gt;more than one row from the table before returning.&lt;/li&gt;
	&lt;li&gt;This is necessary since timeout is checked only when&lt;/li&gt;
	&lt;li&gt;reading rows from base tables, and when the first row&lt;/li&gt;
	&lt;li&gt;is read, the query still has not exceeded the timeout.&lt;br/&gt;
         */&lt;br/&gt;
        return &quot;select a from &quot; + tablePrefix + &quot;_orig where mod(DELAY(1,a),3)=0&quot;;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12993193" author="rhillegas" created="Thu, 10 Feb 2011 19:57:47 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Could you test-drive derby-4869-31-aa-unstableStatementTest.diff on the platform where StatementTest has been failing? This patch follows the clue from your last comment and rewrites the query to return more than one row. Thanks.&lt;/p&gt;</comment>
                            <comment id="12993439" author="knutanders" created="Fri, 11 Feb 2011 10:47:42 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;On a machine that has shown this failure in the nightly tests (the SUSE box), I ran the test 100 times successfully without your fix, so I&apos;m not sure how to reproduce it easily.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure, though, if the essence of the comment is that the query should return more than one row. My understanding is that the MOD function is used to force one next() call to consider multiple rows before it returns. The MOD function in that query makes next() have to consider three rows because only every third row qualifies.&lt;/p&gt;

&lt;p&gt;It may also be significant that the second argument to the delay function is a reference to a column, so that the function has to be invoked for every row.&lt;/p&gt;</comment>
                            <comment id="12993515" author="rhillegas" created="Fri, 11 Feb 2011 14:36:59 +0000"  >&lt;p&gt;Thanks, Knut. That sounds like a better interpretation of that comment. Could you test-drive this new patch: derby-4869-31-ab-unstableStatementTest.diff?&lt;/p&gt;

&lt;p&gt;I&apos;m not suprised that StatementTest failed to fail for you: the current version of that test silently succeeds if a timeout can&apos;t be forced.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12994305" author="knutanders" created="Mon, 14 Feb 2011 14:14:35 +0000"  >&lt;p&gt;I&apos;m still having difficulties reproducing the test failure after modifying the test to fail if it doesn&apos;t get a timeout on the first attempt. On the bright side, I&apos;m having the same difficulties reproducing it with the patch, so at least there&apos;s no indication that the patch makes it any worse. It&apos;s probably worth checking it in to see if it improves the stability in the nightly runs.&lt;/p&gt;</comment>
                            <comment id="12994310" author="rhillegas" created="Mon, 14 Feb 2011 14:28:49 +0000"  >&lt;p&gt;Thanks for test-driving the patch, Knut. I have checked it in at subversion revision 1070504. Crossing my fingers and whistling a happy tune.&lt;/p&gt;</comment>
                            <comment id="12995104" author="kmarsden" created="Wed, 16 Feb 2011 01:23:39 +0000"  >
&lt;p&gt;I have a question about AutoLoadedDriver vs AutoLoadedDriver40.&lt;/p&gt;

&lt;p&gt;I think the autoloaded driver concept was new with JDBC  4.0, so I was curious about why a new AutoLoadedDriver40 was created  last week in revision 1067954 &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; in addition to the existing AutoloadedDriver  for the getParentLogger() functionality (JDBC 4.1).   Isn&apos;t any AutoloadedDriver JDBC 4.x?  Why do we need two or if we do need two, why isn&apos;t the new one AutoLoadedDriver41?&lt;/p&gt;


&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1067954&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1067954&lt;/a&gt;&lt;/p&gt;

</comment>
                            <comment id="12995305" author="rhillegas" created="Wed, 16 Feb 2011 14:19:40 +0000"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Those are good questions. Before answering them, let me first list a couple facts:&lt;/p&gt;

&lt;p&gt;1) The AutoloadedDriver is the embedded driver which is registered with the DriverManager. When it was introduced, it is what was registered with DriverManager regardless of what VM you were using. It was used for JDK 1.4 on up.&lt;/p&gt;

&lt;p&gt;2) The new getParentLogger() method raises a SQLFeatureNotSupportedException. This exception was introduced in Java 6. A method which raises this exception can&apos;t be compiled on Java 5 or lower.&lt;/p&gt;

&lt;p&gt;3) As part of satisfying the JDBC 4.1 contract, when running on Java 7 or higher, the new getParentLogger() method must be found in the driver returned by DriverManager.getDriver( &quot;jdbc:derby&quot; ).&lt;/p&gt;

&lt;p&gt;Two options occurred:&lt;/p&gt;

&lt;p&gt;i) Put getParentLogger() in AutoloadedDriver but don&apos;t raise SQLFeatureNotSupportedException. This would mean actually implementing the Logger idiom for writing error messages and diagnostics. I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5007&quot; title=&quot;Implement an alternative error-logging mechanism using the java.util.logging idiom.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5007&quot;&gt;DERBY-5007&lt;/a&gt; to track this enhancement. It is an attractive feature but it is a mini-project and not part of JDBC 4.1. If we do get around to implementing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5007&quot; title=&quot;Implement an alternative error-logging mechanism using the java.util.logging idiom.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5007&quot;&gt;DERBY-5007&lt;/a&gt;, then getParentLogger() will no longer have to raise SQLFeatureNotSupportedException. We can then move it down to AutoloadedDriver and remove the AutoloadedDriver40 class.&lt;/p&gt;

&lt;p&gt;ii) The other option was to add a new AutoloadedDriver subclass to hold the new getParentLogger() method. This is the option I chose. The new subclass is called AutoloadedDriver40 because it is used if you are running on Java 6 on up (that is at JDBC level 4.0 or greater). This follows the general pattern of our JDBC implementation: When a new rev of the JDBC spec adds a method which COULD run on older VMs, we try to put the new method in the lowest level driver for which it can be compiled. You will notice that a great deal of our JDBC 3 and JDBC 4 functionality was actually pushed down into our JDBC 2 drivers.&lt;/p&gt;

&lt;p&gt;I hope this makes sense. Please ask more questions if it doesn&apos;t.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12995741" author="knutanders" created="Thu, 17 Feb 2011 10:06:43 +0000"  >&lt;p&gt;I guess the confusion here is that AutoloadedDriver isn&apos;t necessarily auto-loaded and so the name was a bit misleading from the beginning. With the introduction of the AutoloadedDriver40 class, the name becomes even more misleading, since AutoloadedDriver won&apos;t ever be auto-loaded. On platforms that do support auto-loading, it&apos;s AutoloadedDriver40 that will be picked, if I&apos;ve understood correctly.&lt;/p&gt;

&lt;p&gt;So perhaps we should rename AutoloadedDriver to ManuallyLoadedDriver? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12995800" author="rhillegas" created="Thu, 17 Feb 2011 13:28:12 +0000"  >&lt;p&gt;I don&apos;t think the name is so bad: AutoloadedDriver is the driver which is cited in the jar manifest--that gives it a good claim to the name. No argument that there is a lot of confusion in this part of the code though.&lt;/p&gt;</comment>
                            <comment id="12995825" author="knutanders" created="Thu, 17 Feb 2011 14:36:31 +0000"  >&lt;p&gt;That&apos;s a good point. We could probably make the manifest reference AutoloadedDriver40 directly to remove one level of indirection now, but that&apos;s doesn&apos;t sound very important.&lt;/p&gt;</comment>
                            <comment id="12995889" author="kmarsden" created="Thu, 17 Feb 2011 16:28:16 +0000"  >&lt;p&gt;Why are two needed?  AutoloadedDriver and AutoloadedDriver40.&lt;/p&gt;</comment>
                            <comment id="12995895" author="rhillegas" created="Thu, 17 Feb 2011 16:44:38 +0000"  >&lt;p&gt;a) AutoloadedDriver is needed for Java 5 and lower. It can&apos;t contain the getParentLogger() method because that method raises an exception which is only present in Java 6 and up.&lt;/p&gt;

&lt;p&gt;b) AutoloadedDriver40 is needed for Java 7 and up. On Java 7, the driver returned by DriverManager.getDriver( &quot;jdbc:derby&quot; ) must implement getParentLogger().&lt;/p&gt;

&lt;p&gt;c) The remaining question is: which class do we use on Java 6? We have followed the existing pattern in the code by running the most capable class possible. Since the signature of getParentLogger() can be compiled on Java 6, we use the more capable version on that platform.&lt;/p&gt;

&lt;p&gt;Does one of the above statements not make sense?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12995914" author="kmarsden" created="Thu, 17 Feb 2011 16:56:42 +0000"  >&lt;p&gt;I think where I am fundamentally confused why is AutoloadedDriver needed for Java 5 when the Autoloaded Driver feature was not introduced until Java 6?&lt;/p&gt;</comment>
                            <comment id="12995945" author="rhillegas" created="Thu, 17 Feb 2011 17:36:15 +0000"  >&lt;p&gt;For two reasons:&lt;/p&gt;

&lt;p&gt;I) We simply followed the pattern described in (c) above: JDBC 4.0 did not introduce any methods into java.sql.Driver that prevented implementations from being compiled on JDK 1.4. There was therefore no reason for DriverManager.getDriver() to return 2 different classes, one for Java 5 and lower and another for Java 6 and higher. Now, of course, there is a reason to do that.&lt;/p&gt;

&lt;p&gt;II) Driver autoloading actually goes back to JDK 1.4. It&apos;s just that Java 6 introduced a new kind of driver autoloading. And Derby was out of compliance by not supporting the JDK 1.4 version of autoloading. The JDK 1.4 version of autoloading involves setting a system property which is a list of Drivers which should be autoloaded. The property is set when you boot the VM. It is described here: &lt;a href=&quot;http://download.oracle.com/javase/1.4.2/docs/guide/jdbc/getstart/drivermanager.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/1.4.2/docs/guide/jdbc/getstart/drivermanager.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12995957" author="lilywei" created="Thu, 17 Feb 2011 18:09:34 +0000"  >&lt;p&gt;Thanks Rick. These are very important information. May I suggest to add them in the comments on AutoloadedDriver and AutoloadedDriver40. If the autoloading part is confusing for us, maybe we can add comment for this to ease the future confusion.&lt;/p&gt;</comment>
                            <comment id="12995962" author="kmarsden" created="Thu, 17 Feb 2011 18:26:53 +0000"  >&lt;p&gt;Thank you Rick. That does clarify things alot.  I did not know there was any autoloader capability in JDK 1.4.  Do we support that property now? &lt;/p&gt;

&lt;p&gt; I think where things have gotten hairy with the Autoloader is that, if I am not mistaken, the AutoloadedDriver loads even with the DataSources and that is why &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2905&quot; title=&quot;Shutting down embedded Derby does not remove all code, the AutoloadDriver is left registered in the DriverManager.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2905&quot;&gt;&lt;del&gt;DERBY-2905&lt;/del&gt;&lt;/a&gt; became such an issue for Tomcat users and other app servers that don&apos;t use DriverManager at all and then since DriverManager only loads it the first time, there is some sort of odd incongruity that I can&apos;t quite put into words.  I think that the behavior and the interfaces we have now are good, but hope with some thought we can find a way to make the code simpler and more intuitive per Dan&apos;s  comment here: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2905?focusedCommentId=12537404&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12537404&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2905?focusedCommentId=12537404&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12537404&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I really appreciate the clarification of the current model.&lt;/p&gt;
</comment>
                            <comment id="12995973" author="rhillegas" created="Thu, 17 Feb 2011 18:47:06 +0000"  >&lt;p&gt;I believe that we support the property-based autoloading now.&lt;/p&gt;

&lt;p&gt;There is a lot of trickiness in here. The JRE&apos;s autoloading contract is tricky and Derby&apos;s boot/shutdown logic is tricky.&lt;/p&gt;

&lt;p&gt;We are probably not out of the woods yet. I have misgivings about the original Derby design which makes ComponentUnloading an artifact of OrderlyShutdown. The reverse order makes more sense to me, particularly for smartphones. In that environment, a resource-intensive service like a database may be swapped out frequently in order to make the device responsive. I think that it is tricky to make both orders work.&lt;/p&gt;</comment>
                            <comment id="12996025" author="kmarsden" created="Thu, 17 Feb 2011 20:07:45 +0000"  >&lt;p&gt;Thank you Rick. I will look into that property. Maybe it can help me turn off my least favorite feature, the Autoloader at user sites if it overrides the manifest.&lt;/p&gt;

&lt;p&gt;Perhaps the deregister attribute will be helpful in the phone environment you describe or somethng else new, but I do not think that we can forget that there are lots of  production systems using derby in app servers with isolated class loaders where the unloading is critical and we can&apos;t regress the unloading again.  Tracking down class loader leaks is just too painful. &lt;/p&gt;

&lt;p&gt;I wonder if now that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2905&quot; title=&quot;Shutting down embedded Derby does not remove all code, the AutoloadDriver is left registered in the DriverManager.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2905&quot;&gt;&lt;del&gt;DERBY-2905&lt;/del&gt;&lt;/a&gt; is fixed if the permgen errors we have been seeing on some platforms are fixed now.   I should try on my mac again and file a test issue to have formal test  to make Derby is fully garbage collected after shutdown.&lt;/p&gt;

</comment>
                            <comment id="13008506" author="lilywei" created="Fri, 18 Mar 2011 16:42:28 +0000"  >&lt;p&gt;While doing buddy testing, I found that there are no mention in turn of &quot;Throw SQLFeatureNotSupportedExceptionn&quot; for CallableStatement.getObject(String, Class) and Connection.setTypeMap(Map)  on &lt;a href=&quot;http://wiki.apache.org/db-derby/JdbcFourOne&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JdbcFourOne&lt;/a&gt; wiki page. Should we add the information to the wiki page so information is more on one place?&lt;/p&gt;

&lt;p&gt;I also attach derby-4869-32_add_CallableStatement_Connection_getTypeMap_test.diff patch. Please review it. My intension is only to add more test coverage. Hope this is helpful. I test against sun jvm 1.6 and sun jvm 1.7 build 1.7.0-ea-b132 both ConnectionMethodsTest and ConnectionTest tests passed.&lt;/p&gt;</comment>
                            <comment id="13008560" author="rhillegas" created="Fri, 18 Mar 2011 18:13:34 +0000"  >&lt;p&gt;Thanks for supplying the extra test, Lily. I think it would be appropriate to add the following information to the wiki page (you are welcome to add it):&lt;/p&gt;

&lt;p&gt;1) It would be helpful if the entry for CallableStatement.getObject(String,Class) noted that that overload raises an unsupported feature exception just like the String overloads of the other getXXX() methods.&lt;/p&gt;

&lt;p&gt;You could also note on the Connection.setTypeMap() entry that you have added a test which was missed during the JDBC 4.0 effort. You&apos;re welcome to add yourself as the owner of that entry. Thanks.&lt;/p&gt;</comment>
                            <comment id="13008630" author="lilywei" created="Fri, 18 Mar 2011 21:06:05 +0000"  >&lt;p&gt;Thanks Rick!!! Sure, I will add the extra information and note that CallableStatement.getObject(String,Class) raises an unsupported feature exception just like the String overloads of the other getXXX() methods. And, I will also add to Connection.setTypeMap(map) for extra testing added and be the owner for that entry. If there is no objection, I will checkin the best before today. Thanks!&lt;/p&gt;</comment>
                            <comment id="13008986" author="knutanders" created="Sun, 20 Mar 2011 23:47:57 +0000"  >&lt;p&gt;I didn&apos;t quite understand this part of the test:&lt;/p&gt;

&lt;p&gt;+        Map&amp;lt;String, Class&amp;lt;?&amp;gt;&amp;gt; map = getConnection().getTypeMap();&lt;br/&gt;
+        try &lt;/p&gt;
{
+             map.put(&quot;JAVA_UTIL_LIST&quot;, Class.forName(&quot;java.util.List&quot;));
+        }
&lt;p&gt; catch (ClassNotFoundException se) &lt;/p&gt;
{
+            se.printStackTrace();
+            println(&quot;map.put has exception&quot;);
+        }

&lt;p&gt;Is this code supposed to raise a ClassNotFoundException? If yes, I think there should be a call to fail() in the try block, and the stack trace shouldn&apos;t be printed. If no, I think the CNFE should be thrown so that the test fails.&lt;/p&gt;</comment>
                            <comment id="13008990" author="knutanders" created="Mon, 21 Mar 2011 00:22:51 +0000"  >&lt;p&gt;The new test case caused the following compiler warnings:&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /code/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java:213: warning: &lt;span class=&quot;error&quot;&gt;&amp;#91;unchecked&amp;#93;&lt;/span&gt; unchecked call to add(E) as a member of the raw type java.util.ArrayList&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         lst.add(&quot;First element&quot;);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /code/derby/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/ConnectionTest.java:214: warning: &lt;span class=&quot;error&quot;&gt;&amp;#91;unchecked&amp;#93;&lt;/span&gt; unchecked call to add(E) as a member of the raw type java.util.ArrayList&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;         lst.add(&quot;Second element&quot;);&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 2 warnings&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a patch that fixes the compiler warnings and also removes the unnecessary try/catch block mentioned in the previous comment.&lt;/p&gt;</comment>
                            <comment id="13008993" author="knutanders" created="Mon, 21 Mar 2011 00:43:23 +0000"  >&lt;p&gt;Committed &quot;fix-compiler-warning.diff&quot; with revision 1083628.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering, though, if the call to put() on the map returned by getTypeMap() in the new test case is valid. When using the JDBC 3.0 or earlier variants of the Connection class, the returned map is immutable, and put() will throw an exception. With the JDBC 4.0 driver, the map is mutable, but I think that is just an unintended side effect of a hack used to silence a compiler warning. I&apos;ve logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5143&quot; title=&quot;Remove unnecessary copying of the map in getTypeMap()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5143&quot;&gt;&lt;del&gt;DERBY-5143&lt;/del&gt;&lt;/a&gt; to track this difference between the JDBC 3.0 driver and the JDBC 4.0 driver.&lt;/p&gt;</comment>
                            <comment id="13008995" author="lilywei" created="Mon, 21 Mar 2011 00:50:47 +0000"  >&lt;p&gt;Thanks Knut for removing the compiler warnings. Those lines are meant to throw CNFE so the test will fail. &lt;/p&gt;</comment>
                            <comment id="13009021" author="lilywei" created="Mon, 21 Mar 2011 05:04:53 +0000"  >&lt;p&gt;After apply getTypeMap-warning.diff from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5143&quot; title=&quot;Remove unnecessary copying of the map in getTypeMap()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5143&quot;&gt;&lt;del&gt;DERBY-5143&lt;/del&gt;&lt;/a&gt;, I now see ConnectionTest.testGetTypeMapReturnsAsExpected() has to change. My bad! I try to change with derby-4869-33_add_CallableStatement_Connection_getTypeMap_test.diff patch. However, the work is not done. First, Dave&apos;s comment for getTypeMap-warning.diff patch may cause revision of the getTypeMap-warning patch. Second, I don&apos;t understand why fail(&#8230;) call after put.map(...) failed. I shall work on this tomorrow. Feel free to change the test as fit. Thanks!&lt;/p&gt;</comment>
                            <comment id="13010341" author="lilywei" created="Wed, 23 Mar 2011 20:06:06 +0000"  >&lt;p&gt;With PrepareStatement.execute, we throw SQLTimeoutException if the query runs beyond the limit set by setQueryTimeout(). In PSTimeout.java, I would suspect the second run(5, 0, 1, &quot;5 time out, 0 wait&quot;) call will cause SQLTimeoutException in 5 seconds instead of 40 seconds. Since it is throwing SQLTimeoutException, this might be a minor issue. This can very well be &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4863&quot; title=&quot;Derby update operation with setQueryTimeout  does not timeout until the locks are released.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4863&quot;&gt;DERBY-4863&lt;/a&gt;. I was just hoping the behavior will be seeing SQLTimeoutException in 5 seconds for PrepaeStatement.execute(). Is this an unreasonable expectation? .&lt;/p&gt;</comment>
                            <comment id="13010611" author="knutanders" created="Thu, 24 Mar 2011 09:26:44 +0000"  >&lt;p&gt;Hi Lily, I think you&apos;re right that the problem you&apos;re seeing is the same as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4863&quot; title=&quot;Derby update operation with setQueryTimeout  does not timeout until the locks are released.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4863&quot;&gt;DERBY-4863&lt;/a&gt;. The PSTimeout class is more or less identical to the repro attached to that issue.&lt;/p&gt;</comment>
                            <comment id="13010837" author="lilywei" created="Thu, 24 Mar 2011 18:48:29 +0000"  >&lt;p&gt;Thanks, Knut. I can agree that the PSTimeout class is just experience the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4863&quot; title=&quot;Derby update operation with setQueryTimeout  does not timeout until the locks are released.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4863&quot;&gt;DERBY-4863&lt;/a&gt;. How about the case for PSTimeout_execute.java? The ResultSet takes more than 5 seconds to get and the setQuerytimeout is set to 5 seconds. The SQLTimeoutException is throwing about 19 to 21 seconds later. Does Derby throw SQLTimeoutException twice long as the value set to setQueryTimeout? How does user know when SQLTimeoutException get throw depending on the value they set to setQueryTimeout?&lt;/p&gt;</comment>
                            <comment id="13011282" author="knutanders" created="Fri, 25 Mar 2011 17:03:28 +0000"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;The 19 to 21 seconds include a call to execute() and many calls to ResultSet.next(). The SQLTimeoutException isn&apos;t thrown until one of these needs more than 5 seconds to complete. When I ran PSTimeout_execute in my environment, the next() call that threw the exception was stopped after 5008 ms. I think this behaviour is within specification.&lt;/p&gt;</comment>
                            <comment id="13011309" author="lilywei" created="Fri, 25 Mar 2011 17:51:53 +0000"  >&lt;p&gt;Thank you so much for verify Derby behavior is within specification. Nothing gets away from you. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13015243" author="lilywei" created="Mon, 4 Apr 2011 01:07:10 +0100"  >&lt;p&gt;The derby-4869_Statement_addBatch_execute_etc.diff hopes to achieve the following agenda:&lt;br/&gt;
1.	Add Statement.addBatch test &lt;br/&gt;
2.	Add Statement.execute(String, int) and Statement.executeUpdate(String,int) tests to UnsupportedVetter. I am not totally sure this is the right way to add test coverage for these methods. Any recommendation will be appreciated.&lt;/p&gt;</comment>
                            <comment id="13015315" author="knutanders" created="Mon, 4 Apr 2011 09:41:54 +0100"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;I think this is already covered by the test case testAddBatchClarification_jdbc4_1 that Rick added to StatementJdbc20Test. testaddBatchNotImplemented() in the patch seems to be a subset of that test case.&lt;/p&gt;

&lt;p&gt;I&apos;m not so familiar with the UnsupportedVetter test, but it looks to me like the patch adds those two methods to the list of methods to exclude from testing, so I don&apos;t think that change will increase the test coverage.&lt;/p&gt;</comment>
                            <comment id="13015508" author="lilywei" created="Mon, 4 Apr 2011 18:29:09 +0100"  >&lt;p&gt;Thank you so much Knut. I see testAddBatchClarification_jdbc4_1 in StatementJdbc20Test has addBatch test for Jdbc 4.1&lt;br/&gt;
I also see tests for execute(String, int), execute(String, int[]), execute(String, String[]), executeUpdate(String, int), executeUpdate(String, int[]), and executeUpdate(String, String[]) are in StatementJdbc20Test. I update wiki page JdbcFourOneTesting &lt;a href=&quot;http://wiki.apache.org/db-derby/JdbcFourOneTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JdbcFourOneTesting&lt;/a&gt; to reflect the reality.&lt;/p&gt;</comment>
                            <comment id="13095821" author="kristwaa" created="Fri, 2 Sep 2011 08:03:47 +0100"  >&lt;p&gt;What&apos;s the state of this issue?&lt;br/&gt;
It has the patch available flag set, but hasn&apos;t seen any action for several months.&lt;/p&gt;</comment>
                            <comment id="13095950" author="rhillegas" created="Fri, 2 Sep 2011 13:42:19 +0100"  >&lt;p&gt;Thanks for noticing that the &quot;patch available&quot; flag was set, Kristian. I committed my last patch on February 11, 2011. I see some later patches from Lily, but I believe that she abandoned them. I have turned off the &quot;patch available&quot; flag. Lily may want to turn the flag back on if she wants to continue working on them.&lt;/p&gt;

&lt;p&gt;There is a small amount of work remaining to be done on JDBC 4.1 support now that JDK 7 has gone GA and the spec has been published. I need to describe those changes and finish that work. Thanks.&lt;/p&gt;</comment>
                            <comment id="13104758" author="rhillegas" created="Wed, 14 Sep 2011 19:32:50 +0100"  >&lt;p&gt;Linking this issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5410&quot; title=&quot;sysinfo needs to be adjusted to indicate support for Java 7 jdbc 4.1 level&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5410&quot;&gt;&lt;del&gt;DERBY-5410&lt;/del&gt;&lt;/a&gt;. This may help us remember to update sysinfo the next time we implement a JDBC increment.&lt;/p&gt;</comment>
                            <comment id="13257251" author="myrna" created="Thu, 19 Apr 2012 06:26:10 +0100"  >&lt;p&gt;Can this issue now be closed? Or is there still more work to be done? Rick, looks like you planned to describe the remaining work as indicated on 2/Sep/11 - was that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5488&quot; title=&quot;Add remaining JDBC 4.1 bits which did not appear in the Java 7 javadoc.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5488&quot;&gt;&lt;del&gt;DERBY-5488&lt;/del&gt;&lt;/a&gt; or something else?&lt;/p&gt;</comment>
                            <comment id="13257516" author="rhillegas" created="Thu, 19 Apr 2012 15:44:55 +0100"  >&lt;p&gt;Thanks, Myrna. I believe we&apos;ve wrapped up the work for this issue. Resolving it.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12494619">DERBY-4958</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12494758">DERBY-4959</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12529525">DERBY-5488</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12495925">DERBY-4978</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12496586">DERBY-4983</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12495381">DERBY-4970</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12523076">DERBY-5410</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12470457" name="Drv41.java" size="958" author="knutanders" created="Mon, 7 Feb 2011 16:06:02 +0000"/>
                            <attachment id="12458176" name="JDBC_4.1_Changes.html" size="16590" author="rhillegas" created="Wed, 27 Oct 2010 20:32:49 +0100"/>
                            <attachment id="12474435" name="PSTimeout.java" size="4238" author="lilywei" created="Wed, 23 Mar 2011 20:06:05 +0000"/>
                            <attachment id="12474542" name="PSTimeout_execute.java" size="3117" author="lilywei" created="Thu, 24 Mar 2011 18:48:29 +0000"/>
                            <attachment id="12466728" name="derby-4869-01-ac-rs-getObject.diff" size="31747" author="rhillegas" created="Tue, 21 Dec 2010 16:26:35 +0000"/>
                            <attachment id="12466811" name="derby-4869-01-ad-rs-getObject.diff" size="32702" author="rhillegas" created="Wed, 22 Dec 2010 15:08:49 +0000"/>
                            <attachment id="12466758" name="derby-4869-02-aa-cs-ps-addBatch.diff" size="2995" author="rhillegas" created="Tue, 21 Dec 2010 20:44:38 +0000"/>
                            <attachment id="12466808" name="derby-4869-02-ab-cs-ps-addBatch.diff" size="2896" author="rhillegas" created="Wed, 22 Dec 2010 13:35:55 +0000"/>
                            <attachment id="12466828" name="derby-4869-03-aa-rs-getObject-errorCleanup.diff" size="4384" author="rhillegas" created="Wed, 22 Dec 2010 19:37:18 +0000"/>
                            <attachment id="12466884" name="derby-4869-04-aa-rs-getObject-simplification.diff" size="1617" author="rhillegas" created="Thu, 23 Dec 2010 13:52:09 +0000"/>
                            <attachment id="12466890" name="derby-4869-05-aa-rs-getObject-exception.diff" size="1747" author="rhillegas" created="Thu, 23 Dec 2010 14:38:23 +0000"/>
                            <attachment id="12466915" name="derby-4869-06-aa-cs-getObject.diff" size="61148" author="rhillegas" created="Thu, 23 Dec 2010 21:02:43 +0000"/>
                            <attachment id="12467323" name="derby-4869-06-ab-cs-getObject.diff" size="65716" author="rhillegas" created="Mon, 3 Jan 2011 16:19:19 +0000"/>
                            <attachment id="12467363" name="derby-4869-07-aa-timedisplacement.diff" size="614" author="rhillegas" created="Mon, 3 Jan 2011 21:03:37 +0000"/>
                            <attachment id="12467638" name="derby-4869-08-ac-nullHandling.diff" size="35756" author="rhillegas" created="Thu, 6 Jan 2011 13:51:02 +0000"/>
                            <attachment id="12468402" name="derby-4869-09-ac-abort.diff" size="27319" author="rhillegas" created="Fri, 14 Jan 2011 20:23:45 +0000"/>
                            <attachment id="12468668" name="derby-4869-10-aa-abortSecurityTest.diff" size="30911" author="rhillegas" created="Tue, 18 Jan 2011 18:29:05 +0000"/>
                            <attachment id="12468672" name="derby-4869-11-aa-abortHidePrivates.diff" size="5288" author="rhillegas" created="Tue, 18 Jan 2011 18:54:46 +0000"/>
                            <attachment id="12468679" name="derby-4869-12-aa-xaAndPooledAborts.diff" size="8237" author="rhillegas" created="Tue, 18 Jan 2011 20:20:38 +0000"/>
                            <attachment id="12468680" name="derby-4869-13-aa-xaAndPooledAbortsSecurityManager.diff" size="5475" author="rhillegas" created="Tue, 18 Jan 2011 20:51:52 +0000"/>
                            <attachment id="12468888" name="derby-4869-14-ac-closeOnCompletion.diff" size="24600" author="rhillegas" created="Thu, 20 Jan 2011 20:57:05 +0000"/>
                            <attachment id="12468990" name="derby-4869-15-aa-autoGenKeys.diff" size="3917" author="rhillegas" created="Fri, 21 Jan 2011 17:28:24 +0000"/>
                            <attachment id="12469166" name="derby-4869-16-aa-clarifyStatementSpec.diff" size="3764" author="rhillegas" created="Mon, 24 Jan 2011 15:13:05 +0000"/>
                            <attachment id="12469200" name="derby-4869-17-aa-statementTimeoutException.diff" size="6468" author="rhillegas" created="Mon, 24 Jan 2011 20:07:40 +0000"/>
                            <attachment id="12469310" name="derby-4869-18-aa-getSetSchema.diff" size="9941" author="rhillegas" created="Tue, 25 Jan 2011 18:33:38 +0000"/>
                            <attachment id="12469434" name="derby-4869-19-aa-getSetNetworkTimeout.diff" size="8338" author="rhillegas" created="Wed, 26 Jan 2011 16:46:04 +0000"/>
                            <attachment id="12469456" name="derby-4869-20-aa-setSchemaFastPath.diff" size="653" author="rhillegas" created="Wed, 26 Jan 2011 19:04:08 +0000"/>
                            <attachment id="12469675" name="derby-4869-21-aa-implicitlyClosedResultSets.diff" size="5533" author="rhillegas" created="Fri, 28 Jan 2011 14:02:39 +0000"/>
                            <attachment id="12469941" name="derby-4869-21-ab-implicitlyClosedResultSets.diff" size="7004" author="rhillegas" created="Tue, 1 Feb 2011 16:52:20 +0000"/>
                            <attachment id="12469587" name="derby-4869-22-aa-unstableStatementTest.diff" size="2239" author="rhillegas" created="Thu, 27 Jan 2011 19:51:05 +0000"/>
                            <attachment id="12469694" name="derby-4869-23-aa-dbmd.diff" size="18717" author="rhillegas" created="Fri, 28 Jan 2011 18:58:56 +0000"/>
                            <attachment id="12470276" name="derby-4869-24-ab-getParentLogger.diff" size="31781" author="rhillegas" created="Fri, 4 Feb 2011 20:15:32 +0000"/>
                            <attachment id="12470456" name="derby-4869-25-aa-removeClosureCheck.diff" size="3214" author="rhillegas" created="Mon, 7 Feb 2011 16:05:30 +0000"/>
                            <attachment id="12470605" name="derby-4869-26-aa-signatureTests.diff" size="9095" author="rhillegas" created="Tue, 8 Feb 2011 17:37:23 +0000"/>
                            <attachment id="12470489" name="derby-4869-27-aa-driver40.diff" size="3962" author="rhillegas" created="Mon, 7 Feb 2011 19:35:09 +0000"/>
                            <attachment id="12470598" name="derby-4869-28-ab-autoloadExceptionFactory.diff" size="7297" author="rhillegas" created="Tue, 8 Feb 2011 15:51:08 +0000"/>
                            <attachment id="12470612" name="derby-4869-29-aa-fixAutoloadTest.diff" size="2166" author="rhillegas" created="Tue, 8 Feb 2011 18:59:06 +0000"/>
                            <attachment id="12470721" name="derby-4869-30-aa-unstableStatementTest.diff" size="1137" author="rhillegas" created="Wed, 9 Feb 2011 20:27:06 +0000"/>
                            <attachment id="12470798" name="derby-4869-31-aa-unstableStatementTest.diff" size="2437" author="rhillegas" created="Thu, 10 Feb 2011 19:57:47 +0000"/>
                            <attachment id="12470861" name="derby-4869-31-ab-unstableStatementTest.diff" size="2447" author="rhillegas" created="Fri, 11 Feb 2011 14:36:59 +0000"/>
                            <attachment id="12474015" name="derby-4869-32_add_CallableStatement_Connection_getTypeMap_test.diff" size="3843" author="lilywei" created="Fri, 18 Mar 2011 16:42:28 +0000"/>
                            <attachment id="12474150" name="derby-4869-33_add_CallableStatement_Connection_getTypeMap_test.diff" size="1471" author="lilywei" created="Mon, 21 Mar 2011 05:04:53 +0000"/>
                            <attachment id="12468026" name="derby-4869-exp-01-aa-noTryCatch.diff" size="16296" author="rhillegas" created="Tue, 11 Jan 2011 17:05:19 +0000"/>
                            <attachment id="12475335" name="derby-4869_Statement_addBatch_execute_etc.dif" size="2146" author="lilywei" created="Mon, 4 Apr 2011 01:07:10 +0100"/>
                            <attachment id="12459586" name="disable-tests.diff" size="5094" author="knutanders" created="Mon, 15 Nov 2010 07:41:10 +0000"/>
                            <attachment id="12474139" name="fix-compiler-warning.diff" size="2045" author="knutanders" created="Mon, 21 Mar 2011 00:22:51 +0000"/>
                            <attachment id="12467403" name="timezone.diff" size="7381" author="knutanders" created="Tue, 4 Jan 2011 08:54:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>47.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 29 Oct 2010 14:03:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31421</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35813</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>