<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:02 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-739/DERBY-739.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-739] Reduce generated code required to access a parameter&apos;s value</title>
                <link>https://issues.apache.org/jira/browse/DERBY-739</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When accessing a parameter the generated code is:&lt;/p&gt;

&lt;p&gt;this.pvs.getParameter(23);&lt;/p&gt;

&lt;p&gt;A slightly shorter form would be&lt;/p&gt;

&lt;p&gt;this.getParameter(23);&lt;/p&gt;

&lt;p&gt;if a getParameter() method was added to BaseActivation that simply did:&lt;br/&gt;
 protected final DataValueDescriptor getParameter(int n) &lt;/p&gt;
{ return pvs.getParameter(n); }

&lt;p&gt;------------------------------&lt;br/&gt;
An interesting separate idea, to reduce the number of constant pool entries would be to have multiple getParameter() methods, that took values from 0-5 to construct the actual parameter number.&lt;/p&gt;

&lt;p&gt;getParameter(3) &amp;#8211; &amp;gt;  3 parameter (0 based)&lt;br/&gt;
getParameter(2, 1) --&amp;gt; 13 parameter (2*6 + 1)&lt;br/&gt;
getParameter(5, 1, 4) --&amp;gt; 190 parameter (5*36 + 1*6+ 4)&lt;br/&gt;
above the limit of three args, revert to getParameter&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This should probably be a separate issue and probably would increease code size which would not help &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-732&quot; title=&quot;ERROR XBCM1: Java linkage error thrown during load of generated class  for  query with large number of logical operators and substitution parameters.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-732&quot;&gt;&lt;del&gt;DERBY-732&lt;/del&gt;&lt;/a&gt; , it&apos;s a tradeoff between constant pool entries and code size.&lt;/p&gt;



</description>
                <environment></environment>
        <key id="12326253">DERBY-739</key>
            <summary>Reduce generated code required to access a parameter&apos;s value</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12326197">DERBY-732</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Dec 2005 05:44:32 +0000</created>
                <updated>Tue, 30 Oct 2007 03:22:11 +0000</updated>
                            <resolved>Fri, 16 Dec 2005 04:20:36 +0000</resolved>
                                    <version>10.1.3.2</version>
                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12359088" author="kmarsden" created="Fri, 2 Dec 2005 06:53:07 +0000"  >&lt;p&gt;Going back one step on this issue, I&apos;d like to understand how to trace the error in the generated code back to the offending source since there is no friendly stack trace providing a trail.     To get the offending class, I  set &lt;/p&gt;

&lt;p&gt;derby.debug.true=DumpClassFile&lt;/p&gt;

&lt;p&gt;I could then just run java on the class to see the e1() method was the trouble maker.   The decompiler I sometimes use wouldn&apos;t work on the class because it was malformed, so stopped there and filed the bug. What would have been  the best next steps to trace back to the source of the problem?&lt;/p&gt;</comment>
                            <comment id="12359091" author="djd" created="Fri, 2 Dec 2005 07:36:25 +0000"  >&lt;p&gt;Not sure exactly what you are asking, but I&apos;ll tell you what I did.&lt;/p&gt;

&lt;p&gt;Given the information you had provided, I assumed the query was generating a method that was too big for the class file format in some way.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;this could be a wrong assumption, maybe it&amp;#39;s really a bug in the jump offset calculation&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;De-compiled the class with javap, which comes with a JDK. Javap decompiles the class into bytecode, not Java source code. I think this tends to be ok because Derby&apos;s query nodes are basically writing at the byte code level. If you try to convert a generated class back into Java source there&apos;s a good chance it will fail. Javap also seems to not require other classes in the class path, it just takes the class contents and dumps it.&lt;/p&gt;

&lt;p&gt;javap -private -c -classpath . org.apache.derby.exe.ac601a400fx0107xe7aaxc957x0000001ac9880&lt;/p&gt;

&lt;p&gt;You can also use the JVM as you did to get some idea of the verifier error.&lt;br/&gt;
java -verify -classpath &quot;.;../classes&quot; org.apache.derby.exe.ac601a400fx0107xe7aaxc957x0000001ac9880&lt;/p&gt;

&lt;p&gt;While looking at the class I saw some code I didn&apos;t understand and thus I investigated. This was the multiple calls to setStorableDataValue() that were passing &quot;java.lang.Integer&quot;. It seemed strange to me that type information was being passed as a runtime value.&lt;/p&gt;

&lt;p&gt;After finding the source for setStorableDataValue (using Eclipse),  I then searched for &lt;b&gt;generated&lt;/b&gt; callers of  setStorableDataValue. Since these will not appear in Eclipse&apos;s Java method references search, I always search for the method name in double quotes. &quot;setStorableDataValue&quot;. This is how the method name is usually passed into the byte code compiler by the query nodes, ie a String in Java code. This took me to the only caller, ParameterNode, and from there I could see when &amp;amp; why it was being called.&lt;/p&gt;

&lt;p&gt;Then seeing there were 360+ parameters in the SQL statement I thought let&apos;s see how a parameter is accessed in the generated code, because every byte saving there is going to be multipled by 360+. So that lead to this task.&lt;/p&gt;

&lt;p&gt;A similar exercise could be taken for column reference, since there are also 360 of those. Any way to make the corresponding node generate less code will be multipled 360 times, and then for AND and OR nodes and any other nodes repeated in the query.&lt;/p&gt;

&lt;p&gt;These tend to be simple fixes, as they are small contained improvements, and thus have a small pay-back. E.g. fixing parameter node and column reference node might allow this specific query to succeed, but the underlying problem would still be there , and a similar query with a couple more of the repeated lines may fail. The good thing is that these small fixes are good in themselves, even if they are not solving the more generic problem.&lt;/p&gt;

&lt;p&gt;I actually thought I would start looking at seeing how the compilation system could generic the code for &apos;(ITEMID=? AND VERSIONID=?)&apos; once and re-use for all the repeated uses. But I got distracted by the low-hanging fruit.&lt;/p&gt;

&lt;p&gt;I&apos;m still thinking about how to be able to compile similar blocks once and re-use them, not sure if it would be best at the language level, or handle it at the byte code level. &lt;/p&gt;</comment>
                            <comment id="12360189" author="kmarsden" created="Mon, 12 Dec 2005 14:57:59 +0000"  >&lt;p&gt;As per the description of this bug , this patch adds a getParameter()  method to BaseActivation  so that code can be generated as &lt;br/&gt;
this.getParameter(position) instead of this.pvs.getParameter(postition).&lt;br/&gt;
For an IN predicate the maximum  number of parameters increased from 2700 to 3400.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit this tomorrow if noone sees issues.&lt;/p&gt;
</comment>
                            <comment id="12360362" author="kmarsden" created="Wed, 14 Dec 2005 06:37:24 +0000"  >&lt;p&gt;Date: Tue Dec 13 13:06:11 2005&lt;br/&gt;
New Revision: 356621&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=356621&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=356621&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12360453" author="kmarsden" created="Thu, 15 Dec 2005 05:54:23 +0000"  >&lt;p&gt;Here is a patch to correct the issue that callMethod did not specify the declaring class.&lt;/p&gt;

&lt;p&gt;Passed derbyall except for the following 3 tests that fail on the nightly test report as well.&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/derby_tests.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/derby_tests.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;derbyall/storeall/storeall.fail:store/lockTableVti.sql&lt;br/&gt;
derbyall/storeall/storeall.fail:store/onlineBackupTest2.sql&lt;br/&gt;
derbyall/storeall/storeall.fail:storetests/st_1.sql&lt;/p&gt;</comment>
                            <comment id="12360524" author="kmarsden" created="Fri, 16 Dec 2005 04:20:36 +0000"  >&lt;p&gt;Submtted second patch to resolve issue with the first patch not specifying the declaring class with callMethod. Thanks Dan for the catch.&lt;/p&gt;

&lt;p&gt;New Revision: 357057&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=357057&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=357057&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12361450" author="bandaram" created="Sat, 31 Dec 2005 06:40:15 +0000"  >&lt;p&gt;Kathey, if you are done with this bug, can you resolve it (and close if appropriate)?&lt;/p&gt;</comment>
                            <comment id="12365839" author="djd" created="Fri, 10 Feb 2006 13:58:51 +0000"  >&lt;p&gt;A minor update on the &quot; interesting separate idea, to reduce the number of constant pool entries ...&quot; from the original description.&lt;/p&gt;

&lt;p&gt;First I was wrong that integer constants outside the range of -1 to 5 require constant pool entries in the class file.&lt;br/&gt;
The byte code instruction set has ICONST_n instructions to push the values -1 to 5, BIPUSH to push an 8-bit value&lt;br/&gt;
and SIPUSH to push a 16bit value. Thus only integer constants greater than 32,767 require a integer constant pool entry.&lt;br/&gt;
The push(int) method in the class BCMethod already uses these instructions.&lt;/p&gt;

&lt;p&gt;Secondly, I think that the best way to handle this, if it is an issue, is to solve this in the byte code compiler and not its&lt;br/&gt;
callers (ie the sql compiler). The push(int) method could push a value greater than 32767 by calculating it from values&lt;br/&gt;
less than equal to 32767 so as not to use a constant pool entry. E.g. to push 100,000 perform&lt;/p&gt;

&lt;p&gt;(3 * 32,767) + 1699 == 100,000&lt;/p&gt;

&lt;p&gt;ICONST_3&lt;br/&gt;
SIPUSH 32767&lt;br/&gt;
IMUL&lt;br/&gt;
SIPUSH 1699&lt;br/&gt;
IADD&lt;/p&gt;

&lt;p&gt;Then it&apos;s 9 bytes of instruction versus 3 bytes plus an constant pool entry.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12321330" name="derby739_2.diff" size="683" author="kmarsden" created="Thu, 15 Dec 2005 05:54:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Dec 2005 06:53:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29682</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10vb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39791</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>