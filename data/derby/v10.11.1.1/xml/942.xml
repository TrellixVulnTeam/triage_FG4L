<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:48:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-942/DERBY-942.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-942] Add JDBC4 Ease of Development Support</title>
                <link>https://issues.apache.org/jira/browse/DERBY-942</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;As described in the JDBC 4 spec, sections 20.1, 20.2, and 3.1.&lt;/p&gt;

&lt;p&gt;The Ease of Development extensions provide a way to create tabular DataSets from queries and tuple signatures. The jdk ships with a factory for creating these DataSets, which is a class which implements the QueryObjectGenerator interface. A database can write its own custom QueryObjectGenerator, or just ship with the default, jdk-shipped version. For this task, we will simply wire the default jdk-shipped factory into the appropriate methods: Connection.createQueryObject() and DataSource.createQueryObject().&lt;/p&gt;</description>
                <environment></environment>
        <key id="12328827">DERBY-942</key>
            <summary>Add JDBC4 Ease of Development Support</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anurag">Anurag Shekhar</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Feb 2006 04:49:30 +0000</created>
                <updated>Wed, 1 Jul 2009 01:34:43 +0100</updated>
                            <resolved>Fri, 14 Apr 2006 06:18:18 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12366225" author="rhillegas" created="Tue, 14 Feb 2006 03:31:24 +0000"  >&lt;p&gt;Here are sections 20.1 and 20.2 of the JDBC 4 spec:&lt;/p&gt;

&lt;p&gt;179&lt;br/&gt;
20.1 Overview&lt;br/&gt;
The JDBC Ease of Development features are intended to:&lt;br/&gt;
? Make it easier to execute SQL queries which return a single result set; execute&lt;br/&gt;
SQL Data Manipulation Language (DML) statements that return a row count or&lt;br/&gt;
that return nothing.&lt;br/&gt;
? This reduces the amount of code required to execute queries that normally&lt;br/&gt;
would be executed using the Statement.executeQuery and&lt;br/&gt;
Statement.executeUpdate methods.&lt;br/&gt;
? Simplify the developer experience for users who want to access, navigate and&lt;br/&gt;
modify their data as rows and columns.&lt;br/&gt;
? Provide a means for more strongly typed data.&lt;br/&gt;
? Process the returned data in a connected or disconnected environment.&lt;br/&gt;
? Leverage the new features added to J2SE 5.0 such as generics and annotations.&lt;br/&gt;
The JDBC Ease of Development features are not intended to:&lt;br/&gt;
? Be used as an Object-Relational Mapping (ORM) Technology. Developers who&lt;br/&gt;
need the features found in an ORM Technology should consider using the Java&lt;br/&gt;
Persistence API.&lt;br/&gt;
? Address more complex JDBC application needs such as processing multiple result&lt;br/&gt;
sets.&lt;br/&gt;
180 JDBC 4.0 Specification ? October 2005&lt;br/&gt;
20.1.1 JDBC Annotations&lt;br/&gt;
JDBC Annotations assist developer by reducing the amount of code that must be&lt;br/&gt;
written when using the JDBC APIs. The annotations will be used in combination&lt;br/&gt;
with Query interfaces and DataSet objects to simplify the access and processing of&lt;br/&gt;
data that is returned as a single SQL result set.&lt;br/&gt;
TABLE 20-1 lists the annotations provided in JDBC 4.0.&lt;br/&gt;
20.1.2 Query Interface&lt;br/&gt;
A Query interface defines a set of methods that are decorated with JDBC&lt;br/&gt;
annotations. These annotations describe the SQL queries and SQL update statements&lt;br/&gt;
to be invoked by a given method. A Query interface must be a subinterface of the&lt;br/&gt;
BaseQuery interface. The interface must also specify how the data returned for a&lt;br/&gt;
SQL query should be bound to a DataSet.&lt;br/&gt;
TABLE 20-1 JDBC Annotations&lt;br/&gt;
Annotation Description&lt;br/&gt;
AutoGeneratedKeys Defines the fields within a DataSet&lt;br/&gt;
representing the columns that are to be&lt;br/&gt;
returned for auto-generated keys&lt;br/&gt;
ResultColumn Maps a field within a DataSet to a specific&lt;br/&gt;
column in a SQL ResultSet&lt;br/&gt;
Select Associates a SQL Select statement with a&lt;br/&gt;
method in a Query Interface&lt;br/&gt;
Update Associates a SQL statement that may return&lt;br/&gt;
an update count, with a method in a Query&lt;br/&gt;
Interface&lt;br/&gt;
Chapter 20 Ease of Development 181&lt;br/&gt;
20.1.3 BaseQuery Interface&lt;br/&gt;
The BaseQuery interface must be the superinterface for all Query interfaces. This&lt;br/&gt;
interface defines methods for closing a concrete implementation of a Query interface&lt;br/&gt;
and for determining if an instance of a Query object has been closed.&lt;br/&gt;
20.1.4 DataSet interface&lt;br/&gt;
The DataSet interface is a subinterface of java.util.List and provides a type&lt;br/&gt;
safe view of the data returned from the execution of a SQL query. A DataSet&lt;br/&gt;
interface is a parameterized type. The parameter type is a data class describing the&lt;br/&gt;
columns for the rows that are returned from a method on a Query interface&lt;br/&gt;
decorated by the Select annotation.&lt;br/&gt;
A DataSet may operate in a connected or disconnected mode. When used in a&lt;br/&gt;
connected mode, the DataSet is normally implemented as a ResultSet. A&lt;br/&gt;
disconnected DataSet is normally implemented as a CachedRowSet.&lt;br/&gt;
A DataSet object allows for the iteration through the rows that were returned using&lt;br/&gt;
the java.util.Iterator API. A DataSet object allows user to iterate through&lt;br/&gt;
the rows that were returned using the java.util.Iterator API.&lt;br/&gt;
20.1.5 User-Defined Class&lt;br/&gt;
A user-defined class is used to represent the type parameter for a DataSet. The&lt;br/&gt;
class defines the fields that represent the columns returned from an underlying data&lt;br/&gt;
store. The user-defined class may be specified in two ways: as a structure or as a&lt;br/&gt;
JavaBeansTM component. The user-defined class must be created with an access&lt;br/&gt;
modifier of public.&lt;br/&gt;
Note - Throughout the rest of this chapter, this &quot;user-defined class&quot; will be referred&lt;br/&gt;
to as data class.&lt;br/&gt;
When the data class is used as a simple structure, it consists of public fields whose&lt;br/&gt;
names match the columns in the data returned from a data source.&lt;br/&gt;
public class Person &lt;/p&gt;
{
public String firstName;
public String lastName;
}
&lt;p&gt;CODE EXAMPLE 20-1 data class as a structure&lt;br/&gt;
182 JDBC 4.0 Specification ? October 2005&lt;br/&gt;
The data class can also be represented as a JavaBeansTM component, providing setters&lt;br/&gt;
and getters, that match the column names in the returned data to access the fields.&lt;br/&gt;
public class Person {&lt;br/&gt;
private String firstName;&lt;br/&gt;
private String lastName;&lt;br/&gt;
public String getFirstName() &lt;/p&gt;
{ return firstName;}
&lt;p&gt;public String getLastName() &lt;/p&gt;
{ return lastName;}
&lt;p&gt;public void setFirstName(String fName) &lt;/p&gt;
{ firstName= fName;}
&lt;p&gt;public void setLastName(String lName) &lt;/p&gt;
{ lastName=lName;}
&lt;p&gt;}&lt;br/&gt;
CODE EXAMPLE 20-2 data class as a JavaBean&lt;br/&gt;
20.1.6 QueryObjectGenerator Interface&lt;br/&gt;
The QueryObjectGenerator interface may be implemented by JDBC drivers. A&lt;br/&gt;
QueryObjectGenerator is used to process JDBC annotations and to provide the&lt;br/&gt;
mapping between DataSet objects and the resulting data returned by a method&lt;br/&gt;
decorated with a Select annotation. The interface also contains the method&lt;br/&gt;
createQueryObject that returns an instance of a Query interface.&lt;br/&gt;
The method DatabaseMetaData.providesQueryObjectGenerator may be&lt;br/&gt;
used to determine whether a JDBC driver provides a QueryObjectGenerator&lt;br/&gt;
implementation.&lt;br/&gt;
An implementation of QueryObjectGenerator is provided by Java SE 6.&lt;br/&gt;
20.2 Creating an instance of a Query interface&lt;br/&gt;
This section describes how to create a concrete implementation of a Query interface.&lt;br/&gt;
The database table that will be used in the example was created by the following&lt;br/&gt;
DDL:&lt;br/&gt;
create table mammal(firstName varchar(20), lastName varchar(20), int&lt;br/&gt;
age, int weight, description varchar(50), longDescription&lt;br/&gt;
varchar(254), int key1, int key2);&lt;br/&gt;
Chapter 20 Ease of Development 183&lt;br/&gt;
CODE EXAMPLE 20-3 DDL used to create the mammal table&lt;br/&gt;
20.2.1 Creating a Query Interface&lt;br/&gt;
The following section will provide an example of creating a Query interface.&lt;br/&gt;
Prior to creating a Query interface, developers should create any needed data classes&lt;br/&gt;
that will be supplied as a type parameter for a DataSet. Please refer to the&lt;br/&gt;
DataSet section for additional details.&lt;br/&gt;
public class Mammal &lt;/p&gt;
{
public String firstName;
public String lastName;
public int age;
public int weight;
public String description;
}
&lt;p&gt;CODE EXAMPLE 20-4 Mammal data class&lt;br/&gt;
The methods of the Query interface are decorated with Select and Update&lt;br/&gt;
annotations. Methods decorated by Select annotations will return instances of&lt;br/&gt;
DataSet&amp;lt;T&amp;gt;.&lt;br/&gt;
interface MyQueries extends BaseQuery &lt;/p&gt;
{
@Select(sql=&quot;SELECT lastName, description FROM mammal&quot;)
DataSet&amp;lt;Mammal&amp;gt; getAllMammals();
@Update(sql=&quot;delete from mammals&quot;)
int deleteAllMammals();
}
&lt;p&gt;CODE EXAMPLE 20-5 A sample Query interface&lt;br/&gt;
20.2.2 Concrete Query Interface implementation&lt;br/&gt;
A concrete implementation of a Query interface can be created by invoking either&lt;br/&gt;
the Connection.createQueryObject or DataSource.createQueryObject&lt;br/&gt;
method passing a Query interface as its parameter.&lt;br/&gt;
Connection con = DriverManager.getConnection(url, props);&lt;br/&gt;
MyQueries myQueries = con.createQueryObject(MyQueries.class);&lt;br/&gt;
CODE EXAMPLE 20-6 Creating an instance of a SQL Interface&lt;br/&gt;
20.2.2.1 Connection.createQueryObject and&lt;br/&gt;
DataSource.createQueryObject methods&lt;br/&gt;
JDBC drivers must implement the createQueryObject method on the&lt;br/&gt;
Connection and DataSource interface. If the JDBC driver does not provide its&lt;br/&gt;
own implementation of a QueryObjectGenerator, it must invoke the default&lt;br/&gt;
QueryObjectGenerator implementation provided by Java SE 6.&lt;br/&gt;
When DataSource.createQueryObject is used for creating a Query object&lt;br/&gt;
instance, a Connection will be obtained from the DataSource and used when&lt;br/&gt;
executing a method on the Query interface. The QueryObjectGenerator&lt;br/&gt;
implementation will be responsible for closing the Connection.&lt;br/&gt;
If Connection.createQueryObject is used for creating a Query object instance,&lt;br/&gt;
the application is responsible for closing the connection..&lt;br/&gt;
20.2.2.2 Invoking Query Interface Methods&lt;br/&gt;
Once you have created an implementation of the Query interface, you may invoke&lt;br/&gt;
any of the methods that are defined by the interface.&lt;br/&gt;
DataSet&amp;lt;Mammal&amp;gt; mammalRows = myQueries.getAllMammals();&lt;br/&gt;
CODE EXAMPLE 20-7 invoking a method on the Query interface&lt;br/&gt;
20.2.2.3 Closing a Query Object&lt;br/&gt;
An application must explictly close a Query object by calling the close method.&lt;br/&gt;
The close method will close any connected DataSets created from the Query&lt;br/&gt;
object, thereby releasing any external resources and making it available for garbage&lt;br/&gt;
collection.&lt;/p&gt;</comment>
                            <comment id="12367683" author="anurag" created="Sat, 25 Feb 2006 02:48:20 +0000"  >&lt;p&gt;This patch is meant only for review. Because of bug in current version of jdk1.6 (mustang) ResultSet.getType after closing connection resulting in exception while network client. Embedded driver uses a light weight check for all the methods which doesn&apos;t checks for connection in this call.&lt;/p&gt;

&lt;p&gt;I have set the noSecurityManager to true for testing this feature. &lt;br/&gt;
Default implementation of QueryObjectGenerator uses reflection check the DataObject before invokeing setters. Reflection being privileged operation fails when called with default security manager. &lt;/p&gt;

&lt;p&gt;Description of patch&lt;br/&gt;
java/engine/org/apache/derby/jdbc/EmbeddedDataSource40.java&lt;br/&gt;
java/client/org/apache/derby/jdbc/ClientDataSource40.java&lt;br/&gt;
	added code to call DefaultQueryGenerator &lt;br/&gt;
	added code to return null for getQueryObjectGenerator to indicate this jdbc doesn&apos;t have QueryObjectGenerator and relies on the default implementation.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/EmbedConnection40.java&lt;br/&gt;
java/client/org/apache/derby/client/net/NetConnection40.java&lt;br/&gt;
	added code to call DefaultQueryGenerator &lt;/p&gt;

&lt;p&gt;build.xml&lt;br/&gt;
added additinla target to uncomment jdbc4 class name listed in tools/jar/extraDBMSclasses.properties if the build is made with jdbc4 support&lt;/p&gt;

&lt;p&gt;tools/jar/extraDBMSclasses.properties&lt;br/&gt;
added entry for EmbeddedDataSource40 so that it it gets added to derby.jar (right now its not getting added to this)&lt;/p&gt;</comment>
                            <comment id="12367688" author="anurag" created="Sat, 25 Feb 2006 03:07:08 +0000"  >&lt;p&gt;I haven&apos;t used junit for the test cases because right now the DerbyJunit doesn&apos;t provides any method to return DataSource and the test case needs to test DataSource method.&lt;/p&gt;</comment>
                            <comment id="12367703" author="fuzzylogic" created="Sat, 25 Feb 2006 05:01:41 +0000"  >&lt;p&gt;I mentioned this in connection to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-993&quot; title=&quot;junitTests cannot be run with J2ME&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-993&quot;&gt;&lt;del&gt;DERBY-993&lt;/del&gt;&lt;/a&gt;. There is code already in org.apache.derbyTesting.functionTests.util.TestUtil to obtain a connection using a DataSource. This code can probably be reused with JUnit tests without much effort.&lt;/p&gt;</comment>
                            <comment id="12367722" author="rhillegas" created="Sat, 25 Feb 2006 07:30:52 +0000"  >&lt;p&gt;Hi Anurag,&lt;/p&gt;

&lt;p&gt;Thanks for the preliminary peek at this patch. Looks good. I like the way you handled the optional inclusion of the JDBC4-specific classes in the jar file. I recommend adding class and method comments to the test classes so that reviewers will know what these tests are supposed to stress. Thanks for the explanation of why you disabled the SecurityManager and for commenting the property file accordingly. When we do commit this patch, let&apos;s leave the JIRA open to remind us to re-enable the SecurityManager after mustang fixes its bug.&lt;/p&gt;

&lt;p&gt;Cheers-Rick&lt;/p&gt;</comment>
                            <comment id="12369416" author="anurag" created="Wed, 8 Mar 2006 17:10:47 +0000"  >&lt;p&gt;added coments in test classes&lt;/p&gt;

&lt;p&gt;build 74 of jdk1.6 includes the bug i mentioned in my privious description&lt;br/&gt;
jdbc4 test suite runs fine with these changes&lt;/p&gt;</comment>
                            <comment id="12370772" author="rhillegas" created="Fri, 17 Mar 2006 09:47:29 +0000"  >&lt;p&gt;Unfortunately, when I run the jdbc4 suite I see diffs in the following tests. I have attached the diff files.&lt;/p&gt;

&lt;p&gt;jdbc4/TestDbMetaData.java&lt;br/&gt;
jdbc4/TestQueryObject.java&lt;/p&gt;</comment>
                            <comment id="12370813" author="anurag" created="Fri, 17 Mar 2006 19:59:46 +0000"  >&lt;p&gt;jdbc4/TestDbMetaData ois failing because message has changed after 1061 fix. This will change again after 1059 is commited. I will update the out file then.&lt;br/&gt;
The error in jdbc4/TestQueryObject.java is due to a bug in jdk which was fixed in jdk 1.6 build 74. It works fine with recent jdk builds&lt;/p&gt;</comment>
                            <comment id="12370855" author="rhillegas" created="Sat, 18 Mar 2006 01:50:36 +0000"  >&lt;p&gt;Hi Anurag,&lt;/p&gt;

&lt;p&gt;Thanks for the explanation. I have upgraded to mustang build 76 and that indeed fixed the TestQueryObject problem.&lt;/p&gt;

&lt;p&gt;Since the other test is broken, it sounds like this patch is not ready to commit. When you are ready, please say in your submission comment that the patch is ready for committing and not just reviewing. Thanks!&lt;/p&gt;</comment>
                            <comment id="12370907" author="anurag" created="Sat, 18 Mar 2006 07:54:02 +0000"  >&lt;p&gt;Hi Rick&lt;br/&gt;
jdbc4/TestDbMetaData.java is not part of this patch actulally its already in and failing in nightly runs (&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/Limited/testSummary-386413.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/Limited/testSummary-386413.html&lt;/a&gt;)&lt;br/&gt;
I will upload out file for that as part of some other jira issue&lt;/p&gt;</comment>
                            <comment id="12370908" author="anurag" created="Sat, 18 Mar 2006 07:54:11 +0000"  >&lt;p&gt;Hi Rick&lt;br/&gt;
jdbc4/TestDbMetaData.java is not part of this patch actulally its already in and failing in nightly runs (&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/Limited/testSummary-386413.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/DerbyJDK16/Limited/testSummary-386413.html&lt;/a&gt;)&lt;br/&gt;
I will upload out file for that as part of some other jira issue&lt;br/&gt;
anurag&lt;/p&gt;</comment>
                            <comment id="12370945" author="rhillegas" created="Sun, 19 Mar 2006 00:18:29 +0000"  >&lt;p&gt;Thanks for the explanation. It&apos;s sad that that other test is broken but I can see that your patch has nothing to do with it.&lt;/p&gt;

&lt;p&gt;I ran derbyall: wisconsin fails as it does in the tinderbox tests. I saw the following failure in SqlExceptionTest (I also see this failure in a clean client just torn off the subversion repository):&lt;/p&gt;


&lt;p&gt;0 add&lt;br/&gt;
&amp;gt; java.lang.NoSuchMethodError: main&lt;br/&gt;
&amp;gt; Exception in thread &quot;main&quot;&lt;br/&gt;
Test Failed.&lt;/p&gt;

&lt;p&gt;I have committed this patch as subversion revision 386861.&lt;/p&gt;</comment>
                            <comment id="12374425" author="anurag" created="Fri, 14 Apr 2006 06:18:18 +0100"  >&lt;p&gt;comitted in 386861&lt;/p&gt;</comment>
                            <comment id="12413698" author="kristwaa" created="Mon, 29 May 2006 17:43:05 +0100"  >&lt;p&gt;I have attached the patch &apos;derby-942-enable-connectionTest.diff&apos;, which enables the jdbc4/ConnectionTest as part of the jdbc40 suite. The test no longer fails as the method createQueryObject has been fully implemented. I ran suite jdbc40 without any failures under both embedded and DerbyNetClient.&lt;/p&gt;

&lt;p&gt;When the patch is committed, it think this issue can be closed.&lt;/p&gt;</comment>
                            <comment id="12413701" author="narayanan" created="Mon, 29 May 2006 18:14:20 +0100"  >&lt;p&gt;The tests test the PooledConnection and XAConnections as well. They should actually be modified so that they can run in as part of the jdbcxa40 suite so that setting  the derbyTesting.xa.single property will take care of testing for the XAConnection case as well and we need not do this explicitly in the test.&lt;/p&gt;

&lt;p&gt;thanx&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12413703" author="kristwaa" created="Mon, 29 May 2006 18:29:20 +0100"  >&lt;p&gt;What you describe can be done by deleting the two subclasses in ConnectionTest, clean up the suite() method, adjust the documentation and add ConnectionTest to the xa suite. I suppose we do not really need the pooled connection test, as the connection implementation class is the same as for xa.&lt;/p&gt;

&lt;p&gt;Unless someone wants to keep the test as it is (where regular, pooled and xa connections are all tested), I will add a Jira and rewrite the neccessary parts of the test class in a few days.&lt;/p&gt;</comment>
                            <comment id="12414089" author="rhillegas" created="Thu, 1 Jun 2006 00:41:04 +0100"  >&lt;p&gt;Commited derby-942-enable-connectionTest.diff at subversion revision 410591.&lt;/p&gt;</comment>
                            <comment id="12414225" author="kristwaa" created="Thu, 1 Jun 2006 20:19:16 +0100"  >&lt;p&gt;&apos;derby-942-connectiontest-rewrite.diff&apos; rewrites ConnectionTest to only test a single connection implementation class. Which class is tested, depends on what &apos;BaseJDBCTestCase.getConnection()&apos; returns. &lt;br/&gt;
The test is also added to the &apos;jdbcxa40&apos; suite, but I could not see this suite being run as part of any other suites (including derbyall).&lt;br/&gt;
The parts that were removed from the test, can be tested by using the &apos;derbyTesting.xa.single&apos; property instead. I assume this will be used when the jdbcxa40 suite is being run.&lt;/p&gt;

&lt;p&gt;Suite jdbc40 passed without failures. Derbyall has not been run for this JDBC4-only patch.&lt;/p&gt;

&lt;p&gt;Please commit.&lt;/p&gt;</comment>
                            <comment id="12414298" author="rhillegas" created="Fri, 2 Jun 2006 04:52:00 +0100"  >&lt;p&gt;Committed derby-942-connectiontest-rewrite.diff at subversion revision 410945. JDBC4 tests ran cleanly.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12324273" name="TestDbMetaData.diff" size="1088" author="rhillegas" created="Fri, 17 Mar 2006 09:47:28 +0000"/>
                            <attachment id="12324274" name="TestQueryObject.diff" size="492" author="rhillegas" created="Fri, 17 Mar 2006 09:47:29 +0000"/>
                            <attachment id="12334887" name="derby-942-connectiontest-rewrite.diff" size="11017" author="kristwaa" created="Thu, 1 Jun 2006 20:19:16 +0100"/>
                            <attachment id="12334886" name="derby-942-connectiontest-rewrite.stat" size="264" author="kristwaa" created="Thu, 1 Jun 2006 20:19:16 +0100"/>
                            <attachment id="12334692" name="derby-942-enable-connectionTest.diff" size="570" author="kristwaa" created="Mon, 29 May 2006 17:43:05 +0100"/>
                            <attachment id="12334693" name="derby-942-enable-connectionTest.stat" size="172" author="kristwaa" created="Mon, 29 May 2006 17:43:05 +0100"/>
                            <attachment id="12323380" name="derby-942.diff" size="16193" author="anurag" created="Sat, 25 Feb 2006 02:48:20 +0000"/>
                            <attachment id="12323921" name="derby-942_2.diff" size="17097" author="anurag" created="Wed, 8 Mar 2006 17:10:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 25 Feb 2006 02:48:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29793</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38464</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>