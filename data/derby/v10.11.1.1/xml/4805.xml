<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:53:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4805/DERBY-4805.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4805] Increase the length of the RDBNAM field in the DRDA implementation</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4805</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently, whenever the client driver is used, there is a limit of 255 bytes for the database name. This is defined by the DRDA spec and there has been a discussion on the list &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; as to whether this limit should be raised due to the introduction of the new ACR that allows for UTF-8 characters.&lt;/p&gt;

&lt;p&gt;UTF-8 characters can take up to four bytes and this reduces the limit in characters dramatically.&lt;/p&gt;

&lt;p&gt;This should be an easy change as there is a codepoint that defines this limit.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; did not work but &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; did&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; - &lt;a href=&quot;http://old.nabble.com/Database-name-length-tt29691419.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://old.nabble.com/Database-name-length-tt29691419.html&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;http://apache-database.10148.n7.nabble.com/Database-name-length-td33182.html&lt;/p&gt;</description>
                <environment></environment>
        <key id="12474527">DERBY-4805</key>
            <summary>Increase the length of the RDBNAM field in the DRDA implementation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="espinha">Tiago R. Espinha</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Sun, 19 Sep 2010 14:28:31 +0100</created>
                <updated>Thu, 25 Sep 2014 21:58:02 +0100</updated>
                            <resolved>Wed, 19 Feb 2014 21:46:19 +0000</resolved>
                                    <version>10.7.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Network Client</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13212845" author="kmarsden" created="Tue, 21 Feb 2012 19:46:33 +0000"  >&lt;p&gt;This is a good project for  a newcomer.  The trickiest thing will be determining if any special handling is needed with mixed client/server versions and testing that.&lt;/p&gt;</comment>
                            <comment id="13854586" author="mamtas" created="Fri, 20 Dec 2013 21:43:27 +0000"  >&lt;p&gt;It has been a very long time since I have worked on a network server issue. And this is my attempt to work in DRDA protocol area so I appreciate any feedback from folks familiar with this code.&lt;/p&gt;

&lt;p&gt;I am attaching a patch for the issue, named . Basicallt, I am attempting to increase the RDBNAM length in bytes from 255 to 32767 (or should it be 32763)? I have following questions related to the area I am touching&lt;/p&gt;

&lt;p&gt;1)Should the new RDBNAM length in bytes be 32767 or 32763? I think I am confused because I have seen 32763 as max size for some other length(SECTKN_MAXSIZE) in org.apache.derby.client.net.NetConfiguration but on the server side,&lt;br/&gt;
in org.apache.derby.impl.drda.CodePoint, I have seen max length for another constant as 32767.&lt;/p&gt;

&lt;p&gt;2)With my patch, there is one new test failure(I have modified the test in /InternationalConnectTest.java to recognize that we accept RDBNAM longer than 255). &lt;br/&gt;
 protocol.tests_313_331(org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest)junit.framework.AssertionFailedError: Wrong synerrcd (0xb != 0x1d) expected:&amp;lt;11&amp;gt; but was:&amp;lt;29&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.checkError(ProtocolTest.java:661)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommand(ProtocolTest.java:389)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.processCommands(ProtocolTest.java:239)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ProtocolTest.testProtocolSequence(ProtocolTest.java:148)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
I think test failure above requires changes in &lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.derbynet.protocol.tests because there is following test for RDBNAM length 256. This length is acceptable now with the patch and hence should pass and hence we will not run into &quot;checkError SYNTAXRM 8 11 RDBNAM&quot; at the bottom of the following code snippet. Does that mean I just remove that check or should I check something else to verify that the test runs fine now? Is the failure above related to the following test code in protocol.tests?&lt;br/&gt;
//&lt;br/&gt;
DISPLAY &quot;Test invalid length for RDBNAM&quot;&lt;br/&gt;
createDssRequest&lt;br/&gt;
startDdm EXCSAT&lt;br/&gt;
writeScalarString EXTNAM &quot;test&quot;&lt;br/&gt;
endDdm&lt;br/&gt;
endDss&lt;br/&gt;
createDssRequest&lt;br/&gt;
startDdm ACCSEC&lt;br/&gt;
writeScalar2Bytes SECMEC 3 //  userid password&lt;br/&gt;
writeScalarPaddedBytes RDBNAM &quot;thisNeedsToBeNoMoreThan255CharactersLong&quot; 256&lt;br/&gt;
writeScalarString USRID test&lt;br/&gt;
writeScalarString PASSWORD test&lt;br/&gt;
endDdm&lt;br/&gt;
endDss&lt;br/&gt;
flush&lt;br/&gt;
skipDss		// don&apos;t care about the EXCSATRM so just skip&lt;br/&gt;
checkError SYNTAXRM 8 11 RDBNAM&lt;br/&gt;
endTest&lt;br/&gt;
//&lt;br/&gt;
3)I think the change in byte length will require some doc changes. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;(Unable to create databases whose name containg Chinese characters through the client driver) is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4827&quot; title=&quot;Modify the documentation for the 10.7 release regarding the UTF-8 CCSID manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4827&quot;&gt;&lt;del&gt;DERBY-4827&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt; had required doc changes which went in as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4827&quot; title=&quot;Modify the documentation for the 10.7 release regarding the UTF-8 CCSID manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4827&quot;&gt;&lt;del&gt;DERBY-4827&lt;/del&gt;&lt;/a&gt; will most likely touch the same part of the doc as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-728&quot; title=&quot;Unable to create databases whose name containg Chinese characters through the client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-728&quot;&gt;&lt;del&gt;DERBY-728&lt;/del&gt;&lt;/a&gt;. Should I go ahead and create a new jira or reopen &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4827&quot; title=&quot;Modify the documentation for the 10.7 release regarding the UTF-8 CCSID manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4827&quot;&gt;&lt;del&gt;DERBY-4827&lt;/del&gt;&lt;/a&gt;? &lt;/p&gt;

&lt;p&gt;Have I missed anything else or does the patch look good otherwise? Thanks for reviewing it.&lt;/p&gt;</comment>
                            <comment id="13854587" author="mamtas" created="Fri, 20 Dec 2013 21:46:21 +0000"  >&lt;p&gt;I need to hand test various version combination of client and server but I think following combinations should work as follows for RDBNAM longer than 255 bytes. Please let me know if I have missed any combinations or behavior below should be different.&lt;br/&gt;
1)Client and Server at 10.11 and higher will now allow RDBNAM longer than 255.&lt;br/&gt;
2)Client at 10.10 or below talking to Server at 10.11 will get length too big exception.&lt;br/&gt;
3)Client at 10.11 or higher talking to Server at 10.10 or lower will get length too big exception&lt;/p&gt;</comment>
                            <comment id="13862060" author="kmarsden" created="Sat, 4 Jan 2014 00:06:04 +0000"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;I think your patch looks good to me except with regard to settling on the new max size for RDBNAM and making adjustments. I think the total max  ddm length for the PKGNAMCSN will need to be 32767 so you will need to calculate the max size for the other fields in the PKGNAMCSN (or other DDM objects that contain RDBNAM).&lt;/p&gt;

&lt;p&gt;There is a condition in NetStatementReply which I think needs to be adjusted to the new length as well.&lt;br/&gt;
       } else if ((ddmLength &amp;gt;= 71) &amp;amp;&amp;amp; (ddmLength &amp;lt;= 781)) {&lt;br/&gt;
            // this is the new SCLDTA format.&lt;/p&gt;

&lt;p&gt;Backing out the current 255 length for RDBNAM, I think that means that the other fields take 526 bytes so the new limit would be 32,241.  We could make it 32,000 just to use a round number.&lt;/p&gt;

&lt;p&gt;For the test it would be good to test the new limit which I think you can do with.&lt;br/&gt;
writeScalarPaddedBytes RDBNAM  &quot;thisNeedsToBeNoMoreThan255CharactersLong&quot; ##### (where #### is the new limit)&lt;/p&gt;

&lt;p&gt;It would be good also to have a test right at the limit.&lt;/p&gt;

&lt;p&gt;I would appreciate another pair of eyes on this patch. It has been a long time for me since I have done any protocol work.&lt;/p&gt;

</comment>
                            <comment id="13862843" author="knutanders" created="Mon, 6 Jan 2014 08:23:17 +0000"  >&lt;p&gt;One experiment that may be useful to run on the patch, is to temporarily change TestConfiguration.DEFAULT_DBNAME and TestConfiguration.DEFAULT_DBNAME_SQL to a longer value close to the new maximum length, and then run the full regression test suite and see what falls over.&lt;/p&gt;</comment>
                            <comment id="13864584" author="mamtas" created="Tue, 7 Jan 2014 19:24:18 +0000"  >&lt;p&gt;Thank you for reviewing the patch Kathey and Knut.&lt;/p&gt;

&lt;p&gt;Going back to the allowable max length for RDBNAM, I looked through DRDA DDM Architecture manual and see that there are lots and lots of DDM objects(listed below) that use RDBNAM in their handshake between client and server(any DDM has a maximum length limit of 32767) It seems like in order to decide the length, we could go through each and everyone of those DDM codepoints in the manual and try to find the maximum length possible for RDBNAM after taking into account the lengths of the other data structures that make up that DDM. This can be tedious and may not be necessary if we decide to come up with a reasonable length of say 1024 or some such length for RDBNAM so that it is long enough to not get bogged down by current 255 bytes limit(which can be limiting if we are dealing with characters that take 4-bytes). Please let me know what your thoughts are. Thanks&lt;/p&gt;

&lt;p&gt;All of the following DDM objects use RDBNAM &lt;br/&gt;
ABNUOWRM, ACCRDB, ACCSEC, AGNPRMRM, BGNBND, BGNBNDRM,&lt;br/&gt;
BNDCPY, BNDDPLY, BNDSQLSTT, CHRSTRDR, CLSQRY, CMDATHRM,&lt;br/&gt;
CMDCHKRM, CMDNSPRM, CMDVLTRM, CMMRQSRM, CNTQRY,&lt;br/&gt;
DRPPKG, DSCINVRM, DSCRDBTBL, DSCSQLSTT, DTAMCHRM, ENDBND,&lt;br/&gt;
ENDDTARM, ENDQRYRM, ENDUOWRM, EXCSQLIMM, EXCSQLSET,&lt;br/&gt;
EXCSQLSTT, INTRDBRQS, MGRDEPRM, OBJNSPRM, OPNQFLRM,&lt;br/&gt;
OPNQRY, PKGBNARM, PKGBPARM, PKGNAM, PKGNAMCSN,&lt;br/&gt;
PKGNAMCT, PRCCNVCD, PRCCNVRM, PRMNSPRM, PRPSQLSTT,&lt;br/&gt;
QRYNOPRM, QRYPOPRM, RDBACCRM, RDBAFLRM, RDBATHRM,&lt;br/&gt;
RDBCMM, RDBNACRM, RDBNFNRM, RDBRLLBCK, RDBUPDRM,&lt;br/&gt;
REBIND, RSCLMTRM, SECCHK, SQLERRRM, SYNCLOG, SYNTAXRM,&lt;br/&gt;
TRGNSPRM, VALNSPRM&lt;/p&gt;</comment>
                            <comment id="13864946" author="bryanpendleton" created="Wed, 8 Jan 2014 01:02:58 +0000"  >&lt;p&gt;FWIW, all my database names have always been 10-20 characters long, max; &lt;br/&gt;
I&apos;ve never felt the need to have a database name which is dozens or hundreds&lt;br/&gt;
of characters long.&lt;/p&gt;

&lt;p&gt;I&apos;m not saying that raising the limit is a bad thing, but I also think that the&lt;br/&gt;
limit doesn&apos;t need to be absurdly large, a few hundred characters seems like&lt;br/&gt;
it would be plenty to me.&lt;/p&gt;</comment>
                            <comment id="13865441" author="kmarsden" created="Wed, 8 Jan 2014 13:49:50 +0000"  >&lt;p&gt;Because the database name for Derby as sent with RDBNAM can be the full path and also includes any attributes for the Derby connection, it ends up being more than the name length for most database systems.  I think there is a need for it to be larger than 255 bytes.  I think though that 1024 should be plenty.  Note: A work around if anything larger is needed can be to set derby.system.home to handle the first part of the path. This  may be desirable even if  under the limit to minimize the RDBNAM since it is sent so frequently.&lt;/p&gt;
</comment>
                            <comment id="13869746" author="mamtas" created="Mon, 13 Jan 2014 17:53:01 +0000"  >&lt;p&gt;In the attached DERBY4805_patch2_diff.txt patch, I have made changes so that the new RDBNAM length limit is 1024 and have also changed where this length is taken into account for calculation for max ddm length for PKGNAMCSN. In addition, I have changed the protocol test case to try 1025 bytes as the boundary case which should result in a failure.&lt;/p&gt;

&lt;p&gt;But, there is something wrong somewhere because even a simple ij connection against network server results in null pointer exception where I am trying to determine on the client side if we are dealing with a network server that can handle the new 1024 length limit. I am pretty certain this piece of code worked with the earlier patch where I was experimenting with a very high length for RDBNAM so I am not sure why I am getting null pointer exception now. May be some code changes went in since my last patch on Dec 30th. I will debug this more but was wondering if anyone else might have any ideas why there is NPE now.&lt;br/&gt;
$ java  -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.11&lt;br/&gt;
ij&amp;gt; ERROR XJ001: Java exception: &apos;null: java.lang.NullPointerException&apos;.&lt;br/&gt;
java.sql.SQLException: Java exception: &apos;null: java.lang.NullPointerException&apos;.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExc eptionFactory.java:112)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException. java:321)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:176)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:419)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:391)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:1483)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:1313)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1101)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:3 47)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Java exception: &apos;null: java. lang.NullPointerException&apos;.&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.j ava:407)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(NetConnection.java:2 10)&lt;br/&gt;
        at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnect ion(ClientJDBCObjectFactoryImpl.java:278)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:168)&lt;br/&gt;
        ... 11 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.serverSupportLongRDBNAM(Net Connection.java:1664)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.buildRDBNAM(NetConne ctionRequest.java:496)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.buildACCSEC(NetConne ctionRequest.java:295)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionRequest.writeAccessSecurity( NetConnectionRequest.java:70)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.writeServerAttributesAndKey Exchange(NetConnection.java:758)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowServerAttributesAndKeyE xchange(NetConnection.java:706)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(NetConn ection.java:562)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.j ava:359)&lt;br/&gt;
        ... 14 more&lt;br/&gt;
ij&amp;gt; exit;&lt;/p&gt;
</comment>
                            <comment id="13870057" author="mamtas" created="Mon, 13 Jan 2014 22:11:05 +0000"  >&lt;p&gt;Here is the brief explanation of code around the NPE. The NPE related code is for backward compatibility. Basically, what we are trying to do here is if the 10.11 client is talking to a server with version 10.10 and under, then we do not want to allow the new RDBNAM limit of 1024 bytes. We check for server version by looking at database meta data. But, at this point in the code, the client is just getting ready to send connection request to the server and has not established a communication with the server yet. Because of this, the client does not have access to database meta data and hence we can not determine the server version. The NPE results from an attempt to access database meta data&apos;s version info when the meta data object has not yet been initialized. Any ideas on how we can decide the correct RDBNAM length for 10.11 client when talking to different versions of the server?&lt;/p&gt;</comment>
                            <comment id="13871156" author="kmarsden" created="Tue, 14 Jan 2014 20:49:12 +0000"  >&lt;p&gt; One option is to catch the protocol exception in this case and rethrow an SQL exception.   The problem with this approach is that it may mask a legitimate protocol error. Another option is to just file a bug for the changed message and leave it. RDBNAM &amp;lt; 255 will still work fine and it will just be that the error message is worse with mixed server/client with RDBNAM &amp;gt; 255&lt;/p&gt;</comment>
                            <comment id="13879093" author="mikem" created="Wed, 22 Jan 2014 19:48:17 +0000"  >&lt;p&gt;note that testing may be complicated.  The length of a filename and length of a pathname is very system specific - and seems to be mostly file system dependent vs. OS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_file_systems&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Comparison_of_file_systems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe the original user having a problem was on NTFS/windows where it looks like the filename limit can be 255 &quot;characters&quot; - i am not sure what encoding the characters can be and thus how many bytes per character.  I don&apos;t remember if the problem was a specific long filename, or a combination of long unicode characters and long path.  The path &lt;br/&gt;
length can be 32k unicode characters on ntfs and unlimited on the ext* file systems often used on unix, so that may&lt;br/&gt;
be an easier way to portably test the code.&lt;/p&gt;</comment>
                            <comment id="13879789" author="knutanders" created="Thu, 23 Jan 2014 09:34:36 +0000"  >&lt;p&gt;Might be possible to test it portably by using the memory protocol, which should be unaffected of limitations on the file system. jdbc:derby://localhost/memory:/a/very/long/pathname/here/...&lt;/p&gt;</comment>
                            <comment id="13879988" author="mamtas" created="Thu, 23 Jan 2014 15:28:02 +0000"  >&lt;p&gt;I am attaching patch DERBY4805_patch3_diff.txt which has RDBNAM length limit of 1024 bytes. This length used to be 255 bytes.&lt;br/&gt;
I have run derbyall with this patch and there were no failures. junit suite ran fine too except InternationalConnectTest.java. InternationalConnectTest has a fixture named testBoundaries which has positive test to try 1024 bytes long RDBNAM and then a negative test to go over the limit for RDBMAM. &lt;/p&gt;

&lt;p&gt;The positive test in testBoundaries fails with the patch both on Windows and Linux machines. It appears that atleast on Windows, the individual components of a filename (i.e. each subdirectory along the path, and the final filename) can not be greater than 255 characters. The positive test is testing the final filename as 1024 characters long and thus causing the fixture to fail. &lt;/p&gt;

&lt;p&gt;The length limit for RDBNAM includes the entire filename(not just the final filename) along with any parameters in the url(for eg ;create=true etc)and so I hand tested following with and without my patch&lt;br/&gt;
java org.apache.derby.drda.NetworkServerControl -noSecurityManager start &amp;amp;&lt;br/&gt;
java  -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
connect &apos;jdbc:derby://localhost:1527/c:/del/del22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222/dellater11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111/db1;create=true&apos;;&lt;br/&gt;
Notice that individual component of filename are shorter than 255 characters but the total length of the string after jdbc:derby://localhost:1527/ in the jdbc url is 435 characters ie greater than 255 characters. The above connection attempt through ij works with my patch but fails without it which demonstrates that with the patch, we do accept RDBNAM longer than 255 characters. &lt;/p&gt;

&lt;p&gt;For now, I am not running the boundary test with Windows OS. Probably I need to put the same rule for other oses with similar restriction of individual component length. Ideally, I should change positive and negaive test cases to to use individual filename component shorter than 255 characters but the total url length withouthout &quot;jdbc:derby://localhost:1527/&quot; to be exactly 1024(for positive test case) or greater than 1024(for negative test case) to test the boundaries. Has anyone ever had to write a junit test where you don&apos;t create the test db in the default location and not use the default &apos;wombat&apos; name for the db? My test probably would need to do that so that full filename in url will add upto be 1024 characters.&lt;/p&gt;

&lt;p&gt;Appreicate any feedback. Thanks&lt;/p&gt;</comment>
                            <comment id="13888080" author="mamtas" created="Fri, 31 Jan 2014 19:46:30 +0000"  >&lt;p&gt;Knut, thanks so much for your suggestion on trying memory protocol. If we can get this to work, it will be much easier to test the new RDBNAM length in various operating systems. But the tests that I have tried in ij are not working too well.&lt;/p&gt;

&lt;p&gt;I tried giving dbname in the connect url to be 257 character in both embedded and network server with my patch, and I get &quot;Caused by: java.sql.SQLException: Java exception: &apos;The parameter is incorrect.: java.io.IOException&apos;.&quot; in both cases. The dbname without ;create=true is 257 characters. If it is 256 characters, it works. I see the exact same behavior without my patch on another trunk client. I will try to find why we get incorrect parameters when dbname is 257 characters. &lt;/p&gt;

&lt;p&gt;The embedded url is as follows(if we remove just one &apos;a&apos; from the url below both for embedded and client server, the connection attempt works fine)&lt;br/&gt;
&apos;jdbc:derby:memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true&apos;;&lt;/p&gt;

&lt;p&gt;The network server url is as follows&lt;br/&gt;
connect &apos;jdbc:derby://localhost/memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true&apos;;&lt;/p&gt;


&lt;p&gt;Here is the complete stack trace for embedded case.&lt;br/&gt;
connect &apos;jdbc:derby:memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;create=true&apos;;&lt;br/&gt;
ERROR XJ040: Failed to start database &apos;memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&apos; with class loader sun.misc.Launcher$AppClassLoader@53745374, see the next exception for details.&lt;br/&gt;
java.sql.SQLException: Failed to start database &apos;memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&apos; with class loader sun.misc.Launcher$AppClassLoader@53745374, see the next exception for details.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:310)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2842)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:405)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:913)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:419)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:391)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:1483)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:1313)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1101)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;memory:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&apos; with class loader sun.misc.Launcher$AppClassLoader@53745374, see the next exception for details.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
        ... 19 more&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;The parameter is incorrect.: java.io.IOException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:331)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2838)&lt;br/&gt;
        ... 16 more&lt;br/&gt;
Caused by: java.io.IOException: The parameter is incorrect.&lt;br/&gt;
        at java.io.Win32FileSystem.canonicalize(Win32FileSystem.java:407)&lt;br/&gt;
        at java.io.File.getCanonicalPath(File.java:570)&lt;br/&gt;
        at org.apache.derby.impl.io.VFMemoryStorageFactory.init(VFMemoryStorageFactory.java:109)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(StorageFactoryService.java:215)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.access$400(StorageFactoryService.java:71)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:958)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:954)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:327)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(StorageFactoryService.java:952)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1504)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2803)&lt;br/&gt;
        ... 16 more&lt;br/&gt;
ERROR XJ001: Java exception: &apos;The parameter is incorrect.: java.io.IOException&apos;.&lt;br/&gt;
java.sql.SQLException: Java exception: &apos;The parameter is incorrect.: java.io.IOException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:331)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2838)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:405)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:913)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:419)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:391)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:1483)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:1313)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:1101)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;The parameter is incorrect.: java.io.IOException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
        ... 19 more&lt;br/&gt;
Caused by: java.io.IOException: The parameter is incorrect.&lt;br/&gt;
        at java.io.Win32FileSystem.canonicalize(Win32FileSystem.java:407)&lt;br/&gt;
        at java.io.File.getCanonicalPath(File.java:570)&lt;br/&gt;
        at org.apache.derby.impl.io.VFMemoryStorageFactory.init(VFMemoryStorageFactory.java:109)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(StorageFactoryService.java:215)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.access$400(StorageFactoryService.java:71)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:958)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:954)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:327)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(StorageFactoryService.java:952)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1504)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2803)&lt;br/&gt;
        ... 16 more&lt;/p&gt;</comment>
                            <comment id="13888084" author="mamtas" created="Fri, 31 Jan 2014 19:48:32 +0000"  >&lt;p&gt;Looking at just part of the stack trace above, it seems like even for in memory db, we are trying to go through Windows file system api which has limitation on how long the file name can be,&lt;br/&gt;
Caused by: java.io.IOException: The parameter is incorrect.&lt;br/&gt;
        at java.io.Win32FileSystem.canonicalize(Win32FileSystem.java:407)&lt;br/&gt;
        at java.io.File.getCanonicalPath(File.java:570)&lt;br/&gt;
        at org.apache.derby.impl.io.VFMemoryStorageFactory.init(VFMemoryStorageFactory.java:109)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(StorageFactoryService.java:215)&lt;/p&gt;</comment>
                            <comment id="13890994" author="mamtas" created="Tue, 4 Feb 2014 18:47:30 +0000"  >&lt;p&gt;Attaching patch DERBY4805_patch4_diff.txt which is ready for commit. It will allow RDBNAM to be 1024 bytes, thus lifting the limit from current 255bytes. I have changed the existing boundary test case to test for the new limit but the tests now use in-memory db jdbc url since on disk long urls were running into problem because of OS/file system limitation on the length of file name length. If there are no further comments, I will go ahead and commit the patch on Thursday. &lt;br/&gt;
As for newer client(version 10.11 and higher) going against an older server(10.10 and lower which will not have the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4805&quot; title=&quot;Increase the length of the RDBNAM field in the DRDA implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4805&quot;&gt;&lt;del&gt;DERBY-4805&lt;/del&gt;&lt;/a&gt; and hence will not accept the longer RDBNAM) with new RDBNAM limit, it will result in protocol exception. This is because when the client makes the first connect request to server, it has no way of knowing what server version it is talking to and hence there is no way to catch the length violation on the client side at this point. I will go ahead and log a jira for this behavior. Hopefully there won&apos;t be many user environments where client and server are at different version levels and trying to give a really long db name.&lt;/p&gt;</comment>
                            <comment id="13894009" author="jira-bot" created="Fri, 7 Feb 2014 00:00:22 +0000"  >&lt;p&gt;Commit 1565491 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1565491&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1565491&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4805&quot; title=&quot;Increase the length of the RDBNAM field in the DRDA implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4805&quot;&gt;&lt;del&gt;DERBY-4805&lt;/del&gt;&lt;/a&gt;(Increase the length of the RDBNAM field in the DRDA implementation)&lt;/p&gt;

&lt;p&gt;This commit will allow RDBNAM to be 1024 bytes, thus lifting the limit from current 255bytes. I have changed the existing boundary test case to test for the new limit but the tests now use in-memory db jdbc url since on disk long urls were running into problem because of OS/file system limitation on the length of file name length.&lt;/p&gt;

&lt;p&gt;As for newer client(version 10.11 and higher) going against an older server(10.10 and lower which will not have the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4805&quot; title=&quot;Increase the length of the RDBNAM field in the DRDA implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4805&quot;&gt;&lt;del&gt;DERBY-4805&lt;/del&gt;&lt;/a&gt; and hence will not accept the longer RDBNAM) with new RDBNAM limit, it will result in protocol exception. This is because when the client makes the first connect request to server, it has no way of knowing what server version it is talking to and hence there is no way to catch the length violation on the client side at this point.&lt;/p&gt;</comment>
                            <comment id="13896627" author="knutanders" created="Mon, 10 Feb 2014 14:58:02 +0000"  >&lt;p&gt;InternationalConnectTest fails on Solaris now if the underlying file system is UFS. The problem appears to be that UFS doesn&apos;t allow path names that are longer than 1024 characters. The path name used in the test is shorter than that, but it&apos;s a relative path name, so it may get longer than 1024 characters after it has been canonicalized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.java.net/javadesktop/derby/request_5587288/javadb-task-3799655.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/request_5587288/javadb-task-3799655.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13896640" author="knutanders" created="Mon, 10 Feb 2014 15:07:20 +0000"  >&lt;p&gt;The attached patch, d4805-test-ufs.diff, makes the in-memory URLs in the test use absolute path names. That way, they won&apos;t be made longer after java.io.File.getCanonicalPath() has been called on them.&lt;/p&gt;

&lt;p&gt;The test now passes in a Solaris environment where it previously failed. I&apos;ve also tested on a Linux box and a Windows box that it still passes in those environments.&lt;/p&gt;</comment>
                            <comment id="13897106" author="mamtas" created="Mon, 10 Feb 2014 22:11:58 +0000"  >&lt;p&gt;Hi Knut, thanks for fixing the problem by putting the / in the jdbc url(and taking an &apos;a&apos; out from the dbname to make sure that we are still at 1024 limit for positive test and at 1025 for negative test) to make it absolute path. I made the changes on my Windows machine and the test ran fine. I will go ahead and commit the changes. Thanks again.&lt;/p&gt;</comment>
                            <comment id="13897134" author="jira-bot" created="Mon, 10 Feb 2014 22:32:56 +0000"  >&lt;p&gt;Commit 1566771 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1566771&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1566771&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4805&quot; title=&quot;Increase the length of the RDBNAM field in the DRDA implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4805&quot;&gt;&lt;del&gt;DERBY-4805&lt;/del&gt;&lt;/a&gt;(Increase the length of the RDBNAM field in the DRDA implementation)&lt;/p&gt;

&lt;p&gt;This commit makes the in-memory URLs in the test use absolute path names. That way, they won&apos;t be made longer after java.io.File.getCanonicalPath() has been called on them.&lt;/p&gt;

&lt;p&gt;Without this change, the test was failing on Solaris but passing on Windows and Linux.&lt;/p&gt;</comment>
                            <comment id="13906142" author="mamtas" created="Wed, 19 Feb 2014 21:45:30 +0000"  >&lt;p&gt;The increased RDBNAM length would work for client and server at 10.11 or higher versions. If only client or server is at 10.11 or higher, user may run into &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6472&quot; title=&quot;Behavior of RDBNAM longer than 255 bytes when server and clients are at different versions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6472&quot;&gt;&lt;del&gt;DERBY-6472&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12475553">DERBY-4827</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12693813">DERBY-6472</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12693790">DERBY-6469</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12326016">DERBY-728</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12622665" name="DERBY4805_patch2_diff.txt" size="22514" author="mamtas" created="Mon, 13 Jan 2014 17:53:01 +0000"/>
                            <attachment id="12622666" name="DERBY4805_patch2_stat.txt" size="892" author="mamtas" created="Mon, 13 Jan 2014 17:53:01 +0000"/>
                            <attachment id="12624808" name="DERBY4805_patch3_diff.txt" size="23543" author="mamtas" created="Thu, 23 Jan 2014 15:28:02 +0000"/>
                            <attachment id="12624809" name="DERBY4805_patch3_stat.txt" size="892" author="mamtas" created="Thu, 23 Jan 2014 15:28:02 +0000"/>
                            <attachment id="12626932" name="DERBY4805_patch4_diff.txt" size="29715" author="mamtas" created="Tue, 4 Feb 2014 18:47:30 +0000"/>
                            <attachment id="12626933" name="DERBY4805_patch4_stat.txt" size="3800" author="mamtas" created="Tue, 4 Feb 2014 18:47:30 +0000"/>
                            <attachment id="12619915" name="DERBY_4805_diff_patch1.txt" size="19494" author="mamtas" created="Fri, 20 Dec 2013 21:43:27 +0000"/>
                            <attachment id="12627990" name="d4805-test-ufs.diff" size="5580" author="knutanders" created="Mon, 10 Feb 2014 15:07:20 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 21 Feb 2012 19:46:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31385</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0d47:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35943</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>