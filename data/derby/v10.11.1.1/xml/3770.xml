<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:07:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3770/DERBY-3770.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3770] Create a utility class for skipping data in an InputStream</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3770</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The contract of InputStream.skip is somewhat difficult, some would even say broken.&lt;br/&gt;
See &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long&lt;/a&gt;))&lt;/p&gt;

&lt;p&gt;A utility class should be created to ensure that we use the same skip procedure throughout the Derby code base.&lt;br/&gt;
Suggested functionality:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;long skipFully(InputStream) : skips until EOF, returns number of bytes skipped&lt;/li&gt;
	&lt;li&gt;void skipFully(InputStream,long) : skips requested number of bytes, throws EOFException if there is too few bytes in the stream&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I know of two different approaches, both skipping in a loop:&lt;br/&gt;
 a) Verify EOF with a read call when skip returns zero.&lt;br/&gt;
 b) Throw EOFException if skip returns zero before requested number of bytes have been skipped.&lt;/p&gt;

&lt;p&gt;There&apos;s related code in iapi.util.UTF8Util. Maybe this class, say StreamUtil, could be put in the same package?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399905">DERBY-3770</key>
            <summary>Create a utility class for skipping data in an InputStream</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thinkallday">Junjie Peng</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 Jul 2008 14:52:07 +0100</created>
                <updated>Mon, 4 May 2009 19:22:05 +0100</updated>
                            <resolved>Fri, 7 Nov 2008 14:19:20 +0000</resolved>
                                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Miscellaneous</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12621373" author="thinkallday" created="Mon, 11 Aug 2008 08:43:01 +0100"  >&lt;p&gt;Hi, Kristian. Please check the patch, thanks!&lt;/p&gt;</comment>
                            <comment id="12622807" author="mamtas" created="Fri, 15 Aug 2008 06:00:11 +0100"  >&lt;p&gt;Junjie, I will look at the patch soon but if you get a chance, can you put a brief description of the logic of the patch in this jira entry?&lt;/p&gt;</comment>
                            <comment id="12622815" author="mamtas" created="Fri, 15 Aug 2008 06:46:20 +0100"  >&lt;p&gt;Junjie, the patch is commented pretty well and the code changes for those comments look good. &lt;br/&gt;
One comment for the engine code change&lt;br/&gt;
1)The 2 new methods skipFully(InputStream is) and skipFully(InputStream is, long skippedBytes) in their javadocs only talk about IOException and EOFException for skipFully(InputStream is, long skippedBytes). Should we put NullPointerException() also in the javadoc?&lt;/p&gt;

&lt;p&gt;Just couple comments for the new junit test&lt;br/&gt;
1)testNullStream has 2 test cases to check for null inputstream. For some reason, if no NullPointerException is thrown, then we have following to catch it&lt;br/&gt;
fail(&quot;Null InputStream is refused!&quot;);&lt;br/&gt;
The error message looks misleading. Should it be saying something like&lt;br/&gt;
fail(&quot;Null InputStream is accepted!&quot;);&lt;br/&gt;
2)The 2 tests in testNullStream only check for NullPointerException. Shouldn&apos;t we be catching other exceptions and make the test fail for those exceptions.&lt;br/&gt;
3)Don&apos;t have to address this but should we consider combining testSkipUtilEOFWithOddLength and testSkipUtilEOF into one test fixutre.&lt;/p&gt;

&lt;p&gt;Thanks for working on this jira entry.&lt;/p&gt;</comment>
                            <comment id="12623111" author="thinkallday" created="Sat, 16 Aug 2008 11:40:36 +0100"  >&lt;p&gt;Thanks for your attention, Mamta. I have receive your comments just now. Sorry to reply late.&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;Junjie, the patch is commented pretty well and the code changes for those comments look good. &lt;br/&gt;
&amp;lt;&amp;lt;One comment for the engine code change &lt;br/&gt;
&amp;lt;&amp;lt;1)The 2 new methods skipFully(InputStream is) and skipFully(InputStream is, long skippedBytes) in their javadocs only talk about IOException and EOFException for skipFully(InputStream is, long skippedBytes). Should we put NullPointerException() also in the javadoc? &lt;br/&gt;
-----I have add the declaration for NullException.&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;Just couple comments for the new junit test &lt;br/&gt;
&amp;lt;&amp;lt;1)testNullStream has 2 test cases to check for null inputstream. For some reason, if no NullPointerException is thrown, then we have following to catch it &lt;br/&gt;
&amp;lt;&amp;lt;fail(&quot;Null InputStream is refused!&quot;); &lt;br/&gt;
&amp;lt;&amp;lt;The error message looks misleading. Should it be saying something like &lt;br/&gt;
&amp;lt;&amp;lt;fail(&quot;Null InputStream is accepted!&quot;);&lt;br/&gt;
-----I have correct it. &lt;br/&gt;
&amp;lt;&amp;lt;2)The 2 tests in testNullStream only check for NullPointerException. Shouldn&apos;t we be catching other exceptions and make the test fail for those exceptions. &lt;br/&gt;
-----I&apos;m not clear about this. What other exceptions should be tested int testNullStream()? For EOFException, I have tested it in testSkipFully(). As to IOException, excluding EOFException, I don&apos;t know how to create or simulate it. Could you give me more advices?&lt;br/&gt;
&amp;lt;&amp;lt;3)Don&apos;t have to address this but should we consider combining testSkipUtilEOFWithOddLength and testSkipUtilEOF into one test fixutre. &lt;br/&gt;
-----testSkipUtilEOFWithOddLength() only tests EOF with special length, I think it&apos;s better to seperate it from common length. Is the name of the method not clear? Is testSkipUtilEOFWithSpecialLength() better?&lt;br/&gt;
&amp;lt;&amp;lt;Thanks for working on this jira entry. &lt;/p&gt;

&lt;p&gt;Mamta, please give more suggestion to improve the patch. Thanks again!&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
Junjie&lt;/p&gt;</comment>
                            <comment id="12624067" author="mamtas" created="Wed, 20 Aug 2008 18:51:42 +0100"  >&lt;p&gt;Junjie, sorry for not getting back to you sooner.&lt;/p&gt;

&lt;p&gt;What I meant bu comment 2) for the tests is something along following line. In most of the JDBC junit tests in Derby, if say executing a specific query is only allowed to send a specific exception, then we assert that using following (s below is java.sql.Statement)&lt;br/&gt;
        assertStatementError(&quot;42Y55&quot;, s, &quot;CALL SYSCS_UTIL.SYSCS_UPDATE_STATISTICS(&apos;APP&apos;,&apos;T1&apos;,null)&quot;);&lt;br/&gt;
So, if the query above throws any exception other than &quot;42Y55&quot; then that will cause the junit test to fail saying that it expected 42Y55 but it got something else.&lt;/p&gt;

&lt;p&gt;I was wonderinf in the test in question here, if there was anyway of catching exceptions other than NPE&lt;br/&gt;
+        try&lt;/p&gt;
{
+            StreamUtil.skipFully(null);
+            fail(&quot;Null InputStream is accepted!&quot;);
+        }
&lt;p&gt;catch (NullPointerException e) &lt;/p&gt;
{
+            assertTrue(true);
+        }

&lt;p&gt;I guess, if the test case above did get an exception other than NPE, we will just get out of the test fixture with that exception. I was curious if there was some more graceful way of catching unexpected exceptions like we do for jave.sql.Statement with assertStatementError. This is not a biggie and feel free to not address this issue if there is no simple way of doing what assertStatementError does.&lt;/p&gt;</comment>
                            <comment id="12624285" author="thinkallday" created="Thu, 21 Aug 2008 09:20:35 +0100"  >&lt;p&gt;Mamta, thanks for your adivice. &lt;/p&gt;

&lt;p&gt;I have contemplated your comment , I think the test is OK in this situation. The NPE is checked first when calling the skipFully() method, so no other kind of exception will be thrown. What&apos;s your opinion?&lt;/p&gt;

&lt;p&gt;As to the &quot;more graceful way of catching unexpected exceptions&quot;, above all, thanks for your advice, it helps me understand the test framework better. However, I haven&apos;t found known tools to realize it, so I would leave it as it&apos;s now.&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
Junjie&lt;/p&gt;</comment>
                            <comment id="12624304" author="knutanders" created="Thu, 21 Aug 2008 10:52:55 +0100"  >&lt;p&gt;The handling of unexpected exceptions looks fine to me. Since they are not caught explicitly, they will propagate out to the JUnit framework and be reported correctly there.&lt;/p&gt;

&lt;p&gt;It may be slightly clearer, though, if we replace assertTrue(true) with just a comment like this:&lt;/p&gt;

&lt;p&gt;  catch (NullPointerException npe) &lt;/p&gt;
{
      // ignoring expected exception
  }

&lt;p&gt;The StreamUtil class imports sun.tools.tree.NullExpression, which seems wrong. Also, the javadoc comments in that class say &quot;@throws NullExpression&quot;, whereas they should have said &quot;@throws NullPointerException&quot;.&lt;/p&gt;

&lt;p&gt;It&apos;s probably also a good idea to move the code from UTF8Util.skipPersistent() into the StreamUtil class, since that method doesn&apos;t have anything to do with UTF-8 and therefore making it non-private in the UTF8Util class may cause some confusion.&lt;/p&gt;</comment>
                            <comment id="12624631" author="thinkallday" created="Fri, 22 Aug 2008 10:12:44 +0100"  >&lt;p&gt;Hi, Knut. Thanks for your advice.&lt;/p&gt;

&lt;p&gt;1.)---test framework. I agree with your method to add comment &quot;      // ignoring expected exception &quot;. However, as what I used is just like Andrew suggested in his &amp;lt;Pragmatic Unit Testing&amp;gt;, I think it can work well.&lt;/p&gt;

&lt;p&gt;2.)---wrong import. I have corrected in the new patch. &lt;/p&gt;

&lt;p&gt;3.)---move the code from UTF8Util.skipPersistent() into the StreamUtil class. It&apos;s a good suggestion, I have adopted it.&lt;/p&gt;

&lt;p&gt;Please check the patch!&lt;/p&gt;

&lt;p&gt;Regards&lt;br/&gt;
Junjie&lt;/p&gt;</comment>
                            <comment id="12624633" author="knutanders" created="Fri, 22 Aug 2008 10:24:45 +0100"  >&lt;p&gt;Thanks, Junjie!&lt;/p&gt;

&lt;p&gt;The patch looks good to me. I&apos;ll run some tests and commit the patch if there are no problems.&lt;/p&gt;</comment>
                            <comment id="12624649" author="knutanders" created="Fri, 22 Aug 2008 11:54:14 +0100"  >&lt;p&gt;Committed revision 688049.&lt;/p&gt;</comment>
                            <comment id="12624901" author="djd" created="Fri, 22 Aug 2008 17:53:06 +0100"  >&lt;p&gt;Some questions/comments about    skipFully(InputStream is) &lt;/p&gt;

&lt;p&gt;What is the purpose of this method, when would it be used? Skipping until EOF seems a useless operation.&lt;/p&gt;

&lt;p&gt;SKIP_BUFFER_SIZE is a somewhat confusing name since no buffer is ever allocated.&lt;/p&gt;

&lt;p&gt;skipPersistent() states that if a fewer number of bytes is skipped then it is guaranteed that eof has been reached, but skipFully() does not take advantage of this, instead it will always perform an extra call to skipPersistent().&lt;/p&gt;

&lt;p&gt;Other input stream utility methods are in org.apache.derby.iapi.services.io, any reason to have this new class in a different package?&lt;/p&gt;</comment>
                            <comment id="12624980" author="knutanders" created="Fri, 22 Aug 2008 22:11:59 +0100"  >&lt;p&gt;Good points, Dan.&lt;/p&gt;

&lt;p&gt;As to the purpose of the method that skips until EOF, that&apos;s the approach we use to find the length of a resettable stream: move to EOF, count the bytes on the way, and reset the stream. Probably clearer to name the method skipUntilEOF instead of skipFully, though.&lt;/p&gt;

&lt;p&gt;I didn&apos;t notice before now, but the class iapi.io.InputStreamUtil contains a method skipBytes(InputStream,long) that looks identical to iapi.util.StreamUtil.skipFully(InputStream,long). Probably better to add more methods to that class, I agree.&lt;/p&gt;</comment>
                            <comment id="12624987" author="djd" created="Fri, 22 Aug 2008 22:46:44 +0100"  >&lt;p&gt;Minor point on the skipPersistent method, it has the following code:&lt;/p&gt;

&lt;p&gt;            long skippedNow = in.skip(bytesToSkip - skipped);&lt;br/&gt;
            if (skippedNow &amp;lt;= 0)&lt;/p&gt;

&lt;p&gt;but skippedNow can never be negative so to be clearer the code should be&lt;/p&gt;

&lt;p&gt;            long skippedNow = in.skip(bytesToSkip - skipped);&lt;br/&gt;
            if (skippedNow  == 0)&lt;/p&gt;</comment>
                            <comment id="12626032" author="thinkallday" created="Wed, 27 Aug 2008 09:44:14 +0100"  >&lt;p&gt;Hi, Mamta and Daniel. Thanks for your advices.  I have done some improvement.&lt;/p&gt;

&lt;p&gt;1.) Delete StreamUtil, move the methods to InputStreamUtil, and move the test class to suitable place.&lt;/p&gt;

&lt;p&gt;2.) Rename SKIP_BUFFER_SIZE to SKIP_FRAGMENT_SIZE to keep clear.&lt;/p&gt;

&lt;p&gt;3.) Use &quot;        if (skippedNow == 0)&quot;  in skipPersistent().&lt;/p&gt;

&lt;p&gt;4.) About skipByte(InputStream,long):&lt;br/&gt;
	/**&lt;br/&gt;
		Skip a number of bytes in the stream. Note that this version takes and returns&lt;br/&gt;
		a long instead of the int used by skipBytes.&lt;/p&gt;

&lt;p&gt;		@exception IOException if an I/O error occurs.&lt;br/&gt;
		@exception EOFException if the end of the stream is reached&lt;/p&gt;

&lt;p&gt;		@see DataInput#skipBytes&lt;br/&gt;
	*/&lt;br/&gt;
	public static long skipBytes(InputStream in, long n) throws IOException {&lt;/p&gt;

&lt;p&gt;		while (n &amp;gt; 0) &lt;/p&gt;
{
			//System.out.println(&quot; skip n = &quot; + n);
			long delta = in.skip(n);
			//System.out.println(&quot; skipped = &quot; + delta);
			if (delta &amp;lt; 0)
				throw new EOFException();
			n -= delta;
		}

&lt;p&gt;		return n;&lt;br/&gt;
	}    &lt;/p&gt;

&lt;p&gt;This method doesn&apos;t work well. First, for &quot;long delta = in.skip&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;; &quot;, delat won&apos;t to be negative, so we can not judge EOFException with &quot;if (delta &amp;lt; 0)&quot;. The method skipPersistent() is fittest to judge EOF has arrived.&lt;br/&gt;
So, I deleted skipBytes(), and replace it with skipFully() where skipBytes() is used.&lt;/p&gt;

&lt;p&gt;5.) Daniel said &quot;skipPersistent() states that if a fewer number of bytes is skipped then it is guaranteed that eof has been reached, but skipFully() does not take advantage of this, instead it will always perform an extra call to skipPersistent(). &quot; Howeve, skipPersistent() is useful to skipFully(), it can guarante that requested num of bytes will be skipped most probably. If we use the common skip() method, we can not judge enough bytes has been skipped fully even having not EOFEception.&lt;/p&gt;

&lt;p&gt;Please check the new patch, thanks!&lt;/p&gt;
</comment>
                            <comment id="12626033" author="thinkallday" created="Wed, 27 Aug 2008 09:45:27 +0100"  >&lt;p&gt;Hi, Mamta and Daniel. Thanks for your advices.  I have done some improvement.&lt;/p&gt;

&lt;p&gt;1.) Delete StreamUtil, move the methods to InputStreamUtil, and move the test class to suitable place.&lt;/p&gt;

&lt;p&gt;2.) Rename SKIP_BUFFER_SIZE to SKIP_FRAGMENT_SIZE to keep clear.&lt;/p&gt;

&lt;p&gt;3.) Use &quot;        if (skippedNow == 0)&quot;  in skipPersistent().&lt;/p&gt;

&lt;p&gt;4.) About skipByte(InputStream,long):&lt;br/&gt;
	/**&lt;br/&gt;
		Skip a number of bytes in the stream. Note that this version takes and returns&lt;br/&gt;
		a long instead of the int used by skipBytes.&lt;/p&gt;

&lt;p&gt;		@exception IOException if an I/O error occurs.&lt;br/&gt;
		@exception EOFException if the end of the stream is reached&lt;/p&gt;

&lt;p&gt;		@see DataInput#skipBytes&lt;br/&gt;
	*/&lt;br/&gt;
	public static long skipBytes(InputStream in, long n) throws IOException {&lt;/p&gt;

&lt;p&gt;		while (n &amp;gt; 0) &lt;/p&gt;
{
			//System.out.println(&quot; skip n = &quot; + n);
			long delta = in.skip(n);
			//System.out.println(&quot; skipped = &quot; + delta);
			if (delta &amp;lt; 0)
				throw new EOFException();
			n -= delta;
		}

&lt;p&gt;		return n;&lt;br/&gt;
	}    &lt;/p&gt;

&lt;p&gt;This method doesn&apos;t work well. First, for &quot;long delta = in.skip&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;; &quot;, delat won&apos;t to be negative, so we can not judge EOFException with &quot;if (delta &amp;lt; 0)&quot;. The method skipPersistent() is fittest to judge EOF has arrived.&lt;br/&gt;
So, I deleted skipBytes(), and replace it with skipFully() where skipBytes() is used.&lt;/p&gt;

&lt;p&gt;5.) Daniel said &quot;skipPersistent() states that if a fewer number of bytes is skipped then it is guaranteed that eof has been reached, but skipFully() does not take advantage of this, instead it will always perform an extra call to skipPersistent(). &quot; Howeve, skipPersistent() is useful to skipFully(), it can guarante that requested num of bytes will be skipped most probably. If we use the common skip() method, we can not judge enough bytes has been skipped fully even having not EOFEception.&lt;/p&gt;

&lt;p&gt;Please check the new patch, thanks!&lt;/p&gt;
</comment>
                            <comment id="12626097" author="knutanders" created="Wed, 27 Aug 2008 14:02:01 +0100"  >&lt;p&gt;Thanks for the new patch. It basically looks good. A couple of small issues:&lt;/p&gt;

&lt;p&gt;1) Package and class name in the header of InputStreamUtilTest should be updated.&lt;/p&gt;

&lt;p&gt;2) I think Dan&apos;s point with skipFully (now skipUntilEOF) was that you don&apos;t necessarily have to call skipPersistent until it returns 0. It is OK to stop calling it once it returns less bytes than requested. So to reduce the number of times skipPersistent is called, skipUntilEOF could do something like this:&lt;/p&gt;

&lt;p&gt;long bytes = 0;&lt;br/&gt;
while (true) {&lt;br/&gt;
    long skipped = skipPersistent(is, SKIP_FRAGMENT_SIZE);&lt;br/&gt;
    bytes += skipped;&lt;br/&gt;
    if (skipped &amp;lt; SKIP_FRAGMENT_SIZE) &lt;/p&gt;
{
        return bytes;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;3) I noticed that SKIP_FRAGMENT_SIZE had been lowered from 1024*1024 to 512*1024 in this patch. I don&apos;t think there&apos;s any reason to keep this constant small. There shouldn&apos;t be any disadvantages with having a higher value, so it might be better to set it to a very high value, for instance Integer.MAX_VALUE.&lt;/p&gt;</comment>
                            <comment id="12626467" author="thinkallday" created="Thu, 28 Aug 2008 08:31:04 +0100"  >&lt;p&gt;HI, Knut. I adopted your advice, please check the patch. Thanks!&lt;/p&gt;</comment>
                            <comment id="12627475" author="knutanders" created="Mon, 1 Sep 2008 15:54:32 +0100"  >&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;The patch looks good to me. I have started the regression tests and plan to commit it if there aren&apos;t any failures.&lt;/p&gt;

&lt;p&gt;Some small things that we may consider to change after the commit:&lt;/p&gt;

&lt;p&gt;  1) Should the test be placed under unitTests/junit instead of functionTests/tests/engine? The existing tests under functionTests/tests/engine seems to boot the full Derby engine, whereas the test in the patch only tests a single internal class and probably fits better under unitTests/junit.&lt;/p&gt;

&lt;p&gt;  2) In skipUntilEOF, the scope of the local variable r could be narrowed down (it could be declared in the body of the while loop).&lt;/p&gt;</comment>
                            <comment id="12627565" author="thinkallday" created="Tue, 2 Sep 2008 03:46:55 +0100"  >&lt;p&gt;OK, Knut. I have adopted your advice. Please check it!&lt;/p&gt;</comment>
                            <comment id="12627693" author="knutanders" created="Tue, 2 Sep 2008 15:18:47 +0100"  >&lt;p&gt;Thanks!&lt;br/&gt;
Committed revision 691253.&lt;/p&gt;</comment>
                            <comment id="12637467" author="knutanders" created="Tue, 7 Oct 2008 14:11:01 +0100"  >&lt;p&gt;Before we close this issue, we should make sure the new utility methods are used these places:&lt;/p&gt;

&lt;p&gt;  EmbedBlob.length()&lt;br/&gt;
  PositionedStoreStream.reposition() (and remove skipFully() from that class)&lt;br/&gt;
  UpdatableBlobStream.updateIfRequired()&lt;br/&gt;
  SQLBinary.getLength()&lt;/p&gt;

&lt;p&gt;The next methods look buggy. They assume that InputStream.skip() or DataInput.skipBytes() always skip the requested number of bytes, unless EOF is reached. They should use skipFully() instead.&lt;/p&gt;

&lt;p&gt;  CompressedNumber.skipInt(DataInput)&lt;br/&gt;
  CompressedNumber.skipInt(InputStream)&lt;br/&gt;
  CompressedNumber.skipLong(DataInput)&lt;br/&gt;
  CompressedNumber.skipLong(InputStream)&lt;br/&gt;
  StoredFieldHeader.readFieldDataLength()&lt;br/&gt;
  StoredPage.readRecordFromStream()&lt;br/&gt;
  StoredPage.skipField()&lt;/p&gt;

&lt;p&gt;Same issue exists in the next two methods, but in their case the stream variable is declared as an ArrayInputStream, which is guaranteed to skip as much as requested, as long as EOF is not reached. We should either use skipFully() or comment why we expect skipBytes() to do the right thing.&lt;/p&gt;

&lt;p&gt;  StoredPage.readOneColumnFromPage()&lt;br/&gt;
  StoredPage.readRecordFromArray()&lt;/p&gt;</comment>
                            <comment id="12644578" author="knutanders" created="Sun, 2 Nov 2008 09:03:36 +0000"  >&lt;p&gt;Attaching a patch to make the utility methods used more places in the code (derby-3770-use-1a.diff). It replaces all the skip loops with calls to skipFully() or skipUntilEOF(). With this patch, the first four methods in the list above use the utility methods.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly.&lt;/p&gt;</comment>
                            <comment id="12644579" author="knutanders" created="Sun, 2 Nov 2008 09:19:54 +0000"  >&lt;p&gt;Committed revision 709856.&lt;/p&gt;</comment>
                            <comment id="12644581" author="knutanders" created="Sun, 2 Nov 2008 10:38:23 +0000"  >&lt;p&gt;The possibly buggy skip methods in CompressedNumber aren&apos;t used anywhere in the code, except in CompressedNumberTest where the DataInput variants are tested. Instead of fixing methods that aren&apos;t used, I think it is better to remove them. The attached patch (derby-3770-remove-1a.diff) removes all the skip methods from CompressedNumber and the test cases for these methods. It also removes another unused method, readIntAndReturnIntPlusOverhead().&lt;/p&gt;

&lt;p&gt;I have started the regression tests on the patch.&lt;/p&gt;</comment>
                            <comment id="12644602" author="knutanders" created="Sun, 2 Nov 2008 18:15:19 +0000"  >&lt;p&gt;The regression tests passed. Committed revision 709900.&lt;/p&gt;</comment>
                            <comment id="12645767" author="knutanders" created="Fri, 7 Nov 2008 14:19:20 +0000"  >&lt;p&gt;The rest of the methods are working on DataInputs, not InputStreams, so the utility methods cannot be used there. I&apos;ve logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3941&quot; title=&quot;Unsafe use of DataInput.skipBytes() in StoredPage and StoredFieldHeader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3941&quot;&gt;&lt;del&gt;DERBY-3941&lt;/del&gt;&lt;/a&gt; to handle the remaining problems. Marking this issue as resolved.&lt;/p&gt;</comment>
                            <comment id="12701940" author="kristwaa" created="Thu, 23 Apr 2009 14:57:02 +0100"  >&lt;p&gt;Utility class finished.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12408014">DERBY-3941</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12387930" name="derby-3770-1.patch" size="8620" author="thinkallday" created="Mon, 11 Aug 2008 08:43:01 +0100"/>
                            <attachment id="12387931" name="derby-3770-1.stat" size="276" author="thinkallday" created="Mon, 11 Aug 2008 08:43:01 +0100"/>
                            <attachment id="12388358" name="derby-3770-2.patch" size="8826" author="thinkallday" created="Sat, 16 Aug 2008 11:40:36 +0100"/>
                            <attachment id="12388357" name="derby-3770-2.stat" size="276" author="thinkallday" created="Sat, 16 Aug 2008 11:40:35 +0100"/>
                            <attachment id="12388728" name="derby-3770-3.patch" size="11992" author="thinkallday" created="Fri, 22 Aug 2008 10:12:44 +0100"/>
                            <attachment id="12388729" name="derby-3770-3.stat" size="276" author="thinkallday" created="Fri, 22 Aug 2008 10:12:44 +0100"/>
                            <attachment id="12388986" name="derby-3770-4.patch" size="19086" author="thinkallday" created="Wed, 27 Aug 2008 09:45:27 +0100"/>
                            <attachment id="12388984" name="derby-3770-4.patch" size="19086" author="thinkallday" created="Wed, 27 Aug 2008 09:44:14 +0100"/>
                            <attachment id="12388987" name="derby-3770-4.stat" size="631" author="thinkallday" created="Wed, 27 Aug 2008 09:45:27 +0100"/>
                            <attachment id="12388985" name="derby-3770-4.stat" size="631" author="thinkallday" created="Wed, 27 Aug 2008 09:44:14 +0100"/>
                            <attachment id="12389071" name="derby-3770-5.patch" size="19780" author="thinkallday" created="Thu, 28 Aug 2008 08:31:02 +0100"/>
                            <attachment id="12389072" name="derby-3770-5.stat" size="631" author="thinkallday" created="Thu, 28 Aug 2008 08:31:03 +0100"/>
                            <attachment id="12389322" name="derby-3770-6.patch" size="19213" author="thinkallday" created="Tue, 2 Sep 2008 03:46:55 +0100"/>
                            <attachment id="12389323" name="derby-3770-6.stat" size="520" author="thinkallday" created="Tue, 2 Sep 2008 03:46:55 +0100"/>
                            <attachment id="12393209" name="derby-3770-remove-1a.diff" size="7086" author="knutanders" created="Sun, 2 Nov 2008 10:38:23 +0000"/>
                            <attachment id="12393208" name="derby-3770-use-1a.diff" size="7797" author="knutanders" created="Sun, 2 Nov 2008 09:03:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 Aug 2008 07:43:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30994</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xyv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39321</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>