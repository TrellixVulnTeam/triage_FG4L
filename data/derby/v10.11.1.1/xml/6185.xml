<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:17:11 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6185/DERBY-6185.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6185] Query against view  with &quot;where name LIKE &apos;Col1&apos; ESCAPE &apos;\&apos; &quot; failed</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6185</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The error can be reproduced,&lt;br/&gt;
1) create table mytbl1 (name clob(10K));&lt;br/&gt;
2) create table mytbl2 (name clob(10K));&lt;br/&gt;
3) create view myview (name) as select t1.name from mytbl1 t1 union all select t2.name from mytbl2 t2;&lt;br/&gt;
4) select name from myview where name LIKE &apos;Col1&apos; ESCAPE &apos;\&apos;;&lt;/p&gt;

&lt;p&gt;&quot;4)&quot; failed with error message &quot;&lt;br/&gt;
ERROR 42818: Comparisons between &apos;CLOB (UCS_BASIC)&apos; and &apos;CHAR (UCS_BASIC)&apos; are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = &apos;T1&apos;)&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromList.pushPredicates(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.SelectNode.preprocess(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)&lt;br/&gt;
	... 19 more&lt;/p&gt;</description>
                <environment>windows 7</environment>
        <key id="12642754">DERBY-6185</key>
            <summary>Query against view  with &quot;where name LIKE &apos;Col1&apos; ESCAPE &apos;\&apos; &quot; failed</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="rqu">Rong Qu</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Apr 2013 16:41:28 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:26 +0000</updated>
                            <resolved>Fri, 26 Apr 2013 03:04:02 +0100</resolved>
                                    <version>10.1.3.3</version>
                    <version>10.5.3.2</version>
                    <version>10.8.2.2</version>
                    <version>10.8.3.0</version>
                                    <fixVersion>10.8.3.3</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.2.0</fixVersion>
                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13632974" author="knutanders" created="Tue, 16 Apr 2013 17:27:18 +0100"  >&lt;p&gt;My guess is that name LIKE &apos;Col1&apos; gets optimized to name = &apos;Col1&apos;, which fails because Derby does not support equality comparisons between CLOBs. There is code in place to prevent this optimization for CLOBs, for example in LikeEscapeOperatorNode.preprocess():&lt;/p&gt;

&lt;p&gt;        /* Don&apos;t try to optimize for (C)LOB type since it doesn&apos;t allow &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;comparison.&lt;/li&gt;
	&lt;li&gt;RESOLVE: should this check be for LONG VARCHAR also?&lt;br/&gt;
         */&lt;br/&gt;
        if (receiver.getTypeId().getSQLTypeName().equals(&quot;CLOB&quot;)) 
        {
            return this;
        }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But maybe the query in question takes a different code path and doesn&apos;t bump into this check.&lt;/p&gt;</comment>
                            <comment id="13633164" author="mikem" created="Tue, 16 Apr 2013 19:42:04 +0100"  >&lt;p&gt;does derby support like operation on clob&apos;s?&lt;/p&gt;</comment>
                            <comment id="13633185" author="mikem" created="Tue, 16 Apr 2013 19:56:49 +0100"  >&lt;p&gt;seems likely this issue is related to feature request to allow = and &amp;lt;&amp;gt; on clobs.&lt;br/&gt;
I think when clobs first came out comparison between clobs was not allowed in standard.  It looks like that has changed, as noted in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5241&quot; title=&quot;The = and &amp;lt;&amp;gt; operators should be supported on CLOBs.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5241&quot;&gt;DERBY-5241&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13633191" author="mikem" created="Tue, 16 Apr 2013 19:59:47 +0100"  >&lt;p&gt;Here is doc reference that notes no comparison&apos;s are supported in clobs in 10.8.&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/10.8/ref/rrefsqlj58560.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.8/ref/rrefsqlj58560.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13633211" author="rqu" created="Tue, 16 Apr 2013 20:09:13 +0100"  >&lt;p&gt;Forgot to mention that the same query worked fine if the query is against table, not view.&lt;/p&gt;</comment>
                            <comment id="13633404" author="mamtas" created="Tue, 16 Apr 2013 22:39:53 +0100"  >&lt;p&gt;If I recall it right, = and &amp;lt;&amp;gt; are not supported on CLOB/BLOB but LIKE is allowed. For simplicity purposes, I removed the ESCAPE clause from the query and the behavior is the same as seen by Rong.&lt;br/&gt;
&amp;#8211; does not work&lt;br/&gt;
select name from myview where name like &apos;Col1&apos;;&lt;br/&gt;
&amp;#8211; works&lt;br/&gt;
select name from mytbl1 where name like &apos;Col1&apos;;&lt;/p&gt;

&lt;p&gt;Debugging the code a little bit, I found that we do the check for comparibility in BinaryComparisonOperatorNode.bindComparisonOperator() and part of the code is as follows&lt;br/&gt;
          if (!cmp &amp;amp;&amp;amp; !forQueryRewrite) {&lt;br/&gt;
			throw StandardException.newException(SQLState.LANG_NOT_COMPARABLE, &lt;br/&gt;
					leftOperand.getTypeServices().getSQLTypeNameWithCollation() ,&lt;br/&gt;
					rightOperand.getTypeServices().getSQLTypeNameWithCollation());&lt;/p&gt;

&lt;p&gt;For the case with table, we come to this code in the bind phase and forQueryRewrite has been set to true in LikeEscapeOperatorNode.bindExpression&lt;br/&gt;
                    // Set forQueryRewrite to bypass comparability checks&lt;br/&gt;
                    equals.setForQueryRewrite(true);&lt;/p&gt;

&lt;p&gt;For the case with view, we come to the same code as above during the bind phase and forQueryRewrite has been set to true and hence bind goes through fine. But we come back to BinaryComparisonOperatorNode.bindComparisonOperator check in the optimizer&apos;s pre-processing phase and at that time, forQueryRewrite is false and that is why we throw the exception. May be we have a bug here. I want to look at the code little more to see if I can see what the issue might be. But I will appreciate any feedback from the list to see if I am on the right track. Thanks&lt;/p&gt;</comment>
                            <comment id="13633433" author="mamtas" created="Tue, 16 Apr 2013 22:53:00 +0100"  >&lt;p&gt;Here is what I tried in ij&lt;br/&gt;
java -Dderby.language.logQueryPlan=true -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
connect &apos;jdbc:derby:db1;create=true&apos;;&lt;br/&gt;
create table mytbl1 (name clob(10K));&lt;br/&gt;
create table mytbl2 (name clob(10K));&lt;br/&gt;
create view myview (name) as select t1.name from mytbl1 t1 union all select t2.name from mytbl2 t2;&lt;br/&gt;
--fails&lt;br/&gt;
select name from myview where name like &apos;Col1&apos;;&lt;br/&gt;
&amp;#8211; passes&lt;br/&gt;
select name from mytbl1 where name like  &apos;Col1&apos;;&lt;br/&gt;
&amp;#8211; fails because = not supported on CLOB&lt;br/&gt;
select name from mytbl1 where name = &apos;Col1&apos;;&lt;br/&gt;
&amp;#8211; fails because &amp;lt;&amp;gt; not supported on CLOB&lt;br/&gt;
select name from mytbl1 where name &amp;lt;&amp;gt; &apos;Col1&apos;;&lt;/p&gt;</comment>
                            <comment id="13633440" author="mikem" created="Tue, 16 Apr 2013 22:56:58 +0100"  >&lt;p&gt;tried against top of 10.5 branch and did not work there also.&lt;/p&gt;</comment>
                            <comment id="13633459" author="mikem" created="Tue, 16 Apr 2013 23:04:15 +0100"  >&lt;p&gt;tried against top of 10.1 branch, failed with different error message, and worked directly against table:&lt;br/&gt;
select name from myview where name like &apos;Col1&apos;;&lt;br/&gt;
ERROR 42818: Comparisons between &apos;CLOB&apos; and &apos;CHAR&apos; are not supported.&lt;br/&gt;
ij&amp;gt; &amp;#8211; passes&lt;br/&gt;
select name from mytbl1 where name like  &apos;Col1&apos;;&lt;br/&gt;
NAME                                                                            &lt;br/&gt;
--------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;</comment>
                            <comment id="13633471" author="mikem" created="Tue, 16 Apr 2013 23:09:19 +0100"  >&lt;p&gt;fails all the way back to 10.1 so does not look like a regression.&lt;/p&gt;</comment>
                            <comment id="13633503" author="mamtas" created="Tue, 16 Apr 2013 23:39:34 +0100"  >&lt;p&gt;To rule the views out, tried query with UNION and LIKE clause and that failed too&lt;br/&gt;
select name from (select name from mytbl1 t1 union all select t2.name from mytbl2 t2) as s where name like &apos;Col1&apos;;&lt;/p&gt;</comment>
                            <comment id="13634016" author="knutanders" created="Wed, 17 Apr 2013 14:21:41 +0100"  >&lt;p&gt;When LikeEscapeOperatorNode optimizes name LIKE &apos;Col1&apos; to name = &apos;Col1&apos;, it sets a flag on the generated equals operator to bypass the comparability checks:&lt;/p&gt;

&lt;p&gt;                    // Set forQueryRewrite to bypass comparability checks&lt;br/&gt;
                    equals.setForQueryRewrite(true);&lt;/p&gt;

&lt;p&gt;This makes the equals operator work even if the column is a CLOB. However, when pushing predicates into a sub-query (in PredicateList.pushExpressionsIntoSelect()) the generated operator is cloned, and the clone does not have the for query rewrite flag set.&lt;/p&gt;

&lt;p&gt;The attached patch makes PredicateList copy the flag when cloning the operator. This made the query succeed.&lt;/p&gt;

&lt;p&gt;I&apos;ll add a test case too.&lt;/p&gt;</comment>
                            <comment id="13634154" author="mamtas" created="Wed, 17 Apr 2013 16:50:46 +0100"  >&lt;p&gt;Hi Knut, I tried the exact same change last night and ran derbyall and junit suite with it and the existing regression tests passed with no problems. Thought I would share the results of the test runs so you don&apos;t have to re-run them in case you haven&apos;t yet. &lt;/p&gt;

&lt;p&gt;Also, I searched the code for new node creation for BinaryRelationalOperatorNode and found that there is at least one another place where we clone it but do not copy the rewrite flag. That code is in Predicate.getPredScopedForResultSet():979&lt;/p&gt;</comment>
                            <comment id="13634175" author="knutanders" created="Wed, 17 Apr 2013 17:09:49 +0100"  >&lt;p&gt;Oops, I somehow missed that comment when I read through the new comments on this issue today. Looks like you&apos;ve got this one under control, then. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Changing the issue back to unassigned status. Feel free to grab it, Mamta.&lt;/p&gt;

&lt;p&gt;I was thinking what if we changed the init() method of this node type to take an extra parameter with the value of the field. Then it would be impossible to create a new instance without at least having considered what value to put into that field. That&apos;d probably make it less likely to be missed.&lt;/p&gt;</comment>
                            <comment id="13634204" author="mamtas" created="Wed, 17 Apr 2013 18:06:10 +0100"  >&lt;p&gt;Hi Knut, I will work on changing the init method(s) for the extra parameter for forQueryRewrite. It looks like there are two init methods, one with just left &amp;amp; right operand and the other one with left operand, right operand &amp;amp; an InListOperatorNode. May be we should change both to have the extra parameter which in most cases will be passed as false but in cases of cloning, we will pass the original node&apos;s forQueryRewrite value. Does that sound right to you? I will work on the change to see how it goes but would appreciate any feedback.&lt;/p&gt;</comment>
                            <comment id="13634665" author="mamtas" created="Thu, 18 Apr 2013 01:17:56 +0100"  >&lt;p&gt;Adding a new param to the init methods is changing lots of classes. I am working on those changes. Other than the 2 cases,  Predicate.getPredScopedForResultSet():979 and PredicateList.pushExpressionsIntoSelect()), every where else I believe we need to send FALSE for the new param for forQueryRewrite. Once I have all the changes made, I will submit a patch before firing the tests so we can decide if we should change all these files or simply have the 2 identified classes set the forQueryRewrite by calling setForQueryRewrite method after creating the cloned node. Advantage of changing the init method, like Knut mentioned, is that when we create a new instance of these nodes, we will need to think what should be the value of forQueryRewrite rather than forget about it accidentally.&lt;/p&gt;</comment>
                            <comment id="13635048" author="knutanders" created="Thu, 18 Apr 2013 10:56:41 +0100"  >&lt;p&gt;One alternative might be to let BinaryRelationalOperatorNode override ValueNode.getClone() and change all cloners to use that method instead of constructing a new node manually. Then we don&apos;t need to change those callers that produce a truly new (not cloned) node, and the complexity of cloning a node is isolated to that single method, which allows shorter and clearer code where clones are needed.&lt;/p&gt;</comment>
                            <comment id="13635238" author="mamtas" created="Thu, 18 Apr 2013 16:24:28 +0100"  >&lt;p&gt;Here is a patch which adds the new parameter to the init methods so every initialization of these nodes will remember to supply the right value. I will finish taking care of using spaces rather than tabs but wanted to send the patch out for review. I will also fire derbyall and junit test suite,&lt;/p&gt;</comment>
                            <comment id="13635445" author="mamtas" created="Thu, 18 Apr 2013 19:00:46 +0100"  >&lt;p&gt;Even though we have had to touch handful of files because of the new parameter, but I think it is more foolproof since some thought will have to go in passing the correct value for the new parameter. ValueNode.getClone() overwrite is a good suggestion too but the user will need to be aware of that method rather than instantiating a new node. So, advantage of ValueNode.getClone() is less code will be touched and advantage of init methods is the new param won&apos;t be overlooked. I will be fine with either approach if one way seems better than the other but in the mean time, I will start working on writing new regression tests.&lt;/p&gt;</comment>
                            <comment id="13636288" author="knutanders" created="Fri, 19 Apr 2013 12:27:44 +0100"  >&lt;p&gt;The approach in the patch looks fine to me. Tiny nit: When constructing a java.lang.Boolean instance in PredicateList, using Boolean.valueOf(bool) would be slightly better than new Boolean(bool), as the former doesn&apos;t need to allocate a new instance.&lt;/p&gt;</comment>
                            <comment id="13636683" author="mamtas" created="Fri, 19 Apr 2013 19:15:51 +0100"  >&lt;p&gt;Knut, thanks for reviewing the patch. I will make the change suggested by you. Also, I ran derbyall and existing junit regression tests and they all ran fine with the patch attached yesterday. Once I have all the new regression tests and editing changes made, I will post another patch. Thanks&lt;/p&gt;</comment>
                            <comment id="13637301" author="mamtas" created="Sat, 20 Apr 2013 17:38:04 +0100"  >&lt;p&gt;Attaching patch, DERBY_6185_diff_patch3.txt, which has regression tests and change made based on Knut&apos;s suggestion of using Bollean.valueOf(book) and comments and some editing changes. Please let me know if there is any feedback. derbyall ran fine but I have not been able to run junit suite because I keep getting can&apos;t build derbtesting.jar when I try &lt;br/&gt;
ant -Ddeprecation=off buildjars&lt;br/&gt;
I need the Derby jar files in order to run junit suites.All. I will try to debug what is the problem with building the jar files. The output from the jar build towards the end says&lt;/p&gt;


&lt;p&gt;derbytestingjar:&lt;/p&gt;

&lt;p&gt;BUILD FAILED&lt;br/&gt;
C:\p4clients\svnmain\client3\trunk\build.xml:1978: problem opening C:\p4clients\svnmain\client3\trunk\jars\sane\derbyTesting.jar&lt;/p&gt;
</comment>
                            <comment id="13637304" author="mamtas" created="Sat, 20 Apr 2013 18:03:59 +0100"  >&lt;p&gt;I have another client for trunk and I moved all the changes to that client and am able to build the jar files properly there. I have fired the junit suite there and will post the results once the tests finish. &lt;/p&gt;</comment>
                            <comment id="13637814" author="knutanders" created="Mon, 22 Apr 2013 08:41:53 +0100"  >&lt;p&gt;It might be good to add some data to the tables in the test, so it verifies that the correct results are returned and not only that the queries compile.&lt;/p&gt;</comment>
                            <comment id="13638299" author="mamtas" created="Mon, 22 Apr 2013 19:45:09 +0100"  >&lt;p&gt;Knut, thanks for your suggestion to add data to the test. I see that we return the expected results for table, view and union when using Statement object but for PreparedStatement, we do not find any matching rows for the LIKE clause on the CLOB column. I tried PreparedStatement on CLOB column with LIKE clause in a different trunk client (which does not have any other changes) and see that we do not result the expected row even in that client. I am attaching the junit test that I tried in a clean trunk client if someone wants to give it a try. Since the behavior of PreparedStatement on a table with CLOB is unrelated to this jira which is about views/unions not working correctly even with Statement object, can we take the PreparedStatement case as a separate jira? Thanks&lt;/p&gt;</comment>
                            <comment id="13638304" author="mamtas" created="Mon, 22 Apr 2013 19:48:24 +0100"  >&lt;p&gt;I am attaching DERBY_6185_diff_patch4.txt which inserts data into the junit regression test tables to see if we return correct rows. The correct rows are returned for Statement object but not for PreparedStatement object. Since PreparedStatement behavior exists even for tables(and not just views and UNION) with CLOB column and LIKE clause, may be that issue can be handled as part of another jira. If community is ok with that, I will go ahead and commit DERBY_6185_diff_patch4.txt. Thanks&lt;/p&gt;</comment>
                            <comment id="13638458" author="mamtas" created="Mon, 22 Apr 2013 22:38:25 +0100"  >&lt;p&gt;Forgot to mention that derbyall and junit tests ran fine with patch DERBY_6185_diff_patch4.txt &lt;/p&gt;</comment>
                            <comment id="13638997" author="knutanders" created="Tue, 23 Apr 2013 13:42:42 +0100"  >&lt;p&gt;Do the prepared statements work if you use&lt;br/&gt;
    ps.setString(1, &quot;Col1&quot;);&lt;br/&gt;
instead of&lt;br/&gt;
    ps.setString(1, &quot;&apos;Col1&apos;&quot;);&lt;br/&gt;
?&lt;/p&gt;

&lt;p&gt;The single quotes are not actually part of the pattern, so they should be skipped when the pattern is passed in with setString().&lt;/p&gt;</comment>
                            <comment id="13639162" author="mamtas" created="Tue, 23 Apr 2013 16:34:10 +0100"  >&lt;p&gt;Knut, my mistake that I was not attentive enough to notice that I was using single quotes around the String I actually wanted searched. It of course works after removing those quotes for all the three variaiotns, table, view and UNION. I will go ahead and commit the changes for this jira soon. Thank you!&lt;/p&gt;</comment>
                            <comment id="13639186" author="mamtas" created="Tue, 23 Apr 2013 17:02:56 +0100"  >&lt;p&gt;Committed the changes into trunk with revision 1471022&lt;/p&gt;</comment>
                            <comment id="13641441" author="mamtas" created="Thu, 25 Apr 2013 06:25:08 +0100"  >&lt;p&gt;Backported to 10.10 with revision 1475634&lt;/p&gt;</comment>
                            <comment id="13641909" author="mamtas" created="Thu, 25 Apr 2013 16:57:31 +0100"  >&lt;p&gt;Backported to 10.9 with revision 1475833&lt;/p&gt;</comment>
                            <comment id="13642512" author="mamtas" created="Fri, 26 Apr 2013 03:03:24 +0100"  >&lt;p&gt;Backported to 10.8 with revision 1476021. I do not plan to backport it any further at this point.&lt;/p&gt;</comment>
                            <comment id="14284800" author="myrna" created="Wed, 21 Jan 2015 00:23:26 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12507773">DERBY-5241</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12579337" name="DERBY_6185_diff_patch2.txt" size="14446" author="mamtas" created="Thu, 18 Apr 2013 16:24:28 +0100"/>
                            <attachment id="12579682" name="DERBY_6185_diff_patch3.txt" size="18235" author="mamtas" created="Sat, 20 Apr 2013 17:38:04 +0100"/>
                            <attachment id="12579878" name="DERBY_6185_diff_patch4.txt" size="19162" author="mamtas" created="Mon, 22 Apr 2013 19:48:24 +0100"/>
                            <attachment id="12579877" name="ViewsTest.java" size="34430" author="mamtas" created="Mon, 22 Apr 2013 19:45:09 +0100"/>
                            <attachment id="12579122" name="set-for-rewrite.diff" size="1019" author="knutanders" created="Wed, 17 Apr 2013 14:21:41 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Apr 2013 16:27:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>323168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzdlvj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>323513</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>