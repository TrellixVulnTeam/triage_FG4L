<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:28:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2602/DERBY-2602.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2602] TIMESTAMP value is truncated  when return to client</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2602</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In ParameterMappingTest   I see the following differences between embedded and client.  Client is truncating the TIMESTAMP value.  Look for this bug number in the test for reproduction.&lt;/p&gt;


&lt;p&gt; case java.sql.Types.TIMESTAMP:&lt;br/&gt;
            if (param == 2)&lt;br/&gt;
                if (usingEmbedded())&lt;br/&gt;
                    assertEquals(&quot;2004-03-12 21:14:24.938222433&quot;, val.toString());&lt;br/&gt;
                else&lt;br/&gt;
                    assertEquals(&quot;2004-03-12 21:14:24.938222&quot;, val.toString());&lt;br/&gt;
            else if (param == 3)&lt;br/&gt;
                if (usingEmbedded())&lt;br/&gt;
                    assertEquals(&quot;2004-04-12 04:25:26.462983731&quot;, val.toString());&lt;br/&gt;
                else&lt;br/&gt;
                    assertEquals(&quot;2004-04-12 04:25:26.462983&quot;, val.toString());&lt;br/&gt;
            break; &lt;/p&gt;</description>
                <environment></environment>
        <key id="12368487">DERBY-2602</key>
            <summary>TIMESTAMP value is truncated  when return to client</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 May 2007 20:36:12 +0100</created>
                <updated>Wed, 12 Jan 2011 22:24:18 +0000</updated>
                            <resolved>Tue, 13 Jul 2010 02:36:05 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12493187" author="djd" created="Wed, 2 May 2007 20:42:15 +0100"  >&lt;p&gt;Is this just when it is converted to a string using getString() or is the value as a java.sql.Timestamp object also incorrect?&lt;/p&gt;</comment>
                            <comment id="12493250" author="army" created="Thu, 3 May 2007 00:55:54 +0100"  >&lt;p&gt;I was looking at the &quot;wrong results&quot; queries linked to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2034&quot; title=&quot;Tracking of bugs that lead to incorrect results being stored or returned to the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2034&quot;&gt;&lt;del&gt;DERBY-2034&lt;/del&gt;&lt;/a&gt; and noticed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1816&quot; title=&quot;Client&amp;#39;s ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1816&quot;&gt;&lt;del&gt;DERBY-1816&lt;/del&gt;&lt;/a&gt;.  Is there any chance that this issue is related to that one?  If not, should this one be linked to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2034&quot; title=&quot;Tracking of bugs that lead to incorrect results being stored or returned to the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2034&quot;&gt;&lt;del&gt;DERBY-2034&lt;/del&gt;&lt;/a&gt;, as well?&lt;/p&gt;</comment>
                            <comment id="12493489" author="kmarsden" created="Thu, 3 May 2007 20:52:39 +0100"  >&lt;p&gt;The issue is with java.sql.Timestamp object as well &lt;br/&gt;
Attached is a reproduction which shows the following behavior.&lt;/p&gt;

&lt;p&gt;Embedded Timestamp&lt;br/&gt;
getHours:17&lt;br/&gt;
getMinutes:14&lt;br/&gt;
getSeconds:24&lt;br/&gt;
getNanos:97625551&lt;/p&gt;

&lt;p&gt;Network Timestamp&lt;br/&gt;
getHours:17&lt;br/&gt;
getMinutes:14&lt;br/&gt;
getSeconds:24&lt;br/&gt;
getNanos:97625000&lt;/p&gt;
</comment>
                            <comment id="12493490" author="kmarsden" created="Thu, 3 May 2007 20:55:03 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2602&quot; title=&quot;TIMESTAMP value is truncated  when return to client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2602&quot;&gt;&lt;del&gt;DERBY-2602&lt;/del&gt;&lt;/a&gt;  is likely the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1816&quot; title=&quot;Client&amp;#39;s ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1816&quot;&gt;&lt;del&gt;DERBY-1816&lt;/del&gt;&lt;/a&gt;, but I am not sure enough of that to mark it duplicate.  Linking the two issues for future reference.&lt;/p&gt;</comment>
                            <comment id="12493500" author="djd" created="Thu, 3 May 2007 21:19:16 +0100"  >&lt;p&gt;I don&apos;t think &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2602&quot; title=&quot;TIMESTAMP value is truncated  when return to client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2602&quot;&gt;&lt;del&gt;DERBY-2602&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1816&quot; title=&quot;Client&amp;#39;s ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1816&quot;&gt;&lt;del&gt;DERBY-1816&lt;/del&gt;&lt;/a&gt; are the same issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1816&quot; title=&quot;Client&amp;#39;s ResultSet.getTime() on a SQL TIMESTAMP column loses the sub-second resolution and always has a milli-second value of zero.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1816&quot;&gt;&lt;del&gt;DERBY-1816&lt;/del&gt;&lt;/a&gt; - SQL TIMESTAMP column to java.sql.Time object via RS.getTime() has a zero milli-seconds value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2602&quot; title=&quot;TIMESTAMP value is truncated  when return to client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2602&quot;&gt;&lt;del&gt;DERBY-2602&lt;/del&gt;&lt;/a&gt; - SQL TIMESTAMP column to java.sql.Timestamp object via RS.getTimestamp() has a truncated, but non-zero, nano-seconds value.&lt;/p&gt;

&lt;p&gt;If they were the same I would expect 2602 to show a zero value for the factional second part.&lt;/p&gt;</comment>
                            <comment id="12493502" author="army" created="Thu, 3 May 2007 21:26:41 +0100"  >&lt;p&gt;Okay, thanks Dan.  I couldn&apos;t tell from the summary if &quot;getTimestamp()&quot; or something else was being used.  Sorry for the red herring.&lt;/p&gt;</comment>
                            <comment id="12493814" author="army" created="Fri, 4 May 2007 23:21:10 +0100"  >&lt;p&gt;For what little it may be worth, code comments in client/am/PreparedStatement seem to suggest that this truncation was intentional (or at least, known) at &quot;set&quot; time:&lt;/p&gt;

&lt;p&gt;~line 873:&lt;/p&gt;

&lt;p&gt;    setInput(parameterIndex, x);&lt;br/&gt;
    // once the nanosecond field of timestamp is trim to microsecond for DERBY, should we throw a warning&lt;br/&gt;
    //if (getParameterType (parameterIndex) == java.sql.Types.TIMESTAMP &amp;amp;&amp;amp; x.getNanos() % 1000 != 0)&lt;br/&gt;
    //  accumulateWarning (new SqlWarning (agent_.logWriter_, &quot;DERBY timestamp can only store up to microsecond, conversion from nanosecond to microsecond causes rounding.&quot;));&lt;/p&gt;

&lt;p&gt;Of course the warning that&apos;s commented out refers to &quot;rounding&quot;, which isn&apos;t quite right--we actually truncate.&lt;/p&gt;

&lt;p&gt;May be relevant, maybe not.&lt;/p&gt;</comment>
                            <comment id="12542771" author="mayureshnirhali" created="Thu, 15 Nov 2007 13:31:23 +0000"  >&lt;p&gt;A quick look at client/amt/PreparedStatement:setTimestamp(int parameterIndex, java.sql.Timestamp x) showed following comment,&lt;/p&gt;

&lt;p&gt;         setInput(parameterIndex, x);&lt;br/&gt;
                // once the nanosecond field of timestamp is trim to microsecond for DERBY, should we throw a warning&lt;br/&gt;
                //if (getParameterType (parameterIndex) == java.sql.Types.TIMESTAMP &amp;amp;&amp;amp; x.getNanos() % 1000 != 0)&lt;br/&gt;
                //  accumulateWarning (new SqlWarning (agent_.logWriter_, &quot;DERBY timestamp can only store up to microsecond, conversion from nanosecond to microsecond causes rounding.&quot;));&lt;/p&gt;


&lt;p&gt;There seems to be some reason for trimming here. Before going further, I would like to know if anyone knows why it was done this way ????&lt;/p&gt;
</comment>
                            <comment id="12648301" author="kmarsden" created="Mon, 17 Nov 2008 20:09:09 +0000"  >&lt;p&gt;Mayuresh, I see that you left this issue with a question that was unanswered.  Sorry about that. Are you still interested in working on this issue. If so, I will look at your question. Otherwise please unassign yourself.&lt;/p&gt;</comment>
                            <comment id="12662430" author="kmarsden" created="Fri, 9 Jan 2009 17:13:37 +0000"  >&lt;p&gt;Haven&apos;t heard from the issue owner in some time.  Unassigning so maybe someone else can pick it up.  Please reassign yourself if you are still interested in pursuing this issue.&lt;/p&gt;
</comment>
                            <comment id="12784964" author="rhillegas" created="Wed, 2 Dec 2009 19:12:24 +0000"  >&lt;p&gt;Does anyone know the answer to Mayuresh&apos;s question? It seems to be the crux of the problem.&lt;/p&gt;</comment>
                            <comment id="12853519" author="rhillegas" created="Mon, 5 Apr 2010 20:58:59 +0100"  >&lt;p&gt;The Derby timestamp data type is simply a JDBC timestamp, that is, a java.sql.Timestamp. The header comment on that class indicates that it was created for the express purpose of allowing timestamps to have nanosecond precision.&lt;/p&gt;

&lt;p&gt;The SQL Standard does not impose any limitation on the precision of timestamps, leaving the issue to the implementer. The relevant sections of the Standard are part 2, section 4.6 (Datetimes and intervals) and part 2, section 5.3 (&amp;lt;literal&amp;gt;).&lt;/p&gt;

&lt;p&gt;The embedded driver supports the full range of timestamp values allowed by JDBC. In contrast, the network driver limits timestamps to microsecond precision. This truncation occurs both when timestamps pass from the client to the server and also in the reverse direction. I believe that that is the limit imposed by DB2; see &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/dzichelp/v2r2/index.jsp?topic=/com.ibm.db29.doc.intro/db2z_datetimetimestamp.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://publib.boulder.ibm.com/infocenter/dzichelp/v2r2/index.jsp?topic=/com.ibm.db29.doc.intro/db2z_datetimetimestamp.htm&lt;/a&gt; The microsecond limit is also enforced by Derby&apos;s builtin TIMESTAMP() function; see the header comment for SQLTimestamp.parseDateOrTimestamp(), which notes that an exception is raised if the argument to TIMESTAMP() &quot;is incorrect for an IBM standard timestamp&quot;.&lt;/p&gt;

&lt;p&gt;I believe that the network behavior should conform to the existing embedded behavior and that Derby&apos;s network layer should support the full range of timestamps allowed by JDBC. There are of course compatibility issues here. I propose the following solution:&lt;/p&gt;

&lt;p&gt;o If both the client and the server are Derby code at 10.6 or higher, then timestamps should not be truncated.&lt;/p&gt;

&lt;p&gt;o However, if either the client or the server is not Derby code at 10.6 or higher, then truncation should continue to occur.&lt;/p&gt;

&lt;p&gt;Implementation notes:&lt;/p&gt;

&lt;p&gt;The truncation client-&amp;gt;server happens in DateTime.timestampToTimestampBytes().&lt;br/&gt;
   which is read by DRDAConnThread.readAndSetParams()&lt;/p&gt;

&lt;p&gt;The truncation server-&amp;gt;client happens in DRDAConnThread.writeFdocaVal()&lt;br/&gt;
  which is read by DateTime.timestampBytesToTimestamp()&lt;/p&gt;</comment>
                            <comment id="12856134" author="rhillegas" created="Mon, 12 Apr 2010 20:29:09 +0100"  >&lt;p&gt;Attaching derby-2602-01-ad-dontTruncate.diff. This patch makes the client and server exchange full nanosecond-precision timestamps as happens in the embedded situation.&lt;/p&gt;

&lt;p&gt;Although the regression tests pass, this patch is not ready for commit. I would like to verify the compatibility of this patch with older clients.&lt;/p&gt;

&lt;p&gt;Once this new behavior is committed, we may want to correct some metadata. For instance, the maximum column width for timestamps is 26 characters today. That is correct for timestamps which only have millisecond-precision, but for full nanosecond-precision, the column width should be 29 characters. However, I don&apos;t want to muddy this patch with that change because I suspect that it may affect a lot of test results.&lt;/p&gt;

&lt;p&gt;One of the tricky bits about coding this patch was tracking down the relevant places in the code where the magic number 26 was used. I have replaced those magic numbers with a constant. Hopefully that will help the next person who has to study this logic.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/TypeId.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/reference/DRDAConstants.java&lt;/p&gt;

&lt;p&gt;Introduce constants to replace magic numbers.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/drda/org/apache/derby/impl/drda/AppRequester.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetAgent.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetDatabaseMetaData.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetConnection.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Connection.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Agent.java&lt;/p&gt;

&lt;p&gt;Create methods for determining whether the connection supports nanosecond-precision timestamps.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;br/&gt;
M      java/drda/org/apache/derby/impl/drda/FdocaConstants.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/Request.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Cursor.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/DateTime.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetStatementRequest.java&lt;/p&gt;

&lt;p&gt;Logic to use full nanosecond-precision timestamps if the connection allows it.&lt;/p&gt;


&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java&lt;/p&gt;

&lt;p&gt;Updated this test to account for the corrected behavior.&lt;/p&gt;</comment>
                            <comment id="12856399" author="knutanders" created="Tue, 13 Apr 2010 13:12:40 +0100"  >&lt;p&gt;The patch looks fine to me. I only have two minor comments:&lt;/p&gt;

&lt;p&gt;1) The other serverSupports* helper methods are located in NetConnection instead of NetAgent. I think moving serverSupportsTimestampNanoseconds() over there as well would give the following benefits:&lt;/p&gt;

&lt;p&gt;    a) no need to allocate a new NetDatabaseMetaData object and cache it in NetAgent, since NetConnection already has a cached instance&lt;/p&gt;

&lt;p&gt;    b) no need to expose NetConnection.newDatabaseMetaData_() as a public method&lt;/p&gt;

&lt;p&gt;2) Some of the lines exceed the 80 characters limit&lt;/p&gt;</comment>
                            <comment id="12856426" author="rhillegas" created="Tue, 13 Apr 2010 14:55:03 +0100"  >&lt;p&gt;Thanks for those suggestions, Knut. Attaching derby-2602-01-ae-dontTruncate.diff, which eliminates the extra cached version of NetDatabaseMetaData. However, things are still a little pear-shaped. I am not able to remove serverSupportsTimestampNanoseconds() from the Agent classes. This is because that method is implemented in the net package but is needed by Cursor in the am package. It seems wrong to me for an am class to directly reference net classes. Mind you, I&apos;m not a big fan of the split between am and net, but there it is. Thanks.&lt;/p&gt;</comment>
                            <comment id="12856431" author="knutanders" created="Tue, 13 Apr 2010 15:10:27 +0100"  >&lt;p&gt;Thanks for the updated patch, Rick. I think you can get rid of the changes in the Agent classes by declaring serverSupportsTimestampNanoseconds() as an abstract method in am.Connection. There&apos;s precedence for that, see supportsSessionDataCaching() and serverSupportsLocators(). Then you can access it from am.Cursor via agent_.connection_.&lt;/p&gt;</comment>
                            <comment id="12856450" author="rhillegas" created="Tue, 13 Apr 2010 16:29:17 +0100"  >&lt;p&gt;Thanks, Knut. You are right. The abstract method in Connection makes this better. I have made that change and added a compatibility test to the next rev of the patch: derby-2602-01-af-dontTruncate.diff. I am re-running the regression tests now.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12856525" author="rhillegas" created="Tue, 13 Apr 2010 19:09:10 +0100"  >&lt;p&gt;Tests ran cleanly. Committed derby-2602-01-af-dontTruncate.diff at subversion revision 933726.&lt;/p&gt;</comment>
                            <comment id="12856566" author="rhillegas" created="Tue, 13 Apr 2010 20:22:44 +0100"  >&lt;p&gt;I believe that this bug is fixed. I opened a related issue, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4614&quot; title=&quot;JDBC metadata gives incorrect lengths for timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4614&quot;&gt;&lt;del&gt;DERBY-4614&lt;/del&gt;&lt;/a&gt;, to address bad JDBC metadata for timestamps, discovered while fixing this bug.&lt;/p&gt;</comment>
                            <comment id="12887416" author="mamtas" created="Mon, 12 Jul 2010 17:57:09 +0100"  >&lt;p&gt;I am looking at backporting this to 10.5 since &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4615&quot; title=&quot;EmbedCallableStatement ignores Calendar in getDate, getTime and getTimestamp&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4615&quot;&gt;&lt;del&gt;DERBY-4615&lt;/del&gt;&lt;/a&gt; seems to have dependency on this jira. Let me know if there is any objection to this backport. The changes that went in for this jira seem to have specific code changes for 10.6 and higher codeline. I will try to change it to have those changes work for 10.5 and higher and run the regression tests to see how they go.&lt;/p&gt;</comment>
                            <comment id="12887504" author="knutanders" created="Mon, 12 Jul 2010 21:24:36 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;Before you backport the fix, please check that a client running head of 10.5 still can send and receive timestamps when talking to a 10.6.1.0 server, and vice versa. I suspect that this scenario will break if the fix is backported with no other changes.&lt;/p&gt;</comment>
                            <comment id="12887619" author="mamtas" created="Tue, 13 Jul 2010 02:35:24 +0100"  >&lt;p&gt;Knut, thanks for the heads up. You are right, can&apos;t change this in 10.5 at this point since we have had branch releases on 10.5. I will close this jira back again and will change the test in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4615&quot; title=&quot;EmbedCallableStatement ignores Calendar in getDate, getTime and getTimestamp&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4615&quot;&gt;&lt;del&gt;DERBY-4615&lt;/del&gt;&lt;/a&gt; to handle the 10.5 behavior.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12354628">DERBY-2034</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12349305">DERBY-1816</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12461979">DERBY-4614</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12462639">DERBY-4626</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12462637">DERBY-4625</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12468384">DERBY-4728</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12441534" name="ASF.LICENSE.NOT.GRANTED--derby-2602-01-ad-dontTruncate.diff" size="32489" author="rhillegas" created="Mon, 12 Apr 2010 20:29:09 +0100"/>
                            <attachment id="12441609" name="ASF.LICENSE.NOT.GRANTED--derby-2602-01-ae-dontTruncate.diff" size="31354" author="rhillegas" created="Tue, 13 Apr 2010 14:55:03 +0100"/>
                            <attachment id="12441618" name="ASF.LICENSE.NOT.GRANTED--derby-2602-01-af-dontTruncate.diff" size="34122" author="rhillegas" created="Tue, 13 Apr 2010 16:29:17 +0100"/>
                            <attachment id="12356732" name="d2602.java" size="1918" author="kmarsden" created="Thu, 3 May 2007 20:52:39 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 2 May 2007 19:42:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23122</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0o3r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37723</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>