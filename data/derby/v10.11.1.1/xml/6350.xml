<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:13:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6350/DERBY-6350.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6350] Provide a rolling file implementation of derby.log</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6350</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;By default, derby.log grows without bounds if the derby.infolog.append property is set to &quot;true&quot;.   Setting this to &quot;true&quot; helps in a hands off production environment to ensure that if Derby restarts, the derby.log which might contain important information is not lost.  On the other hand, when set the &quot;true&quot; the derby.log grows without bounds.  This is problematic in a long running system.  &lt;/p&gt;

&lt;p&gt;What is really needed is the ability to have a rolling derby.log file support where the maximum file size and maximum number of files can be specified.  Derby has the ability to configure the location of the log file (ie. derby.stream.error.file) and also two methods of redirecting the error stream (.ie derby.stream.error.method and derby.stream.error.field).  There is no standard implementation that supports a rolling derby.log however.&lt;/p&gt;

&lt;p&gt;This facility should be part of the core Derby system so that it works in both embedded and network server models.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12669518">DERBY-6350</key>
            <summary>Provide a rolling file implementation of derby.log</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bbergquist">Brett Bergquist</assignee>
                                    <reporter username="bbergquist">Brett Bergquist</reporter>
                        <labels>
                            <label>features</label>
                    </labels>
                <created>Thu, 19 Sep 2013 20:23:51 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:40 +0000</updated>
                            <resolved>Thu, 14 Nov 2013 19:44:35 +0000</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Miscellaneous</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="13772197" author="bbergquist" created="Thu, 19 Sep 2013 20:32:55 +0100"  >&lt;p&gt;I have an implementation to contribute for this feature.  It has the following design:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A RollingFileStream class that extends OutputStream that can be configured with a file pattern, file size limit, and file count, and provides the functionality to keep track how much has been written to the stream and when the max is reached, close the stream, roll the files, and reopen the stream redirected to the newest file.  This is heavily borrowed from java.logger.FileHandler for the file handling capability.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A RollingFileStreamProvider class that provides a static method to configure and return an instance of RollingFileStream.  derby.properties is consulted for the file pattern, file size limit, and file count.  If these are not present, then built in defaults are used which configure the pattern such that files &quot;derby-n.log&quot; are created in DERBY_HOME, with the maximum file size of 1Mb and a maximum of 10 files.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This can be plugged into the existing framework of redirecting the error stream.  The derby.properties can be set as:&lt;/p&gt;

&lt;p&gt;derby.stream.error.method=org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream&lt;br/&gt;
derby.stream.error.rollingfile.pattern=%d/db-%g.log&lt;br/&gt;
derby.stream.error.rollingfile.limit=2048000&lt;br/&gt;
derby.stream.error.rollingfile.count=5&lt;/p&gt;

&lt;p&gt;Note that the &quot;derby.infolog.append&quot; is still honored.  If set to &quot;false&quot;, then when Derby starts, the log files are rolled immediately and a log file is used.  If set to &quot;true&quot;, then when Derby starts, the existing newest log file (if any) is appended to.&lt;/p&gt;


</comment>
                            <comment id="13772208" author="bbergquist" created="Thu, 19 Sep 2013 20:48:45 +0100"  >&lt;p&gt;Patch was missing changes to Property.java which are the constants.&lt;/p&gt;

&lt;p&gt;This patch implements the functionality as described.&lt;/p&gt;

&lt;p&gt;It is against the trunk as of 9/19/2013&lt;/p&gt;</comment>
                            <comment id="13772493" author="bryanpendleton" created="Fri, 20 Sep 2013 01:03:52 +0100"  >&lt;p&gt;Neat! I only took a quick scan of the code, but this looks very useful to me.&lt;/p&gt;</comment>
                            <comment id="13772976" author="rhillegas" created="Fri, 20 Sep 2013 13:54:31 +0100"  >&lt;p&gt;Thanks for working on this useful feature, Brett. I haven&apos;t read the patch yet. Instead, before jumping into code, I would like to agree on the developer experience, the functional spec if you will. That will help lead discussion about the code and will hopefully give Kim all the information she needs so that she can document this feature when it&apos;s integrated into the engine.&lt;/p&gt;

&lt;p&gt;I&apos;ll start out with a small nit: The existing Derby properties follow a camel-case convention. So I would change rollingfile to rollingFile in the new property names.&lt;/p&gt;

&lt;p&gt;I don&apos;t think that we need to specify the location of the rolling file implementation publicly. That, in turn, will eliminate the awkwardness of exposing an impl package in the public api. So, instead of enabling rolling logging like this...&lt;/p&gt;

&lt;p&gt;derby.stream.error.method=org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream&lt;/p&gt;

&lt;p&gt;...I think it would be simpler to enable rolling logging like this:&lt;/p&gt;

&lt;p&gt;derby.stream.error=rollingFile&lt;/p&gt;

&lt;p&gt;I have some questions about the meaning of the other knobs:&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.limit - Is this the maximum size of a log file before Derby rolls over to the next file in the sequence?&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.count - Is this the maximum number of log files? If so, what happens when the maximum number of log files is exhausted? Does Derby recycle, starting over by truncating the first file in the sequence?&lt;/p&gt;

&lt;p&gt;The derby.stream.error.rollingFile.pattern expression syntax looks a little idiosyncratic to me. I wonder if it might be simpler to give the log files standard names (something like derby-1.log, derby-2.log, etc) and let the application specify a directory for holding the log files. The default directory could be derby.system.home/derby.log. So something like this:&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.dir=/Users/apps/myapp/errorlog&lt;/p&gt;

&lt;p&gt;What are your thoughts?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13773021" author="bbergquist" created="Fri, 20 Sep 2013 15:02:20 +0100"  >&lt;p&gt;One general comment.  My goal was to touch as little of the Derby code as possible to minimize the risk of introducing this.  In fact, besides Property.java where the property constants are defined, there is no other code changes to Derby core.  It uses the existing ability to redirect the error log.  If the goal of this should be changed to make this more seamless, I don&apos;t have a problem, but again that was not my goal.&lt;/p&gt;

&lt;p&gt;I would have liked to have provided this as a standalone extension but a couple of things get in the way.  The logging is done by the Derby core and it was desirable to locate the rolling log files in the same location as the existing derby.log.  But there is no readily available way of determining the location of derby.log using the derby.stream.error.method or derby.stream.error.field facilities provided; neither of these mechanisms provide any context to use to lookup this location.  The second problem is if this is indeed provided in a separate JAR, then the security policy comes into play.  The invoking code of derby.stream.error.method contains a security policy in effect and being able to read system properties and write files becomes restricted by that policy.  Have to change or provide a new security policy just to get rolling log files seemed to complex and cumbersome, so I made the decision that this functionality needs to be as part of the core of Derby so that the same security policy can be used.&lt;/p&gt;

&lt;p&gt;Kathey Marsden indicated that having the properties of configuring the rolling file in &quot;derby.properties&quot; was preferable to having another properties file and I agree so this also made the decision to incorporate this into Derby core.&lt;/p&gt;

&lt;p&gt;As for renaming the property from &quot;rollingfile&quot; to &quot;rollingFile&quot;, I have no issue with this. &lt;/p&gt;

&lt;p&gt;As for &quot;derby.stream.error=rollingFile&quot;, this will imply that the normal &quot;derby.stream.error.method&quot; and &quot;derby.stream.error.field&quot; cannot be used or we need to document the conflict resolution if they are.  I understand that using &quot;derby.stream.error=rollingFile&quot; seems easier but it does make for more documentation and code changes in Derby core.  I don&apos;t know if the benefit is worth the trade off.&lt;/p&gt;

&lt;p&gt;As for the &quot;derby.stream.error.rollingFile.limit&quot; and &quot;derby.steam.error.rollingFile.count&quot; and &quot;derby.stream.error.rollingFile.pattern&quot;, these are directly from the &quot;java.logger.FileHandler&quot;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/logging/FileHandler.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/util/logging/FileHandler.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with the addition of the &quot;%d&quot; pattern addition to represent &quot;derby.system.home&quot;.  The semantics of the file size limit and file count limit are the same as &quot;java.logger.FileHandler&quot; and are pretty straightforward and known to the Java community I think, so my feeling is that keeping this as similar to that is a benefit and the documentation of these can be directly lifted from that javadoc.&lt;/p&gt;

&lt;p&gt;Doing the changes that you suggest are possible but also seem to conflict with what is already provided by Derby.   For example, the &quot;derby.stream.error.file&quot; specifies the location (and filename) of the output of the error stream and when this is set then the &quot;derby.stream.error.field&quot; and &apos;derby.stream.error.method&quot; are ignored.  Right there is a conflict that is documented.  The &quot;derby.stream.error.method&quot; also has a conflict resolution with &quot;derby.stream.error.field&quot; that is documented.&lt;/p&gt;

&lt;p&gt;It seems to me that adding another &quot;derby.stream.error&quot; property will require updating the conflict resolution and documentation of the existing properties which is more work that I think is worth.&lt;/p&gt;

&lt;p&gt;Basically we are providing the user with a complete implementation that can be plugged into Derby using the standard mechanism that already exists namely the &quot;derby.stream.error.method&quot; with understanding that the implementation is part of Derby core and that the implementation has additional properties that can be configured through &quot;derby.properties&quot;.&lt;/p&gt;

&lt;p&gt;My feeling is the simplicity of the integration using the mechanism already provided by Derby, the limit of risk in the integration into Derby core, along with the familiarity of configuration parameters that nearly match those of the &quot;java.logger.FileHandler&quot;, and the requirement of just adding to the documentation on configuring this facility without changing or altering the existing documentation of the existing facilities is pretty important.&lt;/p&gt;

&lt;p&gt;I do agree with your comment on exposing and &quot;impl&quot; package publicly however.  It does not &quot;feel right&quot;, however, I could not find another place that &quot;felt right&quot; either especially with the goal of using the &quot;derby.stream.error.method&quot; mechanism.  &lt;/p&gt;
</comment>
                            <comment id="13773170" author="rhillegas" created="Fri, 20 Sep 2013 17:48:12 +0100"  >&lt;p&gt;Thanks for that explanation, Brett. I&apos;m wondering if your problem might be solved by a more general approach which would avoid getting Derby into the business of managing the cycling of log files. Right now, the following properties can be used to configure Derby to use either a custom java.io.OutputStream or java.io.Writer:&lt;/p&gt;

&lt;p&gt;derby.stream.error.field&lt;br/&gt;
derby.stream.error.method&lt;/p&gt;

&lt;p&gt;What if those methods were generalized slightly so that the custom log stream could be a java.util.logging.Logger as well? The glue code for making that work would be pretty simple I think. We might just need a new constructor for org.apache.derby.impl.services.stream.BasicHeaderPrintWriter and a small handler which wraps the diagnosticMessage in a java.util.logging.LogRecord( Level.INFO, diagnosticMessage ) entry. The cycling of log files could then be handled by the usual Java mechanisms for configuring Loggers.&lt;/p&gt;

&lt;p&gt;Would this give you the flexibility you need?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13773187" author="bbergquist" created="Fri, 20 Sep 2013 18:05:06 +0100"  >&lt;p&gt;Probably not.  Those methods are invoked under the security policy of Derby and any file I/O or accessing any system property is restricted by this security policy.  Creating and installing a different security policy is no trivial task for most users and might not even be possible. &lt;/p&gt;

&lt;p&gt;I tried going this route but in my case, Derby network server is being started by the Glassfish application server.  Passing in a different security policy is not supported when Glassfish starts Derby in this manner.  So I was left with changing the JVM security policy or having the code within derby.jar so that it would have the same security policy of Derby.&lt;/p&gt;

&lt;p&gt;Note that this request has come up before but it seems nobody has actually got it to work at least not as far as I can find by searching.   The standard answer is &quot;use derby.stream.error.method or use derby.stream.error.field&quot; but in fact this is complicated by the fact of the security policy and is not easy to implement.&lt;/p&gt;

&lt;p&gt;I think out of the box that Derby should support a rolling file log.  Derby is supposed to be a zero administration database and having a log file grow without bounds is not zero administration, at least not to me.&lt;/p&gt;

&lt;p&gt;That being said, having Derby use the java.logger framework is desirable and in fact there is a JIRA for that.   If it did use that framework directly (not by invoking an external piece of code that will have the security policy problem that I mention), then the user could simply configure the java.logger.FileHandler directly and all would be well.   But that seems much more work in changing the Derby internals.&lt;/p&gt;
</comment>
                            <comment id="13773807" author="kmarsden" created="Sat, 21 Sep 2013 14:09:28 +0100"  >&lt;p&gt;Thank you Brett for adding this useful functionality. I think it will be a great relief to many users and support people.&lt;/p&gt;

&lt;p&gt;I wonder if we could avoid the reference to org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream by just making it so that implicit in setting any of the derby.stream.error.rollingfile properties.&lt;/p&gt;</comment>
                            <comment id="13773856" author="bbergquist" created="Sat, 21 Sep 2013 18:18:29 +0100"  >&lt;p&gt;I think you are saying the same thing that Rick suggested and now there are two &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  So I think following Rick&apos;s suggestion and use something like:&lt;/p&gt;

&lt;p&gt;derby.stream.error=rollingFile&lt;/p&gt;

&lt;p&gt;is preferrable as this will trigger the rolling file implementation.  Then the properties:&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.pattern=&lt;br/&gt;
derby.stream.error.rollingFile.limit=&lt;br/&gt;
derby.stream.error.rollingFile.count=&lt;/p&gt;

&lt;p&gt;can be used to customize the rolling file but if not present the default values will be used.   Also probably another property:&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.append=&amp;lt;true|false&amp;gt;&lt;/p&gt;

&lt;p&gt;which will act like the &quot;derby.infolog.append&quot; in that the existing log file will be append to at startup if &quot;true&quot; or the files will be rolled and a new log file will be created if &quot;false&quot; or do you think that &quot;derby.infolog.append&quot; is sufficient to serve as this knob?&lt;/p&gt;

&lt;p&gt;If we can agree on these, I will make the change and submit a patch with this change. &lt;/p&gt;</comment>
                            <comment id="13774343" author="dyret" created="Mon, 23 Sep 2013 08:07:24 +0100"  >&lt;p&gt;First of all: A big THANK YOU for solving this issue! &lt;/p&gt;

&lt;p&gt;I understand that another patch is coming so this may not be relevant, but in the first patch I noticed that RollingFileStreamProvider.getOutputStream() swallows all exceptions and just returns null in in case of errors. Does that mean that it will silently fall back to ordinary logging or will an NPE be thrown? If it is the former, is there a way to warn about this (e.g. to stderr since logging could not be set up)? If an NPE will be thrown, I would prefer just propagating the exception (possibly wrapped in another exception type if the exception specifications are problematic).&lt;/p&gt;</comment>
                            <comment id="13774530" author="bbergquist" created="Mon, 23 Sep 2013 14:23:24 +0100"  >&lt;p&gt;Right now, it does indeed swallow all errors and return null.  The derby.log prints out an error indicating that the method returned &quot;null&quot; and the standard derby.log is used.  I agree that this should do something different and will investigate this.&lt;/p&gt;</comment>
                            <comment id="13774794" author="bbergquist" created="Mon, 23 Sep 2013 19:01:57 +0100"  >&lt;p&gt;I have implemented this as follows and will attach a patch shortly.&lt;/p&gt;

&lt;p&gt;I added a new property:&lt;/p&gt;

&lt;p&gt;derby.stream.error.style=rollingFile&lt;/p&gt;

&lt;p&gt;I chose this so that in the future if there is an &quot;logger&quot; implementation, then one could also support:&lt;/p&gt;

&lt;p&gt;derby.stream.error.style=logger&lt;/p&gt;

&lt;p&gt;When this is set to &quot;rollingFile&quot;, then internally, this passes in &quot;org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream&quot; to the code that  processes &quot;derby.stream.error.method&quot;.   &lt;/p&gt;

&lt;p&gt;So now &quot;org.apache.derby.impl.services.stream.RollingFileStreamProvider.getOutputStream&quot; is not exposed to the user.  &lt;/p&gt;

&lt;p&gt;I also modified to not catch any IOException or SecurityException in &quot;org.apache.derby.impl.services.stream.RollingFileStreamProvider&quot;.  If this occurs normal &quot;derby.log&quot; will be used and the error will be logged to &quot;derby.log&quot;.  This is similar as to what happens if you use &quot;derby.stream.error.file&quot; and point it at a file that cannot be accessed (ie. the directory does not exist for example).   &lt;/p&gt;
</comment>
                            <comment id="13775540" author="bbergquist" created="Mon, 23 Sep 2013 19:37:22 +0100"  >&lt;p&gt;Second patch attempt.  This introduces a &quot;derby.stream.error.style&quot; property which when set to &quot;rollingFile&quot; will trigger the rolling file implementation to invoked.&lt;/p&gt;

&lt;p&gt;This patch also removes the swallowing of any IOException or SecurityException thrown by the RollingFileStream.  The exception will be propagated and the default &quot;derby.log&quot; implementation will be used and the error logged.&lt;/p&gt;</comment>
                            <comment id="13775591" author="bbergquist" created="Mon, 23 Sep 2013 20:37:36 +0100"  >&lt;p&gt;So for documentation purposes:&lt;/p&gt;

&lt;p&gt;derby.stream.error.style=rollingFile -&amp;gt; triggers the rolling file implementation and takes precedence over derby.stream.error.file or derby.stream.error.field or derby.stream.error.method&lt;/p&gt;

&lt;p&gt;derby.stream.error.rollingFile.pattern=&amp;lt;default is %d/derby-%g.log which creates files &apos;derby-0.log, derby-1.log, etc. in the directory where &apos;derby.system.home&apos; points to&amp;gt;&lt;br/&gt;
derby.stream.error.rollingFile.limit=&amp;lt;defaults to 1024000 bytes&amp;gt;&lt;br/&gt;
derby.stream.error.rollingFile.count=&amp;lt;defaults to 10 files&amp;gt;&lt;/p&gt;

&lt;p&gt;Note that the &quot;derby.infolog.append&quot; is still honored. If set to &quot;false&quot;, then when Derby starts, the log files are rolled immediately and a new log file is used. If set to &quot;true&quot;, then when Derby starts, the existing newest log file (if any) is appended to.&lt;/p&gt;

</comment>
                            <comment id="13777724" author="mamtas" created="Wed, 25 Sep 2013 17:44:19 +0100"  >&lt;p&gt;Hi Brett, thanks for working on this useful feature. I am planning on looking at the patch soon. In the mean time, for the junit tests, you may want to look at jira &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5996&quot; title=&quot;Create readme files (cautioning users against modifying database files) at database hard upgrade time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5996&quot;&gt;&lt;del&gt;DERBY-5996&lt;/del&gt;&lt;/a&gt;(Create readme files (cautioning users against modifying database files) at database hard upgrade time). In this jira, I look at the existence of the readme files. You may need something like that to make sure rolling derby.log files get created with the appropriate names. I am pretty sure I added tests to upgrade suite as well to check for the existence of readme files at hard upgrade. Is it correct that we will not create rolling log files on a soft upgrade even if user adds these properties to derby properties file? Thanks&lt;/p&gt;</comment>
                            <comment id="13777840" author="bbergquist" created="Wed, 25 Sep 2013 19:10:53 +0100"  >&lt;p&gt;Thanks for volunteering to take a look at this Mamta.  I have backported it to 10.9.1.1 (my local modified copy and am using it now in production).  &lt;/p&gt;

&lt;p&gt;I will take a look at the tests and the jira that you pointed out.  &lt;/p&gt;

&lt;p&gt;As to your question on soft upgrade versus hard upgrade, since this introduce no change in the database at all in terms of the API, data structures, or anything else visible at that database level, only a logging facility as part of the engine, I think it should be available on a soft upgrade and I have made no coding to enforce that it not be.&lt;/p&gt;

&lt;p&gt;What is your thoughts on this.&lt;/p&gt;</comment>
                            <comment id="13777907" author="mamtas" created="Wed, 25 Sep 2013 19:50:44 +0100"  >&lt;p&gt;If we make it available in soft upgrade, I wonder if it would be confusing if the user goes back to their original version after trying out soft upgrade. They will switch from using derby.log to the new rolling logs during the soft upgrade and then back to original derby.log May be someone else in the community might have more thoughts on this.&lt;/p&gt;</comment>
                            <comment id="13777934" author="kmarsden" created="Wed, 25 Sep 2013 20:08:22 +0100"  >&lt;p&gt;I think it is ok for it to work in soft upgrade format.  I think in general we limit the soft upgrade restriction to features that change on-disk format.&lt;/p&gt;</comment>
                            <comment id="13777980" author="bbergquist" created="Wed, 25 Sep 2013 20:30:27 +0100"  >&lt;p&gt;Note that the derby.log (and by extension the rolling log file implementation) is invoked when engine is started which is independent of a database being booted.  So I don&apos;t know if &quot;soft mode&quot; even applies here?  I think there can be log message even before any database is accessed but I could be wrong.&lt;/p&gt;
</comment>
                            <comment id="13778031" author="mamtas" created="Wed, 25 Sep 2013 21:26:53 +0100"  >&lt;p&gt;Brett, may be I am doing something wrong, but in derby.properties, I only specified(I want to use the default for other associated properties)&lt;br/&gt;
derby.stream.error.style=rollingFile&lt;br/&gt;
But following ij session prints a NPE and there is no log file created. May be some of the other associated properties are not optional. I wonder if we throw the exception because of some problem with using the rolling log, we should print the stack trace on std err.&lt;/p&gt;

&lt;p&gt;$ java -Dderby.language.logQueryPlan=true -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.11&lt;br/&gt;
ij&amp;gt; Wed Sep 25 13:23:16 PDT 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; java.lang.NullPointerException&lt;br/&gt;
----------------------------------------------------------------&lt;br/&gt;
Wed Sep 25 13:23:17 PDT 2013:&lt;br/&gt;
Booting Derby version The Apache Software Foundation - Apache Derby - 10.11.0.0 alpha - (1): instance a816c00e-0141-56ca-3f03-000000205398&lt;br/&gt;
on database directory C:\p4clients\svnmain\client3\trunk\systest\out142\db1 with class loader sun.misc.Launcher$AppClassLoader@53745374&lt;br/&gt;
Loaded from &lt;a href=&quot;file:/C:/p4clients/svnmain/client3/trunk/classes/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/C:/p4clients/svnmain/client3/trunk/classes/&lt;/a&gt;&lt;br/&gt;
java.vendor=IBM Corporation&lt;br/&gt;
java.runtime.version=pwi3260sr14-20130705_01 (SR14)&lt;br/&gt;
java.fullversion=JRE 1.6.0 IBM J9 2.4 Windows 7 x86-32 jvmwi3260sr14-20130704_155156 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20130704_155156&lt;br/&gt;
JIT  - r9_20130517_38390&lt;br/&gt;
GC   - GA24_Java6_SR14_20130704_1138_B155156&lt;br/&gt;
user.dir=C:\p4clients\svnmain\client3\trunk\systest\out142&lt;br/&gt;
os.name=Windows 7&lt;br/&gt;
os.arch=x86&lt;br/&gt;
os.version=6.1 build 7601 Service Pack 1&lt;br/&gt;
derby.system.home=null&lt;br/&gt;
derby.stream.error.style=rollingFile&lt;br/&gt;
Database Class Loader started - derby.database.classpath=&apos;&apos;&lt;/p&gt;</comment>
                            <comment id="13778268" author="bbergquist" created="Thu, 26 Sep 2013 01:12:18 +0100"  >&lt;p&gt;You are not doing anything wrong Mamta, I did something wrong.  I wrongly assumed that &quot;derby.system.home&quot; property would always be set.  The default for this uses a patter of &quot;%d/derby-%g.log&quot;.   The &quot;%d&quot; indicates that the rolling log file should be in the directory pointed to by &apos;derby.system.home&apos; system property.  I did my testing with the network server startup of derby and it seems that the embedded start as from IJ does not set this property. &lt;/p&gt;

&lt;p&gt;I see in your output &apos;derby.syste.home=null&apos; which gave the clue.&lt;/p&gt;

&lt;p&gt;I will have to investigate more to determine how to reliably find where the directory where the log file should be located.  &lt;/p&gt;

&lt;p&gt;As a test, I started IJ after setting DERBY_OPTS=&quot;-Dderby.system.home=/Users/brett/derby&quot; and then IJ worked correctly.&lt;/p&gt;</comment>
                            <comment id="13779845" author="bbergquist" created="Fri, 27 Sep 2013 12:43:05 +0100"  >&lt;p&gt;Patch attempt#3 for the rolling log file suppport.  This fixes an issue when using the embedded engine which does not define &quot;derby.system.home&quot;.  This also has test implemented.&lt;/p&gt;

&lt;p&gt;Changes of this patch:&lt;/p&gt;

&lt;p&gt;1. The makeMethodHPW of the SingleStream has been modified to take a &quot;canClose&quot; parameter and all existing invocation paths except the one use by the rolling file implementation have been altered to pass in false.  While writing the test cases, it was determined that the rolling file error stream should be closed when the derby engine shuts down.  This is different from the case of derby.stream.error.method.  To support such and not duplicate code, the &quot;canClose&quot; parameter is added so that the BasicHeaderPrintWriter can be created as closeable.&lt;/p&gt;

&lt;p&gt;2. The rolling file properties have their case changed to be camel case.  So &quot;derby.stream.error.rollingfile.limit&quot; is now &quot;derby.stream.error.rollingFile.limit&quot;, etc.&lt;/p&gt;

&lt;p&gt;3. RollingFileStream is changed such that if &quot;derby.system.home&quot; system property is not present, then &quot;user.home&quot; is used.  This takes care of the problem when the rolling file implementation is used by the embedded engine.&lt;/p&gt;

&lt;p&gt;4. Tests are added:&lt;br/&gt;
   a) Test that &quot;derby.stream.error.style=rollingFile&quot; triggers the rolling file implementation&lt;br/&gt;
   b) Test that &quot;derby.stream.error.style=unknownStyle&quot; logs an error and uses the default log stream&lt;br/&gt;
   c) Test that &quot;derby.stream.error.style=rollingFile&quot; default values are respected of filenames of &quot;derby-0.log..derby-9.log&quot; (derby.stream.error.rollingFile.pattern=%d/derby-%g.log) and (derby.stream.error.rollingFile.count=10) and file size of 1024000 bytes (derby.stream.error.rollingFile.limit=1024000)&lt;br/&gt;
   d) Test that custom pattern, limit, and count are respected&lt;br/&gt;
   e) Test that &quot;derby.stream.error.style=rollingFile&quot; overrides &quot;derby.stream.error.file&quot;, &quot;derby.stream.error.method&quot;, &quot;derby.stream.error.field&quot; properties.&lt;/p&gt;

&lt;p&gt;One more test should be written to test the interaction of &quot;derby.infolog.append&quot; with &quot;derby.stream.error.style=rollingFile&quot; but I think these tests are enough at this point to verify the implementation.&lt;/p&gt;
</comment>
                            <comment id="13780040" author="bbergquist" created="Fri, 27 Sep 2013 17:01:56 +0100"  >&lt;p&gt;I had to remove the patch file.  I did not add some files via SVN and the patch did not contain all of the files.  I am still a newbie to this patch thing with SVN so bear with me.&lt;/p&gt;</comment>
                            <comment id="13780077" author="bbergquist" created="Fri, 27 Sep 2013 17:39:28 +0100"  >&lt;p&gt;rolling_file_patch_5.txt is the corrected patch file after doing an SVN add.&lt;/p&gt;

&lt;p&gt;I reverted all of my changes to the trunk, applied the patch, and ran the ErrorStreamTest tests and they all passed.&lt;/p&gt;
</comment>
                            <comment id="13782131" author="mamtas" created="Mon, 30 Sep 2013 20:31:14 +0100"  >&lt;p&gt;Brett, I applied the latest patch(rolling_file_patch_5.txt) and still got the same NPE in ij when I didn&apos;t have derby.system.home set. I will more testing of the patch and review the patch.&lt;/p&gt;</comment>
                            <comment id="13782149" author="mamtas" created="Mon, 30 Sep 2013 20:48:19 +0100"  >&lt;p&gt;If we haven&apos;t already, we should create a doc jira for this so the corresponding documentation makes its way in the docs.&lt;/p&gt;</comment>
                            <comment id="13782151" author="bbergquist" created="Mon, 30 Sep 2013 20:50:39 +0100"  >&lt;p&gt;Actually I am embarrased to say that because of my issue with not doing a &quot;svn add&quot; of the files, I actually lost a change that I made to fix that.   The lines:&lt;/p&gt;

&lt;p&gt;                } else if (ch2 == &apos;d&apos;) {&lt;br/&gt;
+                    file = new File(getSystemProperty(&quot;derby.system.home&quot;));&lt;br/&gt;
+                    ix++;&lt;br/&gt;
+                    word = &quot;&quot;;&lt;br/&gt;
+                    continue;&lt;/p&gt;

&lt;p&gt;In RollingLogFileStream are the issue.   I will fix that and submit a new patch in a minute.&lt;/p&gt;
</comment>
                            <comment id="13782157" author="bbergquist" created="Mon, 30 Sep 2013 20:57:36 +0100"  >&lt;p&gt;Fixed NPE when &quot;derby.system.home&quot; is not defined.  In that case the &quot;user.dir&quot; property is used to determine the location for the log files.&lt;/p&gt;</comment>
                            <comment id="13782161" author="chaase3" created="Mon, 30 Sep 2013 21:02:33 +0100"  >&lt;p&gt;I can file a doc issue. Please stay tuned.&lt;/p&gt;</comment>
                            <comment id="13782162" author="bbergquist" created="Mon, 30 Sep 2013 21:03:59 +0100"  >&lt;p&gt;I need to add a test for &quot;derby.system.home&quot; not being defined as part of the ErrorStreamTests.&lt;/p&gt;</comment>
                            <comment id="13782180" author="mamtas" created="Mon, 30 Sep 2013 21:19:41 +0100"  >&lt;p&gt;If I give incorrect value for&lt;br/&gt;
derby.stream.error.style=rollingFile1&lt;br/&gt;
I get NPE when connecting to a database through ij&lt;br/&gt;
$ java -Dderby.language.logQueryPlan=true -Dderby.system.home=&quot;C:\p4clients\svnmain\client3\trunk\systest\out142&quot; -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.11&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:db1;create=true&apos;;&lt;br/&gt;
Mon Sep 30 13:18:12 PDT 2013 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; java.lang.IllegalArgumentException: unknown derby.stream.error.style: rollingFile1&lt;br/&gt;
----------------------------------------------------------------&lt;br/&gt;
Mon Sep 30 13:18:12 PDT 2013:&lt;br/&gt;
Booting Derby version The Apache Software Foundation - Apache Derby - 10.11.0.0 alpha - (1): instance a816c00e-0141-7085-65ee-000073edb42f&lt;br/&gt;
on database directory C:\p4clients\svnmain\client3\trunk\systest\out142\db1 with class loader sun.misc.Launcher$AppClassLoader@538b538b&lt;br/&gt;
Loaded from &lt;a href=&quot;file:/C:/p4clients/svnmain/client3/trunk/classes/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/C:/p4clients/svnmain/client3/trunk/classes/&lt;/a&gt;&lt;br/&gt;
java.vendor=IBM Corporation&lt;br/&gt;
java.runtime.version=pwi3260sr14-20130705_01 (SR14)&lt;br/&gt;
java.fullversion=JRE 1.6.0 IBM J9 2.4 Windows 7 x86-32 jvmwi3260sr14-20130704_155156 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20130704_155156&lt;br/&gt;
JIT  - r9_20130517_38390&lt;br/&gt;
GC   - GA24_Java6_SR14_20130704_1138_B155156&lt;br/&gt;
user.dir=C:\p4clients\svnmain\client3\trunk\systest\out142&lt;br/&gt;
os.name=Windows 7&lt;br/&gt;
os.arch=x86&lt;br/&gt;
os.version=6.1 build 7601 Service Pack 1&lt;br/&gt;
derby.system.home=C:\p4clients\svnmain\client3\trunk\systest\out142&lt;br/&gt;
derby.stream.error.style=rollingFile1&lt;br/&gt;
Database Class Loader started - derby.database.classpath=&apos;&apos;&lt;br/&gt;
WARNING 01J01: Database &apos;db1&apos; not created, connection made to existing database instead.&lt;br/&gt;
ij&amp;gt; exit;&lt;br/&gt;
----------------------------------------------------------------&lt;br/&gt;
Mon Sep 30 13:18:35 PDT 2013: Shutting down Derby engine&lt;br/&gt;
----------------------------------------------------------------&lt;br/&gt;
Mon Sep 30 13:18:35 PDT 2013:&lt;br/&gt;
Shutting down instance a816c00e-0141-7085-65ee-000073edb42f on database directory C:\p4clients\svnmain\client3\trunk\systest\out142\db1 with class loader sun.misc.Launcher$AppClassLoader@538b538b&lt;br/&gt;
----------------------------------------------------------------&lt;/p&gt;
</comment>
                            <comment id="13782186" author="bbergquist" created="Mon, 30 Sep 2013 21:24:14 +0100"  >&lt;p&gt;Do you get a NPE or is it you get the IllegalArgumentException shown in your output.   This is code explicitly to throw an IllegalArgumentException if the style is not recognized.  We can do something different but I don&apos;t know what should be done in that case.   Note that there is also a test in ErrorStreamTest.java for this as well.&lt;/p&gt;
</comment>
                            <comment id="13782188" author="mamtas" created="Mon, 30 Sep 2013 21:29:07 +0100"  >&lt;p&gt;After applying the 6th patch, I get IllegalArgumentException. With patch 5, I got NPE. I think in case a like this, we should revert to using traditional derby.log after giving a warning on system.out and derby.log. Just a thought. I think this is the behavior you noted in an earlier comment&lt;br/&gt;
&quot;Test that &quot;derby.stream.error.style=unknownStyle&quot; logs an error and uses the default log stream&quot;&lt;/p&gt;</comment>
                            <comment id="13782211" author="bbergquist" created="Mon, 30 Sep 2013 21:42:58 +0100"  >&lt;p&gt;Manta, can you review the code in SingleStream.java, lines 261-278.   I tried to follow the model when using &quot;derby.stream.error.method=xxx&quot; fails.  So that code is throwing an IllegalArgumentException with the error message and catching the error (to get the stack traceback) and then calling useDefaultStream with the caught exception.&lt;/p&gt;

&lt;p&gt;So I think this should be correct and should use the &quot;derby.log&quot; when you use an invalid &quot;style&quot;.  From your IJ output earlier it looks like (with patch 6) that it output the error and continued.   &lt;/p&gt;

&lt;p&gt;Also if you could review ErrorStreamTest.java, lines 393-408.   this is checking for an unknown style and checking to see if the errStreamFile is not empty.   Maybe this needs to also test the derby.log is not empty but this code was modeled on the &quot;testWrongMethod&quot; test in the same file.&lt;/p&gt;</comment>
                            <comment id="13782627" author="mamtas" created="Tue, 1 Oct 2013 05:35:35 +0100"  >&lt;p&gt;Brett, I debugged through SingleStream.java and see if that in case of IllegalArgumentException, we call useDefaultStream as you pointed out. But useDefaultStream uses System.err to log the info.&lt;br/&gt;
		return new BasicHeaderPrintWriter(System.err, header, false, &quot;System.err&quot;);&lt;br/&gt;
I wonder in this case, if we should be calling createDefaultStream which uses derby.log. If we do use createDefaultStream. Once we have the HeaderPrintWriter for derby.log, we can call printlnWithHeader to log the IllegalArgumentException.&lt;/p&gt;

&lt;p&gt;If we do make the above change, then I think we will need to check for errStreamFile to be empty and derby.log to be not empty.&lt;/p&gt;</comment>
                            <comment id="13783589" author="bbergquist" created="Wed, 2 Oct 2013 03:46:01 +0100"  >&lt;p&gt;Mamta, the other properties also use &quot;useDefaultStream&quot;.  For example, if &quot;derby.stream.error.field&quot; fails, it calls &quot;useDefaultStream&quot;, similarly if &quot;derby.stream.error.method&quot; fails, it calls &quot;userDefaultStream&quot; and finally if &quot;derby.stream.error.file&quot; fails, it also calls &quot;useDefaultStream&quot;.  &lt;/p&gt;

&lt;p&gt;So should this be any different?   I think if this should call &quot;createDefautStream&quot; then the other methods should as well.  If not, then this should be consistent with those.  And in any case, if specified wrong I think it will be immediately recognized and corrected.&lt;/p&gt;

&lt;p&gt;At this point I would rather not change this but of course I will go with what ever is decided.&lt;/p&gt;
</comment>
                            <comment id="13783676" author="mamtas" created="Wed, 2 Oct 2013 06:43:56 +0100"  >&lt;p&gt;Brett, I am fine with the current patch&apos;s behavior unless someone else in the community feels otherwise. I do not think we want to change the behavior of other existing properties.&lt;/p&gt;</comment>
                            <comment id="13786328" author="bbergquist" created="Fri, 4 Oct 2013 17:58:52 +0100"  >&lt;p&gt;What is the next step for this patch?  Is it appear to be ready to be committed?&lt;/p&gt;</comment>
                            <comment id="13786419" author="mamtas" created="Fri, 4 Oct 2013 18:57:28 +0100"  >&lt;p&gt;Brett, I can commit the patch early next week if there are no further comments from the community. Thanks for working on this valuable feature.&lt;/p&gt;</comment>
                            <comment id="13786698" author="mamtas" created="Fri, 4 Oct 2013 23:34:37 +0100"  >&lt;p&gt;It will be a good idea to run the entire junit test suite with these knobs to see if they run fine with rolling log. I am not sure at this point how to do it, may be as JVM properties when starting the tests or may be as a separate suite. &lt;/p&gt;</comment>
                            <comment id="13788958" author="myrna" created="Tue, 8 Oct 2013 07:21:26 +0100"  >&lt;p&gt;I thought of running the entire junit test suite by wrapping the class AllPackages in a SystemPropertyTestSetup, but I thought I&apos;d first at least run the now much bigger ErrorStreamTest.&lt;/p&gt;

&lt;p&gt;Unfortunately that gives me 4 errors on my Windows 7 box:&lt;/p&gt;

&lt;p&gt;1) testStyleRollingFile(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: File C:\tst\d6350\errortst\system\derby-0.log could not be deleted&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testStyleRollingFile(ErrorStreamTest.java:387)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)&lt;/p&gt;

&lt;p&gt;And then 3 more that are probably happening as a result of the previous one:&lt;br/&gt;
2) testWrongStyle(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: C:\tst\d6350\errortst\system\derby-0.log exists&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertNotExisting(ErrorStreamTest.java:697)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongStyle(ErrorStreamTest.java:403)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)&lt;br/&gt;
3) testDefaultRollingDefaultConfig(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: File C:\tst\d6350\errortst\system\derby-0.log could not be deleted&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testDefaultRollingDefaultConfig(ErrorStreamTest.java:446)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)&lt;br/&gt;
4) testDefaultRollingUserConfig(org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest)junit.framework.AssertionFailedError: File C:\tst\d6350\errortst\system\db-0.log could not be deleted&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testDefaultRollingUserConfig(ErrorStreamTest.java:498)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)&lt;/p&gt;

&lt;p&gt;I will take a closer look at the test, see if I understand these failures.&lt;/p&gt;</comment>
                            <comment id="13790587" author="bbergquist" created="Wed, 9 Oct 2013 17:34:11 +0100"  >&lt;p&gt;Sorry, I have been on vacation.  I will get access to a Windows box early next week and try to determine why the files are not being closed.&lt;/p&gt;</comment>
                            <comment id="13790748" author="myrna" created="Wed, 9 Oct 2013 20:24:28 +0100"  >&lt;p&gt;I&apos;ve not had a chance to further investigate either, except to say that there are 3 fixtures/methods that suffer from this behavior:&lt;br/&gt;
testStyleRollingFile()&lt;br/&gt;
testDefaultRollingDefaultConfig()&lt;br/&gt;
testDefaultRollingUserConfig()&lt;br/&gt;
(so the other failures were cascading from this).&lt;/p&gt;

&lt;p&gt;I prevented these 3 fixtures from running (by renaming the methods to start with &apos;xtest&apos; instead of &apos;test&apos;), and ErrorStreamTest passed, and the engine._Suite suite passed also.&lt;/p&gt;

&lt;p&gt;Windows is pickier about deleting files that have been accessed, we&apos;ve seen that before, so this could just be a test cleanup issue...&lt;/p&gt;</comment>
                            <comment id="13790820" author="mikem" created="Wed, 9 Oct 2013 21:22:09 +0100"  >&lt;p&gt;to expand on what myrna pointed out.  The main difference in this area that we see between unix and windows is that windows does not&lt;br/&gt;
allow a file to be deleted that is currently open.  So suggest you look for missing closes of the files.&lt;/p&gt;

&lt;p&gt;Another safety check might be to by hand to the following test:&lt;br/&gt;
o set up the system that is creates a large number of derby.logs in a single test run, and then use the unix tools to show&lt;br/&gt;
   open files.  I think the goal would be only ever one derby.log segment open at one time (or maybe an edge case of 2 or something&lt;br/&gt;
   like that).  We sometimes run into open file issues on derby, so 1 at a time would be a good goal or we may have to point it out&lt;br/&gt;
   in a release note.  There are some applications out there that have large number of databases in their application and are sensitive&lt;br/&gt;
   to any per-database increase in resources like open files, system threads, size, ...&lt;/p&gt;</comment>
                            <comment id="13796725" author="bbergquist" created="Wed, 16 Oct 2013 13:32:43 +0100"  >&lt;p&gt;This patch closes the underlying stream which was missing.  All the junit tests now run cleanly on both unix based (MAC) and Windows.&lt;/p&gt;</comment>
                            <comment id="13796984" author="mamtas" created="Wed, 16 Oct 2013 17:59:39 +0100"  >&lt;p&gt;Brett, I will apply your latest patch and run the junit tests on my machine. &lt;/p&gt;

&lt;p&gt;I had used the earlier patch to run the junit suite with rollingFile(as shown below) &lt;br/&gt;
time java  -Dderby.stream.error.style=rollingFile -Dderby.tests.trace=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All &amp;gt; runall.out 2&amp;gt;&amp;amp;1&lt;br/&gt;
and saw the failure noticed by Myrna. Additionally, I saw that even though we are running junit suite with the rollingFile, we still created derby.log(although it was empty) along with expected derby-0.log and so on. I had not expected to see the traditional derby.log when running with rollingFile. In addition, when a test failed, the failed directory had empty derby.log copied but the rolling log files did not get copied. The code changes to copy the rolling log files in case of failure probably need to go into org.apache.derbyTesting.junit.BaseTestCase:runBare() in the &quot;catch (Throwable running) {&quot; section. I can open a new jira for this and link it this jira.&lt;/p&gt;</comment>
                            <comment id="13797087" author="bbergquist" created="Wed, 16 Oct 2013 19:33:05 +0100"  >&lt;p&gt;In regards to the empty &quot;derby.log&quot; when using the rollingFile implemenation, this occurs because of BaseMonitor.boot calling SingleStream.boot.   This occurs when Derby is started, long before it looks for any properties.  I tis called by ErrorStreamTest.setup/ErrrorStreamTest.bootDerby, etc.&lt;/p&gt;

&lt;p&gt;So i don&apos;t think anything can be done about the &quot;derby.log&quot; being created and in fact I think it is probably risky to make any changes there.   In my opinion I think it is okay the way that it is.&lt;/p&gt;

&lt;p&gt;I believe that this same issue will be present if you use the &quot;derby.stream.error.file&quot; property or the &quot;derby.stream.error.field&quot; property, or the &quot;derby.stream.error.method&quot; properties as well.  In fact, just testing now and during the ErrorStreamTest.testFile method by itself, it also has a &quot;derby.log&quot; present.&lt;/p&gt;

</comment>
                            <comment id="13797186" author="myrna" created="Wed, 16 Oct 2013 20:58:33 +0100"  >&lt;p&gt;I agree - the derby.log file creation is not something that&apos;s under control of the ErrorStreamTest, it is something related to our junit framework and basic derby operation as Brett identified rather than this feature.&lt;/p&gt;

&lt;p&gt;I ran the engine._Suite (which includes the new test fixtures) with patch _7 applied, and it now indeed passes on my windows machine.&lt;br/&gt;
Further improvements can be done separately, (under separate JIRAs, like what Mamta found for failure analysis of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6380&quot; title=&quot;Rolling log files do not get copied in failed directory when a junit test fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6380&quot;&gt;&lt;del&gt;DERBY-6380&lt;/del&gt;&lt;/a&gt;), I think this feature is now ready to go in.&lt;/p&gt;

&lt;p&gt;+1 to commit.&lt;/p&gt;</comment>
                            <comment id="13797196" author="mamtas" created="Wed, 16 Oct 2013 21:10:00 +0100"  >&lt;p&gt;I will work on committing the patch soon unless someone has any comments. The junit tests have not finished on my machine yet.&lt;/p&gt;</comment>
                            <comment id="13798247" author="myrna" created="Thu, 17 Oct 2013 19:31:57 +0100"  >&lt;p&gt;I think this should not hold up initial commit, but perhaps we can modify the code later so that if the rolling log file properties are set, we just delete the newly created derby.log (if it is indeed empty)?&lt;/p&gt;</comment>
                            <comment id="13798328" author="mamtas" created="Thu, 17 Oct 2013 20:46:40 +0100"  >&lt;p&gt;derbyall and junit ran fine on machine with the patch&lt;/p&gt;</comment>
                            <comment id="13798770" author="jira-bot" created="Fri, 18 Oct 2013 05:10:55 +0100"  >&lt;p&gt;Commit 1533320 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1533320&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1533320&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6350&quot; title=&quot;Provide a rolling file implementation of derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6350&quot;&gt;&lt;del&gt;DERBY-6350&lt;/del&gt;&lt;/a&gt; (Provide a rolling file implementation of derby.log)&lt;/p&gt;

&lt;p&gt;Committing patch submitted by Brett Bergquist&lt;/p&gt;</comment>
                            <comment id="13802676" author="knutanders" created="Wed, 23 Oct 2013 08:44:15 +0100"  >&lt;p&gt;There was a failure in one of the new test cases in the latest nightly test cycle:&lt;br/&gt;
&lt;a href=&quot;http://download.java.net/javadesktop/derby/request_5583094/javadb-task-3745053.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/request_5583094/javadb-task-3745053.html&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;junit.framework.AssertionFailedError: /localhome/tendril4.2/work/run/27530881/junit/system/derby-0.log exists
	at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertNotExisting(ErrorStreamTest.java:697)
	at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongStyle(ErrorStreamTest.java:403)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:439)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:456)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13802914" author="bbergquist" created="Wed, 23 Oct 2013 15:54:56 +0100"  >&lt;p&gt;Are the test cases always run in the same order?  I am not totally familiar with this and maybe a derby-0.log was present from another test case, causing this to fail?&lt;/p&gt;</comment>
                            <comment id="13802949" author="knutanders" created="Wed, 23 Oct 2013 16:30:03 +0100"  >&lt;p&gt;The test cases could run in any order (there are techniques to force them to run in a specific order, though). So it would be best if each test case cleaned up after itself completely. The failing test run executed the test cases in the following order:&lt;/p&gt;

&lt;p&gt;testMethod&lt;br/&gt;
testFile&lt;br/&gt;
testFileOverMethod&lt;br/&gt;
testFileOverField&lt;br/&gt;
testMethodOverField&lt;br/&gt;
testStyleRollingFile&lt;br/&gt;
testRollingFileStyleOverFile&lt;br/&gt;
testRollingFileStyleOverMethod&lt;br/&gt;
testRollingFileStyleOverField&lt;br/&gt;
testDefault&lt;br/&gt;
testWrongFile&lt;br/&gt;
testWrongMethod&lt;br/&gt;
testField&lt;br/&gt;
testWrongField&lt;br/&gt;
testWrongStyle&lt;br/&gt;
testFileOverMethodAndField&lt;br/&gt;
testDefaultRollingDefaultConfig&lt;br/&gt;
testDefaultRollingUserConfig&lt;/p&gt;</comment>
                            <comment id="13802987" author="bbergquist" created="Wed, 23 Oct 2013 17:09:56 +0100"  >&lt;p&gt;Okay, thanks.   Did not know that and probably one of the tests is not cleaning up.  I will take a look at it.&lt;/p&gt;</comment>
                            <comment id="13806719" author="bbergquist" created="Mon, 28 Oct 2013 12:32:18 +0000"  >&lt;p&gt;Here is a patch for ErrorStreamTest.java.  This patch removes the rolling log files created by two test cases to ensure that the test cases can be run in any order.&lt;/p&gt;</comment>
                            <comment id="13807556" author="mamtas" created="Tue, 29 Oct 2013 01:05:56 +0000"  >&lt;p&gt;Brett, the patch looks good. I will commit it.&lt;/p&gt;</comment>
                            <comment id="13813344" author="mamtas" created="Mon, 4 Nov 2013 21:58:35 +0000"  >&lt;p&gt;Just realized that the commit has not shown up in jira for some reason. The test changes went in on Tue Oct 29th  2013 as part of revision 1536808.&lt;/p&gt;</comment>
                            <comment id="13822812" author="myrna" created="Thu, 14 Nov 2013 19:43:42 +0000"  >&lt;p&gt;I did some simple manual experimenting, and did not see an empty derby.log created. But I do see it when running the ErrorStreamsTest. I&apos;ll do a little more analysis, and if I figure out what the problem is I&apos;ll log a new issue.&lt;br/&gt;
But I think this can be resolved.&lt;/p&gt;</comment>
                            <comment id="13822813" author="myrna" created="Thu, 14 Nov 2013 19:44:35 +0000"  >&lt;p&gt;Thanks for contributing this feature Brett!&lt;/p&gt;</comment>
                            <comment id="14284842" author="myrna" created="Wed, 21 Jan 2015 00:23:40 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12497856">DERBY-5007</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12674166">DERBY-6380</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12671422">DERBY-6359</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12610545" name="ErrorStreamTest_rolling_file_cleanup.patch" size="972" author="bbergquist" created="Mon, 28 Oct 2013 12:32:18 +0000"/>
                            <attachment id="12605477" name="rolling_file_patch_5.txt" size="44415" author="bbergquist" created="Fri, 27 Sep 2013 17:39:28 +0100"/>
                            <attachment id="12605961" name="rolling_file_patch_6.txt" size="44603" author="bbergquist" created="Mon, 30 Sep 2013 20:57:36 +0100"/>
                            <attachment id="12608704" name="rolling_file_patch_7.diff" size="44769" author="bbergquist" created="Wed, 16 Oct 2013 13:32:43 +0100"/>
                            <attachment id="12604642" name="rollingfilelog.patch.txt" size="31458" author="bbergquist" created="Mon, 23 Sep 2013 19:37:22 +0100"/>
                            <attachment id="12604101" name="rollingfilelog.patch.txt" size="28637" author="bbergquist" created="Thu, 19 Sep 2013 20:48:45 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Sep 2013 00:03:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>349450</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzi3kn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>349748</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>