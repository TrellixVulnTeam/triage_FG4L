<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:10:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4679/DERBY-4679.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4679] Several left outer joins causes unstable query with incorrect results</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4679</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;select distinct &lt;br/&gt;
    t1.ITEM_ID, &lt;br/&gt;
    t1.STATE_ID, &lt;br/&gt;
    t1.JZ_DISCRIMINATOR &lt;br/&gt;
from (&lt;br/&gt;
    select * &lt;br/&gt;
    from &lt;br/&gt;
        LM.ABSTRACT_INSTANCE z1 &lt;br/&gt;
    where &lt;br/&gt;
        z1.JZ_DISCRIMINATOR = 238&lt;br/&gt;
) t1 left outer join &lt;br/&gt;
    LM.LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID) left outer join &lt;br/&gt;
         LM.ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID) left outer join &lt;br/&gt;
             LM.OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID) left outer join &lt;br/&gt;
                 LM.ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID) left outer join &lt;br/&gt;
                     LM.FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID) left outer join &lt;br/&gt;
                         LM.FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID) &lt;br/&gt;
where (&lt;br/&gt;
    t3.FAMILY_ITEM_ID  in(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;) and &lt;br/&gt;
    (t5.ROOT_ITEM_ID = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos;) and &lt;br/&gt;
    (t7.ROOT_ITEM_ID = &apos;_5nN9mmTeEd-Q8aOqWJPEIQ&apos;) and &lt;br/&gt;
    (t1.VISIBILITY = 0)&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;The above query returns no results despite the fact that the database contains results that match the query.  &lt;br/&gt;
Slight modifications to the query that shouldn&apos;t change the outcome cause it to return the expected results.  For example: changing &lt;br/&gt;
&quot;t3.FAMILY_ITEM_ID  in(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;)&quot; &lt;br/&gt;
to &lt;br/&gt;
&quot;t3.FAMILY_ITEM_ID  in(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;, &apos;blah&apos;)&quot; &lt;br/&gt;
or &lt;br/&gt;
&quot;t3.FAMILY_ITEM_ID  = &apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;&quot;&lt;/p&gt;

&lt;p&gt;or removing  &lt;br/&gt;
&quot;(t5.ROOT_ITEM_ID = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos;) and &quot;&lt;br/&gt;
despite the fact that the results show that t5.ROOT_ITEM_ID is equal to the string above.&lt;/p&gt;

&lt;p&gt;Note that there is no error message associated with the incorrect query, it just returns zero rows.&lt;/p&gt;

&lt;p&gt;The query below doesn&apos;t use join statements and works as expected.&lt;/p&gt;

&lt;p&gt;select distinct &lt;br/&gt;
   t1.item_id, &lt;br/&gt;
   t1.state_id, &lt;br/&gt;
   t1.jz_discriminator&lt;br/&gt;
from (&lt;br/&gt;
        select * &lt;br/&gt;
        from &lt;br/&gt;
            lm.abstract_instance z1 &lt;br/&gt;
        where &lt;br/&gt;
            z1.jz_discriminator = 238&lt;br/&gt;
    ) t1,&lt;br/&gt;
    lm.lab_resource_operatingsystem j1,&lt;br/&gt;
    lm.abstract_instance t3,&lt;br/&gt;
    lm.operating_system_software_install j2,&lt;br/&gt;
    lm.abstract_instance t2,&lt;br/&gt;
    lm.family t5,&lt;br/&gt;
    lm.family t7&lt;br/&gt;
where&lt;br/&gt;
    t1.item_id = j1.jz_parent_id and&lt;br/&gt;
    j1.item_id = t2.item_id and&lt;br/&gt;
    t2.item_id = j2.jz_parent_id and&lt;br/&gt;
    j2.item_id = t3.item_id and&lt;br/&gt;
    t2.family_item_id = t5.item_id and&lt;br/&gt;
    t1.family_item_id = t7.item_id and&lt;br/&gt;
    t3.family_item_id in (&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;) and&lt;br/&gt;
    t5.root_item_id = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos; and&lt;br/&gt;
    t7.root_item_id = &apos;_5nN9mmTeEd-Q8aOqWJPEIQ&apos; and&lt;br/&gt;
    t1.visibility = 0;&lt;/p&gt;</description>
                <environment>------------------ Java Information ------------------&lt;br/&gt;
Java Version:    1.5.0&lt;br/&gt;
Java Vendor:     IBM Corporation&lt;br/&gt;
Java home:       C:\jazz-rtc-2.0.0.2\client\eclipse\jdk\jre&lt;br/&gt;
Java classpath:  C:\Progra~1\Derby\Derby10.5.3/lib/derby.jar;C:\Progra~1\Derby\Derby10.5.3/lib/derbynet.jar;C:\Progra~1\Derby\Derby10.5.3/lib/derbyclient.jar;C:\Progra~1\Derby\Derby10.5.3/lib/derbytools.jar&lt;br/&gt;
OS name:         Windows XP&lt;br/&gt;
OS architecture: x86&lt;br/&gt;
OS version:      5.1 build 2600 Service Pack 3&lt;br/&gt;
Java user name:  dirichar&lt;br/&gt;
Java user home:  C:\Documents and Settings\dirichar&lt;br/&gt;
Java user dir:   C:\Program Files\Derby\Derby10.5.3\bin&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.5&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 5.0 - JDBC 3.0&lt;br/&gt;
[C:\Program Files\Derby\Derby10.5.3\lib\derby.jar] 10.5.3.0 - (802917)&lt;br/&gt;
[C:\Program Files\Derby\Derby10.5.3\lib\derbytools.jar] 10.5.3.0 - (802917)&lt;br/&gt;
[C:\Program Files\Derby\Derby10.5.3\lib\derbynet.jar] 10.5.3.0 - (802917)&lt;br/&gt;
[C:\Program Files\Derby\Derby10.5.3\lib\derbyclient.jar] 10.5.3.0 - (802917)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
Current Locale :  [English/United States [en_US]]&lt;br/&gt;
Found support for locale: [cs]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [de_DE]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [es]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [fr]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [hu]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [it]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [ja_JP]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [ko_KR]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [pl]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [pt_BR]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [ru]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [zh_CN]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
Found support for locale: [zh_TW]&lt;br/&gt;
	 version: 10.5.3.0 - (802917)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
</environment>
        <key id="12465506">DERBY-4679</key>
            <summary>Several left outer joins causes unstable query with incorrect results</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dirichar">David Richards</reporter>
                        <labels>
                    </labels>
                <created>Wed, 26 May 2010 21:57:45 +0100</created>
                <updated>Fri, 15 Nov 2013 08:15:13 +0000</updated>
                            <resolved>Wed, 16 Feb 2011 05:35:05 +0000</resolved>
                                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.1</fixVersion>
                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12872179" author="knutanders" created="Thu, 27 May 2010 12:10:35 +0100"  >&lt;p&gt;Hi David,&lt;/p&gt;

&lt;p&gt;It would be helpful if you could post the schema for the tables involved in the query, including all constraints and indexes defined on them. Preferably also with enough rows to reproduce the problem.&lt;br/&gt;
(The dblook utility could be used to extract schema information. See &lt;a href=&quot;http://db.apache.org/derby/docs/10.6/tools/ctoolsdblook.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.6/tools/ctoolsdblook.html&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;There&apos;s at least one wrong query result bug affecting joins (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4372&quot; title=&quot;Wrong result for simple join when index is created&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4372&quot;&gt;&lt;del&gt;DERBY-4372&lt;/del&gt;&lt;/a&gt;) in 10.5.3.0 that has been fixed in the recently released 10.6.1.0, so it might be worthwhile to check if the bug is still present in the latest version of Derby.&lt;/p&gt;</comment>
                            <comment id="12872227" author="dirichar" created="Thu, 27 May 2010 15:20:34 +0100"  >&lt;p&gt;I&apos;ve attached the output of dblook as db.sql and a simplified creation script as sample.sql that includes the relevant tables and columns with sample data.  I also verified that the bug still occurs in 10.6.1.0&lt;/p&gt;</comment>
                            <comment id="12872352" author="knutanders" created="Thu, 27 May 2010 21:27:22 +0100"  >&lt;p&gt;Thanks David. I&apos;m able to reproduce it with the scripts you attached.&lt;/p&gt;

&lt;p&gt;I&apos;m a little puzzled by the fact that rewriting &quot;t3.FAMILY_ITEM_ID in(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;)&quot; to &quot;t3.FAMILY_ITEM_ID = &apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;&quot; changes the result, since Derby actually does that internally before the statement is compiled.&lt;/p&gt;</comment>
                            <comment id="12873119" author="dagw" created="Fri, 28 May 2010 20:19:54 +0100"  >&lt;p&gt;With this modified query (inner join t3)&lt;/p&gt;

&lt;p&gt;select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from &lt;br/&gt;
   (select * from LM.ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1 left outer join &lt;br/&gt;
    LM.LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID) left outer join &lt;br/&gt;
    LM.ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID) left outer join &lt;br/&gt;
    LM.OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID) inner join&lt;br/&gt;
    LM.ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID) left outer join&lt;br/&gt;
    LM.FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID) left outer join&lt;br/&gt;
    LM.FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID) where &lt;br/&gt;
        (t3.FAMILY_ITEM_ID in(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;) and &lt;br/&gt;
        (t5.ROOT_ITEM_ID = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos;) and &lt;br/&gt;
        (t7.ROOT_ITEM_ID = &apos;_5nN9mmTeEd-Q8aOqWJPEIQ&apos;));&lt;/p&gt;

&lt;p&gt;the query works also with the IN formulation.  With the equality&lt;br/&gt;
formulation, which was seen to work, the left outer join is&lt;br/&gt;
internally rewritten to inner join. Since the single value IN is rewritten to&lt;br/&gt;
equality, Derby could have done that rewrite internally also for that&lt;br/&gt;
case, and the problem would presumably have gone away. I don&apos;t this&lt;br/&gt;
this is (necessarily) the root problem, though.&lt;/p&gt;

&lt;p&gt;With multiple values in the IN clause, this rewrite of the JOIN does&lt;br/&gt;
not happen, however, but that formulation also works. I tried to&lt;br/&gt;
disable temporarily the rewrite to equality  for the single value case&lt;br/&gt;
(InListOperatorNode#preprocess), so as to use the multi-probing&lt;br/&gt;
strategy, but the query still fails. (edited: actually it works, finger trouble, see next comment)&lt;/p&gt;</comment>
                            <comment id="12873127" author="dagw" created="Fri, 28 May 2010 20:44:23 +0100"  >&lt;p&gt;As far as trying the multi-probing case, I was foiled  by the check for same min and max value, which also short circuits to equality (InListOperatorNode, ca line 282). By also commenting out that section, thus forcing the probing strategy, the query worked.&lt;br/&gt;
So, it&apos;s the transformation to equality in this context which makes it fail somehow.&lt;/p&gt;</comment>
                            <comment id="12873140" author="dagw" created="Fri, 28 May 2010 21:28:21 +0100"  >&lt;p&gt;See this all the way back to 10.0, so not a regression.&lt;/p&gt;</comment>
                            <comment id="12873283" author="dagw" created="Sat, 29 May 2010 14:28:59 +0100"  >&lt;p&gt;I enabled the calls of traceScanParameters in TableScanResultSet for the IN formulation and the equal formulation, uploaded as&lt;br/&gt;
trace-equal.log and trace-in.log. As can be seen, for the IN case, there are two qualifiers being applied to the table FAMILY,&lt;br/&gt;
whereas in the equal case there is only one, column id 1 (ITEM_ID), which is reasonable. In the IN case, there is also pushed down a qualifier on&lt;br/&gt;
column id 0 (STATE_ID) which seems wrong. Presumably this is why no rows qualify from FAMILY and hence leads to now rows in all result sets (see enclosed&lt;br/&gt;
execution plan, trace-exec-plan.log).&lt;/p&gt;

&lt;p&gt;&amp;#8211; Edited: The columns mentioned above for FAMILY should be 0: ITEM_ID, 1:ROOT_ITEM_ID. Later investigation shows that the qualifier on column 0 is wrong, see below. (STATE_ID is in another table, sorry for the confusion).&lt;/p&gt;</comment>
                            <comment id="12873284" author="dagw" created="Sat, 29 May 2010 14:51:50 +0100"  >&lt;p&gt;Uploading the AST dump just after DMLStatementNode#optimizeStatement has called preprocess:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in-after-preprocess.log (wrong result)&lt;/li&gt;
	&lt;li&gt;ins-after-preprocess.log (correct result)&lt;/li&gt;
	&lt;li&gt;equal-after-preprocess.log (correct result)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have normalized the node hash numbers for ease of comparison to be ascending integers.&lt;/p&gt;</comment>
                            <comment id="12873298" author="dagw" created="Sat, 29 May 2010 17:10:59 +0100"  >&lt;p&gt;Looking at in-after-preprocess.log, line 4551, I see a restriction predicate on T7 (LM.FAMILY):&lt;/p&gt;

&lt;p&gt;T7.ITEM_ID = CharConstantNode@331&lt;span class=&quot;error&quot;&gt;&amp;#91;&amp;#39;_5VetVWTeEd-Q8aOqWJPEIQ&amp;#39;&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;This is wrong, because this constant is only ever used in the query against table T3 (LM.ABSTRACT_INSTANCE),&lt;br/&gt;
and then against column FAMILY_ITEM_ID. This is the cause of the wrong qualifier which leads to 0 rows from FAMILY as seen.&lt;/p&gt;

&lt;p&gt;On the other hand, in ins-after-preprocess (correct result), we see two predicates in the final where clause (because the last two joins have been flattened, 4&lt;br/&gt;
halfouterjoinnodes remain:&lt;/p&gt;

&lt;p&gt;a) t1.FAMILY_ITEM_ID = T7.ITEM_ID&lt;br/&gt;
b) t2.FAMILY_ITEM_ID = T5.ITEM_ID&lt;/p&gt;

&lt;p&gt;For the single IN case (erroneous), we also have only 4 remaining halfouterjoinnodes, but the b) predicate in the final where clause is missing.&lt;/p&gt;

&lt;p&gt;In the equal-after-preprocess.log we see only three halfouterjoinnodes, since 3 joins have been flattened, and the final where predicate contains&lt;br/&gt;
a) and b) plus a new&lt;/p&gt;

&lt;p&gt;c) J2.ITEM_ID = T3.ITEM_ID&lt;/p&gt;

&lt;p&gt;which corresponds to the third but the last join, which have been flattened because of the equality. &lt;br/&gt;
In the erroneous case, the left outer join was not converted to an inner join since it did not contain an = operator at the time of LOJ-&amp;gt;IJ conversion, so flattening did not happen&lt;br/&gt;
and we are left with 4 halfouterjoinnodes. That is less than optimal, but should still work.&lt;/p&gt;

&lt;p&gt;Somehow the preprocessing (all is fine after bind) of the simple IN case has gone wrong.&lt;/p&gt;</comment>
                            <comment id="12873687" author="dagw" created="Mon, 31 May 2010 16:32:38 +0100"  >&lt;p&gt;Two data points: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Disabling LOJ reordeable has no effect, so it is probably not related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4471&quot; title=&quot;Left outer join reassociation rewrite gives wrong result&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4471&quot;&gt;&lt;del&gt;DERBY-4471&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Disabling the call to transforOuterJoins in FromList#preprocess makes the query work&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12873694" author="dagw" created="Mon, 31 May 2010 17:14:25 +0100"  >&lt;p&gt;While keeping the call to transforOuterJoins in FromList#preprocess disabled, I manage to get this version of the query to fail as well. The predicate on t3.FAMILY_ITEM_ID uses explicit equality here, but it not lead to rewrite to inner join of the LOJ with t3 in this case since I disabled transforOuterJoins.&lt;/p&gt;

&lt;p&gt;&quot;select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from &lt;br/&gt;
 (((((((select * from LM.ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1  &lt;br/&gt;
        left outer join LM.LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID))  &lt;br/&gt;
       left outer join LM.ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID))  &lt;br/&gt;
      left outer join LM.OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID)) &lt;br/&gt;
     left outer join LM.ABSTRACT_INSTANCE t3 on (j2.ITEM_ID = t3.ITEM_ID))  &lt;br/&gt;
    inner join LM.FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID))  &lt;br/&gt;
   inner join LM.FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID))  &lt;br/&gt;
  where (t3.FAMILY_ITEM_ID =&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos; and  &amp;lt;------------ explicit &quot;=&quot;  also fails when LOJ -&amp;gt; IJ is disabled&lt;br/&gt;
        (t5.ROOT_ITEM_ID = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos;) and  &lt;br/&gt;
        (t7.ROOT_ITEM_ID =&apos;_5nN9mmTeEd-Q8aOqWJPEIQ&apos;))&quot;&lt;/p&gt;

&lt;p&gt;The LOJ-&amp;gt;IJ rewrite is not logically required and the bug is now seen to be present without the LOJ-&amp;gt;IJ rewriting happeing.&lt;/p&gt;

&lt;p&gt;In the above query, we have four remaining LOJs. This is also what resulted in the original case after IN is transformed to &apos;=&quot;, since that happens too late for LOJ-&amp;gt;IJ to kick in for that case. It does happen for the two last joins, as manually replicated in the above experiment.&lt;/p&gt;

&lt;p&gt;I see that the reason the predicate &quot;= _5VetVWTeEd-Q8aOqWJPEIQ&quot; ends up on T7.ITEM_ID is because of the transitive closure computation in PredicatList#searchClauseTransitiveClosure. &lt;/p&gt;

&lt;p&gt;Could it be that the precondition for that is wrong here: a predicate on t3 which has not been flattened is applied transitively to the T7, which has been?&lt;/p&gt;</comment>
                            <comment id="12873761" author="dagw" created="Mon, 31 May 2010 20:24:42 +0100"  >&lt;p&gt;I am starting to convince myself it is plain wrong to apply the transitive closure to predicates on tables not from the outer equi-joins, cf&lt;br/&gt;
the explanation in the Sybase manual:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc00743.1502/html/queryprocessing/queryprocessing8.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc00743.1502/html/queryprocessing/queryprocessing8.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(quote):&lt;br/&gt;
 (predicate) Transitive closure is used only for normal equi-joins, as shown. join transitive closure is not performed for:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Non-equi-joins; for example, t1.c1 &amp;gt; t2.c2&lt;/li&gt;
	&lt;li&gt;Outer joins; for example, t1.c11 *= t2.c2, or left join or right join  (&amp;lt;------------ NOTE! -Dag&apos;s emphasis)&lt;/li&gt;
	&lt;li&gt;Joins across subquery boundaries&lt;/li&gt;
	&lt;li&gt;Joins used to check referential integrity or the with check option on views&lt;br/&gt;
(quote end)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;as well as the Derby docs which explains its rationale here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/docs/10.6/tuning/rtuntransform866587.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.6/tuning/rtuntransform866587.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12873801" author="dagw" created="Mon, 31 May 2010 23:02:15 +0100"  >&lt;p&gt;I see that in the table number for t3 in the predicate &quot;t3.FAMILY_ITEM_ID =&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;&quot; is 9.&lt;br/&gt;
However, so is also the table number for t1 in the equi-join clause &quot;t1.FAMILY_ITEM_ID = t7.ITEM_ID)&quot;.&lt;/p&gt;

&lt;p&gt;This is the immediate reason why the bad predicate is added by the searchClauseTransitiveClosure logic, t3 is assumed to be the same as t1.&lt;/p&gt;

&lt;p&gt;t1 and t3 both have the same underlying base table, i.e. LM.ABSTRACT_INSTANCE.&lt;/p&gt;</comment>
                            <comment id="12874256" author="dagw" created="Tue, 1 Jun 2010 22:42:45 +0100"  >&lt;p&gt;I now believe this is a bug related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3023&quot; title=&quot;Different result rows depending on the sequence of INNER JOIN and OUTER JOIN&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3023&quot;&gt;&lt;del&gt;DERBY-3023&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
When equi-joins are flattened (JoinNode#flatten), the column references are remapped, cf. calls to&lt;br/&gt;
remapColumnReferencesToExpressions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; uncovered a weakness in this remapping in that only table&lt;br/&gt;
number were updated, not column numbers. The fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
contains this line in&lt;br/&gt;
ColumnReference#remapColumnReferencesToExpressions:&lt;/p&gt;

&lt;p&gt;   ResultColumn ftRC =&lt;br/&gt;
       ft.getResultColumns().getResultColumn(columnName);&lt;/p&gt;

&lt;p&gt;Unfortunately, in this query, using the columnName will not uniquely&lt;br/&gt;
identify the correct result column, since the multi-way&apos;s concatenated&lt;br/&gt;
list of result columns (cf. the write-up attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12358291/d2526_v1.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12358291/d2526_v1.html&lt;/a&gt;)&lt;br/&gt;
contains several columns with the same names, resulting from the fact&lt;br/&gt;
that the query contains self-joins on ABSTRACT_INSTANCE): z1/t1, t2&lt;br/&gt;
and t3.&lt;/p&gt;

&lt;p&gt;To see this happening, apply the patch show.diff and run the attached&lt;br/&gt;
program Foo.java.  I believe this causes one or more of remappings to&lt;br/&gt;
go awry. The immediate problem is that the remapping of&lt;br/&gt;
t3.FAMILY_ITEM_ID chooses the first occurence of FAMILY_ITEM_ID and&lt;br/&gt;
ands up with the occurence for z1/t1, which leads to the fatal mixup.&lt;/p&gt;


&lt;p&gt;Output seen:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;map before: T1.ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (0, 2) VCid=2&lt;br/&gt;
Found 6 columns of the name ITEM_ID&lt;br/&gt;
map after: T1.ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 2) VCid=2 map from VirtualColumnId&lt;br/&gt;
map before: T1.STATE_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (0, 4) VCid=4&lt;br/&gt;
Found 3 columns of the name STATE_ID&lt;br/&gt;
map after: T1.STATE_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 4) VCid=4 map from VirtualColumnId&lt;br/&gt;
map before: T1.JZ_DISCRIMINATOR &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (0, 1) VCid=1&lt;br/&gt;
Found 3 columns of the name JZ_DISCRIMINATOR&lt;br/&gt;
map after: T1.JZ_DISCRIMINATOR &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 1) VCid=1 map from VirtualColumnId&lt;br/&gt;
map before: T3.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (8, 3) VCid=17&lt;br/&gt;
Found 3 columns of the name FAMILY_ITEM_ID&lt;br/&gt;
map after: T3.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 3) VCid=17 map from VirtualColumnId&lt;br/&gt;
map before: T5.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (10, 2) VCid=21&lt;br/&gt;
map after: T5.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 21) VCid=21 map from VirtualColumnId&lt;br/&gt;
map before: T7.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;T7&amp;#93;&lt;/span&gt; (tablenum, colnum) = (12, 2) VCid=23&lt;br/&gt;
map after: T7.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;T7&amp;#93;&lt;/span&gt; (tablenum, colnum) = (12, 2) VCid=23 map from ColumnPosition&lt;br/&gt;
map before: T1.VISIBILITY &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (0, 5) VCid=5&lt;br/&gt;
Found 3 columns of the name VISIBILITY&lt;br/&gt;
map after: T1.VISIBILITY &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 5) VCid=5 map from VirtualColumnId&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;map before: T1.ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 2) VCid=2&lt;br/&gt;
Found 5 columns of the name ITEM_ID&lt;br/&gt;
map after: T1.ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 2) VCid=2 map from VirtualColumnId&lt;br/&gt;
map before: T1.STATE_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 4) VCid=4&lt;br/&gt;
map after: T1.STATE_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 4) VCid=4 map from VirtualColumnId&lt;br/&gt;
map before: T1.JZ_DISCRIMINATOR &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 1) VCid=1&lt;br/&gt;
map after: T1.JZ_DISCRIMINATOR &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 1) VCid=1 map from VirtualColumnId&lt;br/&gt;
map before: T3.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 3) VCid=17&lt;br/&gt;
Found 3 columns of the name FAMILY_ITEM_ID&lt;br/&gt;
map after: T3.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 3) VCid=17 map from VirtualColumnId&lt;br/&gt;
map before: T5.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;T5&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 21) VCid=21&lt;br/&gt;
map after: T5.ROOT_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;T5&amp;#93;&lt;/span&gt; (tablenum, colnum) = (10, 2) VCid=21 map from ColumnPosition&lt;br/&gt;
map before: T1.VISIBILITY &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (11, 5) VCid=5&lt;br/&gt;
map after: T1.VISIBILITY &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 5) VCid=5 map from VirtualColumnId&lt;br/&gt;
map before: T1.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (0, 3) VCid=3&lt;br/&gt;
Found 3 columns of the name FAMILY_ITEM_ID&lt;br/&gt;
map after: T1.FAMILY_ITEM_ID &lt;span class=&quot;error&quot;&gt;&amp;#91;null&amp;#93;&lt;/span&gt; (tablenum, colnum) = (9, 3) VCid=3 map from VirtualColumnId&lt;/p&gt;
&lt;hr /&gt;</comment>
                            <comment id="12874258" author="dagw" created="Tue, 1 Jun 2010 22:51:02 +0100"  >&lt;p&gt;Just for the record, the fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; didn&apos;t &lt;b&gt;cause&lt;/b&gt; this problem, it&apos;s just that the solution is not sufficient for this case.&lt;/p&gt;</comment>
                            <comment id="12874791" author="dagw" created="Wed, 2 Jun 2010 21:45:36 +0100"  >&lt;p&gt;Uploading drawing.txt of the query tree at three instances in time, decorated with&lt;br/&gt;
(tablenumber, column number) for join predicates and search predicates:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;before flattening&lt;/li&gt;
	&lt;li&gt;after flattening of IJ with T7&lt;/li&gt;
	&lt;li&gt;after flattening of IJ with T5&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This shows in yet another way how &quot;t3.FAMILY_ITEM_ID&quot; gets the wrong column number during the flattening process. &lt;/p&gt;

&lt;p&gt;I still don&apos;t have a suggestion for how to fix this problem, since the old approach seems broken: Somehow, the correct result column should be identified using &lt;b&gt;both&lt;/b&gt; the table alias &lt;b&gt;and&lt;/b&gt; the column name involved. Maybe looking into the matching result columns searching for its alias could work to disambiguate the result column search, if we are always able to find it.&lt;/p&gt;</comment>
                            <comment id="12875163" author="dagw" created="Thu, 3 Jun 2010 16:52:28 +0100"  >&lt;p&gt;In updated drawing.txt, the search predicate which has a wrong column number is given as:&lt;/p&gt;

&lt;p&gt;  t3.FAMILY_ITEM_ID =&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;= (9,3) still wrong, should be (9,13)&lt;/p&gt;

&lt;p&gt;By manually tweaking it, the query ran successfully.&lt;br/&gt;
So, getting the column re-binding right would fix the problem.&lt;/p&gt;</comment>
                            <comment id="12875465" author="bryanpendleton" created="Fri, 4 Jun 2010 05:29:57 +0100"  >&lt;p&gt;&amp;gt; The immediate problem is that the remapping of &lt;br/&gt;
&amp;gt; t3.FAMILY_ITEM_ID chooses the first occurence of FAMILY_ITEM_ID and &lt;br/&gt;
&amp;gt; ands up with the occurence for z1/t1, which leads to the fatal mixup. &lt;/p&gt;

&lt;p&gt;Your analysis makes sense to me. Thanks for taking the time to prepare&lt;br/&gt;
the clear writeups and supporting materials. &lt;/p&gt;

&lt;p&gt;&amp;gt;  using the columnName will not uniquely &lt;br/&gt;
&amp;gt; identify the correct result column, since the multi-way&apos;s concatenated &lt;br/&gt;
&amp;gt; list of result columns contains several columns with the same names,&lt;/p&gt;

&lt;p&gt;It seems like the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2526&quot; title=&quot;Wrong results with queries that use the JOIN ... ON syntax to join with views or other non-base table expressions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2526&quot;&gt;&lt;del&gt;DERBY-2526&lt;/del&gt;&lt;/a&gt; fix did not expect this to occur, and that&apos;s where&lt;br/&gt;
the problem lies.&lt;/p&gt;

&lt;p&gt;Can we widen the interface to the getResultColumn() API so that we can&lt;br/&gt;
tell it specifically which table number we want the desired column to reside in?&lt;/p&gt;</comment>
                            <comment id="12875590" author="dagw" created="Fri, 4 Jun 2010 14:20:13 +0100"  >&lt;p&gt;Thanks for your comments, Bryan! Yes, I agree with you proposal that the API could be adjusted here.&lt;br/&gt;
I am currently working with an experiment to extend that API method with the desired table&amp;amp;column number instead of the string.&lt;/p&gt;</comment>
                            <comment id="12875810" author="dagw" created="Sat, 5 Jun 2010 01:34:01 +0100"  >&lt;p&gt;Attaching a patch which makes the query work basically using the approach suggested.&lt;br/&gt;
It turns out to be slightly more involved than that, cf the code comments, in that&lt;/p&gt;

&lt;p&gt;  a) we fall back on the column name approach when the CR refers to a base table&lt;br/&gt;
  b) we have to save the original (tn, cn) pair between flattenings to make the new approach work for multiple join flattenings. &lt;/p&gt;

&lt;p&gt;The repro showcases the need for both the above modifications to the basic approach.&lt;/p&gt;

&lt;p&gt;It also adds the test case to JoinTest in a new fixture. Regressions ran ok.&lt;/p&gt;</comment>
                            <comment id="12875820" author="bryanpendleton" created="Sat, 5 Jun 2010 02:20:25 +0100"  >&lt;p&gt;Hi Dag, thanks for the patch!&lt;/p&gt;

&lt;p&gt;I see what you mean, that it&apos;s a slightly involved patch, but I haven&apos;t thought&lt;br/&gt;
of any ways to simplify this; it&apos;s a slightly involved problem after all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The patch may have a few tab-versus-space issues, in particular the&lt;br/&gt;
block comment around line 860 of ColumnReference.java seemed to&lt;br/&gt;
have whitespace-only modifications.&lt;/p&gt;

&lt;p&gt;It might be nice to add an additional sentence or two to the method&lt;br/&gt;
comments for the new getResultColumn method in ResultColumnList&lt;br/&gt;
to indicate that access by the (table-number,column-number) pair is&lt;br/&gt;
used by the optimizer when it is flattening queries, and has to use&lt;br/&gt;
this information to uniquely distinguish the column in situations where&lt;br/&gt;
the same table may appear multiple times in the queries with&lt;br/&gt;
separate correlation names.&lt;/p&gt;

&lt;p&gt;It might be nice to add a comment to the new test case in JoinTest.java,&lt;br/&gt;
perhaps something along the lines of:&lt;/p&gt;

&lt;p&gt;   Verify that when transitive closure generates new criteria into&lt;br/&gt;
   the query, it isn&apos;t confused by situations where the same column name&lt;br/&gt;
   appears in a result column list multiple times due to &lt;br/&gt;
   flattening of sub-queries.&lt;/p&gt;

&lt;p&gt;Obviously the full details will be available in the Jira entry, but it is nice&lt;br/&gt;
sometimes to have a brief description of the test&apos;s purpose in the test itself.&lt;/p&gt;</comment>
                            <comment id="12875830" author="dagw" created="Sat, 5 Jun 2010 02:40:53 +0100"  >&lt;p&gt;Thanks, Bryan! Yes, these are good improvement suggestions!&lt;/p&gt;

&lt;p&gt;As for the whitespace changes around line 860, I am aware of those,&lt;br/&gt;
I was vacillating back and forth on that in order to make the diff look at readable as possible, &lt;br/&gt;
but in the end, I also prefer to keeps the diffs minimal, so I&apos;ll reverse that change.&lt;/p&gt;</comment>
                            <comment id="12875931" author="dagw" created="Sat, 5 Jun 2010 21:19:15 +0100"  >&lt;p&gt;Uploading derby-4679b, which improves on the comments as suggested by Bryan,&lt;br/&gt;
and also simplified the logic slightly in ColumnReference change. Regressions ran ok.&lt;/p&gt;

&lt;p&gt;I forgot to mention that the patch also contains a small improvement to the dumping of query trees that I found missing during debugging: let printSubNodes also print sourceResultSet (we no longer need to worry about circularities since nodes are only printed once).&lt;/p&gt;</comment>
                            <comment id="12875962" author="bryanpendleton" created="Sat, 5 Jun 2010 23:49:37 +0100"  >&lt;p&gt;Thanks for the updated patch, the new comments are very helpful.&lt;br/&gt;
I have no further suggestions to offer; I think that your patch improves&lt;br/&gt;
the system (making more queries run correctly) and I think you should&lt;br/&gt;
move forward with it.&lt;/p&gt;</comment>
                            <comment id="12876252" author="dagw" created="Mon, 7 Jun 2010 15:20:25 +0100"  >&lt;p&gt;Thanks, Bryan, for having another look!&lt;br/&gt;
Committed patch derby-4679b as svn 952237 to solve this issue. Not resolving yet, planning to backport to 10.6 branch.&lt;/p&gt;</comment>
                            <comment id="12879104" author="dagw" created="Tue, 15 Jun 2010 21:06:14 +0100"  >&lt;p&gt;Due to the findings in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;, I will hold off back-porting this until that issue is fixed as well.&lt;/p&gt;</comment>
                            <comment id="12879839" author="dagw" created="Thu, 17 Jun 2010 17:49:57 +0100"  >&lt;p&gt;Uploading a follow-up patch for this issue, which:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adds a sanity check that a found RC has the expected column name (due to the issues seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;). A wrong (tn, cn) pair might in theory lead us to bind to the wrong result column. In Sane mode, this situation will throw an assert, in insane, we will fall back on the old method of binding using the column name. This makes it safer to back-port this issue fix to the 10.6 branch.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If/when we manage to resolve DERB-4695, we can remove the code added in this follow-up patch.&lt;br/&gt;
Regressions ran ok.&lt;/p&gt;</comment>
                            <comment id="12879934" author="dagw" created="Thu, 17 Jun 2010 22:19:04 +0100"  >&lt;p&gt;I did some more research to understand the limitations of the approach&lt;br/&gt;
taken by the fix in this issue, i.e. locating the result column based&lt;br/&gt;
on the (tablenumber, columnnumber) pair. It turns out it fails to work&lt;br/&gt;
also when the column reference is to a subquery, which can be&lt;br/&gt;
flattened before we get the the join flattening, so the table number&lt;br/&gt;
of the CR is no longer to be found, and we fall back on the &quot;buggy&quot; approach of&lt;br/&gt;
looking for the column name described above.&lt;/p&gt;

&lt;p&gt;A slight reformulation of the original problem query makes the bug&lt;br/&gt;
reappear:&lt;/p&gt;

&lt;p&gt;    &quot;select distinct t1.ITEM_ID, t1.state_id, t1.JZ_DISCRIMINATOR from &quot; +&lt;br/&gt;
    &quot;((((((select * from ABSTRACT_INSTANCE z1 where z1.JZ_DISCRIMINATOR = 238) t1 &quot; +&lt;br/&gt;
    &quot;      left outer join LAB_RESOURCE_OPERATINGSYSTEM j1 on (t1.ITEM_ID = j1.JZ_PARENT_ID)) &quot; +&lt;br/&gt;
    &quot;     left outer join ABSTRACT_INSTANCE t2 on (j1.ITEM_ID = t2.ITEM_ID)) &quot; +&lt;br/&gt;
    &quot;    left outer join OPERATING_SYSTEM_SOFTWARE_INSTALL j2 on (t2.ITEM_ID = j2.JZ_PARENT_ID))&quot; +&lt;br/&gt;
    &quot;   left outer join (select * from ABSTRACT_INSTANCE) tCorr on (j2.ITEM_ID = tCorr.ITEM_ID) &quot; +&lt;br/&gt;
    &quot;  inner join FAMILY t5 on (t2.FAMILY_ITEM_ID = t5.ITEM_ID)) &quot; +&lt;br/&gt;
    &quot; inner join FAMILY t7 on (t1.FAMILY_ITEM_ID = t7.ITEM_ID)) &quot; +&lt;br/&gt;
    &quot;where (tCorr.FAMILY_ITEM_ID IN(&apos;_5VetVWTeEd-Q8aOqWJPEIQ&apos;) and &quot; +&lt;br/&gt;
    &quot;      (t5.ROOT_ITEM_ID = &apos;_5ZDlwWTeEd-Q8aOqWJPEIQ&apos;) and &quot; +&lt;br/&gt;
    &quot;      (t7.ROOT_ITEM_ID =&apos;_5nN9mmTeEd-Q8aOqWJPEIQ&apos;) and &quot; +&lt;br/&gt;
    &quot;      (t1.VISIBILITY = 0))&quot;);&lt;/p&gt;

&lt;p&gt;Note that now, instead of t3, we now have a subquery, tCorr.&lt;/p&gt;

&lt;p&gt;However, during my research on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;, I reported that skipping&lt;br/&gt;
the 2nd bind block in JoinNode (unless we have an OUTER JOIN), made&lt;br/&gt;
the observed numbering inconsistency go away.&lt;/p&gt;

&lt;p&gt;Well, it turns out that skipping the second bind for inner joins makes&lt;br/&gt;
the above query variant work, too, as well as the original problem&lt;br/&gt;
query in this issue, &lt;b&gt;without&lt;/b&gt; the fix I have already committed for&lt;br/&gt;
this issue!&lt;/p&gt;

&lt;p&gt;It could be that this is the root problem. Since it also solves the&lt;br/&gt;
above variant, and removes the wrong numbering seen, it seems a better&lt;br/&gt;
fix anyway, if regressions tests still hold up. We&apos;ll see that soon.&lt;/p&gt;

&lt;p&gt;[Edit: 2010-06-24: &lt;/p&gt;

&lt;p&gt;It is not the root cause, because the second bind is needed, cf&lt;br/&gt;
conclusions in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;. The second binding is somewhat&lt;br/&gt;
broken/problematic, though, for two reasons:&lt;/p&gt;

&lt;p&gt;        a) it sometimes leads to wrong column number (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;        b) we can&apos;t rebind correctly when subqueries are flattened&lt;br/&gt;
        (cf. the above query variant) because the node (and the table&lt;br/&gt;
        number) of the column reference representing the subquery&lt;br/&gt;
        column is gone, so the approach taken here (i.e. to match the&lt;br/&gt;
        result column using table number and column number of the CR)&lt;br/&gt;
        fails to locate a matching result column, forcing us back to&lt;br/&gt;
        the old approach, which fails due to column names not being&lt;br/&gt;
        unique.&lt;br/&gt;
]&lt;/p&gt;</comment>
                            <comment id="12880204" author="dagw" created="Fri, 18 Jun 2010 14:48:11 +0100"  >&lt;p&gt;Sadly, this approach also breaks others queries: they all seem to be characterized by&lt;br/&gt;
a mix of inner and outer joins. &lt;/p&gt;</comment>
                            <comment id="12881724" author="dagw" created="Wed, 23 Jun 2010 17:05:54 +0100"  >&lt;p&gt;Having understood the reason for the inconsistency seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4695&quot; title=&quot;Internal assignment of tablenumer, columnnumber looks wrong in query tree, although no ill effects are seen.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4695&quot;&gt;&lt;del&gt;DERBY-4695&lt;/del&gt;&lt;/a&gt;, I think I can&lt;br/&gt;
conclude that the current patch, with the addition of the follow-up patch should be&lt;br/&gt;
safe in the sense of not causing regressions. Therefore, I now intend to commit&lt;br/&gt;
the follow-up patch and back-port both present patches to the 10.6 branch.&lt;/p&gt;

&lt;p&gt;Further investigations are necessary to find a way to handle to subquery variant query show above.&lt;/p&gt;</comment>
                            <comment id="12881728" author="dagw" created="Wed, 23 Jun 2010 17:19:25 +0100"  >&lt;p&gt;Committed derby-4679-followup as svn 957260.&lt;/p&gt;</comment>
                            <comment id="12881800" author="dagw" created="Wed, 23 Jun 2010 19:14:57 +0100"  >&lt;p&gt;Back-ported patches to 10.6 branch as svn  957287.&lt;/p&gt;</comment>
                            <comment id="12882683" author="dagw" created="Fri, 25 Jun 2010 20:00:05 +0100"  >&lt;p&gt;Uploading another follow-up patch for this issue, which also handles of the&lt;br/&gt;
a CR to a subquery join participant being rebound after flattening, see detailed comments in the code.&lt;br/&gt;
Extra test cases are added to JoinTest#testDerby_4679. Regressions ran ok.&lt;/p&gt;</comment>
                            <comment id="12883202" author="dagw" created="Mon, 28 Jun 2010 17:12:47 +0100"  >&lt;p&gt;Committed derby-4679-2 as svn 958618.&lt;/p&gt;</comment>
                            <comment id="12883207" author="dagw" created="Mon, 28 Jun 2010 17:23:15 +0100"  >&lt;p&gt;Back-ported to 10.6 as svn 958621, resolving.&lt;/p&gt;

&lt;p&gt;David, if you think this issue has been adequately addressed, feel free to close the issue.&lt;/p&gt;</comment>
                            <comment id="12891574" author="dirichar" created="Fri, 23 Jul 2010 13:53:20 +0100"  >&lt;p&gt;I couldn&apos;t find any information on the derby pages about planned releases.  Can someone link me to or provide the information about when the versions with this fix in (10.6.1.1, 10.7.0.0) will be officially released?&lt;/p&gt;</comment>
                            <comment id="12893967" author="kristwaa" created="Fri, 30 Jul 2010 09:45:23 +0100"  >&lt;p&gt;I don&apos;t think anyone has stepped up to act as the release manager yet.&lt;br/&gt;
The currently empty pages with information about potential upcoming releases are:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyTenSixTwoRelease&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyTenSixTwoRelease&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyTenSevenOneRelease&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyTenSevenOneRelease&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12989884" author="kmarsden" created="Wed, 2 Feb 2011 23:40:19 +0000"  >&lt;p&gt;Reopen for backport.&lt;/p&gt;</comment>
                            <comment id="12995055" author="kmarsden" created="Tue, 15 Feb 2011 23:17:13 +0000"  >&lt;p&gt;Assign to myself temporarily for backport&lt;/p&gt;</comment>
                            <comment id="12995175" author="kmarsden" created="Wed, 16 Feb 2011 05:35:05 +0000"  >&lt;p&gt;Resolving now that fix has been backported to 10.5&lt;/p&gt;</comment>
                            <comment id="13823427" author="knutanders" created="Fri, 15 Nov 2013 08:15:13 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update: close all resolved issues that haven&amp;#39;t had any activity the last year&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12608438">DERBY-5933</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12466382">DERBY-4695</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12366604">DERBY-2526</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12497378">DERBY-4994</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12446069" name="Foo.java" size="2159" author="dagw" created="Tue, 1 Jun 2010 22:41:21 +0100"/>
                            <attachment id="12445654" name="db.sql" size="4555" author="dirichar" created="Thu, 27 May 2010 15:17:05 +0100"/>
                            <attachment id="12448083" name="derby-4679-2a.diff" size="13980" author="dagw" created="Fri, 25 Jun 2010 20:00:05 +0100"/>
                            <attachment id="12448084" name="derby-4679-2a.stat" size="160" author="dagw" created="Fri, 25 Jun 2010 20:00:05 +0100"/>
                            <attachment id="12447363" name="derby-4679-followup.diff" size="3876" author="dagw" created="Thu, 17 Jun 2010 17:49:57 +0100"/>
                            <attachment id="12447364" name="derby-4679-followup.stat" size="151" author="dagw" created="Thu, 17 Jun 2010 17:49:57 +0100"/>
                            <attachment id="12446387" name="derby-4679a.diff" size="12683" author="dagw" created="Sat, 5 Jun 2010 01:34:00 +0100"/>
                            <attachment id="12446388" name="derby-4679a.stat" size="312" author="dagw" created="Sat, 5 Jun 2010 01:34:00 +0100"/>
                            <attachment id="12446415" name="derby-4679b.diff" size="11935" author="dagw" created="Sat, 5 Jun 2010 21:19:15 +0100"/>
                            <attachment id="12446416" name="derby-4679b.stat" size="312" author="dagw" created="Sat, 5 Jun 2010 21:19:15 +0100"/>
                            <attachment id="12446258" name="drawing.txt" size="7048" author="dagw" created="Thu, 3 Jun 2010 16:55:26 +0100"/>
                            <attachment id="12446174" name="drawing.txt" size="7048" author="dagw" created="Wed, 2 Jun 2010 21:45:36 +0100"/>
                            <attachment id="12445845" name="equal-after-preprocess.log" size="193096" author="dagw" created="Sat, 29 May 2010 14:51:50 +0100"/>
                            <attachment id="12445843" name="in-after-preprocess.log" size="247327" author="dagw" created="Sat, 29 May 2010 14:51:50 +0100"/>
                            <attachment id="12445844" name="ins-after-preprocess.log" size="249472" author="dagw" created="Sat, 29 May 2010 14:51:50 +0100"/>
                            <attachment id="12445655" name="sample.sql" size="2924" author="dirichar" created="Thu, 27 May 2010 15:17:06 +0100"/>
                            <attachment id="12446068" name="show.diff" size="4727" author="dagw" created="Tue, 1 Jun 2010 22:41:21 +0100"/>
                            <attachment id="12445841" name="trace-equal.log" size="3206" author="dagw" created="Sat, 29 May 2010 14:30:39 +0100"/>
                            <attachment id="12445840" name="trace-exec-plan.log" size="15226" author="dagw" created="Sat, 29 May 2010 14:30:39 +0100"/>
                            <attachment id="12445842" name="trace-in.log" size="1098" author="dagw" created="Sat, 29 May 2010 14:30:39 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 May 2010 11:10:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24406</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09of:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35386</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>