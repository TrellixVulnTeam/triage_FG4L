<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:11:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2871/DERBY-2871.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2871] XATransactionTest gets XaException: Error executing a XAResource.commit(), server returned XAER_PROTO.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2871</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Method: org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest&lt;br/&gt;
Signature:&lt;br/&gt;
%XAER_PROTO : Error executing a XAResource.commit(), server returned XAER_PROTO%&lt;/p&gt;

&lt;p&gt;Also see: &lt;a href=&quot;http://dbtg.thresher.com/derby/test/10.3.1.0_RC/jvm1.5/testing/testlog/hpux/548006-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/10.3.1.0_RC/jvm1.5/testing/testlog/hpux/548006-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;</description>
                <environment>OS: HP-UX v1.11 i &lt;br/&gt;
JDK: HP 1.5.0.03 </environment>
        <key id="12372415">DERBY-2871</key>
            <summary>XATransactionTest gets XaException: Error executing a XAResource.commit(), server returned XAER_PROTO.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="julo">Julius Stroffek</assignee>
                                    <reporter username="scheur">Henri van de Scheur</reporter>
                        <labels>
                    </labels>
                <created>Tue, 26 Jun 2007 10:07:14 +0100</created>
                <updated>Fri, 21 Jan 2011 18:17:04 +0000</updated>
                            <resolved>Fri, 11 Apr 2008 09:40:40 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12508767" author="julo" created="Thu, 28 Jun 2007 09:22:35 +0100"  >&lt;p&gt;The exception is thrown probably on XATransaction:203 due to a to low transaction timeout value. I setted up the value just for 5 seconds which might not be enough to commit the transaction when garbage collection is invoked. I&apos;ll increase the value to 30s.&lt;/p&gt;</comment>
                            <comment id="12508794" author="julo" created="Thu, 28 Jun 2007 12:23:38 +0100"  >&lt;p&gt;I changed the way of setting up the transaction timeout in the test.&lt;/p&gt;</comment>
                            <comment id="12508795" author="julo" created="Thu, 28 Jun 2007 12:28:25 +0100"  >&lt;p&gt;When the transaction in the test is supposed to be committed the timeout is set to 60 seconds. If a transaction is supposed to be rolled back the timeout is set to 8 seconds only.&lt;/p&gt;

&lt;p&gt;I ran suites.All without failures on my box. No need to run derbyall since the change is just in a junit test.&lt;/p&gt;</comment>
                            <comment id="12509707" author="myrna" created="Tue, 3 Jul 2007 00:04:11 +0100"  >&lt;p&gt;I committed the patch on trunk with revision 552621.&lt;br/&gt;
But can someone verify this works on the platform it was reported on?&lt;/p&gt;</comment>
                            <comment id="12509881" author="vemund" created="Tue, 3 Jul 2007 15:08:59 +0100"  >&lt;p&gt;I ran Suites.All on HP with my checked out version of trunk (revision 552770) to verify the fix.&lt;/p&gt;

&lt;p&gt;The same test failed, but this time with a lock timeout instead: &lt;/p&gt;

&lt;p&gt;1) testXATransactionTimeout(org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest)java.sql.SQLException: A lock could not be obtained within&lt;br/&gt;
the time requested&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.executeQuery(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.testXATransactionTimeout(XATransactionTest.java:247)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: A lock could not be obtained within the time requested&lt;br/&gt;
        at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseOpenQueryError(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseOPNQRYreply(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.readOpenQuery(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.StatementReply.readOpenQuery(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatement.readOpenQuery_(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.readOpenQuery(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.flowExecute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.executeQueryX(Unknown Source)&lt;br/&gt;
        ... 40 more&lt;/p&gt;</comment>
                            <comment id="12510529" author="myrna" created="Fri, 6 Jul 2007 00:57:05 +0100"  >&lt;p&gt;unchecking patch available, I had checked in the change but it caused an intermittent failure in the test. &lt;br/&gt;
Also unmarking fix  for 10.3.&lt;/p&gt;</comment>
                            <comment id="12513901" author="julo" created="Thu, 19 Jul 2007 15:06:13 +0100"  >&lt;p&gt;I have an access to the machine on which the test failed. However, I am not able to reproduce the failure. I will continue trying to find out what is going on.&lt;/p&gt;</comment>
                            <comment id="12518492" author="julo" created="Wed, 8 Aug 2007 17:24:52 +0100"  >&lt;p&gt;I rewrote the test that it will not close the connections and they will not be garbage collected neither since I call the XAConnection.close method on every connection at the end of the test.&lt;/p&gt;

&lt;p&gt;I ran all the tests (suites.All and derbyall) without failures on my box for &apos;d2871-test&apos; patch also with a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt; without any failures. I tried to run those test also on a HP-UX box where the test was originally failing. The rewritten test always fails with the message &lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
1) testXATransactionTimeout(org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest)java.sql.SQLException: A communications e&lt;br/&gt;
rror has been detected: Broken pipe (errno:32).&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.&amp;lt;init&amp;gt;(ClientPooledConnection.java:115)&lt;br/&gt;
        at org.apache.derby.client.ClientXAConnection.&amp;lt;init&amp;gt;(ClientXAConnection.java:48)&lt;br/&gt;
        at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newClientXAConnection(ClientJDBCObjectFactoryImpl.java:76)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientXADataSource.getXAConnectionX(ClientXADataSource.java:88)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientXADataSource.getXAConnection(ClientXADataSource.java:72)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientXADataSource.getXAConnection(ClientXADataSource.java:65)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.testXATransactionTimeout(XATransactionTest.java:188)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: org.apache.derby.client.am.DisconnectException: A communications error has been detected: Broken pipe (errno:32).&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.throwCommunicationsFailure(NetAgent.java:413)&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.sendRequest(NetAgent.java:387)&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.flush_(NetAgent.java:265)&lt;br/&gt;
        at org.apache.derby.client.am.Agent.flowOutsideUOW(Agent.java:196)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowServerAttributesAndKeyExchange(NetConnection.java:773)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:617)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:435)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.initialize(NetConnection.java:296)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(NetConnection.java:280)&lt;br/&gt;
        at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(ClientJDBCObjectFactoryImpl.java:264)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAConnection.createNetConnection(NetXAConnection.java:269)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAConnection.&amp;lt;init&amp;gt;(NetXAConnection.java:73)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.getNetXAConnection(ClientPooledConnection.java:331)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.&amp;lt;init&amp;gt;(ClientPooledConnection.java:108)&lt;br/&gt;
        ... 44 more&lt;br/&gt;
Caused by: java.net.SocketException: Broken pipe (errno:32)&lt;br/&gt;
        at java.net.SocketOutputStream.socketWrite0(Native Method)&lt;br/&gt;
        at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:97)&lt;br/&gt;
        at java.net.SocketOutputStream.write(SocketOutputStream.java:141)&lt;br/&gt;
        at org.apache.derby.client.net.Request.sendBytes(Request.java:1388)&lt;br/&gt;
        at org.apache.derby.client.net.Request.flush(Request.java:1382)&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.sendRequest(NetAgent.java:385)&lt;br/&gt;
        ... 56 more&lt;br/&gt;
&amp;#8212;&lt;/p&gt;


&lt;p&gt;I explored a problem a bit and discovered that the problem occurs due to the limit of the number of open files and I have created a simple code to verify this...&lt;/p&gt;

&lt;p&gt;        int count = 1000;&lt;br/&gt;
        XAConnection xaConn[] = new XAConnection&lt;span class=&quot;error&quot;&gt;&amp;#91;count&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;        try {&lt;br/&gt;
            // start-up the server&lt;br/&gt;
            NetworkServerControl server = new NetworkServerControl();&lt;br/&gt;
            server.start (null);&lt;/p&gt;

&lt;p&gt;            for (int i=0; i &amp;lt; count; i++) &lt;/p&gt;
{
                System.out.print(&quot;Creating connection number &quot; + i + &quot;...&quot;);
                xaConn[i] = createXAConnection(connString, &quot;&quot;, &quot;&quot;);
                System.out.println(&quot;Ok.&quot;);
            }

&lt;p&gt;            for (int i=0; i &amp;lt; count; i++) &lt;/p&gt;
{
                xaConn[i].close();
            }
&lt;p&gt;        } catch (Exception ex) &lt;/p&gt;
{
            ex.printStackTrace();
        }

&lt;p&gt;which will throw an exception after creating a connection number 391&lt;/p&gt;

&lt;p&gt;org.apache.derby.client.am.DisconnectException: java.net.SocketException : Error connecting to server localhost on port 1527 with message File table overflow (errno:23).&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.&amp;lt;init&amp;gt;(NetAgent.java:129)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.newAgent_(NetConnection.java:1086)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.initConnection(Connection.java:218)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.&amp;lt;init&amp;gt;(Connection.java:169)&lt;br/&gt;
        at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(NetConnection.java:278)&lt;br/&gt;
        at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(ClientJDBCObjectFactoryImpl.java:264)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAConnection.createNetConnection(NetXAConnection.java:269)&lt;br/&gt;
        at org.apache.derby.client.net.NetXAConnection.&amp;lt;init&amp;gt;(NetXAConnection.java:73)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.getNetXAConnection(ClientPooledConnection.java:331)&lt;br/&gt;
        at org.apache.derby.client.ClientPooledConnection.&amp;lt;init&amp;gt;(ClientPooledConnection.java:108)&lt;br/&gt;
        ... 8 more&lt;br/&gt;
Caused by: java.net.SocketException: File table overflow (errno:23)&lt;br/&gt;
        at java.net.Socket.createImpl(Socket.java:397)&lt;br/&gt;
        at java.net.Socket.&amp;lt;init&amp;gt;(Socket.java:359)&lt;br/&gt;
        at java.net.Socket.&amp;lt;init&amp;gt;(Socket.java:178)&lt;br/&gt;
        at javax.net.DefaultSocketFactory.createSocket(SocketFactory.java:196)&lt;br/&gt;
        at org.apache.derby.client.net.OpenSocketAction.run(OpenSocketAction.java:62)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
        at org.apache.derby.client.net.NetAgent.&amp;lt;init&amp;gt;(NetAgent.java:127)&lt;br/&gt;
        ... 17 more&lt;br/&gt;
------&lt;/p&gt;</comment>
                            <comment id="12518495" author="julo" created="Wed, 8 Aug 2007 17:30:59 +0100"  >&lt;p&gt;I will rewrite a test in a way that will use much less connections created in parallel.&lt;/p&gt;

&lt;p&gt;Lesson learned: It was not a good idea to use 1000 connections in a test for a small embedded database as derby is. There might be some restrictions on older or embedded systems.&lt;/p&gt;

&lt;p&gt;However, I am not quite sure if this will fix the issue for sure. I&apos;ll try to test the result as much as possible.&lt;/p&gt;</comment>
                            <comment id="12556551" author="julo" created="Mon, 7 Jan 2008 12:00:46 +0000"  >&lt;p&gt;This is the patch fixing all the possible issues with the test I found. It merges also a change made for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ran the tests without failures. I am planning to run the tests also on the box where the test was originally failing. More detailed description of changes will follow afterwards.&lt;/p&gt;</comment>
                            <comment id="12557311" author="julo" created="Wed, 9 Jan 2008 16:38:38 +0000"  >&lt;p&gt;I have tested the patch on the machine where the tests were originally failing and it went well without failures.&lt;/p&gt;</comment>
                            <comment id="12557350" author="julo" created="Wed, 9 Jan 2008 17:39:02 +0000"  >&lt;p&gt;Changes in xa transaction timeout:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;added a code to print a text message to a log file when the global transaction will get rolled back.&lt;/li&gt;
	&lt;li&gt;joined a code performing a rollback of the global transaction on both embedded and network drivers. The transaction is now atomically (XATransactionState lock is obtained only once) disassociated from the resource and rolled back. The common code is placed in XATransactionState object.&lt;/li&gt;
	&lt;li&gt;a reference to the ResourceAdapter instance was necessary to be present in DRDAXAProtocol/XADatabase and it is captured from EmbedXADataSource during a creation of a connection in XADatabase instance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Changes in XATransactionTest:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The number of connections created was reduced from 1000 to 66.&lt;/li&gt;
	&lt;li&gt;All the references to connections are kept in an array so that no optimization will garbage collect them before the transaction will get rolled back by the proper code tested. All the connections are closed manually at the end of the test.&lt;/li&gt;
	&lt;li&gt;The long running statement was rewritten to use system tables thus the test will no longer need an appropriate number of records in a test table (thus less connections might be created).&lt;/li&gt;
	&lt;li&gt;derby.locks.waitTimeout and derby.locks.deadlockTimeout are being stored in test setup and changed to high enough values and changed back at tearDown. jdbcapi/SetTransactionIsolationTest changes both of these to 3 without restoring them back and this was causing issues with a test.&lt;/li&gt;
	&lt;li&gt;a list of global transactions in progress is dumped when the test fails in case there are pending transactions that were supposed to be rolled back&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Dyre (response to the comment at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt;):&lt;br/&gt;
I am also not quite clear about the policy when to write a javadoc comment and when not. I think I have written javadoc comments for all new methods/classes except when the comment is present in the superclass or method of the superclass and there is nothing new to be written in the implementation. I can copy the comment from the superclass but I do not see a benefit of doing this.&lt;/p&gt;

&lt;p&gt;Thanks for reviewing the patch.&lt;/p&gt;</comment>
                            <comment id="12557352" author="julo" created="Wed, 9 Jan 2008 17:40:21 +0000"  >&lt;p&gt;suites.All and derbyall ran without failures.&lt;/p&gt;</comment>
                            <comment id="12564902" author="kmarsden" created="Fri, 1 Feb 2008 19:39:04 +0000"  >&lt;p&gt;The patch didn&apos;t apply for me. I saw conflicts in messages.xml and MessageId.java.  Could you post an updated patch and I&apos;ll try to look quickly before it gets out of date?&lt;/p&gt;

</comment>
                            <comment id="12564916" author="myrna" created="Fri, 1 Feb 2008 20:09:47 +0000"  >&lt;p&gt;I svn updated to the earlier revision, then could apply the patch fine, and svn update seems to have merged correctly too. &lt;br/&gt;
But I&apos;m out of my depth on this...&lt;br/&gt;
Attaching an updated version so someone else can have a look too.&lt;/p&gt;

&lt;p&gt;questions/comments I do have:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;as was previously observed, I think javadoc would be good for every new method. For ones that overwrite methods from a higher level you can use the @see javadoc tag&lt;/li&gt;
	&lt;li&gt;the new test fixtures uses System.err.println. I think that&apos;s a &apos;not done&apos;, you need to change that into a fail(...)&lt;/li&gt;
	&lt;li&gt;in the test&apos; Setup and tearDown methods, you may be able to take advantage of the new BaseJDBCTestCase.prepareCall. Or, better, can&apos;t you use the DatabasePropertyTestSetup?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12564917" author="myrna" created="Fri, 1 Feb 2008 20:13:27 +0000"  >&lt;p&gt;too bad that we didn&apos;t get this in sooner, looks like we missed a translation effort. &lt;/p&gt;</comment>
                            <comment id="12564967" author="kmarsden" created="Fri, 1 Feb 2008 22:56:53 +0000"  >&lt;p&gt;Thank you for looking at this issue.  I got a bit confused about which changes were part of this issue and which were part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt;.  Are the code changes necessary for the test to pass with its changes or were the two issues&apos; patches just combined for convenience? &lt;/p&gt;

&lt;p&gt;On the code changes I got a bit confused with the XATransationState.isFinished instance variable changes.  isFinished is documented as:&lt;br/&gt;
/** Has this transaction been finished (committed&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;or rolled back)? */&lt;br/&gt;
But the makes isFinshed = true with the XATransactionState constructor, which I didn&apos;t quite understand. The transaction hasn&apos;t been committed or rolled back at that point. It looks like isFinished is only set to  false in setTransactionTimeout which doesn&apos;t seem quite right.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On the test in addition to Myrna&apos;s comments,  do we lose anything by dropping from 1000 connections to 66?  &lt;br/&gt;
The javadoc still says 1000 connections. &lt;/p&gt;


</comment>
                            <comment id="12565298" author="julo" created="Mon, 4 Feb 2008 09:59:18 +0000"  >&lt;p&gt;Myrna, Kathey, thanks for looking at this issue.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;ll add the missing javadoc with @see tags.&lt;/li&gt;
	&lt;li&gt;I&apos;ll change System.err.println to fail(...) and and think about BaseJDBCTestCase.prepareCall or DatabasePropertyTestSetup.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I agree that isFinished is a bit confusing. The idea why it is there is that there is a just a small window in which the cancelation task might be executing and still not obtained a lock on XATransactionState object. In a meanwhile the transaction might get committed or rolled back by the application and afterwards the cancellation task will obtain a lock and run till the completition (see &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/util/TimerTask.html#cancel(&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/util/TimerTask.html#cancel(&lt;/a&gt;) ). This property is used just for preventing attempts to do rollbacks of transactions already committed or rolled back.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Value of isFinished is assigned to false in schedule timeout task beacuse if the global transaction is started with EmbedXAResource.start(TMNOFLAGS) the method XATransactionState.start(TMNOFLAGS) is not called but scheduleTimeoutTask is called if the timeout is required.&lt;/p&gt;

&lt;p&gt;So there are two possible options how to deal whith this:&lt;br/&gt;
a) rename isFinished to something less confusing like &apos;performTimeoutRollback&apos;, etc.&lt;br/&gt;
b) or change the logic so XATransactionState.start would be called also for TMNOFLAGS and isFinished would behave as expected from its name.&lt;/p&gt;

&lt;p&gt;Thanks for your opinions.&lt;/p&gt;</comment>
                            <comment id="12565465" author="kmarsden" created="Mon, 4 Feb 2008 18:50:04 +0000"  >&lt;p&gt;Julius said:&lt;/p&gt;

&lt;p&gt;&amp;gt;So there are two possible options how to deal whith this:&lt;br/&gt;
&amp;gt;a) rename isFinished to something less confusing like &apos;performTimeoutRollback&apos;, etc.&lt;br/&gt;
&amp;gt;b) or change the logic so XATransactionState.start would be called also for TMNOFLAGS and isFinished would behave as expected from its name.&lt;/p&gt;

&lt;p&gt;I think either is fine, with a slight preference for a, since this is used only for timeout.&lt;/p&gt;</comment>
                            <comment id="12565797" author="julo" created="Tue, 5 Feb 2008 16:35:17 +0000"  >&lt;p&gt;I added/changed&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;missing javadoc with @see tag&lt;/li&gt;
	&lt;li&gt;renamed isFinished to performTimeoutRollback&lt;/li&gt;
	&lt;li&gt;changed XATransactionTest to use DatabasePropertyTestSetup.setLockTimeouts&lt;/li&gt;
	&lt;li&gt;changed System.err.println to Assert.fail with the message&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think that I still have not answered couple of questions:&lt;/p&gt;

&lt;p&gt;Kathey:&lt;br/&gt;
&amp;gt; On the test in addition to Myrna&apos;s comments, do we lose anything by dropping from 1000 connections to 66?&lt;/p&gt;

&lt;p&gt;Exactly the same functionality will be tested. Using 1000 connections worked also as something like a stress test and utilized the database much more.&lt;/p&gt;

&lt;p&gt;&amp;gt; I got a bit confused about which changes were part of this issue and which were part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt;.&lt;br/&gt;
&amp;gt; Are the code changes necessary for the test to pass with its changes or were the two issues&apos; patches&lt;br/&gt;
&amp;gt; just combined for convenience?&lt;/p&gt;

&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt; as that it will log information about rollbacks to derby log in a situation when I did not know what is/might be causing failures. I also reorganized the code a bit - one common function is called to rollback/cancel the transaction from different places. I thought that this change could be committed sooner and it could help to diagnose the problem after test failures. Now, I have fixies for every possible issue I found and It is also a bit difficult to divide the patch now to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2871&quot; title=&quot;XATransactionTest gets XaException: Error executing a XAResource.commit(), server returned XAER_PROTO.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2871&quot;&gt;&lt;del&gt;DERBY-2871&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2953&quot; title=&quot;Dump the information about rollbacks of the global transaction (introduced in DERBY-2220 and DERBY-2432) to derby.log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2953&quot;&gt;DERBY-2953&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am running the tests now. derbyall already completed without failures. suites.All are still running.&lt;/p&gt;</comment>
                            <comment id="12565863" author="myrna" created="Tue, 5 Feb 2008 19:56:51 +0000"  >&lt;p&gt;I have no further comments, but again, I&apos;m not familiar with the xa code, maybe someone else can review also.&lt;/p&gt;</comment>
                            <comment id="12565866" author="djd" created="Tue, 5 Feb 2008 20:19:50 +0000"  >&lt;p&gt;Can some comments be added to this in the test, it&apos;s a little unclear what&apos;s going on in the catch block.&lt;br/&gt;
The exception that caused the failure is being thrown away, this is a problem if the test fails in the future, the exception normally points to where the problem is, losing that information makes debugging much harder, especially with an intermittent problem.&lt;/p&gt;

&lt;p&gt;+        try &lt;/p&gt;
{
+            stm = getConnection().createStatement();
+            rs = stm.executeQuery(&quot;select count(*) from XATT&quot;);
+            rs.next();
+        }
&lt;p&gt; catch (SQLException e) {&lt;br/&gt;
+            rs = stm.executeQuery(&quot;select global_xid from syscs_diag.transaction_table &quot;&lt;br/&gt;
+                                + &quot;where global_xid is not null order by global_xid&quot;);&lt;br/&gt;
+            StringBuffer sb = new StringBuffer(&quot;Global transactions in progress:\n&quot;); &lt;br/&gt;
+            while (rs.next()) &lt;/p&gt;
{
+                sb.append(rs.getString(1));
+                sb.append(&quot;\n&quot;);
+            }
&lt;p&gt;+            Assert.fail(sb.toString());&lt;br/&gt;
+        }&lt;/p&gt;
</comment>
                            <comment id="12565869" author="djd" created="Tue, 5 Feb 2008 20:26:47 +0000"  >&lt;p&gt;Why does ResourceAdapter.cancelXATransaction() need to hold its synchronization for the lifetime of the call? It&apos;s explicitly called out in the javadoc and comments in this issue, but I don&apos;t see any reason for it. The rollback could take some time, and during that time any other global transaction work that needs the ResourceAdapter will be blocked.&lt;/p&gt;</comment>
                            <comment id="12565938" author="knutanders" created="Tue, 5 Feb 2008 23:02:20 +0000"  >&lt;p&gt;Some nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in new error message (J135): beeing -&amp;gt; being&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;inconsistent use of tabs/spaces in the new methods in ResourceAdapter, ResourceAdapterImpl and XADatabase&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unnecessary whitespace diff (adding trailing spaces) in XATransactionState.java, chunk @@ -200,8 +199,7 @@.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567044" author="julo" created="Fri, 8 Feb 2008 14:08:37 +0000"  >&lt;p&gt;Dan, Knut: Thanks for catching this. I fixed all of those. I ran all the testing again without failures.&lt;/p&gt;

&lt;p&gt;Yes, it might be possible to run just the XATransactionTest since no other test is using the changed code but just for sure I ran all of them again.&lt;/p&gt;

&lt;p&gt;Attaching the latest patch...&lt;/p&gt;</comment>
                            <comment id="12569895" author="julo" created="Mon, 18 Feb 2008 13:32:43 +0000"  >&lt;p&gt;Can somebody commit this patch if there are no objections?&lt;/p&gt;</comment>
                            <comment id="12570673" author="knutanders" created="Wed, 20 Feb 2008 12:49:47 +0000"  >&lt;p&gt;It seems like Dan&apos;s comment from 05/Feb/08 12:19 PM hasn&apos;t been addressed.&lt;/p&gt;

&lt;p&gt;ResourceAdapterImpl.cancelXATransaction() calls findConnection() twice. Is that intentional?&lt;/p&gt;

&lt;p&gt;Is the comment about synchronization in ResourceAdapter.cancelXATransaction() still valid in the latest patch?&lt;/p&gt;

&lt;p&gt;Could you comment on why you call DatabasePropertyTestSetup.setLockTimeouts() in XATransactionTest.suite()? As far as I can see, the timeout values specified (20 sec deadlock, 60 sec wait) are the same as the default values, so it doesn&apos;t change anything.&lt;/p&gt;

&lt;p&gt;Tiny nit: assertTrue(xaConn&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; != null) could be replaced with assertNotNull(xaConn&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;).&lt;/p&gt;</comment>
                            <comment id="12587089" author="dyret" created="Wed, 9 Apr 2008 09:12:27 +0100"  >&lt;p&gt;Attaching derby-2871-NOT_FOR_COMMIT.diff where I have tried to address the latest review comments, (and which applies cleanly to the current trunk). With the new patch I can run XATransactionTest by itself, but when running as part of suites.All it fails with a lock timeout on line 233 or 234. I&apos;m not sure how best to modify the test to achieve the intended effect, so I have uploaded a preliminary patch for people to comment on.&lt;/p&gt;</comment>
                            <comment id="12587161" author="julo" created="Wed, 9 Apr 2008 13:17:36 +0100"  >&lt;p&gt;Dyre, thanks for working on this.&lt;/p&gt;

&lt;p&gt;This is due the SetTransactionIsolationTest in jdbcapi test package sets the derby.locks.waitTimeout and derby.locks.deadLockTimeout to 3 which is not restored back to default. Afterwards, the xaTransactionTimeout test runs with a lock timeout to be smaller than an xa transaction timeout so the select on line 233 which checks that the locks are released has a smaller timeout than transactions them self. That&apos;s why I changed those properties to default values in the previous patches.&lt;/p&gt;

&lt;p&gt;I think that if you use DatabasePropertyTestSetup.setLockTimeouts to setup timeouts in &quot;suite&quot; method the test will stop failing.&lt;/p&gt;

&lt;p&gt;The mistakes I made in my last patch are stupid and are done mostly because I have not spend required time on those changes. I have a patch prepared for this for some time now but wanted to spend more time to review that I addressed all the comments. Your patch looks good to me - you performed some more cleanups in the test (removed unnecessary Assert class when calling assert functions).&lt;/p&gt;</comment>
                            <comment id="12587191" author="dyret" created="Wed, 9 Apr 2008 14:42:06 +0100"  >&lt;p&gt;Thanks for the feedback, Julius. I know that you have other stuff on your plate these days. &lt;/p&gt;

&lt;p&gt;I see now why the lock timeouts had to be set back to the defaults in the suite method. I&apos;ll put that back and add a comment explaining why it is done that way.&lt;/p&gt;</comment>
                            <comment id="12587303" author="dyret" created="Wed, 9 Apr 2008 19:54:42 +0100"  >&lt;p&gt;Attaching a new patch (derby-2971.v2.diff) which re-enables the lock timeout setting. With this patch I could run the entire jdbcapi suite without failures.&lt;/p&gt;</comment>
                            <comment id="12587884" author="dyret" created="Fri, 11 Apr 2008 09:40:26 +0100"  >&lt;p&gt;Committed revision 647078.&lt;/p&gt;

&lt;p&gt;(derbyall and suites.All both ran without failures)&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12374134">DERBY-2953</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12374578" name="DERBY-2871_020108.diff" size="20058" author="myrna" created="Fri, 1 Feb 2008 20:09:47 +0000"/>
                            <attachment id="12363417" name="d2871-test.diff" size="3439" author="julo" created="Wed, 8 Aug 2007 17:24:51 +0100"/>
                            <attachment id="12363418" name="d2871-test.stat" size="215" author="julo" created="Wed, 8 Aug 2007 17:24:52 +0100"/>
                            <attachment id="12375071" name="d2871.diff" size="20446" author="julo" created="Fri, 8 Feb 2008 14:08:37 +0000"/>
                            <attachment id="12374790" name="d2871.diff" size="20456" author="julo" created="Tue, 5 Feb 2008 16:35:17 +0000"/>
                            <attachment id="12372616" name="d2871.diff" size="19993" author="julo" created="Mon, 7 Jan 2008 12:00:37 +0000"/>
                            <attachment id="12360723" name="d2871.diff" size="1327" author="julo" created="Thu, 28 Jun 2007 12:23:38 +0100"/>
                            <attachment id="12375072" name="d2871.stat" size="612" author="julo" created="Fri, 8 Feb 2008 14:08:37 +0000"/>
                            <attachment id="12374791" name="d2871.stat" size="612" author="julo" created="Tue, 5 Feb 2008 16:35:17 +0000"/>
                            <attachment id="12372617" name="d2871.stat" size="612" author="julo" created="Mon, 7 Jan 2008 12:00:42 +0000"/>
                            <attachment id="12360724" name="d2871.stat" size="215" author="julo" created="Thu, 28 Jun 2007 12:23:38 +0100"/>
                            <attachment id="12379757" name="derby-2871.v2.diff" size="23367" author="dyret" created="Wed, 9 Apr 2008 19:54:42 +0100"/>
                            <attachment id="12379707" name="derby-2871_NOT_FOR_COMMIT.diff" size="22981" author="dyret" created="Wed, 9 Apr 2008 09:12:26 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Jun 2007 08:22:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23294</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0jzj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37056</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>