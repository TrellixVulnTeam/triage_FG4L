<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6314/DERBY-6314.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6314] Upgrade from 10.10 fails with ClassCastException</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6314</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I noticed that after running the SignatureChecker tool on a database with version 10.10.1.1, I could not boot it with trunk (neither hard nor soft upgrade worked).&lt;/p&gt;

&lt;p&gt;To reproduce, create a database and run SignatureChecker with 10.10:&lt;/p&gt;

&lt;p&gt;$ java -jar /code/derby/oldreleases/10.10.1.1/derbyrun.jar SignatureChecker &apos;jdbc:derby:db;create=true&apos;&lt;/p&gt;

&lt;p&gt;Then, try to boot that database with trunk:&lt;/p&gt;

&lt;p&gt;$ java -Dderby.database.allowPreReleaseUpgrade=true -jar /code/derby/trunk/jars/sane/derbyrun.jar SignatureChecker &apos;jdbc:derby:db&apos;             &lt;br/&gt;
java.lang.reflect.InvocationTargetException&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:606)&lt;br/&gt;
	at org.apache.derby.tools.SignatureChecker.getJ2SEConnection(SignatureChecker.java:445)&lt;br/&gt;
	at org.apache.derby.tools.SignatureChecker.execute(SignatureChecker.java:140)&lt;br/&gt;
	at org.apache.derby.tools.SignatureChecker.main(SignatureChecker.java:121)&lt;br/&gt;
	at org.apache.derby.iapi.tools.run.main(run.java:61)&lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@7e820d53, see the next exception for details.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:103)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:310)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2841)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:404)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:913)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:571)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:233)&lt;br/&gt;
	... 8 more&lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@7e820d53, see the next exception for details.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
	... 18 more&lt;br/&gt;
Caused by: java.sql.SQLException: Exception during restore of a serializable or SQLData object of class &lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2835)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: ERROR XSDA8: Exception during restore of a serializable or SQLData object of class &lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(StoredPage.java:5827)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(StoredPage.java:1514)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(BasePage.java:441)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.fetchFromSlot(CachedPage.java:53)&lt;br/&gt;
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(GenericConglomerateController.java:299)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(TabInfoImpl.java:725)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(TabInfoImpl.java:570)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(DataDictionaryImpl.java:4673)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(DataDictionaryImpl.java:4647)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropJDBCMetadataSPSes(DataDictionaryImpl.java:14121)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateMetadataSPSes(DataDictionaryImpl.java:14135)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:539)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:238)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:7984)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:818)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1819)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1685)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1569)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: java.io.StreamCorruptedException: java.lang.ClassCastException: java.io.ObjectInputStream cannot be cast to org.apache.derby.iapi.services.io.ErrorInfo&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:139)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(ArrayUtil.java:180)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(GenericStorablePreparedStatement.java:232)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:125)&lt;br/&gt;
	at org.apache.derby.iapi.types.UserType.readExternal(UserType.java:299)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(StoredPage.java:5684)&lt;br/&gt;
	... 43 more&lt;br/&gt;
Caused by: java.lang.ClassCastException: java.io.ObjectInputStream cannot be cast to org.apache.derby.iapi.services.io.ErrorInfo&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:97)&lt;br/&gt;
	... 48 more&lt;br/&gt;
Could not get a connection.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12665201">DERBY-6314</key>
            <summary>Upgrade from 10.10 fails with ClassCastException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                            <label>derby_backport_reject_10_9</label>
                    </labels>
                <created>Fri, 23 Aug 2013 09:08:31 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:20 +0000</updated>
                            <resolved>Thu, 5 Sep 2013 15:09:48 +0100</resolved>
                                    <version>10.10.1.1</version>
                    <version>10.11.1.1</version>
                                    <fixVersion>10.10.2.0</fixVersion>
                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13748386" author="knutanders" created="Fri, 23 Aug 2013 09:22:35 +0100"  >&lt;p&gt;I ran a git bisect session, and found that the problem started with the following commit:&lt;/p&gt;

&lt;p&gt;0f36effcb4fcdfe13df88322dbf6026b9ba149ae is the first bad commit&lt;br/&gt;
commit 0f36effcb4fcdfe13df88322dbf6026b9ba149ae&lt;br/&gt;
Author: Richard N. Hillegas &amp;lt;rhillegas@apache.org&amp;gt;&lt;br/&gt;
Date:   Mon Apr 15 17:00:53 2013 +0000&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3177&quot; title=&quot;Dropping columns casues auto_increment field to be lost&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3177&quot;&gt;&lt;del&gt;DERBY-3177&lt;/del&gt;&lt;/a&gt;: Cleanup suspect coding practices in the types package.&lt;/p&gt;

&lt;p&gt;    git-svn-id: &lt;a href=&quot;https://svn.apache.org/repos/asf/db/derby/code/trunk@1468143&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/db/derby/code/trunk@1468143&lt;/a&gt; 13f79535-47bb-0310-9956-ffa450edef68&lt;/p&gt;</comment>
                            <comment id="13748397" author="knutanders" created="Fri, 23 Aug 2013 09:44:44 +0100"  >&lt;p&gt;The real error is hidden by the ClassCastException, which happens in an error handler in FormatIdInputStream.readObject():&lt;/p&gt;

&lt;p&gt;				ObjectInputStream ois = getObjectStream();&lt;br/&gt;
				try &lt;/p&gt;
{
					Object result = ois.readObject();
					return result;
				}
&lt;p&gt; catch (IOException ioe) &lt;/p&gt;
{
					setErrorInfo((ErrorInfo) ois);
					throw ioe;
				}

&lt;p&gt;The stream returned by getObjectStream() doesn&apos;t necessarily implement ErrorInfo. It doesn&apos;t in this case, and a ClassCastException is thrown. We&apos;re more interested in the IOException.&lt;/p&gt;

&lt;p&gt;I changed the error handler to check the type of the ObjectInputStream before attempting to cast it, and then I got this exception instead:&lt;/p&gt;

&lt;p&gt;Caused by: java.io.InvalidClassException: org.apache.derby.catalog.types.TypeDescriptorImpl; local class incompatible: stream classdesc serialVersionUID = -5485274209578709396, local class serialVersionUID = -3812847726962874375&lt;br/&gt;
	at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:617)&lt;br/&gt;
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1620)&lt;br/&gt;
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1515)&lt;br/&gt;
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1769)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)&lt;br/&gt;
	at org.apache.derby.iapi.types.DataTypeDescriptor.readExternal(DataTypeDescriptor.java:1777)&lt;br/&gt;
	at java.io.ObjectInputStream.readExternalData(ObjectInputStream.java:1835)&lt;br/&gt;
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1794)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)&lt;br/&gt;
	at java.io.ObjectInputStream.readArray(ObjectInputStream.java:1704)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)&lt;br/&gt;
	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1989)&lt;br/&gt;
	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1913)&lt;br/&gt;
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1796)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1348)&lt;br/&gt;
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:94)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(ArrayUtil.java:180)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(GenericStorablePreparedStatement.java:232)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(FormatIdInputStream.java:127)&lt;br/&gt;
	at org.apache.derby.iapi.types.UserType.readExternal(UserType.java:299)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(StoredPage.java:5684)&lt;br/&gt;
	... 42 more&lt;/p&gt;</comment>
                            <comment id="13748407" author="knutanders" created="Fri, 23 Aug 2013 10:14:53 +0100"  >&lt;p&gt;Said commit added a static method to TypeDescriptorImpl, which was apparently enough to change its serialVersionUID.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6128&quot; title=&quot;Examine Derby classes to determine if we need to add serialVersionUID to any of them&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6128&quot;&gt;&lt;del&gt;DERBY-6128&lt;/del&gt;&lt;/a&gt; went through all serializable classes and added serialVersionUID fields. However, TypeDescriptorImpl was skipped because it implemented Formatable and Derby normally takes the responsibility for encoding Formatable instances. In this case, though, the type id seems to have been stored using normal Java serialization.&lt;/p&gt;</comment>
                            <comment id="13748479" author="knutanders" created="Fri, 23 Aug 2013 12:40:17 +0100"  >&lt;p&gt;Although setting a serialVersionUID may fix the problem, I&apos;m not sure it&apos;s the correct way to fix it. I&apos;m currently trying to find the answer to these questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is it correct to store these objects with Java serialization instead of using Derby&apos;s Formatable logic?&lt;/li&gt;
	&lt;li&gt;TypeDescriptorImpl&apos;s serialVersionUID has changed many times before. Why does upgrade only fail now?&lt;/li&gt;
	&lt;li&gt;TypeDescriptorImpl&apos;s serialVersionUID did not change between 10.9 and 10.10. Still, upgrade from 10.9 to trunk does not fail. What changed in 10.10?&lt;/li&gt;
	&lt;li&gt;It looks like it&apos;s deserialization of the CONSTANTSTATE column in SYS.SYSSTATEMENTS that fails. That is, the stored prepared statement for a meta-data query. I recall that we at some point changed the upgrade logic to prevent it from deserializing that column, because the format of the stored plan is not guaranteed to be stable. Why is it attempting to read it now?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13748518" author="knutanders" created="Fri, 23 Aug 2013 14:10:33 +0100"  >&lt;p&gt;The TypeDescriptorImpl that&apos;s being read when the exception is raised, is stored in an ExecRowBuilder instance that lives in the savedObjects array of the GenericStorablePreparedStatement.&lt;/p&gt;

&lt;p&gt;ExecRowBuilder is Serializable, but not Formatable. That explains why plain Java serialization is used. Also, since ExecRowBuilder is a new class in 10.10 (introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt;), it explains why we don&apos;t see the problem when upgrading from a 10.9 database.&lt;/p&gt;

&lt;p&gt;It does not explain why the value is deserialized during upgrade. It should not be necessary to read that column during upgrade. In fact, it is read when the upgrade logic is requesting that the entire row is deleted from the SYSSTATEMENTS table.&lt;/p&gt;</comment>
                            <comment id="13748525" author="rhillegas" created="Fri, 23 Aug 2013 14:18:46 +0100"  >&lt;p&gt;Thanks for catching and investigating this, Knut. I&apos;m puzzled about the deserialization problem with TypeDescriptorImpl. These are the objects stored in SYS.SYSCOLUMNS.COLUMNDATATYPE. I ran the following experiment:&lt;/p&gt;

&lt;p&gt;1) created database db_10_9 using 10.9.1.0.&lt;/p&gt;

&lt;p&gt;2) then used Derby 10.10.1.1 to run the following program which deserializes all of the TypeDescriptorImpl objects in SYS.SYSCOLUMNS.COLUMNDATATYPE. The program ran fine.&lt;/p&gt;

&lt;p&gt;import java.sql.*;&lt;/p&gt;

&lt;p&gt;public class w&lt;br/&gt;
{&lt;br/&gt;
    public  static  void    main( String... args ) throws Exception&lt;br/&gt;
    {&lt;br/&gt;
        Connection  conn = DriverManager.getConnection( &quot;jdbc:derby:db_10_9&quot; );&lt;br/&gt;
        ResultSet   rs = conn.prepareStatement&lt;br/&gt;
            ( &quot;select columndatatype from sys.syscolumns&quot; ).executeQuery();&lt;/p&gt;

&lt;p&gt;        while( rs.next() )&lt;/p&gt;
        {
            Object  obj = rs.getObject( 1 );
            System.out.println( &quot;columndatatype is a &quot; + obj.getClass().getName() );
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;

</comment>
                            <comment id="13748548" author="rhillegas" created="Fri, 23 Aug 2013 14:46:56 +0100"  >&lt;p&gt;I ran a similar experiment with a database created by 10.10.1.1 and then booted by the 10.11 trunk:&lt;/p&gt;

&lt;p&gt;1) used 10.10.1.1 to create database db_10_10&lt;/p&gt;

&lt;p&gt;2) then used the 10.11 trunk to run the following program and successfully read out all TypeDescriptorImpl objects in SYS.SYSCOLUMNS.COLUMNDATATYPE:&lt;/p&gt;

&lt;p&gt;import java.sql.*;&lt;/p&gt;

&lt;p&gt;public class w&lt;br/&gt;
{&lt;br/&gt;
    public  static  void    main( String... args ) throws Exception&lt;br/&gt;
    {&lt;br/&gt;
        Connection  conn = DriverManager.getConnection( &quot;jdbc:derby:db_10_10&quot; );&lt;br/&gt;
        ResultSet   rs = conn.prepareStatement&lt;br/&gt;
            ( &quot;select columndatatype from sys.syscolumns&quot; ).executeQuery();&lt;/p&gt;

&lt;p&gt;        while( rs.next() )&lt;/p&gt;
        {
            Object  obj = rs.getObject( 1 );
            System.out.println( &quot;columndatatype is a &quot; + obj.getClass().getName() );
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="13748552" author="knutanders" created="Fri, 23 Aug 2013 14:53:34 +0100"  >&lt;p&gt;DD_Version.handleMinorRevisionChange() calls bootingDictionary.clearSPSPlans() to remove the stale execution plans from SYSSTATEMENTS. It essentially nulls out the CONSTANTSTATE column and sets the VALID column to false in all rows. However, it isn&apos;t called until after the meta-data queries have been processed, so it doesn&apos;t help prevent this particular problem. At the point where it is called now, it only helps avoid deserialization problems with trigger plans. If we move the call earlier, we&apos;ll avoid attempts to deserialize stale plans both for meta-data queries and triggers.&lt;/p&gt;</comment>
                            <comment id="13748564" author="rhillegas" created="Fri, 23 Aug 2013 15:12:38 +0100"  >&lt;p&gt;Thanks, Knut. Looks like you&apos;re on the path to fixing this. Stored prepared statements are supposed to be thrown away and not de-serialized when you go across upgrade/downgrade boundaries. The following comment from DeleteConstantAction implies this:&lt;/p&gt;

&lt;p&gt;	/********************************************************&lt;br/&gt;
	**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;This class implements Formatable. But it is NOT used&lt;/li&gt;
		&lt;li&gt;across either major or minor releases.  It is only&lt;/li&gt;
		&lt;li&gt;written persistently in stored prepared statements,&lt;/li&gt;
		&lt;li&gt;not in the replication stage.  SO, IT IS OK TO CHANGE&lt;/li&gt;
		&lt;li&gt;ITS read/writeExternal.&lt;br/&gt;
	**&lt;br/&gt;
	********************************************************/&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This comment is in the 10.0 codeline. By &quot;replication&quot;, the comment means Cloudscape&apos;s synchronization logic, which was removed before Cloudscape was open-sourced as Derby.&lt;/p&gt;</comment>
                            <comment id="13748608" author="knutanders" created="Fri, 23 Aug 2013 16:01:27 +0100"  >&lt;p&gt;Thanks for running those experiments, Rick. I think the serialization problem happens because the GenericStoredPreparedStatements in SYS.SYSSTATEMENTS.CONSTANTSTATE now may contain references to ExecRowBuilder instances, which are Serializable and not Formatable. And since the TypeDescriptorImpl instances in question live inside ExecRowBuilder, they will be stored using the Serializable logic instead of the Formatable logic they are intended to be stored with. In your experiment, with a different column, ExecRowBuilder wasn&apos;t there to confuse things, so Formatable logic was used all the way. The Formatable logic doesn&apos;t care about the serialVersionUID, so the deserialization was successful in that experiment.&lt;/p&gt;

&lt;p&gt;I think I&apos;m now able to answer the questions from one of my earlier comments:&lt;/p&gt;

&lt;p&gt;&amp;gt; Is it correct to store these objects with Java serialization instead of using Derby&apos;s Formatable logic?&lt;/p&gt;

&lt;p&gt;No, Formatable objects should have been stored with Formatable logic. ExecRowBuilder probably has to be changed to Formatable for the contained TypeDescriptorImpl instances to be stored correctly.&lt;/p&gt;

&lt;p&gt;&amp;gt; TypeDescriptorImpl&apos;s serialVersionUID has changed many times before. Why does upgrade only fail now?&lt;br/&gt;
&amp;gt; TypeDescriptorImpl&apos;s serialVersionUID did not change between 10.9 and 10.10. Still, upgrade from 10.9 to trunk does not fail. What changed in 10.10?&lt;/p&gt;

&lt;p&gt;ExecRowBuilder was not introduced until 10.10 (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6003&quot; title=&quot;Create row templates outside of the generated code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6003&quot;&gt;&lt;del&gt;DERBY-6003&lt;/del&gt;&lt;/a&gt;), so we never attempted to store TypeDescriptorImpl using Serializable logic before 10.10. The Formatable logic doesn&apos;t care about serialVersionUID.&lt;/p&gt;

&lt;p&gt;&amp;gt; It looks like it&apos;s deserialization of the CONSTANTSTATE column in SYS.SYSSTATEMENTS that fails. That is, the stored prepared statement for a meta-data query. I recall that we at some point changed the upgrade logic to prevent it from deserializing that column, because the format of the stored plan is not guaranteed to be stable. Why is it attempting to read it now?&lt;/p&gt;

&lt;p&gt;Those fixes only affected stored trigger plans. Metadata plans are still read during upgrade.&lt;/p&gt;</comment>
                            <comment id="13748611" author="knutanders" created="Fri, 23 Aug 2013 16:07:35 +0100"  >&lt;p&gt;Attaching a first patch (d6314-1a.diff), which fixes the upgrade logic so that it discards metadata plans without looking at them first. This is the same thing we do with trigger plans.&lt;/p&gt;

&lt;p&gt;The patch also adds an upgrade test case that fails without the fix.&lt;/p&gt;

&lt;p&gt;All the regression tests passed.&lt;/p&gt;

&lt;p&gt;I plan to fix the serialization logic so that TypeDescriptorImpl is stored as a Formatable rather than a Serializable in a separate patch. The fix for the upgrade logic will be needed regardless of that fix, though.&lt;/p&gt;</comment>
                            <comment id="13748612" author="rhillegas" created="Fri, 23 Aug 2013 16:09:41 +0100"  >&lt;p&gt;Thanks, Knut. Your analysis sounds correct to me. +1&lt;/p&gt;</comment>
                            <comment id="13750066" author="jira-bot" created="Mon, 26 Aug 2013 13:57:05 +0100"  >&lt;p&gt;Commit 1517533 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1517533&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1517533&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6314&quot; title=&quot;Upgrade from 10.10 fails with ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6314&quot;&gt;&lt;del&gt;DERBY-6314&lt;/del&gt;&lt;/a&gt;: Upgrade from 10.10 fails with ClassCastException&lt;/p&gt;

&lt;p&gt;Make sure stored plans for metadata queries are cleared the same&lt;br/&gt;
way as trigger plans during upgrade, so that upgrade doesn&apos;t fail&lt;br/&gt;
if the format of the old metadata plans cannot be read by the new&lt;br/&gt;
version.&lt;/p&gt;</comment>
                            <comment id="13750075" author="knutanders" created="Mon, 26 Aug 2013 14:10:38 +0100"  >&lt;p&gt;d6314-2a.diff addresses the remaining issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;make ExecRowBuilder implement the Formatable interface&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add type checks to the error handlers in FormatableInputStream to prevent ClassCastExceptions that shadow the underlying exception&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13751070" author="jira-bot" created="Tue, 27 Aug 2013 09:16:03 +0100"  >&lt;p&gt;Commit 1517761 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1517761&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1517761&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6314&quot; title=&quot;Upgrade from 10.10 fails with ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6314&quot;&gt;&lt;del&gt;DERBY-6314&lt;/del&gt;&lt;/a&gt;: Upgrade from 10.10 fails with ClassCastException&lt;/p&gt;

&lt;p&gt;Make ExecRowBuilder implement the Formatable interface so that any&lt;br/&gt;
Formatable instances referenced from its fields are stored using&lt;br/&gt;
Formatable logic instead of Serializable logic.&lt;/p&gt;

&lt;p&gt;Add type checking in FormatIdInputStream&apos;s error handlers to prevent&lt;br/&gt;
the underlying exception from being shadowed by a ClassCastException&lt;br/&gt;
under certain circumstances.&lt;/p&gt;</comment>
                            <comment id="13751116" author="knutanders" created="Tue, 27 Aug 2013 10:31:55 +0100"  >&lt;p&gt;I don&apos;t think we need to backport any of this to 10.10 at the moment.&lt;/p&gt;

&lt;p&gt;We may want to backport the upgrade fix (the 1a patch) because it makes upgrade more robust in case any future changes on the 10.10 branch changes the serialized format of the stored query plan.&lt;/p&gt;

&lt;p&gt;Backporting the 2a patch may be more problematic. Not for the case of upgrade from 10.10.1.1 to a later release produced from the 10.10 branch, but for the case of downgrading from that later 10.10 release back to 10.10.1.1. Since the 2a patch changes the format of the stored plan, and 10.10.1.1 does not have the upgrade fix, downgrade from 10.10.x to 10.10.1.1 will attempt to read the newer plan and fail. (Possible workaround: call SYSCS_INVALIDATE_STORED_STATEMENTS with 10.10.x before downgrading)&lt;/p&gt;

&lt;p&gt;So I&apos;m leaning towards backporting 1a and not backporting 2a for now.&lt;/p&gt;</comment>
                            <comment id="13758367" author="myrna" created="Wed, 4 Sep 2013 22:23:14 +0100"  >&lt;p&gt;Backporting at least the 1a patch to 10.10 makes sense to me. Knut, did you intend to do this?&lt;/p&gt;</comment>
                            <comment id="13759091" author="jira-bot" created="Thu, 5 Sep 2013 15:08:00 +0100"  >&lt;p&gt;Commit 1520320 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/branches/10.10&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1520320&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1520320&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6314&quot; title=&quot;Upgrade from 10.10 fails with ClassCastException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6314&quot;&gt;&lt;del&gt;DERBY-6314&lt;/del&gt;&lt;/a&gt;: Upgrade from 10.10 fails with ClassCastException&lt;/p&gt;

&lt;p&gt;Merged revision 1517533 from trunk.&lt;/p&gt;</comment>
                            <comment id="13759093" author="knutanders" created="Thu, 5 Sep 2013 15:09:48 +0100"  >&lt;p&gt;Thanks, Myrna. I&apos;ve now backported the 1a patch to 10.10. Marking the issue as resolved.&lt;/p&gt;</comment>
                            <comment id="14284784" author="myrna" created="Wed, 21 Jan 2015 00:23:20 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12642244">DERBY-6177</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12617390">DERBY-6003</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12638566">DERBY-6128</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12599634" name="d6314-1a.diff" size="3124" author="knutanders" created="Fri, 23 Aug 2013 16:07:35 +0100"/>
                            <attachment id="12599941" name="d6314-2a.diff" size="8838" author="knutanders" created="Mon, 26 Aug 2013 14:10:38 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Aug 2013 13:18:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>345142</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzhd1r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>345443</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>