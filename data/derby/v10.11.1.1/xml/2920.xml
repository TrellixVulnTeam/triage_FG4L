<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:52 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2920/DERBY-2920.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2920] Share code between readExternal() and readExternalFromArray()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2920</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Most of the implementations of DataValueDescriptor.readExternalFromArray(ArrayInputStream) are identical to their corresponding Externalizable.readExternal(ObjectInput) methods. Since ArrayInputStream implements ObjectInput, readExternalFromArray() could in those cases just have forwarded calls to readExternal() instead of duplicating the code. A default forwarding implementation of readExternalFromArray() could be placed in org.apache.derby.iapi.types.DataType, and all the existing implementations, except those with optimizations for ArrayInputStream, could be removed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12373481">DERBY-2920</key>
            <summary>Share code between readExternal() and readExternalFromArray()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                    </labels>
                <created>Wed, 11 Jul 2007 09:00:47 +0100</created>
                <updated>Mon, 19 Nov 2012 13:23:25 +0000</updated>
                            <resolved>Mon, 19 Nov 2012 13:23:25 +0000</resolved>
                                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>Services</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13489320" author="knutanders" created="Fri, 2 Nov 2012 09:09:29 +0000"  >&lt;p&gt;There are 23 implementations of readExternalFromArray(). 19 of them are identical to the readExternal() method in the same class.&lt;/p&gt;

&lt;p&gt;The attached patch adds a readExternalFromArray() method to the DataType class, which is a common base class for all the classes that implement readExternalFromArray(). The new method simply forwards calls to readExternal().&lt;/p&gt;

&lt;p&gt;The patch also removes the 19 readExternalFromArray() methods that are identical to readExternal(), as they would work correctly by inheriting the method from DataType. The four classes that have optimized implementations that are not identical to readExternal(), keep their current implementations.&lt;/p&gt;

&lt;p&gt;The four classes that have optimized versions of readExternalFromArray(), are SQLChar, SQLClob, XML and HeapRowLocation.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the patch.&lt;/p&gt;</comment>
                            <comment id="13489492" author="mikem" created="Fri, 2 Nov 2012 15:43:30 +0000"  >&lt;p&gt;I worry about adding extra method calls in this area, but admit it has been a long time and many jvm versions ago since I looked&lt;br/&gt;
at performance resulst in this area.  The issue here is that this is a very high traffic routine.  &lt;br/&gt;
For instance I think the worst case would be  the case of a 10 collumn row and looking at 1 million rows this change may add&lt;br/&gt;
1 million extra function calls.  Maybe JIT fixes, not sure.  &lt;/p&gt;

&lt;p&gt;I also wonder if we lose performance by moving the routines out of final classes.&lt;/p&gt;

&lt;p&gt;I know some code duplication was added in the area of read and write external in the past as the result of performance tuning.  &lt;/p&gt;</comment>
                            <comment id="13490546" author="knutanders" created="Mon, 5 Nov 2012 10:12:05 +0000"  >&lt;p&gt;Thanks, Mike. I was wondering about that myself, so I had started a test run with the attached ReadInts test class. The test is similar to what you suggested, but the table was smaller (3 integer columns, 10000 rows).&lt;/p&gt;

&lt;p&gt;After 100 runs with trunk and 100 runs with the patch (each run performs a full table scan 20000 times for warmup and 10000 times while collecting data), I found that on average there was a 0.02% difference. That is, no measurable difference. This was with JDK 7u9 on Solaris 11.&lt;/p&gt;

&lt;p&gt;I&apos;ll change the size of the test table to 10x1000000 and see if that changes anything.&lt;/p&gt;</comment>
                            <comment id="13491382" author="knutanders" created="Tue, 6 Nov 2012 10:57:49 +0000"  >&lt;p&gt;The attached ReadInts2 class is the updated test which scans a table with 10x1000000 integers. I ran it in the same environment as the previous test (Solaris 11, x86, JDK 7u9, 64-bit server VM). This time I had it running overnight so that I got 300 runs with a clean trunk and 300 runs with the patch. On average, the test ran 0.12% slower with the patch, so there was virtually no difference.&lt;/p&gt;</comment>
                            <comment id="13493970" author="knutanders" created="Fri, 9 Nov 2012 12:40:48 +0000"  >&lt;p&gt;I also ran a modified variant of ReadInts2 where half the columns were integers and the other half boolean, in case the run-time compiler was able to optimize the calls in the original test more aggressively because it detected that all calls to DataType.readExternalFromArray() would end up calling SQLInteger.readExternal(). That experiment also resulted in ~0.1% difference. I think this means the code duplication doesn&apos;t provide any significant benefit on modern JVMs, so I committed the patch with revision 1407432. If we find cases where this change causes measurable performance loss, we can add overrides for the affected data types.&lt;/p&gt;</comment>
                            <comment id="13494120" author="mikem" created="Fri, 9 Nov 2012 17:01:33 +0000"  >&lt;p&gt;thanks for running the tests, i think it is ok to check this in.  I set my low limit at around .3-.4 % for a code change like this where it was a share/codesize vs performance issue.  and higher if the change was more complicated rather than just hand inlining code, ...&lt;/p&gt;

&lt;p&gt;I remember now that these routines would also show much higher for some profilers vs deliverable performance runs.  So the change may make it a little harder to determine where you can &lt;br/&gt;
get real performance wins.  Again this is old profiler, especially those that had to instrument each routine to get their results.  Again I think it ok to check in, just noting this in case it can help&lt;br/&gt;
anyone in the future if they see readExternal...() showing up high in profiles.&lt;/p&gt;</comment>
                            <comment id="13494919" author="knutanders" created="Sun, 11 Nov 2012 16:54:12 +0000"  >&lt;p&gt;Thanks Mike. It makes sense that such code may have skewed the results of profilers in the past, especially instrumenting profilers that maintain counters on method boundaries. I would expect that effect to be smaller on a sampling profiler, and hopefully also on newer instrumenting profilers, so that it doesn&apos;t cause much confusion.&lt;/p&gt;</comment>
                            <comment id="13494922" author="knutanders" created="Sun, 11 Nov 2012 17:02:33 +0000"  >&lt;p&gt;Reopening since I found more duplication that I didn&apos;t address in the first patch. The classes FormatArrayHolder, FormatableHashtable, FormatableIntHolder, FormatableLongHolder, FormatableProperties and B2IUndo all have two readExternal() methods; one that takes ObjectInput and one that takes ArrayInputStream.&lt;/p&gt;

&lt;p&gt;In these classes, the variants that take ArrayInputStream are not called readExternalFromArray(), which is why they didn&apos;t show up in my original search. However, as far as I can see, none of the readExternal(ArrayInputStream) methods have any callers, so removing them should be harmless.&lt;/p&gt;</comment>
                            <comment id="13495627" author="knutanders" created="Mon, 12 Nov 2012 20:57:18 +0000"  >&lt;p&gt;Attaching d2920-2a-unused.diff, which removes the unused readExternal() methods. All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13500216" author="knutanders" created="Mon, 19 Nov 2012 13:23:25 +0000"  >&lt;p&gt;Committed revision 1411164.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12614160">DERBY-5971</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12552082" name="ReadInts.java" size="2677" author="knutanders" created="Mon, 5 Nov 2012 10:12:05 +0000"/>
                            <attachment id="12552259" name="ReadInts2.java" size="3239" author="knutanders" created="Tue, 6 Nov 2012 10:57:49 +0000"/>
                            <attachment id="12551835" name="d2920-1a.diff" size="26896" author="knutanders" created="Fri, 2 Nov 2012 09:09:29 +0000"/>
                            <attachment id="12553184" name="d2920-2a-unused.diff" size="6556" author="knutanders" created="Mon, 12 Nov 2012 20:57:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Nov 2012 15:43:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30655</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08gn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35189</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>