<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:13:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6352/DERBY-6352.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6352] Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6352</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I got a report of the following intermittent (6/60) exception in store.RecoveryAfterBackupTest.&lt;br/&gt;
Exception in thread &quot;main&quot; java.security.AccessControlException: Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;)&lt;br/&gt;
		 at java.security.AccessController.throwACE(AccessController.java:100)&lt;br/&gt;
		 at java.security.AccessController.checkPermission(AccessController.java:174)&lt;br/&gt;
		 at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)&lt;br/&gt;
		 at java.lang.SecurityManager.checkAccess(SecurityManager.java:676)&lt;br/&gt;
		 at java.lang.Thread.checkAccess(Thread.java:459)&lt;br/&gt;
		 at java.lang.Thread.interrupt(Thread.java:588)&lt;br/&gt;
		 at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)&lt;br/&gt;
		 at java.security.AccessController.doPrivileged(AccessController.java:274)&lt;br/&gt;
		 at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)&lt;br/&gt;
		 at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)&lt;br/&gt;
		 at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
		 at org.apache.derby.jdbc.Driver20.connect(Unknown Source)&lt;br/&gt;
		 at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
		 at java.sql.DriverManager.getConnection(DriverManager.java:571)&lt;br/&gt;
		 at java.sql.DriverManager.getConnection(DriverManager.java:233)&lt;br/&gt;
		 at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:836)&lt;br/&gt;
		 at org.apache.derbyTesting.functionTests.tests.store.RecoveryAfterBackup.main(RecoveryAfterBackup.java:82)&lt;/p&gt;


&lt;p&gt;modifyThread is a necessary permission if interrupting a thread other than the current thread but is not in our policy file for derby.jar.&lt;/p&gt;

&lt;p&gt;The relevant code in ContextService is:&lt;br/&gt;
           for (ContextManager cm : allContexts) {&lt;/p&gt;

&lt;p&gt;				Thread active = cm.activeThread;&lt;/p&gt;

&lt;p&gt;				if (active == me)&lt;br/&gt;
					continue;&lt;/p&gt;

&lt;p&gt;				if (active == null)&lt;br/&gt;
					continue;&lt;/p&gt;

&lt;p&gt;                final Thread fActive = active;&lt;br/&gt;
				if (cm.setInterrupted(c))&lt;br/&gt;
                {&lt;br/&gt;
                    AccessController.doPrivileged(&lt;br/&gt;
                            new PrivilegedAction&amp;lt;Void&amp;gt;() {&lt;br/&gt;
                                public Void run()  &lt;/p&gt;
{
                                    fActive.interrupt();
                                    return null;
                                }
&lt;p&gt;                            });&lt;br/&gt;
                }&lt;/p&gt;

&lt;p&gt;I am not sure why this has never come up before.  Are we expecting in this context that fActive is the current thread?&lt;/p&gt;

</description>
                <environment>IBM java 7 Derby version 10.10.1.2 - (1494414)</environment>
        <key id="12670476">DERBY-6352</key>
            <summary>Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="myrna">Myrna van Lunteren</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Sep 2013 13:55:25 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:07 +0000</updated>
                            <resolved>Wed, 30 Apr 2014 22:05:15 +0100</resolved>
                                    <version>10.9.2.2</version>
                    <version>10.10.1.1</version>
                                    <fixVersion>10.10.2.1</fixVersion>
                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13788682" author="myrna" created="Tue, 8 Oct 2013 00:08:55 +0100"  >&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2564&quot; title=&quot;ContextService.notifyAllActiveThreads()  and network server code need a privileged block around the calls to Thread.interrupt()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2564&quot;&gt;&lt;del&gt;DERBY-2564&lt;/del&gt;&lt;/a&gt;, Knut said this:&lt;/p&gt;

&lt;p&gt;&quot; Thread.interrupt() calls Thread.checkAccess() which calls&lt;br/&gt;
SecurityManager.checkAccess(Thread).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/lang/SecurityManager.html#checkAccess(java.lang.Thread&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/lang/SecurityManager.html#checkAccess(java.lang.Thread&lt;/a&gt;) says:&lt;/p&gt;

&lt;p&gt;&amp;gt; If the thread argument is a system thread (belongs to the thread&lt;br/&gt;
&amp;gt; group with a null parent) then this method calls checkPermission&lt;br/&gt;
&amp;gt; with the RuntimePermission(&quot;modifyThread&quot;) permission. If the thread&lt;br/&gt;
&amp;gt; argument is not a system thread, this method just returns silently.&lt;/p&gt;

&lt;p&gt;My guess is that none of Derby&apos;s threads are system threads, and&lt;br/&gt;
therefore no permissions are needed with a default security manager.&quot;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&quot;That doesn&apos;t mean we don&apos;t need to wrap the call in a privileged block, though. A SecurityManager implementation is free to override the checkAccess(Thread) method and perform stricter checks.&quot;&lt;/p&gt;

&lt;p&gt;Does this mean that it&apos;s fine if a SecurityManager implementation &lt;b&gt;does&lt;/b&gt; need the modifyThread permission? In which case perhaps we should just add the permission?&lt;/p&gt;

&lt;p&gt;Also, as Kathey said this is an intermittent problem, does anyone have a theory about why we sometimes would need it and sometimes not? &lt;/p&gt;</comment>
                            <comment id="13789354" author="mikem" created="Tue, 8 Oct 2013 17:29:30 +0100"  >&lt;p&gt;It looks to me like notifyAllActiveThreads() is meant to only be dealing with Derby threads, and the documentation&lt;br/&gt;
knut points at seems to indicate that we should not expect an exception on the call.  So I don&apos;t think we should&lt;br/&gt;
be recommending/requiring the modifyThread permission.&lt;/p&gt;

&lt;p&gt;Since it is a &quot;not expected&quot; condition, I wonder if we should just catch it in insane and maybe ignore it and hope that it is a timing issue&lt;br/&gt;
with shutdown and the thread being is a wierd state.  Maybe in SANE mode add an assert with as much thread info as possible and the&lt;br/&gt;
assert will drive a jvm dump on some jvm&apos;s and that might help tell what is going on.&lt;/p&gt;</comment>
                            <comment id="13789707" author="myrna" created="Tue, 8 Oct 2013 22:08:35 +0100"  >&lt;p&gt;This is a patch with the proposed modification for ContextService...&lt;/p&gt;

&lt;p&gt;I will forward this - backported to 10.10 - to the people who &lt;b&gt;can&lt;/b&gt; reproduce the problem, and see what they say...&lt;/p&gt;</comment>
                            <comment id="13789724" author="mikem" created="Tue, 8 Oct 2013 22:33:06 +0100"  >&lt;p&gt;I don&apos;t think the comments match the actions of the patch, I think &lt;br/&gt;
what the patch is doing:&lt;br/&gt;
if sane thow an assert which will cause system to shut down, it will not &quot;go on&quot;.&lt;/p&gt;

&lt;p&gt;In the insane case we will just do a javadump, with nothing in derby.log indicating&lt;br/&gt;
why.:&lt;br/&gt;
+                        // if sane, print out a warning.&lt;br/&gt;
+                        // if insane, if this is an IBM jvm, force a jvm dump&lt;br/&gt;
+                        // so we can analyze.&lt;br/&gt;
+                        // either way, go on, and hope things get cleared away&lt;br/&gt;
+                        // automatically in due course&lt;br/&gt;
+                        if (SanityManager.DEBUG)&lt;br/&gt;
+                        &lt;/p&gt;
{
+                            SanityManager.THROWASSERT(&quot;unexpectedly needing an
extra permission.&quot;);
+                            ace.printStackTrace();
+                        }
&lt;p&gt;+                        if (JVMInfo.isIBMJVM()) &lt;/p&gt;
{
+                            JVMInfo.javaDump();
+                        }

</comment>
                            <comment id="13791142" author="myrna" created="Thu, 10 Oct 2013 04:18:16 +0100"  >&lt;p&gt;Attaching another patch. I changed my mind about swallowing the exception, I think there is a chance of a hang during system shutdown if we hit it. &lt;br/&gt;
But  we could do with more information. So with sane builds, causing an Assert which will dump info about the current threads to the console, and also identify which Thread is hitting the exception.&lt;br/&gt;
With insane, rethrow the exception, and in the case of an IBM jvm, also cause a java dump to be generated which will also contain a list of the current threads.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13793722" author="jira-bot" created="Sun, 13 Oct 2013 18:34:51 +0100"  >&lt;p&gt;Commit 1531721 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1531721&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1531721&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6352&quot; title=&quot;Access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;modifyThread&amp;quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6352&quot;&gt;&lt;del&gt;DERBY-6352&lt;/del&gt;&lt;/a&gt;; Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) in store.RecoveryAfterBackup test&lt;br/&gt;
  adding try/catch code to provide more information when this happens&lt;/p&gt;</comment>
                            <comment id="13794848" author="jira-bot" created="Tue, 15 Oct 2013 04:56:08 +0100"  >&lt;p&gt;Commit 1532175 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/branches/10.10&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1532175&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1532175&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6352&quot; title=&quot;Access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;modifyThread&amp;quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6352&quot;&gt;&lt;del&gt;DERBY-6352&lt;/del&gt;&lt;/a&gt;; Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) in store.RecoveryAfterBackup test&lt;br/&gt;
  Backport printing of additional info from trunk&lt;/p&gt;</comment>
                            <comment id="13795181" author="myrna" created="Tue, 15 Oct 2013 14:34:01 +0100"  >&lt;p&gt;Marking Not A Problem, to indicate this is (probably) the correct behavior, we should not need this permission on the threads Derby uses.&lt;/p&gt;</comment>
                            <comment id="13795263" author="kmarsden" created="Tue, 15 Oct 2013 16:01:30 +0100"  >&lt;p&gt;I think that it is a problem though that we are seeing the access denied error in this context. Possibly a java  Problem?  I think the issue should be reopened until we know and then closed invalid once confirmed and as a java  problem.  I think that is how we have handled jvm issues in the past.&lt;/p&gt;</comment>
                            <comment id="13795272" author="myrna" created="Tue, 15 Oct 2013 16:06:24 +0100"  >&lt;p&gt;I think so far things point to this being a java issue, but I&apos;m fine with leaving it open. &lt;/p&gt;</comment>
                            <comment id="13836645" author="myrna" created="Mon, 2 Dec 2013 16:16:00 +0000"  >&lt;p&gt;Just to note, that I also saw this in recent test runs against older branches (10.6 and 10.3) with ibm 1.6.&lt;/p&gt;</comment>
                            <comment id="13849423" author="mamtas" created="Mon, 16 Dec 2013 18:22:53 +0000"  >&lt;p&gt;Not sure if it is the same failure but the test failed on trunk(revision 1550872) with IBM jdk 1.6 on Windows machine.&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1550872-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1550872-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-13 19:47:10 ***&lt;br/&gt;
4 del&lt;br/&gt;
&amp;lt; Database shutdown completed&lt;br/&gt;
5 del&lt;br/&gt;
&amp;lt; Starting restore with roll-forward recovery..&lt;br/&gt;
6 del&lt;br/&gt;
&amp;lt; Verifying database ...&lt;br/&gt;
7 del&lt;br/&gt;
&amp;lt; Count: 256 Sum: 32640&lt;br/&gt;
7 add&lt;br/&gt;
&amp;gt; JVMDUMP034I User requested Java dump using &apos;C:\jartest\JarResults.2013-12-13\ibm16_derbyall\javacore.20131213.194713.4948.0001.txt&apos; through com.ibm.jvm.Dump.JavaDump&lt;br/&gt;
&amp;gt; JVMDUMP010I Java dump written to C:\jartest\JarResults.2013-12-13\ibm16_derbyall\javacore.20131213.194713.4948.0001.txt&lt;br/&gt;
&amp;gt; Exception in thread &quot;main&quot; java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-13 19:47:18 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13865842" author="mikem" created="Wed, 8 Jan 2014 20:20:29 +0000"  >&lt;p&gt;failed recently in 10.9 nightly testing, ibm16, windows.  Is intermitent as it has only failed a single time in this&lt;br/&gt;
nightly testing environment in the past 4 months:&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1553785-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1553785-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/storeall/storerecovery/RecoveryAfterBackup.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-27 21:32:30 ***&lt;br/&gt;
4 del&lt;br/&gt;
&amp;lt; Database shutdown completed&lt;br/&gt;
5 del&lt;br/&gt;
&amp;lt; Starting restore with roll-forward recovery..&lt;br/&gt;
6 del&lt;br/&gt;
&amp;lt; Verifying database ...&lt;br/&gt;
7 del&lt;br/&gt;
&amp;lt; Count: 256 Sum: 32640&lt;br/&gt;
7 add&lt;br/&gt;
&amp;gt; Exception in thread &quot;main&quot; java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-27 21:32:34 ***&lt;br/&gt;
------------------------------------------------------&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13876902" author="myrna" created="Mon, 20 Jan 2014 22:06:26 +0000"  >&lt;p&gt;Failed 1/17/2014; windows 2008, ibm 1.6, 10.9.2.2 - (1559317)&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1559317-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1559317-derbyall_diff.txt&lt;/a&gt;, diff as earlier failures.&lt;/p&gt;</comment>
                            <comment id="13914847" author="myrna" created="Thu, 27 Feb 2014 18:36:25 +0000"  >&lt;p&gt;We have seen this &apos;modifyThread permission&apos; failure before in rare situations, linking those to this issue...&lt;/p&gt;</comment>
                            <comment id="13914854" author="myrna" created="Thu, 27 Feb 2014 18:44:23 +0000"  >&lt;p&gt;The test store/LogDeviceTest.java failed (with ibm16 SR15) in last night&apos;s IBM trunk run, generating a javacore dump, and at the top of the tests&apos; derby.log I found this:&lt;/p&gt;

&lt;p&gt;Database Class Loader started - derby.database.classpath=&apos;&apos;^M&lt;br/&gt;
New exception raised during cleanup Access denied (java.lang.RuntimePermission modifyThread)^M&lt;br/&gt;
java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)^M&lt;br/&gt;
        at java.security.AccessController.throwACE(AccessController.java:100)^M&lt;br/&gt;
        at java.security.AccessController.checkPermission(AccessController.java:174)^M&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)^M&lt;br/&gt;
        at java.lang.SecurityManager.checkAccess(SecurityManager.java:671)^M&lt;br/&gt;
        at java.lang.Thread.checkAccess(Thread.java:403)^M&lt;br/&gt;
        at java.lang.Thread.interrupt(Thread.java:531)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:273)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)^M&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:419)^M&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:367)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:802)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.shutdown(LogDeviceTest.java:159)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.runTest(LogDeviceTest.java:101)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.main(LogDeviceTest.java:53)^M&lt;br/&gt;
Cleanup action completed^M&lt;br/&gt;
New exception raised during cleanup Access denied (java.lang.RuntimePermission modifyThread)^M&lt;br/&gt;
java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)^M&lt;br/&gt;
        at java.security.AccessController.throwACE(AccessController.java:100)^M&lt;br/&gt;
        at java.security.AccessController.checkPermission(AccessController.java:174)^M&lt;br/&gt;
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)^M&lt;br/&gt;
        at java.lang.SecurityManager.checkAccess(SecurityManager.java:671)^M&lt;br/&gt;
        at java.lang.Thread.checkAccess(Thread.java:403)^M&lt;br/&gt;
        at java.lang.Thread.interrupt(Thread.java:531)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:273)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)^M&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:419)^M&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:367)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:802)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.shutdown(LogDeviceTest.java:159)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.runTest(LogDeviceTest.java:101)^M&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.main(LogDeviceTest.java:53)^M&lt;/p&gt;</comment>
                            <comment id="13914886" author="myrna" created="Thu, 27 Feb 2014 18:58:09 +0000"  >&lt;p&gt;This error is very frustrating, and very elusive.&lt;br/&gt;
How do we or can we make sure no derby threads are system threads?&lt;/p&gt;</comment>
                            <comment id="13915126" author="myrna" created="Thu, 27 Feb 2014 22:25:34 +0000"  >&lt;p&gt;Attaching the javacore files from the test failure in store/LogDeviceTest (modified to remove strings like hostname, username, and the like, and then zipped)&lt;/p&gt;</comment>
                            <comment id="13925823" author="mamtas" created="Mon, 10 Mar 2014 15:55:28 +0000"  >&lt;p&gt;Test failed on 10.8.3.3(revision 1575473) with ibm jdk 1.6 on Windows 2008 machine&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1575473-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1575473-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13930223" author="knutanders" created="Tue, 11 Mar 2014 11:13:43 +0000"  >&lt;p&gt;I don&apos;t know where the system thread that causes problems in the test comes from, but I am able to reproduce the AccessControlException in my environment by manually starting a system thread and doing some db operations in that thread while another thread shuts down the engine. See the attached patch test-case.diff. The test case consistently fails for me with AccessControlException (insane) or ASSERT FAILURE (sane).&lt;/p&gt;</comment>
                            <comment id="13942494" author="mamtas" created="Thu, 20 Mar 2014 23:15:49 +0000"  >&lt;p&gt;The test failed on 10.10.1.4 with IBM JDK 1.6 on March 15th on Linux machine&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/v10_10/linux/testlog/ibm16/1577960-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/v10_10/linux/testlog/ibm16/1577960-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13942510" author="mamtas" created="Thu, 20 Mar 2014 23:28:38 +0000"  >&lt;p&gt;Another failure with IBM jdk 1.6, this time on trunk 10.11.0.0(revision 1576555)&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1576555-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1576555-derbyall_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13959091" author="myrna" created="Thu, 3 Apr 2014 20:04:52 +0100"  >&lt;p&gt;Another instance of hitting this in a test and not seeing it again.&lt;/p&gt;</comment>
                            <comment id="13964470" author="myrna" created="Wed, 9 Apr 2014 18:57:17 +0100"  >&lt;p&gt;I have made a debug build and am waiting for the results of multi iteration test runs in an environment where this reproduces more consistently, hopefully that will tell us what thread (name) is identified as needing the modifyThread permission.&lt;/p&gt;

&lt;p&gt;Until that information is available, I am wondering:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;should we &apos;support&apos; Derby activity on system threads?&lt;/li&gt;
	&lt;li&gt;if not, should we explicitly document this (and where?)&lt;/li&gt;
	&lt;li&gt;assuming we find a reasonable explanation for Derby calling interrupt on a system level thread in the RecoveryAfterBackup test (and even more rare occurrenes in other tests), would it be acceptable to, when we get this exception, just check whether we&apos;re dealing with a system level thread and if so, swallow the exception, and only other wise throw the exception?&lt;br/&gt;
Something like this (in ContextService.notifyAllActiveThreads):&lt;br/&gt;
                final Thread fActive = active;&lt;br/&gt;
		if (cm.setInterrupted(c))&lt;br/&gt;
                {&lt;br/&gt;
                    // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6352&quot; title=&quot;Access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;modifyThread&amp;quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6352&quot;&gt;&lt;del&gt;DERBY-6352&lt;/del&gt;&lt;/a&gt;; in some cases a SecurityException is seen&lt;br/&gt;
                    // demanding an explicit granting of modifyThread&lt;br/&gt;
                    // permission. Just swallow.&lt;br/&gt;
                    try {&lt;br/&gt;
                        AccessController.doPrivileged(&lt;br/&gt;
                                new PrivilegedAction() 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {                                    public Object run()  {
                                        fActive.interrupt();
                                        return null;
                                    }                                }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;);&lt;br/&gt;
                    } catch (java.security.AccessControlException ace) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {                        // if we&amp;#39;re seeing the need for modifyThread exception, and                        // this is a system thread, i.e. no parent thread, then forget about sending                        // an interrupt.                        if (ace.getPermission().toString().indexOf(&amp;quot;modifyThread&amp;quot;)&amp;gt;0)                         {
                            if(fActive.getThreadGroup().getParent() == null)
                                 continue;
                        }                        else                             throw ace;                    }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;Perhaps this is a bit odd as we&apos;d never see the &apos;modifyThread&apos; permission unless it is a system thread?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13973760" author="myrna" created="Fri, 18 Apr 2014 04:44:58 +0100"  >&lt;p&gt;The debug runs showed that when we hit the problem in the RecoveryAfterBackup test, it&apos;s on a &apos;Finalizer&apos;  thread.&lt;/p&gt;</comment>
                            <comment id="13979845" author="dagw" created="Thu, 24 Apr 2014 16:36:15 +0100"  >&lt;p&gt;In this case, Derby is shutting down the database, right? It seems OK to me to just ignore the exception if the interrupt&lt;br/&gt;
happens as part of the shutdown, since that interrupt is actually generated by Derby itself.&lt;/p&gt;</comment>
                            <comment id="13980607" author="myrna" created="Fri, 25 Apr 2014 02:35:12 +0100"  >&lt;p&gt;Thanks for the comment Dag, yes, Derby is shutting down the database.&lt;/p&gt;

&lt;p&gt;I am fiddling with a couple of options, and trying to make sure I don&apos;t mess up...&lt;br/&gt;
I&apos;m thinking of basically 2 options:&lt;br/&gt;
1. leave the code as it is currently (but remove the no longer needed ibm jvm specific javadump and try to minimize the comments) so catch the exception, then ignore it if we find it&apos;s a Finalizer thread&lt;br/&gt;
  1.b in sane mode, still throw an assert.&lt;br/&gt;
2. only call interrupt except if fActive is a system level thread with the word &apos;Finalizer&apos; in it.&lt;/p&gt;

&lt;p&gt;I am wondering which is best, and experimenting to see which is fastest.&lt;/p&gt;
</comment>
                            <comment id="13980805" author="knutanders" created="Fri, 25 Apr 2014 09:37:39 +0100"  >&lt;p&gt;Or perhaps we should ignore all SecurityExceptions when calling interrupt() in this method, regardless of which thread it is? I&apos;m thinking this because:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I&apos;m not sure we can rely on every JVM having the same name for the finalizer thread.&lt;/li&gt;
	&lt;li&gt;There could be other system threads doing database work.&lt;/li&gt;
	&lt;li&gt;The interrupt in this method looks like an optimization (active threads will stop earlier), and not an essential part of the shutdown, so it&apos;s probably not necessary to abort the shutdown if it is not allowed to interrupt the thread.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m still a little curious to know which finalize() method is causing this, since I didn&apos;t think the finalizers in the engine were doing work that would require a context stack.&lt;/p&gt;</comment>
                            <comment id="13981048" author="myrna" created="Fri, 25 Apr 2014 15:17:34 +0100"  >&lt;p&gt;Thanks Knut, I&apos;ll go and implement this then.&lt;br/&gt;
The Java call Stack from the jvm&apos;s informational dump suggests the finalizer comes from the EmbedConnection (this is based on a 10.10.1.4 build):&lt;br/&gt;
----------------------------&lt;br/&gt;
3XMTHREADINFO      &quot;Finalizer thread&quot; J9VMThread:0x00000000007A0200, j9thread_t:0x000000000079F1A0, java/lang/Thread:0x00007F7868697F90, state:B, prio=5&lt;br/&gt;
3XMJAVALTHREAD            (java/lang/Thread getId:0xB, isDaemon:true)&lt;br/&gt;
3XMTHREADINFO1            (native thread ID:0x4553, native priority:0x5, native policy:UNKNOWN)&lt;br/&gt;
3XMTHREADINFO2            (native stack address range from:0x00007F7865B10000, to:0x00007F7865B51000, size:0x41000)&lt;br/&gt;
3XMTHREADINFO3           Java callstack:&lt;br/&gt;
4XESTACKTRACE                at org/apache/derby/iapi/services/context/SystemContext.cleanupOnError(Bytecode PC:76(Compiled Code))&lt;br/&gt;
4XESTACKTRACE                at org/apache/derby/iapi/services/context/ContextManager.cleanupOnError(Bytecode PC:271(Compiled Code))&lt;br/&gt;
4XESTACKTRACE                at org/apache/derby/impl/jdbc/TransactionResourceImpl.cleanupOnError(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE                at org/apache/derby/impl/jdbc/EmbedConnection.close(Bytecode PC:73(Compiled Code))&lt;br/&gt;
4XESTACKTRACE                at org/apache/derby/impl/jdbc/EmbedConnection.finalize(Bytecode PC:12(Compiled Code))&lt;br/&gt;
4XESTACKTRACE                at java/lang/J9VMInternals.runFinalize(J9VMInternals.java:438(Compiled Code))&lt;br/&gt;
-------------------&lt;/p&gt;</comment>
                            <comment id="13981065" author="knutanders" created="Fri, 25 Apr 2014 15:40:10 +0100"  >&lt;p&gt;Thanks Myrna. The EmbedConnection.close(StandardException) method does some work within a setup/restoreContextStack() block, which explains why it is seen as an active thread.&lt;/p&gt;</comment>
                            <comment id="13981712" author="myrna" created="Fri, 25 Apr 2014 23:36:27 +0100"  >&lt;p&gt;Adding a patch which removes all the debugging printouts and asserts and just does nothing when we see an AccessControlException.&lt;br/&gt;
Thus, if we do not have enough permission to interrupt a thread, we just let it finish on its own.&lt;/p&gt;</comment>
                            <comment id="13982833" author="knutanders" created="Mon, 28 Apr 2014 09:31:01 +0100"  >&lt;p&gt;Thanks, Myrna. The patch looks fine to me. +1 to commit.&lt;/p&gt;

&lt;p&gt;Nit: The JVMInfo class is no longer used in ContextService, so the import statement can be removed too.&lt;/p&gt;</comment>
                            <comment id="13983634" author="jira-bot" created="Mon, 28 Apr 2014 22:56:08 +0100"  >&lt;p&gt;Commit 1590817 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1590817&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1590817&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6352&quot; title=&quot;Access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;modifyThread&amp;quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6352&quot;&gt;&lt;del&gt;DERBY-6352&lt;/del&gt;&lt;/a&gt;; Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&lt;br/&gt;
  When we see a AccessControlException during shutdown in the notifyAll call, do nothing, which lets the Thread finish on its own.&lt;/p&gt;</comment>
                            <comment id="13984720" author="jira-bot" created="Tue, 29 Apr 2014 21:04:20 +0100"  >&lt;p&gt;Commit 1591077 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/branches/10.10&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1591077&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1591077&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6352&quot; title=&quot;Access denied (&amp;quot;java.lang.RuntimePermission&amp;quot; &amp;quot;modifyThread&amp;quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6352&quot;&gt;&lt;del&gt;DERBY-6352&lt;/del&gt;&lt;/a&gt;; Access denied (&quot;java.lang.RuntimePermission&quot; &quot;modifyThread&quot;) highly intermittent, but e.g. in store.RecoveryAfterBackup test&lt;br/&gt;
   backport of revision 1590817 from trunk; accepting that if we see an AccessControlException in this spot in the code we let the thread finish on its own.&lt;/p&gt;</comment>
                            <comment id="14284748" author="myrna" created="Wed, 21 Jan 2015 00:23:07 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12560378">DERBY-5812</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12538687">DERBY-5571</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12560378">DERBY-5812</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12633262">DERBY-6084</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12371617">DERBY-2816</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12607437" name="DERBY-6352_trunk.diff" size="2652" author="myrna" created="Tue, 8 Oct 2013 22:08:35 +0100"/>
                            <attachment id="12607731" name="DERBY-6352_trunk2.diff" size="3009" author="myrna" created="Thu, 10 Oct 2013 04:18:16 +0100"/>
                            <attachment id="12642037" name="DERBY-6532_trunk3.diff" size="2316" author="myrna" created="Fri, 25 Apr 2014 23:36:27 +0100"/>
                            <attachment id="12631612" name="javacore_1.zip" size="45404" author="myrna" created="Thu, 27 Feb 2014 22:25:34 +0000"/>
                            <attachment id="12631613" name="javacore_2.zip" size="45503" author="myrna" created="Thu, 27 Feb 2014 22:25:34 +0000"/>
                            <attachment id="12633891" name="test-case.diff" size="4910" author="knutanders" created="Tue, 11 Mar 2014 11:13:43 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 7 Oct 2013 23:08:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>350305</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzi8tj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>350598</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>