<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-125/DERBY-125.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-125] Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-125</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;BACKGROUND:&lt;/p&gt;

&lt;p&gt;DRDA protocol, which is the protocol used by Derby Network Server, dictates that all DSS objects &quot;with data greater than 32,763 bytes&quot; should be broken down into multiple &quot;continuation&quot; DSSes.&lt;/p&gt;

&lt;p&gt;PROBLEM:&lt;/p&gt;

&lt;p&gt;When Network Server receives a &quot;prepareStatement&quot; call that has a very large number of parameters, it can end up sending a reply DSS that is greater than 32K long to the client; doing so breaks DRDA protocol.&lt;/p&gt;

&lt;p&gt;REPRODUCTION:&lt;/p&gt;

&lt;p&gt;Note that this reproduction does NOT cause a protocol exception against the JCC driver--without further investigation, it would appear JCC doesn&apos;t mind that the DSS is too long.  However, other DRDA clients (such as the DB2 ODBC client) will see that the data is too long and will fail because of it.&lt;/p&gt;

&lt;p&gt;To reproduce, one can create a simple table and then prepare a statement such as:&lt;/p&gt;

&lt;p&gt;SELECT id FROM t1 WHERE id in ( ?, ?, [ ... lots and lots of param markers ... ], ?)&lt;/p&gt;

&lt;p&gt;Note that JCC uses deferred prepare by default; when connecting, one must append the &quot;deferPrepares=false&quot; attribute to the end of the URL in order to reproduce the problem (that or just try to execute the statement, since preparation will be done at execution time).  When doing the prepare, I added a line in the &quot;flush&quot; method of org.apache.derby.impl.drda.DDMWriter.java to see how large the reply DSS was, and for cases where the number of parameter markers was high, the number of bytes in the single DSS would surpass 32K, and thus break protocol.&lt;/p&gt;

&lt;p&gt;NOTES:&lt;/p&gt;

&lt;p&gt;Network Server correctly uses continuation DSSes for LOBs and for result set data (data returned as the result of a query) that is greater than 32K.  The problem appears to be in &quot;other&quot; cases, such as for the prepareStatement call described above.&lt;/p&gt;</description>
                <environment></environment>
        <key id="29521">DERBY-125</key>
            <summary>Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="army">A B</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Jan 2005 03:51:30 +0000</created>
                <updated>Wed, 24 May 2006 04:58:50 +0100</updated>
                            <resolved>Sat, 29 Apr 2006 09:31:45 +0100</resolved>
                                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12356731" author="kmarsden" created="Fri, 4 Nov 2005 09:50:28 +0000"  >&lt;p&gt;Army posted some really excellent information related to this issue on the following Wiki page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/DssProtocolErrors&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DssProtocolErrors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks Army!&lt;/p&gt;</comment>
                            <comment id="12360330" author="bryanpendleton" created="Wed, 14 Dec 2005 03:43:41 +0000"  >&lt;p&gt;The attached &apos;repro.java&apos; can be used to reproduce this bug. &lt;/p&gt;

&lt;p&gt;As Army notes, there is no exception or other &quot;hard&quot; evidence of the problem. What I did was to run the attached program against a NetworkServer instance which had server-side tracing turned on (derby.drda.traceAll=true, derby.drda.traceDirectory=serverTraces), and also have client-side tracing turned on (;traceDirectory=clientTraces in my connection URL).&lt;/p&gt;

&lt;p&gt;Then, bring up both the server side traces and the client side traces in a pair of editor sessions side-by-side, and hunt down until you see the PRPSQLST message being sent from the client to the server. In the server-side trace, you can then see that the server responds with a SQLDARD which is far larger than 32K. The attached program prepares a statement with 2001 parameter markers and receives a SQLDARD message which is 118,300+ bytes long, so it appears that each parameter marker needs about 58 bytes in the SQLDARD, and it would only take about 500 parameter markers or so to blow the 32K limit.&lt;/p&gt;</comment>
                            <comment id="12360746" author="bryanpendleton" created="Mon, 19 Dec 2005 04:28:22 +0000"  >&lt;p&gt;Attached is a proposed change to address bugs 125, 170, 491, and 492, together with a detailed document discussing the thinking behind the changes and explaining how they work. Please review this at your convenience and let me know what you think.&lt;/p&gt;

&lt;p&gt;The current patch does not contain any new tests, and I believe that is mandatory prior to submitting these fixes, so the current patch is not ready to be submitted. I will be working on adding new tests, but since review of these changes will require some thought, I thought it would be valuable to put the change proposal and the accompanying description out there now, while I continue to work on more testing in the meantime.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12360830" author="bryanpendleton" created="Tue, 20 Dec 2005 00:35:18 +0000"  >&lt;p&gt;First diff included an accidental, unrelated change. Removed, and replaced with svn_2.diff.&lt;/p&gt;</comment>
                            <comment id="12361344" author="bryanpendleton" created="Thu, 29 Dec 2005 09:52:30 +0000"  >&lt;p&gt;Replaced &quot;changes.html&quot; with &quot;changes2.html&quot;, which includes more details and two additional bug fixes of significance.&lt;/p&gt;

&lt;p&gt;Replaced &quot;svn-2.diff&quot; with &quot;svn-dec_28_2005.diff&quot;, which includes all the bug fixes that I propose for this patch, together with several new regression tests and associated output files. The regression tests are in lang/procedure.java and in derbynet/prepStmt.java, and there is also a change to util/ProcedureTest.java to support the new lang/procedure.java tests.&lt;/p&gt;

&lt;p&gt;I think these changes are now fully ready for review. Please let me know your comments as I am very interested to hear what you think.&lt;/p&gt;</comment>
                            <comment id="12362549" author="bryanpendleton" created="Fri, 13 Jan 2006 01:41:01 +0000"  >&lt;p&gt;I am withdrawing this patch. It is unnecessarily large and complex, as it bundles multiple bug-fixes into one patch. I will submit a revised patch later which just addresses the changes to DDMWriter.finalizeDSSLength(). I will submit separate patches for bugs 170, 491, and 492. The patches for 491 and 492 will be dependent on the patch for this bug (125).&lt;/p&gt;</comment>
                            <comment id="12362578" author="bryanpendleton" created="Fri, 13 Jan 2006 09:47:54 +0000"  >&lt;p&gt;Attached is a focused patch which addresses &lt;b&gt;only&lt;/b&gt; the problems in DDMWriter.finalizeDSSLength(). The patch includes a test, and updates to the master output files. Note, unfortunately, that this test works even &lt;b&gt;without&lt;/b&gt; the changes to DDMWriter.java. The reason for this is explained in the changes.html file. I would like to write a better test, but don&apos;t know how to. Reviewers, please look at this patch and see if you can suggest a better way to write the test. Even if we can&apos;t write a better test, I think we should still review and consider this patch, because it fixes an important bug (and it is a pre-requisite for the fixes to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-491&quot; title=&quot;Protocol exception when Network Server tries to return ~32K of data or greater in a result set for a Java stored procedure.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-491&quot;&gt;&lt;del&gt;DERBY-491&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-492&quot; title=&quot;Server hangs when trying to return high number (hundreds) of columns from a Java procedure to the client.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-492&quot;&gt;&lt;del&gt;DERBY-492&lt;/del&gt;&lt;/a&gt;, which also have tests, so it will get additional testing there.)&lt;/p&gt;</comment>
                            <comment id="12362858" author="dyret" created="Tue, 17 Jan 2006 01:49:07 +0000"  >&lt;p&gt;Hi Bryan, I finally had a chance to look through your proposal (I have not yet looked at the actual patch), as I promised to do back in December. I think you have provided an exceptionally thorough description of the problem that was enjoyable to read. With regard to your questions; I think you have very high standards for your work, maybe too high &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Personally, I don&apos;t see any problems with filling the &quot;bytes[]&quot; array with junk to provoke an error, at least not in debug builds. And I would also let the client rely on the continuation header, and just refuse to read more bytes if the size was zero (or perhaps even throw an exception if the continuation bit is set, and the size is zero). If such protocol validation will break existing code I think one could print a warning in debug mode to make the test fail. &lt;/p&gt;</comment>
                            <comment id="12362895" author="kmarsden" created="Tue, 17 Jan 2006 07:57:52 +0000"  >&lt;p&gt;Hi Bryan&lt;/p&gt;

&lt;p&gt;Thank you so much again for your excellent  documentation.  I am learning quite a bit and appreciate your very high standards for your work #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I think once the series  of continuation fixes is committed we should update the DssProtocolErrors page that Army wrote to point to your documents.  I don&apos;t know if they should move to the documents to Wiki   or if it is ok to just keep them here and point to the bugs.&lt;/p&gt;


&lt;p&gt;My only comment on the code change are:&lt;br/&gt;
1) Can you submit a new patch after updating your client for the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-170&quot; title=&quot;Inserting large string value into non-existent table causes communication link failure over Network Server.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-170&quot;&gt;&lt;del&gt;DERBY-170&lt;/del&gt;&lt;/a&gt; commit.&lt;br/&gt;
2) Can you add some brief comments to the code containing&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a reference to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-125&quot; title=&quot;Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-125&quot;&gt;&lt;del&gt;DERBY-125&lt;/del&gt;&lt;/a&gt; and the changes.html here&lt;/li&gt;
	&lt;li&gt;just a couple brief comments in the code as to why we have to add 1 to startOfCopyData and the continuation flag hnadling changes that you made.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With regard to your questions and notes&lt;/p&gt;

&lt;p&gt;On the reading of DDMWriter traces&lt;br/&gt;
I tend to find the client tracing more helpful than the server-side tracing , and shows the JDBC calls  to provide better context.  That said, probably the problems you note exist on the client side too, so it might be good to file enhancements while you are thinking about it.&lt;/p&gt;

&lt;p&gt;On prefilling the buffer with a known value to try to flush out corruption in the sent data:&lt;br/&gt;
I think this is not a bad idea if (SanityManager.DEBUG), but not a high priority. &lt;/p&gt;

&lt;p&gt;Why don&apos;t bad DSS continuation headers cause more symptoms?&lt;br/&gt;
You mentioned that this might be because the Derby  client is very liberal in assuming that the block length is 32767 if the continuation bit is set.  I think that it would be worthwhile for the client to be changed to not make this assumption when talking to 10.2 or higher servers.  It would help prevent regressions in this area that might be very difficult to reproduce.  &lt;/p&gt;

&lt;p&gt;Should there be a limit to DDMWriter auto-expansion?&lt;br/&gt;
One poorly formed idea is to eliminate the expansion all together by istead of expanding have a pool of buffers available to all the DDMWriters.  If  a DDMWriter needs to write more,  it picks up a new buffer and returns it to the pool when no longer needed.  It seems like there should be a way to eliminate the shifting all together as well or at least shift sooner after the overrun happens to avoid shifting large amounts of data.&lt;/p&gt;
</comment>
                            <comment id="12363032" author="army" created="Wed, 18 Jan 2006 06:40:26 +0000"  >
&lt;p&gt;I spent some time looking at the existing test case for this issue and at Bryan&apos;s excellent description of the problem.  I played around with both and was able to come up with a repro for the problem that actually causes a failure on JCC.&lt;/p&gt;

&lt;p&gt;This isn&apos;t by any means a polished repro--the test would need to be cleaned up before it could be added to the nightlies.  But I thought I&apos;d post what I found and see what the reactions are.&lt;/p&gt;

&lt;p&gt;The repro is called offByOne.java (it&apos;s part of offByOne.jar).&lt;/p&gt;

&lt;p&gt;The theory behind this test is based on a quote from Bryan&apos;s email in the following thread:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/11865&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/11865&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The quote was:&lt;/p&gt;

&lt;p&gt;&amp;lt;begin_quote&amp;gt;&lt;/p&gt;

&lt;p&gt;Note that the only &quot;random&quot; or &quot;nondeterministic&quot; part of this damage is that&lt;br/&gt;
the very last byte in the large DDM object gets replaced by an unknown byte&lt;br/&gt;
from the unused section of the &apos;bytes&apos; array. If the bytes array was just&lt;br/&gt;
expanded in order to accomodate this object, then the unused section of the&lt;br/&gt;
array will contain zeros, but if the bytes array was previously used for a&lt;br/&gt;
larger amount of data, then those unused bytes contain unknown values. &lt;/p&gt;

&lt;p&gt;&amp;lt;end_quote&amp;gt;&lt;/p&gt;

&lt;p&gt;So what I&apos;ve done with this test is remove the &quot;random&quot; part.&lt;/p&gt;

&lt;p&gt;Basically, I take the repro that is already part of the existing patch and I run it twice.  The first iteration, I make both the table name and the column name extra long, so that the server-side buffer has more data in it.  The second iteration, I use simpler names for the table and column, which take up less space in the server buffer.  Then, per Bryan&apos;s quote, &quot;if the bytes array was previously used for a larger amount of data, then those unused bytes contain unknown values&quot;.  But since we intentionally put the &quot;larger amount of data&quot; into the buffer during the first iteration, we know what those &quot;unknown&quot; values are going to be.  Then, by twiddling the size of the table/column names, we can &apos;shift&apos; the data until we reach a point where the off-by-one error manifests itself: namely, we end up incorrectly leaving old data in the current server buffer.&lt;/p&gt;

&lt;p&gt;I&apos;ve also attached the traces for Derby Client and JCC with and without the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-125&quot; title=&quot;Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-125&quot;&gt;&lt;del&gt;DERBY-125&lt;/del&gt;&lt;/a&gt;.  Without the patch, search the trace file for the lines beginning with &quot;8160&quot;.  There will be two such lines: one from the first &quot;iteration&quot; of the repro, and one from the second.  With Derby Client, the first occurence looks like this:&lt;/p&gt;

&lt;p&gt;8160   000000000401F100  0000000000000000 &lt;/p&gt;

&lt;p&gt;and the second one looks like this:&lt;/p&gt;

&lt;p&gt;8160   000000000001                       &lt;/p&gt;

&lt;p&gt;If I&apos;m understanding correctly, the &quot;01&quot; in the second line is INCORRECT--it should be &quot;00&quot;.  But because of the off-by-one error, the &quot;01&quot; is left over from the first iteration, which is a manifestation of the problem described for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-125&quot; title=&quot;Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-125&quot;&gt;&lt;del&gt;DERBY-125&lt;/del&gt;&lt;/a&gt;.  A similar phenomenon can be seen from the JCC traces:&lt;/p&gt;

&lt;p&gt;First occurence:&lt;/p&gt;

&lt;p&gt;8160   000000000401F100  0000000000000000  &lt;/p&gt;

&lt;p&gt;Second occurence:&lt;/p&gt;

&lt;p&gt;8160   000000000001002C  D052000300262205 &lt;/p&gt;

&lt;p&gt;For JCC, the second occurrence has additional data in it--it looks like an OPNQRYRM is chained to the data?  This might be a result of the &apos;defer&apos; behavior, I&apos;m not sure.&lt;/p&gt;

&lt;p&gt;For whatever reason, this error goes &quot;unseen&quot; by the Derby Client; but for JCC, the result is an error in the repro, namely:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; com.ibm.db2.jcc.c.DisconnectException: Execution failed due to a distribution protocol error that caused deallocation of the conversation.  A DRDA Data Stream Syntax Error was detected.  Reason: 0x3&lt;br/&gt;
        at com.ibm.db2.jcc.a.bb.l(bb.java:1206)&lt;br/&gt;
        at com.ibm.db2.jcc.a.bb.c(bb.java:363)&lt;br/&gt;
        at com.ibm.db2.jcc.a.bb.v(bb.java:1439)&lt;br/&gt;
        at com.ibm.db2.jcc.a.eb.c(eb.java:56)&lt;br/&gt;
        at com.ibm.db2.jcc.a.r.c(r.java:42)&lt;br/&gt;
        at com.ibm.db2.jcc.a.tb.h(tb.java:169)&lt;br/&gt;
        at com.ibm.db2.jcc.c.zc.p(zc.java:1223)&lt;br/&gt;
        at com.ibm.db2.jcc.c.ad.d(ad.java:2246)&lt;br/&gt;
        at com.ibm.db2.jcc.c.ad.U(ad.java:489)&lt;br/&gt;
        at com.ibm.db2.jcc.c.ad.executeQuery(ad.java:472)&lt;/p&gt;

&lt;p&gt;So while this isn&apos;t ideal, at least we&apos;d have a test for JCC that didn&apos;t rely on any other fixes (esp. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-492&quot; title=&quot;Server hangs when trying to return high number (hundreds) of columns from a Java procedure to the client.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-492&quot;&gt;&lt;del&gt;DERBY-492&lt;/del&gt;&lt;/a&gt;) and that would indicate a regression.  That said, though, things to consider would be:&lt;/p&gt;

&lt;p&gt;1) why does this error occur in JCC but not in the client?  Is it related to deferred prepares, or something else?  Can/should the client be recognizing this error and doing something about it?&lt;/p&gt;

&lt;p&gt;2) Is there some way to modify this repro so that the client fails, too?&lt;/p&gt;

&lt;p&gt;All of that said, I have to admit the repro is a bit fragile and hack-ish.  In order to get this to work, the second iteration has to have a table name that is exactly 99 characters long and a column name that is 97 characters.  There are other lengths that will cause the problem, as well--but just randomly using two lengths probably won&apos;t work.  So yes, it&apos;s ugly.&lt;/p&gt;

&lt;p&gt;Nonetheless, at least we have a test case that fails without the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-125&quot; title=&quot;Network Server can send DSS greater than 32K to client, which breaks DRDA protocol.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-125&quot;&gt;&lt;del&gt;DERBY-125&lt;/del&gt;&lt;/a&gt; patch and passes with it, which was the big goal.  If after reading this comment anyone feels like this is too hacky/unreliable, then so be it--I won&apos;t be offended &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t really have time to continue looking at this, but I&apos;m hoping someone out there can follow up on this and turn it into something useful.  My apologies for not taking this further, but I have a lot going on right now...&lt;/p&gt;

&lt;p&gt;To run the repro:&lt;/p&gt;

&lt;p&gt;&amp;gt; java offByOne&lt;/p&gt;

&lt;p&gt;  --&amp;gt; Runs with Derby Client&lt;/p&gt;

&lt;p&gt;&amp;gt; java offByOne jcc&lt;/p&gt;

&lt;p&gt;  --&amp;gt; Runs with JCC&lt;/p&gt;

&lt;p&gt;Hope this is helpful...&lt;/p&gt;</comment>
                            <comment id="12363581" author="bryanpendleton" created="Mon, 23 Jan 2006 02:23:47 +0000"  >&lt;p&gt;Attached is the latest patch proposal, updated to the latest trunk,with all conflicts resolved and derbyall passing. There are two changes in this patch proposal relative to the previous one:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;ve changed the regression test to use the new test devised by Army. I&apos;ve verified that the test fails before the patch to DDMWriter, and succeeds after it. Although I agree that the test is a bit delicate, it is much better to have a test which clearly demonstrates the problem.&lt;/li&gt;
	&lt;li&gt;I&apos;ve improved the comments in finalizeDssLength() a bit to explain my changes a bit better, and also included a pointer to this bug report for those future historians who desire to study the bug in more detail.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Kathey, Dyre, Army: thank you very much for your feedback on the previous proposals and on the questions I raised. My preference is to treat your suggestions independently, and to open separate JIRA entries to track resolving these questions in the future:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Improving DDMWriter traces to make them easier to read in the presence of continuations and chaining&lt;/li&gt;
	&lt;li&gt;Modifying the client to process the length portion of DSS Continuation Headers, compatibly with previous releases&lt;/li&gt;
	&lt;li&gt;Under SanityManager control, pre-filling the DDMWriter buffer with special non-zero data to reveal memory corruption problems more readily&lt;/li&gt;
	&lt;li&gt;Investigating performance issues in large object handling with respect to both memory usage and number of data copies&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks again to everybody who has helped me with the investigations into this bug.&lt;/p&gt;</comment>
                            <comment id="12363718" author="kmarsden" created="Tue, 24 Jan 2006 04:14:43 +0000"  >
&lt;p&gt;Checked in this patch. Thanks Bryan!&lt;/p&gt;

&lt;p&gt;Date: Mon Jan 23 09:34:23 2006&lt;br/&gt;
New Revision: 371603&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=371603&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=371603&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12363910" author="bryanpendleton" created="Wed, 25 Jan 2006 11:04:17 +0000"  >&lt;p&gt;Fixed in the trunk with commit of revision 371603&lt;/p&gt;</comment>
                            <comment id="12376945" author="bryanpendleton" created="Fri, 28 Apr 2006 22:17:37 +0100"  >&lt;p&gt;Reopened to merge this fix to the 10.1 branch.&lt;/p&gt;</comment>
                            <comment id="12377052" author="bryanpendleton" created="Sat, 29 Apr 2006 09:31:45 +0100"  >&lt;p&gt;The merge from main was straightforward, and the testing was successful, once I re-read Army&apos;s notes and remembered the details of how this regression test works. Specifically, I had forgotten that this regression test only shows a concrete symptom in the JCC configuration, not in the DerbyNetClient configuration.&lt;/p&gt;

&lt;p&gt;Committed the change to the 10.1 branch as revision 398058:&lt;br/&gt;
svn.apache.org/viewcvs?rev=398058&amp;amp;view=rev&lt;/p&gt;</comment>
                            <comment id="12412993" author="army" created="Wed, 24 May 2006 04:58:50 +0100"  >&lt;p&gt;Issue has been fixed, tested, and ported back to 10.1, so I&apos;m now marking it as closed.  Thanks Bryan!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12321909" name="changes.html" size="22748" author="bryanpendleton" created="Fri, 13 Jan 2006 09:47:54 +0000"/>
                            <attachment id="12322047" name="offByOne.jar" size="140336" author="army" created="Wed, 18 Jan 2006 06:40:26 +0000"/>
                            <attachment id="12321310" name="repro.java" size="1873" author="bryanpendleton" created="Wed, 14 Dec 2005 03:43:41 +0000"/>
                            <attachment id="12321911" name="svn_jan_12_2006.status" size="416" author="bryanpendleton" created="Fri, 13 Jan 2006 09:47:54 +0000"/>
                            <attachment id="12322220" name="svn_jan_22_2006.diff" size="12226" author="bryanpendleton" created="Mon, 23 Jan 2006 02:23:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Nov 2005 09:50:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21782</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy16dr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40684</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>