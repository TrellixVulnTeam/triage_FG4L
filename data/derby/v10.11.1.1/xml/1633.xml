<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1633/DERBY-1633.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1633] Regression: The fields of views are not being calculated properly since 10.1.2.4</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1633</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Database can be assumed to be same as in Derby - 1205 Jira issue&lt;/p&gt;

&lt;p&gt;SELECT PORT1.PORT_ID FROM T_RES_PORT PORT1, T_VIEW_ENTITY2PORT ENTITY2PORT WHERE ENTITY2PORT.PORT_ID = PORT1.PORT_ID&lt;/p&gt;

&lt;p&gt;This works fine in 10.1.2.1 but fails thereafter complaining that Comparison between INTEGER and CHAR is not supported&lt;/p&gt;

&lt;p&gt;for some reason, it thinks one of the PORT_ID columns is a character, when in reality both are integers.&lt;/p&gt;

&lt;p&gt;		SELECT DISTINCT &lt;br/&gt;
		    ZONE.ZONE_ID ZONE_ID, &lt;br/&gt;
			 PORT2ZONE.ZONE_MEMBER_ID  &lt;br/&gt;
		FROM  &lt;br/&gt;
			 T_RES_ZONE ZONE left outer join T_VIEW_PORT2ZONE PORT2ZONE on  &lt;br/&gt;
			 ZONE.ZONE_ID = PORT2ZONE.ZONE_ID   ,  T_RES_FABRIC FABRIC &lt;/p&gt;

&lt;p&gt;In this query, it is complaining that one of the columns is a VARCHAR and cannot be compared to INTEGER, when clearly this is not the case...&lt;/p&gt;

&lt;p&gt;Same issue&lt;/p&gt;</description>
                <environment>2.8 GHZ dual PIV on Windows XP SP2, 2 GB memory</environment>
        <key id="12347180">DERBY-1633</key>
            <summary>Regression: The fields of views are not being calculated properly since 10.1.2.4</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="army">A B</assignee>
                                    <reporter username="psarkar">Prasenjit Sarkar</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Aug 2006 19:47:56 +0100</created>
                <updated>Tue, 30 Jun 2009 17:12:53 +0100</updated>
                            <resolved>Mon, 28 Aug 2006 17:09:52 +0100</resolved>
                                    <version>10.1.3.1</version>
                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12425342" author="army" created="Wed, 2 Aug 2006 20:00:05 +0100"  >&lt;p&gt;Looks like an issue with the predicate scoping that occurs as part of predicate pushdown for UNIONs--see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt;.  I will look into it...&lt;/p&gt;</comment>
                            <comment id="12425402" author="army" created="Thu, 3 Aug 2006 00:34:02 +0100"  >&lt;p&gt;Attaching a simplified reproduction of the problem that does not rely on the database in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1205&quot; title=&quot;Unexpectedly very slow performance compared to DB2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1205&quot;&gt;&lt;del&gt;DERBY-1205&lt;/del&gt;&lt;/a&gt;.  (But the database in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1205&quot; title=&quot;Unexpectedly very slow performance compared to DB2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1205&quot;&gt;&lt;del&gt;DERBY-1205&lt;/del&gt;&lt;/a&gt; allowed me to write this repro, so THANKS to Prasenjit for posting the database initially).&lt;/p&gt;</comment>
                            <comment id="12426275" author="army" created="Mon, 7 Aug 2006 18:48:06 +0100"  >&lt;p&gt;Attaching a detailed description of the issue that is causing this regression, and a description of what I believe to be the correct fix.  I&apos;m also attaching a first version of the patch that is for review only.&lt;/p&gt;

&lt;p&gt;The reason the patch is for review only is that it does not yet have new test cases for catching this regression in the future, and more importantly, because there are some changes in the patch about which I am not very clear.  So I&apos;m hoping someone out there who&apos;s familiar with predicate &quot;remapping&quot; can provide some input to help clarify some things for me.  A description of what I don&apos;t yet understand is provided in section V of the document.&lt;/p&gt;

&lt;p&gt;I plan to continue looking at this issue to try to finalize my understanding of the changes, but in the meantime, other comments/reviews would be helpful.&lt;/p&gt;

&lt;p&gt;The description of the problem, the fix, and my continuing questions can be found in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; title=&quot;Regression: The fields of views are not being calculated properly since 10.1.2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1633&quot;&gt;&lt;del&gt;DERBY-1633&lt;/del&gt;&lt;/a&gt;_v1.html; the first patch (for review only) is d1633_v1_reviewOnly.patch.&lt;/p&gt;</comment>
                            <comment id="12427295" author="kmarsden" created="Thu, 10 Aug 2006 19:07:08 +0100"  >&lt;p&gt;Marking fix version 10.2 &lt;/p&gt;
</comment>
                            <comment id="12427576" author="army" created="Fri, 11 Aug 2006 19:14:12 +0100"  >&lt;p&gt;Attaching a second version of the patch, d1633_v2.patch, that  addresses the regression described in this issue.  Also attaching a second version of the HTML file that answers my previous questions based on tracing and exploration of the code (relevant comments are also in the code).&lt;/p&gt;

&lt;p&gt;Differences between v1 and v2:&lt;/p&gt;

&lt;p&gt;&amp;#8211; &quot;RESOLVE&quot; comments replaced with comments explaining the relevant pieces of code.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Fixed a problem in Predicate.isJoinPredicate() so that the method will only return true if the predicate operands reference different tables (ex. T1.j = T1.i is not a join predicate).  The need for this was exposed by the other changes for this issue and this small (2-line) change was required to get the predicatePushdown test to run cleanly.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Added minor special-case logic to catch situations where predicates don&apos;t reference base tables; see code comments for more.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Added a set of new tests to lang/predicatePushdown.sql and updated the master file accordingly.&lt;/p&gt;

&lt;p&gt;Note that over half of this patch is from the new tests, and a good chunk of what&apos;s left is comments, so the patch isn&apos;t actually all that big.&lt;/p&gt;

&lt;p&gt;I ran derbyall on Red Hat Linux with ibm142 against SANE jars and saw no new failures.&lt;/p&gt;

&lt;p&gt;This patch, d1633_v2.patch, is ready for review/commit.&lt;/p&gt;</comment>
                            <comment id="12427612" author="army" created="Fri, 11 Aug 2006 21:19:31 +0100"  >&lt;p&gt;Marking Patch Available since the patch, d1633_v2.patch, is ready for review and commit. &lt;/p&gt;</comment>
                            <comment id="12428256" author="rhillegas" created="Tue, 15 Aug 2006 23:58:40 +0100"  >&lt;p&gt;Thanks for the extensive analysis, Army! This has helped me to understand some of the issues. At this point I&apos;m afraid that I don&apos;t have a very firm grasp of the high level problem and I hope that you will teach me more. It is clear that you have studied this tricky piece of code. Please bear with me.&lt;/p&gt;

&lt;p&gt;I lost the thread of your explanation when I got to OBS#2 in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; title=&quot;Regression: The fields of views are not being calculated properly since 10.1.2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1633&quot;&gt;&lt;del&gt;DERBY-1633&lt;/del&gt;&lt;/a&gt;_v2.html. I did not understand this statement: &quot;When a predicate is pushed to a UNION that appears in a Select list, the predicate will be &quot;remapped&quot; so that the column references point to their source result columns.&quot; I did not grasp how the problem was caused by the UNION. Why does a UNION require this mapping?&lt;/p&gt;

&lt;p&gt;Instead, it seemed to me that the remapping was required by what was underneath the UNION. In this case, it is a Permuting Node (that&apos;s a term I just made up), that is, an operator which changes column order. In this case, the Permuting Node is a view, although I suppose it could also be a subquery.&lt;/p&gt;

&lt;p&gt;It seems to me that positional remapping is required for other predicates that we try to push down, even if no UNION is involved. For instance, I think we need positional remapping in the following cases. And this brings me to the heart of my confusion: Why does predicate pushdown work in the following cases--or does it? If it does work, how is it that UNIONs break the logic? Here are some cases that come to mind:&lt;/p&gt;

&lt;p&gt;select *&lt;br/&gt;
from &lt;br/&gt;
  t1,&lt;br/&gt;
  ( select b as x, a as y from t2) v2&lt;br/&gt;
where t1.a = v2.y&lt;/p&gt;

&lt;p&gt;select *&lt;br/&gt;
from ( select b as x, a as y from t2) v2&lt;br/&gt;
where v2.y = 1&lt;/p&gt;
</comment>
                            <comment id="12428416" author="army" created="Wed, 16 Aug 2006 16:33:35 +0100"  >&lt;p&gt;Reply to Rick&apos;s comments can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/26853&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/26853&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reviewing, Rick!  &lt;/p&gt;</comment>
                            <comment id="12428435" author="rhillegas" created="Wed, 16 Aug 2006 17:54:24 +0100"  >&lt;p&gt;Thanks for the extra explanation, Army. I think I understand the problem better now.&lt;/p&gt;

&lt;p&gt;I have one issue with this patch: In at least one place (Predicate.skipRemap()) your comments call out certain assumptions about the kinds of queries which take this code path. Some day those assumptions may break. When they do, the customer will see a very unhelpful diagnostic (in this case, a casting exception). I would like to see this code react more defensively, either raising a friendlier exception or, preferably, selecting a different albeit less optimal plan. I&apos;m concerned that this regression is itself a symptom of a missed opportunity to validate our assumptions.&lt;/p&gt;

&lt;p&gt;I&apos;d also appreciate it if Satheesh could review this patch. He reviewed the original work, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt;, which introduced this regression. I think he is well placed to analyze subtle problems which may be lurking in this tricky code.&lt;/p&gt;

&lt;p&gt;Thanks again for your extensive explanations both in the code and in this JIRA.&lt;/p&gt;</comment>
                            <comment id="12428531" author="army" created="Wed, 16 Aug 2006 23:45:24 +0100"  >&lt;p&gt;Thank you Rick for the review and for the helpful comments.  I looked through the patch and found two assumptions in the code: one explicit (which you also pointed out) in Predicate.skipRemap(), and another implicit one in the &quot;getScopedOperand()&quot; method of BinaryRelationalOperatorNode.&lt;/p&gt;

&lt;p&gt;It&apos;s the implicit assumption in getScopedOperand() that is the important one--and some initial tracing shows that there may in fact be a problem in that area.  So thanks for bring this up.&lt;/p&gt;

&lt;p&gt;I am unchecking the &quot;Patch Available&quot; box as I look into the matter more.  In the meantime, committers please note that this means d1633_v2.patch is NOT ready for commit after all.  I will post more when I have a better idea of what&apos;s going on.  Thanks for everyone&apos;s patience here...&lt;/p&gt;</comment>
                            <comment id="12428548" author="mikem" created="Thu, 17 Aug 2006 01:13:20 +0100"  >&lt;p&gt;for what it is worth d1633_v2.patch passed a full set of nightly tests on XP, sun jdk 1.4.2.   I will wait for revised patch to before committing.&lt;/p&gt;</comment>
                            <comment id="12428832" author="army" created="Fri, 18 Aug 2006 00:39:02 +0100"  >&lt;p&gt;Quick update on where I stand with this issue...&lt;/p&gt;

&lt;p&gt;When I was tracing through code for the _v2 patch for this issue, I found two things that caused me to withdraw the patch from potential commit.&lt;/p&gt;

&lt;p&gt;First, there is some special case logic in BinaryRelOpNode.getScopedOperand() for situations when the scope target ResultColumn could not be found:&lt;/p&gt;

&lt;p&gt;+        /* Special case: if the cr has already been &quot;scoped&quot; once and&lt;br/&gt;
+         * it corresponds to a ResultColumn whose expression isn&apos;t a&lt;br/&gt;
+         * ColumnReference (see last line in this method) then rc will&lt;br/&gt;
+         * be null here.  In that case, we just return a clone of cr.&lt;br/&gt;
+         */&lt;br/&gt;
+        if (rc == null)&lt;br/&gt;
+            return (ValueNode)cr.getClone();&lt;/p&gt;

&lt;p&gt;This is the &quot;implicit assumption&quot; that I mentioned in my previous comment, and when I was tracing through code I realized that this assumption was not correct.  As it turns out, for the queries I was running to get to this code, the reason rc was null was NOT because it &quot;corresponds to a ResultColumn whose expression isn&apos;t a Column Reference&quot;.  Rather, it was because the subquery that the operand-to-be-scoped (&quot;cr&quot;) was pointing to had actually been flattened during preprocessing.  To make a long story short, this meant that the ResultColumn to which &quot;cr&quot; was pointing was redundant and thus was not really pointing to the correct source result set.  This in turn meant that we tried to find &quot;cr&quot;s (redundant) source result in the childRSN&apos;s result column list, we couldn&apos;t find it, and hence rc was null.  What we need to do, then, is skip over the redundant source result set to find the actual result set, and then search for that in childRSN&apos;s RCL.&lt;/p&gt;

&lt;p&gt;Having figured out the cause for this special-case logic (namely, subquery flattening when preprocessing), I have been able to make the appropriate changes and have thus removed the need for this special-case logic altogether.  So that issue has been resolved.&lt;/p&gt;

&lt;p&gt;The second reason I withdrew the patch was for cases where &quot;cr&quot; does actually correspond to a ResultColumn whose expression isn&apos;t a ColumnReference.  Namely, at the very end of the getScopedOperand() method:&lt;/p&gt;

&lt;p&gt;        /* We can get here if the ResultColumn&apos;s expression isn&apos;t a&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ColumnReference.  For example, the expression would be a&lt;/li&gt;
	&lt;li&gt;constant expression if childRSN represented something like:&lt;br/&gt;
         *&lt;/li&gt;
	&lt;li&gt;select 1, 1 from t1&lt;br/&gt;
         *&lt;/li&gt;
	&lt;li&gt;In this case we just return a clone of the column reference&lt;/li&gt;
	&lt;li&gt;because it&apos;s scoped as far as we can take it.&lt;br/&gt;
         */&lt;br/&gt;
        return (ValueNode)cr.getClone();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As I was tracing through code to figure out the first issue mentioned above, I noticed that this logic was not updated to reflect the rest of the changes for the _v2 patch.  In particular, the _v2 algorithm for finding the scope target column involves just retrieving the &quot;whichRC&quot;&lt;del&gt;th column of childRSN&apos;s result column list if childRSN is the right child of a Union.  With the above code, if the scope target&apos;s expression is not a ColumnReference we&apos;ll just return a clone of &quot;cr&quot;&lt;/del&gt;-but &quot;cr&quot; will always be w.r.t to the left child, so if childRSN is actually the right child of a Union, then returning a clone of &quot;cr&quot; is not the correct thing to do.  Instead, we have to return a new ColumnReference whose source is set to be the whichRC-th result column in childRSN&apos;s result column list.&lt;/p&gt;

&lt;p&gt;I have figured out how to implement this second change, as well, and thus have addressed both of my concerns with the _v2 patch.&lt;/p&gt;

&lt;p&gt;However, it is still not clear to me why all of my tests-&lt;del&gt;and derbyall, too&lt;/del&gt;-passed with these errors in the code.  So I still need to try to write more tests to either 1) prove that the _v2 code was wrong (and that my latest changes are correct) or 2) understand why having apparently incorrect code in the _v2 patch still makes everything work.&lt;/p&gt;

&lt;p&gt;It is this latter task that I&apos;m still investigating.  I will post more when I have more to post...&lt;/p&gt;</comment>
                            <comment id="12429389" author="army" created="Mon, 21 Aug 2006 12:02:36 +0100"  >&lt;p&gt;Attaching a third attempt at resolving this issue, d1633_v3_code.patch and d1633_v3_tests.patch.  I&apos;ve separated the tests out from the patch because the test diff for lang/predicatePushdown.out is several thousand lines (that&apos;s what happens when code changes affect query plans) and I didn&apos;t want it to interefere with review of the code changes.  I did manually verify all of the new query plans and while the plans have changed in some ways, they still correctly demonstrate the behavior that is being tested.&lt;/p&gt;

&lt;p&gt;I&apos;m also attaching a _v3 of the HTML file to described the _v3 code changes.  In particular there is a new section &quot;V&quot; that describes several changes which are in _v3 but were not in _v2.  Test cases demonstrating the short-comings of _v2 are included in d1633_v3_tests.patch.&lt;/p&gt;

&lt;p&gt;I ran derbyall on Red Hat Linux with ibm142 using sane jars against a patch that was very similar to _v3 and saw no new failures.  I did, however, make some additional changes when I created _v3 and so need to re-run derbyall again to make sure all is okay.&lt;/p&gt;

&lt;p&gt;In the meantime, though, I&apos;m posting the d1633_v3 patches, which I believe to be a complete solution to the regression described for this issue.  As always, review/comments/commit would be greatly appreciated.&lt;/p&gt;

&lt;p&gt;svn stat:&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\sql\compile\Predicate.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\SelectNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\ProjectRestrictNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\BinaryRelationalOperatorNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\SetOperatorNode.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\OptimizerImpl.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\ColumnReference.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\compile\ResultColumnList.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\lang\predicatePushdown.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\predicatePushdown.out&lt;/p&gt;</comment>
                            <comment id="12429520" author="army" created="Mon, 21 Aug 2006 21:33:09 +0100"  >&lt;p&gt;I applied the _v3 patches and ran derbyall on Red Hat Linux with ibm142 against sane jars with no new failures.  So as mentioned in my previous comment, the d1633_v3_code.patch and d1633_v3_tests.patch patches are ready for review and commit.&lt;/p&gt;</comment>
                            <comment id="12429738" author="rhillegas" created="Tue, 22 Aug 2006 16:12:58 +0100"  >&lt;p&gt;Hi Army. Thanks for the new patch and the extensive explanation in this JIRA and in the code.  I am inclined to check in this fix tomorrow unless someone objects. &lt;/p&gt;</comment>
                            <comment id="12430064" author="rhillegas" created="Wed, 23 Aug 2006 19:13:55 +0100"  >&lt;p&gt;Committed the d1633_v3 patches at subversion revision 434111.&lt;/p&gt;</comment>
                            <comment id="12430098" author="army" created="Wed, 23 Aug 2006 21:33:36 +0100"  >&lt;p&gt;Thanks so much for the review and commit, Rick!  (it looks like I&apos;m not getting Jira emails, so I didn&apos;t see this comment until just now).&lt;/p&gt;

&lt;p&gt;Are you planning/willing to port this to the 10.2 branch, as well?&lt;/p&gt;</comment>
                            <comment id="12430139" author="rhillegas" created="Thu, 24 Aug 2006 00:30:23 +0100"  >&lt;p&gt;Hi Army. Yes, I will port this to 10.2 too.&lt;/p&gt;</comment>
                            <comment id="12430268" author="rhillegas" created="Thu, 24 Aug 2006 16:26:38 +0100"  >&lt;p&gt;Turning off the &quot;patch available&quot; bit since this has been committed to the trunk.&lt;/p&gt;</comment>
                            <comment id="12430606" author="rhillegas" created="Fri, 25 Aug 2006 21:07:48 +0100"  >&lt;p&gt;Ported &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1633&quot; title=&quot;Regression: The fields of views are not being calculated properly since 10.1.2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1633&quot;&gt;&lt;del&gt;DERBY-1633&lt;/del&gt;&lt;/a&gt; (434111) to 10.2 at subversion revision 436921.&lt;/p&gt;</comment>
                            <comment id="12430685" author="army" created="Sat, 26 Aug 2006 04:29:01 +0100"  >&lt;p&gt;Attaching a patch to port this fix to the 10.1 codeline, which is where the regression was first introduced.  A simple merge command was not possible because other changes (esp. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-781&quot; title=&quot;Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-781&quot;&gt;&lt;del&gt;DERBY-781&lt;/del&gt;&lt;/a&gt;) were checked into the 10.2/10.3 codeline that are not in 10.1 and thus the patch wouldn&apos;t merge cleanly.&lt;/p&gt;

&lt;p&gt;I applied the patch, d1633_10_1_merge.patch, and ran derbyall with 10.1 sane jars on Red Hat Linux using ibm142.  There were no unexpected failures.&lt;/p&gt;

&lt;p&gt;So the patch is ready for commit into the 10.1 codeline.  Once that&apos;s done, I believe this issue and be resolved and closed.&lt;/p&gt;</comment>
                            <comment id="12430686" author="army" created="Sat, 26 Aug 2006 04:30:32 +0100"  >&lt;p&gt;Checking &quot;Patch Available&quot; because the patch to merge this change to 10.1 is now available: d1633_10_1_merge.patch.&lt;/p&gt;</comment>
                            <comment id="12430985" author="mikem" created="Mon, 28 Aug 2006 15:49:34 +0100"  >&lt;p&gt;committed d1633_10_1_merge.patch to the 10.1 branch.&lt;/p&gt;

&lt;p&gt;m101_142:48&amp;gt;svn commit&lt;/p&gt;

&lt;p&gt;Sending        java\client\org\apache\derby\client\am\SectionManager.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\BinaryRelationalOperatorNode.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\ColumnReference.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\OptimizerImpl.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\Predicate.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\ProjectRestrictNode.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\ResultColumnList.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\SelectNode.java&lt;br/&gt;
Sending        java\engine\org\apache\derby\impl\sql\compile\SetOperatorNode.java&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\master\predicatePushdown.out&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\lang\predicatePushdown.sql&lt;br/&gt;
Transmitting file data ...........&lt;br/&gt;
Committed revision 437718&lt;/p&gt;</comment>
                            <comment id="12430998" author="army" created="Mon, 28 Aug 2006 17:09:51 +0100"  >&lt;p&gt;Many thanks to Rick and to Mike for porting this fix back to 10.2 and 10.1, respectively.&lt;/p&gt;

&lt;p&gt;I confirmed that the change is in 10.1 and als in the latest 10.2 beta snapshot.  Also, the new test cases in lang/predicatePushdown.sql run correctly in both codelines.  Since this fix is now in trunk, 10.2, and 10.1, I&apos;m marking it resolved and clearing the &quot;patch available&quot; flag.&lt;/p&gt;

&lt;p&gt;Thanks also to Rick for taking the time to review the different iterations of this rather involved patch.  I appreciate your time!&lt;/p&gt;</comment>
                            <comment id="12431066" author="psarkar" created="Mon, 28 Aug 2006 21:53:49 +0100"  >&lt;p&gt;I dont think this issue is resolved yet: I got a SQL error (same as above) for the following query that works in 10.1.2.1:&lt;/p&gt;

&lt;p&gt;SELECT HOST2FABRIC1.FABRIC_ID, HOST2FABRIC1.PREFIX_ID, HOST2FABRIC1.HOST_ID FROM T_VIEW_HOST2FABRIC HOST2FABRIC1, T_VIEW_HOST2FABRIC HOST2FABRIC2 WHERE HOST2FABRIC1.PREFIX_ID = HOST2FABRIC2.HOST_ID AND HOST2FABRIC1.HOST_ID = HOST2FABRIC2.HOST_ID AND HOST2FABRIC2.FABRIC_ID = ?&lt;/p&gt;</comment>
                            <comment id="12431073" author="army" created="Mon, 28 Aug 2006 22:15:18 +0100"  >&lt;p&gt;Thanks for continuing to test this particular fix, Prasenjit.&lt;/p&gt;

&lt;p&gt;I assume the query in the above comment is supposed to be run agains the same database that&apos;s in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1205&quot; title=&quot;Unexpectedly very slow performance compared to DB2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1205&quot;&gt;&lt;del&gt;DERBY-1205&lt;/del&gt;&lt;/a&gt;?  When I try to run it I see:&lt;/p&gt;

&lt;p&gt;prepare qFail as &apos;&lt;/p&gt;

&lt;p&gt;SELECT&lt;/p&gt;

&lt;p&gt;  HOST2FABRIC1.FABRIC_ID,&lt;br/&gt;
  HOST2FABRIC1.PREFIX_ID,&lt;br/&gt;
  HOST2FABRIC1.HOST_ID&lt;/p&gt;

&lt;p&gt;FROM&lt;/p&gt;

&lt;p&gt;  T_VIEW_HOST2FABRIC HOST2FABRIC1,&lt;br/&gt;
  T_VIEW_HOST2FABRIC HOST2FABRIC2&lt;/p&gt;

&lt;p&gt;WHERE&lt;/p&gt;

&lt;p&gt;  HOST2FABRIC1.PREFIX_ID = HOST2FABRIC2.HOST_ID&lt;br/&gt;
  AND HOST2FABRIC1.HOST_ID = HOST2FABRIC2.HOST_ID&lt;br/&gt;
  AND HOST2FABRIC2.FABRIC_ID = ?&lt;/p&gt;

&lt;p&gt;&apos;;&lt;/p&gt;

&lt;p&gt;ERROR 42X04: Column &apos;HOST2FABRIC1.PREFIX_ID&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVIN G clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;HOST2FABRIC1.PREFIX_ID&apos; is not a column in the target table.&lt;/p&gt;

&lt;p&gt;I also see this error when running against 10.1.2.  So I&apos;m wondering if this is actually the query you intended to post? Could you double-check and post the exact query that&apos;s causing the failure?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12431089" author="psarkar" created="Mon, 28 Aug 2006 23:36:04 +0100"  >&lt;p&gt;I&apos;m sorry - I screwed up on the db version and query - turns out for the db version, there is an invalid compairson between CHAR and INTEGER, so we are fine.&lt;/p&gt;

&lt;p&gt;However, here&apos;s a query that works in 10.1.2.1 but not in 10.2.1.1&lt;/p&gt;

&lt;p&gt;SELECT DISTINCT &lt;br/&gt;
			     ZONE.ZONE_ID ZONE_ID, &lt;br/&gt;
			     PORT.PORT_ID PORT_ID,&lt;br/&gt;
			 	 ENTITY_TO_PORT.TYPE, &lt;br/&gt;
			 	 ENTITY_TO_PORT.PREFIX_ID, &lt;br/&gt;
			 	 ENTITY_TO_PORT.ENTITY_ID, &lt;br/&gt;
			 	 ENTITY_TO_PORT.DISPLAY_NAME, &lt;br/&gt;
			 	 ENTITY_TO_PORT.PORT_DISPLAY_NAME, &lt;br/&gt;
			 	 PORT2ZONE.MEMBER_NAME,&lt;br/&gt;
			 	 PORT2ZONE.ZONE_MEMBER_ID, &lt;br/&gt;
			     PORT.PORT_NUMBER &lt;br/&gt;
			 FROM  &lt;br/&gt;
			 	 T_RES_ZONE ZONE left outer join T_VIEW_PORT2ZONE PORT2ZONE on  &lt;br/&gt;
			 	 ZONE.ZONE_ID = PORT2ZONE.ZONE_ID left outer join T_RES_PORT PORT on   &lt;br/&gt;
			 	 PORT2ZONE.PORT_ID = PORT.PORT_ID  left outer join T_VIEW_ENTITY_TO_PORT ENTITY_TO_PORT on &lt;br/&gt;
			 	 PORT2ZONE.PORT_ID = ENTITY_TO_PORT.PORT_ID and &lt;br/&gt;
			 	 PORT2ZONE.ZONE_ID = ENTITY_TO_PORT.ZONE_ID,  T_RES_FABRIC FABRIC &lt;br/&gt;
			 WHERE    	 PORT2ZONE.ZONE_ID = ZONE.ZONE_ID and &lt;br/&gt;
			 	 ZONE.FABRIC_WWN = FABRIC.FABRIC_WWN and &lt;br/&gt;
			 	 FABRIC.FABRIC_ID = 1 &lt;/p&gt;

&lt;p&gt;Same db as before.&lt;/p&gt;

&lt;p&gt;In 10.2.1.1 it gives the following error (should this be a new issue?)&lt;/p&gt;


&lt;p&gt;java.sql.SQLException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.prepareStatement(Unknown Source)&lt;br/&gt;
	at org.eclipse.aperi.server.guireq.topology.views.ViewerSanL1.init(ViewerSanL1.java:1828)&lt;br/&gt;
	at org.eclipse.aperi.server.guireq.topology.views.ViewerInit.init(ViewerInit.java:41)&lt;br/&gt;
	at org.eclipse.aperi.server.guireq.topology.views.ViewerInit.main(ViewerInit.java:69)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerExceptionXJ001.U&lt;br/&gt;
	at org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.Statement.readPrepareDescribeOutput(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.prepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.Connection.prepareStatementX(Unknown Source)&lt;br/&gt;
	... 4 more&lt;/p&gt;</comment>
                            <comment id="12431091" author="army" created="Mon, 28 Aug 2006 23:59:02 +0100"  >&lt;p&gt;Does the above query work if you run it against Derby embedded instead of client/server?  If it works in embedded but not with client/server, then I think this should be filed as a separate issue (against client or server; not sure which).  If it fails to execute in embedded mode, too, then please post the stack trace here and we can use that to determine if the failure is related to this issue or if it needs its own Jira.&lt;/p&gt;</comment>
                            <comment id="12431123" author="psarkar" created="Tue, 29 Aug 2006 04:06:24 +0100"  >&lt;p&gt;Our application is too network-server centric to run in embedded mode. I would like to help you in any other way, but retrofitting our application is not feasible at this point.&lt;/p&gt;

&lt;p&gt;On the whole, it looks like a new issue.&lt;/p&gt;</comment>
                            <comment id="12431277" author="army" created="Tue, 29 Aug 2006 16:54:06 +0100"  >&lt;p&gt;&amp;gt; Our application is too network-server centric to run in embedded mode.&lt;/p&gt;

&lt;p&gt;Actually, you wouldn&apos;t need to change your application at all.  You have the database and you have the query.  So if you have a full set of Derby jars (ex. the 10.2 beta jars), you could just put the query into a file and execute it directly using Derby&apos;s &quot;ij&quot; tool.&lt;/p&gt;

&lt;p&gt;Ex. Create a file called &quot;mySQLFile.sql&quot; with contents as follows:&lt;/p&gt;

&lt;p&gt;&amp;lt;begin contents&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; The following URL is for the embedded driver&lt;br/&gt;
connect &apos;jdbc:derby:TPCDB&apos;;&lt;/p&gt;

&lt;p&gt;set schema tpc;&lt;br/&gt;
elapsedtime on;&lt;/p&gt;

&lt;p&gt;prepare qFail as &apos;&lt;/p&gt;

&lt;p&gt;SELECT DISTINCT&lt;/p&gt;

&lt;p&gt;  ZONE.ZONE_ID ZONE_ID,&lt;br/&gt;
  PORT.PORT_ID PORT_ID,&lt;br/&gt;
  ENTITY_TO_PORT.TYPE,&lt;br/&gt;
  ENTITY_TO_PORT.PREFIX_ID,&lt;br/&gt;
  ENTITY_TO_PORT.ENTITY_ID,&lt;br/&gt;
  ENTITY_TO_PORT.DISPLAY_NAME,&lt;br/&gt;
  ENTITY_TO_PORT.PORT_DISPLAY_NAME,&lt;br/&gt;
  PORT2ZONE.MEMBER_NAME,&lt;br/&gt;
  PORT2ZONE.ZONE_MEMBER_ID,&lt;br/&gt;
  PORT.PORT_NUMBER&lt;/p&gt;

&lt;p&gt;FROM&lt;/p&gt;

&lt;p&gt;  T_RES_ZONE ZONE&lt;br/&gt;
  left outer join&lt;br/&gt;
    T_VIEW_PORT2ZONE PORT2ZONE&lt;br/&gt;
  on&lt;br/&gt;
    ZONE.ZONE_ID = PORT2ZONE.ZONE_ID&lt;br/&gt;
  left outer join&lt;br/&gt;
    T_RES_PORT PORT&lt;br/&gt;
  on&lt;br/&gt;
    PORT2ZONE.PORT_ID = PORT.PORT_ID&lt;br/&gt;
  left outer join&lt;br/&gt;
    T_VIEW_ENTITY_TO_PORT ENTITY_TO_PORT&lt;br/&gt;
  on&lt;br/&gt;
    PORT2ZONE.PORT_ID = ENTITY_TO_PORT.PORT_ID and&lt;br/&gt;
    PORT2ZONE.ZONE_ID = ENTITY_TO_PORT.ZONE_ID,&lt;br/&gt;
  T_RES_FABRIC FABRIC&lt;/p&gt;

&lt;p&gt;WHERE&lt;/p&gt;

&lt;p&gt;  PORT2ZONE.ZONE_ID = ZONE.ZONE_ID and&lt;br/&gt;
  ZONE.FABRIC_WWN = FABRIC.FABRIC_WWN and&lt;br/&gt;
  FABRIC.FABRIC_ID = 1&lt;/p&gt;

&lt;p&gt;&apos;;&lt;/p&gt;

&lt;p&gt;execute qFail;&lt;/p&gt;

&lt;p&gt;&amp;lt;end contents&amp;gt;&lt;/p&gt;

&lt;p&gt;Then do:&lt;/p&gt;

&lt;p&gt;&amp;gt; java org.apache.derby.tools.ij&lt;br/&gt;
ij&amp;gt; run &apos;mySQLFile.sql&apos;;&lt;/p&gt;

&lt;p&gt;That should be all you need to do.  But I see you&apos;ve filed a separate issue already, so that&apos;s fine &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Thanks for following through...&lt;/p&gt;</comment>
                            <comment id="12434519" author="army" created="Wed, 13 Sep 2006 20:05:44 +0100"  >&lt;p&gt;The problem described in this Jira issue has been resolved.  The remaining failures reported by Prasenjit are now being tracked as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1777&quot; title=&quot;Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1777&quot;&gt;&lt;del&gt;DERBY-1777&lt;/del&gt;&lt;/a&gt;, so I&apos;m closing this issue.  Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1777&quot; title=&quot;Regression: query works in 10.1.2.1 but fails with NullPointerException in 10.2.1.1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1777&quot;&gt;&lt;del&gt;DERBY-1777&lt;/del&gt;&lt;/a&gt; for more on the NPE.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12338302" name="DERBY-1633_v1.html" size="45984" author="army" created="Mon, 7 Aug 2006 18:48:06 +0100"/>
                            <attachment id="12338717" name="DERBY-1633_v2.html" size="46429" author="army" created="Fri, 11 Aug 2006 19:14:12 +0100"/>
                            <attachment id="12339226" name="DERBY-1633_v3.html" size="68891" author="army" created="Mon, 21 Aug 2006 12:02:36 +0100"/>
                            <attachment id="12339631" name="d1633_10_1_merge.patch" size="193995" author="army" created="Sat, 26 Aug 2006 04:29:01 +0100"/>
                            <attachment id="12338032" name="d1633_repro.sql" size="1056" author="army" created="Thu, 3 Aug 2006 00:34:02 +0100"/>
                            <attachment id="12338303" name="d1633_v1_reviewOnly.patch" size="24999" author="army" created="Mon, 7 Aug 2006 18:48:06 +0100"/>
                            <attachment id="12338716" name="d1633_v2.patch" size="64571" author="army" created="Fri, 11 Aug 2006 19:14:12 +0100"/>
                            <attachment id="12339224" name="d1633_v3_code.patch" size="47473" author="army" created="Mon, 21 Aug 2006 12:02:36 +0100"/>
                            <attachment id="12339225" name="d1633_v3_tests.patch" size="146058" author="army" created="Mon, 21 Aug 2006 12:02:36 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 2 Aug 2006 19:00:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22611</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0uf3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38746</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10050"><![CDATA[Blocker]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>