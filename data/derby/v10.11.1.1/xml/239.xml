<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:19:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-239/DERBY-239.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-239] Need a online backup feature  that does not block update operations   when online backup is in progress.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-239</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently Derby allows users to perfoms  online backups using SYSCS_UTIL.SYSCS_BACKUP_DATABASE() procedure,  but while the backup is in progress, update operations are temporarily blocked, but read operations can still proceed.&lt;/p&gt;

&lt;p&gt;Blocking update operations can be real issue specifically in client server environments, because user requests will be blocked for a long time if a &lt;br/&gt;
backup is in the progress on the server.&lt;/p&gt;</description>
                <environment></environment>
        <key id="32021">DERBY-239</key>
            <summary>Need a online backup feature  that does not block update operations   when online backup is in progress.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tsuresh">Suresh Thalamati</assignee>
                                    <reporter username="tsuresh">Suresh Thalamati</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Apr 2005 03:44:50 +0100</created>
                <updated>Wed, 1 Jul 2009 01:34:42 +0100</updated>
                            <resolved>Wed, 1 Mar 2006 04:54:14 +0000</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>2</watches>
                                                                                                            <comments>
                            <comment id="12316434" author="tsuresh" created="Fri, 22 Jul 2005 10:51:22 +0100"  >&lt;p&gt;I think providing  an online backup mechanism that does not block changes&lt;br/&gt;
to the database when the backup is in progress will be a useful feature to Derby users,&lt;br/&gt;
especially in the client/server environment. This backup mechanism might take more time&lt;br/&gt;
than current online backup because of the synchronization overheads required to  allow changes to&lt;br/&gt;
the database when backup is in progress. At this point I am not sure how much more&lt;br/&gt;
time it will take, but I think it should not be more than 50%, in the worst case scenario. &lt;/p&gt;

&lt;p&gt;Current online backup mechanism (that blocks changes to the database) is&lt;br/&gt;
supported using system procedures(ex:SYSCS_UTIL.SYSCS_BACKUP_DATABASE ). My&lt;br/&gt;
plan is to make the existing backup procedures work work without blocking the&lt;br/&gt;
changes to the database; No new system procedures are required. If community thinks &lt;br/&gt;
both blocking/non-blocking type backups are useful, new procedures can &lt;br/&gt;
be added. &lt;/p&gt;

&lt;p&gt;Currently backup contains mainly data files (seg0/*) and the transaction log&lt;br/&gt;
files(log/*) that are there when the backup started. On restore from the&lt;br/&gt;
backup, transactions are  replayed, similar to crash-recovery to bring the database&lt;br/&gt;
to a consistent state. New online backup also will work same way,  except&lt;br/&gt;
that all the transaction log must be copied to the backup, only after all the data &lt;br/&gt;
files are backed up.&lt;/p&gt;


&lt;p&gt;I think current implementation freezes(no changes to the database) the database &lt;br/&gt;
during backup for following reasons :&lt;br/&gt;
1) Data files will in a stable state; backup will not contain partially updates&lt;br/&gt;
   pages on the disk. &lt;br/&gt;
2) No new data files will be added/deleted on the disk; &lt;br/&gt;
   because create/drop operations are blocked.&lt;br/&gt;
3) No transaction will committed after the backup starts. So all &lt;br/&gt;
   unlogged operations will be rolled back. &lt;/p&gt;

&lt;p&gt;If the database is not frozen above conditions will not be true, that might&lt;br/&gt;
lead to the backups that are in corrupted/inconsistent state. I think, it is&lt;br/&gt;
not necessary to freeze the whole database to make a stable backup copy, by&lt;br/&gt;
blocking operations that modifies the files on-disk for small amounts of time, &lt;br/&gt;
a stable backup can be made. &lt;/p&gt;


&lt;p&gt;Following sections explain some of the issues and possible ways to address them to&lt;br/&gt;
provide a real online backup that does not block changes to the database for the whole&lt;br/&gt;
duration of the backup.   &lt;/p&gt;

&lt;p&gt;1) Corrupt pages in the backup database:&lt;/p&gt;

&lt;p&gt;Backup reads and the  page cache writes can be interleaved if the database is&lt;br/&gt;
not frozen. i.e it is possible to land up with a page in the backup that  has  &lt;br/&gt;
a portion of the page that is more up-to-date than the rest of the page, if the&lt;br/&gt;
page cache writes are not blocked when a page is being read for the backup.&lt;/p&gt;


&lt;p&gt;To avoid backup process reading partial written pages, some kind of&lt;br/&gt;
synchronization mechanism that  does not allow reading a page to write to the&lt;br/&gt;
back backup when the same page is being written to the disk.  This can be&lt;br/&gt;
implemented  by one of the following approaches:&lt;/p&gt;

&lt;p&gt;a) By latching on a page key (container id, page number)  while doing the write &lt;br/&gt;
   of the page from cache to disk  and while reading the page from the&lt;br/&gt;
   disk/cache to write to the backup. This approach has small overhead of&lt;br/&gt;
   acquiring an extra latch during the page cache writes when the backup is in progress. &lt;/p&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;b) read each pages in to the page cache first and then  latch  the&lt;br/&gt;
   page in the cache until a  temporary copy of it is made. This approach&lt;br/&gt;
   does not have extra overhead of extra latches on the page keys during writes , but &lt;br/&gt;
   will pollute the page cache with the pages that are only required by the &lt;br/&gt;
   backup; this  might have  impact on user operations because active user pages may &lt;br/&gt;
   have been replaced by the backup pages in the page cache. &lt;/p&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;c) read pages into buffer pool and latch them while making a copy  similar to&lt;br/&gt;
the above approach,  but some how make sure that user pages are not kicked out &lt;br/&gt;
of the buffer pool.   &lt;/p&gt;



&lt;p&gt;One optimization  that may be made is to copy the file on the disk as it &lt;br/&gt;
is to the backup, but keep track of pages that gets modified when file was &lt;br/&gt;
being copied and rewrite those pages by using one of the above latching&lt;br/&gt;
mechanisms. &lt;/p&gt;



&lt;p&gt;2) Committed Non logged operation:&lt;/p&gt;

&lt;p&gt;  Basic requirement to have consistent database backup is after the checkpoint&lt;br/&gt;
  for the backup all changes to the database will be available in the&lt;br/&gt;
  transaction log.  But Derby provides some non logged operations for&lt;br/&gt;
  performance reasons , for example  CREATE INDEX , IMPORT to a empty table&lt;br/&gt;
  ..etc. &lt;/p&gt;

&lt;p&gt;  This was not a issue in the old backup mechanism because no operations will&lt;br/&gt;
  be committed once the backup starts. So any non logged operations will be rolled &lt;br/&gt;
  back similar to the regular crash recovery. &lt;/p&gt;


&lt;p&gt;  I can think of two ways to address this issue:&lt;/p&gt;

&lt;p&gt;  a) To block non-logged operations when backup is in progress and also make backup&lt;br/&gt;
     wait before copying until the non-logged operation are complete. &lt;/p&gt;

&lt;p&gt;  b) make backup always wait for the non-logged operations to complete and&lt;br/&gt;
     retake the backup of those files that got affected by the non-logged&lt;br/&gt;
     operation, if they were already backed up.  &lt;/p&gt;

&lt;p&gt;  c)  Some how trigger logging for all the operations after the checkpoint for&lt;br/&gt;
      the backup until the backup is  complete. This one is easy to implement &lt;br/&gt;
      for non-logged operation  that are stated after the  backup, but the&lt;br/&gt;
      tricky case is to trigger logging for those non-logging operation that&lt;br/&gt;
      started before the backup but are committed during the backup. &lt;/p&gt;


&lt;p&gt;3) drop of a table when the  file on the disk  is being backed up. drop of &lt;br/&gt;
   a table will result in deletion of the file on the disk, but deletion will get errors&lt;br/&gt;
   if it is opened for backup.  &lt;/p&gt;

&lt;p&gt;   Some form of synchronization required to make sure that users do not see &lt;br/&gt;
   weird errors in this case.  &lt;/p&gt;

&lt;p&gt;4) creating a table/index  after the data files are backed up. Basically &lt;br/&gt;
   recovery  system expects that file on the disk exists before the log records&lt;br/&gt;
   that  refer to it are written to the transaction log. &lt;/p&gt;

&lt;p&gt;   I think roll-forward recovery already handles this case , but should be&lt;br/&gt;
   tested. &lt;/p&gt;

&lt;p&gt;5) data file growth because of inserts when the file(table/index) is being backed up. &lt;/p&gt;

&lt;p&gt;   Recovery system  expects that a page is allocated on the disk &lt;br/&gt;
   before log records are written to the transaction log about a page  to &lt;br/&gt;
   avoid recovery errors because of space issues except incase of roll-forward&lt;br/&gt;
   recovery. &lt;/p&gt;

&lt;p&gt;   I think roll-forward recovery handles this case already; but have to make&lt;br/&gt;
   sure it will  work in this case also. Test cases should be added.&lt;/p&gt;

&lt;p&gt;   Some form of synchronization is required, to make  a stable table snap shot of the&lt;br/&gt;
   file , if the file is growing when the backup is in progress.  &lt;/p&gt;

&lt;p&gt;6) checkpoints when the backup is in progress.&lt;/p&gt;

&lt;p&gt;   I think it not necessary to allow checkpoints when the backup is in&lt;br/&gt;
   progress. But if some one thinks otherwise , following should&lt;br/&gt;
   be addressed: &lt;/p&gt;

&lt;p&gt;   1) make copy of the log control file for the backup before copying any   &lt;br/&gt;
   2) If there are any operations that rely on checkpoint to make the&lt;br/&gt;
   operation consistent should not be allowed because backup might have &lt;br/&gt;
   already copied some files when checkpoint happens.  &lt;/p&gt;


&lt;p&gt;Any comments/suggestions will be appreciated. &lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresh&lt;/p&gt;</comment>
                            <comment id="12331516" author="tsuresh" created="Fri, 7 Oct 2005 03:24:06 +0100"  >&lt;p&gt;functional/design spec based on the input I got  on the derby-dev list. &lt;/p&gt;</comment>
                            <comment id="12331616" author="tsuresh" created="Sat, 8 Oct 2005 04:49:35 +0100"  >
&lt;p&gt;This patch adds some code necessary to support  real-time online backup that&lt;br/&gt;
does not block writes when database backup is in progress. All the current functional tests &lt;br/&gt;
passed with these changes. It would be great if some can review and commit this patch. &lt;/p&gt;

&lt;p&gt;This patch changes the way data segment and log is backed up without blocking&lt;br/&gt;
the writes. &lt;/p&gt;

&lt;p&gt;Data Segment Backup:&lt;/p&gt;

&lt;p&gt;   o  The containers to be backed up are found by scanning the files in seg0.&lt;/p&gt;

&lt;p&gt;   o  Each container is backed up by reading all the pages through the page cache,&lt;br/&gt;
      and then writing to the backup container. Pages are latched while &lt;br/&gt;
      writing into the backup container. &lt;br/&gt;
   o  Not necessary to backup containers in any particular order , All updates&lt;br/&gt;
      that happens after a container is backed will be redone using the&lt;br/&gt;
      transaction log on restore. &lt;/p&gt;

&lt;p&gt;  MT cases:&lt;br/&gt;
   1) Each page is latched when it is written to the backup to prevent partial &lt;br/&gt;
      written pages sneaking into the backup. &lt;br/&gt;
   2) Thread that is backing up the container will stop if another thread&lt;br/&gt;
      requests removal of the container when container is being backed up. &lt;br/&gt;
   3) Truncate of the container blocks if the container is being backed up. &lt;br/&gt;
   4) Partially created containers will not be backed up. Container cache will&lt;br/&gt;
      not return the container items until the creation is complete. &lt;br/&gt;
      (No changes are not for this case , that is how it currently works). &lt;/p&gt;


&lt;p&gt;Transaction Log Backup:&lt;/p&gt;

&lt;p&gt;    Transaction Log file  backup in two phases:&lt;br/&gt;
    1) First Check point info and the the log files are backed up before the&lt;br/&gt;
    data segment.  &lt;br/&gt;
    2) After the data segment is backed up , all the log files &lt;br/&gt;
       that are generated after tha backup started are also copied into the backup. &lt;/p&gt;

&lt;p&gt;  MT cases:&lt;br/&gt;
      1) If there is a checkpoint in progress, backup will wait for the&lt;br/&gt;
       checkpoint to complete before copying checkpoint control information&lt;br/&gt;
       into the backup.&lt;/p&gt;


&lt;p&gt;Testing : All functional tests(derbyall suite)  passed on jdk142/Windows XP. &lt;/p&gt;

&lt;p&gt;svn status:&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\ReadOnly.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\LogToFile.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BasePage.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\InputStreamContainer.jav&lt;br/&gt;
a&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\CachedPage.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\FileContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainerHandle.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\RAFContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\log\LogFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\data\DataFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\ContainerHandle.java&lt;/p&gt;</comment>
                            <comment id="12355620" author="oysteing" created="Mon, 24 Oct 2005 23:47:26 +0100"  >&lt;p&gt;I have looked at the onlinebackup_1.diff patch, and overall the patch&lt;br/&gt;
looks good.  However, I think there is one severe bug in&lt;br/&gt;
RAFContainer.java.  I guess due the cut and paste from writePage(),&lt;br/&gt;
you are seeking in another file than the one you are writing&lt;br/&gt;
to (fileData.seek(), but backupRaf.write()).&lt;/p&gt;

&lt;p&gt;I have a few other comments and questions:&lt;/p&gt;

&lt;p&gt;General:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If I run backup with this patch, it seems like I will run the&lt;br/&gt;
      new code.  Does one not need to change the restore code to be&lt;br/&gt;
      able to restore restore such a backup, or does that the&lt;br/&gt;
      ordinary recovery handle that?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;RawStore.java:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The BACKUP_FILTER now contains so much, that it would be useful&lt;br/&gt;
      to have a comment that says what is really left to copy.&lt;/li&gt;
	&lt;li&gt;Intuitively, it seems wrong to hard-code &quot;seg0&quot;, but I see that&lt;br/&gt;
      this is done all over the code.  Will there always be only one&lt;br/&gt;
      segment?  What is then the purpose of the segment concept?&lt;/li&gt;
	&lt;li&gt;backup(File ...) seems like it would create an endless recursion&lt;br/&gt;
      if called.  Fortunately, it seems like it never will be&lt;br/&gt;
      called. Why do we need the methods with a File parameter instead&lt;br/&gt;
      of a String.  The system procedures uses the String variant.&lt;br/&gt;
      Maybe we could just remove the File variant?&lt;/li&gt;
	&lt;li&gt;I think it would be helpful with a comment that explained why&lt;br/&gt;
      disableLogArchiveMode() was made synchronized.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BaseDataFileFactory.java:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I do think basing which files to back up on the contents of the&lt;br/&gt;
      seg0 directory is very robust.  What if someone by accident has&lt;br/&gt;
      written a file with a name that matches the pattern you are&lt;br/&gt;
      looking for.  Then I would think you may get a very strange&lt;br/&gt;
      error message that may not be easy to resolve.  Could not this&lt;br/&gt;
      be based on some system catalog?  Another scenario is if someone&lt;br/&gt;
      by accident deletes a file for a table that is not accessed very&lt;br/&gt;
      often.  A later backup will then not detect that this file is&lt;br/&gt;
      missing.  Since the backup is believed to be succesful, the&lt;br/&gt;
      latest backup of this file may be deleted.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;FileContainer.java:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I cannot find any backup-specific about getPageForBackup() so I&lt;br/&gt;
      think a more general name would be better (e.g, getLatchedPage).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;RAFContainer.java:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The changes to this file seems not to be quite in line with some&lt;br/&gt;
      of the original design philosophies.  I am not sure that is&lt;br/&gt;
      necessarily bad, but it would be nice to here the arguments for&lt;br/&gt;
      doing it this way.  More specifically:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;While RAFContainer so far has used the&lt;br/&gt;
            StorageRandomAccessFile/StorageFile abstractions, backup&lt;br/&gt;
            use RandomAccessFile/File directly.  Is there a particular&lt;br/&gt;
            reason for that?&lt;/li&gt;
	&lt;li&gt;In order to be able to backup a page, new methods have&lt;br/&gt;
            been added to FileContainer and BasePage/CachedPage, and&lt;br/&gt;
            the RAFContainer is doing latching of pages.  This&lt;br/&gt;
            increases coupling to other modules, have alternative&lt;br/&gt;
            designs been considered?&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;privBackupContainer():&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Setting &apos;done=true&apos; at the start of the method is a bit&lt;br/&gt;
            confusing.  I would think another name for this variable&lt;br/&gt;
            would be better.&lt;/li&gt;
	&lt;li&gt;If an exception is thrown while holding a latch, do one&lt;br/&gt;
            not need to relase the latch?&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;writeToBackup():&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;copies a lot of code from writePage().  One should&lt;br/&gt;
            consider factoring out common code.&lt;/li&gt;
	&lt;li&gt;Due the cut and paste, you are seeking in another file&lt;br/&gt;
            than the one you are writing to. (fileData.seek(), but&lt;br/&gt;
            backupRaf.write())&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;LogToFile.java:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;In getFirstLogNeeded why did you need to change&lt;br/&gt;
      getFirstLogNeeded() to handle a null checkpoint?  Is it in case&lt;br/&gt;
      you do backup before any checkpoint has been performed?&lt;/li&gt;
	&lt;li&gt;The javadoc for startLogBackup() says that &apos;log files are copied&lt;br/&gt;
      after all the data files are backed up, but at the end of the&lt;br/&gt;
      method log files are copied.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ReadOnly.java/InputStreamContainer.java:  &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I do not think javadoc should just be a copy of the&lt;br/&gt;
      interface/superclass, but say something about what is particular&lt;br/&gt;
      to this implementation.  In this case, the Javadoc should say&lt;br/&gt;
      that nothing is done.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;typos:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;several occurences of &apos;backedup&apos;&lt;/li&gt;
	&lt;li&gt;LogToFile.java: &apos;eventhough&apos;&lt;/li&gt;
	&lt;li&gt;RAFContainer.java: &apos;pahe cache&apos;, &apos;conatiner&apos;&lt;/li&gt;
	&lt;li&gt;&apos;Standard Cloudscape error policy&apos;.  Should this be changed to&lt;br/&gt;
      Derby?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Pet peeves:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Should have Javadoc on all methods, parameters and return&lt;br/&gt;
      values.&lt;/li&gt;
	&lt;li&gt;Lines longer than 80 chars.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12356240" author="tsuresh" created="Sat, 29 Oct 2005 08:05:47 +0100"  >&lt;p&gt;What to do if backup is started in a transaction that  already has unlogged operations executed?&lt;/p&gt;

&lt;p&gt;In  previous discussions about online backup, it was concluded that existing &lt;br/&gt;
backup procedures calls will WAIT for the transaction with unlogged &lt;br/&gt;
operations to commit before proceeding with the backup. One issue that was&lt;br/&gt;
missing from the discussion was, what to do if user starts a backup &lt;br/&gt;
in the same transaction that has unlogged operations executed before the backup call. &lt;br/&gt;
WAIT will  not be an acceptable option here, because backup call will wait forever. &lt;/p&gt;

&lt;p&gt;I can think of two ways this issue can be addressed:&lt;/p&gt;

&lt;p&gt;1) Add a restriction that backup procedures can only be called in a brand&lt;br/&gt;
   NEW transaction. And also implicitly commit the backup transaction at the end of the &lt;br/&gt;
   backup. Commit is not required as such to solve this problem, but it would&lt;br/&gt;
   be cleaner because backup itself is not a rollback-able operation. &lt;/p&gt;

&lt;p&gt;2) Make backup procedures fail, if transaction that it is started in &lt;br/&gt;
   contains unlogged operations.&lt;/p&gt;


&lt;p&gt;I am inclined towards implementing the first option. Any comments/suggestion &lt;br/&gt;
will be appreciated. &lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresht&lt;/p&gt;</comment>
                            <comment id="12356428" author="tsuresh" created="Tue, 1 Nov 2005 03:54:27 +0000"  >&lt;p&gt;Fix  to the problem found by &#216;ystein  while reviewing the previous online backup patch(online_backup1.diff).&lt;br/&gt;
Backup of a container code was doing a seek  incorrectly on the file container instead of the backup file. &lt;/p&gt;

&lt;p&gt;Tests: All tests passed on jdk142  Windows XP. &lt;/p&gt;

&lt;p&gt;It would be great if some one can commit this patch. &lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresht&lt;/p&gt;
</comment>
                            <comment id="12357657" author="tsuresh" created="Tue, 15 Nov 2005 11:50:03 +0000"  >&lt;p&gt;This patch adds code to support real-time online backup with unlogged&lt;br/&gt;
operations. A consistent backup can not be made if there are pending&lt;br/&gt;
transactions with unlogged operations or if unlogged operations &lt;br/&gt;
occur when backup is in progress. Because container files can  be copied &lt;br/&gt;
to the backup before the transaction is committed and the data pages are &lt;br/&gt;
flushed as part of the commit. As there is no transaction log for unlogged&lt;br/&gt;
operations, while restoring from the backup database can not be restored to &lt;br/&gt;
a consistent state. To make a consistent online backup in this scenario, this patch:&lt;/p&gt;

&lt;p&gt;1)  blocks  online backup until all the transactions with unlogged operation are&lt;br/&gt;
    committed/aborted. &lt;br/&gt;
2)  implicitly converts all unlogged operations to logged mode for the duration&lt;br/&gt;
    of the online backup, if they are started when backup is in progress. &lt;/p&gt;

&lt;p&gt;This patch also adds a test to test the online backup in parallel with some DML,&lt;br/&gt;
DDL and unlogged operations. &lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\xact\Xact.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\XactFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\iapi\store\raw\xact\RawTransaction.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\xact\TransactionFactory.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\storetests\st_1.sql&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest1_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackup.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest1.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\st_1.out&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\OnlineBackupTest1.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\storemore.runall&lt;/p&gt;</comment>
                            <comment id="12358992" author="tsuresh" created="Thu, 1 Dec 2005 11:24:35 +0000"  >&lt;p&gt;minor updates to  the spec:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Procedure can not  be overloaded with different number of arguments in Derby.  Added the keyword  &quot;ONLINE&quot;  to the new backup procedures to differentiate them from the old procedures.
	&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
		&lt;li&gt;jar file handling.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12359017" author="tsuresh" created="Thu, 1 Dec 2005 17:04:31 +0000"  >&lt;p&gt;This patch makes online backup call to wait/fail when unlogged operations like&lt;br/&gt;
create index are pending. It also fixes derby-523 bug my making the existing&lt;br/&gt;
log archive backup procedure to wait for the unlogged operation to complete. &lt;/p&gt;

&lt;p&gt;&amp;#8211; Two new procedures are added to allow the users to make backup wait/fail&lt;br/&gt;
   when unlogged operations are pending. &lt;br/&gt;
&amp;#8211; prevents users starting backup in an non-idle transactions to avoid backup&lt;br/&gt;
   blocking forever if users starts backup in the same transaction as an&lt;br/&gt;
   unlogged operation. &lt;br/&gt;
&amp;#8211; backup is not really transactional , to avoid any locking issues in the&lt;br/&gt;
   futures; backup procedures ends the transaction by implicitly doing commit&lt;br/&gt;
   when it is successful or rollback on any errors. &lt;/p&gt;

&lt;p&gt;A new backup test is added to store suite to test the above scenarios. &lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch.&lt;/p&gt;

&lt;p&gt;$ svn status&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DataDictionaryImpl.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DD_Version.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\db\BasicDatabase.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\access\RAMAccessManager.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\XactFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\access\AccessFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\RawStoreFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\SQLState.java&lt;br/&gt;
M      java\engine\org\apache\derby\database\Database.java&lt;br/&gt;
M      java\engine\org\apache\derby\catalog\SystemProcedures.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\storetests\st_1.sql&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\onlineBackupTest2_app.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\onlineBackupTest2.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\st_1.out&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\onlineBackupTest2.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\storemore.runall&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\util\FTFileUtil.java&lt;/p&gt;</comment>
                            <comment id="12359450" author="tsuresh" created="Wed, 7 Dec 2005 03:53:12 +0000"  >&lt;p&gt;This pacth  fixes store/onlineBackupTest1.java failure on non-windows envirorment.   Problem  was  unlogged operations thread and insert thread are working on the  same connection. Test was failing becuase  insert thread  was committing the unlogged operation that was suppose to block the backup. &lt;br/&gt;
This pacth modified the test , so that  these threads works on different conenctions, &lt;/p&gt;


&lt;p&gt;Test passed on Windows XP and Linuix. &lt;/p&gt;

&lt;p&gt;It would be great  if some  one can commit this patch. &lt;/p&gt;</comment>
                            <comment id="12360567" author="tsuresh" created="Fri, 16 Dec 2005 19:02:00 +0000"  >&lt;p&gt;This patch adds code to support online backup when  jar operations &lt;br/&gt;
are running parallel to the backup. Jar files are not logged, but the &lt;br/&gt;
system catalogs updates are logged when a jar file is added/replaced. &lt;br/&gt;
If the jar file operations are allowed during the backup, system catalog &lt;br/&gt;
(sys.sysfiles) table in the backup database can have a reference to a jar file &lt;br/&gt;
that does not exist in the backup database. And also backup can contain &lt;br/&gt;
partial written jar files. To make a consistent online backup, this patch:&lt;/p&gt;

&lt;p&gt;1) Makes Backup operation wait/fail for all the jar operations activity in progress to complete.&lt;br/&gt;
2) Blocks jar file operations when a backup is in progress.&lt;/p&gt;

&lt;p&gt;This patch also adds a new test to test the online backup &lt;br/&gt;
with jar operations.&lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\xact\Xact.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\XactFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\RFResource.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\xact\RawTransaction.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\obtest_customer.jar&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest3.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest3_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\OnlineBackupTest3.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\storemore.runall&lt;/p&gt;</comment>
                            <comment id="12360637" author="tsuresh" created="Sat, 17 Dec 2005 08:21:11 +0000"  >&lt;p&gt;test jar file was missing from the earlier  onlinebackup_6.diff   patch.   This jar file should be added to :&lt;br/&gt;
org/apache/derbyTesting/functionTests/tests/store/   directory  along with the onlinebackup_6.diff   patch.&lt;/p&gt;

</comment>
                            <comment id="12361535" author="oysteing" created="Tue, 3 Jan 2006 01:33:21 +0000"  >&lt;p&gt;I have reviewed the latest patches (3 through6).  (A bit late I must admit).  Here are my comments:&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;SYSCS_BACKUP_DATABASE()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;By default this procedure will wait ...&quot;  Is it possible to&lt;br/&gt;
       change this behavior for this particular procedure?  If not,&lt;br/&gt;
       &quot;by default&quot; is a bit misleading&lt;/li&gt;
	&lt;li&gt;&quot;wait for the backup blocking unlogged operations to complete&lt;br/&gt;
      ...&quot; is a bit heavy.  I suggest just &quot;wait for any unlogged&lt;br/&gt;
      operations to complete ...&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SYSCS_ONLINE_BACKUP_DATABASE()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Since both backup procedures are ONLINE, it is a bit misleading&lt;br/&gt;
      to use this word to distinguish between the two backup&lt;br/&gt;
      procedures.  I guess the main reason for choosing a new name is&lt;br/&gt;
      the extra parameter.  In that case, I think it would be better&lt;br/&gt;
      to name the new procedure, SYSCS_BACKUP_DATABASE_NOWAIT and&lt;br/&gt;
      leave out the parameter.&lt;/li&gt;
	&lt;li&gt;The javadoc does not say what will happen if wait is 0.  Will one&lt;br/&gt;
      get an exception if there is unlogged operations?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;backupDatabase()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is this the right layer for checking that the transaction is&lt;br/&gt;
      idle and for doing rollback/commit the transaction?  Since this&lt;br/&gt;
      is a requirement for the logic at lower layers to work&lt;br/&gt;
      correctly, not something that is done because it is the&lt;br/&gt;
      desirable behavior of the system procedure, I feel that this&lt;br/&gt;
      should be done at a lower layer.&lt;/li&gt;
	&lt;li&gt;I know when we discussed this isssue earlier, I agreed that&lt;br/&gt;
      checking that the transaction is idle was a good solution.&lt;br/&gt;
      However, thinking a bit more about this, I think it would be&lt;br/&gt;
      better to fail the transaction when unlogged operations have&lt;br/&gt;
      been performed by the same transaction.  That would limit it to&lt;br/&gt;
      those who actually need to be affected, and it would&lt;br/&gt;
      significantly reduce the probability of someone ever&lt;br/&gt;
      experiencing this problem.&lt;/li&gt;
	&lt;li&gt;I am not very fond of automatic commits like this.  If this is&lt;br/&gt;
      necessary, I think it would be better to require that backup is&lt;br/&gt;
      performed in autocommit mode.  Then the implications would be&lt;br/&gt;
      more evident to the users and not catch someone by surprise.&lt;/li&gt;
	&lt;li&gt;The javadoc for the system procedures that use this function&lt;br/&gt;
      should state the requirement imposed here (idle transaction) and&lt;br/&gt;
      that the transaction will be committed if backup is succesful.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SYSCS_ONLINE_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Same comment on ONLINE as above&lt;/li&gt;
	&lt;li&gt;Could not boolean parameters be used now?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;backupDatabaseAndEnableLogArchiveMode()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Most of the code here is the same as in backupDatabase().&lt;br/&gt;
      (Another argument for pushing this code down to a lower layer.)&lt;br/&gt;
      To avoid code duplication, whether to enable archiving could have&lt;br/&gt;
      been a flag to backupDatabase.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SYSCS_DISABLE_LOG_ARCHIVE_MODE()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is checkBackupTransactionIsIdle() strictly necessary here?  This&lt;br/&gt;
      seems like an operation where failures could be handle at&lt;br/&gt;
      statement level.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/iapi/store/access/AccessFactory.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;backup(String ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;Please see cloudscape on line ...&quot;  Derby?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;backup(File ...)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I will just remind you of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-665&quot; title=&quot;Remove backup(File ...) methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-665&quot;&gt;&lt;del&gt;DERBY-665&lt;/del&gt;&lt;/a&gt;.  I could do that work, but&lt;br/&gt;
      I am not sure it is a good idea for other people change the&lt;br/&gt;
      backup code while you are working on it.  (May create merge&lt;br/&gt;
      conflicts for you.)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/iapi/store/raw/xact/RawTransaction.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;setBackupBlockingState()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I do not like the name for this method.  I suggest calling it&lt;br/&gt;
      blockBackup() or something like that.  At least, the javadoc&lt;br/&gt;
      should explain what is meant by &quot;backup blocking state&quot;.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/iapi/store/raw/xact/TransactionFactory.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;stopBackupBlockingOperations()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Name indicates that backup blocking operations are stopped, but&lt;br/&gt;
      javadoc says that only new ones are blocked.  I think the name&lt;br/&gt;
      is misleading.&lt;/li&gt;
	&lt;li&gt;Javadoc should be revisited for typos.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;backupAndEnableLogArchiveMode()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Non-standard indentation for parameters?&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/impl/store/raw/RawStore.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;backup(String, boolean)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Typo in comment:  &quot;Check if there any backup ...&quot;  Remove &quot;there&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;backupAndEnableLogArchiveMode(String, boolean)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do you need a finally clause?  Would not a catch clause be&lt;br/&gt;
      sufficient?  Then, you could eliminate the local &apos;error&apos;&lt;br/&gt;
      variable.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/impl/store/raw/data/RFResource.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;add()/remove()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Are the casts to RawTransaction safe?  Does this assumption have&lt;br/&gt;
      any impact on the modularity of the code?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;serviceImmediately()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How is this change related to backup?&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/impl/store/raw/xact/Xact.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;setBackupBlockingState()/setUnblockBackupState()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Names should be symmetric.  (e.g., blockBackup/unblockBackup)&lt;/li&gt;
	&lt;li&gt;Why do you have to wait for commit to unblock?  Would it not be&lt;br/&gt;
      sufficient to have completed the unlogged operations before&lt;br/&gt;
      backup is started?&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/impl/store/raw/xact/XactFactory.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;canStartBackupBlockingOperation()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Since this method now may wait for backup to complete, I do not&lt;br/&gt;
      feel canStartBackupBlockingOperation() is a good name.&lt;/li&gt;
	&lt;li&gt;Symmetric naming with backupBlockingOperationFinished() would&lt;br/&gt;
      make it more evident that these two functions should be called&lt;br/&gt;
      in pairs.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/engine/org/apache/derby/loc/messages_en.properties&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;XSRSA.S&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Suggest the following change:&lt;br/&gt;
      &quot;Cannot backup the database when unlogged operations are uncommitted. Please commit the transactions with backup blocking operations or use the backup procedure with option to wait for them to complete.&quot; &lt;/li&gt;
	&lt;li&gt;Generally, I am not very fond of these long error messages.  I&lt;br/&gt;
      think it would be better with just a single sentence, and then&lt;br/&gt;
      the user should be able to look up an explanation in a manual.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;XSRSB.S&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Suggest the following change:&lt;br/&gt;
      &quot;Backup operation can not be performed in an active transaction. Please start a new transaction to execute backup procedures.&quot;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineBackupTest1.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;runTest()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should have more than one unlogged operation in parallel in&lt;br/&gt;
      order to fully test that the counting of unlogged operations&lt;br/&gt;
      work. &lt;/li&gt;
	&lt;li&gt;Suggest to add test that when doing backup in a non-idle&lt;br/&gt;
      transaction, previous work has not been rolled back when backup&lt;br/&gt;
      fails, and that one can continue with more operations within the&lt;br/&gt;
      same transaction.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;runConsistencyChecker()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This does only check consistnecy of internal structures.  Should&lt;br/&gt;
      also check consistency of application data.  Maybe you could&lt;br/&gt;
      execute a select?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;performDmlActions()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I assume the intention here is to do &quot;while (!stopActivity)&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;endUnloggedAction()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What is the role of the insert?  Is is unlogged?  It is not&lt;br/&gt;
      evident from the method name or Javadoc why you are doing&lt;br/&gt;
      inserts here.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;select()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What is the point of doing consistency checks on columns that&lt;br/&gt;
      are not updated?  If id and name does not match, that must be&lt;br/&gt;
      caused by errors in code that is not particular to backup.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/store/OnlineBackupTest3.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;installJarTest()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Typos in comment: &quot;// followng backup call should because jar&lt;br/&gt;
      operation is pending&quot;. Should what?&lt;/li&gt;
	&lt;li&gt;Comment say: &quot;//Now commit the jar operation in connection1 for&lt;br/&gt;
      backup to proceed.&quot; The next statement does an insert.  This is&lt;br/&gt;
      confusing.&lt;/li&gt;
	&lt;li&gt;It would be nice if the test checked that jar operation is still&lt;br/&gt;
      waiting for backup when create index has completed,  but I guess&lt;br/&gt;
      this is a bit difficult to achieve.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;A mix of tab and spaces for indentation.  For new files that&lt;br/&gt;
    should not be necessary!&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;removeJarTest()&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Comment copied from installJarTest?&lt;br/&gt;
      &quot;// wait for customer app jar installation to finish now. &quot;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;java/testing/org/apache/derbyTesting/functionTests/tests/store/onlineBackupTest2.sql&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Do you have idea of how frequently it happens that backup thread&lt;br/&gt;
    has not been blocked yet when backupdir is created?  How long a&lt;br/&gt;
    sleep would you need to be certain?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12361686" author="tsuresh" created="Wed, 4 Jan 2006 08:32:33 +0000"  >&lt;p&gt;inplace-compress with online backup problem:&lt;/p&gt;

&lt;p&gt;I was scanning through the code to find out any issues with online backup and in-place compress and came across the following code that does a checkpoint before truncating the container. &lt;/p&gt;

&lt;p&gt;FileContainer.java:&lt;br/&gt;
protected void compressContainer(&lt;br/&gt;
....&lt;br/&gt;
// make sure we don&apos;t execute redo recovery on any page&lt;br/&gt;
// which is getting truncated.  At this point we have an exclusive&lt;br/&gt;
// table lock on the table, so after checkpoint no page change&lt;br/&gt;
// can happen between checkpoint log record and compress of space.&lt;br/&gt;
dataFactory.getRawStoreFactory().checkpoint();&lt;/p&gt;


&lt;p&gt;Above code assumes that redo will only start after the checkpoint &lt;br/&gt;
done by the compress, that is true in crash-recovery. But  &lt;br/&gt;
restore from backup can start redo from a checkpoint that is taken when backup was started, which can be before the checkpoint done by compress. if compress is run in parallel to the backup, restore from the backup can FAIL because it can not find the pages needed by the redo if a container gets backed up after it is truncate by the compress. &lt;/p&gt;

&lt;p&gt;I could not think of an easy way to avoid the need for the compress to perform checkpoint while truncating a container. &lt;/p&gt;

&lt;p&gt;One way to make good online backup when in-place compress is &lt;br/&gt;
in progress seems to be by enforcing the following restrictions similar to the way unlogged operations are handled:&lt;/p&gt;

&lt;p&gt;1) Block in-place compress operation if backup is in progress and &lt;br/&gt;
2) Make backup operation wait/fail until compress is done. &lt;/p&gt;


&lt;p&gt;I don&apos;t like to add restrictions, but I guess compress is an infrequent operation, so it may be ok. &lt;/p&gt;


&lt;p&gt;Any comments/suggestions ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
-suresht&lt;/p&gt;
</comment>
                            <comment id="12362906" author="tsuresh" created="Tue, 17 Jan 2006 10:51:58 +0000"  >&lt;p&gt;This patch addresses the issues raised by &#216;ystein in his review of previous&lt;br/&gt;
online backup patches 3-6. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;changed the backup procedures names with ONLINE to NOWAIT&lt;/li&gt;
	&lt;li&gt;removed the transaction Idle restriction to run backup procedures.&lt;/li&gt;
	&lt;li&gt;removed implicit commit/rollbacks.&lt;/li&gt;
	&lt;li&gt;Added a new lesser impact restriction, which only disallows backup call only if&lt;br/&gt;
  there are unlogged operations executed in the same transaction before the backup. &lt;/li&gt;
	&lt;li&gt;Removed casting to  RawTransaction.&lt;/li&gt;
	&lt;li&gt;fixed Names and Comments.&lt;/li&gt;
	&lt;li&gt;Enhanced the tests with addional test cases suggested by  &#216;ystein.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;br/&gt;
M      java\engine\org\apache\derby\impl\sql\catalog\DataDictionaryImpl.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\db\BasicDatabase.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\Xact.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\XactFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\RFResource.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\access\AccessFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\xact\RawTransaction.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\xact\TransactionFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\RawStoreFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\SQLState.java&lt;br/&gt;
M      java\engine\org\apache\derby\catalog\SystemProcedures.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest1.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\onlineBackupTest2.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\OnlineBackupTest3.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\OnlineBackupTest1.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\onlineBackupTest2.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\OnlineBackupTest3.out&lt;/p&gt;</comment>
                            <comment id="12363275" author="djd" created="Fri, 20 Jan 2006 02:03:24 +0000"  >&lt;p&gt;Is the functional spec updated to reflect the new names of the procedures?&lt;br/&gt;
I&apos;m actually confused as to why the name now includes NOWAIT, not sure what the NOWAIT is meant to imply to the user of the procedures. To me it might seem that this would imply the procedure returns right away and the backup continues in the background. Hopefully an updated functional spec will make it clear why NOWAIT is part of the name. For Derby to be easy to use the names of the system procedures should clearly indicate what they do.&lt;/p&gt;</comment>
                            <comment id="12364344" author="tsuresh" created="Sun, 29 Jan 2006 08:03:56 +0000"  >&lt;p&gt;This patch addresses the improvements suggested by Oystein in his review of the&lt;br/&gt;
first online backup patch(onlinebackup_1.diff) and also resolved some more&lt;br/&gt;
online backup issues. &lt;/p&gt;

&lt;p&gt;&amp;#8211; fixed comments and moved a duplicate code in write page and the backup of&lt;br/&gt;
   container into a separate method.&lt;/p&gt;

&lt;p&gt;fixes with this patch:&lt;/p&gt;

&lt;p&gt;&amp;#8211; backup of container was using the same encryption buffer as container&lt;br/&gt;
   read/writes, this requires backup of the container and read/writes are&lt;br/&gt;
   synchronized to avoid corrupting the encryption buffer. This patch modified&lt;br/&gt;
   the backup of container code to use it&apos;s own temporary encryption&lt;br/&gt;
   buffer to avoid the buffer corruption. &lt;/p&gt;

&lt;p&gt;&amp;#8211; added code to prevent truncation of log during checkpoint and disabling of&lt;br/&gt;
   log archival does not delete log files that are yet to be copied &lt;br/&gt;
   into the backup, if backup is running in parallel. &lt;/p&gt;

&lt;p&gt;&amp;#8211; In-place compress is blocked during backup and vice-versa, until the&lt;br/&gt;
   compress nested transaction commits. This change is needed because compress &lt;br/&gt;
   does a special checkpoint to avoid redo on the truncated pages. If backup is&lt;br/&gt;
   running in parallel, the checkpoint backup is  based on can be earlier than&lt;br/&gt;
   checkpoint done by the truncate operation. Without the blocking during&lt;br/&gt;
   restore from backup, recovery will fail if it needs redo ant log records on&lt;br/&gt;
   the truncated pages.&lt;/p&gt;


&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\ReadOnly.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\LogToFile.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\InputStreamContainer.jav&lt;br/&gt;
a&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\FileContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainerHandle.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\RAFContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\log\LogFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\shared\org\apache\derby\shared\common\reference\SQLState.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\onlineBackupTest4.sql&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\onlineBackupTest4_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\onlineBackupTest4.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\storemore.runall&lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresh&lt;/p&gt;</comment>
                            <comment id="12364405" author="mikem" created="Mon, 30 Jan 2006 07:54:06 +0000"  >&lt;p&gt;I committed the onlinebackup_8.diff patch to trunk as svn  373380&lt;/p&gt;</comment>
                            <comment id="12364749" author="tsuresh" created="Wed, 1 Feb 2006 08:46:25 +0000"  >&lt;p&gt;minor updated to the spec.  Changed the names of the new procedures to :&lt;br/&gt;
SYSCS_BACKUP_DATABASE_NOWAIT&lt;br/&gt;
SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12313586">DERBY-523</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12321383" name="obtest_customer.jar" size="1971" author="tsuresh" created="Sat, 17 Dec 2005 08:21:11 +0000"/>
                            <attachment id="12314754" name="onlinebackup.html" size="28669" author="tsuresh" created="Fri, 7 Oct 2005 03:24:06 +0100"/>
                            <attachment id="12321063" name="onlinebackup1.html" size="33543" author="tsuresh" created="Thu, 1 Dec 2005 11:24:35 +0000"/>
                            <attachment id="12322522" name="onlinebackup2.html" size="35634" author="tsuresh" created="Wed, 1 Feb 2006 08:46:25 +0000"/>
                            <attachment id="12314772" name="onlinebackup_1.diff" size="42968" author="tsuresh" created="Sat, 8 Oct 2005 04:49:34 +0100"/>
                            <attachment id="12320417" name="onlinebackup_2.diff" size="543" author="tsuresh" created="Tue, 1 Nov 2005 03:54:27 +0000"/>
                            <attachment id="12320690" name="onlinebackup_3.diff" size="36152" author="tsuresh" created="Tue, 15 Nov 2005 11:50:03 +0000"/>
                            <attachment id="12321067" name="onlinebackup_4.diff" size="63917" author="tsuresh" created="Thu, 1 Dec 2005 17:04:30 +0000"/>
                            <attachment id="12321175" name="onlinebackup_5.diff" size="6598" author="tsuresh" created="Wed, 7 Dec 2005 03:53:12 +0000"/>
                            <attachment id="12321364" name="onlinebackup_6.diff" size="34147" author="tsuresh" created="Fri, 16 Dec 2005 19:02:00 +0000"/>
                            <attachment id="12321989" name="onlinebackup_7.diff" size="74546" author="tsuresh" created="Tue, 17 Jan 2006 10:51:58 +0000"/>
                            <attachment id="12322460" name="onlinebackup_8.diff" size="52515" author="tsuresh" created="Sun, 29 Jan 2006 08:03:56 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12328500">DERBY-916</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 24 Oct 2005 22:47:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29450</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sqf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38473</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>