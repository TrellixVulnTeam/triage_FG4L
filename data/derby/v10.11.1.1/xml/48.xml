<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:54:37 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-48/DERBY-48.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-48]  A connection request that has a default schema that is being created by another transaction will fail to connect</title>
                <link>https://issues.apache.org/jira/browse/DERBY-48</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;A connection request that has a default schema that is being&lt;br/&gt;
created by another transaction will block until that transaction&lt;br/&gt;
completes (or time out). Probably in this situation the connection&lt;br/&gt;
request should be succeed as if the schema does not exist.&lt;/p&gt;

&lt;p&gt;This is a problem in particular for a prepared  XA transaction, where even after restarting the system, the user cannot reconnect and recover the transaction.&lt;/p&gt;

&lt;p&gt;Here is the reproduction in ij.&lt;br/&gt;
java -Dij.exceptionTrace=true -Dij.protocol=jdbc:derby: -Dij.user=me -Dij.password=pw org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.0 (C) Copyright IBM Corp. 1997, 2004.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;testdb;create=true&apos;;&lt;br/&gt;
ij&amp;gt; autocommit off;&lt;br/&gt;
ij&amp;gt; create table mytabi(i int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; connect &apos;testdb&apos;;&lt;br/&gt;
ERROR 40XL1: A lock could not be obtained within the time requestedERROR 40XL1: A lock could not be obtained within the time requested&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:295)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.LockSet.lockObject(LockSet.java:408)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.SinglePool.lockAnObject(SinglePool.java:168)&lt;br/&gt;
        at org.apache.derby.impl.services.locks.SinglePool.lockObject(SinglePool.java:220)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(RowLocking3.java:181)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:425)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:543)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:329)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:571)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:115)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:374)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.next(BTreeScan.java:1691)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:7118)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(DataDictionaryImpl.java:1381)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(DataDictionaryImpl.java:1291)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initDefaultSchemaDescriptor(GenericLanguageCon&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initialize(GenericLanguageConnectionContext.ja&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.setupConnection(BasicDatabase.java:267)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.startTransaction(TransactionResourceImpl.java:182)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:237)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection20.&amp;lt;init&amp;gt;(EmbedConnection20.java:49)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:56)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:68)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver169.connect(Driver169.java:172)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:512)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:140)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.dynamicConnection(ij.java:843)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ConnectStatement(ij.java:700)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.ijStatement(ij.java:528)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:283)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:204)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:170)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:50)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:54)&lt;/p&gt;








</description>
                <environment></environment>
        <key id="27923">DERBY-48</key>
            <summary> A connection request that has a default schema that is being created by another transaction will fail to connect</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Oct 2004 22:10:27 +0100</created>
                <updated>Tue, 30 Jun 2009 17:12:57 +0100</updated>
                            <resolved>Mon, 25 Aug 2008 15:07:32 +0100</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.0.2.2</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="66888" author="fuzzylogic" created="Fri, 3 Jun 2005 03:47:16 +0100"  >&lt;p&gt;Moving fix in version to 10.2.0.0.&lt;/p&gt;</comment>
                            <comment id="12419734" author="kmarsden" created="Fri, 7 Jul 2006 23:52:50 +0100"  >&lt;p&gt;Changing Fix Version to Unknown as I do not plan to fix it for 10.2.   The workaround for users who cannot connect to recover a prepared XA transaction because of the lock timeout would be to connect with a different user so that the default schema is not in the middle of being created.&lt;/p&gt;
</comment>
                            <comment id="12599837" author="dagw" created="Mon, 26 May 2008 14:29:44 +0100"  >&lt;p&gt;Uploading a JUnit test repro for this issue, which, when the bug&lt;br/&gt;
is fixed can be added as a new regression test.&lt;/p&gt;</comment>
                            <comment id="12599877" author="dagw" created="Mon, 26 May 2008 18:08:18 +0100"  >&lt;p&gt;Uploading an experimental patch which makes the default schema&lt;br/&gt;
creation happen in a nested subtransaction which commits when done, so&lt;br/&gt;
the lock on SYSSCHEMAS can be released immediately.&lt;/p&gt;

&lt;p&gt;This means that the Derby behaviour would change slightly, in that if the&lt;br/&gt;
user transaction rolls back, the schema creation would stay, whereas presently&lt;br/&gt;
it would be rolled back with the rest of the user transaction.&lt;/p&gt;

&lt;p&gt;It makes the repro test (also part of the patch) pass, but there may&lt;br/&gt;
be other good reasons why this is not a good approach, so the patch is&lt;br/&gt;
for review only at this point.&lt;/p&gt;

&lt;p&gt;Running regressions now.&lt;/p&gt;</comment>
                            <comment id="12599937" author="dagw" created="Tue, 27 May 2008 01:26:30 +0100"  >&lt;p&gt;Only one test broke in the regression run, lang/lockTable.sql.&lt;br/&gt;
This is because this test runs with table level locking, and the first patch&lt;br/&gt;
got a deadlock when the nested transaction for auto-creating a schema &lt;br/&gt;
tried to get a write lock to SYSSCHEMAS presumably because the&lt;br/&gt;
outer transaction already had a table read lock on SYSSCHEMAS from the&lt;br/&gt;
first attempt (which failed) to read the schema descriptor.&lt;/p&gt;

&lt;p&gt;Patch derby-48-2 only tries to perform the schema creation in a subtransaction&lt;br/&gt;
if row level locking is used. Not sure I like checking the property here, but I did not &lt;br/&gt;
find any API for asking the database about locking level.&lt;/p&gt;

&lt;p&gt;lang/lockTable.sq ran OK with the new version of the patch.&lt;/p&gt;</comment>
                            <comment id="12600080" author="knutanders" created="Tue, 27 May 2008 11:53:44 +0100"  >&lt;p&gt;I think it sounds like a good idea to do the implicit schema creation in a subtransaction. A couple of questions, though:&lt;/p&gt;

&lt;p&gt;1. Should we try to handle self-deadlocks someway? I think the lock timeout produced by the ij script below is a self-deadlock:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:db;user=kah&apos;;&lt;br/&gt;
ij&amp;gt; autocommit off;&lt;br/&gt;
ij&amp;gt; set isolation rr;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.sysschemas;&lt;br/&gt;
1          &lt;br/&gt;
-----------&lt;br/&gt;
11         &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; create table t (x int);&lt;br/&gt;
ERROR 40XL1: A lock could not be obtained within the time requested&lt;br/&gt;
ij&amp;gt;&lt;/p&gt;

&lt;p&gt;2. In which situations can startNestedUserTransaction() fail? Would it be better to expose those errors if they happen instead of silently ignoring them as in the code below (from DDLConstantAction.getSchemaDescriptorForCreate()):&lt;/p&gt;

&lt;p&gt;+				try &lt;/p&gt;
{
+					nestedTc = tc.startNestedUserTransaction(false);
+				}
&lt;p&gt; catch (StandardException e) &lt;/p&gt;
{
+				}</comment>
                            <comment id="12600244" author="dagw" created="Tue, 27 May 2008 19:56:40 +0100"  >&lt;p&gt;Thanks for looking at this patch, Knut. I agree it is a good idea to&lt;br/&gt;
fall back on the outer transaction in case of a timeout. This will also&lt;br/&gt;
handle the self-lock case more generally than the testing of page vs&lt;br/&gt;
row level locking in previous version of the patch, although at the expense &lt;br/&gt;
of a wait. But such wait scenarios are much less rare than the&lt;br/&gt;
one the issue addresses, I think.&lt;/p&gt;

&lt;p&gt;I am not sure if there is a normal use case for the failure of&lt;br/&gt;
creation of a nested transaction here, so I added code to throw in&lt;br/&gt;
sane builds for now.&lt;/p&gt;

&lt;p&gt;I also added another test case for the self-lock fallback case.&lt;/p&gt;

&lt;p&gt;Running regressions over again.&lt;/p&gt;</comment>
                            <comment id="12600346" author="dagw" created="Wed, 28 May 2008 03:33:20 +0100"  >&lt;p&gt;Regressions passed.&lt;/p&gt;</comment>
                            <comment id="12600751" author="knutanders" created="Thu, 29 May 2008 13:00:40 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;The approach in the latest patch looks elegant. A couple of small comments and questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The try/catch around executeConstantAction() swallows all non-timeout exceptions. I think we need to move &quot;else throw se&quot; from the inner if to the outer if in the catch block.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the code below is fine, but it would be clearer if the comment also said: &quot;In non-debug builds, we retry in the parent transaction before giving up.&quot;&lt;br/&gt;
+							} catch (StandardException e) 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {+								if (SanityManager.DEBUG) {
+									// Should not happen
+									throw e;
+								}+							}&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Not that it makes any difference in practice, but... When we call commit() and destroy() on the nested transaction in the catch block, wouldn&apos;t it be more natural to call abort()+destroy(), since we don&apos;t want any side effects of the work performed by the nested transaction to be persisted? The javadoc for TransactionController.destroy() says that it will also abort the transaction, so I guess a call to destroy() would suffice.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When we check for SQLState.LOCK_TIMEOUT, should we also check for SQLState.LOCK_TIMEOUT_LOG, which is the message id used when lock tracing is enabled? And should SQLState.DEADLOCK be handled the same way?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12600970" author="dagw" created="Fri, 30 May 2008 00:58:24 +0100"  >&lt;p&gt;Thanks for catching the fall-through case, Knut. The new patch,&lt;br/&gt;
derby-48-4, fixes this plus omits the commit for the failed cases,&lt;br/&gt;
destroy is sufficient I agree. This further simplifies the code, since&lt;br/&gt;
destroy can&apos;t throw. This removed the need for the extra comment, too.&lt;/p&gt;

&lt;p&gt;I considered the cases of LOCK_TIMEOUT_LOG and DEADLOCK: I get the&lt;br/&gt;
former if I enable derby.locks.deadlockTrace=true. I think it may be&lt;br/&gt;
best to show the the self.lock if the user has enabled this property&lt;br/&gt;
so she may take steps to avoid it (it only shows on derby.log if we&lt;br/&gt;
throw it, it seems). I added a testcase,&lt;br/&gt;
testDerby48SelfLockingRecoveryDeadlockDetectionOn to test this.&lt;/p&gt;

&lt;p&gt;As for deadlock, I think this will only happen if another transaction&lt;br/&gt;
is involved, and in that case, trying again in the outer transaction&lt;br/&gt;
would only deadlock again (usually), so my current thinking is that it&lt;br/&gt;
may be best to let that one throw?&lt;/p&gt;

&lt;p&gt;Re-running regressions.&lt;/p&gt;</comment>
                            <comment id="12601032" author="knutanders" created="Fri, 30 May 2008 07:32:46 +0100"  >&lt;p&gt;Thanks Dag. Some more comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I can&apos;t find the test case in the patch. Did you forget svn add?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I agree that we probably shouldn&apos;t check for LOCK_TIMEOUT_LOG and DEADLOCK (Although I&apos;m not sure the statement that retrying in the outer transaction usually causes a new deadlock is correct, since aborting the nested transaction probably would allow the other transactions involved in the deadlock to continue.)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the code below, if we move destroy() out of the try block (which we could and perhaps should?), it becomes obvious that the potentially swallowed exception is an error in commit. This I think would mean that we haven&apos;t actually created the schema, and it feels a bit strange to ignore that exception, even in insane builds. I think it would make sense to revert this back to how it was in patch 1 and 2, where exceptions from nestedTc.commit() were not swallowed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+				try &lt;/p&gt;
{
+					nestedTc.commit();
+					nestedTc.destroy();
+				}
&lt;p&gt; catch (StandardException e) {&lt;br/&gt;
+					if (SanityManager.DEBUG) &lt;/p&gt;
{
+						// Should not happen
+						throw e;
+					}
&lt;p&gt;+				}&lt;/p&gt;</comment>
                            <comment id="12601127" author="dagw" created="Fri, 30 May 2008 14:18:27 +0100"  >&lt;p&gt;Oops. the test was left out of patch #3, reattaching, plus &lt;/p&gt;

&lt;p&gt;a) changed the wording on the rationale for not catching the dead-lock to&lt;br/&gt;
   &quot;it may be better to expose it&quot;&lt;br/&gt;
b) removed the try-catch around the final commit in the nested tr case, you&lt;br/&gt;
  are right.&lt;/p&gt;

&lt;p&gt;The regressions passed, so I&apos;ll commit this version if there are no further comments.&lt;/p&gt;</comment>
                            <comment id="12601153" author="knutanders" created="Fri, 30 May 2008 15:33:49 +0100"  >&lt;p&gt;The last patch looks fine.&lt;/p&gt;

&lt;p&gt;Some small nits in the test, but they shouldn&apos;t stop you from committing.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In a comment near the end of testDerby48testNewSchemaHang: s/shoudl/should&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In testDerby48testNewSchemaHang:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        } catch (SQLException e) {&lt;br/&gt;
+            if (e.getSQLState().equals(LOCK_TIMEOUT)) &lt;/p&gt;
{
+                c1.rollback();
+                c1.close();
+                fail(&quot;DERBY-48 still seen&quot;);
+            }
&lt;p&gt; else &lt;/p&gt;
{
+                throw e;
+            }

&lt;p&gt;Why not just let the SQLException be thrown out of the test method regardless of the SQL state? As it is now, we&apos;ll lose the stack trace if it&apos;s a lock timeout.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The last part of testDerby48testNewSchemaHang tests that the implicitly created schema is still around after a rollback. It&apos;s maybe OK to test it, but it&apos;s not actually testing whether or not Derby does the right thing, it only canonizes the current behaviour. But I guess that&apos;s what many of our tests do anyway...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is it intentional that derby.locks.waitTimeout is set to 1 both in setUp() and in testDerby48SelfLockingRecoveryDeadlockDetectionOn()?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waitTimeout is not reset, as far as I can see. I think it would be better to wrap the test with DatabasePropertyTestSetup.setLockTimeouts() which automatically does the right thing for you. DatabasePropertyTestSetup would probably also be the most appropriate way to set reset the deadlockTrace property.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In tearDown() we have this code:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        try &lt;/p&gt;
{
+            createStatement().executeUpdate(&quot;drop schema newuser restrict&quot;);
+        }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
+        }

&lt;p&gt;Perhaps you could add a comment about why the exception is swallowed. Is it because the schema in some cases does not exist? In that case, perhaps we should have an assertSQLState() to prevent unexpected exceptions from being ignored?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is engine the right package for the test? We are also testing the client, it seems.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12601210" author="dagw" created="Fri, 30 May 2008 19:17:40 +0100"  >&lt;p&gt;Uploading a new version, #6, which:Uploading a new version, #6, which:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixes the typo&lt;/li&gt;
	&lt;li&gt;Kept the explicit fail because I would like to see the JIRA number show&lt;br/&gt;
  if we get a regressions here. I&apos;d like to see a fail which lets us&lt;br/&gt;
  attach an exception.&lt;/li&gt;
	&lt;li&gt;Changed the setup for timeouts to use the decorators you suggested,&lt;br/&gt;
  thanks, nicer.&lt;/li&gt;
	&lt;li&gt;Added an assertSQLState(42Y07) - schema does not exist - for the drop schema case.&lt;/li&gt;
	&lt;li&gt;As far as the package, I was not sure where to put it, but since you&lt;br/&gt;
  asked, moved it to lang; it is perhaps more appropriate.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12601225" author="knutanders" created="Fri, 30 May 2008 20:10:21 +0100"  >&lt;p&gt;Thanks for the new patch, Dag! It looks very good, so please go ahead and commit it.&lt;/p&gt;

&lt;p&gt;&amp;gt; - Kept the explicit fail because I would like to see the JIRA number show&lt;br/&gt;
&amp;gt;   if we get a regressions here. I&apos;d like to see a fail which lets us&lt;br/&gt;
&amp;gt;   attach an exception. &lt;/p&gt;

&lt;p&gt;You could do a throw new Exception(&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-48&quot; title=&quot; A connection request that has a default schema that is being created by another transaction will fail to connect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-48&quot;&gt;&lt;del&gt;DERBY-48&lt;/del&gt;&lt;/a&gt; still seen&quot;, e) which would both print the JIRA number and preserve the original stack trace. By the way, the test name contains both the JIRA number and the word &quot;hang&quot;, so it should be pretty obvious which bug has regressed if that test throws a timeout exception. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12601315" author="dagw" created="Sat, 31 May 2008 01:47:31 +0100"  >&lt;p&gt;Right, but I&apos;d like a JUnit Failure, not an Error.. Oh well.. I think we are OK with this one, either way&lt;br/&gt;
we will know what it is if we see it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your diligent help on this one, Knut!&lt;/p&gt;</comment>
                            <comment id="12601321" author="dagw" created="Sat, 31 May 2008 02:36:53 +0100"  >&lt;p&gt;Ah, this stanza does the trick:&lt;/p&gt;

&lt;p&gt;                AssertionFailedError ae = new AssertionFailedError(&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-48&quot; title=&quot; A connection request that has a default schema that is being created by another transaction will fail to connect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-48&quot;&gt;&lt;del&gt;DERBY-48&lt;/del&gt;&lt;/a&gt; still seen&quot;);&lt;br/&gt;
                ae.initCause(e);&lt;br/&gt;
                throw ae;&lt;/p&gt;</comment>
                            <comment id="12601327" author="dagw" created="Sat, 31 May 2008 03:10:18 +0100"  >&lt;p&gt;This (#7) is the same as #6, except it adds a static method fail(String, Exception) to BaseTestCase and uses that for the case discussed above, plus makes a constant out of 40XL2; all in LazyDefaultSchemaCreationTest.&lt;/p&gt;
</comment>
                            <comment id="12601630" author="dagw" created="Mon, 2 Jun 2008 15:19:56 +0100"  >&lt;p&gt;Committed derby-48-7 as svn 662446. This this patch changes the behavior, I will add&lt;br/&gt;
a release note.&lt;/p&gt;</comment>
                            <comment id="12612467" author="dagw" created="Thu, 10 Jul 2008 13:42:13 +0100"  >&lt;p&gt;Attaching a release note for this issue.&lt;/p&gt;</comment>
                            <comment id="12619545" author="rhillegas" created="Mon, 4 Aug 2008 16:24:47 +0100"  >&lt;p&gt;Should this fix be ported to the 10.4 branch for the upcoming 10.4.2 maintenance release?&lt;/p&gt;</comment>
                            <comment id="12619734" author="dagw" created="Mon, 4 Aug 2008 23:48:09 +0100"  >&lt;p&gt;I was (still am) hesitant to backport it since it does change behavior&lt;br/&gt;
slightly, cf. the release note. If people think it&apos;s ok and important&lt;br/&gt;
enough, I can backport it.&lt;/p&gt;</comment>
                            <comment id="12619742" author="djd" created="Tue, 5 Aug 2008 00:35:58 +0100"  >&lt;p&gt;I can&apos;t tell from the release note exactly what the incompatible change is so  it&apos;s hard to comment on if it should be backported.&lt;/p&gt;

&lt;p&gt;E.g.:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The summary &quot;This is no longer the case&quot;, it doesn&apos;t seem clear what &apos;This&apos; refers to, should it be part of the previous sentence, e.g. &quot;as well, this is ...&quot;?&lt;br/&gt;
     Maybe the summary could be re-written to describe what does happen, rather than focusing on the previous behaviour?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In &quot;Symptoms Seen ...&quot; section it says the schema will be created earlier than it would have before, is this true, from the summary it seems it is created at the same time as previously? I.e. the only change is if the transaction is rolled back, not when the schema is created?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The &quot;Rationale for change&quot; is more describing what is implemented, rather than the justification for changing it. Maybe it could be more along the lines of:&lt;br/&gt;
      &quot;Implicit schema creation is now performed in its own transaction to avoid deadlocks with other connections accessing the same schema&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Is this change in behaviour for all implicit schema creations or just for the default schema, it was hard to tell from the comments in this entry? That might change the release note as well.&lt;/p&gt;
</comment>
                            <comment id="12619835" author="dagw" created="Tue, 5 Aug 2008 11:09:53 +0100"  >&lt;p&gt;Thanks for your comments, Dan. Uploading a new version of the release&lt;br/&gt;
notes which are hopefully clearer.&lt;/p&gt;

&lt;p&gt;To your specific questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The implicit creation happens at the same time as before, the only&lt;br/&gt;
  change is what happens if the user transaction rolls back.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The change is for the default schema only. Apart from the system&lt;br/&gt;
  schemas, I am not aware of other schemas created implicitly.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12619848" author="dagw" created="Tue, 5 Aug 2008 12:20:08 +0100"  >&lt;p&gt;I see Derby implicitly creates schemas in cases I did not realize,&lt;br/&gt;
e.g. CREATE TABLE S.T(..) will create S implicitly if it does not&lt;br/&gt;
exist. I see from the code that the patch change applies for such cases as&lt;br/&gt;
well, so the release note would need to reflect that as well as the&lt;br/&gt;
change stands.&lt;/p&gt;

&lt;p&gt;But is it acceptable to let such implicitly created schemas not be&lt;br/&gt;
rolled back? I will have a look at see what SQL says about this, if&lt;br/&gt;
anything. If it is not acceptable, I will reopen this issue and see if&lt;br/&gt;
I can limit the change to just the default schema. If it is acceptable&lt;br/&gt;
to let this change impact all implicit schema creation, I will update&lt;br/&gt;
the release notes.&lt;/p&gt;
</comment>
                            <comment id="12619856" author="dagw" created="Tue, 5 Aug 2008 12:52:13 +0100"  >&lt;p&gt;It seems the SQL standard does not allow implicit&lt;br/&gt;
schema creation as in CREATE TABLE S.T(...), but Derby does.&lt;/p&gt;

&lt;p&gt;I am starting to doubt whether the solution chosen in this patch is&lt;br/&gt;
good. If we want our DDL to be transactional, always creating implicit&lt;br/&gt;
schemas in separate transactions seems to defeat the&lt;br/&gt;
transactionality..&lt;/p&gt;

&lt;p&gt;I can see four possibilities:&lt;br/&gt;
1) let the old behavior remain (essentially: &quot;this is not a bug&quot;)&lt;br/&gt;
  and roll back this patch&lt;br/&gt;
2) rework the patch to apply only for the initial default schema&lt;br/&gt;
   Other implicit schema creations will happen in the user transaction as before.&lt;br/&gt;
3) drop the lazy schema creation, i.e. always create a user schema&lt;br/&gt;
    as soon as a user (which has write access) connects&lt;br/&gt;
4) let the patch remain as is, impacting all implicit schema creation&lt;br/&gt;
    and rewrite the release notes.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</comment>
                            <comment id="12619859" author="dagw" created="Tue, 5 Aug 2008 12:53:19 +0100"  >&lt;p&gt;Reopening until we resolve my concerns.&lt;/p&gt;</comment>
                            <comment id="12619980" author="djd" created="Tue, 5 Aug 2008 19:14:26 +0100"  >&lt;p&gt;There&apos;s one more option as described in the original description which would fix the bug and not change behaviour.&lt;/p&gt;

&lt;p&gt;5) Allow the connection request to succeed as though the schema does not exist. I.e. the connection succeeds and is in the default schema but does not wait for the real schema creation by the other thread. &lt;/p&gt;</comment>
                            <comment id="12620073" author="dagw" created="Tue, 5 Aug 2008 23:36:14 +0100"  >&lt;p&gt;Thanks, Dan. I had more or less discounted that solution; I think&lt;br/&gt;
because I didn&apos;t see a way of getting the schema descriptor without&lt;br/&gt;
risking waiting for a lock (would need something similar to&lt;br/&gt;
C_LockFactory.NO_WAIT?), but I am sure we could go that route too. I&lt;br/&gt;
will have a look.&lt;/p&gt;

&lt;p&gt;Meanwhile, I enclose derby-48b-1 which implements solution 2) and adds&lt;br/&gt;
an extra test case to verify that other implicit schema creations&lt;br/&gt;
(besides the initial default schema) are still transactional.&lt;br/&gt;
Regression tests passed.&lt;/p&gt;</comment>
                            <comment id="12620082" author="dagw" created="Wed, 6 Aug 2008 00:03:45 +0100"  >&lt;p&gt;Attaching a new rev of the release notes, using the&lt;br/&gt;
term &lt;b&gt;initial default schema&lt;/b&gt; to avoid ambiguity.&lt;/p&gt;</comment>
                            <comment id="12621536" author="rhillegas" created="Mon, 11 Aug 2008 19:27:10 +0100"  >&lt;p&gt;Scrubbed the release note. The angle brackets around &amp;lt;default schema name&amp;gt; were choking the ReleaseNoteReader.&lt;/p&gt;</comment>
                            <comment id="12621573" author="rhillegas" created="Mon, 11 Aug 2008 20:58:45 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;The derby-48b-1 patch looks like it is doing the right thing and I have hand-verified that the transactional behavior is as you describe. The release note looks good now.&lt;/p&gt;

&lt;p&gt;It&apos;s hard not to regret the old decision to violate the ANSI rules and create schemas implicitly on the fly. I wonder whether we are just exchanging one edge case for another. With this patch, there is now a path by which transactional work can be committed on behalf of your connection even though you explicitly rollback your transaction. I&apos;m afraid I&apos;m not smart enough to know whether this edge case is already violating some assumptions made elsewhere in the code. At the very least, it will require us to put another post-it on our brains next to the note about implicit schema creation.&lt;/p&gt;</comment>
                            <comment id="12621784" author="dagw" created="Tue, 12 Aug 2008 13:01:31 +0100"  >&lt;p&gt;Thanks for looking at this Rick! I agree, I don&apos;t quite like this solution either. &lt;br/&gt;
It improves on the previous patch, so I will commit it, but leave the issue open&lt;br/&gt;
and see if I can make solution 5) work, cf Dan&apos;s comment.&lt;/p&gt;</comment>
                            <comment id="12621889" author="dagw" created="Tue, 12 Aug 2008 18:23:07 +0100"  >&lt;p&gt;Committed derby-48b-1 as svn 685141 + svn 685232 (two steps because 685141 wasn&apos;t quite the right version).&lt;/p&gt;</comment>
                            <comment id="12623381" author="dagw" created="Mon, 18 Aug 2008 16:35:58 +0100"  >&lt;p&gt;Uploading derby-48-10_4-1, which I propose to commit to the 10.4 branch.&lt;br/&gt;
It is the sum of the two trunk patches, but I had to tailor them a bit, hence this&lt;br/&gt;
separate patch. Running regressions now.&lt;/p&gt;</comment>
                            <comment id="12623808" author="dagw" created="Tue, 19 Aug 2008 22:07:35 +0100"  >&lt;p&gt;Committed derby-48-10_4-1 on 10.4 branch as svn 687155.&lt;/p&gt;</comment>
                            <comment id="12625364" author="rhillegas" created="Mon, 25 Aug 2008 15:07:32 +0100"  >&lt;p&gt;Marking this issue as Resolved so that it will appear in the filters used to generate the 10.4.2 release notes.&lt;/p&gt;</comment>
                            <comment id="12625366" author="rhillegas" created="Mon, 25 Aug 2008 15:09:37 +0100"  >&lt;p&gt;Changing the fix version from 10.4.1.4 to 10.4.2.0 so that this issue will appear in the filters used by the 10.4.2 release notes.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12396285">DERBY-3678</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12382775" name="LazyDefaultSchemaCreationTest.java" size="3022" author="dagw" created="Mon, 26 May 2008 14:33:36 +0100"/>
                            <attachment id="12382787" name="derby-48-1.diff" size="14908" author="dagw" created="Mon, 26 May 2008 18:08:18 +0100"/>
                            <attachment id="12382788" name="derby-48-1.stat" size="681" author="dagw" created="Mon, 26 May 2008 18:08:18 +0100"/>
                            <attachment id="12388452" name="derby-48-10_4-1.diff" size="23753" author="dagw" created="Mon, 18 Aug 2008 16:35:58 +0100"/>
                            <attachment id="12388453" name="derby-48-10_4-1.stat" size="660" author="dagw" created="Mon, 18 Aug 2008 16:35:58 +0100"/>
                            <attachment id="12382813" name="derby-48-2.diff" size="13017" author="dagw" created="Tue, 27 May 2008 01:52:38 +0100"/>
                            <attachment id="12382814" name="derby-48-2.stat" size="427" author="dagw" created="Tue, 27 May 2008 01:52:38 +0100"/>
                            <attachment id="12382866" name="derby-48-3.diff" size="15777" author="dagw" created="Tue, 27 May 2008 19:56:40 +0100"/>
                            <attachment id="12382867" name="derby-48-3.stat" size="427" author="dagw" created="Tue, 27 May 2008 19:56:40 +0100"/>
                            <attachment id="12383066" name="derby-48-4.diff" size="10847" author="dagw" created="Fri, 30 May 2008 01:45:18 +0100"/>
                            <attachment id="12383061" name="derby-48-4.stat" size="321" author="dagw" created="Fri, 30 May 2008 00:58:24 +0100"/>
                            <attachment id="12383107" name="derby-48-5.diff" size="18395" author="dagw" created="Fri, 30 May 2008 14:18:27 +0100"/>
                            <attachment id="12383108" name="derby-48-5.stat" size="427" author="dagw" created="Fri, 30 May 2008 14:18:27 +0100"/>
                            <attachment id="12383127" name="derby-48-6.diff" size="19977" author="dagw" created="Fri, 30 May 2008 19:18:35 +0100"/>
                            <attachment id="12383128" name="derby-48-6.stat" size="423" author="dagw" created="Fri, 30 May 2008 19:18:35 +0100"/>
                            <attachment id="12383163" name="derby-48-7.diff" size="21167" author="dagw" created="Sat, 31 May 2008 03:10:18 +0100"/>
                            <attachment id="12383164" name="derby-48-7.stat" size="491" author="dagw" created="Sat, 31 May 2008 03:10:18 +0100"/>
                            <attachment id="12387598" name="derby-48b-1.diff" size="9889" author="dagw" created="Tue, 5 Aug 2008 23:36:14 +0100"/>
                            <attachment id="12387599" name="derby-48b-1.stat" size="349" author="dagw" created="Tue, 5 Aug 2008 23:36:14 +0100"/>
                            <attachment id="12387974" name="releaseNote.html" size="5477" author="rhillegas" created="Mon, 11 Aug 2008 19:27:10 +0100"/>
                            <attachment id="12387601" name="releaseNote.html" size="5472" author="dagw" created="Wed, 6 Aug 2008 00:03:44 +0100"/>
                            <attachment id="12387554" name="releaseNote.html" size="5168" author="dagw" created="Tue, 5 Aug 2008 11:10:29 +0100"/>
                            <attachment id="12385747" name="releaseNote.html" size="4672" author="dagw" created="Thu, 10 Jul 2008 13:42:13 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Jun 2005 02:47:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21741</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ubj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38730</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>