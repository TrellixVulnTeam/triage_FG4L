<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1067/DERBY-1067.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1067] support holdable Scrollable Updatable Resultsets</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1067</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description></description>
                <environment></environment>
        <key id="12329546">DERBY-1067</key>
            <summary>support holdable Scrollable Updatable Resultsets</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12325456">DERBY-690</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andreask">Andreas Korneliussen</assignee>
                                    <reporter username="andreask">Andreas Korneliussen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Feb 2006 23:29:53 +0000</created>
                <updated>Sat, 1 Jul 2006 09:11:27 +0100</updated>
                            <resolved>Tue, 11 Apr 2006 17:42:38 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12368256" author="andreask" created="Wed, 1 Mar 2006 19:46:30 +0000"  >&lt;p&gt;To support holdable SUR, we will invalidate the ResultSet from doing any updates in case of a online compress.&lt;br/&gt;
This can be done by:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A sequence number is associated with each Container&lt;/li&gt;
	&lt;li&gt;The sequence number is updated when doing truncate&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A holdable cursor will need to reopen the controller after a commit, since the controllers get closed at the end of the transaction (in closeForEndTransaction(..)).&lt;/p&gt;

&lt;p&gt;When reopening a controller, one may check that the sequence number has not been changed since it was initially opened. If it has changed, one can conclude that there has been a online compress, and updates cannot be safely executed, and we may reject the reopen.&lt;/p&gt;

&lt;p&gt;Any attempt to do update on a non-reopened controller, will fail, and a warning given (cursor operation conflict).&lt;/p&gt;

&lt;p&gt;This solution does not have the downside of requiring any changes to the page layout, or RowLocation. It also does not have a cost per row. The downside, is that a online compress will invalidate the cursor from doing any update, even for rows which are unaffected of the truncate. &lt;br/&gt;
-&lt;/p&gt;

&lt;p&gt;To prevent the solution from having any side-effects on other holdable cursors, we should not generally fail to reopen() a cursor if online compress has run, we should only set a flag in the GenericScanController class.&lt;/p&gt;

&lt;p&gt;When the GenericScanController class (or one of its subclasses) calls OpenConglom.reopen(), it can read the timestamp from the container, and based on its own scan_state, and previous timestamp read, it can set a flag (oldRowLocationsInvalid).&lt;/p&gt;

&lt;p&gt;The SUR uses a method currently called positionAtRowLocation(..) which it uses to renavigate the controller. This method could check the oldRowLocationsInvalid flag and return false if the old row locations have become invalidated.&lt;/p&gt;

&lt;p&gt;So, the setting of the flag, could happen for all holdable cursors, however the call to positionAtRowLocation(..), which is only used by SUR and requires the RowLocation parameter to be a valid row location, is the only call which need to check on that flag, and have logic to fail the operation.&lt;/p&gt;

&lt;p&gt;If the positionAtRowLocation(..) call fails, the CurrentOfResultSet&apos;s will get a null reference to the RowLocation it is going to update.  This will cause a positioned update / delete / updateRow() / deleteRow() to fail, and give a warning (Cursor operation conflict) &lt;/p&gt;</comment>
                            <comment id="12368270" author="andreask" created="Wed, 1 Mar 2006 20:54:34 +0000"  >&lt;p&gt;To support holdability for SUR, it must also be correctly supported by SR.&lt;/p&gt;</comment>
                            <comment id="12368736" author="andreask" created="Sat, 4 Mar 2006 01:30:46 +0000"  >&lt;p&gt;Attached is a diff (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1067&quot; title=&quot;support holdable Scrollable Updatable Resultsets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1067&quot;&gt;&lt;del&gt;DERBY-1067&lt;/del&gt;&lt;/a&gt;.diff) which implements the necessary logic in store. This diff is independent from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
The GenericScanController get a flag, rowLocationInvalidated, and a timestamp. The timestamp is initialized when the controller is closed as part of a commit, and later compared when the controller is reopened in the new transaction. The flag is set on reopen.&lt;br/&gt;
I am now in the process of running derbyall with this patch. &lt;/p&gt;</comment>
                            <comment id="12368781" author="mikem" created="Sat, 4 Mar 2006 04:37:12 +0000"  >&lt;p&gt;I am reviewing this patch. (mike matrigali) &lt;br/&gt;
2 major concerns with this patch: &lt;br/&gt;
1) The timestamp is implemented in runtime, but not persistent. The container &lt;br/&gt;
   can be thrown away as soon as someone is not referencing it, which I believe &lt;br/&gt;
   can happen in the holdable cursor case. If you want to implement the &lt;br/&gt;
   timestamp then I think you have to add to the container header &lt;br/&gt;
   (see FileContainer line 278 for container header description), and &lt;br/&gt;
   follow code that updates estimated row count for how it is updated and &lt;br/&gt;
   read. Note that doing this is an UPGRADE issue, and you should think &lt;br/&gt;
   about soft vs. hard upgrade for this feature. &lt;/p&gt;

&lt;p&gt;   For more comments about upgrade I need to know your plan. On soft upgrade &lt;br/&gt;
   will timestamp be bumped or not. I would prefer that it not be changed. &lt;br/&gt;
   The current assumption for &quot;unused&quot; fields in store is that they are &lt;br/&gt;
   guaranteed with a specific value (usually 0) before an upgrade. So &lt;br/&gt;
   on hard upgrade we know the starting value. Also if you change it in &lt;br/&gt;
   soft upgrade then you have to make sure that all previous of 10.1 don&apos;t &lt;br/&gt;
   have a problem with that field not being 0 - sometimes there are assertions &lt;br/&gt;
   about the field being 0, don&apos;t know for sure in this particular case. &lt;/p&gt;

&lt;p&gt;2) I would have expected tests specific to this change associated with the &lt;br/&gt;
   patch. &lt;/p&gt;

&lt;p&gt;   some testing areas of concern: &lt;br/&gt;
   o soft upgrade, make sure 10.1 works correctly on a 10.2 soft upgrade run. &lt;br/&gt;
   o what happens on timestamp overflow? &lt;/p&gt;


&lt;p&gt;minor comments: &lt;/p&gt;

&lt;p&gt;general comments: &lt;br/&gt;
I would have rather seen the timestamp tied to the reusable rowlocation &lt;br/&gt;
concept rather than tied to compress. While true the only thing in the &lt;br/&gt;
current code that breaks this is compress, so this may just be my itch. &lt;/p&gt;

&lt;p&gt;should timestamp be more &quot;time&quot; related. A single db may reuse a containerid, &lt;br/&gt;
but only after a shutdown/reboot cycle. A time based timestamp would mean &lt;br/&gt;
the new container timestamp would be different from the old one. Probably &lt;br/&gt;
does not matter for held cursors, but what makes sense for the generic new &lt;br/&gt;
timestamp feature? &lt;/p&gt;

&lt;p&gt;questions: &lt;br/&gt;
why do you get the timestamp for the open cursor at close rather than open? &lt;/p&gt;


&lt;p&gt;style comments: &lt;br/&gt;
don&apos;t want to start coding style arg here, and admit not all store code is &lt;br/&gt;
perfect. Most the access code is consistent though, and uses the brace on &lt;br/&gt;
separate line standard. &lt;/p&gt;

&lt;p&gt;GenericScanController.java, reOpenAfterEndTransaction() - coding style does &lt;br/&gt;
     not match surrounding code (ie. brackets on same lines and if condition &lt;br/&gt;
     on same line). &lt;br/&gt;
GenericScanController.java, closeForEndTransaction() - coding style does &lt;br/&gt;
     not match code in same routine. I think minimum style in same routine  &lt;/p&gt;
</comment>
                            <comment id="12369115" author="tsuresh" created="Tue, 7 Mar 2006 08:47:14 +0000"  >&lt;p&gt;This patch seems to do something special for in-place compress  making a&lt;br/&gt;
row location invalid, how is in-place compress invalidating a row location &lt;br/&gt;
diffent from say :&lt;/p&gt;

&lt;p&gt;1) a drop table &lt;br/&gt;
2) compress(SYSCS_COMPRESS_TABLE), that copies rows to a new container. &lt;/p&gt;


&lt;p&gt;minor comments:&lt;br/&gt;
compressTimestamp is confusing, at least to me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I thought you are actually &lt;br/&gt;
putting some real time stamp. May be it should be changed to somethig &lt;br/&gt;
like &quot;compress version&quot; .&lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresh&lt;/p&gt;</comment>
                            <comment id="12369194" author="andreask" created="Tue, 7 Mar 2006 17:59:23 +0000"  >&lt;p&gt;&amp;gt; Suresh Thalamati commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1067&quot; title=&quot;support holdable Scrollable Updatable Resultsets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1067&quot;&gt;&lt;del&gt;DERBY-1067&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; -----------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; This patch seems to do something special for in-place compress  making a&lt;br/&gt;
&amp;gt; row location invalid, how is in-place compress invalidating a row location &lt;br/&gt;
&amp;gt; diffent from say :&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 1) a drop table &lt;br/&gt;
&amp;gt; 2) compress(SYSCS_COMPRESS_TABLE), that copies rows to a new container. &lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;This is different because we are not trying to guarantee that a RowLocation is valid from any container, only from the container it is being used from.&lt;br/&gt;
If a container is dropped, a cursor which has an open scan against it should fail. &lt;br/&gt;
For holdable cursors, this should fail when trying to reopen the dropped container after a commit. I think this logic already is in place in Derby.&lt;/p&gt;</comment>
                            <comment id="12369228" author="andreask" created="Tue, 7 Mar 2006 21:41:30 +0000"  >&lt;p&gt;I have been thinking about the testing of this feature. I have already submitted a set of tests in HoldabilityTest.junit, which tests this feature as soon as SUR (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt;) gets reviewed and committed. The test is a pure jdbc test.&lt;/p&gt;

&lt;p&gt;However, maybe it would be cleaner if the related store code from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; gets moved into this issue ? Then I could write pure store unit tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; extends the ScanController with a method called positionAtRowLocation(..).  It is in this method one would need to check the rowLocationsInvalidated flag.  A store unit test could i.e do the following:&lt;/p&gt;

&lt;p&gt;1. Open a scan&lt;br/&gt;
2. scan forward, and remeber some RowLocations&lt;br/&gt;
3. reposition the scan using positionAtRowLocation(..).&lt;/p&gt;

&lt;p&gt;The holdability case would be:&lt;br/&gt;
1. Open a scan&lt;br/&gt;
2. scan forward, and remeber some RowLocations&lt;br/&gt;
3. Commit the transaction&lt;br/&gt;
4. Run compress on the container&lt;br/&gt;
5. assert that positionAtRowLocation(..) returns false &lt;/p&gt;

&lt;p&gt;This would also make the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; patch even cleaner.&lt;/p&gt;</comment>
                            <comment id="12369242" author="dagw" created="Tue, 7 Mar 2006 23:07:30 +0000"  >&lt;p&gt;I think this seems like a good way to go! By separating out the store&lt;br/&gt;
work in this way, the reviewers for SUR (690) would get an easier job&lt;br/&gt;
as well. Better with more, smaller patches! So I say, go ahead!&lt;/p&gt;</comment>
                            <comment id="12369889" author="andreask" created="Sat, 11 Mar 2006 01:11:18 +0000"  >&lt;p&gt;Attached is an updated patch. This patch includes changes from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; to do &lt;br/&gt;
positioning at row location.  &lt;/p&gt;

&lt;p&gt;The sequence number has been associated with reusable record id, and is now called &quot;reusableRecordIdSequenceNumber&quot;&lt;br/&gt;
instead of &quot;compressTimeStamp&quot;.&lt;/p&gt;

&lt;p&gt;The sequence number is incremented from BaseContainer.compressContainer(..).  I noticed that a purge operation&lt;br/&gt;
may cause pages with no records to be deallocated, so I have considered also incrementing the number when&lt;br/&gt;
removing pages. However, some testing indicated to me that when a page is reused after being deallocated by a&lt;br/&gt;
purge, the recordId is not reused within the page. It seems only truncate will cause the recordId to be reused.&lt;br/&gt;
(truncate uses BaseContainer.compressContainer(..)).&lt;/p&gt;

&lt;p&gt;Another change is that when incrementing the reusable record id sequenence number, the isDirty flag may also be set, to &lt;br/&gt;
ensure the container header gets written do disk.&lt;/p&gt;

&lt;p&gt;Testing: &lt;/p&gt;

&lt;p&gt;T_AcessFactory has been extended with a test which checks that a compress&lt;br/&gt;
will update the sequence number, so that the positionAtRowLocation(..) returns false.&lt;/p&gt;

&lt;p&gt;The phaseTester has been extended to test that the version sequence number does not &lt;br/&gt;
harm a 10.1 Database.&lt;/p&gt;

&lt;p&gt;I have currently only run these tests with this patch. &lt;br/&gt;
I will start derbyall now, and also test this patch along with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1058&quot; title=&quot;derby fails supporting holdable scrollable resultset: ERROR XSCB8: The btree conglomerate 1,141,037,436,752 is closed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1058&quot;&gt;&lt;del&gt;DERBY-1058&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12370150" author="andreask" created="Mon, 13 Mar 2006 18:58:03 +0000"  >&lt;p&gt;Attaching report from derbyall.&lt;/p&gt;

&lt;p&gt;One test fails due to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-734&quot; title=&quot;lang/closed.java fails in 50% of runs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-734&quot;&gt;&lt;del&gt;DERBY-734&lt;/del&gt;&lt;/a&gt;. Reran the test two times, and it succeeded one of the times.&lt;br/&gt;
The other test seems to fail from a clean sandbox as well, and I have previously analyzed it to be some policy problem when starting the network server.&lt;/p&gt;</comment>
                            <comment id="12370334" author="andreask" created="Tue, 14 Mar 2006 19:23:21 +0000"  >&lt;p&gt;I have run this patch along with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1058&quot; title=&quot;derby fails supporting holdable scrollable resultset: ERROR XSCB8: The btree conglomerate 1,141,037,436,752 is closed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1058&quot;&gt;&lt;del&gt;DERBY-1058&lt;/del&gt;&lt;/a&gt;.  With those patches, I have successfully run:&lt;br/&gt;
jdbcapi/HoldabilityTest.junit&lt;br/&gt;
jdbcapi/ConcurrencyTest.junit&lt;br/&gt;
jdbcapi/SURTest.junit&lt;br/&gt;
jdbcapi/SURTQueryMixTest.junit&lt;br/&gt;
storeunit (suite)&lt;/p&gt;</comment>
                            <comment id="12370335" author="andreask" created="Tue, 14 Mar 2006 19:26:10 +0000"  >&lt;p&gt;Note: I had to do some changes to the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-690&quot; title=&quot;Add scrollable, updatable, insensitive result sets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-690&quot;&gt;&lt;del&gt;DERBY-690&lt;/del&gt;&lt;/a&gt;v2 patch, since some of its code was moved into this patch. &lt;/p&gt;</comment>
                            <comment id="12370368" author="oysteing" created="Wed, 15 Mar 2006 00:50:01 +0000"  >&lt;p&gt;Patch looks good, but I have a few questions/comments:&lt;/p&gt;

&lt;p&gt;1. Is the idea that as long as you go forward and do not reposition,&lt;br/&gt;
   one should be allowed to proceed after a compress?  I ask because I&lt;br/&gt;
   have not quite understood why invalid row locations only seem to&lt;br/&gt;
   have effect on positionOnRowLocation() and not next().&lt;/p&gt;

&lt;p&gt;2. It seems to me that positionOnRowLocation() can return false in two&lt;br/&gt;
   cases: &lt;br/&gt;
      1) The row location is no longer valid&lt;br/&gt;
      2) The record at this location has been deleted&lt;br/&gt;
   Does not a caller need to distinguish between these two cases?&lt;/p&gt;

&lt;p&gt;3. I suggest to use something even more generic than&lt;br/&gt;
   reusableRecordIdSequenceNumber.  How about recordIdVersion or&lt;br/&gt;
   something like that?  I agree that what we worry about here is&lt;br/&gt;
   reuse of record ids, but I think this mechanism could be used for&lt;br/&gt;
   other purposes too.&lt;/p&gt;

&lt;p&gt;4. reopenAfterEndTransaction has a comment that says &quot;Only reopen&lt;br/&gt;
   holdable conglomerates&quot;.  I guess it is not the conglomerate that&lt;br/&gt;
   is holdable, but the way it was opened.&lt;/p&gt;

&lt;p&gt;5. The following is not an objection to this patch, but the existing&lt;br/&gt;
   code: HeapCompressScan.fetchRowsForCompress() has copied a lot of&lt;br/&gt;
   code from GenericScanController.fetchRows().  This requires this&lt;br/&gt;
   patch to update both methods.  Is it not possible to organize this&lt;br/&gt;
   in a way that avoids this code duplication?  Mike, can comment on&lt;br/&gt;
   this?&lt;/p&gt;

&lt;p&gt;6. FileContainer header:  &lt;br/&gt;
      a) When looking at the list of fields, it seems like there will&lt;br/&gt;
         be only 10 bytes of spare space left.&lt;br/&gt;
      b) We will now have a spare1 and a spare3 field, but no spare2&lt;br/&gt;
         field.  I guess that may confuse some people, but renaming&lt;br/&gt;
         spare3 to spare2 may also create confusion.  I am not sure&lt;br/&gt;
         what is best.&lt;/p&gt;

&lt;p&gt;7. Unit test:&lt;br/&gt;
      a) I think it would also be good with a test that does next()&lt;br/&gt;
         after a compress and verifies that it is positioned at the&lt;br/&gt;
         correct row.  (Or maybe this is already part of the SUR&lt;br/&gt;
         testsuite?)&lt;br/&gt;
      b) Comments says that an index is created on the conglomerate.&lt;br/&gt;
         I do not see any code for that.&lt;br/&gt;
      c) Why does one fetch the row locations when they are not used&lt;br/&gt;
         for anything?  Why not use plain insert() instead of&lt;br/&gt;
         insertAndFetchLocation()?&lt;/p&gt;

&lt;p&gt;8. phaseTester:  Any particular reason a prepared statement is used&lt;br/&gt;
   for the compresssion?&lt;/p&gt;</comment>
                            <comment id="12370510" author="andreask" created="Wed, 15 Mar 2006 20:49:42 +0000"  >&lt;p&gt;Thanks for the review.&lt;/p&gt;

&lt;p&gt;Attached is a new patch which improves the unit test as requested. In addition, the unit test now also uses fetch() to verify the contents of the row. In addition, the patch fixed one comment (due to question/comment 4).&lt;/p&gt;

&lt;p&gt;Below are answers to your questions (inline):&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; &#216;ystein Gr&#248;vlen commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1067&quot; title=&quot;support holdable Scrollable Updatable Resultsets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1067&quot;&gt;&lt;del&gt;DERBY-1067&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ----------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Patch looks good, but I have a few questions/comments:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 1. Is the idea that as long as you go forward and do not reposition,&lt;br/&gt;
&amp;gt;    one should be allowed to proceed after a compress?  I ask because I&lt;br/&gt;
&amp;gt;    have not quite understood why invalid row locations only seem to&lt;br/&gt;
&amp;gt;    have effect on positionOnRowLocation() and not next().&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Yes. This is the idea. next() positions the scan to the next valid row. If I did anything to invalidate next(), it would have side-effects on forward only cursors.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2. It seems to me that positionOnRowLocation() can return false in two&lt;br/&gt;
&amp;gt;    cases: &lt;br/&gt;
&amp;gt;       1) The row location is no longer valid&lt;br/&gt;
&amp;gt;       2) The record at this location has been deleted&lt;br/&gt;
&amp;gt;    Does not a caller need to distinguish between these two cases?&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;No. In order for a RowLocation to be invalidated,the row has to be deleted, either as part of a compress (delete+insert) or as part of delete+purge.&lt;br/&gt;
The caller does not need to distinguish between these two cases.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3. I suggest to use something even more generic than&lt;br/&gt;
&amp;gt;    reusableRecordIdSequenceNumber.  How about recordIdVersion or&lt;br/&gt;
&amp;gt;    something like that?  I agree that what we worry about here is&lt;br/&gt;
&amp;gt;    reuse of record ids, but I think this mechanism could be used for&lt;br/&gt;
&amp;gt;    other purposes too.&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;I think I will leave it as is, since I have previously been asked to link this with reusable record ids.  However, I do not mind that anyone uses this mechanism for something else, and as part of that issue renames it to something else, like recordIdVersion. &lt;/p&gt;

&lt;p&gt;&amp;gt; 4. reopenAfterEndTransaction has a comment that says &quot;Only reopen&lt;br/&gt;
&amp;gt;    holdable conglomerates&quot;.  I guess it is not the conglomerate that&lt;br/&gt;
&amp;gt;    is holdable, but the way it was opened.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
Yes. I fixed the comment.&lt;/p&gt;

&lt;p&gt;&amp;gt; 5. The following is not an objection to this patch, but the existing&lt;br/&gt;
&amp;gt;    code: HeapCompressScan.fetchRowsForCompress() has copied a lot of&lt;br/&gt;
&amp;gt;    code from GenericScanController.fetchRows().  This requires this&lt;br/&gt;
&amp;gt;    patch to update both methods.  Is it not possible to organize this&lt;br/&gt;
&amp;gt;    in a way that avoids this code duplication?  Mike, can comment on&lt;br/&gt;
&amp;gt;    this?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 6. FileContainer header:  &lt;br/&gt;
&amp;gt;       a) When looking at the list of fields, it seems like there will&lt;br/&gt;
&amp;gt;          be only 10 bytes of spare space left.&lt;/p&gt;

&lt;p&gt;One long field (8 bytes) + one integer (4 bytes), should be 12.&lt;br/&gt;
Do not see how it would only be 10 bytes left.&lt;/p&gt;

&lt;p&gt;&amp;gt;       b) We will now have a spare1 and a spare3 field, but no spare2&lt;br/&gt;
&amp;gt;          field.  I guess that may confuse some people, but renaming&lt;br/&gt;
&amp;gt;          spare3 to spare2 may also create confusion.  I am not sure&lt;br/&gt;
&amp;gt;          what is best.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 7. Unit test:&lt;br/&gt;
&amp;gt;       a) I think it would also be good with a test that does next()&lt;br/&gt;
&amp;gt;          after a compress and verifies that it is positioned at the&lt;br/&gt;
&amp;gt;          correct row.  (Or maybe this is already part of the SUR&lt;br/&gt;
&amp;gt;          testsuite?)&lt;br/&gt;
Added.&lt;br/&gt;
&amp;gt;       b) Comments says that an index is created on the conglomerate.&lt;br/&gt;
&amp;gt;          I do not see any code for that.&lt;br/&gt;
Fixed comment.&lt;br/&gt;
&amp;gt;       c) Why does one fetch the row locations when they are not used&lt;br/&gt;
&amp;gt;          for anything?  Why not use plain insert() instead of&lt;br/&gt;
&amp;gt;          insertAndFetchLocation()?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
Because this was cut&apos;npasted from heldCursor. I have changed it to use insert() instead.&lt;/p&gt;

&lt;p&gt;&amp;gt; 8. phaseTester:  Any particular reason a prepared statement is used&lt;br/&gt;
&amp;gt;    for the compresssion?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
No, it can be used with plain statements also.&lt;/p&gt;</comment>
                            <comment id="12370583" author="andreask" created="Thu, 16 Mar 2006 04:57:28 +0000"  >&lt;p&gt;I think currently all the issues have been resolved. So please go ahead and commit this patch.&lt;br/&gt;
Thank you all for all the help and feedback you have given me to develop this patch.&lt;br/&gt;
--Andreas&lt;/p&gt;</comment>
                            <comment id="12370660" author="oysteing" created="Thu, 16 Mar 2006 17:14:45 +0000"  >&lt;p&gt;Andreas Korneliussen (JIRA) wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; &#216;ystein Gr&#248;vlen commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1067&quot; title=&quot;support holdable Scrollable Updatable Resultsets&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1067&quot;&gt;&lt;del&gt;DERBY-1067&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt;&amp;gt; ----------------------------------------&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; 2. It seems to me that positionOnRowLocation() can return false in two&lt;br/&gt;
&amp;gt;&amp;gt;    cases: &lt;br/&gt;
&amp;gt;&amp;gt;       1) The row location is no longer valid&lt;br/&gt;
&amp;gt;&amp;gt;       2) The record at this location has been deleted&lt;br/&gt;
&amp;gt;&amp;gt;    Does not a caller need to distinguish between these two cases?&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; No. In order for a RowLocation to be invalidated,the row has to be&lt;br/&gt;
&amp;gt; deleted, either as part of a compress (delete+insert) or as part of&lt;br/&gt;
&amp;gt; delete+purge.  The caller does not need to distinguish between these&lt;br/&gt;
&amp;gt; two cases.&lt;/p&gt;

&lt;p&gt;I understand that there are two ways for a RowLocation to become&lt;br/&gt;
invalid:&lt;/p&gt;

&lt;p&gt;1. On the first repositioning after a compress.&lt;br/&gt;
2. Repositioning on a deleted&amp;amp;purged row.&lt;/p&gt;

&lt;p&gt;Will the holdable cursor be invalidated in both cases, or will one be&lt;br/&gt;
able to continue to the next record in the second case?&lt;/p&gt;

&lt;p&gt;&amp;gt;  &lt;br/&gt;
&amp;gt;&amp;gt; 3. I suggest to use something even more generic than&lt;br/&gt;
&amp;gt;&amp;gt;    reusableRecordIdSequenceNumber.  How about recordIdVersion or&lt;br/&gt;
&amp;gt;&amp;gt;    something like that?  I agree that what we worry about here is&lt;br/&gt;
&amp;gt;&amp;gt;    reuse of record ids, but I think this mechanism could be used for&lt;br/&gt;
&amp;gt;&amp;gt;    other purposes too.&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think I will leave it as is, since I have previously been asked to&lt;br/&gt;
&amp;gt; link this with reusable record ids.  However, I do not mind that&lt;br/&gt;
&amp;gt; anyone uses this mechanism for something else, and as part of that&lt;br/&gt;
&amp;gt; issue renames it to something else, like recordIdVersion.&lt;/p&gt;

&lt;p&gt;You describe the new header field as &quot;The sequence number for reusable&lt;br/&gt;
sequence number.&quot;  For someone who is just looking at FileContainer&lt;br/&gt;
and not concerned about your specific use of this field, this does not&lt;br/&gt;
make much sense.  A meaningful concept for FileContainer is &quot;As long&lt;br/&gt;
as this number does not change, RecordIds will be stable&quot;.  This&lt;br/&gt;
will also cover those concerned with records being moved, as well as&lt;br/&gt;
those only concerned by reuse of RecordIds.&lt;/p&gt;


&lt;p&gt;&amp;gt;&amp;gt; 6. FileContainer header:  &lt;br/&gt;
&amp;gt;&amp;gt;       a) When looking at the list of fields, it seems like there will&lt;br/&gt;
&amp;gt;&amp;gt;          be only 10 bytes of spare space left.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; One long field (8 bytes) + one integer (4 bytes), should be 12.&lt;br/&gt;
&amp;gt; Do not see how it would only be 10 bytes left.&lt;/p&gt;

&lt;p&gt;According to the comment spare1 is only 2 bytes.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; 7. Unit test:&lt;br/&gt;
&amp;gt;&amp;gt;       a) I think it would also be good with a test that does next()&lt;br/&gt;
&amp;gt;&amp;gt;          after a compress and verifies that it is positioned at the&lt;br/&gt;
&amp;gt;&amp;gt;          correct row.  (Or maybe this is already part of the SUR&lt;br/&gt;
&amp;gt;&amp;gt;          testsuite?)&lt;br/&gt;
&amp;gt; Added.&lt;/p&gt;

&lt;p&gt;New additions look very good.  However, I would be much more comforted&lt;br/&gt;
with a test where compress actually does something.  That is,&lt;br/&gt;
tests where records have been deleted.  Maybe this is already part of the&lt;br/&gt;
SUR testsuite?  We should also have tests that reposition holdable&lt;br/&gt;
cursors on deleted records.&lt;/p&gt;
</comment>
                            <comment id="12370666" author="andreask" created="Thu, 16 Mar 2006 18:11:29 +0000"  >
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;3. I suggest to use something even more generic than&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;   reusableRecordIdSequenceNumber.  How about recordIdVersion or&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;   something like that?  I agree that what we worry about here is&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;   reuse of record ids, but I think this mechanism could be used for&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;   other purposes too.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;I think I will leave it as is, since I have previously been asked to&lt;br/&gt;
&amp;gt;&amp;gt;link this with reusable record ids.  However, I do not mind that&lt;br/&gt;
&amp;gt;&amp;gt;anyone uses this mechanism for something else, and as part of that&lt;br/&gt;
&amp;gt;&amp;gt;issue renames it to something else, like recordIdVersion.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; You describe the new header field as &quot;The sequence number for reusable&lt;br/&gt;
&amp;gt; sequence number.&quot;  For someone who is just looking at FileContainer&lt;br/&gt;
&amp;gt; and not concerned about your specific use of this field, this does not&lt;br/&gt;
&amp;gt; make much sense.  A meaningful concept for FileContainer is &quot;As long&lt;br/&gt;
&amp;gt; as this number does not change, RecordIds will be stable&quot;.  This&lt;br/&gt;
&amp;gt; will also cover those concerned with records being moved, as well as&lt;br/&gt;
&amp;gt; those only concerned by reuse of RecordIds.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;That is a typo. I will fix the comment to say: &lt;br/&gt;
&quot;The sequence number for reusable recordIds. As long as this number does not change, recordIds will be stable within the container.&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;6. FileContainer header:  &lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;      a) When looking at the list of fields, it seems like there will&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;         be only 10 bytes of spare space left.&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;One long field (8 bytes) + one integer (4 bytes), should be 12.&lt;br/&gt;
&amp;gt;&amp;gt;Do not see how it would only be 10 bytes left.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; According to the comment spare1 is only 2 bytes.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
Yes, it seems spare1 is a short. Initially the header said there were 20 bytes left. I made use of 8 bytes, and thought that the header was correct from before and withdrew 8 from 20 and got 12. I will fix the comment.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;7. Unit test:&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;      a) I think it would also be good with a test that does next()&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;         after a compress and verifies that it is positioned at the&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;         correct row.  (Or maybe this is already part of the SUR&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt;         testsuite?)&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;Added.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; New additions look very good.  However, I would be much more comforted&lt;br/&gt;
&amp;gt; with a test where compress actually does something.  That is,&lt;br/&gt;
&amp;gt; tests where records have been deleted.  Maybe this is already part of the&lt;br/&gt;
&amp;gt; SUR testsuite?  We should also have tests that reposition holdable&lt;br/&gt;
&amp;gt; cursors on deleted records.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
This is part of the HoldabilityTest which was submitted as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1070&quot; title=&quot;add tests for holdable SUR&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1070&quot;&gt;&lt;del&gt;DERBY-1070&lt;/del&gt;&lt;/a&gt;. It tests that a compress actually takes place. It also does some inserts which ensures that recordIds actually are being reused, and it tests that SUR is not able to update the rows. Without this fix, SUR will incorrectly update one of the inserted rows. So, I think the test is sufficent, it verifies that if a compress is being run, the recordIds are invalidated.&lt;/p&gt;</comment>
                            <comment id="12370678" author="andreask" created="Thu, 16 Mar 2006 20:07:05 +0000"  >&lt;p&gt;Attaching patch to fix some JavaDoc comments. Also including report from storunit suite.&lt;/p&gt;</comment>
                            <comment id="12370750" author="davidvc" created="Fri, 17 Mar 2006 04:58:40 +0000"  >&lt;p&gt;Committed revision 386457.  Builds clean and runs storeunit with no errors.&lt;/p&gt;</comment>
                            <comment id="12373983" author="andreask" created="Tue, 11 Apr 2006 17:42:37 +0100"  >&lt;p&gt;New feature&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12329495">DERBY-1058</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12323678" name="DERBY-1067.diff" size="7719" author="andreask" created="Sat, 4 Mar 2006 01:30:45 +0000"/>
                            <attachment id="12323679" name="DERBY-1067.stat" size="555" author="andreask" created="Sat, 4 Mar 2006 01:30:46 +0000"/>
                            <attachment id="12324028" name="DERBY-1067v2.diff" size="23280" author="andreask" created="Sat, 11 Mar 2006 01:11:18 +0000"/>
                            <attachment id="12324029" name="DERBY-1067v2.stat" size="995" author="andreask" created="Sat, 11 Mar 2006 01:11:18 +0000"/>
                            <attachment id="12324213" name="DERBY-1067v3.diff" size="26891" author="andreask" created="Wed, 15 Mar 2006 20:49:42 +0000"/>
                            <attachment id="12324255" name="DERBY-1067v4.diff" size="26978" author="andreask" created="Thu, 16 Mar 2006 20:07:05 +0000"/>
                            <attachment id="12324087" name="derbyall_report.txt" size="10098" author="andreask" created="Mon, 13 Mar 2006 18:58:03 +0000"/>
                            <attachment id="12324256" name="storeunit_report.txt" size="3642" author="andreask" created="Thu, 16 Mar 2006 20:07:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 4 Mar 2006 04:37:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29840</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy15zj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40620</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>