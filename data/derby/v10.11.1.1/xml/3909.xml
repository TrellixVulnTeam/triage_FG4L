<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:23:01 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3909/DERBY-3909.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3909] Race condition in NetXAResource.removeXaresFromSameRMchain()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3909</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;NetXAResource.removeXaresFromSameRMchain() does the following to remove a NetXAResource from what&apos;s logically a singly-linked list:&lt;/p&gt;

&lt;p&gt;1) Mark the NetXAResource to remove with a flag (a field called ignoreMe_)&lt;br/&gt;
2) Synchronize on an object that protects the linked list&lt;br/&gt;
3) Follow the chain of next pointers in the linked list and remove the first flagged object&lt;br/&gt;
4) Release synchronization lock obtained in (2)&lt;br/&gt;
5) Clear the flag set in (1)&lt;/p&gt;

&lt;p&gt;Now, say that two threads (T1 and T2) perform step 1 in parallel. T1 is granted the synchronization lock in (2), and T2 must wait. T1 traverses the linked list, finds the object flagged by T2 and removes it. Further T1 releases the synchronization lock and clears the flag on the object it had flagged. This is not the same object that it removed, so when T2 is granted the synchronization lock, there is no object flagged for removal. As a result, only the object T2 attempted to remove was in fact removed. The object that T1 flagged for removal is still in the linked list.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12406239">DERBY-3909</key>
            <summary>Race condition in NetXAResource.removeXaresFromSameRMchain()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Oct 2008 18:19:35 +0100</created>
                <updated>Mon, 4 May 2009 19:22:59 +0100</updated>
                            <resolved>Thu, 16 Oct 2008 13:10:50 +0100</resolved>
                                    <version>10.2.2.0</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12638774" author="knutanders" created="Sat, 11 Oct 2008 18:23:09 +0100"  >&lt;p&gt;The problem could be solved by obtaining the synchronization lock earlier and releasing it later, or by checking for object identity instead of the ignoreMe_ flag when removing an object. I would prefer checking the object identity, as I think the code will be clearer that way. We could then also remove the ignoreMe_ field from the class.&lt;/p&gt;</comment>
                            <comment id="12638808" author="knutanders" created="Sun, 12 Oct 2008 00:34:28 +0100"  >&lt;p&gt;Here&apos;s a patch that attempts to fix the problem by checking the identity instead of the field ignoreMe_. I haven&apos;t found any way to test it, since I don&apos;t have a test case that exposes the problem, but I believe that the patch is an improvement. Derbyall and suites.All ran cleanly with the patch. Reviews would be appreciated.&lt;/p&gt;</comment>
                            <comment id="12638851" author="knutanders" created="Sun, 12 Oct 2008 15:49:52 +0100"  >&lt;p&gt;There are more problems with the handling of this data structure.&lt;/p&gt;

&lt;p&gt;I wrote a test which had 10 threads that opened and closed XA&lt;br/&gt;
connections in parallel, and every 5 seconds it would print how many&lt;br/&gt;
operations it had performed. The test showed that the number of&lt;br/&gt;
operations per interval decreased over time, and when I instrumented&lt;br/&gt;
the code I found that the vector xaResourceSameRMGroup_ in&lt;br/&gt;
NetXAResource just kept growing. xaResourceSameRMGroup_ holds the&lt;br/&gt;
singly-linked lists that this issue was originally opened for.&lt;/p&gt;

&lt;p&gt;Since the vector is meant to have one item per resource manager&lt;br/&gt;
(which, as I understand it, is a Derby network server in this&lt;br/&gt;
context), and all the threads connect to the same server, the vector&lt;br/&gt;
should never have more than one element in this test.&lt;/p&gt;

&lt;p&gt;The problem is this:&lt;/p&gt;

&lt;p&gt;NetXAResource.initForReuse() scans through the vector to find the&lt;br/&gt;
correct group to add the XAResource to. The correct group is one for&lt;br/&gt;
which isSameRM() returns true. XAResources that belong to the same&lt;br/&gt;
group are chained.&lt;/p&gt;

&lt;p&gt;But if the first XAResource in one of the chains belongs to a closed&lt;br/&gt;
connection whose XAResource has not yet been removed from the chain&lt;br/&gt;
(yet another race condition), an XAException is raised, and&lt;br/&gt;
initForReuse() notices it and just continues the search on the next&lt;br/&gt;
element in the vector. If the group that was skipped because of the&lt;br/&gt;
XAException, was the group that the XAResource actually should have&lt;br/&gt;
been added to, the search won&apos;t find a matching group, and a new&lt;br/&gt;
element will be added to the vector. So we end up with multiple chains&lt;br/&gt;
for a single group.&lt;/p&gt;

&lt;p&gt;Also, since the XAResource may even exist from before in the skipped&lt;br/&gt;
group, it will end up two places in the vector. When the XAConnection&lt;br/&gt;
is closed later on, only one of the occurrences of the XAResource will&lt;br/&gt;
be removed from the vector, which means that the vector could become&lt;br/&gt;
very large over time.&lt;/p&gt;

&lt;p&gt;Even worse, the next pointers used to chain NetXAResource objects that&lt;br/&gt;
belong to the same group, are not cleared when the object is removed&lt;br/&gt;
from the chain or when the NetXAResource is added as the root of a new&lt;br/&gt;
group. If it is already part of a group that was skipped because of an&lt;br/&gt;
XAException, it could have a next pointer which points to another&lt;br/&gt;
chain, and with some bad luck we could end up with a cycle in one of&lt;br/&gt;
the chains and make initForReuse() and removeXaresFromSameRMchain()&lt;br/&gt;
vulnerable to infinite loops.&lt;/p&gt;

&lt;p&gt;It looks like the problem could be solved simply by turning around the&lt;br/&gt;
call to NetXAResource.isSameRM() in initForReuse(), from&lt;br/&gt;
xaResourceGroup.isSameRM(this) to isSameRM(xaResourceGroup). Since the&lt;br/&gt;
connection used by &quot;this&quot; is not closed, the XAException is not&lt;br/&gt;
thrown, and the NetXAResource is added to the correct group.&lt;/p&gt;

&lt;p&gt;However, I can&apos;t see that this data structure is used anywhere in the&lt;br/&gt;
code. The fields that build up the structure are only used in&lt;br/&gt;
initForReuse() and removeXaresFromSameRMchain(), so we only put things&lt;br/&gt;
in and remove them, without doing anything useful with them in&lt;br/&gt;
between. Given that the code that handles the data structure has a&lt;br/&gt;
number of problems, is fairly complex and doesn&apos;t seem to do anything&lt;br/&gt;
useful, I would suggest that we remove it instead of trying to fix it.&lt;/p&gt;</comment>
                            <comment id="12638852" author="knutanders" created="Sun, 12 Oct 2008 15:51:37 +0100"  >&lt;p&gt;Attaching the test I described in my previous comment.&lt;/p&gt;</comment>
                            <comment id="12638853" author="knutanders" created="Sun, 12 Oct 2008 16:02:25 +0100"  >&lt;p&gt;Unchecking &quot;Patch Available&quot; since I believe that removing the code is a better fix.&lt;/p&gt;</comment>
                            <comment id="12638908" author="knutanders" created="Sun, 12 Oct 2008 22:27:00 +0100"  >&lt;p&gt;Attached is a new patch (d3909-remove.diff) which removes the methods removeXaresFromSameRMchain() and initForReuse() from NetXAResource, and it also removes all the now unused variables from that class.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly. The patch is ready for review.&lt;/p&gt;</comment>
                            <comment id="12639829" author="knutanders" created="Wed, 15 Oct 2008 14:06:59 +0100"  >&lt;p&gt;A SailFin user reported this problem against Derby 10.2. See &lt;a href=&quot;https://sailfin.dev.java.net/issues/show_bug.cgi?id=1218&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://sailfin.dev.java.net/issues/show_bug.cgi?id=1218&lt;/a&gt;. He also said that the problem went away if he used 10.4.2.0 instead.&lt;/p&gt;

&lt;p&gt;I see something similar with the repro I attached here. On 10.2 and 10.3, the repro ends up in an infinite loop in initForReuse() after 10-20 seconds. On 10.4 and trunk, the repro just slows down.&lt;/p&gt;

&lt;p&gt;A binary search in the repository revealed that the behaviour changed with this check-in:&lt;/p&gt;

&lt;p&gt;------------------------------------------------------------------------&lt;br/&gt;
r632334 | kristwaa | 2008-02-29 15:59:32 +0100 (fr, 29 feb 2008) | 3 lines&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3441&quot; title=&quot;Determine and implement a proper procedure for resetting a prepared statement for reuse in a statement pool&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3441&quot;&gt;&lt;del&gt;DERBY-3441&lt;/del&gt;&lt;/a&gt;: Determine and implement a proper procedure for resetting a prepared statement for reuse in a statement pool.&lt;br/&gt;
Patch file: derby-3441-1c-statement_reset.diff&lt;/p&gt;

&lt;p&gt;------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;This check-in appears to change the timing of establishing and reusing XA connections, most likely because of the changes to client.am.Connection.completeReset() which seem to change how the transaction isolation level is reset. There&apos;s also a TODO comment which says we should investigate other ways to do it.&lt;/p&gt;

&lt;p&gt;Although I don&apos;t see the infinite loop after that commit, the potential for the infinite loop is still there, and I still see that the vector keeps growing.&lt;/p&gt;</comment>
                            <comment id="12639837" author="knutanders" created="Wed, 15 Oct 2008 14:25:28 +0100"  >&lt;p&gt;Committed d3909-remove.diff to trunk with revision 704904.&lt;/p&gt;

&lt;p&gt;I&apos;m planning to back-port the fix to all branches back to 10.2 since users have seen this problem on 10.2.&lt;/p&gt;</comment>
                            <comment id="12640148" author="knutanders" created="Thu, 16 Oct 2008 13:10:50 +0100"  >&lt;p&gt;Committed to 10.4 with revision 705218.&lt;br/&gt;
Committed to 10.3 with revision 705219.&lt;br/&gt;
Committed to 10.2 with revision 705220.&lt;/p&gt;

&lt;p&gt;Marking the issue as resolved since the problematic code has been removed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12391962" name="Derby3909.java" size="1722" author="knutanders" created="Sun, 12 Oct 2008 15:51:37 +0100"/>
                            <attachment id="12391970" name="d3909-remove.diff" size="8352" author="knutanders" created="Sun, 12 Oct 2008 22:27:00 +0100"/>
                            <attachment id="12391948" name="d3909.diff" size="3167" author="knutanders" created="Sun, 12 Oct 2008 00:34:28 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23912</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0x73:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39196</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>