<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6000/DERBY-6000.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6000] Implement support for JDBC 4.2</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6000</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Open JDK 8 will include maintenance rev 4.2 of JDBC. The public discussion of JDBC 4.2 will take place here: &lt;a href=&quot;http://openjdk.java.net/jeps/170&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/jeps/170&lt;/a&gt;. We will want to build Derby support for JDBC 4.2 after a public spec appears. At this time, it is unclear what Derby release will carry this support.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12616758">DERBY-6000</key>
            <summary>Implement support for JDBC 4.2</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Nov 2012 16:46:44 +0000</created>
                <updated>Fri, 3 Jan 2014 08:09:46 +0000</updated>
                            <resolved>Wed, 13 Mar 2013 13:18:51 +0000</resolved>
                                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13559885" author="rhillegas" created="Tue, 22 Jan 2013 19:01:15 +0000"  >&lt;p&gt;Attaching JDBC_4.2_Changes.html, the first rev of a functional spec for this work. The changes are defined by the javadoc specdiffs published by JDBC spec lead Lance Andersen. The latest specdiffs can be found here: &lt;a href=&quot;http://cr.openjdk.java.net/~lancea/8005080/specdiffs.01/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cr.openjdk.java.net/~lancea/8005080/specdiffs.01/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13560340" author="rhillegas" created="Wed, 23 Jan 2013 02:50:31 +0000"  >&lt;p&gt;I have built Open JDK 8 on my mac by following the instructions here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wikis.oracle.com/display/OpenJDK/Mac+OS+X+Port&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://wikis.oracle.com/display/OpenJDK/Mac+OS+X+Port&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, the mercurial source indicated on that page does not contain the recent Open JDK checkin of JDBC 4.2. To get that more complete source, I issued the following command:&lt;/p&gt;

&lt;p&gt;hg clone &lt;a href=&quot;http://hg.openjdk.java.net/jdk8/tl&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hg.openjdk.java.net/jdk8/tl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably a similar sequence of steps on the platform of your choice will help you build an Open JDK 8 which contains the JDBC 4.2 changes.&lt;/p&gt;
</comment>
                            <comment id="13561620" author="rhillegas" created="Thu, 24 Jan 2013 13:37:52 +0000"  >&lt;p&gt;Unfortunately, this version of OpenJDK 8 causes Derby to fail on VerifyErrors whenever Derby tries to load an interface which JDBC 4.2 extends with a default method. For example, when you try to connect to Derby, you get this error:&lt;/p&gt;

&lt;p&gt;JAVA ERROR: java.lang.VerifyError: (class: org/apache/derby/impl/jdbc/EmbedDatabaseMetaData, method: supportsRefCursors signature: ()Z) Illegal use of nonvirtual function call&lt;/p&gt;

&lt;p&gt;...and when you try to run a statement, you get this error:&lt;/p&gt;

&lt;p&gt;JAVA ERROR: java.lang.VerifyError: (class: org/apache/derby/impl/jdbc/EmbedStatement, method: executeLargeUpdate signature: (Ljava/lang/String;[Ljava/lang/String;)J) Illegal use of nonvirtual function call&lt;/p&gt;

&lt;p&gt;This is an OpenJDK bug tracked by &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=8004967&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=8004967&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the moment, this bug prevents Derby from building cleanly under OpenJDK 8. I made some changes to get the classes to build, but the VerifyErrors kill the generation of toursdb, and that kills the Derby build.&lt;/p&gt;

&lt;p&gt;For the moment, it&apos;s probably best to work on the pieces of JDBC 4.2 which can be pushed into Derby&apos;s JDBC 3.0 implementation.&lt;/p&gt;</comment>
                            <comment id="13562793" author="rhillegas" created="Fri, 25 Jan 2013 15:51:06 +0000"  >&lt;p&gt;Attaching derby-6000-01-aa-executeLargeUpdateEmbedded.diff. This patch adds the new Statement.executeLargeUpdate() methods introduced by JDBC 4.2. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch adds the following new methods to Derby&apos;s embedded JDBC 3.0 implementation of java.sql.Statement:&lt;/p&gt;

&lt;p&gt;    public  long executeLargeUpdate( String sql ) throws SQLException;&lt;br/&gt;
    public  long executeLargeUpdate( String sql, int autoGeneratedKeys) throws SQLException;&lt;br/&gt;
    public  long executeLargeUpdate( String sql, int[] columnIndexes ) throws SQLException;&lt;br/&gt;
    public  long executeLargeUpdate( String sql, String[] columnNames ) throws SQLException;&lt;/p&gt;

&lt;p&gt;This involved three changes:&lt;/p&gt;

&lt;p&gt;1) Changing the type of the update counter from int to long.&lt;/p&gt;

&lt;p&gt;2) Adding the new methods.&lt;/p&gt;

&lt;p&gt;3) Forwarding the executeUpdate() overloads to the corresponding newly added executeLargeUpdate() overloads.&lt;/p&gt;

&lt;p&gt;I have put off adding regression tests until I have added parallel methods to the client JDBC implementation.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/ResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RealResultSetStatisticsFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;Step (1).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/EngineStatement.java&lt;/p&gt;

&lt;p&gt;Steps (2) and (3).&lt;/p&gt;</comment>
                            <comment id="13562852" author="rhillegas" created="Fri, 25 Jan 2013 17:27:32 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-01-aa-executeLargeUpdateEmbedded.diff. Committed at subversion revision 1438600.&lt;/p&gt;</comment>
                            <comment id="13564711" author="rhillegas" created="Mon, 28 Jan 2013 21:42:23 +0000"  >&lt;p&gt;Attaching derby-6000-02-ad-executeLargeUpdateClient.diff. This adds large update support to Statements in the client JDBC driver. I am running tests now.&lt;/p&gt;

&lt;p&gt;This adds the following method to the embedded driver:&lt;/p&gt;

&lt;p&gt;  Statement.getLargeUpdateCount()&lt;/p&gt;

&lt;p&gt;...and the following methods to the client driver:&lt;/p&gt;

&lt;p&gt;  Statement.executeLargeUpdate( String )&lt;br/&gt;
  Statement.executeLargeUpdate( String, int )&lt;br/&gt;
  Statement.executeLargeUpdate( String, int[] )&lt;br/&gt;
  Statement.executeLargeUpdate( String, String[] )&lt;br/&gt;
  Statement.getLargeUpdateCount()&lt;/p&gt;

&lt;p&gt;The following changes are made:&lt;/p&gt;

&lt;p&gt;1) The update count on the client side is expanded from an int to a long.&lt;/p&gt;

&lt;p&gt;2) The update count is passed from the server to the client in the SQLCard descriptor. Previously, only an int sized update count was passed. Now a long sized update count is passed. This is done by leaving the low order 32 bits of the update count in the slot of the SQLCard which was previously used for the update count. Then the upper 32 bits are put in a previously unused slot of the SQLCard. This should mean that when clients and servers are at different revs, the client will still get the correct update count except in cases when the update count is greater than Integer.MAX_VALUE. In those oddball cases, the client used to receive garbage from the server. In these mixed rev situations, the client will continue to receive garbage for the update count if the number of updated rows exceeds Integer.MAX_VALUE.&lt;/p&gt;

&lt;p&gt;3) Magic numbers were eliminated when processing the SQLCard. Hopefully, this will make this code easier to study and debug.&lt;/p&gt;

&lt;p&gt;4) Factory methods were added for client-side BatchUpdateExceptions. These will be expanded when we add support for the new BatchUpdateException constructor added by JDBC 4.2.&lt;/p&gt;

&lt;p&gt;5) The new methods were added.&lt;/p&gt;

&lt;p&gt;6) The engine ResultSet code was tweaked to let tests force the engine to return absurdly large update counts. Otherwise, it is practically impossible to test the large update methods since this involves generating more than 2 billion rows for each test case.&lt;/p&gt;

&lt;p&gt;7) Tests were added for large updates for both the embedded and client drivers.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Agent.java&lt;/p&gt;

&lt;p&gt;Changes for (1) and (2).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/NetConnectionReply.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/NetCursor.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Sqlca.java&lt;/p&gt;

&lt;p&gt;Changes for (3).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/Utils.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/BatchUpdateException.java&lt;/p&gt;

&lt;p&gt;Changes for (4).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/EngineStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;br/&gt;
M       java/drda/org/apache/derby/impl/drda/DRDAStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/LogicalStatementEntity.java&lt;/p&gt;

&lt;p&gt;Changes for (5).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RowUtil.java&lt;/p&gt;

&lt;p&gt;Changes for (6).&lt;/p&gt;

&lt;p&gt;-----------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java&lt;/p&gt;

&lt;p&gt;Changes for (7).&lt;/p&gt;</comment>
                            <comment id="13564962" author="rhillegas" created="Tue, 29 Jan 2013 01:29:12 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-02-ad-executeLargeUpdateClient.diff.&lt;/p&gt;</comment>
                            <comment id="13565343" author="rhillegas" created="Tue, 29 Jan 2013 13:15:05 +0000"  >&lt;p&gt;Committed derby-6000-02-ad-executeLargeUpdateClient.diff at subversion revision 1439883.&lt;/p&gt;</comment>
                            <comment id="13565492" author="rhillegas" created="Tue, 29 Jan 2013 16:20:51 +0000"  >&lt;p&gt;Attaching derby-6000-03-aa-executeLargeBatch.diff. This patch adds large batch support. I am running tests now.&lt;/p&gt;

&lt;p&gt;Adds the following method to the embedded and client drivers:&lt;/p&gt;

&lt;p&gt;  Statement.executeLargeBatch()&lt;/p&gt;

&lt;p&gt;Most of the machinery needed for this was added as part of implementing large updates.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/EngineStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/Util.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/LogicalStatementEntity.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="13565601" author="rhillegas" created="Tue, 29 Jan 2013 18:02:29 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-03-aa-executeLargeBatch.diff. Committed at subversion revision 1440035.&lt;/p&gt;</comment>
                            <comment id="13566773" author="rhillegas" created="Wed, 30 Jan 2013 18:57:22 +0000"  >&lt;p&gt;Attaching derby-6000-04-aa-setLargeMaxRows.diff. This patch adds support for setting/getting large limits on returned row counts. I will run regression tests.&lt;/p&gt;

&lt;p&gt;This patch adds the following JDBC 4.2 methods to the embedded and client drivers:&lt;/p&gt;

&lt;p&gt;  Statement.setLargeMaxRows( long )&lt;br/&gt;
  Statement.getLargeMaxRows()&lt;/p&gt;

&lt;p&gt;Mostly this involved changing the datatype of some variables from int to long and then adding the new methods. As with the previous patch, some debug entry points were added so that we can test the new methods without actually generating more than 2 billion rows.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/Activation.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/EngineStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Cursor.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/LogicalStatementEntity.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/ResultSet.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="13566878" author="rhillegas" created="Wed, 30 Jan 2013 20:36:31 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-04-aa-setLargeMaxRows.diff. Committed at subversion revision 1440656.&lt;/p&gt;</comment>
                            <comment id="13567736" author="rhillegas" created="Thu, 31 Jan 2013 15:55:30 +0000"  >&lt;p&gt;Attaching derby-6000-05-aa-executeLargeUpdatePS.diff. This patch adds JDBC 4.2 large update support to PreparedStatements. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch adds the following method to the embedded and client implementations of PreparedStatement:&lt;/p&gt;

&lt;p&gt;  public long executeLargeUpdate()&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/EnginePreparedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/LogicalPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="13567867" author="rhillegas" created="Thu, 31 Jan 2013 17:50:13 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-05-aa-executeLargeUpdatePS.diff. Committed at subversion revision 1441088.&lt;/p&gt;</comment>
                            <comment id="13568088" author="rhillegas" created="Thu, 31 Jan 2013 20:49:50 +0000"  >&lt;p&gt;Attaching derby-6000-06-aa-DatabaseMetaData.diff. This patch makes the JDBC 4.2 changes to DatabaseMetaData. I will run regression tests.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes to the embedded and client drivers:&lt;/p&gt;

&lt;p&gt;1) Changes the datatype of the CARDINALITY and PAGES columns returned by getIndexInfo(). The column types are changed from INT to BIGINT.&lt;/p&gt;

&lt;p&gt;2) Adds a getMaxLogicalLOBSize() method. This method is supposed to return the maximum size of a LOB in bytes. For Derby that is the maximum size of a CLOB. A CLOB can have Integer.MAX_VALUE chars, which works out to Integer.MAX_VALUE * 2 bytes.&lt;/p&gt;

&lt;p&gt;3) Adds a supportsRefCursors() method. This returns false because Derby does not support the Types.REF_CURSOR type.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Limits.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/metadata.properties&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/LogicalDatabaseMetaData40.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/DatabaseMetaData.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Wrapper41DBMD.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Wrapper42DBMD.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="13568233" author="rhillegas" created="Thu, 31 Jan 2013 23:19:59 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-06-aa-DatabaseMetaData.diff except for the heisenbug in NetworkServerControlClientCommandTest. testPingWithWrongHost.&lt;/p&gt;</comment>
                            <comment id="13568731" author="rhillegas" created="Fri, 1 Feb 2013 13:08:24 +0000"  >&lt;p&gt;Committed derby-6000-06-aa-DatabaseMetaData.diff at subversion revision 1441436.&lt;/p&gt;</comment>
                            <comment id="13570346" author="rhillegas" created="Mon, 4 Feb 2013 15:59:04 +0000"  >&lt;p&gt;Attaching derby-6000-07-ab-batchUpdateException.diff. This patch adds support for the new constructor and accessor method added by JDBC 4.2 to BatchUpdateException. I am running tests now.&lt;/p&gt;

&lt;p&gt;The build and the new tests seem to work on Java 7. In addition, I can build the new support on Java 8. However, I can&apos;t test on Java 8 because of &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=8004967&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=8004967&lt;/a&gt;. So this patch will have to be re-built and tested with Java 8 once &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=8004967&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=8004967&lt;/a&gt; is fixed.&lt;/p&gt;

&lt;p&gt;This patch makes Derby create BatchUpdateExceptions with the following new constructor when running on Java 8. This is a constructor which treats the update counts as longs rather than ints:&lt;/p&gt;

&lt;p&gt;  public BatchUpdateException&lt;br/&gt;
   (&lt;br/&gt;
     java.lang.String reason, &lt;br/&gt;
     java.lang.String SQLState,&lt;br/&gt;
     int vendorCode,&lt;br/&gt;
     long[] updateCounts,&lt;br/&gt;
     java.lang.Throwable cause&lt;br/&gt;
  )&lt;/p&gt;

&lt;p&gt;In addition, this patch tests that the correct values are returned by the following new accessor method which JDBC 4.2 added to BatchUpdateException:&lt;/p&gt;

&lt;p&gt;  public long[] getLargeUpdateCounts()&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Simple change to the embedded driver.&lt;/p&gt;

&lt;p&gt;2) For the client driver, the patch eliminates Derby&apos;s special subclass of BatchUpdateException. Instead, the patch introduces a factory method which invokes the correct BatchUpdateException depending on the VM level.&lt;/p&gt;

&lt;p&gt;3) For the client driver, build changes were necessary in order to compile a ClientJDBCObjectFactory for Java 8. This factory will be expanded as other JDBC 4.2 extensions are added.&lt;/p&gt;

&lt;p&gt;4) Revamps the batch update tests to evaluate the new BatchUpdateException accessor method when running on Java 8. Also adds a new test to verify BatchUpdateException behavior when your batches generate very large update counts.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/Util.java&lt;/p&gt;

&lt;p&gt;Changes for (1).&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/jdbc/ClientDriver.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java&lt;br/&gt;
A       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Statement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Configuration.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
D       java/client/org/apache/derby/client/am/BatchUpdateException.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/ClientJDBCObjectFactory.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Agent.java&lt;/p&gt;

&lt;p&gt;Changes for (2).&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/client/build.xml&lt;br/&gt;
M       build.xml&lt;br/&gt;
A       tools/jar/dnc.1.8.properties&lt;/p&gt;

&lt;p&gt;Changes for (3).&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BatchUpdateTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;/p&gt;

&lt;p&gt;Changes for (4).&lt;/p&gt;</comment>
                            <comment id="13570429" author="rhillegas" created="Mon, 4 Feb 2013 17:40:42 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-07-ab-batchUpdateException.diff. Committed at subversion revision 1442195.&lt;/p&gt;</comment>
                            <comment id="13572405" author="rhillegas" created="Wed, 6 Feb 2013 13:39:11 +0000"  >&lt;p&gt;Attaching derby-6000-08-aa-batchUpdateExceptionConstructor.diff. This patch adjusts how Derby constructs BatchUpdateExceptions. I am running tests now.&lt;/p&gt;

&lt;p&gt;Despite &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=8004967&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=8004967&lt;/a&gt; , you can test on Open JDK 8 by specifying the -noverify switch on the java command line. When I did this, I tripped across errors in the BatchUpdateTests caused by this behavior of BatchUpdateException:&lt;/p&gt;

&lt;p&gt;o If you use the new constructor which takes long update counts, then you can&apos;t use initCause() to poke a cause into the BatchUpdateException.&lt;/p&gt;

&lt;p&gt;This patch fixes those errors by reworking how Derby constructs BatchUpdateExceptions.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/Util.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl42.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;</comment>
                            <comment id="13572605" author="rhillegas" created="Wed, 6 Feb 2013 17:40:16 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-08-aa-batchUpdateExceptionConstructor.diff. Committed at subversion revision 1443086.&lt;/p&gt;</comment>
                            <comment id="13573464" author="knutanders" created="Thu, 7 Feb 2013 13:13:47 +0000"  >&lt;p&gt;derby-6000-06-aa-DatabaseMetaData.diff added a DatabaseMetaData method named getMaxLogicalLOBSize(). In my copy of OpenJDK, it is actually called getMaxLogicalLobSize(), so I guess it needs to be renamed.&lt;/p&gt;

&lt;p&gt;The javadoc in the specification says it returns &quot;the maximum number of bytes this database allows for the logical size for a LOB.&quot; For a CLOB, I&apos;d say the number of bytes would be the physical size, not the logical size, so I&apos;m not sure exactly what we should return here. The patch assumes UTF-16 with two bytes per character, which matches the in-memory representation. On disk, CLOBs are stored in UTF-8, which may have more than two bytes per character.&lt;/p&gt;

&lt;p&gt;Right now we return 4294967294. But we don&apos;t allow BLOBs to be more than 2147483647 bytes. Could this trick applications into attempting to create tables with BLOB columns whose declared size is greater than the maximum length?&lt;/p&gt;

&lt;p&gt;4294967294 is the maximum number of bytes we could possibly accept (assuming CLOBs are UTF-16 encoded) in a LOB column, but we don&apos;t always accept that many bytes.&lt;/p&gt;

&lt;p&gt;2147483647 is the maximum number of bytes we know we can always accept in a LOB column.&lt;/p&gt;

&lt;p&gt;Returning the latter number would have been more in line with my expectation of how that method should work, I think. But I agree that the implemented behaviour is a just as reasonable interpretation of the words in the spec. I suppose the text was written for databases that store CLOBs as BLOBs internally, and whose maximum CLOB size is limited by the maximum number of bytes a BLOB can hold.&lt;/p&gt;</comment>
                            <comment id="13573481" author="rhillegas" created="Thu, 7 Feb 2013 13:35:19 +0000"  >&lt;p&gt;Thanks for looking at that patch, Knut. I was working from the specdiffs, which give the method name as getMaxLogicalLOBSize(). I&apos;ve tripped across some other cases where names in the specdiffs don&apos;t agree with what&apos;s in the actual Open JDK 8 classes. I&apos;ll correct this one.&lt;/p&gt;

&lt;p&gt;I&apos;ll ask Lance if he has any advice about what this method should return on Derby. Seems to me there are at least 2 theories about this:&lt;/p&gt;

&lt;p&gt;o 4294967294 - The maximum number of bytes which an in-memory CLOB can consume. This is misleading for people interested in the maximum number of bytes which can be stored in the database.&lt;/p&gt;

&lt;p&gt;o 2147483647 - The maximum number of bytes in a LOB stored in the database. This is misleading for people who are interested in the memory representation.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13573780" author="rhillegas" created="Thu, 7 Feb 2013 18:58:58 +0000"  >&lt;p&gt;Attaching derby-6000-09-ac-setObjectPS.diff. This patch adds support for the new PreparedStatement.setObject() overloads added by JDBC 4.2. I am running tests now.&lt;/p&gt;

&lt;p&gt;Adds the following methods to the embedded and client drivers:&lt;/p&gt;

&lt;p&gt;  PreparedStatement.setObject(int parameterIndex, java.lang.Object x, SQLType targetSqlType)&lt;br/&gt;
  PreparedStatement.setObject(int parameterIndex, java.lang.Object x, SQLType targetSqlType, int scaleOrLength)&lt;/p&gt;

&lt;p&gt;The new overloads implement the following logic:&lt;/p&gt;

&lt;p&gt;a) Raise an exception if SQLType is not a JDBCType whose corresponding type in java.sql.Types is supported by Derby.&lt;/p&gt;

&lt;p&gt;b) Otherwise forward the call to the corresponding setObject() overload, using the corresponding type from java.sql.Types.&lt;/p&gt;

&lt;p&gt;This patch adds a new JDBC 4.2 module to the engine. Additional JDBC 4.2 work can expand this module. Some temporary build logic has been added to allow the build to succeed if you are building with a version of Java before version 8. We can remove this temporary logic once Java 8 goes live and we can create JDBC 4.2 stubs parallel to the stubs for previous JDBC versions.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/build/org/apache/derbyBuild/classlister.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/modules.properties&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/build.xml&lt;/p&gt;

&lt;p&gt;Build logic.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/types/HarmonySerialBlob.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLBlob.java&lt;/p&gt;

&lt;p&gt;Removed an unneeded exception declaration from a HarmonySerialBlob constructor.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/shared/org/apache/derby/shared/common/reference/JDBC40Translation.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/TypeId.java&lt;/p&gt;

&lt;p&gt;JDBC 4.2 adds a new type id: REF_CURSOR.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection42.java&lt;br/&gt;
A       java/engine/org/apache/derby/jdbc/Driver42.java&lt;/p&gt;

&lt;p&gt;New JDBC 4.2 engine module.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/CrossConverters.java&lt;/p&gt;

&lt;p&gt;The tests for this patch tripped over an existing bug in the client driver: PreparedStatement.setObject( int, Object, int ) fails if you are trying to set a UDT. The simpler overload of this method (setObject( int, Object )) was tested and worked. I have added a little logic to make the failing overload work in this case. The overload which used to fail is tested by the new tests added for this feature.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement42.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/jdbc/Util42.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement42.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/Util.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;/p&gt;

&lt;p&gt;Embedded support for the new PreparedStatement.setObject() overloads.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
A       java/client/org/apache/derby/client/am/LogicalPreparedStatement42.java&lt;br/&gt;
A       java/client/org/apache/derby/client/am/PreparedStatement42.java&lt;br/&gt;
A       java/client/org/apache/derby/client/am/Utils42.java&lt;/p&gt;

&lt;p&gt;Client support for the new PreparedStatement.setObject() overloads.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/Price.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;/p&gt;

&lt;p&gt;Tests for the new overloads. The tests execute if you are running on Java 8 or higher.&lt;/p&gt;</comment>
                            <comment id="13573879" author="rhillegas" created="Thu, 7 Feb 2013 20:17:29 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-09-ac-setObjectPS.diff. Committed at subversion revision 1443697.&lt;/p&gt;</comment>
                            <comment id="13573903" author="rhillegas" created="Thu, 7 Feb 2013 20:40:21 +0000"  >&lt;p&gt;Attaching derby-6000-10-aa-rename_getMaxLogicalLobSize.diff. This patch renames DatabaseMetaData.getMaxLogicalLOBSize() to getMaxLogicalLobSize(). Committed at subversion revision 1443712.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Limits.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Wrapper42DBMD.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/LogicalDatabaseMetaData40.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/DatabaseMetaData.java&lt;/p&gt;</comment>
                            <comment id="13574333" author="kristwaa" created="Fri, 8 Feb 2013 09:03:51 +0000"  >&lt;p&gt;&amp;gt; I&apos;ll ask Lance if he has any advice about what this method should return on Derby.&lt;br/&gt;
&amp;gt; Seems to me there are at least 2 theories about this:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; o 4294967294 - The maximum number of bytes which an in-memory CLOB can consume.&lt;br/&gt;
&amp;gt;   This is misleading for people interested in the maximum number of bytes which can be stored in the database.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; o 2147483647 - The maximum number of bytes in a LOB stored in the database.&lt;br/&gt;
&amp;gt;  This is misleading for people who are interested in the memory representation.&lt;/p&gt;

&lt;p&gt;My take on this is that people would use this method to figure out how big LOBs they can store in the database. I don&apos;t think they care about representation (i.e. on-disk vs in-memory). This gives rise to two questions:&lt;br/&gt;
 a) How many bytes can I stuff into a single BLOB?&lt;br/&gt;
 b) How many characters can I stuff into a single CLOB?&lt;/p&gt;

&lt;p&gt;I hope the above is the intention of the method - I fail to immediately see any other meaningful uses of it.&lt;/p&gt;

&lt;p&gt;The answers to (a) and (b) may be different for some databases, for instance because the DBMS has an internal limitation on how many bytes it can store/handle. Combined with the fact that one character doesn&apos;t always equal one byte, that could make the maximum size of a CLOB data dependent (i.e. storing English vs Chinese text).&lt;/p&gt;</comment>
                            <comment id="13574688" author="rhillegas" created="Fri, 8 Feb 2013 18:20:29 +0000"  >&lt;p&gt;Attaching derby-6000-11-aa-ResultSet.updateObject.diff. This patch adds the new ResultSet methods introduced by JDBC 4.2. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch adds the following new methods to the embedded and client implementations of java.sql.ResultSet:&lt;/p&gt;

&lt;p&gt;    public void updateObject( int columnIndex, Object x, SQLType targetSqlType )&lt;br/&gt;
    public void updateObject( int columnIndex, Object x, SQLType targetSqlType, int scaleOrLength )&lt;br/&gt;
    public void updateObject( String columnName, Object x, SQLType targetSqlType )&lt;br/&gt;
    public void updateObject( String columnName, Object x, SQLType targetSqlType, int scaleOrLength )&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/Driver42.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;A       java/client/org/apache/derby/client/net/NetResultSet42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl42.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;/p&gt;

&lt;p&gt;Tests for new methods.&lt;/p&gt;</comment>
                            <comment id="13574774" author="rhillegas" created="Fri, 8 Feb 2013 20:03:57 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-11-aa-ResultSet.updateObject.diff. Committed at subversion revision 1444210.&lt;/p&gt;</comment>
                            <comment id="13575966" author="rhillegas" created="Mon, 11 Feb 2013 18:56:34 +0000"  >&lt;p&gt;Attaching derby-6000-12-aa-CallableStatement.registerOutParameter.diff. This patch adds the new JDBC 4.2 registerOutParameter overloads to CallableStatement. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch adds the following new overloads to the embedded and client implementations of java.sql.CallableStatement:&lt;/p&gt;

&lt;p&gt;    public void registerOutParameter(int parameterIndex, SQLType sqlType)&lt;br/&gt;
    public void registerOutParameter(int parameterIndex, SQLType sqlType,int scale)&lt;br/&gt;
    public void registerOutParameter(int parameterIndex, SQLType sqlType, java.lang.String typeName)&lt;br/&gt;
    public void registerOutParameter(java.lang.String parameterName, SQLType sqlType)&lt;br/&gt;
    public void registerOutParameter(java.lang.String parameterName, SQLType sqlType, int scale)&lt;br/&gt;
    public void registerOutParameter(java.lang.String parameterName, SQLType sqlType, java.lang.String typeName)&lt;/p&gt;

&lt;p&gt;This patch also corrects the behavior of the following CallableStatement methods. Derby was throwing an &quot;unimplemented feature&quot; exception. For drivers which don&apos;t need the typeName argument, the correct behavior is to ignore it:&lt;/p&gt;

&lt;p&gt;    public void registerOutParameter(int parameterIndex, int sqlType, java.lang.String typeName)&lt;br/&gt;
    public void registerOutParameter(java.lang.String parameterName, int sqlType, java.lang.String typeName)&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement42.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection40.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection42.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/Driver42.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/net/ClientJDBCObjectFactoryImpl42.java&lt;br/&gt;
A       java/client/org/apache/derby/client/am/LogicalCallableStatement42.java&lt;br/&gt;
A       java/client/org/apache/derby/client/am/CallableStatement42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/CallableStatement.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/XA40Test.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;/p&gt;

&lt;p&gt;New tests. At this point, PreparedStatementTest42 should probably be renamed to something like SQLTypeTest42. That can be done in a later patch.&lt;/p&gt;</comment>
                            <comment id="13576120" author="rhillegas" created="Mon, 11 Feb 2013 21:00:33 +0000"  >&lt;p&gt;Tests passed cleanly except that they stumbled over a case which canonized the previous wrong behavior of CallableStatement.registerOutParameter(int, int, String). The first rev of this patch corrected the behavior of that method. The wrong behavior canon was added by work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1184&quot; title=&quot;&amp;#39;CallableStatement.registerOutParameter(int,int,String)&amp;#39; does nothing in client driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1184&quot;&gt;&lt;del&gt;DERBY-1184&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Attaching a new version of the patch, which removes the offending test case: derby-6000-12-ab-CallableStatement.registerOutParameter. Committed at subversion revision 1444960.&lt;/p&gt;

&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/CallableTest.java&lt;/p&gt;</comment>
                            <comment id="13576684" author="rhillegas" created="Tue, 12 Feb 2013 15:31:51 +0000"  >&lt;p&gt;Attaching derby-6000-13-aa-fixJavadoc.diff. This patch fixes the javadoc when built on Java 7. Committed at subversion revision 1445196.&lt;/p&gt;

&lt;p&gt;Myrna noticed that the automated javadoc builds were spewing pages of warnings caused by the fact that the Java 7 javadoc tool can&apos;t find the new java.sql classes referenced by the *42 Derby classes. This patch makes the javadoc build exclude the Derby *42 classes. After applying this patch, the javadoc builds cleanly for me on Java 7.&lt;/p&gt;

&lt;p&gt;Note that the javadoc does not build cleanly on Java 8. I see pages of warnings because of missing @param and @throws annotations. I regard that as a separate problem which deserves its own patch.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       build.xml&lt;br/&gt;
A       tools/javadoc/derbydocs_java8_exclusions.ant&lt;br/&gt;
M       tools/javadoc/derbydocs_exclusions.ant&lt;/p&gt;</comment>
                            <comment id="13576738" author="rhillegas" created="Tue, 12 Feb 2013 16:22:26 +0000"  >&lt;p&gt;Attaching derby-6000-14-aa-unsupportedVetter.diff. This patch excludes some new JDBC 4.2 methods from the checks performed by the UnsupportedVetter test. Committed at subversion revision 1445235.&lt;/p&gt;

&lt;p&gt;Previously, this test excluded all overloads of CallableStatement.registerOutParameter() which identified the parameter by its string name. JDBC 4.2 adds 3 more overloads of this sort. The patch excludes those overloads.&lt;/p&gt;

&lt;p&gt;After applying this patch, UnsupportedVetter continues to fail on Java 8. It correctly flags the couple remaining JDBC 4.2 methods which have not been implemented yet.&lt;/p&gt;

&lt;p&gt;UnsupportedVetter continues to run cleanly on Java 7.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java&lt;/p&gt;</comment>
                            <comment id="13576852" author="rhillegas" created="Tue, 12 Feb 2013 18:18:31 +0000"  >&lt;p&gt;Attaching derby-6000-15-aa-CallableStatement.setObject.diff. This patch adds the new CallableStatement.setObject() overloads introduced by JDBC 4.2. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch adds the following methods to the embedded and client implementations of CallableStatement:&lt;/p&gt;

&lt;p&gt;    public  void setObject( int parameterIndex, java.lang.Object x, SQLType targetSqlType )&lt;br/&gt;
    public void setObject( int parameterIndex, java.lang.Object x, SQLType targetSqlType, int scaleOrLength )&lt;br/&gt;
    public  void setObject( String parameterName, Object x, SQLType sqlType )&lt;br/&gt;
    public  void setObject( String parameterName, Object x, SQLType sqlType, int scaleOrLength )&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement42.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement42.java&lt;/p&gt;

&lt;p&gt;Embedded changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/LogicalCallableStatement42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/CallableStatement42.java&lt;/p&gt;

&lt;p&gt;Client changes.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="13576952" author="rhillegas" created="Tue, 12 Feb 2013 19:58:00 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-15-aa-CallableStatement.setObject.diff. Committed at subversion revision 1445327.&lt;/p&gt;</comment>
                            <comment id="13576959" author="rhillegas" created="Tue, 12 Feb 2013 20:02:22 +0000"  >&lt;p&gt;Concerning DatabaseMetaData.getMaxLogicalLobSize(), JDBC spec lead Lance Andersen suggests that Derby should return 0, the default, which means &quot;unknown&quot;.&lt;/p&gt;</comment>
                            <comment id="13577028" author="rhillegas" created="Tue, 12 Feb 2013 21:27:23 +0000"  >&lt;p&gt;Attaching derby-6000-16-aa-fixJavadocOnJava8.diff. This patch fixes the javadoc build on Java 8. Committed at subversion revision 1445393.&lt;/p&gt;

&lt;p&gt;There were 2 problems in the javadoc build on Java 8:&lt;/p&gt;

&lt;p&gt;1) The spew of warnings about missing @throws and @param annotations was caused by &lt;a href=&quot;http://openjdk.java.net/jeps/172&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/jeps/172&lt;/a&gt; . It can be turned off by adding a -Xdoclint:none to the javadoc invocation.&lt;/p&gt;

&lt;p&gt;2) Then there were a bunch of complaints that the standalone _ character may not be a legal identifier in future revs of Java. This is fixed by replacing _ with another character in all of the test tables where we were using _ to mean &quot;false&quot; or &quot;unknown&quot;.&lt;/p&gt;

&lt;p&gt;After applying this patch, I can build javadoc cleanly on Java 7 and Java 8.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/LobRsGetterTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/JDBCDriverTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java&lt;br/&gt;
M       build.xml&lt;/p&gt;</comment>
                            <comment id="13577566" author="rhillegas" created="Wed, 13 Feb 2013 13:41:38 +0000"  >&lt;p&gt;Attaching derby-6000-17-aa-getMaxLogicalLobSize.diff. This patch makes DatabaseMetaData.getMaxLogicalLobSize() return 0 as Lance suggests. Tests passed cleanly for me. Committed at revision 1445591.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Limits.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/DatabaseMetaData.java&lt;/p&gt;</comment>
                            <comment id="13577571" author="rhillegas" created="Wed, 13 Feb 2013 13:49:43 +0000"  >&lt;p&gt;Attaching a revised version of the functional spec. This includes a status column which I added to the tables in order to track progress on this JIRA. At this point, I believe that I have addressed all of the changes made by JDBC 4.2. The UnsupportedVetter test now runs cleanly for me on Java 8.&lt;/p&gt;

&lt;p&gt;I plan to do more testing and put more effort into improving the build/test experience on Java 8. However, I think that this project is ready for buddy-testing now.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13578869" author="rhillegas" created="Fri, 15 Feb 2013 01:14:33 +0000"  >&lt;p&gt;Attaching derby-6000-18-aa-checkForClosedBeforeForwarding.diff. This fixes a problem in ClosedObjectTest when running on Java 8. I am running tests now.&lt;/p&gt;

&lt;p&gt;ClosedObjectTest trips across an NPE because the new ResultSet.updateObject() overloads try to forward themselves before checking whether the ResultSet is closed. This patch makes them first check whether the ResultSet is closed.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedResultSet42.java&lt;/p&gt;</comment>
                            <comment id="13579156" author="rhillegas" created="Fri, 15 Feb 2013 13:07:01 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-6000-18-aa-checkForClosedBeforeForwarding.diff. Committed at subversion revision 1446562.&lt;/p&gt;</comment>
                            <comment id="13587426" author="rhillegas" created="Tue, 26 Feb 2013 19:26:25 +0000"  >&lt;p&gt;Attaching derby-6000-19-ab-miscBuddyTestingFixes.diff. This patch addresses concerns raised by buddy testing. Those concerns are described here: &lt;a href=&quot;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&lt;/a&gt; . I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Implementations of the new CallableStatement overloads were made more readable by removing try-catch blocks and factoring a status check into a common helper method.&lt;/p&gt;

&lt;p&gt;2) &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6088&quot; title=&quot;PreparedStatementTest42 lacks &amp;quot;fail&amp;quot; call when operation unexpectedly succeeds&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6088&quot;&gt;&lt;del&gt;DERBY-6088&lt;/del&gt;&lt;/a&gt; is addressed by adding a failure condition to PreparedStatementTest42.&lt;/p&gt;

&lt;p&gt;3) Driver.acceptsURL() and connect() now throw a SQLException if the url is null, per the JDBC 4.2 spec clarification.&lt;/p&gt;

&lt;p&gt;4) The list of illegal JDBC types is longer now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/CallableStatement42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/PreparedStatement42.java&lt;/p&gt;

&lt;p&gt;Changes for (1).&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/ConnectionChild.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;br/&gt;
M       java/client/org/apache/derby/client/am/Agent.java&lt;/p&gt;

&lt;p&gt;Changes for (2) and (4).&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/jdbc/JDBC.java&lt;br/&gt;
M       java/engine/org/apache/derby/jdbc/InternalDriver.java&lt;br/&gt;
M       java/engine/org/apache/derby/mbeans/JDBCMBean.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DriverTest.java&lt;br/&gt;
M       java/client/org/apache/derby/jdbc/ClientDriver.java&lt;/p&gt;

&lt;p&gt;Changes for (3).&lt;/p&gt;</comment>
                            <comment id="13587555" author="rhillegas" created="Tue, 26 Feb 2013 21:06:03 +0000"  >&lt;p&gt;Attaching derby-6000-19-ac-miscBuddyTestingFixes.diff. The previous rev of the patch tripped one error in the tests. This rev fixes that problem. Committed at subversion revision 1450422.&lt;/p&gt;

&lt;p&gt;The problem is that I made java.sql.Types.NULL an illegal type. The value of java.sql.Type.NULL is 0. This is the default value for integer args used by the UnsupportedVetter test. That test was reporting that Derby no longer supported various type-aware overloads. The fix was to change the default value used by UnsupportedVetter from 0 to 1 (java.sql.Types.CHAR).&lt;/p&gt;

&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java&lt;/p&gt;</comment>
                            <comment id="13588352" author="rhillegas" created="Wed, 27 Feb 2013 13:59:26 +0000"  >&lt;p&gt;Attaching derby-6000-20-aa-negativeUpdateObject.diff.  This patch adds negative tests for the new ResultSet.updateObject() overloads as suggested by buddy testing (see &lt;a href=&quot;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenTenOneBuddyTesting&lt;/a&gt;). Committed at subversion revision 1450776.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest42.java&lt;/p&gt;</comment>
                            <comment id="13601128" author="rhillegas" created="Wed, 13 Mar 2013 13:18:52 +0000"  >&lt;p&gt;I believe that work on this issue is done.&lt;/p&gt;</comment>
                            <comment id="13621046" author="rhillegas" created="Wed, 3 Apr 2013 17:53:42 +0100"  >&lt;p&gt;Attaching derby-6000-21-aa-fixUnsupportedVetterForDerby10_9onJDK8.diff. This is the first patch to fix the UnsupportedVetter test when run with 10.9 jars on Java 8. The new methods added by JDBC 4.2 cause UnsupportedVetter to fail on that platform. Committed at subversion revision 1464103.&lt;/p&gt;</comment>
                            <comment id="13621061" author="rhillegas" created="Wed, 3 Apr 2013 18:03:04 +0100"  >&lt;p&gt;Ported 1464103 from trunk to 10.10 branch at subversion revision 1464107.&lt;/p&gt;</comment>
                            <comment id="13621087" author="rhillegas" created="Wed, 3 Apr 2013 18:34:15 +0100"  >&lt;p&gt;Attaching derby-6000-22-aa-disableUnsupportedVetterForDerby10_9onJDK8.diff. This patch disables the UnsupportedVetter test when running 10.9 on JDK 8. We don&apos;t expect to see Derby support for JDBC 4.2 on that release of Derby. Committed to 10.9 branch at subversion revision 1464117.&lt;/p&gt;</comment>
                            <comment id="13621106" author="rhillegas" created="Wed, 3 Apr 2013 18:53:01 +0100"  >&lt;p&gt;Committed derby-6000-22-aa-disableUnsupportedVetterForDerby10_9onJDK8.diff to the 10.8 branch at subversion revision 1464120. There is no need to port this fix to the 10.7 branch because the UnsupportedVetter test has already been disabled when 10.7 runs on Java 7 or higher.&lt;/p&gt;</comment>
                            <comment id="13625314" author="rhillegas" created="Mon, 8 Apr 2013 13:07:36 +0100"  >&lt;p&gt;Attaching derby-6000-23-aa-suppressDiagnosticInUnsupportedVetter.diff. This patch suppresses a diagnostic in UnsupportedVetter when debug printing isn&apos;t on. That test handles the debug printing knob differently than most tests. Committed as follows:&lt;/p&gt;

&lt;p&gt;trunk: 1465600&lt;br/&gt;
10.10: 1465601&lt;br/&gt;
10.9: 1465604&lt;br/&gt;
10.8: 1465608&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/UnsupportedVetter.java&lt;/p&gt;</comment>
                            <comment id="13632114" author="kmarsden" created="Mon, 15 Apr 2013 21:10:55 +0100"  >&lt;p&gt;I noticed one of the changes in this issue was:&lt;/p&gt;

&lt;p&gt;1) Changes the datatype of the CARDINALITY and PAGES columns returned by getIndexInfo(). The column types are changed from INT to BIGINT. &lt;/p&gt;

&lt;p&gt;I think there should be a release note for this change.&lt;/p&gt;</comment>
                            <comment id="13634146" author="rhillegas" created="Wed, 17 Apr 2013 16:44:08 +0100"  >&lt;p&gt;I have logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6187&quot; title=&quot;Add a release note for metadata datatype changes introduced by JDBC 4.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6187&quot;&gt;&lt;del&gt;DERBY-6187&lt;/del&gt;&lt;/a&gt; as a vehicle for carrying a release note describing the change to the CARDINALITY and PAGES columns. I have attached a release note to that issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12331690">DERBY-1184</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12611663">DERBY-5949</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12632609">DERBY-6073</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12633546">DERBY-6088</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12633549">DERBY-6089</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12634415">DERBY-6094</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12666118">DERBY-6324</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12687141">DERBY-6445</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12632242">DERBY-6070</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12642956">DERBY-6187</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12569191" name="JDBC_4.2_Changes.html" size="24246" author="rhillegas" created="Wed, 13 Feb 2013 13:49:43 +0000"/>
                            <attachment id="12565991" name="JDBC_4.2_Changes.html" size="22126" author="rhillegas" created="Tue, 22 Jan 2013 19:01:15 +0000"/>
                            <attachment id="12566521" name="derby-6000-01-aa-executeLargeUpdateEmbedded.diff" size="13985" author="rhillegas" created="Fri, 25 Jan 2013 15:51:06 +0000"/>
                            <attachment id="12566828" name="derby-6000-02-ad-executeLargeUpdateClient.diff" size="49277" author="rhillegas" created="Mon, 28 Jan 2013 21:42:23 +0000"/>
                            <attachment id="12566996" name="derby-6000-03-aa-executeLargeBatch.diff" size="14560" author="rhillegas" created="Tue, 29 Jan 2013 16:20:51 +0000"/>
                            <attachment id="12567183" name="derby-6000-04-aa-setLargeMaxRows.diff" size="17663" author="rhillegas" created="Wed, 30 Jan 2013 18:57:22 +0000"/>
                            <attachment id="12567375" name="derby-6000-05-aa-executeLargeUpdatePS.diff" size="11427" author="rhillegas" created="Thu, 31 Jan 2013 15:55:30 +0000"/>
                            <attachment id="12567432" name="derby-6000-06-aa-DatabaseMetaData.diff" size="10942" author="rhillegas" created="Thu, 31 Jan 2013 20:49:50 +0000"/>
                            <attachment id="12567847" name="derby-6000-07-ab-batchUpdateException.diff" size="42591" author="rhillegas" created="Mon, 4 Feb 2013 15:59:04 +0000"/>
                            <attachment id="12568221" name="derby-6000-08-aa-batchUpdateExceptionConstructor.diff" size="5198" author="rhillegas" created="Wed, 6 Feb 2013 13:39:11 +0000"/>
                            <attachment id="12568440" name="derby-6000-09-ac-setObjectPS.diff" size="59206" author="rhillegas" created="Thu, 7 Feb 2013 18:58:58 +0000"/>
                            <attachment id="12568460" name="derby-6000-10-aa-rename_getMaxLogicalLobSize.diff" size="5333" author="rhillegas" created="Thu, 7 Feb 2013 20:40:21 +0000"/>
                            <attachment id="12568610" name="derby-6000-11-aa-ResultSet.updateObject.diff" size="19473" author="rhillegas" created="Fri, 8 Feb 2013 18:20:29 +0000"/>
                            <attachment id="12568860" name="derby-6000-12-aa-CallableStatement.registerOutParameter.diff" size="36853" author="rhillegas" created="Mon, 11 Feb 2013 18:56:34 +0000"/>
                            <attachment id="12568887" name="derby-6000-12-ab-CallableStatement.registerOutParameter.diff" size="38600" author="rhillegas" created="Mon, 11 Feb 2013 21:00:33 +0000"/>
                            <attachment id="12568984" name="derby-6000-13-aa-fixJavadoc.diff" size="2987" author="rhillegas" created="Tue, 12 Feb 2013 15:31:51 +0000"/>
                            <attachment id="12568998" name="derby-6000-14-aa-unsupportedVetter.diff" size="3097" author="rhillegas" created="Tue, 12 Feb 2013 16:22:26 +0000"/>
                            <attachment id="12569029" name="derby-6000-15-aa-CallableStatement.setObject.diff" size="16934" author="rhillegas" created="Tue, 12 Feb 2013 18:18:31 +0000"/>
                            <attachment id="12569061" name="derby-6000-16-aa-fixJavadocOnJava8.diff" size="40053" author="rhillegas" created="Tue, 12 Feb 2013 21:27:23 +0000"/>
                            <attachment id="12569190" name="derby-6000-17-aa-getMaxLogicalLobSize.diff" size="3554" author="rhillegas" created="Wed, 13 Feb 2013 13:41:38 +0000"/>
                            <attachment id="12569433" name="derby-6000-18-aa-checkForClosedBeforeForwarding.diff" size="1398" author="rhillegas" created="Fri, 15 Feb 2013 01:14:33 +0000"/>
                            <attachment id="12571036" name="derby-6000-19-ab-miscBuddyTestingFixes.diff" size="19183" author="rhillegas" created="Tue, 26 Feb 2013 19:26:25 +0000"/>
                            <attachment id="12571057" name="derby-6000-19-ac-miscBuddyTestingFixes.diff" size="19979" author="rhillegas" created="Tue, 26 Feb 2013 21:06:03 +0000"/>
                            <attachment id="12571195" name="derby-6000-20-aa-negativeUpdateObject.diff" size="2075" author="rhillegas" created="Wed, 27 Feb 2013 13:59:26 +0000"/>
                            <attachment id="12576807" name="derby-6000-21-aa-fixUnsupportedVetterForDerby10_9onJDK8.diff" size="3972" author="rhillegas" created="Wed, 3 Apr 2013 17:53:42 +0100"/>
                            <attachment id="12576814" name="derby-6000-22-aa-disableUnsupportedVetterForDerby10_9onJDK8.diff" size="2234" author="rhillegas" created="Wed, 3 Apr 2013 18:34:15 +0100"/>
                            <attachment id="12577519" name="derby-6000-23-aa-suppressDiagnosticInUnsupportedVetter.diff" size="748" author="rhillegas" created="Mon, 8 Apr 2013 13:07:36 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Feb 2013 13:13:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>258623</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hyew67:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>120909</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>