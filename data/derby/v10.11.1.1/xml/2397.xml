<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:27:20 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2397/DERBY-2397.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2397] Dropping SQL objects could be improved by reducing the number of classes required.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2397</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The current flow for a DROP statement, such as a DROP FUNCTION is roughly as follows:&lt;/p&gt;

&lt;p&gt;  Compile time:&lt;br/&gt;
             c1) find the TupleDescriptor for the object to verify it exists (e.g. AliasDescriptor, TriggerDescriptor)&lt;br/&gt;
             c2) create an instance of a type specific ConstantAction (e.g. DropAliasConstantAction), information&lt;br/&gt;
                   is passed into the ConstantAction to allow it to re-create the TupleDescriptor, but doesn&apos;t pass the actual TupleDescriptor.&lt;br/&gt;
                   (E.g. the schema name, alias type and routine name is passed to the DropAliasConstantAction)&lt;/p&gt;

&lt;p&gt;    Execute time (which may be sometime later than compile time) calls executeConstantAction on the object specific ConstantAction&lt;br/&gt;
             e1) execute verify a matching object exists by finding a matching TupleDescriptor&lt;br/&gt;
             e2) drop the object&lt;/p&gt;

&lt;p&gt;This could be simplified by utilizing the polymorphic nature of TupleDescriptors. Then all the DropXXXConstantActions could be replaced with&lt;br/&gt;
a single DropDescriptorConstantAction that was created with a TupleDescriptor at compile time.  Two new abstract methods would be added to&lt;br/&gt;
TupleDescriptor, getCurrent() and drop().&lt;/p&gt;

&lt;p&gt;Then the execute steps would be:&lt;/p&gt;

&lt;p&gt;      en1) Get the current TupleDescriptor using the getCurrent() method of the Tupledescriptor passed in at compile time.&lt;br/&gt;
                This method may return the same object, a different instance that refers to the same SQL object or an instance&lt;br/&gt;
                that refers to a different SQL object of the same name.&lt;br/&gt;
                    descriptor = descriptor.getCurrent()&lt;/p&gt;

&lt;p&gt;    en2) Drop the descriptor.&lt;br/&gt;
                   descriptor.drop().&lt;/p&gt;

&lt;p&gt;Thus the checking and drop code would move from the SQL object specific ConstantActions into the SQL object specific TupleDescriptors and&lt;br/&gt;
then all of the DropXXXConstantActions classes would be replaced with a single generic one. Thus removing around six classes.&lt;/p&gt;

&lt;p&gt;Grant/revoke changes has almost started this approach, where some instances of TupleDescriptor (e.g. ViewDescriptor) and the matching constant action &lt;br/&gt;
to drop an item share code.  This alerted me to the pattern that is really required, that of a drop() method in TupleDescriptor.&lt;/p&gt;

&lt;p&gt;I&apos;ll have a patch sometime over the weekend that shows an incremental approach for a couple of SQL objects.&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12364032">DERBY-2397</key>
            <summary>Dropping SQL objects could be improved by reducing the number of classes required.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                    </labels>
                <created>Sat, 3 Mar 2007 18:25:11 +0000</created>
                <updated>Tue, 2 Oct 2012 06:25:24 +0100</updated>
                                                                            <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12477687" author="djd" created="Sat, 3 Mar 2007 21:05:52 +0000"  >&lt;p&gt;The code to drop any descriptor representing a SQL object is a mix of OO fully encapsulated dependencies and explicit knowledge/dependencies between objects.&lt;br/&gt;
A move to a pure OO fully encapsulated based upon the existing dependencies would simplify the code.&lt;/p&gt;

&lt;p&gt;As an example a drop of a table should simply invalidate all of its dependents with a DROP_TABLE action, then dependent objects like triggers &amp;amp; constraints would drop themselves and invalidate their dependencies. The drop code in the table descriptor would be simply responsible for sending the invalidation and then removing itself (the row in SYSTABLES) from the dictionary.&lt;/p&gt;

&lt;p&gt;Currently the table descriptor knows about its triggers &amp;amp; constraints and drops those explicitly (with some code that indicates it has hacks), but drops other objects through the dependency system.&lt;/p&gt;

&lt;p&gt;Having the drop logic for any descriptor encapsulated in the object itself is a better OO model and can lead to smaller code and less buggy code.&lt;br/&gt;
As any change required in the drop logic is in one place rather than spread out across many objects.&lt;/p&gt;</comment>
                            <comment id="12477800" author="bryanpendleton" created="Sun, 4 Mar 2007 16:20:30 +0000"  >&lt;p&gt;This sounds like a great idea. I struggled with several instances of this problem during ALTER TABLE testing.&lt;/p&gt;</comment>
                            <comment id="12478682" author="djd" created="Wed, 7 Mar 2007 04:25:19 +0000"  >&lt;p&gt;Having investigated a little more, moving to a pure-oo model has a couple of drawbacks:&lt;/p&gt;

&lt;p&gt;  1) Additional on-disk footprint for objects to store dependencies where previously the dependency was &quot;hard-coded&quot; in the create &amp;amp; drop code.&lt;br/&gt;
      E.g. a view has a table descriptor and a view descriptor and no dependency exists between them in SYSDEPENDS, just in the code.&lt;/p&gt;

&lt;p&gt;   2) Would need upgrade code to create on-disk dependencies (in SYSDEPENDS) where previously only hard-coded ones exist.&lt;/p&gt;

&lt;p&gt;I think I will take this as far as it can go without hitting the above issues, i.e. only changes that do not require on-disk changes.&lt;br/&gt;
Some of this will include adding comments in the CreateXXXConstantActions that document what objects are created and what dependencies are created,&lt;br/&gt;
like the one I justed added in CreateViewConstantAction. This might make it easier to understand the code when implementing something like alter table.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 4 Mar 2007 16:20:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30421</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08cn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35171</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>