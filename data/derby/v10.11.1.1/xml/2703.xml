<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2703/DERBY-2703.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2703] calling DatabaseMetaData.getColumns() with % for matching column character in a territory based collated db does not work in 1.4.2 jvms</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2703</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;calling DatabaseMetaData.getColumns(null, &quot;APP&quot;, &quot;CUSTOMER&quot;, &quot;%&quot;) returns no rows for a valid APP.CUSTOMER table&lt;br/&gt;
in ibm142 and sun142 jvms, for databases created with territory based collation, fails in all 3 cases we test in the &lt;br/&gt;
CollationTest2.java junit test.&lt;/p&gt;

&lt;p&gt;Since this is a system catalog query I am surprised the result is affected at all by collation, so there may be a derby bug &lt;br/&gt;
in the metadata routines, or elsewhere.  Mamta, could you comment if you believe this should work already - or if there&lt;br/&gt;
is more work to do in this area.&lt;/p&gt;

&lt;p&gt;I will soon checkin a test case into the CollationTest2.java unit test that shows this.  For now I will either comment out the&lt;br/&gt;
entire test, or if I can figure out how to not run it on 142 I will do that.&lt;/p&gt;</description>
                <environment>have reproduced on ibm142 and sun142 jvms</environment>
        <key id="12370337">DERBY-2703</key>
            <summary>calling DatabaseMetaData.getColumns() with % for matching column character in a territory based collated db does not work in 1.4.2 jvms</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12345445">DERBY-1478</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mikem">Mike Matrigali</reporter>
                        <labels>
                    </labels>
                <created>Sun, 27 May 2007 04:28:21 +0100</created>
                <updated>Wed, 11 Jul 2007 23:32:50 +0100</updated>
                            <resolved>Tue, 3 Jul 2007 19:48:37 +0100</resolved>
                                    <version>10.3.1.4</version>
                                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12499383" author="mikem" created="Sun, 27 May 2007 05:00:14 +0100"  >&lt;p&gt;I believe this underlying problem is also what is causing the CollationTest2.java unit test to fail on 142 jvms with the following&lt;br/&gt;
error:&lt;br/&gt;
&lt;a href=&quot;http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/lin/541699-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/Daily/jvm1.4/testing/testlog/lin/541699-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the error is table does not exist, it is actually not the case.  This error is coming from a call to the &lt;br/&gt;
import procedure.  Both the import and export procedures use the getColumns call to get information about &lt;br/&gt;
all the columns, basically the exact query as above.  The import/export code is interpreting getting no columns&lt;br/&gt;
back from a % as a table does not exist.  A very misleading  errror, but can&apos;t think of a non-bug case where &lt;br/&gt;
this would happen, but it did baffle me for awhile trying to figure out where a table went that was just valid on &lt;br/&gt;
the previous statement.&lt;/p&gt;

&lt;p&gt;Here is an example of one of the stacks:&lt;/p&gt;

&lt;p&gt;testNorwayCollation(org.apache.derbyTesting.functionTests.tests.lang.CollationTest2)java.sql.SQLException: Table &apos;APP.CUSTOMER&apos; does not exist.  &lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.doImportTable(CollationTest2.java:277)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runBulkInsert(CollationTest2.java:820)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runTestIter(CollationTest2.java:948)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testNorwayCollation(CollationTest2.java:979)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:88)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: ERROR XIE0M: Table &apos;APP.CUSTOMER&apos; does not exist.  &lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.load.LoadError.tableNotFound(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.load.ColumnInfo.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.load.Import.performImport(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.load.Import.importTable(Unknown Source)&lt;br/&gt;
	at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE(Unknown Source)&lt;br/&gt;
	at org.apache.derby.exe.ac0f3928ccx0112xc696xa01dx000062ebfce91f5.g0(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	... 69 more&lt;/p&gt;</comment>
                            <comment id="12499433" author="mikem" created="Sun, 27 May 2007 20:01:41 +0100"  >&lt;p&gt;The following commit checks in a test case for this issue:&lt;br/&gt;
Checking in a test to show problem with calling getColumn().  The test is&lt;br/&gt;
disabled on 1.4.2 where it breaks.  To reproduce bug need to change test to&lt;br/&gt;
run the runDERBY_2703() test case under 142, and run the test under either&lt;br/&gt;
sun or ibm 1.4.2 jvm.&lt;br/&gt;
It also disables the import/export based tests in this test for 1.4.2 as they&lt;br/&gt;
are also not working because of this issue.&lt;/p&gt;

&lt;p&gt;m3_jdk142:72&amp;gt;svn commit&lt;/p&gt;

&lt;p&gt;Sending        java\testing\org\apache\derbyTesting\functionTests\tests\lang\CollationTest2.java&lt;br/&gt;
Transmitting file data .&lt;br/&gt;
Committed revision 542020.&lt;/p&gt;</comment>
                            <comment id="12499502" author="knutanders" created="Mon, 28 May 2007 09:47:17 +0100"  >&lt;p&gt;The new test case caused four errors in the Tinderbox since it called SanityManager.DEBUG_PRINT() without checking SanityManager.DEBUG. Fixed in revision 542153.&lt;/p&gt;</comment>
                            <comment id="12499698" author="mikem" created="Tue, 29 May 2007 07:57:35 +0100"  >&lt;p&gt;thanks much knut for the fix.  I keep getting caught running my tests in sane and not seeing this kind of error.&lt;/p&gt;</comment>
                            <comment id="12499849" author="army" created="Tue, 29 May 2007 18:14:16 +0100"  >&lt;p&gt;&amp;gt; Since this is a system catalog query I am surprised the result is affected at all by collation, so&lt;br/&gt;
&amp;gt; there may be a derby bug in the metadata routines, or elsewhere. &lt;/p&gt;

&lt;p&gt;The metadata queries all have parameters (see metadata.properties) and are prepared via PreparedStatements (see EmbedDatabaseMetaData.java).  Since parameters always take the collation of the schema in which they are prepared, I wonder if the params are assuming territory-based collation?  If so, then comparison with a field from the system catalogs may not work as expected.  It seems like we should be throwing an error in that case (UCS vs territory comparison), but maybe something&apos;s going on under the covers that is masking/avoiding the error...?&lt;/p&gt;

&lt;p&gt;If you set the current schema to SYS before executing the getColumns() call, does that change anything?  Just a guess...I haven&apos;t actually done any investigation...&lt;/p&gt;</comment>
                            <comment id="12499850" author="army" created="Tue, 29 May 2007 18:18:15 +0100"  >&lt;p&gt;Oh wait, previous theory doesn&apos;t account for why the query would only fail with 142 JVMs.  Hmm.  Sorry for the noise.&lt;/p&gt;</comment>
                            <comment id="12499856" author="mamtas" created="Tue, 29 May 2007 18:25:34 +0100"  >&lt;p&gt;Army, I think the metadata queries get compiled in SYS schema and that is why the metadata queries don&apos;t fail for parameters since parameters will take the collation of SYS schema. But I haven&apos;t personally verified this. I think when we debug the peculiar JVM 142 specific bug, we will find out for sure. &lt;/p&gt;</comment>
                            <comment id="12499858" author="army" created="Tue, 29 May 2007 18:33:10 +0100"  >&lt;p&gt;&amp;gt;  think the metadata queries get compiled in SYS schema &lt;/p&gt;

&lt;p&gt;Thanks Mamta, good to know.&lt;/p&gt;</comment>
                            <comment id="12499979" author="mikem" created="Wed, 30 May 2007 01:14:56 +0100"  >&lt;p&gt;This problem also reproduces on J2ME environments, at least the ibm weme6.1 jvm on XP.  The test is currently marked to skip 1.4.2 jvms and  jvms with name: J2ME Foundation Specification v1.1&lt;/p&gt;</comment>
                            <comment id="12509976" author="mamtas" created="Tue, 3 Jul 2007 19:48:36 +0100"  >&lt;p&gt;Reported this as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2894&quot; title=&quot;calling DatabaseMetaData.getColumns() with % for matching column character in a territory based collated db does not work in 1.4.2 jvms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2894&quot;&gt;&lt;del&gt;DERBY-2894&lt;/del&gt;&lt;/a&gt; rather than as a sub-task of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12370458">DERBY-2716</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12372934">DERBY-2894</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 May 2007 08:47:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30571</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11fr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39883</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>