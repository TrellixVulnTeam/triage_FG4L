<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:10 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4491/DERBY-4491.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4491] The network client changes UDTs into Strings and returns their type as LONGVARBINARY.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4491</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is a pre-existing bug which seems to have been with Derby since the beginning. Some of the columns in the system tables (e.g., SYS.SYSALIASES.ALIASINFO) contain objects. If you select these columns:&lt;/p&gt;

&lt;p&gt;1) In the embedded client you will get the correct results. You will get the objects in these columns. In addition, the ResultSetMetaData for these columns will correctly report that the columns have type JAVA_OBJECT and will give a reasonable type name (the class name for the object in the column).&lt;/p&gt;

&lt;p&gt;2) However, in the network client, you will get the wrong results. ResultSet.getObject() will return Strings rather than the original objects. In addition, the ResultSetMetaData for these columns will incorrectly report that their type is LONGVARBINARY.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12444023">DERBY-4491</key>
            <summary>The network client changes UDTs into Strings and returns their type as LONGVARBINARY.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_backport_reject_10_5</label>
                    </labels>
                <created>Tue, 22 Dec 2009 16:25:54 +0000</created>
                <updated>Tue, 15 Mar 2011 20:28:24 +0000</updated>
                            <resolved>Tue, 15 Mar 2011 20:28:24 +0000</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12795671" author="rhillegas" created="Thu, 31 Dec 2009 20:52:40 +0000"  >&lt;p&gt;Here are some thoughts about how to address this issue.&lt;/p&gt;

&lt;p&gt;DRDA does support user defined types and our existing protocol flows maintain a placeholder for UDT information. Right now we plug a null into that placeholder. For more detail on this support, see the February 2007 version of the DRDA spec, Volume 1 (Data Definition and Exchange), section 5.6.4.10 (SQL Descriptor User-Defined Type Group Description, aka SQLUDTGRP).&lt;/p&gt;

&lt;p&gt;The DRDA support for user defined types, however, is not rich enough to describe the Java user defined types defined by part 13 of the ANSI/ISO SQL Standard. These are the user defined types identified by the JDBC type code java.sql.Types.JAVA_OBJECT. DRDA support only covers SQL distinct, struct, and ref types, that is, those which map to the STRUCT, DISTINCT, and REF constants in java.sql.Types. There is no corresponding DRDA constant mapping to java.sql.Types.JAVA_OBJECT. In addition, the DRDA protocol does not convey the Java class name needed to fulfill the JDBC contract for ResultSetMetaData.getColumnClassName() and ParameterMetaData.getParameterClassName().&lt;/p&gt;

&lt;p&gt;Therefore, in order to fulfill the JDBC contract, we will have to extend the DRDA protocol. I propose the following:&lt;/p&gt;

&lt;p&gt;1) For compatibility reasons, we will maintain the old, incorrect behavior if either the client or the server is NOT Derby code at level 10.6 or higher.&lt;/p&gt;

&lt;p&gt;2) However, if the client and server are both Derby code at version 10.6 or higher, then the user will see the embedded behavior. Internally, we will implement this with Derby-specific extensions to DRDA. This affects the following methods:&lt;/p&gt;

&lt;p&gt;ResultSet.getObject() - Will return the UDT object rather than the result of calling toString() on it.&lt;/p&gt;

&lt;p&gt;PreparedStatement.setObject() - Will accept UDTs if the parameter is typed as JAVA_OBJECT. The object being set must be an instance of the Java class which was bound to the UDT by the CREATE TYPE statement.&lt;/p&gt;

&lt;p&gt;ResultSetMetaData.getColumnType() and ParameterMetaData.getParameterType() - Will return JAVA_OBJECT rather than LONGVARBINARY.&lt;/p&gt;

&lt;p&gt;ResultSetMetaData.getColumnTypeName() and ParameterMetaData.getParameterTypeName() - Will return the fully qualified name of the UDT rather than LONG VARCHAR FOR BIT DATA. However, for our legacy user defined types (the ones stored in the system tables), we will continue to follow the embedded practice of returning the class name without any schema qualifier. So, for a column of type Price, we will return what is required by the JDBC spec&lt;/p&gt;

&lt;p&gt;  &quot;APP&quot;.&quot;PRICE&quot;&lt;/p&gt;

&lt;p&gt;but for SELECT ALIASINFO FROM SYS.SYSALIASES, we will return&lt;/p&gt;

&lt;p&gt;  org.apache.derby.catalog.AliasInfo&lt;/p&gt;

&lt;p&gt;This behavior for the system columns seems to fall short of the JDBC contract. However, these are special types and I am content to leave them alone. If we are not happy about this approach for the system columns, then we should open a new JIRA and come up with a better common behavior for both embedded and network usage.&lt;/p&gt;


&lt;p&gt;ResultSetMetaData.getColumnClassName() and ParameterMetaData.getParameterClassName() - Will return the name of the class bound to the UDT when it was defined.&lt;/p&gt;

&lt;p&gt;ResultSetMetaData.getColumnPrecision() and ParameterMetaData.getPrecision() - Will return 0 as in the embedded case.&lt;/p&gt;

&lt;p&gt;ResultSetMetaData.getColumnScale() and ParameterMetaData.getScale()- Will return 0 as in the embedded case.&lt;/p&gt;

&lt;p&gt;ResultSetMetaData.getColumnDisplaySize() - Will return 15 as in the embedded case. This is Derby&apos;s default column display size and seems arbitrary to me. However, I find it hard to argue for some other number. If we decide that some other number is better, then we should open a new JIRA and use the same number for both embedded and network situations.&lt;/p&gt;</comment>
                            <comment id="12795781" author="rhillegas" created="Fri, 1 Jan 2010 18:31:35 +0000"  >&lt;p&gt;Attaching derby-4491-01-ab-networkTransport.diff. This is a first rev of a patch to address this bug. This patch is not ready to commit yet: I need to write new regression tests to track the new behavior. However, the existing regression tests pass cleanly for me.&lt;/p&gt;

&lt;p&gt;This patch does the following:&lt;/p&gt;

&lt;p&gt;1) Makes network JDBC behavior mimic the embedded JDBC behavior as described in the previous comment. The behaviors agree when the client and server are Derby code at level 10.6 or higher. Otherwise, the network behavior continues to be what it was in previous releases--that is, the buggy behavior described by this JIRA.&lt;/p&gt;

&lt;p&gt;2) To satisfy the JDBC contract, this patch implements a Derby-only extension to DRDA at the point in the metadata exchange where we currently write a null SQLUDTGRP. The extended protocol is described in the header comment for DRDAConnThread.writeSQLUDTGRP().&lt;/p&gt;

&lt;p&gt;3) This patch adds DRDA and DB2 type codes for UDTs. The DRDA type codes are defined in the SQLUDTGRP section of the DRDA spec (Volume 1, section 5.6.4.10 SQL Descriptor User-Defined Type Group Description). Note that these DRDA type codes for UDTs do not appear in the summary 5-11 table in Volume 1--I believe that is an oversight on the part of the editors. I could not find DB2 type codes for UDTs. If someone knows what these are, that would be an improvement to this patch. In the meantime, I have invented type codes in a part of the code space which I think will not collide with DB2 evolution during our lifetimes. Since this is a Derby-only extension, I believe we are safe here regardless of how DB2 evolves.&lt;/p&gt;

&lt;p&gt;4) Only small UDTs can be transported across DRDA right now. A small UDT cannot serialize to more than 32767 (0x7FFF) bytes, the maximum size of a DRDA network protocol buffer. In the future, we may want to add support for big UDTs. My feeling is that we will want to give the type designer some way to declare that a UDT is big--for instance, the UDT&apos;s Java class could implement a vacuous org.apache.derby.types.BigUDT interface. Based on that declaration, we could stream the big UDTs across the network. Based on this BigUDT declaration, we could also optimize Store and language support for these values and we could build support for SQL UDT locators. All of that work, however, requires community discussion and falls outside the scope of this JIRA.&lt;/p&gt;

&lt;p&gt;5) In order to support UDT serialization across the network, two classes have been moved into the common part of the code tree so that the network client can use them: DynamicByteArrayOutputStream and InputStreamUtil.&lt;/p&gt;


&lt;p&gt;More work is needed:&lt;/p&gt;

&lt;p&gt;A) Regression and compatibility tests need to be added.&lt;/p&gt;

&lt;p&gt;B) &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4449&quot; title=&quot;ArrayIndexOutOfBoundsException when inserting DEFAULT into unspecified column&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4449&quot;&gt;&lt;del&gt;DERBY-4449&lt;/del&gt;&lt;/a&gt; needs to be fixed so that we can use UDTs as output parameters in db procs.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages.&lt;/p&gt;


&lt;p&gt;M      java/shared/org/apache/derby/shared/common/reference/JDBC30Translation.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java&lt;/p&gt;

&lt;p&gt;Replaced some magic numbers with manifest constants.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/reference/DRDAConstants.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/DssConstants.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/Typdef.java&lt;/p&gt;

&lt;p&gt;Added DRDA and DB2 type codes and other protocol definitions for UDTs. Also added a manifest constant for the magic number which represents the maximum size of a DRDA buffer. The network layer is riddled with magic numbers. A wholesale cleanup is outside the scope of this patch.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/services/io/InputStreamUtil.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/services/io/DynamicByteArrayOutputStream.java&lt;br/&gt;
A      java/shared/org/apache/derby/shared/common/io&lt;br/&gt;
A      java/shared/org/apache/derby/shared/common/io/DynamicByteArrayOutputStream.java&lt;br/&gt;
A      java/shared/org/apache/derby/shared/common/io/InputStreamUtil.java&lt;/p&gt;

&lt;p&gt;Moved some serialization support to the common area of the code tree so that the network client can use it.&lt;/p&gt;




&lt;p&gt;M      java/engine/org/apache/derby/catalog/types/DecimalTypeIdImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;/p&gt;

&lt;p&gt;These classes claimed to implement java.io.Serialization but did not fulfill the contract. This turned up during testing. The first class did not have a no-arg constructor as required by the contract. I believe that the contract for the second class was broken a long time ago when an effort was made to reduce the number of engine classes. As part of that effort, the base type ids had to be told what their format ids were after deserialization. That happens in a tricky piece of the formatable machinery which is not reproduced on the client side. I added logic to BaseTypeIdImpl so that it can reconstruct a format id based on the preserved type name.&lt;/p&gt;


&lt;p&gt;M      java/drda/org/apache/derby/impl/drda/AppRequester.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetDatabaseMetaData.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetConnection.java&lt;/p&gt;

&lt;p&gt;Added methods to determine when both sides of the session support UDTs.&lt;/p&gt;


&lt;p&gt;M      java/drda/org/apache/derby/impl/drda/FdocaConstants.java&lt;br/&gt;
M      java/drda/org/apache/derby/impl/drda/SQLTypes.java&lt;br/&gt;
M      java/drda/org/apache/derby/impl/drda/DDMWriter.java&lt;br/&gt;
M      java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;/p&gt;

&lt;p&gt;Server-side logic for exchanging UDT metadata and (de)serializing UDTs.&lt;/p&gt;




&lt;p&gt;M      java/client/org/apache/derby/client/net/NetStatementRequest.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/NetStatementReply.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/Request.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Cursor.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/Types.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/ColumnMetaData.java&lt;/p&gt;

&lt;p&gt;Client-side logic for exchanging UDT metadata and (de)serializing UDTs.&lt;/p&gt;



&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;

&lt;p&gt;Added a db proc for testing output parameters of UDT type. This is not currently used. However, it disclosed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4499&quot; title=&quot;Compiler error when preparing a procedure call with an output parameter of user defined type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4499&quot;&gt;&lt;del&gt;DERBY-4499&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java&lt;/p&gt;

&lt;p&gt;Changed this test to account for the fact that ResultSetMetaData and DatabaseMetaData now agree when the client and server are both at Derby level 10.6 or higher.&lt;/p&gt;</comment>
                            <comment id="12796264" author="dagw" created="Mon, 4 Jan 2010 17:53:40 +0000"  >&lt;p&gt;Thanks for addressing this nice extension to UDTs, Rick!. Just a quick question before I &lt;br/&gt;
take a more detailed look.. what happens if the UDT is not in the client&apos;s CLASSPATH? Will it just be a plain Object when retrieved from JDBC?&lt;/p&gt;</comment>
                            <comment id="12796275" author="rhillegas" created="Mon, 4 Jan 2010 18:17:51 +0000"  >&lt;p&gt;Thanks for taking a look at this patch, Dag. If the UDT is not in the client&apos;s classpath, then I expect the following behavior:&lt;/p&gt;

&lt;p&gt;1) The metadata calls will still work. That is, DatabaseMetaData.getColumnClassName() and ParameterMetaData.getColumnClassName() will still return the name of the class bound to the UDT&lt;/p&gt;

&lt;p&gt;2) However, (de)serialization will fail on a class not found error.&lt;/p&gt;</comment>
                            <comment id="12796579" author="dagw" created="Tue, 5 Jan 2010 08:33:08 +0000"  >&lt;p&gt;Thanks for clarifying that, Rick. We should probably mention this in the docs.&lt;/p&gt;</comment>
                            <comment id="12796657" author="rhillegas" created="Tue, 5 Jan 2010 13:11:32 +0000"  >&lt;p&gt;Thanks, Dag. I agree. The functional spec doesn&apos;t talk about this behavior either. After this bug is fixed, I should update the functional spec and highlight this behavior for mentioning in the user docs:&lt;/p&gt;

&lt;p&gt;a) If you try to retrieve a UDT whose class isn&apos;t on your classpath, you will see a class not found exception&lt;/p&gt;

&lt;p&gt;b) If you try to set a UDT parameter with an object which isn&apos;t an instance of the UDT class, you will get a coercion error.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12798512" author="rhillegas" created="Sun, 10 Jan 2010 17:26:54 +0000"  >&lt;p&gt;Attaching derby-4491-01-ad-networkTransport .diff. This patch adds regression and compatibility tests to the previous patch and fixes a bug disclosed by those tests. I believe that this patch is commit-worthy.&lt;/p&gt;

&lt;p&gt;The compatibility tests verify that the new behavior only appears if both client and server are Derby code at level 10.6 or higher. In all other cases, the old behavior prevails. I ran the compatibility tests with the following combinations:&lt;/p&gt;

&lt;p&gt;o VMs used were 1.4, Java 5, and Java 6 for both clients and servers.&lt;/p&gt;

&lt;p&gt;o Clients ran at levels 10.0.2.1, 10.1.3.1, 10.2.2.1, 10.3.3.0, 10.4.2.1, 10.5.3.0, and 10.6.0.0 against a 10.6.0.0 server.&lt;/p&gt;

&lt;p&gt;o A 10.6.0.0 client ran against servers at all of the levels listed above.&lt;/p&gt;

&lt;p&gt;o As a sanity check that the compatibility tests still run cleanly against old releases, I also ran a 10.3.3.0 client against a 10.5.3.0 server and vice versa.&lt;/p&gt;

&lt;p&gt;Note that the JCC driver was tested because that is the driver used when the client jar is 10.0.2.1.&lt;/p&gt;

&lt;p&gt;One other note: with the current state of the trunk (without this patch), we get a protocol error when trying to use the trunk&apos;s NetworkServerControl to ping a server at various lower rev levels. I did not systematically map out the combinations that give rise to protocol errors. I don&apos;t consider this to be a serious defect and it may already be understood by our network experts. However, I had to disable the ping logic in the compatibility tests. With this patch, the tests simply wait for a while to give the server a chance to come up. If someone wants to fix this defect, then they can re-enable the ping while they are in there.&lt;/p&gt;

&lt;p&gt;Touches the following files in addition to the files touched by the previous patch:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilityCombinations.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/CompatibilitySuite.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/compatibility/JDBCDriverTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/util/DerbyJUnitTest.java&lt;/p&gt;</comment>
                            <comment id="12800793" author="rhillegas" created="Fri, 15 Jan 2010 17:55:01 +0000"  >&lt;p&gt;Committed derby-4491-01-ad-networkTransport .diff at subversion revision 899733.&lt;/p&gt;</comment>
                            <comment id="12800925" author="rhillegas" created="Fri, 15 Jan 2010 21:38:57 +0000"  >&lt;p&gt;Fixed a sealing violation which surfaced in AssertFailureTest when run against insane builds: subversion revision 899819. The sealing violation was caused by the use of the SanityManager which I introduced in Request.java. I don&apos;t know why the SanityManager has been included in the common arm of the codeline if it gives rise to sealing violations.&lt;/p&gt;

&lt;p&gt;While I was in there, I removed the two io classes which I had put in the common arm. It may be that similar sealing violations will plague them. I cloned them so that there are now separate client and server copies of InputStreamUtil.java and DynamicByteArrayOutputStream.java.&lt;/p&gt;

&lt;p&gt;I will log a separate issue to track this sealing violation issue. We may need to reconsider the presence of the SanityManager in the common arm of the codeline.&lt;/p&gt;</comment>
                            <comment id="12801242" author="knutanders" created="Sat, 16 Jan 2010 18:07:32 +0000"  >&lt;p&gt;The problems in AssertFailureTest may be caused by this code in client.net.Request:&lt;/p&gt;

&lt;p&gt;+    final void writeUDT( Object val ) throws SqlException&lt;br/&gt;
+    {&lt;br/&gt;
+        // should not be called if val is null&lt;br/&gt;
+        if ( val == null )&lt;br/&gt;
+        &lt;/p&gt;
{
+            SanityManager.THROWASSERT( &quot;UDT is null&quot; );
+        }

&lt;p&gt;Since the SanityManager class is not included in insane jars, the call to THROWASSERT() must be guarded by &quot;if (SanityManager.DEBUG)&quot;.&lt;/p&gt;</comment>
                            <comment id="12801921" author="myrna" created="Mon, 18 Jan 2010 20:02:31 +0000"  >&lt;p&gt;Since this check-in I see a test failure with ibm&apos;s j9: &lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/899875-suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/weme6.2/899875-suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) test_10_parameterMetaData(org.apache.derbyTesting.functionTests.tests.lang.UDTTest)java.lang.NoSuchMethodError: java/sql/PreparedStatement.getParameterMetaData()Ljava/sql/ParameterMetaData;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.checkPMD(UDTTest.java:834)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_10_parameterMetaData(UDTTest.java:702)&lt;br/&gt;
	at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:195)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;It seems to me this must be related to the recent changes to this test...&lt;/p&gt;</comment>
                            <comment id="12802893" author="rhillegas" created="Wed, 20 Jan 2010 17:01:11 +0000"  >&lt;p&gt;Thanks for finding this error, Myrna. It occurs because PreparedStatement.getParameterMetaData() is not available on JSR 169 platforms. I have disabled that test case on those vms with subversion revision 901277.&lt;/p&gt;</comment>
                            <comment id="12803043" author="rhillegas" created="Wed, 20 Jan 2010 22:59:09 +0000"  >&lt;p&gt;Brackted an assertion in DDMWriter with a SanityManager.DEBUG check: subversion revision 901420.&lt;/p&gt;</comment>
                            <comment id="12840229" author="kristwaa" created="Tue, 2 Mar 2010 16:39:50 +0000"  >&lt;p&gt;Reopening because it looks like NetDatabaseMetadata.serverSupportsUDTs returns the wrong value (see patch derby-4491-02-aa-supportsUDTs.diff).&lt;br/&gt;
I plan to commit this patch shortly, and I will also set the fix version of this issue to 10.6.&lt;/p&gt;</comment>
                            <comment id="12840236" author="rhillegas" created="Tue, 2 Mar 2010 16:55:29 +0000"  >&lt;p&gt;Thanks for catching this, Kristian. This may indicate that there is a missing compatibility test case. I will re-run the compatibility tests after you check in this fix.&lt;/p&gt;</comment>
                            <comment id="12840243" author="kristwaa" created="Tue, 2 Mar 2010 17:11:42 +0000"  >&lt;p&gt;Thanks for the quick feedback, Rick. You&apos;re probably right about the missing compatibility test case.&lt;br/&gt;
I committed patch 02-aa to trunk with revision 918112.&lt;/p&gt;

&lt;p&gt;I&apos;ll leave it up to you to resolve / close the issue. In case you add a new test case, I&apos;ll be interested in having a look at your code for another issue I&apos;m working on &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12856959" author="rhillegas" created="Wed, 14 Apr 2010 17:56:28 +0100"  >&lt;p&gt;I have re-run the compatibility tests using combinations of clients and servers at trunk and 10.5.3.0 levels. This should stress the change made by Kristian since a 10.5.3.0 server supports data caching but not UDTs. The compatibility tests passed cleanly in this combination.&lt;/p&gt;

&lt;p&gt;I believe that the tests previously passed because the only check for serverSupportsUDT() occurs in NetStatementReply.parseSQLUDTGRP():&lt;/p&gt;

&lt;p&gt;        if ( !(jdbcType == Types.JAVA_OBJECT) || !netAgent_.netConnection_.serverSupportsUDTs() )&lt;/p&gt;

&lt;p&gt;This condition would have been satisified even if serverSupportsUDTs() returned the wrong value because if the server really wasn&apos;t at level 10.6, then jdbcType would be Types.LONGVARBINARY.&lt;/p&gt;

&lt;p&gt;I suppose this means that we could remove the serverSupportsUDTs() method. However, I recommend keeping this redundant sanity check because:&lt;/p&gt;

&lt;p&gt;a) it causes no problems&lt;/p&gt;

&lt;p&gt;b) it flags the point in a code where we need to be UDT-aware&lt;/p&gt;</comment>
                            <comment id="13007151" author="kmarsden" created="Tue, 15 Mar 2011 20:27:40 +0000"  >&lt;p&gt;reopen to add derby_backport_reject label&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12325061">DERBY-651</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12466025">DERBY-4688</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12444442">DERBY-4499</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12445687">DERBY-4516</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12429256" name="derby-4491-01-ab-networkTransport.diff" size="75280" author="rhillegas" created="Fri, 1 Jan 2010 18:31:35 +0000"/>
                            <attachment id="12429853" name="derby-4491-01-ad-networkTransport.diff" size="98734" author="rhillegas" created="Sun, 10 Jan 2010 17:26:54 +0000"/>
                            <attachment id="12437617" name="derby-4491-02-aa-supportsUDTs.diff" size="517" author="kristwaa" created="Tue, 2 Mar 2010 16:40:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 Jan 2010 17:53:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24292</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hdb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36632</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>