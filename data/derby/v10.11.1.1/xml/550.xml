<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-550/DERBY-550.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-550] BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)</title>
                <link>https://issues.apache.org/jira/browse/DERBY-550</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Using the org.apache.derby.jdbc.ClientDriver driver to access the&lt;br/&gt;
Derby database through network, the driver is writting all the file into memory (RAM) before sending&lt;br/&gt;
it to the database.&lt;/p&gt;

&lt;p&gt;Writting small files (smaller than 5Mo) into the database works fine,&lt;br/&gt;
but it is impossible to write big files (40Mo for example, or more), without getting the&lt;br/&gt;
exception java.lang.OutOfMemoryError.&lt;/p&gt;

&lt;p&gt;The org.apache.derby.jdbc.EmbeddedDriver doesn&apos;t have this problem.&lt;/p&gt;

&lt;p&gt;Here follows some code that creates a database, a table, and trys to write a BLOB. 2 parameters are to be changed for the code to work for you : DERBY_DBMS_PATH and FILE&lt;/p&gt;


&lt;p&gt;import NetNoLedge.Configuration.Configs;&lt;br/&gt;
import org.apache.derby.drda.NetworkServerControl;&lt;br/&gt;
import java.net.InetAddress;&lt;br/&gt;
import java.io.*;&lt;br/&gt;
import java.sql.*;&lt;/p&gt;

&lt;p&gt;/**&lt;br/&gt;
 *&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@author  greg&lt;br/&gt;
 */&lt;br/&gt;
public class DerbyServer_JDBC_BLOB_test {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    // The unique instance of DerbyServer in the application.&lt;br/&gt;
    private static DerbyServer_JDBC_BLOB_test derbyServer;&lt;/p&gt;

&lt;p&gt;    private NetworkServerControl server;&lt;/p&gt;

&lt;p&gt;    private static final String DERBY_JDBC_DRIVER = &quot;org.apache.derby.jdbc.ClientDriver&quot;;&lt;br/&gt;
    private static final String DERBY_DATABASE_NAME = &quot;Test&quot;;&lt;/p&gt;

&lt;p&gt;    // ###############################################################&lt;br/&gt;
    // ############### SET HERE THE EXISTING PATH YOU WANT ################&lt;br/&gt;
    // ###############################################################&lt;br/&gt;
    private static final String DERBY_DBMS_PATH =  &quot;/home/greg/DatabaseTest&quot;;&lt;br/&gt;
    // ###############################################################&lt;br/&gt;
    // ###############################################################&lt;/p&gt;


&lt;p&gt;    private static int derbyPort = 9157;&lt;br/&gt;
    private static String userName = &quot;user&quot;;&lt;br/&gt;
    private static String userPassword = &quot;password&quot;;&lt;/p&gt;

&lt;p&gt;    // ###################################################################################&lt;br/&gt;
    // ############# DEFINE HERE THE PATH TO THE FILE YOU WANT TO WRITE INTO THE DATABASE ###########&lt;br/&gt;
    // ############# TRY A 100kb-3Mb FILE, AND AFTER A 40Mb OR BIGGER FILE #########################&lt;br/&gt;
    // ###################################################################################&lt;br/&gt;
    private static final File FILE = new File(&quot;/home/greg/01.jpg&quot;);&lt;br/&gt;
    // ###################################################################################&lt;br/&gt;
    // ###################################################################################&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Used to test the server.&lt;br/&gt;
     */&lt;br/&gt;
    public static void main(String args[]) {&lt;br/&gt;
        try {&lt;br/&gt;
            DerbyServer_JDBC_BLOB_test.launchServer();&lt;br/&gt;
            DerbyServer_JDBC_BLOB_test server = getUniqueInstance();&lt;br/&gt;
            server.start();&lt;br/&gt;
            System.out.println(&quot;Server started&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            // After the server has been started, launch a first connection to the database to&lt;br/&gt;
            // 1) Create the database if it doesn&apos;t exist already,&lt;br/&gt;
            // 2) Create the tables if they don&apos;t exist already.            &lt;br/&gt;
            Class.forName(DERBY_JDBC_DRIVER).newInstance();&lt;br/&gt;
            Connection connection = DriverManager.getConnection (&quot;jdbc:derby://localhost:&quot;&lt;ins&gt;derbyPort&lt;/ins&gt;&quot;/&quot;&lt;ins&gt;DERBY_DATABASE_NAME&lt;/ins&gt;&quot;;create=true&quot;, userName, userPassword);&lt;br/&gt;
            System.out.println(&quot;Network JDBC connection to Derby succeded. Database created if not created already.&quot;);&lt;/p&gt;

&lt;p&gt;            Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);&lt;br/&gt;
            Statement statement2;&lt;/p&gt;

&lt;p&gt;            // Create the table &quot;file&quot; if it doesn&apos;t already exist.&lt;br/&gt;
            String [] tableNames=&lt;/p&gt;
{&quot;file&quot;}
&lt;p&gt;;&lt;br/&gt;
            boolean exist;&lt;br/&gt;
            String currentTable;&lt;br/&gt;
            ResultSet result = statement.executeQuery(&quot;SELECT TABLENAME FROM SYS.SYSTABLES&quot;);&lt;br/&gt;
            for (int i=0;i&amp;lt;tableNames.length;i++) {&lt;br/&gt;
                exist=false;&lt;br/&gt;
                while (result.next())&lt;/p&gt;
{
                    if (tableNames[i].equalsIgnoreCase(result.getString(1)))
                        exist=true;
                }

&lt;p&gt;                if (!exist) &lt;/p&gt;
{
                    statement2 = connection.createStatement();
                    statement2.execute(&quot;CREATE TABLE file (&quot; +
                    &quot;file BLOB(2G) NOT NULL)&quot;);
                    connection.commit();
                }
&lt;p&gt;                result.beforeFirst();&lt;br/&gt;
            }&lt;br/&gt;
            System.out.println(&quot;Table file created if not created already&quot;);&lt;/p&gt;

&lt;p&gt;            System.out.println(&quot;File insertion into BLOB&quot;);&lt;br/&gt;
            FileInputStream inputStream = new FileInputStream(FILE);&lt;br/&gt;
            PreparedStatement   preparedStatement = connection.prepareStatement(&quot;INSERT INTO file(file) VALUES &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;br/&gt;
            preparedStatement.setBinaryStream(1,inputStream,(int) FILE.length());&lt;br/&gt;
            preparedStatement .execute();&lt;br/&gt;
            connection.commit();&lt;br/&gt;
            System.out.println(&quot;File inserted into BLOB&quot;);&lt;br/&gt;
        }&lt;br/&gt;
        catch (Exception e) &lt;/p&gt;
{
            e.printStackTrace();
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    /** Creates a new instance of MckoiServer&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Password is used at the database creation. It will be the database password once created.&lt;br/&gt;
     */    &lt;br/&gt;
    private DerbyServer_JDBC_BLOB_test() throws Exception {&lt;br/&gt;
        System.setProperty(&quot;derby.system.home&quot;, DERBY_DBMS_PATH);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        // Set the server to request an authentification.&lt;br/&gt;
        System.setProperty(&quot;derby.authentication.provider&quot;, &quot;BUILTIN&quot;);&lt;br/&gt;
        System.setProperty(&quot;derby.connection.requireAuthentication&quot;, &quot;true&quot;);&lt;/p&gt;

&lt;p&gt;        // Create a user that can connect to Derby.&lt;br/&gt;
        System.setProperty(&quot;derby.user.&quot;+userName, userPassword);&lt;/p&gt;

&lt;p&gt;        // Set Derby to grant full access to the created user (to all the databases).&lt;br/&gt;
        System.setProperty(&quot;derby.database.fullAccessUsers&quot;, userName);&lt;/p&gt;

&lt;p&gt;        //System.setProperty(&quot;derby.system.bootAll&quot;, &quot;true&quot;);&lt;/p&gt;

&lt;p&gt;        // See if the 9157 port is already taken.&lt;br/&gt;
        // Change it if necessary.&lt;br/&gt;
        boolean isPortFree = false;&lt;br/&gt;
        while ( !isPortFree ) {&lt;br/&gt;
            try &lt;/p&gt;
{
                java.net.ServerSocket serverTest = new java.net.ServerSocket(derbyPort);
                serverTest.close();
                serverTest = null;
                
                isPortFree = true;
            }
&lt;p&gt;            catch (Exception e) &lt;/p&gt;
{
                System.out.println(&quot;Port already in use : &quot;+derbyPort);
                derbyPort++;
                System.out.println(&quot;Try with port &quot;+derbyPort);
            }
&lt;p&gt;        }     &lt;/p&gt;

&lt;p&gt;        server = new NetworkServerControl(InetAddress.getByName(&quot;localhost&quot;),derbyPort);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    public static void launchServer() throws Exception &lt;/p&gt;
{
        derbyServer = new DerbyServer_JDBC_BLOB_test();
    }

&lt;p&gt;    public static DerbyServer_JDBC_BLOB_test getUniqueInstance() &lt;/p&gt;
{
        return derbyServer;
    }

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;Start the server.&lt;br/&gt;
     */&lt;br/&gt;
    public void start() 
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {        try {
            server.start(null);
        }        catch (Exception e) {
            e.printStackTrace(System.err);
        }&lt;br/&gt;
    }&lt;br/&gt;
    &lt;br/&gt;
    /**&lt;br/&gt;
     * &amp;lt;p&amp;gt;Stop the server.&lt;br/&gt;
     */&lt;br/&gt;
    public void stop() {&lt;br/&gt;
        try {
            server.shutdown();
        }&lt;br/&gt;
        catch (Exception e) {            e.printStackTrace(System.err);        }    }&lt;/span&gt; &lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;}&lt;/p&gt;</description>
                <environment>Any environment.</environment>
        <key id="12314092">DERBY-550</key>
            <summary>BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="naka">Tomohito Nakayama</assignee>
                                    <reporter username="greg">Gr&#233;goire Dubois</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Sep 2005 00:34:48 +0100</created>
                <updated>Fri, 18 Feb 2011 13:19:54 +0000</updated>
                            <resolved>Fri, 18 Feb 2011 13:19:54 +0000</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>4</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12419634" author="bryanpendleton" created="Fri, 7 Jul 2006 09:38:17 +0100"  >&lt;p&gt;I think the problem is actually on the server side, not on the client side. When I tried writing a test program to investigate this (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1472&quot; title=&quot;Avoid expanding object to memory before sending it to server.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1472&quot;&gt;&lt;del&gt;DERBY-1472&lt;/del&gt;&lt;/a&gt; for the program), I discovered that the client does get an OutOfMemoryError, but this exception appears to be actually occuring on the server side, not on the client side. In my experimentation, client-side memory usage was low. But there is clearly a server-side memory problem to be solved.&lt;/p&gt;</comment>
                            <comment id="12419714" author="naka" created="Fri, 7 Jul 2006 21:45:24 +0100"  >&lt;p&gt;I intended to resolve this issue as &quot;Cannot Reproduce&quot; as next url.&lt;br/&gt;
&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1472#action_12419712&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1472#action_12419712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, I reconsidered.&lt;/p&gt;

&lt;p&gt;I won&apos;t resolve &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-550&quot; title=&quot;BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-550&quot;&gt;&lt;del&gt;DERBY-550&lt;/del&gt;&lt;/a&gt;, &quot;BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)&quot;,&lt;br/&gt;
because it seems to be true that OutOfMemoryError happens &quot;in server side&quot;.&lt;/p&gt;

&lt;p&gt;Title of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-550&quot; title=&quot;BLOB : java.lang.OutOfMemoryError with network JDBC driver (org.apache.derby.jdbc.ClientDriver)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-550&quot;&gt;&lt;del&gt;DERBY-550&lt;/del&gt;&lt;/a&gt; does not say that Error happens in client side.&lt;br/&gt;
Then, this issue is not mistaken completely.&lt;/p&gt;

&lt;p&gt;Description of the issue &quot;writting all the file into memory (RAM) before sending &quot;,  is mistaken.&lt;/p&gt;</comment>
                            <comment id="12419715" author="andreask" created="Fri, 7 Jul 2006 21:47:20 +0100"  >&lt;p&gt;I have done some tracing of this error on the server side which confirms that this is most likely a server side problem. &lt;br/&gt;
When the DRDAConnThread reads parameter data, it will create a byte buffer and stream all the data of the blob into it. It happens when &lt;/p&gt;

&lt;p&gt;DRDAConnThread.readAndSetExtParam calls reader.getExtData(..).&lt;/p&gt;

&lt;p&gt;private void readAndSetExtParam( int i, DRDAStatement stmt,&lt;br/&gt;
									  int drdaType, int extLen)&lt;br/&gt;
				throws DRDAProtocolException, SQLException&lt;br/&gt;
		{&lt;br/&gt;
			PreparedStatement ps = stmt.getPreparedStatement();&lt;br/&gt;
			drdaType = (drdaType &amp;amp; 0x000000ff); // need unsigned value&lt;br/&gt;
			boolean checkNullability = false;&lt;br/&gt;
			if (sqlamLevel &amp;gt;= MGRLVL_7 &amp;amp;&amp;amp;&lt;br/&gt;
				FdocaConstants.isNullable(drdaType))&lt;br/&gt;
				checkNullability = true;&lt;/p&gt;

&lt;p&gt;			try {	&lt;br/&gt;
				byte[] paramBytes = reader.getExtData(checkNullability); &amp;lt;---- here the entire LOB data gets populated in a byte array&lt;/p&gt;

&lt;p&gt;Later the paramer data is set using ps.setBytes(..).&lt;/p&gt;

&lt;p&gt;In addition, if running in debug mode, all the bytes are concatenated to the tracing string here:&lt;br/&gt;
case  DRDAConstants.DRDA_TYPE_LOBBYTES:&lt;br/&gt;
					case  DRDAConstants.DRDA_TYPE_NLOBBYTES:&lt;br/&gt;
						if (SanityManager.DEBUG)&lt;br/&gt;
							trace(&quot;parameter value is: &quot;+paramBytes);  &amp;lt;---- more memory usage&lt;br/&gt;
						ps.setBytes(i+1, paramBytes);&lt;br/&gt;
						break;&lt;/p&gt;

&lt;p&gt;Would it be possible, to create a server side InputStream which requests bytes from the client on demand, and that on the server side we could use ps.setBinaryStream(..) instead of ps.setBytes(..) ?&lt;br/&gt;
The server would then stream the bytes when doing ps.execute().  Would this work if there are multiple parameters ?&lt;/p&gt;</comment>
                            <comment id="12419716" author="naka" created="Fri, 7 Jul 2006 21:51:32 +0100"  >&lt;p&gt;BTW, I just tried to resolve this issue and &lt;br/&gt;
assigned myself to resolve as &quot;Cannot Reproduce&quot;.&lt;/p&gt;

&lt;p&gt;Well.. This may be some kind of destiny ....&lt;br/&gt;
I will work for this issue.&lt;/p&gt;

&lt;p&gt;// Fortunately I decided to wait &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417&quot; title=&quot;Add new, lengthless overloads to the streaming api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1417&quot;&gt;&lt;del&gt;DERBY-1417&lt;/del&gt;&lt;/a&gt; in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1471&quot; title=&quot;Implement layer B streaming for new methods defined in JDBC4.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1471&quot;&gt;&lt;del&gt;DERBY-1471&lt;/del&gt;&lt;/a&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12419724" author="andreask" created="Fri, 7 Jul 2006 22:41:20 +0100"  >&lt;p&gt;One more comment: there seems to be a client-side problem when streaming data to the client.&lt;br/&gt;
I have created a table with a 64 MB blob in embedded mode, and if I try to get the data with a scrollable resultset on the client side, it fails with OutOfMemoryError  in NetStatementReply.copyEXTDTA, which is caught in an exception handler:&lt;/p&gt;

&lt;p&gt;    protected void copyEXTDTA(NetCursor netCursor) throws DisconnectException {&lt;br/&gt;
        try {&lt;br/&gt;
            parseLengthAndMatchCodePoint(CodePoint.EXTDTA);&lt;br/&gt;
            byte[] data = null;&lt;br/&gt;
            if (longValueForDecryption_ == null) &lt;/p&gt;
{
                data = (getData(null)).toByteArray();
            }
&lt;p&gt; else &lt;/p&gt;
{
                data = longValueForDecryption_;
                dssLength_ = 0;
                longValueForDecryption_ = null;
            }
&lt;p&gt;            netCursor.extdtaData_.add(data);&lt;br/&gt;
        } catch (java.lang.OutOfMemoryError e) &lt;/p&gt;
{
            agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,
                new ClientMessageId(SQLState.NET_LOB_DATA_TOO_LARGE_FOR_JVM),
                e));
        }
&lt;p&gt;This again causes an assert in MessageUtil:&lt;br/&gt;
Exception in thread &quot;main&quot; org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Number of parameters expected for message id 58009.C.6 (0) does not match number of arguments received (1)&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:119)&lt;br/&gt;
        at org.apache.derby.shared.common.i18n.MessageUtil.formatMessage(MessageUtil.java:233)&lt;br/&gt;
        at org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(MessageUtil.java:142)&lt;br/&gt;
        at org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(MessageUtil.java:182)&lt;br/&gt;
        at org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(MessageUtil.java:98)&lt;/p&gt;

&lt;p&gt;Using forward-only resultset:&lt;br/&gt;
Get this error:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:344)&lt;br/&gt;
        at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:148)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:525)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:171)&lt;br/&gt;
        at derbytest.BlobOutOfMem.main(BlobOutOfMem.java:59)&lt;/p&gt;</comment>
                            <comment id="12420094" author="andreask" created="Mon, 10 Jul 2006 22:39:56 +0100"  >&lt;p&gt;Attached is a repro.&lt;/p&gt;</comment>
                            <comment id="12420591" author="andreask" created="Wed, 12 Jul 2006 19:26:55 +0100"  >&lt;p&gt;Unless the streaming could be fixed for 10.2 so that we avoid OutOfMemoryError on the receiver side, I would propose the following:&lt;/p&gt;

&lt;p&gt;We know the size of the LOB, and can check if it can go into memory (using the Runtime class). If it cannot go into memory, we can throw an SQLException, instead of consuming all memory in the VM until we get OutOfMemoryError.&lt;/p&gt;

&lt;p&gt;By using this approach, we achieve the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Side-effects on other connections in the VM: Although it is the LOB which is taking almost all the memory in the VM, the OutOfMemoryError may be thrown in another thread in the VM, causing side-effects on other connections or on the application itself.&lt;/li&gt;
	&lt;li&gt;Currently, if the Network server goes out of memory when streaming data, the DRDAConnThread will stop. This causes hangs in the user applications.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the streaming is fixed, there is not need to do this. Does anyone plan to fix the streaming issues for 10.2 ? If not, I will make a couple of JIRA issues to do the work of avoiding OutOfMemoryError by checking size before allocating the byte arrays.&lt;/p&gt;</comment>
                            <comment id="12420877" author="bryanpendleton" created="Thu, 13 Jul 2006 22:03:36 +0100"  >
&lt;p&gt;RE: Andreas&apos;s observation that LOB implemtation classes would need to be reimplemented, so that they will do the streaming.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering whether this might accidentally introduce other new and undesirable behaviors.&lt;/p&gt;

&lt;p&gt;The net effect of a change like this is that the LOB data will remain in the network pipe, or be queued on the server side, until the blob is read by the client.&lt;/p&gt;

&lt;p&gt;But what if that takes a long time, or in fact never happens?&lt;/p&gt;

&lt;p&gt;We might need a way to &quot;cancel&quot; a partially-sent BLOB object which was returned by the server but which the client for whatever reason never decided to read.&lt;/p&gt;

&lt;p&gt;The current &quot;greedy&quot; algorithm seems to ensure that we minimize the risk of producer-consumer deadlocks of various sorts, at the expense of accumulating the entire data into memory.&lt;/p&gt;

&lt;p&gt;I hope this makes sense. I don&apos;t know of an actual problem here; I just have a funny feeling that this change is going to be rather tricky to accomplish.&lt;/p&gt;

</comment>
                            <comment id="12420891" author="naka" created="Fri, 14 Jul 2006 00:24:45 +0100"  >&lt;p&gt;I executed BlobOutOfMem.java with Network Server running on jdb and&lt;br/&gt;
tried to recognize circumstance where OutOfMemoryError happens.&lt;/p&gt;

&lt;p&gt;The result was as next.&lt;/p&gt;

&lt;p&gt;naka@rufelza:~/derby/test/20060714$ startDebugNetworkServer.ksh &lt;br/&gt;
Initializing jdb ...&lt;br/&gt;
&amp;gt; catch java.lang.OutOfMemoryError&lt;br/&gt;
Deferring all java.lang.OutOfMemoryError.&lt;br/&gt;
It will be set after the class is loaded.&lt;br/&gt;
&amp;gt; run&lt;br/&gt;
run org.apache.derby.drda.NetworkServerControl start -h localhost -p 1527&lt;br/&gt;
Set uncaught java.lang.Throwable&lt;br/&gt;
Set deferred all java.lang.OutOfMemoryError&lt;br/&gt;
Set deferred uncaught java.lang.Throwable&lt;br/&gt;
&amp;gt; &lt;br/&gt;
VM Started: Apache Derby Network Server - 10.2.0.4 alpha started and ready to accept connections on port 1527 at 2006-07-13 15:40:31.278 GMT &lt;/p&gt;

&lt;p&gt;Exception occurred: java.lang.OutOfMemoryError (uncaught)&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (uncaught)&quot;thread=DRDAConnThread_3&quot;, java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;(), line=59 bci=37&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; (ByteArrayOutputStream.java:59)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:958)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:944)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetExtParam (DRDAConnThread.java:4,355)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetAllExtParams (DRDAConnThread.java:4,320)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects (DRDAConnThread.java:3,811)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT (DRDAConnThread.java:3,640)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:928)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:254)&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; up&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; list&lt;br/&gt;
954    &lt;br/&gt;
955    	&lt;br/&gt;
956    	if (desiredLength != -1) &lt;/p&gt;
{
957            // allocate a stream based on a known amount of data
958 =&amp;gt;         baos = new ByteArrayOutputStream ((int) desiredLength);
959    	}
&lt;p&gt;960    	else {&lt;br/&gt;
961            // allocate a stream to hold an unknown amount of data&lt;br/&gt;
962            baos = new ByteArrayOutputStream ();&lt;br/&gt;
963            //isLengthAndNullabilityUnknown = true;&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; up&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; list&lt;br/&gt;
940    	&lt;br/&gt;
941    &lt;br/&gt;
942    	byte[] getExtData (boolean checkNullability) throws DRDAProtocolException&lt;br/&gt;
943    	&lt;/p&gt;
{
944 =&amp;gt; 		return  getExtData(ddmScalarLen, checkNullability);
945    	}
&lt;p&gt;946    &lt;br/&gt;
947    &lt;br/&gt;
948    	byte[] getExtData (long desiredLength, boolean checkNullability) throws DRDAProtocolException&lt;br/&gt;
949      {&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; up&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; list&lt;br/&gt;
4,351    				FdocaConstants.isNullable(drdaType))&lt;br/&gt;
4,352    				checkNullability = true;&lt;br/&gt;
4,353    	&lt;br/&gt;
4,354    			try {	&lt;br/&gt;
4,355 =&amp;gt; 				byte[] paramBytes = reader.getExtData(checkNullability);&lt;br/&gt;
4,356    				String paramString = null;&lt;br/&gt;
4,357    				switch (drdaType)&lt;br/&gt;
4,358    				{&lt;br/&gt;
4,359    					case  DRDAConstants.DRDA_TYPE_LOBBYTES:&lt;br/&gt;
4,360    					case  DRDAConstants.DRDA_TYPE_NLOBBYTES:&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;I confirm this part is where Andreas mentioned in previous comment.&lt;/p&gt;

&lt;p&gt;I think this is one of very suspective places.&lt;br/&gt;
However I think there may be another place where memory was used in waste.&lt;br/&gt;
Because reports from others for memory usage told that amount of used memory was much more larger than actual  size LOB to be streamed.&lt;/p&gt;</comment>
                            <comment id="12420894" author="naka" created="Fri, 14 Jul 2006 00:41:31 +0100"  >&lt;p&gt;Configuring -Xmx256m option to jdb under NetworkServer, I tested again.&lt;br/&gt;
Then,I found different stack for the error.&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.&amp;lt;init&amp;gt; (DynamicByteArrayOutputStream.java:63)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow (BasePage.java:821)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.BasePage.insert (BasePage.java:694)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.access.heap.HeapController.doInsert (HeapController.java:306)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.access.heap.HeapController.insert (HeapController.java:573)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow (RowChangerImpl.java:447)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore (InsertResultSet.java:995)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.InsertResultSet.open (InsertResultSet.java:522)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.GenericPreparedStatement.execute (GenericPreparedStatement.java:357)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;10&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedStatement.executeStatement (EmbedStatement.java:1,181)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;11&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement (EmbedPreparedStatement.java:1,510)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;12&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute (EmbedPreparedStatement.java:1,188)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;13&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAStatement.execute (DRDAStatement.java:559)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;14&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT (DRDAConnThread.java:3,655)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;15&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:928)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;16&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:254)&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; eval java.lang.Runtime.getRuntime().maxMemory()&lt;br/&gt;
 java.lang.Runtime.getRuntime().maxMemory() = 266403840&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;/p&gt;

&lt;p&gt;I think it is remarkable that error happend at code of Engine in this case.&lt;/p&gt;</comment>
                            <comment id="12421270" author="naka" created="Sat, 15 Jul 2006 06:11:43 +0100"  >&lt;p&gt;I tested with -Xmx192m -Xmx128m -Xmx64m also.&lt;/p&gt;

&lt;p&gt;The results was as next&lt;/p&gt;

&lt;p&gt;With -Xmx192m :&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (to be caught at: org.apache.derby.impl.store.raw.data.StoredPage.logRow(), line=4,209 bci=1,370)&quot;thread=DRDAConnThread_3&quot;, org.apache.derby.impl.store.raw.data.MemByteHolder.&amp;lt;init&amp;gt;(), line=68 bci=26&lt;br/&gt;
68    		this.curBuf = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;bufSize&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.MemByteHolder.&amp;lt;init&amp;gt; (MemByteHolder.java:68)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.StoredPage.logColumn (StoredPage.java:6,351)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.StoredPage.logRow (StoredPage.java:3,965)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer (InsertOperation.java:369)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.InsertOperation.&amp;lt;init&amp;gt; (InsertOperation.java:114)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.LoggableActions.actionInsert (LoggableActions.java:138)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow (BasePage.java:664)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.BasePage.insertAtSlot (BasePage.java:585)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.StoredPage.insertAtSlot (StoredPage.java:6,735)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;10&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.raw.data.BasePage.insert (BasePage.java:691)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;11&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.access.heap.HeapController.doInsert (HeapController.java:254)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;12&amp;#93;&lt;/span&gt; org.apache.derby.impl.store.access.heap.HeapController.insert (HeapController.java:573)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;13&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow (RowChangerImpl.java:447)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;14&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore (InsertResultSet.java:995)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;15&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.execute.InsertResultSet.open (InsertResultSet.java:522)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;16&amp;#93;&lt;/span&gt; org.apache.derby.impl.sql.GenericPreparedStatement.execute (GenericPreparedStatement.java:357)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;17&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedStatement.executeStatement (EmbedStatement.java:1,181)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;18&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement (EmbedPreparedStatement.java:1,510)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;19&amp;#93;&lt;/span&gt; org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute (EmbedPreparedStatement.java:1,188)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;20&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAStatement.execute (DRDAStatement.java:559)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;21&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT (DRDAConnThread.java:3,655)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;22&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:928)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;23&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:254)&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; eval java.lang.Runtime.getRuntime().maxMemory() &lt;br/&gt;
 java.lang.Runtime.getRuntime().maxMemory()  = 199819264&lt;/p&gt;


&lt;p&gt;With -Xmx128m :&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (uncaught)&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (uncaught)&quot;thread=DRDAConnThread_3&quot;, java.io.ByteArrayOutputStream.toByteArray(), line=136 bci=4&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; java.io.ByteArrayOutputStream.toByteArray (ByteArrayOutputStream.java:136)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:1,004)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:944)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetExtParam (DRDAConnThread.java:4,355)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetAllExtParams (DRDAConnThread.java:4,320)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects (DRDAConnThread.java:3,811)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT (DRDAConnThread.java:3,640)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:928)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:254)&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; eval java.lang.Runtime.getRuntime().maxMemory() &lt;br/&gt;
 java.lang.Runtime.getRuntime().maxMemory()  = 133234688&lt;/p&gt;

&lt;p&gt;With -Xmx64m:&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (uncaught)&lt;br/&gt;
Exception occurred: java.lang.OutOfMemoryError (uncaught)&quot;thread=DRDAConnThread_3&quot;, java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;(), line=59 bci=37&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt; (ByteArrayOutputStream.java:59)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:958)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.getExtData (DDMReader.java:944)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetExtParam (DRDAConnThread.java:4,355)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.readAndSetAllExtParams (DRDAConnThread.java:4,320)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects (DRDAConnThread.java:3,811)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT (DRDAConnThread.java:3,640)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;8&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:928)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;9&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:254)&lt;br/&gt;
DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; eval java.lang.Runtime.getRuntime().maxMemory() &lt;br/&gt;
 java.lang.Runtime.getRuntime().maxMemory()  = 66650112&lt;/p&gt;</comment>
                            <comment id="12421274" author="naka" created="Sat, 15 Jul 2006 06:28:34 +0100"  >&lt;p&gt;I  noticed that there exists difference of phenomena between under -Xmx64m and under -Xmx128m.&lt;/p&gt;

&lt;p&gt;Former, under -Xmx64m, OutOfMemory happens when java.io.ByteArrayOutputStream was constructed.&lt;br/&gt;
However , latter ,  -Xmx128m, OutOfMemory happens when java.io.ByteArrayOutputStream.toByteArray() was called.&lt;/p&gt;

&lt;p&gt;I think this may have something to do with insufficient use of memory ....&lt;/p&gt;</comment>
                            <comment id="12421279" author="naka" created="Sat, 15 Jul 2006 06:51:15 +0100"  >&lt;p&gt;My consideration is that ByteArrayOutputStream should not be used for large data, especially the size is unknown.&lt;/p&gt;

&lt;p&gt;When program retrieve data from ByteArrayOutputStream object, it is needed to allocate another memory other than instance variable byte[]buf of ByteArrayOutputStream.&lt;br/&gt;
Because ByteArrayOutputStream.buf does not have same length to the data of whch  program passed to ByteArrayOutputStream object.&lt;/p&gt;

&lt;p&gt;When the size of data is known, we can escape this problem &lt;br/&gt;
because we can fix the size of the ByteArrayOutputStream.buf to the size of data at construction time of ByteArrayOutputStream instance, and we can escape allocating another memory just using ByteArrayOutputStream.buf directly.&lt;/p&gt;</comment>
                            <comment id="12421280" author="naka" created="Sat, 15 Jul 2006 06:55:40 +0100"  >&lt;p&gt;However, I think our program may know the length of data in this case, &lt;br/&gt;
because our program fail to error at construction time of ByteArrayOutputStream ...&lt;/p&gt;

&lt;p&gt;Well...&lt;br/&gt;
I think I can create a patch to escape allocating memory again , &lt;br/&gt;
though it is valid only in the case received length of the data is known and correct....&lt;/p&gt;</comment>
                            <comment id="12421281" author="naka" created="Sat, 15 Jul 2006 07:06:05 +0100"  >&lt;p&gt;Wait a moment ....&lt;br/&gt;
ByteArrayOutputStream have writeTo method....&lt;/p&gt;

&lt;p&gt;I wonder wheter we can use this method and not use byte[] type data....&lt;/p&gt;

&lt;p&gt;Well....&lt;br/&gt;
I will try. &lt;/p&gt;</comment>
                            <comment id="12421282" author="naka" created="Sat, 15 Jul 2006 07:18:18 +0100"  >&lt;p&gt;It seems to be have much amount of impact on whole code of NetworkServer to use writeTo method and not to use byte[] type data............&lt;/p&gt;

&lt;p&gt;Well ......&lt;br/&gt;
First, I will work to the idea of &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-550#action_12421280&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-550#action_12421280&lt;/a&gt; , and see the result.&lt;/p&gt;

</comment>
                            <comment id="12423067" author="naka" created="Mon, 24 Jul 2006 13:51:18 +0100"  >&lt;p&gt;I confirmed that the BlobOutOfMem.java ran without error in next configuration, after the patch of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1513&quot; title=&quot;Trial 1 for DERBY-550&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1513&quot;&gt;&lt;del&gt;DERBY-1513&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ServerSide:&lt;br/&gt;
$JAVA_HOME/bin/java -Xmx256m org.apache.derby.drda.NetworkServerControl start -h $DERBY_SERVER_HOST -p $DERBY_SERVER_PORT&lt;/p&gt;

&lt;p&gt;ClientSide:&lt;br/&gt;
java -Xms32m -Xmx256m derbytest.BlobOutOfMem&lt;/p&gt;

&lt;p&gt;I think it has been improved to some extent.&lt;/p&gt;

&lt;p&gt;I hope opinion from others...&lt;/p&gt;</comment>
                            <comment id="12611350" author="kmarsden" created="Mon, 7 Jul 2008 22:11:50 +0100"  >&lt;p&gt;I wonder if this issue can be closed now that the repro passes without error according to Tomohito&lt;/p&gt;</comment>
                            <comment id="12611367" author="naka" created="Mon, 7 Jul 2008 22:47:45 +0100"  >&lt;p&gt;My understanding is that performance of memory usage was improved issues including &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1513&quot; title=&quot;Trial 1 for DERBY-550&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1513&quot;&gt;&lt;del&gt;DERBY-1513&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; and other issues worked at that time ....&lt;br/&gt;
I think this issue should be closed.&lt;/p&gt;</comment>
                            <comment id="12611641" author="kristwaa" created="Tue, 8 Jul 2008 16:05:01 +0100"  >&lt;p&gt;I also tested this, and I agree with Tomohito.&lt;/p&gt;

&lt;p&gt;With regards to memory usage, the problems seem to be resolved for the scenario mentioned.&lt;br/&gt;
However, I discovered multiple performance issues, some of which are rather significant. I&apos;ll create Jiras for these and start working on them.&lt;br/&gt;
One of my test runs with the 64 MB Blob showed an improvement from around 270 to 4 seconds (localhost)!&lt;br/&gt;
There are issues both in the embedded driver and the client driver.&lt;/p&gt;</comment>
                            <comment id="12804924" author="kristwaa" created="Tue, 26 Jan 2010 07:25:05 +0000"  >&lt;p&gt;Closing the issue.&lt;/p&gt;</comment>
                            <comment id="12996399" author="knutanders" created="Fri, 18 Feb 2011 13:18:57 +0000"  >&lt;p&gt;Reopening to set correct fix version.&lt;/p&gt;</comment>
                            <comment id="12996400" author="knutanders" created="Fri, 18 Feb 2011 13:19:54 +0000"  >&lt;p&gt;All the commits for this issue went into 10.3. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12346905">DERBY-1610</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10020">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="12333337">DERBY-1301</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12345286">DERBY-1472</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12346428">DERBY-1560</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12328504">DERBY-917</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="32988">DERBY-326</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12336598" name="BlobOutOfMem.java" size="6356" author="andreask" created="Mon, 10 Jul 2006 22:39:56 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12345744">DERBY-1497</subtask>
                            <subtask id="12345746">DERBY-1498</subtask>
                            <subtask id="12345860">DERBY-1504</subtask>
                            <subtask id="12346037">DERBY-1513</subtask>
                            <subtask id="12346249">DERBY-1535</subtask>
                            <subtask id="12346417">DERBY-1559</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Jul 2006 08:38:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22009</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0huf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36709</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>