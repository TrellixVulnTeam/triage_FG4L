<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:20 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1758/DERBY-1758.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1758] Enable xmlSuite to run as part of derbyall in environments that have the required external jars.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1758</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Due to the fact the XML support in Derby has external dependencies on Apache Xalan and a JAXP parser (such as, but not limited to, Apache Xerces), the tests for XML, which are all included in &quot;xmlSuite&quot;, are not currently run as part of derbyall.&lt;/p&gt;

&lt;p&gt;Changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-688&quot; title=&quot;Enhancements to XML functionality to move toward XPath/XQuery support...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-688&quot;&gt;&lt;del&gt;DERBY-688&lt;/del&gt;&lt;/a&gt; (and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-567&quot; title=&quot;Improve Derby XML support to use XML parser found in JVM instead of using a hard-coded parser name (Xerces).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-567&quot;&gt;&lt;del&gt;DERBY-567&lt;/del&gt;&lt;/a&gt; indirectly) have now made it so that JVMs which have Apache Xalan and a JAXP parser embedded in them can run the XML tests without requiring additional jars, assuming that the embedded version of Xalan is at least the minimum version required by Derby (which is currently 2.5).&lt;/p&gt;

&lt;p&gt;So given that, the xmlSuite should be enabled as part of derbyall for any environment that is capable of running them.&lt;/p&gt;

&lt;p&gt;Per comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-688&quot; title=&quot;Enhancements to XML functionality to move toward XPath/XQuery support...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-688&quot;&gt;&lt;del&gt;DERBY-688&lt;/del&gt;&lt;/a&gt;, enabling the XML suite could include the following tasks:&lt;/p&gt;

&lt;p&gt;  1. Enable the suite to run as part of derbyall but ONLY if the JVM has&lt;br/&gt;
      access to all of the required Xalan/JAXP classes.&lt;/p&gt;

&lt;p&gt;  2. Resolve the following diff in lang/xmlBinding.java that occurs on&lt;br/&gt;
     some platforms (ex. Linux):&lt;/p&gt;

&lt;p&gt;    &amp;lt; Inserted roughly 40k of data.&lt;br/&gt;
    10 del&lt;br/&gt;
    &amp;lt; Inserted roughly 40k of data.&lt;br/&gt;
    10a9,10&lt;br/&gt;
    &amp;gt; Inserted roughly 39k of data.&lt;br/&gt;
    &amp;gt; Inserted roughly 37k of data.&lt;br/&gt;
    21 del&lt;br/&gt;
    &amp;lt; 1, [ roughly 40k ]&lt;br/&gt;
    22 del&lt;br/&gt;
    &amp;lt; 2, [ roughly 40k ]&lt;br/&gt;
    22a21,22&lt;br/&gt;
    &amp;gt; 1, [ roughly 39k ]&lt;br/&gt;
    &amp;gt; 2, [ roughly 37k ]&lt;/p&gt;

&lt;p&gt;  3. Add new tests to verify Derby behavior when XML classes are&lt;br/&gt;
    not present.&lt;/p&gt;

&lt;p&gt;Note that #3 may turn out to be its own Jira issue; the first two, however, should both be addressed as part of this issue since the xmlSuite will not run (and pass) on all platforms if either 1 or 2 is not addressed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12348557">DERBY-1758</key>
            <summary>Enable xmlSuite to run as part of derbyall in environments that have the required external jars.</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="army">A B</assignee>
                                    <reporter username="army">A B</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 Aug 2006 16:21:21 +0100</created>
                <updated>Mon, 11 Dec 2006 16:34:05 +0000</updated>
                            <resolved>Mon, 11 Dec 2006 16:33:58 +0000</resolved>
                                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12443994" author="army" created="Sat, 21 Oct 2006 04:17:47 +0100"  >&lt;p&gt;Attaching a &quot;phase 1&quot; patch that adds two JUnit tests to lang/_Suite.java.  The first test, XMLTypeAndOpsTest.java, is meant to be a JUnit equivalent to the current lang/xml_general.sql test.  The second test, XMLMissingClassesTest, tests the behavior of the SQL/XML operators when the required JAXP or Xalan classes are not in the classpath.&lt;/p&gt;

&lt;p&gt;This patch constitutes my first attempt at writing JUnit tests, so any feedback/advice would be much appreciated.  In particular, things I am wondering include:&lt;/p&gt;

&lt;p&gt;  1. The expectation is that tests in XMLTypeAndOpsTest are run in&lt;br/&gt;
     the order in which they appear in the .java file.  With all of&lt;br/&gt;
     my testing this seems to be the case--but as a general rule&lt;br/&gt;
     is this a safe assumption with JUnit tests?  If not then I&apos;ll&lt;br/&gt;
     have to spend more time trying to make the different test cases&lt;br/&gt;
     independent of each other.&lt;/p&gt;

&lt;p&gt;  2. Tables and data for the tests are created/inserted as they&lt;br/&gt;
     are needed.  I think this is best for this particular test&lt;br/&gt;
     because the creation of tables and insertion of data is&lt;br/&gt;
     part of what we&apos;re testing--i.e. it&apos;s not just &quot;fixture&quot;&lt;br/&gt;
     code.  But that said, I imagine some might prefer that&lt;br/&gt;
     all of the table creation and data insertion logic go&lt;br/&gt;
     into a startUp() method of a decorator that then runs&lt;br/&gt;
     the test.  I don&apos;t know what the established protocol is&lt;br/&gt;
     with this.  I prefer (at least in XMLTypeAndOpsTest) to&lt;br/&gt;
     do the creation of tables on the fly (esp. since that&apos;s&lt;br/&gt;
     what the old lang/xml_general.sql test did) but am not&lt;br/&gt;
     opposed to changing it.&lt;/p&gt;

&lt;p&gt;  3. At most one of XMLTypeAndOpsTest and XMLMissingClasses will&lt;br/&gt;
     ever run in a given environment.  Given that fact, I didn&apos;t&lt;br/&gt;
     necessarily have to split them out into two different tests--&lt;br/&gt;
     I could just as easily have added logic to the &quot;suite()&quot;&lt;br/&gt;
     method to add the appropriate test case(s) depending on&lt;br/&gt;
     whether or the classpath had the required classes.  Is there&lt;br/&gt;
     a preference one way or the other for this kind of thing?&lt;br/&gt;
     (I&apos;m impartial).&lt;/p&gt;

&lt;p&gt;The patch, d1758_newJUnitTests_v1.patch, also adds a new utility method and some associated state to JDBC.java for checking two things: 1) that the classpath has JAXP and Xalan classes, and 2) if the classpath has Xalan, check that the version of Xalan meets the minimum requirement for use of Derby SQL/XML operators.  These methods/flags are then used to determine when to run the new XML JUnit tests.  I wasn&apos;t sure if they are more appropriate in JDBC.java or BaseJDBCTestCase.java, so I chose the former.  But if that was the wrong decision, I can of course change it.&lt;/p&gt;

&lt;p&gt;I ran the new test cases against jdk142, ibm142, jdk15, ibm15, and jdk16.  In the absence of &quot;endorsed jars&quot; and classpath entries that include Xalan, the results were as follow:&lt;/p&gt;

&lt;p&gt; jdk142: Neither XMLTypeAndOpsTest nor XMLMissingClassesTest runs.&lt;br/&gt;
   This is because jdk142 exposes a version of Xalan that does&lt;br/&gt;
   not meet the minimum requirements for Derby SQL/XML.  Attempts&lt;br/&gt;
   to run either test would lead to a Xalan-induced error caused&lt;br/&gt;
   by a Xalan bug when running with security manager.  Thus both&lt;br/&gt;
   tests are skipped.&lt;/p&gt;

&lt;p&gt; ibm142: XMLTypeAndOpsTest runs successfully, XMLMissingClassesTest&lt;br/&gt;
   is skipped (as expected--a version of Xalan 2.6 is exposed in the &lt;br/&gt;
   ibm142 JVM).&lt;/p&gt;

&lt;p&gt; jdk15: XMLMissingClassesTest runs successfully, XMLTypeAndOpsTest&lt;br/&gt;
   is skipped (as expected--jdk15 does not expose Xalan).&lt;/p&gt;

&lt;p&gt; ibm15: XMLTypeAndOpsTest runs successfully, XMLMissingClassesTest&lt;br/&gt;
   is skipped (as expected--a version of Xalan 2.7.1 is exposed&lt;br/&gt;
   in the ibm15 JVM).&lt;/p&gt;

&lt;p&gt; jdk16: XMLMissingClassesTest runs successfully, XMLTypeAndOpsTest&lt;br/&gt;
   is skipped  (as expected--jdk16 does not expose Xalan).&lt;/p&gt;

&lt;p&gt;I then re-ran the tests after providing external Xalan and JAXP jars via classpath settings and/or &quot;endorsed jars&quot; to the JVMs. I tried both a 2.5.0 and a 2.7.0 version of Xalan in these tests. In all cases the XMLMissingClassesTest was skipped (as expected) and the XMLTypeAndOpsTest was run.  There were two cases where the test failed:&lt;/p&gt;

&lt;p&gt;  1) ibm15 w/ endorsed 2.5.0: In this case there were lots of&lt;br/&gt;
     failures caused by Java exceptions saying something to the&lt;br/&gt;
     effect of &quot;Unable to locate implementation for xxx&quot; where&lt;br/&gt;
     &quot;xxx&quot; was an internal Xalan class.  My guess is that since&lt;br/&gt;
     ibm15 embeds and exposes a version of Xalan 2.7.1 it has&lt;br/&gt;
     some dependencies on that particular version.  When I&lt;br/&gt;
     overrode that with an &lt;b&gt;earlier&lt;/b&gt; version (2.5.0) the classes&lt;br/&gt;
     expected by the JVM did not exist, leading to errors.  That&lt;br/&gt;
     seems reasonable to me and is not something I think should&lt;br/&gt;
     block the patch.  As a general rule it seems like a bad idea&lt;br/&gt;
     to override the JVMs libraries with earlier versions than&lt;br/&gt;
     what it expects.&lt;/p&gt;

&lt;p&gt;     Note that when I endorsed Xalan 2.7.0 over the ibm15-embedded&lt;br/&gt;
     version, everything ran as expected.&lt;/p&gt;

&lt;p&gt;  2) jdk16 w/ endorsed jars (either 2.5.0 or 2.7.0): there is&lt;br/&gt;
     a single failure reported in XMLTypeAndOpsTest when running&lt;br/&gt;
     against the Derby client.  The failure occurs because the&lt;br/&gt;
     test is written to assert the SQLSTATE of a nested exception--&lt;br/&gt;
     but it turns out that for jdk16 the exception message does not&lt;br/&gt;
     include the SQLSTATE for the nested exception.  Some changes&lt;br/&gt;
     that I made as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1976&quot; title=&quot;Add new utility methods to BaseJDBCTestCase to make conversion of ij tests to JUnit easier.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1976&quot;&gt;&lt;del&gt;DERBY-1976&lt;/del&gt;&lt;/a&gt; added logic to assertSQLState()&lt;br/&gt;
     to search for nested exceptions, but that logic expects the&lt;br/&gt;
     SQLSTATE to be included in the error message.  For whatever&lt;br/&gt;
     reason that&apos;s not the case with jdk16.  More specifically,&lt;br/&gt;
     we see the following error message from the client with&lt;br/&gt;
     JVMs &amp;lt; 1.6:&lt;/p&gt;

&lt;p&gt;     org.apache.derby.client.am.SqlException: The exception &apos;java.sql.SQLException:&lt;br/&gt;
     XML values are not allowed in top-level result sets; try using XMLSERIALIZE.&apos;&lt;br/&gt;
     was thrown while evaluating an expression. SQLSTATE: 42Z71: XML values are not&lt;br/&gt;
     allowed in top-level result sets; try using XMLSERIALIZE.&lt;/p&gt;

&lt;p&gt;     From this we can search for &quot;SQLSTATE&quot; and the expected &quot;42Z71&quot;.&lt;br/&gt;
     But with jdk16 the error message is:&lt;/p&gt;

&lt;p&gt;     java.sql.SQLException: The exception &apos;java.sql.SQLSyntaxErrorException: XML&lt;br/&gt;
     values are not allowed in top-level result sets; try using XMLSERIALIZE.&apos; was&lt;br/&gt;
     thrown while evaluating an expression.&lt;/p&gt;

&lt;p&gt;     The SQLSTATE of the nested exception is not printed.  I spent some&lt;br/&gt;
     time trying to figure out how to retrieve  the SQLSTATE of the nested&lt;br/&gt;
     exception in this case, but was unable to do so.  I need to look&lt;br/&gt;
     at this some more.&lt;/p&gt;

&lt;p&gt;     But since jdk16 by default does not exposed Xalan jars, the typical&lt;br/&gt;
     case for running tests on that JVM will be that XMLMissingClassesTest&lt;br/&gt;
     runs (and passes).  Thus I don&apos;t think this is a blocker for the patch, &lt;br/&gt;
     either.&lt;/p&gt;

&lt;p&gt;And finally, I ran &quot;suites.All&quot; with jdk142 and ibm142 and all tests passed with this patch.&lt;/p&gt;

&lt;p&gt;NOTE: After this patch has been reviewed/updated and finally committed I will post a separate patch to remove the old lang/xml_general.sql test and the corresponding master files.  I will then continue addressing the rest of the tasks for this issue (esp. xmlBinding.java) in incremental fashion.&lt;/p&gt;</comment>
                            <comment id="12444099" author="army" created="Mon, 23 Oct 2006 21:50:36 +0100"  >&lt;p&gt;Unchecking &quot;Patch Available&quot; as I realized that I was confused about some setUp() and tearDown() functionality and that confusion makes the patch a bit awkward.  Will post another patch after cleaning things up a bit...&lt;/p&gt;</comment>
                            <comment id="12444421" author="djd" created="Tue, 24 Oct 2006 18:07:30 +0100"  >&lt;p&gt;Tests are not run in any guaranteed order if the set of tests is created using the class, e.g. new TestSuite(MyTest.class).&lt;/p&gt;

&lt;p&gt;See the second page of:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.javaworld.com/jw-12-2000/jw-1221-junit.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.javaworld.com/jw-12-2000/jw-1221-junit.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12444426" author="djd" created="Tue, 24 Oct 2006 18:15:38 +0100"  >&lt;p&gt;Maybe your new changes will address this, but I don&apos;t see why you declare fields to hold the various statement objects. Why not just use local variables for them? The fields will lead to increased memory usage for the tests as each test fixture will have its own copy of all the fields. Local scoping such items as local variables I believe makes the code much clearer, see where &amp;amp; how the variable is created inline with the test.&lt;/p&gt;</comment>
                            <comment id="12444544" author="army" created="Tue, 24 Oct 2006 23:32:32 +0100"  >&lt;p&gt;&amp;gt; Tests are not run in any guaranteed order if the set of tests is created using the class, e.g. new TestSuite(MyTest.class).&lt;/p&gt;

&lt;p&gt;Thank you for pointing this out.  I just found a quote from the JUnit documentation that says the same thing (&lt;a href=&quot;http://junit.sourceforge.net/doc/faq/faq.htm#tests_2)/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://junit.sourceforge.net/doc/faq/faq.htm#tests_2)/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;a href=&quot;http://www.javaworld.com/jw-12-2000/jw-1221-junit.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.javaworld.com/jw-12-2000/jw-1221-junit.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great link, thanks for sharing it!  I&apos;m working to apply these suggestions as I prepare the second patch.&lt;/p&gt;

&lt;p&gt;&amp;gt;  Maybe your new changes will address this, but I don&apos;t see why you declare fields to hold the various statement objects.&lt;/p&gt;

&lt;p&gt;Side effect of incremental development on my machine.  The first thing I did was create the JUnit equivalent to xml_general.sql as a single test case, in which case object fields seemed like an okay thing to do.  When I broke it up into a bunch of smaller test cases I didn&apos;t remove the object fields, hence they&apos;re still there.&lt;/p&gt;

&lt;p&gt;&amp;gt; The fields will lead to increased memory usage for the tests as each test fixture will have its own copy of all the fields.&lt;/p&gt;

&lt;p&gt;Interesting, I guess I didn&apos;t realize multiple test fixtures exist in memory at the same time.  Somehow when I read &quot;JUnit provides a new instance of the fixture objects for each test method&quot; I was thinking that only one instance of the fixture is instantiated at a time.  Thanks for pointing this out, I will make the fields local to each test method.&lt;/p&gt;

&lt;p&gt;And thanks for taking the time to review the changes.  I appreciate the feedback!&lt;/p&gt;</comment>
                            <comment id="12444549" author="army" created="Wed, 25 Oct 2006 00:59:13 +0100"  >&lt;p&gt;Posting a second version of the new JUnit tests, d1758_newJUnitTests_v2.patch, that has the following changes w.r.t _v1:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds a new TestSetup class that creates and populates two tables to&lt;br/&gt;
    be used as a fixture for the various test methods in XMLTypeAndOpsTest.&lt;br/&gt;
    These two tables are used in, and constant across, several different&lt;br/&gt;
    test methods.  Use of a new TestSetup class allows the tables to be&lt;br/&gt;
    created once for the entire test, instead of once-per-test-method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Moves the creation/cleanup of all other tables to the local test methods&lt;br/&gt;
    in which they are used.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Makes all test methods independent of each other so that the order&lt;br/&gt;
    in which the tests are executed does not matter.  Also ensures that&lt;br/&gt;
    no test method has &quot;side effects&quot; on the test fixture.  These&lt;br/&gt;
    changes are per JUnit recommendations noted by Dan in his review&lt;br/&gt;
    comments.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Moves creation of local fields (such as statement objects) into the&lt;br/&gt;
    local test methods in which they are used (per Dan&apos;s review comments).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds a check of &quot;JDBC.vmSupportsJDBC4()&quot; to the appropriate test&lt;br/&gt;
    method so that the test will pass for jdk16 (see previous comment&lt;br/&gt;
    regarding SQLSTATEs and nested exceptions in jdk16).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I ran the new JUnit tests against ibm142, jdk142, ibm15, jdk15, and jdk16 and it passed in all cases.&lt;/p&gt;

&lt;p&gt;If anyone is inclined to further review this patch, I&apos;d be grateful for any other suggestions...&lt;/p&gt;

&lt;p&gt;NOTE: &quot;svn stat&quot; for the _v2 patch is the same as for the _v1 patch.&lt;/p&gt;</comment>
                            <comment id="12444598" author="olav" created="Wed, 25 Oct 2006 09:04:56 +0100"  >&lt;p&gt;&amp;gt;   2) jdk16 w/ endorsed jars (either 2.5.0 or 2.7.0): there is&lt;br/&gt;
&amp;gt;    a single failure reported in XMLTypeAndOpsTest when running&lt;br/&gt;
&amp;gt;    against the Derby client.  The failure occurs because the&lt;br/&gt;
&amp;gt;    test is written to assert the SQLSTATE of a nested exception--&lt;br/&gt;
&amp;gt;    but it turns out that for jdk16 the exception message does not&lt;br/&gt;
&amp;gt;    include the SQLSTATE for the nested exception.  Some changes&lt;br/&gt;
&amp;gt;    that I made as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1976&quot; title=&quot;Add new utility methods to BaseJDBCTestCase to make conversion of ij tests to JUnit easier.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1976&quot;&gt;&lt;del&gt;DERBY-1976&lt;/del&gt;&lt;/a&gt; added logic to assertSQLState()&lt;br/&gt;
&amp;gt;    to search for nested exceptions, but that logic expects the&lt;br/&gt;
&amp;gt;    SQLSTATE to be included in the error message.  For whatever&lt;br/&gt;
&amp;gt;    reason that&apos;s not the case with jdk16.  More specifically,&lt;br/&gt;
&amp;gt;    we see the following error message from the client with&lt;br/&gt;
&amp;gt;    JVMs &amp;lt; 1.6:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    org.apache.derby.client.am.SqlException: The exception &apos;java.sql.SQLException:&lt;br/&gt;
&amp;gt;    XML values are not allowed in top-level result sets; try using XMLSERIALIZE.&apos;&lt;br/&gt;
&amp;gt;    was thrown while evaluating an expression. SQLSTATE: 42Z71: XML values are not&lt;br/&gt;
&amp;gt;    allowed in top-level result sets; try using XMLSERIALIZE.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    From this we can search for &quot;SQLSTATE&quot; and the expected &quot;42Z71&quot;.&lt;br/&gt;
&amp;gt;    But with jdk16 the error message is:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    java.sql.SQLException: The exception &apos;java.sql.SQLSyntaxErrorException: XML&lt;br/&gt;
&amp;gt;    values are not allowed in top-level result sets; try using XMLSERIALIZE.&apos; was&lt;br/&gt;
&amp;gt;    thrown while evaluating an expression.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    The SQLSTATE of the nested exception is not printed.  I spent some&lt;br/&gt;
&amp;gt;    time trying to figure out how to retrieve  the SQLSTATE of the nested&lt;br/&gt;
&amp;gt;    exception in this case, but was unable to do so.  I need to look&lt;br/&gt;
&amp;gt;    at this some more.&lt;/p&gt;

&lt;p&gt;Was this with the embedded or the client driver? Based on the name of one of the execptions it seems that you were using the client driver at least in some of your experiments. If it was with the client driver there is a bug report for this (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1440&quot; title=&quot;jdk 1.6 client driver omits SQLStates and chained exceptions in error messages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1440&quot;&gt;&lt;del&gt;DERBY-1440&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="12444671" author="army" created="Wed, 25 Oct 2006 15:52:00 +0100"  >&lt;p&gt;&amp;gt; Was this with the embedded or the client driver?&lt;/p&gt;

&lt;p&gt;Yes you are correct, this is with the client driver only.  Sorry for not making that more clear.&lt;/p&gt;

&lt;p&gt;&amp;gt; If it was with the client driver there is a bug report for this (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1440&quot; title=&quot;jdk 1.6 client driver omits SQLStates and chained exceptions in error messages&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1440&quot;&gt;&lt;del&gt;DERBY-1440&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Ah, excellent!  I did a search fo Jira but somehow managed to miss this one.  Thank you very much for tracking it down.&lt;/p&gt;</comment>
                            <comment id="12444780" author="bryanpendleton" created="Thu, 26 Oct 2006 06:14:47 +0100"  >&lt;p&gt;I was successful with this patch. I was able to run the tests in several environments,&lt;br/&gt;
including mixtures of JDK 1.4 and 1.5, with and without Xalan 2.7 as an endorsed library.&lt;/p&gt;

&lt;p&gt;The tests functioned as expected: when I had the right environment, the tests passed,&lt;br/&gt;
and when I didn&apos;t ,the tests quietly did nothing.&lt;/p&gt;

&lt;p&gt;It was a little odd that, when the tests detected that I didn&apos;t have the requisite environment,&lt;br/&gt;
and quietly exited without doing any work, the result from JUnit was simply:&lt;/p&gt;

&lt;p&gt;-bash-2.05b$ java junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest&lt;/p&gt;

&lt;p&gt;Time: 0&lt;/p&gt;

&lt;p&gt;OK (0 tests)&lt;/p&gt;

&lt;p&gt;If I was a Derby developer trying to get my environment set up to be able to run these tests,&lt;br/&gt;
and I was having trouble getting my environment set up correctly, this output would not&lt;br/&gt;
give me much to go on in terms of fixing my environment.&lt;/p&gt;

&lt;p&gt;But I guess that&apos;s not really the point of these tests.&lt;/p&gt;

&lt;p&gt;I didn&apos;t read every line of the patch (it&apos;s quite large), but in general I&apos;m comfortable with it.&lt;/p&gt;</comment>
                            <comment id="12445256" author="bryanpendleton" created="Fri, 27 Oct 2006 20:18:28 +0100"  >&lt;p&gt;Patch d1758_newJUnitTests_v2.patch committed to subversion as revision 468503.&lt;/p&gt;

&lt;p&gt;Cleared patch available flag.&lt;/p&gt;

&lt;p&gt;Army, there were two or three other submissions to JDBC.java after you attached your&lt;br/&gt;
patch and before I committed. The merging seemed clean, but can you please check&lt;br/&gt;
the results carefully and make sure that JDBC.java looks OK?&lt;/p&gt;</comment>
                            <comment id="12445258" author="djd" created="Fri, 27 Oct 2006 20:24:14 +0100"  >&lt;p&gt;Having seen the commit messages go by I would have to say that JDBC is not the right class for methods related to Xalan.&lt;br/&gt;
The existing methods are there because they directly related to JDBC, Xalan does not.&lt;/p&gt;

&lt;p&gt;Maybe a new XML class?&lt;/p&gt;</comment>
                            <comment id="12445270" author="army" created="Fri, 27 Oct 2006 21:53:57 +0100"  >&lt;p&gt;Thank you for the commit, Bryan!&lt;/p&gt;

&lt;p&gt;I&apos;m attaching another patch, d1758_followup_v1.patch, that moves the XML utility methods out of junit.JDBC and into a new class, junit.XML, per Dan&apos;s suggestion (thanks Dan).&lt;/p&gt;

&lt;p&gt;Note that I changed the &quot;haveClass()&quot; method in JDBC.java from private to protected so that it can be called from the junit.XML class.  That was the easiest thing to do. &lt;/p&gt;

&lt;p&gt;Since checking the classpath is not a JDBC-specific operation, the other option is to move &quot;haveClass()&quot; to some other class in the junit package.  If anyone indicates a preference for doing so and also indicates the class to which the method should be moved, I can do it this way.  Otherwise I&apos;ll just leave it as it is (i.e. keep it in JDBC.java and make it protected).&lt;/p&gt;

&lt;p&gt;I ran &quot;suites.All&quot; with this patch applied using jdk142 with endorsed Xalan  2.5 jars and there was one error--an OOM error with testLongLobLength().  That was probably because I was running the suite in the background while running other apps.  In any event, I don&apos;t think that&apos;s related to this change.&lt;/p&gt;

&lt;p&gt;As always, review comments and/or commit are appreciated.&lt;/p&gt;</comment>
                            <comment id="12445315" author="bryanpendleton" created="Sat, 28 Oct 2006 02:02:22 +0100"  >&lt;p&gt;I think Dan&apos;s idea of a separate XML utility class makes sense, too. I think it&apos;s reasonable to&lt;br/&gt;
leave the haveClass method in the JDBC class and call it from the XML class.&lt;/p&gt;

&lt;p&gt;I applied the follow-up patch and I successfully ran various combinations of 1.4 and 1.5 JDK&lt;br/&gt;
with and without the Xalan classes available. Everything seemed to be working correctly to&lt;br/&gt;
me with the XML Junit tests, so I committed d1758_followup_v1.patch to subversion&lt;br/&gt;
as revision 468605.&lt;/p&gt;</comment>
                            <comment id="12445657" author="army" created="Mon, 30 Oct 2006 17:04:43 +0000"  >&lt;p&gt;Thank you very much for the review and commit, Bryan!&lt;/p&gt;</comment>
                            <comment id="12446091" author="army" created="Tue, 31 Oct 2006 22:23:57 +0000"  >&lt;p&gt;Attaching a patch, d1758_remove_xgen_v1.patch, to remove the old lang/xml_general.sql test and the corresponding master files.  That test has now been replaced by lang/XMLTypeAndOpsTest.java, which is a JUnit test.&lt;/p&gt;

&lt;p&gt;After this patch is committed, the remaining work for this issue will be to convert lang/xmlBinding.java to JUnit and ensure that it passes on all platforms.  I will be working on that next...&lt;/p&gt;

&lt;p&gt;In the meantime, if anyone has time to review/commit the d1758_remove_xgen_v1.patch, I welcome the feedback.&lt;/p&gt;</comment>
                            <comment id="12446125" author="djd" created="Wed, 1 Nov 2006 00:06:49 +0000"  >&lt;p&gt;d1758_remove_xgen_v1.patch, applied - Thanks AB.&lt;/p&gt;</comment>
                            <comment id="12446130" author="djd" created="Wed, 1 Nov 2006 00:37:18 +0000"  >&lt;p&gt;The re-worked test XMLTypeAndOpsTest looks much better, I was think the improvements have made it so the suite() method could be simplified to&lt;/p&gt;

&lt;p&gt;return new XMLTestSetup(TestConfiguration.defaultSuite(XMLTypeAndOpsTest.class))&lt;/p&gt;

&lt;p&gt;but I realized that the CleanDatabasetestSetup installed by defaultSuite would negate the XMLTestSetup. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;TestConfiguration.defaultSuite() should probably be enhanced to have an overloaded signature with a boolean&lt;br/&gt;
that allows optional addition of the CleanDatabasetestSetup.&lt;/p&gt;</comment>
                            <comment id="12450563" author="army" created="Thu, 16 Nov 2006 22:29:20 +0000"  >&lt;p&gt;Attaching a patch, d1758_newXBindTest_v1.patch, that adds a new JUnit test to replace the old lang/xmlBinding.java test.  The patch does the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds XML file insertion utility methods to junit/XML.java&lt;/li&gt;
	&lt;li&gt;Creates a new JUnit test called lang/XMLBindingTest.java that&lt;br/&gt;
    uses the new utility methods to test various binding scenarios&lt;br/&gt;
    with Derby&apos;s SQL/XML operators.&lt;/li&gt;
	&lt;li&gt;Overloads the TestConfiguration.defaultSuite() method with a boolean&lt;br/&gt;
    signature to allow optional addition of CleanDatabaseSetup, per&lt;br/&gt;
    Dan&apos;s previous comment.&lt;/li&gt;
	&lt;li&gt;Updates lang/XMLTypeAndOpsTest to use the new overloaded defaultSuite()&lt;br/&gt;
    method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that I have not yet added XMLBindingTest to any suites because the test fails on Linux machines with a similar diff to what was seen for the old lang/xmlBinding.java test.  I&apos;m still looking into that failure and hope to post an appropriate follow-up patch in the next couple of days.&lt;/p&gt;

&lt;p&gt;I also plan to post subsequent patches to remove the old lang/xmlBinding.java test and to create a singe JUnit &quot;suite&quot; to run all of the XML tests.  Those patches will come after the new XML binding JUnit test is working as expected on all platforms.&lt;/p&gt;

&lt;p&gt;I ran suites.All against classes (vs jars) with ibm142 (textui) as a sanity check and all tests passed.  When I tried to run the suite with jars I kept seeing a Java core dump in the LangScripts.derived() test with ibm142. But that occurs even without my changes, so I&apos;m not sure what&apos;s going on there.  I also ran suites.All with Sun jdk142 (swingui): in that case there was no core dump and the suite ran with one failure: an OutOfMemory error in BlobClob4Blob.testPositionAgressive().  Again, I don&apos;t think my changes are the cause.&lt;/p&gt;

&lt;p&gt;With the exception of the TestConfiguration changes the patch is fairly isolated and should not affect suites.All (yet).  If anyone has a chance to review, I&apos;d appreciate it. &lt;/p&gt;

&lt;p&gt;In the absence of feedback/suggestions, I&apos;ll probably commit the patch tomorrow (Friday)...&lt;/p&gt;</comment>
                            <comment id="12451836" author="army" created="Wed, 22 Nov 2006 01:06:51 +0000"  >&lt;p&gt;While trying to add lang/XMLBindingTest.java to a JUnit suite so that it can run as part of suites.All, I ran into a problem where the test setup fails because the JAXP parser does not have permissions to read the DTD file that is used for inserting test data.&lt;/p&gt;

&lt;p&gt;Note that this isn&apos;t a problem when running the test alone because when it runs standalone, the &quot;setup&quot; work happens &lt;b&gt;before&lt;/b&gt; the security manager is installed.  When the test is run as part of a suite, though, a security manager is installed for any tests that run prior to XMLBindingTest, and that security manager is not &quot;uninstalled&quot; after those tests.  Then, since the lingering security manager does not give the necessary permissions to JAXP, the binding test fails during setup.&lt;/p&gt;

&lt;p&gt;This security problem was also an issue for the old binding test, lang/xmlBinding.java.  In that case the problem was solved by creating a policy file with specific permissions to allow &quot;everything&quot; to read the DTD file.  That permission was then automatically &quot;merged&quot; into the security manager&apos;s policy as part of the old harness setup, thereby allowing the test to run without error.&lt;/p&gt;

&lt;p&gt;So I made some changes to the JUnit security manager setup to allow a test to append permissions to a policy file and to then install a security manager with those permissions.  However, when I try to run XMLBindingTest.java as part of a JUnit suite, the new permissions are never picked up.&lt;/p&gt;

&lt;p&gt;I did some tracing in the JUnit setup classes and I can verify that the code to &quot;uninstall&quot; a security manager and install a new manager that uses the modified policy is in fact being executed.  However, it looks like the new SecurityManager() is never actually being enforced.  Or put another way, it looks like the security policy that takes effect is always the &lt;b&gt;first&lt;/b&gt; one to be assigned in the JVM; subsequent attempts to set the System security manager to non-null values will &lt;b&gt;re-enable&lt;/b&gt; the security manager, but will not alter its policy.&lt;/p&gt;

&lt;p&gt;Note, though, that attempts to UN-install the security manager (by calling System.setSecurityManager(null)) &lt;b&gt;do&lt;/b&gt; work.  But when we try try to call setSecurityManager() with a non-null value (namely, &quot;new SecurityManager()&quot;), the policy that it implements is always the first policy that was successfully applied for the JVM; if the &quot;java.security.policy&quot; property is pointing to some other (new) policy file, it is ignored.&lt;/p&gt;

&lt;p&gt;At least, this is what I&apos;ve come to conclude based on my understanding of the security manager setup code.&lt;/p&gt;

&lt;p&gt;In order to get the binding test to work as part of a suite I can just uninstall the security manager altogether-&lt;del&gt;that works fine. However, that seems a bit like cheating to me.  And to be honest, I think that we &lt;b&gt;should&lt;/b&gt; be able to change the security manager to use a new policy&lt;/del&gt;-or at least, that has been my impression based on the code comments.&lt;/p&gt;

&lt;p&gt;So my question, then, is this: does anyone know if I have to do something special to get the test to install a Security Manager that implements a different policy file than one that has previously been installed?  I&apos;ve spent a lot of time on this but have come up empty-handed.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a patch, d1758_newSecMgr_doNotCommit.patch with the test setup changes that I&apos;ve made.  If there are any problems (glaring or otherwise) with my approach that might be leading to this inability to alter security policy, I would be grateful to anyone who could point them out...  &lt;/p&gt;

&lt;p&gt;Note the patch includes all of the changes that I&apos;ve made to add XMLBindingTest.java to a new  XML JUnit suite.  I&apos;m hoping anyone who looks at it can just ignore the test-specific changes and focus on the security-related ones...&lt;/p&gt;</comment>
                            <comment id="12451839" author="djd" created="Wed, 22 Nov 2006 01:26:20 +0000"  >&lt;p&gt;Switching the security manager hasn&apos;t been tested, the first time I ran a test using the no security manager setup I had to fix a bug or two, so it&apos;s possible there are bugs in the code. Though maybe the permissions are fixed when the class is initally loaded, so changing the policy has no effect?&lt;/p&gt;

&lt;p&gt;The approach of enabling all code to read the DTD files is also &quot;cheating&quot;. It removes the testing of the situation when one piece of the code in the stack doesn&apos;t have the permissions to read the DTD file, so it&apos;s just like running with no security manager. &lt;/p&gt;</comment>
                            <comment id="12451842" author="army" created="Wed, 22 Nov 2006 01:37:23 +0000"  >&lt;p&gt;&amp;gt; The approach of enabling all code to read the DTD files is also &quot;cheating&quot;.&lt;/p&gt;

&lt;p&gt;True.  But my attempts to selectively give the JAXP parser permission to read the DTD file failed, as described in the comments for the change.  Esp:&lt;/p&gt;

&lt;p&gt;+         * Note that attempts to find the JAXP&lt;br/&gt;
+         * parser in the classpath as is done for the Derby jars&lt;br/&gt;
+         * in SecurityManagerSetup.determineClasspath() does not&lt;br/&gt;
+         * work--for whatever reason the &quot;codeSource&quot; for the&lt;br/&gt;
+         * JAXP parser classes is always null.  Thus we cannot&lt;br/&gt;
+         * use a property like we do for the derby jars.&lt;/p&gt;

&lt;p&gt;I guess that should have been my first question, then: why is codeSource &quot;null&quot; and is there a way to get around it?  If not, then allowing all code to read a single DTD file seems like &quot;less&quot; cheating than completely disabling the security manager altogether.  But you&apos;re right, cheating is cheating...&lt;/p&gt;</comment>
                            <comment id="12451843" author="djd" created="Wed, 22 Nov 2006 01:39:45 +0000"  >&lt;p&gt;I think having the XML test/suite running even without a security manager is a good step forward. As long as there is some issue in Jira (could be this one) that remains open until the security manager is enabled for the test then it&apos;s fine. &quot;Progress, not perfection&quot; in the open source world.&lt;/p&gt;

&lt;p&gt;You can use the SecurityManagerSetup.noSecurityManager() decorator method to disable the Securitymanager and it can be applied on a fixture by fixture basis, see DatabaseClassLoadingTest for an example, or it could be for a whole suite.&lt;/p&gt;</comment>
                            <comment id="12451844" author="djd" created="Wed, 22 Nov 2006 01:45:27 +0000"  >&lt;p&gt;On the JAXP code source being null, I don&apos;t know the answer, but the real issue is how does an application grant permissions. Ideally the Derby documentation should cover this and again ideally Derby should not be requiring applications to grant permissions all the way up the stack. So the (maybe painful) process of discovering how to do this for the tests should make it easier for Derby user&apos;s to do the same. In this case because the parser can come from multiple places there may be multiple answers, e.g when the parser is bundled with the VM, when the parser is supplied by the application.&lt;/p&gt;</comment>
                            <comment id="12452035" author="army" created="Wed, 22 Nov 2006 20:11:37 +0000"  >&lt;p&gt;Attaching a patch, d1758_newXMLSuite_v1.patch, that does the following:&lt;/p&gt;

&lt;p&gt;  1. Updates XMLBindingTest to ignore the Windows line-ending character&lt;br/&gt;
     (&quot;\r&quot;) when counting characters as part of serialization.  See&lt;br/&gt;
     &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2106&quot; title=&quot;Improve Derby SQL/XML processing to account for Xalan&amp;#39;s use of platform-specific newlines when serializing.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2106&quot;&gt;DERBY-2106&lt;/a&gt; for more.  This allows the test to run successfully&lt;br/&gt;
     regardless of platform.&lt;/p&gt;

&lt;p&gt;  2. Updates XMLBindingTest to run with NO security manager for now,&lt;br/&gt;
     per Dan&apos;s suggestion.  This works toward the &quot;progress not&lt;br/&gt;
     perfection&quot; goal of incremental development.  Once the questions&lt;br/&gt;
     surrounding the security policy for JAXP have been answered the&lt;br/&gt;
     test can be updated to run with the security manager.&lt;/p&gt;

&lt;p&gt;  3. Creates a new JUnit suite, suites/XMLSuite.java, to run all of the&lt;br/&gt;
     XML JUnit tests, and enables that suite to run as part of&lt;br/&gt;
     lang/_Suite.java, which in turn means it is executed as part&lt;br/&gt;
     suites.All.&lt;/p&gt;

&lt;p&gt;I ran lang/_Suite on Windows and Linux with ibm142 and ibm15 and there were no failures.  I also ran the full &quot;suites.All&quot; on Windows with Sun jdk142 (using endorsed Xalan jars) with no failures.  In all cases I used the &quot;swingui&quot; runner and verified manually that the XML tests ran and passed as expected. And finally, as a sanity check I ran the new XMLSuite on Windows with jdk142 (no endorsed jars) and jdk15 to verify that the XML tests do not run if the required classes are not present.&lt;/p&gt;</comment>
                            <comment id="12452037" author="army" created="Wed, 22 Nov 2006 20:13:26 +0000"  >&lt;p&gt;Oh by the way, just to make it explicit, I committed d1758_newXBindTest_v1.patch to trunk on 11/17 with svn revision 476365.&lt;/p&gt;</comment>
                            <comment id="12452042" author="bryanpendleton" created="Wed, 22 Nov 2006 20:48:23 +0000"  >&lt;p&gt;Hi Army,&lt;/p&gt;

&lt;p&gt;I was successful applying d1758_newXMLSuite_v1.patch. I ran both XMLBindingTest and suites.XMLSuite with JDK 1.4.2 and Xalan 2.7 and the tests passed successfully. I also ran both XMLBindingTest and suites.XMLSuite with JDK 1.4.2 but without Xalan 2.7, and the tests quietly did nothing.&lt;/p&gt;

&lt;p&gt;In particular, when the tests passed, I did &lt;b&gt;not&lt;/b&gt; see the #-of-characters diff that I had been seeing in my environment before. So I can confirm that that diff is gone for me.&lt;/p&gt;</comment>
                            <comment id="12452057" author="army" created="Wed, 22 Nov 2006 21:53:35 +0000"  >&lt;p&gt;Thank you for continuing to review the patches, Bryan, and for verifying that the new XMLBindingTest runs without error in your environment.  I committed d1758_newXMLSuite_v1.patch with svn revision 478336.&lt;/p&gt;</comment>
                            <comment id="12452064" author="army" created="Wed, 22 Nov 2006 22:32:51 +0000"  >&lt;p&gt;Attaching a patch to delete the old XML binding test and the old XML suite.  Both have now been replaced with JUnit versions.&lt;/p&gt;

&lt;p&gt;The patch, d1758_remove_xBindAndSuite.patch, has been committed with svn 478348.&lt;/p&gt;</comment>
                            <comment id="12454973" author="army" created="Fri, 1 Dec 2006 19:09:32 +0000"  >&lt;p&gt;Attaching a patch, d1758_secmgr_v1.patch, that enables the lang/XMLBindingTest to run under a security manager.  Changes include all of the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updates lang/XMLBindingTest.java so that it will run under the default testing security manager (i.e. removed the &quot;noSecurityManager()&quot; wrapper).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds a new property, derbyTesting.jaxpjar, to the default testing policy file.  This property holds the location of the JAXP jar picked up from the classpath &lt;em&gt;if&lt;/em&gt; that jar is external to the JVM. If the jar is either embedded within, or &quot;endorsed&quot; by, the JVM then this property is unused.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    The JAXP jar is then given permission to read the &quot;extin&quot; testing directory, which is the directory into which the DTD required by XMLBindingTest is copied (and thus JAXP has permission to read the DTD file).&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds a new static utility method, &quot;getJAXPParserLocation()&quot;, to the junit/XML.java file.  This method instantiates a JAXP object and then uses the implementation-specific class name to try to find out where the JAXP jar is located.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modifies derbyTesing/junit/build.xml so that junit/XML.java will only build with 1.4 JVMs and higher.  This is required because junit/XML.java now references a JAXP class that is not defined in 1.3.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updates the &quot;getURL()&quot; method of junit/SecurityManagerSetup.java to account for situations where a class &quot;code source&quot; is null.  Also updates the &quot;determineClasspath()&quot; method of that class to set the derbyTesting.jaxpjar property as appropriate.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;And finally, moves the build order of the derbyTesting/junit directory so that it is built &lt;b&gt;before&lt;/b&gt; the derbyTesting/harness directory.  This is required because the harness/jvm.java file references junit/SecurityManagerSetup.java, which in turn references junit/XML.java (with this patch).  So when we try to compile the &quot;harness&quot; directory we will indirectly try to compile junit/XML.java using the harness/build.xml file--but that specific build file does not know that junit/XML.java is only supposed to be built with 1.4. By putting the junit target first we ensure that the junit/XML.java file is built with the junit/build.xml file, which knows not to use 1.3.  At least, that&apos;s my understanding of the build process works.  Someone please correct me if I&apos;m wrong (and I very well could be...).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I would appreciate reviews if anyone has the time (esp. anyone familiar with JUnit security manager testing and/or the build.xml files...)&lt;/p&gt;</comment>
                            <comment id="12454976" author="fuzzylogic" created="Fri, 1 Dec 2006 19:17:48 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modifies derbyTesing/junit/build.xml so that junit/XML.java will only build with 1.4 JVMs and higher. This is required because junit/XML.java now references a JAXP class that is not defined in 1.3.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I took a look at the build file changes in this patch. Could you move the addition of $&lt;/p&gt;
{xml-apis}
&lt;p&gt; into a separate pathelement? A minor nitpick, i know, but I just ran into some problems trying to automate some buildfile munging and got snagged when a classpath element I was trying to remove was in the same pathelement as the compile.classpath variable.&lt;/p&gt;</comment>
                            <comment id="12455111" author="bryanpendleton" created="Sat, 2 Dec 2006 17:45:27 +0000"  >&lt;p&gt;I applied and built the change, and ran XLMBindingTest and XMLSuite under Sun 1.4.2&lt;br/&gt;
both with and without Xalan 2.7 as an endorsed extension. Tests ran fine. No problems to report.&lt;/p&gt;</comment>
                            <comment id="12455479" author="army" created="Tue, 5 Dec 2006 00:53:23 +0000"  >&lt;p&gt;Thank you for the reviews Bryan and Andrew.  I made the build change that Andrew suggested and committed the patch with svn 482433.  I&apos;ll wait another day or two to see if there are any follow-up suggestions/corrections before resolving and closing this issue.&lt;/p&gt;

&lt;p&gt;I also updated the summary/description of this issue to make it agree more closely with the final changes.&lt;/p&gt;</comment>
                            <comment id="12457396" author="army" created="Mon, 11 Dec 2006 16:33:58 +0000"  >&lt;p&gt;Final patch checked in on 12/04.  One failure resulted from the changes but that was filed/fixed as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2153&quot; title=&quot;suites.All falls over with foundation after revision 482433; java.lang.NoClassFoundError: javax.xml.parsers.DocumentBuilderFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2153&quot;&gt;&lt;del&gt;DERBY-2153&lt;/del&gt;&lt;/a&gt;.  So resolving/closing this issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12357300">DERBY-2131</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12325435">DERBY-688</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12343810" name="d1758_followup_v1.patch" size="21068" author="army" created="Fri, 27 Oct 2006 21:53:57 +0100"/>
                            <attachment id="12343418" name="d1758_newJUnitTests_v1.patch" size="107527" author="army" created="Sat, 21 Oct 2006 04:17:47 +0100"/>
                            <attachment id="12343419" name="d1758_newJUnitTests_v1.stat" size="401" author="army" created="Sat, 21 Oct 2006 04:17:47 +0100"/>
                            <attachment id="12343588" name="d1758_newJUnitTests_v2.patch" size="114650" author="army" created="Wed, 25 Oct 2006 00:59:13 +0100"/>
                            <attachment id="12345453" name="d1758_newSecMgr_doNotCommit.patch" size="18959" author="army" created="Wed, 22 Nov 2006 01:06:51 +0000"/>
                            <attachment id="12345167" name="d1758_newXBindTest_v1.patch" size="23991" author="army" created="Thu, 16 Nov 2006 22:29:20 +0000"/>
                            <attachment id="12345502" name="d1758_newXMLSuite_v1.patch" size="7916" author="army" created="Wed, 22 Nov 2006 20:11:37 +0000"/>
                            <attachment id="12345512" name="d1758_remove_xbindAndSuite.patch" size="32677" author="army" created="Wed, 22 Nov 2006 22:32:51 +0000"/>
                            <attachment id="12344045" name="d1758_remove_xgen_v1.patch" size="226026" author="army" created="Tue, 31 Oct 2006 22:23:57 +0000"/>
                            <attachment id="12344046" name="d1758_remove_xgen_v1.stat" size="506" author="army" created="Tue, 31 Oct 2006 22:23:57 +0000"/>
                            <attachment id="12346245" name="d1758_secmgr_v1.patch" size="13121" author="army" created="Fri, 1 Dec 2006 19:09:32 +0000"/>
                            <attachment id="12346246" name="d1758_secmgr_v1.stat" size="470" author="army" created="Fri, 1 Dec 2006 19:09:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 24 Oct 2006 17:07:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30131</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy13tj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40269</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>