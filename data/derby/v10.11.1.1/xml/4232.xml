<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:36:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4232/DERBY-4232.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4232] XAResource.setTransactionTimeout() makes XAResource.start() fail with the client driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4232</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Got below error message when running an XA prolgram with derby. &lt;br/&gt;
org.apache.derby.client.am.XaException: XAER_PROTO : Error executing a XAResource.start(), server returned XAER_PROTO.&lt;br/&gt;
	at org.apache.derby.client.net.NetXAResource.throwXAException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetXAResource.start(Unknown Source)&lt;br/&gt;
	at TestDerbyXA.process(TestDerbyXA.java:186)&lt;br/&gt;
	at TestDerbyXA.main(TestDerbyXA.java:43)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Error executing a XAResource.start(), server returned XAER_PROTO.&lt;br/&gt;
	at org.apache.derby.client.net.NetXAResource.xaRetValErrorAccumSQL(Unknown Source)&lt;br/&gt;
	... 3 more&lt;/p&gt;

&lt;p&gt;Below is the example program I used. Note: The program will succeed if comment out line 147 - setTransactionTimeout. Does that means call XAResource.setTransactionTimeout() caused the failure?&lt;br/&gt;
I use Apache Derby Network Server - 10.4.2.0 - (689064). The same program works fine with another version Apache Derby Network Server - 10.2.2.0 - (485682). It looks like there is a regression between the two versions.&lt;/p&gt;

&lt;p&gt;import java.sql.Connection;&lt;br/&gt;
import java.sql.PreparedStatement;&lt;br/&gt;
import java.sql.SQLException;&lt;br/&gt;
import java.sql.Statement;&lt;/p&gt;

&lt;p&gt;import javax.sql.XAConnection;&lt;br/&gt;
import javax.transaction.xa.XAException;&lt;br/&gt;
import javax.transaction.xa.XAResource;&lt;br/&gt;
import javax.transaction.xa.Xid;&lt;/p&gt;

&lt;p&gt;import org.apache.derby.jdbc.ClientXADataSource;&lt;/p&gt;

&lt;p&gt;public class TestDerbyXA {&lt;/p&gt;

&lt;p&gt;	ClientXADataSource xaDSLocal = null;&lt;/p&gt;

&lt;p&gt;	ClientXADataSource xaDSRemote = null;&lt;/p&gt;

&lt;p&gt;	public TestDerbyXA() &lt;/p&gt;
{
		// Create two XA data sources.
		xaDSLocal = new ClientXADataSource();
		xaDSLocal.setServerName(&quot;localhost&quot;);
		xaDSLocal.setPortNumber(1527);
		xaDSLocal.setDatabaseName(&quot;testdb&quot;);
		xaDSLocal.setUser(&quot;app&quot;);
		xaDSLocal.setPassword(&quot;derby&quot;);

		xaDSRemote = new ClientXADataSource();
		xaDSRemote.setServerName(&quot;localhost&quot;);
		xaDSRemote.setPortNumber(1527);
		xaDSRemote.setDatabaseName(&quot;testdb&quot;);
		xaDSRemote.setUser(&quot;app&quot;);
		xaDSRemote.setPassword(&quot;derby&quot;);
		// xaDSRemote = xaDSLocal;
	}

&lt;p&gt;	public static void main(String[] args) throws Exception &lt;/p&gt;
{
		TestDerbyXA testObj = new TestDerbyXA();
		testObj.dropTable(&quot;tablea&quot;);
		testObj.createTable(&quot;CREATE TABLE tablea (col1 INT, col2 VARCHAR(32))&quot;);
		testObj.dropTable(&quot;tableb&quot;);
		testObj.createTable(&quot;CREATE TABLE tableb (col1 INT, col2 VARCHAR(32))&quot;);
		testObj.process();
	}

&lt;p&gt;	public void dropTable(String tableName) throws Exception {&lt;br/&gt;
		Connection conn = null;&lt;br/&gt;
		Statement stmt = null;&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			conn = xaDSLocal.getConnection();
			stmt = conn.createStatement();
			stmt.executeUpdate(&quot;DROP TABLE &quot; + tableName);
			System.out.println(&quot;Drop table &quot; + tableName + &quot; succeed.&quot;);
		}
&lt;p&gt; catch (SQLException sqle) &lt;/p&gt;
{
			System.out.println(&quot;Drop table &quot; + tableName + &quot; failed.&quot;);
			sqle.printStackTrace();
		}
&lt;p&gt; finally {&lt;br/&gt;
			// ============ Close JDBC objects, including the connection =======&lt;br/&gt;
			if (stmt != null) {&lt;br/&gt;
				try &lt;/p&gt;
{
					stmt.close();
					stmt = null;
				} catch (SQLException e) {&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
			if (conn != null) {&lt;br/&gt;
				try {
					conn.close();
					conn = null;
				} catch (SQLException e) {&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
&lt;br/&gt;
	public void createTable(String DDL) throws Exception {&lt;br/&gt;
		Connection conn = null;&lt;br/&gt;
		Statement stmt = null;&lt;br/&gt;
&lt;br/&gt;
		try {
			conn = xaDSLocal.getConnection();
			stmt = conn.createStatement();
			stmt.executeUpdate(DDL);
			System.out.println(DDL + &quot; succeed.&quot;);
		} catch (SQLException sqle) {
			System.out.println(DDL + &quot; failed.&quot;);
			sqle.printStackTrace();
		} finally {&lt;br/&gt;
			// ============ Close JDBC objects, including the connection =======&lt;br/&gt;
			if (stmt != null) {&lt;br/&gt;
				try {
					stmt.close();
					stmt = null;
				}
&lt;p&gt; catch (SQLException e) {&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
			if (conn != null) {&lt;br/&gt;
				try &lt;/p&gt;
{
					conn.close();
					conn = null;
				}
&lt;p&gt; catch (SQLException e) {&lt;br/&gt;
				}&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;	public void process() throws Exception {&lt;br/&gt;
		Connection connLocal = null;&lt;br/&gt;
		Connection connRemote = null;&lt;br/&gt;
		int rows = 0;&lt;br/&gt;
		PreparedStatement pstmtLocal = null;&lt;br/&gt;
		PreparedStatement pstmtRemote = null;&lt;br/&gt;
		XAConnection xaConnLocal = null;&lt;br/&gt;
		XAConnection xaConnRemote = null;&lt;br/&gt;
		XAResource xarLocal = null;&lt;br/&gt;
		XAResource xarRemote = null;&lt;br/&gt;
		Xid xidLocal = null;&lt;br/&gt;
		Xid xidRemote = null;&lt;br/&gt;
		try &lt;/p&gt;
{
			xaConnLocal = xaDSLocal.getXAConnection();
			xaConnRemote = xaDSRemote.getXAConnection();
			connLocal = xaConnLocal.getConnection();
			connRemote = xaConnRemote.getConnection();
			xarLocal = xaConnLocal.getXAResource();
			xarRemote = xaConnRemote.getXAResource();

			// Create the Xids

			// Create the global ID
			byte[] globalTransactionId1 = new byte[64];
			globalTransactionId1[0] = (byte) 1;
			byte[] globalTransactionId2 = new byte[64];
			globalTransactionId2[0] = (byte) 2;

			// Create the local branch ID
			byte[] branchQualifierLocal = new byte[64];
			branchQualifierLocal[0] = (byte) 1;
			xidLocal = new XidImpl(globalTransactionId1, branchQualifierLocal, 0x1234);

			// Create the remote branch ID
			byte[] branchQualifierRemote = new byte[64];
			branchQualifierRemote[0] = (byte) 2;
			xidRemote = new XidImpl(globalTransactionId2, branchQualifierRemote, 0x1234);

			// Database operations on the local branch, suspend local branch
			xarLocal.setTransactionTimeout(500);  //!!! The failure will disappear if comment out this line.
			connLocal.setAutoCommit(false);
			xarLocal.start(xidLocal, XAResource.TMNOFLAGS);

			pstmtLocal = connLocal
					.prepareStatement(&quot;INSERT INTO tablea (col1, col2) VALUES (?, ?)&quot;);
			pstmtLocal.setInt(1, 1);
			pstmtLocal.setString(2, &quot;insert first rec to tablea&quot;);
			rows = pstmtLocal.executeUpdate();
			System.out.println(rows + &quot; rows inserted to tablea&quot;);
			pstmtLocal.close();
			pstmtLocal = null;

			xarLocal.end(xidLocal, XAResource.TMSUCCESS);
			connLocal.setAutoCommit(true);

			// Database operation on the remote branch, commit remote branch
			xarRemote.setTransactionTimeout(500);
			connRemote.setAutoCommit(false);
			xarRemote.start(xidRemote, XAResource.TMNOFLAGS);

			pstmtRemote = connRemote
					.prepareStatement(&quot;INSERT INTO tableb (col1, col2) VALUES (?, ?)&quot;);
			pstmtRemote.setInt(1, 2);
			pstmtRemote.setString(2, &quot;insert second rec to tableb&quot;);
			rows = pstmtRemote.executeUpdate();
			System.out.println(rows + &quot; rows inserted to tableb&quot;);
			pstmtRemote.close();
			pstmtRemote = null;

			xarRemote.end(xidRemote, XAResource.TMSUCCESS);
			connRemote.setAutoCommit(true);

			System.out.println(&quot;commit remote branch&quot;);
			xarRemote.commit(xidRemote, true);

			// Resume the local branch and do some database operation, commit local branch
			xarLocal.setTransactionTimeout(500);
			connLocal.setAutoCommit(false);
			xarLocal.start(xidLocal, XAResource.TMJOIN);

			pstmtLocal = connLocal
					.prepareStatement(&quot;INSERT INTO tablea (col1, col2) VALUES (?, ?)&quot;);
			pstmtLocal.setInt(1, 3);
			pstmtLocal.setString(2, &quot;insert third rec to tablea&quot;);
			rows = pstmtLocal.executeUpdate();
			System.out.println(rows + &quot; rows inserted to tablea&quot;);
			pstmtLocal.close();
			pstmtLocal = null;

			xarLocal.end(xidLocal, XAResource.TMSUCCESS);
			connLocal.setAutoCommit(true);

			System.out.println(&quot;commit local branch&quot;);
			xarLocal.commit(xidLocal, true);

			// Close the resources
			connLocal.close();
			connLocal = null;
			connRemote.close();
			connRemote = null;
			xaConnLocal.close();
			xaConnLocal = null;
			xaConnRemote.close();
			xaConnRemote = null;
		}
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
			System.err.println(&quot;SQL Error: &quot; + e.getMessage());
			e.printStackTrace();
		}
&lt;p&gt; catch (XAException e) &lt;/p&gt;
{
			System.err.println(&quot;XA Error: &quot; + e.getMessage());
			e.printStackTrace();
		}
&lt;p&gt; finally {&lt;br/&gt;
			if (pstmtLocal != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					pstmtLocal.close();
					pstmtLocal = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
			if (pstmtRemote != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					pstmtRemote.close();
					pstmtRemote = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
			if (connLocal != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					connLocal.close();
					connLocal = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
			if (connRemote != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					connRemote.close();
					connRemote = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
			if (xaConnLocal != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					xaConnLocal.close();
					xaConnLocal = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
			if (xaConnRemote != null)&lt;br/&gt;
				try &lt;/p&gt;
{
					xaConnRemote.close();
					xaConnRemote = null;
				}
&lt;p&gt; catch (SQLException ignore) {&lt;br/&gt;
				}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment></environment>
        <key id="12425561">DERBY-4232</key>
            <summary>XAResource.setTransactionTimeout() makes XAResource.start() fail with the client driver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="simon.meng">Simon Meng</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 May 2009 08:20:02 +0100</created>
                <updated>Fri, 21 Jan 2011 17:52:25 +0000</updated>
                            <resolved>Sun, 28 Jun 2009 15:49:56 +0100</resolved>
                                    <version>10.4.2.0</version>
                                    <fixVersion>10.5.2.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12709744" author="knutanders" created="Fri, 15 May 2009 08:31:54 +0100"  >&lt;p&gt;I haven&apos;t looked at the posted code yet, but I just thought I&apos;d mention that setTransactionTimeout() was a no-op in Derby 10.2 and earlier, which probably explains why reverting to 10.2.2.0 has the same effect as commenting out the call.&lt;/p&gt;</comment>
                            <comment id="12710407" author="knutanders" created="Mon, 18 May 2009 18:13:46 +0100"  >&lt;p&gt;What makes this fail, is the following code in DRDAXAProtocol.startXATransaction() on the server:&lt;/p&gt;

&lt;p&gt;			} else if (xaTimeout != -1 &amp;amp;&amp;amp; xaflags != XAResource.TMNOFLAGS) {&lt;br/&gt;
				// According the DRDA spec if the value of timeout was specified&lt;br/&gt;
				// a TMNOFLAGS have to be used&lt;br/&gt;
				throw new XAException(XAException.XAER_PROTO);&lt;/p&gt;

&lt;p&gt;It is the SYNCCTL section in volume 3 of the DRDA spec that says that the timeout property should not be present when XAFLAGS is not TMNOFLAGS. I don&apos;t know if this means that XAResource.start(TMJOIN) should fail if a timeout is set, or if it simply means that the client shouldn&apos;t send the timeout value if the flag is TMJOIN or TMRESUME.&lt;/p&gt;</comment>
                            <comment id="12723542" author="knutanders" created="Wed, 24 Jun 2009 13:15:06 +0100"  >&lt;p&gt;Attached is a patch which adds regression test cases for the bug. The test cases pass with the embedded driver and fail (XAER_PROTO) with the network client.&lt;/p&gt;</comment>
                            <comment id="12723562" author="knutanders" created="Wed, 24 Jun 2009 14:38:49 +0100"  >&lt;p&gt;The patch d4232-1a.diff appears to fix the issue. It simply skips sending the timeout property if something we have other flags than TMNOFLAGS. Currently, the client code will only reread the timeout value when start(xid,TMNOFLAGS) is called, but the last timeout value read is still sent to the server regardless of the flags. I think this is unintentional, and that the meaning was to suppress the sending of the value as well. If start(xid,TMNOFLAGS) hasn&apos;t been called on the XAResource before we call start() with TMJOIN, the timeout value will be ignored with the current code too, and we don&apos;t get the XAER_PROTO exception.&lt;/p&gt;

&lt;p&gt;(This means that we will ignore changes in the timeout value when calling start() with flags!=TMNOFLAGS, which I wouldn&apos;t think is according to the XA specification. However, this is an existing problem in the cases where we don&apos;t get a protocol error, so a new bug should be filed if someone wants that addressed. My current understanding is that communicating the changed timeout value to the server in the non-TMNOFLAGS case would require an extension to the DRDA protocol.)&lt;/p&gt;</comment>
                            <comment id="12723601" author="knutanders" created="Wed, 24 Jun 2009 16:30:23 +0100"  >&lt;p&gt;All the regression tests ran cleanly with d4232-1a.diff + test.diff.&lt;/p&gt;</comment>
                            <comment id="12724128" author="dagw" created="Thu, 25 Jun 2009 16:33:44 +0100"  >&lt;p&gt;I verified that the new test cases fail without the fix, and work with the fix.&lt;/p&gt;</comment>
                            <comment id="12724503" author="knutanders" created="Fri, 26 Jun 2009 13:29:32 +0100"  >&lt;p&gt;Thanks for testing the patch, Dag. Committed to trunk with revision 788674. I&apos;ll leave the issue open until the fix has been back-ported to 10.5.&lt;/p&gt;</comment>
                            <comment id="12724959" author="knutanders" created="Sun, 28 Jun 2009 15:49:56 +0100"  >&lt;p&gt;Merged to 10.5 and committed revision 789105.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12411645" name="d4232-1a.diff" size="865" author="knutanders" created="Wed, 24 Jun 2009 14:38:49 +0100"/>
                            <attachment id="12411638" name="test.diff" size="3495" author="knutanders" created="Wed, 24 Jun 2009 13:15:06 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 15 May 2009 07:31:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24119</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0l3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37235</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>