<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:36:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5363/DERBY-5363.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5363] Tighten permissions of DB files to owner with &gt;= JDK7</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5363</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Before Java 6, files created by Derby would have the default&lt;br/&gt;
permissions of the operating system context. Under Unix, this would&lt;br/&gt;
depend on the effective umask of the process that started the Java VM.&lt;/p&gt;

&lt;p&gt;In Java 6 and 7, there are methods available that allows tightening up this&lt;br/&gt;
(File.setReadable, setWritable), making it less likely that somebody&lt;br/&gt;
would accidentally run Derby with a too lenient default.&lt;/p&gt;

&lt;p&gt;I suggest we take advantage of this, and let Derby by default (in Java&lt;br/&gt;
6 and higher) limit the visibility to the OS user that starts the VM,&lt;br/&gt;
e.g. on Unix this would be equivalent to running with umask 0077. More&lt;br/&gt;
secure by default is good, I think.&lt;/p&gt;

&lt;p&gt;We could have a flag, e.g. &quot;derby.storage.useDefaultFilePermissions&quot;&lt;br/&gt;
that when set to true, would give the old behavior.&lt;/p&gt;




</description>
                <environment></environment>
        <key id="12515817">DERBY-5363</key>
            <summary>Tighten permissions of DB files to owner with &gt;= JDK7</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Sat, 30 Jul 2011 00:00:19 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:20 +0000</updated>
                            <resolved>Sun, 9 Oct 2011 21:48:47 +0100</resolved>
                                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Miscellaneous</component>
                    <component>Services</component>
                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                            <comments>
                            <comment id="13076184" author="rhillegas" created="Tue, 2 Aug 2011 14:16:47 +0100"  >&lt;p&gt;This sounds reasonable to me. Might be useful to describe how this would affect legacy applications. Thanks.&lt;/p&gt;</comment>
                            <comment id="13078545" author="dagw" created="Wed, 3 Aug 2011 02:01:16 +0100"  >&lt;p&gt;With JDK 7, more is available to control permissions for POSIX-like file systems and ACLs as in NTFS, cf. the tutorial here:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;http://download.oracle.com/javase/tutorial/essential/io/fileAttr.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/tutorial/essential/io/fileAttr.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page: &lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;http://download.oracle.com/javase/tutorial/essential/io/legacy.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/javase/tutorial/essential/io/legacy.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;shows that the java.io.File#&lt;/p&gt;
{setWritable,setReadable}
&lt;p&gt; made available in Java 6 are now superceded in Java 7 by the new metadata&lt;br/&gt;
stuff. Cf the package java.nio.file.attribute and java.nio.file.*. &lt;br/&gt;
We may want to consider the opportunities opened by this instead of going with the limited facilities in Java 6.&lt;/p&gt;</comment>
                            <comment id="13078546" author="dagw" created="Wed, 3 Aug 2011 02:06:41 +0100"  >&lt;p&gt;It seems on Windows, the Java 6 API can not be used to limit read access:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/enhancements&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/enhancements&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;(quote):&lt;br/&gt;
&quot;setReadable(false) returns false - File readability cannot be set to false in Windows&quot;&lt;/p&gt;</comment>
                            <comment id="13081315" author="dagw" created="Tue, 9 Aug 2011 01:07:03 +0100"  >&lt;p&gt;Here is a proof-of-concept patch that works on my Unix (Solaris 11) box with JDK &amp;gt;=6. Not for commit.&lt;/p&gt;</comment>
                            <comment id="13081713" author="rhillegas" created="Tue, 9 Aug 2011 16:53:22 +0100"  >&lt;p&gt;Thanks for the patch, Dag.&lt;/p&gt;

&lt;p&gt;Attaching z.sql. This is a script which creates a database named db2, exports a table, performs a sort, and exits prematurely, leaving a tmp directory and database lock files hanging around. On my Mac OSC laptop, I have run this script with the trunk (after applying the permission-5 patch) and with 10.8.1.2.&lt;/p&gt;

&lt;p&gt;Here&apos;s what the permissions look like for the trunk with the patch applied:&lt;/p&gt;

&lt;p&gt;drwxr-xr-x  8 rh161140  rh161140  272 Aug  9 08:44 db2&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------  1 rh161140  rh161140  611 Aug  9 08:44 derby.log&lt;br/&gt;
total 24&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------   1 rh161140  rh161140    38 Aug  9 08:44 db.lck&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------   1 rh161140  rh161140     4 Aug  9 08:44 dbex.lck&lt;br/&gt;
drwxr-xr-x  14 rh161140  rh161140   476 Aug  9 08:45 log&lt;br/&gt;
drwxr-xr-x  73 rh161140  rh161140  2482 Aug  9 08:44 seg0&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------   1 rh161140  rh161140   851 Aug  9 08:44 service.properties&lt;br/&gt;
drwxr-xr-x   2 rh161140  rh161140    68 Aug  9 08:45 tmp&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------  1 rh161140  rh161140  8192 Aug  9 08:44 db2/seg0/cf0.dat&lt;br/&gt;
&lt;del&gt;rw&lt;/del&gt;------  1 rh161140  rh161140  4 Aug  9 08:44 /Users/rh161140/junk/z.export&lt;/p&gt;


&lt;p&gt;And here&apos;s what the permissions look like for 10.8.1.2:&lt;/p&gt;

&lt;p&gt;drwxr-xr-x  8 rh161140  rh161140  272 Aug  9 08:43 db2&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-  1 rh161140  rh161140  604 Aug  9 08:43 derby.log&lt;br/&gt;
total 24&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-   1 rh161140  rh161140    38 Aug  9 08:43 db.lck&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-   1 rh161140  rh161140     4 Aug  9 08:43 dbex.lck&lt;br/&gt;
drwxr-xr-x  14 rh161140  rh161140   476 Aug  9 08:43 log&lt;br/&gt;
drwxr-xr-x  73 rh161140  rh161140  2482 Aug  9 08:43 seg0&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-   1 rh161140  rh161140   851 Aug  9 08:43 service.properties&lt;br/&gt;
drwxr-xr-x   2 rh161140  rh161140    68 Aug  9 08:43 tmp&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-  1 rh161140  rh161140  8192 Aug  9 08:43 db2/seg0/cf0.dat&lt;br/&gt;
&lt;del&gt;rw-r&lt;/del&gt;&lt;del&gt;r&lt;/del&gt;-  1 rh161140  rh161140  4 Aug  9 08:43 /Users/rh161140/junk/z.export&lt;/p&gt;

&lt;p&gt;So it looks as though the permissions on the directories could be tightened up.&lt;/p&gt;

&lt;p&gt;A couple comments on the patch:&lt;/p&gt;

&lt;p&gt;o There are several vacuous implementations of limitAccessToOwner(). This may indicate that the original class factoring is not aligned with what you are trying to do. Probably not worth fixing right now, but might be worth filing a JIRA to fix in the future.&lt;/p&gt;

&lt;p&gt;o FileUtil.limitAccessToOwner() - There are several places where you create new Booleans. To avoid the object creation, you could just use Boolean.TRUE and Boolean.FALSE.&lt;/p&gt;

&lt;p&gt;o FileUtil.checkResult() - Not sure that FileNotFoundException is the only possible problem which could fail this method.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13082117" author="dagw" created="Wed, 10 Aug 2011 04:16:50 +0100"  >&lt;p&gt;Thanks, Rick. You are right about the directories: so far I have only tightened up permissions for the files - I need to do the directories too. I&apos;ll have a look at the code comments, thx.&lt;/p&gt;</comment>
                            <comment id="13082527" author="dagw" created="Wed, 10 Aug 2011 19:23:23 +0100"  >&lt;p&gt;Uploading the patch &quot;permissions-6&quot; which fixes the booleans mentioned by Rick, and added logic for Windows w/ACLs as well. For that platform, I remove all ACL entries that do not belong to the file owner. If understand this correctly, this will effectively limit access to other principals (users and groups). The patch currently requires a Java 7 compiler, but once the code is finalized, we should probably rewrite this to use reflection, so we won&apos;t impose another burden on Derby developers, e.g. Java 7 is not available for the Mac yet. I still need to add logic for the directories.&lt;/p&gt;

&lt;p&gt;As for the class factoring, I am open to suggestions, I found this placement the most logical. The code in some places used java.io.File directly, in other places it uses the abstraction StoragetFile. There is a precedence for vacuous implementations here, see releaseExclusiveFileLock for example. I added a forwarding in CorruptFile for the new method similar to the pattern for the other methods in StorageFile interface.&lt;/p&gt;

&lt;p&gt;As for the boolean result checked in FileUtil.checkResult, the Javadoc says &quot;true if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If readable is false and the underlying file system does not implement a read permission, then the operation will fail.&quot;  Presumably, since we created the file, we have permissions to change permissions on it. We skip &quot;setReadable&quot; for Windows, so we should not see that either. I chose to use FileNotFoundException to avoid polluting the Derby io code with more checked exceptions since this should not happen for ordinary user operation. Slightly more sneaky is the fact I use FileNotFoundException to wrap Java security access violation: for NTFS/Java 7 the method Files#getOwner needs the RuntimePermission &quot;accessUserInformation&quot;, and if the application is running with a security manager that permission needs to be added to the code base. I&apos;ll see if I can make this error stand out better. I added this permission to the defautl policy and sample, cf. the patch &quot;permission-6&quot;.&lt;/p&gt;

&lt;p&gt;The patch is not ready for commit yet, but feel free to review it. Running regressions now.&lt;/p&gt;
</comment>
                            <comment id="13084185" author="rhillegas" created="Fri, 12 Aug 2011 16:24:46 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;I tried building the patch on Ubuntu using the Oracle jdk1.7.0-143 compiler. The build failed as follows. Not sure if this is worth pursuing since you plan to rework the code to use reflection rather than compiled links to the Java 7 features.&lt;/p&gt;

&lt;p&gt;&#65279;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  compilerPropsAlreadySet = $&lt;/p&gt;
{compilerPropsAlreadySet}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  compilerLevel16 = 1.6&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  jsr169compile.classpath = /mac-home/sw/phoneME/phoneme_advanced_mr2/lib/btclasses.zip:/mac-home/sw/phoneME/phoneme_advanced_mr2/lib/basis.jar:/mac-home/sw/jsr169Support/jdbc.jar&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  j14lib = $&lt;/p&gt;
{j14lib}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  java14compile.classpath = $&lt;/p&gt;
{java14compile.classpath}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  j15lib = $&lt;/p&gt;
{j15lib}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  java15compile.classpath = $&lt;/p&gt;
{java15compile.classpath}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  j16lib = $&lt;/p&gt;
{j16lib}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  java16compile.classpath = $&lt;/p&gt;
{java16compile.classpath}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  j17lib = $&lt;/p&gt;
{j17lib}
&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Before setting properties:  java17compile.classpath = $&lt;/p&gt;
{java17compile.classpath}

&lt;p&gt;BUILD FAILED&lt;br/&gt;
/mac-home/derby/mainline/trunk/build.xml:278: Don&apos;t know how to set java15compile.classpath, java16compile.classpath using this environment:&lt;/p&gt;

&lt;p&gt;java.vendor = Oracle Corporation&lt;br/&gt;
java.home = /home/rhillegas/sw/java/oracle/jdk1.7.0-143/jre&lt;br/&gt;
java.version = 1.7.0-ea&lt;br/&gt;
os.name = Linux&lt;br/&gt;
j14lib = null&lt;br/&gt;
j15lib = null&lt;br/&gt;
j16lib = null&lt;br/&gt;
jdkSearchPath = /home/rhillegas/sw/java/oracle&lt;/p&gt;

&lt;p&gt;Please consult BUILDING.html for instructions on how to set the compiler-classpath properties.&lt;/p&gt;</comment>
                            <comment id="13085472" author="dagw" created="Tue, 16 Aug 2011 02:29:18 +0100"  >&lt;p&gt;Yes, I&apos;ll probaby remove the property setter code from the patch if we go with the reflection code, but I&apos;ll try this on Linux anyway; would be nice to understand why it fails; we&apos;ll need to add support for Java 7 at some point.&lt;/p&gt;

&lt;p&gt;The regressions showed some errors: in at least two cases there were instances for security policies I hadn&apos;t updated with the new Runtimepermission required (&quot;accessUserInformation&quot;) needed to figure out the file&apos;s owner under NTFS. I&apos;ll make a new patch soon.&lt;/p&gt;</comment>
                            <comment id="13085571" author="kristwaa" created="Tue, 16 Aug 2011 07:55:51 +0100"  >&lt;p&gt;Rick,&lt;/p&gt;

&lt;p&gt;I looks to me like you used a Java 7 early access build - these builds are ignored by the PropertySetter.isValidVersion().&lt;br/&gt;
If you specify -DprintCompilerProperties&lt;span class=&quot;error&quot;&gt;&amp;#91;Verbose&amp;#93;&lt;/span&gt;=true this should be reported.&lt;/p&gt;



&lt;p&gt;I tested the patch on OpenSUSE 11.4 and it worked when setting JAVA_HOME=jdk1.7. In this case Java 6 was also available.&lt;br/&gt;
If run it with only Java 7 available, the build fails. Is this as intended, or do we want to set the Java 6 compile classpath using Java 7 (as we do for Java 5.0 if only Java 6 is available)?&lt;/p&gt;</comment>
                            <comment id="13085945" author="dagw" created="Tue, 16 Aug 2011 21:15:09 +0100"  >&lt;p&gt;Thanks for finding this , Kristian. I would think we could set the Java 6 compile classpath using Java 7. I&apos;ll add that unless somebody has misgivings. If we omit this extension of the property setter for this issue (as seems likely), I&apos;ll make a new issue and attach the preliminary patch of the Java 7 enabling to that so we can save it for later.&lt;/p&gt;</comment>
                            <comment id="13085981" author="kmarsden" created="Tue, 16 Aug 2011 22:19:11 +0100"  >&lt;p&gt;I am just back from vacation and looking at this issue, so my apologies for not speaking up sooner, but I am quite concerned about having a new more restrictive default.  I can recall conversations with quite a few different development groups around the requirement that multiple users be able to access the database. I  have always told them that as long as the users are in the same group and umask is set appropriately this should work fine.  I am concerned about breaking those applications with this change.   I think with embedded it is fairly common to have multiple users accessing the database and  think the default should be the old behavior and allow the more restrictive file permissions with an  option.&lt;/p&gt;</comment>
                            <comment id="13086073" author="dagw" created="Wed, 17 Aug 2011 02:08:57 +0100"  >&lt;p&gt;I agree this behavior could be too restrictive for embedded usage. Do you think it is more reasonable in a server context, Kathey? I think it would be good to improve our &quot;secure by default&quot; story a bit these days...&lt;/p&gt;</comment>
                            <comment id="13086413" author="kmarsden" created="Wed, 17 Aug 2011 16:55:06 +0100"  >&lt;p&gt;I think not with the API which is normally used for embedded server scenarios, but perhaps for the command line start up where we also start a security manager and try to be more secure by default.    I can think of at least  one product that requires multiple users to be able to start Network Server, but I am pretty sure they use the API. I will check.  It might be good to check with the user list too.&lt;/p&gt;

&lt;p&gt;Would it be possible to make the enhanced restrictions only occur on new databases and ones that have been created with the restrictions? The thing that makes me most wary about messing with  permissions is that the errors that users get with mixed permissions are pretty ugly,  like container cannot be opened or can&apos;t read some specific transaction log file during recovery. We sometimes see these errors now with an existing database with liberal permission is accessed by a new user with more restrictive umask and then opened by another user who can&apos;t access the new files.  What needs to be done is some chmods and adjust the umask of the secondary user  to fix it up, but unfortunately often, by the time I see it, somebody has gotten interested in those log and seg0 directories and deleted something corrupting the database.    If the new default permissions were to take effect with preexisting databases, we might see this scenario more often.&lt;/p&gt;</comment>
                            <comment id="13086668" author="dagw" created="Thu, 18 Aug 2011 00:09:16 +0100"  >&lt;p&gt;Unfortunately, we don&apos;t check whether a database exists (in StorageFactoryService#createServiceRoot before we have already created derby.log. So we would have to chose whether to use default restrictive access permission for derby.log. Then, when we have read system.properties we would know whether this database should use restrictive flags or not for the remainder of the booted time.&lt;/p&gt;

&lt;p&gt;So let&apos;s see if this behavior would work: &lt;/p&gt;

&lt;p&gt;We have a property, derby.storage.useDefaultFilePermissions, which would only default to &apos;false&apos; when we started a database server from the command line (along with Java security).&lt;/p&gt;

&lt;p&gt;This means that in this case, derby.log would always get restrictive permission. (To avoid this one would henceforth need to specify the property to be &apos;true&apos;).&lt;/p&gt;

&lt;p&gt;When connecting, if we have a &lt;b&gt;new&lt;/b&gt; database, we would continue to use restrictive permissions for that database. We would store this fact in system.properties.&lt;/p&gt;

&lt;p&gt;If we connect to an existing database, we would check system.properties for the presence of derby.storage.useDefaultFilePermissions. If it is not seen (soft or hard upgrade), we would assume the value to be true, and update system.properties with this fact if hard upgrade. If it is seen, we use that value for it.&lt;/p&gt;

&lt;p&gt;So, as far as compatibility, if the property is &lt;b&gt;not&lt;/b&gt; specified when starting a server (as would be the case for oblivious users upgrading), the only change seen would be that derby.log would (usually) have more restrictive permissions than earlier - other (new) db files would be created with the old laxer scheme as before.&lt;/p&gt;

&lt;p&gt;Does this sound acceptable?&lt;/p&gt;</comment>
                            <comment id="13087849" author="kmarsden" created="Fri, 19 Aug 2011 19:14:44 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;I was wondering what would happen in practice in the following upgrade scenario:&lt;/p&gt;

&lt;p&gt;1) Assume the site has been starting network server from the command line with various users, relying on umask settings to control permissions.&lt;br/&gt;
2) They upgrade to 10.9 with your changes and of course didn&apos;t read the release notes to set the property.&lt;br/&gt;
3) User A  starts network server and a client connects creating the new more restrictive derby.log and stops the server.&lt;br/&gt;
4) User B starts network server and a client connects, but presumably can&apos;t access derby.log.  What kind of error would they get?  What recovery steps do they need to take ?&lt;/p&gt;
</comment>
                            <comment id="13088051" author="dagw" created="Fri, 19 Aug 2011 23:56:22 +0100"  >&lt;p&gt;Right, if the two users relied on group write access to derby.log (as they would have had to to be able to use the same derby.log file earlier), user B who tried to &lt;b&gt;append&lt;/b&gt; to the already created derby.log (created by user A), would experience an error, cf below. I.e. the fact that derby.log is not accessible results in this error message on the console:&lt;/p&gt;

&lt;p&gt;Sat Aug 20 00:46:04 CEST 2011 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; java.io.FileNotFoundException: derby.log (Ingen tilgang)&lt;/p&gt;

&lt;p&gt;&quot;Ingen adgang&quot;: Norwegian for &quot;no access&quot; :.) Derby then proceeds to use the console as error stream. &lt;/p&gt;

&lt;p&gt;The workaround would be to specify -Dderby.error.derby.stream.error.file=&amp;lt;file&amp;gt;, cf. end of enclosed session trace.&lt;/p&gt;

&lt;p&gt;----------------------------------------------------------------------------&lt;br/&gt;
dags-lenovo:~/java/sb/sb1$ ls -l derby.log&lt;br/&gt;
&lt;del&gt;rwx&lt;/del&gt;----- 1 dag None 1079 Aug 10 00:33 derby.log&lt;/p&gt;

&lt;p&gt;dags-lenovo:~/java/sb/sb1$ chmod 000 derby.log&lt;/p&gt;

&lt;p&gt;dags-lenovo:~/java/sb/sb1$ ls -l derby.log&lt;br/&gt;
---------- 1 dag None 1079 Aug 10 00:33 derby.log&lt;/p&gt;

&lt;p&gt;dags-lenovo:~/java/sb/sb1$ java org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.9&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat&apos;;&lt;br/&gt;
Sat Aug 20 00:46:04 CEST 2011 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; java.io.FileNotFoundException: derby.log (Ingen tilgang)&lt;br/&gt;
Sat Aug 20 00:46:05 CEST 2011 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
java.sql.SQLException: Database &apos;wombat&apos; not found.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:227)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3085)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound(EmbedConnection.java:735)&lt;br/&gt;
:&lt;br/&gt;
dags-lenovo:~/java/sb/sb1$ java -Dderby.stream.error.file=error.txt org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.9&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat&apos;;&lt;br/&gt;
ERROR XJ004: Database &apos;wombat&apos; not found.&lt;br/&gt;
ij&amp;gt; exit;&lt;br/&gt;
dags-lenovo:~/java/sb/sb1$ Use &quot;exit&quot; to leave the shell.&lt;br/&gt;
dags-lenovo:~/java/sb/sb1$ cat error.txt&lt;br/&gt;
Sat Aug 20 00:54:38 CEST 2011 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
java.sql.SQLException: Database &apos;wombat&apos; not found.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:227)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:3085)&lt;/p&gt;</comment>
                            <comment id="13088077" author="kmarsden" created="Sat, 20 Aug 2011 00:53:42 +0100"  >&lt;p&gt;Assuming they want to continue with the old behavior, would a resolution at this point be as simple as take down the server, chmod the derby.log and add derby.storage.useDefaultFilePermissions=true to the derby.properties file?&lt;/p&gt;</comment>
                            <comment id="13088847" author="dagw" created="Mon, 22 Aug 2011 18:50:16 +0100"  >&lt;p&gt;Yes, in deed. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13088870" author="kmarsden" created="Mon, 22 Aug 2011 19:08:52 +0100"  >&lt;p&gt;Thanks Dag.  Your approach sounds good to me.  It might be nice to add some verbosity to the message to give a clue as to the resolution.  I am assuming this is for 10.9 not 10.8.2.&lt;/p&gt;

&lt;p&gt;I have a meeting Thursday with the group that I know needs more than one user to be able to start network server.  I assume they can use the property, but will report back if they raise any insurmountable concerns. &lt;/p&gt;</comment>
                            <comment id="13089214" author="dagw" created="Tue, 23 Aug 2011 02:57:58 +0100"  >&lt;p&gt;Thanks Kathey! If this gets ready for 10.8.2, the default would be the old behavior. &lt;/p&gt;</comment>
                            <comment id="13093146" author="dagw" created="Mon, 29 Aug 2011 21:00:52 +0100"  >&lt;p&gt;Uploading derby-5363-basic-1.&lt;/p&gt;

&lt;p&gt;It passed regressions on Windows and Solaris with classes, sane and insane jars. Manual inspection showed permissions to be restricted as expected on both platform types.&lt;/p&gt;

&lt;p&gt;This patch builds on the previous proof-of-concept patches. It is not for commit yet, I still need to rewrite the Java 7 level code to use reflection, so as not to force use of Java 7. In order to compile the patch you need a Java 7 JDK as the patch stands.&lt;/p&gt;

&lt;p&gt;I have called the patch &quot;basic&quot; since I need to make another patch to include:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;implement the property persistence needed for old databases to avoid suddenly starting to use the new feature when upgrading, cf discussion with Kathey. See also separate question thread below.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch now also restricts permission for created directories, albeit only for the lowests level if many levels are created with a a single mkdir. This can be improved if you think it is important/necessary, we just need to do more analysis of what parts of the path already exists during creation.&lt;/p&gt;

&lt;p&gt;Tests. I&apos;d like feed-back on this. It&apos;s a bit hard to really test this automatically since our tests run within one OS user only. Naturally, we can inspect the file masks (on Posix/Unix), but we&apos;d have to use the same methods in JDK 6 that we presently use to set them, so I am not sure it adds value. Likewise for NTFS ACLs, we would rely on the very same privitimes I use in JDK 7 to manipulate the ACLs. Up to now, I have used manual inspection of the file system permission using tools provided (ls -l on Unix, and The Windows explorer on Windows).&lt;/p&gt;

&lt;p&gt;Reviewers: Please help finding &quot;holes&quot;, i.e. place where I have forgotten to limit permissions for for files and dirs created. I have gone through the code, but I can have missed some instances. Bwt, I did not do anything for the tools (ij, dblook).&lt;/p&gt;

&lt;p&gt;The patch only ever restricts permissions of files that are created, never on existing files &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. This would preclude using the feature to &quot;tighten up&quot; and existing database. Is this the best approach? I think if one wants to secure an existing database, it&apos;s better to do it manually using OS level tools, and then start using the feature (lest it happens only gradually, piece-meal over time).&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; In the code, in some places I check if there was a file/dir created, in other places where it is statically known to be a new file/dir, I do not check. Verifying the correctness of this could be useful &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Detailed patch comments:&lt;/p&gt;

&lt;p&gt;M       java/build/org/apache/derbyPreBuild/PropertySetter.java&lt;/p&gt;

&lt;p&gt;Enables using Java 7 for compilation. This will go away when I move to use reflection, but I&apos;ll make a new JIRA and attach this so we don&apos;t lose the code. I imagine at some point we will want to start using Java 7/8 going forward.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/io/FileUtil.java&lt;/p&gt;

&lt;p&gt;Implements the new static method limitAccessToOwner(File file). This will do the right thing for Unix and Windows if running on &amp;gt;= Java 6 and &amp;gt;= Java 7 respectively. Note: I have presumed that Windows use NTFS with ACLs enabled here. If the fs on Window were, say, an NFS share, it would not work since this would have POSIX permission. I guess we could improve this in a follow-up patch. If running on a Windows FAT system, which doesn&apos;t have permissions, the method would do nothing. a noop would also ensue if NTFS had the ACLs turned off.&lt;/p&gt;


&lt;p&gt;A       java/engine/org/apache/derby/iapi/services/io/FileUtil7.java&lt;/p&gt;

&lt;p&gt;The Java 7 source level delegate which implements the NTFS ACL part of the above logic. When I move to use reflection, this code will move to FileUtil.java.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/io/build.xml&lt;/p&gt;

&lt;p&gt;Enables building of FileUtil7 with Java 7, will go away in next patch.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Property.java&lt;/p&gt;

&lt;p&gt;The Derby property &quot;derby.storage.useDefaultFilePermissions&quot;.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/load/ExportWriteData.java&lt;/p&gt;

&lt;p&gt;limit access to files created during export.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java&lt;/p&gt;

&lt;p&gt;Creates derby.system.home if missing with restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java&lt;/p&gt;

&lt;p&gt;Creation of derby.system.home, db directory (&quot;wombat&quot;), system.properties file with restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/stream/SingleStream.java&lt;/p&gt;

&lt;p&gt;Creation of derby.log with restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/DirFile4.java&lt;/p&gt;

&lt;p&gt;Creation of lck file with restricted permissions (NIO).&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/io/StorageFile.java&lt;/p&gt;

&lt;p&gt;Added limitAccessToOwner to interface. In the code, StorageFile is often used interchangably with File; so StorageFile also implements exists() etc al.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/InputStreamFile.java&lt;/p&gt;

&lt;p&gt;Implements StorageFile. An empty implementation of limitAccessToOwner since this is the base class for read-only stream implementations of the StorageFile interface. I.e. not file creation happens here.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/DirFile.java&lt;/p&gt;

&lt;p&gt;Implements StorageFile. The one implemenation of StorageFile that does create files in the &quot;real&quot; file system. Forwards to FileUtil.limitAccessToOwner.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/io/VFMemoryStorageFactory.java&lt;/p&gt;

&lt;p&gt;Implements StorageFile. No disk file system access, so an empty implementation of limitAccessToOwner.&lt;/p&gt;


&lt;p&gt;M       java/engine/org/apache/derby/impl/io/BaseStorageFactory.java&lt;/p&gt;

&lt;p&gt;Creation of the tmp directory with restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java&lt;/p&gt;

&lt;p&gt;Creation of the log directory and its files with restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/RawStore.java&lt;/p&gt;

&lt;p&gt;Creation of the backup directories and contents with restricted permissions (but see FileUtils#copyDirectory, #copyFile also).&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;Creation of the db lock file with restricted permissions (but see also NIO getExclusiveFileLock in DirFile4).&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java&lt;/p&gt;

&lt;p&gt;Used for lobs? In any case, tighted up to use restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/RFResource.java&lt;/p&gt;

&lt;p&gt;Jar file logic: restricted permissions.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java&lt;/p&gt;

&lt;p&gt;container creation, regular and backup with restricted permissions&lt;/p&gt;

&lt;p&gt;M       java/shared/org/apache/derby/shared/common/reference/MessageId.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;extra int&apos;l for a &quot;caused by string&quot;.&lt;/p&gt;

&lt;p&gt;M       java/drda/org/apache/derby/impl/drda/DssTrace.java&lt;/p&gt;

&lt;p&gt;Dss trace (server): restricted permissions for trace directory and trace files.&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java&lt;/p&gt;

&lt;p&gt;Implements StorageFile. Test only.&lt;/p&gt;

&lt;p&gt;M       java/drda/org/apache/derby/drda/server.policy&lt;br/&gt;
M       java/drda/org/apache/derby/drda/template.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.modified.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SecurityPolicyReloadingTest.initial.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/noAbortPermission.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/RuntimeInfoTest.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/GetCurrentPropertiesTest.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/util/derby_tests.policy&lt;/p&gt;

&lt;p&gt;The new code when running on Java 7 on Windows needs the extra RuntimePermission &quot;accessUserInformation&quot; (to determine the file&apos;s owner) when run with the Security Manager. I have added that to the default &quot;server.policy&quot; file, and the &quot;template.policy&quot;, as well as were needed to run the tests. The tests also needed some more &quot;read&quot; file permissions.&lt;/p&gt;


&lt;p&gt;M       build.xml&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Changes to be able to use Java 7. Will be rolled back when I move to use reflection.&lt;/p&gt;</comment>
                            <comment id="13093149" author="dagw" created="Mon, 29 Aug 2011 21:08:51 +0100"  >&lt;p&gt;I am having pains with the property &quot;derby.storage.useDefaultFilePermissions&quot;.&lt;/p&gt;

&lt;p&gt;Some half digested ideas follow.&lt;/p&gt;

&lt;p&gt;In the present code the property &quot;derby.storage.useDefaultFilePermissions&quot; is a dynamic, system level property. The discussion showed that we may want to handle this per database (do we really? but we can only persist values per database...) I also think it makes more sense to make this static, at least at the database level.&lt;/p&gt;

&lt;p&gt;But let as assume, we want to persist it per database.  This begs the question whether this is really a system level property (e.g. to control derby.log and files created during tracing of DRDA protocol in the server) or a data base level property (all db files). If we persist this per database, we may need and additional property for system level files, or try to use some sensible defaults at that level.&lt;/p&gt;

&lt;p&gt;To illustrate: we need to decide how to handle the following cases, here given with a possible treatment: The matrix elements&lt;br/&gt;
show the resulting value of the property, given the Derby deployment mode, the existing value of the property persisted for a database, and the system level property as specified when the VM started.&lt;/p&gt;

&lt;p&gt;    system level files:&lt;br/&gt;
         mode: \ prop   unspec.    F      T&lt;br/&gt;
       --------------------&lt;del&gt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-----------) not found.&lt;/span&gt;&lt;/del&gt;------&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-------) not found.&lt;/span&gt;&lt;br/&gt;
       ! CLI server      !     F      !   F   !  T    !&lt;br/&gt;
       ! other modes  !     T      !   F   !  T    !&lt;br/&gt;
       ---------------------------------------------&lt;/p&gt;

&lt;p&gt;To explain, the three entries for CLI server here compute  as follows given values &quot;unspec&quot;, &quot;F&quot; (false) and &quot;T&quot; (true) for the property. That is, when we started the server, we did not specify a value for the property (case 1), we specified it to &quot;false&quot; (case 2) or we specified it to &quot;true&quot; (case three). The resulting value for system level files  is &quot;false&quot;, &quot;false&quot; and &quot;true&quot; respectively.&lt;br/&gt;
That is, when unspecified for CLI server mode, we default to restrictive permissions.&lt;/p&gt;


&lt;p&gt;    new db, db level files&lt;br/&gt;
         mode: \ prop   unspec.    F      T&lt;br/&gt;
       --------------------&lt;del&gt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-----------) not found.&lt;/span&gt;&lt;/del&gt;------&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-------) not found.&lt;/span&gt;&lt;br/&gt;
       ! CLI server      !     F      !   F   !  T    !&lt;br/&gt;
       ! other modes  !     T      !   F   !  T    !&lt;br/&gt;
       -------------------------------------------------&lt;/p&gt;

&lt;p&gt;    existing db: no prop found persisted&lt;br/&gt;
         mode: \ prop   unspec.    F      T&lt;br/&gt;
       --------------------&lt;del&gt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (------------) not found.&lt;/span&gt;&lt;/del&gt;------&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-------) not found.&lt;/span&gt;&lt;br/&gt;
       ! CLI server      !     T        !   i/w !  T    !&lt;br/&gt;
       ! other modes  !     T        !   i/w !  T    !&lt;br/&gt;
       --------------------------------------------------&lt;/p&gt;

&lt;p&gt;    existing db: found persisted   F  &lt;br/&gt;
         mode: \ prop   unspec.    F      T&lt;br/&gt;
       --------------------&lt;del&gt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-----------) not found.&lt;/span&gt;&lt;/del&gt;------&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-------) not found.&lt;/span&gt;&lt;br/&gt;
       ! CLI server      !     F      !   F   !  i/w  !&lt;br/&gt;
       ! other modes  !     F      !   F   !  i/w  !&lt;br/&gt;
       -------------------------------------------------&lt;/p&gt;

&lt;p&gt;    existing db: found persisted   T&lt;br/&gt;
         mode: \ prop   unspec.    F      T&lt;br/&gt;
       --------------------&lt;del&gt;&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (----------) not found.&lt;/span&gt;&lt;/del&gt;-------&lt;span class=&quot;error&quot;&gt;Unable to render embedded object: File (-------) not found.&lt;/span&gt;&lt;br/&gt;
       ! CLI server      !     F      !   i/w !  T    !&lt;br/&gt;
       ! other modes  !     T      !   i/w !  T    !&lt;br/&gt;
       -------------------------------------------------&lt;/p&gt;

&lt;p&gt;where &quot;prop&quot; means specified value of derby.storage.useDefaultFilePermissions and &quot;i/w&quot; means &quot;ignore with warning or error&quot;.&lt;/p&gt;

&lt;p&gt;Hmm, this is getting a bit messy..  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13093187" author="dagw" created="Mon, 29 Aug 2011 21:45:00 +0100"  >&lt;p&gt;Not very readable , that.. Wish there were an easy way to make table sin JITA comments... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
See the uploaded ascii art table instead if you can&apos;t read the above..&quot;property-table.png&quot;.&lt;/p&gt;</comment>
                            <comment id="13093190" author="kmarsden" created="Mon, 29 Aug 2011 21:50:22 +0100"  >&lt;p&gt;Yes, I think messy is the operative word.   I can&apos;t say I&apos;ve read and understand all you have written but know I wouldn&apos;t want to have to try explain it someone else #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have been thinking that umask is  sort of the standard way to control file permissions on created files.  Do other database products try to control this ? I don&apos;t know that we are adding a lot of value by trying to control the permissions ourselves.  Might it be possible to just print a warning on network server startup if databases will be created readable/writable to others and suggest adjusting the umask to be more restrictive if desired.  Are the default  permissions something that we can determine at runtime?&lt;/p&gt;
</comment>
                            <comment id="13093210" author="dagw" created="Mon, 29 Aug 2011 22:08:53 +0100"  >&lt;p&gt;Kathey, traditionally Java hasn&apos;t offered much in the way of inspecting file attributes. With 6 and now 7, this has improved, finally.  I guess we can &quot;test&quot; create a file and inspect its resulting permission and guess the default permissions in place. But on Windows, defaults can vary per directory, so its not so easy - Derby can create files in many directories. On Unix, I think the umask can be deduced in this way.&lt;br/&gt;
I&apos;ll have a look at what other databases do too.&lt;/p&gt;</comment>
                            <comment id="13093238" author="dagw" created="Mon, 29 Aug 2011 22:45:26 +0100"  >&lt;p&gt;I see that PostGresSQL, for example does limit permissions to the db user. The &quot;postmaster&quot; changes its umask to 0077, so no file is&lt;br/&gt;
group-readable.&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;http://doxygen.postgresql.org/postmaster_8c_source.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://doxygen.postgresql.org/postmaster_8c_source.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;cf this code:&lt;/p&gt;

&lt;p&gt;00501     /*&lt;br/&gt;
00502      * for security, no dir or file created can be group or other accessible&lt;br/&gt;
00503      */&lt;br/&gt;
00504     umask(S_IRWXG | S_IRWXO);&lt;/p&gt;

&lt;p&gt;where:&lt;br/&gt;
S_IRWXG&lt;br/&gt;
    read, write, execute/search by group &lt;br/&gt;
S_IRWXO&lt;br/&gt;
    read, write, execute/search by others &lt;/p&gt;

&lt;p&gt;i.e. effectively 0077.&lt;/p&gt;</comment>
                            <comment id="13093342" author="dagw" created="Tue, 30 Aug 2011 01:50:38 +0100"  >&lt;p&gt;For MS Server it seem a similar practice is being used, c.f this link:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms189128%28SQL.90%29.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/en-us/library/ms189128%28SQL.90%29.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&quot;Creating a Database or Adding a New File: When a database is created, or modified to add a new file, the MSSQLSERVER service account and members of the local Administrators group are granted Full Control access on the data and log files. File access is removed for all other accounts.&quot;&lt;/p&gt;</comment>
                            <comment id="13093716" author="rhillegas" created="Tue, 30 Aug 2011 14:26:39 +0100"  >&lt;p&gt;Thanks for continuing to puzzle through these issues, Dag and Kathey. I am afraid that I don&apos;t understand the tables posted yesterday.&lt;/p&gt;

&lt;p&gt;I have a couple questions:&lt;/p&gt;

&lt;p&gt;1) Besides derby.log and the network trace files, does Derby write any other system level files?&lt;/p&gt;

&lt;p&gt;2) Is this the problem with these files: append mode won&apos;t work if different users boot the server/engine?&lt;/p&gt;

&lt;p&gt;3) Or is there another problem: the files can&apos;t even be re-initialized (overwritten) if different users boot the server/engine?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13093829" author="dagw" created="Tue, 30 Aug 2011 16:39:53 +0100"  >&lt;p&gt;Thanks, Rick. The tables try to show what should/could be the behavior if we tried to persist the property derby.storage.useDefaultFilePermissions. If we did, we would need to specify what would happen when we later restarted the VM with possibly &lt;b&gt;another&lt;/b&gt; value for this property: should the effective value change, or should the the (new) value be ignored.&lt;br/&gt;
In any case, as both Kathey and I observed, it gets messy.&lt;/p&gt;

&lt;p&gt;Your questions: 1) I haven&apos;t found any others yet. I believe others pertain to a specific booted database. 2) Plain write or append or not isn&apos;t relevant for the permissions, I think. I think we write these files without appending to them, though. The restrictive permissions would preclude any writing to them at all by any user except the one that created them. 3) Correct.&lt;/p&gt;</comment>
                            <comment id="13093841" author="dagw" created="Tue, 30 Aug 2011 16:54:22 +0100"  >&lt;p&gt;I think I would actually prefer to let new Derby versions (&amp;gt;=10.9) of the server CLI startup (or possibly only the startup script, although I don&apos;t like the thought that the script should be anything but a convenience) enable the secure permissions by default, and leave it at that. I think any upgrade hassle&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; for users neglecting the read the release notes (to as to keep existing behavior) is worth the added security.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; Should be detected at once when trying to write derby.log. It is easy to fix, just change the permissions back to lax and start using the property when the server is started.&lt;/p&gt;</comment>
                            <comment id="13094668" author="rhillegas" created="Wed, 31 Aug 2011 17:33:20 +0100"  >&lt;p&gt;I think that the default embedded behavior should also be to use the tighter file permissions. From the release notes, embedded users, like client/server users, can figure out how to disable the tighter permissions if necessary.&lt;/p&gt;

&lt;p&gt;We have a significant security hole here: Broad permission is currently given to other users to type out conglomerates which contain sensitive information and to type out derby.log, which can contain SQL text. Backward compatibility is important but I believe it must be trumped by security fixes. I think that the security hole here is big enough to warrant breaking compatibility, particularly since a simple remedy removes the compatibility problem. Thanks.&lt;/p&gt;</comment>
                            <comment id="13094750" author="kmarsden" created="Wed, 31 Aug 2011 19:24:06 +0100"  >&lt;p&gt;I think it would be good to get feedback from the user community.  Some response  that I got this week when I approached a group about the change was:&lt;/p&gt;

&lt;p&gt;&quot;... that seems backward. Why not keep the current behavior and have a derby.storage.useSecureFilePermissions=true property? I know there are times when a component &lt;b&gt;really&lt;/b&gt; needs to change default behavior, but it should only be after a lot of consideration and adopter buy-in&quot;&lt;/p&gt;

&lt;p&gt;Can you ask for more  input on the user list?  &lt;/p&gt;</comment>
                            <comment id="13094781" author="kmarsden" created="Wed, 31 Aug 2011 19:53:23 +0100"  >&lt;p&gt;I personally don&apos;t think we have a security hole in Derby, but rather users might have a security hole if they do not set their umask appropriately to their situation.  The proposed changes would help protect users from themselves and that may be the right thing to do, especially for network server, but I don&apos;t think it is a inherent hole in Derby.&lt;/p&gt;
</comment>
                            <comment id="13095086" author="dagw" created="Thu, 1 Sep 2011 03:51:21 +0100"  >&lt;p&gt;Uploading derby-5363-basic-2, which removes the dependency on Java 7 for compiling Derby. The code in FileUtil7.java has been recoded with reflection and moved into FileUtil.java. Rerunning regressions.&lt;/p&gt;

&lt;p&gt;Any treatment of the property default, whichever way we choose to go, is yet pending. &lt;/p&gt;

&lt;p&gt;Apart from that, the patch is complete and ready for review. I do plan to go over the exception handling a bit more: although I have made pains to try to make any exception due to missing security permission propagate all the way up there are still locations in the code where I ignore them due to the fan-out if we introduce checked exception in low level utility classes, the theory being that the missing permissions would be detected elsewhere. I&apos;ll have a look to see if we could use unchecked exception  and catch those at the top/boot level, cf. iapi.error.PassThroughException, since I don&apos;t like ignoring exceptions...&lt;/p&gt;</comment>
                            <comment id="13095095" author="dagw" created="Thu, 1 Sep 2011 04:11:31 +0100"  >&lt;p&gt;I am not sure that the property is backward, as suggested by Kathey&apos;s users: if people remember to explicitly use &quot;useSecureFilePermissions&quot;, they would probably remember to set the correct umask/Windows directory permissions too.&lt;br/&gt;
The whole point of doing this is &quot;to protect users against themselves&quot;, i.e. provide a default that is secure rather than insecure. &lt;/p&gt;

&lt;p&gt;The question then becomes, in what use cases, in what deployment modes, is this protection a net benefit, and in which cases/deployment modes is the benefit outweighed by inconvenience (upgrade hassle, need to use a property to get sharing behavior).&lt;/p&gt;

&lt;p&gt;I do think that in the server case, the argument is stronger for a secure default, especially if authentication/authorization is enabled.&lt;/p&gt;</comment>
                            <comment id="13095345" author="knutanders" created="Thu, 1 Sep 2011 16:20:02 +0100"  >&lt;p&gt;I took a brief look at the basic-2 patch. A couple of comments:&lt;/p&gt;

&lt;p&gt;1) This code may not do the intended in all locales (example: Turkish, &quot;I&quot;.toLowerCase() returns &quot;&#305;&quot;):&lt;/p&gt;

&lt;p&gt;+            os = PropertyUtil.getSystemProperty(&quot;os.name&quot;).toLowerCase();&lt;br/&gt;
+            onWindows = os.indexOf(&quot;windows&quot;) &amp;gt;= 0;&lt;/p&gt;

&lt;p&gt;2) Maybe we could avoid checking the os.name property altogether? The limitAccessToOwnerNTFS() method seems to be coded to work on all platforms. If the platform supports ACL, use that to set the permission; otherwise, do nothing. Could we call that method unconditionally and make it return a value indicating whether or not it was successful, and then only fall back to the Java 6-way of doing things if that failed? Using the return value from Files.getFileAttributeView() to decide whether or not ACLs are supported sounds more robust than checking os.name.&lt;/p&gt;

&lt;p&gt;3) FileUtil.limitAccessToOwner() sets many static fields on the first invocation. Is the first invocation guaranteed to be single-threaded, or is some kind of synchronization needed?&lt;/p&gt;</comment>
                            <comment id="13095355" author="kmarsden" created="Thu, 1 Sep 2011 16:38:19 +0100"  >&lt;p&gt;Dag Said ...&lt;br/&gt;
&quot;The whole point of doing this is &quot;to protect users against themselves&quot;, i.e. provide a default that is secure rather than insecure.&quot;&lt;/p&gt;

&lt;p&gt;For embedded the default has always been focused on zero admin and so pretty much wide open by default and not secure.  Users have to take specific steps to secure Derby and absorb the necessary administration and work to secure it.  I think many embedded applications require multiple user access and that is a perfectly valid use of the product.  I don&apos;t think we can justify breaking these applications to protect some other users from  themselves.&lt;/p&gt;

&lt;p&gt;I am more comfortable with changing the command line startup for Network Server as it is not a zero admin solution. Multiple connecting client users  will not be affected by the permission change and we have already made efforts to improve default security.   Although they exist, it is harder to think of valid  scenarios where multiple users need to start network server and I think we could mitigate it from a support perspective, which I don&apos;t think we could for embedded.  &lt;/p&gt;

&lt;p&gt;Whether the default changes or it doesn&apos;t and in what scenarios I think it would be wise to consult the user list and get feedback.  I think the user I talked to was certainly right when he said:&lt;br/&gt;
&quot;there are times when a component &lt;b&gt;really&lt;/b&gt; needs to change default behavior, but it should only be after a lot of consideration and adopter buy-in&quot; &lt;/p&gt;

&lt;p&gt;Dag, can you bring this issue up on the user list?   I could do it, but I think since you are driving the change  it would be most appropriate for you to initiate the user list discussion.  I think it will also help raise awareness for current users that they need their umask set appropriately if they want the files protected.&lt;/p&gt;




</comment>
                            <comment id="13095596" author="kathy@mtrad.com" created="Thu, 1 Sep 2011 21:54:07 +0100"  >&lt;p&gt;I just wanted to comment on this issue as I have worked with Derby for a long time and have also worked in a support capacity with customers who use Derby.  I think that Kathey said it well--the embedded solution was originally designed to be zero admin, and not secure by default (to keep administration to a mimimum).  Many people who use embedded Derby protect it at other levels within their solutions.  I have seen many uses of embedded Derby that would break if the permissions of the DB files change.  From a support perspective, changing the default behavior generally causes confusion.  I would expect that a change like this would generate issues when people upgrade, as they may not have read the documentation that talks about the new behavior. My vote would be to leave the default permissions as is in the embedded case. &lt;/p&gt;</comment>
                            <comment id="13095693" author="dagw" created="Fri, 2 Sep 2011 01:37:55 +0100"  >&lt;p&gt;Right, let&apos;s leave embedded with the present default for now and proceed with the CLI startup of the network server. I&apos;ll start a discussion on derby-user and see if we get any feed-back. Thanks for helping us get clarity on what&apos;s the best way forward here!&lt;/p&gt;</comment>
                            <comment id="13095696" author="dagw" created="Fri, 2 Sep 2011 01:54:32 +0100"  >&lt;p&gt;Thanks for looking at the patch code, Knut. 1) Agreed, it&apos;s brittle. 2) Yes, I did consider that. It is probably more robust, so I like the idea, although it&apos;s slightly more code to perform for the Posix case. The upside is probably more important: I read somewhere a NFS share on Windows would have Posix permissions, and your solution might make it work correctly in such a case also. 3) I think it would mostly be single threaded, at least on a new database, but I don&apos;t think we have a guarantee, so I&apos;ll protect it.&lt;/p&gt;</comment>
                            <comment id="13097675" author="dagw" created="Tue, 6 Sep 2011 02:06:13 +0100"  >&lt;p&gt;Uploading a version #3 of the basic patch, which addresses Knut&apos;s comments. It also simplifies the exception handling a bit, I found I could ignore the checked exception at the origin. The new code uses ACL interface on Java 7 also for Posix-like file systems, this should make the code work also on Windows with an NFS share I think. If on Java 6, we try to use the simplier Java 6 lang.File.* API, which admittedly only works on Posix-like systems. Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13097958" author="knutanders" created="Tue, 6 Sep 2011 13:49:36 +0100"  >&lt;p&gt;Thanks, Dag. The patch addresses the comments I had. There&apos;s still the possible locale issue when checking os.name, but now that code is limited to a debug section, so it shouldn&apos;t affect any production use.&lt;/p&gt;</comment>
                            <comment id="13098554" author="dagw" created="Wed, 7 Sep 2011 03:36:53 +0100"  >&lt;p&gt;Thanks, Knut. Yeah, I felt for debugging, the chances of Turkish upper case was less of an issue..&lt;/p&gt;

&lt;p&gt;Uploading a patxh to make the &quot;default-restrictive-only-with-cli-network-server&quot; behavior as &quot;derby-5363-server-1&quot;. I have tested it manually and it seems to do the right thing.&lt;/p&gt;</comment>
                            <comment id="13104001" author="dagw" created="Tue, 13 Sep 2011 22:24:17 +0100"  >&lt;p&gt;Uploading a new version which is a sum of the basic patch + the server patch + a new test (which is the main new contribution of this patch): RestrictiveFilePermissionsTest.&lt;/p&gt;

&lt;p&gt;Some minor omissions were added to the basic patch&apos;s code (a couple of places where we had forgotten some created files/dirs). &lt;/p&gt;

&lt;p&gt;Also a small fix for JUnit was necessary to make one constructor of NetworkServerTestSetup used in the test, work.&lt;/p&gt;

&lt;p&gt;The test will only do anything when run under Java 7. Also, if the default umask (or Windows equivalent) is set such that only  the owner gets access, the test can&apos;t really work and skips the test.&lt;/p&gt;

&lt;p&gt;If you can imagine other userful test cases, that would be appreciated. I have tried to wade through the code and docs to find places where directories and files are created, but it&apos;s easy to miss some.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;

&lt;p&gt;Footnote: the reason why we can &lt;b&gt;restrict&lt;/b&gt; but not test permission with Java 6 is that this would require running a test with another OS user; there is not way to inspect the permissions, only to restrict them, essentially. Cf File.setWriteable &amp;amp; friends.&lt;/p&gt;</comment>
                            <comment id="13104466" author="dagw" created="Wed, 14 Sep 2011 13:38:58 +0100"  >&lt;p&gt;As far as asking our users for an opinion on the changed CLI server default, we have only received two replies so far (12 days): One pro and one contra. Not much guidance there.&lt;/p&gt;</comment>
                            <comment id="13104965" author="dagw" created="Wed, 14 Sep 2011 23:49:21 +0100"  >&lt;p&gt;The latest patch (derby-5363-full-1), broke some tests in the harness. It turns out the mechanism I use for conveying to the engine it was booted from a CLI server is broken: I set a system property in NetworkServerControl which is later consulted by the engine when creating new files. The tests that broke installed their own security policies which did not include the permission to set a system property. There is already a precedent for using internal system properties, cf e.g. NetworkServerControl#installSecurityManager, but in that case, there is no user specified security manager already installed, so setting the properties cannot fail. In my case, we would have to impose a burden on the user to provide the needed permission in the provided policy file, which is awkward, since we are talking about an internal system property here. However, I didn&apos;t find any other way to provide the engine with this information since the server uses the generic Class.forName method to boot the engine:&lt;br/&gt;
NetworkServerControlImpl.startNetworkServer, ca line 1009:&lt;/p&gt;

&lt;p&gt;       cloudscapeDriver = (Driver) Class.forName(CLOUDSCAPE_DRIVER).newInstance();&lt;/p&gt;

&lt;p&gt;and after that has been done it is too late (derby.log has already been created..) Any clever ideas on how to let the engine know its been booted from the network server? I guess I could try to load the class NetworkServerControlImpl and if available (which it would be in a server context), read a public static member, but so far we have managed to avoid such &quot;backward&quot; coupling from the embedded driver to the server code, so it doesn&apos;t sees a good solution either..&lt;/p&gt;</comment>
                            <comment id="13105257" author="dagw" created="Thu, 15 Sep 2011 11:34:21 +0100"  >&lt;p&gt;Uploading derby-5363-full-2, which fixes this issue by adjusting the relevant test policy file, as well as the template policy file with a suitable comment. Rerunning regressions. I believe this is a cleaner approach after all than referring &quot;upwards&quot; from the engine into the server code..&lt;/p&gt;</comment>
                            <comment id="13106017" author="dagw" created="Fri, 16 Sep 2011 13:03:38 +0100"  >&lt;p&gt;Regressions passed on Solaris 11 with JDK 1.7. Ill run the full patch through more platform combinations since the patch is platform dependent before I consider committing it. It would be nice to have somebody look at the tests first,though.&lt;/p&gt;

&lt;p&gt;I also need to write a small functional specification to sum up the behavior and attach it to this issue as well as a release note.&lt;/p&gt;</comment>
                            <comment id="13108123" author="dagw" created="Mon, 19 Sep 2011 21:34:38 +0100"  >&lt;p&gt;Attaching a first rev of the release notes.&lt;/p&gt;</comment>
                            <comment id="13108821" author="rhillegas" created="Tue, 20 Sep 2011 17:50:56 +0100"  >&lt;p&gt;Thanks, Dag. I could not resist wordsmithing the release note. I&apos;ve attached a new version. Feel free to discard any or all of this if I have garbled your meaning. Thanks.&lt;/p&gt;</comment>
                            <comment id="13108984" author="dagw" created="Tue, 20 Sep 2011 21:40:47 +0100"  >&lt;p&gt;Thanks, Rick. Much more readable, at the cost of a slight loss of precision in a few places. I&apos;ll try to add that back without making it (much) harder to read.&lt;/p&gt;</comment>
                            <comment id="13108991" author="dagw" created="Tue, 20 Sep 2011 21:51:34 +0100"  >&lt;p&gt;Uploading a new version of the release notes. Added back some precision, fixed a typo, and changed doc links to point to 10.9, which is the likely release vehicle.&lt;/p&gt;</comment>
                            <comment id="13108995" author="dagw" created="Tue, 20 Sep 2011 21:57:07 +0100"  >&lt;p&gt;Uploading version derby-5363-full-3 of the patch. Relative to version -2, this makes a couple of small changes to make the test work on Windows: we tried to delete files that were not closed. See also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5418&quot; title=&quot;Network server session&amp;#39;s close method neglects to close down any open trace file&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5418&quot;&gt;&lt;del&gt;DERBY-5418&lt;/del&gt;&lt;/a&gt;; that patch is needed for this patch to run correctly on Windows. &lt;/p&gt;

&lt;p&gt;Regressions passed on Solaris, Windows with JDK 1.6 and 1.7.&lt;/p&gt;</comment>
                            <comment id="13109425" author="knutanders" created="Wed, 21 Sep 2011 13:10:47 +0100"  >&lt;p&gt;Thanks for the new patch, Dag. I took a look at it (mainly at the&lt;br/&gt;
tests), and I have some comments below, most of them just minor&lt;br/&gt;
issues. The tests look extensive and seem to cover most cases. I&lt;br/&gt;
couldn&apos;t think of anything obvious that was missing. Except, perhaps,&lt;br/&gt;
temporary files under tmp (only the permissions on the tmp directory&lt;br/&gt;
itself are checked).&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;StreamFileContainer.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         }catch( PrivilegedActionException pae) &lt;/p&gt;
         {
-            // method executed under this priveleged block 
-            // does not throw an exception
-            return false;
+            throw (SecurityException)pae.getCause();
         } 

&lt;p&gt;Since PrivilegedActionException only wraps checked exceptions, and&lt;br/&gt;
SecurityException is a subclass of RuntimeException, I think this code&lt;br/&gt;
will cause a ClassCastException whenever it&apos;s executed.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;JVMInfo.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I haven&apos;t tested, but I suspect JDK 8 will still be identified as Java&lt;br/&gt;
6, unless we also change the catch-all clause:&lt;/p&gt;

&lt;p&gt;    if (Float.parseFloat(javaVersion) &amp;gt; 1.6f)&lt;br/&gt;
        id = J2SE_16;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;RestrictiveFilePermissionsTest.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I was a little surprised that no security manager magic was needed&lt;br/&gt;
to read this system property, like we have to do other places in the&lt;br/&gt;
tests:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+    final static String pathSep = System.getProperty(&quot;file.separator&quot;);&lt;/p&gt;

&lt;p&gt;Maybe it&apos;s because the class is loaded before the security manager is&lt;br/&gt;
installed? The constants File.separator or File.separatorChar could&lt;br/&gt;
also be used, without any security manager concerns.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Would it make sense to rename the test cases that require special&lt;br/&gt;
setup to have another prefix than &quot;test&quot;? Then the majority of test&lt;br/&gt;
cases could be added in suite() simply by doing&lt;br/&gt;
ts.addTestSuite(RestrictiveFilePermissionsTest.class), and adding new&lt;br/&gt;
test cases would also be easier.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Perhaps exclude the two lax cases in suite() if lax testing isn&apos;t&lt;br/&gt;
supported, instead of inside the test cases themselves? Then it&apos;s&lt;br/&gt;
easier to see from the test logs if the test cases actually ran.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In suite(), it would be better to declare it as throws Exception and&lt;br/&gt;
avoid swallowing the stack trace of the underlying exception, like&lt;br/&gt;
here:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        try &lt;/p&gt;
{
+            supportsLaxTesting =
+                checkAccessToOwner(
+                    null,
+                    f,
+                    false,
+                    UNKNOWN);
+        }
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{
+            fail(&quot;Error during suite setup: &quot; + e);
+        }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Similarly, in checkAccessToOwner():&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+                            } catch (NoSuchMethodException e) &lt;/p&gt;
{
+                                Assert.fail();
+                            } catch (ClassNotFoundException e) {
+                                Assert.fail();
+                            }

&lt;p&gt;Here, either let the unexpected exceptions propagate up to the JUnit&lt;br/&gt;
framework, or call BaseTestCase.fail(String, Throwable) to preserve&lt;br/&gt;
the cause.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There should be a space after &quot;in&quot; in this message:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        if (!supportsLaxTesting) &lt;/p&gt;
{
+            println(&quot;warning: testing of lax file permissions in&quot; +
+                    &quot;RestrictiveFilePermissionsTest can not take place, &quot; +
+                    &quot;use a more liberal runtime default (umask) for the tests&quot;);
+        }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Many of the test cases contain code similar to this:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        Connection c = getConnection();&lt;br/&gt;
+        Statement s = c.createStatement();&lt;br/&gt;
...&lt;br/&gt;
+        PreparedStatement ps = c.prepareStatement(&lt;br/&gt;
+            &quot;insert into lobtable values (1,?)&quot;);&lt;br/&gt;
...&lt;br/&gt;
+        CallableStatement cs = c.prepareCall&lt;br/&gt;
+            (&quot;CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;/p&gt;

&lt;p&gt;It&apos;s probably better to use the helper methods in BaseJDBCTestCase to&lt;br/&gt;
create the various statements, so that the statements are closed after&lt;br/&gt;
use.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testCliServerIsRestrictive(): Just curious... I thought&lt;br/&gt;
assertDirectoryDeleted() already handled the cases where the file&lt;br/&gt;
handles weren&apos;t closed just yet, so that sleeping shouldn&apos;t be&lt;br/&gt;
necessary?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+        Thread.sleep(2000); &lt;br/&gt;
+        // ..so hopefully server will have closed files handles before&lt;br/&gt;
+        // we try to delete files:&lt;br/&gt;
+        assertDirectoryDeleted(traceDirF);&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;exists(): Use existing helper method in PrivilegedFileOpsForTests&lt;br/&gt;
instead?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;NetworkServerTestSetup.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Spurious white-space diff?&lt;/p&gt;</comment>
                            <comment id="13112171" author="kmarsden" created="Wed, 21 Sep 2011 23:28:38 +0100"  >&lt;p&gt;I  have not been following this issue closely, but seem to recall a comment about the patch working only on JDK 1.7 and not on 1.6. I don&apos;t see that now in skimming the comments.  Is that the case?  If so we should probably change the summary.&lt;/p&gt;
</comment>
                            <comment id="13112199" author="dagw" created="Wed, 21 Sep 2011 23:57:25 +0100"  >&lt;p&gt;Kathey, the patch will do the right thing for Java 6 on Unix/Linux only (Posix fs, not NTFS). On 7, it works on NTFS, too. The &lt;b&gt;tests&lt;/b&gt; only work with Java 7 because there is no way to find out programmatically if it worked under Java 6. I have verified it by inspection of the created files only in that case.&lt;/p&gt;
</comment>
                            <comment id="13112298" author="dagw" created="Thu, 22 Sep 2011 04:27:45 +0100"  >&lt;p&gt;Thanks for your diligent review, Knut! Uploading patch *-full-4 in which we:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixed the misguided StreamFileContainer exception, early draft cruft&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;updated the JVMInfo to default to 7 if &amp;gt;= 8&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added creating a temporary table to testTmpDirectory test case&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;changed naming to avoid having to list all tests that are part of the majority group as suggested&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;excluded the two lax cases from running if lax testing isn&apos;t supported&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in suite(), declared it as throws Exception and avoid swallowing the stack trace of the underlying exception when calling checkAccessToOwner, ditto in checkAccessToOwner&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added missing blank in warning string&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;converted missing use of helper methods from BaseJDBCTestCase&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;switched to using PrivilegedFileOpsForTests#exists&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed spurious white space diff in NetworkServerTestSetup&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;changed to using &quot;/&quot; since it&apos;s a cheaper pattern than reading the property and works fine on Windows, too.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed instances of now superfluous exception handling code similar to this:&lt;br/&gt;
  ioe instanceof FileNotFoundException &amp;amp;&amp;amp;&lt;br/&gt;
      ((FileNotFoundException)ioe).getCause() instanceof&lt;br/&gt;
      AccessControlException) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  since limitAccessToOwner no longer wraps AccessControlException in a IOException&lt;/p&gt;


&lt;p&gt;Answers to your questions:&lt;/p&gt;

&lt;p&gt;&amp;gt; - I was a little surprised that no security manager magic was needed to read this system property, like we have to do other places in the tests:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; + final static String pathSep = System.getProperty(&quot;file.separator&quot;);&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Maybe it&apos;s because the class is loaded before the security manager is installed? The constants File.separator or File.separatorChar could also be used, without any security manager concerns.&lt;/p&gt;

&lt;p&gt;Not sure what&apos;s going on here. I tried to move it inside a test, but I still got no security exception. I thought I had seen somewhere that this property was safe to read, but I can&apos;t say where. I found this, though:&lt;/p&gt;

&lt;p&gt;Cf. &lt;a href=&quot;http://www.iam.ubc.ca/guides/javatut99/applet/practical/properties.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.iam.ubc.ca/guides/javatut99/applet/practical/properties.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which lists this as a legal property for an applet to read. I guess if a property is considered safe for an applet to read, it&apos;s safe for an app running under Java security, too..&lt;/p&gt;

&lt;p&gt;&amp;gt; - testCliServerIsRestrictive(): Just curious... I thought assertDirectoryDeleted() already handled the cases where the file handles weren&apos;t closed just yet, so that sleeping shouldn&apos;t be necessary?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; + Thread.sleep(2000);&lt;br/&gt;
&amp;gt; + // ..so hopefully server will have closed files handles before&lt;br/&gt;
&amp;gt; + // we try to delete files:&lt;br/&gt;
&amp;gt; + assertDirectoryDeleted(traceDirF);&lt;/p&gt;

&lt;p&gt;That&apos;s true, but I didn&apos;t like seeing the warning in my log.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; This way, mostly the method doesn&apos;t have to retry..&lt;/p&gt;

&lt;p&gt;Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13112390" author="knutanders" created="Thu, 22 Sep 2011 08:48:01 +0100"  >&lt;p&gt;Thanks, Dag, for the new patch and for answering my questions. The full-4 patch addresses all my comments (well, except for the spurious white space diff in NetworkServerTestSetup, which seems to have crept back in). +1&lt;/p&gt;</comment>
                            <comment id="13112653" author="dagw" created="Thu, 22 Sep 2011 16:32:10 +0100"  >&lt;p&gt;Thanks, Knut. yeah, pilot error: it had crept back in.. too many workspaces in parallel got me confused &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I won&apos;t respin the patch for that, but fix it when committing. &lt;/p&gt;</comment>
                            <comment id="13112720" author="dagw" created="Thu, 22 Sep 2011 18:07:53 +0100"  >&lt;p&gt;I will commit this patch over the week-end, then. Notwithstanding the ongoing discussions about security, we can always change the new default for CLI server back to old (possibly lax) default permissions if that turns out to be the conclusion.&lt;/p&gt;</comment>
                            <comment id="13112753" author="kmarsden" created="Thu, 22 Sep 2011 18:47:23 +0100"  >&lt;p&gt;Dag, I have lost track.  Can you summarize the default behavior and the behavior if the property is set for the various configurations, jvms and for existing vs new databases?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="13113692" author="dagw" created="Fri, 23 Sep 2011 20:46:23 +0100"  >&lt;p&gt;Kathey, the present releasenotes.html summarizes the behavior, I think. Since this is a system level property, we make no difference between existing and new databases. If one starts the (new) CLI server, it will treat existing and new databases the same, as well as system level files (e.g. server trace files): all files and directories created will be restricted to the owner. The permissions of existing files are not touched. To get the old behavior for the CLI server the property must be used.&lt;/p&gt;</comment>
                            <comment id="13113693" author="dagw" created="Fri, 23 Sep 2011 20:47:32 +0100"  >&lt;p&gt;And, just to be clear, embedded Derby and server started via API are not affected by default. &lt;/p&gt;</comment>
                            <comment id="13114780" author="dagw" created="Mon, 26 Sep 2011 17:53:09 +0100"  >&lt;p&gt;I had a new regression error. It turned out that after I changed to implicit fixure addition, the indeterministic test fixture ordering resulting under Java 7 intermittently exposed a bug: If the test containing the jar file install were executed prior to the backup test, the database would contain a jar file which is, of course, then also backed up. There was code to to handle this, but it wasn&apos;t part of the test (except by this &quot;accident&quot;) and it had a bug. Fixed now in version *-full-5, which I upload. Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13115881" author="dagw" created="Tue, 27 Sep 2011 21:24:37 +0100"  >&lt;p&gt;Committed patch derby-5363-full-5 as svn 1176591, resolving.&lt;/p&gt;</comment>
                            <comment id="13116372" author="knutanders" created="Wed, 28 Sep 2011 13:26:17 +0100"  >&lt;p&gt;One small issue that I didn&apos;t notice until now. sysinfo outputs this on Java 7 after the commit:&lt;/p&gt;

&lt;p&gt;--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: ?-?&lt;/p&gt;

&lt;p&gt;I think JVMInfo.derbyVMLevel() needs to be updated now that Java 7 isn&apos;t handled as Java 6 anymore.&lt;/p&gt;</comment>
                            <comment id="13116630" author="kmarsden" created="Wed, 28 Sep 2011 18:43:15 +0100"  >&lt;p&gt;For trunk we are going to remove this line as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1046&quot; title=&quot;JVMInfo is duplicated in derbyclient.jar&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1046&quot;&gt;&lt;del&gt;DERBY-1046&lt;/del&gt;&lt;/a&gt;, so that will take care of the sysinfo issue.&lt;/p&gt;</comment>
                            <comment id="13118121" author="kmarsden" created="Fri, 30 Sep 2011 16:07:56 +0100"  >&lt;p&gt;The release note does not mention the difference in behavior for different JVM&apos;s but is my understanding correct?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java 5 and lower there is no change in behavior.&lt;/li&gt;
	&lt;li&gt;java 6 some operating systems change and some don&apos;t.  Also we cannot test on any platform for java 6&lt;/li&gt;
	&lt;li&gt;java 7 All platforms  change.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If this summary is correct, I think perhaps we should only have the new behavior with java 7.  If we can&apos;t test it on java 6 we won&apos;t know if there are jvm bugs or derby code changes that break it.  Also it is confusing that some platforms are affected and some aren&apos;t.  Lastly I think it is very clear and more appropriate to introduce a new behavior with a new JVM. Applications will test more rigorously on  a JVM upgrade and hopefully any associated problems will be caught early.&lt;/p&gt;
</comment>
                            <comment id="13118157" author="dagw" created="Fri, 30 Sep 2011 17:05:31 +0100"  >&lt;p&gt;Uploading a follow-up patch: &quot;derby-5363-followup&quot;, which adds a missing accessController block around setting the system property SERVER_STARTED_FROM_CMD_LINE. If missing, this would fail if running with a security manager specified on the command line. Regressions passed.&lt;br/&gt;
If the property permission is missing, the error is printed unconditionally and exit from main taken. Cf. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5413&quot; title=&quot;NetworkServerControl#main can exit with status 1 without printing an error message to console&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5413&quot;&gt;&lt;del&gt;DERBY-5413&lt;/del&gt;&lt;/a&gt; which tried another (aborted) approach to make sure it got printed.&lt;/p&gt;</comment>
                            <comment id="13118168" author="dagw" created="Fri, 30 Sep 2011 17:26:44 +0100"  >&lt;p&gt;Kathey, your understanding is correct. As for only introducing the new behavior on Java 7, that would make it easier to explain indeed. The missing testing is of course also worrying, especially since it takes another code path. On the other hand, it does work on Unix (nad Unix derived) platforms on Java 6 and with some work I could probably add some (non-portable) testing for it by forking a shell and doing ls(1).&lt;/p&gt;</comment>
                            <comment id="13118173" author="dagw" created="Fri, 30 Sep 2011 17:30:17 +0100"  >&lt;p&gt;Committed derby-5363-followup as svn 1177718.&lt;/p&gt;</comment>
                            <comment id="13118226" author="kmarsden" created="Fri, 30 Sep 2011 18:37:59 +0100"  >&lt;p&gt;I think my first preference  would be to make this only a java 7 and up feature.&lt;br/&gt;
The change is very clear and we can use our normal testing methods.  Meanwhile users can set their umask appropriately.&lt;/p&gt;

&lt;p&gt;My second preference would be only  to only change permissions by default  with java 7 and higher.&lt;br/&gt;
I think we really need to have tests for the default configuration and non-portable tests might have to be customized to different environments, which seems like a lot of effort for something that won&apos;t be used moving forward.&lt;/p&gt;

&lt;p&gt;I am sorry I didn&apos;t chime in earlier.  Time has been quite tight recently.&lt;/p&gt;
</comment>
                            <comment id="13118240" author="mikem" created="Fri, 30 Sep 2011 19:01:47 +0100"  >&lt;p&gt;It is already strange that one will get different behavior depending on which JVM one uses.  There is a precedent when we added JVM locking support to prevent dual booting the behavior was different depending on JVM version, so documentation/explanation is key to let users&lt;br/&gt;
know what to expect.&lt;/p&gt;

&lt;p&gt;It seems more straight forward to only support the change with jdk17 and up JVM&apos;s.  It is easily documented, and I assume implemented.  Users upgrading to a new JVM should be looking for consequences to their applications and hopefully at that point will &lt;br/&gt;
run tests.  &lt;/p&gt;

&lt;p&gt;It also seems like testing of the feature is more straight forward with this restriction.  &lt;/p&gt;</comment>
                            <comment id="13119353" author="dagw" created="Mon, 3 Oct 2011 16:19:57 +0100"  >&lt;p&gt;Ok, folks, let&apos;s make this a Java 7 and upwards feature. I&apos;ll change the implementation accordingly.&lt;/p&gt;</comment>
                            <comment id="13119396" author="dagw" created="Mon, 3 Oct 2011 17:53:46 +0100"  >&lt;p&gt;Uploading a patch which limits default setting of restrictive permissions (for network server started from the command line) to Java 7. The documentation will describe the whole feature as a Java 7 and higher feature.&lt;/p&gt;

&lt;p&gt;The present patch does not actually &lt;b&gt;stop&lt;/b&gt; anyone from trying to use it with Java 6 on Unix, though (by switching it on explicitly with the property), so that would be an undocumented, unsupported feature. If you think I should actively &lt;b&gt;prohibit&lt;/b&gt; using it with that platform, speak out, please.&lt;/p&gt;

&lt;p&gt;Re-running regressions.&lt;/p&gt;</comment>
                            <comment id="13119401" author="dagw" created="Mon, 3 Oct 2011 18:01:22 +0100"  >&lt;p&gt;Uploading a revised releaseNotes.html to reflect that this is a &amp;gt;= Java 7 feature only.&lt;/p&gt;</comment>
                            <comment id="13120613" author="dagw" created="Wed, 5 Oct 2011 01:40:31 +0100"  >&lt;p&gt;It seems RestrictiveFilePermissionsTest for this features breaks on some platforms (thanks to Kathey for noticing).  Apparently, the ACL view of Posix file system permissions is not available for all Unix versions in JDK 1.7 as I had thought from testing on Solaris 11. I have changed the test now so it runs on Linux as well.  Hopefully this solves the issue. Perhaps this will make the test work on IBM&apos;s JDK 1.7 also. I&apos;d appreciate it if somebody tried to enable the test again for IBM JVMs to check (RestrictiveFilePermissionsTest is skipped in engine._Suite now).&lt;/p&gt;

&lt;p&gt;Uploading patch derby-5363-followup-linux.&lt;/p&gt;</comment>
                            <comment id="13120652" author="dagw" created="Wed, 5 Oct 2011 03:31:14 +0100"  >&lt;p&gt;Committed derby-5363-followup-linux at svn 1179042.&lt;/p&gt;</comment>
                            <comment id="13121148" author="dagw" created="Wed, 5 Oct 2011 18:04:26 +0100"  >&lt;p&gt;Uploading a slightly improved version: derby-5363-limit-to-java7b.&lt;/p&gt;</comment>
                            <comment id="13121152" author="dagw" created="Wed, 5 Oct 2011 18:08:15 +0100"  >&lt;p&gt;Committed derby-5363-limit-to-java7b at svn 1179320.&lt;/p&gt;</comment>
                            <comment id="13121170" author="dagw" created="Wed, 5 Oct 2011 18:23:03 +0100"  >&lt;p&gt;Uploaded a new slightly improved version of the release notes.&lt;/p&gt;</comment>
                            <comment id="13122338" author="dagw" created="Thu, 6 Oct 2011 22:51:40 +0100"  >&lt;p&gt;Uploading a patch derby-5363-followup-unix to fix the problem seen on Solaris &lt;b&gt;not&lt;/b&gt; running under ZFS, but it should apply in general.&lt;/p&gt;

&lt;p&gt;It turns out there is no guarantee the the underlying file system supports ACLs even though Files#getFileAttributeView called with aclFileAttributeViewClz.class as an argument returns an object. We also need to call the method:&lt;/p&gt;

&lt;p&gt;     FileStore#supportsFileAttributeView(AclFileAttributeView.class)&lt;/p&gt;

&lt;p&gt;to ascertain whether we have support for ACLs. To get at the current FileStore, we need to inquire about that given a path:&lt;/p&gt;

&lt;p&gt;     Files.getFileStore(&amp;lt;path&amp;gt;)&lt;/p&gt;

&lt;p&gt;which requires the RuntimePermission &quot;getFileStoreAttributes&quot;, hence the current patch&apos;s changes to the policy files.&lt;/p&gt;

&lt;p&gt;With the patch, RestrictiveFilePermissionsTest run OK on Solaris/UFS.  Rerunning regressions on all platforms.&lt;/p&gt;

</comment>
                            <comment id="13122887" author="dagw" created="Fri, 7 Oct 2011 16:42:40 +0100"  >&lt;p&gt;Regressions OK so far: Solaris 11/JDK7, Solaris 10/JDK6, Solaris 10/JDK7, Windows Vista/JDK6, Windows Vista/JDK 7. I&apos;ll run on Linux, then commit.&lt;/p&gt;</comment>
                            <comment id="13123780" author="dagw" created="Sun, 9 Oct 2011 21:48:25 +0100"  >&lt;p&gt;Regressions passed on Linux as well , committed as svn 1180713, resolving.&lt;/p&gt;</comment>
                            <comment id="13123797" author="knutanders" created="Sun, 9 Oct 2011 23:44:18 +0100"  >&lt;p&gt;I assume this part was unintended?&lt;/p&gt;

&lt;p&gt;@@ -747,6 +752,7 @@ nextFile:	for (int i = 0; i &amp;lt; list.lengt&lt;br/&gt;
                     allow = aclEntryTypeClz.getField(&quot;ALLOW&quot;);&lt;/p&gt;

&lt;p&gt;                 } catch (NoSuchMethodException e) &lt;/p&gt;
{
+                    e.printStackTrace();
                     // not Java 7 or higher
                 }
&lt;p&gt; catch (ClassNotFoundException e) {&lt;br/&gt;
                     // not Java 7 or higher&lt;/p&gt;</comment>
                            <comment id="13125532" author="dagw" created="Wed, 12 Oct 2011 02:57:15 +0100"  >

&lt;p&gt;Good catch, yes, remaining test cruft. Fix committed as 1182266.&lt;/p&gt;

&lt;p&gt;Dag&lt;/p&gt;</comment>
                            <comment id="13276143" author="rhillegas" created="Tue, 15 May 2012 20:34:44 +0100"  >&lt;p&gt;Attaching a modified version of the release note. Correcting a bad href which choked the release notes generator.&lt;/p&gt;</comment>
                            <comment id="13625893" author="kmarsden" created="Mon, 8 Apr 2013 22:59:28 +0100"  >&lt;p&gt;Are the security manager permissions added for this issue, required for all uses of Derby including embedded?&lt;/p&gt;

&lt;p&gt;&quot;The new code when running on Java 7 on Windows needs the extra RuntimePermission &quot;accessUserInformation&quot; (to determine the file&apos;s owner) when run with the Security Manager. I have added that to the default &quot;server.policy&quot; file, and the &quot;template.policy&quot;, as well as were needed to run the tests. The tests also needed some more &quot;read&quot; file permissions.&quot;&lt;/p&gt;

&lt;p&gt;I also don&apos;t understand why the tests needed read permission for the server trace file. Shouldn&apos;t t that be derbynet.jar that would need that?&lt;/p&gt;

&lt;p&gt;Sorry for the ancient history question.  &lt;/p&gt;</comment>
                            <comment id="13629942" author="dagw" created="Fri, 12 Apr 2013 09:58:07 +0100"  >&lt;p&gt;Q1) Only iff derby.storage.useDefaultFilePermissions is set to false and you are running with a security manager and VM &amp;gt;= JDK7. So if the property is never set, the permissions shouldn&apos;t be necessary on embedded (the default value for derby.storage.useDefaultFilePermissions there is true).&lt;br/&gt;
Q2) I don&apos;t remember off the top of my head. I&apos;ll try to investigate it.&lt;/p&gt;
</comment>
                            <comment id="13630951" author="dagw" created="Sat, 13 Apr 2013 06:45:22 +0100"  >&lt;p&gt;Q2: In test NetworkServerControlApiTest, the test performs this operation, ca line 172:&lt;/p&gt;

&lt;p&gt;    assertTrue(fileExists(derbysystemhome+&quot;/trace/Server1.trace&quot;));&lt;/p&gt;

&lt;p&gt;now, the Javadoc of File.exists has this stanza: &lt;/p&gt;

&lt;p&gt;     throws SecurityException ... If a security manager exists and its SecurityManager.checkRead(java.lang.String) method denies read access to the file&lt;/p&gt;

&lt;p&gt;In the Javadoc for that checkRead overload, we see this:&lt;/p&gt;

&lt;p&gt;    This method calls checkPermission with the FilePermission(file,&quot;read&quot;) permission. &lt;/p&gt;

&lt;p&gt;so we do need the filePermission &quot;read&quot; permission here granted to the test.&lt;/p&gt;</comment>
                            <comment id="14284783" author="myrna" created="Wed, 21 Jan 2015 00:23:20 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12530548">DERBY-5492</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12525122">DERBY-5434</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12641517">DERBY-6160</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12645657">DERBY-6209</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12652174">DERBY-6258</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12525547">DERBY-5442</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12702580">DERBY-6521</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12492129" name="derby-5363-basic-1.diff" size="79443" author="dagw" created="Mon, 29 Aug 2011 21:00:52 +0100"/>
                            <attachment id="12492130" name="derby-5363-basic-1.stat" size="2810" author="dagw" created="Mon, 29 Aug 2011 21:00:52 +0100"/>
                            <attachment id="12492566" name="derby-5363-basic-2.diff" size="72100" author="dagw" created="Thu, 1 Sep 2011 03:51:21 +0100"/>
                            <attachment id="12492567" name="derby-5363-basic-2.stat" size="2549" author="dagw" created="Thu, 1 Sep 2011 03:51:21 +0100"/>
                            <attachment id="12493093" name="derby-5363-basic-3.diff" size="69637" author="dagw" created="Tue, 6 Sep 2011 02:01:23 +0100"/>
                            <attachment id="12493096" name="derby-5363-basic-3.stat" size="2549" author="dagw" created="Tue, 6 Sep 2011 02:06:13 +0100"/>
                            <attachment id="12497741" name="derby-5363-followup-linux.diff" size="25542" author="dagw" created="Wed, 5 Oct 2011 03:28:27 +0100"/>
                            <attachment id="12497735" name="derby-5363-followup-linux.diff" size="17999" author="dagw" created="Wed, 5 Oct 2011 01:45:22 +0100"/>
                            <attachment id="12498077" name="derby-5363-followup-unix.diff" size="17269" author="dagw" created="Thu, 6 Oct 2011 22:51:40 +0100"/>
                            <attachment id="12498075" name="derby-5363-followup-unix.diff" size="17269" author="dagw" created="Thu, 6 Oct 2011 22:51:40 +0100"/>
                            <attachment id="12498076" name="derby-5363-followup-unix.stat" size="1106" author="dagw" created="Thu, 6 Oct 2011 22:51:40 +0100"/>
                            <attachment id="12497183" name="derby-5363-followup.diff" size="1513" author="dagw" created="Fri, 30 Sep 2011 17:07:15 +0100"/>
                            <attachment id="12494321" name="derby-5363-full-1.diff" size="108179" author="dagw" created="Tue, 13 Sep 2011 22:24:17 +0100"/>
                            <attachment id="12494322" name="derby-5363-full-1.stat" size="3029" author="dagw" created="Tue, 13 Sep 2011 22:24:17 +0100"/>
                            <attachment id="12494601" name="derby-5363-full-2.diff" size="108155" author="dagw" created="Thu, 15 Sep 2011 11:35:23 +0100"/>
                            <attachment id="12494602" name="derby-5363-full-2.stat" size="3029" author="dagw" created="Thu, 15 Sep 2011 11:35:23 +0100"/>
                            <attachment id="12495270" name="derby-5363-full-3.diff" size="109122" author="dagw" created="Tue, 20 Sep 2011 21:57:06 +0100"/>
                            <attachment id="12495271" name="derby-5363-full-3.stat" size="3029" author="dagw" created="Tue, 20 Sep 2011 21:57:06 +0100"/>
                            <attachment id="12496061" name="derby-5363-full-4.diff" size="104171" author="dagw" created="Thu, 22 Sep 2011 04:27:45 +0100"/>
                            <attachment id="12496062" name="derby-5363-full-4.stat" size="3029" author="dagw" created="Thu, 22 Sep 2011 04:27:45 +0100"/>
                            <attachment id="12496501" name="derby-5363-full-5.diff" size="103871" author="dagw" created="Mon, 26 Sep 2011 17:53:48 +0100"/>
                            <attachment id="12496502" name="derby-5363-full-5.stat" size="2950" author="dagw" created="Mon, 26 Sep 2011 17:53:48 +0100"/>
                            <attachment id="12497483" name="derby-5363-limit-to-java7.diff" size="2419" author="dagw" created="Mon, 3 Oct 2011 17:53:46 +0100"/>
                            <attachment id="12497484" name="derby-5363-limit-to-java7.stat" size="134" author="dagw" created="Mon, 3 Oct 2011 17:53:46 +0100"/>
                            <attachment id="12497816" name="derby-5363-limit-to-java7b.diff" size="2473" author="dagw" created="Wed, 5 Oct 2011 18:04:26 +0100"/>
                            <attachment id="12497817" name="derby-5363-limit-to-java7b.stat" size="134" author="dagw" created="Wed, 5 Oct 2011 18:04:26 +0100"/>
                            <attachment id="12493264" name="derby-5363-server-1.diff" size="3695" author="dagw" created="Wed, 7 Sep 2011 03:45:25 +0100"/>
                            <attachment id="12489777" name="permission-5.diff" size="19965" author="dagw" created="Tue, 9 Aug 2011 01:07:03 +0100"/>
                            <attachment id="12489778" name="permission-5.stat" size="1057" author="dagw" created="Tue, 9 Aug 2011 01:07:03 +0100"/>
                            <attachment id="12490019" name="permission-6.diff" size="35915" author="dagw" created="Wed, 10 Aug 2011 19:24:09 +0100"/>
                            <attachment id="12490020" name="permission-6.stat" size="1607" author="dagw" created="Wed, 10 Aug 2011 19:24:09 +0100"/>
                            <attachment id="12492141" name="property-table.png" size="54515" author="dagw" created="Mon, 29 Aug 2011 22:00:21 +0100"/>
                            <attachment id="12527499" name="releaseNote.html" size="5658" author="rhillegas" created="Tue, 15 May 2012 20:34:44 +0100"/>
                            <attachment id="12497819" name="releaseNote.html" size="5656" author="dagw" created="Wed, 5 Oct 2011 18:23:03 +0100"/>
                            <attachment id="12497492" name="releaseNote.html" size="5335" author="dagw" created="Mon, 3 Oct 2011 18:01:21 +0100"/>
                            <attachment id="12495269" name="releaseNote.html" size="5195" author="dagw" created="Tue, 20 Sep 2011 21:51:34 +0100"/>
                            <attachment id="12495238" name="releaseNote.html" size="4996" author="rhillegas" created="Tue, 20 Sep 2011 17:50:56 +0100"/>
                            <attachment id="12495141" name="releaseNote.html" size="5417" author="dagw" created="Mon, 19 Sep 2011 21:43:09 +0100"/>
                            <attachment id="12495139" name="releaseNote.html" size="5068" author="dagw" created="Mon, 19 Sep 2011 21:34:38 +0100"/>
                            <attachment id="12489853" name="z.sql" size="1062" author="rhillegas" created="Tue, 9 Aug 2011 16:53:22 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12525547">DERBY-5442</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Aug 2011 13:16:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3228</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0btr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>