<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:44 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5546/DERBY-5546.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5546] ResultSet#updateBigDecimal on a REAL column does not do underflow checking</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5546</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In contrast, ResultSet#updateBigDecimal on a FLOAT or DOUBLE column gives the expected error on underflow. Cf. the attached repro program MissingUnderflowCheck.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12535489">DERBY-5546</key>
            <summary>ResultSet#updateBigDecimal on a REAL column does not do underflow checking</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Fri, 16 Dec 2011 18:08:12 +0000</created>
                <updated>Thu, 8 Aug 2013 17:37:02 +0100</updated>
                            <resolved>Wed, 20 Feb 2013 04:24:48 +0000</resolved>
                                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.1.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.1.2</version>
                    <version>10.8.2.2</version>
                    <version>10.8.3.0</version>
                    <version>10.9.1.0</version>
                                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13171116" author="dagw" created="Fri, 16 Dec 2011 18:24:15 +0000"  >&lt;p&gt;In SQLReal, the method setBigDecimal has this line:&lt;/p&gt;

&lt;p&gt;   setValue(bigDecimal.floatValue());&lt;/p&gt;

&lt;p&gt;The method BigDecimal.floatValue has this caveat in the Javadoc:&lt;br/&gt;
&quot; Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value. &quot;&lt;/p&gt;

&lt;p&gt;So, if the actual value is Double.MIN_VALUE, the value here is set to 0.0 without any error.&lt;br/&gt;
In contrast, when we try to update a DOUBLE column, the method used is&lt;/p&gt;

&lt;p&gt;  setValue(bigDecimal.doubleValue())&lt;/p&gt;

&lt;p&gt;This will not underflow, but subsequently gets caught by the range check in NumberDataType#normalizeDouble() where the value is checked against Limits.DB2_SMALLEST_DOUBLE.&lt;/p&gt;

&lt;p&gt;However, if the value represented in the BigDecimal is even smaller than Double.MIN_VALUE, the call &quot;bigDecimal.doubleValue()&quot; would yield 0.0 and we would have the same behavior for DOUBLE, too.&lt;/p&gt;
</comment>
                            <comment id="13172615" author="dagw" created="Mon, 19 Dec 2011 21:12:37 +0000"  >&lt;p&gt;Uploading &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5546&quot; title=&quot;ResultSet#updateBigDecimal on a REAL column does not do underflow checking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5546&quot;&gt;&lt;del&gt;DERBY-5546&lt;/del&gt;&lt;/a&gt; which adds underflow checking to SQLReal and SQLDouble&apos;s setBigDecimal methods.&lt;/p&gt;

&lt;p&gt;It also uncomments the tests in ParameterMappingTest#testDerby5533UpdateXXX that had to be disabled due to this error. Or more precisely: the tests are uncommented for the embedded case. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5534&quot; title=&quot;ResultSet#updateFloat, #updateDouble do not check for NaN and other conditions on client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5534&quot;&gt;DERBY-5534&lt;/a&gt; still makes it necessary to skip them for the client driver case.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="13173249" author="knutanders" created="Tue, 20 Dec 2011 15:29:31 +0000"  >&lt;p&gt;I think the suggested changes are fine. Could the underflow check be factored out to a shared helper method?&lt;/p&gt;

&lt;p&gt;I haven&apos;t tested, but I suspect the API comment about loss of precision in BigDecimal.floatValue() also refers to numbers like 1.00000(...)00001 being truncated to 1. Does/should updateBigDecimal() fail in that case too?&lt;/p&gt;</comment>
                            <comment id="13173316" author="dagw" created="Tue, 20 Dec 2011 17:16:05 +0000"  >&lt;p&gt;I agree about your interpretation of the API comment about precision loss. I took my cues from the current way this is current handled, cf. the code in SQLReal#setDouble:&lt;/p&gt;

&lt;p&gt;   float fv = (float) theValue;&lt;/p&gt;

&lt;p&gt;   // detect rounding taking place at cast time&lt;br/&gt;
   if (fv == 0.0f &amp;amp;&amp;amp; theValue != 0.0d) &lt;/p&gt;
{
      throw StandardException.newException(
          SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, TypeId.REAL_NAME);
   }

&lt;p&gt;This is indeed (only) a special case of precision loss. I haven&apos;t found any definitions about what should happen in the JDBC standard, so I guess it&apos;s implementation defined. With my patch the behavior is more consistent. We could also signal other forms of precision loss, like the one you show, or we could stop throwing on the above also. What do you think?&lt;/p&gt;</comment>
                            <comment id="13173321" author="dagw" created="Tue, 20 Dec 2011 17:21:01 +0000"  >&lt;p&gt;Regressions passed.&lt;/p&gt;</comment>
                            <comment id="13174155" author="knutanders" created="Wed, 21 Dec 2011 15:46:19 +0000"  >&lt;p&gt;I guess we could see what happens when updateDouble() is used on an INTEGER column and use that for guidance. For example, what happens when trying to update to:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;1.1 (does it fail or set the value to 1?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;0.1 - analogous to the underflow case&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And also, what happens with updateLong(1, Long.MAX_VALUE) on a REAL column? (I think it loses precision, but does it fail?)&lt;/p&gt;</comment>
                            <comment id="13174212" author="dagw" created="Wed, 21 Dec 2011 16:59:55 +0000"  >&lt;p&gt;Embedded uses Math.floor on the double/float value supplied to updateDouble, no error is given in either 1.1 or 0.1 case.&lt;br/&gt;
In the case of updateLong(1, Long.MAX_VALUE) on a REAL column, Derby also loses precision with no error. Embedded just&lt;br/&gt;
assigns the long directly to a float value. So it seems we mostly ignore precision loss. &lt;/p&gt;

&lt;p&gt;On the other hand, for SQL REAL/DOUBLE &quot;*&quot; and &quot;/&quot;, we do give error under underflow to zero, e.g in SQLDouble#times, so the picture is mixed..&lt;/p&gt;</comment>
                            <comment id="13174681" author="knutanders" created="Thu, 22 Dec 2011 08:13:25 +0000"  >&lt;p&gt;Thanks for running these experiments, Dag. It&apos;s an interesting find that embedded uses Math.floor() for the conversion in updateDouble(). That means -0.1 gets converted to -1 on embedded, whereas it&apos;s converted to 0 on the client. The conversion on the client sounds more intuitive to me in this case.&lt;/p&gt;

&lt;p&gt;When using PreparedStatement.setDouble() on an INT column, both drivers agree that -0.1 should be converted to -1 (probably because the client sends it as a floating point value across the wire and lets the server do the conversion).&lt;/p&gt;

&lt;p&gt;However, when invoking ResultSet.getInt() on a REAL column, both drivers convert -0.1 to 0. And CAST(-0.1 AS INT) also evaluates to 0.&lt;/p&gt;</comment>
                            <comment id="13175668" author="dagw" created="Sat, 24 Dec 2011 05:21:40 +0000"  >&lt;p&gt;Yes, I would agree  that the converting -0.1 to -1 looks weird. &lt;/p&gt;</comment>
                            <comment id="13192182" author="dagw" created="Tue, 24 Jan 2012 14:37:25 +0000"  >&lt;p&gt;I have asked the JDBC expert group advice on this one. I&apos;ll put this issue on hold until I hear back, unmarking &quot;patch available&quot;.&lt;/p&gt;</comment>
                            <comment id="13570917" author="dagw" created="Tue, 5 Feb 2013 03:33:58 +0000"  >&lt;p&gt;Talked to Lance. We should follow the advice in the JDBC specification on this &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, when writing to a data source, throw DataTruncation if information is lost/truncated. On reading from a data source, report (not throw) DataTruncation (a SQLWarning subclass). In this case, since we are updating a column, we should throw.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; JDBC 4.1 specification section 8.3 DataTruncation &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/jdbc-4_1-mrel-spec/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.oracle.com/otndocs/jcp/jdbc-4_1-mrel-spec/index.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13572136" author="dagw" created="Wed, 6 Feb 2013 04:19:44 +0000"  >&lt;p&gt;Hmm, no I am no longer so sure that DataTruncation is applicable here: Cf. the below analysis.&lt;/p&gt;

&lt;p&gt;SQL 2011 4.4.2 Characteristics of numbers&lt;/p&gt;

&lt;p&gt;&quot;A number is assignable only to sites of numeric type. If an assignment of some number would result in a loss of its most significant digit, an exception condition is raised. If least significant digits are lost, implementation defined rounding or truncating occurs, with no exception condition being raised.&quot;&lt;/p&gt;

&lt;p&gt;The SQL state DATA_EXCEPTION_STRING_DATA_RIGHT_TRUNCATION (22001) would seem &lt;b&gt;not&lt;/b&gt; to fit.&lt;br/&gt;
The SQL state WARNING_STRING_DATA_RIGHT_TRUNCATION_WARNING (01004) would seem &lt;b&gt;not&lt;/b&gt; to fit.&lt;/p&gt;

&lt;p&gt;The SQL state DATA_EXCEPTION_ERROR_IN_ASSIGNMENT (22005) and others&lt;br/&gt;
e.g. DATA_EXCEPTION_NUMERIC_VALUE_OUT_OF_RANGE (22003) would seem to&lt;br/&gt;
fit.&lt;/p&gt;


&lt;p&gt;JDBC specification 4.1 (quote)&lt;/p&gt;

&lt;p&gt;&quot;The DataTruncation class,&lt;br/&gt;
------------------------&lt;br/&gt;
a sub-class of SQLWarning, provides information when data is truncated. When data truncation occurs on a write to the data source, a DataTruncation object is thrown. The data value that has been truncated may have been written to the data source even if a warning has been generated. When data truncation occurs on a read from the data source, a SQLWarning is reported.  A DataTruncation object contains the following information:&lt;/p&gt;

&lt;p&gt;:&lt;br/&gt;
&#9632; the SQLState &quot;01004&quot; when data truncation occurs on a read from the data source&lt;br/&gt;
&#9632; the SQLState &quot;22001&quot; when data truncation occurs on a write to the data source&lt;br/&gt;
:&lt;/p&gt;

&lt;p&gt;The SQLDataException class&lt;br/&gt;
--------------------------&lt;br/&gt;
Table 8-1 specifies which NonTransientSQLException subclass must be thrown for a a given SQLState class value:&lt;/p&gt;

&lt;p&gt;--------------------------------------&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 22___      &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;   SQLDataException    !&lt;br/&gt;
--------------------------------------&lt;br/&gt;
&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Aside: this would seem to conflict the instructions earlier under DataTruncation to throw the class for 22001, but let&amp;#39;s assume the instruction to use DataTruncation overrides this one... &amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Also: SQLDataException can be thrown for vendor specific reasons.&lt;/p&gt;

&lt;p&gt;Note that both DataTruncation and SQLDataException are tied to SQL state 22___. The former is a SQLWarning, the latter is a full SQLException.&lt;/p&gt;

&lt;p&gt;So, agaian, for what subcodes of 22___ should one use DataTruncation or SQLDataException?  The SQL standard itself specifies many 22___ states, all of which have the name prefix &quot;DATA_EXCEPTION&quot;.&lt;/p&gt;

&lt;p&gt;For 22001, which JDBC ties to DataTruncation, the SQL name is&lt;br/&gt;
DATA_EXCEPTION_STRING_DATA_RIGHT_TRUNCATION.&lt;br/&gt;
For 01004 which JDBC ties to DataTruncation, the SQL name is&lt;br/&gt;
WARNING_STRING_DATA_RIGHT_TRUNCATION_WARNING.&lt;/p&gt;

&lt;p&gt;So this all leads me to wonder whether DataTruncation should only be used for string types (thrown or reported as the case may be), and numeric types should throw SQLDataException (if most significant digits can&apos;t be preserved), or be silent if rounding/truncation of least significant digits occur.&lt;/p&gt;






</comment>
                            <comment id="13572336" author="dagw" created="Wed, 6 Feb 2013 11:03:44 +0000"  >&lt;p&gt;Refreshed patch uploaded (#2). No significant changes, just works with latest trunk.&lt;/p&gt;</comment>
                            <comment id="13576301" author="dagw" created="Tue, 12 Feb 2013 02:19:46 +0000"  >&lt;p&gt;I&apos;m satisfied that using SQLDataException is the right thing to do here. Unless I hear dissenting opinion, I will commit this fix shortly.&lt;/p&gt;
</comment>
                            <comment id="13576671" author="knutanders" created="Tue, 12 Feb 2013 15:12:42 +0000"  >&lt;p&gt;I&apos;m fine with the proposed changes. Maybe we should add a release note to give the users a heads up about this change?&lt;/p&gt;</comment>
                            <comment id="13577382" author="dagw" created="Wed, 13 Feb 2013 07:07:12 +0000"  >&lt;p&gt;Yes, I think we should, although it&apos;s a corner case it &lt;b&gt;could&lt;/b&gt; trip some users seeing this as a feature, not a bug, if they are even aware of it.&lt;/p&gt;</comment>
                            <comment id="13581057" author="dagw" created="Tue, 19 Feb 2013 06:48:12 +0000"  >&lt;p&gt;Added a release note to this issue.&lt;/p&gt;</comment>
                            <comment id="13581151" author="knutanders" created="Tue, 19 Feb 2013 09:27:05 +0000"  >&lt;p&gt;Patch and release note look good to me. +1&lt;/p&gt;</comment>
                            <comment id="13581934" author="dagw" created="Wed, 20 Feb 2013 04:23:24 +0000"  >&lt;p&gt;Committed patch as svn 1447996, resolving.&lt;/p&gt;</comment>
                            <comment id="13581938" author="dagw" created="Wed, 20 Feb 2013 04:37:53 +0000"  >&lt;p&gt;This patch could be backported if desired, but closing now. Please reopen to backport.&lt;/p&gt;</comment>
                            <comment id="13731512" author="mamtas" created="Wed, 7 Aug 2013 01:56:57 +0100"  >&lt;p&gt;I will work on backporting this issue&lt;/p&gt;</comment>
                            <comment id="13731679" author="jira-bot" created="Wed, 7 Aug 2013 07:00:10 +0100"  >&lt;p&gt;Commit 1511185 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/branches/10.9&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1511185&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1511185&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5546&quot; title=&quot;ResultSet#updateBigDecimal on a REAL column does not do underflow checking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5546&quot;&gt;&lt;del&gt;DERBY-5546&lt;/del&gt;&lt;/a&gt;(ResultSet#updateBigDecimal on a REAL column does not do underflow checking)&lt;/p&gt;

&lt;p&gt;Backporting to 10.9&lt;/p&gt;

&lt;p&gt;Fix provided by Dag Wanvik&lt;/p&gt;</comment>
                            <comment id="13733657" author="mamtas" created="Thu, 8 Aug 2013 17:35:23 +0100"  >&lt;p&gt;The fix for this jira uses BigDecimal.ZERO which was introduced in jdk 1.5 and hence it doesn&apos;t compile on 10.8 which used jdk 1.4. I will mark the jira as 10.8 backport reject.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12534895">DERBY-5534</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12534820">DERBY-5533</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12507713" name="MissingUnderflowCheck.java" size="1951" author="dagw" created="Fri, 16 Dec 2011 18:09:09 +0000"/>
                            <attachment id="12568207" name="derby-5546-2.diff" size="4713" author="dagw" created="Wed, 6 Feb 2013 11:03:44 +0000"/>
                            <attachment id="12568208" name="derby-5546-2.stat" size="223" author="dagw" created="Wed, 6 Feb 2013 11:03:44 +0000"/>
                            <attachment id="12507982" name="derby-5546.diff" size="5924" author="dagw" created="Mon, 19 Dec 2011 22:05:19 +0000"/>
                            <attachment id="12507983" name="derby-5546.stat" size="223" author="dagw" created="Mon, 19 Dec 2011 22:05:19 +0000"/>
                            <attachment id="12570070" name="releaseNote.html" size="4202" author="dagw" created="Wed, 20 Feb 2013 04:21:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10364"><![CDATA[Data corruption]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Dec 2011 15:29:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>221173</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cxb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35912</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>