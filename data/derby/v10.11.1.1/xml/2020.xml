<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:35:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2020/DERBY-2020.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2020] Change file option for syncing log file to disk from rws to rwd</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2020</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;For writing the transaction log to disk Derby uses a&lt;br/&gt;
RandomAccessFile. If it is supported by the JVM, the log files are&lt;br/&gt;
opened in &quot;rws&quot; mode making the file system take care of syncing&lt;br/&gt;
writes to disk. &quot;rws&quot; mode will ensure that both the data and the file&lt;br/&gt;
meta-data is updated for every write to the file. On some operating&lt;br/&gt;
systems (e.g. Solaris) this leads to two write operation to the disk&lt;br/&gt;
for every write issued by Derby. This is limiting the throughput of&lt;br/&gt;
update intensive applications.  If we could change the file mode to&lt;br/&gt;
&quot;rwd&quot; this could reduce the number of updates to the disk.&lt;/p&gt;

&lt;p&gt;I have run some simple tests where I have changed mode from &quot;rws&quot; to&lt;br/&gt;
&quot;rwd&quot; for the Derby log file. When running a small numbers of&lt;br/&gt;
concurrent client threads the throughput is almost doubled and the&lt;br/&gt;
response time is almost halved. I will attach some graphs that show&lt;br/&gt;
this when running a given number of concurrent &quot;tpc-b&quot; like clients. These&lt;br/&gt;
graphs show the throughput when running with &quot;rws&quot; and &quot;rwd&quot; mode when the&lt;br/&gt;
disk&apos;s write cache has been enabled and disabled.&lt;/p&gt;

&lt;p&gt;I am creating this Jira to have a place where we can collect&lt;br/&gt;
information about issues both for and against changing the default&lt;br/&gt;
mode for writing to log files.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12354349">DERBY-2020</key>
            <summary>Change file option for syncing log file to disk from rws to rwd</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="olav">Olav Sandstaa</assignee>
                                    <reporter username="olav">Olav Sandstaa</reporter>
                        <labels>
                    </labels>
                <created>Tue, 31 Oct 2006 10:11:20 +0000</created>
                <updated>Tue, 30 Jun 2009 17:12:54 +0100</updated>
                            <resolved>Mon, 2 Jul 2007 22:08:13 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12445861" author="olav" created="Tue, 31 Oct 2006 10:22:50 +0000"  >&lt;p&gt;These graphs shows the throughput when running a specified numbers of clients each running &quot;tpc-b&quot; like transaction (3 updates, 1 insert, 1 select) against Derby. Each graphs contains the throughput number when the log files are opened with &quot;rws&quot; and &quot;rwd&quot;. The first graph is run on a system where the disk&apos;s write cache has been disabled. In the second graph the disk&apos;s write cache has been enabled.&lt;/p&gt;

&lt;p&gt;The graphs are produced on dual AMD Opteron machine running Solaris 10 and Sun JDK 1.5. &lt;/p&gt;</comment>
                            <comment id="12445865" author="olav" created="Tue, 31 Oct 2006 10:29:51 +0000"  >&lt;p&gt;A discussion related to this issue has taken place in the following mail thread:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Options-for-syncing-of-log-to-disk-tf2188615.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Options-for-syncing-of-log-to-disk-tf2188615.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12445922" author="djd" created="Tue, 31 Oct 2006 15:31:45 +0000"  >&lt;p&gt;I think it&apos;s important to get some resolution of the specified behaviour of rwd &amp;amp; rws in the Java specifications. Investiating the various OSes is interesting but Derby is written against the Java specs. Maybe a bug could be entered at Sun?&lt;/p&gt;</comment>
                            <comment id="12446971" author="olav" created="Fri, 3 Nov 2006 14:34:57 +0000"  >&lt;p&gt;I agree that it would be good to get a clarification of this into the specification. I will try to discuss this with someone working in Sun&apos;s Java team and possibly enter a bug or a request for improvement for this. Still, I think it is good to have some data from different OSes on how this affect the performance in order to decide if this is worth the effort to try to change how the log is written.&lt;/p&gt;</comment>
                            <comment id="12447027" author="mikem" created="Fri, 3 Nov 2006 17:41:54 +0000"  >&lt;p&gt;I am also uncomfortable making this change across all jvm/OS without some better contract from the java spec on what&lt;br/&gt;
exactly the options mean.  The current option was picked as it seemed &quot;safest&quot; way to guarantee log write to disk.  On some OS&apos;s using the RWS flag results in only a single I/O per write to a preallocated log file.  The key&lt;br/&gt;
issue is what is &quot;metadata&quot;.  Is it timestamps for modify times in which case derby does not care, or is it data about file&lt;br/&gt;
allocation which if not synced may render recovery of the log file after a system crash inconsistent after derby thinks it has&lt;br/&gt;
guaranteed I/O to disk.&lt;/p&gt;</comment>
                            <comment id="12453585" author="olav" created="Mon, 27 Nov 2006 13:06:17 +0000"  >&lt;p&gt;This patch changes the sync mode of the log files from &quot;rws&quot; to &quot;rwd&quot;.&lt;/p&gt;

&lt;p&gt;The purpose is to let other people test this change out to see if it has any impact on performance or any issues with regards to recoverability after failure. The patch is NOT intended for inclusion in Derby (yet).&lt;/p&gt;</comment>
                            <comment id="12480050" author="olav" created="Mon, 12 Mar 2007 11:19:21 +0000"  >&lt;p&gt;I have discussed this change with someone working on this part of Java&lt;br/&gt;
within Sun. The feedback I have received is that the following text in&lt;br/&gt;
the JavaDoc for the RandomAccessFile constructor (see&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html):&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/io/RandomAccessFile.html):&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  &quot;If the file resides on a local storage device then when an&lt;br/&gt;
  invocation of a method of this class returns it is guaranteed that&lt;br/&gt;
  all changes made to the file by that invocation will have been&lt;br/&gt;
  written to that device. This is useful for ensuring that critical&lt;br/&gt;
  information is not lost in the event of a system crash. If the file&lt;br/&gt;
  does not reside on a local device then no such guarantee is made.&quot;&lt;/p&gt;

&lt;p&gt;applies to both &quot;rws&quot; and &quot;rwd&quot; mode (as the text says). So with&lt;br/&gt;
regards to the content of the file and the possibility to read the&lt;br/&gt;
data from the file after a system crash, these two options should have&lt;br/&gt;
identical behavior and give identical guarantees. The only&lt;br/&gt;
optimizations that &quot;rwd&quot; is allowed to do is to not update meta-data&lt;br/&gt;
that are not critical for reading the file data. If data that has been&lt;br/&gt;
appended to a file is lost in a crash, the &quot;critical information is&lt;br/&gt;
not lost&quot; requirement is broken, and the implementation is&lt;br/&gt;
non-conforming to the spec.&lt;/p&gt;

&lt;p&gt;This change gives a large performance benefit on some operating&lt;br/&gt;
systems. As far as I can see, this should be a safe change to Derby and&lt;br/&gt;
I propose this patch being reviewed and committed.&lt;/p&gt;

&lt;p&gt;I have run derbyall and the JUnit test suite, and as expected I did&lt;br/&gt;
not see any problems. &lt;/p&gt;</comment>
                            <comment id="12480090" author="knutanders" created="Mon, 12 Mar 2007 13:45:36 +0000"  >&lt;p&gt;Thanks for investigating this issue, Olav. It is my understanding too that the javadoc in RandomAccessFile gives the needed guarantee.&lt;/p&gt;

&lt;p&gt;Some comments to the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;LogToFile mentions rws in some comments (for instance, &quot;reopen the file in rws mode&quot;). Should they be updated?&lt;/li&gt;
	&lt;li&gt;openLogFileInWriteMode() has a workaround for a JVM bug when opening in rws mode (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1&quot; title=&quot;Can&amp;#39;t create a new db on OS X&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1&quot;&gt;&lt;del&gt;DERBY-1&lt;/del&gt;&lt;/a&gt;). The exception it catches is only thrown for rws, but the JVMs with this bug also have a buggy rwd implementation. The bug in rwd only manifests itself by not syncing, so the workaround won&apos;t work anymore (Derby will appear to work, and even be extremely fast on updates, but the database might not be recoverable after a crash). If we change the file mode to rwd, I think we have to update the workaround so that it still detects the JVM bug. Perhaps we could detect it by opening a file in rws mode when booting the database, and if it throws FileNotFoundException we enable the workaround?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12480411" author="olav" created="Tue, 13 Mar 2007 14:35:25 +0000"  >&lt;p&gt;Thanks for the comments, Knut Anders. I will go through the comments and update the references to &quot;rws&quot;.&lt;/p&gt;

&lt;p&gt;As for a solution to the JVM bug in some VMs on MAC, I was not aware&lt;br/&gt;
about the difference in how this bug(s) manifested itself when opening&lt;br/&gt;
in rws and rwd mode. I have read to comments in the workaround and in&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1&quot; title=&quot;Can&amp;#39;t create a new db on OS X&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1&quot;&gt;&lt;del&gt;DERBY-1&lt;/del&gt;&lt;/a&gt;. If I understand it correctly we need at least open a file&lt;br/&gt;
once in rws mode in order to decide if we have this bug. Right now&lt;br/&gt;
this is done the first time LogToFile.openLogFileInWriteMode() is&lt;br/&gt;
called. I want to change this to always use rwd instead of rws, but&lt;br/&gt;
this will not detect this problem. Some possible solutions could be:&lt;/p&gt;

&lt;p&gt;1. The first time LogToFile.openLogFileInWriteMode() is called, try to&lt;br/&gt;
   open the file in rws mode to see if we get the exception. If no&lt;br/&gt;
   exception is thrown, re-open the file in rwd mode. If an exception&lt;br/&gt;
   is thrown revert to use rw mode.&lt;/p&gt;

&lt;p&gt;2. Move this check to DirStorageFactory4.supportsRws(). Today, this&lt;br/&gt;
   function will return true for all JVMs 1.4.2 or newer. I think it&lt;br/&gt;
   might be more logical to have a check in this method to determine&lt;br/&gt;
   if there are any issues that should prevent us from using rws or&lt;br/&gt;
   rwd. For instance, the first time this method was called we could:&lt;/p&gt;

&lt;p&gt;     1. Create a file in Derby&apos;s tmp directory using &quot;rw&quot; mode.&lt;br/&gt;
     2. Close it.&lt;br/&gt;
     3. Reopen the file in rws mode.&lt;br/&gt;
     4. If an exception is thrown, then make the method return false&lt;br/&gt;
        (ie. this JVM does not support rws/rwd).&lt;/p&gt;

&lt;p&gt;I think alternative 2 is a cleaner approach. Since I do not have a&lt;br/&gt;
machine running Mac OS I will have no way to actually test that this&lt;br/&gt;
works. I will make a patch for it hoping that someone will test it&lt;br/&gt;
out.&lt;/p&gt;</comment>
                            <comment id="12480432" author="knutanders" created="Tue, 13 Mar 2007 15:17:06 +0000"  >&lt;p&gt;I agree that alternative 2 sounds best.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to explain the details of the JVM bug as I understood it after logging it as a bug against FreeBSD&apos;s Java (&lt;a href=&quot;http://www.freebsd.org/cgi/query-pr.cgi?pr=java/102888&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.freebsd.org/cgi/query-pr.cgi?pr=java/102888&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If the JVM is compiled on a system which has not defined both O_SYNC and O_DSYNC (which is the case for FreeBSD, and probably also other BSDs like Mac OS X), the JVM sources define O_SYNC as 0x0800 and O_DSYNC as 0x2000. As far as I know, the bit in 0x2000 has no meaning to the open() system call in BSD, so &quot;rwd&quot; mode will be identical to &quot;rw&quot; mode. However, 0x0800 is identical to the value of O_EXCL, which means &quot;error if create and file exists&quot;. Therefore, &quot;rws&quot; mode is interpreted as &quot;open in rw mode and fail if the file exists&quot;.&lt;/p&gt;

&lt;p&gt;So to detect the JVM bug, you would have to&lt;br/&gt;
  1) Create a file (for instance with File.createFile() or File.createTempFile()).&lt;br/&gt;
  2) Open that file in rws mode and see if you get a FileNotFoundException.&lt;/p&gt;</comment>
                            <comment id="12480506" author="mikem" created="Tue, 13 Mar 2007 18:14:37 +0000"  >&lt;p&gt;I have been convinced by Olav&apos;s recent posting that  it is ok to use rwd - I won&apos;t block this change, though I continue to think that the wording in the spec could be better.  I agree that is likely on most if not all JVM&apos;s where we are doing the extra I/O in rws &lt;br/&gt;
mode that it is unnecessary synchronous I/O.  It does make me slightly uneasy that we are changing this mode for no reason on  some jvm&apos;s for no performance benefit (ie. on windows machines we didn&apos;t see any performance difference between the &lt;br/&gt;
two modes so choose the safer mode).&lt;/p&gt;

&lt;p&gt; I do think we should make sure 10.3 documentation reflects this change in behavior as I still think the wording of the JVM spec is inexact.  I think we should document somewhere exactly  what we are expecting from the JVM interfaces to guarantee a recoverable DB.  We have to answer this question enough when explaining why we go slower than other DB&apos;s that don&apos;t sync at all, we might as well be able to point to the documentation and to a release note for this change.&lt;/p&gt;

&lt;p&gt;On the MAC/FreeBSD issue, I am not sure we should go out of our way to recognize the problem.  The previous workaround was put in because it came for &quot;free&quot;, ie. did not penalize all the JVM&apos;s for buggy implementations - and the system would not&lt;br/&gt;
even boot without the workaround.  If after this change the db&lt;br/&gt;
boots on these buggy JVM&apos;s but does not sync properly - I am not sure it is worth fixing.  This is not much different than today&apos;s situation where you boot derby on a  machine where you have the &quot;write-sync&quot; option disabled on the device (a default setting on many configurations).    Best would be if we could code a solution that only caused extra work on the buggy JVM&apos;s.  &lt;/p&gt;</comment>
                            <comment id="12480516" author="tsuresh" created="Tue, 13 Mar 2007 18:39:49 +0000"  >&lt;p&gt;Olav, &lt;/p&gt;

&lt;p&gt;Thanks for finding  more details about rws/rwd. &lt;/p&gt;

&lt;p&gt;1) I would avoid using a temp file to check if rws/rwd is correctly  &lt;br/&gt;
working or not. On some OS , temp files use a differ file system. &lt;br/&gt;
Derby can be configured to use a different temp directory than the default&lt;br/&gt;
location, which can potentially be on a different file system.&lt;/p&gt;

&lt;p&gt;I belive the check should be on log directory , where the log actually &lt;br/&gt;
will be stored.&lt;/p&gt;


&lt;p&gt;2) If you use &quot;rwd&quot; to open a file and crash while appending. &lt;br/&gt;
On recovery  does it give correct length of the file ? &lt;/p&gt;</comment>
                            <comment id="12482754" author="olav" created="Wed, 21 Mar 2007 13:27:54 +0000"  >&lt;p&gt;Suresh and Mike, &lt;/p&gt;

&lt;p&gt;Thanks for the comments. &lt;/p&gt;

&lt;p&gt;I agree that Derby should not have to do extra work to handle&lt;br/&gt;
something that is a JVM bug. Still, since there already is code to&lt;br/&gt;
handle this situation I think it is worth to maintain this&lt;br/&gt;
functionality given that it does not affect the normal operation of&lt;br/&gt;
Derby. And I think Derby running with &quot;rwd&quot; mode for these bug vms&lt;br/&gt;
that do not sync is much more likely to result in a non-recoverable&lt;br/&gt;
database when running on a disk that has the write cache enabled. With&lt;br/&gt;
the write cache enabled on the disk, the data will in most situations&lt;br/&gt;
be written to disk even when there is a system crash or power failure&lt;br/&gt;
(but with no guarantee). With the data only being written to the file&lt;br/&gt;
system cache and no syncing to disk there is a much longer time period&lt;br/&gt;
where you do not have the log synced to disk. &lt;/p&gt;

&lt;p&gt;I will make a proposal for a fix for how to handle this JVM bug based&lt;br/&gt;
on opening a file on the log device (I agree with Suresh that using&lt;br/&gt;
the tmp device is not a good idea).&lt;/p&gt;

&lt;p&gt;To answer Suresh&apos;s second question. Yes, after crash that occurs&lt;br/&gt;
while updating a file in &quot;rwd&quot; mode everything that is related to&lt;br/&gt;
the content of the file and being able to read the file must be&lt;br/&gt;
updated on disk. This should include the length of the file.&lt;/p&gt;
</comment>
                            <comment id="12482851" author="olav" created="Wed, 21 Mar 2007 17:46:49 +0000"  >&lt;p&gt;This patch (jvmsyncbug.diff) is a proposal for how we can handle the JVM bug that have been reported for some JVMs on Mac OS and FreeBSD. The main change is to handle this bug as part of the &quot;error handling&quot; after failing to open a log file in &quot;rws&quot; mode to explicitely checking if this error is present. The purpose of this change is to be able to handle problems when the log file is opened in &quot;rws&quot; and &quot;rwd&quot; mode (the current code in Derby only handles failures for the &quot;rws&quot; mode).&lt;/p&gt;

&lt;p&gt;The patch do the following during booting of Derby&apos;s logging module to detect if the JVM bug is present&lt;/p&gt;

&lt;p&gt;  1. Creates a file in the log directory using &quot;rw&quot; mode - this should succeed on all JVMs&lt;/p&gt;

&lt;p&gt;  2. Re-opens the same file using &quot;rws&quot; mode. If this operation failes, the JVM bug is present. An error message is written to the derby log file (not THE LOG but derby.log).&lt;/p&gt;

&lt;p&gt;If the JVM bug is present, Derby changes from using synchronized writes for the log to use normal writes followed by an explicite sync. The patch also removes the current code for handling this problem.&lt;/p&gt;

&lt;p&gt;The patch does NOT include the proposed change from using &quot;rws&quot; to &quot;rwd&quot; mode.&lt;/p&gt;

&lt;p&gt;I do not have strong opinions about whether Derby should handle this JVM bug or not. I have run derbyall and the JUnit test suite on JDK 5 on Solaris 10. I have not run it with any of the JVMs with the reported JVM bug (I do no longer have a FreeBSD machine - and I have never had a Mac). &lt;/p&gt;

&lt;p&gt;Feel free to review and commit the patch if you think this is a good thing to have in Derby. If you think this code for handling a JVM specific error should not be in the code please say so.&lt;/p&gt;</comment>
                            <comment id="12483911" author="knutanders" created="Sun, 25 Mar 2007 08:14:18 +0100"  >&lt;p&gt;Hi Olav,&lt;/p&gt;

&lt;p&gt;I think your approach of moving the checking into a separate method run on boot is good. However, I see two problems with checkJvmSyncError().&lt;/p&gt;

&lt;p&gt;  1) By opening the temporary file in rw mode first, you will make sure it exists. When the file exists, opening it in rws mode doesn&apos;t fail, so the bug will go undetected.&lt;br/&gt;
  2) When opening the temp file in rws mode, you check for IOException. The bug will always cause a FileNotFoundException, so it&apos;s better to check for that exact exception so that other (unexpected) IOExceptions are not swallowed/misinterpreted.&lt;/p&gt;</comment>
                            <comment id="12483953" author="knutanders" created="Sun, 25 Mar 2007 16:57:33 +0100"  >&lt;p&gt;Sorry, I was too quick in my previous comment. #1 is not an issue. You&apos;re of course right, the file must be created first in order to get the exception. But I think the issue raised in #2 is valid.&lt;/p&gt;</comment>
                            <comment id="12483962" author="olav" created="Sun, 25 Mar 2007 19:03:36 +0100"  >&lt;p&gt;Hi Knut Anders,&lt;/p&gt;

&lt;p&gt;Thanks for the review comments - and thanks for changing your mind about your first comment - given that I do not have any way to verify this I would happily have made any changes you suggested &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;I agree with your second comment and will post an updated patch.&lt;/p&gt;</comment>
                            <comment id="12484109" author="olav" created="Mon, 26 Mar 2007 12:47:11 +0100"  >&lt;p&gt;Updated patch for how to detect &quot;JVM bug for rws/rwd mode&quot; (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1&quot; title=&quot;Can&amp;#39;t create a new db on OS X&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1&quot;&gt;&lt;del&gt;DERBY-1&lt;/del&gt;&lt;/a&gt;) based on the second comment from Knut Anders. The only change to in this version of the patch is that it now only catches the FileNotFoundException instead of catching all IOExpections.&lt;/p&gt;

&lt;p&gt;I have run derbyall and the JUnit suite without any errors with JDK5 on Solaris 10. &lt;/p&gt;</comment>
                            <comment id="12486434" author="tsuresh" created="Tue, 3 Apr 2007 18:40:20 +0100"  >&lt;p&gt;Thanks  for working on this issue Olav. your latest patch jvmsyncbug_v2.diff&lt;br/&gt;
looks good. couple of minor comments:&lt;/p&gt;

&lt;p&gt;1) One thing that puzzled me is why are you creating a new &lt;br/&gt;
file &quot;rwtest.tmp&quot; ? why can not the test be done on the current log file &lt;br/&gt;
itself,  by opening the log file in &quot;rws&quot; mode and then closing, before&lt;br/&gt;
it is opened in the  appropriate mode. That way you can avoid a creating a&lt;br/&gt;
new file and deleting it. &lt;/p&gt;

&lt;p&gt;2) &lt;br/&gt;
And Also, there are these weird read only db state scenarios. For example &lt;br/&gt;
if you attempt to create a file when the db is made read readonly by putting it&lt;br/&gt;
in a jar, derby is ok as long as there are no transactions pending. If there &lt;br/&gt;
any pending transaction we may not catch it any more, because jvmsyncError() method &lt;br/&gt;
attempting to create a &quot;rwtest.tmp&quot; file very early, it may fail immediately on&lt;br/&gt;
log factory boot and decide all is well to treat the database as READONLY. But&lt;br/&gt;
it will be a inconsistent one. &lt;/p&gt;

&lt;p&gt;I think derby tests suites  has a readonly test, but i am not sure it covers pending&lt;br/&gt;
transaction error case. &lt;/p&gt;
</comment>
                            <comment id="12489241" author="olav" created="Mon, 16 Apr 2007 22:38:35 +0100"  >&lt;p&gt;Thanks for comments, Suresh. &lt;/p&gt;

&lt;p&gt;1) The reason for creating a new file &quot;rwstest.tmp&quot; was due to I wanted to be able to have this check done early and in a single place during the boot of the log system. At the place I decided to add the test the boot code does not know the name of the first log file and a log file does not even have to exist at that time. I did not want to have to scan the log directory to be able to find an existing log file that could be used for testing. &lt;/p&gt;

&lt;p&gt;2) I think your comment about read only databases are very valid. By reading the code it seems like my new code could end up throwing exceptions that would not be handled properly and lead to failed start-ups for read-only databases.&lt;/p&gt;

&lt;p&gt;I will address both of these issues by moving the testing for this JVM bug into the method LogToFile.openLogFileInWriteMode(). At this point Derby both know the name of the log file to be opened first and this code will not be called for the readonly db cases. The only &quot;drawback&quot; by having this code in this method is that there will be need for some extra logic to ensure that this check is only run once.&lt;/p&gt;</comment>
                            <comment id="12489246" author="olav" created="Mon, 16 Apr 2007 23:00:42 +0100"  >&lt;p&gt;This patch includes changes based on comments from Suresh. The check for the JVM bug is now done in openLogFileInWriteMode. The test will be done on the log file that is going to be used. The check does first open the file in &quot;rw&quot; mode to ensure that the file exists and then re-opens it in &quot;rws&quot; mode. If a FileNotFoundExceptions is thrown, Derby will switch from using &quot;write sync&quot; mode to doing explicite syncing. The test is only done once when the first log file is opened in rws mode.&lt;/p&gt;

&lt;p&gt;This patch does no change to the rws mode used by the log file writing.&lt;/p&gt;

&lt;p&gt;I have run derbyall and the JUnit suite with no errors on Solaris 10. The patch is ready for review and commit.&lt;/p&gt;</comment>
                            <comment id="12490361" author="knutanders" created="Fri, 20 Apr 2007 14:50:42 +0100"  >&lt;p&gt;Thanks Olav! I committed jvmsyncbug_v3.diff with revision 530807.&lt;/p&gt;

&lt;p&gt;I ran derbyall and suites.All successfully on Solaris 10 and verified manually that the patch didn&apos;t cause problems for read-only databases.&lt;br/&gt;
I also logged on to people.apache.org (which happens to run FreeBSD and a buggy 1.5 JVM) where I created a database and ran some simple queries with ij. No problems there, and derby.log showed this message which confirmed that the workaround had been triggered:&lt;/p&gt;

&lt;p&gt;------------  BEGIN ERROR MESSAGE -------------&lt;/p&gt;

&lt;p&gt;LogToFile.checkJvmSyncError: Your JVM seems to have a problem with implicit syncing of log files. Will use explicit syncing instead.&lt;br/&gt;
------------  END ERROR MESSAGE -------------&lt;/p&gt;</comment>
                            <comment id="12490368" author="olav" created="Fri, 20 Apr 2007 15:13:03 +0100"  >&lt;p&gt;Knut Anders, thanks for committing the patch and particularly for running a test on a buggy JVM to verify that the the buq was detected and that the workaround was triggered.&lt;/p&gt;

&lt;p&gt;I will submit a new patch shortly which do the changing of mode for opening of log files.&lt;/p&gt;</comment>
                            <comment id="12491013" author="tsuresh" created="Mon, 23 Apr 2007 19:15:24 +0100"  >&lt;p&gt;Thanks for addressing my comments , Olav.  The latest patch looks good. &lt;/p&gt;</comment>
                            <comment id="12491611" author="olav" created="Wed, 25 Apr 2007 12:35:20 +0100"  >&lt;p&gt;This patch (rwd_pre.diff) contains changes in comments and a method name that could be committed independently and in advance of the actual change of file mode for log files. The main changes are:&lt;/p&gt;

&lt;p&gt;  1. Rename the method called supportsRws() to supportWriteSync() in WritableStorageFactory and all of its implementation.&lt;/p&gt;

&lt;p&gt;  2. Fixed code comments referring to &quot;rws&quot; to also include &quot;rwd&quot; so that the comments also will be valid if rwd is used.&lt;/p&gt;

&lt;p&gt;The patch does not include any functional changes. The purpose of submitting this separately is to keep the size of the actual patch that changes the file mode small.&lt;/p&gt;

&lt;p&gt;Derbyall and the Junit suite have been run with zero failures.&lt;/p&gt;

&lt;p&gt;The patch is ready for review and commit.&lt;/p&gt;</comment>
                            <comment id="12491895" author="knutanders" created="Thu, 26 Apr 2007 08:15:59 +0100"  >&lt;p&gt;rwd_pre.diff looks good. Committed revision 532635.&lt;/p&gt;</comment>
                            <comment id="12492063" author="olav" created="Thu, 26 Apr 2007 17:32:57 +0100"  >&lt;p&gt;The only change in this patch (rwd_v2.diff) is to do the actual change of mode for opening log files from &quot;rws&quot; to &quot;rwd&quot; and some corresponding changes in comments. &lt;/p&gt;

&lt;p&gt;I have run derbyall and the JUnit suite with any errors. &lt;/p&gt;

&lt;p&gt;The patch is ready for review and commit.&lt;/p&gt;</comment>
                            <comment id="12493980" author="kristwaa" created="Mon, 7 May 2007 07:32:16 +0100"  >&lt;p&gt;Committed &apos;rwd_v2.diff&quot; to trunk with revision 535270.&lt;/p&gt;

&lt;p&gt;I believe all required work has been completed for this issue, but I will await confirmation before I (or someone else) set it to &quot;Fixed&quot;.&lt;/p&gt;</comment>
                            <comment id="12494073" author="clr" created="Mon, 7 May 2007 17:06:28 +0100"  >&lt;p&gt;IIRC, the reason this was changed just a few years ago from rwd to rws is as a workaround for a nasty Apple MacOSX bug in which you could not create a database and immediately access it.&lt;/p&gt;

&lt;p&gt;Has anyone built and run Derby on OSX with this patch applied to make sure we don&apos;t regress all the OSX users?&lt;/p&gt;</comment>
                            <comment id="12494100" author="olav" created="Mon, 7 May 2007 19:17:46 +0100"  >&lt;p&gt;Thanks for committing the patch, Kristian.&lt;/p&gt;

&lt;p&gt;With regards to Craigs concern about introducing a problem on Mac OS X, the answer is that I am not aware of anyone who have tested the patch on OS X. But I tried to take precausion for this problem by first submitting a patch that should hopefully be able to detect this problem on buggy JVMs on OS X and FreeBSD and do a workaround by using &quot;rw&quot; instead of &quot;rwd&quot;. But since I did not have access to any of these OSs I was not able to test it. Knut Anders tested the workaround for this bug on FreeBSD, but I have not heard anybody having the itch to test it on OS X yet. It would be great if anybody did - and if the JVM bug is detected on OS X you should see a statement about this in the derby.log.&lt;/p&gt;</comment>
                            <comment id="12501657" author="myrna" created="Tue, 5 Jun 2007 20:03:48 +0100"  >&lt;p&gt;I&apos;ve tested 10.3 on Mac (OSX 10.4) for a bit, and all seems to work fine.&lt;br/&gt;
(except of running out of memory with suites.All, which is not unique to mac).&lt;/p&gt;

&lt;p&gt;But then, the jvm version I&apos;m running with does not have the JVM bug anymore.&lt;br/&gt;
So I can&apos;t verify the workaround is still in place.&lt;/p&gt;

&lt;p&gt;I think it is ok to set this one to fixed.&lt;/p&gt;</comment>
                            <comment id="12502474" author="myrna" created="Thu, 7 Jun 2007 20:00:33 +0100"  >&lt;p&gt;On second thought, maybe this needs a release note?&lt;/p&gt;

&lt;p&gt;Could there possibly be anything a user needs to do to accomodate this?&lt;/p&gt;</comment>
                            <comment id="12502475" author="myrna" created="Thu, 7 Jun 2007 20:02:26 +0100"  >&lt;p&gt;marking release note needed.&lt;/p&gt;</comment>
                            <comment id="12502483" author="mikem" created="Thu, 7 Jun 2007 20:18:01 +0100"  >&lt;p&gt;i think a release note would be appropriate to let users know in what environments they can expect to see a benefit from 10.3 with respect to this change.  For instance I don&apos;t think it affects windows and am pretty sure it helps sun.  Not sure about other OS&apos;s.  Also maybe something about what kind of app will see benefit.&lt;/p&gt;</comment>
                            <comment id="12504059" author="myrna" created="Wed, 13 Jun 2007 01:21:55 +0100"  >&lt;p&gt;No release note appeard forthcoming so I took a stab at it...Review, anyone?&lt;/p&gt;</comment>
                            <comment id="12504155" author="olav" created="Wed, 13 Jun 2007 09:07:49 +0100"  >&lt;p&gt;Thanks a lot for writing the release note, Myrna.&lt;/p&gt;

&lt;p&gt;I think the release note look very good and I have only some minor comments:&lt;/p&gt;

&lt;p&gt;1. If the VM supports &quot;rws&quot; it also supports &quot;rwd&quot; mode. So there are no reverting back from &quot;rwd&quot; to &quot;rws&quot;. The only case where Derby revert back from using &quot;rwd&quot; is due to a JVM bug, and then Derby will revert back to use &quot;rw&quot; mode (since the bug is also present when running with &quot;rws&quot;). I propose to change the last sentence in &quot;Rationale for Change&quot; from:&lt;/p&gt;

&lt;p&gt;   &quot;Because not all JVMs support this mechanism, Derby will check if it can use this mechanism and if not, it will revert back to using the &quot;rws&quot; and print an appropriate message indicating same in derby.log&quot;&lt;/p&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;p&gt;   &quot;Some JVMs have a bug in the support for &quot;rws&quot; and &quot;rwd&quot; mode. Derby will check for this bug, and if it is detected, Derby will revert back to using &quot;rw&quot; mode and print an appropriate message indicating this in derby.log&quot;.&lt;/p&gt;

&lt;p&gt;2. For the same reason I propose that the second sentence in the &quot;Application Changes required&quot; is changed from:&lt;/p&gt;

&lt;p&gt;   &quot;If not, a message will be printed to derby.log:&quot;&lt;/p&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;p&gt;  &quot;If Derby detects that your JVM has a bug in the support for &quot;rwd&quot;, a message will be printed to derby.log&quot;&lt;/p&gt;

&lt;p&gt;(as it is written now it seems like this sentence would be written to derby.log every time Derby does not use &quot;rwd&quot; mode. This is no correct. For JVMs older than 1.4.2 &quot;rwd&quot; is not supported, but Derby will not write anything about this to the derby.log)&lt;/p&gt;

&lt;p&gt;3. There is a &quot;the the&quot; typo in the second last sentence in the &quot;Rationale for Change&quot; section.&lt;/p&gt;

&lt;p&gt;Let me know if you want me to upload a new version of the release note or if you incorporate this.&lt;/p&gt;</comment>
                            <comment id="12504487" author="myrna" created="Thu, 14 Jun 2007 01:56:31 +0100"  >&lt;p&gt;I incorporated the changes. I also added a reference to the jdk 1.4.2 version and up to indicate earlier jvm versions do not support this.&lt;/p&gt;</comment>
                            <comment id="12504489" author="myrna" created="Thu, 14 Jun 2007 01:57:34 +0100"  >&lt;p&gt;release note was attached. I think this issue is now complete.&lt;/p&gt;</comment>
                            <comment id="12505550" author="myrna" created="Sat, 16 Jun 2007 23:25:12 +0100"  >&lt;p&gt;scrubbed releasenote&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12343989" name="disk-cache.png" size="3817" author="olav" created="Tue, 31 Oct 2006 10:22:50 +0000"/>
                            <attachment id="12353867" name="jvmsyncbug.diff" size="4616" author="olav" created="Wed, 21 Mar 2007 17:46:49 +0000"/>
                            <attachment id="12353868" name="jvmsyncbug.stat" size="163" author="olav" created="Wed, 21 Mar 2007 17:46:49 +0000"/>
                            <attachment id="12354207" name="jvmsyncbug_v2.diff" size="5079" author="olav" created="Mon, 26 Mar 2007 12:47:11 +0100"/>
                            <attachment id="12354208" name="jvmsyncbug_v2.stat" size="163" author="olav" created="Mon, 26 Mar 2007 12:47:11 +0100"/>
                            <attachment id="12355649" name="jvmsyncbug_v3.diff" size="5207" author="olav" created="Mon, 16 Apr 2007 23:00:42 +0100"/>
                            <attachment id="12355650" name="jvmsyncbug_v3.stat" size="163" author="olav" created="Mon, 16 Apr 2007 23:00:42 +0100"/>
                            <attachment id="12343988" name="no-disk-cache.png" size="4486" author="olav" created="Tue, 31 Oct 2006 10:22:50 +0000"/>
                            <attachment id="12359946" name="releaseNote.html" size="3980" author="myrna" created="Sat, 16 Jun 2007 23:25:12 +0100"/>
                            <attachment id="12359646" name="releaseNote.html" size="3980" author="myrna" created="Thu, 14 Jun 2007 01:56:31 +0100"/>
                            <attachment id="12359556" name="releaseNote.html" size="3882" author="myrna" created="Wed, 13 Jun 2007 01:21:55 +0100"/>
                            <attachment id="12345834" name="rwd.diff" size="575" author="olav" created="Mon, 27 Nov 2006 13:06:17 +0000"/>
                            <attachment id="12345835" name="rwd.stat" size="70" author="olav" created="Mon, 27 Nov 2006 13:06:17 +0000"/>
                            <attachment id="12356226" name="rwd_pre.diff" size="6454" author="olav" created="Wed, 25 Apr 2007 12:35:20 +0100"/>
                            <attachment id="12356227" name="rwd_pre.stat" size="469" author="olav" created="Wed, 25 Apr 2007 12:35:20 +0100"/>
                            <attachment id="12356351" name="rwd_v2.diff" size="1181" author="olav" created="Thu, 26 Apr 2007 17:32:57 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 31 Oct 2006 15:31:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0udb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38738</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>