<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6559/DERBY-6559.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6559] A immediate Fk constraint blows up iff its referenced PK is deferred and we delete a duplicate</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6559</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Cf the following test case:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;testFKPlusUnique&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    /**
     * The referenced constraint (in the referenced table) is also a deferred
     * (unique/ok) constraint.
     * 
     * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; SQLException 
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testFKPlusUnique() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; SQLException {
        Statement s = createStatement(
                ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
        
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
            s.executeUpdate(
                &lt;span class=&quot;code-quote&quot;&gt;&quot;create table ref_t(i &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &quot;&lt;/span&gt; +
                &lt;span class=&quot;code-quote&quot;&gt;&quot;    constraint ct primary key(i) deferrable initially deferred)&quot;&lt;/span&gt;);
            s.executeUpdate(
                &lt;span class=&quot;code-quote&quot;&gt;&quot;create table t(i &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; unique not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &quot;&lt;/span&gt; +
                &lt;span class=&quot;code-quote&quot;&gt;&quot;    constraint c foreign key (i) references ref_t(i) &quot;&lt;/span&gt; +
                &lt;span class=&quot;code-quote&quot;&gt;&quot;    deferrable initially immediate)&quot;&lt;/span&gt;);
            
            s.executeUpdate(&lt;span class=&quot;code-quote&quot;&gt;&quot;insert into ref_t values 1,1&quot;&lt;/span&gt;);
            s.executeUpdate(&lt;span class=&quot;code-quote&quot;&gt;&quot;insert into t values 1&quot;&lt;/span&gt;);
            
            &lt;span class=&quot;code-comment&quot;&gt;// Now, the child (referencing table) is referencing one of the the
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// rows whose value is 1, so the reference is potentially suspect.
&lt;/span&gt;            
            &lt;span class=&quot;code-comment&quot;&gt;// What happens when we delete the one copy before commit?
&lt;/span&gt;            ResultSet rs = s.executeQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;select * from ref_t&quot;&lt;/span&gt;);
            rs.next();
            
            &lt;span class=&quot;code-comment&quot;&gt;// Will &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; delete blow up? Hopefully not, here is another row
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// that would satisfy the constraint.
&lt;/span&gt;            rs.deleteRow();
            
            &lt;span class=&quot;code-comment&quot;&gt;// Now there should be only one left, so the referenced table is
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// OK.
&lt;/span&gt;            commit();
            :
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, the constraint C throws when we do the &quot;rs.deleteRow&quot; above. But since there is (still) a row satisfying the FK, albeit a duplicate, I believe it should not.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12711323">DERBY-6559</key>
            <summary>A immediate Fk constraint blows up iff its referenced PK is deferred and we delete a duplicate</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Tue, 29 Apr 2014 23:31:10 +0100</created>
                <updated>Thu, 25 Sep 2014 21:54:37 +0100</updated>
                            <resolved>Fri, 9 May 2014 15:59:02 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13984925" author="dagw" created="Tue, 29 Apr 2014 23:47:43 +0100"  >&lt;p&gt;If constraint C (the FK) is deferred, it works as expected, because then the check happens at commit time, and the referenced table&apos;s index is looked up again and we see the row containing 1. Even if the unique constraint is checked after the FK constraint at commit time, the presence of two &quot;1&quot; would not cause a problem; the constraint is satisfied when we find the (first) row containing 1 in the scan.&lt;/p&gt;</comment>
                            <comment id="13989624" author="dagw" created="Mon, 5 May 2014 16:46:15 +0100"  >&lt;p&gt;Thinking about this, I am not sure what would be the best behaviour here. I &lt;b&gt;think&lt;/b&gt; it would behoove the referenced constraint (which is deferred unique) to change the way it checks any dependents (referencing foreign keys) so that are not violated if there is a least one row in the &quot;unique-to-be&quot; index that satisfies the FK reference. This will lead us to go back to the &quot;unique-to-be&quot; table and only propagate checks on delete/modify of dependents if the &lt;b&gt;last&lt;/b&gt; row with the relevant unique key is deleted/modified. This might lead to different performance/locking behavior, but only for the new, deferrable code paths.&lt;/p&gt;

&lt;p&gt;Another option is to continue to throw here, and just require users to make the FK deferred and NO ACTION if they want the FKs to be unaffected of the referenced tables &quot;deferredness&quot;.&lt;/p&gt;

&lt;p&gt;Opinions?&lt;/p&gt;</comment>
                            <comment id="13990107" author="dagw" created="Tue, 6 May 2014 00:48:40 +0100"  >&lt;p&gt;Tried to read what other databases do, but hard to find it described.. I tried with Oracle 11g and saw these two behaviors below. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;create-before-dups.sql&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
SQL&amp;gt; set autocommit off;
SQL&amp;gt; create table t(i number(5), j number(5), constraint c primary key(i) deferrable);
Table created.
SQL&amp;gt; create table child(i number(5), constraint fk foreign key(i) references t(i) on delete set &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
Table created.
SQL&amp;gt; insert into t values (1,2);
1 row created.
SQL&amp;gt; insert into child values(1);
1 row created.
SQL&amp;gt; commit;
Commit complete.
SQL&amp;gt; set constraints c deferred;
Constraint set.
SQL&amp;gt; insert into t values (1,1);
1 row created.
SQL&amp;gt; select * from t;
         I          J                                                           
---------- ----------                                                           
         1          2                                                           
         1          1                                                           
SQL&amp;gt; select * from child;
         I                                                                      
----------                                                                      
         1                                                                      
SQL&amp;gt; delete from t where j=2;
1 row deleted.
SQL&amp;gt; select * from child;
         I                                                                      
----------                                                                      
         1                                                                      
SQL&amp;gt; rollback;
Rollback complete.
SQL&amp;gt; drop table child;
Table dropped.
SQL&amp;gt; drop table t;
Table dropped.
SQL&amp;gt; commit;
Commit complete.
SQL&amp;gt; spool off;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;create-while-dups.sql&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
SQL&amp;gt; set autocommit off;
SQL&amp;gt; create table t(i number(5), j number(5), constraint c primary key(i) deferrable);
Table created.
SQL&amp;gt; set constraints c deferred;
Constraint set.
SQL&amp;gt; insert into t values (1,2);
1 row created.
SQL&amp;gt; insert into t values (1,1);
1 row created.
SQL&amp;gt; create table child(i number(5), constraint fk foreign key(i) references t(i) on delete set &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
create table child(i number(5), constraint fk foreign key(i) references t(i) on delete set &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
*
ERROR at line 1:
ORA-02091: transaction rolled back 
ORA-00001: unique constraint (SYSTEM.C) violated 

SQL&amp;gt; insert into child values(1);
insert into child values(1)
            *
ERROR at line 1:
ORA-00942: table or view does not exist 

SQL&amp;gt; select * from t;
no rows selected
SQL&amp;gt; select * from child;
select * from child
              *
ERROR at line 1:
ORA-00942: table or view does not exist 

SQL&amp;gt; delete from t where j=2;
0 rows deleted.
SQL&amp;gt; select * from child;
select * from child
              *
ERROR at line 1:
ORA-00942: table or view does not exist 

SQL&amp;gt; rollback;
Rollback complete.
SQL&amp;gt; drop table child;
drop table child
           *
ERROR at line 1:
ORA-00942: table or view does not exist 

SQL&amp;gt; drop table t;
Table dropped.
SQL&amp;gt; commit;
Commit complete.
SQL&amp;gt; spool off;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13990546" author="knutanders" created="Tue, 6 May 2014 12:21:51 +0100"  >&lt;p&gt;What you are seeing in create-while-dups.sql with Oracle 11g, may be caused by the implicit commit issued by Oracle before an after DDL statements (see &lt;a href=&quot;http://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_4010.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_4010.htm&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I believe you are right that we ideally should allow the deleteRow() in this case, since there&apos;s still a row that satisfies the foreign key. If the other row is deleted too, it sounds like an error should be raised immediately.&lt;/p&gt;</comment>
                            <comment id="13991059" author="dagw" created="Tue, 6 May 2014 21:00:52 +0100"  >&lt;p&gt;Thanks, Knut. Yes, I was wondering about whether there was some implicit commit there, but I didn&apos;t get to looking it up. Good to get that clarified.&lt;br/&gt;
I also tried Postgresql on this with this result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;gt; create table t(i &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, j &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, constraint c primary key(i) deferrable);
&amp;gt; create table child(i &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, constraint fk foreign key(i) references t(i) on delete set &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
ERROR:  cannot use a deferrable unique constraint &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; referenced table &lt;span class=&quot;code-quote&quot;&gt;&quot;t&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, they avoid the issue by being restrictive.&lt;/p&gt;

&lt;p&gt;Documented in &lt;a href=&quot;http://www.postgresql.org/docs/9.3/static/sql-createtable.html:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.postgresql.org/docs/9.3/static/sql-createtable.html:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The referenced columns must be the columns of a non-deferrable unique or primary key constraint in the referenced table.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13991132" author="dagw" created="Tue, 6 May 2014 22:05:28 +0100"  >&lt;p&gt;DB2 seems to have diverging semantics for deferred constraints: I see recommendations to change enforcement instead to NOT ENFORCED, or use SET INTEGRITY to off.&lt;br/&gt;
SQL Server doesn&apos;t seem to support it either: &lt;a href=&quot;http://technet.microsoft.com/en-US/library/ms174979%28v=sql.90%29.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://technet.microsoft.com/en-US/library/ms174979%28v=sql.90%29.aspx&lt;/a&gt; doesn&apos;t show any such syntax.&lt;/p&gt;</comment>
                            <comment id="13993136" author="dagw" created="Thu, 8 May 2014 22:28:01 +0100"  >&lt;p&gt;Uploading a patch.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Patch derby-6559 changes ReferencedKeyRIChecker to omit checking dependent tables iff the referenced key is deferred and has rows with duplicate keys one of whom is attempted deleted. So, in effect, the check in such a case happens only if the row is &quot;the last of its kind&quot;, i.e. the last row having a particular referenced key. Added tests for this behavior. To determine whether we have duplicates, we open an extra scan on the index.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="13993621" author="jira-bot" created="Fri, 9 May 2014 15:58:01 +0100"  >&lt;p&gt;Commit 1593557 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1593557&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1593557&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6559&quot; title=&quot;A immediate Fk constraint blows up iff its referenced PK is deferred and we delete a duplicate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6559&quot;&gt;&lt;del&gt;DERBY-6559&lt;/del&gt;&lt;/a&gt; A immediate Fk constraint blows up iff its referenced PK is deferred and we delete a duplicate&lt;/p&gt;

&lt;p&gt;Patch derby-6559 changes ReferencedKeyRIChecker to omit checking&lt;br/&gt;
dependent tables iff the referenced key is deferred and has rows with&lt;br/&gt;
duplicate keys one of whom is attempted deleted. So, in effect, the&lt;br/&gt;
check in such a case happens only if the row is &quot;the last of its&lt;br/&gt;
kind&quot;, i.e. the last row having a particular referenced key. Added&lt;br/&gt;
tests for this behavior. To determine whether we have duplicates, we&lt;br/&gt;
open an extra scan on the index.&lt;/p&gt;</comment>
                            <comment id="14015992" author="dagw" created="Mon, 2 Jun 2014 23:41:50 +0100"  >&lt;p&gt;But see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6576?focusedCommentId=14015985&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14015985&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;limitation on FK with deferrable pK here&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14147017" author="mikem" created="Wed, 24 Sep 2014 23:46:25 +0100"  >&lt;p&gt;I believe this bugs is specific to deferrable constraints so marking as not appropriate to backport to 10.10 and previous releases.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12713983">DERBY-6576</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12313704">DERBY-532</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12644011" name="derby-6559.diff" size="16338" author="dagw" created="Thu, 8 May 2014 22:28:01 +0100"/>
                            <attachment id="12644010" name="derby-6559.status" size="1145" author="dagw" created="Thu, 8 May 2014 22:28:01 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 May 2014 11:21:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>389644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzoyyn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>389886</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>