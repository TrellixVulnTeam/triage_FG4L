<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:20:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5068/DERBY-5068.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5068] Investigate increased CPU usage on client after introduction of UTF-8 CcsidManager</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5068</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;While looking at the performance graphs for the single-record select test during the last year - &lt;a href=&quot;http://home.online.no/~olmsan/derby/perf/select_1y.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://home.online.no/~olmsan/derby/perf/select_1y.html&lt;/a&gt; - I noticed that there was a significant increase (10-20%) in CPU usage per transaction on the client early in October 2010. To be precise, the increase seems to have happened between revision 1004381 and revision 1004794. In that period, there were three commits: two related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4757&quot; title=&quot;(Client) Implement UTF8 support on DRDA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4757&quot;&gt;&lt;del&gt;DERBY-4757&lt;/del&gt;&lt;/a&gt;, and one related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4825&quot; title=&quot;Assert failure in LargeDataLocksTest.testGetCharacterStream() because of wrong number of locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4825&quot;&gt;&lt;del&gt;DERBY-4825&lt;/del&gt;&lt;/a&gt; (tests only).&lt;/p&gt;

&lt;p&gt;We should try to find out what&apos;s causing the increased CPU usage and see if there&apos;s some way to reduce it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12499628">DERBY-5068</key>
            <summary>Investigate increased CPU usage on client after introduction of UTF-8 CcsidManager</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                    </labels>
                <created>Thu, 24 Feb 2011 19:25:48 +0000</created>
                <updated>Thu, 30 Jun 2011 10:21:40 +0100</updated>
                            <resolved>Fri, 20 May 2011 10:50:14 +0100</resolved>
                                    <version>10.7.1.1</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13026241" author="knutanders" created="Thu, 28 Apr 2011 11:27:35 +0100"  >&lt;p&gt;One transaction in the single-record select client results in the following calls to Utf8CcsidManager methods:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;8 calls to getByteLength()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;3 calls to convertFromJavaString(String,byte[],int,Agent)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both of these methods create an intermediate object (getByteLength() a byte array, convertFromJavaString() a String) that&apos;s thrown away, whereas EbcdicCcsid doesn&apos;t do that. Perhaps it&apos;s worthwhile to hand-code the UTF-8 encoding in these two methods to avoid having to create the intermediate objects. Or if we don&apos;t want to maintain code that does UTF-8 encoding ourselves: assume that all characters are ASCII and only fall back to using intermediate objects if a non-ASCII character is found.&lt;/p&gt;

&lt;p&gt;I&apos;ll run a quick experiment on the machines where I see this issue.&lt;/p&gt;</comment>
                            <comment id="13026296" author="knutanders" created="Thu, 28 Apr 2011 14:05:16 +0100"  >&lt;p&gt;The attached patch makes the two methods encode the strings without going via an intermediate object. I haven&apos;t double checked that the encoding is correct, but it should be sufficient for testing purposes.&lt;/p&gt;

&lt;p&gt;I ran the sr_select test with 10 threads using derbyclient.jar from 10.6.2.1, 10.8.1.2 and patched trunk. Four runs with each configuration gave the following average CPU time spent per transaction:&lt;/p&gt;

&lt;p&gt;10.6.2.1: 76.4 &#181;s&lt;br/&gt;
10.8.1.2: 81.3 &#181;s&lt;br/&gt;
trunk+patch: 76.8 &#181;s&lt;/p&gt;

&lt;p&gt;So it looks like that approach will bring the CPU usage back down to the 10.6 level.&lt;/p&gt;</comment>
                            <comment id="13026773" author="dagw" created="Fri, 29 Apr 2011 00:27:32 +0100"  >&lt;p&gt;Good to understand! The patch adds some complexity by manually converting to UTF-8 &quot;manually&quot; instead of using the Java libraries, though. If you think the performance increase is worth the added complexity, it might be nice to add some links which explains the logic. Does the logic work also if the string contains surrogate pairs?&lt;/p&gt;</comment>
                            <comment id="13026908" author="knutanders" created="Fri, 29 Apr 2011 09:46:56 +0100"  >&lt;p&gt;Thanks for taking a look at the patch, Dag! I agree that there should be more comments in the final patch, if we go for this approach. I don&apos;t know the answer to your question about surrogate pairs, that&apos;s one of the things that will need to be double checked and tested. My understanding, though, is that Java&apos;s UTF-8 encoding algorithm treats surrogate pairs as two separate characters, which would mean that there&apos;s no need for special handling of surrogate pairs in the patch.&lt;/p&gt;

&lt;p&gt;One alternative way to get rid of the intermediate objects would be to use a CharsetEncoder (like we did on the server side in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2936&quot; title=&quot;Use java.nio.ByteBuffer for buffering in DDMWriter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2936&quot;&gt;&lt;del&gt;DERBY-2936&lt;/del&gt;&lt;/a&gt;) which performs the encoding directly into a buffer. This would hide the complexity of doing the actual encoding. However, a CharsetEncoder works on ByteBuffer and CharBuffer objects, whereas the CcidManager interface works on String and byte[] objects, so this would mean changing the interface and the code that uses it. (We could of course wrap the strings and byte arrays using ByteBuffer.wrap() and CharBuffer.wrap() within the methods to keep the interface the same, but then we&apos;re back into the business of generating intermediate objects, and my quick and dirty experiments suggest that this wouldn&apos;t give any improvements compared to the current situation.)&lt;/p&gt;</comment>
                            <comment id="13026934" author="knutanders" created="Fri, 29 Apr 2011 11:45:14 +0100"  >&lt;p&gt;I&apos;ve started looking into moving from byte[] to ByteBuffer on the client. That allowed us to simplify some bit fiddling code on the server, so it would be an improvement regardless of this issue. It&apos;s a bit of work, but most of it is purely mechanical. I&apos;ll file a separate issue for that task, and then we can revisit this issue once we have that in place, and see if using a java.nio.charset.CharsetEncoder to encode directly into the buffer would be cheaper than the current approach.&lt;/p&gt;</comment>
                            <comment id="13027086" author="dagw" created="Fri, 29 Apr 2011 18:16:21 +0100"  >&lt;p&gt;&quot;then we can revisit this issue once we have that in place&quot;: seems a good idea to me! +1&lt;/p&gt;</comment>
                            <comment id="13031175" author="knutanders" created="Tue, 10 May 2011 14:14:44 +0100"  >&lt;p&gt;Attaching an alternative patch (d5068-2a.diff) that must be applied on&lt;br/&gt;
top of the patch attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5210&quot; title=&quot;Use java.nio.ByteBuffer in client.net.Request&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5210&quot;&gt;&lt;del&gt;DERBY-5210&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Adds two new methods to CcsidManager: startEncoding() and encode().&lt;br/&gt;
These are roughly equivalent to the reset() and encode() methods in&lt;br/&gt;
java.nio.charset.CharsetEncoder (and Utf8CcsidManager indeed&lt;br/&gt;
implements them as wrappers around the CharsetEncoder methods). The&lt;br/&gt;
methods allow encoding a string directly into a ByteBuffer without&lt;br/&gt;
going via an intermediate throw-away array.&lt;/p&gt;

&lt;p&gt;2) Removes these methods from CcsidManager:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;convertFromJavaString(String, byte[], int, Agent)&lt;/li&gt;
	&lt;li&gt;convertToJavaString(byte[])&lt;/li&gt;
	&lt;li&gt;maxBytesPerChar()&lt;/li&gt;
	&lt;li&gt;getByteLength(String)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3) Changes Request, NetPackageRequest and NetConnection to use the new&lt;br/&gt;
methods instead of the removed ones.&lt;/p&gt;

&lt;p&gt;In addition to performing the string encoding without creating an&lt;br/&gt;
intermediate byte array, the patch eliminates the use of&lt;br/&gt;
getByteLength() completely (that method also created an intermediate&lt;br/&gt;
byte array). The original code needed to know the exact byte length of&lt;br/&gt;
the string up front so that it could make sure the destination buffer&lt;br/&gt;
was large enough. The new interface for encoding the strings lets the&lt;br/&gt;
caller know if it runs out of buffer space, so that the caller can&lt;br/&gt;
allocate a larger buffer and continue the operation. This way, we&lt;br/&gt;
don&apos;t need to encode each string twice.&lt;/p&gt;

&lt;p&gt;The one place where we still need to know the byte length up front, is&lt;br/&gt;
in NetPackageRequest.buildCommonPKGNAMinfo(). That&apos;s because the&lt;br/&gt;
format of the message depends on whether or not the string length&lt;br/&gt;
exceeds a certain threshold. The method now creates a byte array&lt;br/&gt;
representation of the string once, and uses that array both to find&lt;br/&gt;
the byte length and to copy the encoded version of the string into the&lt;br/&gt;
buffer.&lt;/p&gt;

&lt;p&gt;I&apos;ve rerun the sr_select load client, with 10 threads, to see how this&lt;br/&gt;
new patch performs. I used JDK 6u24 on Solaris 10, and collected the&lt;br/&gt;
CPU usage in the client driver by using the /bin/time command. I ran&lt;br/&gt;
each configuration twice, 10 minutes each. Here&apos;s the CPU time per&lt;br/&gt;
transaction seen with various versions/patches:&lt;/p&gt;

&lt;p&gt;10.6.2.1 (plain):                       62.4 &#181;s/tx&lt;br/&gt;
10.8.1.2 (plain):                       67.0 &#181;s/tx&lt;br/&gt;
trunk + d5068-1a.diff:                  63.4 &#181;s/tx&lt;br/&gt;
trunk + d5210-1a.diff:                  67.9 &#181;s/tx&lt;br/&gt;
trunk + d5210-1a.diff + d5068-2a.diff:  65.2 &#181;s/tx&lt;/p&gt;

&lt;p&gt;So, in short: None of the patches bring the CPU usage all the way down&lt;br/&gt;
to the 10.6.2.1 level. The 1a patch attached to this issue (the one&lt;br/&gt;
that does the UTF-8 encoding manually) is close, though.&lt;/p&gt;

&lt;p&gt;The 2a patch doesn&apos;t perform quite as well as the 1a patch, but still&lt;br/&gt;
better than 10.8.1.2. The advantage is that it hides the details on&lt;br/&gt;
how the encoding is done. Also, by using the standard class library&lt;br/&gt;
interface, we may benefit from improvements that are made to the class&lt;br/&gt;
library implementation in the future.&lt;/p&gt;

&lt;p&gt;I guess I&apos;m leaning towards the approach in the 2a patch. The&lt;br/&gt;
performance difference isn&apos;t that big anyway (I&apos;ve only been able to&lt;br/&gt;
see impact on CPU usage, never on the transaction rate), so it doesn&apos;t&lt;br/&gt;
seem worthwhile to duplicate functionality provided by the standard&lt;br/&gt;
libraries.&lt;/p&gt;</comment>
                            <comment id="13032467" author="dagw" created="Thu, 12 May 2011 16:44:11 +0100"  >&lt;p&gt;I think 2a probably strikes the right compromise here: we get a slight performance improvement in addition to a good code cleanup. +1&lt;/p&gt;

&lt;p&gt;One question: Utf8CcsidManager#encode: Is there no need to check for malformed-input and&lt;br/&gt;
unmappable-character errors in the returned CoderResult? The code&lt;br/&gt;
presumes it is always OVERFLOW now.  Just reading up on the APIs details here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;br/&gt;
Perhaps we know it can&apos;t happen here, a comment might be good for the naive reader.&lt;/p&gt;</comment>
                            <comment id="13032532" author="knutanders" created="Thu, 12 May 2011 18:37:14 +0100"  >&lt;p&gt;Thanks for looking at the patch, Dag. I&apos;m still learning the API myself. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;You&apos;re probably right that we should handle those conditions. I&apos;m not sure how unmappable-character errors can happen with UTF-8, but malformed-input errors seem to be raised for characters in the range \uD800 to \uDFFF.&lt;/p&gt;

&lt;p&gt;We have two alternatives:&lt;/p&gt;

&lt;p&gt;1) Make the CharsetEncoder replace problematic characters with &apos;?&apos; instead of reporting an error. (By calling onMalformedInput() and onUnmappableCharacter() with CodingErrorAction.REPLACE.)&lt;/p&gt;

&lt;p&gt;2) Detect and report the conditions. (By checking the CoderResult and raising an exception.)&lt;/p&gt;

&lt;p&gt;Option 2 sounds like the right thing to do. However, the original code used String.getBytes(String) to do the encoding, which implements option 1 (the API javadoc says that it&apos;s unspecified what it does when it cannot encode the string, but its actual behaviour matches option 1). Also, we still have the convertFromJavaString(String,Agent) method which matches option 1.&lt;/p&gt;

&lt;p&gt;On the other hand, all the encoding methods in EbcdicCcsidManager do raise an exception if the string contains characters not in the EBCDIC range, so there&apos;s no clear precedence. I guess no matter what we choose to do, we should make all these methods consistent. I think my preference would be option 2.&lt;/p&gt;</comment>
                            <comment id="13032689" author="dagw" created="Thu, 12 May 2011 22:21:41 +0100"  >&lt;p&gt;Option 2 sounds right to me.&lt;/p&gt;</comment>
                            <comment id="13033974" author="knutanders" created="Mon, 16 May 2011 12:28:14 +0100"  >&lt;p&gt;Attaching a new patch (2b) with the following changes from the 2a patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added test case to Utf8CcsidManagerClientTest to verify that we don&apos;t silently ignore unmappable characters.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changed Utf8CcsidManager.encode() to raise exception when unmappable character or malformed input is detected.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Made Utf8CcsidManager.convertFromJavaString() use CharsetEncoder.encode(String) instead of String.getBytes(String) so that umappable character/malformed input isn&apos;t silently ignored.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13036744" author="knutanders" created="Fri, 20 May 2011 10:50:14 +0100"  >&lt;p&gt;Committed revision 1125299.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12505773">DERBY-5210</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12477653" name="d5068-1a.diff" size="3759" author="knutanders" created="Thu, 28 Apr 2011 14:05:16 +0100"/>
                            <attachment id="12478695" name="d5068-2a.diff" size="31586" author="knutanders" created="Tue, 10 May 2011 14:14:44 +0100"/>
                            <attachment id="12478696" name="d5068-2a.stat" size="588" author="knutanders" created="Tue, 10 May 2011 14:14:44 +0100"/>
                            <attachment id="12479313" name="d5068-2b.diff" size="33832" author="knutanders" created="Mon, 16 May 2011 12:28:14 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Apr 2011 23:27:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31491</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0fxz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36401</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>