<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:28:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3260/DERBY-3260.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3260] NullPointerException caused by race condition in GenericActivationHolder</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3260</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have a stress test using Derby 10.3.1.4 which is executing the same PreparedStatement using multiple threads concurrently and I consistently get the following NPE after several hours of running:&lt;/p&gt;

&lt;p&gt;2007-12-07 00:48:10.914 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;pool-5-thread-25,5,main&amp;#93;&lt;/span&gt; (XID = 1219661), (SESSIONID = 377), (DATABASE = /usr/ironhide/var/db/opera/derby), (DRDAID = null), Failed Statement is: select rdbmsvaria0_.GUID_AND_INDEX as GUID1_3_0_, rdbmsvaria0_.VALUE2 as VALUE2_3_0_, rdbmsvaria0_.HOLDER_GUID as HOLDER3_3_0_, rdbmsvaria0_.VALUE_TYPE as VALUE4_3_0_, rdbmsvaria0_.VALUE_GUID as VALUE5_3_0_, rdbmsvaria0_.DELETED as DELETED3_0_ from VARIABLE rdbmsvaria0_ where rdbmsvaria0_.GUID_AND_INDEX=? with 1 parameters begin parameter #1: 9C202AB9E8356288A9320C9C383A4D2F-11 :end parameter&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericActivationHolder.execute(GenericActivationHolder.java:271)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:368)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1652)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:275)&lt;br/&gt;
        at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:186)&lt;br/&gt;
        at org.hibernate.loader.Loader.getResultSet(Loader.java:1787)&lt;br/&gt;
        at org.hibernate.loader.Loader.doQuery(Loader.java:674)&lt;br/&gt;
        at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:236)&lt;br/&gt;
        at org.hibernate.loader.Loader.loadEntity(Loader.java:1860)&lt;br/&gt;
        at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:48)&lt;br/&gt;
        at org.hibernate.loader.entity.AbstractEntityLoader.load(AbstractEntityLoader.java:42)&lt;br/&gt;
        at org.hibernate.persister.entity.AbstractEntityPersister.load(AbstractEntityPersister.java:3044)&lt;br/&gt;
        at org.hibernate.event.def.DefaultLoadEventListener.loadFromDatasource(DefaultLoadEventListener.java:395)&lt;br/&gt;
        at org.hibernate.event.def.DefaultLoadEventListener.doLoad(DefaultLoadEventListener.java:375)&lt;br/&gt;
        at org.hibernate.event.def.DefaultLoadEventListener.load(DefaultLoadEventListener.java:139)&lt;br/&gt;
        at org.hibernate.event.def.DefaultLoadEventListener.proxyOrLoad(DefaultLoadEventListener.java:179)&lt;br/&gt;
        at org.hibernate.event.def.DefaultLoadEventListener.onLoad(DefaultLoadEventListener.java:103)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.fireLoad(SessionImpl.java:878)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.get(SessionImpl.java:815)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.get(SessionImpl.java:808)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor69.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.hibernate.context.ThreadLocalSessionContext$TransactionProtectionWrapper.invoke(ThreadLocalSessionContext.java:301)&lt;br/&gt;
        at $Proxy41.get(Unknown Source)&lt;br/&gt;
        at com.approuter.maestro.opera.rdbms.RdbmsContextHolder.getRdbmsVariable(RdbmsContextHolder.java:108)&lt;br/&gt;
        at com.approuter.maestro.opera.rdbms.RdbmsContextHolder.getVariable(RdbmsContextHolder.java:94)&lt;br/&gt;
        at com.approuter.maestro.vm.Frame.getParameter(Frame.java:218)&lt;br/&gt;
        at com.approuter.maestro.vm.Task.getParameter(Task.java:1267)&lt;br/&gt;
        at com.approuter.maestro.vm.CallContextImpl.setOutputParameter(CallContextImpl.java:195)&lt;br/&gt;
        at com.approuter.maestro.vm.CallContextImpl.getOutputParameterWriter(CallContextImpl.java:264)&lt;br/&gt;
        at com.approuter.maestro.sdk.mpi.DynamicExecutableActivity$3$1.getWriter(DynamicExecutableActivity.java:249)&lt;br/&gt;
        at com.approuter.module.xml.XmlSerializeTextActivity$XmlSerializeTextActivityInstance.serialize(XmlSerializeTextActivity.java:43)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor161.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at com.approuter.maestro.sdk.mpi.DynamicExecutableActivity.execute(DynamicExecutableActivity.java:332)&lt;br/&gt;
        at com.approuter.maestro.activities.Invoke.call(Invoke.java:199)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor157.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at com.approuter.maestro.activities.Instruction.call(Instruction.java:22)&lt;br/&gt;
        at com.approuter.maestro.vm.Program.call(Program.java:456)&lt;br/&gt;
        at com.approuter.maestro.vm.Task.run(Task.java:580)&lt;br/&gt;
        at com.approuter.maestro.vm.Task.run(Task.java:531)&lt;br/&gt;
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)&lt;br/&gt;
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&lt;br/&gt;
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)&lt;br/&gt;
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)&lt;br/&gt;
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:207)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:619)&lt;br/&gt;
Cleanup action completed&lt;/p&gt;

&lt;p&gt;Here is the relevant code from GenericActivationHolder.java&lt;/p&gt;

&lt;p&gt;        // synchronized (ps)&lt;br/&gt;
        {&lt;br/&gt;
            /* Has the activation class changed? */&lt;br/&gt;
            if (gc != ps.getActivationClass())&lt;br/&gt;
            {&lt;/p&gt;

&lt;p&gt;                // ensure the statement is valid by rePreparing it.&lt;br/&gt;
                ps.rePrepare(getLanguageConnectionContext());  // &amp;lt;-- line 260&lt;/p&gt;

&lt;p&gt;                /*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;If we get here, it means the PreparedStatement has been&lt;/li&gt;
		&lt;li&gt;recompiled.  Get a new Activation and check whether the&lt;/li&gt;
		&lt;li&gt;parameters are compatible.  If so, transfer the parameters&lt;/li&gt;
		&lt;li&gt;from the old Activation to the new one, and make that the&lt;/li&gt;
		&lt;li&gt;current Activation.  If not, throw an exception.&lt;br/&gt;
                */&lt;br/&gt;
                GeneratedClass      newGC = ps.getActivationClass();&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;                BaseActivation      newAC = (BaseActivation) newGC.newInstance(lcc);  // &amp;lt;-- line 271&lt;/p&gt;

&lt;p&gt;                DataTypeDescriptor[]    newParamTypes = ps.getParameterTypes();&lt;/p&gt;


&lt;p&gt;As you can see, the activation class returned by the ExecPreparedStatement is null as of line 271, even after having called a rePrepare(...) on the prepared statement  (line 260).  This is most likely due to a race condition.  Also note that the containing block was formerly synchronized, but has since been commented out.  From browsing the source in previous versions, the synchronized statement appears to have been commented out since before 10.0.2.1.  It appears the fix is to reintroduce the synchronized block, or at least make the block inside the if statement synchronized.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12384127">DERBY-3260</key>
            <summary>NullPointerException caused by race condition in GenericActivationHolder</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="ryokota">Robert Yokota</reporter>
                        <labels>
                    </labels>
                <created>Fri, 7 Dec 2007 01:37:14 +0000</created>
                <updated>Fri, 21 Jan 2011 17:51:12 +0000</updated>
                            <resolved>Wed, 23 Jan 2008 13:22:59 +0000</resolved>
                                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12550146" author="ryokota" created="Mon, 10 Dec 2007 18:36:52 +0000"  >&lt;p&gt;I patched a custom build with the following change to the execute() method in GenericActivationHolder&lt;br/&gt;
and my stress test ran for over 24 hours without encountering an NPE, whereas before the change it&lt;br/&gt;
would get an NPE within about 9 hours.&lt;/p&gt;

&lt;p&gt;The change is simply to synchronize on the prepared statement within the if statement. &lt;/p&gt;

&lt;p&gt;    public ResultSet execute() throws StandardException&lt;br/&gt;
    {&lt;br/&gt;
        /*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Synchronize to avoid problems if another thread is preparing&lt;/li&gt;
		&lt;li&gt;the statement at the same time we&apos;re trying to execute it.&lt;br/&gt;
        */&lt;br/&gt;
        // synchronized (ps)&lt;br/&gt;
        {&lt;br/&gt;
            /* Has the activation class changed? */&lt;br/&gt;
            if (gc != ps.getActivationClass())
            &lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {              synchronized (ps)                 // &amp;lt;-- ADDED THIS LINE              {
                // ensure the statement is valid by rePreparing it.
                ps.rePrepare(getLanguageConnectionContext());

                /*
                ** If we get here, it means the PreparedStatement has been
                ** recompiled.  Get a new Activation and check whether the
                ** parameters are compatible.  If so, transfer the parameters
                ** from the old Activation to the new one, and make that the
                ** current Activation.  If not, throw an exception.
                */
                GeneratedClass      newGC = ps.getActivationClass();

                BaseActivation      newAC = (BaseActivation) newGC.newInstance(lcc);

                DataTypeDescriptor[]    newParamTypes = ps.getParameterTypes();

                /*
                ** Link the new activation to the prepared statement.
                */
                newAC.setupActivation(ps, ac.getScrollable());

                newAC.setParameters(ac.getParameterValueSet(), paramTypes);


                /*
                ** IMPORTANT
                **
                ** Copy any essential state from the old activation
                ** to the new activation. This must match the state
                ** setup in EmbedStatement.
                ** singleExecution, cursorName, holdability, maxRows.
                */

                if (ac.isSingleExecution())
                    newAC.setSingleExecution();

                newAC.setCursorName(ac.getCursorName());

                newAC.setResultSetHoldability(ac.getResultSetHoldability());
                if (ac.getAutoGeneratedKeysResultsetMode()) //Need to do copy only if auto generated mode is on
                    newAC.setAutoGeneratedKeysResultsetInfo(ac.getAutoGeneratedKeysColumnIndexes(),
                    ac.getAutoGeneratedKeysColumnNames());
                newAC.setMaxRows(ac.getMaxRows());

                // break the link with the prepared statement
                ac.setupActivation(null, false);
                ac.close();

                /* Remember the new class information */
                ac = newAC;
                gc = newGC;
                paramTypes = newParamTypes;
              }  // &amp;lt;-- ADDED THIS LINE            }&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;        }&lt;/p&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12550151" author="thomanie" created="Mon, 10 Dec 2007 18:51:05 +0000"  >&lt;p&gt;Just curious - do you see any performance drop from the added synchronization block, and if so how large?&lt;/p&gt;</comment>
                            <comment id="12550154" author="ryokota" created="Mon, 10 Dec 2007 19:08:37 +0000"  >&lt;p&gt;I analyzed the numbers and there was no performance drop.  This is most likely because the synchronized block inside the if statement is not happening that often.&lt;br/&gt;
It would probably be different if the synchronized statement occurred outside of the if statement, as before.  I&apos;m guessing the previous synchronized statement&lt;br/&gt;
was commented out for performance reasons.  Unfortunately, it allows race conditions to occur now.&lt;/p&gt;</comment>
                            <comment id="12550160" author="knutanders" created="Mon, 10 Dec 2007 19:31:51 +0000"  >&lt;p&gt;The discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3024&quot; title=&quot;Validation of shared plans hurts scalability&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3024&quot;&gt;&lt;del&gt;DERBY-3024&lt;/del&gt;&lt;/a&gt; may have some comments relevant to this issue. Do you have a repro that you can share with us? Does your stress test only execute a single statement, or is there some other background load (e.g., inserts, deletes, ddl)? I think it would be good if we could understand exactly what triggers the NPE. Then it&apos;s easier to see if this is the correct way to fix it.&lt;/p&gt;</comment>
                            <comment id="12550166" author="ryokota" created="Mon, 10 Dec 2007 19:56:21 +0000"  >&lt;p&gt;Unfortunately, I don&apos;t have a test case to share with you.  Yes, there is quite a bit of other activity (inserts, deletes, selects, etc).&lt;/p&gt;

&lt;p&gt;However, looking at the code it is easy to see how such a race condition might occur.  My observations:&lt;/p&gt;

&lt;p&gt;1)  The code is failing because ps.getActivationClass returns null after a ps.rePrepare&lt;br/&gt;
2)  The only place that calls setActivationClass(null) on a ps is GenericStatement.prepMinion&lt;br/&gt;
3)  GenericStatement.prepMinion is called from GenericStatement.prepare, which is called from GenericPreparedStatement.rePrepare, so it looks like it may be a race condition between two concurrent calls to GenericPreparedStatement.rePrepare.&lt;br/&gt;
4)  If you look at other code in GenericPreparedStatement, you see the following, which indicates that it may be a good idea to synchronized on the ps when calling ps.rePrepare and then ps.getActivationClass immediately after.&lt;/p&gt;

&lt;p&gt;    public Activation getActivation(LanguageConnectionContext lcc,&lt;br/&gt;
                                    boolean scrollable)&lt;br/&gt;
        throws StandardException&lt;br/&gt;
    {&lt;br/&gt;
        Activation ac;&lt;br/&gt;
        synchronized (this) {&lt;br/&gt;
            GeneratedClass gc = getActivationClass();&lt;/p&gt;

&lt;p&gt;            if (gc == null) &lt;/p&gt;
{
                rePrepare(lcc);
                gc = getActivationClass();
            }

&lt;p&gt;            ac = new GenericActivationHolder(lcc, gc, this, scrollable);&lt;/p&gt;

&lt;p&gt;            inUseCount++;&lt;br/&gt;
        }&lt;br/&gt;
        // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2689&quot; title=&quot;Deadlock with GenericPreparedStatement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2689&quot;&gt;&lt;del&gt;DERBY-2689&lt;/del&gt;&lt;/a&gt;. Close unused activations-- this method should be called&lt;br/&gt;
        // when I&apos;m not holding a lock on a prepared statement to avoid&lt;br/&gt;
        // deadlock.&lt;br/&gt;
        lcc.closeUnusedActivations();&lt;/p&gt;

&lt;p&gt;        return ac;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;5)  I&apos;m not an expert on this code so the above is just conjecture &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12551525" author="thomanie" created="Thu, 13 Dec 2007 14:54:57 +0000"  >&lt;p&gt;Robert,&lt;/p&gt;

&lt;p&gt;Could you please post a proper patch with your proposed changes for others to test and review as well?&lt;br/&gt;
It would also be good to assign this issue to yourself to indicate that you are working on it.&lt;/p&gt;</comment>
                            <comment id="12551630" author="ryokota" created="Thu, 13 Dec 2007 22:35:55 +0000"  >&lt;p&gt;I&apos;ve attached a patch file.  I&apos;m not working on this any longer &amp;#8211; I&apos;ve suggested the fix (just two lines) and my company has successfully run hundreds of tests with it.  I would suggest someone else verify my analysis of the race condition and then commit the change.&lt;/p&gt;</comment>
                            <comment id="12555295" author="knutanders" created="Wed, 2 Jan 2008 12:49:16 +0000"  >&lt;p&gt;The fix looks correct to me. We could probably make the synchronized block even smaller, since the last part of it only modifies the state of the activation, which is not shared between statements.&lt;/p&gt;

&lt;p&gt;It would be interesting, though, if someone could shed some light on why the synchronization was commented out in the first place. This piece of code hasn&apos;t been changed since the code was donated to Apache, so the commit log doesn&apos;t tell us anything about it.&lt;/p&gt;

&lt;p&gt;The synchronization statement that is commented out, enclosed the entire if statement, whereas the suggested fix only synchronizes the body of the if statement. I&apos;m not sure, but I think this is fine, since the only risk is that we miss that someone else has recompiled/invalidated the plan, for which there are plenty of tests when we start executing the plan.&lt;/p&gt;</comment>
                            <comment id="12559472" author="knutanders" created="Wed, 16 Jan 2008 12:25:40 +0000"  >&lt;p&gt;I think this patch (d3260.diff) which narrows down the synchronization block so that it only encloses the calls to rePrepare() and getActivationClass(), is sufficient to fix the NPE, but I can&apos;t tell for sure due to the lack of a reproducible test case.&lt;/p&gt;</comment>
                            <comment id="12559967" author="dyret" created="Thu, 17 Jan 2008 15:58:08 +0000"  >&lt;p&gt;My take on this is that if your patch passes the tests (and there are no other ill effects), we should just commit it and then close the issue.&lt;br/&gt;
Should it re-surface we can always reopen, or create another issue.&lt;/p&gt;</comment>
                            <comment id="12559968" author="dyret" created="Thu, 17 Jan 2008 15:58:52 +0000"  >&lt;p&gt;Since he created the latest patch&lt;/p&gt;</comment>
                            <comment id="12560973" author="knutanders" created="Mon, 21 Jan 2008 09:49:22 +0000"  >&lt;p&gt;Committed revision 613815.&lt;/p&gt;

&lt;p&gt;Will wait a few days before I back-port the fix to 10.3.&lt;/p&gt;</comment>
                            <comment id="12561666" author="knutanders" created="Wed, 23 Jan 2008 13:22:59 +0000"  >&lt;p&gt;Merged to 10.3 (revision 614530)&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12371628" name="GenericActivationHolder.java.diff" size="821" author="ryokota" created="Thu, 13 Dec 2007 22:32:42 +0000"/>
                            <attachment id="12373268" name="d3260.diff" size="1623" author="knutanders" created="Wed, 16 Jan 2008 12:25:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Dec 2007 18:51:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23528</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0887:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35151</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10050"><![CDATA[Blocker]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>