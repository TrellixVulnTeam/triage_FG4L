<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:48:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4471/DERBY-4471.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4471] Left outer join reassociation rewrite gives wrong result</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4471</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The following script and output shows the problem:&lt;/p&gt;

&lt;p&gt;&amp;gt; create table r(c1 char(1));&lt;br/&gt;
&amp;gt; create table s(c1 char(1), c2 char(1));&lt;br/&gt;
&amp;gt; create table t(c1 char(1));&lt;/p&gt;

&lt;p&gt;&amp;gt; insert into r values &apos;a&apos;;&lt;br/&gt;
&amp;gt; insert into s values (&apos;b&apos;, default);&lt;br/&gt;
&amp;gt; insert into t values (&apos;c&apos;);&lt;/p&gt;

&lt;p&gt;&amp;gt; select * from s left outer join t on s.c2=t.c1 or s.c2 is null;&lt;/p&gt;

&lt;p&gt;C1  |C2  |C1  &lt;br/&gt;
--------------&lt;br/&gt;
b   |NULL|c   &lt;/p&gt;

&lt;p&gt;&amp;gt; select * from r left outer join s on r.c1=s.c1;&lt;br/&gt;
C1  |C1  |C2  &lt;br/&gt;
--------------&lt;br/&gt;
a   |NULL|NULL&lt;/p&gt;


&lt;p&gt;&amp;gt; select * from (r left outer join s on r.c1=s.c1) left outer join t on s.c2=t.c1 or s.c2 is null;&lt;/p&gt;

&lt;p&gt;C1  |C1  |C2  |C1  &lt;br/&gt;
-------------------&lt;br/&gt;
a   |NULL|NULL|c   &lt;/p&gt;

&lt;p&gt;&amp;gt; select * from r left outer join (s left outer join t on s.c2=t.c1 or s.c2 is null) on r.c1=s.c1;&lt;/p&gt;

&lt;p&gt;C1  |C1  |C2  |C1  &lt;br/&gt;
-------------------&lt;br/&gt;
a   |NULL|NULL|c   &lt;/p&gt;

&lt;p&gt;The last result is wrong. The correct answer should be:&lt;/p&gt;

&lt;p&gt;C1  |C1  |C2  |C1  &lt;br/&gt;
-------------------&lt;br/&gt;
a   |NULL|NULL|NULL   &lt;/p&gt;

&lt;p&gt;since in the last form, the left table r has the value &apos;a&apos;, which does&lt;br/&gt;
not match any row in result of the compound inner given the join&lt;br/&gt;
predicate (&quot;r.c1=s.c1&quot;), so all nulls should be appended to the &apos;a&apos;&lt;br/&gt;
from the outer table r.&lt;/p&gt;


&lt;p&gt;This happens because internally the last form is rewritten to the&lt;br/&gt;
second but the last form (left-deep), but this rewrite is not&lt;br/&gt;
justified here unless the join predicate on s rejects null, which the&lt;br/&gt;
present one explicitly does not (&quot;or s.c2 is null&quot;). Cf. for example&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, page 52, which describes this transform and its prerequisite&lt;br/&gt;
condition as indentity #7.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; Galindo-Legaria, C. &amp;amp; Rosenthal, A.: &quot;Outerjoin simplification and&lt;br/&gt;
reordering for query optimization&quot;, ACM Transactions on Database&lt;br/&gt;
Systems, Vol 22, No 1, March 1997.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443160">DERBY-4471</key>
            <summary>Left outer join reassociation rewrite gives wrong result</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                            <label>derby_backport_reject_10_5</label>
                    </labels>
                <created>Sat, 12 Dec 2009 00:35:54 +0000</created>
                <updated>Wed, 23 Mar 2011 14:45:29 +0000</updated>
                            <resolved>Wed, 23 Mar 2011 14:45:29 +0000</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                                    <fixVersion>10.6.2.1</fixVersion>
                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12790258" author="knutanders" created="Mon, 14 Dec 2009 17:44:04 +0000"  >&lt;p&gt;I haven&apos;t studied the details, but at least PostgreSQL agrees with Dag that (a,NULL,NULL,NULL) is the correct result.&lt;/p&gt;</comment>
                            <comment id="12791001" author="dagw" created="Tue, 15 Dec 2009 22:35:36 +0000"  >&lt;p&gt;Thanks, Knut!&lt;br/&gt;
Uploading a patch to JoinTest.java which shows the problem in JUnit form.&lt;/p&gt;</comment>
                            <comment id="12791002" author="dagw" created="Tue, 15 Dec 2009 22:43:29 +0000"  >&lt;p&gt;Seen all the way back to 10.0; not a regression.&lt;/p&gt;</comment>
                            <comment id="12886924" author="dagw" created="Fri, 9 Jul 2010 23:31:16 +0100"  >&lt;p&gt;A query in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4436&quot; title=&quot;Refactor existing in-memory back end tests and add new tests for dropping database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4436&quot;&gt;&lt;del&gt;DERBY-4436&lt;/del&gt;&lt;/a&gt; shows another example of wrong outer join reordering.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4736?focusedCommentId=12886105&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12886105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-4736?focusedCommentId=12886105&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12886105&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;select * from (t2 left join (t3 left outer join t4 on 1=1) on t2.x = t3.x)  &lt;/p&gt;

&lt;p&gt;          loj t2.x=t3.x&lt;br/&gt;
          /  \&lt;br/&gt;
         /    \&lt;br/&gt;
        t2    loj 1=1&lt;br/&gt;
              /  \&lt;br/&gt;
             /    \&lt;br/&gt;
            t3    t4&lt;/p&gt;

&lt;p&gt;is rewritten to:&lt;/p&gt;

&lt;p&gt;select * from ((t2 left join t3 on t2.x = t3.x) left join t4 on 1=1);&lt;/p&gt;

&lt;p&gt;              loj 1=1&lt;br/&gt;
              / \&lt;br/&gt;
             /   t4&lt;br/&gt;
            /&lt;br/&gt;
           loj t2.x=t3.x&lt;br/&gt;
          /   \&lt;br/&gt;
         /     \&lt;br/&gt;
       t2     t3&lt;/p&gt;

&lt;p&gt;which also gives a wrong result, cf. analysis in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4736&quot; title=&quot;ASSERT FAIL when code generating a column reference in a join predicate in presence of other outer join reordering&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4736&quot;&gt;&lt;del&gt;DERBY-4736&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12887197" author="nirmal" created="Sun, 11 Jul 2010 15:32:09 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I sincerely hope that this PDF (created using &lt;br/&gt;
screen shots of the query plan imported&lt;br/&gt;
by PlanExporter tool (Derby-4587))&lt;br/&gt;
helps you to get an idea of what&apos;s happening.&lt;br/&gt;
If you like any other data in Xplain tables appear in the&lt;br/&gt;
plan, please suggest.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12887556" author="dagw" created="Mon, 12 Jul 2010 22:52:26 +0100"  >&lt;p&gt;Thanks, Nirmal! &lt;/p&gt;</comment>
                            <comment id="12888665" author="dagw" created="Thu, 15 Jul 2010 02:33:52 +0100"  >&lt;p&gt;Attaching a first patch for this issue. It tighens up the criterion&lt;br/&gt;
used for determining whether outer join reordering is allowed. I have&lt;br/&gt;
tocuhed most of HalfOuterJoinNode#LOJ_reorderable, so to review it may&lt;br/&gt;
be best to have a full copy of before/after since the diff is a bit&lt;br/&gt;
hard to read.&lt;/p&gt;

&lt;p&gt;The new criterion looks inside the null-producing child of the OJ&lt;br/&gt;
(the LOJ&apos;s right side) and inspects its join predicate. Previously,&lt;br/&gt;
something like 1=1 would pass muster, but as we have seen this gives&lt;br/&gt;
wrong results.&lt;/p&gt;

&lt;p&gt;As before, we require that the top join predicate is of the form&lt;br/&gt;
L.X=R.y and additionally that R.y not reference the child OJ&apos;s&lt;br/&gt;
null-preserving side.&lt;/p&gt;

&lt;p&gt;Additionally, we now require that the child OJ&apos;s join predicate also&lt;br/&gt;
have the form L.x = R.y, discarding for example 1=1. See the code&lt;br/&gt;
comments for details,&lt;/p&gt;

&lt;p&gt;I also made a new Javadoc to clarify what the method does.&lt;/p&gt;

&lt;p&gt;I have factored out the check for join predicate of the form&lt;br/&gt;
L.x = R.y to a new private method, isLeftRightEquiJoin.&lt;/p&gt;

&lt;p&gt;New tests have been added to OuterJoinTest that test for query&lt;br/&gt;
correctness and that the expected reorderings occur when they should.&lt;/p&gt;

&lt;p&gt;Note also the current limitations I found in the code:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Only left outer joins are considered&lt;/li&gt;
	&lt;li&gt;Top left side must be a base table&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have not removed these.  I have filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4742&quot; title=&quot;Make outer join reordering work for right outer joins&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4742&quot;&gt;DERBY-4742&lt;/a&gt; for also&lt;br/&gt;
considering right outer joins.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="12888837" author="dagw" created="Thu, 15 Jul 2010 16:57:19 +0100"  >&lt;p&gt;The old style test lang/lojreorder.sql broke, so it seems my tightening up has removed some reorderings&lt;br/&gt;
which were previously asserted to happen. Investigating.&lt;/p&gt;</comment>
                            <comment id="12889541" author="dagw" created="Sat, 17 Jul 2010 23:26:22 +0100"  >&lt;p&gt;Actually, the my first patch was both too liberal (due to bug) and too&lt;br/&gt;
restrictive (design). I instrumented the code to show when reorderings&lt;br/&gt;
took place before and after.&lt;/p&gt;

&lt;p&gt;Uploading version 1c of this patch. It now allows all correct&lt;br/&gt;
reorderings that the old implementation did, but still fixes the wrong&lt;br/&gt;
ones seen in this issue. In addition, it opens up for reordering in a&lt;br/&gt;
few cases where the old implementation did not, by improving the&lt;br/&gt;
analysis for null rejecting join predicates, cf. the equation&lt;br/&gt;
mentioned in the paper by Galindo-Legaria et al:&lt;/p&gt;

&lt;p&gt;  Prs     Pst            Prs     Pst&lt;br/&gt;
R ---&amp;gt; (S ---&amp;gt; T)  == (R ---&amp;gt; S) ---&amp;gt; T&lt;/p&gt;

&lt;p&gt;where ---&amp;gt; is (left) outer join, Pxy is a null rejecting join predicate.&lt;/p&gt;

&lt;p&gt;The old implementation, as well as my previous version of this patch,&lt;br/&gt;
required equality operators, but the new implementation allows for the&lt;br/&gt;
other relational operators as well that also deny nulls, of this form&lt;br/&gt;
(the join predicate is in CNF at this time in processing):&lt;/p&gt;

&lt;p&gt;       X relop Y &lt;span class=&quot;error&quot;&gt;&amp;#91;and .. and X-n relop Y-n&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where at least one relop refers to columns from both R,S or S,T. &lt;/p&gt;

&lt;p&gt;Note that the predicate analysis could be liberalized even more at the&lt;br/&gt;
cost of a more sophisticated analysis, e.g. &quot;R.x1 = S.y1 OR R.x2 = S.y2&quot;&lt;br/&gt;
would be safe, but disjunction (OR) is currently not accepted.&lt;/p&gt;

&lt;p&gt;The major problem with the old implementation was that, although it&lt;br/&gt;
did check that Prs did not reference T, it did not assert Pst.&lt;/p&gt;

&lt;p&gt;New test cases have been added to OuterJoinTest that pass with the new&lt;br/&gt;
implementation, but gave wrong results with the old, cf. fixtures&lt;br/&gt;
OuterJoinTest#testDerby_4471a and OuterJoinTest#testDerby_4471b().&lt;/p&gt;

&lt;p&gt;The old style test lojreorder.sql has been converted to the JUnit test&lt;br/&gt;
LojReorderTest. The test cases that now reorder and did not before,&lt;br/&gt;
are annotated in LojReorderTest, look for the string 4471, or cf the&lt;br/&gt;
list below.&lt;/p&gt;

&lt;p&gt;I added a couple of new methods to be able to assert contents in the&lt;br/&gt;
execution plan, to make it convenient to verify that the reorderings&lt;br/&gt;
actually took place, cf. JDBC.checkPlan and&lt;br/&gt;
RuntimeStatisticsParser#assertSequence.&lt;/p&gt;

&lt;p&gt;Since HalfOuterJoinNode#LOJ_reorderable has largely been rewritten, it&lt;br/&gt;
would probably be best to review the changes by looking at the old and&lt;br/&gt;
the new versions in full. The  predicate checking has been factored&lt;br/&gt;
out in the method isNullRejecting.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Appendix&amp;#93;&lt;/span&gt;&lt;br/&gt;
New reorderings from lojreorder.sql. All compute correctly as before.&lt;/p&gt;

&lt;p&gt;After conversion to JUnit, I have added assertions on the query plans to&lt;br/&gt;
show that these reordering now actually take place.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select * from t left outer join (s left outer join r on (f = i)) on (b = e and a &amp;gt; b)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select * from t left outer join (s left outer join r on (f = i)) on (b = e and a = b);&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select * from t left outer join (s left outer join r on (f = i)) on (b = e and 1 = 1)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select * from t left outer join (s left outer join r on (f = i)) on (b &amp;gt; e)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Makes case 1.13 work: the test says its reordered, but actually it&lt;br/&gt;
  is not (the &quot;and 1=1&quot; threw old impl off).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Case 1.15 now reorders (&quot;on b1&amp;gt;c1&quot; is ok) - Note to self: update comment.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Makes case 1.31 work, now reorders twice, earlier none (&quot;on a1=b1 and b2=2&quot;&lt;br/&gt;
  threw old impl off).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12890270" author="rhillegas" created="Tue, 20 Jul 2010 15:33:59 +0100"  >&lt;p&gt;Thanks for the patch, Dag. I think that this will be a big step forward in clarifying and cleaning up our implementation of outer joins. It would be helpful for me if HalfOuterJoinNode (or some other source file) contained a tidy, comprehensive explanation of the rules which determine when a nested outer join can be pre-processed into an inner join. I don&apos;t think we need all of the rules, just the rules which we apply. The references to Galindo-Legaria are helpful but it would be nice to be able to read this code without having to flip back and forth to an external text. Thanks.&lt;/p&gt;</comment>
                            <comment id="12899561" author="dagw" created="Tue, 17 Aug 2010 21:22:22 +0100"  >&lt;p&gt;Thanks for looking at this, Rick. &lt;/p&gt;

&lt;p&gt;The thrust of this patch is not transformation of outer join to &lt;b&gt;inner&lt;/b&gt; join, but rather reassociating one form of left outer join (right deep) to another form of left outer join (left deep). The new Javadoc for HalfOuterJoinNode#LOJ_reorderable and HalfOuterJoinNode#isNullRejecting&lt;br/&gt;
is intended to explain how this now works. If you find this confusing, let me know and I&apos;ll try to improve it.&lt;/p&gt;

&lt;p&gt;As for the transformation of outer join to inner join (HalfOuterJoinNode#transformOuterJoins), this patch doesn&apos;t touch that, but the condition is related: The must exist a null intolerant predicate on the inner table.&lt;/p&gt;</comment>
                            <comment id="12901466" author="dagw" created="Mon, 23 Aug 2010 17:27:28 +0100"  >&lt;p&gt;One note about the conversion of lojreorder.sql to JUnit: The old test&apos;s master contains several occurence of this warning on the result sets:&lt;/p&gt;

&lt;p&gt;WARNING 01003: Null values were eliminated from the argument of a column function.&lt;/p&gt;

&lt;p&gt;Our JUnit idiom for asserting result sets, assertFullResultSet ignores such warnings. I could either&lt;/p&gt;

&lt;p&gt;a) go ahead and ignore these warnings in the JUnit test&lt;br/&gt;
b) inspect those particar result sets &quot;manually&quot; (tedious, quite a lot)&lt;br/&gt;
c) make a new variant of assertFullResultSet which allows one to specify expected warnings&lt;/p&gt;

&lt;p&gt;Opinions?&lt;/p&gt;</comment>
                            <comment id="12902954" author="lilywei" created="Thu, 26 Aug 2010 18:44:07 +0100"  >&lt;p&gt;I will go for option c). It gives you the freedom to recognize the expected behavior with a warning. Also, it leaves room for lots of comments for further development down the road. And, we will have computer to do the filter work for us. However, the warning could be over look. &lt;/p&gt;</comment>
                            <comment id="12903557" author="dagw" created="Fri, 27 Aug 2010 20:30:56 +0100"  >&lt;p&gt;Thanks for considering this, Lily. I agree, so I made a new variant of the assertFullResultSet method and&lt;br/&gt;
used that in the relevant places in LojReorderTest. Uploading a new version of the patch containing this change + some minor code cleanups and Javacoc improvements. Re-running regressions.&lt;/p&gt;

&lt;p&gt;Note: Due to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-159&quot; title=&quot;When Derby runs in Network Server mode, client does not receive warnings generated by Derby - should get documented&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-159&quot;&gt;&lt;del&gt;DERBY-159&lt;/del&gt;&lt;/a&gt; (I think), the client doesn&apos;t consistently return the warnings, so the assertion method currently does its thing only when running with the embedded client. I made notes of this in the code and in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-159&quot; title=&quot;When Derby runs in Network Server mode, client does not receive warnings generated by Derby - should get documented&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-159&quot;&gt;&lt;del&gt;DERBY-159&lt;/del&gt;&lt;/a&gt;, so we can change this if/when this bug is fixed.&lt;/p&gt;</comment>
                            <comment id="12903691" author="dagw" created="Fri, 27 Aug 2010 23:38:28 +0100"  >&lt;p&gt;Committed derby-4471-1d as svn 990292, resolving.&lt;/p&gt;</comment>
                            <comment id="12910317" author="dagw" created="Thu, 16 Sep 2010 21:58:32 +0100"  >&lt;p&gt;Merged back to 10.6 branch as svn 997924.&lt;/p&gt;</comment>
                            <comment id="13007146" author="kmarsden" created="Tue, 15 Mar 2011 20:23:52 +0000"  >&lt;p&gt;reopen to add backport reject label&lt;/p&gt;</comment>
                            <comment id="13010154" author="dagw" created="Wed, 23 Mar 2011 14:45:29 +0000"  >&lt;p&gt;Closing again, the tag has been added.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12468737">DERBY-4736</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12469093">DERBY-4742</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12467824">DERBY-4712</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12449521" name="derby-4471-1a.diff" size="98218" author="dagw" created="Thu, 15 Jul 2010 02:33:52 +0100"/>
                            <attachment id="12449522" name="derby-4471-1a.stat" size="246" author="dagw" created="Thu, 15 Jul 2010 02:33:52 +0100"/>
                            <attachment id="12449568" name="derby-4471-1b.diff" size="105130" author="dagw" created="Thu, 15 Jul 2010 18:19:11 +0100"/>
                            <attachment id="12449569" name="derby-4471-1b.stat" size="246" author="dagw" created="Thu, 15 Jul 2010 18:19:11 +0100"/>
                            <attachment id="12449770" name="derby-4471-1c.diff" size="2158514" author="dagw" created="Sat, 17 Jul 2010 23:26:21 +0100"/>
                            <attachment id="12449771" name="derby-4471-1c.stat" size="728" author="dagw" created="Sat, 17 Jul 2010 23:26:22 +0100"/>
                            <attachment id="12453265" name="derby-4471-1d.diff" size="2157455" author="dagw" created="Fri, 27 Aug 2010 20:30:55 +0100"/>
                            <attachment id="12453266" name="derby-4471-1d.stat" size="648" author="dagw" created="Fri, 27 Aug 2010 20:30:56 +0100"/>
                            <attachment id="12428091" name="derby-4471-junit-repro.diff" size="3873" author="dagw" created="Tue, 15 Dec 2009 22:35:36 +0000"/>
                            <attachment id="12449188" name="query_plan_derby_4471.pdf" size="78903" author="nirmal" created="Sun, 11 Jul 2010 15:32:08 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 14 Dec 2009 17:44:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24280</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36623</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>