<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:45:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5752/DERBY-5752.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5752] LOBStreamControl should materialize less aggressively</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5752</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The constructor LOBStreamControl(EmbedConnection, byte[]) always makes the buffer size equal to the LOB size, effectively creating an extra, fully materialized copy of the LOB in memory.&lt;/p&gt;

&lt;p&gt;I think the assumption here is that a LOB that&apos;s already materialized is a small one. That is, LOBs that are smaller than 32 KB and fit in a single page are typically materialized when read from store. However, we sometimes materialize LOBs that are a lot bigger than 32 KB. For example, triggers that access LOBs may materialize them regardless of size (see comment in DMLWriteResultSet&apos;s constructor for details). For these large LOBs, it sounds unreasonable to allocate a buffer of the same size as the LOB itself.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest that we change the constructor so that it never allocates a buffer larger than 32KB. That would mean that the behaviour is preserved for all LOBs fetched directly from store (only LOBs that don&apos;t fit in a single page will cause temporary files to be created), whereas we&apos;ll prevent large LOBs accessed by triggers from being duplicated in memory by overflowing to temporary files.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12554488">DERBY-5752</key>
            <summary>LOBStreamControl should materialize less aggressively</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 May 2012 14:15:52 +0100</created>
                <updated>Mon, 17 Jun 2013 10:27:20 +0100</updated>
                            <resolved>Tue, 19 Feb 2013 13:57:50 +0000</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13271576" author="knutanders" created="Wed, 9 May 2012 17:46:33 +0100"  >&lt;p&gt;I experimented with the attached buffsize.diff patch (not for commit), which simply sets the buffer size to LOBStreamControl.DEFAULT_MAX_BUF_SIZE (4K) regardless of the size of the LOB. With that patch, the heap requirement for TriggerTest, which works on some large LOBs that get materialized, went down from 110MB to 85MB. (I ran this experiment on sources that had been patched for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5751&quot; title=&quot;Make TriggerTest less hungry on heap space&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5751&quot;&gt;&lt;del&gt;DERBY-5751&lt;/del&gt;&lt;/a&gt;, which already had reduced the heap requirements from 140MB to 110MB.) suites.All also passed with these changes.&lt;/p&gt;

&lt;p&gt;This is not the approach I&apos;m planning to take in the final patch. I intend to make the buffer size dynamic based on the LOB size, as it is today, but have a maximum size of 32KB.&lt;/p&gt;

&lt;p&gt;Since the constructor in question is only used when the underlying LOB value is materialized before the EmbedBlob is instantiated, and LOBs larger than 32KB are typically not materialized at that point, I think the suggested approach would only affect the cases where&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the LOB is used in a trigger&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getBytes() has been called on the column before getBlob() (this case was in fact something we considered disallowing in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5489&quot; title=&quot;getBinary() returns incorrect data after getObject() call on BLOB column&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5489&quot;&gt;&lt;del&gt;DERBY-5489&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In those two cases, if the LOB is larger than 32KB, the LOBStreamControl instance will overflow to temporary files instead of buffering the entire LOB in memory, if the suggested approach is implemented.&lt;/p&gt;</comment>
                            <comment id="13272179" author="knutanders" created="Thu, 10 May 2012 09:21:33 +0100"  >&lt;p&gt;Resolved the wrong issue. Reopening.&lt;/p&gt;</comment>
                            <comment id="13272193" author="knutanders" created="Thu, 10 May 2012 09:33:24 +0100"  >&lt;p&gt;I added an assert to the constructor and made it fail on attempts to set a buffer size greater than 32K. This exposed a third case in which larger LOBs are materialized:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;LOBs will be be materialized if the results need to go through sorting (even when not sorting on the LOB column)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13273173" author="knutanders" created="Fri, 11 May 2012 12:08:05 +0100"  >&lt;p&gt;The attached patch, d5752-1a.diff, changes LOBStreamControl&apos;s constructor so that it doesn&apos;t materialize LOBs larger than 32 KB in memory. It also adds a test case to BlobMemTest, which fails with an OOME without the fix.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly. However, I noticed that BlobClob4BlobTest took significantly longer with the patch. Specifically, the time it took to run test case testPositionAgressive() in an encrypted database increased from 20 seconds to more than 4 minutes. I look into it and try to find out why this particular test case gets so much slower.&lt;/p&gt;</comment>
                            <comment id="13576651" author="knutanders" created="Tue, 12 Feb 2013 14:49:23 +0000"  >&lt;p&gt;I had forgotten about this...&lt;/p&gt;

&lt;p&gt;Now when I rerun the tests, I am not able to reproduce the big difference I saw in BlobClob4BlobTest in the first test run. I do still see a difference, but it&apos;s more like 165 seconds vs 180 seconds for the full BlobClob4BlobTest. As before, it looks like the entire difference is caused by testPositionAgressive() in an encrypted database, which slowed down from 7 seconds to 23 seconds in my environment. There is no difference in that test case on unencrypted databased.&lt;/p&gt;

&lt;p&gt;The test case in question inserts a number of CLOBs, some of which are greater than the 32k limit for materialization, into a table. However, the query that reads the CLOBs is ordered on one of the non-CLOB columns, and the sorting materializes all the columns in the result. It eventually scans through the fetched CLOBs using Clob.position().&lt;/p&gt;

&lt;p&gt;The performance difference is seen because the java.sql.Clob objects fetched from the result set are no longer fully materialized in memory with the patch, unless they are smaller than 32k. For the big objects, this means that each call to Clob.position() will have to read temporary files and decrypt the contents in order to search for the substring. Without the patch, the entire value would live unencrypted in memory, which makes position() a much cheaper operation.&lt;/p&gt;

&lt;p&gt;I think this is an expected difference, and that it is acceptable since the CLOB wasn&apos;t supposed to be materialized in this scenario in the first place. Of course, the current limit for materialization might not be optimal for all applications, as materialization indeed could improve performance of some operations if the system has enough memory. Increasing the limit or making it tunable might be a useful improvement, but it&apos;s outside the scope of this issue.&lt;/p&gt;</comment>
                            <comment id="13576655" author="knutanders" created="Tue, 12 Feb 2013 14:54:35 +0000"  >&lt;p&gt;Setting the Patch Available flag since reruns of the regression tests did not show the big performance degradation indicated by the initial test run.&lt;/p&gt;</comment>
                            <comment id="13581285" author="knutanders" created="Tue, 19 Feb 2013 13:57:50 +0000"  >&lt;p&gt;Committed revision 1447722.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12634031">DERBY-6092</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12526181" name="buffsize.diff" size="613" author="knutanders" created="Wed, 9 May 2012 17:46:33 +0100"/>
                            <attachment id="12526509" name="d5752-1a.diff" size="5896" author="knutanders" created="Fri, 11 May 2012 12:08:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238730</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09vz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35420</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>