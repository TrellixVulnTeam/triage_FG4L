<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:11:17 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3527/DERBY-3527.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3527] The slave will not notice that a network cable is unplugged and will therefore reject failover/stopSlave commands</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3527</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If a network cable between the master and slave is unplugged (or a switch crashes etc), ObjectInputStream#readObject will not get an exception. Neither the socket nor the input stream can be queried for information on whether or not the connection is working. AFAIK, the only way to find out if the network is down is to send a message.&lt;/p&gt;

&lt;p&gt;The slave commands stopSlave and failover are rejected if the network connection is working. To be absolutely sure that the connection is working, we need to ping the master when these commands are requested.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12390851">DERBY-3527</key>
            <summary>The slave will not notice that a network cable is unplugged and will therefore reject failover/stopSlave commands</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jorgenlo">J&#248;rgen L&#248;land</assignee>
                                    <reporter username="jorgenlo">J&#248;rgen L&#248;land</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 Mar 2008 14:47:39 +0000</created>
                <updated>Wed, 2 Jun 2010 12:13:13 +0100</updated>
                            <resolved>Wed, 2 Apr 2008 12:48:25 +0100</resolved>
                                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Replication</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12578802" author="jorgenlo" created="Fri, 14 Mar 2008 15:18:50 +0000"  >&lt;p&gt;Patch 1a checks if the network connection is up by sending a ping message from the slave to the master. The shipment of the message has to happen in a separate thread because TCP timeout for send message is 2 minutes, not configurable. Also added a message reader thread on the master that currently accepts two kinds of messages: ping and ack. This receiver thread should later be modified to also accept other messages from the slave - like &quot;slave is stopped due to a system shutdown&quot;.&lt;/p&gt;

&lt;p&gt;I have tested the patch by hand on two computers. I have tried to pull the plug, and this patch fixes the reported problem (i.e., failover after pulled plug is accepted only with the patch applied). The replication test suite passed; currently running the other tests.&lt;/p&gt;

&lt;p&gt;Requesting review.&lt;/p&gt;</comment>
                            <comment id="12579845" author="jorgenlo" created="Tue, 18 Mar 2008 13:43:34 +0000"  >&lt;p&gt;All tests passed except testStartStopManagementFromApplication, which has also been reported in tinderbox.&lt;/p&gt;</comment>
                            <comment id="12581949" author="oysteing" created="Tue, 25 Mar 2008 14:14:22 +0000"  >&lt;p&gt;Thanks for the patch, J&#248;rgen.  Here are my comments:&lt;/p&gt;

&lt;p&gt;1. There seems to be some asymmetry between master and slave with&lt;br/&gt;
   respect to what is handled by the controllers and the&lt;br/&gt;
   ReplicationMessage classes.  For example, the timeout of the&lt;br/&gt;
   new threads are handled by the ReplicationMessageTransmitter on the&lt;br/&gt;
   master side, but by the SlaveController on the slave side.  I think&lt;br/&gt;
   it would be easier to understand the code if the design was more&lt;br/&gt;
   symmetric.&lt;/p&gt;

&lt;p&gt;2. ReplicationMessageTransmit:&lt;/p&gt;

&lt;p&gt;   a. With this patch there will now be two paths for sending a&lt;br/&gt;
      message and waiting for an ack.  I think the class would be less&lt;br/&gt;
      complex if the new approach was also used for the initial&lt;br/&gt;
      messages. Would this be possible?  I think you also should&lt;br/&gt;
      consider whether all verification of acks could be done in a&lt;br/&gt;
      single method.&lt;/p&gt;

&lt;p&gt;   b. I would be good if you could add some javadoc that gives the&lt;br/&gt;
      motivation for a separate thread for receiving messages.&lt;/p&gt;

&lt;p&gt;   c. Following the pattern of the other thread names, the database&lt;br/&gt;
      name should also be included for derby.master.receiver&lt;/p&gt;

&lt;p&gt;3. For the SlaveController/ReplicationMesssageReceive part, it is a&lt;br/&gt;
   bit confusing what responsibility lies in what class.  For example,&lt;br/&gt;
   both classes has a pingSemaphore for &quot;synchronization of the ping&lt;br/&gt;
   thread.&quot;  Is that strictly necessary?  It seems to me that more of&lt;br/&gt;
   the logic should be moved into ReplicationMesssageReceive.&lt;/p&gt;

&lt;p&gt;4. ReplicationMessageReceive#pingMaster: javadoc describes a return&lt;br/&gt;
   value, but method is void.&lt;/p&gt;

</comment>
                            <comment id="12582536" author="jorgenlo" created="Thu, 27 Mar 2008 07:39:56 +0000"  >&lt;p&gt;Attaching patch 1b, addressing &#216;ysteins comments.&lt;/p&gt;

&lt;p&gt;The most important modifications are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Ping/pong messages are only of interest to the replication network layer. They are therefore filtered out and handled internally in ReplicationMessageReceive.&lt;/li&gt;
	&lt;li&gt;All message receiving is now done through the new thread on the master. I also made readMessage a method of the inner class (i.e. the receiver thread) to reflect that only the thread should listen on the nw. With patch 1b, the only way to get a response message from the slave is through the sendMessageWaitForReply method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests (including replication suite) passed.&lt;/p&gt;</comment>
                            <comment id="12582633" author="oysteing" created="Thu, 27 Mar 2008 12:55:26 +0000"  >&lt;p&gt;Thanks for the new patch, J&#248;rgen.  I think the structure of the code&lt;br/&gt;
is looking very good now.  I still have some comments, though.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ReplicationMessageTransmit#sendMessageWaitForReply:&lt;br/&gt;
   The block synchronized on receiveSemaphore could be made smaller.&lt;br/&gt;
   Since the method is synchronized so that only one thread can be&lt;br/&gt;
   executing it at a time, I do not think you need to synchronize the&lt;br/&gt;
   setting of receivedMsg to null.  It is not read by other methods,&lt;br/&gt;
   so as long as it is done before sending the message, I do not see&lt;br/&gt;
   any potential conflicts with the MasterReceiverThread. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As it is now, if a the wait times out, I do not think you will be&lt;br/&gt;
   able to recover the connection.  Another call on&lt;br/&gt;
   sendMessageWaitForReply will result in two outstanding replies, and&lt;br/&gt;
   that is not currently taken into account.  It may be sufficient to&lt;br/&gt;
   just make sure that all users handles the situation correctly when&lt;br/&gt;
   this happens, but I think it would be more safe to take down the&lt;br/&gt;
   connection when this happens.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think there will be a null pointer exception if the slave does&lt;br/&gt;
   not reply in time during initialization of the connection.&lt;br/&gt;
   brokerConnection/VeryMessageType is not prepared to handle that&lt;br/&gt;
   sendMessageWaitForReply returns null.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ReplicationMessageTransmit#tearDown: I think socketConn needs to be&lt;br/&gt;
   set to null in order for checkSocketConnection to serve its&lt;br/&gt;
   purpose.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ReplicationMessageReceive:&lt;br/&gt;
   pingSemaphore is really used for two purposes: &lt;br/&gt;
     1. To wait until it is time to send a ping message&lt;br/&gt;
     2. To wait until a pong message has arrived.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   When a pong message arrives and notify() is called, there will most&lt;br/&gt;
   likely be two threads waiting, the thread waiting for the pong,&lt;br/&gt;
   and the pingThread waiting for the next time to send ping.  It is&lt;br/&gt;
   not deterministic which thread will be notified.  Hence, there is a&lt;br/&gt;
   risk that more than one ping is sent per request.&lt;/p&gt;

&lt;p&gt;   I think this can be fixed by either using different monitors or by&lt;br/&gt;
   not sending a ping if a valid reply has been received (i.e.,&lt;br/&gt;
   connectionConfirmed == true).  I think the latter alternative also&lt;br/&gt;
   requires that notifyAll() is called when a pong message arrives.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ReplicationMessageReceive#readMessage:&lt;br/&gt;
   I think this method needs to handle that two pongs arrive in&lt;br/&gt;
   sequence.  The way it is now, the second pong will be returned to&lt;br/&gt;
   the caller.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;connectionConfirmed seems to be protected by pingSemaphore.  Hence,&lt;br/&gt;
   I do not think it needs to be volatile.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SlavePingThread#run, comment at the end:&lt;br/&gt;
   I guess you mean isConnectedToMaster.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12582933" author="jorgenlo" created="Fri, 28 Mar 2008 07:37:33 +0000"  >&lt;p&gt;Thank you for reviewing. Patch 1c addresses your comments.&lt;/p&gt;

&lt;p&gt;Most important differences:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Instead of returning null, sendMessageWaitForReply now raises an exception if it does not receive a reply message&lt;/li&gt;
	&lt;li&gt;readMessage is recursive, and therefore handles any number of subsequent pong messages (i.e., not changed)&lt;/li&gt;
	&lt;li&gt;ReplicationMessageReceive - I now use one monitor to send ping and one to wait for pong.&lt;/li&gt;
	&lt;li&gt;With the newly introduced monitor, connectionConfirmed is not protected by receivePongSemaphore in all cases. Leaving it volatile&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests passed. Requesting review.&lt;/p&gt;</comment>
                            <comment id="12583622" author="oysteing" created="Mon, 31 Mar 2008 11:23:15 +0100"  >&lt;p&gt;Thanks, J&#248;rgen. I think the changes on the master side looks good.&lt;br/&gt;
I am still trying to understand the issues around synchronization in ReplicationMessageReceive.&lt;/p&gt;

&lt;p&gt;I wonder whether the following scenario could occur: isConnectedToMaster is called. Thread notifies ping thread which sends ping, but when it is to get the receivePongSemaphore, it has already been acquired by readMessage which reads the pong and calls notify before the isConnectedToMaster has started to wait. I think this could lead to a false conclusion that the master is down.&lt;/p&gt;</comment>
                            <comment id="12583640" author="jorgenlo" created="Mon, 31 Mar 2008 12:21:48 +0100"  >&lt;p&gt;What could happen with patch 1c is that the thread calling isConnected... would have to wait for 5 seconds before returning a connection confirmed message instead of returning this immediately. But I agree - this possibility should be removed. Patch 1d addresses this. Replication test suite passed (no non-replication code affected). Requesting review.&lt;/p&gt;</comment>
                            <comment id="12583700" author="oysteing" created="Mon, 31 Mar 2008 15:22:05 +0100"  >&lt;p&gt;Thanks, J&#248;rgen.  Committed patch id at revision 642982.&lt;/p&gt;</comment>
                            <comment id="12584526" author="oysteing" created="Wed, 2 Apr 2008 12:48:25 +0100"  >&lt;p&gt;Fix merged to 10.4 branch at revision 643861.&lt;/p&gt;</comment>
                            <comment id="12874544" author="kristwaa" created="Wed, 2 Jun 2010 12:13:13 +0100"  >&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12394529">DERBY-3639</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12377912" name="derby-3527-1a.diff" size="18489" author="jorgenlo" created="Fri, 14 Mar 2008 15:18:50 +0000"/>
                            <attachment id="12377913" name="derby-3527-1a.stat" size="544" author="jorgenlo" created="Fri, 14 Mar 2008 15:18:50 +0000"/>
                            <attachment id="12378686" name="derby-3527-1b.diff" size="24796" author="jorgenlo" created="Thu, 27 Mar 2008 07:39:56 +0000"/>
                            <attachment id="12378685" name="derby-3527-1b.stat" size="544" author="jorgenlo" created="Thu, 27 Mar 2008 07:39:56 +0000"/>
                            <attachment id="12378774" name="derby-3527-1c.diff" size="26622" author="jorgenlo" created="Fri, 28 Mar 2008 07:37:33 +0000"/>
                            <attachment id="12378775" name="derby-3527-1c.stat" size="671" author="jorgenlo" created="Fri, 28 Mar 2008 07:37:33 +0000"/>
                            <attachment id="12378946" name="derby-3527-1d.diff" size="27253" author="jorgenlo" created="Mon, 31 Mar 2008 12:21:48 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Mar 2008 14:14:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23690</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0q5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38057</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>