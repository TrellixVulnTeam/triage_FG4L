<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:53:16 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2074/DERBY-2074.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2074] NullPointerException when two threads load sort factory concurrently</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2074</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>
&lt;p&gt;12:34:45,323 ERROR &lt;span class=&quot;error&quot;&gt;&amp;#91;pool-1-thread-3&amp;#93;&lt;/span&gt; history.helpers.HistoryDataAccessHelper - failed to read measurements, filter = (fromTime=Mon Nov 06 12:34:00 MSK 2006, toTime=Mon Nov 13 12:34:00 MSK 2006, , properties=2-6-2-value) org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL &lt;span class=&quot;error&quot;&gt;&amp;#91;SELECT COUNT(DISTINCT sshis.measurement_time) FROM sshis_property_measurement sshis INNER JOIN sstmp_filter_3 filtertbl ON sshis.property_id = filtertbl.property_id WHERE sshis.measurement_time &amp;gt;= ? AND sshis.measurement_time &amp;lt; ?&amp;#93;&lt;/span&gt;; SQL state &lt;span class=&quot;error&quot;&gt;&amp;#91;XJ001&amp;#93;&lt;/span&gt;; error code &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;; Java exception:&apos;:&lt;br/&gt;
 java.lang.NullPointerException&apos;.; nested exception is&lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedSQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at java.util.Hashtable.put(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.registerAccessMethod(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransaction.createSort(UnknownSource)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:535)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:476)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:528)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:561)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:579)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:589)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:619)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.queryForObject(JdbcTemplate.java:629)&lt;br/&gt;
        at org.springframework.jdbc.core.JdbcTemplate.queryForInt(JdbcTemplate.java:656)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.MeasurementsSaveGetHelper.getMeasurements(MeasurementsSaveGetHelper.java:81)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper$7.doInTransaction(HistoryDataAccessHelper.java:315)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper$7.doInTransaction(HistoryDataAccessHelper.java:314)&lt;br/&gt;
        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:117)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.helpers.HistoryDataAccessHelper.getMeasurements(HistoryDataAccessHelper.java:313)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.asyncread.MeasurementsReadTask.executeTask(MeasurementsReadTask.java:127)&lt;br/&gt;
        at com.meshnetics.wsn.ctrl.dispatcher.services.history.asyncread.MeasurementsReadTask.run(MeasurementsReadTask.java:97)&lt;br/&gt;
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)&lt;br/&gt;
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)&lt;br/&gt;
        at java.util.concurrent.FutureTask.run(Unknown Source)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)&lt;br/&gt;
        at java.lang.Thread.run(Unknown Source)&lt;/p&gt;</description>
                <environment>WinXP Professional, Java 1.5.0_06</environment>
        <key id="12355451">DERBY-2074</key>
            <summary>NullPointerException when two threads load sort factory concurrently</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="akovylin">Kovylin Alexandr</reporter>
                        <labels>
                    </labels>
                <created>Mon, 13 Nov 2006 10:55:03 +0000</created>
                <updated>Fri, 21 Jan 2011 17:49:28 +0000</updated>
                            <resolved>Sun, 28 Jun 2009 15:44:51 +0100</resolved>
                                    <version>10.1.3.1</version>
                                    <fixVersion>10.5.2.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12648337" author="kmarsden" created="Mon, 17 Nov 2008 21:09:55 +0000"  >&lt;p&gt;This is a very old bug.  It was in component newcomer instead of store so didn&apos;t show up in the normal code bugs report.  Do you have any information on how to reproduce?  If not I will close it CannotReproduce.&lt;/p&gt;</comment>
                            <comment id="12662443" author="kmarsden" created="Fri, 9 Jan 2009 17:43:30 +0000"  >&lt;p&gt;Has there been any progress in getting a reproduction for this issue.  If not, perhaps we should close it Cannot Reproduce and then reopen when we have a repro.&lt;/p&gt;</comment>
                            <comment id="12720021" author="heftrich_exec" created="Tue, 16 Jun 2009 10:50:54 +0100"  >&lt;p&gt;We experience this error on some installations at our customers. The error occurs only directly after starting the software during initialization. Problem is that it&apos;s not always reproducible, only about every third startup. Now I am able to reproduce it on a test system at our site as well. Is there a possibility for me to activate some logging or using a debug version of derby to shed some light on the problem?  The error also occurs with one database only. This DB has a size of about 100MB. The statement that is causing the problem is always the same. It is joining two large tables, but the output of the statement would be no row at all. Currently we are using 10.5.1.1, but we had the same error with 10.3.&lt;/p&gt;</comment>
                            <comment id="12720083" author="knutanders" created="Tue, 16 Jun 2009 12:56:27 +0100"  >&lt;p&gt;Hi Torsten,&lt;/p&gt;

&lt;p&gt;There are some things you could try initially:&lt;/p&gt;

&lt;p&gt;1) Use a debug build of Derby 10.5.1.1 (available from the download site - &lt;a href=&quot;http://db.apache.org/derby/releases/release-10.5.1.1.cgi&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/releases/release-10.5.1.1.cgi&lt;/a&gt;) which performs some extra sanity checks and may provide a more useful error message.&lt;/p&gt;

&lt;p&gt;2) Set the properties derby.language.logStatementText and derby.language.logQueryPlan to true and post the plan for the problematic query (can be found in derby.log). See if the same plan is used when it fails and when it succeeds. If the plans differ, that may give a hint as to what&apos;s causing it.&lt;/p&gt;</comment>
                            <comment id="12720633" author="heftrich_exec" created="Wed, 17 Jun 2009 12:50:07 +0100"  >&lt;p&gt;It seems to me after some experimenting that this item is related to synchronization and multithreading. In my scenario the error does not occur when I use the debug version or activate the proposed logging. The error occurs not on my development machine but on an 8-core server. Additionally the error occurs more often when this server is nearly idle.&lt;br/&gt;
As explanation I may add, that in our application two servlets are initializing nearly at the same time and are executing the same expensive statement nearly simultaneously. When only one servlet is activated the errors also does never occur.&lt;br/&gt;
For now it seems I could solve the problem for us. I introduced some synchronization into our code which forces the two servlets to initialize after one another. &lt;br/&gt;
I saved the setup which produces the error, so if you wish me to test some changes to derby or produce some log output for you, give me a hint.&lt;/p&gt;</comment>
                            <comment id="12720922" author="knutanders" created="Wed, 17 Jun 2009 22:54:10 +0100"  >&lt;p&gt;Thanks for that extra info, Torsten. I managed to create a small app that reliably reproduces the issue in my environment (quad core, OpenSolaris 2009.06, JDK 6u13) by executing a SELECT COUNT(DISTINCT...)) statement in ten parallel threads. Seems like there&apos;s a race condition of some kind the first time a SortFactory is loaded.&lt;/p&gt;

&lt;p&gt;The stack trace on trunk with debug enabled is:&lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
        at java.util.Hashtable.put(Hashtable.java:399)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.registerAccessMethod(RAMAccessManager.java:883)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(RAMAccessManager.java:693)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransaction.createSort(RAMTransaction.java:1695)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter(DistinctScalarAggregateResultSet.java:362)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore(DistinctScalarAggregateResultSet.java:144)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:248)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1648)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(EmbedPreparedStatement.java:270)&lt;br/&gt;
        at LoadSorter$1.run(LoadSorter.java:21)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;</comment>
                            <comment id="12721736" author="knutanders" created="Fri, 19 Jun 2009 12:03:02 +0100"  >&lt;p&gt;It looks like the problem is that TopService.bootModule() adds the new module to the vector moduleInstances before it boots the module. So when another thread concurrently checks if the module is available, it finds it in moduleInstances and uses it before it is properly initialized.&lt;/p&gt;

&lt;p&gt;I thought swapping the order (boot first, then add to the vector) was a possible solution, but that resulted in lots of assert failures during boot.&lt;/p&gt;

&lt;p&gt;All the traversal of moduleInstances is synchronized on the TopService instance, except the code that adds and boots the module. If that code is moved inside one of the synchronized blocks, the NPE goes away. There may be a good reason why that code is not synchronized, but I cannot find anything about it in the comments. I&apos;ll investigate more.&lt;/p&gt;</comment>
                            <comment id="12722566" author="knutanders" created="Mon, 22 Jun 2009 12:39:04 +0100"  >&lt;p&gt;Booting inside the synchronized block is at least problematic for replication, since SlaveDatabase.boot() creates a new thread (SlaveDatabaseBootThread) and waits for it to finish. SlaveDatabaseBootThread will also attempt to boot the database in order to perform recovery, but it&apos;s blocked because the main thread holds the synchronization lock. Both threads are waiting for each other, so we have a deadlock.&lt;/p&gt;</comment>
                            <comment id="12722638" author="knutanders" created="Mon, 22 Jun 2009 16:26:52 +0100"  >&lt;p&gt;Here&apos;s an alternative fix (d2047-1a.diff). I&apos;m not able to reproduce the bug when it&apos;s applied, and replication also works with this change. Will run the full regression test suite to see if it introduces any other problems, and I&apos;ll also see if I can add a JUnit test case.&lt;/p&gt;

&lt;p&gt;In this patch, I&apos;ve added a flag to ModuleInstance to indicate whether or not the instance has finished booting. TopService.bootModule() checks this flag when it walks through the moduleInstances list looking for an already booted instance to use, and skips the module instance if it isn&apos;t fully booted. This fixes the bug since the code that failed because the module was only partly initialized, will no longer be called unless it&apos;s fully initialized.&lt;/p&gt;

&lt;p&gt;In the cases where we&apos;d get a NullPointerException before, we&apos;ll now create and boot two separate instances of the module. But there&apos;s already a window in which it is possible to end up booting two instances of the same module (because we drop the synchronization while booting) and it is correctly handled by the existing code, so widening the window shouldn&apos;t cause any problems. TopService.bootModule() handles it by checking if someone else successfully added an instance while we were initializing ours. If so, our instance will be discarded and we&apos;ll fall back to the other newly created instance.&lt;/p&gt;</comment>
                            <comment id="12723071" author="knutanders" created="Tue, 23 Jun 2009 14:23:53 +0100"  >&lt;p&gt;Attaching patch 1b which is 1a + test case. The test case fails occasionally without the fix (more frequently on multi-core machines). It looks like it fails even less frequently if it&apos;s run as part of a test suite than if it&apos;s run standalone, but it does fail in that context too. I haven&apos;t seen it fail with the fix applied.&lt;/p&gt;

&lt;p&gt;All the regression tests passed with the 1a patch.&lt;/p&gt;</comment>
                            <comment id="12723072" author="kmarsden" created="Tue, 23 Jun 2009 14:33:04 +0100"  >&lt;p&gt;Thanks Knut for the patch.  Before it is resolved, I think it would be good to change the summary on this issue to be more descriptive of the symptom.&lt;/p&gt;

&lt;p&gt;I didn&apos;t apply the patch but the indentation looks a bit off in the diff around&lt;br/&gt;
+        module.setBooted();&lt;br/&gt;
+&lt;/p&gt;
</comment>
                            <comment id="12723079" author="knutanders" created="Tue, 23 Jun 2009 15:04:59 +0100"  >&lt;p&gt;Thanks Kathey. I changed the summary to better describe the symptoms. As to the indentation, if you view the patch with tab size 4, as it is used in the code, I think the added code will line up with the surrounding code.&lt;/p&gt;</comment>
                            <comment id="12724500" author="knutanders" created="Fri, 26 Jun 2009 13:17:10 +0100"  >&lt;p&gt;Committed to trunk with revision 788670.&lt;/p&gt;

&lt;p&gt;I&apos;ll keep the issue open until the fix has been merged to the 10.5 branch.&lt;/p&gt;</comment>
                            <comment id="12724958" author="knutanders" created="Sun, 28 Jun 2009 15:44:51 +0100"  >&lt;p&gt;Merged to 10.5 and committed revision 789103.&lt;/p&gt;</comment>
                            <comment id="12780446" author="kmarsden" created="Fri, 20 Nov 2009 05:22:20 +0000"  >&lt;p&gt;I am working with a user who may have hit this issue on 10.3.  The trace does indeed look quite similar.  I tried changing the reproduction to use a regular database instead of in memory and could not get the issue to reproduce on 10.3.  The fix itself ported easily, so I think I will just merge the code fix, check it in  and see if it fixes their problem.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12410992" name="LoadSorter.java" size="1208" author="knutanders" created="Wed, 17 Jun 2009 22:54:10 +0100"/>
                            <attachment id="12411417" name="d2074-1a.diff" size="2231" author="knutanders" created="Mon, 22 Jun 2009 16:26:52 +0100"/>
                            <attachment id="12411532" name="d2074-1b.diff" size="8710" author="knutanders" created="Tue, 23 Jun 2009 14:23:53 +0100"/>
                            <attachment id="12411533" name="d2074-1b.stat" size="333" author="knutanders" created="Tue, 23 Jun 2009 14:23:53 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Nov 2008 21:09:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22872</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0mvr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37525</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>