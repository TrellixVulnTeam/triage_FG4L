<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:29:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5554/DERBY-5554.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5554] NullPointerException in generated VTI code</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5554</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;With the latest 10.8.2.2 binary distribution, the following short script produces a NullPointerException:&lt;/p&gt;

&lt;p&gt;java -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:brydb;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create table t1 (a int);&lt;br/&gt;
ij&amp;gt; SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
    FROM &lt;br/&gt;
        SYS.SYSTABLES systabs, sys.sysconglomerates syscgs,&lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos; and systabs.tableid = syscgs.tableid;&lt;/p&gt;


&lt;p&gt;The exception trace is pasted below:&lt;/p&gt;

&lt;p&gt;ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
java.sql.SQLException: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(Unknown Source)&lt;br/&gt;
Caused by: java.sql.SQLException: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	... 18 more&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	... 15 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:616)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	... 11 more&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(Unknown Source)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	... 19 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.exe.acf81e0010x0134x6972x0511x0000033820000.g0(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:616)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.VTIResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	... 11 more&lt;/p&gt;</description>
                <environment></environment>
        <key id="12536241">DERBY-5554</key>
            <summary>NullPointerException in generated VTI code</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="bryanpendleton">Bryan Pendleton</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Fri, 23 Dec 2011 05:49:41 +0000</created>
                <updated>Mon, 2 Jun 2014 13:37:25 +0100</updated>
                            <resolved>Fri, 14 Jun 2013 17:54:41 +0100</resolved>
                                    <version>10.3.1.4</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                    <version>10.6.1.0</version>
                    <version>10.7.1.1</version>
                    <version>10.8.2.2</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13175328" author="knutanders" created="Fri, 23 Dec 2011 08:25:34 +0000"  >&lt;p&gt;Seen all the way back to 10.3.1.4 (earlier releases didn&apos;t support the syntax - &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13279085" author="rhillegas" created="Fri, 18 May 2012 20:01:45 +0100"  >&lt;p&gt;The failing query looks very similar to the sample query for SYSCS_DIAG.SPACE_TABLE found in the Reference Manual section titled &quot;SYSCS_DIAG diagnostic tables and functions&quot;:&lt;/p&gt;

&lt;p&gt;SELECT T2.*&lt;br/&gt;
    FROM &lt;br/&gt;
        SYS.SYSTABLES systabs,&lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos;&lt;/p&gt;

&lt;p&gt;I confess that I don&apos;t understand the meaning of either query. When we implemented user-defined table functions, we specified that the arguments to the table function should be expressions built from the following:&lt;/p&gt;

&lt;p&gt;1) literals&lt;br/&gt;
2) ? parameters&lt;br/&gt;
3) correlated references to variables in outer query blocks&lt;/p&gt;

&lt;p&gt;That is, the arguments were supposed to be constant within the query block. We specifically did not want table function arguments to be variables from other tables in the FROM list. However, we don&apos;t enforce this limitation. You get a similar NPE if you replace the SYSCS_DIAG.SPACE_TABLE element in the FROM list with an invocation of a user defined table function which takes the SYSTABLES.TABLENAME variable as an argument.&lt;/p&gt;

&lt;p&gt;I&apos;m trying to figure out what these queries mean. My usual approach to understanding a query is to follow these steps:&lt;/p&gt;

&lt;p&gt;A) Compute the cartesian product of the elements in the FROM list.&lt;/p&gt;

&lt;p&gt;B) Then join and restrict by applying the WHERE clause to the cartesian product.&lt;/p&gt;

&lt;p&gt;C) Then apply the other clauses in an order which doesn&apos;t affect this discussion.&lt;/p&gt;

&lt;p&gt;With these queries, what is (A)? I don&apos;t see a cartesian product here because there is an implicit, undefined join in the FROM list.&lt;/p&gt;

&lt;p&gt;My gut feeling is that these may be illegal queries, but I haven&apos;t found the relevant chapter and verse in the SQL Standard. I would be interested in other people&apos;s theories about the meaning of these queries and how you thread your way through the SQL Standard in order to determine that meaning.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13279391" author="dagw" created="Sat, 19 May 2012 02:28:33 +0100"  >&lt;p&gt;I think the intention is clear: you want a union of tables resulting from subtables of the form TABLE (SYSCS_DIAG.SPACE_TABLE(&amp;lt;name of a system table&amp;gt;), where &amp;lt;name of a system table&amp;gt; would range over all the system tables of type &apos;T&apos;. Now, how would a correct/better query for this look? It would need to employ correlated references to variables in outer query blocks, since literal and ? are not applicable here...&lt;/p&gt;</comment>
                            <comment id="13280001" author="knutanders" created="Mon, 21 May 2012 09:03:25 +0100"  >&lt;p&gt;The query passes if I add an optimizer override to force the table function to be the inner table in the join (which makes some sense, since otherwise the argument to the table function would not have a known value):&lt;/p&gt;

&lt;p&gt;SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
    FROM --DERBY-PROPERTIES joinOrder=fixed&lt;br/&gt;
        SYS.SYSTABLES systabs, sys.sysconglomerates syscgs,&lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos; and systabs.tableid = syscgs.tableid;&lt;/p&gt;

&lt;p&gt;If I reverse the join order, I see this error:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
&amp;gt;    FROM --DERBY-PROPERTIES joinOrder=fixed&lt;br/&gt;
&amp;gt;        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2, sys.sysconglomerates syscgs, SYS.SYSTABLES systabs&lt;br/&gt;
&amp;gt;    WHERE systabs.tabletype = &apos;T&apos; and systabs.tableid = syscgs.tableid; &lt;br/&gt;
ERROR 42Y70: The user specified an illegal join order. This could be caused by a join column from an inner table being passed as a parameter to an external virtual table.&lt;/p&gt;

&lt;p&gt;The error message implies that the original query was supposed to work, I think, but the optimizer for some reason didn&apos;t enforce the correct ordering.&lt;/p&gt;

&lt;p&gt;Or maybe the optimizer does enforce the requirement that the table function call must be the inner table relative to the table from which it takes its arguments, but the query only works if the table function call is the innermost table? For example, it does accept the following forced join order, in which systabs.tablename should be known when SPACE_TABLE is called, but it still fails with a NullPointerException during execution:&lt;/p&gt;

&lt;p&gt;SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
    FROM --DERBY-PROPERTIES joinOrder=fixed&lt;br/&gt;
        SYS.SYSTABLES systabs,&lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2,&lt;br/&gt;
        sys.sysconglomerates syscgs&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos; and systabs.tableid = syscgs.tableid;&lt;/p&gt;</comment>
                            <comment id="13280235" author="rhillegas" created="Mon, 21 May 2012 16:49:12 +0100"  >&lt;p&gt;Note that Derby does not allow subqueries in the FROM list to join to other tables in the query block. This behavior of Derby seems correct to me. At the very least it is odd that you can get around this limitation by wrapping the query in a table function.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create table t1 ( a int );&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t2( b int );&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select *&lt;br/&gt;
from t1 t, ( select * from t2 ) s&lt;br/&gt;
where s.b &amp;gt; t.a;&lt;br/&gt;
A          |B          &lt;br/&gt;
-----------------------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;br/&gt;
ij&amp;gt; select *&lt;br/&gt;
from t1 t&lt;br/&gt;
where exists ( select * from t2 where b &amp;gt; t.a );&lt;br/&gt;
A          &lt;br/&gt;
-----------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;br/&gt;
ij&amp;gt; select *&lt;br/&gt;
from t1 t, ( select * from t2 where b &amp;gt; t.a ) s;&lt;br/&gt;
ERROR 42X04: Column &apos;T.A&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;T.A&apos; is not a column in the target table.&lt;/p&gt;</comment>
                            <comment id="13281057" author="rhillegas" created="Tue, 22 May 2012 16:55:50 +0100"  >&lt;p&gt;I believe that chapter and verse on this syntax can be found in part 2 of the SQL Standard, section 7.6 (&amp;lt;table reference&amp;gt;), Syntax Rule 6.a:&lt;/p&gt;

&lt;p&gt;&quot;If TR is contained in a &amp;lt;from clause&amp;gt; FC with no intervening &amp;lt;query expression&amp;gt;, then the scope clause SC of TR is the &amp;lt;select statement: single row&amp;gt; or innermost &amp;lt;query specification&amp;gt; that contains FC. The scope of a range variable of TR is the &amp;lt;select list&amp;gt;, &amp;lt;where clause&amp;gt;, &amp;lt;group by clause&amp;gt;, &amp;lt;having clause&amp;gt;, and &amp;lt;window clause&amp;gt; of SC, together with every &amp;lt;lateral derived table&amp;gt; that is simply contained in FC and is preceded by TR, and every &amp;lt;collection derived table&amp;gt; that is simply contained in FC and is preceded by TR, and the &amp;lt;join condition&amp;gt; of all &amp;lt;joined table&amp;gt;s contained in SC that contain TR. If SC is the &amp;lt;query specification&amp;gt; that is the &amp;lt;query expression body&amp;gt; of a simple table query STQ, then the scope of a range variable of TR also includes the &amp;lt;order by clause&amp;gt; of STQ.&quot;&lt;/p&gt;

&lt;p&gt;When applied to Bryan&apos;s original query, this says that the systabs table reference can be mentioned in the query&apos;s SELECT list, WHERE clause, GROUP BY clause, HAVING clause, WINDOW clause, and ORDER BY clause. The systabs table reference may be mentioned in the FROM clause only as follows:&lt;/p&gt;

&lt;p&gt;a) in some syntax which Derby does not support (lateral derived tables and collection derived tables)&lt;/p&gt;

&lt;p&gt;b) in the ON clause of a JOIN to another tabular data set.&lt;/p&gt;

&lt;p&gt;The sample SYSCS_DIAG.SPACE_TABLE syntax given in the Reference Manual is illegal and has no meaning.&lt;/p&gt;


&lt;p&gt;I don&apos;t see how to write a legal query which expresses Bryan&apos;s intent. We could consider adding a TABLEID column to the SPACE_TABLE output and change the vti&apos;s arguments so that they accept the % wildcard (like the metadata calls). Then something like this might capture Bryan&apos;s intent:&lt;/p&gt;

&lt;p&gt;SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
    FROM&lt;br/&gt;
        SYS.SYSTABLES systabs, sys.sysconglomerates syscgs,&lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE( &apos;%&apos; )) AS T2&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos;&lt;br/&gt;
    and systabs.tableid = syscgs.tableid&lt;br/&gt;
    and systabs.tableid = t2.tableid;&lt;/p&gt;</comment>
                            <comment id="13281477" author="knutanders" created="Wed, 23 May 2012 10:30:38 +0100"  >&lt;p&gt;Since SPACE_TABLE currently accepts one or two arguments (schema is optional), we could probably also make it to accept zero arguments, and return information for all tables when it&apos;s called that way. Then we wouldn&apos;t break applications that call their tables %. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13281489" author="knutanders" created="Wed, 23 May 2012 10:56:41 +0100"  >&lt;p&gt;By the way, here&apos;s an assert failure in a similar query (NPE in insane builds):&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select * from sys.systables st, sys.sysconglomerates sc, (select * from table(syscs_diag.space_table(st.tablename)) t2) t3 where st.tabletype=&apos;T&apos; and st.tableid=sc.tableid;&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED Found multiple optimizables that share one or more referenced table numbers (esp: &apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos;), but that should not be the case.: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;</comment>
                            <comment id="13281601" author="bryanpendleton" created="Wed, 23 May 2012 14:34:46 +0100"  >&lt;p&gt;Anything that makes it easier to call SPACE_TABLE is fine, in my opinion,&lt;br/&gt;
since that&apos;s one of the most commonly called functions in our built-in set.&lt;/p&gt;</comment>
                            <comment id="13396162" author="rhillegas" created="Mon, 18 Jun 2012 20:10:47 +0100"  >&lt;p&gt;Attaching derby-5554-01-aa-addTableIDcolumn.diff. This patch adds a trailing TABLEID column to the SPACE_TABLE vti. This is the first step toward addressing this issue, as outlined in the plan attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5779&quot; title=&quot;Table functions should only accept arguments which are constant in their query block.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5779&quot;&gt;&lt;del&gt;DERBY-5779&lt;/del&gt;&lt;/a&gt;. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/diag/SpaceTable.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;</comment>
                            <comment id="13396770" author="rhillegas" created="Tue, 19 Jun 2012 14:53:39 +0100"  >&lt;p&gt;Attaching a second rev of the patch: derby-5554-01-ab-addTableIDcolumn.diff. The second rev gets the tableid from a more general location and will work better when we add a no-arg constructor to the vti.&lt;/p&gt;

&lt;p&gt;Tests passed cleanly for me on this rev. Committed at subversion revision 1351714.&lt;/p&gt;</comment>
                            <comment id="13396891" author="rhillegas" created="Tue, 19 Jun 2012 17:12:57 +0100"  >&lt;p&gt;Attaching derby-5554-02-aa-0argConstructor.diff. This patch adds a 0-arg constructor to SPACE_TABLE. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;The meaning of the 0-arg constructor is &quot;give me information on all conglomerates for all tables&quot;. With this patch, the following statement returns space information on all conglomerates:&lt;/p&gt;

&lt;p&gt;select * from table(syscs_diag.space_table()) x&lt;br/&gt;
order by conglomeratename;&lt;/p&gt;

&lt;p&gt;This patch allows us to re-write the example in the Reference Guide section on SPACE_TABLE. The following new syntax is valid standard SQL:&lt;/p&gt;

&lt;p&gt;select t2.*&lt;br/&gt;
    from&lt;br/&gt;
        sys.systables systabs,&lt;br/&gt;
        table (syscs_diag.space_table()) as t2&lt;br/&gt;
    where systabs.tabletype = &apos;T&apos;&lt;br/&gt;
    and systabs.tableid = t2.tableid;&lt;/p&gt;

&lt;p&gt;Bryan&apos;s query can now be re-written as follows. Note that the join to SYSCONGLOMERATES gives rise to a cartesian product because there is no unique join column between SYSCONGLOMERATES and SPACE_TABLE. This was true of the original query also:&lt;/p&gt;

&lt;p&gt;select t2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber&lt;br/&gt;
    from&lt;br/&gt;
        sys.systables systabs, sys.sysconglomerates syscgs,&lt;br/&gt;
        table (syscs_diag.space_table()) as t2&lt;br/&gt;
    where systabs.tabletype = &apos;T&apos;&lt;br/&gt;
    and systabs.tableid = t2.tableid&lt;br/&gt;
    and systabs.tableid = syscgs.tableid;&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;/p&gt;

&lt;p&gt;Expands the meaning of getConglomerateDescriptors( UUID ). If the UUID argument is null, this method now returns all of the conglomerates in the database.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/diag/SpaceTable.java&lt;/p&gt;

&lt;p&gt;Gives SPACE_TABLE a 0-arg construtor which behaves as described above.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;

&lt;p&gt;Tests for the new constructor.&lt;/p&gt;</comment>
                            <comment id="13396969" author="rhillegas" created="Tue, 19 Jun 2012 19:29:20 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-5554-02-aa-0argConstructor.diff. Committed at subversion revision 1351795.&lt;/p&gt;</comment>
                            <comment id="13396975" author="rhillegas" created="Tue, 19 Jun 2012 19:40:44 +0100"  >&lt;p&gt;Unless someone objects, I am inclined to port 1351714 and 1351795 to the 10.9 and 10.8 branches. That should give quicker relief to people affected by this bug. Because SPACE_TABLE is a vti, no changes were made to catalog data; so it should be ok to port the fixes to release branches. The combined patches change SPACE_TABLE as follows:&lt;/p&gt;

&lt;p&gt;1) The vti now has a trailing TABLEID column.&lt;/p&gt;

&lt;p&gt;2) The vti can now be invoked with a 0-arg constructor.&lt;/p&gt;</comment>
                            <comment id="13398744" author="rhillegas" created="Thu, 21 Jun 2012 19:56:45 +0100"  >&lt;p&gt;Ported 1351714 and 1351795 from trunk to the 10.9 branch at subversion revision 1352648.&lt;/p&gt;

&lt;p&gt;Ported 1351714 and 1351795 from trunk to the 10.8 branch at subversion revision 1352652.&lt;/p&gt;

&lt;p&gt;The port to 10.8 involved a change to SysDiagVTIMappingTest to account for a catalog query which returns different results in 10.8. That is because the SYSUSERS table does not exist in 10.8.&lt;/p&gt;</comment>
                            <comment id="13403420" author="rhillegas" created="Thu, 28 Jun 2012 20:46:08 +0100"  >&lt;p&gt;I have left this issue open because I think the following work should still be done. We can close this issue and open a new issue for the follow-on work if people think that&apos;s better:&lt;/p&gt;

&lt;p&gt;1) Formally describe the meaning of the special syntax which we still allow for VTIs but no longer allow for table functions (viz., the joins inside the FROM list).&lt;/p&gt;

&lt;p&gt;2) Fix the optimizer so that query plans are picked which enforce the formal meaning. This is the crux of fixing this issue. Once we fix the optimizer, Bryan&apos;s original query should run.&lt;/p&gt;

&lt;p&gt;3) Decide whether we want to document the formal meaning.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13405229" author="rhillegas" created="Mon, 2 Jul 2012 19:41:59 +0100"  >&lt;p&gt;Linking this issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt;. That is the issue which introduced parameterized diagnostic VTIs.&lt;/p&gt;</comment>
                            <comment id="13405243" author="rhillegas" created="Mon, 2 Jul 2012 19:59:24 +0100"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1520&quot; title=&quot;Document new SYSCS_DIAG tables&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1520&quot;&gt;&lt;del&gt;DERBY-1520&lt;/del&gt;&lt;/a&gt;, the issue which documented parameterized diagnostic VTIs. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt; does not discuss the meaning of joining parameterized VTIs in the FROM list. The first mention of this capability is on 2007-03-23 on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1520&quot; title=&quot;Document new SYSCS_DIAG tables&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1520&quot;&gt;&lt;del&gt;DERBY-1520&lt;/del&gt;&lt;/a&gt;. Although &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1520&quot; title=&quot;Document new SYSCS_DIAG tables&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1520&quot;&gt;&lt;del&gt;DERBY-1520&lt;/del&gt;&lt;/a&gt; mentions the capability (and the example made its way into the Reference Guide), there is no discussion of the meaning of these joins.&lt;/p&gt;</comment>
                            <comment id="13405281" author="rhillegas" created="Mon, 2 Jul 2012 20:31:15 +0100"  >&lt;p&gt;There does not seem to be any previous discussion of what it means to join a parameterized diagnostic VTI in the FROM list. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt; was a follow-on issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-571&quot; title=&quot;Virtual Table Mapping for no argument Diagnostic tables&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-571&quot;&gt;&lt;del&gt;DERBY-571&lt;/del&gt;&lt;/a&gt;. It seems to me that the clear intent of those issues was to fit diagnostic VTIs inside the SQL Standard, replacing the Derby-specific constructor syntax. The intent was not to create more syntax outside the SQL Standard. It does not appear that anyone realized the possibility of the illegal join in the FROM list until late in the process of documenting &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt;. It does not appear that anyone at that time was aware that the syntax had no meaning inside the SQL Standard. Certainly there is no discussion of how the syntax violates the Standard and there is no discussion of what the non-standard syntax means.&lt;/p&gt;

&lt;p&gt;This suggests the following:&lt;/p&gt;

&lt;p&gt;1) Without any guidance from the people who introduced this feature, we will have to try to come up with our own meaning.&lt;/p&gt;

&lt;p&gt;2) We should not document the meaning of the non-standard syntax. The point of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2152&quot; title=&quot;Support diagnostic vti tables that take parameters, such as SpaceTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2152&quot;&gt;&lt;del&gt;DERBY-2152&lt;/del&gt;&lt;/a&gt; was to steer people away from Derby extensions and encourage people to use standard syntax.&lt;/p&gt;</comment>
                            <comment id="13405985" author="rhillegas" created="Tue, 3 Jul 2012 20:46:07 +0100"  >&lt;p&gt;In standard SQL, the order of elements in the FROM list does not affect whether the query compiles. This is only partly true for queries which use the FROM list to join VTIs. In particular, non-standard behavior arises when VTIs join with other VTIs. I have observed the following:&lt;/p&gt;

&lt;p&gt;1) The order of non-VTI and non-table-function elements is not significant.&lt;/p&gt;

&lt;p&gt;2) However, a VTI argument can only join to VTIs/table-functions which precede it in the FROM list.&lt;/p&gt;

&lt;p&gt;I don&apos;t imagine that anyone joins our argument-bearing VTIs with one another. Our internal metadata queries don&apos;t seem to do this. In addition, the diagnostic VTI columns are not meaningful arguments for other diagnostic VTIs. For this reason, I think that it should be ok to put in some bind-time logic which prevents users from writing queries which join diagnostic VTIs to one another in the FROM list. Removing this useless edge-case makes it easier to define the meaning of the remaining, useful joins.&lt;/p&gt;

&lt;p&gt;The following script demonstrates how you can (and can&apos;t) join VTIs to one another in the FROM list today:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;select t1.*&lt;br/&gt;
from &lt;br/&gt;
    sys.systables systabs,&lt;br/&gt;
    table ( syscs_diag.space_table( systabs.tablename ) ) as t1&lt;br/&gt;
where systabs.tabletype = &apos;T&apos;;&lt;/p&gt;

&lt;p&gt;&amp;#8211; compiles&lt;br/&gt;
select t1.&lt;b&gt;, t2.&lt;/b&gt;&lt;br/&gt;
from &lt;br/&gt;
    sys.systables systabs,&lt;br/&gt;
    table ( syscs_diag.space_table( systabs.tablename ) ) as t1,&lt;br/&gt;
    table ( syscs_diag.space_table( t1.conglomeratename ) ) as t2&lt;br/&gt;
where systabs.tabletype = &apos;T&apos;;&lt;/p&gt;

&lt;p&gt;select t1.*&lt;br/&gt;
from &lt;br/&gt;
    table ( syscs_diag.space_table( systabs.tablename ) ) as t1,&lt;br/&gt;
    sys.systables systabs&lt;br/&gt;
where systabs.tabletype = &apos;T&apos;;&lt;/p&gt;

&lt;p&gt;&amp;#8211; does not compile&lt;br/&gt;
select t1.&lt;b&gt;, t2.&lt;/b&gt;&lt;br/&gt;
from &lt;br/&gt;
    sys.systables systabs,&lt;br/&gt;
    table ( syscs_diag.space_table( t1.conglomeratename ) ) as t2,&lt;br/&gt;
    table ( syscs_diag.space_table( systabs.tablename ) ) as t1&lt;br/&gt;
where systabs.tabletype = &apos;T&apos;;&lt;/p&gt;</comment>
                            <comment id="13405997" author="rhillegas" created="Tue, 3 Jul 2012 21:11:31 +0100"  >&lt;p&gt;Attaching derby-5554-03-aa-forbidVTItoVTIjoins.diff. This patch makes it illegal to join two VTIs to one another in the FROM list. Regression tests passed cleanly for me.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;Forbid the illegal join at bind() time.&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;

&lt;p&gt;Add a test case.&lt;/p&gt;</comment>
                            <comment id="13406095" author="kmarsden" created="Tue, 3 Jul 2012 22:57:57 +0100"  >&lt;p&gt;That seems like a reasonable restriction.   It would be good to mention in a release note.&lt;/p&gt;</comment>
                            <comment id="13406102" author="dagw" created="Tue, 3 Jul 2012 23:05:30 +0100"  >&lt;p&gt;Couldn&apos;t we just rearrange the order at bind time (top sort) ? So long as there is no circularity, it seems to me the ordering shouldn&apos;t be significant, SQL being set oriented and not imperative...&lt;br/&gt;
(using a dependency relation expressing that a from list element references another in the way used here)&lt;/p&gt;</comment>
                            <comment id="13407172" author="rhillegas" created="Thu, 5 Jul 2012 15:38:03 +0100"  >&lt;p&gt;Thanks, Kathey. I have marked this issue as needing a release note.&lt;/p&gt;

&lt;p&gt;Thanks for that additional discussion, Dag. I don&apos;t see much value in building more internal support for a non-standard syntax whose use we want to discourage. The only use-case I can imagine for joining VTIs in the FROM list would be for future, internal queries involving new diagnostic VTIs. I think that a better approach to that use-case would be to design the new diagnostic VTIs in such a way that joins in the FROM list are not necessary. Thanks.&lt;/p&gt;</comment>
                            <comment id="13407217" author="rhillegas" created="Thu, 5 Jul 2012 16:41:47 +0100"  >&lt;p&gt;Committed derby-5554-03-aa-forbidVTItoVTIjoins.diff at subversion revision 1357692.&lt;/p&gt;</comment>
                            <comment id="13407220" author="rhillegas" created="Thu, 5 Jul 2012 16:45:37 +0100"  >&lt;p&gt;Before defining what it means to join VTIs in the FROM list, it&apos;s useful to describe how the clauses in a SQL Standard query are supposed to be evaluated. The following discussion is based on these sections in part 2 of the SQL Standard:&lt;/p&gt;

&lt;p&gt;o 7.13 &amp;lt;query expression&amp;gt; - This section describes a Query as a series of Selects, separated by UNION/INTERSECT operators, sorted by an ORDER BY clause, and bounded by FETCH FIRST and OFFSET clauses.&lt;/p&gt;

&lt;p&gt;o 7.12 &amp;lt;query specification&amp;gt; - This section describes a Select as a SELECT list on top of a &amp;lt;table expression&amp;gt;.&lt;/p&gt;

&lt;p&gt;o 7.4 &amp;lt;table expression&amp;gt; - This section describes the order of the remaining clauses: FROM, WHERE, GROUP BY, HAVING, WINDOW.&lt;/p&gt;

&lt;p&gt;1) Let Q be a query composed of a series of Selects, S1...Sn, separated by UNION/INTERSECT operators, sorted by an ORDER BY clause, and bounded by FETCH FIRST and OFFSET clauses.&lt;/p&gt;

&lt;p&gt;2) We evaluate each Select S as follows:&lt;/p&gt;

&lt;p&gt;  F = the cartesian product of all tables, joined tables, views, subqueries, and table functions in the FROM clause.&lt;/p&gt;

&lt;p&gt;  W = the result of applying the WHERE clause to F&lt;/p&gt;

&lt;p&gt;  G = the result of applying the GROUP BY clause to W&lt;/p&gt;

&lt;p&gt;  H = the result of applying the HAVING clause to G&lt;/p&gt;

&lt;p&gt;  WW = the result of applying the WINDOW clause to H&lt;/p&gt;

&lt;p&gt;  S = the result of applying the SELECT list expressions (including aggregates) to WW&lt;/p&gt;

&lt;p&gt;3) Now we compute&lt;/p&gt;

&lt;p&gt;  U = the result of applying the UNION/INTERSECT operators to S1...Sn&lt;/p&gt;

&lt;p&gt;  O = the result of applying the ORDER BY clause to U&lt;/p&gt;

&lt;p&gt;  Q = the result of applying the FETCH FIRST and OFFSET clauses to O&lt;/p&gt;</comment>
                            <comment id="13407222" author="rhillegas" created="Thu, 5 Jul 2012 16:47:52 +0100"  >&lt;p&gt;Now we can give meaning to Queries which join VTI parameters to other tables in the FROM list. This involves redefining the F, W, and S expressions described above.&lt;/p&gt;

&lt;p&gt;Note that VTI arguments can mention columns in tables, joined tables, views, and subqueries. However, VTI arguments may not mention columns in table functions or other VTIs.&lt;/p&gt;

&lt;p&gt;o Let V1...Vn be the VTIs which join to other elements in the FROM list.&lt;/p&gt;

&lt;p&gt;o Let C be the cartesian product of all other FROM list elements.&lt;/p&gt;

&lt;p&gt;o For each Vi, let Ki1...Kim be the columns in C which are mentioned by the arguments to Vi.&lt;/p&gt;

&lt;p&gt;o For each Vi, construct a temporary table Ti. The columns in Ti are all of the columns in Vi followed by additional columns Ki1...Kim. For each unique key combination (Ki1, ..., Kim) found in C, insert into Ti the results of evaluating Vi by plugging Ki1...Kim into its arguments.&lt;/p&gt;

&lt;p&gt;o For each Vij, add to the WHERE clause the conjunct (C.Kij = Ti.Kij). Call the resulting clause WHERE_2.&lt;/p&gt;

&lt;p&gt;o Finally, we construct these new values:&lt;/p&gt;

&lt;p&gt;  F = the cartesian product of C with T1...Tn&lt;/p&gt;

&lt;p&gt;  W = the result of applying WHERE_2 to F&lt;/p&gt;

&lt;p&gt;  S = the result of applying the SELECT list to WW, throwing away all Ti.Kij columns.&lt;/p&gt;</comment>
                            <comment id="13407293" author="rhillegas" created="Thu, 5 Jul 2012 18:22:55 +0100"  >&lt;p&gt;Attaching the first rev of a release note for this issue.&lt;/p&gt;</comment>
                            <comment id="13407394" author="dagw" created="Thu, 5 Jul 2012 19:55:30 +0100"  >&lt;p&gt;Thanks, Rick. My main concern was that the VT be placeable at any joinee position, your proposal handles that, so +1.&lt;/p&gt;</comment>
                            <comment id="13407593" author="bryanpendleton" created="Fri, 6 Jul 2012 00:27:19 +0100"  >&lt;p&gt;Rick, thanks for adding the release note.&lt;/p&gt;

&lt;p&gt;Do you think it would be useful to include the &lt;b&gt;correct&lt;/b&gt; syntax for the (invalid) query given as an example in the release note?&lt;/p&gt;

&lt;p&gt;Something along the lines of:&lt;/p&gt;

&lt;p&gt;    Applications which rely on these forbidden joins in the FROM list must be re-coded to use legal syntax. For example, the above query should be rewritten as: ...&lt;/p&gt;

</comment>
                            <comment id="13407961" author="rhillegas" created="Fri, 6 Jul 2012 13:43:50 +0100"  >&lt;p&gt;Thanks, Bryan. That is a good idea. Attaching a second rev of the release note. This presents a different bad query along with an example of how to re-write it so that it will compile.&lt;/p&gt;

&lt;p&gt;The new bad query joins a user-written table function to SPACE_TABLE in the FROM list. This is the only example I could imagine for a real query which might be affected by this change. Although joins to other SYSCS_DIAG tables and table functions are now forbidden, none of those joins really make any sense to begin with; it&apos;s hard to come up with substitute, re-written queries for queries which don&apos;t have any meaning!&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13408471" author="bryanpendleton" created="Sat, 7 Jul 2012 01:12:18 +0100"  >&lt;p&gt;+1 to the revised release note.&lt;/p&gt;</comment>
                            <comment id="13409730" author="rhillegas" created="Mon, 9 Jul 2012 20:00:35 +0100"  >&lt;p&gt;Attaching derby-5554-04-aa-forceVTIAfterJoin.diff. This is one approach to making Bryan&apos;s query work. Regression tests pass cleanly for me on this patch. I will also attach a second approach to fixing Bryan&apos;s query.&lt;/p&gt;

&lt;p&gt;It appears to me that this is what is going on:&lt;/p&gt;

&lt;p&gt;1) The problem query gives rise to a query plan with the following&lt;br/&gt;
shape:&lt;/p&gt;

&lt;p&gt;             SelectList&lt;br/&gt;
             /&lt;br/&gt;
           HashJoin&lt;br/&gt;
           /          \&lt;br/&gt;
NestedLoop     sysconglomerates&lt;br/&gt;
            /  \&lt;br/&gt;
systables   space_table&lt;/p&gt;

&lt;p&gt;2) At run-time, we are trying to initialize space_table from the NestedLoop row rather than from systables. The insertion of the extra HashJoin should have forced a renumbering of the result set number in the systables.tablename column reference. But it didn&apos;t.&lt;/p&gt;

&lt;p&gt;The derby-5554-04-aa-forceVTIAfterJoin.diff patch forces the VTI after all of the base tables in the join order. The VTI is then initialized from a row which has been filled in.&lt;/p&gt;

&lt;p&gt;I am not thrilled with this fix. It fiddles with the optimizer in order to work around a code-generation problem. However, I am attaching this approach as a fallback in case we find a fatal problem with a second approach which I will attach presently. The second approach is more complicated.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;If a VTI argument refers to another element in the FROM list, then force the the VTI to follow all non-VTIs in the join order.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;

&lt;p&gt;Add Bryan&apos;s query as a test case.&lt;/p&gt;</comment>
                            <comment id="13409754" author="rhillegas" created="Mon, 9 Jul 2012 20:21:08 +0100"  >&lt;p&gt;Attaching derby-5554-04-ab-remapVTIarg.diff, a second approach to fixing Bryan&apos;s query. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;The second approach code generates a reference to the result column in the SYSTABLES base table rather than to a column in a node above it. I am not thrilled by the complexity of this solution and I think that it may not be as general as the first approach of forcing the VTI to an inner slot in the join order. For instance, it may be possible to cook up elaborate queries which still fail because the VTI joins to the output of joined tables or subqueries in the FROM list.&lt;/p&gt;

&lt;p&gt;On balance, I think this is a better approach because it fixes a code generator problem in the code generator. I&apos;m reluctant to spend more time coming up with a better fix since we want to discourage use of this kind of join.&lt;/p&gt;

&lt;p&gt;The fix is to have the base tables tell the VTI where their rows are. I could not find an easy way to dig up this information in the existing context available to the code generator. So I added a new method and piece of state to FromVTI for tracking this information.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;Base tables give the location of their result rows to FromVTIs at code generation time.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;

&lt;p&gt;Adds Bryan&apos;s query as a test case.&lt;/p&gt;</comment>
                            <comment id="13409775" author="rhillegas" created="Mon, 9 Jul 2012 20:36:22 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-5554-04-ab-remapVTIarg.diff.&lt;/p&gt;</comment>
                            <comment id="13410266" author="knutanders" created="Tue, 10 Jul 2012 12:44:03 +0100"  >&lt;p&gt;If I understand the description of the 04-ab patch, it should not be dependent on the join order. That makes me wonder from which row in the base table it reads the value that it passes as an argument to the VTI, if the VTI happens to be the outer table in the join. Will the VTI be executed just once, with the value taken from the first row in the base table? I tried to test it by forcing the join order with an optimizer override, but then I just got &quot;ERROR 42Y70: The user specified an illegal join order. This could be caused by a join column from an inner table being passed as a parameter to an external virtual table.&quot; So it may be that the optimizer knows not to use the VTI as the outer table, but it&apos;s not entirely obvious to me.&lt;/p&gt;

&lt;p&gt;I tried a variant of Bryan&apos;s original query, just with a different ordering of the FROM list, and I&apos;m afraid I still see a NullPointerException with the 04-ab patch:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t1(x int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t2(y int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; SELECT T2.&lt;b&gt;, systabs.&lt;/b&gt;, syscgs.conglomeratenumber &lt;br/&gt;
    FROM &lt;br/&gt;
        sys.sysconglomerates syscgs, &lt;br/&gt;
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2,&lt;br/&gt;
        SYS.SYSTABLES systabs&lt;br/&gt;
    WHERE systabs.tabletype = &apos;T&apos; and systabs.tableid = syscgs.tableid;&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression. (errorCode = 20000)&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;. (errorCode = 20000)&lt;/p&gt;</comment>
                            <comment id="13410287" author="rhillegas" created="Tue, 10 Jul 2012 13:24:22 +0100"  >&lt;p&gt;Thanks for test-driving the patch, Knut. The same query also raises an NPE with the first patch.&lt;/p&gt;</comment>
                            <comment id="13410379" author="rhillegas" created="Tue, 10 Jul 2012 15:31:31 +0100"  >&lt;p&gt;Attaching derby-5554-04-ac-remapVTIarg.diff, a new rev of the argument-remapping approach. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This rev is simpler than the previous attempt. It may also handle more cases than the previous patch. The patch merely touches FromVTI.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;1) At bind-time, we save a reference to every FROM list element referenced by the VTI&apos;s arguments.&lt;/p&gt;

&lt;p&gt;2) At code-generation time, we build an argument expression from the ResultColumn actually used when the FROM list element was code generated.&lt;/p&gt;


&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java&lt;/p&gt;

&lt;p&gt;Adds Bryan&apos;s original query and Knut&apos;s re-ordered query as test cases.&lt;/p&gt;</comment>
                            <comment id="13411444" author="knutanders" created="Wed, 11 Jul 2012 13:48:08 +0100"  >&lt;p&gt;Thanks, Rick. That seems to fix all possible orderings of the from list in that query. However, I still see a NPE if I use the JOIN keyword:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create table t1(x int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t2(y int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select tt.* from table(syscs_diag.space_table(st.tablename)) tt join sys.systables st using(tableid);&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;/p&gt;

&lt;p&gt;Perhaps related, if I change the join to an outer join (doesn&apos;t matter if it&apos;s right or left join), it fails with an assert failure (or NPE with insane jars).&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select tt.* from table(syscs_diag.space_table(st.tablename)) tt right join sys.systables st using(tableid);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED costEstimate is not expected to be null for org.apache.derby.impl.sql.compile.FromVTI: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;I do see these errors also without your patch.&lt;/p&gt;</comment>
                            <comment id="13411490" author="rhillegas" created="Wed, 11 Jul 2012 14:35:01 +0100"  >&lt;p&gt;Thanks for test-driving the derby-5554-04-ac-remapVTIarg.diff patch, Knut. My instinct is to limit support for this non-standard syntax to the cases documented in the user guides or used by our internal metadata queries. The additional cases you have discovered are probably not being stressed in the wild--at least no-one has filed a bug report for them. We could probably extrapolate a meaning for these additional queries, based on the meaning which we have given to VTI-joins in the FROM list, but I am reluctant to extend the applicability of this Derby extension unless we have to.&lt;/p&gt;

&lt;p&gt;What do you think about this plan:&lt;/p&gt;

&lt;p&gt;1) Commit derby-5554-04-ac-remapVTIarg.diff once we&apos;re convinced that it works for our metadata queries and for the joins documented in our user guides.&lt;/p&gt;

&lt;p&gt;2) Prepare another patch to raise an error when compiling the additional query families you have discovered.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13411534" author="rhillegas" created="Wed, 11 Jul 2012 15:06:31 +0100"  >&lt;p&gt;In any event, I think that we need to file a new JIRA to forbid the use of table functions in the additional query families which Knut identified. I see the same errors when I use table functions instead of diagnostic VTIs. The following script shows this:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;create function lowerCaseRow( contents varchar( 32672 ) )&lt;br/&gt;
returns table&lt;br/&gt;
(&lt;br/&gt;
    contents varchar( 32672 )&lt;br/&gt;
)&lt;br/&gt;
language java parameter style DERBY_JDBC_RESULT_SET no sql&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.lowerCaseRow&apos;;&lt;/p&gt;

&lt;p&gt;select tt.* from table( lowerCaseRow(st.tablename)) tt join sys.systables st on tt.contents = st.tablename;&lt;/p&gt;

&lt;p&gt;select tt.* from table( lowerCaseRow(st.tablename)) tt right join sys.systables st on tt.contents = st.tablename;&lt;/p&gt;</comment>
                            <comment id="13411676" author="kmarsden" created="Wed, 11 Jul 2012 17:07:07 +0100"  >&lt;p&gt;For table functions, should those queries be rejected according to the standard?&lt;/p&gt;
</comment>
                            <comment id="13411682" author="rhillegas" created="Wed, 11 Jul 2012 17:15:22 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Yes, these queries are another violation of part 2 of the SQL Standard, section 7.6 (&amp;lt;table reference&amp;gt;), Syntax Rule 6.a. I have re-opened &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5779&quot; title=&quot;Table functions should only accept arguments which are constant in their query block.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5779&quot;&gt;&lt;del&gt;DERBY-5779&lt;/del&gt;&lt;/a&gt; to continue the work of rejecting these violations. Thanks.&lt;/p&gt;</comment>
                            <comment id="13411738" author="rhillegas" created="Wed, 11 Jul 2012 18:15:48 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-5554-04-ac-remapVTIarg.diff. As an incremental improvement, I have committed the patch at subversion revision 1360306.&lt;/p&gt;</comment>
                            <comment id="13417401" author="rhillegas" created="Wed, 18 Jul 2012 20:39:20 +0100"  >&lt;p&gt;Resolving this issue because the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5779&quot; title=&quot;Table functions should only accept arguments which are constant in their query block.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5779&quot;&gt;&lt;del&gt;DERBY-5779&lt;/del&gt;&lt;/a&gt; prevents the additional bad syntax. We can re-open this issue if we discover other bad syntax.&lt;/p&gt;</comment>
                            <comment id="13726762" author="kmarsden" created="Thu, 1 Aug 2013 20:07:06 +0100"  >&lt;p&gt;Marking derby_backport_reject_10_8 as this issue required a release note and restricted SQL syntax. Doesn&apos;t look appropriate for backport.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12346111">DERBY-1520</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12357812">DERBY-2152</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12717893">DERBY-6593</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12557004">DERBY-5779</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12595142">DERBY-5822</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12532449" name="derby-5554-01-aa-addTableIDcolumn.diff" size="10905" author="rhillegas" created="Mon, 18 Jun 2012 20:10:47 +0100"/>
                            <attachment id="12532545" name="derby-5554-01-ab-addTableIDcolumn.diff" size="10741" author="rhillegas" created="Tue, 19 Jun 2012 14:53:39 +0100"/>
                            <attachment id="12532573" name="derby-5554-02-aa-0argConstructor.diff" size="16426" author="rhillegas" created="Tue, 19 Jun 2012 17:12:57 +0100"/>
                            <attachment id="12534963" name="derby-5554-03-aa-forbidVTItoVTIjoins.diff" size="1637" author="rhillegas" created="Tue, 3 Jul 2012 21:11:31 +0100"/>
                            <attachment id="12535717" name="derby-5554-04-aa-forceVTIAfterJoin.diff" size="3792" author="rhillegas" created="Mon, 9 Jul 2012 20:00:35 +0100"/>
                            <attachment id="12535722" name="derby-5554-04-ab-remapVTIarg.diff" size="6061" author="rhillegas" created="Mon, 9 Jul 2012 20:21:08 +0100"/>
                            <attachment id="12535838" name="derby-5554-04-ac-remapVTIarg.diff" size="5094" author="rhillegas" created="Tue, 10 Jul 2012 15:31:31 +0100"/>
                            <attachment id="12535351" name="releaseNote.html" size="2499" author="rhillegas" created="Fri, 6 Jul 2012 13:43:49 +0100"/>
                            <attachment id="12535228" name="releaseNote.html" size="2299" author="rhillegas" created="Thu, 5 Jul 2012 18:22:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Dec 2011 08:25:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>221924</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0b33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35614</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>