<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5425/DERBY-5425.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5425] Updateable holdable ResultSet terminates early after 65638 updates</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5425</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;After at least 65638 updates to an indexed column have been done via an updateable holdable resultset and the transaction is committed ResultSet.next() returns false even if more rows exist to be returned.&lt;/p&gt;

&lt;p&gt;The following program should output &quot;Total: 100000&quot; but instead outputs &quot;Total: 65638&quot;.&lt;/p&gt;

&lt;p&gt;import java.sql.Connection;&lt;br/&gt;
import java.sql.DriverManager;&lt;br/&gt;
import java.sql.PreparedStatement;&lt;br/&gt;
import java.sql.ResultSet;&lt;br/&gt;
import java.sql.SQLException;&lt;br/&gt;
import java.sql.Statement;&lt;/p&gt;

&lt;p&gt;public class DerbyBug {&lt;br/&gt;
	public static void main(String[] args) throws ClassNotFoundException, SQLException {&lt;br/&gt;
		Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);&lt;br/&gt;
		Connection conn = DriverManager.getConnection(&quot;jdbc:derby:TestDB;create=true&quot;);&lt;/p&gt;

&lt;p&gt;		conn.setAutoCommit(false);&lt;/p&gt;

&lt;p&gt;		Statement createStmt = conn.createStatement();&lt;br/&gt;
		createStmt.executeUpdate(&quot;CREATE TABLE test (a INT)&quot;);&lt;br/&gt;
		createStmt.executeUpdate(&quot;CREATE INDEX idxa ON test(a)&quot;);&lt;br/&gt;
		createStmt.close();&lt;/p&gt;

&lt;p&gt;		PreparedStatement insertStmt = conn.prepareStatement(&quot;INSERT INTO test(a) VALUES &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;/p&gt;

&lt;p&gt;		for (int i = 0; i &amp;lt; 100000; ++i) &lt;/p&gt;
{
			insertStmt.setInt(1, i);
			insertStmt.executeUpdate();
		}
&lt;p&gt;		insertStmt.close();&lt;/p&gt;

&lt;p&gt;		conn.commit();&lt;/p&gt;

&lt;p&gt;		Statement selectStmt = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);&lt;br/&gt;
		ResultSet rs = selectStmt.executeQuery(&quot;SELECT a FROM test FOR UPDATE&quot;);&lt;/p&gt;

&lt;p&gt;		int count = 0;&lt;br/&gt;
		while (rs.next()) &lt;/p&gt;
{
			rs.updateInt(1, count);
			rs.updateRow();
			count++;
			
			conn.commit();
		}

&lt;p&gt;		rs.close();&lt;br/&gt;
		selectStmt.close();&lt;br/&gt;
		conn.commit();&lt;br/&gt;
		conn.close();&lt;/p&gt;

&lt;p&gt;		System.out.println(&quot;Total: &quot; + count);&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			DriverManager.getConnection(&quot;jdbc:derby:;shutdown=true&quot;);
		}
&lt;p&gt; catch (SQLException e) {&lt;br/&gt;
			if (!e.getSQLState().equals(&quot;XJ015&quot;)) &lt;/p&gt;
{
				throw e;
			}
&lt;p&gt;		}&lt;br/&gt;
	}&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment>------------------ Java Information ------------------&lt;br/&gt;
Java Version:    1.6.0_26&lt;br/&gt;
Java Vendor:     Sun Microsystems Inc.&lt;br/&gt;
Java home:       D:\Program Files (x86)\Java\jre6&lt;br/&gt;
Java classpath:  .;..\derby.jar&lt;br/&gt;
OS name:         Windows 7&lt;br/&gt;
OS architecture: x86&lt;br/&gt;
OS version:      6.1&lt;br/&gt;
Java user name:  Andrew&lt;br/&gt;
Java user home:  D:\Users\Andrew&lt;br/&gt;
Java user dir:   E:\workspace\DerbyBug\bin&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.6&lt;br/&gt;
java.runtime.version: 1.6.0_26-b03&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: Java SE 6 - JDBC 4.0&lt;br/&gt;
[E:\workspace\DerbyBug\derby.jar] 10.7.1.1 - (1040133)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
------------------------------------------------------</environment>
        <key id="12523787">DERBY-5425</key>
            <summary>Updateable holdable ResultSet terminates early after 65638 updates</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="tehlaser">Andrew Johnson</reporter>
                        <labels>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Tue, 20 Sep 2011 22:50:56 +0100</created>
                <updated>Sun, 25 Nov 2012 20:14:46 +0000</updated>
                            <resolved>Tue, 18 Sep 2012 13:34:34 +0100</resolved>
                                    <version>10.7.1.1</version>
                                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13109015" author="tehlaser" created="Tue, 20 Sep 2011 22:52:44 +0100"  >&lt;p&gt;Reproduction&lt;/p&gt;</comment>
                            <comment id="13116600" author="knutanders" created="Wed, 28 Sep 2011 17:56:55 +0100"  >&lt;p&gt;Reproduced on trunk. Some observations:&lt;/p&gt;

&lt;p&gt;When an updatable result set uses an index, and a value is changed so that the row may be found again later in the index scan (typically because the key value is increased), the row location is stored in a hashtable to make it easy to skip that row when it&apos;s seen again. When the size of the hashtable exceeds 1/16 of derby.language.maxMemoryPerTable (default: 1048576/16=65536 rows), a TemporaryRowHolder is created to hold the overflowing rows. The TRH spills to disk when its size exceeds 100 rows. That is, it spills to disk after 65536+100=65636 row locations have been stored, which is very close to the number of rows seen by the repro.&lt;/p&gt;

&lt;p&gt;If UpdateResultSet.notifyForUpdateCursor() is modified to use the hashtable no matter how large it is, and never use the TemporaryRowHolder, the repro returns the expected number of rows (100000).&lt;/p&gt;

&lt;p&gt;If UpdateResultSet.notifyForUpdateCursor() is modified to create a TemporaryRowHolder instance that holds more than 100 rows before it spills to disk, the number of rows returned by the repro increases.&lt;/p&gt;

&lt;p&gt;Increasing derby.language.maxMemoryPerTable also makes the repro return more rows.&lt;/p&gt;

&lt;p&gt;So it looks like the problem is somehow related to this overflow handling.&lt;/p&gt;

&lt;p&gt;I also noticed that removing the commit() call after each row update in the repro, all rows were returned. At the same time I noticed that the temporary conglomerate created by TemporaryRowHolder is not holdable over commits (see second argument to openConglomerate() call in TemporaryRowHolderImpl.insert()), which sounds suspicious. However, simply hard-coding TemporaryRowHolderImpl.insert() to create conglomerates that are holdable over commit, didn&apos;t change the number of rows returned.&lt;/p&gt;</comment>
                            <comment id="13403887" author="knutanders" created="Fri, 29 Jun 2012 14:19:59 +0100"  >&lt;p&gt;After some more debugging, it turned out this issue happens because the temporary conglomerates are not holdable over commits, as suggested above. When the temporary row holder spills to disk, all rows are written to it, but they are lost on commit, so that the scan is emptied and too few rows are returned.&lt;/p&gt;

&lt;p&gt;I mentioned in my previous comment that I had tried making TemporaryRowHolder&apos;s conglomerate holdable over commit with no luck. However, with the attached patch (holdable-row-holders.diff.txt) the repro successfully returns 100000 rows. That patch also makes the scans in TemporaryRowHolderResultSet holdable.&lt;/p&gt;

&lt;p&gt;This patch is not intended for commit, since it unconditionally changes the holdability of all temporary row holders, but at least it shows that the lack of holdability is what&apos;s causing this bug.&lt;/p&gt;</comment>
                            <comment id="13404800" author="knutanders" created="Sun, 1 Jul 2012 21:26:51 +0100"  >&lt;p&gt;The problematic code implements essentially the same functionality as BackingStoreHashtable. If we could reuse BackingStoreHashtable here, it might fix the bug and probably also reduce the amount of code.&lt;/p&gt;</comment>
                            <comment id="13405807" author="knutanders" created="Tue, 3 Jul 2012 12:12:09 +0100"  >&lt;p&gt;I&apos;m uploading a patch (d5425-1a.diff.txt) that makes updatable cursors use BackingStoreHashtable to keep track of the rows that have been moved in the scan direction and therefore need to be ignored the next time they are seen. BackingStoreHashtable has a flag that specifies whether its contents should be kept over commit, which makes it possible to get around the problems with the original code.&lt;/p&gt;

&lt;p&gt;In essence, the patch just makes UpdateResultSet.notifyForUpdateCursor() create a BackingStoreHashtable instead of a java.util.Hashtable, and removes all the code that handles overflow to a TemporaryRowHolder instance as that&apos;s now handled transparently by BackingStoreHashtable.&lt;/p&gt;

&lt;p&gt;One existing test case had to be modified to pass with the patch. UpdateCursorTest.testVirtualMemoryHeap() expected a particular ordering of the rows. Specifically, it expected the rows stored in the in-memory portion of the TemporaryRowHolder to come out in reversed order. Since we no longer use a TemporaryRowHolder to store the overflow rows when the patch is applied, the rows returned from the index scan will follow the index ordering also when the hash table overflows. I would think the new ordering is more in line with the users&apos; expectation of how results from an index scan are ordered.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;More detailed description of the changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;impl/sql/execute/UpdateResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Create BackingStoreHashtable instead of java.util.Hashtable.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Initialize BackingStoreHashtable.keepAfterCommit based on the holdability of the underlying scan.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use same initial capacity and maximum capacity as the original hash table, so that the memory footprint will be roughly the same.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove code that handles the hash table growing beyond maxCapacity, as that&apos;s handled internally in BackingStoreHashtable now by spilling to disk.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;impl/sql/execute/TableScanResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove code that reads the overflow rows, as the distinction between rows in memory and rows spilt to disk .&lt;/p&gt;

&lt;p&gt;Remove fields that are only used to handle overflow rows, and code that checks the values of those fields.&lt;/p&gt;

&lt;p&gt;Make close() release the resources held by the BackingStoreHashtable.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;impl/sql/execute/IndexRowToBaseRowResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove fields that are only used to handle overflow rows&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;impl/sql/execute/CurrentOfResultSet.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove code that reads the overflow rows, and the fields that are only used in the removed code.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;functionTests/tests/lang/UpdateCursorTest.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Update expected ordering of rows in testVirtualMemoryHeap() as described above.&lt;/p&gt;

&lt;p&gt;Add test case testDerby5425HoldOverCommit() which exposes this bug and verifies the fix. Since UpdateCursorTest sets derby.language.maxMemoryPerTable to 1, the bug can be exposed with a much smaller number of rows than in the original repro.&lt;/p&gt;</comment>
                            <comment id="13409322" author="knutanders" created="Mon, 9 Jul 2012 11:53:23 +0100"  >&lt;p&gt;Committed revision 1359052.&lt;/p&gt;</comment>
                            <comment id="13453366" author="kmarsden" created="Tue, 11 Sep 2012 21:21:56 +0100"  >&lt;p&gt;Reopen for backport analysis. Temporarily assign to yourself if you backport and then reassign to Knut Anders before closing.&lt;/p&gt;</comment>
                            <comment id="13456885" author="knutanders" created="Mon, 17 Sep 2012 09:42:40 +0100"  >&lt;p&gt;The patch merged cleanly to 10.9 and 10.8. However, I&apos;m seeing failures in the compatibility test on the 10.8 branch. I won&apos;t backport until I understand why it&apos;s failing.&lt;/p&gt;</comment>
                            <comment id="13457779" author="knutanders" created="Tue, 18 Sep 2012 13:34:34 +0100"  >&lt;p&gt;The compatibility tests failed the first two times I ran it on the 10.8 branch. It varied which combinations failed, and I couldn&apos;t see what caused it, only that some of the test cases failed with &quot;database not found&quot; errors. However, I&apos;ve now re-run the compatibility tests many times without seeing the error again, so I&apos;m assuming it was just a temporary environment problem and/or one of the instabilities in the tests&apos; sub-process handling that we&apos;ve cleaned up on trunk.&lt;/p&gt;

&lt;p&gt;Merged to 10.9 with revision 1387111.&lt;br/&gt;
Merged to 10.8 with revision 1387112.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12607119">DERBY-5923</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12495275" name="DerbyBug.java" size="1573" author="tehlaser" created="Tue, 20 Sep 2011 22:52:44 +0100"/>
                            <attachment id="12534762" name="d5425-1a.diff.txt" size="24012" author="knutanders" created="Tue, 3 Jul 2012 12:12:09 +0100"/>
                            <attachment id="12533981" name="holdable-row-holders.diff.txt" size="3407" author="knutanders" created="Fri, 29 Jun 2012 14:19:59 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Sep 2011 16:56:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24838</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09v3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35416</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>