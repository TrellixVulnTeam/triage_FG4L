<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5185/DERBY-5185.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5185] store/rollForwardRecovery.sql stuck in RAFContainer4.recoverContainerAfterInterrupt() during shutdown</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5185</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have a derbyall that has been running for more than two days now. It seems to be stuck in the store/rollForwardRecovery.sql test while the engine is shutting down.&lt;/p&gt;

&lt;p&gt;Here&apos;s the stack trace for the daemon thread that&apos;s stuck:&lt;/p&gt;

&lt;p&gt;&quot;derby.rawStoreDaemon&quot; daemon prio=10 tid=0xf3e7dc00 nid=0x3505 waiting on condition &lt;span class=&quot;error&quot;&gt;&amp;#91;0xf4066000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: TIMED_WAITING (sleeping)&lt;br/&gt;
        at java.lang.Thread.sleep(Native Method)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.recoverContainerAfterInterrupt(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.readPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.find(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.getAllocPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainer.getAllocPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAllocPage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(Unknown Source)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;locked &amp;lt;0xc5adbce8&amp;gt; (a org.apache.derby.impl.store.raw.data.AllocationCache)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.deallocatePage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainer.removePage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removePage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapController.removePage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapPostCommit.purgeCommittedDeletes(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapPostCommit.performWork(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:722)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And here&apos;s the stack trace for the main thread, which is waiting for the daemon thread to stop:&lt;/p&gt;

&lt;p&gt;&quot;main&quot; prio=10 tid=0xf6c05c00 nid=0x34e5 in Object.wait() &lt;span class=&quot;error&quot;&gt;&amp;#91;0xf6dbe000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: WAITING (on object monitor)&lt;br/&gt;
        at java.lang.Object.wait(Native Method)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting on &amp;lt;0xc5ac5760&amp;gt; (a org.apache.derby.impl.services.daemon.BasicDaemon)&lt;br/&gt;
        at java.lang.Object.wait(Object.java:504)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.BasicDaemon.pause(Unknown Source)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0xc5ac5760&amp;gt; (a org.apache.derby.impl.services.daemon.BasicDaemon)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.BasicDaemon.stop(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.RawStore.stop(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.stop(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.shutdown(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:620)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:222)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.cleanupGo(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(Unknown Source)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>Derby 10.9.0.0 alpha - (1090406)&lt;br/&gt;
Oracle Enterprise Linux 6.0&lt;br/&gt;
Linux 2.6.32-100.28.9.el6.x86_64 #1 SMP Wed Mar 16 19:24:16 EDT 2011 x86_64 x86_64 x86_64 GNU/Linux&lt;br/&gt;
java version &amp;quot;1.7.0-ea&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.7.0-ea-b135)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 21.0-b05, mixed mode, sharing)</environment>
        <key id="12503912">DERBY-5185</key>
            <summary>store/rollForwardRecovery.sql stuck in RAFContainer4.recoverContainerAfterInterrupt() during shutdown</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 11 Apr 2011 10:11:03 +0100</created>
                <updated>Thu, 30 Jun 2011 10:21:44 +0100</updated>
                            <resolved>Mon, 18 Apr 2011 21:23:19 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.8.1.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13018252" author="knutanders" created="Mon, 11 Apr 2011 10:13:12 +0100"  >&lt;p&gt;Uploading a stack dump for the process that hangs.&lt;/p&gt;</comment>
                            <comment id="13018382" author="dagw" created="Mon, 11 Apr 2011 16:09:42 +0100"  >&lt;p&gt;The hang occurs in this piece of looping code (cf the sleep)&lt;/p&gt;

&lt;p&gt;       // Wait till other concurrent threads hit the wall&lt;br/&gt;
        // (ClosedChannelException) and are a ready wait for us to clean up, so&lt;br/&gt;
        // we can set them loose when we&apos;re done.&lt;br/&gt;
        while (true) {&lt;br/&gt;
            synchronized (channelCleanupMonitor) {&lt;br/&gt;
                if (threadsInPageIO == 0) &lt;/p&gt;
{
                    // Either no concurrent threads, or they are now waiting
                    // for us to clean up (see ClosedChannelException case)
                    break;
                }
&lt;p&gt;            }&lt;/p&gt;

&lt;p&gt;            try &lt;/p&gt;
{
                Thread.sleep(10);
            }
&lt;p&gt; catch (InterruptedException te) &lt;/p&gt;
{
                InterruptStatus.setInterrupted();
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;Looking at VM running, we can see that there are only two Derby threads still live, and only the one that loops is in the NIO code.&lt;br/&gt;
This means that the counter will never reach zero. Again looking at the live VM&apos;s heap, there are several containers whose counters are positive, which they are not supposed to be, since we have only this one thread inside the NIO code. The container  for whom the CacheEntry#keepCount &amp;gt; 0 does have a value threadsInPageIO &amp;gt; 0. This is probably the one that sees the hang during HeapPostCommit#purgeComittedDeletes.&lt;/p&gt;

&lt;p&gt;This is not good, since this happens during shutdown without any interrupts being issued by the application code (Derby uses interrupts during shutdown to stop threads). So, this is a regression in that earlier, this would only result in an IO error during shutdown (masked), wheres as now we see a hang. &lt;/p&gt;

&lt;p&gt;I will a) commit a patch to make the loop bounded so we can get the regression out of the way, then b) look for the reason why the counter gets wrong.&lt;/p&gt;</comment>
                            <comment id="13018393" author="dagw" created="Mon, 11 Apr 2011 16:34:45 +0100"  >&lt;p&gt;Uploading a patch which makes the loop in question bounded (maxes out at 60s): derby-5185-1a, running regressions.&lt;/p&gt;</comment>
                            <comment id="13018571" author="dagw" created="Mon, 11 Apr 2011 22:07:12 +0100"  >&lt;p&gt;Regressions passed.&lt;/p&gt;</comment>
                            <comment id="13018583" author="dagw" created="Mon, 11 Apr 2011 22:36:10 +0100"  >&lt;p&gt;Committed to trunk as svn 1091221.&lt;/p&gt;</comment>
                            <comment id="13018634" author="dagw" created="Tue, 12 Apr 2011 00:49:44 +0100"  >&lt;p&gt;Backported to 10.8 as svn 1091258.&lt;/p&gt;</comment>
                            <comment id="13019886" author="knutanders" created="Thu, 14 Apr 2011 17:07:22 +0100"  >&lt;p&gt;I saw a new hang in rollForwardRecovery.sql after the first fix went in. On the same machine, but this time with OpenJDK 6. The hang now had moved to a different location:&lt;/p&gt;

&lt;p&gt;&quot;main&quot; prio=10 tid=0x00007f9f0c009000 nid=0x571 in Object.wait() &lt;span class=&quot;error&quot;&gt;&amp;#91;0x00007f9f123eb000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: WAITING (on object monitor)&lt;br/&gt;
	at java.lang.Object.wait(Native Method)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting on &amp;lt;0x00007f9ee3eccf58&amp;gt; (a java.lang.Object)&lt;br/&gt;
	at java.lang.Object.wait(Object.java:502)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(Unknown Source)&lt;/li&gt;
	&lt;li&gt;locked &amp;lt;0x00007f9ee3eccf58&amp;gt; (a java.lang.Object)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.writePage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.clean(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.stop(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.stop(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.shutdown(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:620)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:222)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.cleanupGo(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(Unknown Source)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13019901" author="knutanders" created="Thu, 14 Apr 2011 17:40:34 +0100"  >&lt;p&gt;I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5190&quot; title=&quot;store/rollForwardRecovery.sql stuck in RAFContainer4.writePage() during shutdown&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5190&quot;&gt;&lt;del&gt;DERBY-5190&lt;/del&gt;&lt;/a&gt; for the new hang.&lt;/p&gt;</comment>
                            <comment id="13020301" author="dagw" created="Fri, 15 Apr 2011 14:50:13 +0100"  >&lt;p&gt;Scenario: A thread has seen an interrupt and is getting ready to resurrect the channel in &quot;recoverContainerAfterInterrupt&quot;. Before it starts doing this, however, it waits for any other threads currently doing IO on this container to &quot;hit the wall&quot; and start waiting for the current thread to do the recovery. The current thread knows its free to proceed when the counter &quot;threadsInPageIO&quot; reaches 0. In this case, it has given up waiting for the counter the reach 0 and throws FILE_IO_INTERRUPTED. (I believe &quot;threadsInPageIO&quot; should have been 0 here but is not for some reason, see below). In throwing, it neglects to reset state variable &quot;restoreChannelInProgress&quot; which makes the (next) thread coming along, which we see hanging in this issue get stuck when trying to enter the IO code in the &quot;gain entry&quot; section.&lt;/p&gt;

&lt;p&gt;Attaching a patch derby-5185-2a, which fixes state invariant maintenance when throwing FILE_IO_INTERRUPTED. It also adds a maximum number of retries for the readPage code abd fixes some cases whereby the state variable &quot;threadsInPageIO&quot; could risk not being properly update when exceptions would get thrown. This may be the underlying reason for what we see here.&lt;/p&gt;

&lt;p&gt;Ran regressions OK on Solaris/JDK6 and Debian/JDK7.&lt;/p&gt;</comment>
                            <comment id="13020963" author="knutanders" created="Mon, 18 Apr 2011 11:11:24 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;Using try/finally to maintain threadsInPageIO sounds like a good approach. The patch looks good to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="13021032" author="dagw" created="Mon, 18 Apr 2011 14:51:31 +0100"  >&lt;p&gt;Uploading and committed variant 2b of the patch (2a had a line missing) at svn 1094572.&lt;/p&gt;</comment>
                            <comment id="13021036" author="dagw" created="Mon, 18 Apr 2011 15:10:07 +0100"  >&lt;p&gt;Backported this fix to the 10.8 branch as svn 1094585.&lt;/p&gt;</comment>
                            <comment id="13021053" author="dagw" created="Mon, 18 Apr 2011 15:51:38 +0100"  >&lt;p&gt;Since we don&apos;t have a lot of time to gain confidence in the code right now with the impending release, I&apos;d like to avoid the possibility of further hangs in the interrupt handling by committing a follow-up patch which adds max waiting time logic to the two remaining loops in the code for threads waiting for a condition to become true: the &quot;gain entry&quot; logic in readPage and writePage. It should not be necessary now that we have fixed the state maintenance code, but just to be safe.. In normal operation it does not add overhead (just one extra counter comparison) so it seems a cheap price to pay to avoid the prospect of a hang during shutdown - (which constitute regression). If we max out we will throw FILE_IO_INTERRUPTED as elsewhere. Uploading derby-5185-3a for this.&lt;/p&gt;</comment>
                            <comment id="13021218" author="dagw" created="Mon, 18 Apr 2011 21:03:16 +0100"  >&lt;p&gt;Regressions ran with the 3a patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;OK on Solaris x86/JDK6 and&lt;/li&gt;
	&lt;li&gt;with one error which I believe is unrelated, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5197&quot; title=&quot;AssertionFailedError: Could not connect in 20000 ms in ReplicationRun_Local_3_p2.testReplication_Local_3_p2_StateTests_bigInsert_immediateStopMaster&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5197&quot;&gt;&lt;del&gt;DERBY-5197&lt;/del&gt;&lt;/a&gt;, on Debian/JDK7,&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;both with insane jars.&lt;/p&gt;</comment>
                            <comment id="13021227" author="dagw" created="Mon, 18 Apr 2011 21:21:24 +0100"  >&lt;p&gt;Committed as svn 1094728. on trunk and svn 1094730. on 10.8 branch.&lt;/p&gt;</comment>
                            <comment id="13021446" author="knutanders" created="Tue, 19 Apr 2011 08:30:52 +0100"  >&lt;p&gt;Thanks, Dag. The 3a patch looks like a good precaution to prevent hangs in case there are other similar problems. I&apos;ve run suites.All and derbyall multiple times on the platforms on which I saw the hangs, and I haven&apos;t seen any problems so far.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12504284">DERBY-5190</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12476009" name="derby-5185-1a.diff" size="1294" author="dagw" created="Mon, 11 Apr 2011 16:34:45 +0100"/>
                            <attachment id="12476453" name="derby-5185-2a.diff" size="2809" author="dagw" created="Fri, 15 Apr 2011 14:50:13 +0100"/>
                            <attachment id="12476454" name="derby-5185-2a.stat" size="76" author="dagw" created="Fri, 15 Apr 2011 14:50:13 +0100"/>
                            <attachment id="12476610" name="derby-5185-2b.diff" size="2864" author="dagw" created="Mon, 18 Apr 2011 14:52:14 +0100"/>
                            <attachment id="12476614" name="derby-5185-3a.diff" size="1951" author="dagw" created="Mon, 18 Apr 2011 15:51:38 +0100"/>
                            <attachment id="12475988" name="stack.txt" size="5550" author="knutanders" created="Mon, 11 Apr 2011 10:13:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 Apr 2011 15:09:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24700</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ft3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>