<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5622/DERBY-5622.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5622] Reduce the chance for hash collisions when checking bootPassword at boot time and when changing password.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5622</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;There are two issues, already seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2687&quot; title=&quot;store/encryptDatabase.sql fails intermittently with ClassNotFoundException, Log Corrupted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2687&quot;&gt;&lt;del&gt;DERBY-2687&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;   &quot;the boot issue&quot;: there is a 1/2**16 chance that a wrong bootPassword will allow boot to proceed (but since its decoded key is wrong the boot will fail).&lt;br/&gt;
   &quot;the password change&quot; issue: similarly, there is a chance that the wrong bootPassword will be accepted trying to change it via &lt;br/&gt;
    SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&apos;bootPassword&apos;, ...) at least for algorithms that do not check IV (initialization vector) in addition to the&lt;br/&gt;
    digest, e.g. &quot;DES/ECB/NoPadding&quot;&lt;/p&gt;

&lt;p&gt;The latter case may lead to data corruption, cf. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2687&quot; title=&quot;store/encryptDatabase.sql fails intermittently with ClassNotFoundException, Log Corrupted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2687&quot;&gt;&lt;del&gt;DERBY-2687&lt;/del&gt;&lt;/a&gt; discussion. I think the risk is fairly low, though: One would need to have execution permission to change the property if SQL authorization is used, and in most scenarios the supplied existing password would be correct. But since the results can be bad, it would be good to reduce or eliminate the risk.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12543100">DERBY-5622</key>
            <summary>Reduce the chance for hash collisions when checking bootPassword at boot time and when changing password.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Feb 2012 21:03:49 +0000</created>
                <updated>Wed, 3 Sep 2014 09:31:37 +0100</updated>
                            <resolved>Thu, 19 Jul 2012 19:56:42 +0100</resolved>
                                                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13288847" author="rhillegas" created="Mon, 4 Jun 2012 20:59:36 +0100"  >&lt;p&gt;I am trying to figure out the data corruption entailed here. I can see a code path by which supplying a wrong boot password can stumble forward to die on a ClassNotFoundException. But after that, the correct boot password still boots the database. Can you help me understand how to trigger a data corruption? Thanks.&lt;/p&gt;</comment>
                            <comment id="13288888" author="dagw" created="Mon, 4 Jun 2012 21:40:53 +0100"  >&lt;p&gt;Please see discussion here: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2687?focusedCommentId=13209225&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13209225&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2687?focusedCommentId=13209225&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13209225&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13289488" author="rhillegas" created="Tue, 5 Jun 2012 16:38:08 +0100"  >&lt;p&gt;Thanks, Dag. The discussion on that issue suggests that there is a way to change the boot password so that the system becomes unbootable. That may be the data corruption case you indicate. My simple attempts to script that problem are not succeeding. I have tried commenting out the digest verification.  That causes the ClassNotFoundException when I try to give a bad boot password, but I have not succeeded in creating an unbootable database.&lt;/p&gt;

&lt;p&gt;Can you help me understand how to script the data corruption? Instructions which describe how to fake a digest collision by instrumenting the engine are fine, I just need to be able to arrive at an unbootable database. Thanks.&lt;/p&gt;</comment>
                            <comment id="13289540" author="dagw" created="Tue, 5 Jun 2012 18:13:04 +0100"  >&lt;p&gt;Given an encrypted secret key S, which is stored in service.properties after having been encrypted with the boot password BO, we have stored&lt;/p&gt;

&lt;p&gt;      S&apos; = encrypt(S, BO)&lt;/p&gt;

&lt;p&gt;The payload data D exists encrypted using S:&lt;/p&gt;

&lt;p&gt;    D&apos; = encrypt(D, S)&lt;/p&gt;

&lt;p&gt;so inverse, when we boot up again:&lt;/p&gt;

&lt;p&gt;Using BO we do &lt;/p&gt;

&lt;p&gt;      S = decrypt(S&apos;, BO)&lt;/p&gt;

&lt;p&gt;check digest(S) against stored digest, and get at the data:&lt;/p&gt;

&lt;p&gt;      D = decrypt(D&apos;, S).&lt;/p&gt;

&lt;p&gt;Now, when we try to change the boot password in the pathological case, we do this (using a bogus old boot password):&lt;/p&gt;

&lt;p&gt;   S-bogus = decrypt(S&apos;, B-bogus)&lt;/p&gt;

&lt;p&gt;next, the check of S-bogus against digest and IV (initialization vector) would normally fail it, but it could happen that it was erroneously accepted. The what happen is we store using the new boot password (BN) onto service.properties:&lt;/p&gt;

&lt;p&gt;        S-bogus&apos; = encrypt(S-bogus, BN)&lt;/p&gt;

&lt;p&gt;Meanwhile, the data is still encrypted with S; we don&apos;t reencrypt everything after changing the boot password.&lt;/p&gt;

&lt;p&gt;Next time we boot up again we do:&lt;/p&gt;

&lt;p&gt;     S-bogus = decrypt(S-bogus&apos;, BN)&lt;/p&gt;

&lt;p&gt;which works nicely and passes the digest since we use the correct new boot password, BN.&lt;/p&gt;

&lt;p&gt;Now, trying to get the data:&lt;/p&gt;

&lt;p&gt;     decrypt(D&apos;, S-bogus) &lt;/p&gt;

&lt;p&gt;will yield garbage, since we&apos;d need to use S to get the correct data out.&lt;/p&gt;

&lt;p&gt;So, to demonstrate this, I think you&apos;ll need to use a bogus old boot key, make it pass the digest and IV check using instrumentation of sorts, then shutdown, and reboot to see if your data makes sense. They shouldn&apos;t.&lt;/p&gt;</comment>
                            <comment id="13289690" author="dagw" created="Tue, 5 Jun 2012 21:24:30 +0100"  >&lt;p&gt;Uploading script + instrumentation patch which corrupts the db I believe. It can&apos;t be booted using any of the three involved boot passwords after we&apos;re done.&lt;/p&gt;</comment>
                            <comment id="13289721" author="dagw" created="Tue, 5 Jun 2012 22:09:10 +0100"  >&lt;p&gt;I think the problem can only occur when changing the bootpassword with SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY. If one tries to change it at boot time, the boot would fail since S-bogus couldn&apos;t decrypt the data and the boot will fail with the same symptom as seen in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2687&quot; title=&quot;store/encryptDatabase.sql fails intermittently with ClassNotFoundException, Log Corrupted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2687&quot;&gt;&lt;del&gt;DERBY-2687&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Apparently, when using SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY, the data isn&apos;t being re-encrypted with a new secret key, and the old one gets lost&lt;br/&gt;
as explained above.&lt;/p&gt;</comment>
                            <comment id="13291838" author="rhillegas" created="Fri, 8 Jun 2012 17:03:23 +0100"  >&lt;p&gt;Thanks for the repro and the additional analysis, Dag. Here are some more observations:&lt;/p&gt;

&lt;p&gt;1) When you create an encrypted database, you specify either an explicit encryption key or a boot password. If you specify a boot password, then Derby generates an encryption key for you. You can&apos;t go back and forth between these techniques. Once you specify a boot password, you can&apos;t try to figure out the generated encryption key and boot the database using the encryption key. Similarly, if you create the database with an explicit encryption key, you can&apos;t try to introduce a boot password later on.&lt;/p&gt;

&lt;p&gt;This is because Derby stores different verification metadata for the two techniques. The verification metadata is used to catch bad boot passwords and encryption keys before actually trying to decrypt the conglomerates. If Derby can catch a bad boot password or encryption key before trying to decrypt the conglomerates, then Derby can raise an intelligible error message.&lt;/p&gt;

&lt;p&gt;If the database was created with a boot password, then Derby expects to find an encryptedBootPassword attribute in service.properties. The value of this attribute includes a digest used at boot time to verify the boot password before trying to decrypt the conglomerates.&lt;/p&gt;

&lt;p&gt;In contrast, if the database was created with an explicit encryption key, then Derby generates a verifyKey.dat file next to service.properties. The contents of verifyKey.dat are used at boot time to verify the encryption key before trying to decrypt the conglomerates.&lt;/p&gt;

&lt;p&gt;If you try to switch your encryption technique later on, Derby will fail to boot because it will not find the verification metadata needed by the other technique.&lt;/p&gt;

&lt;p&gt;2) If you change the boot password using boot attributes, this generates a new encryption key and re-encrypts the data.&lt;/p&gt;

&lt;p&gt;3) If you change the boot password using SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY, then a new encryption key is NOT generated and the data is NOT re-encrypted.&lt;/p&gt;

&lt;p&gt;4) Using SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY to change the boot password strikes me as a little weird. The usage, however, goes back a long way, at least as far back as Cloudscape 3.5. SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY was originally designed to store Derby properties in the property conglomerate. The boot password is not a property. It is a connection URL attribute. Furthermore, the associated, generated encryption key is not stored in the properties conglomerate. Instead, it is stored in service.properties. I don&apos;t think that we should be manipulating the contents of service.properties with a procedure which was designed to manage the property conglomerate. I support Knut&apos;s suggestion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4328&quot; title=&quot;The Developer&amp;#39;s Guide falsely claims that you can use SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY to change the boot password on an encrypted database.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4328&quot;&gt;&lt;del&gt;DERBY-4328&lt;/del&gt;&lt;/a&gt; that we should introduce a new SYSCS_UTIL.SYSCS_CHANGE_BOOT_PASSWORD procedure for changing the boot password on the fly. I would support deprecating the use of SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY to change the boot password; we could raise an error telling users to use SYSCS_UTIL.SYSCS_CHANGE_BOOT_PASSWORD instead. To mitigate the backward compatibility problems, we could phase in this change over the course of a couple releases, warning people in 10.10 that the old usage will be deprecated in 10.11.&lt;/p&gt;</comment>
                            <comment id="13291852" author="chaase3" created="Fri, 8 Jun 2012 17:35:07 +0100"  >&lt;p&gt;You explain this with remarkable clarity, Rick &amp;#8211; and I don&apos;t think we ever document clearly that using bootPassword is incompatible with using encryptionKey. Shall I file a doc issue on this?&lt;/p&gt;</comment>
                            <comment id="13291866" author="rhillegas" created="Fri, 8 Jun 2012 18:08:57 +0100"  >&lt;p&gt;Hi Kim. Yes, I think it&apos;s worth clarifying the documentation. Thanks!&lt;/p&gt;</comment>
                            <comment id="13291898" author="dagw" created="Fri, 8 Jun 2012 19:21:37 +0100"  >&lt;p&gt;Note that the attribute called encryptedBootPassword is a bit of a misnomer: The value is actually the db encryption key encrypted using the boot password plus a hash of the db encryption key.&lt;/p&gt;

&lt;p&gt;Btw, Rick, even if we introduce a new method for this, the issue would remain, unless we change the behavior to generate a new encryption key and re-encrypt. Is that what you are proposing?&lt;/p&gt;</comment>
                            <comment id="13291909" author="rhillegas" created="Fri, 8 Jun 2012 19:43:10 +0100"  >&lt;p&gt;Thanks for the additional comments, Dag. I&apos;m proposing that we introduce the new procedure as a separate, orthogonal issue.&lt;/p&gt;

&lt;p&gt;I agree that the bug still needs to be addressed. I&apos;m convinced that there is value in just changing the boot password without re-encrypting the data. Right now, I&apos;m considering two approaches to addressing this issue:&lt;/p&gt;

&lt;p&gt;1) Save the real boot password somewhere at boot time and compare it to what is passed into the password-changing procedure (currently SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY). The advantage of this solution is that it is airtight. The disadvantage is that a sensitive piece of information would be maintained in memory somewhere, which seems like a security vulnerability to me.&lt;/p&gt;

&lt;p&gt;2) Continue to try to reconstruct the generated key from the boot password that was passed to the password-changing procedure. Use this to create a new CipherProvider. Then use the old CipherProvider to encrypt some long byte array and decrypt the result with the new CipherProvider. If the result is the original byte array, then the boot password was probably correct. This is not airtight, but with a sufficiently long byte array the probability of data corruption might be vanishingly small.&lt;/p&gt;

&lt;p&gt;I would be interested in your thoughts. Thanks.&lt;/p&gt;</comment>
                            <comment id="13293884" author="rhillegas" created="Tue, 12 Jun 2012 20:59:25 +0100"  >&lt;p&gt;Attaching derby-5622-01-aa-decryptEncryptedSample.diff, derby-5622-TT-fixWithTestScaffolding.diff, and derby-5622-repro.sql. The first file is a patch for this issue, described below. The second file is the patch plus some extra edits which disable the pre-existing checks for whether the user has supplied the correct old bootpassword. The third file is a script demonstrating that a new check, added by the patch, runs if you make it past the pre-existing checks. To demonstrate the new behavior, apply derby-5622-TT-fixWithTestScaffolding.diff, run derby-5622-repro.sql, and look at the stack trace in derby.log to confirm that the new code was exercised.&lt;/p&gt;

&lt;p&gt;Regression tests passed cleanly for me after applying derby-5622-01-aa-decryptEncryptedSample.diff.&lt;/p&gt;

&lt;p&gt;Here is a re-cap of the current behavior in 10.8. Thanks to Dag and Knut for investigating this behavior here and on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2687&quot; title=&quot;store/encryptDatabase.sql fails intermittently with ClassNotFoundException, Log Corrupted&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2687&quot;&gt;&lt;del&gt;DERBY-2687&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;1) Let us say that the database was encrypted and booted using a bootpassword, which we will call $&lt;/p&gt;
{actualBootPassword}.&lt;br/&gt;
&lt;br/&gt;
2) Note that when the database was created, Derby generated an encryption key, scrambled it using ${actualBootPassword}
&lt;p&gt;, and stored the scrambled result in service.properties. The generated encryption key is what is actually used to encrypt and decrypt data in the conglomerates and log files. In particular, the storage layer uses the encryption key to construct an object which encrypts data in the conglomerates. Let us call this object the storeEncrypter.&lt;/p&gt;

&lt;p&gt;3) The DBO can change the boot password by calling SYSCS_UTIL.SYSCS_SET_DATABASE_PASSWORD. If the key argument is &quot;bootPassword&quot;, then Derby expects that the value argument will be a string of the form &quot;${oldBootPassword,$&lt;/p&gt;
{newBootPassword}&quot;, where ${oldBootPassword} is expected to be ${actualBootPassword}. Note the comma in the value argument string. The comma is important. It separates ${oldBootPassword} from ${newBootPassword}
&lt;p&gt;, effectively allowing the caller to pass 3 arguments to a procedure which expects two arguments. This peculiar syntax is discussed earlier on this issue and on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4328&quot; title=&quot;The Developer&amp;#39;s Guide falsely claims that you can use SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY to change the boot password on an encrypted database.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4328&quot;&gt;&lt;del&gt;DERBY-4328&lt;/del&gt;&lt;/a&gt;. Here is an example of how to call SYSCS_SET_DATABASE_PASSWORD to change the bootpassword:&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_set_database_property( &apos;bootPassword&apos;, &apos;bpass_02,bpass_03&apos; );&lt;/p&gt;

&lt;p&gt;4) Before honoring this command, Derby needs to verify that the caller knows what they are doing. In particular, Derby needs to verify that $&lt;/p&gt;
{oldBootPassword} really is ${actualBootPassword}. Presumably for security reasons, Derby doesn&apos;t stash ${actualBootPassword} anywhere, either on disk or in memory. Derby tries to verify the equivalence of ${oldBootPassword}
&lt;p&gt; and $&lt;/p&gt;
{actualBootPassword}
&lt;p&gt; by first using $&lt;/p&gt;
{oldBootPassword} to unscramble the encryption key stored in service.properties. Then Derby runs the following checks to verify that the unscrambed key is the actual encryption key used by storeEncrypter:&lt;br/&gt;
&lt;br/&gt;
i) Derby verifies that a 16 bit digest (appended to the scrambled result) is the same as a 16 bit digest computed from the unscrambled result. We believe that Derby more or less randomly generated the original encryption key. Therefore, the chance that a wrong ${oldBootPassword}
&lt;p&gt; will pass this check is smallish, viz., 1 in 2&amp;lt;sup&amp;gt;16&amp;lt;/sup&amp;gt;.&lt;/p&gt;

&lt;p&gt;ii) If the previous check succeeds, then Derby performs a second check. Derby verifies that the unscrambled encryption key gives rise to the same initialization vector used by the storeEncrypter. An initialization vector is a seed for the encryption logic, as described here: &lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_vector&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Initialization_vector&lt;/a&gt;. I don&apos;t understand the combinatorics of constructing the initialization vector. So I can&apos;t estimate the risk that this check will succeed on a wrong $&lt;/p&gt;
{oldBootPassword} after passing the &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; check. However, the initialization vector is at most 128 bits long, so the probability of a collision is at least 1 in 2&amp;lt;sup&amp;gt;128&amp;lt;/sup&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
So the chance that a bad ${oldBootPassword}
&lt;p&gt; will pass both &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and (ii) is at least 1 in 2&amp;lt;sup&amp;gt;144&amp;lt;/sup&amp;gt;.&lt;/p&gt;

&lt;p&gt;So far I have described the process of changing the bootpassword in the current Derby release, 10.8. The attached derby-5622-01-aa-decryptEncryptedSample.diff patch adds a third check in case &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and (ii) both succeed:&lt;/p&gt;

&lt;p&gt;(iii) We construct a candidateDecrypter from the unscrambled encryption key. Then we construct a stereotypical block of cleartext, which is 8192 bits long. We encrypt the cleartext using the storeEncrypter. Then we decrypt the result using the candidateDecrypter. If the final result matches the original cleartext, then the check passes. Again, I don&apos;t understand the combinatorics of Derby&apos;s encryption algorithms on this stereotypical cleartext, and I don&apos;t understand how they interact on keys which pass the &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and (ii) checks. However, the probability that a bad $&lt;/p&gt;
{oldBootPassword} will pass this new check is at least 1 in 2&amp;lt;sup&amp;gt;8192&amp;lt;/sup&amp;gt;.&lt;br/&gt;
&lt;br/&gt;
So the chance that a bad ${oldBootPassword}
&lt;p&gt; will pass &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, (ii), and (iii) is at least 1 in 2&amp;lt;sup&amp;gt;8336&amp;lt;/sup&amp;gt;. That, however, is a very big number.&lt;/p&gt;

&lt;p&gt;I think that this additional check probably reduces the risk of this bug to an acceptable level, particularly if we advise people to backup their database before changing the bootpassword.&lt;/p&gt;

&lt;p&gt;I welcome your review as well as any suggestions about how to test this new codepath: I&apos;m not sure how to coax Derby past &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and (ii) without instrumenting the code in a way which decreases security. But here is an idea:&lt;/p&gt;

&lt;p&gt;We could introduce a special $&lt;/p&gt;
{oldBootPassword}
&lt;p&gt;, viz., &quot;derby-5622-bypass&quot;. When Derby sees that value, it skips &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and (ii) and falls into check (iii). If somehow we still pass check (iii), then we raise an exception.&lt;/p&gt;

&lt;p&gt;Thanks in advance for your advice.&lt;/p&gt;</comment>
                            <comment id="13294026" author="dagw" created="Wed, 13 Jun 2012 01:35:02 +0100"  >&lt;p&gt;Souns like a good approach, Rick, thanks. Like you, I am at a loss as far as computing the total collision probability here, but your approach would seem to help. I&apos;ll have a look at the detailed patch tomorrow.&lt;br/&gt;
I think I&apos;d pass over any special bypass password, I&apos;m happy with manual inspection and testing here.&lt;/p&gt;</comment>
                            <comment id="13405903" author="dagw" created="Tue, 3 Jul 2012 14:11:08 +0100"  >&lt;p&gt;I looked at the patch and verified that the second line of defense here kicks in if the first one is disabled as in your instrumented patch version.&lt;br/&gt;
Patch looks good, +1 .&lt;/p&gt;

&lt;p&gt;Nits: some too long lines. One new line has a TAB: &lt;/p&gt;
{ throw StandardException.newException(SQLState.WRONG_BOOT_PASSWORD); }
&lt;p&gt;On that note, I&apos;d prefer a newline after the &quot;{&quot; starting the explicit block.&lt;/p&gt;</comment>
                            <comment id="13405983" author="rhillegas" created="Tue, 3 Jul 2012 20:43:02 +0100"  >&lt;p&gt;Thanks for verifying the patch, Dag. Committed derby-5622-01-aa-decryptEncryptedSample.diff at subversion revision 1356749.&lt;/p&gt;</comment>
                            <comment id="13418575" author="rhillegas" created="Thu, 19 Jul 2012 19:56:42 +0100"  >&lt;p&gt;Ported 1356749 from trunk to 10.9 at subversion revision 1363472.&lt;/p&gt;

&lt;p&gt;Ported 1356749 from trunk to 10.8 at subversion revision 1363475.&lt;/p&gt;

&lt;p&gt;Resolving this issue.&lt;/p&gt;</comment>
                            <comment id="14119608" author="knutanders" created="Wed, 3 Sep 2014 09:31:37 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12370124">DERBY-2687</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12559882">DERBY-5805</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12531874" name="derby-5622-01-aa-decryptEncryptedSample.diff" size="3339" author="rhillegas" created="Tue, 12 Jun 2012 20:59:24 +0100"/>
                            <attachment id="12531875" name="derby-5622-TT-fixWithTestScaffolding.diff" size="3598" author="rhillegas" created="Tue, 12 Jun 2012 20:59:24 +0100"/>
                            <attachment id="12531008" name="derby-5622-instrumentation.diff" size="2333" author="dagw" created="Tue, 5 Jun 2012 21:24:30 +0100"/>
                            <attachment id="12531876" name="derby-5622-repro.sql" size="430" author="rhillegas" created="Tue, 12 Jun 2012 20:59:24 +0100"/>
                            <attachment id="12531009" name="repro.sh" size="1185" author="dagw" created="Tue, 5 Jun 2012 21:24:30 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10364"><![CDATA[Data corruption]]></customfieldvalue>
    <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 Jun 2012 19:59:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>228386</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0b2n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35612</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>