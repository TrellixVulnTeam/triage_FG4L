<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1473/DERBY-1473.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1473] Add cut-off and truncation logic to streaming classes in the embedded driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1473</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When streaming data to Derby, the application stream will be wrapped in a Derby-specific stream to convert the data to the correct representation. At a minimum, this consists of getting the data to the on-disk format used by Derby.&lt;/p&gt;

&lt;p&gt;The wrapping stream can be extended to provide the following features at an earlier stage:&lt;br/&gt;
 a) Data cut-off when the maximum allowed size is exceeded&lt;br/&gt;
 b) Truncation of trailing blanks where allowed&lt;/p&gt;

&lt;p&gt;Both features can reduce the amount of data needed to be kept in memory on insertion.&lt;br/&gt;
Implementing this will require additional column/data type information in the streaming class(es). The implementation must be able to handle streams for which the length is specified and also streams with unknown/unspecified length.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12345343">DERBY-1473</key>
            <summary>Add cut-off and truncation logic to streaming classes in the embedded driver</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Jul 2006 03:01:33 +0100</created>
                <updated>Tue, 29 Aug 2006 08:11:30 +0100</updated>
                            <resolved>Sat, 26 Aug 2006 12:37:19 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12425292" author="kristwaa" created="Wed, 2 Aug 2006 17:55:19 +0100"  >&lt;p&gt;Updated affect version, fix version, priority and urgency.&lt;br/&gt;
I set priority to major, because without this issue fixed, the length less overloads can only handle streams that can fit in memory.&lt;br/&gt;
I set urgency to normal. Personally, I would have set it to urgent, but I don&apos;t know if the community feel that way.&lt;/p&gt;

&lt;p&gt;I will work to complete this task for 10.2.&lt;/p&gt;</comment>
                            <comment id="12427070" author="kristwaa" created="Thu, 10 Aug 2006 02:32:14 +0100"  >&lt;p&gt;&apos;derby-1473-1a-streaming.diff&apos; adds the capability to handle length less streams properly. Such streams are now capped at the maximum length of the column it is inserted into. If the stream is longer than the limit, a DerbyIOException (subclass of IOException) is thrown, causing a statement severity StandardException to be thrown. The exception handling system takes care of cleaning up.&lt;/p&gt;

&lt;p&gt;If a stream is shorter or longer than the specified length, an exception is thrown as required by JDBC 3.0.&lt;br/&gt;
How the exceptions thrown by the streaming classes are reported, differ between embedded and client. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1657&quot; title=&quot;Align error reporting in the client driver and embedded driver for streaming errors through the JDBC API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1657&quot;&gt;DERBY-1657&lt;/a&gt; tracks this (see also &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1658&quot; title=&quot;Too short streams passed in through JDBC are handled differently in client and embedded&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1658&quot;&gt;&lt;del&gt;DERBY-1658&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I decided to split the changes to the engine and the testing into different patches. A testing patch will be submitted shortly. Note that both patches must be commited before derbyall is run, or else some tests will fail (characterStreams, resultSetStream and streamingColumn). derbyall passed, but due to a last minute change I am doing another run (will post result tomorrow).&lt;/p&gt;

&lt;p&gt;Patch ready for review/commit. The committer needs to add a new file (see stat file).&lt;/p&gt;</comment>
                            <comment id="12427072" author="kristwaa" created="Thu, 10 Aug 2006 02:43:09 +0100"  >&lt;p&gt;&apos;derby-1473-2a-streamingtests.diff&apos; adds tests for the new (and old) streaming code in the embedded driver.&lt;br/&gt;
I have some additional unit tests, but since I do not know where to put them yet, I have not included them.&lt;/p&gt;

&lt;p&gt;I also have a BigCLOBTest, but it fails for the client driver. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; might fix some of the problems I see, and I will rerun my tests now and then to keep an eye on the status. Streaming 2G LOBs now works for embedded.&lt;/p&gt;

&lt;p&gt;Patch is ready for review/commit.&lt;/p&gt;</comment>
                            <comment id="12427073" author="kristwaa" created="Thu, 10 Aug 2006 02:44:23 +0100"  >&lt;p&gt;Patches 1a and 2a should be committed together, I split them up to ease the review.&lt;/p&gt;</comment>
                            <comment id="12427201" author="kristwaa" created="Thu, 10 Aug 2006 14:00:18 +0100"  >&lt;p&gt;Posting the results from my final derbyall runs for the patches 1a and 2a combined:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Solaris 10 (x86)&lt;br/&gt;
  JDK 1.3 : 22 failures, 557 tests&lt;br/&gt;
  JDK 5.0 : 1 failure, 691 tests&lt;br/&gt;
                    upgradeTests/Upgrade_10_1_10_2.java&lt;br/&gt;
  JDK 6    : 2 failures, 734 tests&lt;br/&gt;
                   store/OnlineBackupTest1.java&lt;br/&gt;
                   upgradeTests/Upgrade_10_1_10_2.java&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;Linux (Gentoo 2.6.16, amd64)&lt;br/&gt;
   JDK 1.4  : 0 failures, 685 tests&lt;br/&gt;
   JDK 6     : 3 failures, 653 tests, derbynetmats skipped&lt;br/&gt;
                      derbynetclientmats/jdbcapi/XATest.java&lt;br/&gt;
                      lang/prediacatPushdown.sql&lt;br/&gt;
                      lang/wisconsin.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I believe the upgradetest is failing because if my environment (not finding the jars).&lt;br/&gt;
The JDK1.3 errors are not due to my patch, but I will follow up on them.&lt;br/&gt;
predicatePushdown and wisconsin seem to choose different query plans.&lt;br/&gt;
Not sure about XATest, must look into the diff.&lt;/p&gt;</comment>
                            <comment id="12428053" author="knutanders" created="Tue, 15 Aug 2006 08:32:47 +0100"  >&lt;p&gt;I have started reviewing the patch. I haven&apos;t finished the review yet,&lt;br/&gt;
but I&apos;ll post the comments I have so far.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CharAlphabet.java contains some UTF-8 encoded characters, and I had&lt;br/&gt;
  to change my locale to be able to compile it. These characters&lt;br/&gt;
  should probably be escaped.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RawToBinaryFormatStream(InputStream, int) first checks whether&lt;br/&gt;
  length is less than zero, and throws an exception if it is. After&lt;br/&gt;
  that check, there&apos;s a new one &quot;if (length &amp;gt;= 0) 
{...} else {...}
&lt;p&gt;&quot;,&lt;br/&gt;
  but at that time length is guaranteed to be greater than or equal to&lt;br/&gt;
  zero.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RawToBinaryFormatStream and ReaderToUTF8Stream sometimes throw&lt;br/&gt;
  IllegalArgumentException. I not sure whether I think this is a good&lt;br/&gt;
  or a bad approach. I think it is good because internal errors in&lt;br/&gt;
  Derby will be exposed and can be fixed. I also think it not so good&lt;br/&gt;
  because the conditions that are checked are not critical, and it&lt;br/&gt;
  would make sense to carry on in insane mode (for instance, typeName&lt;br/&gt;
  == null won&apos;t be a problem until an error message using the type&lt;br/&gt;
  name is constructed, and maximumLength &amp;lt; 0 will be treated more or&lt;br/&gt;
  less as 0). I think either it should be rewritten using&lt;br/&gt;
  SanityManager.ASSERT, or it should have a comment saying why&lt;br/&gt;
  IllegalArgumentException is used and that it won&apos;t be exposed to the&lt;br/&gt;
  users unless there&apos;s a programming error in Derby.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In RawToBinaryFormatStream.checkSufficientData(), the body of the&lt;br/&gt;
  &quot;if (c != -1)&quot; clause has become very large. I think it would be&lt;br/&gt;
  clearer if it had braces around it (although the diff would be three&lt;br/&gt;
  lines longer).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12428131" author="knutanders" created="Tue, 15 Aug 2006 14:51:42 +0100"  >&lt;p&gt;I have reviewed the rest of the patch, and I have no more comments.&lt;/p&gt;</comment>
                            <comment id="12429701" author="kristwaa" created="Tue, 22 Aug 2006 14:10:13 +0100"  >&lt;p&gt;Hi Knut Anders,&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Thanks for catching this. It&apos;s a leftover from the previos implementation. This constructor is no longer allowed to be used for length less streams. I deleted the else-block.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I have added comments to the two constructors. I would appreciate guidelines of how to use IllegalArgumentExceptions, SanityManager.ASSERT or similar. I do want to signal invalid use of the class, as it can cause much confusion if the illegal arguments are ignored and execution proceeds as normal.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I have added braces around the block.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also made some changes for the patch to work with the move of JUnit infrastructure classes, and refreshed the patches. I ran the jdbc40 suite for a sanity check (1 expected error - TestQueryObject), and have a new derbyall running.&lt;/p&gt;

&lt;p&gt;Patches are now at revision b.&lt;/p&gt;</comment>
                            <comment id="12429944" author="kristwaa" created="Wed, 23 Aug 2006 10:18:36 +0100"  >&lt;p&gt;derbyall completed with three failures, all &quot;expected&quot;; blobclob4BLOB and 2x QueryObjectTest.&lt;/p&gt;</comment>
                            <comment id="12429977" author="knutanders" created="Wed, 23 Aug 2006 12:56:21 +0100"  >&lt;p&gt;Thanks for addressing my comments, Kristian!&lt;/p&gt;

&lt;p&gt;You removed the else clause in RawToBinaryFormatStream&apos;s constructor,&lt;br/&gt;
but I think you could also remove the if check, since the condition&lt;br/&gt;
will always be true.&lt;/p&gt;

&lt;p&gt;Could you also elaborate on how the new class DerbyIOException is&lt;br/&gt;
going to be used? As it is now, it is only thrown, and not caught&lt;br/&gt;
anywhere. The javadoc for the class says:&lt;/p&gt;

&lt;p&gt;  Without this distinction, the user would not be able to easily write&lt;br/&gt;
  &amp;lt;code&amp;gt;catch&amp;lt;/code&amp;gt;-blocks to handle specific errors happening when&lt;br/&gt;
  reading streams.&lt;/p&gt;

&lt;p&gt;Does this mean our users should check for a DerbyIOException?&lt;/p&gt;</comment>
                            <comment id="12429990" author="kristwaa" created="Wed, 23 Aug 2006 13:45:03 +0100"  >&lt;p&gt;I removed the if-block and uploaded a new patch (1c deprecates 1b).&lt;/p&gt;

&lt;p&gt;Our uses will not have to deal with DerbyIOException at all.&lt;br/&gt;
The point of introducing it, is to separate between exceptions thrown by Derby itself and those thrown by the user/application stream. An example for the former, is when Derby detects that the stream is shorter than its specified length. The user can then catch this and check for the appropriate SQLState if he/she wishes to. &lt;/p&gt;

&lt;p&gt;I planned to catch it in InsertOperation and UpdateOperation, then extract the SQLState and generate and throw an exception with the correct SQLState. Currently, a very general exception is thrown, with the IOException (or DerbyIOException) chained deep down. See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1657&quot; title=&quot;Align error reporting in the client driver and embedded driver for streaming errors through the JDBC API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1657&quot;&gt;DERBY-1657&lt;/a&gt; for a little more information (the issue is already linked to this one).&lt;/p&gt;

&lt;p&gt;I had originally implemented these changes, but decided to postpone them because the issues around impact on existing applications must be discussed first. The introduction (and current use of) DerbyIOException should not impact users in any way.&lt;/p&gt;</comment>
                            <comment id="12430207" author="knutanders" created="Thu, 24 Aug 2006 10:45:09 +0100"  >&lt;p&gt;Thanks Kristian. I tried to commit the patch, but there are conflicts with the ongoing JUnit reorganization in PreparedStatementTest. Could you please resolve the conflicts and upload a new test patch?&lt;/p&gt;</comment>
                            <comment id="12430230" author="kristwaa" created="Thu, 24 Aug 2006 13:26:34 +0100"  >&lt;p&gt;Hi again Knut Anders,&lt;/p&gt;

&lt;p&gt;Yes, the following commit caused the conflicts for the 2b patch:&lt;br/&gt;
Author: djd&lt;br/&gt;
Date: Wed Aug 23 13:42:13 2006&lt;br/&gt;
New Revision: 434169&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=434169&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?rev=434169&amp;amp;view=rev&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
Update the jdbc4 JUnit tests to use the recent additions, such as the single connection provided&lt;br/&gt;
by BaseJDBCTestCase and the test decorator base class BaseJDBCTestSetup.&lt;/p&gt;

&lt;p&gt;I have resolved the conflicts and uploaded a new test patch (derby-1473-2c-streamingtests.diff). I also changed some of my original patch to follow the new ways of doing things. Only PreparedStatementTest has been altered.&lt;/p&gt;</comment>
                            <comment id="12430718" author="knutanders" created="Sat, 26 Aug 2006 09:56:21 +0100"  >&lt;p&gt;I have committed 1c and 2c into trunk with revision 437127. The changes merged cleanly into 10.2, and I plan to commit if derbyall doesn&apos;t fail.&lt;/p&gt;</comment>
                            <comment id="12430733" author="knutanders" created="Sat, 26 Aug 2006 12:37:19 +0100"  >&lt;p&gt;Committed into 10.2 with revision 437146.&lt;/p&gt;</comment>
                            <comment id="12431157" author="kristwaa" created="Tue, 29 Aug 2006 08:11:30 +0100"  >&lt;p&gt;Closing. Initial functionality added, associated problems should be handled by separate Jiras.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12347631">DERBY-1657</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12344445">DERBY-1417</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12338536" name="derby-1473-1a-streaming.diff" size="26993" author="kristwaa" created="Thu, 10 Aug 2006 02:32:14 +0100"/>
                            <attachment id="12338537" name="derby-1473-1a-streaming.stat" size="422" author="kristwaa" created="Thu, 10 Aug 2006 02:32:14 +0100"/>
                            <attachment id="12339311" name="derby-1473-1b-streaming.diff" size="27653" author="kristwaa" created="Tue, 22 Aug 2006 14:10:13 +0100"/>
                            <attachment id="12339410" name="derby-1473-1c-streaming.diff" size="28995" author="kristwaa" created="Wed, 23 Aug 2006 13:45:03 +0100"/>
                            <attachment id="12338538" name="derby-1473-2a-streamingtests.diff" size="83790" author="kristwaa" created="Thu, 10 Aug 2006 02:43:09 +0100"/>
                            <attachment id="12338539" name="derby-1473-2a-streamingtests.stat" size="871" author="kristwaa" created="Thu, 10 Aug 2006 02:43:09 +0100"/>
                            <attachment id="12339312" name="derby-1473-2b-streamingtests.diff" size="84619" author="kristwaa" created="Tue, 22 Aug 2006 14:10:13 +0100"/>
                            <attachment id="12339478" name="derby-1473-2c-streamingtests.diff" size="84466" author="kristwaa" created="Thu, 24 Aug 2006 13:26:34 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Aug 2006 07:32:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30007</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14r3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40420</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>