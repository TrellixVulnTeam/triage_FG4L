<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:19:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6503/DERBY-6503.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6503] Starting network server on a network drive fails with JDK 7 on Windows</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6503</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Starting a network server on a network drive with JDK 7 on Windows fails. The reported exception is a ClassCastException, but the underlying exception is the following:&lt;/p&gt;

&lt;p&gt;java.nio.file.AccessDeniedException: \\host\path\derby.log&lt;br/&gt;
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83)&lt;br/&gt;
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)&lt;br/&gt;
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)&lt;br/&gt;
	at sun.nio.fs.WindowsAclFileAttributeView.setAcl(WindowsAclFileAttributeView.java:221)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:601)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(FileUtil.java:897)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwner(FileUtil.java:747)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(SingleStream.java:205)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:401)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.run(SingleStream.java:72)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(SingleStream.java:394)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(SingleStream.java:356)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.makeStream(SingleStream.java:132)&lt;br/&gt;
	at org.apache.derby.impl.services.stream.SingleStream.boot(SingleStream.java:92)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(Monitor.java:362)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:343)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.&amp;lt;init&amp;gt;(FileMonitor.java:58)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)&lt;br/&gt;
	at org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:199)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedDriver.&amp;lt;clinit&amp;gt;(EmbeddedDriver.java:95)&lt;br/&gt;
	at java.lang.Class.forName0(Native Method)&lt;br/&gt;
	at java.lang.Class.forName(Class.java:188)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1032)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:732)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2277)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:353)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12699440">DERBY-6503</key>
            <summary>Starting network server on a network drive fails with JDK 7 on Windows</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Fri, 7 Mar 2014 15:26:30 +0000</created>
                <updated>Tue, 18 Nov 2014 22:38:39 +0000</updated>
                            <resolved>Tue, 18 Nov 2014 22:37:23 +0000</resolved>
                                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Network Server</component>
                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13923952" author="knutanders" created="Fri, 7 Mar 2014 15:27:14 +0000"  >&lt;p&gt;This problem was found while investigating &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6410&quot; title=&quot;ClassCastException when launching derby from windows subst drive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6410&quot;&gt;&lt;del&gt;DERBY-6410&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13930409" author="knutanders" created="Tue, 11 Mar 2014 14:41:15 +0000"  >&lt;p&gt;In the network directory where I see this failure, I&apos;m not allowed to change the permissions of derby.log (or any other file for that matter) as the same user using the normal Windows mechanism either (right-click file in Windows Explorer, choose Properties, then Security, and Edit). So it sounds correct that Java raises an exception when the network server tries to do that operation.&lt;/p&gt;

&lt;p&gt;The code comments seem to acknowledge that an IOException is a possibility, but it sounds like it was not believed to be something that could happen in practice. See this code in FileUtil.limitAccessToOwnerViaACLs():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InvocationTargetException e) {
            &lt;span class=&quot;code-comment&quot;&gt;// java.security.AccessControlException: access denied
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// (&lt;span class=&quot;code-quote&quot;&gt;&quot;java.lang.RuntimePermission&quot;&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;accessUserInformation&quot;&lt;/span&gt;) can
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// happen, so &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt;.
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// Should we get an IOException from getOwner, the &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; below
&lt;/span&gt;            &lt;span class=&quot;code-comment&quot;&gt;// would &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; which is fine, since it should not happen.
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; (RuntimeException)e.getCause();
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the very least this code needs to be improved so that it doesn&apos;t report the IOException as a ClassCastException.&lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure how errors are supposed to be handled in this code, though. Some exceptions are handled by falling back to using the less capable File.setReadable(), setWritable(), setExecutable() methods. Others are ignored (unless you&apos;re running a debug build). Only RuntimeExceptions will be reported currently.&lt;/p&gt;</comment>
                            <comment id="13930518" author="dagw" created="Tue, 11 Mar 2014 16:20:06 +0000"  >&lt;p&gt;If we can&apos;t change permissions (as per normal) for network drive files, I guess we could just report that fact in derby.log as a warning, and otherwise just ignore the errors. The docs should warn about this possibly unwanted behavior, though, so that the user can take other steps to secure the files.&lt;/p&gt;</comment>
                            <comment id="13931734" author="knutanders" created="Wed, 12 Mar 2014 13:11:41 +0000"  >&lt;p&gt;Thanks, Dag. The code that changes the permissions has some platform specific quirks, and it&apos;s hard to say for sure if all OS/filesystem combinations are handled, so only guaranteeing &quot;best effort&quot; and falling back to the old behaviour if the permissions cannot be changed sounds like a reasonable approach to me. At least in the case where the new behaviour is chosen by default (that is, when the network server is started from the command line). In the case where the user has explicitly requested the new behaviour by setting the derby.storage.useDefaultFilePermissions property to false, one might argue that a failure is more appropriate, so that the user can choose what the correct course of action is (either fix the permissions or remove the property).&lt;/p&gt;</comment>
                            <comment id="13931934" author="knutanders" created="Wed, 12 Mar 2014 16:27:20 +0000"  >&lt;p&gt;There is some trickiness involved in writing a warning to derby.log when such an error occurs. For example, the exception in the bug description happens when derby.log is being created, so we&apos;d have to store that information somewhere until the engine is up and ready to write to the log.&lt;/p&gt;

&lt;p&gt;This feature has been available for a while now, and has been enabled by default in the network server, but we haven&apos;t seen any reports about IOExceptions causing problems (except &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6410&quot; title=&quot;ClassCastException when launching derby from windows subst drive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6410&quot;&gt;&lt;del&gt;DERBY-6410&lt;/del&gt;&lt;/a&gt;, which is a JVM bug). So these exceptions don&apos;t appear to be a big problem for users currently, and that makes me think it might be OK to continue failing when IOExceptions are thrown here. Of course they would have to be reported to the user as IOExceptions and not as ClassCastExceptions as they are today. Users experiencing such failures could either turn off the feature or fix the underlying problem.&lt;/p&gt;

&lt;p&gt;At least I think that would be a reasonable first step: Fail in the same situations as today, but show the underlying IOException instead of the ClassCastException. If we start getting reports from users about such failures causing problems, we could consider if we should add some kind of automatic fallback logic as the next step.&lt;/p&gt;</comment>
                            <comment id="13933139" author="dagw" created="Thu, 13 Mar 2014 11:50:50 +0000"  >&lt;p&gt;Right. I think your last suggestion is an acceptable solution.&lt;/p&gt;</comment>
                            <comment id="13933263" author="knutanders" created="Thu, 13 Mar 2014 13:57:18 +0000"  >&lt;p&gt;Thanks, Dag. I&apos;ll give that a try. The limitAccessToOwner method is also used by the copy methods mentioned in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1981&quot; title=&quot;copy routines in the FileUtil.java just return  false on IO Exception.  This leads  to backup  not reprting the real  error in some cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1981&quot;&gt;DERBY-1981&lt;/a&gt;, and details about IOExceptions thrown there will probably still be lost. I don&apos;t plan to address that problem in this issue, though.&lt;/p&gt;

&lt;p&gt;If we start reporting failure to change permissions on NTFS &amp;amp; co, does that mean we should also check the return value from File.setReadable/Writable/Executable that are used on the other platforms and report if it&apos;s false? Currently we only have an assert there to check that it never returns false on a non-Windows platform. I don&apos;t think that assert has ever been triggered.&lt;/p&gt;</comment>
                            <comment id="13937708" author="rhillegas" created="Mon, 17 Mar 2014 11:55:36 +0000"  >&lt;p&gt;The workaround for this issue is to turn off the extra file access controls for Windows platforms which are available on Java SE 7 and higher. To do that, set...&lt;/p&gt;

&lt;p&gt;derby.storage.useDefaultFilePermissions=true&lt;/p&gt;

&lt;p&gt;...as described here: &lt;a href=&quot;http://db.apache.org/derby/docs/10.10/ref/rrefproperdefaultfileperms.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.10/ref/rrefproperdefaultfileperms.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13938207" author="dagw" created="Mon, 17 Mar 2014 18:59:43 +0000"  >&lt;p&gt;Knut, I guess it would make sense to report errors on a UNIXy platform as well; it does have the merit of alerting us to any such use case, were it happen. If it never does, well, its not much extra code..&lt;/p&gt;</comment>
                            <comment id="13938987" author="knutanders" created="Tue, 18 Mar 2014 09:17:45 +0000"  >&lt;p&gt;And just as I said we didn&apos;t have any reports about this causing any trouble, a customer reported another variant of the ClassCastException when starting the network server:&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException: java.nio.file.NoSuchFileException cannot be cast to java.lang.RuntimeException&lt;/p&gt;

&lt;p&gt;(I don&apos;t have the stack trace of the original NoSuchFileException that gets shadowed by the ClassCastException.)&lt;/p&gt;

&lt;p&gt;So I&apos;m beginning to wonder if a better solution would be to fail only if the user has explicitly requested the new functionality by setting derby.storage.useDefaultFilePermissions=false. In the environments where Derby now defaults to restricting the file permissions (network server started from the command line when Java &amp;gt;= 7 and underlying file system is either posix or supports ACL), and the user hasn&apos;t requested the functionality, we should still try to restrict the permissions, but not fail if the permissions could not be changed. I think that would combine security out of the box and backwards compatibility in a good way.&lt;/p&gt;</comment>
                            <comment id="13939306" author="dagw" created="Tue, 18 Mar 2014 14:50:51 +0000"  >&lt;p&gt;I think we should fail, but give a reasonable error message. If not, the user could be given a sense of false security, no?&lt;/p&gt;</comment>
                            <comment id="13939374" author="rhillegas" created="Tue, 18 Mar 2014 15:26:42 +0000"  >&lt;p&gt;I think that we should at least raise a warning if the user has explicitly requested this extra security but we find that we can&apos;t deliver it. Thanks.&lt;/p&gt;</comment>
                            <comment id="13941019" author="myrna" created="Wed, 19 Mar 2014 21:27:35 +0000"  >&lt;p&gt;I like the idea of returning an error if the user has explicitly requested it and we cannot deliver, but to only raise a warning if we&apos;re defaulting to this behavior.&lt;/p&gt;</comment>
                            <comment id="13941519" author="knutanders" created="Thu, 20 Mar 2014 08:46:04 +0000"  >&lt;p&gt;Thanks, everyone, for the feedback. I think I&apos;ll limit the scope of this bug report to only fixing the ClassCastException that hides the underlying IOException (which turned out to be a valid error situation, since the user was not allowed by the operating system to change file permissions on that drive, not even its own files). I&apos;ve filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6521&quot; title=&quot;Improve error handling when restricting file permissions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6521&quot;&gt;&lt;del&gt;DERBY-6521&lt;/del&gt;&lt;/a&gt; to track the discussion on whether Derby should raise exceptions also on posix file systems, and whether exceptions should only be raised if the user had explicitly turned on the feature.&lt;/p&gt;</comment>
                            <comment id="13942942" author="knutanders" created="Fri, 21 Mar 2014 10:15:14 +0000"  >&lt;p&gt;Attaching a patch (d6503-1a.diff) which fixes the error handling so&lt;br/&gt;
that it doesn&apos;t result in a ClassCastException that hides the&lt;br/&gt;
underlying IOException. This means the IOException is propagated up&lt;br/&gt;
from FileUtil.limitAccessToOwner(), so some calling code that was not&lt;br/&gt;
prepared to see IOExceptions had to be changed as well.&lt;/p&gt;

&lt;p&gt;Description of the changes:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/iapi/services/io/FilePermissionService.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/engine/org/apache/derby/iapi/services/io/FilePermissionServiceImpl.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add a new interface for changing the file permissions, and an&lt;br/&gt;
implementation class that uses the java.nio.file.attribute package.&lt;br/&gt;
This abstraction layer allows us to compile the code that accesses&lt;br/&gt;
java.nio.file.attribute separately using JDK 7, so that it doesn&apos;t&lt;br/&gt;
have to do everything through reflection. This makes the code easier&lt;br/&gt;
to read and modify, and also makes the error handling simpler.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;build.xml&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;tools/jar/extraDBMSclasses.properties&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/engine/org/apache/derby/iapi/services/io/build.xml&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Only build FilePermissionServiceImpl.java when using JDK 7 or higher.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/iapi/services/io/FileUtil.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Use the new FilePermissionService instead of reflection to call the&lt;br/&gt;
java.nio.file.attribute functionality.&lt;/p&gt;

&lt;p&gt;Add &quot;throws IOException&quot; to limitAccessToOwner(), so that callers will&lt;br/&gt;
have to handle it.&lt;/p&gt;

&lt;p&gt;Make the copyDirectory() methods catch IOException from&lt;br/&gt;
limitAccessToOwner() and return false (which is the same way as they&lt;br/&gt;
handle all other IOExceptions, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1981&quot; title=&quot;copy routines in the FileUtil.java just return  false on IO Exception.  This leads  to backup  not reprting the real  error in some cases.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1981&quot;&gt;DERBY-1981&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/drda/org/apache/derby/impl/drda/DssTrace.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add &quot;throws IOException&quot; to method declaration. IOExceptions are&lt;br/&gt;
already handled by the caller.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/io/DirFile.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Wrap the new IOException thrown by limitAccessToOwner() in a&lt;br/&gt;
FileNotFoundException to satisfy the StorageFile.getOutputStream()&lt;br/&gt;
interface (which says any error that prevents the file from being&lt;br/&gt;
opened should result in a FileNotFoundException).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/services/monitor/FileMonitor.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Catch IOException and return false if the permissions cannot be&lt;br/&gt;
changed for the newly created system home directory (which is how this&lt;br/&gt;
piece of code handles other exceptions too).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/store/raw/RawStore.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Catch the new IOException and wrap it in a StandardException with a&lt;br/&gt;
high-level description of the operation that failed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/store/raw/data/StreamFileContainer.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Handle all IOExceptions, not only FileNotFoundExceptions. These&lt;br/&gt;
exceptions end up wrapped in a StandardException by the callers.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/io/StorageFile.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Add &quot;throws IOException&quot; to the signature of limitAccessToOwner().&lt;br/&gt;
Callers will handle the exception.&lt;/p&gt;</comment>
                            <comment id="13943185" author="dagw" created="Fri, 21 Mar 2014 16:00:01 +0000"  >&lt;p&gt;Looks like a good improvement as well as simplification! +1&lt;/p&gt;</comment>
                            <comment id="13944830" author="jira-bot" created="Mon, 24 Mar 2014 09:13:15 +0000"  >&lt;p&gt;Commit 1580789 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580789&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580789&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6503&quot; title=&quot;Starting network server on a network drive fails with JDK 7 on Windows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6503&quot;&gt;&lt;del&gt;DERBY-6503&lt;/del&gt;&lt;/a&gt;: ClassCastException when network server cannot restrict file permissions&lt;/p&gt;

&lt;p&gt;Make sure the underlying IOException is exposed if the network server&lt;br/&gt;
fails to restrict file permissions. The original exception used to be&lt;br/&gt;
shadowed by a ClassCastException.&lt;/p&gt;</comment>
                            <comment id="13944835" author="knutanders" created="Mon, 24 Mar 2014 09:17:32 +0000"  >&lt;p&gt;Thanks, Dag. I&apos;ve committed the patch, but I&apos;ll keep this issue open for a few days to see if the nightly tests pass on all platforms. Since different platforms take different paths through this code, some corner cases may have been overlooked.&lt;/p&gt;</comment>
                            <comment id="13945008" author="jira-bot" created="Mon, 24 Mar 2014 13:32:05 +0000"  >&lt;p&gt;Commit 1580845 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580845&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580845&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6503&quot; title=&quot;Starting network server on a network drive fails with JDK 7 on Windows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6503&quot;&gt;&lt;del&gt;DERBY-6503&lt;/del&gt;&lt;/a&gt;: Ignore LinkageErrors when loading FilePermissionServiceImpl&lt;/p&gt;

&lt;p&gt;When attempting to load the class on Java 6, an&lt;br/&gt;
UnsupportedClassVersionError is (correctly) raised, but it is not&lt;br/&gt;
among the exceptions that are caught and ignored. Add a catch clause&lt;br/&gt;
for its superclass LinkageError to handle it.&lt;/p&gt;</comment>
                            <comment id="13949477" author="knutanders" created="Thu, 27 Mar 2014 15:59:29 +0000"  >&lt;p&gt;I haven&apos;t seen failures that look related to this issue in the nightly tests after the last commit, so I&apos;m marking the issue as resolved.&lt;/p&gt;</comment>
                            <comment id="14158120" author="mikem" created="Fri, 3 Oct 2014 16:55:52 +0100"  >&lt;p&gt;taking temp ownership while backporting to 10.10&lt;/p&gt;</comment>
                            <comment id="14167256" author="mikem" created="Fri, 10 Oct 2014 19:24:10 +0100"  >&lt;p&gt;reopening issue, and temp assigning it to myself for 10.10 backport effort.&lt;/p&gt;</comment>
                            <comment id="14211384" author="mamtas" created="Thu, 13 Nov 2014 22:26:17 +0000"  >&lt;p&gt;After checking with Mike, I am doing the backport to 10.10&lt;/p&gt;</comment>
                            <comment id="14215818" author="mamtas" created="Tue, 18 Nov 2014 07:17:49 +0000"  >&lt;p&gt;Here is my attempt at backporting the 2 commits from trunk to 10.10. This patch(DERBY6503_backport_patch1_diff) is not ready for commit. It has been a non-trivial backport with quite a bit of hand changes(specifically in FileUtil.java). I will appreciate if another pair of eyes can see if the hand backport has missed anything. Also, with the patch, I am getting following error during compilation on 10.10(I haven&apos;t debugged the build failure yet to see what the problem might be)&lt;br/&gt;
compile_iapi_error:&lt;/p&gt;

&lt;p&gt;compile_iapi_services_jsr169:&lt;/p&gt;

&lt;p&gt;BUILD FAILED&lt;br/&gt;
C:\p4clients\svn10.10\client1\10.10\build.xml:623: The following error occurred while executing this line:&lt;br/&gt;
C:\p4clients\svn10.10\client1\10.10\java\engine\build.xml:59: The following error occurred while executing this line:&lt;br/&gt;
C:\p4clients\svn10.10\client1\10.10\java\engine\org\apache\derby\iapi\build.xml:39: The following error occurred while executing this line:&lt;br/&gt;
C:\p4clients\svn10.10\client1\10.10\java\engine\org\apache\derby\iapi\services\build.xml:61: The following error occurred while executing this line:&lt;br/&gt;
C:\p4clients\svn10.10\client1\10.10\java\engine\org\apache\derby\iapi\services\io\build.xml:19: Content is not allowed in prolog.&lt;/p&gt;

&lt;p&gt;Total time: 1 second&lt;/p&gt;</comment>
                            <comment id="14215891" author="knutanders" created="Tue, 18 Nov 2014 08:27:37 +0000"  >&lt;p&gt;I wouldn&apos;t recommend spending a lot of time backporting this fix. All the fix does, is changing a ClassCastException to an IOException. It makes it easier to see what the underlying problem is, but the cases that failed before the fix, will still fail after the fix.&lt;/p&gt;</comment>
                            <comment id="14216244" author="myrna" created="Tue, 18 Nov 2014 14:48:52 +0000"  >&lt;p&gt;It seems this backport is too involved for the benefits.&lt;/p&gt;</comment>
                            <comment id="14216614" author="mamtas" created="Tue, 18 Nov 2014 19:05:27 +0000"  >&lt;p&gt;I agree it is wise for us to not do this backport considering how involved the FileUtil changes are. &lt;/p&gt;

&lt;p&gt;The issue is that FileUtil has gotten very out of sync between 10.10 and trunk. The reason for this is that we have had to backport changes out of order from trunk to 10.10 for FileUtil(this is because there are few changes in trunk which are not suitable for bacport to 10.10). This makes backport to FileUtil much harder if the FileUtil is touched a lot by a specific checkin in trunk(which is what happened with this jira). &lt;/p&gt;

&lt;p&gt;I will label this jira as reject for backport to 10.10&lt;/p&gt;</comment>
                            <comment id="14216951" author="myrna" created="Tue, 18 Nov 2014 22:37:23 +0000"  >&lt;p&gt;Re-resolving and re-assigning to original fixer.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12678190">DERBY-6410</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12353711">DERBY-1981</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12702580">DERBY-6521</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12682109" name="DERBY6503_backport_patch1_diff.txt" size="37153" author="mamtas" created="Tue, 18 Nov 2014 07:17:49 +0000"/>
                            <attachment id="12635986" name="d6503-1a.diff" size="43933" author="knutanders" created="Fri, 21 Mar 2014 10:15:14 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 11 Mar 2014 16:20:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>377787</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10427"><![CDATA[Workaround attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzmy87:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>378079</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>