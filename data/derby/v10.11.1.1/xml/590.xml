<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-590/DERBY-590.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-590] How to integrate Derby with Lucene API?</title>
                <link>https://issues.apache.org/jira/browse/DERBY-590</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In order to use derby with lucene API what should be the steps to be taken? &lt;/p&gt;</description>
                <environment></environment>
        <key id="12317415">DERBY-590</key>
            <summary>How to integrate Derby with Lucene API?</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="abhijeetmahesh">Abhijeet Mahesh</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Thu, 29 Sep 2005 19:36:24 +0100</created>
                <updated>Tue, 9 Sep 2014 16:46:18 +0100</updated>
                                                                            <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12330821" author="scotthutinger" created="Fri, 30 Sep 2005 02:37:58 +0100"  >&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-434&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-434&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the Desciption:&lt;br/&gt;
&quot;Code and examples for embedding Lucene in HSQLDB and Derby relational databases.&quot;&lt;/p&gt;

&lt;p&gt;This would more than likely be a good place to get a bit of information.&lt;/p&gt;</comment>
                            <comment id="12331205" author="rhillegas" created="Tue, 4 Oct 2005 04:44:01 +0100"  >&lt;p&gt;Linking this issue to a later request for Lucene integration.&lt;/p&gt;</comment>
                            <comment id="13799242" author="fuzzylogic" created="Fri, 18 Oct 2013 17:19:01 +0100"  >&lt;p&gt;Attaching rough draft of patch for optional tool to create, update, and query Lucene indexes in Derby.&lt;/p&gt;</comment>
                            <comment id="13799278" author="fuzzylogic" created="Fri, 18 Oct 2013 17:46:40 +0100"  >&lt;p&gt;Attached patch sent to mailing list. ij script that can be used to demonstrate the patch&apos;s features is here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://people.apache.org/~fuzzylogic/lucene_titles.sql&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~fuzzylogic/lucene_titles.sql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;although this contains what might be considered copyrighted data, so this will be removed and I&apos;ll try to replace it with a more appropriate dataset and include it directly in the patch when I can find one that works well. As I said, very rough, I basically just got it working. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Some things don&apos;t work (the rankCutoff parameter in the query function doesn&apos;t do anything), it needs formatting, comments, javadoc, tests, etc. etc.&lt;/p&gt;

&lt;p&gt;Regarding Rick&apos;s comment on the dev list about further integration via the parser, it seems like it would be pretty straightforward to go from the procedure call in this patch to wiring the index creation into the sql grammar by using the MySQL-ish: CREATE FULLTEXT INDEX INDEX_NAME ON SCHEMA.TABLE (COLUMN) &lt;/p&gt;</comment>
                            <comment id="13800696" author="rhillegas" created="Mon, 21 Oct 2013 15:37:01 +0100"  >&lt;p&gt;Thanks again for working on this, Andrew. I noticed that lucene_titles.sql invokes a procedure called LuceneSupport.indexDatabase(). I can&apos;t find that procedure in lucene_demo.diff. Where should I look for that procedure?&lt;/p&gt;

&lt;p&gt;Here&apos;s my crude interpretation of what the code is doing: The tool makes it possible to do full-text search on data which is stored in the text columns of Derby tables. The tables must have unique Derby indexes. Lucene itself relies on indexes which it builds and stores outside Derby in the file system. Over time, the Lucene indexes drift out of sync with the text data. The application periodically asks Derby to update specific Lucene indexes, bringing them back into sync with the text data. &lt;/p&gt;

&lt;p&gt;Loading the tool via syscs_register_tool() creates the following schema objects:&lt;/p&gt;

&lt;p&gt;a) LuceneSupport.indexTable() - This procedure indexes a text column in a Derby table.&lt;/p&gt;

&lt;p&gt;b) LuceneSupport.luceneUpdateDocument() - This procedure updates a Lucene index which was created by the previous procedure, bringing the Lucene index back into sync with the text data.&lt;/p&gt;

&lt;p&gt;c) LuceneSupport.luceneQuery() - This is a table function for running a full-text search against a Derby column.&lt;/p&gt;

&lt;p&gt;As is, this sounds like a very useful piece of functionality. We could make this production-ready incrementally and document it at the end of that effort. At a minimum, we would want to:&lt;/p&gt;

&lt;p&gt;i) Quibble a bit about the api, the names of schema objects, and where the code goes.&lt;/p&gt;

&lt;p&gt;ii) Add comments to the code.&lt;/p&gt;

&lt;p&gt;iii) Think about edge cases. For example, what happens if the Lucene indexes become corrupt or are deleted? How do we keep track of which columns are indexed? What happens when Derby is recovered from a backup or the database is recreated?&lt;/p&gt;

&lt;p&gt;iv) Write tests.&lt;/p&gt;

&lt;p&gt;Some follow-on efforts might also make sense:&lt;/p&gt;

&lt;p&gt;1) We could consider moving the Lucene indexes inside the database.&lt;/p&gt;

&lt;p&gt;2) Maybe we could add triggers on the indexed columns so that the Lucene indexes remain in sync with the Derby data. Don&apos;t know how much of a performance drag that would be. Maybe this could be an optional feature of creating a Lucene index.&lt;/p&gt;

&lt;p&gt;3) Replace the procedure calls with explicit CREATE FULLTEXT (and maybe UPDATE FULLTEXT) statements. This would be an opportunity to think about how we could load and unload optional Derby statements.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13801296" author="fuzzylogic" created="Tue, 22 Oct 2013 00:16:39 +0100"  >&lt;p&gt;Looks like I grabbed some extra text when copying things over to my Apache account. indexDatabase() was from an earlier experiment and can be ignored. I&apos;ve removed it from lucene_titles.sql.&lt;/p&gt;

&lt;p&gt;for iii - I think SQL exceptions in case of missing / corrupted indexes will do for now, as if another index were missing or corrupted. My original idea for organizing the indexes was to keep the indexes in a per-db &apos;lucene&apos; directory at the same level as &apos;log&apos; and &apos;seg0&apos;, then in subdirectories named &apos;schema_table_column,&apos; so it would be obvious looking in the db&apos;s lucene directory which columns were indexed. That&apos;s not what we have here, which is a system-wide lucene directory instead of a per-db directory. I&apos;ll try to get a per-db dir for the next patch, if I can pry the db directory out of the monitor/store. With a per-db lucene dir, if the database directory is backed up, the lucene indexes would be be backed up along with also. I also thought about having a drop lucene index procedure, but figured for the moment leaving that to the user/developer, since it involves deleting directories in the filesystem&lt;/p&gt;

&lt;p&gt;ii/iv - comments/javadoc/tests to come in the next patch. Main problem right now is finding time, and scraping/generating a decently large set of test data that is ok to reuse. The lucene project probably has some, though.&lt;/p&gt;

&lt;p&gt;as for i - feel free to let me know any particulars, or you can wait for the next patch. it will probably be a few days.&lt;/p&gt;</comment>
                            <comment id="13801935" author="rhillegas" created="Tue, 22 Oct 2013 16:40:56 +0100"  >&lt;p&gt;Thanks for that additional information, Andrew. Concerning i, here are some thoughts:&lt;/p&gt;

&lt;p&gt;1) I see that this new additional tool is being parked next to the existing DBMDWrapper and ForeignDBViews classes. I do agree that all of these tools should be neighbors. Just a heads-up, however: I think I put DBMDWrapper and ForeignDBViews in the wrong jar file to begin with. I now think those tools really ought to go into the engine jar, for reasons which I gave in a 2013-06-13 comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6256&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-6256&lt;/a&gt;. To summarize: the point of derbytools.jar is to hold code which runs both client-side and server-side. None of these tools run client-side. My point is this: I&apos;m not faulting the patch for following the existing pattern; instead, I&apos;m saying that I put the original tools in the wrong place. And at some point I may file a follow-on JIRA to move all of these tools into the engine jar.&lt;/p&gt;

&lt;p&gt;2) If I understand the patch correctly, the indexTable() procedure really indexes a column. You could run the procedure multiple times on the same table in order to index different columns. I think that createDocumentIndex() would be a better name for this procedure.&lt;/p&gt;

&lt;p&gt;3) Similarly, I&apos;m not keen on the name luceneUpdateDocument() for several reasons. I think that the &quot;lucene&quot; prefix can be assumed from the name of the schema which holds this procedure. I&apos;d also like the procedure names to express the fact that luceneUpdateDocument() refreshes the index created by indexTable(). So I&apos;d recommend something like updateDocumentIndex(), akin to createDocumentIndex().&lt;/p&gt;

&lt;p&gt;Some more thoughts follow:&lt;/p&gt;

&lt;p&gt;4) In my experience, every insert function needs to be matched by corresponding update and delete functions. Developers expect that. This tool provides an insert function (createDocumentIndex()) and a corresponding update function (updateDocumentIndex()) but no corresponding delete function. The delete function is really important as developers hack out their schemas in the laboratory. So I recommend adding a dropDocumentIndex() procedure. I understand your reservations about deleting a whole directory, but I think that the first enhancement request we&apos;ll get is &quot;give me a way to delete these things.&quot;&lt;/p&gt;

&lt;p&gt;5) The non-transactional behavior of these procedures needs to be clearly understood by users. That&apos;s probably a documentation issue. But users need to understand that they can&apos;t rollback some of the important effects of calls to createDocumentIndex() and dropDocumentIndex().&lt;/p&gt;

&lt;p&gt;6) Developers hacking out a schema in the laboratory will also want tools for introspecting which columns have been indexed and how current the indexes are. Maybe the best solution would be a view wrapping a table function which, in turn, exposes metadata from Lucene and/or the file system. If that&apos;s not possible, a table like the following could be useful:&lt;/p&gt;

&lt;p&gt;LuceneSupport.documentIndexes&lt;br/&gt;
(&lt;br/&gt;
    id int generated always as identity,&lt;br/&gt;
    tableID char( 36 ) not null,&lt;br/&gt;
    columnNumber int,&lt;br/&gt;
    lastupdated timestamp,&lt;br/&gt;
    unique( tableID, columnNumber )  &lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;I prefer the table function solution because it makes it harder for the user to mess up and accidentally delete this metadata.&lt;/p&gt;

&lt;p&gt;7) At this point, I don&apos;t see a need for the syntactic sugar of new SQL statements. I think that the optional tool approach is fine for this first increment. I recommend deferring any parser work until later, after we&apos;ve cleared up the transactional consistency issues.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13804722" author="fuzzylogic" created="Thu, 24 Oct 2013 22:51:57 +0100"  >&lt;p&gt;Attached a second patch which now includes javadoc, tightens up the comments, and includes a starter set of tests for the functionality. Still need to dig up a fuller set of data, I&apos;ll try to get to that maybe this weekend. In the meantime, I made some up with some things I had on my bookshelf and the schema from before. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;indexTable() in lucene_titles.sql was also from a previous experiment, I had changed it to luceneIndex() for the patch in lucene_demo.diff, but for the updated patch in lucene_demo_2.diff, I decided to standardize the naming with createIndex, updateIndex, dropIndex, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-The indexes are now hopefully all located in the database directory, per-db, and I liked the suggestion for listing out the indexes, so also included is another function/VTI for listing out the Lucene indexes for the current database. &lt;/p&gt;

&lt;p&gt;-More tests and documentation to come. At some point I&apos;ll try to get the rankCutoff function working as well.&lt;/p&gt;</comment>
                            <comment id="13808514" author="fuzzylogic" created="Tue, 29 Oct 2013 21:59:11 +0000"  >&lt;p&gt;Reattaching lucene_demo_2.diff, this time with the rankCutoff part of the query function working and additional tests for same.&lt;/p&gt;</comment>
                            <comment id="13809069" author="rhillegas" created="Wed, 30 Oct 2013 13:26:51 +0000"  >&lt;p&gt;Thanks for the latest increment, Andrew. I plan to take a look at this soon. Thanks.&lt;/p&gt;</comment>
                            <comment id="13813121" author="rhillegas" created="Mon, 4 Nov 2013 19:07:15 +0000"  >&lt;p&gt;Thanks for the second rev of the patch, Andrew. I have a couple comments under the following topics:&lt;/p&gt;

&lt;p&gt;o Build&lt;br/&gt;
o Localization&lt;br/&gt;
o Security&lt;br/&gt;
o Misc&lt;/p&gt;

&lt;p&gt;I applied the patch, copied the Lucene jar files into tools/java, and successfully ran LuceneSupportTest. In addition, I ran some more experiments with a script attached at the end of this comment.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;

&lt;p&gt;-------------- BUILD ----------------&lt;/p&gt;

&lt;p&gt;This optional tool relies on the following Lucene jar files. The user documentation should mention that these are necessary in order to use this tool:&lt;/p&gt;

&lt;p&gt;A       tools/java/lucene-analyzers-common-4.5.0.jar&lt;br/&gt;
A       tools/java/lucene-queryparser-4.5.0.jar&lt;br/&gt;
A       tools/java/lucene-core-4.5.0.jar&lt;/p&gt;

&lt;p&gt;I see that you intend to check the Lucene jar files into the Derby source tree so that this code is always built and tested--even though I also see that you can build Derby cleanly without the Lucene jar files. I agree with your decision. We have spent considerable effort making it possible for all developers to build and test the entire Derby product, and I&apos;d like to stay with that model. I understand that the Lucene jar files are big. They are an order of magnitude larger than any other jar files checked into Derby. But I don&apos;t think that including them in our source distributions is burdensome.&lt;/p&gt;

&lt;p&gt;I&apos;m not clear on Lucene&apos;s compatibility guarantees:&lt;/p&gt;

&lt;p&gt;B1) Is there some reason that you chose jar files from Lucene 4.5.0 rather than the latest 4.5.1 release?&lt;/p&gt;

&lt;p&gt;B2) Our documentation should state which versions of Lucene we support. We should make sure that we verify those claims during release testing.&lt;/p&gt;



&lt;p&gt;-------------- LOCALIZATION ----------------&lt;/p&gt;

&lt;p&gt;L1) LuceneListIndexesVTI and LuceneQueryVTI raise SQLExceptions with hard-coded error strings. These should probably be replaced with localizable error strings. To see how to do this with optional tools, you can look for the error handle OT_BadLoadUnloadArgs in ForeignDBViews.&lt;/p&gt;

&lt;p&gt;L2) In addition, when LuceneQueryVTI.getRawColumn() catches an IOException, it should use that IOException as the cause of the SQLException that&apos;s thrown afterward.&lt;/p&gt;

&lt;p&gt;-------------- SECURITY ----------------&lt;/p&gt;

&lt;p&gt;I think that this tool should run comfortably when a Java security manager is installed. I recommend the following changes:&lt;/p&gt;

&lt;p&gt;S1) LuceneSupport.dropIndex() should do its File operations inside privilege blocks.&lt;/p&gt;

&lt;p&gt;S2)  LuceneSupportTest should not disable the security manager.&lt;/p&gt;


&lt;p&gt;We need to give some thought to the SQL permissions needed to use this Lucene support. I have observed the following:&lt;/p&gt;

&lt;p&gt;S3) Only the DBO can load/unload this tool. That seems fine to me.&lt;/p&gt;

&lt;p&gt;S4) Ordinary users don&apos;t have permission to create/drop indexes. Is that too restrictive? It would be friendlier if anyone could create/drop indexes on any column they own. That is, on any column in a table in a schema that they own.&lt;/p&gt;

&lt;p&gt;S5) Ordinary users don&apos;t have permission to use the luceneQuery() table function.&lt;/p&gt;

&lt;p&gt;S6) ... but if EXECUTE privilege on luceneQuery() is granted to PUBLIC, then people can view any indexed data. This seems overbroad. If Fred doesn&apos;t have SELECT privilege on lucenetest.titles.title, then Fred shouldn&apos;t be able to see the contents of that column by running luceneQuery(). A poor man&apos;s solution to this would involve making luceneQuery() issue a dummy select against the indexed column first, just to make sure that the user has permission to see that data.&lt;/p&gt;

&lt;p&gt;S7) I have some misgivings about how this Lucene support will play with encrypted databases. The conglomerates will be encrypted but a great deal of information will leak out if the Lucene indexes are not encrypted. At a minimum, we should file a follow-on JIRA to collect thoughts/solutions related to this vulnerability. If we don&apos;t address this vulnerability, then we should at least describe it in our user documentation.&lt;/p&gt;

&lt;p&gt;-------------- MISC ----------------&lt;/p&gt;

&lt;p&gt;M1) LuceneListIndexesVTI and  LuceneSupportTest need Apache license headers.&lt;/p&gt;

&lt;p&gt;M2) LuceneQueryVTI imports RestrictedVTI but doesn&apos;t implement it. Are you planning to make LuceneQueryVTI a RestrictedVTI in a future rev?&lt;/p&gt;

&lt;p&gt;M3) I like the isolation of the Lucene indexes in a separate &quot;lucene&quot; subdirectory of the database. I see that createIndex() creates a subdirectory with a name made out of the schema, table, and column arguments. There are probably some tricky edge cases involving delimited identifiers and maybe some security vulnerabilities involved in exposing these names. The edge cases and hypothetical security issues might be eliminated by giving these subdirectories less friendly names like $tableID_$columnNumber.&lt;/p&gt;


&lt;p&gt;-------------- TEST SCRIPT ----------------&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:db1;create=true;user=dbo&apos;;&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_create_user( &apos;DBO&apos;, &apos;dbo_password&apos; );&lt;br/&gt;
call syscs_util.syscs_create_user( &apos;LUCENETEST&apos;, &apos;lucenetest_password&apos; );&lt;br/&gt;
call syscs_util.syscs_create_user( &apos;FRED&apos;, &apos;fred_password&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; shutdown in order to enable NATIVE authentication&lt;br/&gt;
connect &apos;jdbc:derby:db1;shutdown=true&apos;;&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:db1;user=lucenetest;password=lucenetest_password&apos; as lucenetest;&lt;/p&gt;

&lt;p&gt;create table titles (ID int generated always as identity, ISBN varchar(16), PRINTISBN varchar(16), title varchar(1024), subtitle varchar(1024), author varchar(1024), series varchar(1024), publisher varchar(1024), collections varchar(128), collections2 varchar(128));&lt;/p&gt;

&lt;p&gt;insert into titles (ISBN, PRINTISBN, TITLE, SUBTITLE, AUTHOR, SERIES, PUBLISHER, COLLECTIONS, COLLECTIONS2) values (&apos;9765087650324&apos;,&apos;9765087650324&apos;,&apos;The Grapes Of Wrath&apos;,&apos;The Great Depression in Oklahoma&apos;,&apos;John Steinbeck&apos;,&apos;Noble Winners&apos;,&apos;The Viking Press&apos;,&apos;National Book Award&apos;,&apos;Pulitzer Prize&apos;);&lt;/p&gt;

&lt;p&gt;insert into titles (ISBN, PRINTISBN, TITLE, SUBTITLE, AUTHOR, SERIES, PUBLISHER, COLLECTIONS, COLLECTIONS2) values (&apos;6754278542987&apos;,&apos;6754278542987&apos;,&apos;Identical: Portraits of Twins&apos;,&apos;Best Photo Book 2012 by American Photo Magazine&apos;,&apos;Martin Schoeller&apos;,&apos;Portraits&apos;,&apos;teNeues&apos;,&apos;Photography&apos;,&apos;&apos;);&lt;/p&gt;

&lt;p&gt;insert into titles (ISBN, PRINTISBN, TITLE, SUBTITLE, AUTHOR, SERIES, PUBLISHER, COLLECTIONS, COLLECTIONS2) values (&apos;2747583475882&apos;,&apos;2747583475882&apos;,&apos;Vines, Grapes, and Wines&apos;,&apos;The wine drinker&apos;&apos;s guide to grape varieties&apos;,&apos;Jancis Robinson&apos;,&apos;Reference&apos;,&apos;Alfred A. Knopf&apos;,&apos;Wine&apos;,&apos;&apos;);&lt;/p&gt;

&lt;p&gt;insert into titles (ISBN, PRINTISBN, TITLE, SUBTITLE, AUTHOR, SERIES, PUBLISHER, COLLECTIONS, COLLECTIONS2) values (&apos;4356123483483&apos;,&apos;4356123483483&apos;,&apos;A Tale of Two Cities&apos;,&apos;A fictional account of events leading up to the French revolution&apos;,&apos;Charles Dickens&apos;,&apos;Classics&apos;,&apos;Chapman &amp;amp; Hall&apos;,&apos;Fiction&apos;,&apos;Social Criticism&apos;);&lt;/p&gt;

&lt;p&gt;&amp;#8211; as expected, this user doesn&apos;t have permission to load the tool&lt;br/&gt;
call syscs_util.syscs_register_tool(&apos;luceneSupport&apos;,true);&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:db1;user=dbo;password=dbo_password&apos; as dbo;&lt;/p&gt;

&lt;p&gt;&amp;#8211; succeeds because dbo has permission to load optional tools&lt;br/&gt;
call syscs_util.syscs_register_tool(&apos;luceneSupport&apos;,true);&lt;/p&gt;

&lt;p&gt;set connection lucenetest;&lt;/p&gt;

&lt;p&gt;&amp;#8211; fails due to lack of permission. probably shouldn&apos;t fail.&lt;br/&gt;
call LuceneSupport.createIndex(&apos;lucenetest&apos;,&apos;titles&apos;,&apos;title&apos;,&apos;id&apos;);&lt;/p&gt;

&lt;p&gt;set connection dbo;&lt;/p&gt;

&lt;p&gt;&amp;#8211; succeeds&lt;br/&gt;
call LuceneSupport.createIndex(&apos;lucenetest&apos;,&apos;titles&apos;,&apos;title&apos;,&apos;id&apos;);&lt;/p&gt;

&lt;p&gt;set connection lucenetest;&lt;/p&gt;

&lt;p&gt;&amp;#8211; fails due to lack of permission. probably shouldn&apos;t fail.&lt;br/&gt;
select * from table ( LuceneSupport.luceneQuery(&apos;grapes&apos;, &apos;lucenetest.titles&apos;, &apos;title&apos;, 0) ) luceneResults;&lt;/p&gt;


&lt;p&gt;set connection dbo;&lt;/p&gt;

&lt;p&gt;&amp;#8211; succeeds&lt;br/&gt;
select * from table ( LuceneSupport.luceneQuery(&apos;grapes&apos;, &apos;lucenetest.titles&apos;, &apos;title&apos;, 0) ) luceneResults;&lt;/p&gt;

&lt;p&gt;grant execute on function LuceneSupport.luceneQuery to public;&lt;/p&gt;

&lt;p&gt;set connection lucenetest;&lt;/p&gt;

&lt;p&gt;&amp;#8211; works now, after dbo lets everyone run the luceneQuery table function&lt;br/&gt;
select * from table ( LuceneSupport.luceneQuery(&apos;grapes&apos;, &apos;lucenetest.titles&apos;, &apos;title&apos;, 0) ) luceneResults;&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:db1;user=fred;password=fred_password&apos; as dbo;&lt;/p&gt;

&lt;p&gt;&amp;#8211; it&apos;s unfortunate that fred can view data in a table he doesn&apos;t have SELECT access to&lt;br/&gt;
select * from table ( LuceneSupport.luceneQuery(&apos;grapes&apos;, &apos;lucenetest.titles&apos;, &apos;title&apos;, 0) ) luceneResults;&lt;/p&gt;

&lt;p&gt;&amp;#8211; as expected, the following query fails due to lack of permission&lt;br/&gt;
select title from lucenetest.titles where 1=2;&lt;/p&gt;

&lt;p&gt;set connection dbo;&lt;/p&gt;

&lt;p&gt;select id, schemaname, tablename, columnname from table ( LuceneSupport.listIndexes(&apos;&apos;, &apos;&apos;) ) listindexes;&lt;/p&gt;</comment>
                            <comment id="13902897" author="rhillegas" created="Mon, 17 Feb 2014 01:08:57 +0000"  >&lt;p&gt;We have identified several issues with the current patch for Lucene support:&lt;/p&gt;

&lt;p&gt;1) It is not protected by SQL authorization.&lt;/p&gt;

&lt;p&gt;2) It is not protected by database encryption.&lt;/p&gt;

&lt;p&gt;3) It is not protected by backup/restore.&lt;/p&gt;

&lt;p&gt;4) It does not work with in-memory databases.&lt;/p&gt;

&lt;p&gt;In a follow-on comment, I will offer a revised patch and propose a solution to issue 1). But first I would like to describe an effort I made to store Lucene indexes in the database.&lt;/p&gt;

&lt;p&gt;Many issues with Lucene support could be solved if the Lucene index could be stored in the database. That would give us 1-4 for free. I searched for an off-the-shelf solution and I came across many pointers to a bundle of freeware called JdbcDirectory: &lt;a href=&quot;http://www.compass-project.org/docs/2.2.0/reference/html/jdbcdirectory.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.compass-project.org/docs/2.2.0/reference/html/jdbcdirectory.html&lt;/a&gt;. This freeware provides an alternative implementation of the Lucene Directory interface, allowing you to represent indexes as Blobs.&lt;/p&gt;

&lt;p&gt;JdbcDirectory appears to be an abandoned effort. It must have worked with an older version of Lucene, but it does not run out-of-the-box with Lucene 4.5.0. I was not able to re-compile JdbcDirectory against Lucene 4.5.0. I think that some effort is needed to revive the JdbcDirectory solution.&lt;/p&gt;

&lt;p&gt;Other pointers suggested that JdbcDirectory performs poorly. So even after reviving this solution, it would address issues 1-4 at the cost of a significant performance hit.&lt;/p&gt;

&lt;p&gt;There may be other solutions to the problem of storing Lucene indexes in the database. However, I suspect that they all suffer from the fact that Lucene is a moving target. Lucene does not make the extensive backward-compatibility guarantees which Derby does. I have come to the following conclusions:&lt;/p&gt;

&lt;p&gt;1) Any effort to store Lucene indexes in the database is likely to break when customers upgrade their Lucene installation in order to take advantage of improvements to Lucene.&lt;/p&gt;

&lt;p&gt;2) As we pursue the approach begun in Andrew&apos;s patch, we should remember to document this warning: When you upgrade your Lucene installation, make sure you unload and then reload the Lucene support tool.&lt;/p&gt;</comment>
                            <comment id="13903627" author="rhillegas" created="Tue, 18 Feb 2014 00:23:33 +0000"  >&lt;p&gt;Attaching derby-590-01-ag-publicAccessToLuceneRoutines.diff. This patch builds on Andrew&apos;s approach, wiring Lucene support into Derby&apos;s SQL authorization scheme. If this approach looks promising, I will write additional regression tests to verify the claims I make about this solution.&lt;/p&gt;

&lt;p&gt;Before discussing what this patch does, let me recap what it does NOT do:&lt;/p&gt;

&lt;p&gt;1) It does NOT encrypt Lucene indexes if the database is encrypted.&lt;/p&gt;

&lt;p&gt;2) It does NOT work with in-memory databases.&lt;/p&gt;

&lt;p&gt;3) It does NOT work with backup/restore.&lt;/p&gt;

&lt;p&gt;In addition, I have changed the meaning of the updateIndex() procedure and lost the very useful meaning which it used to have. There are at least two important application profiles which have different needs from an index-updating procedure:&lt;/p&gt;

&lt;p&gt;i) Update-intensive: These applications do not want to incur the performance hit of re-indexing a document every time it changes. These applications may work best with a bulk-reindexing cron job which executes when user activity is low. This is the use-case supported by the revised updateIndex() procedure: the Lucene index is dropped and completely recreated although schema objects connected to it are not bounced.&lt;/p&gt;

&lt;p&gt;ii) Read-intensive: These applications can incur the performance hit of re-indexing a document every time it changes. These applications are well served by the trigger-driven usage of updateIndex() provided in Andrew&apos;s original patch.&lt;/p&gt;

&lt;p&gt;I think that it may be possible to recover Andrew&apos;s original functionality. But this requires more familiarity with Lucene than I can claim. Maybe Andrew can propose some ideas and we can converge on a solution.&lt;/p&gt;

&lt;p&gt;So much for the caveats. Here are the changes made by the new patch:&lt;/p&gt;

&lt;p&gt;A) The layout of the Lucene support directory is changed. There is now a subdirectory for each schema which has indexed tables in it. Under that directory, there is a subdirectory for each table which has indexed columns. Under the table-specific directory, there is a subdirectory for each text column which is indexed. Those are the leaf directories which contain the actual Lucene files. So the directory structure looks like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;databaseName
    seg0
    log
    lucene
        SCHEMA1
            TABLE1
                TEXT_COLUMN1
                TEXT_COLUMN2
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;B) The luceneQuery() table function has been changed to be context aware. See the work recently done on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6117&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-6117&lt;/a&gt;. Users no longer invoke luceneQuery() directly. Instead, for each indexed column, we create a table function specific to that column. The table function has the name $schemaName.$tableName__$columnName. This is the crucial change which allows us to wire Lucene support up to Derby&apos;s SQL authorization. The schema owner can grant EXECUTE privilege on the column-specific table function. In addition, the underlying context-aware luceneQuery() machinery starts out by issuing a select against the text column and the key columns of the table. This ensures that users must enjoy SELECT privilege on all of those columns in order to run the column-specific table function.&lt;/p&gt;

&lt;p&gt;C) A text column can be indexed only if the table has a primary key. The primary key can have multiple columns in it and the columns can be any indexable datatype. The column-specific table function returns a data set which includes the whole primary key plus the Lucene document id plus the rank number (the relevance of that document according to Lucene&apos;s calculations). This makes it easy to join the table function to the original table in order to obtain more extensive results.&lt;/p&gt;

&lt;p&gt;D) The arguments to the Lucene support procedures are now case-insensitive SQL identifiers rather than case-sensitive strings. This is a departure from the convention followed by most Derby system procedures, but I think the departure is welcome and long overdue.&lt;/p&gt;

&lt;p&gt;E) The Lucene support has been moved out of the tools jar and into the engine jar. This fixes the big surprise I recorded on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6470&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-6470&lt;/a&gt;. This change also made it possible to use IdUtil in order to implement the semantics described above in D).&lt;/p&gt;

&lt;p&gt;F) It is assumed that the Lucene jars will be checked into the Derby source tree and that the Lucene support classes will always be built. However, there is still no plan to include Lucene jars in Derby binary distributions. Users who want to enable the optional Lucene support will have to install the Lucene jars themselves.&lt;/p&gt;

&lt;p&gt;G) In general, the following convention has been followed for each supported operation: Transactional writes are performed before any calls are made to Lucene. This means that if the Lucene calls raise an error, then the transactional writes are rolled back. I think that following a consistent convention like this will make it easier for users to reason about how Lucene support behaves.&lt;/p&gt;

&lt;p&gt;H) Miscellaneous improvements have been made in the areas of code factoring and integration with the Java security manager.&lt;/p&gt;

&lt;p&gt;Here&apos;s how you use the revised tool:&lt;/p&gt;

&lt;p&gt;Let&apos;s say that you have a table with this shape...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create table lucenetest.titles
(
    ID int generated always as identity primary key,
    ISBN varchar(16),
    PRINTISBN varchar(16),
    title varchar(1024),
    subtitle varchar(1024),
    author varchar(1024),
    series varchar(1024),
    publisher varchar(1024),
    collections varchar(128),
    collections2 varchar(128)
);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The DBO loads the Lucene support tool as follows...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;call syscs_util.syscs_register_tool( &apos;luceneSupport&apos;, true );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates the LuceneSupport schema, containing the following procedures and functions...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create procedure LuceneSupport.createIndex
(
    schemaname varchar( 128 ),
    tablename varchar( 128 ),
    textcolumn varchar( 128 )
)
parameter style java modifies sql data language java
external name &apos;org.apache.derby.impl.optional.lucene.LuceneSupport.createIndex&apos;;

create procedure LuceneSupport.dropIndex
(
    schemaname varchar( 128 ),
	tablename varchar( 128 ),
	textcolumn varchar( 128 )
)
parameter style java modifies sql data language java
external name &apos;org.apache.derby.impl.optional.lucene.LuceneSupport.dropIndex&apos;;

create procedure LuceneSupport.updateIndex
(
    schemaname varchar( 128 ),
	tablename varchar( 128 ),
	textcolumn varchar( 128 )
)
parameter style java reads sql data language java
external name &apos;org.apache.derby.impl.optional.lucene.LuceneSupport.updateIndex&apos;;

create function LuceneSupport.listIndexes() returns table
(
    id int,
	schemaname char( 128 ),
	tablename char( 128 ),
	columnname char( 128 ),
	lastupdated timestamp
)
language java parameter style DERBY_JDBC_RESULT_SET contains sql
external name &apos;org.apache.derby.impl.optional.lucene.LuceneSupport.listIndexes&apos;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The LUCENETEST user can then index a text column as follows. The DBO can do this too. However, no-one else can index the column. That is because the createIndex() procedure attempts to create a table function in the lucenetest schema. Other users do not enjoy that privilege...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;call LuceneSupport.createIndex( &apos;lucenetest&apos;, &apos;titles&apos;, &apos;title&apos; );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...which creates the following directory structure...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;databaseName
    seg0
    log
    lucene
        LUCENETEST
            TITLES
                TITLE
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...and the following column-specific table function:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create function lucenetest.titles__title( query varchar( 32672 ), rankCutoff double )
returns table
(
    ID int,
    documentID int,
	rank double
)
language java parameter style derby_jdbc_result_set contains sql
external name &apos;org.apache.derby.impl.optional.lucene.LuceneSupport.luceneQuery&apos;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The LUCENETEST user can then query the Lucene index and join it to the original table as follows...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;select title, author, publisher, documentID, rank
from lucenetest.titles t, table ( lucenetest.titles__title( &apos;grapes&apos;, 0 ) ) l
where t.id = l.id;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The LUCENETEST user (or the DBO but no-one else) can drop the Lucene index as follows...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;call LuceneSupport.dropIndex( &apos;lucenetest&apos;, &apos;titles&apos;,&apos;title&apos; );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...which drops the lucene/LUCENETEST/TITLES/TITLE directory. Directory deletion cascades up. That is, if there are no more indexed columns in lucenetest.titles, then we also drop lucene/LUCENETEST/TITLES. And we drop lucene/LUCENETEST if there are no more indexed tables in the lucenetest schema.&lt;/p&gt;

&lt;p&gt;The DBO (and only the DBO) can unload Lucene support as follows...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;call syscs_util.syscs_register_tool( &apos;luceneSupport&apos;, false );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...which drops all procedures and table functions created by the tool. This command also drops the lucene subdirectory and everything under it.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;/p&gt;

&lt;p&gt;Adds the Lucene support package to the list of Derby packages whose entry points can be bound to user-defined routines.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/optional&lt;br/&gt;
A       java/engine/org/apache/derby/impl/optional/lucene&lt;br/&gt;
A       java/engine/org/apache/derby/impl/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/optional/lucene/LuceneSupport.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/optional/lucene/LuceneListIndexesVTI.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/optional/lucene/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/impl/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/Java5SystemProcedures.java&lt;/p&gt;

&lt;p&gt;The Lucene support optional tool.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/VTITemplate.java&lt;/p&gt;

&lt;p&gt;Some additional support for context-aware table functions. This support allows the function to query the JDBC metadata for the shape of the ResultSet it returns.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages for Lucene support.&lt;/p&gt;


&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       build.xml&lt;br/&gt;
A       tools/java/lucene-analyzers-common-4.5.0.jar&lt;br/&gt;
A       tools/java/lucene-queryparser-4.5.0.jar&lt;br/&gt;
A       tools/java/lucene-core-4.5.0.jar&lt;br/&gt;
M       tools/ant/properties/extrapath.properties&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Miscellaneous build machinery.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;A       tools/release/notices/lucene.txt&lt;/p&gt;

&lt;p&gt;The Lucene notice file which must be included in the Derby NOTICE file if we are to ship the lucene jars in Derby source distributions.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;/p&gt;

&lt;p&gt;Initial tests.&lt;/p&gt;</comment>
                            <comment id="13917208" author="rhillegas" created="Sat, 1 Mar 2014 22:20:41 +0000"  >&lt;p&gt;Attaching a revised version of the patch: derby-590-01-ah-publicAccessToLuceneRoutines.diff. This version wires in support for running the Lucene plugin under a Java SecurityManager. This version also adds the first set of tests for verifying the plugin&apos;s behavior when SQL Authorization is enabled and a SecurityManager is installed.&lt;/p&gt;

&lt;p&gt;I think that I have figured out a reasonably small set of permissions needed to run the plugin under a SecurityManager. The process of discovering this set is documented on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-5471&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-5471&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following permissions must be granted to the Lucene core jar file...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;// Permissions for the Lucene plugin
grant codeBase &quot;${lucene.core.jar.url}&quot;
{
  // permissions for file access, write access only to sandbox:
  permission java.io.FilePermission &quot;${databaseDirectory}${/}lucene&quot;, &quot;read,write,delete&quot;;
  permission java.io.FilePermission &quot;${databaseDirectory}${/}lucene${/}-&quot;, &quot;read,write,delete&quot;;
  
  // Basic permissions needed for Lucene to work:
  permission java.util.PropertyPermission &quot;user.dir&quot;, &quot;read&quot;;
  permission java.util.PropertyPermission &quot;sun.arch.data.model&quot;, &quot;read&quot;;
};
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...and the following additional permissions must be granted to the Derby engine jar...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;grant codeBase &quot;${derby.jar}&quot;
{
    ...

  // extra permissions needed for the Lucene plugin
  permission java.io.FilePermission &quot;${lucene.core.jar.file}&quot;, &quot;read&quot;;
  permission java.util.PropertyPermission &quot;user.dir&quot;, &quot;read&quot;;
};
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For an example, see luceneSupport.policy.&lt;/p&gt;


&lt;p&gt;Touches the following additional files:&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/SecurityManagerSetup.java&lt;/p&gt;</comment>
                            <comment id="13944251" author="rhillegas" created="Sat, 22 Mar 2014 21:53:19 +0000"  >&lt;p&gt;Attaching derby-590-01-am-publicAccessToLuceneRoutines.diff. I am running tests against this version. Provided that the tests pass, I think that this version is ready for checkin as the first increment of Lucene support.&lt;/p&gt;

&lt;p&gt;This version adds the following:&lt;/p&gt;

&lt;p&gt;i) More tests while running under SQL authorization.&lt;/p&gt;

&lt;p&gt;ii) Support for running with collation turned on.&lt;/p&gt;

&lt;p&gt;iii) Better serialization of indexable datatypes, rather than representing everything as a string.&lt;/p&gt;

&lt;p&gt;iv) Cleaned-up javadoc.&lt;/p&gt;

&lt;p&gt;v) Various bug fixes.&lt;/p&gt;

&lt;p&gt;Of course, we are a long way from documenting this feature or exposing it to users. I hope to continue working on the following improvements:&lt;/p&gt;

&lt;p&gt;1) Add support for other languages. Right now the Lucene plugin assumes that the text is English.&lt;/p&gt;

&lt;p&gt;2) Make it possible to create Lucene indexes on views as well as base tables.&lt;/p&gt;

&lt;p&gt;3) Begin writing a functional spec, which will evolve as the plugin becomes more capable. The spec will describe what works and what doesn&apos;t.&lt;/p&gt;

&lt;p&gt;4) Restore Andrew&apos;s original feature, which allowed you to incrementally index new/updated documents via triggers.&lt;/p&gt;

&lt;p&gt;5) See if we can get the plugin to work with in-memory databases, backup, and encryption.&lt;/p&gt;


&lt;p&gt;Touches the following additional files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSuite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;/p&gt;

&lt;p&gt;Added a test for running the plugin with collation turned on. Put all the Lucene tests in a suite to facilitate testing them.&lt;/p&gt;</comment>
                            <comment id="13944281" author="jira-bot" created="Sun, 23 Mar 2014 00:17:58 +0000"  >&lt;p&gt;Commit 1580387 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580387&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580387&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: First increment of support for Lucene indexing of Derby text columns; tests passed cleanly on derby-590-01-am-publicAccessToLuceneRoutines.diff.&lt;/p&gt;</comment>
                            <comment id="13944556" author="rhillegas" created="Sun, 23 Mar 2014 20:09:37 +0000"  >&lt;p&gt;Attaching derby-590-02-aa-cleanupFindbugsErrors.diff. This patch cleans up some suspect coding practices discovered by running the Findbugs lint tool.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/optional/lucene/LuceneSupport.java&lt;/p&gt;</comment>
                            <comment id="13944557" author="jira-bot" created="Sun, 23 Mar 2014 20:10:25 +0000"  >&lt;p&gt;Commit 1580587 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580587&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580587&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Cleanup some suspect coding practices disclosed by running the Findbugs lint tool; commit derby-590-02-aa-cleanupFindbugsErrors.diff.&lt;/p&gt;</comment>
                            <comment id="13944568" author="rhillegas" created="Sun, 23 Mar 2014 20:55:00 +0000"  >&lt;p&gt;Attaching derby-590-03-aa-removeTestingDiagnostic.diff. This patch removes some debug cruft introduced by derby-590-01-am-publicAccessToLuceneRoutines.diff. The cruft was meant to verify that the junit-single ant target sets up a classpath which includes the Lucene jar files.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       build.xml&lt;/p&gt;</comment>
                            <comment id="13944569" author="jira-bot" created="Sun, 23 Mar 2014 20:55:59 +0000"  >&lt;p&gt;Commit 1580611 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580611&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580611&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Remove some debug cruft from the junit-single target; commit derby-590-03-aa-removeTestingDiagnostic.diff.&lt;/p&gt;</comment>
                            <comment id="13946488" author="rhillegas" created="Tue, 25 Mar 2014 13:14:40 +0000"  >&lt;p&gt;Attaching derby-590-04-aa-removeIDFromListIndexes.diff. This patch removes the ID column from the Lucene plugin&apos;s listIndexes() table function. Hopefully, this will fix the non-deterministic results we&apos;re seeing in the platform tests.&lt;/p&gt;

&lt;p&gt;The listIndexes() table function makes up an index id for each Lucene index. However, the id assigned to a particular index really has no durable meaning and is completely arbitrary. I have removed this column from the table function. I will give some thought to how or whether we should assign ids to the indexes.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/optional/lucene/LuceneListIndexesVTI.java&lt;/p&gt;

&lt;p&gt;Remove the ID column.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;/p&gt;

&lt;p&gt;Adjust the tests.&lt;/p&gt;</comment>
                            <comment id="13946493" author="jira-bot" created="Tue, 25 Mar 2014 13:16:08 +0000"  >&lt;p&gt;Commit 1581312 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1581312&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1581312&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Remove the ID column from the Lucene plugin listIndexes() table function; commit derby-590-04-aa-removeIDFromListIndexes.diff.&lt;/p&gt;</comment>
                            <comment id="13947260" author="mikem" created="Tue, 25 Mar 2014 22:23:30 +0000"  >&lt;p&gt;I see that the optional tool for lucene is being added to derby.jar.  I continue to believe that optional tools&lt;br/&gt;
should be optional to the jar classpath as well as the runtime loading of the optional tool.  Support specific&lt;br/&gt;
to lucene should to into a separate jar, either an derbyoptionallucene.jar (or whatever would be a good name) or I would be ok for now to lump it into derbytools.jar.  &lt;/p&gt;

&lt;p&gt;I would like to see a sustainable model where developers can make an unbounded number of optional&lt;br/&gt;
tools avaliable for derby, but each one should not add to the weight of the core derby.jar.&lt;/p&gt;

&lt;p&gt;Also I would prefer that these tools be in a different project than the derby server and the interfaces in&lt;br/&gt;
derby be enhanced so that is possible.  &lt;/p&gt;

&lt;p&gt;While I think the code being donated for the lucene integration looks interesting, I think we need to be&lt;br/&gt;
clear about its functionality.   I have not reviewed the code as I believed it was going to exist as an OPTIONAL tool, not integrated into the product.  Some high level descriptions indicate that its indexes&lt;br/&gt;
are not transactional, which does not mesh well with default current derby behavior.&lt;/p&gt;

&lt;p&gt;I continue to hope that we can come up with a project or separate &quot;demo&quot; set of jars for features like this&lt;br/&gt;
so that users can benefit from a shared development environment.  But also so that we can continue &lt;br/&gt;
to promote the stable core of the derby server with clear and clean interfaces to allow the less supported&lt;br/&gt;
functions to work (user provided new functions, user provided optional tools, ...)&lt;/p&gt;</comment>
                            <comment id="13947296" author="rhillegas" created="Tue, 25 Mar 2014 22:46:42 +0000"  >&lt;p&gt;I would support moving the Lucene plugin (and maybe other optional tools) into a new derbyOptionalTools.jar. I continue to think that derbytools.jar is the wrong place for this tool and some of the other optional tools. That is because some of the optional tools (including the Lucene plugin) rely on engine classes. derbytools.jar is supposed to hold tools which run fine on a client machine without the engine jar.&lt;/p&gt;

&lt;p&gt;Or maybe I misunderstand you. Are you suggesting that we crack open the Lucene jars and put all their contents together with the plugin into a single Lucene-specific jar? I think there will be problems with that approach.&lt;/p&gt;

&lt;p&gt;Are you suggesting that we allocate a separate jar file to each optional tool?&lt;/p&gt;

&lt;p&gt;Yes, please, I would like more discussion about the transactional behavior of the Lucene plugin. Having another set of eyes on this would be very helpful. In particular, I want to reduce the chance that users will experience deadlocks between Lucene&apos;s locks and Derby&apos;s locks.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13948103" author="rhillegas" created="Wed, 26 Mar 2014 16:59:25 +0000"  >&lt;p&gt;Attaching derby-590-05-aa-accessDeclaredMembers.diff. This patch attempts to fix two problems observed in the platform tests:&lt;/p&gt;

&lt;p&gt;1) On certain operating systems (including Linux variants), the following permission must be granted both to the application (the test) and to the Lucene core jar in order to get LuceneSupportPermsTest to run cleanly:&lt;/p&gt;

&lt;p&gt;  permission java.lang.RuntimePermission &quot;accessDeclaredMembers&quot;;&lt;/p&gt;

&lt;p&gt;2) On Java 7 we are seeing errors when the test cases in LuceneSupportPermsTest run in an unexpected order. The errors arise because a user schema does not exist yet. The fix is to create a table in that schema in order to force schema creation. A longer-term fix will be to figure out why Derby is demanding that a user schema exist. But this should fix the test for the moment.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;</comment>
                            <comment id="13948106" author="jira-bot" created="Wed, 26 Mar 2014 17:01:11 +0000"  >&lt;p&gt;Commit 1581935 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1581935&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1581935&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Fix two problems seen in LuceneSupportPermsTest during the continuous integregation and nightly tests; commit derby-590-05-aa-accessDeclaredMembers.diff.&lt;/p&gt;</comment>
                            <comment id="13948464" author="mikem" created="Wed, 26 Mar 2014 21:06:15 +0000"  >&lt;p&gt;I continue to think that derby.jar is the wrong place for this tool and&lt;br/&gt;
other optional tools.  I do not feel strongly it need go into derbytools.jar,&lt;br/&gt;
just that it should go in some other jar.  Functionally I am looking to ways&lt;br/&gt;
to insure new optional tools do not add to code bloat (both disk and runtime)&lt;br/&gt;
to base server users who do not want the optional tools.  Looking to insure&lt;br/&gt;
this by having separate jars and by being able to run full sets of non-optional&lt;br/&gt;
tools tests with a classpath that does not include these optional tool jars.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Or maybe I misunderstand you. Are you suggesting that we crack open the Lucene&lt;br/&gt;
 jars and put all their contents together with the plugin into a single Lucene-s&lt;br/&gt;
pecific jar? I think there will be problems with that approach.&lt;br/&gt;
No, I am not suggesting this - we should leave lucene jars alone.  I assume&lt;br/&gt;
this project does not need any lucene jar changes, just uses existing&lt;br/&gt;
interfaces.  I am hoping similarly the lucene optional tool need not have&lt;br/&gt;
derby changes, just use existing generic optional tool interfaces (which may&lt;br/&gt;
need to be altered as we learn new interfaces to provide for all new tools).&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Are you suggesting that we allocate a separate jar file to each optional tool?&lt;br/&gt;
I did suggest this as a point for discussion.  I don&apos;t have strong&lt;br/&gt;
opinions one way or another as long as the libraries and dependencies are&lt;br/&gt;
separate from the base server.  Some optional tools may make more sense&lt;br/&gt;
to group together, like the various existing diagnostic tools.  To me lucerne&lt;br/&gt;
seems very different.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Yes, please, I would like more discussion about the transactional behavior of&lt;br/&gt;
the Lucene plugin. Having another set of eyes on this would be very helpful. In&lt;br/&gt;
particular, I want to reduce the chance that users will experience deadlocks bet&lt;br/&gt;
ween Lucene&apos;s locks and Derby&apos;s locks.&lt;br/&gt;
I have to admit at this point I have not looked very closely at this other&lt;br/&gt;
than to note that the implementation seems not finished, and seemed to allow&lt;br/&gt;
for the index to not be up to date with the data (but would get there&lt;br/&gt;
eventually).  I am fine with incremental development in the trunk.&lt;/p&gt;


&lt;p&gt;The index not being in sync with the data is not going to be SQL standard so&lt;br/&gt;
was hoping it would not be part of the main product.&lt;br/&gt;
I do see that lucene searching in a non-SQL&lt;br/&gt;
compatible way may be quite useful to some users, so did not want to get&lt;br/&gt;
in the way - but still see it as something different than the derby project.&lt;/p&gt;</comment>
                            <comment id="13948556" author="rhillegas" created="Wed, 26 Mar 2014 22:16:12 +0000"  >&lt;p&gt;Attaching derby-590-06-aa-suppressAccessChecks.diff. Next round of privilege whackamole for the Lucene plugin.&lt;/p&gt;

&lt;p&gt;The following permission is granted to the app (the LuceneSupportPermsTest) and to the Lucene core jar file:&lt;/p&gt;

&lt;p&gt;  permission java.lang.reflect.ReflectPermission &quot;suppressAccessChecks&quot;;&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;/p&gt;</comment>
                            <comment id="13948558" author="jira-bot" created="Wed, 26 Mar 2014 22:17:43 +0000"  >&lt;p&gt;Commit 1582090 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1582090&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1582090&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add another privilege to the test policy for the Lucene plugin; commit derby-590-06-aa-suppressAccessChecks.diff.&lt;/p&gt;</comment>
                            <comment id="13948560" author="rhillegas" created="Wed, 26 Mar 2014 22:20:23 +0000"  >&lt;p&gt;Thanks, Mike. If you are comfortable with my moving the plugin to a new derbyOptionalTools.jar file, then I will do that. Over time I may migrate some other optional code there. Thanks.&lt;/p&gt;</comment>
                            <comment id="13948591" author="rhillegas" created="Wed, 26 Mar 2014 22:49:46 +0000"  >&lt;p&gt;Here is a proposal for where to include the optional code in the source tree:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java/
  build/
    ...
  client/
    ...
  demo/
    ...
  drda/
    ...
  engine/
    ...
  optional/
    org/
      apache/
        derby/
          optional/
            api/
            lucene/
        
  shared/
    ...
  storeless/
    ...
  stubs/
    ...
  testing/
    ...
  tools/
    ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The derbyOptionalTools.jar file would hold the classes under java/optional/org/apache/derby/optional. Select classes in org.apache.derby.optional.api would go into the public api.&lt;/p&gt;

&lt;p&gt;What are your thoughts?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13948864" author="rhillegas" created="Thu, 27 Mar 2014 04:14:33 +0000"  >&lt;p&gt;Attaching derby-590-08-aa-localeSensitiveAnalysis.diff. This grants another privilege to Lucene and the LuceneSupportPermsTest:&lt;/p&gt;

&lt;p&gt;  permission java.lang.RuntimePermission &quot;accessClassInPackage.sun.misc&quot;;&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;/p&gt;</comment>
                            <comment id="13948865" author="jira-bot" created="Thu, 27 Mar 2014 04:15:26 +0000"  >&lt;p&gt;Commit 1582178 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1582178&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1582178&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Grant another privilege to Lucene; commit derby-590-07-aa-accessClassInPackage.sun.misc.diff.&lt;/p&gt;</comment>
                            <comment id="13949544" author="mikem" created="Thu, 27 Mar 2014 16:36:58 +0000"  >&lt;p&gt;the proposed locations seems clean to me.  It would be good to insure that this code is modular and does not rely on any other derby imports if possible (especially non protocol imports), just public documented interfaces that any user program could do.  &lt;/p&gt;</comment>
                            <comment id="13949581" author="rhillegas" created="Thu, 27 Mar 2014 16:57:27 +0000"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;The modular separation you want is largely observed by the Lucene plugin right now. The exceptions are:&lt;/p&gt;

&lt;p&gt;o org.apache.derby.iapi.sql.dictionary.OptionalTool is referenced because the plugin implements this interface. Now that we have agreement on a source code tree for optional tools, this interface could probably be moved over there and perhaps eventually exposed in the public api.&lt;/p&gt;

&lt;p&gt;o org.apache.derby.iapi.util.IdUtil is referenced because the plugin needs the identifier normalization logic from IdUtil in order to convert string arguments into SQL identifiers and avoid SQL injection attacks.&lt;/p&gt;

&lt;p&gt;o org.apache.derby.iapi.error.StandardException and org.apache.derby.shared.common.reference.SQLState are referenced so that the plugin can construct localized SQLExceptions with SQLStates.&lt;/p&gt;

&lt;p&gt;o org.apache.derby.iapi.sql.conn.ConnectionUtil and org.apache.derby.iapi.sql.conn.LanguageConnectionContext are referenced in order to retrieve the database Locale.&lt;/p&gt;

&lt;p&gt;o org.apache.derby.impl.jdbc.EmbedConnection is referenced in order to retrieve the location of the database directory. This is the only instance of the plugin reaching into the impl classes. I will see whether this can be improved.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13949760" author="rhillegas" created="Thu, 27 Mar 2014 18:35:08 +0000"  >&lt;p&gt;Attaching derby-590-08-aa-omitLuceneFlag.diff. This patch adds a flag to cause the tests to omit the Lucene plugin tests and at the same time demand that the Lucene jars not be present on the classpath.&lt;/p&gt;

&lt;p&gt;This patch introduces a new Derby testing flag: derby.tests.omitLucene. When this flag is set to true, the Lucene tests are NOT run and the LuceneSuite asserts that the Lucene jar files must NOT be on the classpath.&lt;/p&gt;

&lt;p&gt;I have run the Lucene suite in the following configurations with the following (expected) results:&lt;/p&gt;

&lt;p&gt;o Default - The flag is not set and the Lucene jars ARE on the classpath. The LuceneSuite runs cleanly.&lt;/p&gt;

&lt;p&gt;o Missing - The flag is not set and the Lucene jars are NOT on the classpath. The LuceneSuite raises many ClassNotFoundExceptions.&lt;/p&gt;

&lt;p&gt;o Present - The flag is set and the Lucene jars ARE on the classpath. The LuceneSuite raises an error, complaining that it can see the jar files.&lt;/p&gt;

&lt;p&gt;o Omitted - The flag is set and the Lucene jars are NOT on the classpath. The LuceneSuite runs cleanly but with 0 tests.&lt;/p&gt;

&lt;p&gt;I will run the full test suite in the Default and Omitted configurations.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSuite.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;/p&gt;</comment>
                            <comment id="13950029" author="rhillegas" created="Thu, 27 Mar 2014 22:25:45 +0000"  >&lt;p&gt;Default and Omitted test runs passed cleanly for me on derby-590-08-aa-omitLuceneFlag.diff.&lt;/p&gt;</comment>
                            <comment id="13950032" author="jira-bot" created="Thu, 27 Mar 2014 22:27:16 +0000"  >&lt;p&gt;Commit 1582514 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1582514&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1582514&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add flag for running tests without the Lucene jar files; commit derby-590-08-aa-omitLuceneFlag.diff.&lt;/p&gt;</comment>
                            <comment id="13954351" author="rhillegas" created="Sat, 29 Mar 2014 17:30:54 +0000"  >&lt;p&gt;Attaching derby-590-09-aa-localeSensitiveAnalysis.diff. This patch adds support for locale-sensitive searching.&lt;/p&gt;

&lt;p&gt;I was in the middle of this patch when Mike and I agreed on a new directory scheme. This patch uses the old directory scheme. In a later patch, I will move the code into the new scheme.&lt;/p&gt;

&lt;p&gt;Before describing the patch in greater detail, let me first describe the Lucene Analyzer interface. The Analyzer is the object which turns a block of text into a list of indexable terms. The Analyzer is used when you initially index text. The Analyzer is also used later on when you run a query. It is expected that you will use the same Analyzer to parse the text when you index it and when you query it. Lucene supplies a number of locale-sensitive Analyzers. They are listed in the LuceneUtils class included in this patch.&lt;/p&gt;

&lt;p&gt;This patch adds a new argument to the createIndex() and updateIndex() procedures. The new argument is a (possibly null) method name. It is the name of a static, public, no-arg method which instantiates a Lucene Analyzer. If you leave this argument null, then it defaults to org.apache.derby.optional.LuceneUtils.defaultAnalyzer(). That method looks for a Lucene Analyzer which matches the database Locale. If a good match can&apos;t be found, then the method returns StandardAnalyzer, the Analyzer which the plugin has been using up until now.&lt;/p&gt;

&lt;p&gt;The tests return slightly different (and I think better) results now that they use a locale-sensitive Analyzer.&lt;/p&gt;

&lt;p&gt;At this point, the Lucene index needs to be more stateful. In particular, the index needs to know what Analyzer created it so that the same Analyzer can be re-used at query time. So this patch introduces a derby-lucene.properties file. This file is added to the index directory by createIndex() and it is re-written by updateIndex(). Right now, the properties file contains the following information:&lt;/p&gt;

&lt;p&gt;o The version number of the Lucene software which created the index.&lt;/p&gt;

&lt;p&gt;o The timestamp when the index was created/updated.&lt;/p&gt;

&lt;p&gt;o The name of the static method which instantiated the Analyzer.&lt;/p&gt;

&lt;p&gt;o The name of the Analyzer which was instantiated.&lt;/p&gt;

&lt;p&gt;This extra information is added to the ResultSet returned by the listIndexes() table function.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/optional&lt;br/&gt;
A       java/engine/org/apache/derby/optional/LuceneUtils.java&lt;br/&gt;
A       java/engine/org/apache/derby/optional/build.xml&lt;br/&gt;
M       java/engine/build.xml&lt;/p&gt;

&lt;p&gt;New utility class, to be part of the public api eventually. Right now, this class provides support for looking up locale-sensitive Analyzers. We may think of other utility methods to add later on. I have not exposed this class in the public api yet. That will happen at the end when the plugin is ready to be documented and exposed to users.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/optional/lucene/LuceneListIndexesVTI.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/optional/lucene/build.xml&lt;/p&gt;

&lt;p&gt;The argument signatures of createIndex() and updateIndex() have changed. The signature of the table returned by listIndexes() has changed too.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;br/&gt;
M       build.xml&lt;/p&gt;

&lt;p&gt;The tests reflect the new signatures. New tests have been added for the new funtionality. The decorator for LuceneSupportPermsTest now explicitly sets the Locale to en_US. Hopefully the decorators will compose correctly when run on machines having different default locales.&lt;/p&gt;</comment>
                            <comment id="13954352" author="jira-bot" created="Sat, 29 Mar 2014 17:32:19 +0000"  >&lt;p&gt;Commit 1583032 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583032&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583032&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Make the Lucene plugin locale-sensitive; commit derby-590-09-aa-localeSensitiveAnalysis.diff.&lt;/p&gt;</comment>
                            <comment id="13954834" author="rhillegas" created="Sun, 30 Mar 2014 22:04:59 +0100"  >&lt;p&gt;Attaching derby-590-10-aa-fixLocaleTest.diff. Hopefully this patch fixes a failure seen in the nightly tests after committing the previous patch (derby-590-09-aa-localeSensitiveAnalysis.diff).&lt;/p&gt;

&lt;p&gt;It appears that Locale &quot;en_US&quot; is not available on all of our test machines. The database is created with Locale &quot;en&quot; instead. That won&apos;t affect the behavior of the plugin because the analyzer it picks depends on the database language, not its country. The patch changes the assertion to just check for the leading two characters of the Locale string.&lt;/p&gt;

&lt;p&gt;There were other errors in the Lucene tests in the nightly runs on Windows. I don&apos;t understand those errors yet. I&apos;m going to hold off filing a bug for those errors until after I fix this error which I think I understand.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;</comment>
                            <comment id="13954835" author="jira-bot" created="Sun, 30 Mar 2014 22:06:06 +0100"  >&lt;p&gt;Commit 1583200 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583200&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583200&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Fix a locale-sensitive Lucene test; commit derby-590-10-aa-fixLocaleTest.diff.&lt;/p&gt;</comment>
                            <comment id="13954855" author="rhillegas" created="Sun, 30 Mar 2014 23:20:52 +0100"  >&lt;p&gt;Attaching derby-590-11-aa-moveCode.diff. This patch moves the Lucene plugin to the directory structure which Mike and I agreed on.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;D       java/engine/org/apache/derby/optional&lt;br/&gt;
D       java/engine/org/apache/derby/optional/LuceneUtils.java&lt;br/&gt;
D       java/engine/org/apache/derby/optional/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java&lt;br/&gt;
D       java/engine/org/apache/derby/impl/optional/lucene&lt;br/&gt;
D       java/engine/org/apache/derby/impl/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
D       java/engine/org/apache/derby/impl/optional/lucene/LuceneSupport.java&lt;br/&gt;
D       java/engine/org/apache/derby/impl/optional/lucene/LuceneListIndexesVTI.java&lt;br/&gt;
D       java/engine/org/apache/derby/impl/optional/lucene/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/impl/build.xml&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/Java5SystemProcedures.java&lt;br/&gt;
M       java/engine/build.xml&lt;br/&gt;
A       java/optional&lt;br/&gt;
A       java/optional/org&lt;br/&gt;
A       java/optional/org/apache&lt;br/&gt;
A       java/optional/org/apache/derby&lt;br/&gt;
A       java/optional/org/apache/derby/optional&lt;br/&gt;
A       java/optional/org/apache/derby/optional/api&lt;br/&gt;
A       java/optional/org/apache/derby/optional/api/LuceneUtils.java&lt;br/&gt;
A       java/optional/org/apache/derby/optional/lucene&lt;br/&gt;
A       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
A       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
A       java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java&lt;br/&gt;
A       java/optional/build.xml&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       build.xml&lt;br/&gt;
M       tools/ant/properties/dirs.properties&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;</comment>
                            <comment id="13954856" author="jira-bot" created="Sun, 30 Mar 2014 23:23:29 +0100"  >&lt;p&gt;Commit 1583216 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583216&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583216&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Move Lucene code to a new directory tree intended for optional code; commit derby-590-11-aa-moveCode.diff.&lt;/p&gt;</comment>
                            <comment id="13955986" author="rhillegas" created="Tue, 1 Apr 2014 02:26:45 +0100"  >&lt;p&gt;Attaching derby-590-12-aa-newJar.diff. This patch moves the Lucene plugin into a new jar file for optional tools.&lt;/p&gt;

&lt;p&gt;This patch introduces a new jar file: derbyoptionaltools.jar. Right now, this just holds the Lucene plugin, but we may be able to move other optional tools into this jar file too.&lt;/p&gt;

&lt;p&gt;I have not tested the release machinery, but a cursory glance at the release targets suggests that the new jar file will be automatically bundled into the derby distributions.&lt;/p&gt;

&lt;p&gt;After applying this patch, you will want to make sure that your testing classpath includes the new jar file.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       build.xml&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;Move the Lucene plugin classes from derby.jar into derbyoptionaltools.jar.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/tools/sysinfo.java&lt;br/&gt;
M       java/tools/org/apache/derby/impl/tools/sysinfo/Main.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/info/ProductGenusNames.java&lt;/p&gt;

&lt;p&gt;Make sysinfo print out version information for derbyoptionaltools.jar.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;/p&gt;

&lt;p&gt;Add a new grant block for derbyoptionaltools.jar to the policy file for LuceneSupportPermsTest. Move the lucene privileges from derby.jar to derbyoptionaltools.jar.&lt;/p&gt;</comment>
                            <comment id="13955988" author="jira-bot" created="Tue, 1 Apr 2014 02:27:57 +0100"  >&lt;p&gt;Commit 1583505 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583505&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583505&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Move the Lucene plugin into a new derbyoptionaltools.jar file; commit derby-590-12-aa-newJar.diff.&lt;/p&gt;</comment>
                            <comment id="13957246" author="rhillegas" created="Wed, 2 Apr 2014 02:59:33 +0100"  >&lt;p&gt;Attaching derby-590-13-aa-indexViews.diff. This patch adds support for creating Lucene indexes on arbitrary views.&lt;/p&gt;

&lt;p&gt;In order to index a view, you must supply a list of columns which will be treated as a key. I could not think of any reason to avoid sharing this capability with tables too. So now you can index a table which doesn&apos;t have a primary key. If you omit the key columns, then we try to find a primary key; and we raise an error if we can&apos;t find one.&lt;/p&gt;

&lt;p&gt;You do not supply key columns when you update a Lucene index, however. Instead, the plugin looks up the existing key information for the table function.&lt;/p&gt;

&lt;p&gt;Errors can, of course, occur if you drop a key column from the table. If you do this, you will get an error when you try to select from the Lucene index; that is because we still check to see if you have SELECT privilege on the missing column.&lt;/p&gt;

&lt;p&gt;This raises an interesting defect of the plugin: Creating a Lucene index does not prevent you from performing DDL on the table/view which will make it impossible to join the Lucene index back to Derby data. You are on your own there.&lt;/p&gt;

&lt;p&gt;At this point, I think that the api for the plugin is stable enough that I can write a first rev of a functional spec.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/VTITemplate.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;</comment>
                            <comment id="13957247" author="jira-bot" created="Wed, 2 Apr 2014 03:01:37 +0100"  >&lt;p&gt;Commit 1583855 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1583855&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1583855&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add ability to create a Lucene index on an arbitrary view; commit derby-590-13-aa-indexViews.diff.&lt;/p&gt;</comment>
                            <comment id="13958410" author="rhillegas" created="Thu, 3 Apr 2014 02:17:27 +0100"  >&lt;p&gt;Attaching derby-590-14-aa-coarseGrainedAuthorization.diff. This patch fixes a bug which allowed read-only users to execute the updateIndex() procedure.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;/p&gt;

&lt;p&gt;Add checks for read-only connections.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSuite.java&lt;/p&gt;

&lt;p&gt;Add tests for using the Lucene pluging with coarse-grained authorization.&lt;/p&gt;</comment>
                            <comment id="13958412" author="jira-bot" created="Thu, 3 Apr 2014 02:18:50 +0100"  >&lt;p&gt;Commit 1584242 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584242&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584242&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Enforce coarse-grained authorization checks in the Lucene plugin; commit derby-590-14-aa-coarseGrainedAuthorization.diff.&lt;/p&gt;</comment>
                            <comment id="13959502" author="rhillegas" created="Fri, 4 Apr 2014 02:05:10 +0100"  >&lt;p&gt;Attaching derby-590-15-aa-requireHardUpgrade.diff. This patch adds the requirement that the database be at least at level 10.11 in order to load the Lucene plugin. This prevents users from ending up with stranded Lucene machinery which they can&apos;t unload conveniently after soft-downgrade.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java&lt;/p&gt;</comment>
                            <comment id="13959520" author="jira-bot" created="Fri, 4 Apr 2014 02:17:38 +0100"  >&lt;p&gt;Commit 1584493 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584493&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584493&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Require hard-upgrade to 10.11 in order to use the Lucene plugin; commit derby-590-15-aa-requireHardUpgrade.diff.&lt;/p&gt;</comment>
                            <comment id="13959885" author="knutanders" created="Fri, 4 Apr 2014 12:33:54 +0100"  >&lt;p&gt;I&apos;m seeing failures in the upgrade tests after the latest patch. Also seen in the continuous integration tests: &lt;a href=&quot;http://download.java.net/javadesktop/derby/request_5589419/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/request_5589419/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks like it happens when the old version does not have the SYSCS_REGISTER_TOOL procedure. Then it doesn&apos;t fail with the expected &quot;Unknown optional tool&quot; error. Instead, it fails with:&lt;/p&gt;

&lt;p&gt;ERROR 42Y03: &apos;SYSCS_UTIL.SYSCS_REGISTER_TOOL&apos; is not recognized as a function or procedure.&lt;/p&gt;

&lt;p&gt;Or if the old version is so old that it doesn&apos;t support the BOOLEAN data type:&lt;/p&gt;

&lt;p&gt;ERROR 42X01: Syntax error: true.&lt;/p&gt;</comment>
                            <comment id="13960009" author="rhillegas" created="Fri, 4 Apr 2014 15:38:10 +0100"  >&lt;p&gt;Thanks for that analysis, Knut. Attaching derby-590-16-aa-adjustUpgradeTest.diff. This patch attempts to make the new upgrade test case sensitive to the starting point of the upgrade trajectory.&lt;/p&gt;

&lt;p&gt;I ran the upgrade test with the following starting points:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;10.0.2.1
10.1.1.0
10.1.2.1
10.1.3.1
10.2.1.6
10.2.2.0
10.2.2.1
10.3.1.4
10.3.2.1
10.3.3.0
10.4.1.3
10.4.2.0
10.4.2.1
10.5.1.1
10.5.2.0
10.5.3.0
10.6.1.0
10.6.2.1
10.7.1.1
10.8.1.2
10.8.2.2
10.9.1.0
10.10.1.1
10.10.1.2
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I no longer see errors in the test case for the Lucene plugin. However, I see the following errors with this set of starting points:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;There were 2 errors:
1) 10.5.2.0 Upgrade Phase: SOFT UPGRADE java.sql.SQLException: Failed to start database &apos;singleUse/oneuse62&apos; with class loader sun.misc.Launcher$AppClassLoader@6e0be858, see the next exception for details.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2841)
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:405)
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:647)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:301)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:618)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:555)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:117)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR XJ040: Failed to start database &apos;singleUse/oneuse62&apos; with class loader sun.misc.Launcher$AppClassLoader@6e0be858, see the next exception for details.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 91 more
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED initSlotTable consistency check failed:  slot 0 minimumRecordSize = 12 totalSpace = 12 recordPortionLength = 12 reservedCount = 0
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable(StoredPage.java:2253)
	at org.apache.derby.impl.store.raw.data.StoredPage.initFromData(StoredPage.java:851)
	at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:213)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2540)
	at org.apache.derby.impl.store.raw.data.FileContainer.getPage(FileContainer.java:2590)
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:319)
	at org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(StoredPage.java:8328)
	at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(StoredPage.java:1577)
	at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(BasePage.java:441)
	at org.apache.derby.impl.store.raw.data.CachedPage.fetchFromSlot(CachedPage.java:53)
	at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:760)
	at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(HeapScan.java:245)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans(DataDictionaryImpl.java:4561)
	at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:548)
	at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:238)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:7825)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:817)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1819)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1685)
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1569)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)
	... 88 more
2) 10.5.2.0 Upgrade Phase: UPGRADE java.sql.SQLException: Failed to start database &apos;singleUse/oneuse62&apos; with class loader sun.misc.Launcher$AppClassLoader@6e0be858, see the next exception for details.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2841)
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:405)
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:647)
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:301)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:618)
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:555)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp(PhaseChanger.java:117)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
Caused by: ERROR XJ040: Failed to start database &apos;singleUse/oneuse62&apos; with class loader sun.misc.Launcher$AppClassLoader@6e0be858, see the next exception for details.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
	... 91 more
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED initSlotTable consistency check failed:  slot 0 minimumRecordSize = 12 totalSpace = 12 recordPortionLength = 12 reservedCount = 0
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)
	at org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable(StoredPage.java:2253)
	at org.apache.derby.impl.store.raw.data.StoredPage.initFromData(StoredPage.java:851)
	at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:213)
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)
	at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2540)
	at org.apache.derby.impl.store.raw.data.FileContainer.getPage(FileContainer.java:2590)
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:319)
	at org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(StoredPage.java:8328)
	at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(StoredPage.java:1577)
	at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(BasePage.java:441)
	at org.apache.derby.impl.store.raw.data.CachedPage.fetchFromSlot(CachedPage.java:53)
	at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:760)
	at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(HeapScan.java:245)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans(DataDictionaryImpl.java:4561)
	at org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(DD_Version.java:548)
	at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version.java:238)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(DataDictionaryImpl.java:7825)
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(DataDictionaryImpl.java:817)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:196)
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1819)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1685)
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1569)
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)
	... 88 more
There were 3 failures:
1) testTriggers(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_7)junit.framework.AssertionFailedError: Column value mismatch @ column &apos;1&apos;, row 1:
    Expected: &amp;gt;4&amp;lt;
    Found:    &amp;gt;2&amp;lt;
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)
	at org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)
	at org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:940)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_7.testTriggers(Changes10_7.java:633)
	at sun.reflect.GeneratedMethodAccessor1023.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
2) testDisposableStatisticsExplicit(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9)junit.framework.AssertionFailedError: Index statistics for DisposableIndexStatistics tables
1: {tableId=40508e0c-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS, indexName=SQL140404064747790, lcols=1, rows=2000, unique/card=19, created=2014-04-04 06:47:47.874}
2: {tableId=40508e0c-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS, indexName=DUPS_MAIN, lcols=1, rows=2000, unique/card=10, created=2014-04-04 06:47:47.871}
3: {tableId=40508e0c-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS, indexName=SQL140404064747730, lcols=1, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.87}
4: {tableId=40508e0c-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS, indexName=&amp;lt;n/a&amp;gt;, lcols=1, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.875}
5: {tableId=40508e0c-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS, indexName=SQL140404064747760, lcols=1, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.873}
6: {tableId=d2470e08-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS_FK, indexName=SQL140404064747710, lcols=1, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.728}
7: {tableId=64418e04-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS_PK_2COL, indexName=SQL140404064747680, lcols=1, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.712}
8: {tableId=64418e04-0145-2cfe-9539-ffffe1d7aa3e, tableName=ISTAT_DISPOSABLE_STATS_PK_2COL, indexName=SQL140404064747680, lcols=2, rows=2000, unique/card=2000, created=2014-04-04 06:47:47.712}
 expected:&amp;lt;7&amp;gt; but was:&amp;lt;8&amp;gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.helpers.DisposableIndexStatistics.assertStatsCount(DisposableIndexStatistics.java:245)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_9.testDisposableStatisticsExplicit(Changes10_9.java:1046)
	at sun.reflect.GeneratedMethodAccessor1032.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
3) testDropTriggerDependencies(org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_11)junit.framework.AssertionFailedError: Expected error(s) &apos; X0Y25&apos; but no error was thrown.
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementErrorMinion(BaseJDBCTestCase.java:1194)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1145)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(BaseJDBCTestCase.java:1228)
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_11.testDropTriggerDependencies(Changes10_11.java:182)
	at sun.reflect.GeneratedMethodAccessor1039.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BasSeTestSetup.java:57)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)
	at junit.extensions.TestSetup.run(TestSetup.java:25)

FAILURES!!!
Tests run: 6504,  Failures: 3,  Errors: 2
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These problems don&apos;t seem to be related to the fix I&apos;m making, but I could be wrong. The problems seem to be related to triggers and istat statistics. Are these known problems?&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java&lt;/p&gt;</comment>
                            <comment id="13960011" author="jira-bot" created="Fri, 4 Apr 2014 15:40:21 +0100"  >&lt;p&gt;Commit 1584721 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584721&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584721&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Attempt to fix upgrade tests which were broken by derby-590-15-aa-requireHardUpgrade.diff; commit derby-590-16-aa-adjustUpgradeTest.diff.&lt;/p&gt;</comment>
                            <comment id="13960105" author="knutanders" created="Fri, 4 Apr 2014 17:30:47 +0100"  >&lt;p&gt;The new failure seems to be caused by a data corruption that happens in an old and buggy version and is detected by an assert in the new version. We have some workarounds for this problem in the upgrade tests already. I don&apos;t have the code handy right now, but you could search for code comments referencing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4577&quot; title=&quot;An expanding update fails with an nospc.U error.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4577&quot;&gt;&lt;del&gt;DERBY-4577&lt;/del&gt;&lt;/a&gt; for ideas.&lt;/p&gt;</comment>
                            <comment id="13960222" author="rhillegas" created="Fri, 4 Apr 2014 19:17:51 +0100"  >&lt;p&gt;Attaching derby-590-17-aa-closeInputStreamOnPropertiesFile.diff. This patch addresses a file closure bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6536&quot; title=&quot;Errors in LuceneSupportTest on Windows platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6536&quot;&gt;&lt;del&gt;DERBY-6536&lt;/del&gt;&lt;/a&gt;) which was causing errors on Windows platforms.&lt;/p&gt;

&lt;p&gt;As part of dropping an index (or unloading the plugin), we need to delete files and directories. The original code for this deletion never checked the boolean return status of File.delete(). I have added code so that we check that status now and raise an error if the deletion fails.&lt;/p&gt;

&lt;p&gt;Once I made that change, the offending file popped into focus when I ran the test case on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6536&quot; title=&quot;Errors in LuceneSupportTest on Windows platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6536&quot;&gt;&lt;del&gt;DERBY-6536&lt;/del&gt;&lt;/a&gt;. The file is the derby-lucene.properties file which holds the persistent metadata for the Lucene index. The file was being read through a FileInputStream which was created transiently as an argument to Properties.load. The transient stream was never explicitly closed. Maybe it was being garbage collected (and closed) sooner on non-Windows systems and that&apos;s why we only saw this problem on Windows. The code now stores the stream in a variable so that it can be closed explicitly after the properties are loaded. This causes the test case on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6536&quot; title=&quot;Errors in LuceneSupportTest on Windows platforms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6536&quot;&gt;&lt;del&gt;DERBY-6536&lt;/del&gt;&lt;/a&gt; to run cleanly. The whole LuceneSuite now runs cleanly on that Windows platform.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;/p&gt;</comment>
                            <comment id="13960225" author="jira-bot" created="Fri, 4 Apr 2014 19:19:45 +0100"  >&lt;p&gt;Commit 1584859 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1584859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1584859&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Eliminate some file-closure race conditions by explicitly closing the stream from which index properties are read; commit derby-590-17-aa-closeInputStreamOnPropertiesFile.diff.&lt;/p&gt;</comment>
                            <comment id="13961444" author="rhillegas" created="Sun, 6 Apr 2014 16:21:56 +0100"  >&lt;p&gt;Attaching derby-590-18-aa-cleanupAPI.diff. This patch cleans up the plugin api by renaming a column and a parameter. The patch also forbids name conflicts between user-supplied and system-supplied column names.&lt;/p&gt;

&lt;p&gt;While preparing to write a functional spec for the plugin, I tripped across some parts of the api which need some tweaking so that users can understand the tool. This patch is the first set of tweaks.&lt;/p&gt;

&lt;p&gt;The existing plugin uses the term &quot;rank&quot; as a synonym for Lucene&apos;s concept of a &quot;score&quot;. I think it will be easier to explain the plugin if we stick to Lucene&apos;s terms. So this patch renames the following:&lt;/p&gt;

&lt;p&gt;o The &quot;rank&quot; column returned by LuceneQueryVTI has been renamed to &quot;score&quot;.&lt;/p&gt;

&lt;p&gt;o The &quot;rankCutoff&quot; argument to LuceneQueryVTI has been renamed to &quot;scoreCeiling&quot;.&lt;/p&gt;

&lt;p&gt;While I was in there, I changed the type of scoreCeiling from double to real so that it corresponds with the type of score. I also added some logic to prevent users from creating a LuceneQueryVTI which returns a data set with two columns named &quot;documentID&quot; or two columns named &quot;score&quot;.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;/p&gt;

&lt;p&gt;Rename columns and forbid name conflicts.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;

&lt;p&gt;Adjust existing tests and add new test case for name conflicts.&lt;/p&gt;</comment>
                            <comment id="13961445" author="jira-bot" created="Sun, 6 Apr 2014 16:23:33 +0100"  >&lt;p&gt;Commit 1585313 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1585313&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1585313&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Rename rank to score and forbid duplicate column names for the Lucene plugin; commit derby-590-18-aa-cleanupAPI.diff.&lt;/p&gt;</comment>
                            <comment id="13961452" author="rhillegas" created="Sun, 6 Apr 2014 17:31:17 +0100"  >&lt;p&gt;Attaching derby-590-19-aa-cleanupAPI2.diff. This patch adds another parameter to the query table function used by the plugin.&lt;/p&gt;

&lt;p&gt;Lucene has a concept of a window&apos;s worth of results. The Lucene classes allow you to process a series of windows of results by configuring two parameters:&lt;/p&gt;

&lt;p&gt;1) The window size.&lt;/p&gt;

&lt;p&gt;2) The score of the last document in the previous window.&lt;/p&gt;

&lt;p&gt;Right now the plugin allows you to set 2). I think the plugin would be more useful if you could set 1) as well. This would also make it easier to explain how the plugin API maps onto Lucene concepts.&lt;/p&gt;

&lt;p&gt;Technically, neither of these parameters are needed. That is because the user can specify OFFSET and FETCH NEXT clauses to produce the same effect. However, I think that supporting both of these parameters will make some families of queries perform better.&lt;/p&gt;

&lt;p&gt;This patch adds a windowSize parameter to the query table function.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;/p&gt;</comment>
                            <comment id="13961453" author="jira-bot" created="Sun, 6 Apr 2014 17:32:08 +0100"  >&lt;p&gt;Commit 1585315 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1585315&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1585315&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add a windowSize parameter to the lucene query function; commit derby-590-19-aa-cleanupAPI2.diff.&lt;/p&gt;</comment>
                            <comment id="13961867" author="rhillegas" created="Mon, 7 Apr 2014 15:13:16 +0100"  >&lt;p&gt;Attaching derby-590-20-aa-customQueryParser.diff. This patch adds another parameter to the table function which performs the Lucene search. The new argument is the name of a static, public method which creates a query parser.&lt;/p&gt;

&lt;p&gt;Lucene lets you extend its query language or even replace its query language with your own, custom language.&lt;/p&gt;

&lt;p&gt;The table function relies on two classes for which Lucene supplies multiple implementations:&lt;/p&gt;

&lt;p&gt;1) Analyzer - This is the locale-specific logic which turns a block of text into a series of indexable terms.&lt;/p&gt;

&lt;p&gt;2) QueryParser - This is the application-specific logic for interpreting the query string.&lt;/p&gt;

&lt;p&gt;As of derby-590-09-aa-localeSensitiveAnalysis.diff, the user can supply their own locale-specific Analyzer. As of this patch, the user can also supply their own custom QueryParser for interpreting query strings.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/api/LuceneUtils.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;/p&gt;</comment>
                            <comment id="13961868" author="jira-bot" created="Mon, 7 Apr 2014 15:14:23 +0100"  >&lt;p&gt;Commit 1585488 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1585488&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1585488&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add the ability to configure the query parser used for lucene queries; commit derby-590-20-aa-customQueryParser.diff.&lt;/p&gt;</comment>
                            <comment id="13962799" author="knutanders" created="Tue, 8 Apr 2014 12:59:41 +0100"  >&lt;p&gt;The LuceneSupport.getLastModified() method is public, which is unfortunate since it allows unprivileged code to run a privileged operation on arbitrary files using derbyoptionaltools.jar&apos;s privileges. See Dan&apos;s veto in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;I don&apos;t see any callers of that method, though, so the easiest solution is probably to remove it.&lt;/p&gt;

&lt;p&gt;There are also similar methods with package visibility (deleteFile(), isDirectory(), listFiles(), fileExists(), getIndexReader(), getAnalyzer()). That might be okay, if derbyoptionaltools.jar&apos;s manifest seals the org.apache.derby.optional.lucene package, but I think it would be better if the visibility of those methods were reduced further.&lt;/p&gt;</comment>
                            <comment id="13962810" author="knutanders" created="Tue, 8 Apr 2014 13:22:33 +0100"  >&lt;p&gt;We might want to change LuceneSupport.sqlException(StandardException) to call PublicAPI.wrapStandardException() instead of invoking the SQLException constructor directly. The advantages are that the PublicAPI wrapper method will use the correct subclass of SQLException, if appropriate, and it will also wrap the exception in a way that&apos;s recognized by error handlers higher up, which reduces the amount of additional wrapping.&lt;/p&gt;

&lt;p&gt;For example, an exception currently reported like this&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; call LuceneSupport.createIndex(&apos;T&apos;, &apos;titles&apos;, &apos;title&apos;, null);
ERROR 38000: The exception &apos;java.sql.SQLException: The schema, table or column does not exist or the column is not a string type.&apos; was thrown while evaluating an expression.
ERROR 42XBA: The schema, table or column does not exist or the column is not a string type.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will instead be reported like this&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; call LuceneSupport.createIndex(&apos;T&apos;, &apos;titles&apos;, &apos;title&apos;, null);
ERROR 42XBA: The schema, table or column does not exist or the column is not a string type.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13963131" author="rhillegas" created="Tue, 8 Apr 2014 17:19:13 +0100"  >&lt;p&gt;Thanks, Knut. That&apos;s a great idea.&lt;/p&gt;</comment>
                            <comment id="13963134" author="rhillegas" created="Tue, 8 Apr 2014 17:19:56 +0100"  >&lt;p&gt;Attaching derby-590-21-aa-noTimeTravel.diff. This patch adds a check which prevents you from using an earlier version of Lucene to read an index created by a later version of Lucene.&lt;/p&gt;

&lt;p&gt;It&apos;s my impression that Lucene makes weaker backward compatibility guarantees than Derby does. And there are few products which support this kind of time travel. I think it is safest to disallow this up front. If we find cases in which this limitation can be relaxed, then we can consider loosening this restriction later on.&lt;/p&gt;

&lt;p&gt;This patch also adds a new testing switch. By default, Lucene plugin test results hardwire the expected version number as 4.5.0. However, by setting the following flag, you can tell the tests that you are using a different Lucene version...&lt;/p&gt;

&lt;p&gt;  -Dderby.tests.lucene.version=$luceneVersionName&lt;/p&gt;

&lt;p&gt;...where $luceneVersionName is a string like &quot;4.5.0&quot; or &quot;4.7.1&quot;.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;/p&gt;

&lt;p&gt;New error message and new check to verify that time travel isn&apos;t allowed.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;

&lt;p&gt;Adds support for new derby.tests.lucene.version knob.&lt;/p&gt;</comment>
                            <comment id="13963136" author="jira-bot" created="Tue, 8 Apr 2014 17:21:42 +0100"  >&lt;p&gt;Commit 1585774 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1585774&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1585774&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Prevent Derby from using an earlier version of Lucene to read an index created by a later version of Lucene; commit derby-590-21-aa-noTimeTravel.diff.&lt;/p&gt;</comment>
                            <comment id="13964606" author="rhillegas" created="Wed, 9 Apr 2014 20:56:33 +0100"  >&lt;p&gt;Attaching derby-590-22-aa-cleanupPrivacy.diff. This patch addresses Knut&apos;s suggestions:&lt;/p&gt;

&lt;p&gt;1) Makes all of the privileged methods private. Mostly, this didn&apos;t cause any disruption. For a couple methods, I created package-visible methods to do the heavy lifting outside a doPrivileged block and then I called those unprotected methods from private doPrivileged blocks.&lt;/p&gt;

&lt;p&gt;2) Seals derbyoptionaltools.jar.&lt;/p&gt;

&lt;p&gt;3) Uses PublicAPI.wrapStandardException() to construct SQLExceptions from StandardExceptions.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java&lt;br/&gt;
M       build.xml&lt;/p&gt;</comment>
                            <comment id="13964609" author="jira-bot" created="Wed, 9 Apr 2014 20:59:27 +0100"  >&lt;p&gt;Commit 1586114 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1586114&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1586114&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Hide doPrivileged() blocks inside private methods, seal derbyoptionaltools.jar, and create more relevant SQLExceptions; commit derby-590-22-aa-cleanupPrivacy.diff.&lt;/p&gt;</comment>
                            <comment id="13966992" author="rhillegas" created="Fri, 11 Apr 2014 20:13:51 +0100"  >&lt;p&gt;Attaching derby-590-23-aa-correctTestLocale.diff. This patch attempts to fix the platform-specific failures in the Lucene tests described on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6539&quot; title=&quot;Wrong rank value in LuceneSupportTest and LuceneSupportPermsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6539&quot;&gt;&lt;del&gt;DERBY-6539&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem arose because the tests were using a Swedish rather than an English locale. The patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Forces LuceneSupportTest to use an English locale.&lt;/p&gt;

&lt;p&gt;2) Adjusts the order in which the decorators compose for LuceneSupportPermsTest. Even though the test thought that an English locale was being forced, the decorator machinery silently failed to install the English locale and the test reverted to the machine&apos;s default locale (Swedish in this case).&lt;/p&gt;

&lt;p&gt;Adjusting the order in which decorators compose may produce other errors in the tests. But this patch runs cleanly both on the problem machine and on my own machine.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;/p&gt;</comment>
                            <comment id="13966993" author="jira-bot" created="Fri, 11 Apr 2014 20:15:18 +0100"  >&lt;p&gt;Commit 1586755 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1586755&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1586755&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Fix locale-related errors which surfaced on some platforms during the Lucene tests; commit derby-590-23-aa-correctTestLocale.diff.&lt;/p&gt;</comment>
                            <comment id="13967572" author="rhillegas" created="Sat, 12 Apr 2014 17:39:36 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for this feature. I welcome the community&apos;s suggestions for how to improve this feature and its api. You will notice that the Lucene plugin is language-sensitive, providing support for several languages understood by active Derby contributors, such as Dutch, French, German, Hindi, Norwegian, Spanish, and Swedish. Your impressions about the quality of that support would be appreciated too.&lt;/p&gt;</comment>
                            <comment id="13976202" author="rhillegas" created="Tue, 22 Apr 2014 00:44:48 +0100"  >&lt;p&gt;Attaching derby-590-24-ad-luceneDirectory.diff. This patch adds support for creating Lucene indexes in in-memory databases.&lt;/p&gt;

&lt;p&gt;1) This patch supplies an implementation of a Lucene Directory backed by a Derby StorageFactory.&lt;/p&gt;

&lt;p&gt;2) This patch supplies implementations of Lucene IndexInput and IndexOutput which are backed by the random-access file abstractions obtained from Derby StorageFiles.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/DirRandomAccessFile.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java&lt;br/&gt;
M       java/engine/org/apache/derby/io/StorageRandomAccessFile.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptRandomAccessFile.java&lt;/p&gt;

&lt;p&gt;Adds a clone() method to StorageRandomAccessFile and its implementations in order to support the cloning of DerbyIndexInputs.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;A       java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java&lt;/p&gt;

&lt;p&gt;Derby implementation of a Lucene Directory.&lt;/p&gt;


&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;A       java/optional/org/apache/derby/optional/lucene/DerbyIndexInput.java&lt;/p&gt;

&lt;p&gt;Derby implementation of a Lucene IndexInput.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;A       java/optional/org/apache/derby/optional/lucene/DerbyIndexOutput.java&lt;/p&gt;

&lt;p&gt;Derby implementation of a Lucene IndexOutput.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java&lt;/p&gt;

&lt;p&gt;These classes are updated to use the new StorageFactory-based abstractions.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneInMemoryTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSuite.java&lt;/p&gt;

&lt;p&gt;Adds a new test for in-memory Lucene indexes.&lt;/p&gt;</comment>
                            <comment id="13976745" author="jira-bot" created="Tue, 22 Apr 2014 14:25:38 +0100"  >&lt;p&gt;Commit 1589124 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1589124&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1589124&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add support for creating Lucene indexes in in-memory databases; commit derby-590-24-ad-luceneDirectory.diff.&lt;/p&gt;</comment>
                            <comment id="13982696" author="rhillegas" created="Mon, 28 Apr 2014 02:20:26 +0100"  >&lt;p&gt;Attaching derby-590-26-ac-backupRestore.diff. This patch adds backup/restore support for Lucene indexes. I will run regression tests. I will also hold off committing this patch for a couple days to give people an opportunity to suggest alternative approaches.&lt;/p&gt;

&lt;p&gt;Code is added to BasicDatabase to perform the backup. The backup() methods in BasicDatabase check to see if the database&apos;s top level directory contains a LUCENE subdirectory. If so, the LUCENE directory is recursively copied to the backup directory.&lt;/p&gt;

&lt;p&gt;Similarly, code is added to BaseDataFileFactory to perform the restoration. The loop which checks for seg* subdirectories now checks to see if the backup contains a LUCENE subdirectory. If so, it is recursively copied to the restored location.&lt;/p&gt;

&lt;p&gt;I am happy to move this code elsewhere if people think there is an architecturally better spot.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/util/StringUtil.java&lt;/p&gt;

&lt;p&gt;Encapsulated a scrap of code which takes the canonical name of the database and extracts the database directory name from it. This method is now used both by the RawStore backup code to figure out where to copy the seg* files and this method is used by BasicDatabase to figure out where to copy the LUCENE directory.&lt;/p&gt;

&lt;p&gt;I&apos;m open to suggestions for a better place to put this code. Nothing better jumped out at me.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;/p&gt;

&lt;p&gt;The new code to backup the LUCENE directory.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/io/vfmem/DataStore.java&lt;/p&gt;

&lt;p&gt;This fixes a bug in the in-memory storage factory. When asked to list its child directories, an in-memory directory used to list its grandchildren and all other descendants. This has been fixed so that only the child directories are returned.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/RawStore.java&lt;/p&gt;

&lt;p&gt;Amended to use the shared method which extracts the database directory name from the canonical name.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;Adds logic to restore the LUCENE directory.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/database/Database.java&lt;/p&gt;

&lt;p&gt;The constant identifying the name of the LUCENE directory is moved to this interface so that it can be used by BasicDatabase.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java&lt;/p&gt;

&lt;p&gt;I reworked how the Lucene index path is recursively created.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneBackupTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/luceneSupport.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSuite.java&lt;/p&gt;

&lt;p&gt;Added a test for backup/restore of Lucene indexes.&lt;/p&gt;</comment>
                            <comment id="13985057" author="rhillegas" created="Wed, 30 Apr 2014 02:44:54 +0100"  >&lt;p&gt;Attaching derby-590-26-ad-backupRestoreEncryption.diff. This patch enforces the incompatiblity of encryption with the Lucene plugin.&lt;/p&gt;

&lt;p&gt;I can&apos;t think of a good way to support Derby encryption side-by-side with the performance-driven need for random access to the Lucene indexes. So I have put in logic to enforce the following:&lt;/p&gt;

&lt;p&gt;1) If the plugin has been loaded, then you can&apos;t encrypt the database.&lt;/p&gt;

&lt;p&gt;2) If the database is encrypted, then you can&apos;t load the plugin.&lt;/p&gt;

&lt;p&gt;The user documentation will need to state that you should use an encrypted file system if you need Lucene indexes plus the protection of an encrypted database.&lt;/p&gt;

&lt;p&gt;Touches the following additional files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds a new error message which is raised when you try to encrypt a database loaded with the plugin or when you try to load the plugin into an encrypted database.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="13987529" author="knutanders" created="Fri, 2 May 2014 10:20:27 +0100"  >&lt;p&gt;The attached patch, netbeans.diff, makes the NetBeans project recognize the new source directory (java/optional), and makes it look into the tools/java/lucene*.jar files to help with code completion for the Lucene API calls.&lt;/p&gt;

&lt;p&gt;The patch modifies tools/ide/netbeans/nbproject/project.xml.&lt;/p&gt;</comment>
                            <comment id="13987530" author="jira-bot" created="Fri, 2 May 2014 10:21:08 +0100"  >&lt;p&gt;Commit 1591839 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1591839&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1591839&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Make the NetBeans project recognize the Lucene classes&lt;/p&gt;</comment>
                            <comment id="13987715" author="jira-bot" created="Fri, 2 May 2014 14:55:52 +0100"  >&lt;p&gt;Commit 1591910 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1591910&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1591910&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add backup/restore support for Lucene indexes and prevent the Lucene plugin from being used in an encrypted database; commit derby-590-26-ad-backupRestoreEncryption.diff.&lt;/p&gt;</comment>
                            <comment id="13988700" author="rhillegas" created="Sat, 3 May 2014 15:33:32 +0100"  >&lt;p&gt;Attaching derby-590-27-aa-publicAPILuceneUtils.diff. This patch adds org.apache.derby.optional.api.LuceneUtils to the public api. This class contains utility methods for use in constructing Lucene Analyzers (for indexing data) and Lucene QueryParsers (for parsing queries). The methods are described in the functional spec.&lt;/p&gt;

&lt;p&gt;Support has been added for in-memory databases and for backup/restore. Logic has been put in to prevent customers from using the Lucene plugin on encrypted databases, where the plugin could leak sensitive data. At this point, I believe that we can expose the plugin as an experimental tool in release 10.11. So it is time to expose LuceneUtils in the public api.&lt;/p&gt;

&lt;p&gt;I need to add a section to the functional spec, setting users&apos; expectations about schema evolution, concurrency, and the freshness of Lucene results. After that, we should be ready to document this experimental tool.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       build.xml&lt;br/&gt;
M       tools/javadoc/publishedapi.ant&lt;/p&gt;</comment>
                            <comment id="13988702" author="jira-bot" created="Sat, 3 May 2014 15:34:53 +0100"  >&lt;p&gt;Commit 1592214 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1592214&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1592214&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add LuceneUtils to the public api; commit derby-590-27-aa-publicAPILuceneUtils.diff.&lt;/p&gt;</comment>
                            <comment id="13989485" author="rhillegas" created="Mon, 5 May 2014 14:02:41 +0100"  >&lt;p&gt;Attaching a second rev of the functional spec.&lt;/p&gt;</comment>
                            <comment id="13989524" author="rhillegas" created="Mon, 5 May 2014 14:46:10 +0100"  >&lt;p&gt;Attaching derby-590-28-renameLuceneJars.diff.  This patch removes the version ids from the names of the Lucene jar files. This should make it easier to upgrade the version of Lucene which is checked into the Derby codeline.&lt;/p&gt;

&lt;p&gt;After I commit this patch, developers will need to adjust the classpath which they use for the tests.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A  +    tools/java/lucene-analyzers-common.jar&lt;br/&gt;
D       tools/java/lucene-analyzers-common-4.5.0.jar&lt;br/&gt;
A  +    tools/java/lucene-queryparser.jar&lt;br/&gt;
D       tools/java/lucene-queryparser-4.5.0.jar&lt;br/&gt;
A  +    tools/java/lucene-core.jar&lt;br/&gt;
D       tools/java/lucene-core-4.5.0.jar&lt;br/&gt;
M       tools/ant/properties/extrapath.properties&lt;/p&gt;</comment>
                            <comment id="13989527" author="jira-bot" created="Mon, 5 May 2014 14:48:00 +0100"  >&lt;p&gt;Commit 1592527 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1592527&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1592527&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Remove the version ids from the names of the Lucene jar files in order to make it easier to upgrade the version of Lucene checked into the Derby source tree; commit derby-590-28-renameLuceneJars.diff.&lt;/p&gt;</comment>
                            <comment id="13989556" author="rhillegas" created="Mon, 5 May 2014 15:34:53 +0100"  >&lt;p&gt;Attaching derby-590-29-aa-useLucene_4.7.1.diff. This patch changes the version of Lucene which is checked into the Derby source tree. This patch changes the version from 4.5.0 to 4.7.1.&lt;/p&gt;

&lt;p&gt;I have run the LuceneSuite using both 4.5.0 and 4.7.1.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       tools/java/lucene-analyzers-common.jar&lt;br/&gt;
M       tools/java/lucene-queryparser.jar&lt;br/&gt;
M       tools/java/lucene-core.jar&lt;/p&gt;

&lt;p&gt;The new 4.7.1 jar files.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/DerbyLuceneDir.java&lt;/p&gt;

&lt;p&gt;4.7.1 added some new abstract methods to the Lucene Directory interface. Now DerbyLuceneDir implements them.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;

&lt;p&gt;Changed the expected version string from LUCENE_45 to LUCENE_47.&lt;/p&gt;</comment>
                            <comment id="13989558" author="jira-bot" created="Mon, 5 May 2014 15:38:52 +0100"  >&lt;p&gt;Commit 1592543 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1592543&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1592543&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Change the checked-in version of Lucene from 4.5.0 to 4.7.1; commit derby-590-29-aa-useLucene_4.7.1.diff.&lt;/p&gt;</comment>
                            <comment id="13994239" author="rhillegas" created="Sat, 10 May 2014 14:40:56 +0100"  >&lt;p&gt;Attaching derby-590-30-aa-nullableScoreCeiling.diff. This patch addresses a problem discovered by Kim: the scoreCeiling argument to the Lucene query table function can be an arbitrary number. The special value which means &quot;return all results&quot; should be NULL rather than 0.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;/p&gt;

&lt;p&gt;The change.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneBackupTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneInMemoryTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;/p&gt;

&lt;p&gt;Adjust the tests.&lt;/p&gt;</comment>
                            <comment id="13994240" author="jira-bot" created="Sat, 10 May 2014 14:42:44 +0100"  >&lt;p&gt;Commit 1593701 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1593701&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1593701&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Change the special NO_CEILING value from 0 to NULL for the scoreCeiling argument to the Lucene query table function; commit derby-590-30-aa-nullableScoreCeiling.diff.&lt;/p&gt;</comment>
                            <comment id="13994306" author="rhillegas" created="Sat, 10 May 2014 21:53:08 +0100"  >&lt;p&gt;Attaching a 3rd rev of the functional spec. This rev clarifies the meaning of the scoreCeiling argument to the Lucene query table function.&lt;/p&gt;</comment>
                            <comment id="14004505" author="knutanders" created="Wed, 21 May 2014 09:58:27 +0100"  >&lt;p&gt;&lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12645981/12645981_netbeans2.diff&quot; title=&quot;netbeans2.diff attached to DERBY-590&quot;&gt;netbeans2.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; updates the NetBeans project with the new names of the Lucene jar files.&lt;/p&gt;</comment>
                            <comment id="14004506" author="jira-bot" created="Wed, 21 May 2014 09:58:49 +0100"  >&lt;p&gt;Commit 1596513 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1596513&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1596513&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Update the NetBeans project to use the new names of the Lucene jars&lt;/p&gt;</comment>
                            <comment id="14004588" author="knutanders" created="Wed, 21 May 2014 12:32:27 +0100"  >&lt;p&gt;It looks like most of the methods that call AccessController.doPrivileged() are declared to throw more exceptions than they actually can throw. They are declared to throw all checked exceptions that the privileged action body can throw, in addition to PrivilegedActionException. Since doPrivileged() wraps all checked exceptions thrown by the action body in a PrivilegedActionException, only the PrivilegedActionException can be seen by the callers, unless it is unwrapped first.&lt;/p&gt;

&lt;p&gt;The attached patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12645994/12645994_exceptions.diff&quot; title=&quot;exceptions.diff attached to DERBY-590&quot;&gt;exceptions.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; cleans up the exception handling in the following ways:&lt;/p&gt;

&lt;p&gt;1) In the cases where the action body doesn&apos;t throw any checked exception, use PrivilegedAction instead of PrivilegedExceptionAction, and remove the impossible exceptions from the throws declaration.&lt;/p&gt;

&lt;p&gt;2) If the action body only throws a single checked exception, unwrap the PrivilegedActionException and re-throw the original exception. Remove PrivilegedActionException from the signature.&lt;/p&gt;

&lt;p&gt;3) If the action body can throw many checked exception types, leave it as it is, but remove all exceptions except PrivilegedActionException from the throws clause in the enclosing method, since that&apos;s the only exception that could come out of it.&lt;/p&gt;

&lt;p&gt;4) Remove catch blocks that check for these impossible exceptions higher up in the call hierarchy.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="14004599" author="rhillegas" created="Wed, 21 May 2014 12:57:58 +0100"  >&lt;p&gt;Thanks for that cleanup, Knut!&lt;/p&gt;</comment>
                            <comment id="14004612" author="jira-bot" created="Wed, 21 May 2014 13:21:45 +0100"  >&lt;p&gt;Commit 1596552 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1596552&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1596552&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Remove handling of impossible exceptions&lt;/p&gt;</comment>
                            <comment id="14017625" author="knutanders" created="Wed, 4 Jun 2014 12:19:18 +0100"  >&lt;p&gt;Is there a way to create multiple Lucene indexes on one column? I didn&apos;t find a way to do that currently. It would be useful in the case where you want to use multiple analyzers on the same body of text. For example, if you store Java source files in a CLOB, you might want one index for the entire source file, one for the names of the methods declared in the file, one for searching the comments only, and so on.&lt;/p&gt;</comment>
                            <comment id="14017626" author="knutanders" created="Wed, 4 Jun 2014 12:23:31 +0100"  >&lt;p&gt;Would it be difficult to make the luceneSupport tool capable of using custom analyzers in jar files installed with SQLJ.INSTALL_JAR? I get a ClassNotFoundException if I try that now.&lt;/p&gt;</comment>
                            <comment id="14017628" author="knutanders" created="Wed, 4 Jun 2014 12:28:22 +0100"  >&lt;p&gt;With the current architecture, is it possible to make DROP TABLE also drop dependent Lucene indexes? Or would the luceneSupport tool have to be moved into the engine in order to have access to the dependency manager?&lt;/p&gt;</comment>
                            <comment id="14017665" author="rhillegas" created="Wed, 4 Jun 2014 13:43:53 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Thanks for kicking the tires! Here are some responses to your questions:&lt;/p&gt;

&lt;p&gt;KAH&amp;gt; Is there a way to create multiple Lucene indexes on one column?&lt;/p&gt;

&lt;p&gt;You should be able to do this by defining a view on the base table and then creating a Lucene index on the view.&lt;/p&gt;

&lt;p&gt;KAH&amp;gt; Would it be difficult to make the luceneSupport tool capable of using custom analyzers in jar files installed with SQLJ.INSTALL_JAR? I get a ClassNotFoundException if I try that now.&lt;/p&gt;

&lt;p&gt;That should be easy to fix. Sounds like the code needs to use the database class loader when resolving analyzers and query parsers. I have logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6600&quot; title=&quot;Make the Lucene plugin use the database class path to resolve ANALYZERMAKERs and QUERYPARSERMAKERs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6600&quot;&gt;&lt;del&gt;DERBY-6600&lt;/del&gt;&lt;/a&gt; to track this. Thanks for pointing this out.&lt;/p&gt;

&lt;p&gt;KAH&amp;gt; With the current architecture, is it possible to make DROP TABLE also drop dependent Lucene indexes? Or would the luceneSupport tool have to be moved into the engine in order to have access to the dependency manager?&lt;/p&gt;

&lt;p&gt;This is a defect of a loosely coupled approach. Altering a Lucene-indexed table won&apos;t affect the Lucene indexes. The tool can probably get its hands on the dependency manager, though. Would need some investigation.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="14017701" author="knutanders" created="Wed, 4 Jun 2014 14:42:55 +0100"  >&lt;p&gt;Thanks, Rick.&lt;/p&gt;

&lt;p&gt;I don&apos;t think the lack of cascade on DROP TABLE is a big deal. It would be nice to have, but the users will understand what to do in any case.&lt;/p&gt;

&lt;p&gt;Using a VIEW for allowing multiple analyzers on a single column sounds like a useful workaround in many cases. That probably means you&apos;ll have to do the combining and scoring of the results in SQL instead of in Lucene, though. That is, in the Java source code example mentioned above, you cannot give a query string such as &quot;comment:TODO method:compute&quot; to find source files that have a method called &quot;compute&quot; and a comment that says &quot;TODO&quot;. Instead, you&apos;ll need two separate queries, and some logic for combining the results. I&apos;m assuming Lucene knows better how to do that.&lt;/p&gt;</comment>
                            <comment id="14017786" author="rhillegas" created="Wed, 4 Jun 2014 16:47:24 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;I don&apos;t think I understand the problem case you&apos;re working on, but it sounds interesting. Could the problem be tackled by using one index and by writing a custom Analyzer which produces index terms like &quot;comment:TODO&quot; and &quot;method:compute&quot;? Thanks.&lt;/p&gt;</comment>
                            <comment id="14018659" author="knutanders" created="Thu, 5 Jun 2014 11:35:34 +0100"  >&lt;p&gt;I suppose you could simulate the functionality that way. You&apos;d probably need a custom query parser as well, in that case, in order to make the query language understand that &quot;method:compute&quot; is a single token. In the default Lucene query parser, that would be interpreted as a search for the token &quot;compute&quot; in the field &quot;method&quot;.&lt;/p&gt;

&lt;p&gt;By the way, when I said &quot;multiple indexes&quot; and &quot;multiple analyzers&quot; above, I think I meant what in Lucene speak should have been &quot;multiple fields&quot;. I think it&apos;s still called a single index in Lucene speak, even if you index separately on multiple fields/keys.&lt;/p&gt;

&lt;p&gt;Currently, when the luceneSupport tool creates an index, it makes every string value a Document with a single field called &quot;luceneTextField&quot;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;LuceneSupport.java#createOrRecreateIndex&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
                &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;  textcolValue = rs.getString( keyCount + 1 );
                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ( textcolValue != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; )
                {
                    doc.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TextField( LuceneQueryVTI.TEXT_FIELD_NAME, textcolValue, Store.NO));
                }
                addDocument( iw, doc );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flexibility I was looking for, was the ability to have more fields than the single, hard-coded one. For example, by having an extra argument to CREATEINDEX (and UPDATEINDEX) which is a comma-separated list of field names (with a reasonable default when NULL), and make the above code add each of the fields.&lt;/p&gt;

&lt;p&gt;In my hypothetical Java code in a CLOB example, that would mean something like this for creating the index:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-sql&quot;&gt;
CALL LUCENESUPPORT.CREATEINDEX(&apos;app&apos;, &apos;sourcefiles&apos;, &apos;sourcetext&apos;, &apos;MyAnalyzer.create&apos;, &apos;comment,method&apos;, &apos;pk&apos;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The custom analyzer would be something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class MyAnalyzer &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Analyzer {

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Analyzer create() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MyAnalyzer();
    }

    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; TokenStreamComponents createComponents(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; field, Reader r) {
        &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (field) {
            &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;comment&quot;&lt;/span&gt;:
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TokenStreamComponents(createCommentTokenizer(r));
            &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;method&quot;&lt;/span&gt;:
                &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TokenStreamComponents(createMethodTokenizer(r));
            &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;:
                &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AssertionError(&lt;span class=&quot;code-quote&quot;&gt;&quot;unknown field name: &quot;&lt;/span&gt; + field);
        }
    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Tokenizer createCommentTokenizer(Reader r) {
        &lt;span class=&quot;code-comment&quot;&gt;// TODO: Create a tokenizer that extracts tokens only from
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// code comments.
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// ....
&lt;/span&gt;    }

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Tokenizer createMethodTokenizer(Reader r) {
        &lt;span class=&quot;code-comment&quot;&gt;// TODO: Create a tokenizer that only returns method names.
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// ....
&lt;/span&gt;    }

}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Might not add any functionality that you couldn&apos;t work around somehow with the current implementation. But I think that the extra flexibility would allow the application to push more of the full-text search logic down to Lucene, where it belongs. At least you&apos;d avoid the need for a custom query parser and creation of synthetic tokens.&lt;/p&gt;</comment>
                            <comment id="14018753" author="rhillegas" created="Thu, 5 Jun 2014 13:51:35 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;I think I understand what you want now. You could try prototyping this to see if it works. Try this:&lt;/p&gt;

&lt;p&gt;Where HARD_CODED_FIELD_NAMES is the array of field names you want, e.g., &lt;/p&gt;
{ &quot;comment&quot;, &quot;method&quot; }
&lt;p&gt;):&lt;/p&gt;


&lt;p&gt;1) In the loop at the end of LuceneSupport.createOrRecreateIndex(), replace...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        if ( textcolValue != null )
        {
            doc.add(new TextField( LuceneQueryVTI.TEXT_FIELD_NAME, textcolValue, Store.NO));
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...with...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;        if ( textcolValue != null )
        {
            for ( String fieldName : HARD_CODED_FIELD_NAMES )
            {
                doc.add(new TextField( fieldName, textcolValue, Store.NO));
            }
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) In LuceneQueryVTI, replace the getQueryParser() method with...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;	private static QueryParser getQueryParser
        (
         final String queryParserMaker,
         final Version version,
         final String fieldName,
         final Analyzer analyzer
         )
    {
        return new MultiFieldQueryParser( version, HARD_CODED_FIELD_NAMES, analyzer );
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14019768" author="knutanders" created="Fri, 6 Jun 2014 12:24:54 +0100"  >&lt;p&gt;Thanks, Rick. Those were the exact changes that were needed.&lt;/p&gt;

&lt;p&gt;The attached patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12648627/12648627_multifield.diff&quot; title=&quot;multifield.diff attached to DERBY-590&quot;&gt;multifield.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; shows an example of how it could be used.&lt;/p&gt;

&lt;p&gt;I made two small adjustments:&lt;/p&gt;

&lt;p&gt;1) Instead of hard-coding the field names, I made LuceneSupport read them dynamically from a database property (derby.tests.lucene.fields), so that I could verify that the original Lucene tests still pass. (They do still pass, by the way.) Also the field names are stored in the Lucene index property file, so that LuceneQueryVTI can find them too. This is of course just a temporary hack until we figure out the correct API.&lt;/p&gt;

&lt;p&gt;2) I made LuceneUtils.defaultQueryParser() always return a MultiFieldQueryParser, since MultiFieldQueryParser seems to behave just like QueryParser in the degenerate case with a single field.&lt;/p&gt;

&lt;p&gt;Since I didn&apos;t feel like writing a Java source file parser, I changed my example use case to search in XML files, so that I could use the XML parser that is in the JRE. I added a test case to LuceneSupportTest to verify that it could be used for that.&lt;/p&gt;

&lt;p&gt;The test case creates an index with two fields: tags and text. The tags field contains only the XML tags, whereas the text field contains only the text elements of the XML file. This way, you can use the index to search for data and metadata separately in the XML documents stored in your table.&lt;/p&gt;

&lt;p&gt;Now, while writing the test case, I found that you will most likely want to use a custom query parser when you use it this way. The reason is that the default query parser uses the same analyzer as the index writer used to extract tokens from the search terms. That means, if you like in this case use a custom analyzer that parser XML documents, the query parser will also expect the terms in the query to be XML documents. So you&apos;ll end up with rather silly-looking queries.&lt;/p&gt;

&lt;p&gt;For example, to search for documents that contain the text &quot;abc&quot;, you cannot make the query &lt;tt&gt;text:&quot;abc&quot;&lt;/tt&gt;, but have to wrap it in dummy XML tags to make it parsable &lt;tt&gt;text:&quot;&amp;lt;dummy&amp;gt;abc&amp;lt;/dummy&amp;gt;&quot;&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The custom query parser doesn&apos;t need to be very complex, though. The test case in the patch shows one example in the method &lt;tt&gt;createXMLQueryParser()&lt;/tt&gt;. That method simply creates a MultiFieldQueryParser with a plain StandardAnalyzer. With that parser, you can write queries like:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;text:abc&lt;/tt&gt; to search for &quot;abc&quot; in the text elements of the XML&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;tags:abc&lt;/tt&gt; to search for XML tags called &quot;abc&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;abc&lt;/tt&gt; to search for &quot;abc&quot; in both text elements and tags&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What do you think? Does it sound like a useful addition?&lt;/p&gt;</comment>
                            <comment id="14020318" author="rhillegas" created="Fri, 6 Jun 2014 21:23:13 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;I think this is a promising approach. I am a little worried about a couple things:&lt;/p&gt;

&lt;p&gt;1) The awkwardness of using one Analyzer to tokenize the document and another Analyzer to tokenize the query. It&apos;s tempting to blame Lucene for mis-factoring this. Maybe this is unavoidable since Lucene lets you write your own custom query language. But disturbingly, this may indicate that I don&apos;t know what I&apos;m talking about and have mis-factored Derby.&lt;/p&gt;

&lt;p&gt;2) The increasing wordiness of the Derby api. Maybe we need to make the user declare fields, Analyzer, and QueryParser all at create/update index time. E.g., introduce an interface like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;public interface IndexDescriptor
{
    public String[] getFields();
    public Analyzer getAnalyzer();
    public QueryParser getQueryParser();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There would be a default IndexDescriptor for the main use case.&lt;/p&gt;

&lt;p&gt;Then we could change the signature of createIndex() to&#8230;&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;LUCENESUPPORT.CREATEINDEX
(
    SCHEMANAME VARCHAR( 128 ),
    TABLENAME VARCHAR( 128 ),
    TEXTCOLUMN VARCHAR( 128 ),
    INDEXDESCRIPTORMAKER VARCHAR( 32672 ),
    KEYCOLUMNS VARCHAR( 32672 ) ...
)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...and simplify the signature of the query table function to...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;$SCHEMANAME.$TABLENAME__TEXTCOL
(
    QUERY VARCHAR( 32672 ),
    WINDOWSIZE INT,
    SCORECEILING REAL
)
RETURNS TABLE
(
    $keyColumn1 $keyColumn1datatype,
    ...
    $keyColumnN $keyColumnNdatatype,
    DOCUMENTID INT,
    SCORE REAL
)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If nothing else, this helps future-proof us against other changes to the api which real users will suggest as they experiment with the plugin. It also means that the user has to declare only one static method to materialize the index context.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="14026367" author="knutanders" created="Tue, 10 Jun 2014 12:57:44 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I basically agree with you.&lt;/p&gt;

&lt;p&gt;1) It&apos;s a bit awkward, yes. One way to avoid it, might be to allow users to specify a custom TokenStream class for each field. I tried that approach in the patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12649566/12649566_multifield-with-custom-tokenizers.diff&quot; title=&quot;multifield-with-custom-tokenizers.diff attached to DERBY-590&quot;&gt;multifield-with-custom-tokenizers.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;. With that patch, you specify the fields and the tokenizers in derby.tests.lucene.fields property like this: field1:nameOfTokenizerClass1,field2:nameOfTokenizerClass2,... If a tokenizer has been specified for the field, LuceneSupport.createOrRecreateIndex() uses the TextField constructor that takes a TokenStream instead of the constructor that takes a String. With that approach, neither a custom analyzer nor a custom query parser is needed in this particular use case.&lt;/p&gt;

&lt;p&gt;2) Even without adding support for multiple fields, I think it sounds like an improvement to allow specifying both analyzer and query parser at index-creation time. Sounds more convenient than repeating the information about the query parser on each call to the query table function. I don&apos;t have enough experience with Lucene to say if the query parser parameter should be removed from the table function completely, or if we should keep the ability to override the query parser for individual queries. My guess is that it&apos;s OK to remove the parameter and only allow one query parser per index.&lt;/p&gt;</comment>
                            <comment id="14046183" author="rhillegas" created="Fri, 27 Jun 2014 18:41:44 +0100"  >&lt;p&gt;Attaching derby-590-xx-publicAPILuceneUtils.diff. This patch changes the api of the Lucene plugin as Knut and I discussed. The Lucene tests run cleanly with this patch.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Adds a new interface to the public api: org.apache.derby.optional.api.LuceneIndexDescriptor. This interface allows the application developer to describe the following:&lt;/p&gt;

&lt;p&gt;a) The names of fields which can be specified in Lucene queries.&lt;/p&gt;

&lt;p&gt;b) The Analyzer which should be used to build the index.&lt;/p&gt;

&lt;p&gt;c) The QueryParser which should be used to parse Lucene queries against the index.&lt;/p&gt;

&lt;p&gt;2) Changes the signatures of createIndex() and updateIndex(). The routines now take an indexDescriptorMaker rather than an analyzerMaker.&lt;/p&gt;

&lt;p&gt;3) Changes the signature of the index-specific table function which is used to run queries against the index. The queryParserMaker argument has been removed. Internally, the query uses the QueryParser returned by the LuceneIndexDescriptor which was bound to the index at createIndex() time.&lt;/p&gt;

&lt;p&gt;4) Changes the signature of the table returned by listIndexes(). The table no longer has an analyzerMaker column. Instead, it has an indexDescriptorMaker column.&lt;/p&gt;

&lt;p&gt;I expect that I will file a follow-on patch to address some more issues which I want to explore. I think that we need to prevent a LuceneIndexDescriptor from specifying field names which conflict with the names of the key and text columns.&lt;/p&gt;

&lt;p&gt;After that, I plan to update the functional spec and file a doc issue to address these changes.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;A       java/optional/org/apache/derby/optional/api/LuceneIndexDescriptor.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/api/LuceneUtils.java&lt;br/&gt;
M       tools/javadoc/publishedapi.ant&lt;/p&gt;

&lt;p&gt;Support for the new interface in the public api.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneQueryVTI.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;br/&gt;
M       java/optional/org/apache/derby/optional/lucene/LuceneListIndexesVTI.java&lt;/p&gt;

&lt;p&gt;Signature changes. Support for multi-field queries.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/myLuceneClasses.jar&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCoarseAuthorizationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneBackupTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneInMemoryTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneCollationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneJarLoadingTest.java&lt;/p&gt;

&lt;p&gt;Adjusted tests to handle the new api. Added Knut&apos;s multi-field test case.&lt;/p&gt;</comment>
                            <comment id="14046192" author="jira-bot" created="Fri, 27 Jun 2014 18:44:21 +0100"  >&lt;p&gt;Commit 1606161 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1606161&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1606161&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add multi-field support to the Lucene plugin; commit derby-590-31-aa-multiField.diff.&lt;/p&gt;</comment>
                            <comment id="14047630" author="rhillegas" created="Mon, 30 Jun 2014 14:03:11 +0100"  >&lt;p&gt;Attaching derby-590-32-aa-vetFieldNames.diff. This patch adds checks for legal field names. The Lucene tests pass cleanly for me on this patch.&lt;/p&gt;

&lt;p&gt;This patch enforces the following rules:&lt;/p&gt;

&lt;p&gt;1) Fields and keys may not have the same names.&lt;/p&gt;

&lt;p&gt;2) A field name may not be null.&lt;/p&gt;

&lt;p&gt;3) Duplicate field names are not allowed.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/optional/org/apache/derby/optional/lucene/LuceneSupport.java&lt;/p&gt;

&lt;p&gt;Enforcement code.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/LuceneSupportPermsTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="14047631" author="jira-bot" created="Mon, 30 Jun 2014 14:04:25 +0100"  >&lt;p&gt;Commit 1606719 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1606719&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1606719&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-590&quot; title=&quot;How to integrate Derby with Lucene API?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-590&quot;&gt;DERBY-590&lt;/a&gt;: Add checks for legal field names for Lucene indexes; commit derby-590-32-aa-vetFieldNames.diff.&lt;/p&gt;</comment>
                            <comment id="14047886" author="rhillegas" created="Mon, 30 Jun 2014 18:36:29 +0100"  >&lt;p&gt;Attaching a new version of the functional spec. This version incorporates the changes which Knut and I discussed:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;o The signatures of createIndex() and updateIndex() have changed. The analyzerMaker argument has been replaced by an indexDescriptorMaker argument.

o Corresponding changes have been made to the examples for createIndex() and updateIndex().

o The queryParserMaker argument has been removed from the query table function.

o Corresponding changes have been made to the query examples.

o The analyzerMaker column has been replaced with an indexDescriptorMaker column in the result returned by the listIndexes() table function.

o The sample javadoc for LuceneUtils has changed:

  - Added a new method: defaultIndexDescriptor()

  - Changed the argument signature of defaultQueryParser()

  - Changed the exception signatures of defaultAnalyzer() and getAnalyzerForLocale()

o A new interface has been added to the public API section: IndexDescriptor
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14049914" author="knutanders" created="Wed, 2 Jul 2014 14:38:59 +0100"  >&lt;p&gt;Thanks for making these changes, Rick. The new signatures seem to provide the flexibility needed. At least the new API was sufficiently flexible for a pointless toy application I wrote to test support for multiple fields... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14125821" author="chaase3" created="Mon, 8 Sep 2014 18:56:43 +0100"  >&lt;p&gt;Not a doc issue. Related doc issue is &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6564&quot; title=&quot;Document the experimental, optional LuceneSupport tool.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6564&quot;&gt;&lt;del&gt;DERBY-6564&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12712305">DERBY-6564</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12312666">DERBY-472</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12697208">LUCENE-5471</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12740135">DERBY-6731</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12718366">DERBY-6600</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12739878">DERBY-6730</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12705965">DERBY-6536</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12706405">DERBY-6538</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12706843">DERBY-6539</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12708743">DERBY-6544</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12718165">DERBY-6597</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12718606">DERBY-6602</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12674881">DERBY-6385</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12718608">DERBY-6603</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12718163">DERBY-6596</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12726784">DERBY-6658</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12703545">DERBY-6528</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12653188" name="LucenePlugin.html" size="23876" author="rhillegas" created="Mon, 30 Jun 2014 18:36:29 +0100"/>
                            <attachment id="12644301" name="LucenePlugin.html" size="23149" author="rhillegas" created="Sat, 10 May 2014 21:53:08 +0100"/>
                            <attachment id="12643358" name="LucenePlugin.html" size="22920" author="rhillegas" created="Mon, 5 May 2014 14:02:41 +0100"/>
                            <attachment id="12639940" name="LucenePlugin.html" size="22370" author="rhillegas" created="Sat, 12 Apr 2014 17:39:36 +0100"/>
                            <attachment id="12629445" name="derby-590-01-ag-publicAccessToLuceneRoutines.diff" size="83183" author="rhillegas" created="Tue, 18 Feb 2014 00:23:33 +0000"/>
                            <attachment id="12631974" name="derby-590-01-ah-publicAccessToLuceneRoutines.diff" size="132553" author="rhillegas" created="Sat, 1 Mar 2014 22:20:41 +0000"/>
                            <attachment id="12636222" name="derby-590-01-am-publicAccessToLuceneRoutines.diff" size="177847" author="rhillegas" created="Sat, 22 Mar 2014 21:53:19 +0000"/>
                            <attachment id="12636260" name="derby-590-02-aa-cleanupFindbugsErrors.diff" size="2146" author="rhillegas" created="Sun, 23 Mar 2014 20:09:37 +0000"/>
                            <attachment id="12636262" name="derby-590-03-aa-removeTestingDiagnostic.diff" size="546" author="rhillegas" created="Sun, 23 Mar 2014 20:55:00 +0000"/>
                            <attachment id="12636692" name="derby-590-04-aa-removeIDFromListIndexes.diff" size="6030" author="rhillegas" created="Tue, 25 Mar 2014 13:14:40 +0000"/>
                            <attachment id="12636947" name="derby-590-05-aa-accessDeclaredMembers.diff" size="1952" author="rhillegas" created="Wed, 26 Mar 2014 16:59:25 +0000"/>
                            <attachment id="12637025" name="derby-590-06-aa-suppressAccessChecks.diff" size="989" author="rhillegas" created="Wed, 26 Mar 2014 22:16:12 +0000"/>
                            <attachment id="12637086" name="derby-590-07-aa-accessClassInPackage.sun.misc.diff" size="1135" author="rhillegas" created="Thu, 27 Mar 2014 04:14:33 +0000"/>
                            <attachment id="12637206" name="derby-590-08-aa-omitLuceneFlag.diff" size="4593" author="rhillegas" created="Thu, 27 Mar 2014 18:35:08 +0000"/>
                            <attachment id="12637654" name="derby-590-09-aa-localeSensitiveAnalysis.diff" size="54575" author="rhillegas" created="Sat, 29 Mar 2014 17:30:54 +0000"/>
                            <attachment id="12637742" name="derby-590-10-aa-fixLocaleTest.diff" size="768" author="rhillegas" created="Sun, 30 Mar 2014 22:04:59 +0100"/>
                            <attachment id="12637745" name="derby-590-11-aa-moveCode.diff" size="196911" author="rhillegas" created="Sun, 30 Mar 2014 23:20:52 +0100"/>
                            <attachment id="12637972" name="derby-590-12-aa-newJar.diff" size="7515" author="rhillegas" created="Tue, 1 Apr 2014 02:26:45 +0100"/>
                            <attachment id="12638180" name="derby-590-13-aa-indexViews.diff" size="17684" author="rhillegas" created="Wed, 2 Apr 2014 02:59:33 +0100"/>
                            <attachment id="12638388" name="derby-590-14-aa-coarseGrainedAuthorization.diff" size="17049" author="rhillegas" created="Thu, 3 Apr 2014 02:17:27 +0100"/>
                            <attachment id="12638601" name="derby-590-15-aa-requireHardUpgrade.diff" size="3839" author="rhillegas" created="Fri, 4 Apr 2014 02:05:10 +0100"/>
                            <attachment id="12638689" name="derby-590-16-aa-adjustUpgradeTest.diff" size="2634" author="rhillegas" created="Fri, 4 Apr 2014 15:38:10 +0100"/>
                            <attachment id="12638736" name="derby-590-17-aa-closeInputStreamOnPropertiesFile.diff" size="2099" author="rhillegas" created="Fri, 4 Apr 2014 19:17:51 +0100"/>
                            <attachment id="12638916" name="derby-590-18-aa-cleanupAPI.diff" size="14945" author="rhillegas" created="Sun, 6 Apr 2014 16:21:56 +0100"/>
                            <attachment id="12638918" name="derby-590-19-aa-cleanupAPI2.diff" size="10308" author="rhillegas" created="Sun, 6 Apr 2014 17:31:17 +0100"/>
                            <attachment id="12638979" name="derby-590-20-aa-customQueryParser.diff" size="22842" author="rhillegas" created="Mon, 7 Apr 2014 15:13:16 +0100"/>
                            <attachment id="12639208" name="derby-590-21-aa-noTimeTravel.diff" size="5032" author="rhillegas" created="Tue, 8 Apr 2014 17:19:56 +0100"/>
                            <attachment id="12639455" name="derby-590-22-aa-cleanupPrivacy.diff" size="11216" author="rhillegas" created="Wed, 9 Apr 2014 20:56:33 +0100"/>
                            <attachment id="12639856" name="derby-590-23-aa-correctTestLocale.diff" size="3814" author="rhillegas" created="Fri, 11 Apr 2014 20:13:51 +0100"/>
                            <attachment id="12641148" name="derby-590-24-ad-luceneDirectory.diff" size="64822" author="rhillegas" created="Tue, 22 Apr 2014 00:44:48 +0100"/>
                            <attachment id="12642171" name="derby-590-26-ac-backupRestore.diff" size="32714" author="rhillegas" created="Mon, 28 Apr 2014 02:20:26 +0100"/>
                            <attachment id="12642578" name="derby-590-26-ad-backupRestoreEncryption.diff" size="41350" author="rhillegas" created="Wed, 30 Apr 2014 02:44:54 +0100"/>
                            <attachment id="12643204" name="derby-590-27-aa-publicAPILuceneUtils.diff" size="858" author="rhillegas" created="Sat, 3 May 2014 15:33:32 +0100"/>
                            <attachment id="12643360" name="derby-590-28-renameLuceneJars.diff" size="1373" author="rhillegas" created="Mon, 5 May 2014 14:46:10 +0100"/>
                            <attachment id="12643365" name="derby-590-29-aa-useLucene_4.7.1.diff" size="3185" author="rhillegas" created="Mon, 5 May 2014 15:34:53 +0100"/>
                            <attachment id="12644290" name="derby-590-30-aa-nullableScoreCeiling.diff" size="12503" author="rhillegas" created="Sat, 10 May 2014 14:40:56 +0100"/>
                            <attachment id="12652865" name="derby-590-31-aa-multiField.diff" size="67498" author="rhillegas" created="Fri, 27 Jun 2014 18:41:44 +0100"/>
                            <attachment id="12653154" name="derby-590-32-aa-vetFieldNames.diff" size="8326" author="rhillegas" created="Mon, 30 Jun 2014 14:03:11 +0100"/>
                            <attachment id="12645994" name="exceptions.diff" size="27356" author="knutanders" created="Wed, 21 May 2014 12:32:27 +0100"/>
                            <attachment id="12609164" name="lucene_demo.diff" size="23068" author="fuzzylogic" created="Fri, 18 Oct 2013 17:19:00 +0100"/>
                            <attachment id="12610932" name="lucene_demo_2.diff" size="41909" author="fuzzylogic" created="Tue, 29 Oct 2013 21:59:11 +0000"/>
                            <attachment id="12649566" name="multifield-with-custom-tokenizers.diff" size="17388" author="knutanders" created="Tue, 10 Jun 2014 12:57:44 +0100"/>
                            <attachment id="12648627" name="multifield.diff" size="18379" author="knutanders" created="Fri, 6 Jun 2014 12:24:54 +0100"/>
                            <attachment id="12643017" name="netbeans.diff" size="3374" author="knutanders" created="Fri, 2 May 2014 10:20:27 +0100"/>
                            <attachment id="12645981" name="netbeans2.diff" size="1877" author="knutanders" created="Wed, 21 May 2014 09:58:27 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>45.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 30 Sep 2005 01:37:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29620</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sqv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38475</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>