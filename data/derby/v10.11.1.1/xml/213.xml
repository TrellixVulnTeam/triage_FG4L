<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:26:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-213/DERBY-213.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-213] ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server</title>
                <link>https://issues.apache.org/jira/browse/DERBY-213</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Network Server closes the result set if ResultSet.next() is &lt;br/&gt;
called after the last row of the result set.  The test code &lt;br/&gt;
below throws the following exception.&lt;/p&gt;

&lt;p&gt;SQLState:   null&lt;br/&gt;
Severity: -99999&lt;br/&gt;
Message:  Invalid operation: result set closed&lt;br/&gt;
com.ibm.db2.jcc.am.SqlException: Invalid operation: result set &lt;br/&gt;
closed&lt;br/&gt;
        at &lt;br/&gt;
com.ibm.db2.jcc.am.ResultSet.checkForClosedResultSet(ResultSet.j&lt;br/&gt;
ava:3419)&lt;br/&gt;
        at &lt;br/&gt;
com.ibm.db2.jcc.am.ResultSet.nextX(ResultSet.java:290)&lt;br/&gt;
        at &lt;br/&gt;
com.ibm.db2.jcc.am.ResultSet.next(ResultSet.java:277)&lt;br/&gt;
        at AfterLast.test(AfterLast.java:75)&lt;br/&gt;
        at AfterLast.main(AfterLast.java:32)&lt;/p&gt;


&lt;p&gt;stmt.executeUpdate(&quot;CREATE  TABLE TAB ( I INT)&quot;);&lt;br/&gt;
stmt.executeUpdate(&quot;INSERT INTO TAB VALUES(1)&quot;);&lt;br/&gt;
stmt.executeUpdate(&quot;INSERT INTO TAB VALUES(2)&quot;);&lt;br/&gt;
String sql =&quot;SELECT * from tab&quot;;		&lt;br/&gt;
ps = conn.prepareStatement(sql);&lt;br/&gt;
ResultSet rs = ps.executeQuery();&lt;br/&gt;
System.out.println(sql);&lt;br/&gt;
while (rs.next())&lt;br/&gt;
System.out.println(rs.getInt(1));&lt;br/&gt;
try &lt;/p&gt;
{
	System.out.println(&quot;one more next&quot;);
	rs.next();
		}
&lt;p&gt;    catch (Exception e)&lt;/p&gt;
		{
		System.out.println(&quot;FAIL: next should return false not throw 
exception&quot;);
		e.printStackTrace();
		}
</description>
                <environment></environment>
        <key id="31588">DERBY-213</key>
            <summary>ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="acadia_student_01">Philip Wilder</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Mon, 11 Apr 2005 11:43:24 +0100</created>
                <updated>Thu, 26 Jan 2006 01:49:52 +0000</updated>
                            <resolved>Tue, 30 Aug 2005 22:28:01 +0100</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="62525" author="kmarsden" created="Mon, 11 Apr 2005 11:43:50 +0100"  >&lt;p&gt;This problem appears to be that if the client sends &lt;br/&gt;
QRYCLSIMP_SERVER_CHOICE or doesn&apos;t send any QRYCLSIMP value, &lt;br/&gt;
the server will default to QRYCLSIMP_YES for fowrard only &lt;br/&gt;
cursors.  I am not sure of the implications of changing it.&lt;/p&gt;</comment>
                            <comment id="66607" author="acadia_student_01" created="Tue, 31 May 2005 21:54:33 +0100"  >&lt;p&gt;Stand alone java tests designed to illustrate the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; bug. &lt;/p&gt;

&lt;p&gt;Create: Creates the database for the server to use&lt;br/&gt;
Server: Activates the server to listen for net connects&lt;br/&gt;
Client: Operates in 3 modes - embedded, DerbyNet and DerbyNetClient. Currently only embedded is functioning as per the ResultSet API.&lt;/p&gt;</comment>
                            <comment id="66609" author="acadia_student_01" created="Tue, 31 May 2005 22:00:28 +0100"  >&lt;p&gt;A modification to the resultset test to test for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; issue&lt;/p&gt;</comment>
                            <comment id="66894" author="acadia_student_01" created="Fri, 3 Jun 2005 04:06:58 +0100"  >&lt;p&gt;Just to mix things up a bit this morning I&apos;ll be doing the Summary for the IRC chat Kathey and I had at IRC://irc.freenode.net/#derby June 2, 9:00 a.m. PST about &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Talked about instances QRYCLSIMP in the DRDA Technical standard Version 3, Volume 1&lt;/li&gt;
	&lt;li&gt;Implemented a few small changes including the removal of the QRYCLSIMP value from DRDA statment to no observed ill effect.&lt;/li&gt;
	&lt;li&gt;Noted a bug in the Database.getDRDAStatement() method and assigned Philip to open a jira entry.&lt;/li&gt;
	&lt;li&gt;Discussed the merits of a closeImplicitly() method vs. the use of getQryclsimp() in conjunction with additional logic eventually rejecting closeImplictly().&lt;/li&gt;
	&lt;li&gt;Decided that&lt;br/&gt;
if (getQryclsimp() != CodePoint.QRYCLSIMP_NO ... &lt;br/&gt;
should be &lt;br/&gt;
if (getQryclsimp() == CodePoint.QRYCLSIMP_YES ... &lt;br/&gt;
effectively changing the default setting to NOT close the ResultSet object implicitly unless the client specifies that the server should do so with a QRYCLSIMP_YES value.&lt;/li&gt;
	&lt;li&gt;Discovered that implementing this change had no effect on ResultSet implicit close behavior. Tested client server interaction while ignoring client input (overriding it with QRYCLSIMP_NO), same result.&lt;/li&gt;
	&lt;li&gt;Discussed tips on how I might better trace DRDA protocol behavior. Specifically through the use of the tracefile=trace.out in your connection url and derby.drda.debug in your derby.properties.&lt;/li&gt;
	&lt;li&gt;Concluded meeting and assigned tasks for the next meeting to be held June 3, 5:00 a.m. PST / 9:00 a.m. AST&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We also decided that we would try this format for all future chat transcripts, posting the transcript to Jira as a file and providing the summary as a comment. Feel free to express any opinions on this chosen format.&lt;/p&gt;</comment>
                            <comment id="66895" author="acadia_student_01" created="Fri, 3 Jun 2005 04:09:56 +0100"  >&lt;p&gt;Update to previous client submission.&lt;/p&gt;</comment>
                            <comment id="66896" author="acadia_student_01" created="Fri, 3 Jun 2005 04:11:36 +0100"  >&lt;p&gt;Update on the previous resultset.java submission&lt;/p&gt;</comment>
                            <comment id="66898" author="acadia_student_01" created="Fri, 3 Jun 2005 04:17:09 +0100"  >&lt;p&gt;If Jira does not support multiple assignees, Philip Wilder can also be considered an assignee.&lt;/p&gt;</comment>
                            <comment id="12312621" author="kmarsden" created="Sat, 4 Jun 2005 16:08:07 +0100"  >&lt;p&gt;Phiip and I chatted on IRC today for a bit about &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We determined that even if QRYCLSIMP is set to no on the server, the client will still throw an error.&lt;/li&gt;
	&lt;li&gt;We started to debug the client but came to no conclusion yet.&lt;/li&gt;
	&lt;li&gt;We decided to clean up the qryclsimp handling in the server. We will move the logic that handles determines whether to close the result set implicitly out of DRDAConnThread and into a  isQryCloseImplicit() method in DRDAResultSet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Transcript attached.&lt;/p&gt;

&lt;p&gt;Next meeting Tuesday June 7, 5am PST.  &lt;/p&gt;</comment>
                            <comment id="12312891" author="acadia_student_01" created="Wed, 8 Jun 2005 00:35:58 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; chat transcript for June 7, 2005&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Discovered a typo in change file.&lt;/li&gt;
	&lt;li&gt;Decided a minor change to the new setOPNQRYOptions() was needed&lt;/li&gt;
	&lt;li&gt;Discussed differences in how DerbyNet and DerbyNetClient frameworks use the QRYCLSIMP value. DerbyNetClient does not appear to send any QRYCLSIMP value.&lt;/li&gt;
	&lt;li&gt;Decided that we should implement the proposed changes together.&lt;/li&gt;
	&lt;li&gt;In the course of implementing the changes we decided that:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The setOPNQRYOptions method should be moved to DRDAResultSet with a delegation method in DRDAStatement&lt;/li&gt;
	&lt;li&gt;The qryclsimp value in DRDAResultSet should be changed to private.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;After finishing the changes decided that a subtask would be beneficial so that only the related functionality would be changed in the final &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; fix&lt;/li&gt;
	&lt;li&gt;Assigned tasks for next meeting and established next meeting time.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12313042" author="kmarsden" created="Wed, 8 Jun 2005 23:46:31 +0100"  >&lt;p&gt;IRC Chat 6/8/2005 Summary&lt;/p&gt;

&lt;p&gt;Philip Wilder and Kathey Marsden&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Looked at client side issues related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;The client was closing  FORWARD_ONLY result sets after the last row. Also closing the resultset when the number of rows in setMaxRows is reached.&lt;/li&gt;
	&lt;li&gt;Determined that client should not be closing the result set in either case.  Changed the client accordingly  and are adding a test case using setMaxRows.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12313176" author="acadia_student_01" created="Fri, 10 Jun 2005 04:16:38 +0100"  >&lt;p&gt;IRC chat transcript June, 9 2005&lt;br/&gt;
#########################&lt;br/&gt;
Summary:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Noted Philip&apos;s first contribution to Derby Source (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-343&quot; title=&quot;Clean up DRDA classes handling of OPNQRY options&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-343&quot;&gt;&lt;del&gt;DERBY-343&lt;/del&gt;&lt;/a&gt;).&lt;/li&gt;
	&lt;li&gt;Addressed the importance of signing an Individual Contributor License Agreement.&lt;/li&gt;
	&lt;li&gt;Discussed Modifications to the resultset.java test class. Tests now check the functionality of statements that have a maximum number of rows set with the java.sql.Statement.setMaxRows(int) method and report how many rows were returned by a ResultSet.&lt;/li&gt;
	&lt;li&gt;Discussed the test failures caused by potential patch for Derby-213. Came to the conclusion that the test failures were likely harmless but assigned Philip the task of comparing the new DerbyNetClient .out files against the Embedded .out files for verification.&lt;/li&gt;
	&lt;li&gt;Reviewed Client/Server interaction and discovered that DRDAStatement.setMaxRows() functionality is handled only on the client side. Searched DRDA specs to find any evidence to the contrary to no success. Determined this is an issue that could use more analysis (later deciding to open a Jira Issue about it).&lt;/li&gt;
	&lt;li&gt;Toyed with the idea of assigning Philip the task of running StmtCloseFunTest.java against the DerbyNetClient Framework with the proposed modifications but eventually rejected it on the ground that this test is already run under the derbyall testsuite.&lt;/li&gt;
	&lt;li&gt;Assigned tasks and agreed upon next meeting time.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12313632" author="acadia_student_01" created="Wed, 15 Jun 2005 05:29:11 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; chat transcript for June 13, 2005 &lt;/p&gt;

&lt;p&gt;Background information:&lt;br/&gt;
It was the intention of both Kathey and I to release a patch to the development community June 10, 2005. However, prior to its release a problematic issue was identified.&lt;/p&gt;

&lt;p&gt;Summary: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Discussed the problem with the latest patch. While the patch solves the problem of closing the ResultSet implicitly the fix in question caused the ResultSet not to commit properly, as per java.sql.Connection.setAutoCommit() java documentation.&lt;/li&gt;
	&lt;li&gt;Discussed changes to the tester to help identify this new problem and ways in which the tester could be further improved. The tester now checks to see if any locks are held by the ResultSet post commit (using the org.apache.derby.diag.LockTable class) and the details of this lock.&lt;/li&gt;
	&lt;li&gt;Discussed alternatives to the current autocommit model and established the Client also needed to execute the autocommit logic inside the nextX() method.&lt;/li&gt;
	&lt;li&gt;Determined that the Client was not communicating with the Server as expected (commit was not successful) but not the cause.&lt;/li&gt;
	&lt;li&gt;Assigned tasks for the next meeting to be held on June 15, 2005. Kathey was to investigate the DRDA communications to establish why the auto commit was not functioning as expected. Philip was to organize all ResultSet behavior according to the JDBC specification in a coherent manner and research Derby locking policy for both client and embedded to establish where they differ.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12313634" author="acadia_student_01" created="Wed, 15 Jun 2005 05:33:04 +0100"  >&lt;p&gt;Expected ResultSet behavior as per JDBC specifications V1.0&lt;/p&gt;</comment>
                            <comment id="12313824" author="acadia_student_01" created="Thu, 16 Jun 2005 23:44:21 +0100"  >&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;Update *****&lt;br/&gt;
It would seem that the nature of the problem has changed. Stemming from our discussions surrounding the issue Kathey and I have come to the conclusion that the current method of ResultSet comitting is convoluted in some regards and broken in others. At the moment all of the Commit logic is found in the client.am.Result.closeX() method which is being called improperly on the final ResultSet.next() call and little effort is made to accommodate multiple ResultSets per Statement. In order to address this issue we propose the following 2 steps:&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1) Move the commit logic out of client.am.ResultSet, place it in client.am.Statement and generally adapt a format that more closely follows Embedded model. Hopefully in the days that follow I will be able to provide a more concrete implementation for analysis.&lt;/p&gt;

&lt;p&gt;2) Develop a series of tests that more fully probe the different combinations of commit functionality (ResultSet.CLOSE_CURSORS_AT_COMMIT vs ResultSet.HOLD_CURORS_ON_COMMIT, autoCommit == true vs autocommit == false, etc.)&lt;/p&gt;</comment>
                            <comment id="12313920" author="acadia_student_01" created="Sat, 18 Jun 2005 06:24:12 +0100"  >&lt;p&gt;Proposed Changes:&lt;/p&gt;

&lt;p&gt;The following are a series of changes I propose to rectify the problem of Derby-213 and bring the client code more in line with Embedded. Initial tests look promising, but a full series of tests have not yet been developed. Any and all feedback is appreciated, sorry for the length.&lt;/p&gt;


&lt;p&gt;####################&lt;br/&gt;
client.am.Connection&lt;br/&gt;
####################&lt;/p&gt;

&lt;p&gt;In the method flowAutoCommit()&lt;br/&gt;
-Change &lt;br/&gt;
The return value to boolean on successful flow which returns true on a successful flow.&lt;/p&gt;

&lt;p&gt;###################&lt;br/&gt;
client.am.Statement&lt;br/&gt;
###################&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Create new methods:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Convenience method for resultSetCommitting(ResultSet, boolean)&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@see Statement#resultSetCommitting(ResultSet, boolean)&lt;/li&gt;
	&lt;li&gt;@param closingRS The ResultSet to be closed&lt;/li&gt;
	&lt;li&gt;@throws SqlException&lt;br/&gt;
     */&lt;br/&gt;
    public void resultSetCommitting(ResultSet closingRS) throws SqlException 
{
    	resultSetCommitting(closingRS, false);
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Method that checks to see if any other ResultSets are open. If not&lt;/li&gt;
	&lt;li&gt;proceeds with the autocommit.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param closingRS The ResultSet to be closed&lt;/li&gt;
	&lt;li&gt;@param writeChain A Boolean indicating whether this method&lt;/li&gt;
	&lt;li&gt;is part of a chain of write from client to Server&lt;/li&gt;
	&lt;li&gt;@throws SqlException&lt;br/&gt;
     */&lt;br/&gt;
    public void resultSetCommitting(ResultSet closingRS, boolean writeChain) throws SqlException {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		// If the Connection is not in auto commit then this statement completion&lt;br/&gt;
		// cannot cause a commit.&lt;br/&gt;
		if (!connection_.autoCommit_ || closingRS.autoCommitted_)&lt;br/&gt;
			return;&lt;/p&gt;

&lt;p&gt;		// If we have multiple results, see if there is another result set open.&lt;br/&gt;
		// If so, then no commit. The last result set to close will close the statement.&lt;br/&gt;
		if (resultSetList_ != null) {&lt;br/&gt;
			for (int i = 0; i &amp;lt; resultSetList_.length; i++) &lt;/p&gt;
{
				ResultSet crs = resultSetList_[i];
				if (crs == null)
					continue;
				if (!crs.openOnClient_)
					continue;
				if (crs == closingRS)
					continue;

				// at least one still open so no commit now.
				return;
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;		if (writeChain) &lt;/p&gt;
{
			connection_.writeAutoCommit();
		}
&lt;p&gt; else &lt;/p&gt;
{
			if (connection_.flowAutoCommit())
				closingRS.markAutoCommitted();
		}
&lt;p&gt;	}&lt;/p&gt;


&lt;p&gt;###################&lt;br/&gt;
client.am.ResultSet&lt;br/&gt;
###################&lt;/p&gt;

&lt;p&gt;In the method nextX()&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Change&lt;br/&gt;
if ((!isValidCursorPosition_ &amp;amp;&amp;amp; cursor_ != null) || (statement_.maxRows_ &amp;gt; 0 &amp;amp;&amp;amp; &lt;br/&gt;
            		cursor_.rowsRead_ &amp;gt; statement_.maxRows_)) { &lt;br/&gt;
    isValidCursorPosition_ = false;&lt;br/&gt;
...&lt;br/&gt;
to&lt;br/&gt;
if (statement_.maxRows_ &amp;gt; 0 &amp;amp;&amp;amp; cursor_.rowsRead_ &amp;gt; statement_.maxRows_) 
{ 
    isValidCursorPosition_ = false; 
}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This provides a simplification of the logic as there is no need to set isValidCursorPosition_ = false when&lt;br/&gt;
!isValidCursorPosition_ == true&lt;/p&gt;

&lt;p&gt;-Remove&lt;br/&gt;
A trailing &apos;}&apos; to insure that braces match&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Change&lt;br/&gt;
            if (!openOnServer_) {&lt;br/&gt;
to&lt;br/&gt;
            if (!isValidCursorPosition_ &amp;amp;&amp;amp; !openOnServer_) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Follows from the first change.&lt;/p&gt;

&lt;p&gt;-Remove&lt;br/&gt;
try &lt;/p&gt;
{
    closeX(); // the auto commit logic is in closeX()
}
&lt;p&gt; catch (SqlException sqle) &lt;/p&gt;
{
    sqlException = Utils.accumulateSQLException(sqle, sqlException);
}

&lt;p&gt;There should be no reference to closeX() in the ResultSet.nextX() method. If the ResultSetHoldability == ResultSet.CLOSE_CURSORS_AT_COMMIT then the ResultSet should close properly anyway.&lt;/p&gt;

&lt;p&gt;-Remove from &lt;br/&gt;
if (isValidCursorPosition_) {&lt;br/&gt;
    updateColumnInfoFromCache();&lt;br/&gt;
    // check if there is a non-null SQLCA for the current row for rowset cursors&lt;br/&gt;
    checkRowsetSqlca();&lt;br/&gt;
    if (isBeforeFirst_) &lt;/p&gt;
{
       isFirst_ = true;
    }
&lt;p&gt;    isBeforeFirst_ = false;&lt;br/&gt;
} else &lt;/p&gt;
{
    isFirst_ = false;
    return isValidCursorPosition_;
}
&lt;p&gt;the line &lt;br/&gt;
return isValidCursorPosition_;&lt;br/&gt;
from the else clause. For reasons that shall become apparent.&lt;/p&gt;

&lt;p&gt;-Remove &lt;br/&gt;
if (!openOnClient_) &lt;/p&gt;
{
            isValidCursorPosition_ = false;
        }
&lt;p&gt; else &lt;/p&gt;

&lt;p&gt;I&apos;m confident that this can&apos;t actually happen because of the checkForClosedResultSet() call earlier&lt;/p&gt;

&lt;p&gt;-Add (immediately before the Return)&lt;/p&gt;

&lt;p&gt;        //An invalid cursor position is synonymous with a completed &lt;br/&gt;
        //ResultSet thus we should make the call to &lt;br/&gt;
        //statement_.resultSetComitting(this) for both FORWARD_ONLY&lt;br/&gt;
        //and SCROLLABLE as per embedded behaviour&lt;br/&gt;
        if (!isValidCursorPosition_)&lt;br/&gt;
        	statement_.resultSetCommitting(this);&lt;/p&gt;

&lt;p&gt;In the Method writeCloseAndAutoCommitIfNotAutoCommitted()&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Change one of two things&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Remove autoCommitted_ = false;&lt;br/&gt;
  This strikes me as misleading for a method called writeCloseAndAutoCommit*IfNotAutoCommitted*()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Change the name to writeCloseAndAutoCommit()&lt;br/&gt;
  Acknowledges that a auto commit is necessary after a close regardless of its autocommit status and change the name to match the functionality. In conjuction with this change it would be necessary to change the method named &lt;br/&gt;
flowCloseAndAutoCommitIfNotAutoCommitted() &lt;br/&gt;
to&lt;br/&gt;
flowCloseAndAutoCommit()&lt;br/&gt;
and&lt;br/&gt;
readCloseAndAutoCommitIfNotAutoCommitted()&lt;br/&gt;
to&lt;br/&gt;
readCloseAndAutoCommit()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-Remove&lt;br/&gt;
   writeAutoCommitIfNotAutoCommitted(); &lt;/p&gt;

&lt;p&gt;-Add&lt;br/&gt;
   statement_.resultSetCommitting(this, true);&lt;br/&gt;
outside the if block.&lt;/p&gt;

&lt;p&gt;These two methods do similar things but the statement_.resultSetCommitting() method:&lt;br/&gt;
a) Places the commit logic within the Statement class which is where it belongs&lt;br/&gt;
b) Checks to see if there are any open ResultSets before committing which I understand may not be necessary for the moment but could be useful for future compatibility. We do not wish to set the autoCommitted_ value to true because we are part of a write read chain and autoCommited_ will be set to true at the end.&lt;/p&gt;

&lt;p&gt;In the method closeX()&lt;/p&gt;

&lt;p&gt;-Change&lt;/p&gt;

&lt;p&gt;if (openOnServer_) &lt;/p&gt;
{
    flowCloseAndAutoCommitIfNotAutoCommitted();
} else {
    flowAutoCommitIfNotAutoCommitted() // in case of early close
}&lt;br/&gt;
to&lt;br/&gt;
if (openOnServer_) {
    flowCloseAndAutoCommitIfNotAutoCommitted();
}
&lt;p&gt; else &lt;/p&gt;
{
    statement_.resultSetCommitting(this);
}

&lt;p&gt;-Remove&lt;br/&gt;
flowAutoCommitIfLastOpenMultipleResultSetWasJustClosed();&lt;/p&gt;

&lt;p&gt;The statement_.resultSetCommitting(this); already checks for multiple ResultSets and commits only if the the only open ResultSet is the ResultSet which called the method. &lt;/p&gt;

&lt;p&gt;Remove the method flowAutoCommitIfNotAutoCommitted()&lt;br/&gt;
Remove the method flowAutoCommitIfLastOpenMultipleResultSetWasJustClosed()&lt;/p&gt;

&lt;p&gt;Add a method&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Getter used exclusively for testing purposes.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return autoCommited_&lt;br/&gt;
     */&lt;br/&gt;
    public boolean isAutoCommitted() 
{
    	return autoCommitted_;
    }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;####################&lt;br/&gt;
impl.jdbc.EmbedResultSet&lt;br/&gt;
####################&lt;/p&gt;

&lt;p&gt;-Add&lt;br/&gt;
Instance variable &lt;br/&gt;
boolean isAutoCommitted&lt;br/&gt;
for testing Purposes&lt;/p&gt;

&lt;p&gt;-Add method&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For testing purposes only. Returns whether this ResultSet has been&lt;/li&gt;
	&lt;li&gt;automatically committed&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@return isAutoCommitted.&lt;br/&gt;
	 */&lt;br/&gt;
	public boolean isAutoCommitted() 
{
		return isAutoCommitted;
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;####################&lt;br/&gt;
impl.jdbc.EmbedStatement&lt;br/&gt;
####################&lt;/p&gt;

&lt;p&gt;At the bottom of the method &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add&lt;br/&gt;
		//For testing&lt;br/&gt;
		closingLRS.isAutoCommitted = true;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;#####################&lt;br/&gt;
derbyTesting.functionTests.tests.jdbcapi.resultTest&lt;br/&gt;
#####################&lt;/p&gt;

&lt;p&gt;The tests to insure the code is operating are somewhat generally simple in their format yet difficult in that there are a number of them and there is little that can be done in the way of code reuse. I propose a series of tests akin to this format:&lt;/p&gt;

&lt;p&gt;	 private static void runTests(Connection conn) throws SQLException {&lt;br/&gt;
	 	Statement s = conn.createStatement();&lt;br/&gt;
	 	ResultSet rs = s.executeQuery(&quot;select tablename from sys.systables &quot; +&lt;br/&gt;
	 			&quot;where tablename = &apos;&quot; + tableName.toUpperCase() + &quot;&apos;&quot;);&lt;br/&gt;
	 	if (rs.next()) &lt;/p&gt;
{
	 		rs.close();
	 		s.execute(&quot;delete from &quot; + tableName);
	 	}
&lt;p&gt; else &lt;/p&gt;
{
	 		rs.close();
	 		s.execute(&quot;create table &quot; + tableName + &quot; (num int)&quot;);
	 	}
&lt;p&gt;	 	s.execute(&quot;insert into &quot; + tableName + &quot; values (1)&quot;);&lt;br/&gt;
	 	s.execute(&quot;insert into &quot; + tableName + &quot; values (2)&quot;);&lt;br/&gt;
            boolean commitVal = conn.getAutoCommit();&lt;br/&gt;
	 	test1(conn); //test1 through testX&lt;br/&gt;
	 	conn.setAutoCommit(commitVal);&lt;br/&gt;
	 	s.execute(&quot;drop table &quot; + tableName);&lt;br/&gt;
	 }&lt;/p&gt;

&lt;p&gt;	 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Tests&lt;/li&gt;
	&lt;li&gt;- autoCommit == true&lt;/li&gt;
	&lt;li&gt;- resultSetType == TYPE_FORWARD_ONLY&lt;/li&gt;
	&lt;li&gt;- holdability == HOLD_CURSORS_OVER_COMMIT&lt;/li&gt;
	&lt;li&gt;- limit returned ResultSets == false&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param conn&lt;/li&gt;
	&lt;li&gt;@throws SQLException&lt;br/&gt;
	  */&lt;br/&gt;
	 private static void test1(Connection conn) throws SQLException {&lt;br/&gt;
	 	System.out.print(&quot;test1: &quot;);&lt;br/&gt;
        conn.setAutoCommit(true);&lt;br/&gt;
        Statement s = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, &lt;br/&gt;
        	ResultSet.CONCUR_READ_ONLY, ResultSet.HOLD_CURSORS_OVER_COMMIT);&lt;br/&gt;
	 	ResultSetWrapper rsw  = new ResultSetWrapper(s.executeQuery(&quot;select * from &quot; + tableName));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	 	int count = 0;&lt;br/&gt;
	 	while (rsw.next()) count++;&lt;/p&gt;

&lt;p&gt;	 	if (!rsw.isAutoCommitted()) &lt;/p&gt;
{
	 		System.out.println(&quot;Failed. Not committed properly&quot;);
	 	}

&lt;p&gt;	 	try &lt;/p&gt;
{
	 		if (rsw.next())
	 			System.out.println(&quot;Failed. ResultSet returned true after last.&quot;);
	 		
	 		if (count == 2)
	 			System.out.println(&quot;Succeeded&quot;);
	 		else
	 			System.out.println(&quot;Failed. Unexpected row count of &quot; + count);
	 		rsw.close();
	 	}
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
	 		System.out.println(&quot;Failed. Unexpected exception: &quot;);
	 		e.printStackTrace(System.out);
	 	}
&lt;p&gt; &lt;br/&gt;
	 	s.close();&lt;br/&gt;
	 }&lt;/p&gt;


&lt;p&gt;	 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This class provides me with a simple way of check if a ResultSet&lt;/li&gt;
	&lt;li&gt;has been auto committed regardless of the underlying ResultSet&lt;/li&gt;
	&lt;li&gt;being used&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@author Philip Wilder&lt;br/&gt;
	  */&lt;br/&gt;
	 private class ResultSetWrapper {&lt;br/&gt;
	 	public ResultSetWrapper(ResultSet rs) 
{
	 		if (rs instanceof org.apache.derby.client.am.ResultSet)
	 			clientRS = (org.apache.derby.client.am.ResultSet)rs;
	 		else if (rs instanceof org.apache.derby.impl.jdbc.EmbedResultSet)
	 			embedRS = (org.apache.derby.impl.jdbc.EmbedResultSet)rs;
	 		
	 		this.rs = rs;
	 	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	 	public boolean next() throws SQLException &lt;/p&gt;
{
	 		return rs.next(); 
	 	}

&lt;p&gt;	 	public void close() throws SQLException &lt;/p&gt;
{
	 		rs.close();
	 	}

&lt;p&gt;	 	public String getAutoCommittedString() &lt;/p&gt;
{
	 		if (clientRS != null)
	 			return clientRS.isAutoCommitted() ? &quot;true&quot; : &quot;false&quot;;
	 		else if (embedRS != null) 
	 			return embedRS.isAutoCommitted() ? &quot;true&quot; : &quot;false&quot;;
	 		else
	 			return &quot;Unknown&quot;;
	 	}

&lt;p&gt;	 	public boolean isAutoCommitted() &lt;/p&gt;
{
	 		if (clientRS != null)
	 			return clientRS.isAutoCommitted();
	 		else if (embedRS != null)
	 			return embedRS.isAutoCommitted();
	 		else
	 			return false;
	 	}

&lt;p&gt;	 	private org.apache.derby.client.am.ResultSet clientRS = null;&lt;br/&gt;
	 	private org.apache.derby.impl.jdbc.EmbedResultSet embedRS = null;&lt;br/&gt;
	 	private ResultSet rs = null;&lt;br/&gt;
	 }&lt;/p&gt;

&lt;p&gt;	 private String tableName = &quot;commitTestTable&quot;;&lt;/p&gt;</comment>
                            <comment id="12318487" author="acadia_student_01" created="Thu, 11 Aug 2005 23:38:34 +0100"  >&lt;p&gt;An interim patch to bring client in line with embedded. Includes the following changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Additional tests in jdbcapi/resultset.java&lt;/li&gt;
	&lt;li&gt;Change to special flag to fix a small NullPointerException&lt;/li&gt;
	&lt;li&gt;modified output files for resultset.out, updatableResultSet.out, holdCursorJDBC30, forupdate.out&lt;/li&gt;
	&lt;li&gt;Changes to ResultSet, Statement and Connection in the org.apache.derby.client.am package. These changes have the following effects:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;FORWARD_ONLY ResultSets will no longer close implicitly after the last ResultSet has been retrieved.&lt;/li&gt;
	&lt;li&gt;Checks to see if an auto-commit should be performed have been moved to Statement to mimic embedded functionality.&lt;/li&gt;
	&lt;li&gt;Multiple ResultSets will now auto-commit if all ResultSets are closed if auto-commit is turned on.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;While the derbyall test suite was run with only one failure (since rectified), there are still a couple of issues worthy of consideration.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Connection.setAutoCommit() java documentation states &quot; In advanced cases, a single statement may return multiple results as well as output parameter values. In these cases, the commit occurs when all results and output parameter values have been retrieved.&quot; While my solution auto-commits when all ResultSets have been closed, it does not take into consideration output parameters. However, looking at the embedded implementation it does not look like embedded takes output parameters into consideration either.&lt;/li&gt;
	&lt;li&gt;The SVN patch tool seems to act very strangely for updatableResultSet.out, deleting then adding lines that were identical. I cannot account for this behavior.&lt;/li&gt;
	&lt;li&gt;CallableStatements are a new addition to the resultset.java test class. I felt it was an appropriate addition because I was still testing ResultSets (albeit multiple ResultSets) but I&apos;m open to alternate suggestions.&lt;/li&gt;
	&lt;li&gt;The changes to jdbcapi/resultset.java are not particularly compatible with java 1.3.X as I make reference to change ResultSet holdability in multiple places. This did not appear to cause any problems but it is something to be aware of.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12319905" author="acadia_student_01" created="Thu, 25 Aug 2005 06:14:01 +0100"  >&lt;p&gt;I have attempted to address the concerns raised by Kathey&apos;s email:&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200508.mbox/%3c43038278.8000102@sbcglobal.net%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200508.mbox/%3c43038278.8000102@sbcglobal.net%3e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Primary changes are stripping down tests somewhat for simplicity, using a different method to check to see if auto-commit has occurred and changing some of the java documentation a bit to match the changes.&lt;/p&gt;

&lt;p&gt;Run successfully with derbyall&lt;/p&gt;</comment>
                            <comment id="12320415" author="kmarsden" created="Mon, 29 Aug 2005 22:40:43 +0100"  >&lt;p&gt;Committed revision 264128.&lt;/p&gt;</comment>
                            <comment id="12320441" author="acadia_student_01" created="Tue, 30 Aug 2005 03:40:54 +0100"  >&lt;p&gt;As of revision 264128 Client ResultSet functionality should match embedded. However, the JDBC Specification &lt;b&gt;may&lt;/b&gt; indicate that a ResultSet should close implicitly on completion. My research into this issue has been inconclusive but I have no more leads to follow.&lt;/p&gt;</comment>
                            <comment id="12320458" author="kmarsden" created="Tue, 30 Aug 2005 04:51:37 +0100"  >&lt;p&gt;I tend to think it would be ok to close this as Fixed and open another  Jira entry for any outstanding issues,  because if you look at the description  ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server, you fixed it!&lt;/p&gt;
</comment>
                            <comment id="12320566" author="acadia_student_01" created="Tue, 30 Aug 2005 22:28:01 +0100"  >&lt;p&gt;As per Kathey&apos;s suggestion, I&apos;m changing this resolution to fixed and creating issue &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-545&quot; title=&quot;Should ResultSet Close implicitly?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-545&quot;&gt;&lt;del&gt;DERBY-545&lt;/del&gt;&lt;/a&gt; to assauge any lingering concerns I might have.&lt;/p&gt;</comment>
                            <comment id="12322883" author="kmarsden" created="Thu, 8 Sep 2005 07:00:16 +0100"  >&lt;p&gt;New Revision: 279420&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=279420&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=279420&amp;amp;view=rev&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-213&quot; title=&quot;ResultSet.next() after last row of FORWARD_ONLY cursor throws an SQL Exception with Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-213&quot;&gt;&lt;del&gt;DERBY-213&lt;/del&gt;&lt;/a&gt; additional checkin to rearrange tests&lt;br/&gt;
Moved procedure tests to lang/procedure.java so that resultset.java &lt;br/&gt;
can run with J2ME&lt;/p&gt;

</comment>
                            <comment id="12323099" author="kmarsden" created="Sat, 10 Sep 2005 11:29:59 +0100"  >&lt;p&gt;Additional checkin for master update for jdk131&lt;br/&gt;
Date: Fri Sep  9 18:26:34 2005&lt;br/&gt;
New Revision: 279930&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=279930&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=279930&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12363960" author="knutanders" created="Wed, 25 Jan 2006 23:38:02 +0000"  >&lt;p&gt;The comments (and resolution=fixed) indicate that we should close this issue. Any objections?&lt;/p&gt;</comment>
                            <comment id="12363978" author="kmarsden" created="Thu, 26 Jan 2006 01:49:52 +0000"  >&lt;p&gt;issue fixed.  There was still some outstanding discussion on autocommit behaviour in general but the original issue is fixed.  Thanks Philip!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12314007">DERBY-545</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="20387" name="Client.java" size="6326" author="acadia_student_01" created="Fri, 3 Jun 2005 04:09:56 +0100"/>
                            <attachment id="20328" name="Create.java" size="4234" author="acadia_student_01" created="Tue, 31 May 2005 21:54:33 +0100"/>
                            <attachment id="12310739" name="DERBY-213_6_13_2005.txt" size="12538" author="acadia_student_01" created="Wed, 15 Jun 2005 05:29:09 +0100"/>
                            <attachment id="12310639" name="DERBY-213_6_9_2005.txt" size="14115" author="acadia_student_01" created="Fri, 10 Jun 2005 04:16:38 +0100"/>
                            <attachment id="12310527" name="DERBY-213_irc_6_3_2005" size="11916" author="kmarsden" created="Sat, 4 Jun 2005 16:08:07 +0100"/>
                            <attachment id="12310570" name="DERBY-213_irc_6_7_2005.txt" size="9318" author="acadia_student_01" created="Wed, 8 Jun 2005 00:35:58 +0100"/>
                            <attachment id="12310597" name="DERBY-213_irc_6_8_2005" size="9004" author="kmarsden" created="Thu, 9 Jun 2005 00:20:08 +0100"/>
                            <attachment id="12311697" name="Derby213patch_Aug112005.patch" size="477561" author="acadia_student_01" created="Thu, 11 Aug 2005 23:37:35 +0100"/>
                            <attachment id="12311948" name="Derby213patch_Aug242005.patch" size="38471" author="acadia_student_01" created="Thu, 25 Aug 2005 06:14:01 +0100"/>
                            <attachment id="20386" name="IRCTranscript_June2_2005.txt" size="13648" author="acadia_student_01" created="Fri, 3 Jun 2005 04:06:58 +0100"/>
                            <attachment id="12310740" name="ResultSet Outline.pdf" size="11354" author="acadia_student_01" created="Wed, 15 Jun 2005 05:33:04 +0100"/>
                            <attachment id="20329" name="Server.java" size="273" author="acadia_student_01" created="Tue, 31 May 2005 21:54:33 +0100"/>
                            <attachment id="20388" name="resultset.java" size="30642" author="acadia_student_01" created="Fri, 3 Jun 2005 04:11:36 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12311127">DERBY-343</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 31 May 2005 20:54:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21838</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy17av:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40833</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>