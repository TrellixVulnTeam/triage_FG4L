<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:21:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5493/DERBY-5493.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5493] Same value returned by successive calls to a sequence generator.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5493</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The following script shows the same value being returned from a sequence generator by two successive NEXT VALUE FOR calls. Thanks to Knut for finding this:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;create table t (x int);&lt;br/&gt;
create sequence s;&lt;br/&gt;
autocommit off;&lt;br/&gt;
select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from sys.syssequences with rs;&lt;br/&gt;
values next value for s;&lt;br/&gt;
drop table t;&lt;br/&gt;
rollback;&lt;/p&gt;

&lt;p&gt;&amp;#8211; same value as previous call&lt;br/&gt;
values next value for s; &lt;/p&gt;</description>
                <environment></environment>
        <key id="12530574">DERBY-5493</key>
            <summary>Same value returned by successive calls to a sequence generator.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Mon, 7 Nov 2011 13:57:04 +0000</created>
                <updated>Fri, 14 Jun 2013 18:19:49 +0100</updated>
                            <resolved>Fri, 20 Apr 2012 18:15:55 +0100</resolved>
                                    <version>10.6.1.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.1.2</version>
                    <version>10.8.2.2</version>
                    <version>10.9.1.0</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13239522" author="rhillegas" created="Tue, 27 Mar 2012 15:44:30 +0100"  >&lt;p&gt;Attaching derby-5493-01-aa-correctnessPlusPeekerPlusTest.diff. This patch modifies how we allocate new sequence values, in order to fix the known correctness problems with sequence generation. Regression tests pass cleanly for me, but this patch is not ready for commit. It needs additional tests to verify correctness, upgrade, and new user-visible features.&lt;/p&gt;

&lt;p&gt;Mike and I discussed the correctness problems on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5443&quot; title=&quot;reduce number of times sequence updater does it work on user thread rather than nested user thread.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5443&quot;&gt;&lt;del&gt;DERBY-5443&lt;/del&gt;&lt;/a&gt;. Two proposals were put forward, each of which had its own messy issues:&lt;/p&gt;

&lt;p&gt;1) Use an invisible conglomerate and dedicated transaction to allocate new sequence ranges. This is the approach taken by this patch.&lt;/p&gt;

&lt;p&gt;2) Restrict the isolation level used to read from SYSSEQUENCES.&lt;/p&gt;

&lt;p&gt;In that discussion, two problems with approach (1) were identified:&lt;/p&gt;

&lt;p&gt;i) It creates a new file (the invisible conglomerate). I think that the space occupied by this new file is very small compared to the size of an empty Derby database and well within the growth we have tolerated for Derby feature releases over the last 7 years.&lt;/p&gt;

&lt;p&gt;ii) Orphaned tuples can pile up in the invisible conglomerate after successful DROP SEQUENCE and unsuccessful CREATE SEQUENCE statements. I addressed this problem by garbage-collecting the orphans at database boot time.&lt;/p&gt;

&lt;p&gt;In addition to fixing the known correctness problem, this patch introduces the following user-visible changes:&lt;/p&gt;

&lt;p&gt;A) A new system function has been added: syscs_peek_at_sequence(). This function gives the application the instantaneous current value of the sequence. In previous releases, users tried to get this information by querying SYSSEQUENCES.CURRENTVALUE. But that didn&apos;t work because that column holds the end of the pre-allocation range and not the actual next value in the sequence.&lt;/p&gt;

&lt;p&gt;B) SYSCONGLOMERATES.TABLEID is now nullable.&lt;/p&gt;

&lt;p&gt;C) A new SYSGHOST conglomerate is listed in SYSCONGLOMERATES. The SYSGHOST conglomerate does not belong to any corresponding table. Although users can&apos;t see it, this is the shape of a SYSGHOST tuple:&lt;/p&gt;

&lt;p&gt;  ( keycol varchar( 32672 ), payload Formatable )&lt;/p&gt;


&lt;p&gt;In addition, this patch introduces a testing/diagnostic feature which we should not document:&lt;/p&gt;

&lt;p&gt;D) A new GhostTable VTI has been added. This lets you view the contents of SYSGHOST. The VTI does all of its work in the transaction controller that is dedicated to managing SYSGHOST. Here&apos;s how you invoke it:&lt;/p&gt;

&lt;p&gt;    select * from new org.apache.derby.diag.GhostTable() vti;&lt;/p&gt;

&lt;p&gt;Behind the scenes, this patch introduces some other new objects:&lt;/p&gt;

&lt;p&gt;E) GhostController, a synchronized object for reading/writing SYSGHOST tuples.&lt;/p&gt;

&lt;p&gt;F) A new Formatable to hold the end of a pre-allocation range: SequenceState.&lt;/p&gt;

&lt;p&gt;G) A new sequence updater for use on databases at level 10.9 or higher: SyssequenceUpdater_10_9.&lt;/p&gt;

&lt;p&gt;Most of the complexity of the patch is in the implementation of GhostController. Extra support code was added to DataDictionaryImpl and SyssequenceUpdater_10_9, but I tried to isolate most of the trickiness in GhostControllerImpl.&lt;/p&gt;

&lt;p&gt;This patch will require some changes to the Reference Manual:&lt;/p&gt;

&lt;p&gt;DOC-1) Add a section describing the new syscs_peek_at_sequence() function.&lt;/p&gt;

&lt;p&gt;DOC-2) Modify the section on SYSCONGLOMERATES to state that TABLEID is nullable.&lt;/p&gt;

&lt;p&gt;DOC-3) Modify the section on SYSSEQUENCES to state that users should not bother querying the CURRENTVALUE column. Instead, they should use syscs_peek_at_sequence() to peek at the instantaneous current value of a sequence generator.&lt;/p&gt;

&lt;p&gt;This patch will require a release note explaining that users should use syscs_peek_at_sequence() rather than SYSSEQUENCES.CURRENTVALUE.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/dictionary/SequenceState.java&lt;/p&gt;

&lt;p&gt;New Formatable to hold the end of pre-allocation ranges.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/dictionary/GhostDescriptor.java&lt;/p&gt;

&lt;p&gt;New tuple describing a row in SYSGHOST.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/SYSCONGLOMERATESRowFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java&lt;/p&gt;

&lt;p&gt;Support for creating SYSGHOST and deleting orphans.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/dictionary/GhostController.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/catalog/GhostControllerImpl.java&lt;/p&gt;

&lt;p&gt;Logic to manage SYSGHOST.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Logic for new syscs_peek_at_sequence() procedure.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/diag/GhostTable.java&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;New diagnostic VTI for viewing SYSGHOST.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;New sequence updater for use on databases at level 10.9 and higher.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/CreateSequenceConstantAction.java&lt;/p&gt;

&lt;p&gt;Add a corresponding SYSGHOST tuple when creating a sequence. If the create action is rolled back, then the SYSGHOST tuple will be garbage-collected the next time the database boots.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;Slight change to use GhostTable rather than SYSSEQUENCES.CURRENTVALUE in order to view the end of pre-allocation ranges.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SystemCatalogTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_2.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/ij7.out&lt;/p&gt;

&lt;p&gt;Test changes to account for the metadata changes.&lt;/p&gt;</comment>
                            <comment id="13239591" author="mikem" created="Tue, 27 Mar 2012 17:12:28 +0100"  >&lt;p&gt;i will spend some time commenting more in full, but wanted to post a quick response.  I do not think the extra complexity being proposed&lt;br/&gt;
in the patch is warranted, I may be missing the benefits of the implemented patch.  In the end I think we are adding hidden conglomerates, extra boot time work, more database activity to handle&lt;br/&gt;
one case where user queries the system catalogs directly causing problems for that transaction.   I don&apos;t know why users are doing this.  I see&lt;br/&gt;
that this patch includes some new derby specific interfaces, that maybe will stop users from doing that.  For all other cases I believe there&lt;br/&gt;
are much easier changes that don&apos;t require such complex changes.   &lt;/p&gt;

&lt;p&gt;My problems with that solution:&lt;br/&gt;
o yet another system catalog, now we would have 2 for sequences&lt;br/&gt;
o A hidden system catalog is going to present even more problems for users if there is a problem with it.  How do run maintenance on it&lt;br/&gt;
   if necessary.  How do you tell if there is a problem with it?&lt;br/&gt;
o I can&apos;t tell from the patch description, but previous description of this approach seemed to be funneling all sequence work to a single &lt;br/&gt;
   thread/transaction.  This is the wrong architectural direction for derby, we should always be looking to spread this work across many threads,&lt;br/&gt;
   as does current implementation where work is done in the user thread.&lt;br/&gt;
o brand new boot time work.  I would rather not add sql layer garbage collection to the architecture.&lt;br/&gt;
  I know there are existing applications that boot quite often, and any additional work at boot time will cause&lt;br/&gt;
   the performance issues.  &lt;/p&gt;</comment>
                            <comment id="13239613" author="rhillegas" created="Tue, 27 Mar 2012 17:42:08 +0100"  >&lt;p&gt;Thanks for the quick analysis, Mike. Some responses follow:&lt;/p&gt;

&lt;p&gt;&amp;gt;o yet another system catalog, now we would have 2 for sequences&lt;/p&gt;

&lt;p&gt;More files are bad, I understand. But this would be similar to adding another index on syssequences, which is well within the bounds of what we do during a feature release.&lt;/p&gt;

&lt;p&gt;&amp;gt; o A hidden system catalog is going to present even more problems for users if there is a problem with it.  How do run maintenance on it if necessary.  How do you tell if there is a problem with it?&lt;/p&gt;

&lt;p&gt;Another valid question. I see it as being similar to the property conglomerate. How do we do maintenance on the property conglomerate? With SYSGHOST there is a diagnostic VTI for inspecting it and looking for problems, so I think we are in a better situation than we are with the property conglomerate.&lt;/p&gt;

&lt;p&gt;&amp;gt;o I can&apos;t tell from the patch description, but previous description of this approach seemed to be funneling all sequence work to a single  thread/transaction.  This is the wrong architectural direction for derby, we should always be looking to spread this work across many threads, as does current implementation where work is done in the user thread.&lt;/p&gt;

&lt;p&gt;It&apos;s true that everything happens in a single transaction controller. However, a thread switch does not happen. Instead, a context manager is pushed and popped around the use of the shared transaction controller. It&apos;s also true that calls to the GhostController are synchronized, which will single-thread access to SYSGHOST. We could introduce a separate transaction controller per sequence and synchronize on those sequence-specific transaction controllers. The additional single-threading introduced by the current patch funnels all pre-allocation requests for all sequences through the same chokepoint. This might be an issue for an application which has small pre-allocation ranges and many sequences. I don&apos;t know how typical that usage will be or whether it is worth the extra complexity of more transaction controllers.&lt;/p&gt;

&lt;p&gt;&amp;gt;o brand new boot time work.  I would rather not add sql layer garbage collection to the architecture. I know there are existing applications that boot quite often, and any additional work at boot time will cause the performance issues.  &lt;/p&gt;

&lt;p&gt;I doubt that this extra boot cost will be measurable. However, we could add an initial tuple to SYSGHOST which would flag whether there was any boot-time work to do. This would reduce the extra boot cost to one page read.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13241269" author="rhillegas" created="Thu, 29 Mar 2012 15:33:40 +0100"  >&lt;p&gt;Attaching derby-5493-01-ab-plusMoreTests.diff. This rev of the patch adds tests for correctness, user-visible features, and garbage collection. Regression tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;My plan going forward is to address Mike&apos;s concerns:&lt;/p&gt;

&lt;p&gt;1) I will add a header tuple to SYSGHOST so that the boot-time expense of garbage collection is reduced to one page read in most situations.&lt;/p&gt;

&lt;p&gt;2) I will test the concurrency of this solution. If the single transaction controller turns out to be a bottleneck, then I will try adding a transaction controller per sequence.&lt;/p&gt;



&lt;p&gt;Touches the following additional files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;Various upgrade tests.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_5494.sh&lt;/p&gt;

&lt;p&gt;This is a standalone test for the related correctness bug, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;. I didn&apos;t wire this test into the JUnit test runs because the test case requires that you crash the VM.&lt;/p&gt;</comment>
                            <comment id="13241580" author="mikem" created="Thu, 29 Mar 2012 20:56:19 +0100"  >&lt;p&gt;Rick Hillegas (Commented) (JIRA) wrote:&lt;br/&gt;
&amp;gt;     [ &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5493?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13239613#comment-13239613&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-5493?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13239613#comment-13239613&lt;/a&gt; ]&lt;br/&gt;
&amp;gt; Rick Hillegas commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5493&quot; title=&quot;Same value returned by successive calls to a sequence generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5493&quot;&gt;&lt;del&gt;DERBY-5493&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; --------------------------------------&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Thanks for the quick analysis, Mike. Some responses follow:&lt;br/&gt;
&amp;gt;&amp;gt; o yet another system catalog, now we would have 2 for sequences&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; More files are bad, I understand. But this would be similar to adding another index on syssequences, which is well within the bounds of what we do during a feature release.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
We do continue to keep adding to problem here.  This is yet another catalog that is added to db, and everyone has to pay for it even if they&lt;br/&gt;
don&apos;t use the sequence feature.  I know &quot;1&quot; more does not sound like a problem, but I don&apos;t think it is the right direction for derby.&lt;/p&gt;

&lt;p&gt;I know that there are applications out there that use 1000&apos;s of databases.  We have definitely gotten complaints from users in the past just for having 1 background thread per database.  Every resource we add&lt;br/&gt;
on a per database level can get multiplied in some applications, and it&lt;br/&gt;
is sad to add these overheads when the application is not even using the&lt;br/&gt;
feature.  I have the same problem with the new authorization work.  I understand that the system has current problems in this area (roles), but we should not keep digging bigger holes.&lt;br/&gt;
&amp;gt;&amp;gt; o A hidden system catalog is going to present even more problems for users if there is a problem with it.  How do run maintenance on it if necessary.  How do you tell if there is a problem with it?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Another valid question. I see it as being similar to the property conglomerate. How do we do maintenance on the property conglomerate? With SYSGHOST there is a diagnostic VTI for inspecting it and looking for problems, so I think we are in a better situation than we are with the property conglomerate.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
And property conglomerate is a current problem, lets not add to it.  At least with property conglomerate the expectation is very low utilization and there are just not that many properties for the database.  I think the utilization of this new catalog is unbounded, with size relative to&lt;br/&gt;
number of sequences, and maybe number of auto generated keys.&lt;br/&gt;
&amp;gt;&amp;gt; o I can&apos;t tell from the patch description, but previous description of this approach seemed to be funneling all sequence work to a single  thread/transaction.  This is the wrong architectural direction for derby, we should always be looking to spread this work across many threads, as does current implementation where work is done in the user thread.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; It&apos;s true that everything happens in a single transaction controller. However, a thread switch does not happen. Instead, a context manager is pushed and popped around the use of the shared transaction controller. It&apos;s also true that calls to the GhostController are synchronized, which will single-thread access to SYSGHOST. We could introduce a separate transaction controller per sequence and synchronize on those sequence-specific transaction controllers. The additional single-threading introduced by the current patch funnels all pre-allocation requests for all sequences through the same chokepoint. This might be an issue for an application which has small pre-allocation ranges and many sequences. I don&apos;t know how typical that usage will be or whether it is worth the extra complexity of more transaction controllers.&lt;br/&gt;
ok, sounds like the thread issue is not a problem.  If we go with this solution, i would like to understand why a shared single transaction is needed.  Seems like we should just create a new context as we need it.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; o brand new boot time work.  I would rather not add sql layer garbage collection to the architecture. I know there are existing applications that boot quite often, and any additional work at boot time will cause the performance issues.  &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I doubt that this extra boot cost will be measurable. However, we could add an initial tuple to SYSGHOST which would flag whether there was any boot-time work to do. This would reduce the extra boot cost to one page read.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
I would rather see no boot time work, sounds like more complication for not enough benefit.&lt;/p&gt;

&lt;p&gt;I think sequences are new enough that we could implement the following as a fix:&lt;br/&gt;
o do all sequence work, including creating them in a nested transaction  as we did before or in this new context that you have created.&lt;br/&gt;
  wait on all locks in this nested transaction and throw an error if we&lt;br/&gt;
  timeout - don&apos;t escalate.  The error should not be a generic lock timeout error, it should include warnings that sequence generation can fail if users do direct system catalog selects.&lt;/p&gt;

&lt;p&gt;I think this would fix the correctness issue, and solve the &quot;normal&quot; lock contention issue on sequence generation across threads.  It would&lt;br/&gt;
mean sequence creation is autocommitted, which if I understand it is more in keeping with the standard, and would avoid the problem of user&lt;br/&gt;
thread holding locks on system catalogs as part of creating sequences.&lt;/p&gt;

&lt;p&gt;I think the new interface you have as part of your patch would make it even less likely that users would interfere with sequences by doing&lt;br/&gt;
direct system catalog selects. &lt;/p&gt;</comment>
                            <comment id="13242571" author="mikem" created="Fri, 30 Mar 2012 18:31:10 +0100"  >&lt;p&gt;Long term I believe the goal should be to design a solution for sequences that can also be used for generated keys.  I agree with kathey&lt;br/&gt;
that we should look at a phased approach with sequence implementation first and identity column in a subsequent release.  So am going&lt;br/&gt;
to talk about that here, though the jira issue is about sequences.&lt;/p&gt;

&lt;p&gt;I think a simple solution that does the following would address both correctness and performance issues:&lt;br/&gt;
o all &quot;next&quot; operations, including ddl to create them always happen in a nested transaction and they should at worst get 1 lock on 1 row&lt;br/&gt;
   in a system catalog.  I am leaning now that that catalog can not be SYSCOLUMNS as this catalog is just to intertwined with other&lt;br/&gt;
   ddl operations.  I am hoping that it can be SYSSEQUENCES.&lt;br/&gt;
o these operations should be scalable as possible and be designed to allow good performance for large number of thread across large&lt;br/&gt;
   number of processors  across a large number of sequences and generated keys.&lt;/p&gt;

&lt;p&gt;Above I described what I hope works for sequences, basically just move all current sequence operations into nested transaction - need to&lt;br/&gt;
verify a create sequence only adds a single row to a sequence catalog.  Doing all work for sequences in a nested transaction I think &lt;br/&gt;
eliminates the whole garbage collection issue.  Never escalate, throw errors on lock timeouts/deadlocks.  By not escalating we eliminate&lt;br/&gt;
the correctness problems with escalating.&lt;/p&gt;

&lt;p&gt;generated keys are not as easy as we can&apos;t just move all create tables into nested transactions.  My proposal here is that create&lt;br/&gt;
table does not do anything with SYSSEQUENCES, it delays the addition of a row to sequence catalog until first insert.  Again all&lt;br/&gt;
operation next operations are done same as above proposal for sequences. &lt;br/&gt;
note: I think drop table is one exception where we will get lock on sequence row in user transaction, but that seems ok as no&lt;br/&gt;
one should be doing anything on table once we have the table exclusive lock on drop table.  and also note drop table needs to&lt;br/&gt;
handle the sequence row existing or not, both are valid.  &lt;br/&gt;
note2: i think a serialized isolation level is needed to handle on demand creation of the sequences row, to handle two threads trying&lt;br/&gt;
          to create the row.&lt;/p&gt;

&lt;p&gt;I hope current sequence catalog can either support this now, or can with an upgrade.  If we feel we need another catalog I would rather&lt;br/&gt;
see it designed as a replacement for the sequence catalog(s).  At least then new databases only have what is needed, or maybe we&lt;br/&gt;
can even get rid of old catalog on hard upgrade.&lt;/p&gt;

&lt;p&gt;This proposal is not addressing feature of the ghost catalog that prevents users from getting locks on the catalogs by scanning&lt;br/&gt;
them directly.  I am ok with throwing errors on lock timeouts and calling out the likely cause.  Long term it would be better to somehow turn all system catalogs into &quot;ghosts&quot; with respect at least to unintended lock interactions from user direct access. maybe we could change&lt;br/&gt;
system to not get locks on system catalogs direct scans by users. Maybe we should beef up the documentation on not supporting&lt;br/&gt;
direct access to system catalogs and call out locking issues.&lt;/p&gt;</comment>
                            <comment id="13242606" author="rhillegas" created="Fri, 30 Mar 2012 19:00:20 +0100"  >&lt;p&gt;Thanks for continuing the discussion, Mike. I think we may be converging on a simpler solution. I need to think some more about this but I agree that a phased approach is probably safest. I also agree that a common approach which handles both sequences and identity columns is desirable. Some quick responses:&lt;/p&gt;

&lt;p&gt;Here&apos;s a modification of your proposal:&lt;/p&gt;

&lt;p&gt;1) We eliminate the ghost catalog.&lt;/p&gt;

&lt;p&gt;2) But we dedicate a special transaction controller per sequence. All operations (except ddl) on a SYSSEQUENCES tuple happen in the transaction controller which is dedicated to that row. We could also experiment with a single sequence-controlling transaction if people think that the cost of multiple transaction controllers is too high.&lt;/p&gt;

&lt;p&gt;3) We will tell users to stop trying to query SYSSEQUENCES and to, instead, use the new syscs_peek_at_sequence() function. That function will do its work in the transaction controller which is dedicated to the  corresponding SYSSEQUENCES tuple.&lt;/p&gt;

&lt;p&gt;4) The NEXT VALUE FOR invocation will, if necessary, pre-allocate a new range in the SYSSEQUENCE row by using the row&apos;s dedicated transaction controller. Access to this transaction controller will be single-threaded so syscs_peek_at_sequence() and NEXT VALUE FOR should not block each other. Attempts to pre-allocate a range should always succeed unless DDL is happening on the sequence or the user is directly querying the row--we will tell users they shouldn&apos;t do that but should instead use syscs_peek_at_sequence().&lt;/p&gt;

&lt;p&gt;I don&apos;t understand your proposal about how to tackle identity columns. You may be suggesting that we create a sequence (backed by a row in SYSSEQUENCES) for every identity column. I think that is a good approach and it aligns us with the behavior of the SQL Standard, which says that an identity column should behave as though it is implemented with an internal sequence.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13251081" author="rhillegas" created="Tue, 10 Apr 2012 22:35:21 +0100"  >&lt;p&gt;Attaching derby-5493-01-ad-simplerApproach.diff. This patch is not ready for commit. I want to run some throughput tests with it first. The patch implements the approach which we seem to have converged on:&lt;/p&gt;

&lt;p&gt;1) Retains the syscs_peek_at_sequence() function so that users can get the instantaneous value of a sequence without having to query SYSSEQUENCES. I changed the signature of this function. Instead of a single uuid argument, the function now takes a schema and sequence name pair. The idea here is to not tempt users into driving this function with a select from SYSSEQUENCES in order to get the uuid.&lt;/p&gt;

&lt;p&gt;2) Instead of using an invisible conglomerate, pre-allocation happens in the SYSSEQUENCES row (as in 10.8).&lt;/p&gt;

&lt;p&gt;3) Pre-allocation is done by a transaction which is dedicated to the sequence. The transaction expects to do its work immediately, without waiting for a lock, and then to autocommit that work. If the transaction can&apos;t get a lock immediately, it raises a TOO MUCH CONTENTION exception. We seem to agree that TOO MUCH CONTENTION can only arise if sequence DDL is in flight or if the application scans SYSSEQUENCES against our advice.&lt;/p&gt;

&lt;p&gt;I tried a slightly different approach at first. In that approach, pre-allocation happened in a sub-transaction of the session&apos;s execution transaction. That approach fixed this bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5493&quot; title=&quot;Same value returned by successive calls to a sequence generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5493&quot;&gt;&lt;del&gt;DERBY-5493&lt;/del&gt;&lt;/a&gt;) but did not fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;. By using a separate, dedicated transaction, I am able to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Support for the new syscs_peek_at_sequence() function.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;I changed the wording of the TOO MUCH CONTENTION exception so that it points the user at the likely cause of the problem: an open scan of SYSSEQUENCES. I changed this exception to Transaction severity so that the language layer does not get confused during cleanup.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;Re-plumbed the SequenceUpdater as described above.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/SequenceGenerator.java&lt;/p&gt;

&lt;p&gt;Adjusted the wording of some comments.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_5494.sh&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;Tests for the new system function and to verify the fixes to the correctness problems.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_2.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestDbMetaData.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/ij7.out&lt;/p&gt;

&lt;p&gt;Tests which had to change to account for the new system function.&lt;/p&gt;</comment>
                            <comment id="13251176" author="mikem" created="Wed, 11 Apr 2012 00:31:46 +0100"  >&lt;p&gt;I will review these changes more carefully in next few days, this comment is just based on your comment describing the changes. Did you &lt;br/&gt;
understand why this approach fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; vs the subtransaction  approach?  In the normal sub transaction case I was thinking&lt;br/&gt;
that it should wait on locks and return too much contention on a lock timeout, to take care of a expected very short lock waits&lt;br/&gt;
if 2 threads are trying to update the sequence at same time, but maybe the 1 transaction per sequence makes this impossible to happen.  &lt;/p&gt;

&lt;p&gt;What is the expected behavior of creating a sequence, with respect to autocommit and locking?  Is the create done in the nested transaction&lt;br/&gt;
and autocommitted?&lt;/p&gt;

&lt;p&gt;A comment I meant to make before, is that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5495&quot; title=&quot;Master issue to track fixes to sequence generators&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5495&quot;&gt;&lt;del&gt;DERBY-5495&lt;/del&gt;&lt;/a&gt; requires crash testing, and now there is a framework to do that in junit tests - &lt;br/&gt;
see store/OCRecoveryTest.java, basically there is a routine to fork out a process to run a java test procedure and then you just exit which&lt;br/&gt;
will run through the &quot;unclean&quot; shutdown and next test connects running through whatever recovery will do on that unclean shutdown.&lt;/p&gt;
</comment>
                            <comment id="13251537" author="rhillegas" created="Wed, 11 Apr 2012 14:28:44 +0100"  >&lt;p&gt;Thanks for your comments and your offer to review this patch, Mike. Some comments inline...&lt;/p&gt;


&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;&amp;gt;Did you understand why this approach fixes &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; vs the subtransaction approach?&lt;/p&gt;

&lt;p&gt;I don&apos;t understand why the subtransaction approach fails. I have attached a revised repro to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;. That shows the behavior in the current trunk without this patch. The sequence generator durably commits a change to SYSSEQUENCES, which can be seen by another thread. The system-crash reverses this supposedly durable change. The same behavior can be seen in 10.8.2.2 (except that the size of the pre-allocation range is shorter so the second thread sees a slightly different value before the crash).&lt;/p&gt;

&lt;p&gt;I decided to try a dedicated transaction because I knew, from the ghost conglomerate experiment, that that approach fixed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The only variable that I can see is the use of a subtransaction vs the use of an ordinary transaction. You are the expert in the implementation and use of subtransactions. Do you have any theories about what is going on?&lt;/p&gt;

&lt;p&gt;&amp;gt;In the normal sub transaction case I was thinking that it should wait on locks and return too much contention on a lock timeout, to take care of a expected very short lock waits if 2 threads are trying to update the sequence at same time, but maybe the 1 transaction per sequence makes this impossible to happen. &lt;/p&gt;

&lt;p&gt;The 1 transaction per sequence should make this impossible for the cases which I thought we wanted to support. Waiting for the lock would support the following additional use-cases, but I thought that we agreed they were not worth supporting:&lt;/p&gt;

&lt;p&gt;a) Dropping a sequence and then rolling back that transaction.&lt;/p&gt;

&lt;p&gt;b) Scans of SYSSEQUENCES by the application.&lt;/p&gt;

&lt;p&gt;&amp;gt;What is the expected behavior of creating a sequence, with respect to autocommit and locking? Is the create done in the nested tr nsaction and autocommitted?&lt;/p&gt;

&lt;p&gt;Nothing has changed in the CREATE SEQUENCE logic. That work happens in an ordinary user transaction, just as it did in 10.8. At the end of this comment, I attach a script which shows that if you create a sequence and a table but don&apos;t commit that work, then another thread will timeout trying to use those objects.&lt;/p&gt;

&lt;p&gt;This is the behavior which I thought we agreed: DDL happens in ordinary user transactions. It is just the NEXT VALUE FOR which happens in an unusual transaction. Note that SYSCS_PEEK_AT_SEQUENCE doesn&apos;t actually do any transactional work, it just looks at an in-memory value via a synchronized method.&lt;/p&gt;

&lt;p&gt;&amp;gt;A comment I meant to make before, is that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5495&quot; title=&quot;Master issue to track fixes to sequence generators&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5495&quot;&gt;&lt;del&gt;DERBY-5495&lt;/del&gt;&lt;/a&gt; requires crash testing, and now there is a framework to do that in junit tests - see store/OCRecoveryTest.java, basically there is a routine to fork out a process to run a java test procedure and then you just exit which will run through the &quot;unclean&quot; shutdown and next test connects running through whatever recovery will do on that unclean shutdown.&lt;/p&gt;

&lt;p&gt;Great! I will look into making a proper JUnit test out of java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_5494.sh.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;Here is the script which demonstrates the behavior of uncommitted ddl:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos; as dbo;&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_set_database_property( &apos;derby.locks.waitTimeout&apos;, &apos;2&apos; );&lt;/p&gt;

&lt;p&gt;autocommit off;&lt;/p&gt;

&lt;p&gt;create sequence foo;&lt;br/&gt;
create table t( a int );&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db&apos; as otheruser;&lt;/p&gt;

&lt;p&gt;&amp;#8211; times out waiting for the other thread&apos;s ddl to commit&lt;br/&gt;
values next value for foo;&lt;br/&gt;
select * from t;&lt;/p&gt;

&lt;p&gt;set connection dbo;&lt;/p&gt;

&lt;p&gt;commit;&lt;/p&gt;

&lt;p&gt;set connection otheruser;&lt;/p&gt;

&lt;p&gt;&amp;#8211; succeeds&lt;br/&gt;
values next value for foo;&lt;br/&gt;
select * from t;&lt;/p&gt;</comment>
                            <comment id="13252607" author="rhillegas" created="Thu, 12 Apr 2012 18:14:41 +0100"  >&lt;p&gt;Attaching derby-5493-01-ae-simplerApproachWithCrashJUnitTest.diff. This is identical to the previous patch except that it adds a JUnit test case to verify the fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;, using assertLaunchedJUnitTestMethod as Mike suggested. This test case could be added to the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; which Mike is working on.&lt;/p&gt;</comment>
                            <comment id="13252612" author="rhillegas" created="Thu, 12 Apr 2012 18:18:43 +0100"  >&lt;p&gt;The test case was added to SequenceGeneratorTest. It is called test_13_5494(). I have run it successfully on the following platforms:&lt;/p&gt;

&lt;p&gt;o Java 6 on Mac OS X&lt;/p&gt;

&lt;p&gt;o Java 6 on XP&lt;/p&gt;

&lt;p&gt;o PhoneME emulator on an Ubuntu guest operating system on Mac OS X.&lt;/p&gt;</comment>
                            <comment id="13252625" author="mikem" created="Thu, 12 Apr 2012 18:28:11 +0100"  >&lt;p&gt;rick, should I move forward and fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; separate from the patch in this issue?  I have been spending time looking at it rather than reviewing this change? I think i can code rest of that fix today and if tests pass tonight be ready to checkin tommorow.&lt;/p&gt;

&lt;p&gt; I think both my proposed fix and your patch (by using a user level transaction) are both causing the log to be flushed to avoid the crash problem.  For sequences I assume this is necessary and we will have to pay the perfomance cost.  I don&apos;t think there is anyway to solve the crash problem without forcing the log at commit time of the system catalog update.&lt;/p&gt;</comment>
                            <comment id="13252659" author="rhillegas" created="Thu, 12 Apr 2012 18:53:47 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Yes, I think that your fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt; should be pursued independently of the patch in this issue. I believe that your fix will make nested transactions behave in a way which is less surprising. Am I right that your fix will address the correctness problem with identity columns? If so, that is an extra reason to pursue your fix independently, since this issue does not touch the identity logic. Thanks. &lt;/p&gt;</comment>
                            <comment id="13252725" author="rhillegas" created="Thu, 12 Apr 2012 19:50:25 +0100"  >&lt;p&gt;I have run a quick concurrency test against the patch, using the test introduced on derby-4565:&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.perf.clients.Runner \&lt;br/&gt;
    -driver org.apache.derby.jdbc.EmbeddedDriver \&lt;br/&gt;
    -init \&lt;br/&gt;
    -load seq_gen \&lt;br/&gt;
    -load_opts debugging=0,numberOfGenerators=1,tablesPerGenerator=0,insertsPerTransaction=100 \&lt;br/&gt;
    -gen b2b \&lt;br/&gt;
    -threads 10 \&lt;/p&gt;

&lt;p&gt;On my dual-core Mac I&apos;m getting slightly better numbers (average of 291 tx/seconds) than I recorded for this test case on derby-4565. I don&apos;t think the improvement is due to this patch, it is more likely due to the fact that I have a faster machine this time around. However, it encourages me to think that the patch has not harmed the concurrency of sequence generators. I&apos;m looking for a beefier machine with more processors now.&lt;/p&gt;</comment>
                            <comment id="13252741" author="mikem" created="Thu, 12 Apr 2012 20:01:56 +0100"  >&lt;p&gt;ok, i will move forward on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;.  I will not be changing behavior of identity columns.  I think we should look at that as a separate issue, and see if standard is open to interpretation for identity columns. If at all possible I would like to keep the performance optimization currently used with identity columns.  I will add comments in the code to make it obvious what is going on, rather than hidden in store as it is now.   With identity columns I believe the problem is much less vs sequences, at least in normal application expectations.  It seems reasonable to me for applications to not &quot;remember&quot; an identity column value until the inserting transaction commits, or to just use it in same transaction that inserted and produced the value making its use transactional .  I think the current behaviour never results in duplicate identity column values being produced for use in a row.&lt;/p&gt;</comment>
                            <comment id="13252747" author="mikem" created="Thu, 12 Apr 2012 20:07:38 +0100"  >&lt;p&gt;i don&apos;t know anything about mac, do you happen to know if writes are properly sync&apos;d on the machine you are using?  It is pretty obvious if you run a simple  derby program that does a commit per very small insert single threaded.  A properly synced machine will quickly become I/O bound somewhere around &lt;br/&gt;
30-100 i/o&apos;s per second on regular ide or scsi hardware. maybe just posting results of 1 thread vs 10 threads would be enough in your test, i don&apos;t know much about the other configurations.&lt;/p&gt;</comment>
                            <comment id="13252750" author="rhillegas" created="Thu, 12 Apr 2012 20:11:13 +0100"  >&lt;p&gt;I don&apos;t think that there is any wiggle room in the Standard, but I also think that the correctness problem with identity columns is not one that most users are going to care about. As you say, users are most likely going to be interested in never seeing duplicates in primary key columns. The only edge case I can think of is an application which was coded before we introduced sequences and which created a table with one column, an identity column, used to simulate a unique id generator for the whole application. That edge case would be concerned about the correctness problem with identity columns. Thanks.&lt;/p&gt;</comment>
                            <comment id="13253404" author="rhillegas" created="Fri, 13 Apr 2012 15:21:27 +0100"  >&lt;p&gt;Thanks for that warning about the write-cache on Mac OSX, Mike. I believe that the write-cache is enabled by default, so that would account for the high transaction rate.&lt;/p&gt;

&lt;p&gt;I have run a similar experiment on a beefier machine (32 processor, Solaris). The transaction rate is in the range which you would expect for a disabled write-cache. This experiment ran 32 threads:&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.perf.clients.Runner \&lt;br/&gt;
    -driver org.apache.derby.jdbc.EmbeddedDriver \&lt;br/&gt;
    -init \&lt;br/&gt;
    -load seq_gen \&lt;br/&gt;
    -load_opts debugging=0,numberOfGenerators=1,tablesPerGenerator=0,insertsPerTransaction=100 \&lt;br/&gt;
    -gen b2b \&lt;br/&gt;
    -threads 32 \&lt;/p&gt;

&lt;p&gt;I ran the experiment 3 times against the current trunk and then 3 times against the patch (averaging the results). With the old sequence management (what&apos;s currently in the trunk), I got 49 tx/sec.. With the patch, I got 75 tx/sec..&lt;/p&gt;</comment>
                            <comment id="13253913" author="mikem" created="Sat, 14 Apr 2012 01:49:03 +0100"  >&lt;p&gt;meant to take ownership of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;, not this one.&lt;/p&gt;</comment>
                            <comment id="13255786" author="rhillegas" created="Tue, 17 Apr 2012 19:11:30 +0100"  >&lt;p&gt;Attaching derby-5493-01-af-usersubtran.diff. This patch fixes the concurrency problems with the previous patch which were disclosed by the experiments described on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5471&quot; title=&quot;Stress test for identity columns and sequence seem to be taking longer on trunk compared to 10.8.2.2 RC3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5471&quot;&gt;&lt;del&gt;DERBY-5471&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The fix is to go back to updating SYSSEQUENCES in a subtransaction of the user&apos;s execution transaction. This means that this patch does not fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;. So I won&apos;t commit this patch until Mike commits his work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;. At that point, I will adjust the patch to account for the fact that Mike is going to include the regression test case for that issue which was introduced by the earlier rev of this patch.&lt;/p&gt;

&lt;p&gt;With this version of the patch the tx/sec results are slightly better than the comparable experiments on 10.8.2.2 and trunk:&lt;/p&gt;

&lt;p&gt;o 10 threads with preallocation=20: 99 vs 92 on trunk&lt;/p&gt;

&lt;p&gt;o 10 threads with preallocation=5: 78 vs 75 on 10.8.2.2&lt;/p&gt;

&lt;p&gt;o 1 thread with preallocation=20: 45 vs 44 on trunk&lt;/p&gt;

&lt;p&gt;o 1 thread with preallocation=5: 36 vs 35 on 10.8.2.2&lt;/p&gt;</comment>
                            <comment id="13255821" author="mikem" created="Tue, 17 Apr 2012 19:47:34 +0100"  >&lt;p&gt;I committed a fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;.  I was going to try to do some more performance tests, but turns out my windowsXP laptop has write cache enabled, and I can&apos;t seem to get it turned off as the control box is greyed out.  I am going to find another machine&lt;br/&gt;
but figured since all tests pass, it would be better to get code in trunk so you can work off it, and we can see full effect of both&lt;br/&gt;
changes.   I expect the 5494 change to have a &lt;br/&gt;
negative affect on performance of sequences.  The worst case will be 1 thread, preallocation=0 (or 1 I don&apos;t know which gives you no preallocation).  I would assume less and less affect the larger the preallocation, or more users.&lt;/p&gt;

&lt;p&gt;I would not be surprised if the throughput goes back to same problem you were seeing with user transaction vs nested transaction, now that the nested user transaction will wait on the commit like the user transaction.  If all threads need to wait for the preallocation unit of work step, and we now have added a synchonous I/O to that process, then would expect throughput to drop.  &lt;/p&gt;</comment>
                            <comment id="13256480" author="rhillegas" created="Wed, 18 Apr 2012 13:24:54 +0100"  >&lt;p&gt;Attaching derby-5493-01-ag-mergedWith5494.diff. This is the patch after syncing with the trunk and merging with Mike&apos;s fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5494&quot; title=&quot;Same value returned by successive calls to a sequence generator flanking an unorderly shutdown.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5494&quot;&gt;&lt;del&gt;DERBY-5494&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point the tests run cleanly. However, as Mike suspected, concurrency has returned to the situation with the 01-ae patch, what was reported on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5471&quot; title=&quot;Stress test for identity columns and sequence seem to be taking longer on trunk compared to 10.8.2.2 RC3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5471&quot;&gt;&lt;del&gt;DERBY-5471&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a follow-on patch, I think I will boost the pre-allocation size to 100 unless someone objects.&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 1327471.&lt;/p&gt;</comment>
                            <comment id="13256962" author="rhillegas" created="Wed, 18 Apr 2012 22:07:15 +0100"  >&lt;p&gt;Attaching derby-5493-02-aa-boostPreallocationTo100.diff. This boosts the preallocation size to 100 in order to get slightly better concurrency than we saw in 10.8. Tests passed cleanly for me. Committed at subversion revision 1327682.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java&lt;/p&gt;

&lt;p&gt;The actual change.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;Boosting the preallocation size caused a combinatorial explosion in the number of cases stressed in the boundary test for sequences. I pared that test back to a manageble set of cases.&lt;/p&gt;</comment>
                            <comment id="13257724" author="rhillegas" created="Thu, 19 Apr 2012 20:39:05 +0100"  >&lt;p&gt;Attaching the first rev of a release note for this issue.&lt;/p&gt;</comment>
                            <comment id="13258383" author="rhillegas" created="Fri, 20 Apr 2012 18:15:55 +0100"  >&lt;p&gt;I believe the work on this issue is done.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12530579">DERBY-5495</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12440016">DERBY-4437</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12551640">DERBY-5697</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12520126" name="derby-5493-01-aa-correctnessPlusPeekerPlusTest.diff" size="78282" author="rhillegas" created="Tue, 27 Mar 2012 15:44:30 +0100"/>
                            <attachment id="12522169" name="derby-5493-01-ad-simplerApproach.diff" size="42140" author="rhillegas" created="Tue, 10 Apr 2012 22:35:21 +0100"/>
                            <attachment id="12522450" name="derby-5493-01-ae-simplerApproachWithCrashJUnitTest.diff" size="44933" author="rhillegas" created="Thu, 12 Apr 2012 18:14:41 +0100"/>
                            <attachment id="12522992" name="derby-5493-01-af-usersubtran.diff" size="42552" author="rhillegas" created="Tue, 17 Apr 2012 19:11:30 +0100"/>
                            <attachment id="12523181" name="derby-5493-01-ag-mergedWith5494.diff" size="40971" author="rhillegas" created="Wed, 18 Apr 2012 13:24:54 +0100"/>
                            <attachment id="12523256" name="derby-5493-02-aa-boostPreallocationTo100.diff" size="4304" author="rhillegas" created="Wed, 18 Apr 2012 22:07:15 +0100"/>
                            <attachment id="12523390" name="releaseNote.html" size="4228" author="rhillegas" created="Thu, 19 Apr 2012 20:39:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 27 Mar 2012 16:12:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>216312</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0a3j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35454</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>