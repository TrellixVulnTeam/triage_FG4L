<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:28:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5344/DERBY-5344.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5344] updateClob2 test in LobLimitsTest gets OutOfMemoryError on updateRow with embedded</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5344</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;On converting LobLimits.java to LobLimitsTest I noticed this disabled test:&lt;br/&gt;
There is  disabled test in largedata.LobLimitsTest.java which is a carryover from largedata.LobLimits.java&lt;/p&gt;

&lt;p&gt;        // Disabled for now, this will materialize, will open&lt;br/&gt;
        // jira for it.&lt;br/&gt;
        // updateClob2(&quot;ClobTest #8.1&quot;,conn,selectClob,BIG_LOB_SZ,0,0,10,1,CHARDATAFILE);&lt;/p&gt;

&lt;p&gt;Enabling the test for embedded I noticed it still  can get an out of memory.  (I actually think I did run it once successfully)&lt;br/&gt;
but on my second full run of the suite I saw it fail.&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:412)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4409)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3788)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.updateClob2(LobLimitsTest.java:1219)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.testClob2(LobLimitsTest.java:304)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:611)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:116)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:172)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:138)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	... 37 more&lt;br/&gt;
Caused by: java.lang.OutOfMemoryError&lt;br/&gt;
	at org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.expandBuffer(DynamicByteArrayOutputStream.java:244)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.write(DynamicByteArrayOutputStream.java:78)&lt;br/&gt;
	at java.io.DataOutputStream.write(DataOutputStream.java)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLChar.writeUTF(SQLChar.java:922)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLChar.writeClobUTF(SQLChar.java:960)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLClob.writeExternal(SQLClob.java:647)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6325)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logRow(StoredPage.java:4006)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(UpdateOperation.java:255)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.UpdateOperation.&amp;lt;init&amp;gt;(UpdateOperation.java:106)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(LoggableActions.java:80)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(StoredPage.java:8602)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(BasePage.java:1064)&lt;br/&gt;
	at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(GenericConglomerateController.java:486)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(RowChangerImpl.java:523)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(UpdateResultSet.java:569)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:264)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:306)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3772)&lt;br/&gt;
	... 29 more&lt;/p&gt;


&lt;p&gt;The test passes on client and in LobLimitsLiteTest  in embedded. To reproduce run largedata.LobLimitsTest, commenting out the below condition:&lt;br/&gt;
       if (!(usingEmbedded()  &amp;amp;&amp;amp; BIGGEST_LOB_SZ  == _2GB)) &lt;/p&gt;
{
            updateClob2(&quot;ClobTest #8.1&quot;,selectClob,BIG_LOB_SZ,0,0,10,CHARDATAFILE);
        }
&lt;p&gt;  or likely you can get a smaller standalone test case by adjusting the sizes and adjusting down the heap with -Xmx&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12514721">DERBY-5344</key>
            <summary>updateClob2 test in LobLimitsTest gets OutOfMemoryError on updateRow with embedded</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="4" iconUrl="https://issues.apache.org/jira/images/icons/statuses/reopened.png" description="This issue was once resolved, but the resolution was deemed incorrect. From here issues are either marked assigned or resolved.">Reopened</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Tue, 19 Jul 2011 23:53:50 +0100</created>
                <updated>Wed, 3 Jul 2013 16:26:41 +0100</updated>
                                            <version>10.9.1.0</version>
                                                    <component>Store</component>
                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13069183" author="kmarsden" created="Thu, 21 Jul 2011 21:18:36 +0100"  >&lt;p&gt;I enabled the test and see the out of memory with embedded still but client ran ok.  I will disable the test only for embedded and mention this bug number for now. I am searching Jira to try to find this bug as the comment said one would be filed.  Perhaps it was overlooked.  I will search a bit more and then file a bug if needed.&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:412)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4409)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3788)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.updateClob2(LobLimitsTest.java:1219)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.testClob2(LobLimitsTest.java:304)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;/p&gt;</comment>
                            <comment id="13069630" author="kmarsden" created="Fri, 22 Jul 2011 18:24:00 +0100"  >&lt;p&gt;Changed the title of this test to reflect the actual bug with updateClob2.  &lt;/p&gt;</comment>
                            <comment id="13472671" author="myrna" created="Tue, 9 Oct 2012 20:39:32 +0100"  >&lt;p&gt;I thought I&apos;d check if this is still an issue.&lt;br/&gt;
It took a little effort (and time, because the full suite takes a while) - at first, I got no OOMs, then I tried to run the full largedata._Suite with -Xmx32M, and I got OOMs everywhere (it couldn&apos;t even create the summary line in the output).&lt;br/&gt;
I finally commented out Derby5624Test, LobLimitsLiteTest, and LobLimitsClientTest from _Suite, and prevented the Clob tests in LobLimitsTest from running by adding an extra &apos;t&apos; to the fixture names. And of course I had the if clause (to prevent UpdateClob2 from running with Embedded) commented out.&lt;br/&gt;
With -Xmx32M I still got an OOM in another test, but with -Xmx128M I did see the OOM in updateRow:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2375)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4420)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3799)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.updateClob2(LobLimitsTest.java:1214)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.largedata.LobLimitsTest.test_04_Clob2(LobLimitsTest.java:315)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:611)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	... 43 more&lt;br/&gt;
Caused by: java.lang.OutOfMemoryError&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLChar.readExternal(SQLChar.java:1243)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLClob.readExternal(SQLClob.java:823)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLChar.getString(SQLChar.java:765)&lt;br/&gt;
	at org.apache.derby.iapi.types.SQLChar.setFrom(SQLChar.java:1753)&lt;br/&gt;
	at org.apache.derby.iapi.types.DataType.setValue(DataType.java:528)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.updateRow(EmbedResultSet.java:3779)&lt;br/&gt;
	... 35 more&lt;/p&gt;

&lt;p&gt;Looking at the test, this doesn&apos;t appear to be a test issue. The clob is inserted and passed in as a stream, so not materialized by the test. Marking Component Store.&lt;/p&gt;</comment>
                            <comment id="13472809" author="myrna" created="Tue, 9 Oct 2012 23:29:16 +0100"  >&lt;p&gt;Attaching a jar file with the javacore and heapdump files of the test fixture when it hit the OOM.&lt;/p&gt;</comment>
                            <comment id="13474247" author="kmarsden" created="Thu, 11 Oct 2012 16:46:52 +0100"  >&lt;p&gt;I think this must have been closed accidentally&lt;/p&gt;</comment>
                            <comment id="13474261" author="kmarsden" created="Thu, 11 Oct 2012 16:58:19 +0100"  >&lt;p&gt;Attaching the heapdump and a screen shot of heap analyzer for the run I did in July. &lt;/p&gt;

&lt;p&gt;The IBM heap analyzer can be found at:&lt;br/&gt;
&lt;a href=&quot;https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=4544bafe-c7a2-455f-9d43-eb866ea60091&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.ibm.com/developerworks/mydeveloperworks/groups/service/html/communityview?communityUuid=4544bafe-c7a2-455f-9d43-eb866ea60091&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; The heapdump shows a SQLClob with String (presumably value of the underlying SQLChar) of size 209.716,216 bytes, so presumably a problem with materialization but the thing I don&apos;t really understand is why this size when the actual lobs in the test are much larger.  I am thinking probably  something  is happening in EmbedResultSet updateRow()  related to setting the parameters of the constructed WHERE CURRENT OF statement in this code:&lt;br/&gt;
//using quotes around the cursor name to preserve case sensitivity&lt;br/&gt;
            updateWhereCurrentOfSQL.append(&quot; WHERE CURRENT OF &quot; + &lt;br/&gt;
                    IdUtil.normalToDelimited(getCursorName()));&lt;/p&gt;

&lt;p&gt;            StatementContext currSC = lcc.getStatementContext();&lt;br/&gt;
            Activation parentAct = null;&lt;/p&gt;

&lt;p&gt;            if (currSC != null) &lt;/p&gt;
{
                parentAct = currSC.getActivation();
            }

&lt;p&gt;            // Context used for preparing, don&apos;t set any timeout (use 0)&lt;br/&gt;
            statementContext = lcc.pushStatementContext(isAtomic, false, updateWhereCurrentOfSQL.toString(), null, false, 0L);&lt;/p&gt;

&lt;p&gt;            // A priori, the new statement context inherits the activation of&lt;br/&gt;
            // the existing statementContext, so that that activation ends up&lt;br/&gt;
            // as parent of the new activation &apos;act&apos; created below, which will&lt;br/&gt;
            // be the activation of the pushed statement context.&lt;br/&gt;
            statementContext.setActivation(parentAct);&lt;/p&gt;

&lt;p&gt;            org.apache.derby.iapi.sql.PreparedStatement ps = lcc.prepareInternalStatement(updateWhereCurrentOfSQL.toString());&lt;br/&gt;
            Activation act = ps.getActivation(lcc, false);&lt;/p&gt;

&lt;p&gt;            statementContext.setActivation(act);&lt;/p&gt;

&lt;p&gt;            //in this for loop we are assigning values for parameters in sql constructed earlier with columnname=?,... &lt;br/&gt;
            for (int i=1, paramPosition=0; i&amp;lt;=rd.getColumnCount(); i++) &lt;/p&gt;
{ 
                if (columnGotUpdated[i-1])  //if the column got updated, do following
                    act.getParameterValueSet().getParameterForSet(paramPosition++).setValue(updateRow.getColumn(i));
            }


&lt;p&gt;But that theory may be off as I would have expected that in that case it would be setValue() that would have been the method that would have run out of memory rather than updateRow(). Maybe setValue got inlined?&lt;/p&gt;


&lt;p&gt;Myrna and I also looked at her recent heapdump in heap analyzer.  Hers was quite odd as there was an orphaned char[] of approximately 39MB (she ran with a smaller heap). I am thinking maybe in that case the large string was in the process of being garbage collected and so had no parents but was still there.  Still it shows an inappropriately large string is being built up.&lt;/p&gt;




</comment>
                            <comment id="13474264" author="kmarsden" created="Thu, 11 Oct 2012 17:04:18 +0100"  >&lt;p&gt;Marking High value fix. lob materialization issues are frequently hit and reported by users.  Many have been fixed but looks like this one remains.  I hope some one will pick it up for the 10.8 and 10.9 maintenance releases.&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12352050">DERBY-1903</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12548480" name="DERBY-5344_dump.jar" size="538481" author="myrna" created="Tue, 9 Oct 2012 23:29:16 +0100"/>
                            <attachment id="12548756" name="heapanalyzer.20110720.215042.24230.0001.jpg" size="208321" author="kmarsden" created="Thu, 11 Oct 2012 16:58:19 +0100"/>
                            <attachment id="12548757" name="heapdump.20110720.zip" size="629557" author="kmarsden" created="Thu, 11 Oct 2012 16:58:19 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 9 Oct 2012 19:39:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24785</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0fmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36349</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>