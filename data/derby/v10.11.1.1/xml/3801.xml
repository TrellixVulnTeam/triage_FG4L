<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:19:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3801/DERBY-3801.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3801] Convert &quot;org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql&quot; to junit. </title>
                <link>https://issues.apache.org/jira/browse/DERBY-3801</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Convert &quot;org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql&quot; to junit. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12401144">DERBY-3801</key>
            <summary>Convert &quot;org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql&quot; to junit. </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yunlee">Yun Lee</assignee>
                                    <reporter username="thinkallday">Junjie Peng</reporter>
                        <labels>
                    </labels>
                <created>Mon, 28 Jul 2008 10:09:30 +0100</created>
                <updated>Mon, 29 Nov 2010 14:23:28 +0000</updated>
                            <resolved>Fri, 3 Sep 2010 17:43:11 +0100</resolved>
                                                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12618702" author="thinkallday" created="Thu, 31 Jul 2008 15:45:59 +0100"  >&lt;p&gt;Ask for help!&lt;br/&gt;
The patch derby-3801-1-patch.txt is part of testing case for holdCursorIJ.sql. I have trouble with translating the third test case, whch is from Line 84 to Line 112 in holdCursorIJ.sql. When I run the test case with TestRunner, an exception is thrown, indicating that &lt;/p&gt;

&lt;p&gt;1) testDropTableWithOpenHoldCursor(org.apache.derbyTesting.functionTests.tests.l&lt;br/&gt;
ang.HoldCursorIJTest)junit.framework.ComparisonFailure: Unexpected SQL state. ex&lt;br/&gt;
pected:&amp;lt;42Y5...&amp;gt; but was:&amp;lt;X0X9...&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDB&lt;br/&gt;
CTestCase.java:760)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDB&lt;br/&gt;
CTestCase.java:809)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTest&lt;br/&gt;
Case.java:941)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTest&lt;br/&gt;
Case.java:922)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.lang.HoldCursorIJTest.tes&lt;br/&gt;
tDropTableWithOpenHoldCursor(HoldCursorIJTest.java:228)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.&lt;br/&gt;
java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAcces&lt;br/&gt;
sorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
104)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;I don&apos;t know why. Because I have expected SQLException X0X95 in Line 228 of org.apache.derbyTesting.functionTests.tests.l&lt;br/&gt;
ang.HoldCursorIJTest.&lt;/p&gt;

&lt;p&gt;Is something wrong with my IJ?&lt;br/&gt;
Thank you!&lt;/p&gt;</comment>
                            <comment id="12618901" author="myrna" created="Fri, 1 Aug 2008 00:16:56 +0100"  >&lt;p&gt;I looked a little at this, and what you&apos;re seeing is actually expected behavior difference between DerbyNetClient and embedded. DerbyNetClient passes; embedded fails. And indeed, if I modify your suite method to do this: &lt;br/&gt;
  ...&lt;br/&gt;
          return TestConfiguration.clientServerSuite(        &lt;br/&gt;
          //return TestConfiguration.defaultSuite(&lt;br/&gt;
		HoldCursorIJTest.class);&lt;br/&gt;
    }&lt;br/&gt;
the test passes. If I use TestConfiguration.embeddedSuite(HoldCursorIJTest.class) we 2 passes, and 1 failure: the error you saw - for the embedded run.&lt;/p&gt;

&lt;p&gt;There are 2 (actually 3, but let&apos;s ignore the DerbyNet one for the purpose of this discussion) canons (variations of a master file):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;...functionTests/master/HoldCursorIJ.out&lt;/li&gt;
	&lt;li&gt;...functionTests/master/DerbyNetClient/HoldCursorIJ.out&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you diff the two original masters you&apos;ll see that in the affected area, embedded gives error X0X95 and DerbyNetClient gives 42Y55.&lt;br/&gt;
There are comments in the .sql (and thus in the .out files) that explain some of the difference in behavior; in derbyNetClient, the cursor (on the server) is already closed, and thus, the table gets dropped earlier.&lt;br/&gt;
I wasn&apos;t familiar with this difference, so I looked up in the svn browser (starting at the top of trunk: &lt;a href=&quot;http://svn.apache.org/viewvc/db/derby/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/db/derby/&lt;/a&gt;)  where these comments were added and found this change: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=377367&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=377367&lt;/a&gt;.&lt;br/&gt;
This refers to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-821&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-821&lt;/a&gt;, and there we can see Knut Anders&apos; explanation for this difference.&lt;/p&gt;

&lt;p&gt;All that said, I have some misgivings on how you&apos;re approaching this conversion.&lt;br/&gt;
There is already a hold-cursor junit test (...functionTests/tests/lang/holdCursorTest, from original holdCursorJava.&lt;br/&gt;
Because there&apos;s such a clear reference to IJ I think the purpose of this test was to do some testing of the hold cursor functionality in ij. So, I&apos;d suggest converting this test using the ScriptTest mechanism. Examples of how this can be done are:&lt;br/&gt;
...functionTests/tests/tools/ijRunScriptTest&lt;br/&gt;
...functionTests/tests/tools/ToolScripts&lt;br/&gt;
...functionTests/tests/nist/NistScripts&lt;br/&gt;
...functionTests/tests/derbynet/NetIjTest&lt;br/&gt;
You&apos;d have to find a way to make a separate comparison between  NetworkServer/DerbyNetClient vs. Embedded. Maybe the easiest is to have two tests...&lt;/p&gt;

&lt;p&gt;Myrna&lt;/p&gt;</comment>
                            <comment id="12619044" author="thinkallday" created="Fri, 1 Aug 2008 16:34:26 +0100"  >&lt;p&gt;Myrna , thanks for your verbose advices!&lt;br/&gt;
I&apos;m still not so clear about:&lt;br/&gt;
1. For my code in testDropTableWithOpenHoldCursor() Line 227-231, &lt;br/&gt;
                         try&lt;/p&gt;
{
		dropTable(&quot;t1&quot;);
	    }catch (SQLException e) {
		assertSQLState(&quot;X0X95&quot;, e);
	    }&lt;br/&gt;
which is in embed mode,  when I want to drop a table with an open hold cursor, It should fail with a SQLException &quot;X0X95 &quot;. I have expected it ,but in fact, it prompts &quot;.ComparisonFailure: Unexpected SQL state. ex &lt;br/&gt;
pected:&amp;lt;42Y5...&amp;gt; but was:&amp;lt;X0X9...&amp;gt; &quot;, why is it not &quot;.ComparisonFailure: Unexpected SQL state. expected:&amp;lt;X0X95...&amp;gt; but was:&amp;lt;******.&amp;gt; &quot; ?&lt;br/&gt;
Furthermore, if I change the coed into&lt;br/&gt;
  try{
		dropTable(&quot;t1&quot;);
	    }
&lt;p&gt;catch (SQLException e) &lt;/p&gt;
{
		assertSQLState(&quot;0000&quot;, e);
	    }
&lt;p&gt;The exception message is still &quot;ComparisonFailure: Unexpected SQL state. expected:&amp;lt;42Y5...&amp;gt; but was:&amp;lt;X0X9...&amp;gt; &quot;.  why is it not &quot;ComparisonFailure: Unexpected SQL state. expected:&amp;lt;0000.&amp;gt; but was:&amp;lt;******.&amp;gt; &quot; ?&lt;br/&gt;
Is there something wrong with my code?&lt;/p&gt;

&lt;p&gt;2. I have read through the four tools you mentioned. They are all good tools, but I feel puzzled, if translating holdCursorIJ.sql use tools, will we  lose the junit view for this test on some degree? &lt;/p&gt;

&lt;p&gt;Thank you!&lt;br/&gt;
Junjie&lt;/p&gt;</comment>
                            <comment id="12619730" author="myrna" created="Mon, 4 Aug 2008 23:26:51 +0100"  >&lt;p&gt;Hi Junjie,&lt;/p&gt;

&lt;p&gt;re 1. I see what you&apos;re asking now, sorry for the confusion earlier...The problem is that you were using the BaseJDBCTestCase method &apos;dropTable()&apos;. This method &quot;takes over&quot; and the test doesn&apos;t get to check on the (if) resulting SQLException. In your block: &lt;br/&gt;
            ...&lt;br/&gt;
            }else{&lt;br/&gt;
	    try&lt;/p&gt;
{
		dropTable(&quot;t1&quot;);
	    }
&lt;p&gt;catch (SQLException e) &lt;/p&gt;
{
		assertSQLState(&quot;X0X95&quot;, e);
	    }
&lt;p&gt;The &apos;assertSQLState(&quot;X0X95&quot;,e); is never reached, instead, the assert in the stack trace is originating from the BaseJDBCTestCase.dropTable method.&lt;br/&gt;
As you&apos;re expecting a specific error out of the drop table statement, you&apos;d have to spell out the actual drop table statement, like you do elsewhere.&lt;/p&gt;

&lt;p&gt;re 2. The script mechanism still is junit. If you follow through from e.g. LangScripts.java you see the extending goes via ScriptTestCase&amp;lt;-CanonTestCase&amp;lt;-BaseJDBCTestCase. Most of the other junit tests for derby extend BaseJDBCTestCase. BaseJDBCTestCase extends BaseTestCase extends junit.framework.TestCase.&lt;/p&gt;

&lt;p&gt;Still, you raise a good point. Ideally, we&apos;d not use master files, as the maintenance of those can get tedious. The CanonTestCase tests only work if there is only 1 master file, which is why in this case we&apos;d have to do something special - the HoldCursorIJ test gives different results for embedded and DerbyNetClient...&lt;br/&gt;
But to test language aspects specific to ij, this is the best the community has come up with.&lt;/p&gt;

&lt;p&gt;Maybe the best approach is to strip the ij/script test down so the .sql only does very basic testing of creating the cursors (&apos;get ... cursor ...&apos;, &apos;next&apos;,...) which gives the same result for DerbyNetClient and embedded. The majority of test cases can then be added as fixtures to the existing HoldCursorTest.&lt;/p&gt;</comment>
                            <comment id="12619770" author="thinkallday" created="Tue, 5 Aug 2008 04:12:58 +0100"  >&lt;p&gt;Thanks, Myrna!&lt;br/&gt;
I have looked into dropaTable(), and understood how it works. My first question is OK with your instruction.&lt;br/&gt;
I agree with your comment  &quot;Maybe the best approach is to strip the ij/script test down so the .sql only does very basic testing of creating the cursors (&apos;get ... cursor ...&apos;, &apos;next&apos;,...) which gives the same result for DerbyNetClient and embedded. The majority of test cases can then be added as fixtures to the existing HoldCursorTest. &quot;  However, I have a question:&lt;br/&gt;
I have complete the whole translation in java code, may I post the patch instead of doing some translation with tools such as ScriptTestCase?&lt;/p&gt;</comment>
                            <comment id="12619903" author="myrna" created="Tue, 5 Aug 2008 15:38:13 +0100"  >&lt;p&gt;For clarity sake it&apos;s probably better not to have too many ways of doing the same thing, but why don&apos;t you attach your patch and the community can decide whether it looks ok or not. I&apos;ll certainly take a look.&lt;/p&gt;</comment>
                            <comment id="12621136" author="thinkallday" created="Sat, 9 Aug 2008 13:52:01 +0100"  >&lt;p&gt;Hi, Myrna!&lt;/p&gt;

&lt;p&gt; I have finished the translation, but something is wrong with the sixth test case, it&apos;s the method of testPositionedUpdateWithHoldCursor(). If it is deleted, the other test cases can run well. It seems, testPositionedUpdateWithHoldCursor() has not been execute to it&apos;s end, and then tearDown() begins to execute.&lt;/p&gt;

&lt;p&gt;I have spent a lot of time debugging, but still very puzzled, Please give me a hand!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;Regard &lt;br/&gt;
Junjie&lt;/p&gt;</comment>
                            <comment id="12625546" author="myrna" created="Tue, 26 Aug 2008 00:27:09 +0100"  >&lt;p&gt;I see you&apos;ve made no attempt at creating a ScriptTest. I think you believe a ScriptTest is a &apos;tool&apos; to convert the test to junit, and it may have started as a quick way to run certain .sql ways in junit, but it is currently the best way to execute the language constructs that are specific to ij.&lt;br/&gt;
Yes, we have in the charter to use only standard SQL, but there are some extensions that are specific to Derby and they have to be tested also.&lt;/p&gt;

&lt;p&gt;Language clauses as &quot;get cursor with hold&quot;, &quot;next&quot;, &quot;update where current of&quot;.&lt;br/&gt;
So, it&apos;s important to keep a test that verifies appropriate behavior when such things are used in ij. Thus, we &lt;b&gt;do&lt;/b&gt; need a HoldCursorIJTest, but it should be extending ScriptTestCase.&lt;/p&gt;

&lt;p&gt;However, the effort you made does not need to be thrown away - you should be able to identify which test cases (fixtures) in what you&apos;ve converted now are suitable for adding to the existing HoldCursorTest, or maybe a HoldCursorTest2,  and which ones should stay in .sql form to be run through a ScriptTestCase test called HoldCursorIJTest.&lt;br/&gt;
Where there&apos;s a difference in behavior between Embedded and DerbyNetClient it cannot be run as a ScriptTestCase; those should be fixtures in a test without &apos;IJ&apos; in the name.&lt;/p&gt;

&lt;p&gt;Now, for the fixture you had trouble with. I also had to look for a while before I spotted what was going on&lt;/p&gt;

&lt;p&gt;The fixture was failing (in multiple places) but because of the teardown, we&apos;d never see the asserts; instead, all we&apos;d see is complaints that the drop table t1 would not work.&lt;br/&gt;
It would be better to not use the setUp() and teardown() methods and instead, use a decorateSQL() method. See other tests that use a cleanDatabaseTestSetup. &lt;/p&gt;

&lt;p&gt;Then, you  made a tiny mistake in comparing after the first successful update - the expected value that gets updated is of the first row, not the second row. The expected value should be: &lt;tt&gt;&quot;1&quot;,&quot;12&quot;}, {&quot;2&quot;,&quot;2&quot;&lt;/tt&gt;. This mistake stays in all the assertFullResultSet calls.&lt;br/&gt;
Further, the error message resulting from the failed attempt is different for DerbyNetClient in the converted format, it&apos;s no longer SQLState 24000.&lt;br/&gt;
Then, the SQLState out of the call after the ResultSet has been closed is XCL16, not 42X30.&lt;/p&gt;

&lt;p&gt;Further, you missed checking the value after jdk4.next(). &lt;br/&gt;
Do something like &lt;br/&gt;
    assertEquals(1,rs.getInt(1)); &lt;br/&gt;
    assertEquals(2, rs.getInt(2));&lt;/p&gt;

&lt;p&gt;Finally two nits: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the suite() method could be structured a bit differently, it was hard to figure out which tests were client only, embedded only, and which ones both.&lt;/li&gt;
	&lt;li&gt;Embedded is not always spelled with &apos;dd&apos;&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12706678" author="kmarsden" created="Thu, 7 May 2009 01:10:29 +0100"  >&lt;p&gt;Unassigning this issue. I don&apos;t think Junjie is working on it now. Junjie, if I am mistaken, please reassign yourself.&lt;/p&gt;</comment>
                            <comment id="12742567" author="espinha" created="Wed, 12 Aug 2009 21:44:51 +0100"  >&lt;p&gt;Myrna,&lt;/p&gt;

&lt;p&gt;I have been working on this test conversion basing my work on Junjie&apos;s patch and have only now noticed that you had added useful comments to this issue. &lt;/p&gt;

&lt;p&gt;On this last comment of yours, you said:&lt;br/&gt;
&quot;...you should be able to identify which test cases (fixtures) in what you&apos;ve converted now are suitable for adding to the existing HoldCursorTest...&quot;&lt;/p&gt;

&lt;p&gt;Looking at the HoldCursorTest though, I can see that all of the cases where a dual behavior is required (for embedded and client/server) are actually already covered. There&apos;s only just one case that does not seem to be covered, but I think this is actually only useful for testing the ij syntax. The case is when we are trying the &apos;WITH CS&apos; clause as follows:&lt;br/&gt;
get with nohold cursor jdk1 as &apos;SELECT * FROM t1 WITH CS&apos;;&lt;/p&gt;

&lt;p&gt;So, to bottom-line this, I&apos;m thinking of removing these fixtures from this HoldCursorIJTest (since they already exist in HoldCursorTest), extend it from ScriptTestCase and build on from that. I have never done one of these tests before but I should be able to get hints from other already existing tests with the same characteristics.&lt;/p&gt;</comment>
                            <comment id="12742607" author="myrna" created="Wed, 12 Aug 2009 23:10:26 +0100"  >&lt;p&gt;That sounds good. &lt;br/&gt;
I think the main thing to keep in mind going forward is to make sure we still test the syntax specific to ij.&lt;br/&gt;
Perhaps it would even make sense to move the test to the tools directory? I can be convinced either way.&lt;/p&gt;

&lt;p&gt;Thanks for picking up this test conversion.&lt;/p&gt;</comment>
                            <comment id="12857513" author="myrna" created="Thu, 15 Apr 2010 20:56:53 +0100"  >&lt;p&gt;Tiago, looks  like you&apos;re not actually working on this (anymore)?  If you have saved some interim state of your efforts that would help a next person.&lt;/p&gt;</comment>
                            <comment id="12858679" author="espinha" created="Mon, 19 Apr 2010 21:49:37 +0100"  >&lt;p&gt;Sorry Myrna for leaving this assigned.&lt;/p&gt;

&lt;p&gt;At this point I&apos;m not working on it anymore, as I have a new GSoC project that I have applied with.&lt;/p&gt;

&lt;p&gt;I seem to have a patch for this issue in my trunk, but I am 100% sure that it is not meant for committing and should be taken with a grain of salt. Unfortunately I honestly can&apos;t remember anymore what I had done and what I hadn&apos;t, but I&apos;ll still attach it anyway.&lt;/p&gt;

&lt;p&gt;If whoever picks this up has any questions, I might be able to help somehow.&lt;/p&gt;</comment>
                            <comment id="12880629" author="yunlee" created="Sun, 20 Jun 2010 14:09:45 +0100"  >
&lt;p&gt;I would like to pick this issue! Junjie has done a lot of work on this issue, his work will help me a lot.&lt;/p&gt;

&lt;p&gt;After looking into the code, I think the current HoldCursorTest.java referred in Derby-2422 (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2422&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-2422&lt;/a&gt;) can not do test on client mode expectably. I have attached a patch for this, please check it! Thanks!&lt;/p&gt;</comment>
                            <comment id="12881135" author="yunlee" created="Tue, 22 Jun 2010 10:10:56 +0100"  >&lt;p&gt;I have looked into this issue for some days, and done some converting in pure JUnit form. Eventually, I agreed with the first comment given by Myrna: &quot;Because there&apos;s such a clear reference to IJ I think the purpose of this test was to do some testing of the hold cursor functionality in ij. So, I&apos;d suggest converting this test using the ScriptTest mechanism&quot;, especially with Language clauses as &quot;get cursor with hold&quot;, &quot;next&quot;, &quot;update where current of&quot;.&lt;/p&gt;

&lt;p&gt;Furthur, in my work, I&apos;ve found, pure JUnit form will mask some details, for example, the detailed prompt for XCL16 in embeded mode is different from the one in ClientServer mode. The difference will be discarded in pure JUnit form, while clear in ScriptTest mechanism.&lt;/p&gt;

&lt;p&gt;I have attached derby-3801-4.patch, in which I have added HoldCursorIJTest extending ScriptTest to do tests on both mode of Derby.&lt;/p&gt;

&lt;p&gt;However, there&apos;s something wrong with subclasses of ScriptTest in my testing environment. When running HoldCursorIJTest, each of the tests fails because of a lot of messy codes &apos;?&apos;.&lt;/p&gt;

&lt;p&gt;D:\derby\test&amp;gt;java junit.textui.TestRunner org.apache.derbyTesting.functionTests&lt;br/&gt;
.tests.lang.HoldCursorIJTest&lt;br/&gt;
.F.F&lt;br/&gt;
Time: 5.406&lt;br/&gt;
There were 2 failures:&lt;br/&gt;
1) holdCursorIJ(org.apache.derbyTesting.functionTests.tests.lang.HoldCursorIJTes&lt;br/&gt;
t)junit.framework.ComparisonFailure: Output at line 19 expected:&amp;lt;[0 rows inserte&lt;br/&gt;
d/updated/deleted]&amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;????????? 0 ?&amp;#93;&lt;/span&gt;&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon&lt;br/&gt;
(CanonTestCase.java:106)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Scr&lt;br/&gt;
iptTestCase.java:198)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
2) holdCursorIJ(org.apache.derbyTesting.functionTests.tests.lang.HoldCursorIJTes&lt;br/&gt;
t)junit.framework.ComparisonFailure: Output at line 19 expected:&amp;lt;[0 rows inserte&lt;br/&gt;
d/updated/deleted]&amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;????????? 0 ?&amp;#93;&lt;/span&gt;&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon&lt;br/&gt;
(CanonTestCase.java:106)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Scr&lt;br/&gt;
iptTestCase.java:198)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 2,  Failures: 2,  Errors: 0&lt;/p&gt;


&lt;p&gt;D:\derby\test&amp;gt;&lt;/p&gt;

&lt;p&gt;The similiar problem exists in other subclasses of ScriptTestCase, such as NistScripts,ToolScripts.&lt;/p&gt;

&lt;p&gt;Is this caused by the setting of Character encoding? How to resolve this problem?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12881137" author="yunlee" created="Tue, 22 Jun 2010 10:14:17 +0100"  >&lt;p&gt;I&apos;m sorry to have missed the patch. Attached it now!&lt;/p&gt;</comment>
                            <comment id="12881960" author="kmarsden" created="Thu, 24 Jun 2010 00:38:52 +0100"  >&lt;p&gt;Do you see other, already checked in tests fail?   you might be able to force the issue by running with -Dfile.encoding=Cp1252, but I thought that the tests were careful to use a consistent encoding. I know that they pass on z/OS where the default encoding is different.&lt;/p&gt;</comment>
                            <comment id="12882018" author="yunlee" created="Thu, 24 Jun 2010 04:21:58 +0100"  >&lt;p&gt;Yes, Kathey. I have tested many subclasses of ScriptTestCase, and all of them failed. I think it&apos;s related to Chinese character set, as I have seen Chinese chars when testing. As to &quot;-Dfile.encoding=Cp1252&quot;, could you please show me where to insert it, it seems not correct to run a pure JUnit test class with RunTest.&lt;/p&gt;

&lt;p&gt;D:\derby\test&amp;gt;java -Dfile.encoding=Cp1252  org.apache.derbyTesting.functionTests&lt;br/&gt;
.harness.RunTest derbynet/NetIjTest.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: NetIjTest jdk1.5.0_16 2010-06-24 11:20:39 ***&lt;br/&gt;
0 add&lt;br/&gt;
&amp;gt; .F.F&lt;br/&gt;
&amp;gt; There were 2 failures:&lt;br/&gt;
&amp;gt; 1) -p(org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest)junit.fra&lt;br/&gt;
mework.AssertionFailedError: SQL script missing: org/apache/derbyTesting/functio&lt;br/&gt;
nTests/tests/derbynet/-p.sql&lt;br/&gt;
&amp;gt; 2) D:\derby\test\NetIjTest\NetIjTest_app.properties(org.apache.derbyTesting.fu&lt;br/&gt;
nctionTests.tests.derbynet.NetIjTest)junit.framework.AssertionFailedError: SQL s&lt;br/&gt;
cript missing: org/apache/derbyTesting/functionTests/tests/derbynet/D:\derby\tes&lt;br/&gt;
t\NetIjTest\NetIjTest_app.properties.sql&lt;br/&gt;
&amp;gt; FAILURES!!!&lt;br/&gt;
&amp;gt; Tests run: 2,  Failures: 2,  Errors: 0&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   NetIjTest jdk1.5.0_16 2010-06-24 11:20:43 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;D:\derby\test&amp;gt;java junit.textui.TestRunner org.apache.derbyTesting.functionTests&lt;br/&gt;
.tests.derbynet.NetIjTest&lt;br/&gt;
.F&lt;br/&gt;
Time: 5.422&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) testclientij(org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest)j&lt;br/&gt;
unit.framework.ComparisonFailure: Output at line 34 expected:&amp;lt;[ERROR 42X05: Tabl&lt;br/&gt;
e/View &apos;APP.NOTTHERE&apos; does not exist.]&amp;gt; but was:&amp;lt;[?? 42X05????&lt;cite&gt;APP.NOTTHERE&lt;/cite&gt;??&lt;br/&gt;
?]&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon&lt;br/&gt;
(CanonTestCase.java:106)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(Scr&lt;br/&gt;
iptTestCase.java:198)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:&lt;br/&gt;
109)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57&lt;br/&gt;
)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 1,  Errors: 0&lt;/p&gt;


&lt;p&gt;D:\derby\test&amp;gt;&lt;/p&gt;
</comment>
                            <comment id="12882179" author="kmarsden" created="Thu, 24 Jun 2010 16:09:48 +0100"  >&lt;p&gt;I think Rick is more likely on track with the locale than I was with the  the encoding. If  you confirm the Locale is the problem, perhaps the tests should set the default locale with &lt;br/&gt;
Locale.setDefault(Locale.US) to avoid this problem for developers in the future.    I don&apos;t know if it makes sense to set it and restore it within ScriptTestCase or do something more global.  It would be good to open a separate issue for that fix.&lt;/p&gt;

</comment>
                            <comment id="12896056" author="yunlee" created="Fri, 6 Aug 2010 15:50:17 +0100"  >&lt;p&gt;Please check derby-3801-5.patch, it can work well, thanks!&lt;/p&gt;

&lt;p&gt;As a subclass of ScriptTestCase can only process a canon file and the results of running holdCursorIJ.sql in two modes are different, I have created holdCursorIJ_client.sql and holdCursorIJ_embed.sql identifical with holdCursorIJ.sql, accordingly I&apos;ve created holdCursorIJ_client.out and holdCursorIJ_embed.out.&lt;/p&gt;</comment>
                            <comment id="12896712" author="myrna" created="Mon, 9 Aug 2010 23:27:00 +0100"  >&lt;p&gt;The .stat shows more files than appear to be in the .patch file; after applying the patch, I&apos;m missing holdCursorIJ_embed.sql. The corresponding master file, holdCursorIJ_embed.out, appears based on an earlier version, but I cannot find such a file in the repository.&lt;/p&gt;

&lt;p&gt;And a final nit: functionTests/tests/lang/holdCursorIJ_app.properties can be deleted.&lt;/p&gt;

&lt;p&gt;Can you please generate a new patch? Please svn update before generating this new patch...&lt;/p&gt;</comment>
                            <comment id="12896854" author="yunlee" created="Tue, 10 Aug 2010 12:31:35 +0100"  >&lt;p&gt;Hi, Myrna. Thanks for your checking. I have created a new patch based on the newest revision. Please check it, thanks!&lt;/p&gt;</comment>
                            <comment id="12897077" author="myrna" created="Tue, 10 Aug 2010 23:57:29 +0100"  >&lt;p&gt;Thanks Yun, the patch applied cleanly this time.&lt;/p&gt;

&lt;p&gt;On closer consideration, I think there are still some issues.&lt;/p&gt;

&lt;p&gt;One of the purposes of converting the tests to junit is to eliminate the multiple masters. Multiple masters are troublesome to maintain, for every change needs to be duplicated.&lt;br/&gt;
This background aspect was quite likely not clear from this issue...&lt;br/&gt;
But keeping it in mind, you can see this goal has not been reached. There are still two masters, and in addition, there are now two identical scripts...And further, in addition to having LangScripts.java executing a list of sql scripts, there is now an additional separate script test executing 2 scripts...&lt;/p&gt;

&lt;p&gt;I don&apos;t think this is the way to go.&lt;/p&gt;

&lt;p&gt;A better way to approach this, would be to look at the differences between output for embedded and network server, and eliminate these from the .sql file.&lt;/p&gt;

&lt;p&gt;In the long run, that would be by fixing the differences, but in the short term, for each difference, you should log a bug for the difference in behavior, and link the bug to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt; (master for embedded/network server differences). Then, for each difference, you should create a non-ij junit test case - where possible in an existing test, and remove the section from the ij script. &lt;br/&gt;
The endresult would be a sql test case that gives the same output with embedded as network server, and that can be added to the list of tests in LangScripts.java.&lt;/p&gt;

&lt;p&gt;I can see 6 differences between holdCursorIJ.out and DerbyNetClient/holdCursorIJ.out (we can safely ignore DerbyNet/holdCursorIJ.out - IBM no longer supports that driver with the latest versions of derby).&lt;br/&gt;
1. displaywidth differences. This is documented in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1371&quot; title=&quot;Remove test harness special handling  for handle varying client  column widths&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1371&quot;&gt;&lt;del&gt;DERBY-1371&lt;/del&gt;&lt;/a&gt;, and is marked as won&apos;t fix. Nothing to do there - the conversion to junit takes care of those diffs.&lt;br/&gt;
2. difference in text for Error message XCL16 between client and embedded.&lt;br/&gt;
    This should get corrected by making the messages identical.&lt;br/&gt;
    I did not find an existing bug on this issue.&lt;br/&gt;
    You should log a new bug (improvement) for this difference (and link it to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-301&quot; title=&quot;test harness does not work correctly when colons or spaces are in the directory name&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-301&quot;&gt;&lt;del&gt;DERBY-301&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
    I took a superficial look, and it seems to me that it might be possible to figure out the operations in which CLIENT_RESULT_SET_NOT_OPEN (XCL16.S.1 in loc.messages.xml and shared.common.reference.SQLState.java) is generated, and pass them on. &lt;br/&gt;
    A separate test case (test cases) should be added in some junit test somewhere.&lt;br/&gt;
3. drop table fails with embedded because resultset is open (and 3 subsequent differences)&lt;br/&gt;
    This is probably the result of the fact that data gets prefetched on the server.&lt;br/&gt;
    I am not certain whether there is a bug here or not. The prefetching is ok, that&apos;s documented &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; intended behavior, but should the cursors be closed? A bug should be logged for this.&lt;br/&gt;
    Anyway, there&apos;s nothing in particular ij about this part of the test. The test case should be pulled out into a (existing?) junit test to show this difference, and just remove that part from the script (that is, close the cursors, then drop the table).&lt;br/&gt;
4. change of isolation level succeeds with client because cursor is already closed.&lt;br/&gt;
    Again, should the cursor be closed? It&apos;s really the same kind of issue as of difference 3.&lt;br/&gt;
    A new bug should be logged, the test case showing the difference should get added to a different test, and the ij test script should be massaged so that client and embedded give the same output.&lt;br/&gt;
5. error message difference - XJ202 on client (invalid cursorname) vs. 42X30 (cursor not found) with embedded. Again, a new bug can be logged, the test case extracted, and removed from the holdCursorIJ script. The specific language syntax is tested already in the script, just before.&lt;br/&gt;
6. error 24000 with embedded, update successful with client.&lt;br/&gt;
    The difference so far are only minor bugs, but this one looks a bit more serious.&lt;br/&gt;
    It appears, that the client may be doing this wrong - &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-610&quot; title=&quot;After commit, holdable result set cursor used in positioned update can&amp;#39;t  access row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-610&quot;&gt;&lt;del&gt;DERBY-610&lt;/del&gt;&lt;/a&gt; was logged against embedded but was found to behave correctly.&lt;br/&gt;
    Again,  that section of the test should go into a separate junit test case somewhere.&lt;br/&gt;
    Or it can be commented out for the time being in the holdCursorIJ script.&lt;/p&gt;

&lt;p&gt;Once these bugs have been created, and the subtests have found a new home, there should be only one &apos;holdCursorIJ.sql&apos; script; this can then be added to LangScripts.java.&lt;/p&gt;

&lt;p&gt;And - final nit - the converted test needs to be removed from functionTests/suites/derbylang.runall and functionTests/suites/derbynetmats.runall.&lt;/p&gt;

&lt;p&gt;I realize you&apos;ve put some effort into this issue (you did note the XCL16 difference before), and it&apos;s aggravating that now there&apos;s a lot more work. But it&apos;s shown to be part of the conversion trouble that we often do expose more issues during the conversion, and I feel the end result will be a better maintainable test set.&lt;/p&gt;</comment>
                            <comment id="12897243" author="yunlee" created="Wed, 11 Aug 2010 13:52:04 +0100"  >&lt;p&gt;Thanks for your detailed advice, Myrna. I would love to push the work forward. I will create issues, and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3801&quot; title=&quot;Convert &amp;quot;org.apache.derbyTesting.functionTests.tests.lang.holdCursorIJ.sql&amp;quot; to junit. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3801&quot;&gt;&lt;del&gt;DERBY-3801&lt;/del&gt;&lt;/a&gt; itself will be blocked until the new issues are resolved.&lt;/p&gt;</comment>
                            <comment id="12897269" author="yunlee" created="Wed, 11 Aug 2010 14:58:58 +0100"  >&lt;p&gt;I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4767&quot; title=&quot;Detailed prompt for Error XCL16 is different between Client and Embed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4767&quot;&gt;&lt;del&gt;DERBY-4767&lt;/del&gt;&lt;/a&gt; for Error message XCL16.&lt;/p&gt;

&lt;p&gt;As you said &lt;br/&gt;
&quot;2. difference in text for Error message XCL16 between client and embedded.&lt;br/&gt;
    This should get corrected by making the messages identical.&lt;br/&gt;
    I did not find an existing bug on this issue.&lt;br/&gt;
    You should log a new bug (improvement) for this difference (and link it to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-301&quot; title=&quot;test harness does not work correctly when colons or spaces are in the directory name&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-301&quot;&gt;&lt;del&gt;DERBY-301&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
    I took a superficial look, and it seems to me that it might be possible to figure out the operations in which CLIENT_RESULT_SET_NOT_OPEN (XCL16.S.1 in loc.messages.xml and shared.common.reference.SQLState.java) is generated, and pass them on.&lt;br/&gt;
    A separate test case (test cases) should be added in some junit test somewhere. &quot;&lt;/p&gt;

&lt;p&gt;I have a question about this. Need I change Derby client code to match behavior with Embedded driver? Does it mean that in this issue, CLIENT_RESULT_SET_NOT_OPEN(XCL16.S.1) should be replaced by LANG_RESULT_SET_NOT_OPEN(XCL16.S.0)? And then, why did DERBY created two different(but very similiar) messages?&lt;/p&gt;</comment>
                            <comment id="12898179" author="yunlee" created="Fri, 13 Aug 2010 11:46:24 +0100"  >&lt;p&gt;Hi, Myrna. I have a question on this comment snippet.&lt;/p&gt;

&lt;p&gt;&quot;3. drop table fails with embedded because resultset is open (and 3 subsequent differences)&lt;br/&gt;
    This is probably the result of the fact that data gets prefetched on the server.&lt;br/&gt;
    I am not certain whether there is a bug here or not. The prefetching is ok, that&apos;s documented &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; intended behavior, but should the cursors be closed? A bug should be logged for this.&lt;br/&gt;
    Anyway, there&apos;s nothing in particular ij about this part of the test. The test case should be pulled out into a (existing?) junit test to show this difference, and just remove that part from the script (that is, close the cursors, then drop the table). &quot;&lt;/p&gt;

&lt;p&gt;However, in line 206 of org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest, we see the testDropTable() method. &lt;br/&gt;
          public void testDropTable() throws SQLException &lt;/p&gt;
{
	        setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);
	        final String dropTable = &quot;DROP TABLE T1&quot;;
	        Statement stmt1 = createStatement();
	        Statement stmt2 = createStatement();
	        ResultSet rs = stmt1.executeQuery(&quot;SELECT * FROM T1&quot;);
	        rs.next();
	        assertStatementError(&quot;X0X95&quot;, stmt2,dropTable);
	        
	        //	dropping t1 should fail because there is an open cursor on t1
	        assertStatementError(&quot;X0X95&quot;, stmt2,dropTable);
	        commit();
	        
	        // cursors are held over commit, so dropping should still fail
	        assertStatementError(&quot;X0X95&quot;, stmt2,dropTable);
	        rs.close();

	        // cursor is closed, so this one should succeed
	        stmt2.executeUpdate(dropTable);
	        stmt1.close();
	        stmt2.close();
	        rollback();
	    }

&lt;p&gt;Here, DERBY performs the same in both mode. Does the difference just occur in IJ or is there any other configuration to trigger it?&lt;/p&gt;</comment>
                            <comment id="12898188" author="yunlee" created="Fri, 13 Aug 2010 12:31:32 +0100"  >&lt;p&gt;You have commented:&lt;br/&gt;
&quot;4. change of isolation level succeeds with client because cursor is already closed.&lt;br/&gt;
    Again, should the cursor be closed? It&apos;s really the same kind of issue as of difference 3.&lt;br/&gt;
    A new bug should be logged, the test case showing the difference should get added to a different test, and the ij test script should be massaged so that client and embedded give the same output. &quot;&lt;/p&gt;

&lt;p&gt;However, in testSetTransactionIsolationInHoldCursor() method of org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest,,&lt;br/&gt;
&quot;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Call setTransactionIsolation with holdable cursor open?&lt;br/&gt;
     */&lt;br/&gt;
    public void testSetTransactionIsolationInHoldCursor() throws SQLException&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    {&lt;br/&gt;
        Connection conn = getConnection();&lt;br/&gt;
        try &lt;/p&gt;
{

            PreparedStatement ps = conn.prepareStatement(&quot;SELECT * from TAB1&quot;);
            ResultSet rs = ps.executeQuery();
            rs.next();
            // setTransactionIsolation should fail because we have
            // a holdable cursor open
            conn
                    .setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
            rs.next(); // to fix DERBY-1108. Else the GC for ibm15 will clean
                        // up the ResultSet Object
        }
&lt;p&gt; catch (SQLException se) &lt;/p&gt;
{
            assertSQLState(&quot;Expected Exception if held cursor is open&quot;,
                    &quot;X0X03&quot;, se);
            return;
        }
&lt;p&gt;        fail(&quot;FAIL: setTransactionIsolation() did not throw exception with open hold cursor&quot;);&lt;br/&gt;
    }&quot;&lt;/p&gt;

&lt;p&gt;Here, DERBY performs the same in both mode. Does the difference just occur in IJ or is there any other configuration to trigger it? &lt;/p&gt;</comment>
                            <comment id="12898500" author="myrna" created="Sat, 14 Aug 2010 02:41:17 +0100"  >&lt;p&gt;Hi Yun,&lt;/p&gt;

&lt;p&gt;Those are good finds.&lt;/p&gt;

&lt;p&gt;The difference is in the data - in the holdCursorIJ.sql test, there are only 2 tiny rows in the table.&lt;br/&gt;
In the junit tests, the tables both have many rows. The prefetching is done in chunks of 32K.&lt;br/&gt;
So, in the ij test, the entire table is prefetched by the server; in the junit tests you found, the prefetch is done, but there&apos;s more data, so the cursor must stay open.&lt;/p&gt;

&lt;p&gt;(I verified the behavior by making a copy of the two fixtures you found, but with the following table:&lt;br/&gt;
create table smallt1 (c1 int, c2 int);&lt;br/&gt;
insert into smallt1 values(1, 1);&lt;br/&gt;
insert into smallt1 values(2, 2);&lt;br/&gt;
and indeed, the tests then failed for network server, indicating no error was thrown).&lt;/p&gt;

&lt;p&gt;Thus, the difference is not a bug, and as you found areas where they&apos;re being tested, you can safely remove those test cases from the HoldCursorIJ script.&lt;/p&gt;</comment>
                            <comment id="12898917" author="yunlee" created="Mon, 16 Aug 2010 13:20:49 +0100"  >&lt;p&gt;Hi, Myrna. I also created Issue &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4777&quot; title=&quot;Different behavior in Client and Embedded modes when update on an invalid cursor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4777&quot;&gt;&lt;del&gt;DERBY-4777&lt;/del&gt;&lt;/a&gt; fro difference 5 and sumitted a patch, please check it, thanks!&lt;/p&gt;</comment>
                            <comment id="12898931" author="yunlee" created="Mon, 16 Aug 2010 14:36:03 +0100"  >&lt;p&gt;I have also created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4778&quot; title=&quot;In Client mode, holdable resultset cursor used in positioned update shouldn&amp;#39;t access row with autocommit=true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4778&quot;&gt;DERBY-4778&lt;/a&gt; for difference 6, but I don&apos;t know where is the entry for it. Please give some advice, thanks very much!&lt;/p&gt;</comment>
                            <comment id="12905069" author="myrna" created="Wed, 1 Sep 2010 17:05:21 +0100"  >&lt;p&gt;Attaching a patch for this issue which takes advantage of the fixes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4776&quot; title=&quot;Correct wrong operation for LANG_RESULT_SET_NOT_OPEN  in ScrollInsensitiveResultSet.getPreviousRow() from &amp;#39;next&amp;#39; to &amp;#39;previous&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4776&quot;&gt;&lt;del&gt;DERBY-4776&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4777&quot; title=&quot;Different behavior in Client and Embedded modes when update on an invalid cursor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4777&quot;&gt;&lt;del&gt;DERBY-4777&lt;/del&gt;&lt;/a&gt;, and in which the other tests sections that showed a difference between client and embedded have been removed (as they were found to be no bugs, or at least, known behavior, and the tests were also already executed in junit tests elsewhere), and in one case commented out (for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4778&quot; title=&quot;In Client mode, holdable resultset cursor used in positioned update shouldn&amp;#39;t access row with autocommit=true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4778&quot;&gt;DERBY-4778&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If there are no concerns about this, I&apos;ll commit this in the next couple of days.&lt;/p&gt;</comment>
                            <comment id="12905958" author="myrna" created="Fri, 3 Sep 2010 17:43:11 +0100"  >&lt;p&gt;I committed by patch derby-3801-7. resolving this issue.&lt;/p&gt;</comment>
                            <comment id="12905959" author="myrna" created="Fri, 3 Sep 2010 17:44:48 +0100"  >&lt;p&gt;closing. I don&apos;t think Junjie monitors the list.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12467879">DERBY-4713</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12416700">DERBY-4090</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12461296">DERBY-4609</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12471691">DERBY-4778</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12471291">DERBY-4767</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12471682">DERBY-4777</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12453598" name="DERBY-3801-7.diff" size="22546" author="myrna" created="Wed, 1 Sep 2010 17:05:20 +0100"/>
                            <attachment id="12453597" name="DERBY-3801-7.stat" size="718" author="myrna" created="Wed, 1 Sep 2010 17:05:20 +0100"/>
                            <attachment id="12442230" name="DERBY-3801-Tiago.patch" size="26151" author="espinha" created="Mon, 19 Apr 2010 21:49:37 +0100"/>
                            <attachment id="12387287" name="derby-3801-1-patch.txt" size="7456" author="thinkallday" created="Thu, 31 Jul 2008 15:45:59 +0100"/>
                            <attachment id="12387872" name="derby-3801-2.patch" size="24691" author="thinkallday" created="Sat, 9 Aug 2008 13:52:01 +0100"/>
                            <attachment id="12387873" name="derby-3801-2.stat" size="90" author="thinkallday" created="Sat, 9 Aug 2008 13:52:01 +0100"/>
                            <attachment id="12447680" name="derby-3801-4.patch" size="3187" author="yunlee" created="Tue, 22 Jun 2010 10:14:16 +0100"/>
                            <attachment id="12451431" name="derby-3801-5.patch" size="66517" author="yunlee" created="Fri, 6 Aug 2010 15:50:17 +0100"/>
                            <attachment id="12451432" name="derby-3801-5.stat" size="908" author="yunlee" created="Fri, 6 Aug 2010 15:50:17 +0100"/>
                            <attachment id="12451669" name="derby-3801-6.patch" size="87036" author="yunlee" created="Tue, 10 Aug 2010 12:31:35 +0100"/>
                            <attachment id="12451670" name="derby-3801-6.stat" size="1078" author="yunlee" created="Tue, 10 Aug 2010 12:31:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 31 Jul 2008 23:16:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31007</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0odj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37767</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>