<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:37 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4343/DERBY-4343.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4343] ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4343</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;For &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;, I thought I would do a little testing to understand the server round trips in various scenarios for pooled connections.  So I wrote the small attached program ConnReuse.java and hit this assertion in client:&lt;/p&gt;


&lt;p&gt;Exception in thread &quot;main&quot; org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolationX(Connection.java:987)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.setTransactionIsolation(Connection.java:915)&lt;br/&gt;
        at org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(LogicalConnection.java:253)&lt;br/&gt;
        at TestConnReuse.main(TestConnReuse.java:32)&lt;br/&gt;
---------------&lt;/p&gt;

&lt;p&gt;To run the program on trunk:&lt;br/&gt;
java org.apache.derby.drda.NetworkServerControl start&lt;br/&gt;
java TestConnReuse.&lt;/p&gt;

&lt;p&gt;This needs more investigation, but I thought I would go ahead and log the bug.  I tried this only on  trunk.  I  have not yet&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Tried it on the branches.&lt;/li&gt;
	&lt;li&gt;Tried it with Lily&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt; patch.&lt;/li&gt;
	&lt;li&gt;Tried it with embedded.&lt;/li&gt;
	&lt;li&gt;Tried actually doing something with the prior logical connection which might be related.&lt;/li&gt;
&lt;/ul&gt;

</description>
                <environment></environment>
        <key id="12432457">DERBY-4343</key>
            <summary>ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lilywei">Lily Wei</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_backport_reject_10_5</label>
                            <label>derby_backport_reject_10_6</label>
                    </labels>
                <created>Fri, 7 Aug 2009 01:16:12 +0100</created>
                <updated>Thu, 25 Aug 2011 23:20:16 +0100</updated>
                            <resolved>Thu, 25 Aug 2011 23:20:16 +0100</resolved>
                                    <version>10.5.3.1</version>
                                    <fixVersion>10.7.1.1</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12740325" author="kmarsden" created="Fri, 7 Aug 2009 01:17:47 +0100"  >&lt;p&gt;Once the test case is working it would be interesting to try this with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;  with drda tracing on to better understand the server round trips with that change.&lt;/p&gt;</comment>
                            <comment id="12740410" author="lilywei" created="Fri, 7 Aug 2009 06:21:04 +0100"  >&lt;p&gt;I tried in on 10.5 branches. The test ASSERT too.&lt;/p&gt;

&lt;p&gt;I tried it with my &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt; patch. The test passed. I trun the trace on with -Dderby.drda.traceAll=true. However, nothing interesting write to derby.log.&lt;/p&gt;</comment>
                            <comment id="12740453" author="kristwaa" created="Fri, 7 Aug 2009 10:02:05 +0100"  >&lt;p&gt;I believe I understand why the assert happens.&lt;br/&gt;
When obtaining the pooled connection for the third time, the variable isolation_ is reset by the following code in Connection.completeReset:&lt;br/&gt;
        if (closeStatementsOnClose) {&lt;br/&gt;
            // NOTE: This is to match previous behavior.&lt;br/&gt;
            //       Investigate and check if it is really necessary.&lt;br/&gt;
            this.isolation_ = TRANSACTION_UNKNOWN;&lt;br/&gt;
            java.util.Set keySet = openStatements_.keySet();&lt;br/&gt;
            for (java.util.Iterator i = keySet.iterator(); i.hasNext()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
{
                Object o = i.next();
                ((Statement) o).reset(closeStatementsOnClose);
            }
&lt;p&gt;        } else &lt;/p&gt;
{

When setTransactionIsolation is called, and actually executed, the server doesn&apos;t send any piggybacked update because the level hasn&apos;t changed. This means the isolation_ will remain as UNKNOWN until getTransactionIsolation is called or a different statement causing a change of the isolation level is executed.

DERBY-4314 causes the assert to never be reached by (in this case) querying the server about the isolation level and then short-circuiting setTransactionIsolation:
+        // Derby-4314 fix, the client driver should acted like embedded
+        if (level == getTransactionIsolationX())
+            return;

For completeness, removing the return in this case would also make the assert pass, since getTransactionIsolationX would have updated the value of isolation_.

My take on this assert is that it is doesn&apos;t have any consequences &quot;in the real world&quot;. Next time the user asks for the isolation level, it will be fetched from the server and a correct value will be returned.

I&apos;m +1 for patch DERBY-4314-5.diff, but I&apos;m not yet confident resetting the value to READ_COMMITTED is the best solution (as of today, I think it is a correct change though).
The patch won&apos;t improve the performance, it will just move the round-trip. In some cases I believe it will make it worse for the initial setTransactionIsolation call, depending on whether the value being set is READ_COMMITTED or not. If it is, we still get one round-trip (check + short-circuit), but if it isn&apos;t we get two (check + change).
Note that the situation is slightly different when the client side JDBC statement cache is enabled.

This means that for better performance, we need additional changes.
Not thinking ahead, the simplest change would be to assume that the default isolation level will be READ_COMMITTED for ever. If this turns out to be false in the future, we may get out of it using version checks.
A better, but more demanding solution, would be to obtain the default isolation level at initial connection time, for instance using the existing piggybacking feature. This still requires a version check in the server, but gives us more flexibility [1].
On top of this we have the XA scenario, which I understand requires some extra care to avoid returning stale/incorrect values.

Thoughts?


[1] I&apos;m thinking about optimizing this situation in Connection.completeReset:
       }
&lt;p&gt; else {&lt;br/&gt;
            // Must reset transaction isolation level if it has been changed.&lt;br/&gt;
            if (isolation_ != Connection.TRANSACTION_READ_COMMITTED) &lt;/p&gt;
{
                // This might not fare well with connection pools, if it has
                // been configured to deliver connection with a different
                // isolation level, i.e. it has to set the isolation level again
                // when it returns connection to client.
                // TODO: Investigate optimization options.
                setTransactionIsolationX(Connection.TRANSACTION_READ_COMMITTED);
            }
&lt;p&gt;    With the described approach, the default level could be configured in the connection url with an attribute. I do not know if this is allowed by the relevant standards, or if it is something we ever want to do.&lt;/p&gt;</comment>
                            <comment id="12740549" author="kmarsden" created="Fri, 7 Aug 2009 14:36:15 +0100"  >&lt;p&gt;Hi Lily,&lt;br/&gt;
You should specify -Dderby.drda.traceAll=true on the server startup or in derby.properties, not on the client invocation and then will see the trace in a file called Server1.trace.  Alternately, you can use the client side tracing.  See&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&lt;/a&gt;&lt;br/&gt;
for more tracing information.&lt;/p&gt;

&lt;p&gt;Thanks Kristian for the analysis. I am changing to minor since you see no impact with insane builds.  The rest I will try to digest later,&lt;/p&gt;</comment>
                            <comment id="12740806" author="lilywei" created="Sat, 8 Aug 2009 02:06:51 +0100"  >&lt;p&gt;Thank to Kathey, I turn the tracing with ClientConnectionPoolDataSource.setTraceDirectory(&quot;client&quot;); And, the trace file is attached. The test first call setTransactionIsolation with TRANSACTION_READ_COMMITTED. On second connection, the test call setTransactionIsolation with TRANSACTION_READ_COMMITTED. On the third connection, test call setTransactionIsolation with TRANSACTION_READ_UNCOMMITTED.&lt;/p&gt;

&lt;p&gt;From tracing, I see the test go through setTransactionIsolation(2) call and then go to getTransactionIsolationX. On second connection, the test call setTrasactionIsolation(2) and then go to getTransactionIsolationX. On the third connection, the test call setTransactionIsolation(1) and go to getTransactionIsolationX().&lt;/p&gt;

&lt;p&gt;This is done with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt; patch. &lt;/p&gt;

&lt;p&gt;Thank Kristian for your detail analysis. I believe we should chage isolation = TRANSACTION_READ_COMMITTED with addtional change.&lt;/p&gt;</comment>
                            <comment id="12864670" author="lilywei" created="Thu, 6 May 2010 07:31:41 +0100"  >&lt;p&gt;With fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt;, this issue has been resolved also.&lt;br/&gt;
I am adding test case with four connections on ClientConnectionPoolDataSource to J2EEDataSource Test test. From testing structure point of view, it is easier to add to J2EEDataSourceTest instead of setTransactionIsolationTest.&lt;br/&gt;
The case where we execute a statement in local transaction within global transaction is also added. Thx, Lily&lt;/p&gt;</comment>
                            <comment id="12865856" author="lilywei" created="Mon, 10 May 2010 19:31:12 +0100"  >&lt;p&gt;Change to use ConnectionPoolDataSource so we add embedded testing and jdbc4 datasource testing.&lt;/p&gt;</comment>
                            <comment id="12865870" author="kmarsden" created="Mon, 10 May 2010 20:08:06 +0100"  >&lt;p&gt;Lily, thank you for the patch, but I tried it on 10.5 and it passes there.  Do you know why?&lt;/p&gt;</comment>
                            <comment id="12865883" author="lilywei" created="Mon, 10 May 2010 20:29:03 +0100"  >&lt;p&gt;Thank you, Kathey. The reason they are passing is because the isolation level I set with each connection is different than the repro case in TestConnReuse. I changed the test case so it failed n 10.5 for me now.&lt;/p&gt;</comment>
                            <comment id="12865914" author="lilywei" created="Mon, 10 May 2010 21:39:16 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;-3-testcase.diff is with first connection set to TRANSACTION.READ_COMMITTED and second connection just open and close connection. The third connection is set to TRANSACTION.READ_COMMITTED and the fourth connection set to TRANSACTION.READ_UNCOMMITTED on 10.5 branch.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;-4-trunk.diff is the same change as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4343&quot; title=&quot;ASSERT FAILED calling setTransactionIsolation checking isolation_ == level   on  pooled connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4343&quot;&gt;&lt;del&gt;DERBY-4343&lt;/del&gt;&lt;/a&gt;-3-testcase but for trunk branch. I verified the test fail with 10.5 but pass with trunk branch.&lt;/p&gt;</comment>
                            <comment id="12865989" author="lilywei" created="Tue, 11 May 2010 00:54:45 +0100"  >&lt;p&gt;Thanks to Kathey for all the help and check-in the test. This issue should be closed.&lt;/p&gt;</comment>
                            <comment id="12884461" author="lilywei" created="Thu, 1 Jul 2010 23:13:41 +0100"  >&lt;p&gt;Reopen to 10.5 back port&lt;/p&gt;</comment>
                            <comment id="12886148" author="mikem" created="Thu, 8 Jul 2010 00:00:30 +0100"  >&lt;p&gt;this looks like just a test for a change that is not being backported, so probably should not be backported.&lt;/p&gt;</comment>
                            <comment id="12886392" author="kmarsden" created="Thu, 8 Jul 2010 19:00:06 +0100"  >&lt;p&gt;That makes sense. The real changes was in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4314&quot; title=&quot;With derby client setTransactionIsolation executes and commits even if isolation has not changed &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4314&quot;&gt;&lt;del&gt;DERBY-4314&lt;/del&gt;&lt;/a&gt; which might cause an issue if someone is depending on setTransactionIsolation to commit.  So this one should come of the list.&lt;/p&gt;</comment>
                            <comment id="12886395" author="lilywei" created="Thu, 8 Jul 2010 19:13:27 +0100"  >&lt;p&gt;That make sense to me too. We should not back port this to 10.5&lt;/p&gt;</comment>
                            <comment id="12886396" author="lilywei" created="Thu, 8 Jul 2010 19:14:19 +0100"  >&lt;p&gt;Does not need to back port to 10.5&lt;/p&gt;</comment>
                            <comment id="12989893" author="kmarsden" created="Wed, 2 Feb 2011 23:43:48 +0000"  >&lt;p&gt;Reopen for backport&lt;/p&gt;</comment>
                            <comment id="13091366" author="myrna" created="Thu, 25 Aug 2011 23:20:16 +0100"  >&lt;p&gt;Looks like this was reopened for backport by mistake and left open as a result.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12430813">DERBY-4314</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12444131" name="DERBY-4343-2-testcase.diff" size="3338" author="lilywei" created="Mon, 10 May 2010 19:31:12 +0100"/>
                            <attachment id="12444139" name="DERBY-4343-3-testcase.diff" size="3170" author="lilywei" created="Mon, 10 May 2010 20:29:03 +0100"/>
                            <attachment id="12444143" name="DERBY-4343-4-trunk.diff" size="2975" author="lilywei" created="Mon, 10 May 2010 21:39:15 +0100"/>
                            <attachment id="12443827" name="DERBY-4343-testcase.diff" size="3570" author="lilywei" created="Thu, 6 May 2010 07:31:41 +0100"/>
                            <attachment id="12415912" name="TestConnReuse.java" size="1317" author="lilywei" created="Sat, 8 Aug 2009 02:06:51 +0100"/>
                            <attachment id="12415797" name="TestConnReuse.java" size="1283" author="kmarsden" created="Fri, 7 Aug 2009 01:18:47 +0100"/>
                            <attachment id="12415911" name="_cpds_0" size="55139" author="lilywei" created="Sat, 8 Aug 2009 02:06:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Aug 2009 05:21:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24199</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ff3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36316</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>