<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:46:27 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3561/DERBY-3561.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3561] testStartStopManagementFromApplication(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest)junit.framework.AssertionFailedError: expected:&lt;2&gt; but was:&lt;5&gt;</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3561</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The following test has been failing consistently in the tinderbox runs since about build 636714, unfortunately the run right before this build  failed so&lt;br/&gt;
it may be from that one. &lt;br/&gt;
first tinderbox failure I could find:&lt;br/&gt;
&lt;a href=&quot;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/636714-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/636714-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;br/&gt;
most recent as of this report:&lt;br/&gt;
&lt;a href=&quot;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/639156-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/639156-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) testStartStopManagementFromApplication(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest)junit.framework.AssertionFailedError: expected:&amp;lt;2&amp;gt; but was:&amp;lt;5&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.startStopManagement(ManagementMBeanTest.java:86)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.testStartStopManagementFromApplication(ManagementMBeanTest.java:56)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12391990">DERBY-3561</key>
            <summary>testStartStopManagementFromApplication(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest)junit.framework.AssertionFailedError: expected:&lt;2&gt; but was:&lt;5&gt;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="johnemb">John H. Embretsen</assignee>
                                    <reporter username="mikem">Mike Matrigali</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Mar 2008 19:08:56 +0000</created>
                <updated>Fri, 21 Jan 2011 17:51:48 +0000</updated>
                            <resolved>Wed, 27 Aug 2008 13:45:37 +0100</resolved>
                                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>JMX</component>
                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12582686" author="johnemb" created="Thu, 27 Mar 2008 15:20:41 +0000"  >&lt;p&gt;I am only able to reproduce this failure when running suites.All, or a subset of it, before running the ManagementMBeanTest. Running the management suite by itself does not result in a failure. &lt;/p&gt;

&lt;p&gt;It seems to me that when connecting directly to the platform MBean server in the same JVM, there is a set of MBeans from a different Derby system available, as indicated by the extra debugging output I added:&lt;/p&gt;

&lt;p&gt;initial: org.apache.derby:type=Management&lt;br/&gt;
initial: org.apache.derby:system=c013800d-0118-f0c9-77c9-00004d1fe320,type=Management&lt;br/&gt;
initial: org.apache.derby:jar=derby.jar,system=c013800d-0118-f0c9-9143-00004d1fe320,type=Version&lt;br/&gt;
initial: org.apache.derby:system=c013800d-0118-f0c9-77c9-00004d1fe320,type=JDBC&lt;br/&gt;
initial: org.apache.derby:system=c013800d-0118-f0c9-9143-00004d1fe320,type=JDBC&lt;br/&gt;
initial: org.apache.derby:jar=derbynet.jar,system=c013800d-0118-f0c9-9143-00004d1fe320,type=Version&lt;br/&gt;
initial: org.apache.derby:jar=derby.jar,system=c013800d-0118-f0c9-77c9-00004d1fe320,type=Version&lt;br/&gt;
initial: org.apache.derby:system=c013800d-0118-f0c9-9143-00004d1fe320,type=NetworkServer&lt;br/&gt;
initial: org.apache.derby:system=c013800d-0118-f0c9-9143-00004d1fe320,type=Management&lt;br/&gt;
DerbyMBeanCount after no-op startMgmt: 9&lt;br/&gt;
DerbyMBeanCount after stop: 5&lt;br/&gt;
after stop: org.apache.derby:type=Management&lt;br/&gt;
after stop: org.apache.derby:jar=derby.jar,system=c013800d-0118-f0c9-77c9-00004d1fe320,type=Version&lt;br/&gt;
after stop: org.apache.derby:system=c013800d-0118-f0c9-77c9-00004d1fe320,type=Management&lt;br/&gt;
after stop: org.apache.derby:system=c013800d-0118-f0c9-77c9-00004d1fe320,type=JDBC&lt;br/&gt;
after stop: org.apache.derby:system=c013800d-0118-f0c9-9143-00004d1fe320,type=Management&lt;br/&gt;
testStartStopManagementFromApplication used 24 ms F&lt;/p&gt;

&lt;p&gt;I have reduced the number of tests needed to reproduce the failure to a suite consisting of:&lt;/p&gt;

&lt;p&gt;suite.addTest(org.apache.derbyTesting.functionTests.tests.derbynet.NSinSameJVMTest.suite());&lt;br/&gt;
suite.addTest(org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.suite());&lt;br/&gt;
suite.addTest(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.suite());&lt;/p&gt;

&lt;p&gt;in that specific order. Looking closer at those tests might reveal something.&lt;/p&gt;</comment>
                            <comment id="12583039" author="johnemb" created="Fri, 28 Mar 2008 14:09:17 +0000"  >&lt;p&gt;Assgned this to myself since I am spending some time looking into the issue.&lt;/p&gt;

&lt;p&gt;At first I was pussled by the fact that MBeans from two different Derby systems were available at the same time in the same JVM. As far as I know neither NSinSameJVMTest nor ServerPropertiesTest perform any class loading tricks for this to happen.&lt;/p&gt;

&lt;p&gt;Multiple trial/error runs eventually led me to the following clue, which I hope might lead to a solution:&lt;/p&gt;

&lt;p&gt;It seems that there is only one Derby system active when the test starts, but three MBeans from an old Derby system are still present, as they have not been unregistered from the MBeanServer (I guess the MBeanServer is the same for all test runs in the same JVM). These three MBeans are: JDBC, Management and Version for derby.jar. This might be because the other mbeans (NetworkServer, Version for derbynet.jar) were successfully unregistered as part of a NetworkServerControl.shutdown() call in a previous test.&lt;/p&gt;

&lt;p&gt;Then I discovered that if I added an &quot;unregister&quot; MBeanPermission for derby.jar in the special security policy file for ServerPropertiesTest (java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.policy), the test does not fail anymore (at least in my minimal test runs).&lt;/p&gt;

&lt;p&gt;I will do some more testing, but I thought I&apos;d share my progress so far, in case anyone comes up with any better explanations.&lt;br/&gt;
A solution seems to be to add the mentioned MBeanPermission to the special ServerPropertiesTest.policy file, but other suggestions are welcome.&lt;/p&gt;</comment>
                            <comment id="12583131" author="johnemb" created="Fri, 28 Mar 2008 18:32:30 +0000"  >&lt;p&gt;Attaching patch d3561_testPolicyFix.diff which adds the permission&lt;/p&gt;

&lt;p&gt;permission javax.management.MBeanPermission &quot;org.apache.derby.*#&lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.derby:*&amp;#93;&lt;/span&gt;&quot;,&quot;unregisterMBean&quot;; &lt;/p&gt;

&lt;p&gt;to the test policy file used by derbynet.ServerPropertiesTest.&lt;/p&gt;

&lt;p&gt;I have run suites.All with this patch using JDK 1.5, and saw no failures whatsoever.&lt;/p&gt;

&lt;p&gt;It would be great if someone else could try the patch in another environment and see if it gets rid of the test failure there as well. Or a committer with sufficient faith in the patch can just commit it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12583154" author="knutanders" created="Fri, 28 Mar 2008 19:16:00 +0000"  >&lt;p&gt;Hi John,&lt;br/&gt;
Do you know why the tests that need the permission don&apos;t fail when they don&apos;t have it? Shouldn&apos;t they fail when they are not able to unregister the MBeans?&lt;/p&gt;</comment>
                            <comment id="12583223" author="johnemb" created="Fri, 28 Mar 2008 22:46:19 +0000"  >&lt;p&gt;No, if I understand your question correctly, the tests that lack the permission (in ServerPropertiesTest) are not aware that there is any JMX or MBeans in play at all, so they should not fail, because they are not testing it. This issue is (as I understand it) a side-effect of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3429&quot; title=&quot;Remove system property derby.system.jmx&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3429&quot;&gt;&lt;del&gt;DERBY-3429&lt;/del&gt;&lt;/a&gt;, that the JMX features are enabled by default when using a good enough JVM. The JMX tests themselves use a different server policy (a default one), with all the required permissions, while the ServerPropertiesTest tests use a special policy (for various reasons) that did not include these permissions.&lt;/p&gt;</comment>
                            <comment id="12583225" author="johnemb" created="Fri, 28 Mar 2008 22:49:34 +0000"  >&lt;p&gt;Let me add that I&apos;m not entirely on top of all hows an whys wrt. the security manager and JMX, but it seems that any lack of permissions is just silently ignored by default at runtime.&lt;/p&gt;</comment>
                            <comment id="12583228" author="kmarsden" created="Fri, 28 Mar 2008 23:05:24 +0000"  >&lt;p&gt;Does this mean that users that use a custom policy file, but don&apos;t use &lt;br/&gt;
JMX, need to change their policy file?&lt;/p&gt;


&lt;p&gt;Kathey&lt;/p&gt;

</comment>
                            <comment id="12583271" author="djd" created="Sat, 29 Mar 2008 04:16:05 +0000"  >&lt;p&gt;&amp;gt; Does this mean that users that use a custom policy file, but don&apos;t use JMX, need to change their policy file?&lt;/p&gt;

&lt;p&gt;No. Derby will not be able to register MBeans and that is not a problem. If registering an Mbean fails then Derby doesn&apos;t care.&lt;br/&gt;
This allows fine grained control of which MBeans derby will expose.&lt;/p&gt;</comment>
                            <comment id="12583300" author="johnemb" created="Sat, 29 Mar 2008 09:49:26 +0000"  >&lt;p&gt;I suspect that the reason those &quot;extra&quot; MBeans were registered in the first place might be that a Derby system was started while using the default security policy (or none at all), and that the policy had changed at shutdown time. I will try to make an effort to understand this a little better next week.&lt;/p&gt;</comment>
                            <comment id="12584155" author="johnemb" created="Tue, 1 Apr 2008 15:34:53 +0100"  >&lt;p&gt;I have done some more experimenting, and here is a writeup of my current &lt;br/&gt;
understanding of this issue:&lt;/p&gt;

&lt;p&gt;As previously mentioned, I have narrowed down the test suite leading to &lt;br/&gt;
this failure to the following (test order is significant):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;derbynet.NSinSameJVMTest.suite()&lt;/li&gt;
	&lt;li&gt;derbynet.ServerPropertiesTest.suite()&lt;/li&gt;
	&lt;li&gt;management.ManagementMBeanTest.suite()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have attached the minimal JUnit test suite (new java testclass) required&lt;br/&gt;
to reproduce this failure as a diff file against trunk: &lt;br/&gt;
Derby3561ReproSuite_notForCommit.diff (not for commit)&lt;/p&gt;

&lt;p&gt;Some points to be aware of:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Starting a Derby system in a 1.5 or 1.6 VM automatically results in&lt;br/&gt;
   3 MBeans being registered. (If a security manager is installed,&lt;br/&gt;
   sufficient permissions must be granted to Derby). Stopping the Derby&lt;br/&gt;
   system means that the entire collection of Derby MBeans will be &lt;br/&gt;
   attempted unregistered from the MBean server.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Starting the Derby Network Server in a 1.5 or 1.6 VM automatically&lt;br/&gt;
   results in 2 extra MBeans being registered, specific to the network &lt;br/&gt;
   server. (If a security manager is installed, sufficient permissions must&lt;br/&gt;
   be granted to Derby). Stopping the network server unregisters these&lt;br/&gt;
   MBeans.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Starting the network server results in starting a Derby system, if such&lt;br/&gt;
   a system is not already running in the JVM. Stopping the network server&lt;br/&gt;
   using the NetworkServerControl API does &lt;b&gt;not&lt;/b&gt; also shut down the Derby&lt;br/&gt;
   system (by design, I presume).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Stopping/deactivating Derby management using the ManagementMBean means&lt;br/&gt;
   that all Derby MBeans that are registered with both the MBean server&lt;br/&gt;
   and Derby&apos;s management service will be unregistered from the MBean &lt;br/&gt;
   server, with the exception of any ManagementMBeans (which may be used to&lt;br/&gt;
   re-register the other MBeans).&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The sequence of events leading to the test failure is:&lt;/p&gt;

&lt;p&gt;1. NSinSameJVMTest (could also be some other test which does similar things):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A clientServer decorator starts a new network server and thus also&lt;br/&gt;
       a Derby system (&quot;system A&quot;) using the NetworkServerControl API (same &lt;br/&gt;
       JVM).&lt;/li&gt;
	&lt;li&gt;Security policy used: functionTests/util/derby_tests.policy&lt;/li&gt;
	&lt;li&gt;Includes permissions to register and unregister MBeans, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ==&amp;gt; 5 MBeans from system A are automatically registered with the &lt;br/&gt;
           JVM&apos;s MBean server. The test doesn&apos;t know and doesn&apos;t care.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The network server is shut down using the same API, and the same&lt;br/&gt;
       security policy.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ==&amp;gt; 2 MBeans (VersionMBean;derbynet.jar + NetworkServerMBean) from&lt;br/&gt;
           system A are automatically unregistered. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The remaining 3 MBeans (JDBCMBean + ManagementMBean +&lt;br/&gt;
        VersionMBean;derby.jar) are not network server specific and will &lt;br/&gt;
        therefore remain registered until the Derby system shuts down, or&lt;br/&gt;
        until some manual intervention is performed.&lt;br/&gt;
        Neither the test nor the test harness shuts down the Derby system.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. ServerPropertiesTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Derby system A is still running...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;is wrapped in a decorator which changes the security policy from the&lt;br/&gt;
       default to a specific one: derbynet/ServerPropertiesTest.policy.&lt;/li&gt;
	&lt;li&gt;No JMX permissions are included in this policy.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ==&amp;gt; No new MBeans are registered when the test starts its own network&lt;br/&gt;
           servers/systems, due to lack of permissions (no exceptions are &lt;br/&gt;
           thrown; this is by design). The test is unaware and does not care.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ttestSetPortPriority() method starts and stops Network Servers, and&lt;br/&gt;
       (more importantly) it shuts down the current Derby system (twice)&lt;br/&gt;
       during the test (for some static properties to take effect). System A&lt;br/&gt;
       has now been shut down.&lt;/li&gt;
	&lt;li&gt;Since the test does not have permissions to unregister any MBeans,&lt;br/&gt;
         the three MBeans from system A will remain registered with the&lt;br/&gt;
         MBean server. The test doesn&apos;t know and doesn&apos;t care.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3. ManagementMBeanTest&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testStartStopManagementFromApplication() test and method&lt;br/&gt;
       startStopManagement(ObjectName mbean) is run twice:&lt;/li&gt;
	&lt;li&gt;once using a direct connection to the platform MBean server in the&lt;br/&gt;
         same JVM as the test. This fails.&lt;/li&gt;
	&lt;li&gt;once using a JMX client connection to a &quot;remote&quot; MBean server /&lt;br/&gt;
         network server (different JVM). This passes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the decorator for the failing test starts a Derby Network Server in&lt;br/&gt;
       the same JVM, to ensure that all MBeans are automatically registered.&lt;br/&gt;
       Let&apos;s call the Derby system being used &quot;system B&quot;.&lt;/li&gt;
	&lt;li&gt;The policy file used is functionTests/util/derby_tests.policy,&lt;br/&gt;
         including permissions to register MBeans etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;       ==&amp;gt; 5 MBeans from system B are automatically registered with the &lt;br/&gt;
           JVM&apos;s MBean server. This is what the test expects.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The test registers an extra MBean: An application controlled&lt;br/&gt;
       ManagementMBean, which is used for starting and stopping Derby &lt;br/&gt;
       management.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The test counts the number of MBeans in the org.apache.derby domain&lt;br/&gt;
       several times.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;After stopping management, the test expects to see exactly 2 MBeans:&lt;br/&gt;
       The ManagementMBean controlled by the application/test, and the &lt;br/&gt;
       ManagementMBean that was automatically registered/created by Derby.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;However, the 3 MBeans from system A still remain registered with the&lt;br/&gt;
       MBean server, although these MBeans are not registered with the &lt;br/&gt;
       current Derby management service (different system, different &lt;br/&gt;
       management service).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The test sees 3 + 2 = 5 MBeans, but expects to see 2. The test fails.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;User impact:&lt;br/&gt;
------------------&lt;/p&gt;

&lt;p&gt;In my opinion, it is not very likely that a user will experience such a&lt;br/&gt;
scenario, as it requires modifying (restricting) or installing a security &lt;br/&gt;
policy at runtime and booting and shutting down Derby systems at the right &lt;br/&gt;
(wrong) moments.&lt;/p&gt;

&lt;p&gt;If a user should run into this, nothing bad can happen as far as I can see.&lt;br/&gt;
The user may observere MBeans belonging to a non-active Derby system, even &lt;br/&gt;
if Derby&apos;s management service is deactivated, but that is basically it. &lt;/p&gt;

&lt;p&gt;By using JConsole and a standalone test class (attached) I see that the old &lt;br/&gt;
MBeans are available and may be accessed, and most attributes still have the &lt;br/&gt;
same values, although the SystemIdentifier (ManagementMBean) is empty and &lt;br/&gt;
ManagementActive will always remain false. The startManagement operation of&lt;br/&gt;
an old ManagementMBean does not change anything, but it does not report an&lt;br/&gt;
error either.&lt;/p&gt;

&lt;p&gt;You can reproduce this outside of JUnit by using the attached class&lt;br/&gt;
Derby3561ReproStandalone.java (see code comments).&lt;/p&gt;


&lt;p&gt;Solutions:&lt;br/&gt;
-----------------&lt;/p&gt;

&lt;p&gt;If we are concerned about this, an alternative solution could have been for&lt;br/&gt;
the Derby management service to unregister not only MBeans registered with &lt;br/&gt;
itself, but also any other MBeans belonging to the derby domain. However, &lt;br/&gt;
this seems to defeat the purpose of the system identifier and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3466&quot; title=&quot;Investigate ability to run multiple Derby systems in same JVM with different sets of MBeans.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3466&quot;&gt;&lt;del&gt;DERBY-3466&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Based on this, I believe adding a permission allowing the &lt;br/&gt;
ServerPropertiesTest to unregister Derby MBeans is a solution that makes &lt;br/&gt;
sense in order to get this test to pass. Such a change is implemented by&lt;br/&gt;
the patch d3561_testPolicyFix.diff.&lt;/p&gt;</comment>
                            <comment id="12584571" author="johnemb" created="Wed, 2 Apr 2008 15:02:20 +0100"  >&lt;p&gt;Patch for fixing this issue by adding a permission to a test policy file is &lt;br/&gt;
still available for review/commit.&lt;/p&gt;

&lt;p&gt;If some alternative solution is desired, please let me know.&lt;/p&gt;


&lt;p&gt;One alternative would be to somehow make this specific test more robust &lt;br/&gt;
against such issues (old MBeans left behind by previous tests/systems). &lt;/p&gt;

&lt;p&gt;However, it seems hard to make the test robust without also testing less,&lt;br/&gt;
e.g. not caring so much about exactly what is left behind after the&lt;br/&gt;
&quot;stopManagement&quot; operation is invoked.&lt;/p&gt;

&lt;p&gt;For example, the set of MBeans left registered with the MBean server after&lt;br/&gt;
invoking &quot;stopManagement&quot; may be something like:&lt;/p&gt;

&lt;p&gt;current:  org.apache.derby:type=Management&lt;br/&gt;
old:         org.apache.derby:system=c013800d-0119-0f15-4c02-00006a7eac81,type=Management&lt;br/&gt;
old:         org.apache.derby:jar=derby.jar,system=c013800d-0119-0f15-4c02-00006a7eac81,type=Version&lt;br/&gt;
old:         org.apache.derby:type=OldDerbySysManagement&lt;br/&gt;
current:  org.apache.derby:system=c013800d-0119-0f15-68af-00006a7eac81,type=Management&lt;br/&gt;
old:         org.apache.derby:system=c013800d-0119-0f15-4c02-00006a7eac81,type=JDBC&lt;/p&gt;

&lt;p&gt;The current test expects the number of MBeans to be 2 (those above marked &lt;br/&gt;
with &quot;current&quot;) and that these MBeans have type &quot;Management&quot;.&lt;/p&gt;

&lt;p&gt;I suppose we could change the  test so that it expects n - x MBeans, where&lt;br/&gt;
n is the number of registered MBeans at test start, and x is the number of&lt;br/&gt;
MBeans (belonging to the current Derby system) that we expect to be &lt;br/&gt;
unregistered when &quot;stopManagement&quot; is invoked. Currently x = 4.&lt;/p&gt;

&lt;p&gt;We could also check that there is no MBean registered with the same system &lt;br/&gt;
key property as the current system, apart from the Derby-registered &lt;br/&gt;
ManagementMBean itself.&lt;/p&gt;

&lt;p&gt;Not so elegant, I guess, but probably more robust. I can try to make a &lt;br/&gt;
patch for this if it sounds interesting to anyone. For 10.4.1, though, I think this&lt;br/&gt;
is overkill (the policy fix should suffice). Such a solution could also be &lt;br/&gt;
combined with the test policy fix.&lt;/p&gt;</comment>
                            <comment id="12584999" author="johnemb" created="Thu, 3 Apr 2008 08:41:25 +0100"  >&lt;p&gt;This seems to fail pretty consistently on the 10.4 branch as well, and will produce some noise in the release candidate test results unless a fix is committed pretty soon. One suggested fix is available as a patch.&lt;/p&gt;</comment>
                            <comment id="12585034" author="knutanders" created="Thu, 3 Apr 2008 11:05:48 +0100"  >&lt;p&gt;I don&apos;t know enough about this issue to say if it is the best way to fix it, but I checked in the patch to reduce the noise from the test.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 644248.&lt;br/&gt;
Committed to 10.4 with revision 644250.&lt;/p&gt;</comment>
                            <comment id="12585035" author="vemund" created="Thu, 3 Apr 2008 11:15:58 +0100"  >&lt;p&gt;Good job tracking down the root cause for this, John.&lt;/p&gt;

&lt;p&gt;I think your patch is a sensible way to get the tests to pass.&lt;/p&gt;

&lt;p&gt;On a side note, if tests have certain preconditions to be able to behave as intended, it might be sensible to check for these at the start of the test. So, the test that has been failing could check that there are in fact 0 MBeans registered at the start of the test, and just throw an exception if there aren&apos;t, since this is obviously a precondition the way the test is written.&lt;/p&gt;
</comment>
                            <comment id="12585040" author="johnemb" created="Thu, 3 Apr 2008 11:31:07 +0100"  >&lt;p&gt;Thanks, Knut. Further test stabilization or perhaps even product changes should be considered if this or similar issues reappear often, but I think this is sufficient for 10.4.1 at least.&lt;/p&gt;

&lt;p&gt;Vemund: We could certainly consider doing something about checking that preconditions are satisfied at test start. Though if preconditions are not as expected and we throw an exception then we would still get the same noise in the test results (for a while, at least). To be able to handle varying preconditions, a bit more logic would have to be added to the test code and/or setup (and I think that is too risky to do for 10.4 at this moment).&lt;/p&gt;</comment>
                            <comment id="12585050" author="johnemb" created="Thu, 3 Apr 2008 12:21:04 +0100"  >&lt;p&gt;Marking this issue as fixed, as a fix has been committed to both trunk and 10.4 branch. I intend to close the issue after a couple of days if the failure disappears from daily test reports - further comments/suggestions are still welcome, though. &lt;br/&gt;
Should probably create a new issue for making the ManagementMBeanTest more robust.&lt;/p&gt;</comment>
                            <comment id="12585066" author="vemund" created="Thu, 3 Apr 2008 12:55:34 +0100"  >&lt;p&gt;Yes, my thoughts on preconditions was mostly in general for all tests. It makes it a bit easier to track down issues if preconditions are verified at the start of a test. It won&apos;t remove noise, but for a test that fails maybe just once in a while and is difficult to reproduce it would give insight into whether the problem is related to something that happened before or during the test.&lt;/p&gt;

&lt;p&gt;I think it requires some thought when deciding if a test should throw an exception if something is not as expected at the start of the test, or silently adapt to the change in behavior. It is important not to mask what potentially is a bug, but at the same time you don&apos;t want unnecessary noise.&lt;/p&gt;</comment>
                            <comment id="12625708" author="johnemb" created="Tue, 26 Aug 2008 13:01:55 +0100"  >&lt;p&gt;Reopening to fix this issue also when running with classes directory in classpath. This issue was recently seen with such a configuration in the 10.4 branch after fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3836&quot; title=&quot;On 10.4 branch JMX tests fail with security exceptions when run against classes &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3836&quot;&gt;&lt;del&gt;DERBY-3836&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
This issue is no longer seen when running with jars in the classpath.&lt;/p&gt;</comment>
                            <comment id="12625733" author="johnemb" created="Tue, 26 Aug 2008 14:43:03 +0100"  >&lt;p&gt;Attached patch d3561_classesFix.diff which is supposed to fix this issue also when running with classes directory instead of jars in the classpath. The fix is simply to add the same &quot;unregister&quot; permission to the &quot;classes&quot; domain in ServerPropertiesTest.policy as was added to the &quot;derby.jar&quot; domain in revision 644248.&lt;/p&gt;

&lt;p&gt;suites.All passed cleanly in 10.4 branch (classes and jars), running against trunk now. I intend to commit to trunk and 10.4 shortly, barring any failing test runs.&lt;/p&gt;</comment>
                            <comment id="12626094" author="johnemb" created="Wed, 27 Aug 2008 13:45:37 +0100"  >&lt;p&gt;suites.All tests passed successfully with classes and jars on both trunk and 10.4 (JDK 1.5, Solaris 10 x86).&lt;/p&gt;

&lt;p&gt;Committed d3561_classesFix.diff as revisions 689460 (trunk) and 689462 (10.4 branch).&lt;br/&gt;
Hopefully this issue is fully resolved this time.&lt;/p&gt;</comment>
                            <comment id="12628253" author="johnemb" created="Thu, 4 Sep 2008 07:04:51 +0100"  >&lt;p&gt;Adjusted &quot;Fixed in&quot; version. Latest fix for classes policy did not make it into the 10.4.2.0 RC (revision 689064).&lt;/p&gt;</comment>
                            <comment id="12637077" author="olesolberg" created="Mon, 6 Oct 2008 12:10:13 +0100"  >&lt;p&gt;Another variant?:  &lt;br/&gt;
testStartStopManagementFromApplication(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest)junit.framework.AssertionFailedError: expected:&amp;lt;4&amp;gt; but was:&amp;lt;6&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.thresher.com/derby/test/10.4Branch/jvm1.6/testing/testlog/lin/701824-suitesAll_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/10.4Branch/jvm1.6/testing/testlog/lin/701824-suitesAll_diff.txt&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12740759" author="espinha" created="Fri, 7 Aug 2009 22:47:59 +0100"  >&lt;p&gt;I have just seen this issue on the 10.5 branch. Rick seems to have hit it as well as it can be seen on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4344&quot; title=&quot;Track changes needed for 10.5.3 release&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4344&quot;&gt;&lt;del&gt;DERBY-4344&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Should we reopen this issue?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12491791">DERBY-4925</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12433427">DERBY-4356</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12379035" name="Derby3561ReproStandalone.java" size="14156" author="johnemb" created="Tue, 1 Apr 2008 15:34:53 +0100"/>
                            <attachment id="12379034" name="Derby3561ReproSuite_notForCommit.diff" size="3238" author="johnemb" created="Tue, 1 Apr 2008 15:34:53 +0100"/>
                            <attachment id="12388907" name="d3561_classesFix.diff" size="1010" author="johnemb" created="Tue, 26 Aug 2008 14:43:03 +0100"/>
                            <attachment id="12378806" name="d3561_testPolicyFix.diff" size="948" author="johnemb" created="Fri, 28 Mar 2008 18:32:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 Mar 2008 15:20:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23713</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0li7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37302</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>