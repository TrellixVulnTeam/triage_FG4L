<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-930/DERBY-930.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-930] Add support for autoloading of Derby client drivers</title>
                <link>https://issues.apache.org/jira/browse/DERBY-930</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Write Derby&apos;s driver names into the correct spot in derby.jar and derbyclient.jar so that the 1.6 vm autoloads Derby drivers. Section 10.2.1 of the JDBC4 spec describes the details.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12328677">DERBY-930</key>
            <summary>Add support for autoloading of Derby client drivers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Feb 2006 03:38:11 +0000</created>
                <updated>Wed, 1 Jul 2009 01:34:35 +0100</updated>
                            <resolved>Thu, 22 Feb 2007 19:46:35 +0000</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Build tools</component>
                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12365467" author="rhillegas" created="Wed, 8 Feb 2006 03:57:43 +0000"  >&lt;p&gt;This patch makes the jar building targets stuff a) derby.jar with the embedded driver name and b) derbyclient.jar with the client driver name. Some details follow:&lt;/p&gt;

&lt;p&gt;o trunk/build.xml - Created a single target for making the META-INF directory. Previously, this logic was cut-and-pasted across the jarring targets.&lt;/p&gt;

&lt;p&gt;o trunk/build.xml - Added logic to create META-INF/services/java.sql.Driver files to derby.jar and derbyclient.jar&lt;/p&gt;

&lt;p&gt;o AutoloadTest.java - New test to verify that the Derby drivers autoload when run from our jar files.&lt;/p&gt;

&lt;p&gt;I disabled the security manager for AutoloadTest. The reasons for this are documented in AutoloadTest_app.properties: When running under our test harness from jar files under jdk1.6, system properties can&apos;t be read. This causes the drivers to silently fail to autoload. Note that when running under jdk1.6 from jar files outside our test harness, the drivers correctly autoload.&lt;/p&gt;

&lt;p&gt;The new test is wired into the jdbc4 suite. The suite runs cleanly under 1.6 against the class tree and against the Derby jar files. The test itself runs cleanly embedded and with the Derby client under 1.6 and 1.4 and against the class tree and the jar files.&lt;/p&gt;

&lt;p&gt;Here are the patch contents:&lt;/p&gt;

&lt;p&gt;A      java\testing\org\apache\derbyTesting\functionTests\tests\junitTests\jdbcapi&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\junitTests\jdbcapi\AutoloadTest_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\junitTests\jdbcapi\AutoloadTest.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\junitTests\jdbcapi\build.xml&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\jdbc4.runall&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\util\DerbyJUnitTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\util\derby_tests.policy&lt;br/&gt;
M      java\testing\build.xml&lt;br/&gt;
M      build.xml&lt;/p&gt;</comment>
                            <comment id="12365472" author="djd" created="Wed, 8 Feb 2006 04:20:00 +0000"  >&lt;p&gt;In the policy file the patch has lines like:&lt;/p&gt;

&lt;p&gt;+  // junitTests/jdbcapi/AutoloadTest.java&lt;br/&gt;
+  permission java.lang.RuntimePermission &quot;getProtectionDomain&quot;;&lt;/p&gt;

&lt;p&gt;but this permission is for generic code in DerbyJUnitTest, not just that specific test.&lt;/p&gt;

&lt;p&gt;When the test runs with JDK 1.4 is it auto-loading the driver? I couldn&apos;t see any setting of jdbc.drivers so I&apos;m unclear what would cause the driver to auto-load.&lt;/p&gt;

&lt;p&gt;From earlier comment:&lt;br/&gt;
&amp;gt; I disabled the security manager for AutoloadTest. The reasons for this are documented in AutoloadTest_app.properties: When running under our test harness from jar files under jdk1.6, system properties can&apos;t be read. This causes the drivers to silently fail to autoload. Note that when running under jdk1.6 from jar files outside our test harness, the drivers correctly autoload.&lt;/p&gt;

&lt;p&gt;This is somewhat troubling, I don&apos;t understand what reading system properties has to do with the auto-loading of JDBC drivers by the java virtual machine. Can you maybe explain more why this fails for you, rather than just disabling the security manager. Disabling the security manager should not be a common option. I think it&apos;s as simple as you are not fetching the System property in a priv block.&lt;/p&gt;</comment>
                            <comment id="12365476" author="rhillegas" created="Wed, 8 Feb 2006 04:43:56 +0000"  >&lt;p&gt;Thanks for your quick review, Dan. Some responses follow:&lt;/p&gt;

&lt;p&gt;1) I&apos;ll change the comments in the policy file to note that the code is generic to DerbyJUnitTest&lt;/p&gt;

&lt;p&gt;2) I was simply testing the autoloading added by JDBC4. You are right that setting jdbc.drivers under JDBC3 should cause autoloading too. I will add the AutoloadTest to the jdk1.4 suite while setting jdbc.drivers appropriately.&lt;/p&gt;

&lt;p&gt;3) I will investigate wrapping the property reader in a priv block to see if this fixes the permissions problem. I may have to ask you for more advice here before I touch bottom.&lt;/p&gt;</comment>
                            <comment id="12365665" author="rhillegas" created="Thu, 9 Feb 2006 09:32:14 +0000"  >&lt;p&gt;I have attached bug930_problem.diff, which demonstrates the problem I am having autoloading Derby drivers under a SecurityManager. The problem case contains the following  files:&lt;/p&gt;

&lt;p&gt;A      java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\AutoloadDriver.java&lt;br/&gt;
A      autoloadscript&lt;br/&gt;
M      build.xml&lt;br/&gt;
A      autoload.policy&lt;/p&gt;

&lt;p&gt;Once you have applied this patch to a clean client, you can reproduce the problem by invoking the script from the directory above trunk:&lt;/p&gt;

&lt;p&gt;trunk/autoloadscript&lt;/p&gt;</comment>
                            <comment id="12365670" author="fuzzylogic" created="Thu, 9 Feb 2006 10:04:11 +0000"  >&lt;p&gt;Looks good, the getCodeSource method looks like it could be reused in sysinfo to take care of  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-668&quot; title=&quot;SysInfo does not print the right information when Derby is not loaded through the classpath.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-668&quot;&gt;&lt;del&gt;DERBY-668&lt;/del&gt;&lt;/a&gt;, among others, although I don&apos;t know if adding the getProtectionDomain permission would be a serious drawback. Dan could probably answer that question.&lt;/p&gt;

&lt;p&gt;Just a couple of minor cleanliness nits: Instead of creating a second section for jar helper targets, could you please move the new common targets to the section &apos;jar helper targets&apos;? And why did you add dashes to the target names for the new common targets? It&apos;s ok, just out of convention with the rest of the target names in the main build.xml.&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look at the problem when i have a moment and see if i can help.&lt;/p&gt;</comment>
                            <comment id="12365733" author="rhillegas" created="Thu, 9 Feb 2006 22:51:53 +0000"  >&lt;p&gt;Thanks for the review, Andrew. I will airbrush build.xml as you requested. The dashes in the new target names are a convention I brought from a previous life: they are a prefix I&apos;m used to putting on targets which are for internal use only (not to be called directly by the user who invokes ant). I can remove the dashes if they seem out of place.&lt;/p&gt;

&lt;p&gt;This patch is, of course, not ready for committing. I have to resolve the SecurityManager problem before I submit a new patch.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12365796" author="rhillegas" created="Fri, 10 Feb 2006 08:18:05 +0000"  >&lt;p&gt;The next attachment (bug930_problem2.diff) shows that the problem is not in Derby&apos;s drivers. The problem occurs with a DummyDriver which prints out some diagnostics. Without a SecurityManager, Class.forName() is called on the autoloadable drivers under DriverManager.getConnection(). However, we never get to this Class.forName() when there is a SecurityManager. The contents of this problem case are:&lt;/p&gt;

&lt;p&gt;A      java\engine\org\apache\derby\jdbc\DummyDriver.java&lt;br/&gt;
M      java\engine\org\apache\derby\jdbc\build.xml&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\AutoloadDriver.java&lt;br/&gt;
A      autoloadscript&lt;br/&gt;
M      build.xml&lt;br/&gt;
M      tools\jar\extraDBMSclasses.properties&lt;br/&gt;
A      autoload.policy&lt;/p&gt;

&lt;p&gt;When there is a SecurityManager, the following invocation of Class.forName() is not reached:&lt;/p&gt;

&lt;p&gt;java.lang.Throwable: static initializer trace&lt;br/&gt;
        at org.apache.derby.jdbc.DummyDriver.&amp;lt;clinit&amp;gt;(DummyDriver.java:14)&lt;br/&gt;
        at java.lang.Class.forName0(Native Method)&lt;br/&gt;
        at java.lang.Class.forName(Class.java:247)&lt;br/&gt;
        at sun.misc.Service$LazyIterator.next(Service.java:271)&lt;br/&gt;
        at java.sql.DriverManager.loadInitialDrivers(DriverManager.java:477)&lt;br/&gt;
        at java.sql.DriverManager.initialize(DriverManager.java:579)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:532)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:150)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadDriver.getConnection(AutoloadDriver.java:80)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadDriver.execute(AutoloadDriver.java:52)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadDriver.main(AutoloadDriver.java:41)&lt;/p&gt;</comment>
                            <comment id="12368039" author="rhillegas" created="Tue, 28 Feb 2006 07:44:08 +0000"  >&lt;p&gt;I have attached a jarred up experiment which demonstrates a SecurityManager-induced classloading issue which results in the silent failure to autoload the jdbc driver. The autoloading logic is using the thread context class loader to look in the classpath for all resources with the name META-INF/services/java.sql.Driver. If you run with a SecurityManager, the thread context class loader only finds one META-INF/services/java.sql.Driver, namely, the one in the jar file which contains the calling code. However, if you don&apos;t run with a SecurityManager, then the thread context class loader finds many META-INF/services/java.sql.Driver(s), one in each jar file on the classpath.&lt;/p&gt;

&lt;p&gt;The experiment contains the following files:&lt;/p&gt;

&lt;p&gt;o A.jar - Jar file holding the calling program and its own META-INF/services/java.sql.Driver&lt;br/&gt;
o B.jar - Jar file containing another META-INF/services/java.sql.Driver&lt;br/&gt;
o AB.policy - Security policy for both jar files&lt;br/&gt;
o autoloadslim - Driving script which runs the application both with and without a SecurityManager&lt;br/&gt;
o AutoloadClassloader.java - The application which looks for META-INF/services/java.sql.Driver using the thread context class loader&lt;/p&gt;</comment>
                            <comment id="12373914" author="rhillegas" created="Tue, 11 Apr 2006 03:42:38 +0100"  >&lt;p&gt;I have attached a revised patch for this feature: bug930_rev2.diff. This patch cannot be committed until mustang build 81 posts. That build should fix a jdk bug which short-circuits driver autoloading when running under a SecurityManager. This revised patch removes the need for the following permission when checking whether the test is running against the classtree or against jar files:&lt;/p&gt;

&lt;p&gt;  permission java.lang.RuntimePermission &quot;getProtectionDomain&quot;;&lt;/p&gt;

&lt;p&gt;This patch touches the following files:&lt;/p&gt;

&lt;p&gt;A      java\testing\org\apache\derbyTesting\functionTests\tests\jdbc4\AutoloadTest.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\jdbc40.runall&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\util\TestConfiguration.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\util\BaseJDBCTestCase.java&lt;br/&gt;
M      build.xml&lt;/p&gt;

&lt;p&gt;I will re-run the jdbc4 tests against this patch once mustang build 81 posts.&lt;/p&gt;</comment>
                            <comment id="12376072" author="rhillegas" created="Tue, 25 Apr 2006 02:30:17 +0100"  >&lt;p&gt;Attaching bug930_rev3.diff, which makes a small change to the test for whether we&apos;re running with jar files. Build 81 of jdk1.6 fixes the problem with autoloading under a SecurityManager. The AutoloadTest now runs correctly.&lt;/p&gt;</comment>
                            <comment id="12376074" author="rhillegas" created="Tue, 25 Apr 2006 02:36:42 +0100"  >&lt;p&gt;Committed at subversion revision 396638. As of this submission, you need build 81 of jdk1.6 in order to run the jdbc4 tests cleanly.&lt;/p&gt;</comment>
                            <comment id="12376089" author="rhillegas" created="Tue, 25 Apr 2006 04:09:36 +0100"  >&lt;p&gt;Fixed with build 81 of jdk1.6.&lt;/p&gt;</comment>
                            <comment id="12416563" author="kmarsden" created="Sat, 17 Jun 2006 02:06:14 +0100"  >&lt;p&gt;This change  may impact existing applications as evidenced by the need to change a related test in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1399&quot; title=&quot;DerbyNetAutoStart test fails on JDK 1.6 after introduction JDBC4 driver autoloading&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1399&quot;&gt;&lt;del&gt;DERBY-1399&lt;/del&gt;&lt;/a&gt;.  It requires at least a release note documenting the impact.    Once that has been done it will be easier understand the scope  of the problem and whether this is a regression that needs to be addressed or a behaviour change accepted by the community.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1399&quot; title=&quot;DerbyNetAutoStart test fails on JDK 1.6 after introduction JDBC4 driver autoloading&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1399&quot;&gt;&lt;del&gt;DERBY-1399&lt;/del&gt;&lt;/a&gt; has some informaition on this topic.&lt;br/&gt;
&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1399?page=comments#action_12416359&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1399?page=comments#action_12416359&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rick, could you add the release note to this issue?  Bryan posted some helpful Release Note format  info  at: &lt;a href=&quot;http://wiki.apache.org/db-derby/ReleaseNoteFormat?highlight=%28ReleaseNote%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ReleaseNoteFormat?highlight=%28ReleaseNote%29&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12416564" author="kmarsden" created="Sat, 17 Jun 2006 02:07:57 +0100"  >&lt;p&gt;Reopened  because at least release note is needed for behavior change.&lt;/p&gt;
</comment>
                            <comment id="12416591" author="rhillegas" created="Sat, 17 Jun 2006 05:44:37 +0100"  >&lt;p&gt;I think that derby-dev should continue to discuss the issue which Olav has analyzed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1399&quot; title=&quot;DerbyNetAutoStart test fails on JDK 1.6 after introduction JDBC4 driver autoloading&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1399&quot;&gt;&lt;del&gt;DERBY-1399&lt;/del&gt;&lt;/a&gt;. I will continue this discussion shortly.&lt;/p&gt;

&lt;p&gt;Based on that discussion, we can decide what to put in a release note. It&apos;s unclear to me how to divide JDBC4 functionality among release notes. This issue may deserve a release not by itself, or it may be a subcase of some larger release note for JDBC4 features. But in any event, I agree we should attach some description to this issue for rollup somewhere in the 10.2 release notes.&lt;/p&gt;

&lt;p&gt;In addition, this behavior should be documented in the user guides. The analysis of user guide changes can be found in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1271&quot; title=&quot;Release documentation for JDBC4 release&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1271&quot;&gt;&lt;del&gt;DERBY-1271&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12416775" author="rhillegas" created="Mon, 19 Jun 2006 23:03:48 +0100"  >&lt;p&gt;Adding a release note for this issue:&lt;/p&gt;

&lt;p&gt;PROBLEM&lt;/p&gt;

&lt;p&gt;If an embedded Derby application generates its own Derby properties on the fly, and that Derby application runs in the same VM with other JDBC applications, then you are not guaranteed that the Derby engine will pick up the custom properties when it boots.&lt;/p&gt;


&lt;p&gt;SYMPTOM&lt;/p&gt;

&lt;p&gt;Derby startup behavior will be non-deterministic. Sometimes the engine will pick up the custom properties and sometimes it won&apos;t.&lt;/p&gt;


&lt;p&gt;CAUSE&lt;/p&gt;

&lt;p&gt;JDBC4 introduced driver-autoloading. This causes all JDBC drivers visible to the VM to register themselves the first time some application requests a Connection. When the embedded Derby driver registers itself, it also boots the Derby engine and the engine picks up whatever Derby properties are currently visible. An embedded Derby application may want to configure the engine properties before asking for a Connection. That embedded Derby application will not get a chance to configure engine properties if some other JDBC application in the same VM runs first and requests a Connection. Two related bugs describe this issue in greater detail: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1428&quot; title=&quot;Multiple applications within a single jvm generating derby properties on the fly can lead to non-deterministic engine startup behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1428&quot;&gt;DERBY-1428&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1429&quot; title=&quot;Additional vulnerability to non-deterministic startup behavior when applications generate derby properties on the fly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1429&quot;&gt;&lt;del&gt;DERBY-1429&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;SOLUTION&lt;/p&gt;

&lt;p&gt;There is no general solution to the problem. If two self-configuring embedded Derby applications run in the same VM, then only one of them can win.&lt;/p&gt;


&lt;p&gt;WORKAROUND&lt;/p&gt;

&lt;p&gt;The following workarounds may be useful:&lt;/p&gt;

&lt;p&gt;1) Don&apos;t configure Derby properties inside your applications. Instead, specify Derby properties either on the VM startup line or in a $DERBY_HOME/derby.properties which remains constant for the VM&apos;s lifetime.&lt;/p&gt;

&lt;p&gt;2) If (1) is not possible, then make the self-configuring Derby application run first.&lt;/p&gt;

</comment>
                            <comment id="12416781" author="rhillegas" created="Tue, 20 Jun 2006 00:07:03 +0100"  >&lt;p&gt;Here is a second rev of the release note. This attempts to clarify the extra exposure introduced by jdk1.6.&lt;/p&gt;

&lt;p&gt;PROBLEM&lt;/p&gt;

&lt;p&gt;If an embedded Derby application generates its own Derby properties on the fly, and that Derby application runs in the same 1.6 VM with other JDBC applications, then you are not guaranteed that the Derby engine will pick up the custom properties when it boots.&lt;/p&gt;


&lt;p&gt;SYMPTOM&lt;/p&gt;

&lt;p&gt;Derby startup behavior will be non-deterministic. Sometimes the engine will pick up the custom properties and sometimes it won&apos;t.&lt;/p&gt;


&lt;p&gt;CAUSE&lt;/p&gt;

&lt;p&gt;JDBC4 introduced driver-autoloading. This causes all JDBC drivers visible to the 1.6 VM to register themselves the first time some application requests a Connection. When the embedded Derby driver registers itself, it also boots the Derby engine and the engine picks up whatever Derby properties are currently visible. An embedded Derby application may want to configure the engine properties before asking for a Connection. That embedded Derby application will not get a chance to configure engine properties if some other JDBC application in the same 1.6 VM runs first and requests a Connection. Two related bugs describe this issue in greater detail: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1428&quot; title=&quot;Multiple applications within a single jvm generating derby properties on the fly can lead to non-deterministic engine startup behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1428&quot;&gt;DERBY-1428&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1429&quot; title=&quot;Additional vulnerability to non-deterministic startup behavior when applications generate derby properties on the fly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1429&quot;&gt;&lt;del&gt;DERBY-1429&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1428&quot; title=&quot;Multiple applications within a single jvm generating derby properties on the fly can lead to non-deterministic engine startup behavior&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1428&quot;&gt;DERBY-1428&lt;/a&gt; affects existing customer installations running old versions of Derby on the 1.3, 1.4, and 1.5 VMs. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1429&quot; title=&quot;Additional vulnerability to non-deterministic startup behavior when applications generate derby properties on the fly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1429&quot;&gt;&lt;del&gt;DERBY-1429&lt;/del&gt;&lt;/a&gt; describes the extra exposure introduced with the 1.6 VM.&lt;/p&gt;


&lt;p&gt;SOLUTION&lt;/p&gt;

&lt;p&gt;There is no general solution to the problem. If two self-configuring embedded Derby applications run in the same VM, then only one of them can win.&lt;/p&gt;


&lt;p&gt;WORKAROUND&lt;/p&gt;

&lt;p&gt;The following workarounds may be useful:&lt;/p&gt;

&lt;p&gt;1) Don&apos;t configure Derby properties inside your applications. Instead, specify Derby properties either on the VM startup line or in a $DERBY_HOME/derby.properties which remains constant for the VM&apos;s lifetime.&lt;/p&gt;

&lt;p&gt;2) Don&apos;t run on the 1.6 VM. This eliminates the problem provided that you are not running more than one embedded Derby application in the same VM.&lt;/p&gt;

&lt;p&gt;3) If (1) and (2) are not possible, then make the self-configuring Derby application run first. &lt;/p&gt;</comment>
                            <comment id="12417677" author="kmarsden" created="Sun, 25 Jun 2006 20:56:04 +0100"  >&lt;p&gt;The attached document autoloading_scenarios.html has three scenarios that need to be considered for our autoloading implementation. Scenario&apos;s #1 and #3 have regressions with our current implementation.  Scenario #2 will regress if we move processing of derby.drda.startNetworkServer to connection time.&lt;/p&gt;


</comment>
                            <comment id="12419613" author="kmarsden" created="Fri, 7 Jul 2006 06:38:12 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1459&quot; title=&quot;Early load of Derby driver with JDBC 4.0 autoloading can lead to derby properties not being processed or derby boot time actions consuming resources when a connection is made with another driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1459&quot;&gt;&lt;del&gt;DERBY-1459&lt;/del&gt;&lt;/a&gt; is logged for the regression caused by this fix, so unchecking the regression checkbox. &lt;/p&gt;</comment>
                            <comment id="12422752" author="rhillegas" created="Fri, 21 Jul 2006 20:15:27 +0100"  >&lt;p&gt;Closing this issue because &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1459&quot; title=&quot;Early load of Derby driver with JDBC 4.0 autoloading can lead to derby properties not being processed or derby boot time actions consuming resources when a connection is made with another driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1459&quot;&gt;&lt;del&gt;DERBY-1459&lt;/del&gt;&lt;/a&gt; addresses the problem.&lt;/p&gt;</comment>
                            <comment id="12434807" author="rhillegas" created="Thu, 14 Sep 2006 22:04:58 +0100"  >&lt;p&gt;Since this issue was fixed, no release note is needed.&lt;/p&gt;</comment>
                            <comment id="12475126" author="djd" created="Thu, 22 Feb 2007 19:17:49 +0000"  >&lt;p&gt;With this issue it seems that the changes made to auto-loading (the two stages) means that the Existing Application Impact flag should be unchecked.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12345065">DERBY-1459</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12344605">DERBY-1429</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12323471" name="ClassloadingTest.jar" size="5901" author="rhillegas" created="Tue, 28 Feb 2006 07:44:08 +0000"/>
                            <attachment id="12335878" name="autoloading_scenarios.html" size="4795" author="kmarsden" created="Sun, 25 Jun 2006 20:56:04 +0100"/>
                            <attachment id="12322712" name="bug930.diff" size="28273" author="rhillegas" created="Wed, 8 Feb 2006 03:57:43 +0000"/>
                            <attachment id="12322775" name="bug930_problem.diff" size="20374" author="rhillegas" created="Thu, 9 Feb 2006 09:32:14 +0000"/>
                            <attachment id="12322815" name="bug930_problem2.diff" size="24265" author="rhillegas" created="Fri, 10 Feb 2006 08:18:05 +0000"/>
                            <attachment id="12325156" name="bug930_rev2.diff" size="15278" author="rhillegas" created="Tue, 11 Apr 2006 03:42:37 +0100"/>
                            <attachment id="12325777" name="bug930_rev3.diff" size="16024" author="rhillegas" created="Tue, 25 Apr 2006 02:30:17 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 8 Feb 2006 04:20:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29785</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0syn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38510</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>