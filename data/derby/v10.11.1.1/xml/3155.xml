<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:08:32 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3155/DERBY-3155.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3155] Support for SQL:2003 MERGE statement</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3155</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;A relatively common piece of logic in a database application is to check for a row&apos;s existence and then either update or insert depending on its existence.&lt;/p&gt;

&lt;p&gt;SQL:2003 added a MERGE statement to perform this operation.  It looks like this:&lt;/p&gt;

&lt;p&gt;    MERGE INTO table_name USING table_name ON (condition)&lt;br/&gt;
    WHEN MATCHED THEN UPDATE SET column1 = value1 &lt;span class=&quot;error&quot;&gt;&amp;#91;, column2 = value2 ...&amp;#93;&lt;/span&gt;&lt;br/&gt;
    WHEN NOT MATCHED THEN INSERT column1 &lt;span class=&quot;error&quot;&gt;&amp;#91;, column2 ...&amp;#93;&lt;/span&gt; VALUES (value1 &lt;span class=&quot;error&quot;&gt;&amp;#91;, value2 ...&amp;#93;&lt;/span&gt;) &lt;/p&gt;

&lt;p&gt;At the moment, the only workaround for this would be to write a stored procedure to do the same operation, or to implement the logic client-side.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12381347">DERBY-3155</key>
            <summary>Support for SQL:2003 MERGE statement</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="trejkaz">Trejkaz</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                    </labels>
                <created>Sun, 28 Oct 2007 22:49:40 +0000</created>
                <updated>Wed, 24 Sep 2014 23:36:15 +0100</updated>
                            <resolved>Thu, 29 May 2014 17:33:12 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>8</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="12557766" author="denis.assanbaev@rd-software.com" created="Thu, 10 Jan 2008 19:48:40 +0000"  >&lt;p&gt;I find this feature usefull for also for other cases:&lt;br/&gt;
currently derby cannot provide an update using data from another table.&lt;/p&gt;

&lt;p&gt;UPDATE XXX  t_u&lt;br/&gt;
set (col1, col2, col3)&lt;br/&gt;
= (select col_n1,col_n2,col_n3&lt;br/&gt;
     from XXX t_n&lt;br/&gt;
     where t_n.id = t_u.id).&lt;br/&gt;
CURRENT OF- version doesn&apos;t help too.&lt;/p&gt;

&lt;p&gt;UPDATE XXX  t_u&lt;br/&gt;
set col1&lt;br/&gt;
= (select col_n1&lt;br/&gt;
     from XXX t_n&lt;br/&gt;
     where t_n.id = t_u.id),&lt;br/&gt;
col2&lt;br/&gt;
= (select col_n2&lt;br/&gt;
     from XXX t_n&lt;br/&gt;
     where t_n.id = t_u.id).&lt;br/&gt;
works, but it results in a lot of updates or performance boosts when &lt;br/&gt;
using for a table with ~ 100 columns.&lt;/p&gt;

&lt;p&gt;Regards&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
Mit freundlichen Gr&#252;&#223;en / Kind Regards&lt;/p&gt;

&lt;p&gt;Denis&lt;/p&gt;

</comment>
                            <comment id="13445705" author="jarcec" created="Fri, 31 Aug 2012 07:02:55 +0100"  >&lt;p&gt;I would also vote for including this feature.&lt;/p&gt;

&lt;p&gt;Jarcec&lt;/p&gt;</comment>
                            <comment id="13738710" author="rhillegas" created="Tue, 13 Aug 2013 20:32:14 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for this feature: MergeStatement.html.&lt;/p&gt;</comment>
                            <comment id="13739905" author="chaase3" created="Wed, 14 Aug 2013 18:29:51 +0100"  >&lt;p&gt;The spec draft looks great to me from a doc perspective &amp;#8211; very clear.&lt;/p&gt;

&lt;p&gt;One typo maybe &amp;#8211; in the second bullet item under &quot;The following rules apply:&quot;, should &quot;tableTable&quot; be &quot;targetTable&quot;?&lt;/p&gt;</comment>
                            <comment id="13739942" author="rhillegas" created="Wed, 14 Aug 2013 18:45:51 +0100"  >&lt;p&gt;Thanks for the quick feedback, Kim. I&apos;ll correct that typo in the next rev. Thanks.&lt;/p&gt;</comment>
                            <comment id="13745329" author="rhillegas" created="Tue, 20 Aug 2013 20:57:46 +0100"  >&lt;p&gt;Attaching derby-3155-01-ac-grammar.diff. This is the first increment of work for implementing the MERGE statement. This patch covers the grammar and bind() logic. I will run tests.&lt;/p&gt;

&lt;p&gt;Although permissions descriptors are attached at bind() time, I did not tackle any of the permissions logic. The GRANT/REVOKE behavior of the MERGE statement will have to be verified and debugged when the execution logic is written. This may cascade changes back into the bind() logic.&lt;/p&gt;

&lt;p&gt;It is also possible that I have modelled the bind() structures in a way which will be frustrating for code-generation or execution. When I tackle code-generation and execution, I may need to adjust the bind() logic further.&lt;/p&gt;

&lt;p&gt;However, at this point I think that this increment is big enough for submission. This is a convenient checkpoint of work on the MERGE statement.&lt;/p&gt;

&lt;p&gt;Here is the basic model I have adopted:&lt;/p&gt;

&lt;p&gt;1) The WHEN MATCHED ... THEN UPDATE clause is modelled by an internally generated UpdateNode.&lt;/p&gt;

&lt;p&gt;2) The WHEN MATCHED ... THEN DELETE clause is modelled by an internally generated DeleteNode.&lt;/p&gt;

&lt;p&gt;3) The WHEN NOT MATCHED ... THEN INSERT clause is modelled by an internally generated InsertNode.&lt;/p&gt;

&lt;p&gt;4) The WHEN [ NOT ] MATCHED clauses are driven by an internally generated HalfOuterJoinNode which represents the following query:&lt;/p&gt;

&lt;p&gt;    sourceTable LEFT OUTER JOIN targetTable ON searchCondition&lt;/p&gt;

&lt;p&gt;Along the way, I had to tweak other compile-time classes. However, I believe that these tweaks are minor. So far, the MERGE statement has not caused a lot of disruption.&lt;/p&gt;

&lt;p&gt;A valid MERGE statement currently raises the following error at the end of the bind phase:&lt;/p&gt;

&lt;p&gt;ERROR 0A000: Feature not implemented: MERGE.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Grammar changes, including the introduction of two new non-reserved keywords: MERGE and MATCHED.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;

&lt;p&gt;Adds two new query nodes. MergeNode is a new DMLModStatementNode parallel to InsertNode, UpdateNode, and DeleteNode. MatchingClauseNode is a single class which can represent all three variants of the WHEN [ NOT ] MATCHED clause.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;When we internally generate an UpdateNode for a WHEN MATCHED ... THEN UPDATE clause, we have to allow references to the source table on the right side of the SET operator. For example, in the following statement...&lt;/p&gt;

&lt;p&gt;merge into t1&lt;br/&gt;
using t2&lt;br/&gt;
on t1.c1 = t2.c1&lt;br/&gt;
when matched and t1.c2 != t2.c2 then update set c2 = t2.c2;&lt;/p&gt;

&lt;p&gt;...we allow &quot;set c2 = t2.c2&quot; even though the table being updated is t1, not t2. This means that for this case we must disable a little piece of logic which was deliberately nulling out the tablename in expressions on the right side of the SET operator.&lt;/p&gt;

&lt;p&gt;In addition, I disabled a Sanity check which prevented us from having more than one table in the query which drives an UPDATE statement. This was necessary in order to use a left join to drive the WHEN MATCHED ... THEN UPDATE clause.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UnionNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Some extra book-keeping was added in order to support DEFAULT values for generated columns in WHEN NOT MATCHED ... THEN INSERT clauses. The handling of generated columns (including identity columns) is already a set of brittle special cases. This makes the handling more brittle and flags an area which may need extra testing.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/JoinNode.java&lt;/p&gt;

&lt;p&gt;Two new methods were created in order to abstract out some bind() logic. That logic is now used both by ordinary left joins and by the internally generated left join which drives the MERGE statement.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Adds 3 new messages for errors discovered at bind() time.&lt;/p&gt;

&lt;p&gt;-------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Adds a battery of tests for the MERGE statement&apos;s bind() logic. Mostly these are negative tests, stressing error conditions.&lt;/p&gt;</comment>
                            <comment id="13745435" author="rhillegas" created="Tue, 20 Aug 2013 22:14:58 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-01-ac-grammar.diff.&lt;/p&gt;</comment>
                            <comment id="13746030" author="jira-bot" created="Wed, 21 Aug 2013 14:26:07 +0100"  >&lt;p&gt;Commit 1516157 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1516157&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1516157&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add grammar and bind logic for MERGE statement; commit derby-3155-01-ac-grammar.diff.&lt;/p&gt;</comment>
                            <comment id="13747486" author="knutanders" created="Thu, 22 Aug 2013 13:56:37 +0100"  >&lt;p&gt;Thanks for working on this feature, Rick. I tried a couple of queries in ij just to see how it worked. I understand that this is work in progress, so that some things are not expected to work yet. Still, I&apos;ll post my observations just in case:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If I use a correlation name for the target table, and the correlation name doesn&apos;t match an existing table, I get &quot;Table/View &apos;T1&apos; does not exist.&quot; instead of the expected &quot;Feature not implemented: MERGE&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The parser doesn&apos;t seem to accept more than one mergeWhenClause.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The examples in the functional specification are missing the THEN keyword.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13747569" author="rhillegas" created="Thu, 22 Aug 2013 15:55:53 +0100"  >&lt;p&gt;Attaching a second rev of the functional spec, incorporating feedback from Kim and Knut. This fixes typos and adds THENs to the example MERGE statements. Thanks for the feedback, Kim and Knut.&lt;/p&gt;</comment>
                            <comment id="13747573" author="rhillegas" created="Thu, 22 Aug 2013 16:01:21 +0100"  >&lt;p&gt;Thanks for test-driving the parse/bind changes, Knut.&lt;/p&gt;

&lt;p&gt;o The issue with correlation names needs to be looked into. I&apos;ll investigate this after I come up for air on the next patch I&apos;m hacking.&lt;/p&gt;

&lt;p&gt;o The issue with multiple WHEN [ NOT ] MATCHED clauses is fixed by a trivial correction to the grammar, which I&apos;ll roll onto the next patch. After applying that trivial fix, the following statement gets through the parse and bind phases:&lt;/p&gt;

&lt;p&gt;merge into t1&lt;br/&gt;
using t2&lt;br/&gt;
on t1.c1 = t2.c1&lt;br/&gt;
when matched and t1.c2 != t2.c2 then update set c2 = t2.c2&lt;br/&gt;
when not matched then insert ( c2 ) values ( t2.c2 );&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13749990" author="dagw" created="Mon, 26 Aug 2013 11:59:44 +0100"  >&lt;p&gt;just read through the functional spec of the MERGE statement. Looks good, found little to&lt;br/&gt;
whine about &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; Privileges - Current privileges must include:&lt;br/&gt;
&amp;gt; - UPDATE privilege on every updated column of targetTable.&lt;/p&gt;

&lt;p&gt;or on entire table (all columns)&lt;/p&gt;

&lt;p&gt;&amp;gt; - INSERT on every inserted column of targetTable.&lt;/p&gt;

&lt;p&gt;INSERT privilege is for the entire table right? (the wording &quot;on every inserted column&quot; threw me off)&lt;/p&gt;

&lt;p&gt;&amp;gt; functions - Functions mentioned in the booleanExpressions may not modify SQL data.&lt;/p&gt;

&lt;p&gt;Can they be non-deterministic I wonder?&lt;/p&gt;</comment>
                            <comment id="13750063" author="knutanders" created="Mon, 26 Aug 2013 13:54:12 +0100"  >&lt;p&gt;I noticed that JavaCC now emits a warning. Looks like it started with revision 1516157.&lt;/p&gt;

&lt;p&gt;genParser:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt;   Generating SQL parser...&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Java Compiler Compiler Version 4.0 (Parser Generator)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; (type &quot;javacc&quot; with no arguments for help)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Reading from file sqlgrammar.jj . . .&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Warning: Choice conflict in (...)* construct at line 8313, column 31.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          Expansion nested within construct and expansion following construct&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          have common prefixes, one of which is: &quot;,&quot;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          Consider using a lookahead of 2 or more for nested expansion.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;TokenMgrError.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;ParseException.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;Token.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;CharStream.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Parser generated with 0 errors and 1 warnings.&lt;/p&gt;</comment>
                            <comment id="13750089" author="rhillegas" created="Mon, 26 Aug 2013 14:40:20 +0100"  >&lt;p&gt;Thanks for that feedback, Dag. Attaching a third rev of the spec, which makes the clarifications you suggest.&lt;/p&gt;

&lt;p&gt;Concerning non-deterministic expressions, including non-deterministic functions: Determinism isn&apos;t discussed by the SQL Standard, part 2, section 14.12 (&amp;lt;merge statement&amp;gt;). I can find no limitations related to determinism. Probably people would want to issue MERGE statements which mention non-deterministic expressions like CURRENT DATE.  &lt;/p&gt;</comment>
                            <comment id="13750091" author="rhillegas" created="Mon, 26 Aug 2013 14:50:11 +0100"  >&lt;p&gt;Thanks for spotting that JavaCC warning, Knut. I turned on verbose compilation and saw the same warning on the trunk at the point where I last sync&apos;d. However, I don&apos;t see that warning after applying the trivial grammar change which addressed a previous problem you discovered: lack of support for multiple MATCHED clauses. After making that trivial grammar change, the verbose parser output looks like this for me:&lt;/p&gt;

&lt;p&gt;genParser:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt;   Generating SQL parser...&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Java Compiler Compiler Version 4.0 (Parser Generator)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; (type &quot;javacc&quot; with no arguments for help)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Reading from file sqlgrammar.jj . . .&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;TokenMgrError.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;ParseException.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;Token.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; File &quot;CharStream.java&quot; does not exist.  Will create one.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Parser generated successfully.&lt;/p&gt;

&lt;p&gt;So I think that the parser warning will disappear on trunk when I submit my next patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="13770732" author="rhillegas" created="Wed, 18 Sep 2013 13:43:22 +0100"  >&lt;p&gt;Attaching derby-3155-02-ag-fixParserWarning.diff. This patch removes the spurious comma separating WHEN [ NOT ] MATCHED clauses in the grammar. I am running tests now.&lt;/p&gt;

&lt;p&gt;This addresses two problems noted by Knut:&lt;/p&gt;

&lt;p&gt;o You can&apos;t issue a MERGE statement with multiple WHEN [ NOT ] MATCHED clauses using the grammar described by the functional spec.&lt;/p&gt;

&lt;p&gt;o If you compile verbosely, you see the following warning during parser generation:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Warning: Choice conflict in (...)* construct at line 8313, column 31.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Expansion nested within construct and expansion following construct&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; have common prefixes, one of which is: &quot;,&quot;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Consider using a lookahead of 2 or more for nested expansion.&lt;/p&gt;

&lt;p&gt;I had planned to roll this fix onto a patch with more functionality, but that patch is taking longer to write than I originally thought. So I&apos;m submitting this small change by itself.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;</comment>
                            <comment id="13770828" author="jira-bot" created="Wed, 18 Sep 2013 15:43:57 +0100"  >&lt;p&gt;Commit 1524432 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1524432&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1524432&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Remove spurious comma from grammar production for multiple WHEN &lt;span class=&quot;error&quot;&gt;&amp;#91;NOT&amp;#93;&lt;/span&gt; MATCHED clauses in MERGE statement; tests ran cleanly on derby-3155-02-ag-fixParserWarning.diff.&lt;/p&gt;</comment>
                            <comment id="13786472" author="rhillegas" created="Fri, 4 Oct 2013 19:34:27 +0100"  >&lt;p&gt;Attaching derby-3155-03-ae-backingStoreHashtableWithRowLocation.diff. This patch adds support for BackingStoreHashtables which include a RowLocation for each row. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch intends to not degrade the performance of the existing code paths for BackingStoreHashtables which don&apos;t include RowLocations. BackingStoreHashtables which include RowLocations may incur some extra performance drag.&lt;/p&gt;

&lt;p&gt;I have hand-tested the changes by running some ad-hoc tests which use in-memory hash tables and by running SpillHashTest. I ran these tests with the current patch and with a dummy version which forced all BackingStoreHashtables to include RowLocation information.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/types/LocatedRow.java&lt;/p&gt;

&lt;p&gt;1) Introduces a new class, LocatedRow, which is basically a struct containing an array of column values followed by a RowLocation field.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromScan.java&lt;/p&gt;

&lt;p&gt;2) Makes a number of changes to BackingStoreHashtable:&lt;/p&gt;

&lt;p&gt;a) Introduces a new public method, includeRowLocations(). This defaults to return false. However, the BackingStoreHashTableFromScan subclass overrides this method and may return true depending on its constructor args.&lt;/p&gt;

&lt;p&gt;b) Changes the signature of add_row_to_hash_table() and putRow() to include a RowLocation arg. This arg will be null when includeRowLocations() returns false.&lt;/p&gt;

&lt;p&gt;c) When includeRowLocations() returns false, the behavior of the class is pretty much unchanged. That is, the in-memory hash table continues to contain DataValueDescriptor[] rows or buckets (lists) of those rows. If the hash table spills to disk, DataValueDescriptor[] rows are written to disk. When they are read back in, they continue to be either standalone DataValueDescriptor[] rows or buckets (lists) of those rows.&lt;/p&gt;

&lt;p&gt;d) When includeRowLocations() returns true, the in-memory hash table contains LocatedRows and buckets (lists) of LocatedRows. If the hash table spills to disk, DataValueDescriptor[] rows are written to disk; the last cell of these rows is the RowLocation. When they are read back in, they are re-packaged as LocatedRows or buckets of LocatedRows.&lt;/p&gt;

&lt;p&gt;e) The memory usage methods have been adjusted to account for the extra overhead when a LocatedRow is used instead of a plain DataValueDescriptor[].&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java&lt;/p&gt;

&lt;p&gt;3) Store changes to account for the new RowLocation arg added to the signatures of add_row_to_hash_table() and putRow(). A new method was added to HeapScan for constructing RowLocations when necessary.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/store/access/TransactionController.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/store/access/RAMTransaction.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java&lt;/p&gt;

&lt;p&gt;4) TransactionController was adjusted to account for the new constructor arg for BackingStoreHashTableFromScan.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/store/build.xml&lt;/p&gt;

&lt;p&gt;5) The build target for this package was changed to uncomment the lint diagnostic for unchecked casts.&lt;/p&gt;

&lt;p&gt;-------------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;6) ResultSets in the execution layer have been changed to account for the new constructor arg of BackingStoreHashTableFromScan. Changes have also been made to account for the fact that the hash table can now return LocatedRows or buckets of LocatedRows.&lt;/p&gt;</comment>
                            <comment id="13786526" author="rhillegas" created="Fri, 4 Oct 2013 20:21:16 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-03-ae-backingStoreHashtableWithRowLocation.diff.&lt;/p&gt;</comment>
                            <comment id="13789878" author="mikem" created="Wed, 9 Oct 2013 01:36:16 +0100"  >&lt;p&gt;initial high level thought on store api changes, still looking at detail code.&lt;/p&gt;

&lt;p&gt;1) I was hoping that the interface change could somehow be made specific to just the merge usage.  Instead it looks like you changed&lt;br/&gt;
    the generic hash scan result set code to now handle this mode in addition to original mode.   While better for code sharing, there&lt;br/&gt;
    is obviously more overhead for the original code and the original fast path to handle more arguments and more if/then/elses for the&lt;br/&gt;
    new row passing scheme.  I know the overhead is likely small, but would like to avoid if possible.  This may be acceptable, for me it makes a complicated interface even more complicated.  Was looking maybe for&lt;br/&gt;
    a brand new backing store hash table that only handled this new LocatedRow.  Downside is probably this causes less code sharing and   new interfaces that are similar to old ones with just handling the new row holder rather than the old.  &lt;/p&gt;

&lt;p&gt;2) also see that you have a new LocatedRow which seems like a very clean way to handle a row and it&apos;s associated row location.  But there are interfaces to shove the RowLocation onto the end of the row, which I think is a bad idea.  If this is really needed I wonder if we can move that representation out of the store interface and into the sql layer somehow.   It may become obvious on more detailed review but can you say why this is needed.  &lt;/p&gt;</comment>
                            <comment id="13790423" author="mikem" created="Wed, 9 Oct 2013 15:57:02 +0100"  >&lt;p&gt;start of detail review:&lt;/p&gt;

&lt;p&gt;initial high level thought on store api changes, still looking at detail code.&lt;br/&gt;
 nits: in LocatedRow: some code more than 80 char line. not sure where derby code standard is, but I find reading 1-line for loops and 1 line procedures distracting. &lt;br/&gt;
BackingStoreHashTable:&lt;br/&gt;
 +unnecessary +80 col lines&lt;br/&gt;
 +should look at interface and see if external users of this class actually need to know the format of data spilled to disk. If this were private to the implementation then maybe it is less a problem to add the rowlocation to end of row on write to disk and read back from disk. maybe a comment in the routine that creates a BackingStoreHashtable from a rowsource that is never creates the &quot;new&quot; style hash table (or should it be paying attention to include row source?)  It is kind of ugly already that there is implementation code in the &lt;br/&gt;
interface - but that is an existing problem - not anything you added.&lt;br/&gt;
 + the following call is extra per row in the new code, and is not needed for non-merge system: &lt;br/&gt;
Object hashValue = makeHashValue( columnValues, rowLocation ); &lt;br/&gt;
maybe some comments why it ok to pass hashValue into the space accounting rather than row. I think it is ok, just lost the logic while reading - i think hashValue has the row in it at this point.&lt;br/&gt;
 more single line if body else body &lt;/p&gt;

&lt;p&gt;as far in detail i got though patch so far (around line 300 of 1000).   &lt;/p&gt;</comment>
                            <comment id="13790467" author="rhillegas" created="Wed, 9 Oct 2013 16:26:10 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Thanks for the initial review of derby-3155-03-ae-backingStoreHashtableWithRowLocation.diff. Some responses follow:&lt;/p&gt;

&lt;p&gt;1) You have put your finger on the big design problem for BackingStoreHashtable: the desire for code re-use vs. the desire to not perturb the existing code path. These were the options I considered:&lt;/p&gt;

&lt;p&gt;a) Clone BackingStoreHashtable in order to create a new implementation just for RowLocations.&lt;/p&gt;

&lt;p&gt;+ With this solution, it&apos;s easy to prove to yourself that the existing code path is not perturbed.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This is a very large, complicated class to begin with. I did not want to multiply the code complexity by 2. Cloning creates the brittle situation where even experts can forget to apply a bug fix in two parallel places.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;b) Add the RowLocation support inline inside the existing BackingStoreHashtable.&lt;/p&gt;

&lt;p&gt;+ The additional code complexity and brittleness is minimal.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;However, the existing code path is perturbed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;c) Subclass BackingStoreHashtable.&lt;/p&gt;

&lt;p&gt;+ This would add less complexity to the existing code path than (b).&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This is probably less brittle than (a) but more brittle than (b).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The additional overhead for the existing code path is pretty much the same as for (b). Basically some conditional blocks could be turned into method calls.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;But now BackingStoreHashTableFromScan would probably need to be subclassed too. We would have 4 classes doing the job of 1.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;d) Subclass BackingStoreHashTableFromScan.&lt;/p&gt;

&lt;p&gt;+/ This has pretty much the same advantages and disadvantages as (c). In addition...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This would make it more difficult to add support for RowLocations to hash tables which AREN&apos;T driven by scans.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;e) Instead of subclassing BackingStoreHashTableFromScan, just add some new methods to it.&lt;/p&gt;

&lt;p&gt;+/ This has pretty much the same advantages and disadvantages as (d). In addition...&lt;/p&gt;

&lt;p&gt;+ Creates 1 fewer class.&lt;/p&gt;

&lt;p&gt;To summarize:&lt;/p&gt;

&lt;p&gt;(a) I rejected this option because it seemed too complex.&lt;/p&gt;

&lt;p&gt;(b) I settled on this option because it seemed to strike the best balance between complexity and performance. I do think that the additional overhead for the existing code path is not measurable.&lt;/p&gt;

&lt;p&gt;(c) I rejected this option because it seemed too complex.&lt;/p&gt;

&lt;p&gt;(d) (e) I rejected these because of the difficulty they pose for adding future RowLocation support to hash tables which AREN&apos;T driven by scans.&lt;/p&gt;

&lt;p&gt;Other suggestions are certainly welcome!&lt;/p&gt;


&lt;p&gt;2) As you note, LocatedRow contains the logic for appending the RowLocation onto the end of a DataValueDescriptor[]. The logic is indeed needed by the language layer. But it&apos;s also needed by BackingStoreHashtable when it spills rows to disk. These were the options I considered:&lt;/p&gt;

&lt;p&gt;a) Put the logic in LocatedRow, where it can be shared by both the language and Store layers.&lt;/p&gt;

&lt;p&gt;b) Put the logic somewhere else, where it can be shared.&lt;/p&gt;

&lt;p&gt;c) Clone the logic, keeping one copy of the code in the language layer and another copy in the Store.&lt;/p&gt;

&lt;p&gt;In the interests of reduced complexity and brittleness, I thought that (a) was the best choice. But other suggestions are certainly welcome.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13790542" author="rhillegas" created="Wed, 9 Oct 2013 16:53:54 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Thanks for the second set of comments on derby-3155-03-ae-backingStoreHashtableWithRowLocation.diff. I&apos;m happy to make the formatting changes you suggest. Some more responses follow:&lt;/p&gt;


&lt;p&gt;&amp;gt; should look at interface and see if external users of this class actually need to know the format of data spilled to disk. If this were private to the implementation then maybe it is less a problem to add the rowlocation to end of row on write to disk and read back from disk.&lt;/p&gt;

&lt;p&gt;I may not understand this question, but here are some more thoughts:&lt;/p&gt;

&lt;p&gt;The api for BackingStoreHashtable has certainly become uglier. We go from a bad situation where BackingStoreHashtable can return 2 kinds of objects and the calling code has to figure out the type of what&apos;s being retrieved. The 2 types are...&lt;/p&gt;

&lt;p&gt;i) Rows&lt;br/&gt;
ii) Buckets of rows&lt;/p&gt;

&lt;p&gt;...and the patch takes us to a situation where BackingStoreHashtable can now return 4 types of objects:&lt;/p&gt;

&lt;p&gt;i) Rows&lt;br/&gt;
ii) Buckets of rows&lt;br/&gt;
iii) LocatedRows&lt;br/&gt;
iv) Buckets of LocatedRows&lt;/p&gt;

&lt;p&gt;It might be cleaner if the existing methods always returned buckets of rows and if we added some new methods to return buckets of LocatedRows. However, a change like this would perturb more code. In addition, wrapping single rows in vacuous buckets might result in a measurable performance hit on old code paths.&lt;/p&gt;

&lt;p&gt;&amp;gt; maybe a comment in the routine that creates a BackingStoreHashtable from a rowsource that is never creates the &quot;new&quot; style hash table (or should it be paying attention to include row source?) It is kind of ugly already that there is implementation code in the&lt;br/&gt;
interface - but that is an existing problem - not anything you added.&lt;/p&gt;

&lt;p&gt;This sounds like a good idea.&lt;/p&gt;


&lt;p&gt;&amp;gt; the following call is extra per row in the new code, and is not needed for non-merge system:&lt;br/&gt;
Object hashValue = makeHashValue( columnValues, rowLocation );&lt;br/&gt;
maybe some comments why it ok to pass hashValue into the space accounting rather than row. I think it is ok, just lost the logic while reading - i think hashValue has the row in it at this point.&lt;/p&gt;

&lt;p&gt;Adding a comment sounds like a good idea. The point of the code is this: Space accounting is responsible for calculating how much space is taken up by the whole value which is stored in the hash table. For rows which don&apos;t have RowLocations, the value is just a row (a DataValueDescriptor[]). But for LocatedRows, there is some additional space consumed by the RowLocation and by the wrapping LocatedRow object.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13790987" author="mikem" created="Thu, 10 Oct 2013 00:19:06 +0100"  >&lt;p&gt;thanks for the thought process behind the decisions on the change.  Given that and I can&apos;t come up with anything better I am ok with the overall approach.   &lt;/p&gt;

&lt;p&gt;Obviously will need some tests for the code path, but I assume that will be covered by your overall changes to use this.  I  really like that &lt;br/&gt;
you ran all the code in your path with this mode as default, maybe worth doing that one last time when you have everything checked in.&lt;/p&gt;

&lt;p&gt;if it makes sense for you i will wait for your next patch to do detailed review of the rest.  I understand this one was to make sure you were&lt;br/&gt;
on a good path - which I think you are.  &lt;/p&gt;</comment>
                            <comment id="13791710" author="rhillegas" created="Thu, 10 Oct 2013 18:32:59 +0100"  >&lt;p&gt;Attaching derby-3155-03-af-backingStoreHashtableWithRowLocation.diff. This patch incorporates Mike&apos;s review comments. I have run SpillHashTest as is and also with some dummy code which forces backing hash tables to always include RowLocations. I am running the full tests now.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes to the previous rev. Most of these changes are in BackingStoreHashtable:&lt;/p&gt;

&lt;p&gt;1) Observes an 80 character line limit.&lt;/p&gt;

&lt;p&gt;2) Regularizes the formatting of &quot;if&quot; statements: Consequents are always enclosed in curly braces. Consequents no longer appear on the same line as the &quot;if&quot; condition. The occasional form &quot;if(&quot; is replaced with &quot;if (&quot;.&lt;/p&gt;

&lt;p&gt;3) The makeHashValue() method has been eliminated. Its code has been inlined in the two places where it was called.&lt;/p&gt;

&lt;p&gt;4) Extra comments have been added. In particular, comments have been added to point out that RowLocations are not currently supported for RowSource-based hash tables. Also, comments have been added to the elements() and get() methods, explaining what kind of returned Objects the caller must expect.&lt;/p&gt;


&lt;p&gt;Touches the same files as the previous rev of the patch.&lt;/p&gt;</comment>
                            <comment id="13791852" author="rhillegas" created="Thu, 10 Oct 2013 20:00:26 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-04-ab-deleteClauseNoStore.diff.&lt;/p&gt;</comment>
                            <comment id="13799432" author="rhillegas" created="Fri, 18 Oct 2013 20:28:28 +0100"  >&lt;p&gt;Attaching derby-3155-04-ae-deleteAction.diff. This patch adds code-generation and execution support for the DELETE actions of MERGE statements. With this patch I am able to successfully use a MERGE statement to DELETE rows from a table. Cascaded foreign keys and DELETE trigger actions are handled correctly. I have only been able to test this functionality with search conditions which cause the optimizer to pick a nested loop strategy for the driving left join of the MERGE statement. This patch will need to be adjusted after the review of derby-3155-03-af-backingStoreHashtableWithRowLocation.diff is done and that functionality is committed. However, I am attaching this patch now just in case my laptop suffers a disaster in the meantime.&lt;/p&gt;

&lt;p&gt;Even after adjustment, the DELETE functionality will need more work, particularly in the areas of permissions checking and dependency tracking.&lt;/p&gt;

&lt;p&gt;For people who are interested in a preliminary peek at the implementation, the best place to start is the header comment on MergeNode.&lt;/p&gt;</comment>
                            <comment id="13802012" author="mikem" created="Tue, 22 Oct 2013 18:01:08 +0100"  >&lt;p&gt;hi, I am reviewing in detail.  could you expand on the following:&lt;br/&gt;
4) Extra comments have been added. In particular, comments have been added to point out that RowLocations are not currently supported for RowSource-based hash tables.&lt;/p&gt;

&lt;p&gt;Is the plan to support this with future changes?  Or are RowSource-based hash tables always indexes?  &lt;/p&gt;</comment>
                            <comment id="13802063" author="mikem" created="Tue, 22 Oct 2013 18:53:42 +0100"  >&lt;p&gt;overall comments:&lt;br/&gt;
i am fine with approach and implementation.&lt;br/&gt;
would like to understand the includeLocations use in the code, if this is in progress or what is expected for whole project.&lt;br/&gt;
might be good to add an assert somewhere if code tries to ask for a RowLocation on a btree, or at least understand what&lt;br/&gt;
  happens in checked in code if that happened.&lt;/p&gt;

&lt;p&gt;Here are file by file, mostly just more style and 80 char comments - and content comments are about the above question:&lt;br/&gt;
Index: java/storeless/org/apache/derby/impl/storeless/NoOpTransaction.java&lt;br/&gt;
no comments.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/iapi/types/LocatedRow.java (revision 0)&lt;br/&gt;
no comments.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java&lt;/p&gt;

&lt;p&gt;psuedo code in BackingStoreHashTable javdoc is not right anymore, it shows row&lt;br/&gt;
as being Object[].  Not sure if the hash description is right or not still.&lt;/p&gt;

&lt;p&gt;nit: comments added, over 80 char line&lt;/p&gt;

&lt;p&gt;this comment is confusing to me:&lt;br/&gt;
 Currently, if the RowSource is not null, then there is no su&lt;br/&gt;
 pport for including RowLocations in the returned rows. That functionality is&lt;br/&gt;
 only supported for scans from base tables.&lt;/p&gt;

&lt;p&gt;I think BackingStoreHashTable constructor action is now dependent on info&lt;br/&gt;
provided from the passed in row source, some comment on that would help - which&lt;br/&gt;
may be what the above is trying to say.&lt;/p&gt;

&lt;p&gt;is it right that includeRowLocations is hard coded to return false?&lt;/p&gt;

&lt;p&gt;nit: the following style still in code (this could just be my issue):&lt;br/&gt;
+        if ( !includeRowLocations() )&lt;br/&gt;
+        &lt;/p&gt;
{ return diskRow; }
&lt;p&gt;+        else &lt;/p&gt;
{ return new LocatedRow( diskRow ); }
&lt;p&gt;I think the 2 acceptable forms are either:&lt;br/&gt;
if ( !includeRowLocations() )&lt;/p&gt;
{
    return diskRow;
}
&lt;p&gt;else&lt;/p&gt;
{
    return new LocatedRow( diskRow );
}

&lt;p&gt;if ( !includeRowLocations() ) &lt;/p&gt;
{

    return diskRow;

}
&lt;p&gt; else &lt;/p&gt;
{

    return new LocatedRow( diskRow );
}

&lt;p&gt;Index: java/engine/org/apache/derby/iapi/store/access/TransactionController.java&lt;/p&gt;

&lt;p&gt;nit: over 80 char lines&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/iapi/store/build.xml&lt;/p&gt;

&lt;p&gt;no comments.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/DistinctScanResultSet.java&lt;/p&gt;

&lt;p&gt;no comments&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java&lt;/p&gt;

&lt;p&gt;no comments&lt;br/&gt;
Index: java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java&lt;/p&gt;

&lt;p&gt;nit: single line code style&lt;br/&gt;
no other comments&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.&lt;br/&gt;
java&lt;br/&gt;
no comments, not reviewed.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;no comments&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanCo&lt;br/&gt;
ntroller.java&lt;br/&gt;
nit: over 80 char&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/access/BackingStoreHashTableFromS&lt;br/&gt;
can.java&lt;/p&gt;

&lt;p&gt;no comments&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/access/btree/BTreeForwardScan.jav&lt;br/&gt;
a&lt;br/&gt;
no comments.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/access/RAMTransaction.java&lt;/p&gt;

&lt;p&gt;no comments.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/access/heap/HeapScan.java&lt;/p&gt;

&lt;p&gt;no comments.&lt;/p&gt;

&lt;p&gt;Index: java/testing/org/apache/derbyTesting/unitTests/store/T_QualifierTest.java&lt;/p&gt;

&lt;p&gt;no comments.&lt;/p&gt;</comment>
                            <comment id="13802082" author="rhillegas" created="Tue, 22 Oct 2013 19:21:13 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Responding to your first comment:&lt;/p&gt;

&lt;p&gt;If someone needs RowLocations in RowSource-driven hash tables, then they are welcome to add that functionality. I was not planning to add that functionality as part of this effort.&lt;/p&gt;

&lt;p&gt;BackingStoreHashtables appear to be created in two ways right now:&lt;/p&gt;

&lt;p&gt;1) Directly by invoking the BackingStoreHashtable constructor.&lt;/p&gt;

&lt;p&gt;2) Indirectly by calling TransactionController.createBackingStoreHashtableFromScan().&lt;/p&gt;

&lt;p&gt;In the execution layer, ScrollInsensitiveResultSet and UpdateResultSet directly create BackingStoreHashtables with null RowSource arguments. Also in the execution layer, HashTableResultSet directly creates a BackingStoreHashtable with a RowSource which is itself, that is, essentially a filtered version of its child node (and therefore not a scan).&lt;/p&gt;

&lt;p&gt;In the Store layer, BackingStoreHashTableFromScan directly invokes the BackingStoreHashtable constructor (its superclass) with a null RowSource.&lt;/p&gt;

&lt;p&gt;RAMTransaction.createBackingStoreHashtableFromScan() itself constructs a BackingStoreHashTableFromScan and therefore the RowSource is null.&lt;/p&gt;

&lt;p&gt;So I am only seeing one code path where a non-null RowSource is specified. That is in HashTableResultSet. But I must be missing something because your question implies that these are created by index scans.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13802201" author="rhillegas" created="Tue, 22 Oct 2013 20:58:42 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Here are responses to your later comments:&lt;/p&gt;

&lt;p&gt;&amp;gt; would like to understand the includeLocations use in the code, if this&lt;br/&gt;
&amp;gt; is in progress or what is expected for whole project.&lt;/p&gt;

&lt;p&gt;In a nutshell, includeRowLocations() == true iff the contents of the hash table are LocatedRows. Conversely, includeRowLocations() == false iff the contents of the hash table are DataValueDescriptor[]. Support for LocatedRows is provided for scan-driven (rather than RowSource-driven) hashtables. If someone wants to add LocatedRow support for RowSource-driven hash tables, they are welcome to do so. But I don&apos;t recommend doing this until someone has an actual use-case which would benefit from this feature and prove that it works. At this time, my MERGE statement work hasn&apos;t created such a use-case.&lt;/p&gt;

&lt;p&gt;&amp;gt; might be good to add an assert somewhere if code tries to ask for a&lt;br/&gt;
&amp;gt; RowLocation on a btree, or at least understand what&lt;br/&gt;
&amp;gt; happens in checked in code if that happened.&lt;/p&gt;

&lt;p&gt;I will put the following assertion at the beginning of BTreeForwardScan.fetchRows():&lt;/p&gt;

&lt;p&gt;        if (SanityManager.DEBUG)&lt;/p&gt;
        {
            // RowLocations in the BTree itself are unstable and should
            // not be put in long-lived structures like persistent hash tables.
            SanityManager.ASSERT
                ( (hash_table == null) || !hash_table.includeRowLocations() );
        }

&lt;p&gt;&amp;gt; Index: java/engine/org/apache/derby/iapi/store/access/BackingStoreHashtable.java&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; psuedo code in BackingStoreHashTable javdoc is not right anymore, it shows row&lt;br/&gt;
&amp;gt; as being Object[]. Not sure if the hash description is right or not still.&lt;/p&gt;

&lt;p&gt;I will change the row declaration in the pseudo-code to:&lt;/p&gt;

&lt;p&gt;Object row; // is a DataValueDescriptor[] or a LocatedRow&lt;/p&gt;

&lt;p&gt;The hash description looks right to me, but I am happy to correct it if you see a problem.&lt;/p&gt;

&lt;p&gt;&amp;gt; nit: comments added, over 80 char line&lt;/p&gt;

&lt;p&gt;I don&apos;t see any added lines which bust this limit now. There are some original lines which bust this limit, however. If you still think some lines should be corrected, please give me the offending line numbers.&lt;/p&gt;

&lt;p&gt;&amp;gt; this comment is confusing to me:&lt;br/&gt;
&amp;gt; Currently, if the RowSource is not null, then there is no su&lt;br/&gt;
&amp;gt; pport for including RowLocations in the returned rows. That functionality is&lt;br/&gt;
&amp;gt; only supported for scans from base tables.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think BackingStoreHashTable constructor action is now dependent on info&lt;br/&gt;
&amp;gt; provided from the passed in row source, some comment on that would help - which&lt;br/&gt;
&amp;gt; may be what the above is trying to say.&lt;/p&gt;

&lt;p&gt;I will change the comment to the following. I hope this is less confusing...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;constructor. RowLocations are supported iff row_source is null.&lt;/li&gt;
	&lt;li&gt;RowLocations in a non-null row_source can be added later&lt;/li&gt;
	&lt;li&gt;if there is a use-case that stresses this behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;...and I will add the following sanity check at the beginning of the constructor:&lt;/p&gt;

&lt;p&gt;        if (SanityManager.DEBUG)&lt;br/&gt;
        {&lt;br/&gt;
            // RowLocations are not currently supported if the&lt;br/&gt;
            // hash table is being filled from a non-null&lt;br/&gt;
            // row_source arg.&lt;br/&gt;
            if ( row_source != null )&lt;/p&gt;
            {
                SanityManager.ASSERT( !includeRowLocations() );
            }
&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;&amp;gt; is it right that includeRowLocations is hard coded to return false?&lt;/p&gt;

&lt;p&gt;That&apos;s correct. That method is overridden by the BackingStoreHashTableFromScan subclass, based on its constructor args.&lt;/p&gt;

&lt;p&gt;&amp;gt; nit: the following style still in code (this could just be my issue):&lt;br/&gt;
&amp;gt; + if ( !includeRowLocations() )&lt;br/&gt;
&amp;gt; +&lt;br/&gt;
&amp;gt; &lt;/p&gt;
{ return diskRow; }&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; + else&lt;br/&gt;
&amp;gt; { return new LocatedRow( diskRow ); }&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think the 2 acceptable forms are either:&lt;br/&gt;
&amp;gt; if ( !includeRowLocations() )&lt;br/&gt;
&amp;gt; { return diskRow; }
&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; else&lt;br/&gt;
&amp;gt; &lt;/p&gt;
{ return new LocatedRow( diskRow ); }&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; if ( !includeRowLocations() )&lt;br/&gt;
&amp;gt; { return diskRow; }&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; else&lt;br/&gt;
&amp;gt; { return new LocatedRow( diskRow ); }
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I&apos;m afraid I&apos;m not following this one. I don&apos;t see any instances of a blank line following &quot;if ( !includeRowLocations() )&quot; in the diff file. Can you give me the line number of the problematic usage?&lt;/p&gt;

&lt;p&gt;&amp;gt; Index: java/engine/org/apache/derby/iapi/store/access/TransactionController.java&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; nit: over 80 char lines&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Index: java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanCo&lt;br/&gt;
&amp;gt; ntroller.java&lt;br/&gt;
&amp;gt; nit: over 80 char&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13802203" author="rhillegas" created="Tue, 22 Oct 2013 21:00:51 +0100"  >&lt;p&gt;Attaching derby-3155-03-ag-backingStoreHashtableWithRowLocation.diff. This patch makes the changes which Mike recommended. I will run tests again.&lt;/p&gt;</comment>
                            <comment id="13802248" author="mikem" created="Tue, 22 Oct 2013 21:45:56 +0100"  >&lt;p&gt;sorry posting to JIRA is messing up the format that I am trying to talk about and turned it into exactly&lt;br/&gt;
what i was trying to say was not ok.   Never have figured out how to get a JIRA comment to properly&lt;br/&gt;
display code formatting.   I was not talking about blank lines,  but code and both open and close&lt;br/&gt;
parens on same line. &lt;/p&gt;

&lt;p&gt;so line 639 of BackingStoreHashTable.java has code and parens all on same line, i think it should&lt;br/&gt;
be 3 lines.  obviously a nit.  &lt;/p&gt;

&lt;p&gt;In vi if you search for &lt;/p&gt;
{.*}
&lt;p&gt; you will see other lines i was talking about.&lt;/p&gt;

&lt;p&gt;Your new comment changes and other change look good to me.&lt;/p&gt;</comment>
                            <comment id="13802321" author="rhillegas" created="Tue, 22 Oct 2013 22:50:23 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-03-ag-backingStoreHashtableWithRowLocation.diff.&lt;/p&gt;</comment>
                            <comment id="13802330" author="rhillegas" created="Tue, 22 Oct 2013 22:59:59 +0100"  >&lt;p&gt;Attaching derby-3155-03-ah-backingStoreHashtableWithRowLocation.diff. This patch re-formats some conditional blocks in BackingStoreHashtable as Mike recommended. I will run tests again.&lt;/p&gt;</comment>
                            <comment id="13802443" author="rhillegas" created="Wed, 23 Oct 2013 01:02:39 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-03-ah-backingStoreHashtableWithRowLocation.diff.&lt;/p&gt;</comment>
                            <comment id="13802840" author="jira-bot" created="Wed, 23 Oct 2013 13:15:26 +0100"  >&lt;p&gt;Commit 1535001 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1535001&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1535001&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add (optional) row locations to backing hash tables: derby-3155-03-ag-backingStoreHashtableWithRowLocation.diff.&lt;/p&gt;</comment>
                            <comment id="13803052" author="rhillegas" created="Wed, 23 Oct 2013 18:39:14 +0100"  >&lt;p&gt;Attaching derby-3155-04-af-deleteAction.diff. This patch enables the DELETE action of the MERGE statement, capitalizing on the row location work done by derby-3155-03-ah-backingStoreHashtableWithRowLocation.diff. I am running tests now.&lt;/p&gt;

&lt;p&gt;With this patch, I am able to use the MERGE statement to DELETE rows. Various combinations of the following conditions have been tested:&lt;/p&gt;

&lt;p&gt;1) MERGE statements with and without refined conditions in the WHEN MATCHED clause.&lt;/p&gt;

&lt;p&gt;2) Search conditions which cause the optimizer to choose a nested-loop strategy.&lt;/p&gt;

&lt;p&gt;3) Search conditions which cause the optimizer to choose a hash-join strategy.&lt;/p&gt;

&lt;p&gt;4) Target tables with before and after per-row triggers.&lt;/p&gt;

&lt;p&gt;5) Target tables with before and after per-statement triggers.&lt;/p&gt;


&lt;p&gt;The basic operation of the MERGE statement is described by the header comment in MergeNode. The following additional execution behavior is worth mentioning:&lt;/p&gt;

&lt;p&gt;The MergeResultSet loops through the rows coming from the driving left-join, assigning each row to a WHEN [ NOT ] MATCHED action. After all of the rows have been assigned, the MergeResultSet then calls logic in each matching clause action to process the buffered rows assigned to that action. The matching clause action does the following:&lt;/p&gt;

&lt;p&gt;i) Pushes the corresponding INSERT/UPDATE/DELETE ConstantAction onto a stack of constant actions, introduced by this patch. This makes that INSERT/UPDATE/DELETE ConstantAction the current ConstantAction for the Activation. Introducing a stack of ConstantActions caused fewer code changes than wrenching around the constructors and code generators for the Insert/Update/DeleteResultSets so that they could handle fetching a ConstantAction out of a variable in the Activation. The Insert/Update/DeleteResultSets continue to take whatever ConstantAction is at the top of the stack.&lt;/p&gt;

&lt;p&gt;ii) Pokes the temporary ResultSet of buffered rows into a variable which is pushed as an argument to the Insert/Update/DeleteResultSet.&lt;/p&gt;

&lt;p&gt;iii) Invokes a method to instantiate the Insert/Update/DeleteResultSet.&lt;/p&gt;

&lt;p&gt;iv) Opens the Insert/Update/DeleteResultSet in order to cause it to execute.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Changes for binding and code-generating MERGE statements with DELETE actions. See the header comment in MergeNode for more details.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/Activation.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;/p&gt;

&lt;p&gt;Introduces a stack of ConstantActions.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;/p&gt;

&lt;p&gt;Execution machinery to process the left-join, assign qualifying rows to the appropriate MatchingClauseConstantAction, and then invoke those ConstantActions in order after the left-join is drained.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/execute/ConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/execute/MergeConstantAction.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/execute/MatchingClauseConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java&lt;/p&gt;

&lt;p&gt;New Formatable ConstantActions: one for the overall MERGE statement and another for its WHEN [ NOT ] MATCHED clauses.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/ScanResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/HashScanResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BulkTableScanResultSet.java&lt;/p&gt;

&lt;p&gt;Changes to retrieve the target table&apos;s RowLocation during the processing of the driving left-join.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java&lt;/p&gt;

&lt;p&gt;Change HeapRowLocation.getObject() to return itself rather than null. This is the economical way to retrieve a RowLocation from a bulk scan.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;Re-worded an error message so it could be re-used for a MERGE-related error condition.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Tests for the new functionality.&lt;/p&gt;</comment>
                            <comment id="13803106" author="rhillegas" created="Wed, 23 Oct 2013 19:29:31 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-04-af-deleteAction.diff.&lt;/p&gt;</comment>
                            <comment id="13804131" author="jira-bot" created="Thu, 24 Oct 2013 13:42:00 +0100"  >&lt;p&gt;Commit 1535360 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1535360&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1535360&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add support for DELETE action of MERGE statement; checking in derby-3155-04-af-deleteAction.diff.&lt;/p&gt;</comment>
                            <comment id="13804276" author="rhillegas" created="Thu, 24 Oct 2013 15:56:59 +0100"  >&lt;p&gt;Attaching derby-3155-05-aa-triggerTransitionTableAsTarget.diff. This patch uncomments a test case which used to fail but which now succeeds.&lt;/p&gt;

&lt;p&gt;This case is supposed to verify that trigger transition tables can&apos;t be used as the target tables of MERGE statements. This test used to die on an assertion. The test now runs correctly, probably as a result of recent improvements in how the compiler handles transition tables.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13804278" author="jira-bot" created="Thu, 24 Oct 2013 15:58:40 +0100"  >&lt;p&gt;Commit 1535397 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1535397&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1535397&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Uncomment a test verifying that trigger transition tables cannot be used as the target tables of MERGE statements: derby-3155-05-aa-triggerTransitionTableAsTarget.diff.&lt;/p&gt;</comment>
                            <comment id="13804421" author="rhillegas" created="Thu, 24 Oct 2013 18:14:55 +0100"  >&lt;p&gt;Attaching derby-3155-06-aa-triggerTransitionTableAsSource.diff. This patch fixes some bugs in the serialization of the newly added ConstantActions and adds test cases for using trigger transition tables as the source tables for MERGE statements.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/MergeConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MatchingClauseConstantAction.java&lt;/p&gt;

&lt;p&gt;Fixes Formatable serialization for these classes.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;</comment>
                            <comment id="13804427" author="jira-bot" created="Thu, 24 Oct 2013 18:17:03 +0100"  >&lt;p&gt;Commit 1535447 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1535447&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1535447&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Fix some serialization bugs in the MERGE ConstantActions and add test cases for using trigger transition tables as the source tables of MERGE statements; check in derby-3155-06-aa-triggerTransitionTableAsSource.diff.&lt;/p&gt;</comment>
                            <comment id="13817317" author="rhillegas" created="Fri, 8 Nov 2013 14:41:54 +0000"  >&lt;p&gt;Attaching derby-3155-07-ad-insertAction.diff. This patch adds support for the INSERT action of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;The patch includes tests for the following use-cases:&lt;/p&gt;

&lt;p&gt;i) INSERT actions with DEFAULT expressions for identity, generated, and default columns&lt;/p&gt;

&lt;p&gt;ii) INSERT actions on tables with CHECK, UNIQUE, PRIMARY KEY, and FOREIGN KEY constraints.&lt;/p&gt;

&lt;p&gt;iii) INSERT actions in MERGE statements fired by triggers.&lt;/p&gt;

&lt;p&gt;iv) INSERT actions which fire triggers.&lt;/p&gt;

&lt;p&gt;v) MERGE statements with INSERT and DELETE actions operating together.&lt;/p&gt;

&lt;p&gt;The following behaviors have not been implemented/tested yet:&lt;/p&gt;

&lt;p&gt;a) UPDATE actions&lt;/p&gt;

&lt;p&gt;b) Permissions checking&lt;/p&gt;

&lt;p&gt;c) Dependency checking and statement invalidation&lt;/p&gt;

&lt;p&gt;So far the bulk of the complexity remains concentrated in compilation. &lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/execute/NoPutResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java&lt;/p&gt;

&lt;p&gt;Replaced a magic number with a named constant. Temporary tables don&apos;t have result set numbers assigned to them. But now they are being used to drive the INSERT/UPDATE/DELETE actions of MERGE statements. In order to get CHECK constraints to work properly, the row being checked is stuffed into slot 0 of the result set row array. That is usually the result set number corresponding to the driving result set of an INSERT/UPDATE/DELETE statement. And it was, coincidentally, the magic result set number of temporary tables. This decision may need to be re-visited if we invent other situations for which temporary tables need result set numbers.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;p&gt;Improved a method header comment.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;/p&gt;

&lt;p&gt;Added a new way to determine the data type of a ResultColumn. There is now a path through the pinball machine where the old technique didn&apos;t work.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;/p&gt;

&lt;p&gt;Compilation support for the INSERT action of a MERGE statement. The bulk of the new complexity has to do with generating the rows which are stuffed into a temporary table at execution time. There is considerable complexity involved in handling the DEFAULT keyword, which can appear as the value to be inserted into an identity, generated, or default column, as for instance, in this situation:&lt;/p&gt;

{
  create table t1_007
  (
      c1 int generated always as identity,
      c2 int,
      c3 int generated always as ( c1 + c2 ),
      c1_4 int,
      c5 int default 1000
  );

...

  merge into t1_007
  using t2_007
  on t1_007.c2 = t2_007.c2
  when not matched and t2_007.c5 = &apos;three&apos;
    then insert ( c1, c2, c3, c1_4, c5 ) values ( default, 100 * t2_007.c2, default, t2_007.c3, default );
}

&lt;p&gt;For an ordinary INSERT statement, much of that complexity is handled by the compilation of the driving SELECT. For a MERGE statement, that SELECT is a dummy statement which is not optimized or generated. That, in turn, short-circuits some of the complex handling of the DEFAULT keyword. So that logic had to be reproduced in MatchingClauseNode.&lt;/p&gt;

&lt;p&gt;There is already too much complexity in the handling of these special columns and now I have made the situation even more complicated. In particular, I don&apos;t understand why GENERATED BY DEFAULT AS IDENTITY and GENERATED ALWAYS AS IDENTITY take such different trajectories through the pinball machine. And I don&apos;t understand why the special columns are compiled with the driving SELECT rather than with the INSERT/UPDATE action itself. This is a source of brittleness which we should be aware of. However, I thought that cleaning this up was outside the scope of this JIRA.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CallStatementResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdatableVTIConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MiscResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeleteConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateConstantAction.java&lt;/p&gt;

&lt;p&gt;Added a small amount of logic so that INSERT/UPDATE/DELETE actions know at execution time whether they are running under a MERGE statement. If so, then we don&apos;t close the Activation at the end of the action. The Activation is closed by the MergeResultSet at the very end after all of the actions have run. This, in turn, makes it possible to run multiple INSERT/DELETE/UPDATE actions in a single MERGE statement.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;Added some special processing for generation clauses invoked by actions of MERGE statements. This is more of the fallout from the fact that the dummy SELECTs are not optimized and generated.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Abstracted some logic into a separate method so that it could be called when generating the temporary row for an INSERT action of a MERGE statement.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MatchingClauseConstantAction.java&lt;/p&gt;

&lt;p&gt;Changes to support INSERT actions under MERGE statements.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Tests for the new behavior.&lt;/p&gt;</comment>
                            <comment id="13817352" author="rhillegas" created="Fri, 8 Nov 2013 15:32:41 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-07-ad-insertAction.diff.&lt;/p&gt;</comment>
                            <comment id="13818960" author="jira-bot" created="Mon, 11 Nov 2013 13:40:45 +0000"  >&lt;p&gt;Commit 1540713 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1540713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1540713&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add support for INSERT action of MERGE statement; commit derby-3155-07-ad-insertAction.diff.&lt;/p&gt;</comment>
                            <comment id="13830160" author="rhillegas" created="Fri, 22 Nov 2013 17:56:45 +0000"  >&lt;p&gt;Attaching derby-3155-08-ah-updateAction.diff. This patch adds basic support for the UPDATE action of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch includes tests to stress simple examples of the following scenarios:&lt;/p&gt;

&lt;p&gt;1) Target tables with identity, generated, and default columns.&lt;/p&gt;

&lt;p&gt;2) Target tables with before/after row/statement UPDATE triggers.&lt;/p&gt;

&lt;p&gt;3) Target tables with primary, foreign, and check constraints.&lt;/p&gt;

&lt;p&gt;4) Source tables which are the OLD and NEW transition tables of triggers.&lt;/p&gt;

&lt;p&gt;5) MERGE statements combining all three kinds of actions: INSERT, UPDATE, and DELETE.&lt;/p&gt;

&lt;p&gt;When setting an identity column to the literal DEFAULT value, the UPDATE action of a MERGE statement behaves in the same incorrect way as an ordinary UPDATE statement. This behavior should be corrected when we fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6414&quot; title=&quot;Incorrect handling when using an UPDATE to SET an identity column to DEFAULT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6414&quot;&gt;&lt;del&gt;DERBY-6414&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;

&lt;p&gt;Bulk of the compile-time changes needed to support UPDATE actions.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;Changes to distinguish MERGE actions from UPDATEs driven by VTIs. It seems that trigger transition tables are modelled as VTIs when they drive UPDATEs.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromList.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;The binding of column references now involves poking the table name into the reference. Later on, this makes it possible to associate bound columns with their base tables when code-generating the temporary rows which are buffered up for UPDATE actions.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;

&lt;p&gt;Up until now, it has not been necessary to optimize the dummy SELECT which is cooked up while compiling INSERT/DELETE actions. However, we need to pre-process that SELECT for UPDATE actions. That is because an important re-mapping of column references happens during pre-processing. That re-mapping is needed in order to correctly code-generate CHECK constraints.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java&lt;/p&gt;

&lt;p&gt;The ResultDescription field, common across all of the leaf DML classes, has been pulled up into their common superclass. This makes it possible to pull some normalization logic up into the superclass for sharing between the INSERT and UPDATE actions of MERGE statements.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;/p&gt;

&lt;p&gt;Normalize the rows of UPDATE actions in order to enforce storability restrictions.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/access/heap/HeapRowLocation.java&lt;/p&gt;

&lt;p&gt;The RowLocations returned by the driving left join now implement RefDataValue. This eliminates a ClassCastException at run time.&lt;/p&gt;

&lt;p&gt;---------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;New tests for the new functionality.&lt;/p&gt;</comment>
                            <comment id="13830263" author="rhillegas" created="Fri, 22 Nov 2013 19:49:24 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-08-ah-updateAction.diff&lt;/p&gt;</comment>
                            <comment id="13831626" author="jira-bot" created="Mon, 25 Nov 2013 17:02:41 +0000"  >&lt;p&gt;Commit 1545343 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1545343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1545343&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add support for UPDATE action of MERGE statement: derby-3155-08-ah-updateAction.diff.&lt;/p&gt;</comment>
                            <comment id="13838011" author="rhillegas" created="Tue, 3 Dec 2013 18:38:11 +0000"  >&lt;p&gt;Attaching derby-3155-09-aa-correlationNames.diff. This patch adds better support for correlation names in MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;Correlation names on target tables were confusing the bind phase. The fix is to replace the correlation names with the actual base table name in all ColumnReferences in all expressions in the MERGE statement. This replacement is done before any of those expressions are bound.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;

&lt;p&gt;The fix.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Corresponding test cases.&lt;/p&gt;</comment>
                            <comment id="13838136" author="rhillegas" created="Tue, 3 Dec 2013 20:25:23 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-09-aa-correlationNames.diff.&lt;/p&gt;</comment>
                            <comment id="13838163" author="jira-bot" created="Tue, 3 Dec 2013 20:42:27 +0000"  >&lt;p&gt;Commit 1547585 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1547585&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1547585&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Improve handling of correlation names for the target tables in MERGE statements; commit derby-3155-09-aa-correlationNames.diff.&lt;/p&gt;</comment>
                            <comment id="13840345" author="rhillegas" created="Thu, 5 Dec 2013 18:01:12 +0000"  >&lt;p&gt;Attaching derby-3155-10-aa-correlationNames.diff. This patch improves the handling of correlation names for the source tables of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch makes changes to the handling of source table references similar to those made for target table references in the previous patch.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13840550" author="jira-bot" created="Thu, 5 Dec 2013 20:49:17 +0000"  >&lt;p&gt;Commit 1548298 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1548298&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1548298&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Improve support for correlation names for the source tables of MERGE statements; tests passed cleanly for me on derby-3155-10-aa-correlationNames.diff.&lt;/p&gt;</comment>
                            <comment id="13844596" author="rhillegas" created="Tue, 10 Dec 2013 19:47:08 +0000"  >&lt;p&gt;Attaching derby-3155-11-ab-beforeTriggersCantFireMerge.diff. This patch adds tests to verify that BEFORE triggers can&apos;t fire MERGE statements, just as they can&apos;t fire INSERT/UPDATE/DELETE statements.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13844598" author="jira-bot" created="Tue, 10 Dec 2013 19:48:28 +0000"  >&lt;p&gt;Commit 1549948 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1549948&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1549948&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add tests to verify that BEFORE triggers can&apos;t fire MERGE statements, just as they can&apos;t fire INSERT/UPDATE/DELETE statements; commit derby-3155-11-ab-beforeTriggersCantFireMerge.diff.&lt;/p&gt;</comment>
                            <comment id="13869457" author="knutanders" created="Mon, 13 Jan 2014 12:43:40 +0000"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;I got a NullPointerException from a MERGE statement on trunk:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij version 10.11
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;
ij&amp;gt; create table t1 (x int, y int);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2 (x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using t2 on t1.x = t2.x when matched then update set y = -y when not matched then insert values (t2.x, 42);
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.
java.lang.NullPointerException
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.bindInsertValues(MatchingClauseNode.java:783)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.bindInsert(MatchingClauseNode.java:738)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.bind(MatchingClauseNode.java:224)
	at org.apache.derby.impl.sql.compile.MergeNode.bindStatement(MergeNode.java:258)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:402)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:682)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13869461" author="knutanders" created="Mon, 13 Jan 2014 12:50:52 +0000"  >&lt;p&gt;The NPE goes away if I specify the target column names in the mergeInsert clause, like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij(CONNECTION4)&amp;gt; merge into t1 using t2 on t1.x = t2.x when matched then update set y = -y when not matched then insert (x, y) values (t2.x, 42);
0 rows inserted/updated/deleted
WARNING 02000: No row was found for FETCH, UPDATE or DELETE; or the result of a query is an empty table.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;According to the functional spec, the target column names are optional in the mergeInsert clause.&lt;/p&gt;</comment>
                            <comment id="13869540" author="rhillegas" created="Mon, 13 Jan 2014 13:37:14 +0000"  >&lt;p&gt;Thanks for kicking the tires, Knut. I&apos;ll take a look at this when I pop off my permissions-related interrupt stack. Looks like I need to add a dummy insert column list if the user omits one. Thanks!&lt;/p&gt;</comment>
                            <comment id="13869580" author="dyret" created="Mon, 13 Jan 2014 14:34:06 +0000"  >&lt;p&gt;Hi Rick, &lt;br/&gt;
it seems that if you have a &lt;tt&gt;targetCorrelationName&lt;/tt&gt; that&apos;s different from &lt;tt&gt;targetTable&lt;/tt&gt; you get an error if you&apos;re referring to &lt;tt&gt;targetCorrelationName&lt;/tt&gt; in a &lt;tt&gt;mergeWhenClause&lt;/tt&gt;. Using it in &lt;tt&gt;searchCondition&lt;/tt&gt; is ok:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLSyntaxErrorException: Table name &apos;M&apos; should be the same as &apos;META&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:93)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:691)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(EmbedStatement.java:181)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:170)&lt;br/&gt;
	at regexp.Driver.main(Driver.java:133)&lt;br/&gt;
Caused by: java.sql.SQLException: Table name &apos;M&apos; should be the same as &apos;META&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:138)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)&lt;br/&gt;
	... 9 more&lt;br/&gt;
Caused by: ERROR 42X55: Table name &apos;M&apos; should be the same as &apos;META&apos;.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:260)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(ResultColumn.java:915)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByName(ResultColumn.java:834)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(ResultColumnList.java:890)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.InsertNode.bindStatement(InsertNode.java:282)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.bindInsert(MatchingClauseNode.java:770)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.bind(MatchingClauseNode.java:224)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.MergeNode.bindStatement(MergeNode.java:258)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:402)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:682)&lt;br/&gt;
	... 3 more&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here is a script for this problem:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;

create table t1( a int, b int );
create table t2( c int, d int );

insert into t1 values ( 1, 100 ), ( 2, 200 );
insert into t2 values ( 1, 100 ), (2, 200), ( 3, 300 );

merge into t1 x
using t2 y on x.a = y.a
when matched and x.b &amp;gt; 100 then update set x.b = y.d;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13869595" author="knutanders" created="Mon, 13 Jan 2014 15:01:51 +0000"  >&lt;p&gt;If I use a system table as source table, I get an error message saying that the source must be a table, which it is:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using sysibm.sysdummy1 on true when not matched then insert (x) values (1);
ERROR 42XAL: The source table of a MERGE statement must be a base table, view, or table function.
ij&amp;gt; merge into t1 using sysibm.sysdummy1 s on true when not matched then insert (x) values (1);
ERROR 42XAL: The source table of a MERGE statement must be a base table, view, or table function.
ij&amp;gt; merge into t1 using sys.systables on true when not matched then insert (x) values (1);
ERROR 42XAL: The source table of a MERGE statement must be a base table, view, or table function.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13869597" author="knutanders" created="Mon, 13 Jan 2014 15:06:23 +0000"  >&lt;p&gt;Actually, the message says &quot;base table&quot;. Maybe system tables don&apos;t count as base tables?&lt;/p&gt;</comment>
                            <comment id="13869605" author="knutanders" created="Mon, 13 Jan 2014 15:14:56 +0000"  >&lt;p&gt;I&apos;ve discovered one more problem:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create view singlerow(x) as values 1;
0 rows inserted/updated/deleted
ij&amp;gt; create table t1(x int);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(y int);
0 rows inserted/updated/deleted
ij&amp;gt; create trigger tr after insert on t1 referencing new as new for each row merge into t2 using singlerow on t2.y = new.x when not matched then insert (y) values (new.x);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t1 values 1,2,3,4,5,4,3,2,1,1,1,2,3,100;
ERROR XJ001: Java exception: &apos;ASSERT FAILED ProjectRestrictResultSet already open: org.apache.derby.shared.common.sanity.AssertFailure&apos;. (errorCode = 0)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13869648" author="rhillegas" created="Mon, 13 Jan 2014 16:10:22 +0000"  >&lt;p&gt;Thanks, for kicking the tires, Knut and Dyre. Please keep finding problems. As I said, I&apos;ll take a look at these after I come up for air. Thanks!&lt;/p&gt;</comment>
                            <comment id="13870676" author="knutanders" created="Tue, 14 Jan 2014 12:28:37 +0000"  >&lt;p&gt;Here&apos;s another NPE:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using t2 on t1.x=t2.x when matched then update set x = (select count(*) from t2);
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;. (errorCode = 0)
java.lang.NullPointerException
	at org.apache.derby.impl.sql.compile.SelectNode.getFinalCostEstimate(SelectNode.java:2224)
	at org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(SubqueryNode.java:1936)
	at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:1056)
	at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(ResultColumnList.java:1452)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(MatchingClauseNode.java:1255)
	at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(MatchingClauseNode.java:1146)
	at org.apache.derby.impl.sql.compile.MergeNode.generate(MergeNode.java:770)
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:547)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:682)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:369)
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)
	at org.apache.derby.tools.ij.main(ij.java:59)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13870733" author="dyret" created="Tue, 14 Jan 2014 13:53:41 +0000"  >&lt;p&gt;I tried modifying Knut&apos;s singlerow view idea to use an ordinary table with a single row in it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;String q = &quot;MERGE INTO META USING SINGLEROW &quot;+&lt;br/&gt;
                &quot;ON META.i = 42 &quot;+&lt;br/&gt;
                &quot;WHEN MATCHED THEN UPDATE SET META.c = &apos;U&apos; &quot;+&lt;br/&gt;
                &quot;WHEN NOT MATCHED THEN INSERT (META.i, META.c) VALUES( 42, &apos;I&apos; )&quot;;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That triggers the following exception&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caused by: ERROR XSAI2: The conglomerate (0) requested does not exist.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:260)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(HeapConglomerateFactory.java:254)&lt;br/&gt;
	at org.apache.derby.impl.store.access.CacheableConglomerate.setIdentity(CacheableConglomerate.java:102)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(RAMAccessManager.java:466)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findConglomerate(RAMTransaction.java:404)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:383)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1289)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.newRowLocationTemplate(ResultColumnList.java:1641)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ResultColumnList.buildRowTemplate(ResultColumnList.java:1563)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(IndexToBaseRowNode.java:238)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1348)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1301)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1648)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1624)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1561)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.HalfOuterJoinNode.generate(HalfOuterJoinNode.java:786)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1348)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1301)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1445)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1301)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:86)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:628)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.MergeNode.generate(MergeNode.java:759)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:547)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:682)&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13870741" author="knutanders" created="Tue, 14 Jan 2014 14:05:20 +0000"  >&lt;p&gt;Here&apos;s another error:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij version 10.11
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;
ij&amp;gt; create table t1(x int, y varchar(100));
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t2 values 1, 1, 2;
3 rows inserted/updated/deleted
ij&amp;gt; insert into t1 values (1, null), (2, &apos;&apos;);
2 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using t2 on exists (select * from t2) when matched then update set y = y || &apos;x&apos;;
ERROR XSDA7: Restore of a serializable or SQLData object of class , attempted to read more data than was originally stored
ERROR XJ001: Java exception: &apos;: java.io.EOFException&apos;.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13870781" author="knutanders" created="Tue, 14 Jan 2014 14:54:14 +0000"  >&lt;p&gt;I&apos;m able to reproduce the &quot;conglomerate does not exist&quot; error that Dyre mentioned:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int primary key);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using t2 on t1.x = 42 when not matched then insert (x) values (42);
ERROR XSAI2: The conglomerate (0) requested does not exist.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13873710" author="rhillegas" created="Thu, 16 Jan 2014 18:30:42 +0000"  >&lt;p&gt;Attaching derby-3155-12-aa-canOmitInsertColumnList.diff. This patch fixes the following problem Knut found: you should be allowed to omit the INSERT column list in a WHEN NOT MATCHED clause if the number of values supplied in the VALUES subclause equals the number of columns in the table.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13873716" author="jira-bot" created="Thu, 16 Jan 2014 18:32:16 +0000"  >&lt;p&gt;Commit 1558871 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1558871&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1558871&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Make the INSERT column list optional in the WHEN NOT MATCHED clause of a MERGE statement provided that the number of values in the VALUES subclause equals the number of columns in the target table; commit derby-3155-12-aa-canOmitInsertColumnList.diff.&lt;/p&gt;</comment>
                            <comment id="13873910" author="rhillegas" created="Thu, 16 Jan 2014 20:44:22 +0000"  >&lt;p&gt;Attaching derby-3155-13-aa-allowSystemAndTempTables.diff. This patch addresses another problem Knut found: you couldn&apos;t use system tables as source tables.&lt;/p&gt;

&lt;p&gt;A couple small changes make the following operations possible:&lt;/p&gt;

&lt;p&gt;1) Using system tables as source tables&lt;/p&gt;

&lt;p&gt;2) Using temp tables as source tables and target tables&lt;/p&gt;

&lt;p&gt;The following is (and should be) illegal:&lt;/p&gt;

&lt;p&gt;3) Using system tables as target tables&lt;/p&gt;

&lt;p&gt;The following is still illegal but should be allowed. The fix, however, will be move involved:&lt;/p&gt;

&lt;p&gt;4) Using synonyms as source and target tables.&lt;/p&gt;

&lt;p&gt;Before addressing item 4, I would like to address other problems found by Knut and Dyre which I consider more important.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13873911" author="jira-bot" created="Thu, 16 Jan 2014 20:46:01 +0000"  >&lt;p&gt;Commit 1558912 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1558912&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1558912&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Allow system and temp tables in MERGE statements; commit derby-3155-13-aa-allowSystemAndTempTables.diff.&lt;/p&gt;</comment>
                            <comment id="13874945" author="rhillegas" created="Fri, 17 Jan 2014 16:53:40 +0000"  >&lt;p&gt;Attaching derby-3155-14-aa-replaceCorrelationNamesOnLeftSideOfSETclauses.diff. This patch fixes the following problem which Knut found: correlation names on the left side of SET clauses weren&apos;t being replaced with their table names.&lt;/p&gt;

&lt;p&gt;The problem was that I was relying on the Visitor logic in ResultColumn to visit the left side of SET clauses as well as the right side. But apparently it doesn&apos;t.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13874946" author="jira-bot" created="Fri, 17 Jan 2014 16:54:44 +0000"  >&lt;p&gt;Commit 1559183 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1559183&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1559183&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Replace correlation names on the left side of the SET clauses in MERGE statements: commit derby-3155-14-aa-replaceCorrelationNamesOnLeftSideOfSETclauses.diff.&lt;/p&gt;</comment>
                            <comment id="13875083" author="rhillegas" created="Fri, 17 Jan 2014 18:49:11 +0000"  >&lt;p&gt;Attaching derby-3155-15-aa-replumbMergeResultSetCleanup.diff. This patch fixes the following problem found by Knut: an assertion was raised under a row-scope trigger which fired a MERGE statement.&lt;/p&gt;

&lt;p&gt;I re-arranged the cleanup logic in MergeResultSet to more closely resemble the cleanup logic in InsertResultSet.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13875086" author="jira-bot" created="Fri, 17 Jan 2014 18:50:16 +0000"  >&lt;p&gt;Commit 1559218 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1559218&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1559218&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Make cleanup logic in MergeResultSet more closely resemble the cleanup logic in InsertResultSet; commit derby-3155-15-aa-replumbMergeResultSetCleanup.diff.&lt;/p&gt;</comment>
                            <comment id="13877361" author="knutanders" created="Tue, 21 Jan 2014 09:50:37 +0000"  >&lt;p&gt;Here&apos;s another one to ponder on:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij version 10.11
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;
ij&amp;gt; create table t(x int, y int);
0 rows inserted/updated/deleted
ij&amp;gt; create table tv(x int, y int);
0 rows inserted/updated/deleted
ij&amp;gt; create view v as select * from tv;
0 rows inserted/updated/deleted
ij&amp;gt; merge into t using v on t.x=v.x when matched then update set t.y=v.y;
ERROR XJ001: Java exception: &apos;ASSERT FAILED currentOfNode is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13877362" author="knutanders" created="Tue, 21 Jan 2014 09:55:47 +0000"  >&lt;p&gt;This may be intentional, but I thought I&apos;d raise the issue so that we can clarify whether or not it&apos;s supposed to be supported. Merge with self doesn&apos;t seem to be accepted:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t(x int, y int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t a using t b on a.x=b.x when matched then update set a.y=b.y;
ERROR 42X09: The table or alias name &apos;T&apos; is used more than once in the FROM list.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13877447" author="rhillegas" created="Tue, 21 Jan 2014 13:20:19 +0000"  >&lt;p&gt;Thanks for continuing to test-drive the MERGE statement. Yes, that last one is supposed to be forbidden, though I can see that the error message could be improved. The same table can&apos;t be used as both a source and target table. That&apos;s part of what&apos;s intended by the following bullet item in the functional spec under the heading &quot;New MERGE Statement Syntax&quot;. This item could probably stand some clarification:&lt;/p&gt;

&lt;p&gt;&quot;correlation names - The source table name (or its correlation name) may not be the same as the target table name (or its correlation name).&quot;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13877519" author="knutanders" created="Tue, 21 Jan 2014 15:13:40 +0000"  >&lt;p&gt;Thanks for that clarification. My original understanding of that bullet was that the exposed name of the source table had to be different from the exposed name of the target table.&lt;/p&gt;

&lt;p&gt;The assert failure that I posted just before the question about self merge, was something I originally came across while trying to work around the limitation. For example, this would allow you to do a self merge, but currently fails just like the repro above:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t(x int, y int);
0 rows inserted/updated/deleted
ij&amp;gt; create view v as select * from t;
0 rows inserted/updated/deleted
ij&amp;gt; merge into t using v on t.x=v.x when matched then update set t.y=v.y;
ERROR XJ001: Java exception: &apos;ASSERT FAILED currentOfNode is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13877594" author="rhillegas" created="Tue, 21 Jan 2014 16:33:38 +0000"  >&lt;p&gt;This patch addresses the following problem case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int primary key);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t1 using t2 on t1.x = 42 when not matched then insert (x) values (42);
ERROR XSAI2: The conglomerate (0) requested does not exist.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was Knut&apos;s simplification of a problem case which Dyre identified. Knut&apos;s query is fixed and Dyre&apos;s original query is converted into a later problem which Knut recorded:&lt;/p&gt;

&lt;p&gt;ERROR XJ001: Java exception: &apos;ASSERT FAILED currentOfNode is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;At a high level, this is what&apos;s going on with the corrected failure:&lt;/p&gt;

&lt;p&gt;1) The MERGE statement cooks up a LEFT JOIN to drive its execution phase.&lt;/p&gt;

&lt;p&gt;2) This is a LEFT JOIN which ordinary users can&apos;t create. That&apos;s because the row location from the target table is added to the SELECT list of the LEFT JOIN.&lt;/p&gt;

&lt;p&gt;3) The added row location column causes the LEFT JOIN to violate some assumptions made by the compiler.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;Adjusted a case where a FromBaseTable is cloning its result columns without propagating its heap conglomerate id.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java&lt;/p&gt;

&lt;p&gt;Fixed the construction of the referenced bit map. The old logic did not account for the fact that a row location column can be one of the returned columns.&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Added a test case for this problem query.&lt;/p&gt;</comment>
                            <comment id="13877602" author="rhillegas" created="Tue, 21 Jan 2014 16:47:12 +0000"  >&lt;p&gt;Here is a variation on the query Knut found which raises a de-serialization error when trying to concatenate a null with a string. This variation eliminates the subquery in the ON clause:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;create table t1(x int, y varchar(100));&lt;br/&gt;
create table t2(x int);&lt;br/&gt;
insert into t2 values 1, 1, 2;&lt;br/&gt;
insert into t1 values (1, null), (2, &apos;&apos;);&lt;/p&gt;

&lt;p&gt;&amp;#8211; this is ok&lt;br/&gt;
select y || &apos;x&apos;&lt;br/&gt;
from t2 left join t1 on true;&lt;/p&gt;

&lt;p&gt;&amp;#8211; this fails&lt;br/&gt;
merge into t1&lt;br/&gt;
using t2 on true&lt;br/&gt;
when matched then update set y = y || &apos;x&apos;;&lt;/p&gt;

&lt;p&gt;delete from t1 where y is null;&lt;/p&gt;

&lt;p&gt;&amp;#8211; without the nulls, this succeeds&lt;br/&gt;
merge into t1&lt;br/&gt;
using t2 on true&lt;br/&gt;
when matched then update set y = y || &apos;x&apos;;&lt;/p&gt;</comment>
                            <comment id="13877708" author="jira-bot" created="Tue, 21 Jan 2014 18:38:08 +0000"  >&lt;p&gt;Commit 1560134 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1560134&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1560134&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Allow for row location columns in the result column list of base tables; tests passed cleanly for me on derby-3155-16-aa-treatCurrentRowLocationNodeLikeBaseColumnNode.diff.&lt;/p&gt;</comment>
                            <comment id="13878933" author="rhillegas" created="Wed, 22 Jan 2014 18:12:52 +0000"  >&lt;p&gt;Attaching derby-3155-17-aa-serializingRowLocations.diff. This patch fixes a deserialization problem found by Knut.&lt;/p&gt;

&lt;p&gt;The following script now runs cleanly:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;

create table t1_030(x int, y varchar(100));
create table t2_030(x int);
insert into t2_030 values 1, 1, 2;
insert into t1_030 values (1, null), (2, &apos;&apos;);

-- this fails
merge into t1_030
using t2_030 on true
when matched then update set y = y || &apos;x&apos;;

select * from t1_030 order by x, y;

merge into t1_030
using t2_030 on exists (select * from t2_030)
when matched then update set y = y || &apos;x&apos;;

select * from t1_030 order by x, y;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;/p&gt;

&lt;p&gt;Convert HeapRowLocations to SQLRefs. This causes us to store SQLRefs in the temporary tables rather than HeapRowLocations. That makes the contents of the temp tables conform to their metadata and fixes the deserialization problem.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Add a test case.&lt;/p&gt;</comment>
                            <comment id="13878938" author="jira-bot" created="Wed, 22 Jan 2014 18:14:16 +0000"  >&lt;p&gt;Commit 1560452 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1560452&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1560452&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Make MERGE statement serialize SQLRefs rather than HeapRowLocations; commit derby-3155-17-aa-serializingRowLocations.diff.&lt;/p&gt;</comment>
                            <comment id="13879170" author="rhillegas" created="Wed, 22 Jan 2014 20:55:56 +0000"  >&lt;p&gt;Attaching derby-3155-18-aa-basicView.diff. This patch fixes a problem Knut found when using a simple view as the source table of a MERGE statement.&lt;/p&gt;

&lt;p&gt;The problem arose because views can be turned into FromSubqueries before an UPDATE action is bound. This causes the UpdateNode&apos;s bind logic to take an unexpected path. The fix was to make UpdateNode.bindStatement() not fall into that path.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;The fix.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;A regression test.&lt;/p&gt;</comment>
                            <comment id="13879171" author="jira-bot" created="Wed, 22 Jan 2014 20:56:59 +0000"  >&lt;p&gt;Commit 1560507 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1560507&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1560507&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Basic support for views as the source tables of MERGE statements; commit derby-3155-18-aa-basicView.diff.&lt;/p&gt;</comment>
                            <comment id="13881364" author="rhillegas" created="Fri, 24 Jan 2014 19:50:27 +0000"  >&lt;p&gt;Attaching derby-3155-19-aa-forbidSubqueriesInMatchedClauses.diff. This patch forbids subqueries in the WHEN [ NOT ] MATCHED clauses of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;The SQL Standard allows subqueries in the WHEN [ NOT ] MATCHED clauses of MERGE statements. However, these subqueries break code-generation. That&apos;s because we don&apos;t completely optimize the dummy INSERT/UPDATE/DELETE statements which we cook up in order to compile the WHEN [ NOT ] MATCHED clauses. If we improve the MERGE statement so that the dummy statements are completely optimized, then we can consider allowing subqueries in these clauses.&lt;/p&gt;

&lt;p&gt;I will record this limitation in the functional spec and I will create an enhancement request for lifting this limitation later on.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;

&lt;p&gt;The code to forbid these subqueries.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;A new error message for this limitation.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;</comment>
                            <comment id="13882805" author="rhillegas" created="Mon, 27 Jan 2014 13:34:46 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-19-aa-forbidSubqueriesInMatchedClauses.diff except for the recently introduced instabilities in org.apache.derbyTesting.functionTests.tests.lang.SelectivityTest.&lt;/p&gt;</comment>
                            <comment id="13882806" author="jira-bot" created="Mon, 27 Jan 2014 13:36:12 +0000"  >&lt;p&gt;Commit 1561671 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1561671&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1561671&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Forbid subqueries in the WHEN [ NOT ] MATCHED clauses of MERGE statements; commit derby-3155-19-aa-forbidSubqueriesInMatchedClauses.diff.&lt;/p&gt;</comment>
                            <comment id="13892302" author="rhillegas" created="Wed, 5 Feb 2014 17:02:40 +0000"  >&lt;p&gt;Attaching derby-3155-20-aa-reworkColumnMatching.diff. This patch substantially reworks how column references in WHEN [ NOT ] MATCHED clauses are matched to the correct values in the rows produced by the left join which drives the MERGE statement&apos;s execution. Tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;Consider the following MERGE statement:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    merge into t1_027 x
    using t2_027 y on x.a = y.c
    when matched and x.b &amp;gt; 100 then update set x.b = y.d
    when matched and x.b &amp;lt;= 100 then delete
    when not matched and y.d &amp;gt; 3000 then insert values ( y.c, y.d );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At execution time, column references in all of the following expressions must be mapped to the rows coming back from the driving left join:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    x.b &amp;gt; 100
    x.b &amp;lt;= 100
    y.d &amp;gt; 3000
    set x.b = y.d
    values ( y.c, y.d )
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before this patch, that mapping was accomplished through FromTable.getMatchingColumn(). In order to smooth over differences in the column matching for SELECTs and UPDATEs, correlation names were replaced with fully qualified table names in column references. But that was crude and caused many simple use cases to fail.&lt;/p&gt;

&lt;p&gt;The new approach is to do the following:&lt;/p&gt;

&lt;p&gt;1) Before compiling the INSERT/UPDATE/DELETE actions, all of the column references in the WHEN [ NOT ] MATCHED clauses are marked with whether they come from the source or the target table.&lt;/p&gt;

&lt;p&gt;2) The columns in the SELECT list of the driving left join are similarly marked.&lt;/p&gt;

&lt;p&gt;3) At code generation time, these markers are used to match the WHEN [ NOT ] MATCHED clauses to the SELECT list.&lt;/p&gt;

&lt;p&gt;I think that the new approach will handle more use cases.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java&lt;/p&gt;

&lt;p&gt;New machinery for linking ColumnReferences to the source or target table of a MERGE statement.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java&lt;/p&gt;

&lt;p&gt;Special processing for these linked ColumnReferences to that we don&apos;t blur the distinction between correlation names and fully qualified names.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;A new test which succeeds with the new scheme but failed with the old scheme.&lt;/p&gt;</comment>
                            <comment id="13892406" author="jira-bot" created="Wed, 5 Feb 2014 18:44:06 +0000"  >&lt;p&gt;Commit 1564874 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1564874&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1564874&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Revamp how columns referenced by WHEN [ NOT ] MATCHED clauses are linked to the columns coming back from the driving left join of a MERGE statement; commit derby-3155-20-aa-reworkColumnMatching.diff.&lt;/p&gt;</comment>
                            <comment id="13894368" author="knutanders" created="Fri, 7 Feb 2014 10:09:01 +0000"  >&lt;p&gt;The handling of parameters seems to have some issues:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; prepare ps as &apos;merge into t1 using t2 on ? when not matched then insert values (1)&apos;;
ij&amp;gt; execute ps;
0 rows inserted/updated/deleted
WARNING 02000: No row was found for FETCH, UPDATE or DELETE; or the result of a query is an empty table.
ij&amp;gt; execute ps using &apos;values true&apos;;
IJ WARNING: Autocommit may close using result set
ERROR 07009: No input parameters.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;d expect the first execution to fail because the parameter was not bound, but it succeeded. In the second execution, a parameter value was provided, but that one &lt;b&gt;did&lt;/b&gt; fail saying there were no parameters.&lt;/p&gt;</comment>
                            <comment id="13894574" author="knutanders" created="Fri, 7 Feb 2014 14:40:38 +0000"  >&lt;p&gt;The syntax description in the functional specification says that the source table and the target table can have a correlation name. It doesn&apos;t seem to allow column lists to go with the correlation names (since it says correlationName, not correlationClause). The actually implemented syntax seems to accept column lists, though, and the column names can be used in the ON clause:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t(x int);
0 rows inserted/updated/deleted
ij&amp;gt; merge into t t1(a) using t t2(b) on a=b when not matched then insert values (1);
0 rows inserted/updated/deleted
WARNING 02000: No row was found for FETCH, UPDATE or DELETE; or the result of a query is an empty table.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the specified column name cannot be used in the mergeInsert clause:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; merge into t t1(a) using t t2(b) on a=b when not matched then insert values (b);
ERROR 42X04: Column &apos;B&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;B&apos; is not a column in the target table.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I read the SQL standard correctly, it doesn&apos;t allow a column list for the target table. It does seem to allow a column list for the source table, though.&lt;/p&gt;</comment>
                            <comment id="13894610" author="knutanders" created="Fri, 7 Feb 2014 15:08:32 +0000"  >&lt;p&gt;Whoops...&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create view sr(i) as values 1;
0 rows inserted/updated/deleted
ij&amp;gt; create table t(x int, y int, z int);
0 rows inserted/updated/deleted
ij&amp;gt; create unique index idx on t(x, y);
0 rows inserted/updated/deleted
ij&amp;gt; prepare ps as &apos;merge into t using sr on (x = ? and y = ?) when matched then update set y = ?&apos;;
ERROR XSAI2: The conglomerate (0) requested does not exist.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also fails with constants instead of parameters:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; merge into t using sr on (x = 1 and y = 2) when matched then update set y = 3;
ERROR XSAI2: The conglomerate (0) requested does not exist.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks similar to the problem fixed by the 16-aa patch.&lt;/p&gt;</comment>
                            <comment id="13894798" author="rhillegas" created="Fri, 7 Feb 2014 18:15:02 +0000"  >&lt;p&gt;Attaching derby-3155-21-ac-cleanupAndForbidSynonyms.diff. This patch cleans up some compile-time processing for MERGE nodes to that it is easier to convince oneself that the binding of one action does not interfere with the binding of another action. In addition, this patch forbids the use of synonyms in MERGE statements I am running tests now.&lt;/p&gt;

&lt;p&gt;Synonyms are not a SQL Standard feature. I spent some time trying to fix some tough problem cases involving synonyms with correlation names. But I found myself going in circles. I am not able to resolve aliases on aliases. If someone wants to add synonym support to MERGE statements, they are welcome to try their hand at it.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New message for forbidding synonyms in MERGE statements.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/TableName.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java&lt;/p&gt;

&lt;p&gt;Cleanup and changes to forbid synonyms.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Test to verify that synonyms are forbidden.&lt;/p&gt;</comment>
                            <comment id="13895120" author="jira-bot" created="Fri, 7 Feb 2014 22:12:24 +0000"  >&lt;p&gt;Commit 1565830 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1565830&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1565830&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Forbid synonyms in MERGE statement; tests passed cleanly for me on derby-3155-21-ac-cleanupAndForbidSynonyms.diff.&lt;/p&gt;</comment>
                            <comment id="13896346" author="dagw" created="Mon, 10 Feb 2014 09:25:33 +0000"  >&lt;p&gt;Maybe you could file an improvement JIRA for allowing synonyms (and possible add the issues you saw trying to implement it), so we could have that as a starting point if someone wants to do it?&lt;/p&gt;</comment>
                            <comment id="13896507" author="rhillegas" created="Mon, 10 Feb 2014 13:45:51 +0000"  >&lt;p&gt;Good idea, Dag. I&apos;ve logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6474&quot; title=&quot;Add support for synonyms in MERGE statements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6474&quot;&gt;DERBY-6474&lt;/a&gt; in case someone wants to add support for synonyms.&lt;/p&gt;</comment>
                            <comment id="13896514" author="rhillegas" created="Mon, 10 Feb 2014 13:50:12 +0000"  >&lt;p&gt;Attaching derby-3155-22-ad-testIdentifiersOnLeftSideOfSetClauses.diff. This patch adds a test to track the fact that identifiers can be included or omitted on the left side of SET clauses with and without using aliases.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13896516" author="jira-bot" created="Mon, 10 Feb 2014 13:51:12 +0000"  >&lt;p&gt;Commit 1566625 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1566625&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1566625&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add test to verify use of identifiers on the left side of SET clauses in MERGE statements; commit derby-3155-22-ad-testIdentifiersOnLeftSideOfSetClauses.diff.&lt;/p&gt;</comment>
                            <comment id="13896647" author="rhillegas" created="Mon, 10 Feb 2014 15:09:31 +0000"  >&lt;p&gt;Attaching derby-3155-23-aa-forbidDerivedColumnLists.diff. This patch forbids the use of derived column lists in MERGE statements.&lt;/p&gt;

&lt;p&gt;In a continuing attempt to contain the name resolution problems with MERGE statements, this patch forbids queries like the following:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;merge into t1_036 r( x )
using t2_036 on r.x = t2_036.a
when matched then delete;

merge into t1_036
using t2_036 r( x ) on t1_036.a = r.x
when matched then delete;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Knut identified some issues with derived column lists in a 2014-02-07 comment. I will log an issue for allowing derived column lists in MERGE statements later on.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13896649" author="jira-bot" created="Mon, 10 Feb 2014 15:10:32 +0000"  >&lt;p&gt;Commit 1566649 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1566649&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1566649&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Forbid derived column lists in MERGE statements; commit derby-3155-23-aa-forbidDerivedColumnLists.diff.&lt;/p&gt;</comment>
                            <comment id="13896727" author="rhillegas" created="Mon, 10 Feb 2014 16:19:03 +0000"  >&lt;p&gt;Attaching derby-3155-24-aa-supportParameters.diff. This patch adds support for ? parameters in MERGE statements.&lt;/p&gt;

&lt;p&gt;This patch fixes a problem Knut found on 2014-02-07: The state of ? parameters was not being checked at runtime. The problem was that every statement which supports ? parameters needs its own call to setUpAndLinkParameters() in its grammar production. I don&apos;t know why that call isn&apos;t factored higher in the grammar. I added a call to setUpAndLinkParameters() to the MERGE statement&apos;s grammar production.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13896729" author="jira-bot" created="Mon, 10 Feb 2014 16:20:11 +0000"  >&lt;p&gt;Commit 1566673 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1566673&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1566673&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add support for ? parameters to MERGE statements; commit derby-3155-24-aa-supportParameters.diff.&lt;/p&gt;</comment>
                            <comment id="13897816" author="knutanders" created="Tue, 11 Feb 2014 12:48:01 +0000"  >&lt;p&gt;Thanks for adding support for ? parameters, Rick. It doesn&apos;t look like the parameter values are always seen by the MERGE statement, though:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create table t1(x int);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t2 values 1;
1 row inserted/updated/deleted
ij&amp;gt; execute &apos;merge into t1 using t2 on t1.x=t2.x when not matched then insert values (?)&apos; using &apos;values 1&apos;;
IJ WARNING: Autocommit may close using result set
1 row inserted/updated/deleted
ij&amp;gt; select * from t1;
X          
-----------
NULL       

1 row selected
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had expected the value 1 rather than NULL to be inserted into T1 here.&lt;/p&gt;</comment>
                            <comment id="13898275" author="rhillegas" created="Tue, 11 Feb 2014 20:38:58 +0000"  >&lt;p&gt;Attaching derby-3155-25-aa-parametersAsInsertValues.diff. This patch fixes a bug discovered by Knut: ? parameters were not being substituted when used as values in INSERT lists.&lt;/p&gt;

&lt;p&gt;The problem was that the INSERT values were being transmogrified when we compiled the dummy SELECT which drives the INSERT action. The fix was to clone the INSERT values so that the SELECT has its own copy.&lt;/p&gt;

&lt;p&gt;I added a simple test showing correct use of ? values in all search conditions, as INSERT values, and as UPDATE values. The following statement runs correctly in the test case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  merge into t1_038
  using t2_038 on t2_038.x = t1_038.x * ?
  when not matched and t2_038.y = ? then insert values (  t2_038.x, t2_038.y, t2_038.z * ? )
  when matched and t2_038.y = ? then delete
  when matched and t2_038.y = ? then update set z = t2_038.z * ?
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13898276" author="jira-bot" created="Tue, 11 Feb 2014 20:41:09 +0000"  >&lt;p&gt;Commit 1567368 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1567368&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1567368&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add support for ? parameters as INSERT values in MERGE statements; commit derby-3155-25-aa-parametersAsInsertValues.diff.&lt;/p&gt;</comment>
                            <comment id="13904165" author="rhillegas" created="Tue, 18 Feb 2014 15:45:28 +0000"  >&lt;p&gt;Attaching derby-3155-26-aa-copyRowLocationForIndexScans.diff. This patch fixes a compilation problem with a MERGE statement involving a view. Regression tests ran cleanly for me on this patch.&lt;/p&gt;

&lt;p&gt;The problem query, found by Knut, was this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create view sr_039( i ) as values 1;
create table t1_039( x int, y int, z int );
create unique index idx on t1_039( x, y );
insert into t1_039 values ( 1, 100, 1000 ), ( 2, 200, 2000 );

merge into t1_039
using sr_039 on ( x = 1 )
when matched then delete;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fix involves two changes:&lt;/p&gt;

&lt;p&gt;1) There was a place in FromBaseTable where a ResultColumnList was being cloned but conglomerate information wasn&apos;t being propagated from the original list. That just looks like an existing bug to me. However, I don&apos;t now why we haven&apos;t tripped over it before.&lt;/p&gt;

&lt;p&gt;2) Once I cleaned that up, I stumbled on another bug: Index probes into base tables weren&apos;t equipped to hand back the RowLocations needed by the MERGE statement&apos;s driving left join.&lt;/p&gt;

&lt;p&gt;After fixing these bugs, Knut&apos;s original test case works. But I&apos;m not declaring victory yet. I have tried a variation on that original test case and tripped across yet another bug. I think that the fix for that bug deserves its own patch so that we can clearly reconstruct which changes correspond to which problems.&lt;/p&gt;

&lt;p&gt;Here is the new test case which I&apos;m going to tackle next. It fails during compilation because a result set number hasn&apos;t been assigned to the column reference in the matching refinement of the WHEN NOT MATCHED clause:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create view sr_040( i ) as values 1;
create table t1_040( x int, y int, z int );
create unique index idx on t1_040( x, y );

insert into t1_040 values
( 1, 100, 1000 ), ( 1, 101, 1000 ), ( 1, 102, 1000 ), ( 1, 103, 1000 ), ( 2, 200, 2000 );

merge into t1_040
using sr_040 on ( x = 1 )
when matched and y = 101 then delete
when matched and y = 102 then update set z = -1000
when not matched and i = 1 then insert values ( -1, 0, 0 );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;The fix for 1).&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/IndexToBaseRowNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java&lt;/p&gt;

&lt;p&gt;The fix for 2).&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;A new test case to track this improvement.&lt;/p&gt;</comment>
                            <comment id="13904169" author="jira-bot" created="Tue, 18 Feb 2014 15:47:37 +0000"  >&lt;p&gt;Commit 1569396 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1569396&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1569396&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Propagate RowLocations out of index probes as necessary for the driving left join of a MERGE statement; commits derby-3155-26-aa-copyRowLocationForIndexScans.diff.&lt;/p&gt;</comment>
                            <comment id="13904548" author="rhillegas" created="Tue, 18 Feb 2014 20:31:43 +0000"  >&lt;p&gt;Attaching derby-3155-27-aa-adjustMatchingRefinements.diff. This patch fixes the compilation problem with a matching refinement clause that referenced a column in a source table which was a view wrapping a values clause.&lt;/p&gt;

&lt;p&gt;I think that the view was flattened but this information was not communicated to the matching refinement clause. The solution was to point the column references in the matching refinement clauses at the row coming out of the driving left join.&lt;/p&gt;

&lt;p&gt;This fixes the following problem case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create view sr_040( i ) as values ( 1 );
create table t1_040( x int, y int, z int );
create unique index idx on t1_040( x, y );

insert into t1_040 values
( 1, 100, 1000 ), ( 1, 101, 1000 ), ( 1, 102, 1000 ), ( 1, 103, 1000 ), ( 2, 200, 2000 );

merge into t1_040
using sr_040 on ( x = 1 )
when matched and y = 101 then delete
when matched and y = 102 then update set z = -1000
when not matched and i &amp;gt; 1 then insert values ( -1, i, 0 );

select * from t1_040 order by x, y, z;

merge into t1_040
using sr_040 on ( x = 3 )
when matched and y = 103 then delete
when matched and y = 102 then update set z = -10000
when not matched and i = 1 then insert values ( -1, i, 0 );

select * from t1_040 order by x, y, z;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we&apos;re still not out of the woods with the original problem case which Knut found. Adding another row to the values view causes us to fail on a missing row:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create view sr_040( i ) as values ( 1 ), ( 3 );
create table t1_040( x int, y int, z int );
create unique index idx on t1_040( x, y );

insert into t1_040 values
( 1, 100, 1000 ), ( 1, 101, 1000 ), ( 1, 102, 1000 ), ( 1, 103, 1000 ), ( 2, 200, 2000 );

merge into t1_040
using sr_040 on ( x = 1 )
when matched and y = 101 then delete
when matched and y = 102 then update set z = -1000
when not matched and i &amp;gt; 1 then insert values ( -1, i, 0 );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That, again, looks like a different bug which deserves its own separate patch.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;

&lt;p&gt;The fix.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;The test case.&lt;/p&gt;</comment>
                            <comment id="13904550" author="jira-bot" created="Tue, 18 Feb 2014 20:33:21 +0000"  >&lt;p&gt;Commit 1569521 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1569521&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1569521&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Point matching refinement clauses into the row returned by the driving left join of the MERGE statement; commit derby-3155-27-aa-adjustMatchingRefinements.diff.&lt;/p&gt;</comment>
                            <comment id="13907068" author="rhillegas" created="Thu, 20 Feb 2014 15:36:18 +0000"  >&lt;p&gt;Attaching derby-3155-28-aa-cardinalityViolations.diff. This patch addresses the last issue I discussed above: an attempt to delete the same row twice. Tests ran cleanly against this patch.&lt;/p&gt;

&lt;p&gt;The bug arises because I had not implemented the following required behavior of the MERGE statement: The database should raise a cardinality exception if an attempt is made to delete/update a target row more than once. See the 2011 SQL Standard, part 2, section 14.12 (merge statement), general rule 6.&lt;/p&gt;

&lt;p&gt;The fix is to maintain a BackingStoreHashtable of row locations from touched target rows and to raise an error if a row is touched twice.&lt;/p&gt;

&lt;p&gt;I will also note this behavior in the functional spec.&lt;/p&gt;

&lt;p&gt;Affects the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/types/SQLRef.java&lt;/p&gt;

&lt;p&gt;This class needed to override hashCode() so that SQLRefs could be used as hash keys.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;/p&gt;

&lt;p&gt;Maintain a BackingStoreHashtable of row locations of subject rows and raise a cardinality exception if the same row qualifies twice.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New cardinality violation message.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Test cases.&lt;/p&gt;</comment>
                            <comment id="13907071" author="jira-bot" created="Thu, 20 Feb 2014 15:37:52 +0000"  >&lt;p&gt;Commit 1570230 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1570230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1570230&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Prevent a MERGE statement from altering the same target row twice; commit derby-3155-28-aa-cardinalityViolations.diff.&lt;/p&gt;</comment>
                            <comment id="13907097" author="rhillegas" created="Thu, 20 Feb 2014 15:52:03 +0000"  >&lt;p&gt;Attaching a fourth rev of the functional spec. This incorporates several changes which have accumulated since August.&lt;/p&gt;</comment>
                            <comment id="13907483" author="rhillegas" created="Thu, 20 Feb 2014 20:55:16 +0000"  >&lt;p&gt;Attaching derby-3155-29-aa-missingSchema.diff. This patch removes some obsolete code which was causing us to see a missing schema error for the following case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;user=test_dbo;create=true&apos;;

call syscs_util.syscs_create_user( &apos;TEST_DBO&apos;, &apos;test_dbopassword&apos; );
call syscs_util.syscs_create_user( &apos;RUTH&apos;, &apos;ruthpassword&apos; );

connect &apos;jdbc:derby:memory:db;shutdown=true&apos;;

connect &apos;jdbc:derby:memory:db;user=test_dbo;password=test_dbopassword&apos; as dbo;

create table deleteTable_042
(
    publicSelectColumn int
);

create table selectTable_042
(
    selectColumn int
);

grant select on  selectTable_042 to public;
grant select on  deleteTable_042 to public;
grant delete on deleteTable_042 to ruth;

connect &apos;jdbc:derby:memory:db;user=ruth;password=ruthpassword&apos; as ruth;

merge into test_dbo.deleteTable_042
using test_dbo.selectTable_042
on publicSelectColumn = selectColumn
when matched then delete;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13907486" author="jira-bot" created="Thu, 20 Feb 2014 20:57:09 +0000"  >&lt;p&gt;Commit 1570352 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1570352&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1570352&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Remove some obsolete code which was causing a cross-schema MERGE statement to raise a missing schema error: commit derby-3155-29-aa-missingSchema.diff.&lt;/p&gt;</comment>
                            <comment id="13911883" author="rhillegas" created="Tue, 25 Feb 2014 18:52:25 +0000"  >&lt;p&gt;Attaching derby-3155-30-ab-moreCorrelationNames.diff. This patch fixes more column resolution problems. I am running tests now.&lt;/p&gt;

&lt;p&gt;Working on this patch has helped me understand a defect (or at least a brittleness) in my approach to implementing the UPDATE action of the MERGE statement. The dummy UPDATE statement I create is one which can not arise via the supported Derby grammar. That is because this UPDATE statement is driven by a SELECT having more than one table. An ordinary Derby UPDATE can be driven by a multi-table SELECT but only if the SELECT is hidden behind a WHERE CURRENT OF clause.&lt;/p&gt;

&lt;p&gt;The existing logic takes advantage of an assumption that the driving SELECT only has columns from the table being UPDATEd. In particular, there is some UpdateNode logic (around line 1530) which clears out table identifiers from the UPDATE statement&apos;s column list. It appears that that logic was added as part of the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1043&quot; title=&quot;Invalid column references are not caught in a trigger action statement when the referencing table of the column is the triggered table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1043&quot;&gt;&lt;del&gt;DERBY-1043&lt;/del&gt;&lt;/a&gt;. But without those table identifiers, I can&apos;t distinguish between columns coming from the source vs. the target table of a MERGE statement.&lt;/p&gt;

&lt;p&gt;My original solution to this problem was to skip the logic which clears out table identifiers when I am binding a MERGE statement. That worked for a long time until I started trying to compile UPDATE actions which supplement their column lists with extra columns needed to evaluate constraints, triggers, and generation expressions. I re-instated id-clearing logic in order to make those statements compile.&lt;/p&gt;

&lt;p&gt;This revived the ambiguity when the source and target tables had columns with the same name. My solution is to double-down on associating all columns with the source vs. target tables before binding the INSERT/UPDATE/DELETE actions.&lt;/p&gt;

&lt;p&gt;It&apos;s possible that I will continue to be buried under a pile of column resolution problems. I may need to fall back and re-implement the UPDATE action so that it uses some dummy column list which could be concocted via SQL and then add some substitution logic to map between the dummy column list and the expressions in the SET clauses.&lt;/p&gt;

&lt;p&gt;However, for the moment I&apos;m doubling down on the current implementation.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/TagFilter.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;Columns added to satisfy constraints, triggers, and generation clauses are assocated with the TARGET table. The table-id-clearing logic is re-instated.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromTable.java&lt;/p&gt;

&lt;p&gt;More logic to associate columns with the source or target table.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromList.java&lt;/p&gt;

&lt;p&gt;Use the pre-computed association of columns with source/target tables to resolve column references.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java&lt;/p&gt;

&lt;p&gt;Minor tweak to improve encapsulation and tracing of this class.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Additional tests.&lt;/p&gt;</comment>
                            <comment id="13911995" author="jira-bot" created="Tue, 25 Feb 2014 20:13:01 +0000"  >&lt;p&gt;Commit 1571808 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1571808&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1571808&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: More improvements to column resolution in MERGE statements; tests passed cleanly for me on derby-3155-30-ab-moreCorrelationNames.diff.&lt;/p&gt;</comment>
                            <comment id="13914670" author="rhillegas" created="Thu, 27 Feb 2014 15:48:46 +0000"  >&lt;p&gt;Attaching derby-3155-31-aa-deletePrivs.diff. This patch corrects privilege management for the DELETE actions of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;It&apos;s my understanding that the user needs the following permissions in order to run a MERGE statement with a DELETE action. This is what the patch attempts to implement and test:&lt;/p&gt;

&lt;p&gt;1) DELETE permission on the target table.&lt;/p&gt;

&lt;p&gt;2) For the ON clause and the search condition in the WHEN MATCHED clause&lt;/p&gt;

&lt;p&gt;a) SELECT permission on all referenced columns&lt;br/&gt;
b) EXECUTE permission on all referenced routines&lt;br/&gt;
c) USAGE privilege on all referenced types&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;Move some privilege setting (for UDTs) from UpdateNode up to QueryTreeNode for use by all nodes.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;Good code hygiene. Added some braces for a dangling consequence of an if statement.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;/p&gt;

&lt;p&gt;Turn off privilege checking at inappropriate moments.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/Permission.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="13914792" author="jira-bot" created="Thu, 27 Feb 2014 17:50:26 +0000"  >&lt;p&gt;Commit 1572665 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1572665&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1572665&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Enforce correct privileges for DELETE actions of MERGE statements; tests passed cleanly on derby-3155-31-aa-deletePrivs.diff.&lt;/p&gt;</comment>
                            <comment id="13915803" author="rhillegas" created="Fri, 28 Feb 2014 14:02:09 +0000"  >&lt;p&gt;Attaching derby-3155-32-aa-newTestFunction.diff. This patch adds another test function for use in testing privileges on user-defined types.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java&lt;/p&gt;</comment>
                            <comment id="13915805" author="jira-bot" created="Fri, 28 Feb 2014 14:03:02 +0000"  >&lt;p&gt;Commit 1572949 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1572949&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1572949&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add a test function to help in testing of udt privileges; commit derby-3155-32-aa-newTestFunction.diff.&lt;/p&gt;</comment>
                            <comment id="13919485" author="rhillegas" created="Tue, 4 Mar 2014 14:57:18 +0000"  >&lt;p&gt;Attaching derby-3155-33-ab-insertPrivs.diff. This patch adds privilege checks for the INSERT actions of MERGE statements. I am running tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java&lt;/p&gt;

&lt;p&gt;Adds braces around a dangling consequence.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/InsertNode.java&lt;/p&gt;

&lt;p&gt;Changes to support privilege checks for the INSERT actions of MERGE statements.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="13919597" author="jira-bot" created="Tue, 4 Mar 2014 16:46:22 +0000"  >&lt;p&gt;Commit 1574131 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1574131&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1574131&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add privilege checks for the INSERT actions of MERGE statements; tests passed cleanly on derby-3155-33-ab-insertPrivs.diff.&lt;/p&gt;</comment>
                            <comment id="13920885" author="rhillegas" created="Wed, 5 Mar 2014 14:26:57 +0000"  >&lt;p&gt;Attaching derby-3155-34-aa-updatePrivs.diff. This patch adds privilege checking for UPDATE actions of MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;/p&gt;

&lt;p&gt;Add privilege checks for UPDATE actions.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Tests.&lt;/p&gt;</comment>
                            <comment id="13921024" author="rhillegas" created="Wed, 5 Mar 2014 16:35:58 +0000"  >&lt;p&gt;Attaching derby-3155-34-ab-updatePrivs.diff. The previous rev of the patch raised 3 errors in GrantRevokeDDLTest because of canonized wrong results. This revised patch fixes those test cases.&lt;/p&gt;

&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;/p&gt;</comment>
                            <comment id="13921026" author="jira-bot" created="Wed, 5 Mar 2014 16:38:41 +0000"  >&lt;p&gt;Commit 1574566 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1574566&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1574566&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add privilege checks for the UPDATE actions of MERGE statements; commit derby-3155-34-ab-updatePrivs.diff.&lt;/p&gt;</comment>
                            <comment id="13922731" author="rhillegas" created="Thu, 6 Mar 2014 16:44:58 +0000"  >&lt;p&gt;Attaching derby-3155-35-aa-allPrivsTest.diff. This patch adds a test for privilege checking on a MERGE statement with INSERT, UPDATE, and DELETE clauses.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13922732" author="jira-bot" created="Thu, 6 Mar 2014 16:45:52 +0000"  >&lt;p&gt;Commit 1574956 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1574956&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1574956&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add a test case for privilege checking on a MERGE statement with all 3 kinds of actions; commit derby-3155-35-aa-allPrivsTest.diff.&lt;/p&gt;</comment>
                            <comment id="13922975" author="rhillegas" created="Thu, 6 Mar 2014 19:55:49 +0000"  >&lt;p&gt;Attaching derby-3155-36-aa-lockModeComment.diff. This replaces some commented-out code with a comment saying that there is no need to set a global lock mode for the MERGE statement. The compiler determines individual lock modes for the driving left-join and for each INSERT, UPDATE, DELETE action.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;/p&gt;</comment>
                            <comment id="13922977" author="jira-bot" created="Thu, 6 Mar 2014 19:56:44 +0000"  >&lt;p&gt;Commit 1575026 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1575026&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1575026&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add lock mode comment to master MERGE node; commit derby-3155-36-aa-lockModeComment.diff.&lt;/p&gt;</comment>
                            <comment id="13923017" author="rhillegas" created="Thu, 6 Mar 2014 20:35:12 +0000"  >&lt;p&gt;Attaching derby-3155-37-aa-printSubNodes.diff. This patch implements the printSubNodes() debug method for MergeNode and MatchingClauseNode().&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;/p&gt;</comment>
                            <comment id="13923018" author="jira-bot" created="Thu, 6 Mar 2014 20:36:11 +0000"  >&lt;p&gt;Commit 1575032 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1575032&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1575032&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Implement printSubNodes() for MergeNode and MatchingClauseNode; commit derby-3155-37-aa-printSubNodes.diff.&lt;/p&gt;</comment>
                            <comment id="13925842" author="rhillegas" created="Mon, 10 Mar 2014 16:12:18 +0000"  >&lt;p&gt;Attaching derby-3155-38-aa-datatypes.diff. This patch adds tests for using all datatypes in MERGE statements. I am running tests now.&lt;/p&gt;

&lt;p&gt;These tests uncovered one bug: We were not able to use XML datatypes in MERGE statements. The driving left-join failed to compile because the compiler thought that the XML types were going to be returned to the client. The solution was to make CursorNode not forbid XML types in its select list when it has been cooked up to support a MERGE statement.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CursorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Allow XML types in the select lists of the driving left-joins which support MERGE statements.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/IntArray.java&lt;/p&gt;

&lt;p&gt;Tests for MERGE statements which exercise all Derby datatypes.&lt;/p&gt;</comment>
                            <comment id="13925971" author="jira-bot" created="Mon, 10 Mar 2014 18:04:44 +0000"  >&lt;p&gt;Commit 1576027 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1576027&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1576027&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add datatype tests for MERGE statement and fix bug involving xml types in MERGE statements; tests passed cleanly on derby-3155-38-aa-datatypes.diff.&lt;/p&gt;</comment>
                            <comment id="13926056" author="knutanders" created="Mon, 10 Mar 2014 19:06:29 +0000"  >&lt;p&gt;The last commit introduced a dependency on a Java 8 method in MergeStatementTest, and that made the Jenkins build fail. See &lt;a href=&quot;https://builds.apache.org/job/Derby-trunk/2093/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Derby-trunk/2093/console&lt;/a&gt;. I think you can use Math.min() instead of Integer.min().&lt;/p&gt;</comment>
                            <comment id="13926071" author="rhillegas" created="Mon, 10 Mar 2014 19:20:10 +0000"  >&lt;p&gt;Thanks for spotting that, Knut. Attaching derby-3155-39-aa-fixBuild.diff. This fixes the build problem. I&apos;m also introducing a new Blob-making method for my next batch of tests.&lt;/p&gt;

&lt;p&gt;I have verified that the build fails on Java 7 without this fix, but works with this fix.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13926075" author="jira-bot" created="Mon, 10 Mar 2014 19:21:47 +0000"  >&lt;p&gt;Commit 1576062 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1576062&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1576062&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Fix build problem introduced by derby-3155-38-aa-datatypes.diff; commit derby-3155-39-aa-fixBuild.diff.&lt;/p&gt;</comment>
                            <comment id="13930467" author="rhillegas" created="Tue, 11 Mar 2014 15:37:31 +0000"  >&lt;p&gt;Attaching derby-3155-40-aa-bigLobs.diff. This patch adds some tests for largish lobs.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13930470" author="jira-bot" created="Tue, 11 Mar 2014 15:38:48 +0000"  >&lt;p&gt;Commit 1576383 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1576383&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1576383&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add tests for largish lobs in MERGE statements; commit derby-3155-40-aa-bigLobs.diff.&lt;/p&gt;</comment>
                            <comment id="13930777" author="mikem" created="Tue, 11 Mar 2014 18:55:22 +0000"  >&lt;p&gt;i could not tell from quick scan of last commit what size lobs were being tested.  In general I suggest good testing sizes for lobs to be bothe some tests smaller than 32k and some larger than 32k.  This is the magic place where their handling changes in store and some language level caching i think.  And I think 32k is magic for network server as well.   If easy probably good to make it bigger than 96k to get a few pages involved.&lt;/p&gt;</comment>
                            <comment id="13930789" author="rhillegas" created="Tue, 11 Mar 2014 19:03:36 +0000"  >&lt;p&gt;Thanks for that advice, Mike. The derby-3155-38-aa-datatypes.diff patch tested small lobs (just a handful of bytes) and the derby-3155-40-aa-bigLobs.diff patch tested lobs which were 100K bytes or larger. Thanks.&lt;/p&gt;</comment>
                            <comment id="13931693" author="rhillegas" created="Wed, 12 Mar 2014 12:28:02 +0000"  >&lt;p&gt;Attaching derby-3155-41-aa-nullGeneratedColumns.diff. This patch adds a test for MERGE statements which sometimes populate generated columns with nulls and sometimes don&apos;t.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13931696" author="jira-bot" created="Wed, 12 Mar 2014 12:29:49 +0000"  >&lt;p&gt;Commit 1576710 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1576710&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1576710&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add a test for MERGE statements which sometimes put nulls into generated columns and sometimes don&apos;t; commit derby-3155-41-aa-nullGeneratedColumns.diff.&lt;/p&gt;</comment>
                            <comment id="13932323" author="rhillegas" created="Wed, 12 Mar 2014 20:34:52 +0000"  >&lt;p&gt;Attaching derby-3155-42-aa-triggersAndGeneratedColumns.diff. This patch adds a test for triggers involving generated columns which are fired by MERGE statements.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13932331" author="jira-bot" created="Wed, 12 Mar 2014 20:39:41 +0000"  >&lt;p&gt;Commit 1576893 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1576893&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1576893&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add test for MERGE statement which fires triggers involving generated columns; commit derby-3155-42-aa-triggersAndGeneratedColumns.diff.&lt;/p&gt;</comment>
                            <comment id="13935136" author="rhillegas" created="Fri, 14 Mar 2014 15:19:25 +0000"  >&lt;p&gt;Attaching derby-3155-43-aa-eliminateDuplicateColumnRefs.diff. This patch eliminates redundant copies of columns in the select list of the driving left join. MergeStatementTest runs cleanly with this patch.&lt;/p&gt;

&lt;p&gt;I tripped across this redundancy while debugging a problem involving lobs. The redundancy shouldn&apos;t have any noticeable effects for non-lob columns. But for lobs this might be a performance issue.&lt;/p&gt;

&lt;p&gt;The fix is to replace an ArrayList with a HashSet when computing the select list of the driving left join.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;/p&gt;</comment>
                            <comment id="13935138" author="jira-bot" created="Fri, 14 Mar 2014 15:20:45 +0000"  >&lt;p&gt;Commit 1577566 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1577566&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1577566&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Eliminate redundant copies of columns in the select list of the driving left join for MERGE statements; commit derby-3155-43-aa-eliminateDuplicateColumnRefs.diff.&lt;/p&gt;</comment>
                            <comment id="13938291" author="rhillegas" created="Mon, 17 Mar 2014 19:53:10 +0000"  >&lt;p&gt;Attaching derby-3155-44-aa-lobsInTriggers.diff. This patch materializes LOBs before handing them to the WHEN [ NOT ] MATCHED clauses.&lt;/p&gt;

&lt;p&gt;This patch fixes a bug which surfaced when MERGE statements fired triggers which referenced LOBs. The LOBs could not be read because the scan underneath them had been closed.&lt;/p&gt;

&lt;p&gt;Right now the MERGE statement has 2 execution phases:&lt;/p&gt;

&lt;p&gt;1) Scan the driving left join and buffer up qualified rows for processing by the WHEN [ NOT ] MATCHED clauses.&lt;/p&gt;

&lt;p&gt;2) Then process each clause in turn, performing an INSERT/UPDATE/DELETE on the rows buffered up for it.&lt;/p&gt;

&lt;p&gt;Between these two steps, we close the driving left join. This means that we can&apos;t use references to LOBs inside the driving left join. Instead, we have to do our work on LOB values. This may be an inefficient way to handle LOBs, and we may want to optimize this later on. Perhaps we can leave the driving left join open. However, then I think we will run into the problems we&apos;ve seen with reading the same LOB reference more than once. I do not want to fix those problems as part of implementing MERGE.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/MergeResultSet.java&lt;/p&gt;

&lt;p&gt;Materialize LOBs from their references before buffering them up for handling by the WHEN [ NOT ] MATCHED clauses.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;

&lt;p&gt;Tests for MERGE-fired triggers which reference LOBs.&lt;/p&gt;</comment>
                            <comment id="13938292" author="jira-bot" created="Mon, 17 Mar 2014 19:54:43 +0000"  >&lt;p&gt;Commit 1578535 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1578535&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1578535&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Materialize LOBs before buffering them up for processing by WHEN [ NOT ] MATCHED clauses; commit derby-3155-44-aa-lobsInTriggers.diff.&lt;/p&gt;</comment>
                            <comment id="13939268" author="rhillegas" created="Tue, 18 Mar 2014 14:24:33 +0000"  >&lt;p&gt;Attaching derby-3155-45-aa-serialization.diff. This patch adds tests for the (de)serialization of MERGE statements.&lt;/p&gt;

&lt;p&gt;The patch adjusts the existing tests for triggers whose transition tables drive MERGE statements. Those tests are now run in 2 configurations:&lt;/p&gt;

&lt;p&gt;1) bouncing the database after the trigger definition but before executing the statement which fires the trigger&lt;/p&gt;

&lt;p&gt;2) not bouncing the database&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13939270" author="jira-bot" created="Tue, 18 Mar 2014 14:25:31 +0000"  >&lt;p&gt;Commit 1578920 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1578920&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1578920&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add tests for the (de)serialization of MERGE statements; commit derby-3155-45-aa-serialization.diff.&lt;/p&gt;</comment>
                            <comment id="13939350" author="rhillegas" created="Tue, 18 Mar 2014 15:05:42 +0000"  >&lt;p&gt;Attaching derby-3155-46-aa-deferredDeletes.diff. This patch verifies that columns needed by triggers (but not the MERGE statement itself) are buffered up for the WHEN [ NOT ] MATCHED actions.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13939351" author="jira-bot" created="Tue, 18 Mar 2014 15:06:59 +0000"  >&lt;p&gt;Commit 1578945 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1578945&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1578945&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Verify that columns needed for triggers are buffered up by MERGE statements, even when the MERGE statements do not mention those columns; commit derby-3155-46-aa-deferredDeletes.diff.&lt;/p&gt;</comment>
                            <comment id="13939628" author="rhillegas" created="Tue, 18 Mar 2014 18:42:54 +0000"  >&lt;p&gt;Attaching derby-3155-47-aa-collations.diff. This patch runs all of the MERGE statement tests with collations turned on and with collations turned off. I will run regression tests.&lt;/p&gt;

&lt;p&gt;For the collation-enabled case, I tried to compose decorators in a way which would turn on both collations and sql authorization. But I couldn&apos;t figure out the right order and I gave up fiddling with it. Instead, I added some defensive code in setUp(), which turns on sql authorization if it isn&apos;t on. I have added a test case which verifies that collations are enabled when they should be.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13939797" author="rhillegas" created="Tue, 18 Mar 2014 21:08:56 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-3155-47-aa-collations.diff except for an instance of the Metaspace exhaustion heisenbug which we see on JDK 8 sometimes:&lt;/p&gt;

&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) testCreateTable(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.ComparisonFailure: Unexpected SQL state. expected:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;42Y55&amp;#93;&lt;/span&gt;&amp;gt; but was:&amp;lt;&lt;span class=&quot;error&quot;&gt;&amp;#91;XJ001&amp;#93;&lt;/span&gt;&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:876)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:940)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testCreateTable(BasicSetup.java:211)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;Metaspace: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testCreateTable(BasicSetup.java:207)&lt;br/&gt;
	... 110 more&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;Metaspace: java.lang.OutOfMemoryError&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	... 120 more&lt;br/&gt;
Caused by: java.lang.OutOfMemoryError: Metaspace&lt;br/&gt;
	at java.lang.ClassLoader.defineClass1(Native Method)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)&lt;br/&gt;
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:455)&lt;br/&gt;
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:367)&lt;br/&gt;
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:360)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ParserImpl.getParser(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testCreateTable(BasicSetup.java:207)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 13717,  Failures: 1,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="13939800" author="jira-bot" created="Tue, 18 Mar 2014 21:10:04 +0000"  >&lt;p&gt;Commit 1579040 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1579040&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1579040&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Run all MERGE tests with and without collations; commit derby-3155-47-aa-collations.diff.&lt;/p&gt;</comment>
                            <comment id="13941964" author="rhillegas" created="Thu, 20 Mar 2014 17:03:29 +0000"  >&lt;p&gt;Attaching derby-3155-48-aa-indexScan.diff. This patch adds a test to verify that MERGE works when an index scan is chosen for the target table and the row location has to come out of the index row.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13941966" author="jira-bot" created="Thu, 20 Mar 2014 17:05:16 +0000"  >&lt;p&gt;Commit 1579685 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1579685&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1579685&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Add test for MERGE statement which reads the target table via an index; commit derby-3155-48-aa-indexScan.diff.&lt;/p&gt;</comment>
                            <comment id="13942191" author="rhillegas" created="Thu, 20 Mar 2014 19:48:16 +0000"  >&lt;p&gt;Attaching derby-3155-49-aa-cleanup1.diff. This is a minor cleanup of the bind-time and execute-time code for the MERGE statement. The goal is to make this code more readable.&lt;/p&gt;

&lt;p&gt;1) Renames some variables and methods in order to clarify their usage.&lt;/p&gt;

&lt;p&gt;2) Groups closely related methods together under banner comments.&lt;/p&gt;

&lt;p&gt;3) Removes some dead code.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MatchingClauseConstantAction.java&lt;/p&gt;</comment>
                            <comment id="13942197" author="jira-bot" created="Thu, 20 Mar 2014 19:50:06 +0000"  >&lt;p&gt;Commit 1579725 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1579725&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1579725&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Cleanup MERGE statement in order to make the code more readable; commit derby-3155-49-aa-cleanup1.diff.&lt;/p&gt;</comment>
                            <comment id="13943027" author="rhillegas" created="Fri, 21 Mar 2014 13:05:10 +0000"  >&lt;p&gt;Attaching derby-3155-50-aa-revampDeleteThenRows.diff. This patch removes some special handling of DELETE actions.&lt;/p&gt;

&lt;p&gt;DELETE was the first action I coded. The rows which are passed to DELETE actions are simpler than the rows which are passed to INSERT and UPDATE actions. That is because a DELETE action just needs columns from the target table. But INSERT may need complicated expressions built out of source row columns and UPDATE may need even more complicated expressions built out of columns from both the target and source tables.&lt;/p&gt;

&lt;p&gt;When I coded the DELETE action, I just built some simple machinery to copy columns from the driving left join. But I had to bite the bullet when I coded INSERT and UPDATE actions. Then I had to add code to generate the complex expressions. The copying (for DELETEs) is now redundant since it is a special case of the more complicated expression evaluation. I have removed the special copying done for DELETEs. Now DELETE actions use the same expression evaluator logic as INSERT and UPDATE.&lt;/p&gt;

&lt;p&gt;This simplifies and clarifies the code.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/MatchingClauseConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericConstantActionFactory.java&lt;/p&gt;</comment>
                            <comment id="13943031" author="jira-bot" created="Fri, 21 Mar 2014 13:07:46 +0000"  >&lt;p&gt;Commit 1579937 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1579937&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1579937&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Simplify processing of then rows for the DELETE actions of MERGE statements; commit derby-3155-50-aa-revampDeleteThenRows.diff.&lt;/p&gt;</comment>
                            <comment id="13943118" author="rhillegas" created="Fri, 21 Mar 2014 14:58:02 +0000"  >&lt;p&gt;Attaching derby-3155-51-aa-cleanup2.diff. This patch adds more comments to the compiler code for the MERGE statement.&lt;/p&gt;

&lt;p&gt;At this point, I would welcome a desk-check by anyone who has spare cycles. Your questions and comments may discover actual bugs, suggest parts of the code which need more testing, and generally help me improve the readability of this code. The major classes to read are:&lt;/p&gt;

&lt;p&gt;o org.apache.derby.impl.sql.compile.MergeNode&lt;br/&gt;
o org.apache.derby.impl.sql.compile.MatchingClauseNode&lt;br/&gt;
o org.apache.derby.impl.sql.execute.MergeResultSet&lt;br/&gt;
o org.apache.derby.impl.sql.execute.MatchingClauseConstantAction&lt;/p&gt;

&lt;p&gt;In reading the code, I would suggest the following approach:&lt;/p&gt;

&lt;p&gt;1) First read the header comment in MergeNode. That header comment lays out the approach to implementing MERGE.&lt;/p&gt;

&lt;p&gt;2) Then read the execution code: MergeResultSet and MatchingClauseConstantAction.&lt;/p&gt;

&lt;p&gt;3) Then read MergeNode itself.&lt;/p&gt;

&lt;p&gt;4) Finish up with MatchingClauseNode.&lt;/p&gt;

&lt;p&gt;The following principles guided the design:&lt;/p&gt;

&lt;p&gt;i) Keep the execution code as simple as possible.&lt;/p&gt;

&lt;p&gt;ii) Boost run-time performance by avoiding unnecessary expression evaluation.&lt;/p&gt;

&lt;p&gt;iii) Re-use the existing INSERT/UPDATE/DELETE machinery wherever possible.&lt;/p&gt;

&lt;p&gt;At this point, I think that the buggiest, most complex, and most brittle code is in the compiler, concentrated in the following areas:&lt;/p&gt;

&lt;p&gt;A) Name resolution. The MergeNode header comment explains why this is so tricky.&lt;/p&gt;

&lt;p&gt;B) The compilation of expressions for INSERT and UPDATE values. This is exceedingly complex in order to handle all sorts of special cases arising from identity, generated, and default columns as well as columns involved in constraints. Debugging this was difficult. However, I have not seen any problems in this area for a long time.&lt;/p&gt;


&lt;p&gt;Thanks!&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/MergeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/MatchingClauseNode.java&lt;/p&gt;</comment>
                            <comment id="13943120" author="jira-bot" created="Fri, 21 Mar 2014 14:59:50 +0000"  >&lt;p&gt;Commit 1579950 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1579950&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1579950&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Improve comments for compilation of MERGE statements; commit derby-3155-51-aa-cleanup2.diff.&lt;/p&gt;</comment>
                            <comment id="13945242" author="rhillegas" created="Mon, 24 Mar 2014 15:46:59 +0000"  >&lt;p&gt;Attaching derby-3155-52-aa-upgrade.diff. This patch prevents you from using the MERGE statement in soft-upgraded databases.&lt;/p&gt;

&lt;p&gt;Triggers invoking MERGE statements would fail on soft-downgrade. So we forbid MERGE in soft-upgraded databases.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Forbid MERGE statement unless the database is at level 10.11 or higher.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_11.java&lt;/p&gt;

&lt;p&gt;Verify that MERGE is not allowed when you soft-upgrade to 10.11.&lt;/p&gt;</comment>
                            <comment id="13945243" author="jira-bot" created="Mon, 24 Mar 2014 15:47:54 +0000"  >&lt;p&gt;Commit 1580889 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1580889&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1580889&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Forbid MERGE statements in soft-upgraded databases; commit derby-3155-52-aa-upgrade.diff.&lt;/p&gt;</comment>
                            <comment id="13945427" author="rhillegas" created="Mon, 24 Mar 2014 18:02:30 +0000"  >&lt;p&gt;Attaching 5th draft of the functional spec. This draft notes that MERGE requires hard-upgrading to 10.11.&lt;/p&gt;</comment>
                            <comment id="13966280" author="knutanders" created="Fri, 11 Apr 2014 07:28:06 +0100"  >&lt;p&gt;I came across this, which looks like a bug to me:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-sql&quot;&gt;
connect &apos;jdbc:derby:memory:db;create=true&apos;;

create table t1(x int);
create table t2(y int);

create trigger tr after insert on t1 referencing new table as new
merge into t2 using new on x = y when matched then &lt;span class=&quot;code-keyword&quot;&gt;update&lt;/span&gt; set y = x;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Results in:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ERROR 42X04: Column &apos;NEW.Y&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;NEW.Y&apos; is not a column in the target table.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The message is correct, in the sense that there is no column Y in the NEW transition table. But the trigger action never references column Y in the transition table, so I don&apos;t think it should fail.&lt;/p&gt;

&lt;p&gt;It fails the same way even if all the columns are qualified with table names:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij&amp;gt; create trigger tr after insert on t1 referencing new table as new
merge into t2 using new on new.x = t2.y when matched then update set t2.y = new.x;
ERROR 42X04: Column &apos;NEW.Y&apos; is either not in any table in the FROM list or appears within a join specification and is outside the scope of the join specification or appears in a HAVING clause and is not in the GROUP BY list. If this is a CREATE or ALTER TABLE  statement then &apos;NEW.Y&apos; is not a column in the target table.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NEW.X and T2.Y are the only column references, yet it complains about some reference to NEW.Y.&lt;/p&gt;</comment>
                            <comment id="13966457" author="rhillegas" created="Fri, 11 Apr 2014 13:49:18 +0100"  >&lt;p&gt;Thanks for finding this bug, Knut. What distinguishes this case from the case tested in MergeStatementTest is the use of a column from the transition table in the result expression for the column being changed by the MERGE statement. The trigger definition succeeds if I change &quot;set y = x&quot; to &quot;set y = 2 * y&quot;:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;

create table t1(x int);
create table t2(y int);

-- fails
create trigger tr1 after insert on t1
referencing new table as new
merge into t2
using new on x = y
when matched then update set y = x;

-- succeeds
create trigger tr2 after insert on t1
referencing new table as new
merge into t2
using new on x = y
when matched then update set y = 2 * y;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13966590" author="rhillegas" created="Fri, 11 Apr 2014 15:44:20 +0100"  >&lt;p&gt;Attaching derby-3155-53-aa-transitionSimpleColumn.diff. This patch addresses the problem Knut just found. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;The problem arises because of the special logic which was put into UpdateNode with revision 418933 as part of the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1043&quot; title=&quot;Invalid column references are not caught in a trigger action statement when the referencing table of the column is the triggered table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1043&quot;&gt;&lt;del&gt;DERBY-1043&lt;/del&gt;&lt;/a&gt;. That logic was put into UpdateNode to handle another issue with triggers. That logic is supposed to null out the table name in each column on the left side of a SET clause. It&apos;s a creepy thing to do, and that logic has caused a lot of grief for the UPDATE actions of MERGE statements. That logic breaks if what is on the right side of the SET clause is a column from another table. The logic does not break for the existing MergeStatementTest.test_018_updateFromTriggerTransitionTables()  test case. That is because, for that test case, what&apos;s on the right side of the SET clause isn&apos;t just a column, it&apos;s an expression. Without this current patch the following trigger definition works:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;create trigger tr2 after insert on t1
referencing new table as new
merge into t2
using new on x = y
when matched then update set y = 2 * x;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why does this not break outside a MERGE statement? Because MERGE gives rise to the only situation in which a plain column reference on the right side of a SET clause can be a column from a table other than the one being updated.&lt;/p&gt;

&lt;p&gt;The fix is to ignore the nulling-out of table names if we are compiling an UPDATE action of a MERGE statement. I think this should be ok because the MERGE statement already has substantial logic to correct for the effects of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1043&quot; title=&quot;Invalid column references are not caught in a trigger action statement when the referencing table of the column is the triggered table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1043&quot;&gt;&lt;del&gt;DERBY-1043&lt;/del&gt;&lt;/a&gt; and should work regardless of whether the table names are nulled out. But I&apos;m not promising that there are no edge cases on this edge case.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/MergeStatementTest.java&lt;/p&gt;</comment>
                            <comment id="13968825" author="rhillegas" created="Mon, 14 Apr 2014 21:55:38 +0100"  >&lt;p&gt;For some reason, the metaspace exhaustion bug in Java 8 has finally surfaced on my Mac. It has taken me a while to get clean test results. However, I do get clean results on derby-3155-53-aa-transitionSimpleColumn.diff if I add the following switch to the JUnit test run:&lt;/p&gt;

&lt;p&gt;-XX:MaxMetaspaceFreeRatio=100 &lt;/p&gt;</comment>
                            <comment id="13968826" author="jira-bot" created="Mon, 14 Apr 2014 21:56:59 +0100"  >&lt;p&gt;Commit 1587317 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1587317&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1587317&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3155&quot; title=&quot;Support for SQL:2003 MERGE statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3155&quot;&gt;&lt;del&gt;DERBY-3155&lt;/del&gt;&lt;/a&gt;: Fix bug in MERGE statement fired by a trigger; commit derby-3155-53-aa-transitionSimpleColumn.diff.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12732235">DERBY-6689</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12678827">DERBY-6414</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12726311">DERBY-6652</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12623008">DERBY-6011</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12683643">DERBY-6429</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12683184">DERBY-6428</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12702651">DERBY-6522</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12726573">DERBY-6656</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12738052">DERBY-6723</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12691107">DERBY-6460</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12694270">DERBY-6474</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12694319">DERBY-6476</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12703264">DERBY-6526</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12636391" name="MergeStatement.html" size="11022" author="rhillegas" created="Mon, 24 Mar 2014 18:02:30 +0000"/>
                            <attachment id="12630075" name="MergeStatement.html" size="10668" author="rhillegas" created="Thu, 20 Feb 2014 15:52:03 +0000"/>
                            <attachment id="12599944" name="MergeStatement.html" size="10244" author="rhillegas" created="Mon, 26 Aug 2013 14:40:20 +0100"/>
                            <attachment id="12599439" name="MergeStatement.html" size="9997" author="rhillegas" created="Thu, 22 Aug 2013 15:55:53 +0100"/>
                            <attachment id="12597795" name="MergeStatement.html" size="9796" author="rhillegas" created="Tue, 13 Aug 2013 20:32:14 +0100"/>
                            <attachment id="12599018" name="derby-3155-01-ac-grammar.diff" size="60707" author="rhillegas" created="Tue, 20 Aug 2013 20:57:46 +0100"/>
                            <attachment id="12603815" name="derby-3155-02-ag-fixParserWarning.diff" size="624" author="rhillegas" created="Wed, 18 Sep 2013 13:43:22 +0100"/>
                            <attachment id="12606856" name="derby-3155-03-ae-backingStoreHashtableWithRowLocation.diff" size="38282" author="rhillegas" created="Fri, 4 Oct 2013 19:34:27 +0100"/>
                            <attachment id="12607841" name="derby-3155-03-af-backingStoreHashtableWithRowLocation.diff" size="47624" author="rhillegas" created="Thu, 10 Oct 2013 18:32:59 +0100"/>
                            <attachment id="12609714" name="derby-3155-03-ag-backingStoreHashtableWithRowLocation.diff" size="49149" author="rhillegas" created="Tue, 22 Oct 2013 21:00:51 +0100"/>
                            <attachment id="12609734" name="derby-3155-03-ah-backingStoreHashtableWithRowLocation.diff" size="49296" author="rhillegas" created="Tue, 22 Oct 2013 22:59:59 +0100"/>
                            <attachment id="12609193" name="derby-3155-04-ae-deleteAction.diff" size="138749" author="rhillegas" created="Fri, 18 Oct 2013 20:28:28 +0100"/>
                            <attachment id="12609886" name="derby-3155-04-af-deleteAction.diff" size="143651" author="rhillegas" created="Wed, 23 Oct 2013 18:39:14 +0100"/>
                            <attachment id="12610094" name="derby-3155-05-aa-triggerTransitionTableAsTarget.diff" size="1799" author="rhillegas" created="Thu, 24 Oct 2013 15:56:59 +0100"/>
                            <attachment id="12610113" name="derby-3155-06-aa-triggerTransitionTableAsSource.diff" size="10509" author="rhillegas" created="Thu, 24 Oct 2013 18:14:55 +0100"/>
                            <attachment id="12612829" name="derby-3155-07-ad-insertAction.diff" size="116476" author="rhillegas" created="Fri, 8 Nov 2013 14:41:54 +0000"/>
                            <attachment id="12615364" name="derby-3155-08-ah-updateAction.diff" size="95841" author="rhillegas" created="Fri, 22 Nov 2013 17:56:44 +0000"/>
                            <attachment id="12616829" name="derby-3155-09-aa-correlationNames.diff" size="20067" author="rhillegas" created="Tue, 3 Dec 2013 18:38:11 +0000"/>
                            <attachment id="12617203" name="derby-3155-10-aa-correlationNames.diff" size="18994" author="rhillegas" created="Thu, 5 Dec 2013 18:01:12 +0000"/>
                            <attachment id="12618090" name="derby-3155-11-ab-beforeTriggersCantFireMerge.diff" size="6471" author="rhillegas" created="Tue, 10 Dec 2013 19:47:08 +0000"/>
                            <attachment id="12623431" name="derby-3155-12-aa-canOmitInsertColumnList.diff" size="5388" author="rhillegas" created="Thu, 16 Jan 2014 18:30:42 +0000"/>
                            <attachment id="12623469" name="derby-3155-13-aa-allowSystemAndTempTables.diff" size="5389" author="rhillegas" created="Thu, 16 Jan 2014 20:44:22 +0000"/>
                            <attachment id="12623679" name="derby-3155-14-aa-replaceCorrelationNamesOnLeftSideOfSETclauses.diff" size="4520" author="rhillegas" created="Fri, 17 Jan 2014 16:53:40 +0000"/>
                            <attachment id="12623705" name="derby-3155-15-aa-replumbMergeResultSetCleanup.diff" size="3900" author="rhillegas" created="Fri, 17 Jan 2014 18:49:11 +0000"/>
                            <attachment id="12624151" name="derby-3155-16-aa-treatCurrentRowLocationNodeLikeBaseColumnNode.diff" size="3757" author="rhillegas" created="Tue, 21 Jan 2014 16:33:38 +0000"/>
                            <attachment id="12624381" name="derby-3155-17-aa-serializingRowLocations.diff" size="3280" author="rhillegas" created="Wed, 22 Jan 2014 18:12:52 +0000"/>
                            <attachment id="12624427" name="derby-3155-18-aa-basicView.diff" size="3139" author="rhillegas" created="Wed, 22 Jan 2014 20:55:56 +0000"/>
                            <attachment id="12625099" name="derby-3155-19-aa-forbidSubqueriesInMatchedClauses.diff" size="8021" author="rhillegas" created="Fri, 24 Jan 2014 19:50:27 +0000"/>
                            <attachment id="12627153" name="derby-3155-20-aa-reworkColumnMatching.diff" size="30769" author="rhillegas" created="Wed, 5 Feb 2014 17:02:40 +0000"/>
                            <attachment id="12627662" name="derby-3155-21-ac-cleanupAndForbidSynonyms.diff" size="17461" author="rhillegas" created="Fri, 7 Feb 2014 18:15:02 +0000"/>
                            <attachment id="12627983" name="derby-3155-22-ad-testIdentifiersOnLeftSideOfSetClauses.diff" size="3382" author="rhillegas" created="Mon, 10 Feb 2014 13:50:12 +0000"/>
                            <attachment id="12627991" name="derby-3155-23-aa-forbidDerivedColumnLists.diff" size="5613" author="rhillegas" created="Mon, 10 Feb 2014 15:09:31 +0000"/>
                            <attachment id="12628000" name="derby-3155-24-aa-supportParameters.diff" size="3298" author="rhillegas" created="Mon, 10 Feb 2014 16:19:03 +0000"/>
                            <attachment id="12628327" name="derby-3155-25-aa-parametersAsInsertValues.diff" size="5866" author="rhillegas" created="Tue, 11 Feb 2014 20:38:58 +0000"/>
                            <attachment id="12629549" name="derby-3155-26-aa-copyRowLocationForIndexScans.diff" size="8321" author="rhillegas" created="Tue, 18 Feb 2014 15:45:28 +0000"/>
                            <attachment id="12629617" name="derby-3155-27-aa-adjustMatchingRefinements.diff" size="8396" author="rhillegas" created="Tue, 18 Feb 2014 20:31:43 +0000"/>
                            <attachment id="12630071" name="derby-3155-28-aa-cardinalityViolations.diff" size="13719" author="rhillegas" created="Thu, 20 Feb 2014 15:36:18 +0000"/>
                            <attachment id="12630147" name="derby-3155-29-aa-missingSchema.diff" size="3785" author="rhillegas" created="Thu, 20 Feb 2014 20:55:16 +0000"/>
                            <attachment id="12631002" name="derby-3155-30-ab-moreCorrelationNames.diff" size="35241" author="rhillegas" created="Tue, 25 Feb 2014 18:52:25 +0000"/>
                            <attachment id="12631551" name="derby-3155-31-aa-deletePrivs.diff" size="34435" author="rhillegas" created="Thu, 27 Feb 2014 15:48:46 +0000"/>
                            <attachment id="12631734" name="derby-3155-32-aa-newTestFunction.diff" size="755" author="rhillegas" created="Fri, 28 Feb 2014 14:02:09 +0000"/>
                            <attachment id="12632509" name="derby-3155-33-ab-insertPrivs.diff" size="21659" author="rhillegas" created="Tue, 4 Mar 2014 14:57:18 +0000"/>
                            <attachment id="12632838" name="derby-3155-34-aa-updatePrivs.diff" size="20184" author="rhillegas" created="Wed, 5 Mar 2014 14:26:57 +0000"/>
                            <attachment id="12632846" name="derby-3155-34-ab-updatePrivs.diff" size="22627" author="rhillegas" created="Wed, 5 Mar 2014 16:35:58 +0000"/>
                            <attachment id="12633172" name="derby-3155-35-aa-allPrivsTest.diff" size="14824" author="rhillegas" created="Thu, 6 Mar 2014 16:44:58 +0000"/>
                            <attachment id="12633214" name="derby-3155-36-aa-lockModeComment.diff" size="985" author="rhillegas" created="Thu, 6 Mar 2014 19:55:49 +0000"/>
                            <attachment id="12633221" name="derby-3155-37-aa-printSubNodes.diff" size="3603" author="rhillegas" created="Thu, 6 Mar 2014 20:35:12 +0000"/>
                            <attachment id="12633726" name="derby-3155-38-aa-datatypes.diff" size="50353" author="rhillegas" created="Mon, 10 Mar 2014 16:12:18 +0000"/>
                            <attachment id="12633754" name="derby-3155-39-aa-fixBuild.diff" size="1777" author="rhillegas" created="Mon, 10 Mar 2014 19:20:10 +0000"/>
                            <attachment id="12633921" name="derby-3155-40-aa-bigLobs.diff" size="15910" author="rhillegas" created="Tue, 11 Mar 2014 15:37:31 +0000"/>
                            <attachment id="12634151" name="derby-3155-41-aa-nullGeneratedColumns.diff" size="4100" author="rhillegas" created="Wed, 12 Mar 2014 12:28:02 +0000"/>
                            <attachment id="12634249" name="derby-3155-42-aa-triggersAndGeneratedColumns.diff" size="8622" author="rhillegas" created="Wed, 12 Mar 2014 20:34:52 +0000"/>
                            <attachment id="12634727" name="derby-3155-43-aa-eliminateDuplicateColumnRefs.diff" size="1622" author="rhillegas" created="Fri, 14 Mar 2014 15:19:25 +0000"/>
                            <attachment id="12635153" name="derby-3155-44-aa-lobsInTriggers.diff" size="23816" author="rhillegas" created="Mon, 17 Mar 2014 19:53:10 +0000"/>
                            <attachment id="12635325" name="derby-3155-45-aa-serialization.diff" size="10344" author="rhillegas" created="Tue, 18 Mar 2014 14:24:33 +0000"/>
                            <attachment id="12635331" name="derby-3155-46-aa-deferredDeletes.diff" size="7886" author="rhillegas" created="Tue, 18 Mar 2014 15:05:42 +0000"/>
                            <attachment id="12635365" name="derby-3155-47-aa-collations.diff" size="6043" author="rhillegas" created="Tue, 18 Mar 2014 18:42:54 +0000"/>
                            <attachment id="12635818" name="derby-3155-48-aa-indexScan.diff" size="7495" author="rhillegas" created="Thu, 20 Mar 2014 17:03:29 +0000"/>
                            <attachment id="12635853" name="derby-3155-49-aa-cleanup1.diff" size="34646" author="rhillegas" created="Thu, 20 Mar 2014 19:48:16 +0000"/>
                            <attachment id="12636013" name="derby-3155-50-aa-revampDeleteThenRows.diff" size="15559" author="rhillegas" created="Fri, 21 Mar 2014 13:05:10 +0000"/>
                            <attachment id="12636030" name="derby-3155-51-aa-cleanup2.diff" size="7629" author="rhillegas" created="Fri, 21 Mar 2014 14:58:02 +0000"/>
                            <attachment id="12636354" name="derby-3155-52-aa-upgrade.diff" size="4250" author="rhillegas" created="Mon, 24 Mar 2014 15:46:59 +0000"/>
                            <attachment id="12639809" name="derby-3155-53-aa-transitionSimpleColumn.diff" size="3328" author="rhillegas" created="Fri, 11 Apr 2014 15:44:20 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>63.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Jan 2008 19:48:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30745</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08kv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35208</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>