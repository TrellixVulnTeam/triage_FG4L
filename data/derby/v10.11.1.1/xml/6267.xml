<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:27:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6267/DERBY-6267.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6267] Add ability to compactly specify a complete query plan in an optimizer override.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6267</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;It would be nice to be able to override the optimizer&apos;s choice and specify a complete query plan using the compact summary syntax output by XMLOptTrace. Given how the optimizer handles a statement, this would require binding a query plan at the query block level. Two obvious candidates for such a feature are:&lt;/p&gt;

&lt;p&gt;1) Extend the use of DERBY-PROPERTIES in the comments of a query.&lt;/p&gt;

&lt;p&gt;2) Add an extra clause to query blocks. The clause would have to be a clearly marked Derby extension.&lt;/p&gt;

&lt;p&gt;(1) might look like this (here we add a new &quot;fullQueryPlan&quot; property):&lt;/p&gt;

&lt;p&gt;select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias&lt;br/&gt;
&amp;#8211; DERBY-PROPERTIES fullQueryPlan = (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1&lt;br/&gt;
union all&lt;br/&gt;
select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a, sys.syssequences s&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&lt;br/&gt;
&amp;#8211; DERBY-PROPERTIES fullQueryPlan = ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2&lt;br/&gt;
;&lt;/p&gt;

&lt;p&gt;(2) might look like this (here we add a new &quot;using derby join order&quot; clause):&lt;/p&gt;

&lt;p&gt;select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias&lt;br/&gt;
using derby join order (SYSCOLUMNS_HEAP # SYSALIASES_INDEX1) # SYSTABLES_INDEX1&lt;br/&gt;
union all&lt;br/&gt;
select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a, sys.syssequences s&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&lt;br/&gt;
using derby join order  ((SYSCOLUMNS_HEAP # SYSTABLES_INDEX1) # SYSALIASES_INDEX1) # SYSSEQUENCES_INDEX2&lt;br/&gt;
;&lt;/p&gt;

&lt;p&gt;Here&apos;s a comparison of these approaches:&lt;/p&gt;

&lt;p&gt;(1)&lt;br/&gt;
+ Portability: the same query text can be used against different RDBMSes.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Parsing of DERBY-PROPERTIES happens outside the grammer.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(2)&lt;br/&gt;
+ Parsing happens in the parser.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Not portable.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I slightly prefer approach (1). If I pursue that approach, I would like to see if I can move the parsing into the parser.&lt;/p&gt;

&lt;p&gt;I am interested in other opinions about how to address this feature. Thanks.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12653266">DERBY-6267</key>
            <summary>Add ability to compactly specify a complete query plan in an optimizer override.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Mon, 17 Jun 2013 20:48:31 +0100</created>
                <updated>Fri, 7 Mar 2014 04:01:39 +0000</updated>
                            <resolved>Thu, 6 Mar 2014 13:17:01 +0000</resolved>
                                    <version>10.11.1.1</version>
                                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13693863" author="knutanders" created="Wed, 26 Jun 2013 10:26:25 +0100"  >&lt;p&gt;Rick said:&lt;/p&gt;

&lt;p&gt;&amp;gt; I slightly prefer approach (1). If I pursue that approach, I would like to see if I can move the parsing into the parser.&lt;/p&gt;

&lt;p&gt;+1 to that approach.&lt;/p&gt;</comment>
                            <comment id="13695726" author="rhillegas" created="Fri, 28 Jun 2013 20:56:02 +0100"  >&lt;p&gt;Attaching derby-6267-01-ac-compactSyntax.diff, a preliminary version of a first patch for this issue. The patch is not ready for review although much of its functionality is covered by the new regression test included with this patch. Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/StatementUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/compile/OptimizerFactory.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;</comment>
                            <comment id="13697890" author="rhillegas" created="Tue, 2 Jul 2013 16:33:22 +0100"  >&lt;p&gt;Attaching derby-6267-01-ad-compactSyntax.diff. This patch introduces support for compact, fully-specified plan shapes for simple SELECTs. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch makes several changes:&lt;/p&gt;

&lt;p&gt;1) Introduces a new class, OptimizerPlan. This is a graph of join nodes and row sources, representing the shape of a plan being considered by the optimizer. If the graph is bushy, we raise an error at bind() time today. However, this structure may be useful when we implement bushy trees in the future. The graph does not contain any directives about where to attach predicates or add/eliminate sorts. It is assumed that those decisions are a mechanical process. Placement of predicates and sort addition/elimination are left to the cost machinery and to the code generator. OptimizerPlan lives in an interface package although it contains a lot of implementation code. I put it in an interface package because some day it may be useful for users who want to implement alternative optimizers for Derby. An alternative optimizer would be a module which processes ASTs and produces OptimizerPlans. The plans would then be passed (as overrides) to the basic Derby optimizer, which would mechanically translate them into actual runtime execution structures.&lt;/p&gt;

&lt;p&gt;Errors are raised at bind() time if the OptimizerPlan doesn&apos;t have the correct number of row sources, if the row source names can&apos;t be bound to conglomerates/tableFunctions, or if the plan isn&apos;t left-deep.&lt;/p&gt;

&lt;p&gt;2) Adds new syntax to the Derby grammar, allowing the specification of complete query plans. A complete query plan is a comment line beginning with the literal &quot;--derbyplan&quot;. The plan itself is a parenthesized sequence of row source names (the schema-qualified names of conglomerates and table functions) and infix join operator symbols. The plan specifications are what appear in the summaries of xml-based optimizer traces. So for instance:&lt;/p&gt;

&lt;p&gt;select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a, sys.syssequences s&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&lt;br/&gt;
--derbyplan ( ((SYS.SYSSEQUENCES_INDEX2 # SYS.SYSCOLUMNS_HEAP) # SYS.SYSALIASES_INDEX1) # SYS.SYSTABLES_INDEX1 )&lt;br/&gt;
;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;select columnname from sys.syscolumns, table( integerList() ) i\n&lt;br/&gt;
where columnnumber = -i.a&lt;br/&gt;
--derbyplan ( sys.syscolumns_heap * app.integerList() )&lt;/p&gt;

&lt;p&gt;3) Adds new tests for this functionality.&lt;/p&gt;


&lt;p&gt;More work needs to be done, including:&lt;/p&gt;

&lt;p&gt;A) Complete plan overrides for SELECTs with multiple query blocks.&lt;/p&gt;

&lt;p&gt;B) More tests.&lt;/p&gt;

&lt;p&gt;C) Documenting the new syntax.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java&lt;/p&gt;

&lt;p&gt;The work described in (1) above.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/StatementUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;/p&gt;

&lt;p&gt;I decided that it was better not to model OptimizerPlan as an AST node graph, for the following reasons:&lt;/p&gt;

&lt;p&gt;i) That would involve bringing a lot of implementation machinery over to the interface side.&lt;/p&gt;

&lt;p&gt;ii) I wanted a clean separation between parser and optimizer data structures.&lt;/p&gt;

&lt;p&gt;However, row source names in the OptimizerPlan need to be bound. So I moved TableName binding out of QueryTreeNode into StatementUtil, where it can be used by OptimizerPlan and AST nodes.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptimizerFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DeleteNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java&lt;/p&gt;

&lt;p&gt;Small, mechanical changes needed to add OptimizerPlan to the optimizer interface.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;

&lt;p&gt;Moved some code into OptimizerImpl so that it doesn&apos;t have to be duplicated by xml-based tracing.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/sqlgrammar.jj&lt;/p&gt;

&lt;p&gt;Grammar and bind-time work to support complete plan overrides for simple SELECTs.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;/p&gt;

&lt;p&gt;Support for complete plan overrides in the optimizer. This turned out to be a fairly small amount of code, mostly isolated in the method which chooses the next decoration for a slot in the join order. (A decoration is a conglomerate plus instructions on how the slot joins to its predecessor in the join order.) The new code loops through decorations until it finds the one which matches what the user specified for that slot in the join order.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java&lt;/p&gt;

&lt;p&gt;Added a toXML() method so that table functions would produce more detailed xml traces (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6266&quot; title=&quot;Add ability to print a Derby execution ResultSet as xml.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6266&quot;&gt;&lt;del&gt;DERBY-6266&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New and changed error messages.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/resultSetReader.policy&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;Initial tranche of tests for this feature.&lt;/p&gt;</comment>
                            <comment id="13697954" author="rhillegas" created="Tue, 2 Jul 2013 17:43:35 +0100"  >&lt;p&gt;Attaching derby-6267-01-ae-compactSyntax.diff. Tests passed cleanly for me on the previous rev of the patch except for one of the cases in the newly added NewOptimizerOverridesTest.&lt;/p&gt;

&lt;p&gt;The test was asserting the shape of the plan chosen for a query which didn&apos;t have an override. Apparently, the shape of the default plan changes depending on whether you run this test as part of the whole Derby regression test suite. I have removed the assertion about the unstable plan.&lt;/p&gt;

&lt;p&gt;Touches the same files as the previous rev of the patch.&lt;/p&gt;</comment>
                            <comment id="13697965" author="jira-bot" created="Tue, 2 Jul 2013 17:49:02 +0100"  >&lt;p&gt;Commit 1499012 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1499012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1499012&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;: Add first rev of complete plan overrides; merged derby-6267-01-ae-compactSyntax.diff to head of trunk.&lt;/p&gt;</comment>
                            <comment id="13698358" author="bryanpendleton" created="Tue, 2 Jul 2013 23:51:57 +0100"  >&lt;p&gt;&amp;gt; It would be nice to be able to override the optimizer&apos;s choice and specify &lt;br/&gt;
&amp;gt; a complete query plan using the compact summary syntax output by XMLOptTrace.&lt;br/&gt;
...&lt;br/&gt;
&amp;gt; --derbyplan ( ((SYS.SYSSEQUENCES_INDEX2 # SYS.SYSCOLUMNS_HEAP)&lt;br/&gt;
&amp;gt;  # SYS.SYSALIASES_INDEX1) # SYS.SYSTABLES_INDEX1 )&lt;/p&gt;

&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;In some ways I think this is pretty cool.&lt;/p&gt;

&lt;p&gt;In other ways I think: urk!&lt;/p&gt;

&lt;p&gt;I&apos;m pinching myself, thinking: this sort of thing is just what I hate &lt;br/&gt;
about other database implementations.&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;LOVE&lt;/b&gt; all the improved visibility into the optimizer&apos;s behavior.&lt;/p&gt;

&lt;p&gt;I cringe at the new weird and strange ways to twist knobs and try&lt;br/&gt;
to control the Derby engine.&lt;/p&gt;

&lt;p&gt;I sort of feel like we&apos;re in danger of becoming like one of those&lt;br/&gt;
people who has adopted a dog from the shelter and now doesn&apos;t&lt;br/&gt;
know how to handle it: instead of focusing our attention and efforts&lt;br/&gt;
on making the optimizer transparent and improving it, we&apos;re building&lt;br/&gt;
large chain-link leashes that we can shackle around the optimizer&lt;br/&gt;
and force it to do our bidding.&lt;/p&gt;

&lt;p&gt;Am I making any sense?&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="13698930" author="rhillegas" created="Wed, 3 Jul 2013 14:09:54 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Thanks for thinking about this issue. It is always good to have an extra set of eyes on a new feature. I understand that you&apos;re uneasy about something but I&apos;m not clear on what it is. Maybe I will understand your uneasiness better if we exchange some more comments on this issue.&lt;/p&gt;

&lt;p&gt;The optimizer has always been mysterious to me. However, I have learned a lot about the optimizer by working on this issue and its close relatives. One peculiar fact about the Derby optimizer stands out: For sixteen years there has been no picture of a candidate plan being considered by the optimizer. Instead, the optimizer holds two controlling structures (the Optimizable list and the join order array). How those two structures relate to one another and describe a candidate plan is hidden in assumptions scattered through the optimizer code. The closest thing we had to a description of a plan was the actual runtime graph of executable ResultSets which emerges after code generation.&lt;/p&gt;

&lt;p&gt;Talking about an actual query plan is awkward if all you have is the graph of generated ResultSets. Talking about an alternative plan is impossible because you don&apos;t even have a graph of ResultSets to point to.&lt;/p&gt;

&lt;p&gt;At this point I think that we have gone from a situation which no-one understands to a situation which at least one person (myself) sort-of understands. I fully agree with you that the notation I&apos;ve adopted is cryptic and idiosyncratic. I&apos;d welcome discussing how we can improve that notation so that we end up with something which everyone understands.&lt;/p&gt;

&lt;p&gt;I also share your concerns that optimizer overrides are a poor substitute for actually fixing the optimizer. However, in other databases, overrides have proven themselves to be a useful workaround to get customers up and running before you can get them a real fix. In my experience, every improvement to the optimizer breaks someone&apos;s old query plan. Overrides give us a safety net so that we can evolve our optimizer.&lt;/p&gt;

&lt;p&gt;Having a compact description of a plan shape gives us the ability to build an optimizer which learns. We now have a compact handle to which we can bind facts about the runtime behavior of a plan. I think that&apos;s a useful step toward building a feedback loop between the optimizer and the execution engine.&lt;/p&gt;

&lt;p&gt;I would like to understand more about your uneasiness. Does it have something to do with either of these concerns:&lt;/p&gt;

&lt;p&gt;1) The proposed notation is cryptic and idiosyncratic.&lt;/p&gt;

&lt;p&gt;2) We should not document this new notation but just leave it as a backdoor for tech support.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13699053" author="bryanpendleton" created="Wed, 3 Jul 2013 15:59:53 +0100"  >&lt;p&gt;Thanks Rick,&lt;/p&gt;

&lt;p&gt;It&apos;s clear that you understand my concerns since you expressed them yourself in&lt;br/&gt;
your response. &lt;/p&gt;

&lt;p&gt;And I&apos;m in 100% agreement with the statements and observations you made.&lt;/p&gt;

&lt;p&gt;My uneasiness arises partly from the concern that impatient users won&apos;t use&lt;br/&gt;
this as a short-term workaround while they help us improve the optimizer; they&apos;ll&lt;br/&gt;
instead install their --derbyplan override as a permanent feature of their&lt;br/&gt;
application, and we&apos;ll never hear from them again (until they discover that they&lt;br/&gt;
didn&apos;t specify the right --derbyplan &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  )&lt;/p&gt;

&lt;p&gt;And my uneasiness also arises from the fear that this is a slippery slope: &lt;br/&gt;
applications won&apos;t stop with just micro-managing the join order for a query.&lt;/p&gt;

&lt;p&gt;The applications (more precisely, the application authors) want to specify and&lt;br/&gt;
control things like:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;don&apos;t take any locks on table PRICELIST; I promise it&apos;s not being changed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;don&apos;t write any transaction log records for table ORDER_HIST; I promise I&apos;ll&lt;br/&gt;
  never want to recover it. And you don&apos;t need to flush the data pages to disk, either.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when you insert a row into table USER_DATA, make sure the page has an&lt;br/&gt;
  extra 500 bytes of free space; I&apos;m going to be updating it later in my application,&lt;br/&gt;
  and I need some free space to be available&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;use round-to-lowest rather than round-to-zero when inserting floating point data&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;make sure you have at least 100 MB of free memory before you run this query&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And soon our simple little language for controlling join order in a --derbyplan&lt;br/&gt;
comment has become a complete programming language of its own.&lt;/p&gt;

&lt;p&gt;I think I&apos;m just expressing my discomfort at the fact that Derby, which has&lt;br/&gt;
the GREAT virtue of simplicity and clarity, jealously preserved at great efforts&lt;br/&gt;
over multiple decades, is inevitably going to face the harsh reality of real life.&lt;/p&gt;

&lt;p&gt;So to summarize: Yes, I agree with you. And I&apos;m also nervous about the overall&lt;br/&gt;
future and vision of the software, as it continues to grow and mature. As I know&lt;br/&gt;
you are, as well.&lt;/p&gt;

&lt;p&gt;Thanks for having the discussion, it was quite valuable to me!&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;
</comment>
                            <comment id="13703420" author="rhillegas" created="Tue, 9 Jul 2013 17:02:07 +0100"  >&lt;p&gt;Attaching derby-6267-02-aa-moreTests.diff. This patch adds more test cases for these overrides. Some changes to override processing are made as well. I will run full regression tests.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes to the product:&lt;/p&gt;

&lt;p&gt;1) Moves the check for the number of overriding row sources from bind() time to optimize() time. This is necessary because the first phase of optimization (the preprocessing phase) may flatten a subquery into an outer query block. The overriding plan needs to have the same number of row sources as the single, flattened query block. By moving the check into the optimizer, we handle both the flattened and unflattened cases. I see no value in building something fancy to try to merge separate overriding plans bound to each original query block. Let&apos;s keep this simple, as Bryan advises.&lt;/p&gt;

&lt;p&gt;2) Makes the debug toXML() method of execution ResultSets also look for arrays of child ResultSets. Originally, this method only looked for fields of type ResultSet. Now this method looks for fields of type ResultSet[] and recurses into them too. This makes the toXML() method do something more useful for statements with multiple query blocks. That is because at execution time, the inner query blocks are represented as an array of ResultSets.&lt;/p&gt;

&lt;p&gt;3) Adds a toXML() override to GenericAggregateResultSet. This override skips over a redundant child ResultSet. The redundant ResultSet makes the toXML() output confusing.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;/p&gt;

&lt;p&gt;Changes for (1).&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java&lt;/p&gt;

&lt;p&gt;Changes for (2).&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/execute/GenericAggregateResultSet.java&lt;/p&gt;

&lt;p&gt;Changes for (3).&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java&lt;/p&gt;

&lt;p&gt;New test cases.&lt;/p&gt;</comment>
                            <comment id="13703575" author="jira-bot" created="Tue, 9 Jul 2013 19:07:06 +0100"  >&lt;p&gt;Commit 1501411 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1501411&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1501411&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;: Count row sources in optimizer overrides at optimize() time rather than bind() time; add more tests for optimizer overrides; tests passed cleanly on derby-6267-02-aa-moreTests.diff.&lt;/p&gt;</comment>
                            <comment id="13704675" author="rhillegas" created="Wed, 10 Jul 2013 16:55:55 +0100"  >&lt;p&gt;Attaching derby-6267-03-aa-moreSubqueryTests.diff. This patch adds tests for optimizer overrides for more kinds of subqueries. I am running full regression tests now.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java&lt;/p&gt;</comment>
                            <comment id="13704862" author="jira-bot" created="Wed, 10 Jul 2013 19:15:42 +0100"  >&lt;p&gt;Commit 1501891 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1501891&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1501891&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;: Add optimizer override tests for more kinds of subqueries; tests for derby-6267-03-aa-moreSubqueryTests.diff passed cleanly.&lt;/p&gt;</comment>
                            <comment id="13705611" author="jira-bot" created="Thu, 11 Jul 2013 09:48:06 +0100"  >&lt;p&gt;Commit 1502155 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1502155&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1502155&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;: Fix javadoc warning&lt;/p&gt;</comment>
                            <comment id="13716414" author="rhillegas" created="Tue, 23 Jul 2013 15:20:07 +0100"  >&lt;p&gt;Attaching derby-6267-04-aa-fetchOffsetTest.diff. This patch adds test cases for compact optimizer overrides with queries which have FETCH/OFFSET clauses.&lt;/p&gt;

&lt;p&gt;At first blush, the placement of the optimizer override may look a little awkward when the query contains a FETCH/OFFSET clause. That is because the FETCH/OFFSET clause appears after the actual query specification. The optimizer override is placed after all of the other clauses but before the FETCH/OFFSET clause. I considered changing the syntax so that the optimizer override would appear as part of the FROM list. But after more thought, that didn&apos;t seem any less arbitrary.&lt;/p&gt;

&lt;p&gt;Here&apos;s what an optimizer override looks like for a statement with one query block and a FETCH/OFFSET clause:&lt;/p&gt;

&lt;p&gt;select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a, sys.syssequences s&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&lt;br/&gt;
--derbyplan ( ((SYS.SYSSEQUENCES_INDEX2 # SYS.SYSCOLUMNS_HEAP) # SYS.SYSALIASES_INDEX1) # SYS.SYSTABLES_INDEX1 )&lt;br/&gt;
fetch first 1 rows only&lt;/p&gt;

&lt;p&gt;...and here&apos;s what an optimizer override looks like for a statement with two query blocks:&lt;/p&gt;

&lt;p&gt;select tableid&lt;br/&gt;
from sys.systables t&lt;br/&gt;
where tableid =&lt;br/&gt;
(&lt;br/&gt;
    select referenceid from sys.syscolumns where referenceid = t.tableid and 1=2&lt;br/&gt;
    --derbyplan sys.syscolumns_index1&lt;br/&gt;
    fetch first 1 rows only&lt;br/&gt;
)&lt;br/&gt;
--derbyplan sys.systables_heap&lt;/p&gt;



&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NewOptimizerOverridesTest.java&lt;/p&gt;</comment>
                            <comment id="13716416" author="jira-bot" created="Tue, 23 Jul 2013 15:22:54 +0100"  >&lt;p&gt;Commit 1506054 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1506054&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1506054&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;: Add tests for compact optimizer overrides on queries with FETCH/OFFSET clauses; commit derby-6267-04-aa-fetchOffsetTest.diff.&lt;/p&gt;</comment>
                            <comment id="13719985" author="rhillegas" created="Thu, 25 Jul 2013 20:56:51 +0100"  >&lt;p&gt;Linking this issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6305&quot; title=&quot;Tuning Derby information on optimizer overrides needs improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6305&quot;&gt;&lt;del&gt;DERBY-6305&lt;/del&gt;&lt;/a&gt; in case we want to document the new compact syntax.&lt;/p&gt;

&lt;p&gt;The argument for documenting the new syntax is that it will eventually be useful when we need to specify bushy plans as overrides. The existing --derby-properties joinOrder property is not subtle enough to support bushy trees. Documenting the syntax now, while it&apos;s fresh in our minds, makes some sense.&lt;/p&gt;

&lt;p&gt;On the other hand, since bushy trees aren&apos;t supported yet, I don&apos;t think that the new compact syntax provides any capabilities not provided by the old -&lt;del&gt;derby-properties. Right now, the compact syntax makes it possible to force a join order without re-writing the FROM list in the desired order&lt;/del&gt;-but that is just syntactic sugar.&lt;/p&gt;

&lt;p&gt;What do people think? Should we document the new, compact syntax?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;
</comment>
                            <comment id="13720437" author="dagw" created="Fri, 26 Jul 2013 06:53:46 +0100"  >&lt;p&gt;I think we earlier have had &quot;alpha&quot; features in the product by documenting them in the Wiki, and then later as features were productized, move the docs to the official user docs. In my view documenting new features in the official docs constitutes a commitment (a &quot;contract&quot; with the users) as far as upwards compatibiliy. So if a feature is still in flux it may be better to hold off with the official docs, but on the other hand it&apos;s good to document while the feature is still fresh on the authors mind. So i guess my answer would depend on how stable you consider the new overrrides to be. Would the Wiki fill the need for now?&lt;/p&gt;</comment>
                            <comment id="13720722" author="rhillegas" created="Fri, 26 Jul 2013 13:13:27 +0100"  >&lt;p&gt;Thanks for that feedback, Dag. Documenting the compact overrides on the wiki would be a good next step. Material on the wiki is often hard to find because the wiki doesn&apos;t have a comprehensive table of contents or index. But I could point this issue at the wiki documentation. That might help. Thanks.&lt;/p&gt;</comment>
                            <comment id="13720751" author="knutanders" created="Fri, 26 Jul 2013 13:48:16 +0100"  >&lt;p&gt;Other potential disadvantages with documenting a new feature on the wiki first:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;more job, will have to document it twice (although the second time is hopefully less work)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;users will still find it and use it, so changing the interface incompatibly will cause problems nevertheless&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;after the feature is canonized in the official documentation, the wiki pages tend to be left as they are even if they contain outdated information, which could cause confusion&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13720763" author="knutanders" created="Fri, 26 Jul 2013 14:00:48 +0100"  >&lt;p&gt;What I tried to say with my last comment was that I wouldn&apos;t be worried if we documented the feature in its current state in the tuning guide. We&apos;ll always do our best to preserve compatibility. And if we have very good reasons to break compatibility, we have mechanisms in place to handle that via release notes.&lt;/p&gt;</comment>
                            <comment id="13720765" author="rhillegas" created="Fri, 26 Jul 2013 14:01:40 +0100"  >&lt;p&gt;Thanks, Knut. Those are good points, too. For the record, I think that the compact override syntax is stable now. Thanks.&lt;/p&gt;</comment>
                            <comment id="13922475" author="knutanders" created="Thu, 6 Mar 2014 13:10:39 +0000"  >&lt;p&gt;Is the work on this issue complete? Can it be resolved?&lt;/p&gt;</comment>
                            <comment id="13923515" author="myrna" created="Fri, 7 Mar 2014 04:00:16 +0000"  >&lt;p&gt;Attaching a patch which adds the accessDeclaredMembers permission to the derbyTesting.codeclasses codebase in lang/resultSetReader.policy.&lt;br/&gt;
I&apos;ll commit this shortly.&lt;/p&gt;</comment>
                            <comment id="13923517" author="jira-bot" created="Fri, 7 Mar 2014 04:01:39 +0000"  >&lt;p&gt;Commit 1575164 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1575164&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1575164&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;; Add ability to compactly specify a complete query plan in an optimizer override.&lt;br/&gt;
   adding accessDeclaredMembers permission to the derbyTesting.codeclasses codebase in lang/resultSetReader.policy.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12659830">DERBY-6305</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12645677">DERBY-6211</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12633307" name="DERBY-6267_classespolicy.diff" size="746" author="myrna" created="Fri, 7 Mar 2014 04:00:16 +0000"/>
                            <attachment id="12590075" name="derby-6267-01-ac-compactSyntax.diff" size="53015" author="rhillegas" created="Fri, 28 Jun 2013 20:56:02 +0100"/>
                            <attachment id="12590444" name="derby-6267-01-ad-compactSyntax.diff" size="93486" author="rhillegas" created="Tue, 2 Jul 2013 16:33:22 +0100"/>
                            <attachment id="12590461" name="derby-6267-01-ae-compactSyntax.diff" size="93184" author="rhillegas" created="Tue, 2 Jul 2013 17:43:35 +0100"/>
                            <attachment id="12591458" name="derby-6267-02-aa-moreTests.diff" size="14649" author="rhillegas" created="Tue, 9 Jul 2013 17:02:07 +0100"/>
                            <attachment id="12591665" name="derby-6267-03-aa-moreSubqueryTests.diff" size="5636" author="rhillegas" created="Wed, 10 Jul 2013 16:55:55 +0100"/>
                            <attachment id="12593702" name="derby-6267-04-aa-fetchOffsetTest.diff" size="2829" author="rhillegas" created="Tue, 23 Jul 2013 15:20:07 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 26 Jun 2013 09:26:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>333589</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzfe0v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>333917</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>