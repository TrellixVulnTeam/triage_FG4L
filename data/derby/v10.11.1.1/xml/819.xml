<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:17:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-819/DERBY-819.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-819] Provide JDBC4 SQLException subclasses support in Embedded driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-819</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description></description>
                <environment>all</environment>
        <key id="12327726">DERBY-819</key>
            <summary>Provide JDBC4 SQLException subclasses support in Embedded driver</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12311752">DERBY-401</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anurag">Anurag Shekhar</assignee>
                                    <reporter username="anurag">Anurag Shekhar</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Jan 2006 19:10:29 +0000</created>
                <updated>Thu, 13 Dec 2007 09:04:46 +0000</updated>
                            <resolved>Fri, 14 Apr 2006 06:21:51 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12362947" author="anurag" created="Tue, 17 Jan 2006 19:20:10 +0000"  >&lt;p&gt;code changes to support jdbc4 SQLException and the test case for the same.&lt;/p&gt;

&lt;p&gt;Moved creation of EmbeddedException from java/engine/org/apache/derby/impl/jdbc/Util.java to&lt;br/&gt;
java/engine/org/apache/derby/impl/jdbc//SQLExceptionFactory.java (new class)&lt;br/&gt;
In SQLExceptionFactory.java checking if the jvm version lesser than J2SE_16 creating the EmdeddedException.&lt;br/&gt;
In case the jvm version is J2SE_16 or above JDBC40SQLExceptionFactory is instantiated using reflection in which &lt;br/&gt;
based on SQLState the new Exception is decided if the SQLState doesn&apos;t falls under any of the new category SQLException&lt;br/&gt;
is returned.&lt;/p&gt;</comment>
                            <comment id="12362954" author="anurag" created="Tue, 17 Jan 2006 22:03:22 +0000"  >&lt;p&gt;output of snv stat&lt;/p&gt;</comment>
                            <comment id="12362976" author="djd" created="Tue, 17 Jan 2006 23:57:08 +0000"  >&lt;p&gt;-1 on the patch&lt;/p&gt;

&lt;p&gt;No comments on any of the new code. I couldn&apos;t understand why  there is a JDBC40SQLExceptionFactory class but the SQLExceptionFactory. also has checks for  being in JDK1.6 and returning JDBC 4.0 objects.&lt;/p&gt;

&lt;p&gt;The embedded JDBC driver already has a factory for JDBC objects, InternalDriver. Can this existing mechanism be used for SQLExceptions?&lt;/p&gt;

&lt;p&gt;At one point I thought the JDBC 4.0 spec had a static method for returning the correct SQLException type from a SQLState, like your code in JDBC40ExceptionFactory, was this removed or did I imagine it?&lt;/p&gt;


</comment>
                            <comment id="12362978" author="djd" created="Wed, 18 Jan 2006 00:07:50 +0000"  >&lt;p&gt;A locktimeout exception should throw a SQLTransactionRollbackException rollback exception and not a SQLTimeoutException. SQLTimeoutException is for Statement timeouts and does not indicate the transaction has rolled back.&lt;/p&gt;</comment>
                            <comment id="12363013" author="anurag" created="Wed, 18 Jan 2006 03:34:45 +0000"  >&lt;p&gt;SQLExceptionFactory checks for jvm version and if the jvm version is jvm16 or above &lt;br/&gt;
it will instantiate JDBC40ExceptionFactory. As JDBC40ExceptiopnFactory have references of JDBC40 specific Exceptions it can&apos;t be loaded in jvm&apos;s prior to 16. Thats why SQLExceptionFactory uses reflection to load and again uses reflection to call getJDBC40Exception which returns JDBC40Specific exceptions.&lt;/p&gt;

&lt;p&gt;If the current JVM version is less that 16 it returns the EmbeddedSQLException same as the way Util class was returning.&lt;/p&gt;

&lt;p&gt;If JVM version is 16 but JDBC40ExceptionFactory doesn&apos;t exist (will happen if while building derby there was no jdk1.6) it throws a SQLRuntime Exception indicating the derby.jar doesn&apos;t have this class. In case RuntimeException is also missing (can happen only if rt.jar is improper) throws a RuntimeException.&lt;/p&gt;

&lt;p&gt;I will add above explanation in the code.&lt;/p&gt;


&lt;p&gt;I will check InternalDriver to see if I can move SQLExceptionFactory methods into that but JDBC40ExceptionFactory will be required.&lt;/p&gt;

&lt;p&gt;I will check the spec and api again to find if it provides any method to create JDBC40 Exception. If it does we won&apos;t need JDBC40ExceptionFactory.&lt;/p&gt;

&lt;p&gt;Thanks for looking into the patch.&lt;/p&gt;
</comment>
                            <comment id="12363174" author="anurag" created="Thu, 19 Jan 2006 07:03:36 +0000"  >&lt;p&gt;changes from last patch&lt;br/&gt;
moved SQLException method (getSQLException) to InternalDriver&lt;br/&gt;
moved JDBC40ExceptionFactory metod to Driver40&lt;br/&gt;
all SQLState of class 40 results in java.sql.SQLTransactionRollbackException&lt;br/&gt;
modified testcase accordinly&lt;/p&gt;
</comment>
                            <comment id="12363186" author="davidvc" created="Thu, 19 Jan 2006 08:30:07 +0000"  >&lt;p&gt;Quick question: what tests did you run, and what were the results?  For future patches, it&apos;s great to provide this information.  I&apos;ll take a look at the patch (as I&apos;m sure Dan will too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                            <comment id="12363187" author="davidvc" created="Thu, 19 Jan 2006 08:54:09 +0000"  >&lt;p&gt;Hi, Anurag,  Thanksk for this patch.  In general this looks pretty straightforward.&lt;/p&gt;

&lt;p&gt;Here are some comments&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would be great if the new code you write does not go beyond 80 characters per line.  There is enough code in Derby already that goes far beyond a page width, making it very hard to read.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In TestException:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Most tests make use of an existing framework for getting an embedded connection:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;		ij.getPropertyArg(args);&lt;br/&gt;
		Connection dmc = ij.startJBMS();&lt;/p&gt;

&lt;p&gt;This way the same test can be used for both embedded and (when it&apos;s ready) the network client. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If you want to set the waitTimeout to be a certain value, you can set it in the TestException_app.properties file, rather than hardcode it into the test.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do you set the territory to en_US?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It&apos;s IntegrityConstraintViolation, not IntigrityContstrainsViolation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Any reason why this test can&apos;t be a JUnit Test?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I would prefer to see less tests depending on canons instead of more.  Can this test be &quot;silent&quot; unless an error occurs, like most JUnit tests?  So, for example, instead of catching the exception and printing out the SQLState and error code , you can just catch the exception and move on.  An unexpected exception will be thrown by this method and will be detected as a failure.  If you want to ensure the SQL State is correct&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think this test should be named TestJDBC4Exceptions because it&apos;s focusing on the SQLException subclasses.  It&apos;s not a generic exception test.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the initDB method, you don&apos;t drop the table before creating it.  What if you run the same test twice without deleting the database?  Or does our test infrastructure take care of that?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;



</comment>
                            <comment id="12363193" author="djd" created="Thu, 19 Jan 2006 09:55:53 +0000"  >&lt;p&gt;The method Driver40.getJDBC40Exception() can never return null but its caller checks for a null return. This methodshould probably be in-lined in Driver40.getSQLException.&lt;/p&gt;

&lt;p&gt;Can you add  javadoc comments explaining the new methods you have added, comments are a good thing.&lt;/p&gt;

&lt;p&gt;Is there any benefit to the constants you&apos;ve added in SQLState, such as SQLState.CLASS_PREFIX_SYNTAX_ERROR? The code in getJDBC40Exception() would be cleaner and match the JDBC 4.0 javadoc if you used the values directly, like &quot;42&quot;. I don&apos;t think these constants are going to be used anywhere else.&lt;/p&gt;

&lt;p&gt;This file seems to be left over from the previous patch -  java/engine/org/apache/derby/impl/jdbc/build.xml&lt;/p&gt;

&lt;p&gt;Thanks for addressing most of my previous concerns.&lt;/p&gt;</comment>
                            <comment id="12363205" author="djd" created="Thu, 19 Jan 2006 13:06:09 +0000"  >&lt;p&gt;Index: java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestException_app.properties&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestException_app.properties	(revision 0)&lt;br/&gt;
+++ java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestException_app.properties	(revision 0)&lt;br/&gt;
@@ -0,0 +1,6 @@&lt;br/&gt;
+runwithibm13=false&lt;br/&gt;
+runwithibm14=false&lt;br/&gt;
+runwithj9=false&lt;br/&gt;
+runwithjdk12=false&lt;br/&gt;
+runwithjdk13=false&lt;br/&gt;
+runwithjdk14=false&lt;/p&gt;

&lt;p&gt;I would strongly encourage always commenting &lt;b&gt;why&lt;/b&gt; a test is excluded. Especially in this case if the test retains its generic name. The reason the test is excluded may look obvious now,  but may not two, five etc. years from now. It&apos;s a good habit to get into.&lt;/p&gt;</comment>
                            <comment id="12363608" author="anurag" created="Mon, 23 Jan 2006 12:37:25 +0000"  >&lt;p&gt;changes from last diff&lt;br/&gt;
changed Driver40.getSQLException to use theSQLState class directly&lt;br/&gt;
remove entry for class prefix in SQLState.java&lt;br/&gt;
reformated codelenght to 80 lines&lt;br/&gt;
added comment&lt;br/&gt;
converted test case to junit test case&lt;/p&gt;</comment>
                            <comment id="12363759" author="davidvc" created="Tue, 24 Jan 2006 08:23:26 +0000"  >&lt;p&gt;Hi, Anurag.  I&apos;m looking at the latest patch.  This actually looks quite good, but I do have some formatting comments.  I know these may seem trivial, but readability of code is quite important for long-term maintainability&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;From my previous review, I mentioned that it would be great if the lines did not exceed 80 characters.  I didn&apos;t see your response to that, and they&apos;re still wrapping around (see your diffs for Util.java as an example).  What&apos;s your position on this?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In InternalDriver.java, your first addition is indented way, way over to the right.  Any reason for that?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ah, your test looks much cleaner &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you can fix the two formatting issues, I&apos;ll be happy to do a test build and testrun and check this in.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;

</comment>
                            <comment id="12363819" author="anurag" created="Tue, 24 Jan 2006 21:32:46 +0000"  >&lt;p&gt;corrected indentation problems in Util.java and InternalDriver.java&lt;/p&gt;

&lt;p&gt;derbyall status&lt;br/&gt;
5 tests failed on solaris 10 x86&lt;/p&gt;

&lt;p&gt;derbyall/derbynetclientmats/derbynetmats.fail:derbynet/sysinfo.java&lt;br/&gt;
derbyall/derbynetclientmats/derbynetmats.fail:stress/stress.multi&lt;br/&gt;
derbyall/derbyall.fail:i18n/urlLocale.sql&lt;br/&gt;
derbyall/derbyall.fail:i18n/messageLocale.sql&lt;br/&gt;
derbyall/derbyall.fail:i18n/iepnegativetests_ES.sql&lt;/p&gt;</comment>
                            <comment id="12363832" author="djd" created="Wed, 25 Jan 2006 00:15:58 +0000"  >&lt;p&gt;-1&lt;br/&gt;
The use of InternalDriver.activeDriver() to obtain a factory exposes Derby to potential NullPointerExceptions in a shutdown or error on boot situation. I see that you saw one in your testing as you have a comment on that in the shutdown code.  Such NPEs will hide the real error from users, making Derby harder to use.&lt;/p&gt;

&lt;p&gt;I think the solution is to move some of the code from java/engine/org/apache/derby/impl/jdbc/Util.java to be factory methods  on InternalDriver. or methods on EmbedConnection or EmbedConnectionChild. I think you will find that most, if not all, cases these static Util methods are called from a JDBC implementation object which has a reference to its InternalDriver factory. Such a change would then remove the need for special code in the shutdown case. Basically this move to a factory based allocation for SQLException obejcts should make the Util class go away.&lt;/p&gt;

&lt;p&gt;Also the new patch is missing the test code.&lt;/p&gt;</comment>
                            <comment id="12364263" author="anurag" created="Sat, 28 Jan 2006 06:06:05 +0000"  >&lt;p&gt;I am attaching this patch only to get the early feed back before I go ahead and make further changes.&lt;br/&gt;
In this I have introduced a new method in InternalDriver to create SQLExceptionFactory. The exception factory is created &lt;br/&gt;
and stored in static variable in internal driver in boot method. &lt;br/&gt;
The method (createSQLExceptionFactory is overwritten in Driver40.java to instantiate class which creates JDBC4.0 specific exceptions)&lt;/p&gt;

&lt;p&gt;The factory once created is retained in variable even after database is down.&lt;/p&gt;

&lt;p&gt;I will moving all exception related methods to SQLExceptionFactory from Utils.java&lt;/p&gt;</comment>
                            <comment id="12364274" author="davidvc" created="Sat, 28 Jan 2006 07:47:08 +0000"  >&lt;p&gt;Hi, Anurag, thanks for this preview, here are some comments&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I don&apos;t understand why the getSQLException() method takes both a message string and a message id and args.  It would be great if you provided javadoc for this method and explained the use of these various parameters.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In SQLExceptionFactory40, I assume you mean subclasses, not &quot;sunclasses&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In SQLExceptionFactory40.getJDBC40Exception, you drop the Throwable t argument when constructing SQLException:&lt;br/&gt;
  ex = new SQLException(messages, sqlState, severity)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; Why is that?  Can&apos;t you use setCause() or pass t in as a parameter so that t gets chained to SQLException?  That&apos;s very important information and shouldn&apos;t get lost.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If I have this right, the exceptionFactory doesn&apos;t get initialized until the first instance of InternalDriver() is created.  Isn&apos;t it possible that getExceptionFactory() will return null?  Doesn&apos;t this mean that at some point during pre-boot I&apos;ll get a NullPointerException if I try to throw a SQLException?  Is this something that could happen, or are all SQLExceptions guaranteed to be thrown only after at least one instance of InternalDriver has been created?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Perhaps this is not an issue, but the pattern I proposed in my email does not have this potential timing bug, where the exception factory is created as part of the static initializer for the InternalDriver class.  I also question whether it needs to be part of the InternalDriver at all,  looking at the code, there appears to be no dependency on the data or behavior of InternalDriver.   Usually for a singleton pattern like this you see something like this (independent from InternalDriver, and with no dependencies on boot timing):&lt;/p&gt;

&lt;p&gt;public class SQLExceptionFactory&lt;br/&gt;
{&lt;br/&gt;
     private static factory;&lt;/p&gt;

&lt;p&gt;      public static SQLExceptionFactory getExceptionFactory()  &lt;/p&gt;
{
         if ( factory != null )
           createExceptionFactory();

        return factory;
      }

&lt;p&gt;     private static SQLExceptionFactory createExceptionFactory &lt;/p&gt;
{
         if ( jvmversion &amp;gt;= 1.6 )
            return createJDBC4ExceptionFactory();
        else if ( jvmversion &amp;gt;= 1.4 )
            return createJDBC3ExceptionFactory();
        else
            return createJDBC2ExceptionFactory();
     }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;
</comment>
                            <comment id="12365989" author="anurag" created="Sat, 11 Feb 2006 07:02:11 +0000"  >&lt;p&gt;changes from last patch (for embedded driver)&lt;br/&gt;
Moved all exception methods to SQLExceptionFactory (from Util)&lt;br/&gt;
modified all the classes using UUtil class to get EmbeddedSQLException to call out InternalDriver.getExceptionFactory&lt;/p&gt;

&lt;p&gt;modified Util.notImplemented() to return SQLException. This method is being called from 4.0 net client which shouldn&apos;t be &lt;br/&gt;
throwing EmbeddedException. This method can be removed from Util.java after net client is modified to use Exception factory in net client.&lt;/p&gt;</comment>
                            <comment id="12365992" author="anurag" created="Sat, 11 Feb 2006 07:10:45 +0000"  >&lt;p&gt;svn stat output&lt;/p&gt;</comment>
                            <comment id="12366006" author="djd" created="Sat, 11 Feb 2006 14:22:33 +0000"  >&lt;p&gt;The patch derby-819_2.diff seems to b e truncated for me when I download it, here&apos;s the end of the file.&lt;br/&gt;
In addition I see no changes for InternalDriver.Maybe Jira is causing issues???&lt;/p&gt;

&lt;p&gt;Seems like though the copyright dates on the new files are wrong ,they all say 2005, they should be 2006 or 2005,2006 depending&lt;br/&gt;
on when they were first created.&lt;/p&gt;


&lt;p&gt;Index: java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java	(revision 0)&lt;br/&gt;
+++ java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java	(revision 0)&lt;br/&gt;
@@ -0,0 +1,82 @@&lt;br/&gt;
+/*&lt;br/&gt;
+ &lt;br/&gt;
+   Derby - Class org.apache.derby.impl.jdbc.SQLExceptionFactory40&lt;br/&gt;
+ &lt;br/&gt;
+   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.&lt;br/&gt;
+ &lt;br/&gt;
+   Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&lt;br/&gt;
+   you may not use this file &lt;/p&gt;</comment>
                            <comment id="12366069" author="anurag" created="Sun, 12 Feb 2006 17:50:29 +0000"  >&lt;p&gt;Description of patch&lt;/p&gt;

&lt;p&gt;InternalDriver&lt;br/&gt;
	added method to create ExceptionFactory. This method can be overwritten in subclass to create exception&apos;s supported by the jdbc versions supported by the driver.&lt;/p&gt;

&lt;p&gt;In boot method of InternalDriver method to instantiate exception factory is called the factory it set to a static field. &lt;br/&gt;
	createExceptionFactory of InternalDriver return instance of SQLExceptionFactory&lt;/p&gt;

&lt;p&gt;	added a static method to get exception factory. &lt;br/&gt;
Driver40&lt;br/&gt;
	Overwrote createExceptionFactory to return instance of SQLExceptionFactory40 &lt;/p&gt;

&lt;p&gt;SQLExceptionFactory&lt;br/&gt;
	It has all the exception related methods from Util.&lt;/p&gt;

&lt;p&gt;SQLExceptionFactory40&lt;br/&gt;
	Overwrote getSQLException to return jdbc 4 exceptions.&lt;/p&gt;

&lt;p&gt;Util&lt;br/&gt;
Removed all exception related methods except notImplemented. This method is used from network client. Changed this method to return SQLException. This methods used only by network client and that is not supposed to used EmbeddedException.&lt;/p&gt;

&lt;p&gt;Other classes modified to to use new exception factory to throw exception.&lt;/p&gt;

&lt;p&gt;java/testing/build.xml&lt;/p&gt;

&lt;p&gt;added entry to build jdbc4 test cases&lt;/p&gt;</comment>
                            <comment id="12366570" author="davidvc" created="Thu, 16 Feb 2006 09:47:49 +0000"  >&lt;p&gt;Hi, Anurag, can you send this patch over email, I seem to be getting a corrupted version through JIRA.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12366669" author="davidvc" created="Fri, 17 Feb 2006 05:12:06 +0000"  >&lt;p&gt;Hi, Anurag.  This is looking really good.  Just a few small comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Maybe I have this wrong, but is there value in storing the exception factory in a local variable, and just referring to that, rather than calling the InternalDriver.getExceptionFactory() method each time?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In Util.java, you still have notImplemented() and you indicate that the client driver uses it. I would recommend removing this, and linking this bug to the JIRA item which fixes the network client, and say that this JIRA is blocked by the network client bug.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The getExceptionFactory method in Driver should have a javadoc explaining its purpose.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the generateCsSQLException() calls in InternalDriver have indents that cause the code to go way over 80 characters, it would be great if you could fix this.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In SystemProcedures.java you replace &quot;IN REPLACE SMALLINT&quot; with &quot;IN? REPLACE SMALLINT&quot;, and add question marks elsewhere.  Can you explain these changes, and how they are related to the SQLException work?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;

</comment>
                            <comment id="12366695" author="djd" created="Fri, 17 Feb 2006 07:06:40 +0000"  >&lt;p&gt;review  derby819_2.diff&lt;/p&gt;

&lt;p&gt;-1 veto still in place: If these BLOCKER issues are addressed, the veto is lifted&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SystemProcedure changes need to be removed (see below)&lt;/li&gt;
	&lt;li&gt;NPE potential at statup needs to be addressed. (see below)&lt;/li&gt;
	&lt;li&gt;Test code just ignores the very exceptions it is meant to be testing. (see below)&lt;/li&gt;
&lt;/ul&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why is a SQLExceptionFactory and SQLExceptionFactory 40 classes needed? With the way this is implemented, the new method&lt;br/&gt;
   it defines could just  included in InternalDriver and the 40 specific one in Driver40. Seems a lot of overhead for little value.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BLOCKER - We still have a window where before the driver is loaded any InternalDriver.getSQLExceptionFactory() could return null leading to a NullPointerException. Maybe just simply closing this by having InternalDriver initialize the static field to a factory that returns the plain SQLException would be sufficient.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Copyright dates for the new files need to be 2005,2006 or just 2006 depending on when they were created&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;no class javadoc for SQLExceptionFactory40&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SQLExceptionFactory40: Don&apos;t understand why there is a method getJDBC40Exception, why not just have the&lt;br/&gt;
   code in getSQLException&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SQLExceptionFactory40.getJDBC40Exception - No need to have the &apos;if (ex == null) &apos; just make ex  = new SQLException&lt;br/&gt;
     part of the else in the above block. Then no need to initialize ex = null at the beginning of the method. This is where Java&lt;br/&gt;
     is great, the compiler will tell you if ex is never initialized. WIth the code as-is I have to look to see under what conditions&lt;br/&gt;
     ex can be null for the &apos;if (ex == null) &apos;  if I want to understand it. Thus I waste my time looking for a condition that can never exist.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removal of all the shortcut methods seems like the wrong approach to me, that&apos;s been discussed on the list.&lt;br/&gt;
   It&apos;s about 90% of this patch and could have been avoided, making the real changes easier to spot.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Seems to be some unrelated changes included, addition of an extra parameter here.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,&quot;map&quot;,&lt;br/&gt;
+            throw InternalDriver.getExceptionFactory()&lt;br/&gt;
+            .generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,&quot;map&quot;,&lt;br/&gt;
                                               &quot;java.sql.Connection.setTypeMap&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BLOCKER - Very strange changes in SystemProcedures.java, look like some global edit script gone wrong. Makes me &lt;b&gt;very&lt;/b&gt; nervous about the rest of the patch, not having the shortcut methods removed would make the patch easier to manage and easier for the reviewers to spot issues like this.&lt;/p&gt;

&lt;p&gt;BLOCKER - Tests have code like this:&lt;/p&gt;

&lt;p&gt;+        } catch (SQLIntegrityConstraintViolationException e) &lt;/p&gt;
{
+        }

&lt;p&gt;How does this test that we are setting the SQLState and message correctly in these new exceptions? Maybe the coder accidently swapped the SQLState and message parameters.&lt;/p&gt;</comment>
                            <comment id="12366696" author="djd" created="Fri, 17 Feb 2006 07:16:54 +0000"  >&lt;p&gt;more review on derby819_2.diff &lt;/p&gt;

&lt;p&gt;I would like to see some comments in the code indicating what functionality is lost by using the standard SQL exceptions rather than EmbedSQLException. I agree this is the way forward, but what are embedded applications losing when they switch to JDBC 4.0. EmbedSQLException must be providing some value, otherwise the code would have used SQLException. &lt;/p&gt;


&lt;p&gt;Ignore my previous comment about this issue:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Seems to be some unrelated changes included, addition of an extra parameter here.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;throw Util.generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,&quot;map&quot;,&lt;br/&gt;
+            throw InternalDriver.getExceptionFactory()&lt;br/&gt;
+            .generateCsSQLException(SQLState.INVALID_API_PARAMETER,map,&quot;map&quot;,&lt;br/&gt;
                                               &quot;java.sql.Connection.setTypeMap&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mis-read the diff, sorry.&lt;/p&gt;</comment>
                            <comment id="12366720" author="davidvc" created="Fri, 17 Feb 2006 08:30:10 +0000"  >&lt;p&gt;Dan, thanks for catching these, multiple eyes really help.  &lt;/p&gt;

&lt;p&gt;I thought I just didn&apos;t understand some of the internals when I saw the SystemProcedures diffs.  Anurag, you &lt;b&gt;did&lt;/b&gt; run a full set of tests with this patch?  If so, I&apos;m surprised that this got through.&lt;/p&gt;

&lt;p&gt;I had suggested in &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-819#action_12364274&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-819#action_12364274&lt;/a&gt; that Anurag use a simpler factory model.  Wouldn&apos;t this kind of approach close the NPE window?&lt;/p&gt;

&lt;p&gt;When you say &quot;the code would have used SQLException&quot;, what code are you talking about?&lt;/p&gt;

&lt;p&gt;Also, although InternalDriver could potentially be responsible for generating SQLExceptions, it seems to me a new class helps divide concerns.  It doesn&apos;t seem to me InternalDriver should be in the business of generating SQLExceptions...  That said, I do recognize adding new classes, though more readable and coherent, can contribute to the overall size of derby.jar&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12366723" author="djd" created="Fri, 17 Feb 2006 08:59:59 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the changes to SystemProcedure are in comments, so I don&apos;t think it would affect derbyall, but the changes are wrong.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;yes the model you propose is simpler, though I wouldn&apos;t have every call to getExceptionFactory()  check to see if the factory is null,&lt;br/&gt;
   just ensure the static initiailizer sets up the static factory variable.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;the code&quot; - I meant the Derby engine code in general. Does EmbeddedSQLException provide additional functionality that is not in SQLException.  I think it does, or at least maybe did.  I seem  to remember that:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;         1) It makes the printed stack trace be the stack trace of the underlying exception, for more natural debugging.&lt;br/&gt;
           (maybe the initCause() method added in JDK 1.4 addresses this)&lt;/p&gt;

&lt;p&gt;          2) The toString()  method doesn&apos;t print out the class name, this was an issue when Cloudscape was obfuscated because we could not deal with the class name appearing in the test diffs, since the name could change on each obfuscation run.&lt;br/&gt;
            This one leads to a good question, does derbyall pass in jdk16 with this change?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think the fourth point goes back to the second. If this is separate classes, which is probably a good idea then it should be totally separated from InternalDriver, and become a simple factory model. While it is linked with InternalDriver, it looks more natural to combine them. Maybe Driver40 when it is booted could swap the factory instance for a JDBC 3.0 one to a JDBC 4.0 one.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12367236" author="anurag" created="Wed, 22 Feb 2006 03:06:56 +0000"  >&lt;p&gt;Main changed I have made in this patch since the last submission&lt;br/&gt;
	I have moved back the exception methods of Utils.&lt;br/&gt;
	Now the exceptionFactory is a static member of Utils which is initialized during declaration itself so when this will never be null hence eliminating the possibility of NPE&lt;br/&gt;
	This variable is overwritten by SQLException40 instance by Driver40 during boot.&lt;br/&gt;
	Merged the two method of SQLExceptionFactory40.&lt;br/&gt;
	In newly created exception pointed the stack trace to root cause (if there is another exception available)&lt;/p&gt;

&lt;p&gt;Other issues&lt;br/&gt;
	Fixed the copyright dates.&lt;br/&gt;
	Modified test code to check SQLSTATE&lt;br/&gt;
	Added comments in SQLException40 class and getSQLException method of the same.&lt;/p&gt;

&lt;p&gt;Open Issues	&lt;br/&gt;
	derbyall has many failure (even without this patch) when executed with jdk1.6. I will be creating a  jira issue for this.&lt;br/&gt;
	After these changes all the tests which are comparing the exception thrown or printing the exception will fail.&lt;/p&gt;</comment>
                            <comment id="12367599" author="rhillegas" created="Fri, 24 Feb 2006 08:21:08 +0000"  >&lt;p&gt;It appears to me that 2 of the BLOCKER issues have been addressed:&lt;/p&gt;

&lt;p&gt;1) The startup NPE has been fixed by a static intializer, as recommended.&lt;br/&gt;
2) The test code now checks for expected SQLStates.&lt;/p&gt;

&lt;p&gt;I can&apos;t evaluate the remaining BLOCKER issue (cruft in SystemProcedures.java) because I don&apos;t find that class in either the current patch (derby-819_3.diff) or the previous patch (derby-819_2.diff). Moving the factory methods back to Utils really cleaned up the patch. Lots of good work on copyright notices and comments.&lt;/p&gt;

&lt;p&gt;I don&apos;t see the following issue addressed: Dan wanted to see a comment in the code explaining what functionality is lost by using the JDBC exception classes for JDBC4 rather than EmbedSQLException (which is used for JDBC3). Dan is not objecting to this change, he just wants to understand whether we need to compensate for this lost functionality some other way.&lt;/p&gt;

&lt;p&gt;Anurag, could you explain the SystemProcedures.java issue to me?  Could you add a comment explaining what we&apos;ve lost by migrating from EmbedSQLException to the JDBC4 exception classes? Thanks.&lt;/p&gt;</comment>
                            <comment id="12367604" author="anurag" created="Fri, 24 Feb 2006 08:42:19 +0000"  >&lt;p&gt;There were some ? chars in SystemProcedures.java )all of them in comments) I checked my files It apears to me that some how there were some unprintable char in in the file  on my workspace which apeared as &apos;?&apos; while making the diff. And it skipped me as all of them wehre in comments and didn&apos;t created any failure in derbyall.&lt;/p&gt;


&lt;p&gt;EmbeddedSQLExcpetion has two main functionality not avialble in SQLException&lt;br/&gt;
1. It prints the stack trace to the root cause&lt;/p&gt;

&lt;p&gt;I have taken taken care of this by setting the stack trace of the newly created exception to the root cause.&lt;/p&gt;

&lt;p&gt;2. It doesn&apos;t adds the class name in return toString.&lt;/p&gt;

&lt;p&gt;This is lost while changing the exception. I will add comment about it.&lt;/p&gt;
</comment>
                            <comment id="12367667" author="anurag" created="Sat, 25 Feb 2006 01:37:44 +0000"  >&lt;p&gt;change from last patch&lt;br/&gt;
     added coment in SQLExceptionFactory40 explaining that application relying on EmbeddedSQLException for not prifixing &lt;br/&gt;
class name while returing String from toString as this class throws the java.sql.(exceptions) which return class name as part of toString String&lt;/p&gt;</comment>
                            <comment id="12367678" author="anurag" created="Sat, 25 Feb 2006 02:12:16 +0000"  >&lt;p&gt;created a new test case jdbc4_embedded as TestJDBC40Exception is ment only for embedded mode &lt;br/&gt;
and jdbc4 test suite uses net framework. Because of this DerbyJUnitTest returns Cleint connection.&lt;/p&gt;

&lt;p&gt;Added coment explaining toString method of exceptions now uses the default method of java.sql (exceptions) which &lt;br/&gt;
prefixes class name in the String returned.&lt;/p&gt;

&lt;p&gt;I had attached a wrong file a few mins back which i have removed. Sorry for generating unnessary mail and jira history.&lt;/p&gt;</comment>
                            <comment id="12367710" author="rhillegas" created="Sat, 25 Feb 2006 06:12:14 +0000"  >&lt;p&gt;Hi Anurag,&lt;/p&gt;

&lt;p&gt;Thanks for the explanation and the new patch. I believe that Dan&apos;s BLOCKERs are addressed. However, I have a couple suggestions:&lt;/p&gt;

&lt;p&gt;1)  I found the new comment in SQLExceptionFactory40 a little hard to follow and I propose the following text, instead:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;This method sets the stack trace of the newly created exception to the&lt;/li&gt;
	&lt;li&gt;root cause of the original Throwable.&lt;/li&gt;
	&lt;li&gt;Note the following divergence from JDBC3 behavior: When running&lt;/li&gt;
	&lt;li&gt;a JDBC3 client, we return EmbedSQLException. That exception class&lt;/li&gt;
	&lt;li&gt;overrides Throwable.toString() and strips off the Throwable&apos;s class name.&lt;/li&gt;
	&lt;li&gt;In contrast, the following JDBC4 implementation returns&lt;/li&gt;
	&lt;li&gt;subclasses of java.sql.Exception. These subclasses inherit the behavior of&lt;/li&gt;
	&lt;li&gt;Throwable.toString(). That is, their toString() output includes&lt;/li&gt;
	&lt;li&gt;their class name. This will break code which relies on the&lt;/li&gt;
	&lt;li&gt;stripping behavior of EmbedSQLSxception.toString().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2) I&apos;m not a big fan of this new test suite for embedded-only tests. I think that with a little effort, you should be able to make a DerbyJUnitTest subclass do what you want: for instance, you can customize the main() method of your subclass and judiciously call DerbyJUnitTest.setClient().&lt;/p&gt;

&lt;p&gt;Thanks for your patience. I think we&apos;re in the home-stretch here.&lt;/p&gt;</comment>
                            <comment id="12367712" author="anurag" created="Sat, 25 Feb 2006 06:28:17 +0000"  >&lt;p&gt;Hi Rick&lt;br/&gt;
I will modfy the comments.&lt;/p&gt;

&lt;p&gt;There is no problem with DerbyJUnitTest its behaving perfectly fine ie returning networked connection in case of framework is set to DerbyNet and EmbeddedConnection other wise. Problem is in jdbc4 test suite configuration. It shouldn&apos;t try to set  the framework to DerbyNet when its testing embedded features. &lt;br/&gt;
Once this is fixed there won&apos;t be any need to change the behavior of DerbyJUnitTest.&lt;/p&gt;

&lt;p&gt;I can open a jira issue to fix this and extend the scope to merge embedded-only with it. &lt;/p&gt;

&lt;p&gt;Thanks for bearing with all my mistakes.&lt;/p&gt;</comment>
                            <comment id="12367822" author="anurag" created="Sun, 26 Feb 2006 23:54:01 +0000"  >&lt;p&gt;changes in this version&lt;br/&gt;
    changed comments in SQLException40 as suggested by Rick&lt;br/&gt;
    modified the test case run only in Embedded mode&lt;/p&gt;</comment>
                            <comment id="12368049" author="rhillegas" created="Tue, 28 Feb 2006 09:02:57 +0000"  >&lt;p&gt;A couple more comments:&lt;/p&gt;

&lt;p&gt;1) TestJDBC40Exception fails when I run the jdbc4 suite. It incurs a permissions exception.&lt;/p&gt;

&lt;p&gt;2) While you&apos;re fixing the permissions problem, could you also remove the magic number in TestJDBC40Exception.main()? Please replace setClient (LEGAL_CLIENTS &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;) with setClient( EMBEDDED_CLIENT ). You will have to upgrade the client descriptors in DerbyJUnitTest from private to protected access.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12368085" author="johnemb" created="Tue, 28 Feb 2006 16:55:15 +0000"  >&lt;p&gt;I just wanted to point out some minor comment typos, in case you want to fix them in the next revision:&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java:&lt;/p&gt;

&lt;p&gt;+public class SQLExceptionFactory {&lt;br/&gt;
+    /**&lt;br/&gt;
+     * method to create construct SQLException&lt;br/&gt;
+     * version specific drivers can overload this method to create&lt;br/&gt;
+     * version specific exceptions&lt;br/&gt;
+     */&lt;/p&gt;

&lt;p&gt;Remove either &quot;create&quot; or &quot;construct&quot; in first sentence. Add a period (.) after first sentence (remember, HTML version of javadoc will not necessarily include a line break here).&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/jdbc/Util.java:&lt;/p&gt;

&lt;p&gt; 	/**&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This looks up the message and sqlstate values and generates&lt;br/&gt;
+		This looks up the message and sqlstate values and and calls&lt;br/&gt;
+        out the SQLExceptionFactory method to generate&lt;br/&gt;
 		the appropriate exception off of them.&lt;br/&gt;
 	 */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Remove duplicate &quot;and&quot;. Remove &quot;out&quot; in &quot;calls out?&lt;/p&gt;

&lt;p&gt;+    /**&lt;br/&gt;
+     * this method is called to replace the exception facotry to be &lt;br/&gt;
+     * used to generate the SQLException or the subclass&lt;br/&gt;
+     */&lt;/p&gt;

&lt;p&gt;Typo: &quot;facotry&quot; should be &quot;factory&quot;.&lt;/p&gt;

&lt;p&gt;Index: java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestJDBC40Exception_app.properties:&lt;/p&gt;

&lt;p&gt;+#This test is tests JDBC40 (JDK 1.6) SQLException subclasses&lt;br/&gt;
+#ignore the earlier jvm&lt;/p&gt;

&lt;p&gt;Strange wording. Maybe &quot;This test is testing JDBC 4.0 SQLException subclasses available from JDK1.6. Ignoring earlier JVM versions.&quot; would be better?&lt;/p&gt;
</comment>
                            <comment id="12368155" author="rhillegas" created="Wed, 1 Mar 2006 04:13:16 +0000"  >&lt;p&gt;I have attached stackTrace.tar. This contains two files:&lt;/p&gt;

&lt;p&gt;o TestJDBC40Exception.tmp - The stack trace  I&apos;m seeing when running the jdbc4 suite under cygwin/xp&lt;br/&gt;
o BaseMonitor.java&lt;/p&gt;

&lt;p&gt;As I look at the stack trace, it appears to be the permissions problem we see when running JUnit tests against a sane/debug server with a SecurityManager. I believe there is a JIRA for this: 623. I have attached a patched version of BaseMonitor.java which I believe addresses this problem.&lt;/p&gt;</comment>
                            <comment id="12368156" author="rhillegas" created="Wed, 1 Mar 2006 04:13:59 +0000"  >&lt;p&gt;I have attached stackTrace.tar. This contains two files:&lt;/p&gt;

&lt;p&gt;o TestJDBC40Exception.tmp - The stack trace  I&apos;m seeing when running the jdbc4 suite under cygwin/xp&lt;br/&gt;
o BaseMonitor.java&lt;/p&gt;

&lt;p&gt;As I look at the stack trace, it appears to be the permissions problem we see when running JUnit tests against a sane/debug server with a SecurityManager. I believe there is a JIRA for this: 623. I have attached a patched version of BaseMonitor.java which I believe addresses this problem.&lt;/p&gt;</comment>
                            <comment id="12368566" author="anurag" created="Fri, 3 Mar 2006 03:46:12 +0000"  >&lt;p&gt;I have moved the test case to use TestConnection class for getting the connection.&lt;br/&gt;
I will be chaning it to use junit&lt;br/&gt;
Rectified comments as suggested by John&lt;/p&gt;</comment>
                            <comment id="12368773" author="rhillegas" created="Sat, 4 Mar 2006 03:48:24 +0000"  >&lt;p&gt;Thanks for the changes, Anurag. The jdbc4 tests now pass cleanly. Derbyall had 3 failures for me (wisconsin, Stream, and SURTest); however, these tests also failed for me in a clean subversion client just torn off the mainline. I have committed this patch as subversion revision 382906.&lt;/p&gt;</comment>
                            <comment id="12551302" author="fuzzylogic" created="Thu, 13 Dec 2007 09:04:46 +0000"  >&lt;p&gt;This issue has been resolved for over a year with no further movement. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12329864">DERBY-1081</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12322859" name=".derby-819_2.stat" size="3143" author="anurag" created="Sat, 11 Feb 2006 07:10:45 +0000"/>
                            <attachment id="12322429" name="derby-819-onlyforreview.diff" size="16112" author="anurag" created="Sat, 28 Jan 2006 06:06:05 +0000"/>
                            <attachment id="12322302" name="derby-819.diff" size="9299" author="anurag" created="Tue, 24 Jan 2006 21:32:46 +0000"/>
                            <attachment id="12322858" name="derby-819_2.diff" size="110304" author="anurag" created="Sat, 11 Feb 2006 07:02:11 +0000"/>
                            <attachment id="12323242" name="derby-819_3.diff" size="17984" author="anurag" created="Wed, 22 Feb 2006 03:06:56 +0000"/>
                            <attachment id="12323377" name="derby-819_4.diff" size="17954" author="anurag" created="Sat, 25 Feb 2006 02:12:16 +0000"/>
                            <attachment id="12323421" name="derby-819_5.diff" size="18348" author="anurag" created="Sun, 26 Feb 2006 23:54:01 +0000"/>
                            <attachment id="12323630" name="derby-819_6.diff" size="18762" author="anurag" created="Fri, 3 Mar 2006 03:46:11 +0000"/>
                            <attachment id="12323515" name="stackTrace.tar" size="81920" author="rhillegas" created="Wed, 1 Mar 2006 04:13:59 +0000"/>
                            <attachment id="12323514" name="stackTrace.tar" size="81920" author="rhillegas" created="Wed, 1 Mar 2006 04:13:15 +0000"/>
                            <attachment id="12322231" name="stat.out" size="614" author="anurag" created="Mon, 23 Jan 2006 12:37:57 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 17 Jan 2006 23:57:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29720</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10fj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39720</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>