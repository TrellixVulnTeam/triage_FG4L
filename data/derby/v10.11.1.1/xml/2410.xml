<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2410/DERBY-2410.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2410] Convert grantRevoke.java to JUnit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2410</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Convert grantRevoke.java to JUnit. Also add test cases from grantRevokeDDL and grantRevokeDDL2 SQL tests to the new GrantRevokeTest&lt;/p&gt;</description>
                <environment></environment>
        <key id="12364293">DERBY-2410</key>
            <summary>Convert grantRevoke.java to JUnit</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fuzzylogic">Andrew McIntyre</assignee>
                                    <reporter username="fuzzylogic">Andrew McIntyre</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Mar 2007 21:20:28 +0000</created>
                <updated>Mon, 3 Jun 2013 09:41:50 +0100</updated>
                            <resolved>Thu, 22 Mar 2007 20:11:33 +0000</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12478591" author="fuzzylogic" created="Tue, 6 Mar 2007 21:43:00 +0000"  >&lt;p&gt;Attaching an early draft for converting grantRevoke.java to JUnit. I&apos;d like to get some feedback on the approach, and some extra eyes to make sure I&apos;m not making any mistakes in the logic. This draft does implement all of the testcases from the grant part of grantRevoke.java, although not all of the checks have been implemented yet, as I&apos;ve encountered some problems.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertInsertPrivilege and assertUpdatePrivilege need to be completed. Currently having an issue with getColumns returning an empty ResultSet for tables when the DatabaseMetaData is acquired from the connection opened with openUserConnection&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;problems with the triggers in testGrantRollbackAndCommit need to be investigated.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it might be a good idea to have a version of the assert methods, or at least for select, that takes an array of users, so public privileges can be asserted against all users.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertReferences needs an implementation, although it should be noted that the previous version of the test did not have an implementation for references checks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is client/server necessary here? I guess verifying the metadata methods work properly is worth running on the client, although perhaps the client/server tests should restrict themselves to the metadata test fixtures.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;adding the revoke testcases and the testcases from grantrevokeDDL and grantrevokeDDL2 will make this a large test. Any opinion on whether or not to split these tests up into several test classes? And what approach: move utility methods into BaseJDBCTestCase? Have a GrantRevokeTestCase that the individual tests extend?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Left to do from grantrevoke.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;revoke testcases&lt;/li&gt;
	&lt;li&gt;standard error testcases&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12479481" author="fuzzylogic" created="Fri, 9 Mar 2007 02:01:07 +0000"  >&lt;p&gt;Attaching second early draft of the conversion for this test. All the testcases from grantRevoke.java have now been implemented, and all testcases in this patch pass, but there remain several issues to resolve:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertInsertPrivilege and assertUpdatePrivilege need to be implemented. Currently having a problem with DatabaseMetaData.getColumns for the user connections returning an empty ResultSet. This is the next problem I will try to resolve.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think some reworking of the rollback tests is in order. While the tests currently pass as expected, I think that a variant of grant() is needed that takes a connection so that we are certain the grants occur on the owner connection, so we can be certain that the rollback and commit are doing what we expect.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertTriggerPrivilege has an issue in the rollback tests where an error that the trigger already exists occurs. This needs investigation and may be an actual bug.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;variant of assertSelectPrivilege that takes an array of users to verify public privileges, as mentioned in previous comment&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;review grantRevoke.java and make sure that no functionality tested there is missing from the new test&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;after the above have been resolved:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;move testcases over from grantRevokeDDL / grantRevokeDDL2.&lt;/li&gt;
	&lt;li&gt;assertReferencesPrivilege implementation.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12479544" author="fuzzylogic" created="Fri, 9 Mar 2007 09:11:46 +0000"  >&lt;p&gt;Attaching third draft for converting this test. Insert and update privileges now have proper assert methods. DatabaseMetaData.getColumns() was failing if the schema / table names were not uppercased, even though they were not quoted. I will follow up at a later date to see if this is or is not expected behavior.&lt;/p&gt;

&lt;p&gt;Current issues:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertTriggerPrivilege fails in some tests with complaints that the trigger already exists. This is either a failure by assertTriggerPrivilege to drop a trigger once created, or a bug. Probably the former.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Attempted to have the rollback tests execute their grant statements explicitly on a connection owned by the database owner. This led to lock timeouts, however, so I&apos;ve reverted to the previous method which simply executes the statements on the default connection via runSQLCommands() for now.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;remaining todo items:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;move testcases over from grantrevokeDDL / grantrevokeDDL2&lt;/li&gt;
	&lt;li&gt;implement checks on privilege metadata in system catalogs&lt;/li&gt;
	&lt;li&gt;test DatabaseMetaData methods getColumnPrivileges / getTablePrivileges&lt;/li&gt;
	&lt;li&gt;variants of assertXXXPrivileges that takes an array of users to assert public privileges&lt;/li&gt;
	&lt;li&gt;assertReferencesPrivilege implementation&lt;/li&gt;
	&lt;li&gt;review grantrevoke tests this test replaces to verify all expected functionality is represented&lt;/li&gt;
	&lt;li&gt;followup on DatabaseMetaData.getColumns() issue&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12479805" author="fuzzylogic" created="Sat, 10 Mar 2007 05:00:58 +0000"  >&lt;p&gt;When asserting that trigger privilege was not available, the trigger that was created was not properly dropped. AssertTriggerPrivilege now rolls back the transaction, so the db returns to its previous state regardless of whether the trigger create succeeds or fails.&lt;/p&gt;

&lt;p&gt;Problems with lock timeouts in the rollback tests continue, added a testcase from grantRevokeDDL.sql.&lt;/p&gt;</comment>
                            <comment id="12479808" author="fuzzylogic" created="Sat, 10 Mar 2007 06:42:03 +0000"  >&lt;p&gt;Did a quick analysis of the lock timeout problem I was seeing with the grant rollback test (GrantRevokeTest.testGrantRollbackAndCommit()):&lt;/p&gt;

&lt;p&gt;I set derby.locks.waitTimeout=-1 and ran the test in client/server mode so that I could connect and dump the lock table. The lock table shows me this for SYSTABLEPERMS:&lt;/p&gt;

&lt;p&gt;697  |ROW  |X   |SYSTABLEPERMS |(1,12)   |GRANT|S        |4    |NULL  &lt;br/&gt;
700  |ROW  |S   |SYSTABLEPERMS |(1,12)   |WAIT |S        |0    |NULL&lt;/p&gt;

&lt;p&gt;It appears that the original transaction (697), which is the connection by the database owner which issued the grant statement, has acquired an exclusive lock on row 12 to update SYSTABLEPERMS for the added permission. From reading the code, I believe this is expected, as the grant statement is always executed with isolation level REPEATABLE_READ. (See DataDictionaryImpl.addRemovePermissionsDescriptor():10857 ). When assertSelectPrivilege() in the test code tries to do a select on the table in question, the code that checks permissions for the table for the select statement blocks waiting to read the row in SYSTABLEPERMS for which the original transaction has acquired the exclusive lock to update the permissions, which we see in the lock table dump as the WAIT for the same row (1,12).&lt;/p&gt;

&lt;p&gt;From reading the code, this would appear to be expected behavior, yet the old grantRevoke.java test doesn&apos;t seem to hit this problem, and from reading the old test code, it appears to be doing almost exactly what my test code is doing. So, I&apos;m a bit stumped at the moment as to what is going on that is causing my test to block, while the old test continues on with its processing.&lt;/p&gt;

&lt;p&gt;I&apos;m sure I&apos;ve missed something subtle in the locking behavior, here. Or, I suppose, I&apos;ve misread the old test and somewhere along the way the grant statement was being committed before the select checks were occurring, in which case I think the old test wasn&apos;t actually testing what was expected to be tested. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So, if anyone has any insight as to why I&apos;m hitting these lock timeouts, I would greatly appreciate it.&lt;/p&gt;</comment>
                            <comment id="12482325" author="fuzzylogic" created="Tue, 20 Mar 2007 07:28:21 +0000"  >&lt;p&gt;This will be the last of my &apos;pre&apos; patches for this issue. I&apos;ve converted all of the testcases in grantRevoke.java, but there remain several issues to resolve / doc:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DatabaseMetaData methods seem to currently require uppercase schema / table names. This seems to be expected behavior based on my reading of the code and metadata queries, although I could not find any documentation for it.&lt;/li&gt;
	&lt;li&gt;privileges granted by the database owner in an open transaction block user transactions for the same column/table because grant/revoke statements are always executed with repeatable read isolation level. Again, I believe this is expected behavior from reading the code, but could not find any documentation for it.&lt;/li&gt;
	&lt;li&gt;one testcase checking update privilege on all columns of a table for a user fails to get table privilege for that user using DatabaseMetaData.getTablePrivileges(), worth investigating.&lt;/li&gt;
	&lt;li&gt;one testcase checking insert privilege cannot be verified via DatabaseMetaData for all columns of a table after rollback of a transaction including grant/revoke statements, needs further investigation.&lt;/li&gt;
	&lt;li&gt;need check for REFERENCES privilege missing from previous version of the test&lt;/li&gt;
	&lt;li&gt;trigger privilege is asserted by creating the trigger with autoCommit(false) and then rolling the transaction back, but attempting to assert that the trigger privilege has been granted by checking the DatabaseMetaData, while the transaction being used to create the trigger to assert the privilege is active, causes a lock timeout. Probably related to grant / revoke statements always being executed with isolation level RR.&lt;/li&gt;
	&lt;li&gt;checking DatabaseMetaData.getColumnPrivileges() for every column in a table, when attempting to assert that we have permission on every column in that table fails. I highly suspect that my logic in checking the permissions is incorrect and would really like another set of eyes here. See the comments in the test for assertPrivilegeMetaData().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I still have several tests I plan to run to check the behavior of the previous grantRevoke.java test against my conversion, but because it is not a junit test, it is slow going. Assuming there is no feedback on the issues above, I will commit the attached test in a few days and remove the old grantRevoke.java.&lt;/p&gt;

&lt;p&gt;Once / If the above are resolved / committed, I plan to convert additional testcases from grantRevokeDDL.sql and grantRevokeDDL2.sql to complete this issue.&lt;/p&gt;</comment>
                            <comment id="12482682" author="fuzzylogic" created="Wed, 21 Mar 2007 08:55:05 +0000"  >&lt;p&gt;Attaching first complete patch for this issue. The new test covers all functionality covered by grantRevoke.java minus the column privilege checking that requires the use of FormatableBitSet, which is an internal API that the tests should not be using.&lt;/p&gt;

&lt;p&gt;Three issues were encountered during the conversion of this test. They all seem to be expected, but undocumented, behavior:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DatabaseMetaData methods require that the schema and tablename be uppercased. Passing lowercase names to the create / grant / revoke statements work as expected, but then using the same lowercase names with DatabaseMetaData returns an empty ResulSet for the metadata. This is obvious when looking at the metadata queries and how the metadata is returned to the user. The lack of documentation of this behavior surprised me more than anything.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;as mentioned in a previous mail, privileges granted by the database owner in an open transaction block user transactions for the same column/table because grant/revoke statements are always executed with repeatable read isolation level. From reading the code, this is expected, but doesn&apos;t appear to be documented anywhere. I&apos;ve been meaning to double-check this behavior with the old test (which, on first reading, seems to allow concurrent read of grant permissions by owner and user transactions), but haven&apos;t had the time to get the test running in the debugger with the old harness to check.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Table level privileges are not recorded in SYSCOLPERMS and column level privileges where the set of columns is equivalent to the set of columns in the table is not recorded in SYSTABLEPERMS. Again, I believe this to be expected - but not obvious - behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;other comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I feel that a true universal test for references privilege is impossible, since it requires that the referenced column be a primary key or unique constraint. i.e. it is possible to grant and have references privilege on a column for which it has no meaning to have that privilege. Therefore, no meaningful universal test for that privilege can be crafted. That said, I left an untested implementation for an assert of the privilege in assertReferencesPrivilege() for future use, for cases where we know the table has a primary key that can be referenced, or a unique constraint that can be referenced.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some RESOLVE comments from the previous version of the test were preserved, primarily in the decorateSQL method, concerning support for grant / revoke with certain database features.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If there are no comments, I&apos;ll commit this tomorrow afternoon and remove grantRevoke.java. Converting grantRevokeDDL.java and grantRevokeDDL2.java completely to JUnit may be more trouble than it is worth in the long run. I&apos;m looking into converting the 15 to 16 testcases that cause differences between platforms into GrantRevokeTest and then leaving the rest of the old grantRevokeDDL tests to run under LangScriptTests.&lt;/p&gt;</comment>
                            <comment id="12482759" author="djd" created="Wed, 21 Mar 2007 13:34:38 +0000"  >&lt;p&gt;andrew&amp;gt; DatabaseMetaData methods require that the schema and tablename be uppercased. ... The lack of documentation of this behavior surprised me more than anything. &lt;/p&gt;

&lt;p&gt;This is documented in the javadoc for DatabaseMetaData , e.g. &quot;tableNamePattern - a table name pattern; must match the table name as it is stored in the database&quot;&lt;br/&gt;
If &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2092&quot; title=&quot;Add JDBC classes into Javadoc for Derby&amp;#39;s published api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2092&quot;&gt;&lt;del&gt;DERBY-2092&lt;/del&gt;&lt;/a&gt; was addressed then it would be part of Derby&apos;s documentation set.&lt;/p&gt;

&lt;p&gt;andrew&amp;gt; - I feel that a true universal test for references privilege is impossible, since ...&lt;/p&gt;

&lt;p&gt;I didn&apos;t understand this paragraph, not sure what a &quot;universal test&quot; is, and this comment lost me &quot;grant and have references privilege on a column for which it has no meaning to have that privilege&quot;&lt;/p&gt;
</comment>
                            <comment id="12482885" author="fuzzylogic" created="Wed, 21 Mar 2007 19:22:27 +0000"  >&lt;p&gt;dan&amp;gt;This is documented in the javadoc for DatabaseMetaData , e.g. &quot;tableNamePattern - a table name pattern; must match the table name as it is stored in the database&quot; If &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2092&quot; title=&quot;Add JDBC classes into Javadoc for Derby&amp;#39;s published api&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2092&quot;&gt;&lt;del&gt;DERBY-2092&lt;/del&gt;&lt;/a&gt; was addressed then it would be part of Derby&apos;s documentation set. &lt;/p&gt;

&lt;p&gt;I was surprised that there was no mention of this implementation detail anywhere in the reference guide, i.e. the reference guide never mentions what is &apos;the table name as it is stored in the database&apos; as far as I can tell. The actual behavior itself was not surprising, just ran into it after passing around schema / tablenames as Strings and ending up with empty ResultSets for some DatabaseMetaData methods in some cases, so I checked the docs and did not find it mentioned there.&lt;/p&gt;

&lt;p&gt;dan&amp;gt; I didn&apos;t understand this paragraph, not sure what a &quot;universal test&quot; is, and this comment lost me &quot;grant and have references privilege on a column for which it has no meaning to have that privilege&quot; &lt;/p&gt;

&lt;p&gt;Sorry, it was late and I could have been more clear here. It is possible to grant references privilege on any column, not just primary keys or unique constraints. You can grant references on any column in the database, and Derby happily records that privilege, and you can see in the test that this privilege on the column can be confirmed from the metadata. &lt;/p&gt;

&lt;p&gt;I checked the SQL standard, grant for references seems to be allowed to be granted on arbitrary tables / columns in case those table / columns in the grant are at some point modified to have / be a primary key or have a unique constraint placed on them. However, having the privilege doesn&apos;t mean you can do anything useful with it without a primary key or unique constraint on the table / column, and there&apos;s no way to check the use of it without modifying the original table. i.e. in the style of the test:&lt;/p&gt;

&lt;p&gt;&quot;create table foo (c1 int not null primary key, c2)&quot;&lt;br/&gt;
grant(&quot;references&quot;...&quot;c2&quot;);&lt;br/&gt;
assertReferencePrivilege(&quot;true&quot;...&quot;c2&quot;);&lt;/p&gt;

&lt;p&gt;passes if you just check the metadata for the privilege, but you can&apos;t test in the assert method that you have references privilege on c2 without modifying table foo in the assert method. I feel this sort of violates the spirit of the assert tests, in that they shouldn&apos;t be changing the state of the things being asserted, just verifying their state. It&apos;s probably also why this check in the previous test was left stubbed out, since there&apos;s no good check for it that doesn&apos;t alter the original table&apos;s definition.&lt;/p&gt;

&lt;p&gt;It&apos;s not a problem, just making a note of it for the next person who comes along and wonders what is going on here. I&apos;ll go back and double-check the comments in the test to make sure they are clear.&lt;/p&gt;</comment>
                            <comment id="12483296" author="fuzzylogic" created="Thu, 22 Mar 2007 20:11:33 +0000"  >&lt;p&gt;Committed to trunk with revision 521432.&lt;/p&gt;</comment>
                            <comment id="12483426" author="fuzzylogic" created="Fri, 23 Mar 2007 06:36:46 +0000"  >&lt;p&gt;Closing this issue. I had hoped to run the grantRevokeDDL and grantRevokeDDL2 SQL scripts with an adapter, as the diffs between VMs are minimal, but they are not good candidates for running as ScriptTestCases because they make heavy use of multiple connections in ij, which causes problems when run with ij.runScript() since multiple connections don&apos;t work there. While it would be useful to convert these tests, they are very extensive and I will take a break from grant/revoke for the moment and convert a couple of other tests. I hope to come back to the remaining grant/revoke tests in the near future.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12650282">DERBY-6238</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12352787" name="derby-2410-pre.diff" size="29810" author="fuzzylogic" created="Tue, 6 Mar 2007 21:43:00 +0000"/>
                            <attachment id="12352956" name="derby-2410-pre2.diff" size="49394" author="fuzzylogic" created="Fri, 9 Mar 2007 02:01:07 +0000"/>
                            <attachment id="12352963" name="derby-2410-pre3.diff" size="53854" author="fuzzylogic" created="Fri, 9 Mar 2007 09:11:46 +0000"/>
                            <attachment id="12353036" name="derby-2410-pre4.diff" size="56039" author="fuzzylogic" created="Sat, 10 Mar 2007 05:00:55 +0000"/>
                            <attachment id="12353715" name="derby-2410-pre5.diff" size="60342" author="fuzzylogic" created="Tue, 20 Mar 2007 07:28:21 +0000"/>
                            <attachment id="12353829" name="derby-2410-v1.diff" size="62523" author="fuzzylogic" created="Wed, 21 Mar 2007 08:55:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 21 Mar 2007 13:34:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30427</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy12pb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40088</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>