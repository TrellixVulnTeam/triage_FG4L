<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:10:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-407/DERBY-407.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-407] predicatesIntoViews test failure on slow machine in Derby 10.1 branch version 201931</title>
                <link>https://issues.apache.org/jira/browse/DERBY-407</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The predicatesIntoViews test (part of the derbylang suite) fails when running the tests on a busy/slow system, but they pass when I run them on my fast Windows box.&lt;/p&gt;

&lt;p&gt;It appears that the failure could be due to different optimizations being performed due to the difference in speed of the machines.  This needs to be confirmed that it is the case of the test failure.  I will attach the test summary to this issue.&lt;/p&gt;

&lt;p&gt;I also noticed that the test report said 0% fail even though one test failed. &lt;/p&gt;

&lt;p&gt;All derbylang tests passed on Windows XP. &lt;/p&gt;

&lt;p&gt;Thanks, &lt;/p&gt;

&lt;p&gt;John &lt;/p&gt;</description>
                <environment>Java Version:    1.4.2_04&lt;br/&gt;
Java Vendor:     Hewlett-Packard Company&lt;br/&gt;
Java home:       /usr/tandem/java/jre&lt;br/&gt;
Java classpath:  /home/john/j2ee/derbyTests/derby-10.1-branch/jars/derby.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbytools.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbynet.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyclient.jar:/home/john/j2ee/derbyTests/common-jars/db2jcc.jar:/home/john/j2ee/derbyTests/common-jars/db2jcc_license_c.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyTesting.jar:/home/john/j2ee/derbyTests/common-jars/jakarta-oro-2.0.8.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_de_DE.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_es.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_fr.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_it.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_ja_JP.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_ko_KR.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_pt_BR.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_zh_CN.jar:/home/john/j2ee/derbyTests/derby-10.1-branch/jars/derbyLocale_zh_TW.jar:/usr/tandem/java/lib/classes.zip:/usr/tandem/javaextv20/lib/tdmext.jar:/usr/tandem/jdbcMp/current/lib/sqlmp.jar:/usr/tandem/jdbcMx/current/lib/jdbcMx.jar:.&lt;br/&gt;
OS name:         NONSTOP_KERNEL&lt;br/&gt;
OS architecture: mips&lt;br/&gt;
OS version:      G06&lt;br/&gt;
Java user name:  SUPER.JOHN&lt;br/&gt;
Java user home:  /home/john&lt;br/&gt;
Java user dir:   /home/john/j2ee/derbyTests/derby-10.1-branch/testOutput&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.4</environment>
        <key id="12311781">DERBY-407</key>
            <summary>predicatesIntoViews test failure on slow machine in Derby 10.1 branch version 201931</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="johnrsisson">John Sisson</reporter>
                        <labels>
                    </labels>
                <created>Thu, 30 Jun 2005 07:14:49 +0100</created>
                <updated>Fri, 21 Jan 2011 18:09:06 +0000</updated>
                            <resolved>Thu, 29 Jun 2006 07:56:13 +0100</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12314702" author="johnrsisson" created="Thu, 30 Jun 2005 07:17:02 +0100"  >&lt;p&gt;derbylang_report.txt attached.&lt;/p&gt;</comment>
                            <comment id="12314703" author="johnrsisson" created="Thu, 30 Jun 2005 07:20:59 +0100"  >&lt;p&gt;Mail from Myrna on derby-dev:&lt;/p&gt;

&lt;p&gt;Hi John,&lt;/p&gt;

&lt;p&gt;We&apos;ve been seeing an intermittent failure with this test with some of the jvms we run against on a slow machine.&lt;br/&gt;
It appears the test is not &apos;tight&apos; enough to always pass on slower machines - sometimes one of the queries results in a table scan, sometimes an index scan. &lt;br/&gt;
I can&apos;t right now remember if there is a JIRA_CASE for it. If not, it wouldn&apos;t harm. &lt;/p&gt;

&lt;p&gt;There was a bug filed at one point for the summary calculation being wrong, but it looks like it was not fixed entirely - I think I saw that the sub-suites seem to get it right, but derbyall doesn&apos;t?&lt;br/&gt;
I wanted to check into this, but never got around to it. A new bug would be good as a reminder...&lt;/p&gt;

&lt;p&gt;Myrna&lt;/p&gt;</comment>
                            <comment id="12314704" author="johnrsisson" created="Thu, 30 Jun 2005 07:22:23 +0100"  >&lt;p&gt;Note that I wasn&apos;t running the derbyall suite, I was running derbylang.&lt;/p&gt;</comment>
                            <comment id="12316675" author="army" created="Tue, 26 Jul 2005 04:12:33 +0100"  >&lt;p&gt;If you trim out the extra lines of the diff, the failure comes&lt;br/&gt;
down to the following difference in query plan (this is just one&lt;br/&gt;
tiny part of a very large query plan):&lt;/p&gt;

&lt;p&gt;Master file &amp;#8211;&lt;/p&gt;

&lt;p&gt;	Left result set  = Table scan on CLASSIFICATION_VALUES (chosen by the optimizer)&lt;br/&gt;
	Right result set = Hash scan on REPOSITORYOBJECTRESOURCE&lt;/p&gt;

&lt;p&gt;Actual (when the test fails) &amp;#8211;&lt;/p&gt;

&lt;p&gt;	Left result set = Index scan on REPOSITORYOBJECTRESOURCE (chosen by the optimizer)&lt;br/&gt;
	Right result set = Hash scan on CLASSIFICATION_VALUES&lt;/p&gt;

&lt;p&gt;I don&apos;t know enough about how the optimizer works to know&lt;br/&gt;
if one of these plans is inherently &quot;better&quot; than the other&lt;br/&gt;
(I think it depends on how many rows are in the underlying&lt;br/&gt;
tables).  However, I have confirmed (through discussion with&lt;br/&gt;
Mike Matrigali) that the plan chosen by the optimizer &lt;em&gt;can&lt;/em&gt;&lt;br/&gt;
be affected by the speed of the machine.  Internally,&lt;br/&gt;
the optimizer does a check to make sure that&lt;br/&gt;
it doesn&apos;t spend too much time trying to find the best&lt;br/&gt;
query plan--and it will do a &quot;timeout&quot; if it thinks it&apos;s&lt;br/&gt;
taking too long.  In particular, if the optimizer has&lt;br/&gt;
already spent more time choosing a query plan than it&lt;br/&gt;
thinks the best query plan so far is going to take to&lt;br/&gt;
execute, the optimizer will stop looking at plans and&lt;br/&gt;
just use the best plan so far.&lt;/p&gt;

&lt;p&gt;What this means is that, on a faster machine, the&lt;br/&gt;
optimizer can potentially see more query plans before&lt;br/&gt;
timing out than it would on a slower machine--and thus&lt;br/&gt;
it might find a better plan on the faster machine.&lt;/p&gt;

&lt;p&gt;So far as I can tell, that&apos;s what&apos;s happening with this&lt;br/&gt;
predicatesIntoViews failure.  While trying to prove this&lt;br/&gt;
point, I noticed that there is an undocumented user&lt;br/&gt;
property called &quot;derby.optimizer.noTimeout&quot; that keeps&lt;br/&gt;
the optimizer from timing out--i.e. the optimizer will process&lt;br/&gt;
ALL query plans and then pick the best one, regardless&lt;br/&gt;
of how long it takes to do so.  When I set this property&lt;br/&gt;
to true and ran the test, it passed 100% of the time,&lt;br/&gt;
regardless of the speed of my CPU.&lt;/p&gt;

&lt;p&gt;That said, I think an initial work-around for this problem&lt;br/&gt;
is to set the derby.optimizer.noTimeout property for this&lt;br/&gt;
test to true (using the harness).  That should allow the&lt;br/&gt;
test to pass on a consistent basis until someone can&lt;br/&gt;
look further at the massive query plan to see what&apos;s&lt;br/&gt;
happening and to determine if this particular failure&lt;br/&gt;
is an optimizer bug (see notes below) or is just&lt;br/&gt;
&apos;working as designed&apos;.&lt;/p&gt;


&lt;p&gt;-----------&lt;br/&gt;
Other notes&lt;br/&gt;
-----------&lt;/p&gt;

&lt;p&gt;While investigating this failure, I noticed a couple of&lt;br/&gt;
behavioral oddities that could potentially help to&lt;br/&gt;
determine if this is an optimizer bug.  I&apos;m including&lt;br/&gt;
them here for tracking purposes.  Note that these&lt;br/&gt;
behaviors are only relevant if the noTimeout property&lt;br/&gt;
is NOT set (if it &lt;em&gt;is&lt;/em&gt; set, then the test will always&lt;br/&gt;
pass, regardless of what I describe below).&lt;/p&gt;

&lt;p&gt;1) In an attempt to debug the failure, I added a bunch&lt;br/&gt;
of &quot;select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; queries to the test to see how&lt;br/&gt;
large the tables used by the query plan were, and also&lt;br/&gt;
to see how large the result set of the query was.  As it&lt;br/&gt;
turned out, adding such queries caused the test to&lt;br/&gt;
consistently choose the second query plan listed above--&lt;br/&gt;
i.e. the &quot;fail&quot; plan--regardless of the speed of my&lt;br/&gt;
CPU.  The specific queries I added are these&lt;br/&gt;
(I added them just before execution of the query&lt;br/&gt;
that&apos;s seeing the diff):&lt;/p&gt;

&lt;p&gt;  SELECT COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM XR.CLASSIFICATION_VALUES;&lt;br/&gt;
  SELECT COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM XR.REPOSITORYOBJECTRESOURCE;&lt;br/&gt;
  SELECT COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM XR.REPOSITORYOBJECTALLVERSIONVIEW;&lt;br/&gt;
  SELECT count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
  FROM xr.repositoryobjectallversionview rov &lt;br/&gt;
  where (uname = UPPER(&apos;two&apos;) or uname = UPPER(&apos;my project&apos;))&lt;br/&gt;
  and (versionid in&lt;br/&gt;
      (select versionid&lt;br/&gt;
       from xr.versionlabel&lt;br/&gt;
       where UPPER(label) = UPPER(&apos;Snapshot&apos;)))&lt;br/&gt;
    and deletedate is null;&lt;/p&gt;

&lt;p&gt;It would appear that executing these SELECT COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
queries causes some internal state/statistics to be&lt;br/&gt;
updated, which in turn results in a different query&lt;br/&gt;
plan than what the test usually expects (even on faster&lt;br/&gt;
machines).  But if that&apos;s the case, then it seems (to me)&lt;br/&gt;
like the updated state/statistics should cause the&lt;br/&gt;
optimizer to choose a &lt;em&gt;better&lt;/em&gt; plan than what it would&lt;br/&gt;
otherwise choose--so it&apos;s not clear to me what&apos;s going&lt;br/&gt;
on there.  Perhaps the updated state/statistics are&lt;br/&gt;
incorrect or are being handled incorrectly, causing&lt;br/&gt;
the optimizer to choose the wrong query plan...?&lt;/p&gt;

&lt;p&gt;2) If I leave noTimeout set to false (its default) and&lt;br/&gt;
do NOT add the &quot;select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; queries mentioned above,&lt;br/&gt;
but I add system shutdown/reconnect logic to the test just&lt;br/&gt;
before executing the query in question, then the test&lt;br/&gt;
passes regardless of how fast/slow my CPU is.  Mike&lt;br/&gt;
Matrigali suggested that this is because system shutdown&lt;br/&gt;
causes all state/row counts to be flushed to disk, so&lt;br/&gt;
reconnecting and then executing the query might allow the&lt;br/&gt;
optimizer to use the latest state/row counts to find&lt;br/&gt;
the best plan.  Of course, if that&apos;s true then it seems&lt;br/&gt;
like we&apos;d have at least a slight contradiction to the&lt;br/&gt;
behavior described in #1 above, where updated stats/row&lt;br/&gt;
counts are causing the test to &lt;em&gt;fail&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that if the &quot;select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; queries are included&lt;br/&gt;
in the test, then the test will fail regardless of&lt;br/&gt;
whether or not we shutdown/reconnect.&lt;/p&gt;

&lt;p&gt;The interaction between these behaviors and the noTimeout&lt;br/&gt;
flag can be summarized as follows.&lt;/p&gt;

&lt;p&gt;Let &quot;TO&quot; correspond to a noTimeout property that is TRUE.&lt;br/&gt;
  Then &quot;!TO&quot; is a noTimeout property that is FALSE (the&lt;br/&gt;
  default).&lt;/p&gt;

&lt;p&gt;Let &quot;SC&quot; correspond to the presence of &quot;select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;&lt;br/&gt;
 queries in the test.  Then &quot;!SC&quot; means that such queries&lt;br/&gt;
 are NOT included.&lt;/p&gt;

&lt;p&gt;Let &quot;SH&quot; correspond to the presence of shutdown/reconnect&lt;br/&gt;
 logic in the test.  Then &quot;!SH&quot; means that such logic is&lt;br/&gt;
 is NOT included.&lt;/p&gt;

&lt;p&gt;Then we have the following behavior (at least, on my own&lt;br/&gt;
laptop):&lt;/p&gt;

&lt;p&gt;!TO &amp;amp;&amp;amp; !SC &amp;amp;&amp;amp; !SH ==&amp;gt; Intermittent failure on slower machines.&lt;br/&gt;
!TO &amp;amp;&amp;amp; !SC &amp;amp;&amp;amp;  SH ==&amp;gt; Test passes regardless of CPU speed.&lt;br/&gt;
!TO &amp;amp;&amp;amp;  SC &amp;amp;&amp;amp; !SH ==&amp;gt; Test fails regardless of CPU speed.&lt;br/&gt;
!TO &amp;amp;&amp;amp;  SC &amp;amp;&amp;amp;  SH ==&amp;gt; Test fails regardless of CPU speed.&lt;br/&gt;
 TO &amp;amp;&amp;amp; !SC &amp;amp;&amp;amp; !SH ==&amp;gt; Test passes regardless of CPU speed.&lt;br/&gt;
 TO &amp;amp;&amp;amp; !SC &amp;amp;&amp;amp;  SH ==&amp;gt; Test passes regardless of CPU speed.&lt;br/&gt;
 TO &amp;amp;&amp;amp;  SC &amp;amp;&amp;amp; !SH ==&amp;gt; Test passes regardless of CPU speed.&lt;br/&gt;
 TO &amp;amp;&amp;amp;  SC &amp;amp;&amp;amp;  SH ==&amp;gt; Test passes regardless of CPU speed.&lt;/p&gt;

&lt;p&gt;Again, I&apos;m not sure how much of this information is&lt;br/&gt;
relevant info, but since these are all things I noticed&lt;br/&gt;
while investigating the problem, I&apos;m including them&lt;br/&gt;
for the sake of completeness/tracking, in case they&apos;ll&lt;br/&gt;
save someone some time in the future...&lt;/p&gt;

&lt;p&gt;In the end, since setting noTimeout to TRUE seems like&lt;br/&gt;
the simplest and most reliable way to get the test to&lt;br/&gt;
pass on a consistent basis, that is what I&apos;m proposing &lt;br/&gt;
as a tempory workaround until further investigation can &lt;br/&gt;
be carried out.  I will post a patch to do that shortly.&lt;/p&gt;</comment>
                            <comment id="12316707" author="army" created="Tue, 26 Jul 2005 08:49:01 +0100"  >&lt;p&gt;Attaching a simple patch to set the &quot;derby.optimizer.noTimeout&quot; property to true for the predicatesIntoViews test.  Before applying this patch, I set the CPU speed on my laptop to &quot;very slow&quot; and ran the test 10 times; it failed every time.  After applying this workaround patch, I ran the test 10 more times and it passed every time.  Per my earlier comments, this isn&apos;t necessarily a &quot;fix&quot; for the problem, but it&apos;s a workaround that will allow the test to pass until someone is able to look more closely at this test and figure out what the optimizer is doing.&lt;/p&gt;</comment>
                            <comment id="12317146" author="bandaram" created="Fri, 29 Jul 2005 10:25:03 +0100"  >&lt;p&gt;Submitted this patch. Thanks for good research and for taking time to explain the research!&lt;/p&gt;

&lt;p&gt;Sending        java\testing\org\apache\derbyTesting\functionTests\tests\lang\predicatesIntoViews_derby.properties&lt;br/&gt;
Transmitting file data .&lt;br/&gt;
Committed revision 226308.&lt;/p&gt;</comment>
                            <comment id="12418343" author="army" created="Thu, 29 Jun 2006 07:56:13 +0100"  >&lt;p&gt;The derby.optimizer.noTimeout workaround (as commited almost a year ago) allows this test to run without failure and seems like the appropriate fix (different machines will optimize at different speeds, so it makes sense that optimizer &quot;timeout&quot; could lead to different plans--the best way to avoid this is to disable optimizer timeout, as is also done in other tests that print query plans).  So I&apos;m marking this issue as resolved and closing it.&lt;/p&gt;

&lt;p&gt;If anyone would like to do followup investigation at a later time, s/he should feel free to file another Jira issue and proceed there.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12311384" name="derby407_workaround.patch" size="553" author="army" created="Tue, 26 Jul 2005 08:19:47 +0100"/>
                            <attachment id="12311013" name="derbylang_report.txt" size="6057" author="johnrsisson" created="Thu, 30 Jun 2005 07:17:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 26 Jul 2005 03:12:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21937</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0kjb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37145</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>