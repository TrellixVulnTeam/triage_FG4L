<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:11:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3354/DERBY-3354.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3354] Select from large lob table with embedded gives OutOfMemoryError</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3354</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Retrieving from a large table with lobs gives an OutOfMemoryException, even if free() is explictly called on the lob.   I believe this is because EmbedConnection.addLobMapping is called for every lob creation but is never cleared until commit or rollback, even if the lob is freed.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12387321">DERBY-3354</key>
            <summary>Select from large lob table with embedded gives OutOfMemoryError</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anurag">Anurag Shekhar</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Mon, 28 Jan 2008 19:50:25 +0000</created>
                <updated>Tue, 30 Jun 2009 16:55:40 +0100</updated>
                            <resolved>Mon, 7 Apr 2008 09:50:04 +0100</resolved>
                                    <version>10.3.1.4</version>
                    <version>10.3.2.1</version>
                    <version>10.4.1.3</version>
                                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12563265" author="kmarsden" created="Mon, 28 Jan 2008 19:53:25 +0000"  >&lt;p&gt;Atttached is a program to reproduce this issue.&lt;br/&gt;
Run java -Xmx16M LocLeak. I got the error on the 68000 row of retreival with the free(). Sooner if I didn&apos;t call free.&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
        at java.util.Arrays.copyOf(Arrays.java:2882)&lt;br/&gt;
        at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)&lt;br/&gt;
        at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)&lt;br/&gt;
        at java.lang.StringBuilder.append(StringBuilder.java:119)&lt;br/&gt;
        at java.lang.Object.toString(Object.java:219)&lt;br/&gt;
        at java.lang.String.valueOf(String.java:2827)&lt;br/&gt;
        at java.lang.StringBuffer.append(StringBuffer.java:219)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack(EmbedConnection.java:1960)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.restoreContextStack(ConnectionChild.java:131)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.UTF8Reader.fillBuffer(UTF8Reader.java:567)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.UTF8Reader.read(UTF8Reader.java:245)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ClobUpdatableReader.read(ClobUpdatableReader.java:154)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedClob.getSubString(EmbedClob.java:225)&lt;br/&gt;
        at LocLeak.dump_db(LocLeak.java:50)&lt;br/&gt;
        at LocLeak.main(LocLeak.java:13)&lt;/p&gt;

&lt;p&gt;Note there may be problems freeing the locators on garbage collection, because client relies upon them even after there is no embedded reference.&lt;/p&gt;</comment>
                            <comment id="12563268" author="kmarsden" created="Mon, 28 Jan 2008 19:57:15 +0000"  >&lt;p&gt;Marking as regression as I confirmed this does not occur with 10.2.2.0&lt;/p&gt;</comment>
                            <comment id="12563275" author="kmarsden" created="Mon, 28 Jan 2008 20:26:20 +0000"  >&lt;p&gt;This regression was caused by the following checkin:&lt;br/&gt;
r546881 | bernt | 2007-06-13 07:06:30 -0700 (Wed, 13 Jun 2007) | 1 line&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2787&quot; title=&quot;make entry for clob in connection so that temporary file is removed when a connection is closed or transaction is commited/rolledback&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2787&quot;&gt;&lt;del&gt;DERBY-2787&lt;/del&gt;&lt;/a&gt; make entry for clob in connection so that temporary file is removed when a connectionn is commited/rolledback. Submitted by Anurag Shekhar&lt;/p&gt;</comment>
                            <comment id="12563539" author="knutanders" created="Tue, 29 Jan 2008 14:54:20 +0000"  >&lt;p&gt;&amp;gt; I believe this is because EmbedConnection.addLobMapping is called for every lob creation but is never cleared until commit or rollback, even if the lob is freed.&lt;/p&gt;

&lt;p&gt;I believe your analysis is correct. free() should remove the mapping. Unfortunately, the lob doesn&apos;t know about its locator value, but it seems like your about to change that by adding a getLocator() method in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3243&quot; title=&quot;(jdbc net client) exception during normal iteration through &amp;quot;ResultSet&amp;quot; of &amp;quot;select * from t&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3243&quot;&gt;&lt;del&gt;DERBY-3243&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3243&quot; title=&quot;(jdbc net client) exception during normal iteration through &amp;quot;ResultSet&amp;quot; of &amp;quot;select * from t&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3243&quot;&gt;&lt;del&gt;DERBY-3243&lt;/del&gt;&lt;/a&gt; I wrote:&lt;br/&gt;
&amp;gt; Another thing I came to think about: Would it be better to remove addLOBMapping() from the constructors in EmbedBlob/EmbedClob and instead call it lazily from getLocator()? (...) Then we&apos;d also remove the overhead of maintaining the lob mapping in embedded mode.&lt;/p&gt;

&lt;p&gt;I think that change would fix the OOME (on embedded, but we&apos;d probably still see it in a client/server environment).&lt;/p&gt;

&lt;p&gt;Now, it seems like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2787&quot; title=&quot;make entry for clob in connection so that temporary file is removed when a connection is closed or transaction is commited/rolledback&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2787&quot;&gt;&lt;del&gt;DERBY-2787&lt;/del&gt;&lt;/a&gt; added the call to addLOBMapping() intentionally to ensure that free() was called on commit/rollback and temporary files would be deleted. Moving addLOBMapping() out of the constructors would probably reintroduce the problem with temporary files not being deleted. However, the lobs only create temporary files when they are modified and the new size of the lob is greater than the buffer in LOBStreamControl, so it shouldn&apos;t be necessary to have commit/rollback call free() on all lobs to delete the temporary files. It would probably be enough if each lob added itself to a list in the connection each time a temporary file was created in LOBStreamControl.init(). (addLOBMapping() is probably OK, but it feels a bit strange to piggyback on a locator mechanism to do this cleanup when we don&apos;t actually care about the locators.)&lt;/p&gt;</comment>
                            <comment id="12568123" author="oysteing" created="Tue, 12 Feb 2008 14:03:32 +0000"  >&lt;p&gt;The attached patch makes the repro run without getting an OutOfMemory error.&lt;br/&gt;
This is achieved by removing the LOB object from the locator mapping.&lt;/p&gt;

&lt;p&gt;I am not setting patch available since test cases should also be added,&lt;br/&gt;
and I have not run the regression test suites.&lt;/p&gt;</comment>
                            <comment id="12568177" author="kmarsden" created="Tue, 12 Feb 2008 16:06:04 +0000"  >&lt;p&gt;Thanks for the patch.  I tried it out and it and have a few comments.&lt;/p&gt;

&lt;p&gt;1) In EmbedBlob should the call to  localConn.removeLOBMapping(locator); be in a finally block like it is in EmbedClob?&lt;/p&gt;

&lt;p&gt;2) In jdk15 we don&apos;t have free()  so would still have a leak. Do you have any suggestions for a jdk15 solution?&lt;/p&gt;

&lt;p&gt;3) I removed the call to free() from the repro and ran &lt;br/&gt;
java LocLeak and got.&lt;br/&gt;
Retrieving row 99000&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: Java exception: &apos;: java.util.ConcurrentModificationException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.javaException(Util.java:245)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:1946)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.rollback(EmbedConnection.java:1521)&lt;br/&gt;
        at LocLeak.main(LocLeak.java:14)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;: java.util.ConcurrentModificationException&apos;.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:13&lt;br/&gt;
5)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        ... 7 more&lt;br/&gt;
Caused by: java.util.ConcurrentModificationException&lt;br/&gt;
        at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)&lt;br/&gt;
        at java.util.HashMap$ValueIterator.next(HashMap.java:821)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping(EmbedConnection.java:2737)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.rollback(EmbedConnection.java:1519)&lt;br/&gt;
        ... 1 more&lt;/p&gt;</comment>
                            <comment id="12568226" author="kmarsden" created="Tue, 12 Feb 2008 17:17:34 +0000"  >&lt;p&gt;Also should the removeLobMapping calls be removed from LobStoredProcedures.BLOBRELEASELOCATOR and CLOBRELEASELOCATOR now that the release happens in free()?&lt;/p&gt;
</comment>
                            <comment id="12569268" author="oysteing" created="Fri, 15 Feb 2008 13:31:42 +0000"  >&lt;p&gt;Kathey, I agreed that more needs to be done for a final patch.  I just put together a patch with the core fix to make it possible to try out the fix.&lt;/p&gt;

&lt;p&gt;To your issues:&lt;br/&gt;
1) Creating a finally block in EmbedBlob seems like a good idea.  I also agree that we can remove similar code from the stored procedures.&lt;/p&gt;

&lt;p&gt;2) I will think about solution for jdk15. The problem introduced by 10.3 is that the lob mapping keeps Blob/Clob objects alive that earlier would be gc&apos;ed when it was no longer referred by the user.  I guess another level of indirection would make it possible to use finalizers to clean up, but I am not sure that is a good idea.&lt;br/&gt;
A work-around is to not create Blob objects in the first place, but use ResultSet#getBytes etc instead.  So the problem is limited to the case where a Blob object need to be accessible after a call to ResultSet#next, but not until commit.&lt;/p&gt;

&lt;p&gt;3) Seems like there is come concurrent access to the HashMap.  I would guess that this is because the iterator created by rollback, detects that the underlying collection has been changed.  Probably through the calls to free in the loop using the iterator.  I think this show that something needs to be reorganized a bit here.&lt;/p&gt;</comment>
                            <comment id="12584108" author="anurag" created="Tue, 1 Apr 2008 12:21:48 +0100"  >&lt;p&gt;LobMapping and locater is used by the stored procedures (on behalf of &lt;br/&gt;
network driver) to get hold of a particular lob object. LobMapping is additionally &lt;br/&gt;
used to clear the lob object during commit/rollback and connection close. &lt;/p&gt;

&lt;p&gt;Separating these two functionality in two different collections may solve OOM problem.&lt;/p&gt;

&lt;p&gt;We can continue to have LobMapping only if the LOB is created through client driver (entry will &lt;br/&gt;
be made in LOBMapiing in getLocator)&lt;/p&gt;

&lt;p&gt;Create methods will make an entry to a new collection holding week references of the LOBs. &lt;/p&gt;

&lt;p&gt;This will ensure that LOB will get garbage collected if they unreferenced in Embedded &lt;br/&gt;
mode but in case of client server mode the references will be protected from being garbage &lt;br/&gt;
collected unless free is called by the stored procedure. &lt;/p&gt;</comment>
                            <comment id="12584521" author="anurag" created="Wed, 2 Apr 2008 12:41:13 +0100"  >&lt;p&gt;In this patch I have introduced  a WeakHashMap to hold lob objects. &lt;br/&gt;
The WeakHashMap has lob objects as key and null as values. &lt;br/&gt;
The existing lobMapping is used only if a locater is requested (ie when accessed from client driver). &lt;/p&gt;

&lt;p&gt;With this patch the attached test case (LocLeak.java) runs without getting out of memory exception (without free call from LocLeak). &lt;/p&gt;

&lt;p&gt;This patch has changes related to Clob only and I havn;t run any test other that attached LocLeak. I will submit a complete patch shortly.&lt;/p&gt;
</comment>
                            <comment id="12585005" author="oysteing" created="Thu, 3 Apr 2008 09:14:44 +0100"  >&lt;p&gt;If I understand correctly, the idea behind using a WeakHashMap is that if this is the only reference, it should not prevent the referred object from being garbage-collected.&lt;br/&gt;
In other words, as long as a user thread or the network server through locators, refers to the object, it will not be garbage-collected, but if such references does not exist, the object will be garbage-collected.    This is an interesting idea.  &lt;/p&gt;

&lt;p&gt;My question is whether it is OK that free is not called on the LOB objects that are garbage-collected this way.  Are you certain that all associated resources (e.g., temp files) will be released?  Maybe some finalizer clean-up  will also be needed?&lt;/p&gt;

&lt;p&gt;Other comments/questions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;It seems getLocator will create a new locator on every call.  I think there should be just a single locator per object.  Otherwise, I think the clean-up will be difficult.&lt;/li&gt;
	&lt;li&gt;free:  Willl removeLOBMapping handle correctly the cases where a locator has not been set?&lt;/li&gt;
	&lt;li&gt;typo: Refrence&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12585015" author="anurag" created="Thu, 3 Apr 2008 09:49:37 +0100"  >&lt;p&gt;Thanks &#216;ystein  for look at the patch.&lt;/p&gt;

&lt;p&gt;My question is whether it is OK that free is not called on the LOB objects that are garbage-collected this way. Are you certain that all associated resources (e.g., temp files) will be released? Maybe some finalizer clean-up will also be needed?&lt;/p&gt;

&lt;p&gt;If there is no free called (or release on internal clob) the temporary file will not be cleaned. But the temporary file &lt;br/&gt;
system is cleaned every time db boots up. I was under impression that disk operations are not allowed from &lt;br/&gt;
finalize. Probably I was wrong. I will check and if its not restricted I will add finalizer for EmbedClob and &lt;br/&gt;
EmbedBlob.&lt;/p&gt;

&lt;p&gt;Other comments/questions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;It seems getLocator will create a new locator on every call. I think there should be just a single locator per object. Otherwise, I think the clean-up will be difficult.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will be checking it to check if the locator is 0 before calling addMapping. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;free: Willl removeLOBMapping handle correctly the cases where a locator has not been set?&lt;br/&gt;
HashMap ignore remove call if key is not found in the Map So there is no problem If we call &lt;br/&gt;
remove with invalid key.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;typo: Refrence&lt;br/&gt;
I will fix this,&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12585049" author="oysteing" created="Thu, 3 Apr 2008 12:17:12 +0100"  >&lt;p&gt;I do think that it is a good idea to put disk operations in a finalizer, but it should be possible to record work that needs to be done (e.g., at transaction commit).   I do not think delaying clean-up of files until db reboot is acceptable since a server may be running for months without a reboot.&lt;/p&gt;
</comment>
                            <comment id="12585282" author="anurag" created="Thu, 3 Apr 2008 21:53:27 +0100"  >&lt;p&gt;Description of derby-3354_v1.diff&lt;br/&gt;
This patch introduces a new WeakHashMap in EmbedConnection. EmbedBlob and EmbedClob objects references are stored in this &lt;br/&gt;
map (objects as key and null as value). Adding entry to locater map is &lt;br/&gt;
differed till the first call of getLocater. &lt;br/&gt;
This ensures that there is entry of LOB objects in locater map if they are invoked in embedded mode. &lt;br/&gt;
As the keys of WeakHashMap doesn&apos;t prevents the objects from being &lt;br/&gt;
garbage collected, once the lob objects are unreferenced lob objects will &lt;br/&gt;
be garbage collected releasing the memory.&lt;/p&gt;

&lt;p&gt;During commit/rollback or Connection.close, free is invoked on all the lob &lt;br/&gt;
objects from WeakHashMap and the map is cleared.&lt;/p&gt;

&lt;p&gt;Modified files&lt;br/&gt;
java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;br/&gt;
Added a new attribute lobRefrences of type WeakHashMap.&lt;br/&gt;
Added a new method addLOBReference to make an entry in new&lt;br/&gt;
 hash map.&lt;br/&gt;
Modified clearLOBMapping to use lobRefrences to fetch and invoke free on lob objects instead of lobHashMap.&lt;/p&gt;

&lt;p&gt;java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java&lt;br/&gt;
java/engine/org/apache/derby/impl/jdbc/EmbedClob.java&lt;/p&gt;

&lt;p&gt;Modified constructs to call connection.lobRefrences instead of conn.addLOBMapping.&lt;br/&gt;
Modified getLocater method to check if the locater value is non zero &lt;br/&gt;
before returning and if its zero calling conn.addLOBMapping to make &lt;br/&gt;
entry of lob objects and getting locater value. &lt;br/&gt;
Calling removeLOBMapping in free method.&lt;/p&gt;


&lt;p&gt;Cleanup of temporary file is already being taken care by the finalizer of &lt;br/&gt;
LOBStreamControl so I haven&apos;t added any new cleanup code for &lt;br/&gt;
finalizer.&lt;/p&gt;

&lt;p&gt;lang and jdbcapi junit tests running clean with this patch applied. I am running rest of the test suite and will update the results of the same.&lt;/p&gt;</comment>
                            <comment id="12585299" author="kristwaa" created="Thu, 3 Apr 2008 22:43:23 +0100"  >&lt;p&gt;I haven&apos;t validated the approach, but it seems reasonable. I applied the patch and compiled Derby.&lt;/p&gt;

&lt;p&gt;Some &lt;b&gt;very minor&lt;/b&gt; things you can consider changing:&lt;br/&gt;
 1) Typos: &quot;refrences&quot; -&amp;gt; &quot;references&quot; (5 occurrences)&lt;br/&gt;
 2) Use of a space between the method call / declaration and the following parenthesis is not consistent.&lt;br/&gt;
 3) Trailing whitespace at diff lines 28, 107 and 148.&lt;br/&gt;
 4) You could change the comment for the weak hash map to JavaDoc.&lt;/p&gt;

&lt;p&gt;Nice and small change &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Is this the final patch, or are the more coming up?&lt;/p&gt;</comment>
                            <comment id="12585440" author="anurag" created="Fri, 4 Apr 2008 08:52:21 +0100"  >&lt;p&gt;Thanks Kristian for looking at the patch. &lt;br/&gt;
I will make the changes you have suggested and upload the patch.&lt;br/&gt;
I am not planing for any more version of this patch (except for review changes.)&lt;/p&gt;</comment>
                            <comment id="12585449" author="anurag" created="Fri, 4 Apr 2008 09:58:03 +0100"  >&lt;p&gt;in derby-3354_v2.diff I have fixed the issues Kristian had pointed out.&lt;/p&gt;

&lt;p&gt;junit suites runs without any failure wit this patch.&lt;/p&gt;</comment>
                            <comment id="12585477" author="oysteing" created="Fri, 4 Apr 2008 11:17:47 +0100"  >&lt;p&gt;Thanks for the patch Anurag. Comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I guess you need to do removeLOBMapping in EmbedBlob#free too.&lt;/li&gt;
	&lt;li&gt;Any resaon to keep references for already freed objects around until end of transaction?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12585483" author="anurag" created="Fri, 4 Apr 2008 11:36:53 +0100"  >&lt;p&gt;Thanks Oystein for pointing out. I missed it, I will upload the patch after adding this.&lt;/p&gt;</comment>
                            <comment id="12585491" author="anurag" created="Fri, 4 Apr 2008 11:59:15 +0100"  >&lt;p&gt;Added localConn.removeLOBMapping in Blob.free&lt;br/&gt;
BlobClob4BlobTest runs fine with this change. I am &lt;br/&gt;
running suites.All now.&lt;/p&gt;</comment>
                            <comment id="12585531" author="oysteing" created="Fri, 4 Apr 2008 14:51:38 +0100"  >&lt;p&gt;Is the removeLOBMapping put in the right plcae?&lt;br/&gt;
Don&apos;t you have to do it regardless of whether it is materialized or not?&lt;br/&gt;
Maybe it should have been put in a finally block like for EmbedClob?  (Ref.  Kathey&apos;s comment on my initial patch)&lt;/p&gt;</comment>
                            <comment id="12585580" author="anurag" created="Fri, 4 Apr 2008 16:20:35 +0100"  >&lt;p&gt;Putting remove mapping in else was a mistake. Sorry about that.&lt;br/&gt;
I have moved it above other cleanup operation so that hash table is &lt;br/&gt;
cleared irrespective of the result of other clean up.&lt;/p&gt;</comment>
                            <comment id="12585625" author="oysteing" created="Fri, 4 Apr 2008 17:39:55 +0100"  >&lt;p&gt;Thanks, for the updates, Anurag&lt;br/&gt;
Patch v4 committed at revision 644764.&lt;/p&gt;</comment>
                            <comment id="12585633" author="oysteing" created="Fri, 4 Apr 2008 17:51:01 +0100"  >&lt;p&gt;It would be good if a test code be made based on the program that reproduced this error.&lt;/p&gt;</comment>
                            <comment id="12585762" author="oysteing" created="Fri, 4 Apr 2008 21:58:24 +0100"  >&lt;p&gt;Fix merged to 10.4 branch at revision 644916.&lt;br/&gt;
I am not setting this to resolve yet, since I think a test case for this should be added to the test suite.&lt;/p&gt;</comment>
                            <comment id="12591832" author="kmarsden" created="Wed, 23 Apr 2008 23:28:01 +0100"  >&lt;p&gt;I was thinking about whether to close this issue. Is there still a regression test coming?&lt;/p&gt;</comment>
                            <comment id="12592862" author="kmarsden" created="Mon, 28 Apr 2008 19:19:32 +0100"  >&lt;p&gt;Going ahead and closing this issue. It would be good to have a regression test though.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12374213" name="LocLeak.java" size="1469" author="kmarsden" created="Mon, 28 Jan 2008 19:53:24 +0000"/>
                            <attachment id="12375359" name="derby-3354.diff" size="949" author="oysteing" created="Tue, 12 Feb 2008 14:03:32 +0000"/>
                            <attachment id="12379121" name="derby-3354_preview.diff" size="3370" author="anurag" created="Wed, 2 Apr 2008 12:41:13 +0100"/>
                            <attachment id="12379314" name="derby-3354_v1.diff" size="4940" author="anurag" created="Thu, 3 Apr 2008 21:53:27 +0100"/>
                            <attachment id="12379368" name="derby-3354_v2.diff" size="4974" author="anurag" created="Fri, 4 Apr 2008 09:58:03 +0100"/>
                            <attachment id="12379376" name="derby-3354_v3.diff" size="5236" author="anurag" created="Fri, 4 Apr 2008 11:59:15 +0100"/>
                            <attachment id="12379404" name="derby-3354_v4.diff" size="5350" author="anurag" created="Fri, 4 Apr 2008 16:20:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Jan 2008 14:54:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23590</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0v07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38841</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>