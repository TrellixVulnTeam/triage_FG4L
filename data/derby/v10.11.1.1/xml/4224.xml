<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4224/DERBY-4224.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4224] Commit after setAsciiStream() makes execution fail with the client driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4224</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Got below error message when running a JDBC prolgram with derby. I use Apache Derby Network Server - 10.4.2.0 - (689064). The same program works fine with another version Apache Derby Network Server - 10.2.2.0 - (485682). It looks like there is a regression between the two versions.&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob&apos;s transaction has been committed or rolled back.&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.Lob.checkValidity(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.Clob.length(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.writeExecute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.writeExecute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeX(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at DerbyTest.test(DerbyTest.java:36)&lt;br/&gt;
	at DerbyTest.main(DerbyTest.java:12)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob&apos;s transaction has been committed or rolled back.&lt;br/&gt;
	... 12 more&lt;/p&gt;

&lt;p&gt;Below is the test program I used.&lt;/p&gt;

&lt;p&gt;import java.io.ByteArrayInputStream;&lt;br/&gt;
import java.io.IOException;&lt;br/&gt;
import java.io.InputStream;&lt;br/&gt;
import java.sql.Connection;&lt;br/&gt;
import java.sql.DriverManager;&lt;br/&gt;
import java.sql.PreparedStatement;&lt;br/&gt;
import java.sql.SQLException;&lt;br/&gt;
import java.sql.Statement;&lt;/p&gt;

&lt;p&gt;public class DerbyTest {&lt;br/&gt;
    public static void main(String[] args) throws SQLException, IOException &lt;/p&gt;
{
        new DerbyTest().test();
    }

&lt;p&gt;    private void test() throws SQLException, IOException {&lt;br/&gt;
        Connection conn = null;&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            conn = getConnection();
            Statement stmt = conn.createStatement();
            dropTable(&quot;test1&quot;);
            dropTable(&quot;test2&quot;);
            String createStr1 = &quot;CREATE TABLE test1 (col0 VARCHAR(8000))&quot;;
            String createStr2 = &quot;CREATE TABLE test2 (col0 VARCHAR(8000))&quot;;
            stmt.executeUpdate(createStr1);
            stmt.executeUpdate(createStr2);
            stmt.close();
            
            PreparedStatement pstmt1 = conn.prepareStatement(&quot;INSERT INTO test1 VALUES (?)&quot;);
            PreparedStatement pstmt2 = conn.prepareStatement(&quot;INSERT INTO test1 VALUES (?)&quot;);
            InputStream in1 = new ByteArrayInputStream(&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;.getBytes());
            InputStream in2 = new ByteArrayInputStream(&quot;9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA&quot;.getBytes());
            pstmt1.setAsciiStream(1, in1, in1.available());
            pstmt2.setAsciiStream(1, in2, in2.available());
            pstmt1.execute();
            pstmt2.execute();

            pstmt1.close();
            pstmt2.close();
            System.out.println(&quot;Successful&quot;);

        }
&lt;p&gt; finally &lt;/p&gt;
{
            if (conn != null)
                conn.close();
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    private Connection getDriverConnection() throws SQLException &lt;/p&gt;
{
        String connectionURL = &quot;jdbc:derby://localhost:1527/testdb;user=app;password=derby;create=true&quot;;
        return DriverManager.getConnection(connectionURL);
    }

&lt;p&gt;    private Connection getConnection() throws SQLException &lt;/p&gt;
{
        return getDriverConnection();
    }

&lt;p&gt;    public void dropTable(String tableName) throws SQLException {&lt;br/&gt;
		Connection conn = getConnection();&lt;br/&gt;
		Statement stmt = conn.createStatement();&lt;br/&gt;
		try &lt;/p&gt;
{
			stmt.executeUpdate(&quot;DROP TABLE &quot; + tableName);
		}
&lt;p&gt; catch (SQLException sqle) &lt;/p&gt;
{
			System.out.println(&quot;Error occured when drop table: &quot; + sqle.getMessage());
		}
&lt;p&gt; finally {&lt;br/&gt;
			if (stmt != null) &lt;/p&gt;
{
				stmt.close();
			}
&lt;p&gt;			if (conn != null) &lt;/p&gt;
{
				conn.close();
			}
&lt;p&gt;		}&lt;br/&gt;
	}&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment></environment>
        <key id="12425178">DERBY-4224</key>
            <summary>Commit after setAsciiStream() makes execution fail with the client driver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="simon.meng">Simon Meng</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 May 2009 07:59:16 +0100</created>
                <updated>Fri, 21 Jan 2011 17:52:25 +0000</updated>
                            <resolved>Thu, 23 Jul 2009 13:56:36 +0100</resolved>
                                    <version>10.4.2.0</version>
                                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.3.0</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12708360" author="knutanders" created="Tue, 12 May 2009 09:08:45 +0100"  >&lt;p&gt;You may have come across one of the intentional changes in the large object support in Derby 10.3. For more details, see this section of the release notes for Derby 10.3.1.4: &lt;a href=&quot;http://svn.apache.org/viewvc/db/derby/code/tags/10.3.1.4/RELEASE-NOTES.html?view=co#Note%20for%20DERBY-208&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/db/derby/code/tags/10.3.1.4/RELEASE-NOTES.html?view=co#Note%20for%20DERBY-208&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12708364" author="simon.meng" created="Tue, 12 May 2009 09:35:48 +0100"  >&lt;p&gt;Thank you for quick response.&lt;br/&gt;
I read the document you provided. But I don&apos;t think my test program is same as the case described in the release notes. In my test case, execute one PreparedStatement caused another PreparedStatement can&apos;t work. The two PreparedDtatements use different Streams. They do not reference same Clob/Blob object.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Simon&lt;/p&gt;
</comment>
                            <comment id="12708376" author="knutanders" created="Tue, 12 May 2009 10:36:44 +0100"  >&lt;p&gt;The reason why the execution of the first statement makes the second&lt;br/&gt;
statement fail, is that the two statements execute in the same&lt;br/&gt;
connection and auto-commit is enabled.&lt;/p&gt;

&lt;p&gt;So I think this is what happens:&lt;/p&gt;

&lt;p&gt;1) pstmt1.setAsciiStream(1, in1, in1.available());&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;An internal CLOB object is created for pstmt1&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2) pstmt2.setAsciiStream(1, in2, in2.available());&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;An internal CLOB object is created for pstmt2&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3) pstmt1.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;pstmt1 reads data from its internal CLOB object&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The connection is auto-committed&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The commit frees all CLOBs associated with the transaction,&lt;br/&gt;
  including pstmt2&apos;s internal CLOB, since the two statements are&lt;br/&gt;
  created from the same connection object&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4) pstmt2.execute();&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;pstmt2 attempts to read its internal CLOB object, but it&apos;s not&lt;br/&gt;
  available since the transaction has been committed, and it fails&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;However, your program doesn&apos;t actually use CLOBs (the column type is&lt;br/&gt;
VARCHAR(9000)), so I&apos;m not sure if the LOB changes in Derby 10.3&lt;br/&gt;
actually intended to break your program. I think it would be a good&lt;br/&gt;
improvement if we could make setAsciiStream (and the other set*Stream&lt;br/&gt;
methods) detect that the parameter is a non-LOB type and materialize&lt;br/&gt;
the stream. Then setAsciiStream() would work more like setString() in&lt;br/&gt;
your program.&lt;/p&gt;


&lt;p&gt;In the example program, there are some simple workarounds:&lt;/p&gt;

&lt;p&gt;a) Change the order of the four lines mentioned above from 1,2,3,4 to&lt;br/&gt;
1,3,2,4. Then there won&apos;t be a commit between pstmt2.setAsciiStream()&lt;br/&gt;
and pstmt2.execute().&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;b) Turn off auto-commit and issue explicit calls to&lt;br/&gt;
Connection.commit(). Make sure that you don&apos;t commit between calling&lt;br/&gt;
pstmt2.setAsciiStream() and pstmt2.execute().&lt;/p&gt;</comment>
                            <comment id="12708382" author="knutanders" created="Tue, 12 May 2009 11:01:05 +0100"  >&lt;p&gt;Updating the summary with a more accurate description of the problem.&lt;/p&gt;

&lt;p&gt;Also flagging this as an embedded/client difference, since the example program appears to work fine with the embedded driver.&lt;/p&gt;</comment>
                            <comment id="12708723" author="simon.meng" created="Wed, 13 May 2009 03:11:45 +0100"  >&lt;p&gt;Your explanation is reasonable. Hope derby can provide an improvement for stream operation.&lt;/p&gt;
</comment>
                            <comment id="12727082" author="dagw" created="Fri, 3 Jul 2009 19:28:57 +0100"  >&lt;p&gt;Triaged for 10.5.2,  &quot;repro attached&quot; and setting &quot;normal&quot; urgency.&lt;/p&gt;

&lt;p&gt;Should we change this issue to an &quot;improvement&quot;, Knut?&lt;/p&gt;
</comment>
                            <comment id="12727095" author="knutanders" created="Fri, 3 Jul 2009 19:57:39 +0100"  >&lt;p&gt;Since this seems to be an unintended side-effect of the LOB changes in 10.3 (note that the data type is VARCHAR, so it shouldn&apos;t have been affected) and a regression, I&apos;m leaning towards keeping the current classification as a bug.&lt;/p&gt;</comment>
                            <comment id="12727465" author="dagw" created="Mon, 6 Jul 2009 11:40:17 +0100"  >&lt;p&gt;Right, makes sense. Thanks, Knut.&lt;/p&gt;</comment>
                            <comment id="12732598" author="kmarsden" created="Fri, 17 Jul 2009 17:48:56 +0100"  >&lt;p&gt;This issue was introduced with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3574&quot; title=&quot;With client, attempting to get the lob length after commit  or connection close if there  was a call to length() before commit does not throw an exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3574&quot;&gt;&lt;del&gt;DERBY-3574&lt;/del&gt;&lt;/a&gt;. Special handling will be needed when client side lobs are used for setXXXStream parameters.&lt;/p&gt;</comment>
                            <comment id="12734586" author="kmarsden" created="Thu, 23 Jul 2009 13:56:36 +0100"  >&lt;p&gt;This was fixed with  the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4312&quot; title=&quot;SQLException XJ215 on insert  with setCharacterStream() and autocommit off in mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4312&quot;&gt;&lt;del&gt;DERBY-4312&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12430773">DERBY-4312</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12392468">DERBY-3574</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10367"><![CDATA[Deviation from standard]]></customfieldvalue>
    <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 May 2009 08:08:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24112</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0l3j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37236</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>