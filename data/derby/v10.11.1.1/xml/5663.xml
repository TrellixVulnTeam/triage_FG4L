<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5663/DERBY-5663.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5663] Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5663</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby has a large data suite which runs LobLimitsTest with small data size, large data size and with embedded and network server configurations. The large data suite is run as follows&lt;br/&gt;
time java  -Dderby.tests.trace=true -Dderby.infolog.append=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.largedata._Suite &amp;gt; runall.out 2&amp;gt;&amp;amp;1&lt;/p&gt;

&lt;p&gt;I made a simple change to the suite to log statement text as shown in the attached patch(DERBY5663_patch1.txt). This causes the large data suite to run into NPE (NPE can be seen in runall.out) as shown below. Not sure what I am doing wrong while trying to set the property, which results in NPE.&lt;br/&gt;
.&lt;br/&gt;
(emb)largedata.Derby5624Test.testDERBY_5624 used 411473 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_01_Blob used 1555 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 42 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_03_Clob1 used 1436 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_04_Clob2 used 1707 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 967 ms E.&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_01_Blob used 2929139 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_02_BlobNegative used 154 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_03_Clob1 used 2854121 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_04_Clob2 used 656137 ms .&lt;br/&gt;
(emb)largedata.LobLimitsTest.test_05_ClobNegative used 331288 ms EF&lt;br/&gt;
Time: 7,589.168&lt;br/&gt;
There were 2 errors:&lt;br/&gt;
1) LobLimitsTestjava.lang.NullPointerException&lt;br/&gt;
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setProperties(SystemPropertyTestSetup.java:116)&lt;br/&gt;
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp(SystemPropertyTestSetup.java:87)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
2) LobLimitsTestjava.sql.SQLNonTransientConnectionException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)&lt;br/&gt;
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:322)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:297)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1633)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)&lt;br/&gt;
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:104)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager&lt;br/&gt;
	at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(NetConnection.java:220)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection40.&amp;lt;init&amp;gt;(NetConnection40.java:74)&lt;br/&gt;
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269)&lt;br/&gt;
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)&lt;br/&gt;
	... 43 more&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) LobLimitsTestjunit.framework.ComparisonFailure: Engine shutdown expected:&amp;lt;XJ015&amp;gt; but was:&amp;lt;08001&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:790)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1751)&lt;br/&gt;
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.tearDown(SystemPropertyTestSetup.java:108)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
Caused by: java.sql.SQLException: No suitable driver&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:330)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:297)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:163)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:140)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1748)&lt;br/&gt;
	... 31 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 11,  Failures: 1,  Errors: 2&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12546940">DERBY-5663</key>
            <summary>Getting NPE when trying to set derby.language.logStatementText property to true inside a junit suite.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Sun, 18 Mar 2012 04:45:11 +0000</created>
                <updated>Wed, 3 Sep 2014 09:31:35 +0100</updated>
                            <resolved>Tue, 18 Sep 2012 16:06:48 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13232800" author="mamtas" created="Mon, 19 Mar 2012 18:27:13 +0000"  >&lt;p&gt;The NPE seems to happen after the last fixture of the previous suite is finished and we are starting the new suite.&lt;/p&gt;</comment>
                            <comment id="13232902" author="kmarsden" created="Mon, 19 Mar 2012 21:02:03 +0000"  >&lt;p&gt;Just glancing at the code, I wonder if you have gotten into a situation where the SystemPropertyTest decorator instance is somehow getting run twice.  It may be related to the order of decorators.  I am curious though what happens if you comment out this line:&lt;br/&gt;
   // newValues = null;&lt;/p&gt;

&lt;p&gt;In the tearDown() method of SystemPropertyTestSetup.&lt;/p&gt;
</comment>
                            <comment id="13239106" author="mamtas" created="Tue, 27 Mar 2012 02:36:29 +0100"  >&lt;p&gt;Kathey, I made the code change suggested by you but it still results into NPE. &lt;/p&gt;

&lt;p&gt;I looked at the line of the code(SystemPropertyTestSetup.tearDown()) where NPE is coming and it is as follows&lt;br/&gt;
       		if (oldValues.getProperty(key) == null)&lt;/p&gt;

&lt;p&gt;oldValues is null which results into NPE. This happens because I think we have set oldValues = null; during the previous instance of the decorator. &lt;/p&gt;

&lt;p&gt;I am going to change oldValues = null; to oldValues = new Properties(); and see how that goes(I will leave the comment around newValues = null; )&lt;/p&gt;
</comment>
                            <comment id="13239111" author="mamtas" created="Tue, 27 Mar 2012 02:43:41 +0100"  >&lt;p&gt;I ran large data suite with following changes in SystemPropertyTestSetup.tearDown()&lt;br/&gt;
&amp;#8212; java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java    (revision 1305533)&lt;br/&gt;
+++ java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java    (working copy)&lt;br/&gt;
@@ -106,8 +106,8 @@&lt;br/&gt;
        // shutdown engine to restore any static properties&lt;br/&gt;
        if (staticProperties)&lt;br/&gt;
                TestConfiguration.getCurrent().shutdownEngine();&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;newValues = null;&lt;/li&gt;
	&lt;li&gt;oldValues = null;&lt;br/&gt;
+//        newValues = null;&lt;br/&gt;
+        oldValues = new Properties();&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I don&apos;t get NPE anymore but I still get following failure/error while running large data suite with SystemPropertyTestSetup &lt;br/&gt;
1) LobLimitsTestjava.sql.SQLNonTransientConnectionException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)&lt;br/&gt;
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:166)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:322)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:297)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1633)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)&lt;br/&gt;
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:104)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08006, SQLERRMC: org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager&lt;br/&gt;
	at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2125)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:538)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:431)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:294)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:121)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:826)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:762)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:591)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:406)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection.&amp;lt;init&amp;gt;(NetConnection.java:220)&lt;br/&gt;
	at org.apache.derby.client.net.NetConnection40.&amp;lt;init&amp;gt;(NetConnection40.java:74)&lt;br/&gt;
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:269)&lt;br/&gt;
	at org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:157)&lt;br/&gt;
	... 36 more&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) LobLimitsTestjunit.framework.ComparisonFailure: Engine shutdown expected:&amp;lt;XJ015&amp;gt; but was:&amp;lt;08001&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:790)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1751)&lt;br/&gt;
	at org.apache.derbyTesting.junit.SystemPropertyTestSetup.tearDown(SystemPropertyTestSetup.java:108)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
Caused by: java.sql.SQLException: No suitable driver&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:330)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:297)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:163)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:140)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1748)&lt;br/&gt;
	... 24 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;/p&gt;</comment>
                            <comment id="13240659" author="mamtas" created="Wed, 28 Mar 2012 20:37:14 +0100"  >&lt;p&gt;I found that I was using SystemPropertyTestSetup decorator such that it would shutdown the engine before setting the passed properties. I do not need the engine to be shutdown and hence changed the invocation of SystemPropertyTestSetup from &lt;br/&gt;
suite = new SystemPropertyTestSetup(suite,sysprops,true);&lt;br/&gt;
to &lt;br/&gt;
suite = new SystemPropertyTestSetup(suite,sysprops);&lt;/p&gt;

&lt;p&gt;After this change, I do not get following failure&lt;br/&gt;
LobLimitsTestjunit.framework.ComparisonFailure: Engine shutdown expected:&amp;lt;XJ015&amp;gt; but was:&amp;lt;08001&amp;gt; &lt;/p&gt;</comment>
                            <comment id="13240696" author="mamtas" created="Wed, 28 Mar 2012 21:25:40 +0100"  >&lt;p&gt;Attaching patch DERBY5663_patch2.txt for this issue. The patch touches following 2 files.&lt;br/&gt;
$ svn stat -q&lt;br/&gt;
M       java\testing\org\apache\derbyTesting\functionTests\tests\largedata\LobLimitsTest.java&lt;br/&gt;
M       java\testing\org\apache\derbyTesting\junit\SystemPropertyTestSetup.java&lt;/p&gt;

&lt;p&gt;Changes in LobLimitsTest.java now adds properties related to lock timeouts. In case the test ran into lock timeouts as noted by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5368&quot; title=&quot;Convert tools/ij2.sql to junit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5368&quot;&gt;&lt;del&gt;DERBY-5368&lt;/del&gt;&lt;/a&gt;, we should have relevant information in derby.log to debug the problem.&lt;/p&gt;

&lt;p&gt;Changes in SystemPropertyTestSetup.java. &lt;br/&gt;
Two of the variables defined in this class are&lt;br/&gt;
	protected Properties newValues;&lt;br/&gt;
	private Properties oldValues;&lt;br/&gt;
newValues are the new properties requested by the junit suite through the SystemPropertyTestSetup decorator. These values become effective in SystemPropertyTestSetup.setUp() method.&lt;br/&gt;
oldValues are the original properties which we want to revert back to at the time of teardown of this decorator. &lt;/p&gt;

&lt;p&gt;In trunk, both oldValues and newValues get set to null at the end of the tearDown which causes two problems&lt;br/&gt;
1)npe in following piece of code in SystemPropertyTestSetup.tearDown()&lt;br/&gt;
       		if (oldValues.getProperty(key) == null)&lt;br/&gt;
Solution to npe is that rather than nulling oldValues, we should initialize it to empty properties object(similar to what happens in the decorator constructor). To fix npe, in SystemPropertyTestSetup.tearDown(), I have replaced&lt;br/&gt;
        oldValues = null;&lt;br/&gt;
with&lt;br/&gt;
        oldValues = new Properties();&lt;br/&gt;
2)new properties not getting reused when the same decorator instance is used for another suite. It is possible to use the same instance of SystemPropertyTestSetup for multiple runs of a suite. &lt;br/&gt;
LobLimitsTest in the patch uses SystemPropertyTestSetup decorator to set locking related properties as shown below(attached patch shows these changes to LobLimitsTest)&lt;br/&gt;
    static Test baseSuite(final int biggestSize, final int bigSize) {&lt;br/&gt;
    	//Run the suite with following properties in case we run into lock&lt;br/&gt;
    	// time out issues. It will help debug the problem if timeouts occur.&lt;br/&gt;
        Properties sysprops = new Properties();&lt;br/&gt;
        sysprops.setProperty(&quot;derby.locks.deadlockTrace&quot;, &quot;true&quot;);&lt;br/&gt;
        sysprops.setProperty(&quot;derby.locks.monitor&quot;, &quot;true&quot;);&lt;br/&gt;
        // Some of the test cases depend on certain other test cases to run&lt;br/&gt;
        // first, so force the test cases to run in lexicographical order.&lt;br/&gt;
        Test suite = new CleanDatabaseTestSetup(&lt;br/&gt;
                TestConfiguration.orderedSuite(LobLimitsTest.class)) {&lt;br/&gt;
            protected void decorateSQL(Statement s)&lt;br/&gt;
                           throws SQLException &lt;/p&gt;
{
                setupTables(s, biggestSize, bigSize);
            }
&lt;p&gt;        };&lt;br/&gt;
        suite = new SystemPropertyTestSetup(suite,sysprops);//,true);&lt;/p&gt;

&lt;p&gt;        return new SupportFilesSetup(suite);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;Next, LobLimitsTest gets called by tests.largedata._Suite 4 times, one time each for different large object sizes and for embedded and network server runs. Nulling of newValues in SystemPropertyTestSetup.tearDown causes the subsequent use of SystemPropertyTestSetup instance to loose the properties requested by LobLimitsTest. In order to fix this, we should not null the newValues properties in SystemPropertyTestSetup.tearDown()&lt;/p&gt;

&lt;p&gt;I will run the entire junit suite one time to make sure nothing has broken as a result of these changes. Thanks&lt;/p&gt;</comment>
                            <comment id="13240748" author="knutanders" created="Wed, 28 Mar 2012 22:27:28 +0100"  >&lt;p&gt;I&apos;m not so comfortable with the suggested changes in SystemPropertyTestSetup, as they look more like a workaround for a bug than a fix for the root cause. The changes will prevent freeing the contents of newValues for all tests that use SystemPropertyTestSetup, which will probably increase the memory requirements for suites.All.&lt;/p&gt;

&lt;p&gt;Did you get any closer to finding out why it would end up running setUp() after tearDown()?&lt;/p&gt;

&lt;p&gt;I didn&apos;t quite get the part about largedata._Suite calling LobLimitTest four times, and that tearDown() in one test would null out the references for the next test. There should be one instance of SystemPropertyTestSetup per instance of LobLimitTest, and one instance of SystemPropertyTestSetup should not null out the fields in another instance, or am I misunderstanding?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;comment edited: added missing not in the last sentence&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13241347" author="mamtas" created="Thu, 29 Mar 2012 17:11:27 +0100"  >&lt;p&gt;Hi Knut, first of all, thanks for looking at this jira. &lt;/p&gt;

&lt;p&gt;I am debugging further to get the exact details as to why setUp() is getting called after tearDown() but I believe it is because the same instance of SystemPropertyTestSetup is getting twice.&lt;/p&gt;</comment>
                            <comment id="13241927" author="mamtas" created="Fri, 30 Mar 2012 00:32:06 +0100"  >&lt;p&gt;Let me start first by just going over the large data suite at the top level.&lt;/p&gt;

&lt;p&gt;tests.largedata._Suite has following&lt;br/&gt;
    public static Test suite() &lt;/p&gt;
{
        TestSuite suite = new TestSuite(&quot;largedata suite&quot;);

        // DERBY-5624, currently this runs out of file descriptors on unix
        // systems with 1024 limit per user.  Setting to run only on windows
        // until solution for unix is found.
        if (isWindowsPlatform())
            suite.addTest(Derby5624Test.suite());

        suite.addTest(LobLimitsLiteTest.suite());
        suite.addTest(LobLimitsTest.suite());
        suite.addTest(LobLimitsClientTest.suite());
        return suite;
    }

&lt;p&gt;For the sake of this jira, we can ignore Derby5624Test.suite since this suite has test fixture of it&apos;s own.&lt;/p&gt;

&lt;p&gt;The next three suites are &lt;br/&gt;
1)LobLimitsLiteTest&lt;br/&gt;
2)LobLimitsTest and&lt;br/&gt;
3)LobLimitsClientTest&lt;/p&gt;

&lt;p&gt;All of the three suites above end up calling tests.LobLimitsTest suite.&lt;/p&gt;

&lt;p&gt;LobLimitsLiteTest specifically calls LobLimitsTest suite twice(once for embedded and once for network server) as shown below&lt;br/&gt;
The suite() method in LobLimitsLiteTest is as follows&lt;br/&gt;
    public static Test suite() &lt;/p&gt;
{
        Test test = LobLimitsTest.baseSuite(_1MB, _100K);
        TestSuite suite = new TestSuite(&quot;LobLimitsLiteTest&quot;);
        suite.addTest(test);
        suite.addTest(TestConfiguration.clientServerDecorator(test));
        return suite;
        
    }

&lt;p&gt;As we can see, we create only one instance of LobLimitesTest suite and run that once in embedded and next in client server mode. Since we are using the same instance of LobLimitesTest suite twice, in turn we are using the same SystemPropertyTestSetup instance twice. &lt;/p&gt;

&lt;p&gt;As for the next 2 suites in tests.largedata._Suite(namely LobLimitsTest and LobLimitsClientTest), they create their own LobLimitsTest suite and hence there is no reuse of the same instance of SystemPropertyTestSetup.&lt;/p&gt;

&lt;p&gt;I verified this by putting println in SystemPropertyTestSetup&apos;s constructor and found that the println gets printed only 3 times(rather than 4 times which is how many times the LobLimitesTest suite is invoked). &lt;br/&gt;
		System.out.println(&quot;in constructor &quot; + hashCode());&lt;br/&gt;
I also put a println in SystemPropertyTestSetup.setUP() and see that it got called 4 times. But 2 of those 4 times printed the same hashCode() indicating we are dealing with the same instance of SystemPropertyTestSetup.&lt;br/&gt;
		System.out.println(&quot;in setUp &quot; + hashCode());&lt;/p&gt;

&lt;p&gt;I modified LobLimitsLiteTest.suite() just for testing purposes to create a new suite LobLimitsLiteTest for client server run and after that change, I see the SystemPropertyTestSetup&apos;s constructor getting called 4 times. With this temporary change in my codeline with each lob limits test using it&apos;s own instance, it doesn&apos;t matter if we null out oldValue and newValues in SystemPropertyTestSetup.tearDown() method since there is no resue of the same instance of SystemPropertyTestSetup&lt;br/&gt;
    public static Test suite() &lt;/p&gt;
{
        Test test = LobLimitsTest.baseSuite(_1MB, _100K);
        TestSuite suite = new TestSuite(&quot;LobLimitsLiteTest&quot;);
        suite.addTest(test);
        Test test1 = LobLimitsTest.baseSuite(_1MB, _100K);
        suite.addTest(TestConfiguration.clientServerDecorator(test1));
        return suite;
        
    }</comment>
                            <comment id="13242440" author="kmarsden" created="Fri, 30 Mar 2012 16:31:40 +0100"  >&lt;p&gt;Thanks Mamta for explaining why the instance is used more than once.  I think from a practical perspective it is good to have it work both ways.&lt;/p&gt;

&lt;p&gt;Looking at SystemPropertyTestSetup, I think your change to remove the line setting newValues to null and inititializing odValues to new Properties() will work.  This will leave the instance in the correct state for the second iteration as the initialization where newValues has the new values that we want and oldValues is empty and ready to be populated when setProperties() is called by setup(). &lt;/p&gt;

&lt;p&gt;Perhaps a more intuitive fix would be to move the initialization of oldValues to setup() rather than the constructor  or tearDown() and add a comment there with the bug number, indicating oldValues needs to be initialized for each iteration if the instance is reused. &lt;/p&gt;

&lt;p&gt;Thanks for fixing this up!&lt;/p&gt;


</comment>
                            <comment id="13243875" author="knutanders" created="Sun, 1 Apr 2012 22:50:44 +0100"  >&lt;p&gt;Thanks for that explanation, Mamta. I agree with Kathey that it would be more intuitive to move the initialization to setUp(), and that would allow us to continue nulling out newValues and oldValues in tearDown() in order to free up memory when the test is done. Note that DatabasePropertyTestSetup uses the same pattern as SystemPropertyTestSetup and would probably need to be changed too, if we think reuse of tests/decorators is OK.&lt;/p&gt;</comment>
                            <comment id="13245422" author="mamtas" created="Tue, 3 Apr 2012 16:46:51 +0100"  >&lt;p&gt;Kathey and Knut, thanks for looking at the patch.&lt;/p&gt;

&lt;p&gt;1)I will remove nulling out of oldValues and nullValues from tearDown(). &lt;br/&gt;
2)I will also remove the intialization of oldValues to new Properties object from the constructor and move it to setUp(). &lt;/p&gt;

&lt;p&gt;Knut, we do not want to null newValues in tearDown because that will make us loose the new properties requested by the user when the same instance of SystemPropertyTestSetup gets used again. &lt;/p&gt;

&lt;p&gt;I will run the tests with all these changes.&lt;/p&gt;</comment>
                            <comment id="13447921" author="mamtas" created="Tue, 4 Sep 2012 19:42:51 +0100"  >&lt;p&gt;The changes went in as revision 1309244&lt;/p&gt;</comment>
                            <comment id="13453373" author="kmarsden" created="Tue, 11 Sep 2012 21:27:17 +0100"  >&lt;p&gt;Reopen for backport analysis. Temporarily assign to yourself if you backport and then reassign to Mamta before closing.&lt;/p&gt;</comment>
                            <comment id="13456198" author="mamtas" created="Fri, 14 Sep 2012 23:25:09 +0100"  >&lt;p&gt;I will look at backporting this&lt;/p&gt;</comment>
                            <comment id="13457117" author="mamtas" created="Mon, 17 Sep 2012 17:15:23 +0100"  >&lt;p&gt;Backported into 10.8.2.3 with revision 1386677&lt;/p&gt;</comment>
                            <comment id="13457362" author="mamtas" created="Mon, 17 Sep 2012 22:36:15 +0100"  >&lt;p&gt;Backported changes(without the test changes) into 10.7.1.4 with revision 1386854. The test changed(largedata/LobLimitsTest.java) does not exist in 10.7 and earlier releases&lt;/p&gt;</comment>
                            <comment id="13457549" author="mamtas" created="Tue, 18 Sep 2012 03:14:47 +0100"  >&lt;p&gt;Backported changes(without the test changes) into 10.6.2.3 with revision 1386967. The test changed(largedata/LobLimitsTest.java) does not exist in 10.7 and earlier releases &lt;/p&gt;</comment>
                            <comment id="13457876" author="mamtas" created="Tue, 18 Sep 2012 16:06:16 +0100"  >&lt;p&gt;Backported changes(without the test changes) into 10.5.3.2 with revision 1387211. The test changed(largedata/LobLimitsTest.java) does not exist in 10.7 and earlier releases&lt;/p&gt;</comment>
                            <comment id="13457879" author="mamtas" created="Tue, 18 Sep 2012 16:07:27 +0100"  >&lt;p&gt;I am not planning on backporting it any further&lt;/p&gt;</comment>
                            <comment id="14119601" author="knutanders" created="Wed, 3 Sep 2014 09:31:35 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12607119">DERBY-5923</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12518818" name="DERBY5663_patch1.txt" size="1646" author="mamtas" created="Sun, 18 Mar 2012 04:49:10 +0000"/>
                            <attachment id="12520305" name="DERBY5663_patch2.txt" size="2436" author="mamtas" created="Wed, 28 Mar 2012 21:25:40 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Mar 2012 21:02:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>232098</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09un:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35414</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>