<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:48:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2335/DERBY-2335.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2335] Compare character datatypes with different collation ordering.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2335</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The parent task &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt; will enable users to have a different collation order for user-defined character datatypes compared to UNICODE based collation, UCS_BASIC, used by system tables. This sub-task is added to handle the case where a comparison is made between character datatypes with different collation order. &lt;/p&gt;

&lt;p&gt;For instance &lt;br/&gt;
Let&apos;s say, a database is created to use a territory based collation for character types. And say there is a userSchema schema in that database which has a table tableInfo with column tablename defined as VARCHAR. This tableInfo.tablename will have territory based collation assoicated with it. And say this column is then compared with a VARCHAR column in SYS schema, then how will the comparison happen, since the 2 columns being compared have different collation associated with them? &lt;br/&gt;
select * from sys.systables and userSchema.tableInfo where systables.tablename = tableInfo,tablename &lt;/p&gt;

&lt;p&gt;Thanks to Rick for taking the time out on this issue. He had following suggestion&lt;br/&gt;
&amp;lt;/Rick comment start&amp;gt;&lt;br/&gt;
&quot;As I read part 2 of the SQL Standard, it looks like you need a CAST in order to compare 2 strings which have different collations bound to them. Both string operands must have the same collation--that is my reading of Syntax rule 3b in section 9.13. Sections 6.12 and 6.1 explain how to cast the operands so that you can compare them. I think you need to write an expression like this: &lt;/p&gt;

&lt;p&gt;   WHERE userStringCol = CAST ( systemStringCol AS VARCHAR COLLATE userStringColumnsCollation ) &lt;/p&gt;

&lt;p&gt;Here&apos;s an example I googled up: &lt;a href=&quot;http://docs.openlinksw.com/virtuoso/sqlrefDATATYPES.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.openlinksw.com/virtuoso/sqlrefDATATYPES.html&lt;/a&gt;. Hope this helps. &lt;br/&gt;
&amp;lt;/Rick comment end&amp;gt;&lt;/p&gt;

&lt;p&gt;When this task is taken up, it would be good to explore Rick&apos;s suggestion.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12362828">DERBY-2335</key>
            <summary>Compare character datatypes with different collation ordering.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12345445">DERBY-1478</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Feb 2007 20:22:52 +0000</created>
                <updated>Thu, 2 May 2013 03:29:07 +0100</updated>
                            <resolved>Tue, 3 Jul 2007 17:44:58 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12493965" author="mamtas" created="Mon, 7 May 2007 05:12:05 +0100"  >&lt;p&gt;Attaching patch(DERBY2335_correct_collation_for_constants_persistent_column_v1_diff.txt) which does couple of things&lt;br/&gt;
1)It puts the correct collation type for character constants and for persistent character columns. For character constants, the collation type will be the collation type of the schema in which the query is getting compiled. This happens in &lt;br/&gt;
CharConstantNode.bindExpression. The setting of collation type for the persistent columns happens in a constructor for the DataTypeDescriptor. This could be found in the patch which has changes for DataTypeDescriptor and TypeDescriptorImpl.&lt;br/&gt;
2)Collation related methods (like and stringCompare) on collation sensitive DVDs has been copied into WorkHorseForCollatorDatatypes. These methods get called by CollatorSQLxxx classes.&lt;br/&gt;
3)The final change went into CollationTest. The change now allows this test to test collations for Norway, English and Polish.&lt;br/&gt;
I will add more tests for these changes in a subsequent patch.&lt;/p&gt;</comment>
                            <comment id="12493966" author="mamtas" created="Mon, 7 May 2007 05:36:20 +0100"  >&lt;p&gt;Committed patch DERBY2335_correct_collation_for_constants_persistent_column_v1_diff.txt with revision 535738.&lt;/p&gt;</comment>
                            <comment id="12494573" author="mamtas" created="Wed, 9 May 2007 22:16:19 +0100"  >&lt;p&gt;Myrna noticed following javadoc warning&lt;/p&gt;

&lt;p&gt;I believe revision 535738 caused a number of javadoc warnings: &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLChar.java:145: warning - Tag @see: missing &apos;#&apos;: &quot;SQLChar.stringCompare(SQLChar, SQLChar)&quot; &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLChar.java:145: warning - Tag @see: can&apos;t find SQLChar.stringCompare(SQLChar, SQLChar) in org.apache.derby.iapi.types.CollatorSQLChar &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLClob.java:145: warning - Tag @see: missing &apos;#&apos;: &quot;SQLChar.stringCompare(SQLChar, SQLChar)&quot; &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLClob.java:145: warning - Tag @see: can&apos;t find SQLChar.stringCompare(SQLChar, SQLChar) in org.apache.derby.iapi.types.CollatorSQLClob &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLLongvarchar.java:145: warning - Tag @see: missing &apos;#&apos;: &quot;SQLChar.stringCompare(SQLChar, SQLChar)&quot; &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLLongvarchar.java:145: warning - Tag @see: can&apos;t find SQLChar.stringCompare(SQLChar, SQLChar) in org.apache.derby.iapi.types.CollatorSQLLongvarchar &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLVarchar.java:145: warning - Tag @see: missing &apos;#&apos;: &quot;SQLChar.stringCompare(SQLChar, SQLChar)&quot; &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\CollatorSQLVarchar.java:145: warning - Tag @see: can&apos;t find SQLChar.stringCompare(SQLChar, SQLChar) in org.apache.derby.iapi.types.CollatorSQLVarchar &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\WorkHorseForCollatorDatatypes.java:86: warning - Tag @see: missing &apos;#&apos;: &quot;SQLChar.stringCompare(SQLChar, SQLChar)&quot; &lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\iapi\types\WorkHorseForCollatorDatatypes.java:86: warning - Tag @see: can&apos;t find SQLChar.stringCompare(SQLChar, SQLChar) in org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes &lt;/p&gt;</comment>
                            <comment id="12494576" author="mamtas" created="Wed, 9 May 2007 22:28:46 +0100"  >&lt;p&gt;Committed patch DERBY2335_fix_stringCompare_Method_CollatorSQLxxx_classes_v1_diff.txt with revision 536661 and it has following commit comments&lt;/p&gt;

&lt;p&gt;&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2335&quot; title=&quot;Compare character datatypes with different collation ordering.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2335&quot;&gt;&lt;del&gt;DERBY-2335&lt;/del&gt;&lt;/a&gt; This commit adds some basics tests and fixes a bug that I came across while writing the tests. The problem is that SQLChar has a method called stringCompare(SQLChar, SQLChar). This method compares the 2 passed parameters. When I implemented this method for CollatorSQLxxx classes, I was making the assumption that first parameter SQLChar is same as the SQLChar object on which the method is getting called and hence I was ignoring the 1st parameter and comparing the object on which stringCompare is called with the 2nd paramter to stringCompare method. But that assumption is not correct. I discovered that when I wrote a test like following&lt;br/&gt;
select id, name from customer where &apos;a&apos;=&apos;b&apos; &lt;br/&gt;
The where clause for territory based collated db always returned true because of the bug/wrong assumption. This is because stringCompare was getting called with first parameter as SQLChar &apos;b&apos; and 2nd parameter as SQLChar &apos;a&apos; and &lt;br/&gt;
stringCompare was getting called off of the object for &apos;a&apos; and hence, at runtime the comparison was happening between 2 &apos;a&apos;s rather than &apos;a&apos; and &apos;b&apos;. In order to fix this, I am having stringCompare on ColatorSQLxxx methods use both the passed SQLChars to do the comparison rather than ignorning the first SQLChar(just like what we do for existing SQLChar classes). This fixes the problem.&lt;/p&gt;

&lt;p&gt;In addition, I have enabled the testing for territory based collated db in CollationTest added by Kathey (Thanks for starting this test off, Kathey). There are 3 databases with territory based collation, for Polish, Norway and English.&lt;/p&gt;

&lt;p&gt;And lastly, I have added 2 simple character constant tests for each of the 4 databases (3 territory based collated dbs and one default collation db). One of these 2 simple tests will give different results based on the collation used.&lt;br/&gt;
&quot;&lt;/p&gt;

&lt;p&gt;If anyone has any comments, please let me know.&lt;/p&gt;</comment>
                            <comment id="12494598" author="army" created="Thu, 10 May 2007 00:04:09 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;Thank you for your continued diligence with this work!&lt;/p&gt;

&lt;p&gt;I was inspired by the test cases that you just checked in so I played a little with collation sorting out of curiosity.  Things are looking good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;At one point it occurred to me try to create an XML column in a Polish database. The table creation was fine but when I tried to insert into the table, I got an error:&lt;/p&gt;

&lt;p&gt;ERROR XJ001: &amp;lt;polish-snipped&amp;gt; Java: &apos;org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info: java.lang.ClassCastException&apos;.&lt;/p&gt;

&lt;p&gt;I then deleted the database and started over, and I was able to insert without problem.  However, when I then created a table with a varchar column and tried to select from it with WHERE clause, I got the same error as above.&lt;/p&gt;

&lt;p&gt;So both statements worked fine in one scenario, but failed in another.  I&apos;m not entirely clear on what&apos;s going on here, but the order of the statements does matter. For example:&lt;/p&gt;

&lt;p&gt;Scenario 1: Insert into the XML table succeeds, then select with a WHERE clause fails.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;poldb;create=true;territory=pl;collation=TERRITORY_BASED&apos;;&lt;br/&gt;
ij&amp;gt; create table xt (x xml, id int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into xt values (xmlparse(document &apos;&amp;lt;my&amp;gt;Acorn&amp;lt;/my&amp;gt;&apos; preserve whitespace), 1);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; create table t1 (id int, vc varchar(20));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from t1 where vc &amp;lt; &apos;aacorn&apos;;&lt;br/&gt;
ERROR XJ001: &amp;lt;polish-snipped&amp;gt; Java: &apos;org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info: java.lang.ClassCastException&apos;.&lt;/p&gt;

&lt;p&gt;Scenario 2: Select with a WHERE clause succeeds, then insert into XML table fails.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;poldb;create=true;territory=pl;collation=TERRITORY_BASED&apos;;&lt;br/&gt;
ij&amp;gt; create table t1 (id int, vc varchar(20));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select * from t1 where vc &amp;lt; &apos;aacorn&apos;;&lt;br/&gt;
ID         |VC&lt;br/&gt;
--------------------------------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;br/&gt;
ij&amp;gt; create table xt (x xml, id int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into xt values (xmlparse(document &apos;&amp;lt;my&amp;gt;Acorn&amp;lt;/my&amp;gt;&apos; preserve whitespace), 1);&lt;br/&gt;
ERROR XJ001: &amp;lt;polish-snipped&amp;gt; Java: &apos;org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info: java.lang.ClassCastException&apos;.&lt;/p&gt;

&lt;p&gt;Note that shutting down the database and re-connecting does not help for either scenario:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;poldb;shutdown=true&apos;;&lt;br/&gt;
ij&amp;gt; disconnect all;&lt;br/&gt;
ij&amp;gt; connect &apos;poldb&apos;;&lt;br/&gt;
ij&amp;gt; insert into xt values (xmlparse(document &apos;&amp;lt;my&amp;gt;Acorn&amp;lt;/my&amp;gt;&apos; preserve whitespace), 1);&lt;br/&gt;
ERROR XJ001: &amp;lt;polish-snipped&amp;gt; Java: &apos;org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info: java.lang.ClassCastException&apos;.&lt;/p&gt;

&lt;p&gt;But exiting ij and then re-connecting from a new ij session does:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; exit;&lt;br/&gt;
java -Dij.protocol=jdbc:derby: org.apache.derby.tools.ij&lt;br/&gt;
ij version 10.3&lt;br/&gt;
ij&amp;gt; connect &apos;poldb&apos;;&lt;br/&gt;
ij&amp;gt; insert into xt values (xmlparse(document &apos;&amp;lt;my&amp;gt;Acorn&amp;lt;/my&amp;gt;&apos; preserve whitespace), 1);&lt;br/&gt;
1 row inserted/updated/deleted&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if this is a problem in language, store, or XML.  I&apos;m also not sure if this is just because collation work is still in progress--maybe this is something that will be addressed as part of upcoming changes?&lt;/p&gt;

&lt;p&gt;In any event, just thought I&apos;d bring it up since I noticed it.&lt;/p&gt;

&lt;p&gt;The full stack trace for the error is:&lt;/p&gt;

&lt;p&gt;2007-05-09 23:01:46.301 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 144), (SESSIONID = 0), (DATABASE = poldb), (DRDAID = null), Failed Statement is: select * from t1 where vc &amp;lt; &apos;aacorn&apos;&lt;br/&gt;
java.lang.ClassCastException: org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(CodeChunk.java:1007)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.CodeChunk.getVariableStackDelta(CodeChunk.java:1059)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.CodeChunk.stackWordDelta(CodeChunk.java:992)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.CodeChunk.findMaxStack(CodeChunk.java:954)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.CodeChunk.complete(CodeChunk.java:810)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.BCMethod.complete(BCMethod.java:241)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateQualMethod(BinaryRelationalOperatorNode.java:747)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.PredicateList.generateSingleQualifierCode(PredicateList.java:2817)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(PredicateList.java:3066)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(BaseJoinStrategy.java:121)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getScanArgs(NestedLoopJoinStrategy.java:248)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(FromBaseTable.java:3445)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(FromBaseTable.java:3135)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.FromBaseTable.generate(FromBaseTable.java:3062)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1351)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1351)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1302)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:564)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:347)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:447)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:742)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:567)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:516)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:330)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:531)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:376)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:271)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:215)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:71)&lt;/p&gt;</comment>
                            <comment id="12494635" author="mamtas" created="Thu, 10 May 2007 07:12:28 +0100"  >&lt;p&gt;Army, thanks for spending some time testing with XML. I spent couple hrs and unfortunately can&apos;t pinpoint right away what is causing this. I tried using -Dderby.debug.true=DumpClassFile but looks like if there is an error during the code generation and we don&apos;t generate any class for the problem query. It will be nice if there was an even partial dump of what ever code has been generated for the query even if it runs into problem because that would help with debugging. Oh well..&lt;/p&gt;

&lt;p&gt;I will put this on my todo list but in the meantime, if you/anyone find any more problems, do let me know.&lt;/p&gt;</comment>
                            <comment id="12494843" author="mamtas" created="Thu, 10 May 2007 22:22:45 +0100"  >&lt;p&gt;Just wanted to provide an update that I am able to reproduce the stack trace that Army ran into with following test case&lt;br/&gt;
create table localize1(nc10 char(10));&lt;br/&gt;
insert into localize1 values (&apos;a&apos;);&lt;br/&gt;
select nc10 from localize1;&lt;/p&gt;

&lt;p&gt;It looks like the combination of insert and select is causing this problem. I have a vague feeling that it has to do with code generation for collation sensitive characters but I don&apos;t know for sure. Will investigate more.&lt;/p&gt;</comment>
                            <comment id="12495179" author="mamtas" created="Fri, 11 May 2007 22:27:36 +0100"  >&lt;p&gt;Commited (revision 537296) the attached patch DERBY2335_More_tests_And_Fix_getNull_v1_diff.txt which addresses 3 issues and adds some tests&lt;br/&gt;
1)Easiest first, fixed the javadoc error in WorkHorseForCollatorDatatypes.java&lt;br/&gt;
2)CharConstantNode in it&apos;s bind method does the collation setting based on the compilation schema. But it didn&apos;t do the switching of it&apos;s value from SQLChar/SQLVarchar/SQLLongvarchar/SQLClob to CollatorSQLChar/CollatoSQLVarchar/CollatoSQLLongvarchar/CollatoSQLClob&lt;br/&gt;
if the collation type for it ends up being territory based. By default, the value associated with CharConstantNode is always UCS_BASIC collation. It should get switched to territory based and my fix in this class does that job.&lt;br/&gt;
3)DataTypeDesciptor.getNull value currently gets the DVD using typeId.getNull(). But we should check if we are dealing with territory based collation and if yes, then we should change the DVD type returned by typeId.getNull from&lt;br/&gt;
SQLChar/SQLVarchar/SQLLongvarchar/SQLClob to CollatorSQLChar/CollatoSQLVarchar/CollatoSQLLongvarchar/CollatoSQLClob. My change in DataTypeDescriptor.getNull does that job.&lt;br/&gt;
4)In addition, I have added tests in CollationTest class to do some persistent character columns testing. Some tests are commented out and will be added later.&lt;/p&gt;</comment>
                            <comment id="12495186" author="mikem" created="Fri, 11 May 2007 23:13:38 +0100"  >&lt;p&gt;Could you explain a little the EmbedResultSet.java change in change number 537296.&lt;/p&gt;</comment>
                            <comment id="12495192" author="mamtas" created="Fri, 11 May 2007 23:48:40 +0100"  >&lt;p&gt;The change in DataTypeDescriptor.getNull method now has it throw a StandardException. This exception should be handled by the callers of this method and that&apos;s what the change in EmbedResultSet.java is doing. Please let me know if you or anyone else have any further questions.&lt;/p&gt;</comment>
                            <comment id="12495197" author="djd" created="Sat, 12 May 2007 00:04:37 +0100"  >&lt;p&gt;Why would DataTypeDescriptor.getNull() ever throw an exception?&lt;/p&gt;</comment>
                            <comment id="12495200" author="mamtas" created="Sat, 12 May 2007 00:12:24 +0100"  >&lt;p&gt;That&apos;s because DataTypeDescriptor.getNull() has following call which throws an exception and it needs to be handled by DataTypeDescriptor.getNull() &lt;br/&gt;
ConnectionUtil.getCurrentLCC()&lt;/p&gt;</comment>
                            <comment id="12495203" author="djd" created="Sat, 12 May 2007 00:25:36 +0100"  >&lt;p&gt;That&apos;s a major change for that method, previously there was no requirement a current connection was on the stack and now there is.&lt;br/&gt;
The type system is meant to be somewhat standalone and not depend on other modules such as the language.&lt;/p&gt;

&lt;p&gt;I also see CharConstantNode calls ConnectionUtil.getCurrentLCC(), but there&apos;s no need to do that.&lt;br/&gt;
CharConstantNode (and every QueryTreeNode) has a getLanguageConnection() method that provides access to the current language connection.&lt;/p&gt;</comment>
                            <comment id="12495206" author="mamtas" created="Sat, 12 May 2007 00:43:38 +0100"  >&lt;p&gt;I missed that CharConstantNode (and every QueryTreeNode) has a getLanguageConnection() method. I will go ahead and fix that in next patch.&lt;/p&gt;</comment>
                            <comment id="12495715" author="mamtas" created="Mon, 14 May 2007 19:29:04 +0100"  >&lt;p&gt;Committed (revision 537940) patch DERBY2335_Use_LCC_in_ValueNode_v1_diff.txt using following comments&lt;br/&gt;
CharConstantNode (and every QueryTreeNode) has a getLanguageConnection() method that provides access to the current language connection. That call should get used in bindExpression rather than ConnectionUtil to get current language connection.&lt;/p&gt;</comment>
                            <comment id="12496087" author="mamtas" created="Tue, 15 May 2007 19:55:06 +0100"  >&lt;p&gt;I am attaching a temporary patch DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v1_diff.txt (not ready for commit yet since the code needs to be cleaned up a little.) I want to go ahead and post it so Mike can try it out for his testing without running into stack trace that Army ran into earlier this week. This patch uses the existing method PushDataValueFactory in ExpressionClassBuilder rather than the new method in BaseTypeCompiler. Mike, please let me know how this patch works with your testing. Once I have cleanedup the code and run few tests of my own, I will go ahead and commit it.&lt;/p&gt;</comment>
                            <comment id="12496095" author="mikem" created="Tue, 15 May 2007 20:13:10 +0100"  >&lt;p&gt;I&apos;ll try out the latest patch.  &lt;/p&gt;

&lt;p&gt;A couple of quick comments:&lt;br/&gt;
looks like you included the import of ExpressionClassBuilder twice in TypeCompiler.&lt;/p&gt;

&lt;p&gt;Also doesn&apos;t look like you updated javadoc to reflect the new parameter.&lt;/p&gt;

&lt;p&gt;What exactly is the rule about including impl reference in interfaces defined in :&lt;br/&gt;
opensource/java/engine/org/apache/derby/iapi/sql/compile.  I see you added an include of &lt;br/&gt;
TypeCompiler.java:import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;&lt;/p&gt;

&lt;p&gt;I see in this directory there are a couple of other examples, each with a comment about we really should not do it, but went &lt;br/&gt;
ahead and did it:&lt;br/&gt;
NodeFactory.java:/* Strictly speaking we shouldn&apos;t import classes under the impl&lt;br/&gt;
 hierarchy here&lt;br/&gt;
NodeFactory.java:import org.apache.derby.impl.sql.compile.QueryTreeNode;&lt;br/&gt;
NodeFactory.java:import org.apache.derby.impl.sql.compile.ResultColumnList;&lt;br/&gt;
NodeFactory.java:import org.apache.derby.impl.sql.compile.ResultSetNode;&lt;br/&gt;
Parser.java:/* Strictly speaking we shouldn&apos;t import classes under the impl hier&lt;br/&gt;
archy here&lt;br/&gt;
Parser.java:import org.apache.derby.impl.sql.compile.StatementNode;&lt;/p&gt;

&lt;p&gt;When I looked at Dan&apos;s suggestion I also ran into this issue.  Your changes seemed the obvious way to pass in the needed&lt;br/&gt;
info, but ran into this interface change that needed to reference an internal implementation.  Longer term does this mean that&lt;br/&gt;
maybe the CLass builder should have an interface also?&lt;/p&gt;</comment>
                            <comment id="12496113" author="mikem" created="Tue, 15 May 2007 21:16:22 +0100"  >&lt;p&gt;the DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v1_diff.txt  works for all cases in my new test.  I have just submitted the test - CollationTest2.java.  I have more cases to add but I was seeing the previous issue in multiple of the current cases.&lt;/p&gt;</comment>
                            <comment id="12496130" author="mamtas" created="Tue, 15 May 2007 21:53:34 +0100"  >&lt;p&gt;Mike, I was planning of doing the javadoc fix and removing the redundant method in BaseTypeCompiler as part of my cleanup. Didn&apos;t realize I accidentally included 2 imports. I will take care of that too and see if anything else needs cleanup.&lt;/p&gt;

&lt;p&gt;As for including impl reference in iapi, I am not too sure about the rules here. The advantage of using ExpressionClassBuilder is that the reference to the method descriptor can be hold on to because it is for per generated class level. &lt;/p&gt;

&lt;p&gt;The junit tests have passed fine with this patch and I am running derbyall right now. I will go ahead and cleanup the code and check it in. If there is further concern about impl and iapi boundaries, we can take it up as a subsequent discussion/patch.&lt;/p&gt;</comment>
                            <comment id="12496143" author="mamtas" created="Tue, 15 May 2007 22:29:00 +0100"  >&lt;p&gt;Committed attached patch (DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v2_diff.txt) with revision 538325 and following comments&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2335&quot; title=&quot;Compare character datatypes with different collation ordering.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2335&quot;&gt;&lt;del&gt;DERBY-2335&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
Made changes such that rather than having a new method in BaseTypeCompiler to push the DVD on the stack at code generation time, we use the existing method that accomplishes the same task in ExpressionClassBuilder. The junit tests have run fine with these changes and the stack trace experienced by Army in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2335&quot; title=&quot;Compare character datatypes with different collation ordering.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2335&quot;&gt;&lt;del&gt;DERBY-2335&lt;/del&gt;&lt;/a&gt; has been fixed by this fix. The reason for stack trace was that the lifetime of a BaseTypeCompiler is longer than a single class generation and I was trying to hold a reference to a declared method from MethodBuilder.describeMethod across the generated classes. This discussion can be found at &lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/DERBY-1478-subtask-DERBY-2583---need-help-in-debugging-stack-trace-thrown-during-code-generation-p10611184.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/DERBY-1478-subtask-DERBY-2583---need-help-in-debugging-stack-trace-thrown-during-code-generation-p10611184.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12496341" author="mamtas" created="Wed, 16 May 2007 17:19:25 +0100"  >&lt;p&gt;Commited additional tests with revision 538640 which checks the collation type of the database. It will be either UCS_BASIC or TERRITORY_BASED.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12369915">DERBY-2678</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12367644">DERBY-2569</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12367748">DERBY-2578</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12368325">DERBY-2599</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12357141" name="DERBY2335_More_tests_And_Fix_getNull_v1_diff.txt" size="19233" author="mamtas" created="Fri, 11 May 2007 22:27:36 +0100"/>
                            <attachment id="12357142" name="DERBY2335_More_tests_And_Fix_getNull_v1_stat.txt" size="757" author="mamtas" created="Fri, 11 May 2007 22:27:36 +0100"/>
                            <attachment id="12357303" name="DERBY2335_Use_LCC_in_ValueNode_v1_diff.txt" size="3193" author="mamtas" created="Mon, 14 May 2007 19:29:04 +0100"/>
                            <attachment id="12357304" name="DERBY2335_Use_LCC_in_ValueNode_v1_stat.txt" size="144" author="mamtas" created="Mon, 14 May 2007 19:29:04 +0100"/>
                            <attachment id="12357413" name="DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v1_diff.txt" size="10236" author="mamtas" created="Tue, 15 May 2007 19:55:02 +0100"/>
                            <attachment id="12357414" name="DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v1_stat.txt" size="612" author="mamtas" created="Tue, 15 May 2007 19:55:06 +0100"/>
                            <attachment id="12357425" name="DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v2_diff.txt" size="12811" author="mamtas" created="Tue, 15 May 2007 22:29:00 +0100"/>
                            <attachment id="12357426" name="DERBY2335_Use_PushDataValueFactory_in_ExpressionClassBuilder_v2_stat.txt" size="612" author="mamtas" created="Tue, 15 May 2007 22:29:00 +0100"/>
                            <attachment id="12356837" name="DERBY2335_correct_collation_for_constants_persistent_column_v1_diff.txt" size="14993" author="mamtas" created="Mon, 7 May 2007 05:12:05 +0100"/>
                            <attachment id="12356838" name="DERBY2335_correct_collation_for_constants_persistent_column_v1_stat.txt" size="821" author="mamtas" created="Mon, 7 May 2007 05:12:05 +0100"/>
                            <attachment id="12356994" name="DERBY2335_fix_stringCompare_Method_CollatorSQLxxx_classes_v1_diff.txt" size="10525" author="mamtas" created="Wed, 9 May 2007 22:28:46 +0100"/>
                            <attachment id="12356995" name="DERBY2335_fix_stringCompare_Method_CollatorSQLxxx_classes_v1_stat.txt" size="526" author="mamtas" created="Wed, 9 May 2007 22:28:46 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 9 May 2007 23:04:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30389</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11iv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39897</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>