<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:15:21 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1156/DERBY-1156.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1156] allow the encrypting of an existing unencrypted db and allow the re-encrypting of an existing encrypted db</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1156</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;encrypted database to be re-encrypted with a new password.&lt;/p&gt;

&lt;p&gt;Here are some ideas for an initial implementation.&lt;/p&gt;


&lt;p&gt;The easiest way to do this is to make sure we have exclusive access to the&lt;br/&gt;
data and that no log is required in the new copy of the db.  I want to avoid&lt;br/&gt;
the log as it also is encrypted.  Here is my VERY high level plan:&lt;/p&gt;

&lt;p&gt;1) Force exclusive access by putting all the work in the low level store,&lt;br/&gt;
   offline boot method.  We will do redo recovery as usual, but at the end&lt;br/&gt;
   there will be an entry point to do the copy/encrypt operation.&lt;/p&gt;

&lt;p&gt;copy/encrypt process:&lt;/p&gt;

&lt;p&gt;0) The request to encrypt/re-encrypt the db will be handled with a new set&lt;br/&gt;
   of url flags passed into store at boot time.  The new flags will provide&lt;br/&gt;
   the same inputs as the current encrypt flags.  So at high level the&lt;br/&gt;
   request will be &quot;connect db old_encrypt_url_flags; new_encrypt_url_flags&quot;.&lt;br/&gt;
   TODO - provide exact new flag syntax.&lt;/p&gt;

&lt;p&gt;1) Open a transaction do all logged work to do the encryption.  All logging&lt;br/&gt;
   will be done with existing encryption.&lt;/p&gt;

&lt;p&gt;2) Copy and encrypt every db file in the database.  The target files will&lt;br/&gt;
   be in the data directory.  There will be a new suffix to track the new&lt;br/&gt;
   files, similar to the current process used for handling drop table in&lt;br/&gt;
   a transaction consistent manner without logging the entire table to the log.&lt;br/&gt;
   Entire encrypted destination file is guaranteed synced to disk before&lt;br/&gt;
   transaction commits.  I don&apos;t think this part needs to be logged.&lt;br/&gt;
   Files will be read from the cache using existing mechanism and written&lt;br/&gt;
   directly into new encrypted files (new encrypted data does not end up in&lt;br/&gt;
   the cache).&lt;/p&gt;

&lt;p&gt;3) Switch encrypted files for old files.  Do this under a new log operation&lt;br/&gt;
   so the process can be correctly rolled back if the encrypt db operation&lt;br/&gt;
   transaction fails.  Rollback will do file at a time switches, no reading&lt;br/&gt;
   of encrypted data is necessary.&lt;/p&gt;

&lt;p&gt;4) log a &quot;change encryption of db&quot; log record, but do not update&lt;br/&gt;
   system.properties with the change.&lt;/p&gt;

&lt;p&gt;5) commit transaction.&lt;/p&gt;

&lt;p&gt;6) update system.properties and sync changes.&lt;/p&gt;

&lt;p&gt;7) TODO - need someway to handle crash between steps 5 and 6.&lt;/p&gt;

&lt;p&gt;6) checkpoint all data, at this point guaranteed that there is no outstanding&lt;br/&gt;
   transaction, so after checkpoint is done there is no need for the log.&lt;/p&gt;

&lt;p&gt;ISSUES:&lt;br/&gt;
o there probably should be something that catches a request to encrypt to&lt;br/&gt;
  whatever db was already encrypted with.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12330786">DERBY-1156</key>
            <summary>allow the encrypting of an existing unencrypted db and allow the re-encrypting of an existing encrypted db</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tsuresh">Suresh Thalamati</assignee>
                                    <reporter username="mikem">Mike Matrigali</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Mar 2006 20:18:24 +0100</created>
                <updated>Wed, 30 Aug 2006 00:04:49 +0100</updated>
                            <resolved>Wed, 30 Aug 2006 00:04:49 +0100</resolved>
                                    <version>10.1.3.1</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12377211" author="tsuresh" created="Mon, 1 May 2006 16:58:19 +0100"  >&lt;p&gt;Attached is a  functional/design spec  that describes database encryption enhancements, I plan to implement for 10.2 release. &lt;/p&gt;

&lt;p&gt;Any comments/suggestions ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
-suresht&lt;/p&gt;</comment>
                            <comment id="12377425" author="djd" created="Wed, 3 May 2006 00:23:21 +0100"  >&lt;p&gt;Comments on the functional part of the spec:&lt;/p&gt;

&lt;p&gt;Encrypting an existing un-encrypted database:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I assume the other encryption properties can be set at this time, such as encrpytionAlgorithm - would be good to state that.&lt;/li&gt;
	&lt;li&gt;jdbc:derby:salesdb;dataEncryption=true;bootPassword=1234xyz - Does this example work? I thought the boot password had&lt;br/&gt;
     to be at least eight characters?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Encrypting with a new password or a new encryption key:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Just want to ensure the terminology is clear here,&lt;br/&gt;
     &quot;Database will be encrypted with new password/key if it is booted with following new URL attributes:&quot;&lt;br/&gt;
     The database is always encrypted with a new encryption key, and if newBootPassword is used then that key&lt;br/&gt;
      is protected with a new boot password.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    &quot;... all the data in the database will be encrypted using this password ...&quot;&lt;br/&gt;
     .. all the data in the database will be encrypted with a newly generated key ...&lt;/p&gt;

&lt;p&gt;    In this mode can the encryption algorithm be changed?&lt;/p&gt;</comment>
                            <comment id="12378731" author="tsuresh" created="Wed, 10 May 2006 04:14:16 +0100"  >&lt;p&gt;DERBY -1156 ( first patch)&lt;br/&gt;
This patch adds some code required to support to configure an &lt;br/&gt;
existing database for encryption of an un-encrypted database. Users &lt;br/&gt;
can now specify the dataEncryption=true attribute along with other &lt;br/&gt;
encryption attributed to encrypt an existing un-encrypted database &lt;br/&gt;
at boot time. &lt;/p&gt;

&lt;p&gt;This patch implements encryption of an existing data in the database with new &lt;br/&gt;
encryption key and also added new log operation requried to restore the&lt;br/&gt;
database to its original state incase of crash/error. &lt;/p&gt;

&lt;p&gt;This patch also adds a test to test encryption of an un-encrypted database.&lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review and commit this patch. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\services\jce\JCECipherFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\ReadOnly.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\LogToFile.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
A      java\engine\org\apache\derby\impl\store\raw\data\EncryptData.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\InputStreamContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\StreamFileContainer.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\FileContainer.java&lt;br/&gt;
A      java\engine\org\apache\derby\impl\store\raw\data\EncryptContainerUndoOperation.java&lt;br/&gt;
A      java\engine\org\apache\derby\impl\store\raw\data\EncryptContainerOperation.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseContainerHandle.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\data\RAFContainer.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\crypto\CipherFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\io\RegisteredFormatIds.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\io\StoredFormatIds.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\log\LogFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\data\DataFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\data\RawContainerHandle.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\RawStoreFactory.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\encryptDatabaseTest1.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\encryptDatabaseTest1_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\encryptDatabaseTest1.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\encryptionAll.runall&lt;/p&gt;</comment>
                            <comment id="12379123" author="mikem" created="Fri, 12 May 2006 02:16:35 +0100"  >&lt;p&gt;I have reviewed this patch and run a full set of tests on windows XP / sun jdk1.4.2 which passed.  I think this patch should be committed as is.   It is a good incremental checkin for this feature.  It provides a set of tools for the rest of the project, and gets the code to the point that it can encrypt an existing unencrypted db.  Future checkins should address a couple of things:&lt;br/&gt;
1) obviously more testing.  Some quick notes, the current tests may want to show that accessing the newly encrypted db with a bad password does not work - just to insure all the url;s are not just being totally ignored.  Also want to test abort - probably need a testing codepoint to cause the failure at the right time.&lt;br/&gt;
2) fix up the comments, there are some typo&apos;s .&lt;br/&gt;
3) usual nit - some greater than 80 char lines.&lt;/p&gt;

&lt;p&gt;I would have committed this change now, but svn still is not back.&lt;/p&gt;</comment>
                            <comment id="12412242" author="bandaram" created="Thu, 18 May 2006 04:18:11 +0100"  >&lt;p&gt;Committed this patch to trunk.&lt;/p&gt;

&lt;p&gt;Transmitting file data ..........................&lt;br/&gt;
Committed revision 407366.&lt;/p&gt;</comment>
                            <comment id="12412849" author="tsuresh" created="Tue, 23 May 2006 09:47:27 +0100"  >&lt;p&gt;Attached patch (reencrypt_2,.diff )   fixes the encryptDatabaseTest1.sql test failure on Solaris  regression runs.   This  test was using  16 byte encyrption key , which causes the test to fail  on Solaris10 (with security provider &apos;SunPCKS11-Solaris&apos;) .&lt;/p&gt;

&lt;p&gt;This patch modifies the test to use 8 byte key instead of  16 bytes encryption key. &lt;br/&gt;
Please refer to  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-788&quot; title=&quot;&amp;#39;store/encryptionKey.sql&amp;#39; fails on Solaris 10&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-788&quot;&gt;&lt;del&gt;DERBY-788&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1088&quot; title=&quot;Verify handling of invalid encryption keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1088&quot;&gt;DERBY-1088&lt;/a&gt; for more details  on   this topic. &lt;/p&gt;

&lt;p&gt;Test passed on jdk142  and jdk15 on Windows. &lt;/p&gt;

&lt;p&gt;It would be great  if   some one can commit this patch. &lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresh&lt;/p&gt;</comment>
                            <comment id="12412855" author="fuzzylogic" created="Tue, 23 May 2006 11:23:00 +0100"  >&lt;p&gt;Committed reencypt_2.diff to trunk with revision 408822.&lt;/p&gt;</comment>
                            <comment id="12413287" author="tsuresh" created="Fri, 26 May 2006 02:51:55 +0100"  >&lt;p&gt;I think to implement re-encryption of an already encrypted database with a &lt;br/&gt;
new password, two instances of the cipher factory are needed, one with the &lt;br/&gt;
old password and one with the new password.  So that one instance of the&lt;br/&gt;
factory can be used to decrypt the existing data with the old password and &lt;br/&gt;
another instance to encrypt the data with a new password. &lt;/p&gt;

&lt;p&gt;Currently only one instance of org.apache.derby.impl.services.jce.JCECipherFactory &lt;br/&gt;
is loaded at boot time, this class implement all accessory methods required to &lt;br/&gt;
manage the ciphers. &lt;/p&gt;

&lt;p&gt;As I need to instances of this class for re-encryption of an encrypted db and &lt;br/&gt;
I think  it is not really necessary  to boot this factory with different module&lt;br/&gt;
ID&apos;s&lt;/p&gt;

&lt;p&gt;I was thinking of reorganizing this class similar to CacheFactory. Basically I&lt;br/&gt;
will just add a new class called say CipherManger and move all the code in the &lt;br/&gt;
current JCECipherFactory into this new class and make CipherFactoy just return&lt;br/&gt;
instances of this class CipherManger with the difference encryption properties. &lt;br/&gt;
This way I need to load only one module of CipherFacory through the monitor and &lt;br/&gt;
get instances of CipherManager as needed. &lt;/p&gt;

&lt;p&gt;Any comments/suggestions ?&lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suersh&lt;/p&gt;</comment>
                            <comment id="12416721" author="tsuresh" created="Mon, 19 Jun 2006 16:32:58 +0100"  >&lt;p&gt;DERBY -1156 (partial)&lt;br/&gt;
This patch adds some code required to support reconfigure(rencryption) of&lt;br/&gt;
an already existing encrypted database with a new password(secret key)&lt;br/&gt;
or an external user specified encryption key. Two new attributes &lt;br/&gt;
&quot;newBootPassword&quot; and &quot;newEncryptionkey&quot; are introduced to support this &lt;br/&gt;
functionality. &lt;/p&gt;

&lt;p&gt;&amp;#8211; modified the code to support two have instance of two cipher &lt;br/&gt;
   factories to exist. So that the existing data can decrypted with&lt;br/&gt;
   the old encryption key using one cipher factory and rewrite the data &lt;br/&gt;
   with new encryption keys using another cipher factory. &lt;/p&gt;

&lt;p&gt;&amp;#8211; reenryption  of the database with new keys is similar to encrypting an already &lt;br/&gt;
   existing database. All the container data is read through the page cache &lt;br/&gt;
   and  rewritten using the new encryption keys. &lt;/p&gt;

&lt;p&gt;&amp;#8211; Added test case to test the re-encryption of an encrypted database.&lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review this patch. &lt;/p&gt;

&lt;p&gt;svn stat:&lt;br/&gt;
M      java\engine\org\apache\derby\impl\services\jce\JCECipherFactory.java&lt;br/&gt;
A      java\engine\org\apache\derby\impl\services\jce\JCECipherFactoryBuilder.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
A      java\engine\org\apache\derby\iapi\services\crypto\CipherFactoryBuilder.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\Attribute.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\Module.java&lt;br/&gt;
M      java\engine\org\apache\derby\modules.properties&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\unitTests\crypto\T_Cipher.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\encryptDatabaseTest1.sql&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\encryptDatabaseTest1.out&lt;/p&gt;</comment>
                            <comment id="12417342" author="mikem" created="Fri, 23 Jun 2006 01:34:34 +0100"  >&lt;p&gt;i reviewed and tested reencrypt_3.diff patch.  it looks fine, i will let you commit.  Still would like to see more testing, especially exercising the abort paths when failure happens while reencrypting.&lt;/p&gt;</comment>
                            <comment id="12420699" author="tsuresh" created="Thu, 13 Jul 2006 02:15:30 +0100"  >&lt;p&gt;Committed reencrypt_3.diff patch  to trunk with revision 416536&lt;/p&gt;</comment>
                            <comment id="12420701" author="tsuresh" created="Thu, 13 Jul 2006 02:16:30 +0100"  >&lt;p&gt;DERBY -1156 (partial)&lt;br/&gt;
This patch adds some code required to support reconfigure(rencryption) of&lt;br/&gt;
an already existing encrypted database with a new password(secret key)&lt;br/&gt;
or an external user specified encryption key.&lt;/p&gt;

&lt;p&gt;&amp;#8211; disables encryption/re-encryption of an existing database if there &lt;br/&gt;
   are any global transaction in the prepared state after recovery. &lt;/p&gt;

&lt;p&gt;&amp;#8211; disables encryption/re-encryption of an existing database if database &lt;br/&gt;
   is soft-upgraded to 10.2. &lt;/p&gt;

&lt;p&gt;&amp;#8211; Added test that tests re-encryption of an encrypted database&lt;br/&gt;
   when global transaction are in the prepared state after recovery. &lt;/p&gt;

&lt;p&gt;Tested the upgrade manually, will add the test case later. &lt;/p&gt;

&lt;p&gt;TESTS : derbyall test suite passed on Windows XP/JDK142&lt;/p&gt;

&lt;p&gt;It would be great if some can review this patch. &lt;/p&gt;

&lt;p&gt;svn stat:&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\XactFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\xact\TransactionTable.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\ReadOnly.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\LogToFile.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\log\LogFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\xact\TransactionFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\RawStoreFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\shared\org\apache\derby\shared\common\reference\SQLState.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\copyfiles.&lt;br/&gt;
ant&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\encryptDatabaseTest2_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\encryptDatabaseTest2.sql&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\encryptDatabaseTest2.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\encryptionAll.runall&lt;/p&gt;</comment>
                            <comment id="12420904" author="mikem" created="Fri, 14 Jul 2006 01:52:40 +0100"  >&lt;p&gt;Here are my comments on review of the reencrypt_4.diff, also I am running storeall but it has not finished yet.:&lt;/p&gt;

&lt;p&gt;minor typo&apos;s:&lt;br/&gt;
XactFactory.java line 835 - trasaction  --&amp;gt; transactions&lt;br/&gt;
TransactionTable.java: add comment that hasPreparedXact(boolean recovered) is&lt;br/&gt;
    also MT unsafe.&lt;/p&gt;

&lt;p&gt;Is there a test for readonly db?&lt;/p&gt;

&lt;p&gt;It is a little wierd to throw an exception from the ReadOnly impl of&lt;br/&gt;
checkVersion(), from the name of the routine.  I understand what the&lt;br/&gt;
comment is saying.  It seems unexpected for this routine to not return&lt;br/&gt;
ok for a &quot;current&quot; db.&lt;/p&gt;


&lt;p&gt;stuff for now or later:&lt;br/&gt;
o may be interesting to add following to your tests on XA&lt;br/&gt;
    o have a global xact in the log that is aborted during recovery (ie.&lt;br/&gt;
      not yet prepared).&lt;br/&gt;
    o have a global xact in the log that is prepared and committed.&lt;/p&gt;

&lt;p&gt;  I don&apos;t think there are code issues with these paths, mostly just easy&lt;br/&gt;
  cases to add and will verify future code doesn&apos;t break it.&lt;/p&gt;

&lt;p&gt;o add test for readonly db and reencrypt.&lt;br/&gt;
o add test for upgrade fail.  Is there an existing framework for soft&lt;br/&gt;
  upgrade testing in 10.2?&lt;/p&gt;</comment>
                            <comment id="12420909" author="mikem" created="Fri, 14 Jul 2006 02:32:02 +0100"  >&lt;p&gt;storeall ran fine with sun jdk1.4.2 on xp - with patch reencrypt_4&lt;/p&gt;</comment>
                            <comment id="12420960" author="tsuresh" created="Fri, 14 Jul 2006 06:47:36 +0100"  >&lt;p&gt;FIixed the comments as suggected by Mike,  and committed reencrypt_4.diff  patch to trunk &lt;br/&gt;
with  revision 421721.&lt;/p&gt;</comment>
                            <comment id="12422000" author="tsuresh" created="Wed, 19 Jul 2006 00:53:39 +0100"  >&lt;p&gt;   How to handle crash/recovery when switching to new encryption key ?&lt;/p&gt;

&lt;p&gt;After re-encrypting all the containers in the database with a new &lt;br/&gt;
encryption key. A final switch has to be made for the database to use &lt;br/&gt;
the new encryption key to encrypt the transaction log and the data. &lt;/p&gt;

&lt;p&gt;Problem is how to perform the switch in such a way that if there is crash, &lt;br/&gt;
system will work with the old encryption key or the new encryption key. &lt;br/&gt;
Next boot of the database should not require both the keys to recovery&lt;br/&gt;
from a crash.&lt;/p&gt;

&lt;p&gt;Log is encrypted, so recovery has to know the correct encryption &lt;br/&gt;
key to decrypt the transaction log records.   Note that even the &lt;br/&gt;
checkpoint log record in the transaction log is encrypted. &lt;/p&gt;

&lt;p&gt;I think  an algorithm using a flag in the log control file&lt;br/&gt;
(CHECK_POINT_WITH_NEW_KEY) tha is written on check-point and &lt;br/&gt;
another flag (derby.storage.reencryptionLog) in service.properties &lt;br/&gt;
to track that re-encryption in progress and also to remember the first &lt;br/&gt;
log file that contains the log with the new encryption key.  &lt;/p&gt;

&lt;p&gt;During the switch to new-encryption key , old copy of service.properties and &lt;br/&gt;
the verify.key files saved , so that incase of crash, system will revert back&lt;br/&gt;
to the old version of these files. &lt;/p&gt;


&lt;p&gt;Incase of a crash during re-encryption ; On recovery  reading from &lt;br/&gt;
the log that contains log records encrypted with new key &lt;br/&gt;
including the commit log record of re-encryption is avoided by &lt;br/&gt;
deleting the log file. Because the commit log record is written to &lt;br/&gt;
the last log file, re-encryption transaction  will be rolled back bringing &lt;br/&gt;
the database to state it was before re-encryption  started. &lt;/p&gt;

&lt;p&gt;Persistent Values/files :  &lt;br/&gt;
CHECK_POINT_WITH_NEW_KEY  to the log.ctrl file &lt;br/&gt;
derby.storage.reencryptionLog property to the service.properties. &lt;br/&gt;
service.properties.old. verify.key.old  to keep track of old version &lt;br/&gt;
of the encryption properties. &lt;/p&gt;


&lt;p&gt;Following is the description of the  re-encryption of the database algorithm:&lt;/p&gt;

&lt;p&gt;Re-encryption is performed after the recovery during the RawStore boot:&lt;/p&gt;

&lt;p&gt;1) Perform  a check point, this will make sure old  transaction log &lt;br/&gt;
   will not be read after the re-encryption (Logged with OLD KEY)&lt;/p&gt;

&lt;p&gt;2) Begin Transaction   (Logged with OLD Key).&lt;/p&gt;

&lt;p&gt;3) Re-encrypt all containers with the new key. (this action is &lt;br/&gt;
   logged with OLD KEY).&lt;/p&gt;

&lt;p&gt;5) Switch to a new Log File and set the encryption engine for the log  &lt;br/&gt;
   to be the one with the new encryption key. &lt;/p&gt;

&lt;p&gt;(After this point the transaction log will be encrypted with &lt;br/&gt;
  the New Encryption Key).&lt;/p&gt;

&lt;p&gt;6) update the service.properties with the property &lt;br/&gt;
    derby.storage.reencryptionLog = (the last log file number)  &lt;br/&gt;
   (this property will help in tracking that re-encryption in progress&lt;br/&gt;
    and also to delete the last log file in-case of crash)&lt;/p&gt;

&lt;p&gt;7) copy  service.properties after excluding derby.storage.reencryptionLog property &lt;br/&gt;
   to service.properties.old  and and verify.key into verify.key.old&lt;/p&gt;

&lt;p&gt;8) End Transaction   (logged with NEW KEY)&lt;/p&gt;

&lt;p&gt;9) update the service.properties with new encryption key/password information. &lt;/p&gt;

&lt;p&gt;10) update the verify.key file with the new external key incase of external &lt;br/&gt;
   encryption key. &lt;/p&gt;

&lt;p&gt;11) Perform a checkpoint and also mark a flag that checkpoint is done &lt;br/&gt;
   with a new key in the log.ctrl file. CHECK_POINT_WITH_NEW_KEY = true. &lt;/p&gt;

&lt;p&gt;(IF WE REACHED THIS FAR MEANS RE-ENCRYPTION IS SUCCESSFUL).&lt;/p&gt;

&lt;p&gt;Now perform the cleanup:&lt;/p&gt;

&lt;p&gt;performCleanup () &lt;/p&gt;

{

12) Update the derby.storage.reencryptionLog = 0  ( re-encryption complete , 
   only cleanup remaining)

13) Cleanup copies of the container files encrypted with old encryption key.

14) Update the log.control file with CHECK_POINT_WITH_NEW_KEY = false.

15) Remove the service.properties.old and verify.key.old files. 

16) Remove derby.storage.reencryptionLog property from the service.properties
    file. 

}

&lt;p&gt;If all the steps above are successful,  database is ready to use the new&lt;br/&gt;
encryption key.&lt;/p&gt;



&lt;p&gt;On Recovery :&lt;/p&gt;

&lt;p&gt;1) &lt;/p&gt;

&lt;p&gt;   String renEncryptionLogProp = find(derby.storage.ReEncryptionLog );&lt;br/&gt;
   if( reEncryptioLogProp != null ) &lt;/p&gt;
{
      reEncyrptionLog = Long.valueof(renEncryptionLog);
   }
&lt;p&gt; else &lt;/p&gt;
{

       // This may not re-encryption recovery case or it crashed 
       // before the derby.storage.ReEncryptionLog was set.

       // database will continue to use the old key and recovery will 
       // rollback if there were any changed by re-encryption. No special 
       // handling required.       
   }

&lt;p&gt;  if ( reEncryptionLog &amp;gt; 0 )  {&lt;/p&gt;

&lt;p&gt;        // renecryption was in progress &lt;br/&gt;
         if (CHECK_POINT_WITH_NEW_KEY == true) &lt;br/&gt;
         &lt;/p&gt;
{
           // crashed after the checkpoint with the new key , 
           // this is as good as re-encryption is complete.  
           
           1) call performCleanup();

           2) verify the user entered key against the new verify.key and
                proceed with recovery.
          }
&lt;p&gt;else &lt;/p&gt;
          {
              // re-encryption was not complete, rollback and 
              // bring the database to the state it was before
              // re-encryption started. 

            1) delete(Blow up) the log file(derby.storage.ReEncryptionLog) 
               where log records with  new encryption key is written if 
               the file exists. (so that we don&apos;t see any log with new  key.

             2) revert to the the old versions of service.properties and
	         verify.key, this will also remove the
	         derby.storage.ReEncryptionLog property.

             3) verify the user entered old key/password using the
               verify.key/or the key in the service.properties. And then
               proceed with recovery.

             4) recovery will undo the partially completed re-encryption, 
                this will bring the containers back to versions of 
                the old encryption key.
         }

&lt;p&gt;  } else &lt;br/&gt;
  {&lt;br/&gt;
     if (reEncryptionLog == 0) &lt;/p&gt;
     {
        // crash occurred during cleanup; re-encryption was complete.
       call performcleanup();
     }
&lt;p&gt;  }      &lt;/p&gt;



&lt;p&gt;If the above algorithm  works, Other minor issues:&lt;/p&gt;

&lt;p&gt;1) instead of having service.properties.old file name the specific properties &lt;br/&gt;
   as new or old and set them accordingly. &lt;br/&gt;
2) instead of storing the log file to delete incase of crash in the&lt;br/&gt;
   as a property (derby.storage.ReEncryptionLog) in the&lt;br/&gt;
   service.properties. Store it in the log.ctrl file; There is only one LONG&lt;br/&gt;
   spare remaining , not sure if worth using for this case. &lt;/p&gt;


&lt;p&gt;I would really appreciate if some one can take a look at the above algorithm &lt;br/&gt;
and verify if it really works or if there are any suggestions solve in&lt;br/&gt;
different way, that will be great too. &lt;/p&gt;


&lt;p&gt;Thanks&lt;br/&gt;
-suresh&lt;/p&gt;










</comment>
                            <comment id="12423461" author="tsuresh" created="Tue, 25 Jul 2006 22:11:27 +0100"  >&lt;p&gt;DERBY -1156 (partial) re-encryption of the database.&lt;/p&gt;

&lt;p&gt;This patch adds a new test that tests recovery of the database &lt;br/&gt;
if the engine crashes just before committing the re-encryption&lt;br/&gt;
with a new password phrase. Crash is simulated using the debug flags. &lt;/p&gt;


&lt;p&gt;svn stat:&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\store\ReEncryptCrashRecovery.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\ReEncryptCrashRecovery.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\suites\encryptionAll.runall&lt;/p&gt;</comment>
                            <comment id="12425419" author="tsuresh" created="Thu, 3 Aug 2006 02:07:27 +0100"  >&lt;p&gt;Minor updated to the spec. &lt;/p&gt;</comment>
                            <comment id="12425926" author="tsuresh" created="Sat, 5 Aug 2006 04:11:22 +0100"  >&lt;p&gt;DERBY -1156 (partial) (re) encryption of an existing database.&lt;/p&gt;

&lt;p&gt;This patch adds code required to correctly handle crash/recovery during &lt;br/&gt;
encryption of an un-encrypted database and encryption of an encrypted &lt;br/&gt;
database with a new key.&lt;/p&gt;

&lt;p&gt;Crashes before updating the database with the new encryption key &lt;br/&gt;
are handled by recovery, those log records are encrypted old key. &lt;/p&gt;

&lt;p&gt;Crashes after updates to the service.properties with a new encryption key &lt;br/&gt;
is handled by using the new status flag (derby.storage.databaseEncryptionStatus)  &lt;br/&gt;
to track the changes and by writing the transaction log encrypted with &lt;br/&gt;
new key to a new log file. &lt;/p&gt;

&lt;p&gt;Logging system can handle only one encryption key, which means the &lt;br/&gt;
recovery can read the log with a new key or the old key. Checkpoint &lt;br/&gt;
log record is also encrypted. So it is necessary for the system&lt;br/&gt;
to find a checkpoint in the log that it can decrypt using the encryption &lt;br/&gt;
key stored in the service.properties or the one provided by the user. &lt;br/&gt;
This is ensured by  by writing  COMMIT and CHECKPOINT log records&lt;br/&gt;
into a new log file and delete that file on-reboot if there is a crash &lt;br/&gt;
before checkpoint records are updated. &lt;/p&gt;

&lt;p&gt;CHECKPOINT and COMMIT is done after setting the databaseEncryptionStatus to &lt;br/&gt;
IN-PROGRESS in the service.properties.On a reboot if databaseEncryptionStatus &lt;br/&gt;
is  IN-PROGRESS,  then engine first checks if checkpoint is in the last &lt;br/&gt;
log file , it it is then (re) encryption is complete otherwise it deletes the &lt;br/&gt;
last log file before doing recovery. Because the last log file also &lt;br/&gt;
had the commit record , it is also gone; Now recovery sees log only encrypted &lt;br/&gt;
with the old key and no end for re-encryption transaction, so it the (re) &lt;br/&gt;
encryption work rolled back and database is brought to the state it was &lt;br/&gt;
before (re) encryption started. &lt;/p&gt;

&lt;p&gt;If engine find a checkpoint in the last log file when databaseEncryptionStatus&lt;br/&gt;
is IN-PROGRESS , the it is clear that checkpoint is encrypted with the new &lt;br/&gt;
key; so it does any cleanup required. &lt;/p&gt;


&lt;p&gt;Added new test cases using debug flags to crash at critical &lt;br/&gt;
point during (re) encryption and recovery of failed (re)encryption. &lt;/p&gt;


&lt;p&gt;svn stat :&lt;/p&gt;


&lt;p&gt;M      java\engine\org\apache\derby\impl\store\raw\log\ReadOnly.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\log\LogToFile.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\RawStore.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\EncryptData.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\store\raw\data\BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\iapi\services\io\FileUtil.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\log\LogFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\data\DataFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\store\raw\RawStoreFactory.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\store\ReEncryptCrashRecovery.java&lt;/p&gt;

</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12347206">DERBY-1636</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12326094" name="encryptspec.html" size="34507" author="tsuresh" created="Mon, 1 May 2006 16:58:19 +0100"/>
                            <attachment id="12326475" name="reencrypt_1.diff" size="81080" author="tsuresh" created="Wed, 10 May 2006 04:14:16 +0100"/>
                            <attachment id="12334426" name="reencrypt_2.diff" size="2183" author="tsuresh" created="Tue, 23 May 2006 09:47:27 +0100"/>
                            <attachment id="12335607" name="reencrypt_3.diff" size="33478" author="tsuresh" created="Mon, 19 Jun 2006 16:32:58 +0100"/>
                            <attachment id="12336759" name="reencrypt_4.diff" size="26425" author="tsuresh" created="Thu, 13 Jul 2006 02:16:30 +0100"/>
                            <attachment id="12337505" name="reencrypt_5.diff" size="16849" author="tsuresh" created="Tue, 25 Jul 2006 22:11:27 +0100"/>
                            <attachment id="12338201" name="reencrypt_6.diff" size="91703" author="tsuresh" created="Sat, 5 Aug 2006 04:11:22 +0100"/>
                            <attachment id="12338034" name="reencryptspec_1.html" size="38346" author="tsuresh" created="Thu, 3 Aug 2006 02:07:27 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 1 May 2006 15:58:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29876</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy14qn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40418</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>