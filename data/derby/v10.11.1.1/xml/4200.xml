<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:17:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4200/DERBY-4200.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4200] client side OutOfMemoryError running derbnetclientmats:jdbcapi/derbyStress</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4200</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;On the nightly run for 4/27 - 10.5.1.2 - (769232), I saw client jdbcapi/derbystress.java  run out of heap space.   The test has not failed like this before on the same machine with the same JVM, and the one checkin on that day &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3991&quot; title=&quot;Clob.truncate(0) throws exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3991&quot;&gt;&lt;del&gt;DERBY-3991&lt;/del&gt;&lt;/a&gt; could not account for this failure.&lt;/p&gt;

&lt;p&gt;I will attach the javacore and heapdump.  Taking a quick look at the heap dump, it seems to have a lot of client side Statement objects, which seems to be just the leak the test is checking for.  Note: the test runs with 64MB heap.  It would be interesting to run with other jvms and force a gc() and a heap dump at this point in the test and see if we still have a lot of Statement objects or if this is a specific platform/JVM issue.&lt;/p&gt;

&lt;p&gt;The trace at the time of failure was :&lt;br/&gt;
1XMCURTHDINFO  Current Thread Details&lt;br/&gt;
NULL           ----------------------&lt;br/&gt;
3XMTHREADINFO      &quot;main&quot; (TID:0x0808D300, sys_thread_t:0x0805CBC8, state:R, native ID:0x0000644F) prio=5&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/am/Cursor.allocateCharBuffer(Bytecode PC:77(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatementReply.parseSQLDTARDarray(Bytecode PC:77(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatementReply.parseQRYDSC(Bytecode PC:10(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatementReply.parseOpenQuery(Bytecode PC:104(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatementReply.parseOPNQRYreply(Bytecode PC:14(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatementReply.readOpenQuery(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/StatementReply.readOpenQuery(Bytecode PC:7(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/net/NetStatement.readOpenQuery_(Bytecode PC:11(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/am/Statement.readOpenQuery(Bytecode PC:6(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/am/Statement.flowExecute(Bytecode PC:581(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/am/Statement.executeQueryX(Bytecode PC:3(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derby/client/am/Statement.executeQuery(Bytecode PC:3(Compiled Code))&lt;br/&gt;
4XESTACKTRACE          at org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.testDerby3316(derbyStress.java:156)&lt;br/&gt;
4XESTACKTRACE          at org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.main(derbyStress.java:57(Compiled Code))&lt;/p&gt;</description>
                <environment>java version &amp;quot;1.5.0&amp;quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build pxi32devifx-20070806 (SR5a))&lt;br/&gt;
IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Linux x86-32 j9vmxi3223-20070426 (JIT enabled)&lt;br/&gt;
J9VM - 20070420_12448_lHdSMR&lt;br/&gt;
JIT  - 20070419_1806_r8&lt;br/&gt;
GC   - 200704_19)&lt;br/&gt;
JCL  - 20070725&lt;br/&gt;
SUSE linux running on vmware.&lt;br/&gt;
</environment>
        <key id="12424185">DERBY-4200</key>
            <summary>client side OutOfMemoryError running derbnetclientmats:jdbcapi/derbyStress</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Apr 2009 17:22:53 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:23 +0100</updated>
                            <resolved>Tue, 5 Jul 2011 18:24:17 +0100</resolved>
                                    <version>10.5.2.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Network Client</component>
                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12704188" author="kmarsden" created="Wed, 29 Apr 2009 17:29:51 +0100"  >&lt;p&gt;javacore and heapdump at the time of failure.  To analyze the heapdump you can use the heap analyzer available at: &lt;a href=&quot;http://www.alphaworks.ibm.com/tech/heapanalyzer&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.alphaworks.ibm.com/tech/heapanalyzer&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12725845" author="kmarsden" created="Wed, 1 Jul 2009 00:28:41 +0100"  >&lt;p&gt;If you would like to produce a heap dump on another machine at the same point in the test with the IBM 1.6 jvm you can gc() and then call&lt;br/&gt;
      com.ibm.jvm.Dump.HeapDump();&lt;br/&gt;
      com.ibm.jvm.Dump.JavaDump();&lt;/p&gt;

&lt;p&gt;The same tool mentioned in the previous comment can read the heap dump.&lt;/p&gt;

&lt;p&gt;Then you can see if those Statement objects are present  on other platforms.  Perhaps you could also just run with a slightly smaller heap set in derbyStress_app.properties to get the OOM.&lt;/p&gt;</comment>
                            <comment id="12726594" author="rhillegas" created="Thu, 2 Jul 2009 19:07:56 +0100"  >&lt;p&gt;triaged July 2, 2009&lt;/p&gt;</comment>
                            <comment id="12742861" author="mamtas" created="Thu, 13 Aug 2009 16:08:35 +0100"  >&lt;p&gt;I changed derbyStress.java&apos;s testDerby3316() method to gc() and then to dump the heap in my 10.5 codeline. I ran this changed derbyStress in following 3 scenarios&lt;br/&gt;
1)my Windows XP box with IBM 1.5 jdk. Heap dump is attached as windows10_5_HeapDump.phd&lt;br/&gt;
2)on the vmware machine(vmware is where we have been seeing intermittent out of memory errors) using IBM 1.5 SR7 jdk. Heap dump is attached as vmware10_5_SR7HeapDump.phd&lt;br/&gt;
3)on the vmware using IBM 1.5 SR10 jdk. Heap dump is attached as vmware10_5_SR10HeapDump.phd&lt;/p&gt;

&lt;p&gt;In each of these dumps, using the HeapAnalyzer, I searched for org/apache/derby/client/net/NetStatement objects. &lt;br/&gt;
1)On Windows XP box, I only found 9 org/apache/derby/client/net/NetStatement objects&lt;br/&gt;
2)On vmware with IBM 1.5 SR7, I found 310 org/apache/derby/client/net/NetStatement objects&lt;br/&gt;
3)On vmware with IBM 1.5 SR10, I found 80 org/apache/derby/client/net/NetStatement objects&lt;/p&gt;

&lt;p&gt;So, there is definitely improvement over number of objects from IBM 1.5 SR7 to IBM 1.5 SR10 on vmware. I wonder if the experiment above makes this more of a platform issue vs regression?&lt;/p&gt;

&lt;p&gt;BTW, after my changes, the derbyStress method in question looks as follows(the changes are 3 lines under the comment //Following 3 lines are to dump the heap)&lt;br/&gt;
    public static void testDerby3316() throws Exception {&lt;br/&gt;
          System.out.println(&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3316&quot; title=&quot;Leak in client if ResultSet not closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3316&quot;&gt;&lt;del&gt;DERBY-3316&lt;/del&gt;&lt;/a&gt;: Multiple statement executions &quot;);&lt;br/&gt;
          Connection conn = ij.startJBMS();&lt;/p&gt;

&lt;p&gt;          Statement s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;CREATE TABLE TAB (col1 varchar(32672))&quot;);&lt;br/&gt;
          PreparedStatement ps = conn.prepareStatement(&quot;INSERT INTO TAB VALUES&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.close();&lt;br/&gt;
          for (int i = 0; i &amp;lt; 2000; i++)&lt;/p&gt;
          {
                  s = conn.createStatement();
                  ResultSet rs = s.executeQuery(&quot;SELECT * from tab&quot;);
                  // drain the resultset
                  while (rs.next());
                  // With DERBY-3316, If I don&apos;t explicitly close the resultset or 
                  // statement, we get a leak.
                  //rs.close();
                  //s.close();
          }    
&lt;p&gt;          //Following 3 lines are to dump the heap&lt;br/&gt;
          System.gc(); &lt;br/&gt;
          com.ibm.jvm.Dump.HeapDump();&lt;br/&gt;
          com.ibm.jvm.Dump.JavaDump();&lt;br/&gt;
          // close the connection to free up all the result sets that our sloppy &lt;br/&gt;
          // user didn&apos;t close.&lt;br/&gt;
          conn.close();&lt;br/&gt;
          conn = ij.startJBMS();&lt;br/&gt;
          s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;DROP TABLE TAB&quot;);&lt;br/&gt;
          s.close();&lt;br/&gt;
          conn.close();&lt;br/&gt;
       }&lt;/p&gt;</comment>
                            <comment id="12766122" author="mamtas" created="Thu, 15 Oct 2009 17:51:52 +0100"  >&lt;p&gt;On Aug 13th comment, I mentioned trying dumps *&lt;b&gt;after&lt;/b&gt;* we get out of 2000 iterations of executing the same query repeatedly. Looking back at the OOM failure, we get exception within the loop. Based on that, I changed the testDerby3316() in derbyStress as follows. In the code below, I added the dumps within the loop every 100 iterations rather than one dump outside of the loop. &lt;br/&gt;
    public static void testDerby3316() throws Exception {&lt;br/&gt;
          System.out.println(&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3316&quot; title=&quot;Leak in client if ResultSet not closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3316&quot;&gt;&lt;del&gt;DERBY-3316&lt;/del&gt;&lt;/a&gt;: Multiple statement executions &quot;);&lt;br/&gt;
          Connection conn = ij.startJBMS();&lt;/p&gt;

&lt;p&gt;          Statement s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;CREATE TABLE TAB (col1 varchar(32672))&quot;);&lt;br/&gt;
          PreparedStatement ps = conn.prepareStatement(&quot;INSERT INTO TAB VALUES&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.close();&lt;br/&gt;
          for (int i = 0; i &amp;lt; 2000; i++)&lt;br/&gt;
          {&lt;br/&gt;
                  s = conn.createStatement();&lt;br/&gt;
                  ResultSet rs = s.executeQuery(&quot;SELECT * from tab&quot;);&lt;br/&gt;
                  if (i%100 == 0) &lt;/p&gt;
{
                	  System.out.println(&quot;Iteration number &quot; + i);
                      System.gc();
//                      System.runFinalization();
                      com.ibm.jvm.Dump.HeapDump();
                      com.ibm.jvm.Dump.JavaDump();

                  }
&lt;p&gt;                  // drain the resultset&lt;br/&gt;
                  while (rs.next());&lt;br/&gt;
                  // With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3316&quot; title=&quot;Leak in client if ResultSet not closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3316&quot;&gt;&lt;del&gt;DERBY-3316&lt;/del&gt;&lt;/a&gt;, If I don&apos;t explicitly close the resultset or &lt;br/&gt;
                  // statement, we get a leak.&lt;br/&gt;
                  //rs.close();&lt;br/&gt;
                  //s.close();&lt;br/&gt;
          }    &lt;br/&gt;
          // close the connection to free up all the result sets that our sloppy &lt;br/&gt;
          // user didn&apos;t close.&lt;br/&gt;
          conn.close();&lt;br/&gt;
          conn = ij.startJBMS();&lt;br/&gt;
          s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;DROP TABLE TAB&quot;);&lt;br/&gt;
          s.close();&lt;br/&gt;
          conn.close();&lt;br/&gt;
       }&lt;/p&gt;

&lt;p&gt;With the code above, when I run it on my windows XP machine with ibm15, the number of org/apache/derby/client/net/NetStatement range from 2 to 102. But the results on vmware is that the number of org/apache/derby/client/net/NetStatement keep increasing in the dump every 100 iterations. It starts with about 4 objects and keeps going up by 100 and right about when the number of objects get to 940+ or so, it runs in OOM. The OOM errors are intermittent but whenever I saw them, it was always when it got to about that 900+ number.&lt;/p&gt;

&lt;p&gt;Talked to Mike about this behavior and he suggested that may be I try to put a sleep after the gc because depending on the system/vc, a call to gc may just schedule a background gc and not necessarily mean objects are being claimed when the call to gc returns. I will get that gc/sleep combo a try and see how that goes.&lt;/p&gt;</comment>
                            <comment id="12766423" author="mamtas" created="Fri, 16 Oct 2009 06:32:48 +0100"  >&lt;p&gt;Wanted to provide jvm versions for testing results above&lt;/p&gt;

&lt;p&gt;The jvm version on Windows XP is as follows&lt;br/&gt;
java version &quot;1.5.0&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build pwi32dev-20080315 (SR7))&lt;/p&gt;

&lt;p&gt;IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Windows XP x86-32 j9vmwi3223-20080315 (JIT enabled)&lt;br/&gt;
J9VM - 20080314_17962_lHdSMr&lt;br/&gt;
JIT  - 20080130_0718ifx2_r8&lt;br/&gt;
GC   - 200802_08)&lt;br/&gt;
JCL  - 20080314&lt;/p&gt;

&lt;p&gt;On vmware machine, the jvm version is as follows&lt;br/&gt;
java version &quot;1.5.0&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build pxi32devifx-20070806 (SR5a))&lt;br/&gt;
IBM J9 VM (build 2.3, J2RE 1.5.0 IBM J9 2.3 Linux x86-32 j9vmxi3223-20070426 (JIT enabled)&lt;br/&gt;
J9VM - 20070420_12448_lHdSMR&lt;br/&gt;
JIT  - 20070419_1806_r8&lt;br/&gt;
GC   - 200704_19)&lt;br/&gt;
JCL  - 20070725&lt;/p&gt;

&lt;p&gt;I will try to find if there is a newer version of 10.5 available on vmware machine&lt;/p&gt;</comment>
                            <comment id="12766623" author="mamtas" created="Fri, 16 Oct 2009 18:39:40 +0100"  >&lt;p&gt;I tried the combination of gc and sleep before doing the dump of heap and that &lt;b&gt;definitely&lt;/b&gt; helped with bringing down the number of objects on vmware. I also did not run into any OOM exceptions even after running the tests over 20times. To me, it esems like the issue is with garbage collection thread on vmware. I am still looking for a more updated IBM15 on vmware. Will run the tests on that jdk to see if it helps with garbage collection better.&lt;/p&gt;

&lt;p&gt;The new code that I tried looks as follows&lt;br/&gt;
    public static void testDerby3316() throws Exception {&lt;br/&gt;
          System.out.println(&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3316&quot; title=&quot;Leak in client if ResultSet not closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3316&quot;&gt;&lt;del&gt;DERBY-3316&lt;/del&gt;&lt;/a&gt;: Multiple statement executions &quot;);&lt;br/&gt;
          Connection conn = ij.startJBMS();&lt;/p&gt;

&lt;p&gt;          Statement s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;CREATE TABLE TAB (col1 varchar(32672))&quot;);&lt;br/&gt;
          PreparedStatement ps = conn.prepareStatement(&quot;INSERT INTO TAB VALUES&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.setString(1,&quot;hello&quot;);&lt;br/&gt;
          ps.executeUpdate();&lt;br/&gt;
          ps.close();&lt;br/&gt;
          for (int i = 0; i &amp;lt; 2000; i++)&lt;br/&gt;
          {&lt;br/&gt;
                  s = conn.createStatement();&lt;br/&gt;
                  ResultSet rs = s.executeQuery(&quot;SELECT * from tab&quot;);&lt;br/&gt;
                  if (i%100 == 0) &lt;/p&gt;
{
                	  System.out.println(&quot;Iteration number &quot; + i);
                      System.gc();
//                      System.runFinalization();
                      Thread.sleep(1000);
                      com.ibm.jvm.Dump.HeapDump();
                      com.ibm.jvm.Dump.JavaDump();

                  }
&lt;p&gt;                  // drain the resultset&lt;br/&gt;
                  while (rs.next());&lt;br/&gt;
                  // With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3316&quot; title=&quot;Leak in client if ResultSet not closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3316&quot;&gt;&lt;del&gt;DERBY-3316&lt;/del&gt;&lt;/a&gt;, If I don&apos;t explicitly close the resultset or &lt;br/&gt;
                  // statement, we get a leak.&lt;br/&gt;
                  //rs.close();&lt;br/&gt;
                  //s.close();&lt;br/&gt;
          }    &lt;br/&gt;
          // close the connection to free up all the result sets that our sloppy &lt;br/&gt;
          // user didn&apos;t close.&lt;br/&gt;
          conn.close();&lt;br/&gt;
          conn = ij.startJBMS();&lt;br/&gt;
          s = conn.createStatement();&lt;br/&gt;
          s.executeUpdate(&quot;DROP TABLE TAB&quot;);&lt;br/&gt;
          s.close();&lt;br/&gt;
          conn.close();&lt;br/&gt;
       }&lt;/p&gt;</comment>
                            <comment id="12768422" author="mamtas" created="Wed, 21 Oct 2009 21:27:40 +0100"  >&lt;p&gt;I was able to get hold of IBM1.5 SR10 on both my windows XP laptop and on the vmware machine and in both places, the behavior stayed the same which is no OOM problems on windows XP but intermittent OOMs on vmware continued. Whenever we ran into OOM on vmware, it would be close to after 900 to 1000 iterations of ResultSet rs = s.executeQuery(&quot;SELECT * from tab&quot;); that we would get OOM. And the number of NetStatement objects in the heapdumps consistently is over 900+ when we run into OOM.&lt;/p&gt;

&lt;p&gt;I will wait to hear what community thinks of these experiments. It definitely appears to be specific to this vmware platform which has single processor.&lt;/p&gt;</comment>
                            <comment id="12768460" author="kmarsden" created="Wed, 21 Oct 2009 22:11:43 +0100"  >&lt;p&gt;Mamta, if you put a sleep and force gc()  every 100 iterations, does the problem occur on the vmware machien?&lt;/p&gt;</comment>
                            <comment id="12768554" author="mamtas" created="Thu, 22 Oct 2009 04:36:42 +0100"  >&lt;p&gt;On vmware, I have not run into OOM if there is sleep and gc after every 100 iterations.&lt;/p&gt;</comment>
                            <comment id="12768767" author="kmarsden" created="Thu, 22 Oct 2009 18:24:21 +0100"  >&lt;p&gt;My conclusion then would be that there is not a Derby bug here.  I am not sure, however,  if the JVM should detect that we are about to run out of memory and make the active thread yield and allow the garbage collector to do its work before continuing.&lt;/p&gt;


</comment>
                            <comment id="12770306" author="mamtas" created="Tue, 27 Oct 2009 00:30:07 +0000"  >&lt;p&gt;After the work on this jira entry, it appears that this more than likely is a jvm/platform issue rather than a Derby bug. Closing the jira based on this.&lt;/p&gt;</comment>
                            <comment id="13046192" author="kmarsden" created="Wed, 8 Jun 2011 21:25:42 +0100"  >&lt;p&gt;I was able to reproduce the problem 38 out of 50 runs by restricting the test to a single CPU with:&lt;/p&gt;


&lt;p&gt;taskset  0x00000001 java -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest jdbcapi/derbyStress.java&lt;/p&gt;

&lt;p&gt;I will play with sleep values to see what is appropriate to let the finalizer catch up.&lt;/p&gt;
</comment>
                            <comment id="13057815" author="kmarsden" created="Thu, 30 Jun 2011 14:29:21 +0100"  >&lt;p&gt;Since we have only ever seen this on the IBM jvms, I started to wonder if this might in fact be a jvm bug. I wondered if perhaps the garbage collector should wait until the finalizer catches up before throwing the out of memory.  To experiment I tried making a class with a sleep in the finalize method to see if the Sun JVM waits but it does not wait in this case and runs out of memory with the sleep.  Here is the code I used:&lt;br/&gt;
public class GCWontWait {&lt;/p&gt;

&lt;p&gt;    private static StringBuffer BIG_STRING_BUFFER;&lt;/p&gt;

&lt;p&gt;    static &lt;/p&gt;
{
	BIG_STRING_BUFFER  = new StringBuffer(30000);
	for (int i = 0; i&amp;lt;1000; i++)
	    BIG_STRING_BUFFER.append(&quot;123456789012345678901234567890&quot;);
    }


&lt;p&gt;    public static void main(String[] args) {&lt;/p&gt;

&lt;p&gt;	SlowString s;&lt;br/&gt;
	for (int i=0;i &amp;lt; 100000;i++) &lt;/p&gt;
{
	    s = new SlowString(BIG_STRING_BUFFER);
	    if ((i % 100) == 0)
		System.out.println(&quot;i = &quot; + i);
	}


&lt;p&gt;    }&lt;/p&gt;


&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public  class SlowString  {&lt;/p&gt;

&lt;p&gt;	String v;&lt;/p&gt;

&lt;p&gt;	public SlowString(StringBuffer s) &lt;/p&gt;
{
	    v = new String(s);
	}

&lt;p&gt;    public void finalize() throws Throwable &lt;/p&gt;
{
	Thread.sleep(10);
	}
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;java -Xmx16m -cp . GCWontWait&lt;/p&gt;

&lt;p&gt;With the Sun JVM failed with OOM after only 200 instantiations&lt;br/&gt;
java version &quot;1.6.0_21&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_21-b07)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode)&lt;/p&gt;

&lt;p&gt;IBM JDK 1.6  actually did much better on the allocation and instantiated all 100000 objects.&lt;br/&gt;
java version &quot;1.6.0&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pwi3260sr9fp1-20110208_03(SR9 FP1))&lt;br/&gt;
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Windows XP x86-32 jvmwi3260sr9-201102&lt;br/&gt;
03_74623 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - 20110203_074623&lt;br/&gt;
JIT  - r9_20101028_17488ifx3&lt;br/&gt;
GC   - 20101027_AA)&lt;br/&gt;
JCL  - 20110203_01&lt;/p&gt;

&lt;p&gt;I am not sure what this means except that Sun doesn&apos;t wait for the finalizer either. Maybe the IBM jvm is just reusing the duplicate strings more efficiently.&lt;/p&gt;


</comment>
                            <comment id="13057832" author="kmarsden" created="Thu, 30 Jun 2011 15:04:33 +0100"  >&lt;p&gt;Yes if I make each one of the strings slightly different IBM also fails after about 200 instantiations.&lt;br/&gt;
$ java -Xmx16M -cp . GCWontWait&lt;br/&gt;
i = 0&lt;br/&gt;
i = 100&lt;br/&gt;
i = 200&lt;br/&gt;
JVMDUMP006I Processing dump event &quot;systhrow&quot;, detail &quot;java/lang/OutOfMemoryError&lt;br/&gt;
&quot; - please wait.&lt;/p&gt;</comment>
                            <comment id="13058573" author="kmarsden" created="Fri, 1 Jul 2011 15:30:00 +0100"  >&lt;p&gt;For trunk, this issue is fixed with the conversion of the test to JUnit &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3337&quot; title=&quot;convert jdbcapi/derbyStress.java to JUnit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3337&quot;&gt;&lt;del&gt;DERBY-3337&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Changes from 1141769/1141923 to 1141927:&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
r1141924 | kmarsden | 2011-07-01 14:54:30 +0200 (Fri, 01 Jul 2011) | 7 lines&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3337&quot; title=&quot;convert jdbcapi/derbyStress.java to JUnit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3337&quot;&gt;&lt;del&gt;DERBY-3337&lt;/del&gt;&lt;/a&gt; convert jdbcapi/derbyStress.java to JUnit&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4200&quot; title=&quot;client side OutOfMemoryError running derbnetclientmats:jdbcapi/derbyStress&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4200&quot;&gt;&lt;del&gt;DERBY-4200&lt;/del&gt;&lt;/a&gt; client side OutOfMemoryError running derbnetclientmats:jdbcapi/derbyStress&lt;/p&gt;

&lt;p&gt;Convert test to JUnit and also run the finalizer periodically if freeMemory() falls below 500K.  The converted tests is no longer called derbyStress. It is now memory.MemoryLeakFixes and runs with the junit-lowmem target or can be run directly with junit.textui.TestRunner with -Xmx16M.  &lt;/p&gt;


&lt;p&gt;  I will leave it open for a bit while I backport to 10.5&lt;/p&gt;</comment>
                            <comment id="13060015" author="kmarsden" created="Tue, 5 Jul 2011 18:18:50 +0100"  >&lt;p&gt;reopening because ended up being a test issue.&lt;/p&gt;</comment>
                            <comment id="13060022" author="kmarsden" created="Tue, 5 Jul 2011 18:23:34 +0100"  >&lt;p&gt;The problem in this case was that the finalizer work was not complete when the OOM was thrown. With &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3337&quot; title=&quot;convert jdbcapi/derbyStress.java to JUnit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3337&quot;&gt;&lt;del&gt;DERBY-3337&lt;/del&gt;&lt;/a&gt; the conversion of derbyStress, the test was changed to call Runtime.runFinalization() if it ran low on memory thus avoiding the OOM.&lt;br/&gt;
The new test has been moved to the memory suite and is called MemoryLeakFixesTest.  The memory suite should be run with -Xmx16M or with the ant junit-lowmem target to make sure it runs with a low maximum heap.&lt;/p&gt;</comment>
                            <comment id="13685226" author="knutanders" created="Mon, 17 Jun 2013 10:19:23 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12386656">DERBY-3337</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12406800" name="heapdump.20090428.084024.25679.phd" size="2398722" author="kmarsden" created="Wed, 29 Apr 2009 17:29:51 +0100"/>
                            <attachment id="12406799" name="javacore.20090428.084024.25679.txt" size="171941" author="kmarsden" created="Wed, 29 Apr 2009 17:29:51 +0100"/>
                            <attachment id="12416449" name="vmware10_5_SR10HeapDump.phd" size="545493" author="mamtas" created="Thu, 13 Aug 2009 16:08:35 +0100"/>
                            <attachment id="12416448" name="vmware10_5_SR7HeapDump.phd" size="1365774" author="mamtas" created="Thu, 13 Aug 2009 16:08:35 +0100"/>
                            <attachment id="12416447" name="windows10_5_HeapDump.phd" size="341740" author="mamtas" created="Thu, 13 Aug 2009 16:08:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Jul 2009 18:07:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24096</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0etj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36219</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>