<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:31 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4315/DERBY-4315.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4315] Attempt to reuse streams in client on insert gives protocol exception and inserts wrong data</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4315</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If a user attempts to reuse a stream set as a parameter to a prepared statement, the statement execution should fail with SQL State XJ001.  Instead client fails with a protocol error and inserts wrong data. See the attached java program ReproReuseStream.java for a reproduction.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/reusestream&amp;#93;&lt;/span&gt; java ReproReuseStream&lt;br/&gt;
Insert row 1&lt;br/&gt;
Try to insert row 2 with reused streams&lt;br/&gt;
java.sql.SQLException: Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been&lt;br/&gt;
 padded with 0x0.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:399)&lt;br/&gt;
        at ReproReuseStream.main(ReproReuseStream.java:41)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Network protocol error: end of stream prematurely reached, parameter&lt;br/&gt;
 #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
        at org.apache.derby.client.net.Request.writePlainScalarStream(Request.java:490)&lt;br/&gt;
        at org.apache.derby.client.net.Request.writeScalarStream(Request.java:264)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:951)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:147)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:178)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1801)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2031)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:404)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:390)&lt;br/&gt;
        ... 1 more&lt;br/&gt;
Go ahead and commit so we can see the wrong data.&lt;br/&gt;
ID         |MNAME&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;MVALUE     &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;BYTEDATA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;CHARDATA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
--------------------------------------------------&lt;br/&gt;
1          |mname&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&lt;br/&gt;
3636363636363636363636363636363636363636&amp;amp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&lt;br/&gt;
ccccccccccccccccccccccccccccccccccccccccccccccccc&amp;amp;&lt;br/&gt;
2          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;mname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0          &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&lt;br/&gt;
0000000000000000000000000000000000000000&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;                                                 &amp;amp;&lt;/p&gt;

&lt;p&gt;To workaround the issue users should not attempt to reuse streams but we should give a better message and not insert wrong data.&lt;/p&gt;

&lt;p&gt;The code was extracted from StreamingColumnTest testDerby500 but the commits were removed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12430835">DERBY-4315</key>
            <summary>Attempt to reuse streams in client on insert gives protocol exception and inserts wrong data</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_backport_reject_10_6</label>
                    </labels>
                <created>Sat, 18 Jul 2009 02:10:01 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:35 +0100</updated>
                            <resolved>Wed, 16 Feb 2011 23:32:10 +0000</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.7.1.1</fixVersion>
                    <fixVersion>10.8.1.2</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12732812" author="kmarsden" created="Sat, 18 Jul 2009 02:12:18 +0100"  >&lt;p&gt;Right now this bocks the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4312&quot; title=&quot;SQLException XJ215 on insert  with setCharacterStream() and autocommit off in mailjdbc test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4312&quot;&gt;&lt;del&gt;DERBY-4312&lt;/del&gt;&lt;/a&gt; fix because StreamingColumnTest fails.  &lt;/p&gt;</comment>
                            <comment id="12732813" author="kmarsden" created="Sat, 18 Jul 2009 02:13:41 +0100"  >&lt;p&gt;Attaching reproduction for this issue.  Start network server and run java ReproReuseStream&lt;/p&gt;</comment>
                            <comment id="12732816" author="kmarsden" created="Sat, 18 Jul 2009 02:26:01 +0100"  >&lt;p&gt;This is perhaps a more specific case of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2017&quot; title=&quot;Client driver can insert and commit partial data when a LOB stream throws IOException or does not match the specified length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2017&quot;&gt;&lt;del&gt;DERBY-2017&lt;/del&gt;&lt;/a&gt;, but maybe there is something specific that can be done for stream reuse if a general solution is too hard.  &lt;/p&gt;</comment>
                            <comment id="12732818" author="kmarsden" created="Sat, 18 Jul 2009 02:43:36 +0100"  >&lt;p&gt;verified back to 10.1&lt;/p&gt;</comment>
                            <comment id="12831255" author="dagw" created="Tue, 9 Feb 2010 02:07:38 +0000"  >&lt;p&gt;I think it would be OK if Derby just throws an exception indicating EOF here, since we probably won&apos;t support using the same stream for two placeholders in a prepared statement either. &lt;/p&gt;</comment>
                            <comment id="12910163" author="kristwaa" created="Thu, 16 Sep 2010 15:15:18 +0100"  >&lt;p&gt;Note that from 10.6 (both client and server must be 10.6 or later) padded data won&apos;t be inserted into the database. This was fixed by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2017&quot; title=&quot;Client driver can insert and commit partial data when a LOB stream throws IOException or does not match the specified length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2017&quot;&gt;&lt;del&gt;DERBY-2017&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12933520" author="rhillegas" created="Thu, 18 Nov 2010 18:47:59 +0000"  >&lt;p&gt;The fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2017&quot; title=&quot;Client driver can insert and commit partial data when a LOB stream throws IOException or does not match the specified length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2017&quot;&gt;&lt;del&gt;DERBY-2017&lt;/del&gt;&lt;/a&gt; appears to have stopped Derby from inserting bogus data. The protocol error remains, though. Here&apos;s what the repro produces now:&lt;/p&gt;

&lt;p&gt;Drop exception ok:&apos;DROP TABLE&apos; cannot be performed on &apos;TEST&apos; because it does not exist.&lt;br/&gt;
Insert row 1 &lt;br/&gt;
Try to insert row 2 with reused streams &lt;br/&gt;
java.sql.SQLException: Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:403)&lt;br/&gt;
	at ReproReuseStream.main(ReproReuseStream.java:41)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
	at org.apache.derby.client.net.Request.writePlainScalarStream(Request.java:339)&lt;br/&gt;
	at org.apache.derby.client.net.Request.writeScalarStream(Request.java:247)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:983)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:152)&lt;br/&gt;
	at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:178)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1791)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2021)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:408)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:394)&lt;br/&gt;
	... 1 more&lt;br/&gt;
Go ahead and commit so we can see the wrong data.&lt;br/&gt;
ID         |MNAME                                                                                                                           |MVALUE     |BYTEDATA                                                                                                                        |CHARDATA                                                                                                                        &lt;br/&gt;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
1          |mname                                                                                                                           |0          |6363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&amp;amp;|ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&amp;amp;&lt;/p&gt;</comment>
                            <comment id="12933534" author="rhillegas" created="Thu, 18 Nov 2010 19:29:48 +0000"  >&lt;p&gt;Attaching a revised version of the repro. This version runs the test on both the embedded and client/server drivers. To run this version, you need to specify the port which the server is listening on:&lt;/p&gt;

&lt;p&gt;java ReproReuseStream 8246&lt;/p&gt;

&lt;p&gt;########################################################&lt;br/&gt;
#&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;jdbc:derby:memory:db1;create=true&lt;br/&gt;
#&lt;br/&gt;
########################################################&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Drop exception ok:&apos;DROP TABLE&apos; cannot be performed on &apos;TEST&apos; because it does not exist.&lt;br/&gt;
Insert row 1 &lt;br/&gt;
Try to insert row 2 with reused streams &lt;br/&gt;
Caught SQLException. SQLState = XSDA4&lt;br/&gt;
An unexpected exception was thrown&lt;br/&gt;
java.sql.SQLException: An unexpected exception was thrown&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2284)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1333)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308)&lt;br/&gt;
	at ReproReuseStream.execute(ReproReuseStream.java:64)&lt;br/&gt;
	at ReproReuseStream.main(ReproReuseStream.java:27)&lt;br/&gt;
Caused by: java.sql.SQLException: An unexpected exception was thrown&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
	... 11 more&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;Stream has already been read and end-of-file reached and cannot be re-used.: java.io.EOFException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:408)&lt;br/&gt;
	... 9 more&lt;br/&gt;
Caused by: java.io.EOFException: Stream has already been read and end-of-file reached and cannot be re-used.&lt;br/&gt;
	at org.apache.derby.iapi.types.RawToBinaryFormatStream.read(RawToBinaryFormatStream.java:254)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.MemByteHolder.write(MemByteHolder.java:146)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(RememberBytesInputStream.java:135)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6197)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logRow(StoredPage.java:3972)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(InsertOperation.java:370)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.InsertOperation.&amp;lt;init&amp;gt;(InsertOperation.java:115)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.LoggableActions.actionInsert(LoggableActions.java:139)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow(BasePage.java:602)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertAtSlot(BasePage.java:523)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.insertAtSlot(StoredPage.java:6771)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insert(BasePage.java:629)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:255)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(HeapController.java:599)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:452)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1028)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:505)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1241)&lt;br/&gt;
	... 4 more&lt;br/&gt;
Go ahead and commit so we can see the wrong data.&lt;br/&gt;
ID         |MNAME                                                                                                                           |MVALUE     |BYTEDATA                                                                                                                        |CHARDATA                                                                                                                        &lt;br/&gt;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
1          |mname                                                                                                                           |0          |6363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&amp;amp;|ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&amp;amp;&lt;/p&gt;

&lt;p&gt;########################################################&lt;br/&gt;
#&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;jdbc:derby://localhost:8246/memory:db2;create=true&lt;br/&gt;
#&lt;br/&gt;
########################################################&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Insert row 1 &lt;br/&gt;
Try to insert row 2 with reused streams &lt;br/&gt;
Caught SQLException. SQLState = XN017&lt;br/&gt;
Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
java.sql.SQLException: Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
	at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96)&lt;br/&gt;
	at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:403)&lt;br/&gt;
	at ReproReuseStream.execute(ReproReuseStream.java:64)&lt;br/&gt;
	at ReproReuseStream.main(ReproReuseStream.java:28)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Network protocol error: end of stream prematurely reached, parameter #4.  Remaining data has been padded with 0x0.&lt;br/&gt;
	at org.apache.derby.client.net.Request.writePlainScalarStream(Request.java:339)&lt;br/&gt;
	at org.apache.derby.client.net.Request.writeScalarStream(Request.java:247)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(NetStatementRequest.java:983)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:152)&lt;br/&gt;
	at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:178)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1791)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2021)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:408)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:394)&lt;br/&gt;
	... 2 more&lt;br/&gt;
Go ahead and commit so we can see the wrong data.&lt;br/&gt;
ID         |MNAME                                                                                                                           |MVALUE     |BYTEDATA                                                                                                                        |CHARDATA                                                                                                                        &lt;br/&gt;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
1          |mname                                                                                                                           |0          |6363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636&amp;amp;|ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&amp;amp;&lt;/p&gt;</comment>
                            <comment id="12933876" author="rhillegas" created="Fri, 19 Nov 2010 17:25:05 +0000"  >&lt;p&gt;Attaching StreamError.java. This class shows another error related to the exception processing in this part of our network driver.&lt;/p&gt;

&lt;p&gt;The attached StreamError class raises an ArrayIndexOutOfBoundsException half way through reading the input stream. All sorts of Exceptions could be raised by a user-written InputStream. But the network client only looks for IOExceptions. If the network client sees an IOException, then you get the behavior described by this bug report: the user sees a puzzling protocol error when there is no real protocol error. The error is in the InputStream which is running purely on the client-side. If the InputStream raises an exeption other than an IOException, then a protocol error does not return to the user. Instead, the error raised by the stream percolates up to higher levels of exception management in the client driver. However, in that case a real protocol error follows and you see two consequences:&lt;/p&gt;

&lt;p&gt;1) In the server log you see the following protocol error:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.drda.DRDAProtocolException: Execution failed because of a Distributed Protocol Error:  DRDA_Disconnect; CODPNT arg  = 0; Error Code Value = 0,DDMReader.fill(),InputStream.read(),insufficient data,*&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAProtocolException.newDisconnectException(DRDAProtocolException.java:325)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.markCommunicationsFailure(DRDAConnThread.java:503)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.markCommunicationsFailure(DRDAConnThread.java:472)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMReader.fill(DDMReader.java:1965)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMReader.ensureALayerDataInBuffer(DDMReader.java:1684)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMReader.readDSSContinuationHeader(DDMReader.java:1225)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMReader.readLOBChunk(DDMReader.java:1122)&lt;br/&gt;
	at org.apache.derby.impl.drda.DDMReader.readLOBContinuationStream(DDMReader.java:1099)&lt;br/&gt;
	at org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.nextBuffer(StandardEXTDTAReaderInputStream.java:183)&lt;br/&gt;
	at org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.read(StandardEXTDTAReaderInputStream.java:116)&lt;br/&gt;
	at java.io.FilterInputStream.read(FilterInputStream.java:116)&lt;br/&gt;
	at org.apache.derby.iapi.services.io.LimitInputStream.read(LimitInputStream.java:74)&lt;br/&gt;
	at org.apache.derby.iapi.types.RawToBinaryFormatStream.read(RawToBinaryFormatStream.java:273)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.MemByteHolder.write(MemByteHolder.java:146)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(RememberBytesInputStream.java:135)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logColumn(StoredPage.java:6197)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.logLongColumn(StoredPage.java:6044)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(InsertOperation.java:367)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.InsertOperation.&amp;lt;init&amp;gt;(InsertOperation.java:115)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.LoggableActions.actionInsert(LoggableActions.java:139)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertLongColumn(BasePage.java:938)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(BasePage.java:763)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insert(BasePage.java:632)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.doInsert(HeapController.java:307)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.insert(HeapController.java:575)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(RowChangerImpl.java:457)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1028)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:505)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1241)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1341)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:672)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAConnThread.java:4316)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(DRDAConnThread.java:4133)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:1021)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:294)&lt;/p&gt;

&lt;p&gt;2) After that, an attempt to shutdown the server results in the following error on the client (the next attempt to shutdown the server succeeds, however):&lt;/p&gt;

&lt;p&gt;Fri Nov 19 09:00:38 PST 2010 : Invalid reply header from network server: Invalid string &lt;/p&gt;</comment>
                            <comment id="12933878" author="rhillegas" created="Fri, 19 Nov 2010 17:31:51 +0000"  >&lt;p&gt;Attaching derby-4315-01-aa-regularizeExceptionHandling.diff. This patch causes the offending logic in the network client to catch all exceptions from InputStreams, and not just IOExceptions. Running regression tests now.&lt;/p&gt;

&lt;p&gt;After applying this patch, we will not see protocol errors when InputStream.read() raises an exception other than an IOException. However, those other exceptions will be wrapped with the bogus protocol error status described by this bug.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/net/Request.java&lt;/p&gt;</comment>
                            <comment id="12933960" author="rhillegas" created="Fri, 19 Nov 2010 20:24:46 +0000"  >&lt;p&gt;Attaching a second rev of this initial patch, derby-4315-01-ab-regularizeExceptionHandling.diff. The tests ran cleanly except for a suspicious error in NetworkServerMBeanTest. I have revamped the patch to improve error messages for the cases touched by this patch. I will re-run the tests.&lt;/p&gt;

&lt;p&gt;The error messages no longer falsely claim that a protocol error occurred. In addition, I tried to clarify the description of how the client driver recovers from the exception.&lt;/p&gt;

&lt;p&gt;This is the suspicious error I saw in NetworkServerMBeanTest. When I ran the test standalone, I saw no errors. However, we know from past experience that NetworkServerMBeanTest is sensitive to interference from tests which run before it:&lt;/p&gt;

&lt;p&gt;1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-012c-658f-2b31-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:109)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-012c-658f-2b31-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 8871,  Failures: 0,  Errors: 1&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M      java/client/org/apache/derby/client/net/Request.java&lt;/p&gt;</comment>
                            <comment id="12934075" author="rhillegas" created="Sat, 20 Nov 2010 01:49:22 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-4315-01-ab-regularizeExceptionHandling.diff except for the ping test which regularly fails on mac os x.&lt;/p&gt;</comment>
                            <comment id="12934462" author="rhillegas" created="Mon, 22 Nov 2010 13:44:52 +0000"  >&lt;p&gt;Committed derby-4315-01-ab-regularizeExceptionHandling.diff at subversion revision 1037716.&lt;/p&gt;</comment>
                            <comment id="12934471" author="rhillegas" created="Mon, 22 Nov 2010 14:12:22 +0000"  >&lt;p&gt;Attaching derby-4315-02-aa-cleanupEndOfStreamMessage.diff. This patch cleans up the error reporting in the case when the InputStream at the client has fewer bytes than expected. The message no longer says that there is a protocol error. Running tests now.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;</comment>
                            <comment id="12934502" author="rhillegas" created="Mon, 22 Nov 2010 16:20:30 +0000"  >&lt;p&gt;Committed derby-4315-02-aa-cleanupEndOfStreamMessage.diff at subversion revision 1037764. The tests passed cleanly for me although I did see the following exception on the console while running the JUnit tests:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;DRDAConnThread_508&quot; org.apache.derby.iapi.error.ShutdownException: &lt;br/&gt;
	at org.apache.derby.iapi.services.context.ContextManager.checkInterrupt(ContextManager.java:437)&lt;br/&gt;
	at org.apache.derby.iapi.services.context.ContextManager.getContext(ContextManager.java:155)&lt;br/&gt;
	at org.apache.derby.iapi.services.context.ContextService.getContextOrNull(ContextService.java:249)&lt;br/&gt;
	at org.apache.derby.iapi.util.InterruptStatus.restoreIntrFlagIfSeen(InterruptStatus.java:158)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:356)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2284)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions(EmbedPreparedStatement.java:261)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.close(EmbedStatement.java:307)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.close(DRDAStatement.java:1027)&lt;br/&gt;
	at org.apache.derby.impl.drda.Database.close(Database.java:364)&lt;br/&gt;
	at org.apache.derby.impl.drda.Session.close(Session.java:115)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.closeSession(DRDAConnThread.java:8289)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:315)&lt;/p&gt;</comment>
                            <comment id="12934517" author="rhillegas" created="Mon, 22 Nov 2010 17:18:44 +0000"  >&lt;p&gt;Ported 1037716 from trunk to 10.7 branch at subversion revision 1037776.&lt;/p&gt;

&lt;p&gt;Ported 1037764 from trunk to 10.7 branch at subversion revision 1037777.&lt;/p&gt;</comment>
                            <comment id="12934519" author="rhillegas" created="Mon, 22 Nov 2010 17:22:45 +0000"  >&lt;p&gt;I believe that both parts of this bug have been addressed now. The bad row is not being inserted anymore and the EOF error no longer asserts that there was a protocol error.&lt;/p&gt;</comment>
                            <comment id="12989886" author="kmarsden" created="Wed, 2 Feb 2011 23:41:02 +0000"  >&lt;p&gt;Reopen for backport.&lt;/p&gt;</comment>
                            <comment id="12995573" author="kmarsden" created="Wed, 16 Feb 2011 23:14:30 +0000"  >&lt;p&gt;While the commit with this issue merges cleanly to 10.5, it is I think a patch to regularize the exception handling between server and client.  Since it changes the SQLState, I don&apos;t think it is such a good candidate for backport. The actual fix is with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2017&quot; title=&quot;Client driver can insert and commit partial data when a LOB stream throws IOException or does not match the specified length&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2017&quot;&gt;&lt;del&gt;DERBY-2017&lt;/del&gt;&lt;/a&gt; which looks too hairy to me if not impossible to backport to 10.5 as it makes some protocol changes that might be problematic with mixed version, but I have not looked that closely.  I think I will take this one off the backport list.  I am thinking I should introduce a label for tracking issues that have been considered and then rejected for backport. I will send a separate mail to derby-dev for that.&lt;/p&gt;</comment>
                            <comment id="12995580" author="kmarsden" created="Wed, 16 Feb 2011 23:32:10 +0000"  >&lt;p&gt;Resolve issue. Decided against backport.&lt;/p&gt;</comment>
                            <comment id="13685290" author="knutanders" created="Mon, 17 Jun 2013 10:19:35 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12354260">DERBY-2017</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12430773">DERBY-4312</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12459939" name="ReproReuseStream.java" size="3449" author="rhillegas" created="Thu, 18 Nov 2010 19:29:48 +0000"/>
                            <attachment id="12413900" name="ReproReuseStream.java" size="2284" author="kmarsden" created="Sat, 18 Jul 2009 02:13:41 +0100"/>
                            <attachment id="12460023" name="StreamError.java" size="3642" author="rhillegas" created="Fri, 19 Nov 2010 17:25:05 +0000"/>
                            <attachment id="12460024" name="derby-4315-01-aa-regularizeExceptionHandling.diff" size="1012" author="rhillegas" created="Fri, 19 Nov 2010 17:31:51 +0000"/>
                            <attachment id="12460048" name="derby-4315-01-ab-regularizeExceptionHandling.diff" size="5004" author="rhillegas" created="Fri, 19 Nov 2010 20:24:46 +0000"/>
                            <attachment id="12460171" name="derby-4315-02-aa-cleanupEndOfStreamMessage.diff" size="726" author="rhillegas" created="Mon, 22 Nov 2010 14:12:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 9 Feb 2010 02:07:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24179</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    <customfieldvalue key="10427"><![CDATA[Workaround attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0e2f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36097</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>