<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:29:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2304/DERBY-2304.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2304] Convert derbynet/callable.java to junit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2304</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Convert the derbynet.callable.java test to the junit framework.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12362226">DERBY-2304</key>
            <summary>Convert derbynet/callable.java to junit</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jta">Jean T. Anderson</assignee>
                                    <reporter username="jta">Jean T. Anderson</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Feb 2007 18:03:06 +0000</created>
                <updated>Mon, 5 Mar 2007 17:06:41 +0000</updated>
                            <resolved>Mon, 5 Mar 2007 17:06:41 +0000</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12471056" author="jta" created="Wed, 7 Feb 2007 18:13:03 +0000"  >&lt;p&gt;I&apos;m working on a CallableTest.java to convert derbynet/callable.java to junit. derby-2304-preview.diff is way incomplete, but I&apos;m looking for feedback on the overall structure and implementation so far. I summarized issues down below.&lt;/p&gt;

&lt;p&gt;So far, CallableTest.java implements just 3 tests (and only runs 2 tests &amp;#8211; see issue #4 down below).&lt;/p&gt;

&lt;p&gt;The code tries to model itself after DatabaseMetaDataTest.java for reducing try {} clutter, and after ProcedureTest.java for its basic setup, which creates all the SQL objects up front and doesn&apos;t tear them down &amp;#8211; and also enables one of the tests to run in the client framework (see issue #1). I may have gone overboard in some cases and misunderstood stuff so please be picky!&lt;/p&gt;

&lt;p&gt;I&apos;m reorganizing the original test in the following ways:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Move it from derbynet to jdbcacpi because I think it should be able to run under both embedded and client frameworks.&lt;/li&gt;
	&lt;li&gt;Carve it up into smaller tests.&lt;/li&gt;
	&lt;li&gt;Create more descriptive function/procedure/method/table names like ProcedureTest.java does; for example, instead of &quot;CREATE FUNCTION method2&quot; calling &quot;method2&quot; I have &quot;CREATE FUNCTION ONE_IN_ONE_OUT_FUNC&quot; which calls &quot;OneInOneOutFunc&quot; and the method that tests it is &quot;testOneInOneOutFunc&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I ran into these issues:&lt;/p&gt;

&lt;p&gt;1) derbynet/callable.java&lt;br/&gt;
Line 92 of the original test comments out the cleanup:&lt;br/&gt;
     // stmt.execute(&quot;DROP FUNCTION method2&quot;);&lt;br/&gt;
I discovered that this DROP statement works fine in embedded, but raises this exception in the client:&lt;/p&gt;

&lt;p&gt;&apos;DROP ROUTINE&apos; cannot be performed on object &apos;ONE_IN_INE_OUT_FUNC&apos; because there is an open resultSet dependent on that object.&quot;&lt;/p&gt;

&lt;p&gt;Does this error ring a bell with anyone?&lt;/p&gt;

&lt;p&gt;ProcedureTest.java sets up everything at the start and there is no teardown, so that&apos;s the approach I adopted with CallableTest.java. That approach enables this test to run without error (the error did occur with my first attempt that implemented create/drops in setup() and tearDown() methods). But I&apos;m uncomfortable about masking the DROP error, wonder if the current strategy will be solid for all test scenarios.&lt;/p&gt;

&lt;p&gt;2) Because of the client problem in #1 I initially set up baseSuite() to not run   that test in client; however, I discovered that usingEmbedded() is always true, so I did a &quot;Hack!&quot; doing a string compare on embedded / client. Is this the wrong place to exclude the run of a specific test for a given framework?&lt;/p&gt;

&lt;p&gt;3) I created a local assertEquals(byte[] b1, byte[] b2) for the byte comparison in testUpdateLongBinaryProc() . Is there already a way to get support for byte comparisons?  I didn&apos;t spot any. If not, is this something I should move to BaseJDBCTestCase.java (and also completely implement)?&lt;/p&gt;

&lt;p&gt;4) testBigDecimalInAndOutParameters() doesn&apos;t get called yet &amp;#8211; I need to spin up on how to do assertEquals with BigDecimal.&lt;/p&gt;

&lt;p&gt;For example, this assert:&lt;br/&gt;
assertEquals(&quot;OUT 2&quot;, new BigDecimal(33.3330), cs.getBigDecimal(2));&lt;/p&gt;

&lt;p&gt;generates this:&lt;br/&gt;
OUT 2 expected:&amp;lt;33.33299999999999999840838&amp;gt; but was:&amp;lt;33.3330&amp;gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll probably start a thread on derby-dev to ask about the original objectives of that test. I grew a little puzzled looking at it.&lt;/p&gt;</comment>
                            <comment id="12471068" author="djd" created="Wed, 7 Feb 2007 19:01:16 +0000"  >&lt;p&gt;A1) all the fixtures will be run with autocommit false, since you set that in the setup method. That may be leaving held result sets open though I couldn&apos;t see any missing closes, so maybe it&apos;s a bug.&lt;br/&gt;
I wasn&apos;t clear what you meant on no teardown, your CleanDatabaseTestSetup method has a tearDown method that will drop all the objects in the database, so if the test is passing the routines must be being dropped without error.&lt;/p&gt;

&lt;p&gt;A2)  The suite method is correct, the concept of being in a framework doesn&apos;t really exist anymore, at least not during the calls to suite(). The class needs to define what primary configurations the test will run in, this is driven by the suite method itself, not be any external framework setting. Thus the test is saying I want to run these fixtures in embedded and these in client/server.&lt;/p&gt;

&lt;p&gt;Note also that fixtures do not have to begin with test. One can use &apos;test&apos; for methods that run in both configurations and thus use defaultSuite and then add other fixtures explicitly, e.g. embededdTestOneInOneOutFunc. If only one or two fixtures are &quot;abnormal&quot; then this is a better approach than adding all fixtures explicitly.&lt;/p&gt;

&lt;p&gt;A3)  An alternative would be to use java.util.Arrays.equals(), something like&lt;/p&gt;

&lt;p&gt;assertTrue(Arrays.equals(b1, b2))&lt;/p&gt;

&lt;p&gt;A4) is because you are passing an imprecise double to BigDecimal() and BigDecimal is correctly reflecting the double value. You can use a String to create the BigDecimal, e..g new BigDecimal(&quot;33.3330&quot;);&lt;br/&gt;
One could simplify the method by creating an assertDecimalEquals() method, that took the string and created the BigDecimal within the method. e.g. called as:&lt;/p&gt;

&lt;p&gt;  assertDecimalEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2));&lt;/p&gt;

</comment>
                            <comment id="12471070" author="djd" created="Wed, 7 Feb 2007 19:14:03 +0000"  >&lt;p&gt;I think this test shows a useful common pattern:&lt;/p&gt;

&lt;p&gt;  some SQL schema setup run once for a set of fixtures (CleanDatabaseTestSetup.decorateSQL)&lt;br/&gt;
  emptying the tables for each fixture (the setUp method)&lt;/p&gt;

&lt;p&gt;Myrna&apos;s batchUpdate() test in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2293&quot; title=&quot;convert batchUpdate.java to junit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2293&quot;&gt;&lt;del&gt;DERBY-2293&lt;/del&gt;&lt;/a&gt; I think shows the same requirement.&lt;br/&gt;
ProcedureTest has the same pattern.&lt;/p&gt;

&lt;p&gt;Having a utility method to perform the emptying (all the DELETE FROM TABLE commands) without having to explicitly list the tables in the test would be useful. Currently we have tests implementing their own mechanisms and I think the ProcedureTest approach is somewhat awkward in having to specify the table name twice in the list.&lt;/p&gt;

&lt;p&gt;Something like&lt;br/&gt;
  JDBC.emptyAllTables(Connection conn)&lt;br/&gt;
it could pull logic from the code that drops all tables.&lt;/p&gt;</comment>
                            <comment id="12471141" author="jta" created="Wed, 7 Feb 2007 23:13:57 +0000"  >&lt;p&gt;Thanks for the speedy comments, Dan!&lt;/p&gt;

&lt;p&gt;R1) Regarding the teardown, I was confused by what was happening under the hood and when.&lt;br/&gt;
The &apos;DROP ROUTINE&apos; error I encountered sounds like something I should reproduce separately and log as an issue.&lt;/p&gt;

&lt;p&gt;R2) I really like your approach that avoids explicitly adding all fixtures.&lt;/p&gt;

&lt;p&gt;R3) Excellent &amp;#8211; thanks! &lt;/p&gt;

&lt;p&gt;R4)  assertDecimalEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2)); &lt;/p&gt;

&lt;p&gt;That still resulted in differences detected:&lt;br/&gt;
OUT 2 expected:&amp;lt;33.3330&amp;gt; but was:&amp;lt;33.3330&amp;gt;&lt;/p&gt;

&lt;p&gt;However, changing the last arg to string worked:&lt;/p&gt;

&lt;p&gt;assertDecimalEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2).toString());&lt;/p&gt;

&lt;p&gt;thanks for the feedback!&lt;/p&gt;</comment>
                            <comment id="12471142" author="jta" created="Wed, 7 Feb 2007 23:17:06 +0000"  >&lt;p&gt;derby-2304-preview-2.diff incorporates feedback from Dan.&lt;/p&gt;</comment>
                            <comment id="12471149" author="djd" created="Wed, 7 Feb 2007 23:26:32 +0000"  >&lt;p&gt;On the assertDecimalEquals() how were you comparing the string to the BigDecimal?&lt;br/&gt;
This assertDecimalEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2));  is possible but it might need careful definition as to what equality means.&lt;br/&gt;
basically the same numerical value or the same numerical value with the same scale. E.g.&lt;/p&gt;

&lt;p&gt;  32.00&lt;br/&gt;
  32&lt;/p&gt;

&lt;p&gt;are the same for BigDecimal.compareTo() but are not for BigDecimal.equals().&lt;/p&gt;

&lt;p&gt;Maybe have two methods ...&lt;/p&gt;

&lt;p&gt; assertDecimalSameValue  (uses compareTo)&lt;br/&gt;
 assertDecimalEquals (uses equals)&lt;/p&gt;




</comment>
                            <comment id="12471153" author="jta" created="Wed, 7 Feb 2007 23:48:04 +0000"  >&lt;p&gt;Don&apos;t look at derby-2304-preview-2.diff &amp;#8211; it has confusing cruft leftover from my initial teardown implementation &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;derby-2304-preview-3.diff cleans that up.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; For newbies coming after me, my first shot at CallableTest.java explicitly coded both setUp() and tearDown(). But I switched the strategy to use CleanDatabaseTestSetup() instead, which automatically does the tearDown, eliminating any need to provide code to drop database objects.&lt;/p&gt;</comment>
                            <comment id="12471157" author="jta" created="Thu, 8 Feb 2007 00:02:05 +0000"  >&lt;p&gt;Dan asked:&lt;br/&gt;
&amp;gt; On the assertDecimalEquals() how were you comparing the string to the BigDecimal? &lt;/p&gt;

&lt;p&gt;I goofed &amp;#8211; I was moving too quickly and didn&apos;t pay close enough attention to your assertDecimalEquals() suggestion.&lt;/p&gt;

&lt;p&gt;I did this, which was silly:&lt;br/&gt;
    assertEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2));&lt;/p&gt;

&lt;p&gt;This code passes on 1.4.2, but it can&apos;t be reliable:&lt;br/&gt;
   assertEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;, cs.getBigDecimal(2).toString());&lt;/p&gt;

&lt;p&gt;I&apos;ll slow down and work on a real decimal comparison solution. Thanks for all the help!&lt;/p&gt;</comment>
                            <comment id="12471570" author="myrna" created="Fri, 9 Feb 2007 03:14:25 +0000"  >&lt;p&gt;I looked at patch 3 and have 2 comments related to running with j2ME...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the test proc  updateLongVarbinaryProc (byte[] in_param) uses&lt;br/&gt;
   Connection conn = DriverManager.getConnection(&quot;jdbc:default:connection&quot;);&lt;br/&gt;
  Used in testUpdateLongBinaryProc.&lt;br/&gt;
  I am wondering if it is possible to change this to not use DriverManager.&lt;br/&gt;
  If that were possible, that subtest theoretically could run in j2ME environment, I think.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;because of the call to cs.getBigDecimal() in testBigDecimalInAndOutParameters that subtest will fail with JSR169/j2ME.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the subtests that fail for the reasons above could get a if (!JDBC.vmSupportsJSR169()) block, then this test can be added where it is in jdbcapi._Suite.java; otherwise, it the entire test needs to be only added if the jvm is not one supporting only JSR169.&lt;/p&gt;

&lt;p&gt;For the rest, this looks good to me, and passes for me with jdk14.&lt;/p&gt;

&lt;p&gt;Myrna&lt;/p&gt;</comment>
                            <comment id="12472176" author="jta" created="Mon, 12 Feb 2007 03:34:49 +0000"  >&lt;p&gt;Following up on Dan&apos;s suggestion to implement a assertDecimalEquals method, this works:&lt;/p&gt;

&lt;p&gt;public void assertDecimalEquals (String msg, String val1, BigDecimal val2)&lt;/p&gt;
    {
        BigDecimal expected = (new BigDecimal(val1));
        assertTrue(msg +
            &quot; expected:&amp;lt;&quot; + val1 + &quot;&amp;gt; but was:&amp;lt;&quot; + val2.toString() + &quot;&amp;gt;&quot;,
            expected.compareTo(val2)==0);
    }

&lt;p&gt;It gets called like this:&lt;/p&gt;

&lt;p&gt;   assertDecimalEquals(&quot;OUT 2&quot;, &quot;33.3330&quot;,        cs.getBigDecimal(2));&lt;/p&gt;

&lt;p&gt;If an assert fails, it outputs a message that is consistent with the style of other assertEquals messages:&lt;/p&gt;

&lt;p&gt;   OUT 9 expected: &amp;lt;-88888888.0000&amp;gt; but was &amp;lt;-99999999.0000&amp;gt;&lt;/p&gt;

&lt;p&gt;Does anyone spot any problems with this approach?&lt;/p&gt;</comment>
                            <comment id="12472179" author="jta" created="Mon, 12 Feb 2007 03:42:57 +0000"  >&lt;p&gt;Thanks for the J2ME comments, Myrna! I suspect that for the moment I&apos;m best off excluding JSR169 until I have the entire test converted and can see what is and is not supported. Thanks for pointing it out.&lt;/p&gt;</comment>
                            <comment id="12472184" author="djd" created="Mon, 12 Feb 2007 04:56:50 +0000"  >&lt;p&gt;Using BigDecimal.compareTo() in the assertDecimalEquals might cause confusion in the future. See my earlier comment about having two methods.&lt;/p&gt;</comment>
                            <comment id="12472332" author="jta" created="Mon, 12 Feb 2007 16:06:50 +0000"  >&lt;p&gt;Yes, you&apos;re absolutely right about the naming confusion. Naming the method I have working so far, which  uses compareTo, &quot;assertDecimalSameValue&quot; would make far more sense.&lt;/p&gt;

&lt;p&gt;So far I haven&apos;t had success with an equality operation, even with variations on scale and roundingMode as in:&lt;br/&gt;
        BigDecimal expected = (new BigDecimal(val1));&lt;br/&gt;
        expected = expected.setScale(4); // the procedure uses DECIMAL(14,4)&lt;br/&gt;
or:&lt;br/&gt;
        expected = expected.setScale(4, BigDecimal.ROUND_HALF_UP); // 8 rounding modes&lt;br/&gt;
then:&lt;br/&gt;
        assertEquals(msg, val1, val2);&lt;/p&gt;

&lt;p&gt;I&apos;ll keep working on an equality check.&lt;/p&gt;</comment>
                            <comment id="12476517" author="jta" created="Wed, 28 Feb 2007 05:06:37 +0000"  >&lt;p&gt;(Never go on vacation &amp;#8211; it sets you behind by the amount you spent off * 2.)&lt;/p&gt;

&lt;p&gt;I&apos;m attaching derby-2304.diff, which incorporates the feedback I&apos;ve received:&lt;/p&gt;

&lt;p&gt;1) Tests that get/set BigDecimal only run if (!JDBC.vmSupportsJSR169())&lt;br/&gt;
2) Tests that need DriverManager only run if (JDBC.vmSupportsJDBC2()) &lt;br/&gt;
3) The assertDecimalSameValue method wraps the BigDecimal.compareTo() call (I&apos;ll pass for now on trying to get an equality check working).&lt;/p&gt;

&lt;p&gt;I think one of the tests from derbynet/callable.java is dubious and I would appreciate opinions &amp;#8211; I included it in the patch as testSystemOutPrintlnProc() . The sql procedure it invokes just does this:&lt;/p&gt;

&lt;p&gt; System.out.println(&quot;I&apos;m doing something here...&quot;);&lt;/p&gt;

&lt;p&gt;So, of course, the window in which you run the junit test gets:&lt;br/&gt;
I&apos;m doing something here...&lt;br/&gt;
I&apos;m doing something here...&lt;/p&gt;

&lt;p&gt;I somehow suspect System.out.println in a junit test isn&apos;t good, but I thought I&apos;d ask. If there&apos;s no feedback, I&apos;m inclined to commit these changes with that test disabled.&lt;br/&gt;
And, of course, I&apos;d appreciate any other observations anyone has.&lt;/p&gt;</comment>
                            <comment id="12476576" author="djd" created="Wed, 28 Feb 2007 12:54:27 +0000"  >&lt;p&gt;Jean&amp;gt; Tests that get/set BigDecimal only run if (!JDBC.vmSupportsJSR169()) &lt;/p&gt;

&lt;p&gt;That should really be  if (JDBC.vmSupportsJDBC2()) since the fixture is testing methods that are in JDBC 2.&lt;/p&gt;</comment>
                            <comment id="12476642" author="jta" created="Wed, 28 Feb 2007 17:01:27 +0000"  >&lt;p&gt;Dan wrote:&lt;br/&gt;
: Jean&amp;gt; Tests that get/set BigDecimal only run if (!JDBC.vmSupportsJSR169())&lt;br/&gt;
:&lt;br/&gt;
: That should really be if (JDBC.vmSupportsJDBC2()) since the fixture is testing methods that are in JDBC 2.&lt;/p&gt;

&lt;p&gt;thanks for the clarification, Dan! That nicely declutters the suite code.&lt;/p&gt;</comment>
                            <comment id="12478100" author="jta" created="Mon, 5 Mar 2007 17:06:41 +0000"  >&lt;p&gt;Base conversion to junit is complete and the old test has been removed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12350599" name="derby-2304-preview-2.diff" size="12643" author="jta" created="Wed, 7 Feb 2007 23:17:06 +0000"/>
                            <attachment id="12350601" name="derby-2304-preview-3.diff" size="12888" author="jta" created="Wed, 7 Feb 2007 23:48:04 +0000"/>
                            <attachment id="12350580" name="derby-2304-preview.diff" size="13848" author="jta" created="Wed, 7 Feb 2007 18:13:03 +0000"/>
                            <attachment id="12352201" name="derby-2304.diff" size="31980" author="jta" created="Wed, 28 Feb 2007 05:06:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Feb 2007 19:01:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30369</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy137z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40172</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>