<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-681/DERBY-681.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-681] Eliminate the parser&apos;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses</title>
                <link>https://issues.apache.org/jira/browse/DERBY-681</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If a query contains a GROUP BY or HAVING clause, the parser rewrites the abstract syntax tree, putting aggregates into a subselect and treating the HAVING clause as the WHERE clause of a fabricated outer select from the subquery. This allows the compiler to re-use some machinery since the HAVING clause operates on the grouped result the way that the WHERE clause operates on the from list. Unfortunately, this rewriting creates an explosion of special cases in the compiler after parsing is done. The rewriting is not systematically handled later on in the compiler. This gives rise to defects like bug 280. We need to eliminate this special rewriting and handle the HAVING clause in a straightforward way. This is not a small bugfix but is a medium sized project.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325311">DERBY-681</key>
            <summary>Eliminate the parser&apos;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mkhettry">Manish Khettry</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Nov 2005 05:52:47 +0000</created>
                <updated>Fri, 21 Jan 2011 17:48:25 +0000</updated>
                            <resolved>Mon, 28 May 2007 07:55:37 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12356723" author="djd" created="Fri, 4 Nov 2005 06:10:26 +0000"  >&lt;p&gt;Seems more like an improvement than a bug fix.&lt;/p&gt;</comment>
                            <comment id="12356724" author="bandaram" created="Fri, 4 Nov 2005 06:12:36 +0000"  >&lt;p&gt;Should this be marked an Enhancement request? While I agree the current scheme of rewriting the query can be improved, it does achieve the functionality. Bugs in the current implementation have been logged separately. (like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-280&quot; title=&quot;Wrong result from select when aliasing to same name as used in group by&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-280&quot;&gt;&lt;del&gt;DERBY-280&lt;/del&gt;&lt;/a&gt;) Changing the mechanism should be marked an Enhancement, I think.&lt;/p&gt;</comment>
                            <comment id="12358947" author="rhillegas" created="Thu, 1 Dec 2005 04:52:24 +0000"  >&lt;p&gt;Linking this bug to 681, the jira which tracks the rewriting of the parser&apos;s GROUP BY/HAVING logic.&lt;/p&gt;</comment>
                            <comment id="12440037" author="fuzzylogic" created="Thu, 5 Oct 2006 07:15:49 +0100"  >&lt;p&gt;Linking this issue to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;, in which a query generated by Hibernate fails on Derby due to the way queries that include GROUP BY w/ HAVING are rewritten by the parser.&lt;/p&gt;</comment>
                            <comment id="12452071" author="mkhettry" created="Wed, 22 Nov 2006 22:57:22 +0000"  >&lt;p&gt;I was looking at the query tree munging that we do in the GroupByNode and it seems that doing something with the having clause should be possible. Basically we always put a ProjectRestrictNode on top of a GroupByNode. It should be possible to rewrite the having clause and turn it into a restriction of this ProjectRestrictNode. This rewriting of the query tree should be pretty similar to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-883&quot; title=&quot;Enhance GROUP BY clause to support expressions instead of just column references.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-883&quot;&gt;&lt;del&gt;DERBY-883&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Is this what you mean by &quot;handle the having clause in a starightforward way&quot;? If anyone has thought about this bug and have any ideas on this, please do share. I can work on this next-- it should help with atleast a couple of other bugs (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-280&quot; title=&quot;Wrong result from select when aliasing to same name as used in group by&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-280&quot;&gt;&lt;del&gt;DERBY-280&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;) but wanted to check with others on the list before I start working on it.&lt;/p&gt;</comment>
                            <comment id="12454838" author="fuzzylogic" created="Fri, 1 Dec 2006 09:08:44 +0000"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;I took a look at the current code for group by a while ago in relation to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; and eventually gave up as correctly fixing the issue went beyond my knowledge of the parsing/compilation phase of query processing and my available time. I&apos;ve come across blog posts like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.tremend.ro/2006/10/03/about-the-maturity-of-apache-derby/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.tremend.ro/2006/10/03/about-the-maturity-of-apache-derby/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in which the main difficulty was the inability to reference column aliases from the select list in group by clauses, so I think this is a worthwhile project to work on.&lt;/p&gt;

&lt;p&gt;I came up with a band-aid of a fix which addressed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; by copying the relevant base column info and correlation name for the aliased columns in the rewritten subquery into the ColumnReferences for the result column list of the inner subquery, for which the correlation name could then be compared with the names of the result columns in the outer select with the group by clause to resolve the correct base column. IIRC, this approach worked for some cases, but there were failures in lang/groupby.sql that I didn&apos;t have time to track down.&lt;/p&gt;

&lt;p&gt;I think a proper fix, as mentioned in the description of this issue, involves eliminating the rewriting of the query that happens in sqlgrammar.jj. If for some reason it might help you, though, I could try and find the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; that I had worked on earlier.&lt;/p&gt;</comment>
                            <comment id="12455195" author="mkhettry" created="Sun, 3 Dec 2006 19:20:21 +0000"  >&lt;p&gt;Thanks Andrew. I hope that I can eliminate the &quot;group/having&quot; query rewrite and this should fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;On the blog entry-- I do think that being able to use aliases in the query (group by or where clause) would be helpful. I remember seeing a bug about this issue a while ago. &lt;/p&gt;</comment>
                            <comment id="12459693" author="mkhettry" created="Tue, 19 Dec 2006 17:01:40 +0000"  >&lt;p&gt;This patch removes the &quot;wrap group by&apos;s in a subselect&quot; rewrite in the parser. It preserves the having clause through bind and optimize phases and during the final rewrite for aggregates in the GroupByNode, transforms the having clause to a valid restriction. I am also attaching a text file which should clarify the changes.&lt;/p&gt;

&lt;p&gt;This patch also fixes related bugs &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;, the regresssion introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-280&quot; title=&quot;Wrong result from select when aliasing to same name as used in group by&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-280&quot;&gt;&lt;del&gt;DERBY-280&lt;/del&gt;&lt;/a&gt; and also completes the functionality for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-883&quot; title=&quot;Enhance GROUP BY clause to support expressions instead of just column references.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-883&quot;&gt;&lt;del&gt;DERBY-883&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If this patch is approved and comitted I will file another bug to remove references to the flags generatedForGroupBy and geneatedForHaving which is dead code post this patch. I did not remove these references because it would make the patch even bigger and more complicated.&lt;/p&gt;
</comment>
                            <comment id="12459694" author="mkhettry" created="Tue, 19 Dec 2006 17:02:42 +0000"  >&lt;p&gt;Notes on this patch.&lt;/p&gt;</comment>
                            <comment id="12471852" author="army" created="Fri, 9 Feb 2007 22:27:04 +0000"  >&lt;p&gt;I noticed that this issue is now on the bottom of the &quot;patch available&quot; list--and that the patch was posted almost two months ago.  So I did a quick review and my comments are below.  Note: The patch is out of date (not surprisingly); it would be great if a newer version could be re-attached that incorporates the following comments (I am willing to continue the review/discussion until the patch is committed).&lt;/p&gt;

&lt;p&gt;Oh, and thank you for the &quot;notes.txt&quot; file, Manish!  I found it to be very helpful as I went through the code changes.  In that document you wrote (at the very end):&lt;/p&gt;

&lt;p&gt;&amp;gt; Also the one thing that I cannot explain in this patch: the fetch size&lt;br/&gt;
&amp;gt; in some ResultSet nodes has gone from 1 to 16. If this is serious I can&lt;br/&gt;
&amp;gt; dig in to see why this is happening. &lt;/p&gt;

&lt;p&gt;I think the difference between a fetch size of 1 and a fetch size of 16 comes down to the difference between a TableScan and BulkTableScan.  I did a quick search of the codeline and it looks like Derby will disable bulk fetching if the result set is &quot;ordering dependent&quot; (see SelectNode.genProjectRestrict()) and also for certain min/max optimizations in a group by (see the &quot;considerPostOptimizeOptimization()&quot; method of GroupByNode).  My guess is that your changes have somehow made it so that we no longer need to disable bulk fetch for certain queries, and thus you are now seeing a different fetch size.  This seems particular likely since all of the queries that show a 1 vs 16 difference in aggregateOptimization() come under the heading of &quot;group by ordered on grouping columns&quot;.  So long story short, my feeling is that this is an acceptable diff...&lt;/p&gt;

&lt;p&gt;Hopefully someone will correct me if I&apos;m wrong...&lt;/p&gt;

&lt;p&gt;Also (w.r.t to &quot;notes.txt&quot; as attached to this issue):&lt;/p&gt;

&lt;p&gt;  &amp;#8211; The notes you wrote for &quot;Background on Group By&quot; would be great as&lt;br/&gt;
  javadoc comments in the GroupByNode.addNewColumnsForAggregation() method&lt;br/&gt;
  (in addition to what&apos;s already there).&lt;/p&gt;

&lt;p&gt;  &amp;#8211; The notes you wrote for &quot;Having clause -&amp;gt; Design&quot; would be great as&lt;br/&gt;
  comments in the GroupByNode.addAggregateColumns() method (perhaps just&lt;br/&gt;
  before the &quot;if (havingClause != null)&quot;...)&lt;/p&gt;

&lt;p&gt;Other review comments (note: I haven&apos;t done much actual testing yet, I&apos;ve just looked at the code changes; I hope to do more testing of the changes next week...):&lt;/p&gt;

&lt;p&gt;I think it would good if the following issues could be addressed before commit:&lt;/p&gt;

&lt;p&gt;  1) FromBaseTable.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; It looks like you added an &quot;accept()&quot; method to FromBaseTable that&lt;br/&gt;
  overrides ResultSetNode.accept().  I noticed that ResultSetNode.accept()&lt;br/&gt;
  recursively calls &quot;accept&quot; on &quot;resultColumns&quot;, but the new method in&lt;br/&gt;
  FromBaseTable does not.  This means that in cases where we used to accept&lt;br/&gt;
  visitors for base table result columns we will no longer do so.  I don&apos;t&lt;br/&gt;
  know what the effects of that might be, but I think that&apos;s probably not&lt;br/&gt;
  good.  It would perhaps be better to call &quot;super.accept()&quot; at the start&lt;br/&gt;
  of FromBaseTable.accept() and then go from there.&lt;/p&gt;

&lt;p&gt;  2) GroupByNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; init() method has some lines that are commented out.  You mention&lt;br/&gt;
  these in your &quot;notes.txt&quot; file but there is no explanation as to why&lt;br/&gt;
  they are commented out (and not just deleted) in the file itself;&lt;br/&gt;
  might be good to add such comments (you could just take them from&lt;br/&gt;
  notes.txt).&lt;/p&gt;

&lt;p&gt;  3) ResultColumnList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; With the following diff:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int size = (size() &amp;gt; sourceRCL.size()) ? size() : sourceRCL.size();&lt;br/&gt;
+//      int size = (size() &amp;gt; sourceRCL.size()) ? size() : sourceRCL.size();&lt;br/&gt;
+        int size = Math.min(size(), sourceRCL.size());&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  The original line (which is now commented out) looks like it assigns size&lt;br/&gt;
  to be the &lt;b&gt;max&lt;/b&gt; of size() and sourceRCL.size(); but your changes make it&lt;br/&gt;
  use the minimum.  I looked at the code and I think your fix is correct--&lt;br/&gt;
  i.e. that we should be using the minimum size.  So should the other line&lt;br/&gt;
  just be deleted (instead of commented out)?  Also, there appears to be an&lt;br/&gt;
  implicit assumption that if the lists are two different sizes then the&lt;br/&gt;
  shorter one must correspond to the &lt;em&gt;leading&lt;/em&gt; columns of the longer one.&lt;br/&gt;
  If you&apos;re so inclined it might be nice to add a comment saying as much&lt;br/&gt;
  (to go along with your change here).&lt;/p&gt;

&lt;p&gt;  4) ColumnReference.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Unrelated (and perhaps accidental) code cleanup diff; better to leave&lt;br/&gt;
  this out of the patch.&lt;/p&gt;

&lt;p&gt;  5) GroupByExpressionTest.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; In the &quot;testSubSelect()&quot; method of you added a test case that is&lt;br/&gt;
  identical to the one immediately preceding it (so far as I can tell).&lt;br/&gt;
  Was that intentional, or is there a HAVING clause missing?&lt;/p&gt;

&lt;p&gt;The rest are nit-pick issues that I hope you might consider, though they should not block commit of the patch:&lt;/p&gt;

&lt;p&gt;  6) SelectNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Some unrelated code cleanup; not a big deal, but as a general rule&lt;br/&gt;
  it detracts from the patch (makes it hard to figure out what changes&lt;br/&gt;
  are related to the issue and what changes are not).  Ex. See the&lt;br/&gt;
  bindNonVTITables() method.&lt;/p&gt;

&lt;p&gt;  &amp;#8211; I wonder if we really need a new &quot;init()&quot; method here?  As far as I&lt;br/&gt;
  can tell there are only two files that currently create a SELECT node:&lt;br/&gt;
  DeleteNode.java and sqlgrammar.jj.  The latter uses the new init()&lt;br/&gt;
  method, the former uses the old one--but the only difference is the&lt;br/&gt;
  presence of the &quot;havingClause&quot; argument.  DeleteNode already passes&lt;br/&gt;
  in several null values (with associated comments), so would it make&lt;br/&gt;
  sense to just add a null for &quot;havingClause&quot;, as well?  Then we would&lt;br/&gt;
  only need the one &quot;init()&quot; method for SelectNode.  I admit, though,&lt;br/&gt;
  that this a stylistic detail and the code as you have it is correct.&lt;br/&gt;
  So if you prefer to leave it as it is, that&apos;s fine--although it might&lt;br/&gt;
  might be good to add some minimal javadoc to the new init() method&lt;br/&gt;
  (ex. &quot;@param havingClause The HAVING clause, if any&quot;, to keep in line&lt;br/&gt;
  with the old init() method).&lt;/p&gt;

&lt;p&gt;  7) GroupByNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Unnecessary import of JBitSet and Properties.&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Javadoc for &quot;init()&quot; method doesn&apos;t mention &quot;nestingLevel&quot;&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Looks like the following comment was deleted:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// finally reset gbc to its new position.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Was that intentional?&lt;/p&gt;

&lt;p&gt;  8) GroupByList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Might be nice if you could add some comments for the following line:&lt;/p&gt;

&lt;p&gt;+    selectRCL.setCountMismatchAllowed(true);&lt;/p&gt;

&lt;p&gt;    i.e. maybe explain briefly why count mismatches are allowed for GroupBy?&lt;/p&gt;

&lt;p&gt;  9) ResultColumnList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; With your changes there is now the following &quot;if&quot; statement in &quot;propagateDCLInfo()&quot;:&lt;/p&gt;

&lt;p&gt;    /* Do both lists, if supplied by user, have the same degree? */&lt;br/&gt;
    if (derivedRCL.size() != size() &amp;amp;&amp;amp;&lt;br/&gt;
        ! derivedRCL.getCountMismatchAllowed())&lt;br/&gt;
    {&lt;br/&gt;
        if (visibleSize() != derivedRCL.size()) &lt;/p&gt;
{
            throw StandardException.newException(SQLState.LANG_DERIVED_COLUMN_LIST_MISMATCH, tableName);
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;  Could this be rewritten to:&lt;/p&gt;

&lt;p&gt;    /* Do both lists, if supplied by user, have the same degree? */&lt;br/&gt;
    if (derivedRCL.size() != visibleSize() &amp;amp;&amp;amp;&lt;br/&gt;
        ! derivedRCL.getCountMismatchAllowed())&lt;/p&gt;
    {
        throw StandardException.newException(SQLState.LANG_DERIVED_COLUMN_LIST_MISMATCH, tableName);
    }

&lt;p&gt;As I said I haven&apos;t looked much at the new test cases nor have I done much testing myself.  I will hopefully have time to do more of that next week...&lt;/p&gt;</comment>
                            <comment id="12472439" author="mkhettry" created="Mon, 12 Feb 2007 22:13:08 +0000"  >&lt;p&gt;Thanks for reviewing the patch. It will take me sometime to make the patch current and look at your comments. It has, after all, been a while since I submitted the patch.&lt;/p&gt;

&lt;p&gt;I am curious-- is it typical for a patch to gather dust for a few months before someone finds the time to look at it? And if so, is this a good thing?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Manish&lt;/p&gt;

&lt;p&gt;&quot;A B (JIRA)&quot; &amp;lt;jira@apache.org&amp;gt; wrote: &lt;br/&gt;
    [ &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12471852&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-681?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12471852&lt;/a&gt; ] &lt;/p&gt;

&lt;p&gt;A B commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
---------------------------&lt;/p&gt;

&lt;p&gt;I noticed that this issue is now on the bottom of the &quot;patch available&quot; list--and that the patch was posted almost two months ago.  So I did a quick review and my comments are below.  Note: The patch is out of date (not surprisingly); it would be great if a newer version could be re-attached that incorporates the following comments (I am willing to continue the review/discussion until the patch is committed).&lt;/p&gt;



&lt;p&gt;I think the difference between a fetch size of 1 and a fetch size of 16 comes down to the difference between a TableScan and BulkTableScan.  I did a quick search of the codeline and it looks like Derby will disable bulk fetching if the result set is &quot;ordering dependent&quot; (see SelectNode.genProjectRestrict()) and also for certain min/max optimizations in a group by (see the &quot;considerPostOptimizeOptimization()&quot; method of GroupByNode).  My guess is that your changes have somehow made it so that we no longer need to disable bulk fetch for certain queries, and thus you are now seeing a different fetch size.  This seems particular likely since all of the queries that show a 1 vs 16 difference in aggregateOptimization() come under the heading of &quot;group by ordered on grouping columns&quot;.  So long story short, my feeling is that this is an acceptable diff...&lt;/p&gt;

&lt;p&gt;Hopefully someone will correct me if I&apos;m wrong...&lt;/p&gt;

&lt;p&gt;Also (w.r.t to &quot;notes.txt&quot; as attached to this issue):&lt;/p&gt;

&lt;p&gt;  &amp;#8211; The notes you wrote for &quot;Background on Group By&quot; would be great as&lt;br/&gt;
  javadoc comments in the GroupByNode.addNewColumnsForAggregation() method&lt;br/&gt;
  (in addition to what&apos;s already there).&lt;/p&gt;

&lt;p&gt;  &amp;#8211; The notes you wrote for &quot;Having clause -&amp;gt; Design&quot; would be great as&lt;br/&gt;
  comments in the GroupByNode.addAggregateColumns() method (perhaps just&lt;br/&gt;
  before the &quot;if (havingClause != null)&quot;...)&lt;/p&gt;

&lt;p&gt;Other review comments (note: I haven&apos;t done much actual testing yet, I&apos;ve just looked at the code changes; I hope to do more testing of the changes next week...):&lt;/p&gt;

&lt;p&gt;I think it would good if the following issues could be addressed before commit:&lt;/p&gt;

&lt;p&gt;  1) FromBaseTable.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; It looks like you added an &quot;accept()&quot; method to FromBaseTable that&lt;br/&gt;
  overrides ResultSetNode.accept().  I noticed that ResultSetNode.accept()&lt;br/&gt;
  recursively calls &quot;accept&quot; on &quot;resultColumns&quot;, but the new method in&lt;br/&gt;
  FromBaseTable does not.  This means that in cases where we used to accept&lt;br/&gt;
  visitors for base table result columns we will no longer do so.  I don&apos;t&lt;br/&gt;
  know what the effects of that might be, but I think that&apos;s probably not&lt;br/&gt;
  good.  It would perhaps be better to call &quot;super.accept()&quot; at the start&lt;br/&gt;
  of FromBaseTable.accept() and then go from there.&lt;/p&gt;

&lt;p&gt;  2) GroupByNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; init() method has some lines that are commented out.  You mention&lt;br/&gt;
  these in your &quot;notes.txt&quot; file but there is no explanation as to why&lt;br/&gt;
  they are commented out (and not just deleted) in the file itself;&lt;br/&gt;
  might be good to add such comments (you could just take them from&lt;br/&gt;
  notes.txt).&lt;/p&gt;

&lt;p&gt;  3) ResultColumnList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; With the following diff:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int size = (size() &amp;gt; sourceRCL.size()) ? size() : sourceRCL.size();&lt;br/&gt;
+//      int size = (size() &amp;gt; sourceRCL.size()) ? size() : sourceRCL.size();&lt;br/&gt;
+        int size = Math.min(size(), sourceRCL.size());&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  The original line (which is now commented out) looks like it assigns size&lt;br/&gt;
  to be the &lt;b&gt;max&lt;/b&gt; of size() and sourceRCL.size(); but your changes make it&lt;br/&gt;
  use the minimum.  I looked at the code and I think your fix is correct--&lt;br/&gt;
  i.e. that we should be using the minimum size.  So should the other line&lt;br/&gt;
  just be deleted (instead of commented out)?  Also, there appears to be an&lt;br/&gt;
  implicit assumption that if the lists are two different sizes then the&lt;br/&gt;
  shorter one must correspond to the &lt;em&gt;leading&lt;/em&gt; columns of the longer one.&lt;br/&gt;
  If you&apos;re so inclined it might be nice to add a comment saying as much&lt;br/&gt;
  (to go along with your change here).&lt;/p&gt;

&lt;p&gt;  4) ColumnReference.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Unrelated (and perhaps accidental) code cleanup diff; better to leave&lt;br/&gt;
  this out of the patch.&lt;/p&gt;

&lt;p&gt;  5) GroupByExpressionTest.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; In the &quot;testSubSelect()&quot; method of you added a test case that is&lt;br/&gt;
  identical to the one immediately preceding it (so far as I can tell).&lt;br/&gt;
  Was that intentional, or is there a HAVING clause missing?&lt;/p&gt;

&lt;p&gt;The rest are nit-pick issues that I hope you might consider, though they should not block commit of the patch:&lt;/p&gt;

&lt;p&gt;  6) SelectNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Some unrelated code cleanup; not a big deal, but as a general rule&lt;br/&gt;
  it detracts from the patch (makes it hard to figure out what changes&lt;br/&gt;
  are related to the issue and what changes are not).  Ex. See the&lt;br/&gt;
  bindNonVTITables() method.&lt;/p&gt;

&lt;p&gt;  &amp;#8211; I wonder if we really need a new &quot;init()&quot; method here?  As far as I&lt;br/&gt;
  can tell there are only two files that currently create a SELECT node:&lt;br/&gt;
  DeleteNode.java and sqlgrammar.jj.  The latter uses the new init()&lt;br/&gt;
  method, the former uses the old one--but the only difference is the&lt;br/&gt;
  presence of the &quot;havingClause&quot; argument.  DeleteNode already passes&lt;br/&gt;
  in several null values (with associated comments), so would it make&lt;br/&gt;
  sense to just add a null for &quot;havingClause&quot;, as well?  Then we would&lt;br/&gt;
  only need the one &quot;init()&quot; method for SelectNode.  I admit, though,&lt;br/&gt;
  that this a stylistic detail and the code as you have it is correct.&lt;br/&gt;
  So if you prefer to leave it as it is, that&apos;s fine--although it might&lt;br/&gt;
  might be good to add some minimal javadoc to the new init() method&lt;br/&gt;
  (ex. &quot;@param havingClause The HAVING clause, if any&quot;, to keep in line&lt;br/&gt;
  with the old init() method).&lt;/p&gt;

&lt;p&gt;  7) GroupByNode.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Unnecessary import of JBitSet and Properties.&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Javadoc for &quot;init()&quot; method doesn&apos;t mention &quot;nestingLevel&quot;&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Looks like the following comment was deleted:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// finally reset gbc to its new position.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Was that intentional?&lt;/p&gt;

&lt;p&gt;  8) GroupByList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Might be nice if you could add some comments for the following line:&lt;/p&gt;

&lt;p&gt;+    selectRCL.setCountMismatchAllowed(true);&lt;/p&gt;

&lt;p&gt;    i.e. maybe explain briefly why count mismatches are allowed for GroupBy?&lt;/p&gt;

&lt;p&gt;  9) ResultColumnList.java:&lt;/p&gt;

&lt;p&gt;  &amp;#8211; With your changes there is now the following &quot;if&quot; statement in &quot;propagateDCLInfo()&quot;:&lt;/p&gt;

&lt;p&gt;    /* Do both lists, if supplied by user, have the same degree? */&lt;br/&gt;
    if (derivedRCL.size() != size() &amp;amp;&amp;amp;&lt;br/&gt;
        ! derivedRCL.getCountMismatchAllowed())&lt;br/&gt;
    {&lt;br/&gt;
        if (visibleSize() != derivedRCL.size()) &lt;/p&gt;
{
            throw StandardException.newException(SQLState.LANG_DERIVED_COLUMN_LIST_MISMATCH, tableName);
        }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;  Could this be rewritten to:&lt;/p&gt;

&lt;p&gt;    /* Do both lists, if supplied by user, have the same degree? */&lt;br/&gt;
    if (derivedRCL.size() != visibleSize() &amp;amp;&amp;amp;&lt;br/&gt;
        ! derivedRCL.getCountMismatchAllowed())&lt;/p&gt;
    {
        throw StandardException.newException(SQLState.LANG_DERIVED_COLUMN_LIST_MISMATCH, tableName);
    }

&lt;p&gt;As I said I haven&apos;t looked much at the new test cases nor have I done much testing myself.  I will hopefully have time to do more of that next week...&lt;/p&gt;


&lt;p&gt;&amp;#8211; &lt;br/&gt;
This message is automatically generated by JIRA.&lt;br/&gt;
-&lt;br/&gt;
You can reply to this email to add a comment to the issue online.&lt;/p&gt;




&lt;p&gt;---------------------------------&lt;br/&gt;
TV dinner still cooling?&lt;br/&gt;
Check out &quot;Tonight&apos;s Picks&quot; on Yahoo! TV.&lt;/p&gt;</comment>
                            <comment id="12472754" author="army" created="Tue, 13 Feb 2007 16:41:42 +0000"  >&lt;p&gt;Manish Khettry (JIRA) wrote:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Thanks for reviewing the patch. It will take me sometime to make&lt;br/&gt;
&amp;gt; the patch current and look at your comments. It has, after all, &lt;br/&gt;
&amp;gt; been a while since I submitted the patch.&lt;/p&gt;

&lt;p&gt;Thank you for willingness to continue working with the patch.&lt;/p&gt;

&lt;p&gt;&amp;gt; I am curious-- is it typical for a patch to gather dust for a &lt;br/&gt;
&amp;gt; few months before someone finds the time to look at it?&lt;/p&gt;

&lt;p&gt;I don&apos;t think it&apos;s &quot;typical&quot; for this to happen, no.  But given the &quot;fry your own fish&quot; philosophy of open source development, this kind of thing does (unfortunately) happen on occasion.&lt;/p&gt;

&lt;p&gt;The derby-dev mailing list receives a daily &quot;subscription&quot; email which lists issues having the &quot;Patch Available&quot; flag set.  The issues are sorted according to the date of that last update/comment; those at the bottom of the list are the ones that have been sitting the longest with no activity.  Ex.:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://thread.gmane.org/gmane.comp.apache.db.derby.devel/36563&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://thread.gmane.org/gmane.comp.apache.db.derby.devel/36563&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That said, though, it&apos;s up to people in the community (users, developers, anyone--doesn&apos;t just have to be committers) to review patches and/or comment on the various issues according to their own interest/expertise.  And as you&apos;ve seen, sometimes the result is that things slip through the cracks.&lt;/p&gt;

&lt;p&gt;I noticed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt; at the bottom of the list last week, which is what prompted me to look it up--and in doing so I saw that it had been idle for two months&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  So as I mentioned in my previous comment, I am willing to work with you on this patch so that it can now be committed.  Apologies for the awfully long delay...&lt;/p&gt;

&lt;p&gt;It&apos;s definitely not a good thing to have patches sitting for so long without review.  While the decision as to who reviews what patches is entirely up to those in the community, you should feel free to &quot;push&quot; your patch if it&apos;s not getting any attention.  See &quot;Extra Mile&quot; advice on the wiki:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://wiki.apache.org/db-derby/PatchAdvice&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/PatchAdvice&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in particular, note the following quote:&lt;/p&gt;

&lt;p&gt;&quot;Post to the list at least every couple of weeks if you don&apos;t get review. Ask if someone is available to look at your patch and what additional information reviewers might need for review.&quot;&lt;/p&gt;

&lt;p&gt;I have found that sending an explicit email to derby-dev asking for people to review a patch which has been idle for a couple of weeks almost always leads to a reply and a subsequent review.  So feel free to do so!&lt;/p&gt;</comment>
                            <comment id="12473169" author="army" created="Wed, 14 Feb 2007 19:49:15 +0000"  >&lt;p&gt;I spent some time manually trying out different test cases with the patch for this issue and things seem to work well for the most part (see below).  I ran the new test cases that this patch adds to GroupByExpressionTest and they behave as expected: i.e. they pass with the patch and fail without it.&lt;/p&gt;

&lt;p&gt;I also ran the repro case for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-280&quot; title=&quot;Wrong result from select when aliasing to same name as used in group by&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-280&quot;&gt;&lt;del&gt;DERBY-280&lt;/del&gt;&lt;/a&gt; and verified that Yes, the query still runs correctly with these changes.  So that&apos;s good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regarding &quot;for most the part&quot;: I did find a couple of scenarios where d681.patch.txt causes queries to fail where they used to succeed.  I found these while playing with the DDL from the queries attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;, namely:&lt;/p&gt;

&lt;p&gt;  create table o (name varchar(20), ord int);&lt;br/&gt;
  create table a (ord int, amount int);&lt;/p&gt;

&lt;p&gt;With these tables and some minimal data, I noticed that the following statement, which used to work, fails with error 42X56 after applying d681.patch:&lt;/p&gt;

&lt;p&gt;  create view v1 (vx, vy) as&lt;br/&gt;
    select name, sum(ord) from o where ord &amp;gt; 0 group by name, ord&lt;br/&gt;
      having ord &amp;lt;= ANY (select ord from a);&lt;/p&gt;

&lt;p&gt;I think the problem is that there is a check in CreateViewNode which uses the &quot;size()&quot; method of ResultColumnList instead of the new &quot;visibleSize()&quot; method.  When I made that change the above statement executes as normal.&lt;/p&gt;

&lt;p&gt;I then found another example that shows a similar problem:&lt;/p&gt;

&lt;p&gt;  create table ov (ox, oy) as&lt;br/&gt;
    (select name, sum(ord) from o where ord &amp;gt; 0 group by ord, name&lt;br/&gt;
      having ord &amp;lt;= ANY (select ord from a)) with no data; &lt;/p&gt;

&lt;p&gt;I think the underlying problem is again the use of &quot;size()&quot; instead of &quot;visibleSize()&quot;.&lt;/p&gt;

&lt;p&gt;And if we assume the view &quot;v1&quot; from above is made to work (by changing the appropriate &quot;size()&quot; call to &quot;visibleSize()&quot;) then the following statement, which does a union between v1 and a query on v1, will end up failing, too: &lt;/p&gt;

&lt;p&gt;    select vx, vy from v1&lt;br/&gt;
      union select vx, sum(vy) from v1 group by vx, vy having (vy / 2) &amp;gt; 15;&lt;/p&gt;

&lt;p&gt;So that&apos;s three examples where use of &quot;size()&quot; instead of &quot;visibleSize()&quot; is leading to an error--and each of the three errors has its origin in a different file.  Which makes me wonder: are there other places where this same change needs to be made but we haven&apos;t found them yet?  Is there a reliable way to search the codeline for this kind of thing? In any event, it would be good if the respective files for those three examples could be updated as necessary.&lt;/p&gt;

&lt;p&gt;Aside from the above issue I couldn&apos;t see any other functional problems with the patch.  Thank you very much for your explanations of the diffs in the various tests; that saved me some time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;On an entirely different note, I noticed that when the patch was posted you included a comment saying:&lt;/p&gt;

&lt;p&gt;  &quot;This patch also fixes related bugs &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&quot;&lt;/p&gt;

&lt;p&gt;When I read that I assumed that the queries attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; would now pass with d681.patch.txt--but that does not appear to be the case.  Of the 18 queries in &quot;1624_repro.sql&quot;, 10 pass when I apply the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt; (only 7 pass without your changes).  So we&apos;re getting better.  However, it looks like there is still more work to do before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; can be considered resolved.  Do you agree?&lt;/p&gt;

&lt;p&gt;I have not run derbyall nor suites.All yet as I&apos;m waiting for an updated patch before doing so...&lt;/p&gt;

&lt;p&gt;In the meantime, thank you again for taking the time to tackle this particular issue--your contribution and your patience are both much appreciated.&lt;/p&gt;</comment>
                            <comment id="12473218" author="mkhettry" created="Wed, 14 Feb 2007 21:56:53 +0000"  >&lt;p&gt;Just a quick note to address two issues raised by Army.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;: It won&apos;t fix all the queries attached by Andrew for this bug because we don&apos;t resolve aliases in the group by/having/orderby clauses; the following query will fail. This bug does not address aliases-- only the original query with this bug.&lt;/p&gt;

&lt;p&gt;select x as alias, sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_up.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
from t &lt;br/&gt;
group by alias;&lt;/p&gt;

&lt;p&gt;The size vs visible size is more problematic-- I really think the language layer should not be using RCL directly as much as it currently does. If it wants to check the number of columns returned by a ResultSetNode, it should call a method in the RSN called either visibleSize or runtimeSize  or some such (i.e. the # of columns actually returned by the result set node). The only way to find all of these would be to grind through all the occurences of RCL.size! This in itself should suggest that the use of these classes/methods in this little area itself (i.e. # of columns in a result set node) could deal with a good dose of refactoring. &lt;/p&gt;

&lt;p&gt;Thanks for looking at the patch, running tests and asking the right questions. I appreciate the time you&apos;ve taken for this patch. I am a little busy at work but will get back to this bug when things let up (hopefully next week). &lt;/p&gt;</comment>
                            <comment id="12473226" author="fuzzylogic" created="Wed, 14 Feb 2007 22:21:00 +0000"  >&lt;p&gt;I checked Manish&apos;s patch and it does fix the original query reported not working in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;. I applied Manish&apos;s patch and ran the original query in the description of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;, and it works as expected.&lt;/p&gt;

&lt;p&gt;While it would be great if column aliasing worked completely as expected with all of the queries in derby1624_repro.sql, I would argue that with Manish&apos;s patch committed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; should be closed, and a new issue opened to cover the remaining problems with column aliasing shown in the derby1624_repro script.&lt;/p&gt;</comment>
                            <comment id="12473232" author="army" created="Wed, 14 Feb 2007 22:43:42 +0000"  >&lt;p&gt;&amp;gt; I would argue that with Manish&apos;s patch committed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt; should be closed,&lt;br/&gt;
&amp;gt; and a new issue opened to cover the remaining problems with column aliasing shown in the&lt;br/&gt;
&amp;gt; derby1624_repro script.&lt;/p&gt;

&lt;p&gt;Sounds good to me.&lt;/p&gt;</comment>
                            <comment id="12478929" author="mkhettry" created="Wed, 7 Mar 2007 22:18:26 +0000"  >&lt;p&gt;Again, thanks for very detailed and constructive review and for finding the problems with union/views/create table. I ran derbylang (one failure compressTable once, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2117&quot; title=&quot;Intermittent failure in lang/compressTable.sql&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2117&quot;&gt;&lt;del&gt;DERBY-2117&lt;/del&gt;&lt;/a&gt;?) and junit-all (one failure in a derbynet tearDown method?). Normally I would try to track this failure but this bugfix has been sitting on my laptop for too long and it really doesn&apos;t look like anything to do with my changes (famous last words?!)&lt;/p&gt;

&lt;p&gt;I have accepted most of the review comments from A. B atleast partially except for 4, 6 and 9.&lt;/p&gt;</comment>
                            <comment id="12479436" author="army" created="Thu, 8 Mar 2007 21:37:53 +0000"  >&lt;p&gt;Thank you for the second patch, Manish.  I looked it over and it does indeed address most of my comments, so I think we&apos;re getting closer.  The reason I say &quot;closer&quot; is because I noticed the following problems with the second patch, and I think these should be addressed before the patch can be committed:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Looks like the formatting for the first couple of lines in the license&lt;br/&gt;
    text for views.sql has changed.  I assume this was just an accident?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This patch adds an explicit connection to views.sql, which I do not&lt;br/&gt;
    think is right:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        @@ -17,6 +14,7 @@&lt;br/&gt;
         &amp;#8211; tests for views&lt;/p&gt;

&lt;p&gt;         &amp;#8211; set autocommit off&lt;br/&gt;
        +connect &apos;jdbc:derby:wombat&apos;;&lt;br/&gt;
         autocommit off;&lt;/p&gt;

&lt;p&gt;    Notice that the result (in views.out) is a security access violation:&lt;/p&gt;

&lt;p&gt;        @@ -17,7 +14,9 @@&lt;br/&gt;
         &amp;#8211; tests for views&lt;/p&gt;

&lt;p&gt;         &amp;#8211; set autocommit off&lt;br/&gt;
        -autocommit off;&lt;br/&gt;
        +connect &apos;jdbc:derby:wombat&apos;;&lt;br/&gt;
        +JAVA ERROR: java.security.AccessControlException: access denied (java.util.PropertyPermission ij.URLCheck read)&lt;br/&gt;
        +ij&amp;gt; autocommit off;&lt;/p&gt;

&lt;p&gt;    This looks wrong to me.  Is the additional connect statement an intentional change,&lt;br/&gt;
    or is that just a remnant from some testing you were doing? If possible I think the&lt;br/&gt;
    extra call to &quot;connect&quot; should be removed and the master file updated accordingly.&lt;br/&gt;
    If you made the change intentionally then can you explain why it is necessary?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There is also the following diff in the RunTest and RunSuite classes:&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;classpath = sp.getProperty(&quot;classpath&quot;);&lt;br/&gt;
+		classpath = sp.getProperty(&quot;java.class.path&quot;);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Again, can you explain why this particular change is necessary?  Were you&lt;br/&gt;
    experiencing problems while running the tests?  If so, what were those problems?&lt;/p&gt;

&lt;p&gt;Other than these test issues I think the patch is ready for commit...&lt;/p&gt;</comment>
                            <comment id="12479479" author="mkhettry" created="Fri, 9 Mar 2007 01:35:50 +0000"  >&lt;p&gt;removed runtest, runsuite. fixed views.&lt;/p&gt;</comment>
                            <comment id="12479640" author="army" created="Fri, 9 Mar 2007 16:47:04 +0000"  >&lt;p&gt;I ran derbyall with the latest patch and there was one unexpected failure (Derby client only):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: setTransactionIsolation jdk1.4.2 DerbyNetClient derbynetmats:jdbcapi 2007-03-08 18:28:42 ***&lt;br/&gt;
532 del&lt;br/&gt;
&amp;lt; count=2, setTransactionIsolation() commits&lt;br/&gt;
532 add&lt;br/&gt;
&amp;gt; passCommitCheck=true&lt;br/&gt;
Test Failed.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, I re-ran the test without your changes and it still failed, so I do not think it&apos;s related.  The machine on which I ran derbyall is one I haven&apos;t used before so I don&apos;t know the specs; I&apos;ll look into it.  In the meantime, I went ahead and committed 681_patch3.txt with svn # 516454:&lt;/p&gt;

&lt;p&gt;   URL: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=516454&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=516454&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for your patience throughout this process, Manish!&lt;/p&gt;

&lt;p&gt;As a reminder for future patches: the more involved you are in the community as a whole-&lt;del&gt;especially in terms of reviewing other people&apos;s patches/specs&lt;/del&gt;-the more likely it is that people will in turn respond to comments/patches you yourself post, and probably in a much more timely manner.  That&apos;s no guarantee, of course (this is after all open source), but it certainly doesn&apos;t hurt &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In any event, thanks again for the contribution!&lt;/p&gt;</comment>
                            <comment id="12480197" author="army" created="Mon, 12 Mar 2007 22:03:05 +0000"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;I think I&apos;ve found another case where use of &quot;size()&quot; instead of &quot;visibleSize()&quot; is leading to incorrect behavior after the patch for this issue.  Take the following example:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t1 (d double, vc varchar(20), x int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select distinct vc, x from t1 as myt1&lt;br/&gt;
      where d &amp;lt;= (select max(myt1.d) from t1 as myt2&lt;br/&gt;
          where myt1.vc = myt2.vc and myt1.d &amp;lt;= myt2.d&lt;br/&gt;
          having count(distinct d) &amp;lt;= 3);&lt;br/&gt;
ERROR 42X39: Subquery is only allowed to return a single column.&lt;/p&gt;

&lt;p&gt;Before the commit for this issue the above query ran without error.  But now, with the latest trunk, the query fails because Derby thinks the subquery is returning more than one column, which is not true. The relevant code is in SubqueryNode.java:&lt;/p&gt;

&lt;p&gt;        /* The parser does not enforce the fact that a subquery can only return&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;a single column, so we must check here.&lt;br/&gt;
         */&lt;br/&gt;
        if (resultColumns.size() != 1)
        {
            throw StandardException.newException(SQLState.LANG_NON_SINGLE_COLUMN_SUBQUERY);
        }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the call to &quot;size()&quot; here should be replaced with a call to &quot;visibleSize()&quot;.  If you agree that this is the correct fix then I can go ahead and commit this change to trunk as a &quot;followup&quot; patch for this issue.&lt;/p&gt;</comment>
                            <comment id="12480221" author="mkhettry" created="Mon, 12 Mar 2007 23:26:37 +0000"  >&lt;p&gt;hmmm, thanks for catching all of these. I should have thought about them and yes, it lis the correct fix.&lt;/p&gt;


</comment>
                            <comment id="12480437" author="army" created="Tue, 13 Mar 2007 15:36:22 +0000"  >&lt;p&gt;Actually, it turns out that just switching to &quot;visibleSize()&quot; does &lt;b&gt;not&lt;/b&gt; solve the problem.  I made that change to a clean codeline and the error still occurs.  When I printed out the values of &quot;size()&quot; and &quot;visibleSize()&quot;, they &lt;b&gt;both&lt;/b&gt; showed &quot;2&quot;.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if it&apos;s relevant, but if you add a group by clause to the query, it runs fine:&lt;/p&gt;

&lt;p&gt;select distinct vc, x from t1 as myt1&lt;br/&gt;
      where d &amp;lt;= (select max(myt1.d) from t1 as myt2&lt;br/&gt;
          where myt1.vc = myt2.vc and myt1.d &amp;lt;= myt2.d&lt;br/&gt;
          group by d&lt;br/&gt;
          having count(distinct d) &amp;lt;= 3); &lt;/p&gt;

&lt;p&gt;Manish, would you be willing to look into this a bit more?&lt;/p&gt;</comment>
                            <comment id="12480501" author="mkhettry" created="Tue, 13 Mar 2007 17:48:03 +0000"  >&lt;p&gt;OK. Do you think it makes sense to mark this bug as resolved and another to track this issue. Either way is fine.&lt;/p&gt;
</comment>
                            <comment id="12480548" author="army" created="Tue, 13 Mar 2007 21:08:26 +0000"  >&lt;p&gt;&amp;gt; Do you think it makes sense to mark this bug as resolved and another to track this issue. Either way is fine.&lt;/p&gt;

&lt;p&gt;I agree, either way is fine; I&apos;ll let you decide &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; If you create a new issue, please mark it as a &quot;regression&quot; so that we can make sure it gets fixed before the next release.  Otherwise it might slip through the cracks...&lt;/p&gt;

&lt;p&gt;Thank you very much for your time with this...&lt;/p&gt;</comment>
                            <comment id="12480850" author="mkhettry" created="Wed, 14 Mar 2007 17:25:36 +0000"  >&lt;p&gt;query with a having clause but without a group by has a generated aggregaegt added on. I made visibleSize() less restrictive-- i.e. it takes into accounts all generated columns not just those added in GroupByList#bindGroupByColumns.&lt;/p&gt;

&lt;p&gt;Another follow up item for me to look at is the different mechanism used for order by columns which are added to the select list. This is completely different from how group by does things.&lt;/p&gt;

&lt;p&gt;I ran junit-all and derbylang. &lt;/p&gt;</comment>
                            <comment id="12480857" author="bryanpendleton" created="Wed, 14 Mar 2007 17:34:57 +0000"  >&lt;p&gt;&amp;gt; Another follow up item for me to look at is the different mechanism used &lt;br/&gt;
&amp;gt; for order by columns which are added to the select list. This is completely &lt;br/&gt;
&amp;gt; different from how group by does things.&lt;/p&gt;

&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;I did some work on the ORDER BY mechanism in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1861&quot; title=&quot;Column ordering ASSERT when combining column references and expressions in same ORDER BY&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1861&quot;&gt;&lt;del&gt;DERBY-1861&lt;/del&gt;&lt;/a&gt;, but that work&lt;br/&gt;
is not yet complete. I&apos;d be happy if you were to take a look at that as part of&lt;br/&gt;
your investigations into column list processing for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-681&quot; title=&quot;Eliminate the parser&amp;#39;s rewriting of the abstract syntax tree for queries with GROUP BY and/or HAVING clauses&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-681&quot;&gt;&lt;del&gt;DERBY-681&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12481222" author="army" created="Thu, 15 Mar 2007 16:54:23 +0000"  >&lt;p&gt;Thank you for the follow-up patch, Manish.  I verified that &quot;followup.patch.txt&quot; solves the problem I reported above, so I committed the patch after adding a corresponding test case to lang/subquery.sql (always good to have a regression test case when possible):&lt;/p&gt;

&lt;p&gt;    URL: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=518687&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=518687&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I assume that the numGeneratedColumnsForGroupBy() method, which is now no longer in use, will be removed as part of your work for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2442&quot; title=&quot;Remove code made redundant by DERBY-681&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2442&quot;&gt;&lt;del&gt;DERBY-2442&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12484236" author="mkhettry" created="Mon, 26 Mar 2007 22:37:24 +0100"  >&lt;p&gt;This commit by Army, &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=518687&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=518687&lt;/a&gt;, resolves issue. &lt;/p&gt;</comment>
                            <comment id="12547980" author="army" created="Mon, 3 Dec 2007 20:29:09 +0000"  >&lt;p&gt;Looks like the fix for this issue caused a sorting regression as described in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3231&quot; title=&quot;Sorting on COUNT with OR and GROUP BY delivers wrong results.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3231&quot;&gt;&lt;del&gt;DERBY-3231&lt;/del&gt;&lt;/a&gt;.  Manish, are you available to look into that a little more?&lt;/p&gt;</comment>
                            <comment id="12556926" author="army" created="Tue, 8 Jan 2008 16:10:32 +0000"  >&lt;p&gt;Linking to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3303&quot; title=&quot;ArrayIndexOutOfBoundsException at MergeSort.compare&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3303&quot;&gt;&lt;del&gt;DERBY-3303&lt;/del&gt;&lt;/a&gt;, as the problem described in that issue seems to occur as a result of the commit for this one.&lt;/p&gt;</comment>
                            <comment id="12557159" author="donatasc" created="Wed, 9 Jan 2008 06:42:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3303&quot; title=&quot;ArrayIndexOutOfBoundsException at MergeSort.compare&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3303&quot;&gt;&lt;del&gt;DERBY-3303&lt;/del&gt;&lt;/a&gt; can also be observed on derby 10.3.1.4, so the bug might have crept in earlier.&lt;/p&gt;</comment>
                            <comment id="12710557" author="kmarsden" created="Tue, 19 May 2009 01:24:41 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4230&quot; title=&quot;DatabaseMetaData.getColumns() returns extra column from view with group by and  expression in SELECT list&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4230&quot;&gt;&lt;del&gt;DERBY-4230&lt;/del&gt;&lt;/a&gt; is a regression related to this issue.  If the links are correct, this is our 12th regression related to this issue. The reports have trickled in over the past two years and have had a wide variety of symptoms.&lt;/p&gt;

&lt;p&gt;I wonder if anyone has any ideas for a testing plan that we might be able to use to pop any additional issues related to this change? &lt;/p&gt;</comment>
                            <comment id="12710725" author="rhillegas" created="Tue, 19 May 2009 14:11:15 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;I don&apos;t have any smart ideas, short of borrowing a query generator from some other project, generating a lot of queries (not just ones involving aggregates and GROUP BY), and comparing the results between Derby and some other database. Eliminating the parser&apos;s rewriting of the AST was a significant change to Derby&apos;s SQL interpreter. 8 years of code had piled up on top of the assumption that the AST was rewritten in the parser. The assumptions weren&apos;t linked to one another in any systematic way and I don&apos;t know of any systematic way to track them all down. So far, we have seen bugs related to GROUP BY, sort order, subqueries, unions, and column aliasing. The bugs are peppered all across the language.&lt;/p&gt;</comment>
                            <comment id="12710942" author="kmarsden" created="Wed, 20 May 2009 00:29:42 +0100"  >&lt;p&gt;Well I drilled down on those linked issues and 12 was too harsh.  Some of the linked issues were actually fixed by this change.&lt;/p&gt;

&lt;p&gt;The idea of borrowing a query generator from some other project and comparing results with another db  sounds like an interesting one for a new angle on  general testing as well.&lt;/p&gt;

&lt;p&gt;It looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4230&quot; title=&quot;DatabaseMetaData.getColumns() returns extra column from view with group by and  expression in SELECT list&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4230&quot;&gt;&lt;del&gt;DERBY-4230&lt;/del&gt;&lt;/a&gt; is an issue of size() being used where visibleSize() was appropriate.  I seem to recall this being an issue with at least one other issue.  It might be interesting to look at the other size() calls and make sure they shouldn&apos;t be visibleSize() instead now that the rewrite is gone.&lt;/p&gt;

&lt;p&gt;A strange thing about Eclipse is when I search for references to QueryTreeNodeVector.size(), I am getting back all references to a size() method regardless of the class, which is a quite a lot of references.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="32566">DERBY-280</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12385772">DERBY-3303</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12383298">DERBY-3231</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12384034">DERBY-3257</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12399735">DERBY-3764</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12404026">DERBY-3872</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12425514">DERBY-4230</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12441126">DERBY-4450</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12404477">DERBY-3880</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347089">DERBY-1624</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12415041">DERBY-4063</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12415595">DERBY-4071</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12350104">DERBY-1861</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347089">DERBY-1624</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12347504" name="681.patch.txt" size="69421" author="mkhettry" created="Tue, 19 Dec 2006 17:01:40 +0000"/>
                            <attachment id="12352868" name="681.patch2.txt" size="86228" author="mkhettry" created="Wed, 7 Mar 2007 22:18:26 +0000"/>
                            <attachment id="12352954" name="681.patch3.txt" size="82914" author="mkhettry" created="Fri, 9 Mar 2007 01:35:50 +0000"/>
                            <attachment id="12353305" name="followup.patch.txt" size="1878" author="mkhettry" created="Wed, 14 Mar 2007 17:25:36 +0000"/>
                            <attachment id="12347505" name="notes.txt" size="7955" author="mkhettry" created="Tue, 19 Dec 2006 17:02:42 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Nov 2005 06:10:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29654</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0naf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37591</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>