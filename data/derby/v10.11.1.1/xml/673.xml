<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-673/DERBY-673.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-673] Get rid of the NodeFactory</title>
                <link>https://issues.apache.org/jira/browse/DERBY-673</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This piece of code once had a purpose in life. It was one of the double-joints which allowed cloudscape to ship with and without compiler support for the synchronization language. Synchronization has been removed. If we want to plug in optional language components, I think there are better ways to do this.&lt;/p&gt;

&lt;p&gt;The NodeFactory turned into a big, sprawling piece of code. At some point this code was slimmed down by telescoping all of its factory methods into a couple unwieldly, weakly-typed overloads backed by cumbersome logic in the actual node constructors. I would like to reintroduce strongly typed node constructors which the parser can call directly. This will make node generation easier to read and less brittle and it will get rid of the now useless NodeFactory class.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12325258">DERBY-673</key>
            <summary>Get rid of the NodeFactory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Thu, 3 Nov 2005 02:21:05 +0000</created>
                <updated>Wed, 21 Jan 2015 00:23:02 +0000</updated>
                            <resolved>Thu, 17 Oct 2013 13:59:46 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12358697" author="djd" created="Tue, 29 Nov 2005 04:35:46 +0000"  >&lt;p&gt;Would this change allow some rationalization of the type hierachy for nodes?  Every &quot;node&quot; is a sub-class of QueryTreeNode, but it seems to me that several nodes are forced into the hierachy  through the use of the NodeFactory. Any &quot;node&quot; that is really a data element would seem to fall into this. E.g. TableName, TableElementNode and its sub-classes. It&apos;s possible those nodes do not need to be sub-classes of QueryTreeNode.&lt;/p&gt;</comment>
                            <comment id="12358703" author="rhillegas" created="Tue, 29 Nov 2005 05:29:52 +0000"  >&lt;p&gt;This change should not preclude and I expect it would facilitate reorganizations of the type hierarchy for nodes in the abstract syntax tree. Having said that, I don&apos;t think I understand the motivation for making some nodes not descend from QueryTreeNode. QueryTreeNode is supposed to be the ancestor of all abstract syntax tree nodes. This is a useful abstraction because it regularizes compiler code. It removes a lot of special case logic from the handling of the compilation steps defined by QueryTreeNode: bind(), optimize(), and generate(). In addition, it forces an engineer, when adding a new AST node, to account for these steps. I can see some methods in QueryTreeNode which probably belong in its descendants. However, I think QueryTreeNode basically makes a lot of sense and the code would be a lot uglier without this abstraction.&lt;/p&gt;</comment>
                            <comment id="12358704" author="djd" created="Tue, 29 Nov 2005 05:55:59 +0000"  >&lt;p&gt;The rational is that some current nodes are not really QueryTreeNodes, but common data elements for real nodes. TableName is an example, which actually represents any two part name (e.g. view, table, function, procedure etc.). Some of the list nodes just  contain lists of other nodes, it&apos;s not clear to me that all these correctly are QueryTreeNodes.&lt;/p&gt;</comment>
                            <comment id="12358707" author="rhillegas" created="Tue, 29 Nov 2005 06:31:53 +0000"  >&lt;p&gt;TableName doesn&apos;t have a useful optimize() or generate() method but it does have a bind() method. It looks like a reasonable AST node (that is, QueryTreeNode) to me.&lt;/p&gt;</comment>
                            <comment id="12358738" author="djd" created="Tue, 29 Nov 2005 11:40:38 +0000"  >&lt;p&gt;Maybe, but the bind() method doesn&apos;t actually bind the node, it just fetches the schema descriptor, which is already handled by other methods on QueryTreeNode. You could implement the functionality of the TableName in query trees, a two part name, without extending QueryTreeNode. Possibly it is never used as a QueryTreeNode and never uses any methods of its parent class.&lt;/p&gt;</comment>
                            <comment id="12361766" author="djd" created="Thu, 5 Jan 2006 02:29:07 +0000"  >&lt;p&gt;See comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-791&quot; title=&quot;Expose api for printing Abstract Syntax Trees in production (non-debug) servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-791&quot;&gt;DERBY-791&lt;/a&gt; for a use of the node factory.  It could be that a NodeFactory could still exist with strongly typed init methods instead of constructors.&lt;/p&gt;</comment>
                            <comment id="13666116" author="knutanders" created="Fri, 24 May 2013 09:44:32 +0100"  >&lt;p&gt;Strongly typed constructors or init() methods, with or without the NodeFactory, would be particularly useful now that trunk can have Java 6 code with generics. If you try to pass a parameterized type to one of the init() methods, like a List&amp;lt;String&amp;gt; instance, you&apos;ll have to do an unchecked cast from Object to List&amp;lt;String&amp;gt; inside the init() method and the compiler will produce a warning.&lt;/p&gt;</comment>
                            <comment id="13675542" author="dagw" created="Wed, 5 Jun 2013 03:54:47 +0100"  >&lt;p&gt;Uploading a partial proof-of-concept patch for this; it is incremental by moving from using the node factory to constructors for a subset of the node types. When all node types have been converted, the node factory can be dismissed. &lt;/p&gt;

&lt;p&gt;I have not created new classes for those node types which share classes, e.g. the BinaryRelationalOperatorNode are used by six node types; =, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=. Since many old &quot;init&quot; methods were type overloaded, casting their arguments depending on the node type, the patch does create more methods, thus increasing foot print some, but not all that much I believe. I&apos;ll make some measurements later. Code clarity is improved, code reduction is ca 650 lines so far, and type safety is improved by stronger typing of constructor arguments .&lt;/p&gt;

&lt;p&gt;I have not (yet) made any attempts to uncouple classes from unnecessarily inheriting QueryTreeNode (as suggested by Dan).&lt;/p&gt;

&lt;p&gt;The regressions run ok with this. &lt;/p&gt;</comment>
                            <comment id="13685453" author="dagw" created="Mon, 17 Jun 2013 11:58:11 +0100"  >&lt;p&gt;Uploading derby-673-1 which removes the node factory and does some further cleanup in the compiler.&lt;/p&gt;

&lt;p&gt;a) Replaced the old init methods in &quot;*Node.java&quot; classes with constructors. Some logical node types have different &quot;C_NodeType&quot; values in their nodeType field after construction but still share the same node class.  I have not attempted to increase the number of node classes to match logical == physical node classes this once. Actually one class was removed because it unused: &quot;SQLBooleanConstantNode&quot;. &quot;IsNode&quot; is also currently unused but there is a JIRA to make use of it (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5973&quot; title=&quot;Add syntax for boolean IS operator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5973&quot;&gt;DERBY-5973&lt;/a&gt;), so I left it in place.&lt;/p&gt;

&lt;p&gt;   Boxed argument types were replaced by primitive types except in a few cases where instanceof was used on them to detect type overloading; this could be gotten rid of by adding more constructors.&lt;/p&gt;

&lt;p&gt;   Since the constructor arguments are now strongly typed, a great many casts were removed in the process and readability is improved a lot.&lt;/p&gt;

&lt;p&gt;   In some cases the old init procedures did computations before calling &quot;super.init&quot;. Since the call to the corresponding super constructor needs to be the first code in a constructor, I sometimes had to introduce new private static methods to compute the correct arguments to send on to the super class constructor, e.g. &quot;getTypeId&quot; in &quot;UserTypeConstantNode&quot;. I think there is some redundancy here that could be removed in a follow-up patch.&lt;/p&gt;

&lt;p&gt;   All the non-abstract node classes (still) set their corresponding &quot;C_NodeType&quot; value; but in many (most?) cases the field is no longer needed. This could be improved by removing them altogether and introduced class constants where needed to differentiate between logical node type mapped to one class. This is already done halfheartedly to some extent, e.g. enum &quot;Sign&quot; in &quot;IsNullNode&quot;.&lt;/p&gt;

&lt;p&gt;   The old &quot;tools/jar/DBMSnodes.properties&quot; file could be removed altogether since the node classes are now added automatically due to dependencies that the compiler can see (no longer constructed by reflection).&lt;/p&gt;

&lt;p&gt;   The old nodeFactory method &quot;doJoinOrderOptimization&quot; was moved to the OptimizerFactory now that the NodeFactory has gone.&lt;/p&gt;

&lt;p&gt;b) Added @Override tags to methods that override existing methods (not those that merely implement an interface)&lt;/p&gt;

&lt;p&gt;c) Removed unused imports and sorted import statements for ease of future maintenance by IDEs&lt;/p&gt;

&lt;p&gt;d) Renamed variables that shadowed class members&lt;/p&gt;

&lt;p&gt;e) Replaced usage of StringBuffer with StringBuilder&lt;/p&gt;

&lt;p&gt;f) Restricted public visibility to package private for all classes, methods and members in compile/impl unless they needed more visibility according to actual usage.&lt;/p&gt;

&lt;p&gt;g) Made List arguments to node classes use generics in those cases it was missing.&lt;/p&gt;

&lt;p&gt;e) Renamed some node types to make the the type mirror the node class correctly (there were only very few exceptions to that rule), e.g.  LIKE_OPERATOR_NODE -&amp;gt; LIKE_ESCAPE_OPERATOR_NODE since the class is called LikeEscapeOperatorNode.&lt;/p&gt;

&lt;p&gt;f) Reduced scope of some variables: initialized to null values never used long before actual usage in code. By moving the declaration closed to usage, the unnecessary initialization could often be removed.&lt;/p&gt;

&lt;p&gt;g) Fixed some spelling errors in comments.&lt;/p&gt;

&lt;p&gt;h) Renamed some SQL-related constants (StoredFormatIds, TypeId) from &quot;longint&quot; &quot; to &quot;bigint&quot; to reflect Derby SQL syntax.&lt;/p&gt;

&lt;p&gt;Overall the patch removes ca 5K bytes in the insane derby.jar file, and ca 5000 source lines.&lt;/p&gt;

&lt;p&gt;All regressions passed, but I&apos;ll be running more tests on more platforms since it is a big change.&lt;/p&gt;

&lt;p&gt;Reviewers: you need to do &quot;svn remove&quot; of the five files that went away before attempting to build Derby, cf. the status file.&lt;/p&gt;

&lt;p&gt;Things to look out for: missed opportunities to remove casts. The compiler doesn&apos;t help me detect superfluous ones &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I realize this is a big patch, and if anybody thinks I should break it up, or drop parts of it, I am willing to consider it. I didn&apos;t experience much in the way of errors during the conversion, though, so my confidence in the patch is pretty good.  I did the changes incrementally over some 75 change/test cycles.&lt;/p&gt;
</comment>
                            <comment id="13687934" author="rhillegas" created="Wed, 19 Jun 2013 13:42:10 +0100"  >&lt;p&gt;Thanks for this major overhaul, Dag. After this patch, what is the purpose of the type ids and names in C_NodeTypes and C_NodeNames? Thanks.&lt;/p&gt;</comment>
                            <comment id="13687941" author="knutanders" created="Wed, 19 Jun 2013 13:56:50 +0100"  >&lt;p&gt;Thanks for the patch, Dag. I think this is a good improvement, as it makes a whole class of errors detectable at compile time.&lt;/p&gt;

&lt;p&gt;I did go through the patch, but because of the size of it, I must admit that I didn&apos;t study each line very carefully. But my impression was that the changes looked reasonable. So +1 from me.&lt;/p&gt;

&lt;p&gt;In some parts of the patch, it looked like the only changes were renaming of variables, like operator -&amp;gt; op, methodName -&amp;gt; mNam or methodNam, exposedName -&amp;gt; exposedNam, costEstimate -&amp;gt; costEst. I think I prefer the old names, but not so much that I think it should block the commit. No, wait... Maybe these were the variables you referred to in (d) in the patch description? OK, that&apos;s a good enough reason for renaming them, I would suppose.&lt;/p&gt;
</comment>
                            <comment id="13689253" author="dagw" created="Thu, 20 Jun 2013 15:03:30 +0100"  >&lt;p&gt;Rick; the C_NodeNames class is gone. Most of the C_NodeTypes constants are useless but in some cases they are used to differentiate logical node classes mapped onto one physical node class. That usage could be refactored into enums defined by that physical class, and would be good to do in a next step.&lt;/p&gt;

&lt;p&gt;Knut, you are right, the renamings were done to avoid the shadowing of class members. They could be removed I guess; shadowing isn&apos;t necessarily bad, but its probably a good idea to avoid them; that enables us to keep the IDE warnings enabled and so detect blunders due to new errors.&lt;/p&gt;

&lt;p&gt;I also found a way to enable warnings to detect now useless casts (-Xlint:cast) so I&apos;ll upload a revised version 2 of the patch shortly.&lt;/p&gt;

&lt;p&gt;Note: since classes in impl/sql/compilation do no always get compiled as part of the build.xml that logically is supposed to build those classes (they get sucked in for compilation in the iapi parts of the code I believe), I had to enable warnings in other build.xml files to see the warnings and even then I didn&apos;t see them all, so in the end I resorted to compile the classes by hand to get all the warnings &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; More work to do there...&lt;/p&gt;
</comment>
                            <comment id="13689268" author="dagw" created="Thu, 20 Jun 2013 15:10:43 +0100"  >&lt;p&gt;Uploading version 2 with more unnecessary casts removed; plus some raw types converted to generics versions; regressions passed.&lt;/p&gt;</comment>
                            <comment id="13690098" author="dagw" created="Fri, 21 Jun 2013 08:37:25 +0100"  >&lt;p&gt;Attaching version 3 of the patch which adds some trivial merge changes to XMLOptTrace.java and TableName.java.&lt;/p&gt;</comment>
                            <comment id="13690105" author="dagw" created="Fri, 21 Jun 2013 08:49:15 +0100"  >&lt;p&gt;Committed version 3 to trunk as 1495305.&lt;/p&gt;</comment>
                            <comment id="13690116" author="dagw" created="Fri, 21 Jun 2013 09:15:18 +0100"  >&lt;p&gt;Uploading a little patch which fixes up some comments that were accidentally changed by the first patch; committed as svn 1495317.&lt;/p&gt;</comment>
                            <comment id="13690166" author="jira-bot" created="Fri, 21 Jun 2013 11:03:42 +0100"  >&lt;p&gt;Commit 1495361 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1495361&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1495361&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Fixed javadoc warnings.&lt;/p&gt;</comment>
                            <comment id="13692763" author="dagw" created="Tue, 25 Jun 2013 06:25:42 +0100"  >&lt;p&gt;Attaching derby-673-typesafe-lists-1, which introduces generics to the lists based on QueryTreeNodeVector. I also let the latter implement the Iterable interface, which opens up for using Java 6 &quot;foreach&quot; syntax in many cases. The patch makes use of this too. Together, these changes enables many casts to be eliminated and code clarification in the compiler implementation.&lt;/p&gt;

&lt;p&gt;It also removes most -Xlint warnings from impl/sql/compile classes, so it should be ready to run with full lint. The one remaining I wasn&apos;t sure how to handle, but I believe&lt;br/&gt;
it could be suppressed:&lt;/p&gt;

&lt;p&gt;   ParseException.java:33: warning: &lt;span class=&quot;error&quot;&gt;&amp;#91;serial&amp;#93;&lt;/span&gt; serializable class ParseException has no definition of serialVersionUID&lt;br/&gt;
   class ParseException extends Exception {&lt;/p&gt;

&lt;p&gt;Diffstat summary;&lt;/p&gt;

&lt;p&gt;63 files changed, 854 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 1236 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regressions passed, ready for review.&lt;/p&gt;</comment>
                            <comment id="13693050" author="knutanders" created="Tue, 25 Jun 2013 14:59:05 +0100"  >&lt;p&gt;The patch looks like a good improvement. Some minor comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The first occurrence of &quot;is&quot; should be removed from the javadoc for CompilerContextImpl&apos;s constructor .&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In FromList.addFromTable(), why did the call to addElement(fromTable) have to be qualified with &quot;super&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Perhaps add braces around the body of the first loop in FromList.returnsAtMostSingleRow().&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13694549" author="jira-bot" created="Thu, 27 Jun 2013 08:38:32 +0100"  >&lt;p&gt;Commit 1497230 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1497230&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1497230&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory &lt;/p&gt;

&lt;p&gt;Remove an erroneously re-introduced &quot;public&quot; keyword from method&lt;br/&gt;
getParameterTypes. This removes a FindBugs warning about &quot;exposing&lt;br/&gt;
internal representation by returning reference to mutable object&quot;.&lt;/p&gt;</comment>
                            <comment id="13694553" author="dagw" created="Thu, 27 Jun 2013 08:57:28 +0100"  >&lt;p&gt;Thanks, Knut. Uploading version derby-673-typesafe-lists-2 which addresses your comments. You are right, there was no reason to prefix with super there.&lt;/p&gt;</comment>
                            <comment id="13695255" author="jira-bot" created="Fri, 28 Jun 2013 05:32:09 +0100"  >&lt;p&gt;Commit 1497644 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1497644&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1497644&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Patch derby-673-typesafe-lists-2, which introduces generics to the&lt;br/&gt;
lists based on QueryTreeNodeVector. I also let the latter implement&lt;br/&gt;
the Iterable interface, which opens up for using Java 6 &quot;foreach&quot;&lt;br/&gt;
syntax in many cases. The patch makes use of this. Together, these&lt;br/&gt;
changes enables many casts to be eliminated and code clarification in&lt;br/&gt;
the compiler implementation.&lt;/p&gt;

&lt;p&gt;It also removes most -Xlint warnings from impl/sql/compile classes, so&lt;br/&gt;
it should be ready to run with full lint.&lt;/p&gt;

&lt;p&gt;Diffstat summary:&lt;br/&gt;
63 files changed, 854 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 1236 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13695409" author="jira-bot" created="Fri, 28 Jun 2013 13:03:43 +0100"  >&lt;p&gt;Commit 1497742 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1497742&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1497742&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Followup fix to patch derby-673-typesafe-lists-2. The patch introduced&lt;br/&gt;
an issue causing ConcurrentModificationException. Roll back that change.&lt;/p&gt;</comment>
                            <comment id="13695442" author="jira-bot" created="Fri, 28 Jun 2013 14:32:54 +0100"  >&lt;p&gt;Commit 1497767 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1497767&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1497767&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Followup fix to patch derby-673-typesafe-lists-2. The patch introduced&lt;br/&gt;
a bug in FromSubquery: wrong loop upper bound. Roll back that change.&lt;/p&gt;</comment>
                            <comment id="13696304" author="dagw" created="Sun, 30 Jun 2013 09:47:36 +0100"  >&lt;p&gt;Attaching another patch, derby-673-more-typesafe-6. This cleans up most compiler warnings in the classes touched, including unnecessary casts due to changes introduced by this use, but also others. &lt;br/&gt;
Some warnings were silenced using the @SuppressWarning tag (mostly use of old classes like Vector, Hashtable), in other cases the underlying problem was fixed by changing the code as required.&lt;/p&gt;

&lt;p&gt;It also introduces an explicit TriggerDescriptorList class extending a generified GenericDescriptorList&amp;lt;TriggerDescriptor&amp;gt;.&lt;/p&gt;

&lt;p&gt;I left warnings about missing serialVersionUID in serializable classes since I am not sure whether they can be safely suppressed; it would need further analysis.&lt;/p&gt;

&lt;p&gt;Regressions passed.&lt;/p&gt;</comment>
                            <comment id="13708011" author="jira-bot" created="Sun, 14 Jul 2013 13:41:11 +0100"  >&lt;p&gt;Commit 1502965 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1502965&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1502965&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Patch, derby-673-more-typesafe-6. This cleans up most compiler&lt;br/&gt;
warnings in the classes touched, including unnecessary casts due to&lt;br/&gt;
changes introduced by this use, but also others.  Some warnings were&lt;br/&gt;
silenced using the @SuppressWarning tag (mostly use of old classes&lt;br/&gt;
like Vector, Hashtable), in other cases the underlying problem was&lt;br/&gt;
fixed by changing the code as required.&lt;/p&gt;

&lt;p&gt;It also introduces an explicit TriggerDescriptorList class extending a&lt;br/&gt;
generified GenericDescriptorList&amp;lt;TriggerDescriptor&amp;gt;.&lt;/p&gt;

&lt;p&gt;Some local variables shadowing others are renamed and in in case&lt;br/&gt;
the two variables were merged into one.&lt;/p&gt;

&lt;p&gt;I left in place warnings about missing serialVersionUID in&lt;br/&gt;
serializable classes since I am not sure whether they can be safely&lt;br/&gt;
suppressed; it would need further analysis.&lt;/p&gt;</comment>
                            <comment id="13712337" author="dagw" created="Thu, 18 Jul 2013 14:50:12 +0100"  >&lt;p&gt;Uploading two alternate patches, derby-673-nuke-ctypes-without-enum and derby-673-nuke-ctypes-enum. Both remove the usage of the global&lt;br/&gt;
nodeType integer (see QueryTreeNode) defined by C_NodeType.java. After the removal of the node factory, this global quantity whose use mimicked &quot;instanceof&quot; can be discarded, mostly. For some node which represent several logical node types, e.g. BinaryArithmeticOperatorNode which can represent for example both + and minus, a new quantity, &quot;kind&quot; is introduced to differentiate between the logical types of nodes.&lt;/p&gt;

&lt;p&gt;The one patch implements &quot;kind&quot; using enums, the other using static final ints. I first implemented with enums, but it turns out it adds a bit more weight than one would like. Sizes of the insane jars compiled using java 1.8 EA b94:&lt;/p&gt;

&lt;p&gt; derby.jar &lt;span class=&quot;error&quot;&gt;&amp;#91;before the patches&amp;#93;&lt;/span&gt;:  3017406 &lt;br/&gt;
 derby.jar &lt;span class=&quot;error&quot;&gt;&amp;#91;iwith enum&amp;#93;&lt;/span&gt;:                3024918 &lt;br/&gt;
 derby.jar &lt;span class=&quot;error&quot;&gt;&amp;#91;with static ints&amp;#93;&lt;/span&gt;:          3007835&lt;/p&gt;

&lt;p&gt;so I guess we&apos;d better use the leaner version (it improves on footprint rather than increases it). Comments appreciated.&lt;br/&gt;
Regressions ran OK.&lt;/p&gt;

</comment>
                            <comment id="13713610" author="knutanders" created="Fri, 19 Jul 2013 13:37:20 +0100"  >&lt;p&gt;Thanks for the patches, Dag.&lt;/p&gt;

&lt;p&gt;I think they both look like improvements. The enum variant doesn&apos;t seem to use any of the more advanced enum features, and I don&apos;t think the non-enum variant is significantly less readable or concise. So in this case I agree that the smaller footprint of the non-enum patch sounds more attractive.&lt;/p&gt;

&lt;p&gt;I would prefer that the isSameNodeType() method was overridden in the subclasses that need special handling, instead of stuffing the base method in ValueNode with knowledge about the specialized nodes.&lt;/p&gt;

&lt;p&gt;Otherwise, the changes look good to me.&lt;/p&gt;</comment>
                            <comment id="13715038" author="dagw" created="Mon, 22 Jul 2013 10:22:04 +0100"  >&lt;p&gt;Thanks, Knut. I agree on the matter of isSameNodeType; I refrained from doing it to reduced # of methods, but I&apos;ll have a go and see if it comes cheaply enough.&lt;/p&gt;</comment>
                            <comment id="13716278" author="dagw" created="Tue, 23 Jul 2013 11:11:57 +0100"  >&lt;p&gt;Attaching version 2 of the &quot;nuke-ctypes-without-enums&quot; patch. This refactors the isSameNodeType to move to logic of testing kinds into the relevant node classes.&lt;/p&gt;

&lt;p&gt;I introduced a default method ValueNode#isSameNodeKind which the classes that implement several kinds need to override to add the extra kind check. This is then called from the isEquivalent overrides as needed.&lt;/p&gt;

&lt;p&gt;Regressions passed.&lt;/p&gt;</comment>
                            <comment id="13716302" author="knutanders" created="Tue, 23 Jul 2013 11:52:51 +0100"  >&lt;p&gt;I see that not all classes that define &quot;kind&quot; override isSameNodeKind(). Is that intentional? (SpecialFunctionNode, ModifyColumnNode, TernaryOperatorNode.)&lt;/p&gt;

&lt;p&gt;Does isSameNodeKind() need to be declared in ValueNode? As far as I can see, the default implementation will never be called because of the type checks that all callers of isSameNodeKind() do first. And it looks like all callers of isSameNodeKind() cast the ValueNode to a more specific type, so maybe the isSameNodeKind() methods could be private instead?&lt;/p&gt;</comment>
                            <comment id="13718115" author="dagw" created="Wed, 24 Jul 2013 09:22:31 +0100"  >&lt;p&gt;Thanks, Knut. Yes, it is intentional, if slightly confusing. isSameNodeKind is really only a helper for isEquivalent. For SpecialFunctioNode and TernaryOperatorNode isEquivalent tests on kind directly without a call to isSameNodeKind (because they have no derived classes). Perhaps it might look cleaner if we let them define isSameNodeKind also?&lt;/p&gt;

&lt;p&gt;ModifyColumnNode is not a ValueNode, so isEquivalent is not present (and hence no isSameNodeKind is needed either).&lt;/p&gt;

&lt;p&gt;There are some cases that use the default in ValueNode, e.g. BooleanConstantNode, UntypedNullConstantNode, other ConstantNode classes do have kinds. But I guess I could move it down to ConstantNode for that case. I still think it&apos;s nice to tie all the kind usages together, though, so if not via a default method in ValueNode, I guess I could make them implement a NodeKinds interface?&lt;/p&gt;</comment>
                            <comment id="13718153" author="knutanders" created="Wed, 24 Jul 2013 10:09:13 +0100"  >&lt;p&gt;Maybe something like this would work, and make it clearer which nodes need to implement the isSameNodeKind() method:&lt;/p&gt;

&lt;p&gt;1) Keep ValueNode.isSameNodeType() as it is today (it seems like it&apos;s still useful as a shorthand, as the isEquivalent() methods in the patch perform the same check manually)&lt;/p&gt;

&lt;p&gt;2) Make UnaryOperatorNode.isEquivalent() and BinaryOperatorNode.isEquivalent() check other.kind == this.kind directly, since they cast the received object to the specific type anyway&lt;/p&gt;

&lt;p&gt;3) Introduce an isSameNodeKind() method in ConstantNode (and sub-classes as necessary) for use in ConstantNode.isEquivalent()&lt;/p&gt;

&lt;p&gt;I think that if isSameNodeKind() is defined in ValueNode, it is more likely that it will be used as a general utility method, so it should be overridden in all nodes that use kinds, for consistency. But it sounds unnecessary to implement this method in classes where we don&apos;t expect it to be called, so I&apos;d prefer that we keep it local to the sub-tree (ConstantNode) that seems to need the ability to override the behaviour.&lt;/p&gt;

&lt;p&gt;If we give the method a prominent place, such as ValueNode or its own NodeKinds interface, I think we should give it better defined semantics. Currently, the base method has two possible outcomes (true or false), whereas the overrides have four (true, false, NullPointerException or ClassCastException).&lt;/p&gt;</comment>
                            <comment id="13718463" author="dagw" created="Wed, 24 Jul 2013 16:13:52 +0100"  >&lt;p&gt;Uploading patch #3. Discussed the approach with Knut on a back channel, and we agreed to keep the ValueNode#isSameNodeKind but give it more tasks: check that the other node isnt null and check that the two objects have the same class. Overrides will then first call super.isSameNodeKind. isEquivalent will all call isSameNodeKind only before proceeding to cast and check the kind fields.&lt;/p&gt;

&lt;p&gt;Tests ran ok.&lt;/p&gt;</comment>
                            <comment id="13719308" author="knutanders" created="Thu, 25 Jul 2013 08:01:55 +0100"  >&lt;p&gt;Thanks, Dag. Patch #3 looks good to me. +1&lt;/p&gt;</comment>
                            <comment id="13719318" author="jira-bot" created="Thu, 25 Jul 2013 08:12:48 +0100"  >&lt;p&gt;Commit 1506827 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1506827&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1506827&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Patch derby-673-nuke-ctypes-without-enum-3.&lt;/p&gt;

&lt;p&gt;This patch removes the usage of the global nodeType integer (see&lt;br/&gt;
QueryTreeNode) defined by C_NodeType.java. After the removal of the&lt;br/&gt;
node factory, this global quantity whose use mimicked &quot;instanceof&quot; can&lt;br/&gt;
be discarded, mostly. For some node which represent several logical&lt;br/&gt;
node types, e.g. BinaryArithmeticOperatorNode which can represent for&lt;br/&gt;
example both + and minus, a new quantity, &quot;kind&quot; is introduced to&lt;br/&gt;
differentiate between the logical types of nodes.&lt;/p&gt;

&lt;p&gt;We introduce a default method ValueNode#isSameNodeKind which the&lt;br/&gt;
classes that implement several kinds need to override to add the extra&lt;br/&gt;
kind check. This is then called from the isEquivalent overrides as&lt;br/&gt;
needed.&lt;/p&gt;

&lt;p&gt;JavaDoc for isSameNodeKind:&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Some node classes represent several logical node types (to reduce&lt;/li&gt;
	&lt;li&gt;footprint), which we call kinds.&lt;/li&gt;
	&lt;li&gt;This means that implementations of 
{@link #isEquivalent()}&lt;/li&gt;
	&lt;li&gt;cannot always just use instanceof to check if the other node&lt;/li&gt;
	&lt;li&gt;represents the same kind. Hence this method needs to be&lt;/li&gt;
	&lt;li&gt;implemented by all node classes that represent several kinds.&lt;/li&gt;
	&lt;li&gt;It is only called from implementations of isEquivalent.&lt;br/&gt;
 *&lt;/li&gt;
	&lt;li&gt;@param other The other value node whose kind we want to compare with.&lt;/li&gt;
	&lt;li&gt;@return true if this and o represent the same&lt;/li&gt;
	&lt;li&gt;logical node type, i.e. kind.&lt;br/&gt;
 */&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13721800" author="jira-bot" created="Sun, 28 Jul 2013 00:36:02 +0100"  >&lt;p&gt;Commit 1507747 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1507747&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1507747&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-673&quot; title=&quot;Get rid of the NodeFactory&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-673&quot;&gt;&lt;del&gt;DERBY-673&lt;/del&gt;&lt;/a&gt;: Get rid of the NodeFactory&lt;/p&gt;

&lt;p&gt;Javadoc fix.&lt;/p&gt;</comment>
                            <comment id="14284733" author="myrna" created="Wed, 21 Jan 2015 00:23:02 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12327185">DERBY-791</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12588127" name="derby-673-1.diff.gz" size="271225" author="dagw" created="Mon, 17 Jun 2013 11:58:11 +0100"/>
                            <attachment id="12588128" name="derby-673-1.status" size="20253" author="dagw" created="Mon, 17 Jun 2013 11:58:11 +0100"/>
                            <attachment id="12588843" name="derby-673-2.diff.gz" size="276743" author="dagw" created="Thu, 20 Jun 2013 15:10:43 +0100"/>
                            <attachment id="12588844" name="derby-673-2.status" size="20329" author="dagw" created="Thu, 20 Jun 2013 15:10:43 +0100"/>
                            <attachment id="12589014" name="derby-673-3.diff.gz" size="277201" author="dagw" created="Fri, 21 Jun 2013 08:37:25 +0100"/>
                            <attachment id="12589015" name="derby-673-3.status" size="20329" author="dagw" created="Fri, 21 Jun 2013 08:37:25 +0100"/>
                            <attachment id="12589021" name="derby-673-fixcomments.diff" size="2284" author="dagw" created="Fri, 21 Jun 2013 09:15:18 +0100"/>
                            <attachment id="12590199" name="derby-673-more-typesafe-6.diff" size="155885" author="dagw" created="Sun, 30 Jun 2013 09:47:36 +0100"/>
                            <attachment id="12590200" name="derby-673-more-typesafe-6.status" size="4750" author="dagw" created="Sun, 30 Jun 2013 09:47:36 +0100"/>
                            <attachment id="12592970" name="derby-673-nuke-ctypes-enum.diff" size="267693" author="dagw" created="Thu, 18 Jul 2013 14:39:05 +0100"/>
                            <attachment id="12592972" name="derby-673-nuke-ctypes-enum.stat" size="11346" author="dagw" created="Thu, 18 Jul 2013 14:39:05 +0100"/>
                            <attachment id="12593679" name="derby-673-nuke-ctypes-without-enum-2.diff" size="282064" author="dagw" created="Tue, 23 Jul 2013 11:11:57 +0100"/>
                            <attachment id="12593680" name="derby-673-nuke-ctypes-without-enum-2.status" size="11592" author="dagw" created="Tue, 23 Jul 2013 11:11:57 +0100"/>
                            <attachment id="12593956" name="derby-673-nuke-ctypes-without-enum-3.diff" size="282180" author="dagw" created="Wed, 24 Jul 2013 16:13:52 +0100"/>
                            <attachment id="12593957" name="derby-673-nuke-ctypes-without-enum-3.status" size="11592" author="dagw" created="Wed, 24 Jul 2013 16:13:52 +0100"/>
                            <attachment id="12592971" name="derby-673-nuke-ctypes-without-enum.diff" size="270520" author="dagw" created="Thu, 18 Jul 2013 14:39:05 +0100"/>
                            <attachment id="12592973" name="derby-673-nuke-ctypes-without-enum.status" size="11346" author="dagw" created="Thu, 18 Jul 2013 14:39:41 +0100"/>
                            <attachment id="12589554" name="derby-673-typesafe-lists-1.diff" size="237768" author="dagw" created="Tue, 25 Jun 2013 06:25:42 +0100"/>
                            <attachment id="12589555" name="derby-673-typesafe-lists-1.status" size="5363" author="dagw" created="Tue, 25 Jun 2013 06:25:42 +0100"/>
                            <attachment id="12589852" name="derby-673-typesafe-lists-2.diff.gz" size="44908" author="dagw" created="Thu, 27 Jun 2013 09:12:28 +0100"/>
                            <attachment id="12589851" name="derby-673-typesafe-lists-2.status" size="5376" author="dagw" created="Thu, 27 Jun 2013 09:12:28 +0100"/>
                            <attachment id="12586248" name="nodefactory-31.status" size="12553" author="dagw" created="Wed, 5 Jun 2013 03:56:09 +0100"/>
                            <attachment id="12586247" name="nodefactory-31.zip" size="107278" author="dagw" created="Wed, 5 Jun 2013 03:56:09 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Nov 2005 04:35:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29652</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0swn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38501</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>