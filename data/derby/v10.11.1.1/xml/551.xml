<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-551/DERBY-551.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-551] Allow invoking java stored procedures from inside a trigger. Make CALL a valid statement in the trigger body.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-551</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby currently doesn&apos;t allow CALL statement to be used in a trigger body. It would be great to allow java stored procedure invocation inside a trigger. Since Derby doesn&apos;t have SQL procedure language, triggers can only execute a single SQL statement. If we allow stored procedures in triggers, it would be possible to write a trigger that involves more than just one SQL statement. Functions are currently allowed, but they are read-only.&lt;/p&gt;

&lt;p&gt;I believe it is fairly easy to support this enhancement. Need good amount of testing though.&lt;/p&gt;</description>
                <environment>All platforms</environment>
        <key id="12314102">DERBY-551</key>
            <summary>Allow invoking java stored procedures from inside a trigger. Make CALL a valid statement in the trigger body.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="deepa">Deepa Remesh</assignee>
                                    <reporter username="bandaram">Satheesh Bandaram</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Sep 2005 09:44:01 +0100</created>
                <updated>Wed, 1 Jul 2009 01:34:48 +0100</updated>
                            <resolved>Thu, 27 Jul 2006 22:53:52 +0100</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12320915" author="rhillegas" created="Sat, 3 Sep 2005 03:49:00 +0100"  >&lt;p&gt;Cloudscape 3.5 allowed the CALL statement (procedure invocation) inside a trigger. So the plumbing to do this is mostly already in the code. Does anyone know why this feature was dropped from Derby and what problems we should watch out for if we re-enable it?&lt;/p&gt;</comment>
                            <comment id="12320932" author="djd" created="Sat, 3 Sep 2005 05:57:34 +0100"  >&lt;p&gt;FYI - Cloudscape 3.5 supported a CALL statement but did not support procedures. Not sure what effect this will have on re-enabling the CALL statement in triggers, apart from the combination is unlikely to have been tested.&lt;/p&gt;</comment>
                            <comment id="12418526" author="deepa" created="Fri, 30 Jun 2006 05:04:03 +0100"  >&lt;p&gt;Attaching a draft patch &apos;derby-551-draft1.diff&apos; (not for commit) which enables procedures to be called from triggers. This patch is not complete. I am posting it as I would like to get some feedback. Changes made by the patch are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Modify the parsing to allow call statement inside trigger.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Check that procedures that modify SQL data are not allowed in BEFORE triggers. To check this, I used AliasDescriptor in DataDictionary to get the alias info. I have placed this check currently in routineInvocation(). I think this is causing a diff in lang/releaseCompileLocks.sql. There is an entry in the lock_table when there should be none:&lt;br/&gt;
TABLE|IS  |SYSALIASES                                                                                                                      |Tablelock           |GRANT&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Earlier, I had tried to use the RoutineAliasInfo in the MethodCallNode but this had not worked as this object was null at trigger creation time. Any suggestions to do this in a better way?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A new message is added to indicate the above error. It maps to the same SQL state as that for unsupported statements in triggers.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added a new test. I have to add some more test cases to this. I am adding tests based on the scenarios identified in ProcedureInTrigger_Tests_v1.html. Please go through this and let me know if there are scenarios that need to be added/removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modified two tests by removing statements that were testing that call statements are not allowed in triggers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I would appreciate feedback on the patch and the test scenarios.&lt;/p&gt;</comment>
                            <comment id="12419777" author="djd" created="Sat, 8 Jul 2006 04:59:28 +0100"  >&lt;p&gt;I think there are a couple of issues with the approach to checking for procedures that modify data in a before trigger.&lt;/p&gt;

&lt;p&gt;1) The field modifiesSqlData is parser wide, not specific to a single routine. This may cause issues when the call statement is like:&lt;/p&gt;

&lt;p&gt;        CALL MYPROC(MYFUNC(), MYOTHERFUNC(2));&lt;/p&gt;

&lt;p&gt;      This may work, but may be making false assumptions about the ordering of evaluating nodes.&lt;/p&gt;

&lt;p&gt;       Also I don&apos;t see the field being reset at any time.&lt;/p&gt;

&lt;p&gt;2) There is an existing mechanism for checking which routines are allowed, I would have expected this code to use the same functionality.&lt;br/&gt;
After looking into it, I see that it is a runtime check, not a compile time check.&lt;/p&gt;

&lt;p&gt;The existing runtime check is to support the fact that SQL statements executed in a Java method are not known when the routine is created (in SQL) since they are executed using dynamic JDBC. So if a routine is declared as READS SQL DATA then when it is executed by Derby its level of &apos;SQL allowed&apos; is set in the statement context . Then any JDBC statements executed by the Java method are checked against the current level. This includes routines, so a procedure that is declared READS SQL DATA will throw an exception at runtime if its Java method attempts to prepare an INSERT SQL statement, or  a CALL statement that executes another  SQL  procedure that is declared MODIFIES SQL DATA.&lt;br/&gt;
See StatementContext.setSQLAllowed(short, boolean);&lt;/p&gt;

&lt;p&gt;So we could use the existing mechanism, which means a before trigger with a CALL procedure that is declared MODIFIES SQL DATA statement would succeed but would fail at runtime when fired.&lt;/p&gt;</comment>
                            <comment id="12419795" author="deepa" created="Sat, 8 Jul 2006 06:43:56 +0100"  >&lt;p&gt;Thanks Dan for looking at the patch.&lt;/p&gt;

&lt;p&gt;I was working on a new patch and I am uploading it as I think it may address Dan&apos;s concerns. &apos;derby-551draft2.diff&apos;&apos; uses the same approach to check the sql allowed in procedures used in before triggers. In this patch, I moved this check to triggerDefinition(). In the first patch, I was doing the check in routineInvocation(). The patch also includes other minor changes and additional tests.  I had run derbyall with these changes and did not see any failures. However, I made a few small changes after that and need to run derbyall again.&lt;/p&gt;

&lt;p&gt;I checked the case mentioned by Dan (as issue 1) where we can have the value from a function call as a parameter to the procedure. This works as the function calls get into the parameter list and are evaluated later when the parameters are bound. Again it is based on the assumption of how the nodes are currently evaluated. Also, there could be other cases where this patch may not work. If someone can think of any other scenarios not covered in ProcedureInTrigger_Tests_v1.html, please let me know.&lt;/p&gt;

&lt;p&gt;I am just uploading this patch as I have it almost ready. I would appreciate if someone can look at it and see if the check for the sql allowed in procedures is okay. If this is not an acceptable solution, I plan to work on a new patch where the check is left to execution time instead of compile time.&lt;/p&gt;</comment>
                            <comment id="12419808" author="djd" created="Sat, 8 Jul 2006 09:04:29 +0100"  >&lt;p&gt;Another option is to use the existing compile time mechansim that defines what is allowed in a context. This is the CompilerContext.getReliability() infrastructure. Bits are set in the mask that define what operations are allowed (or not allowed, can&apos;t remember which way the definitions go).&lt;/p&gt;

&lt;p&gt;In this case the relability mode would be set to exclude &apos;modifies data&apos; routines during compilation of the trigger&apos;s  action statement, this would need some new bit definitions and checks in the node for routine call.&lt;/p&gt;

&lt;p&gt;I am concerned that your approach is limited to a single routine call, which is all that is required now, but does not support future changes where multiple procedures can form an action statement. The more general approach using the existing mechanisms will automatically handle future changes.&lt;/p&gt;</comment>
                            <comment id="12420113" author="deepa" created="Tue, 11 Jul 2006 01:09:34 +0100"  >&lt;p&gt;Attaching a new draft patch &quot;derby-551-draft3.diff&quot; which uses Dan&apos;s first suggestion (use the existing mechanism, which means a before trigger with a CALL procedure that is declared MODIFIES SQL DATA statement would succeed but would fail at runtime when fired. )&lt;/p&gt;

&lt;p&gt;In this patch, I removed the checks that I had added in the parser to check for type of procedure allowed in a before trigger. Instead, the existing runtime check is used. This was slightly modified to check that insert, update, delete on &quot;any&quot; table is not allowed in a before trigger. The existing check was only looking for insert, update,delete on the &quot;trigger table&quot;. If this is acceptable as a first step, I plan to submit a patch for this. And then work on a follow-up patch to move the check to compile time using Dan&apos;s second suggestion (use the existing compile time mechansim that defines what is allowed in a context).  Please take a look at the new patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12420336" author="deepa" created="Tue, 11 Jul 2006 23:46:29 +0100"  >&lt;p&gt;Attaching a patch &apos;derby-551-patch1-v1.diff&apos; for review/commit. This patch allows invoking procedures in triggered sql statement. It is based on &apos;derby-551-draft3.diff&apos; Changes are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Modifies the parser to allow call statement in the trigger action.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Changes the validateStatement in InternalTriggerExecutionContext to catch following statements not allowed in triggers:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DDL statements are not allowed in triggers. This was caught as an assert failure as this would be caught at compile time in case of direct use of DDL statements. Since use of DDL statement inside a procedure will not be caught at compile time, patch changes the assert to a SQLException.&lt;/li&gt;
	&lt;li&gt;Insert, update, delete statements are not allowed in a before trigger. On the same lines, a procedure that modifies sql data should not be allowed in a before trigger. This is also caught at runtime. This uses the existing check in InternalTriggerExecutionContext.validateStatement. However, the existing check was limited to the trigger table. This check was modified to check for use of insert,update,delete statements on any table.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds a new test lang/procedureInTrigger.sql to derbylang suite. The test is based on the scenarios in &apos; ProcedureInTrigger_Tests_v1.html&apos;. Only one case (calling procedures that modify SQL data in before triggers) is handled differently by this patch. Trigger creation will pass but firing will fail. This behaviour will change once we move this check to compile time. So I have not modified the test case document. Also, I have not added the test cases for recursive triggers as I am not sure about the expected behaviour. This is being discussed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1261&quot; title=&quot;Two triggers on same table cause &amp;quot;ERROR 54038: Maximum depth of nested triggers was exceeded.&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1261&quot;&gt;DERBY-1261&lt;/a&gt; on derby-dev.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modifies tests and master files which used to check that call statement cannot be part of trigger action.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Once this issue is resolved, we would need updates to documentation. I will open a sub-task for this later. &lt;/p&gt;

&lt;p&gt;Ran derbyall with both sane and insane jars using Sun jdk 1.4.2 on Windows XP. No failures. Please take a look at this patch.&lt;/p&gt;</comment>
                            <comment id="12420629" author="djd" created="Wed, 12 Jul 2006 22:32:05 +0100"  >&lt;p&gt;Just to clarify, it seems that this patch does not disable MODIFIES SQL DATA procedures in a before trigger, only DDL statements in all triggers and DML actions  in a before trigger. Is that correct?&lt;br/&gt;
You indicate that the checks might move, once the code has settled i think the comments in InternalTriggerExecutionContext.validateStatement could be enhanced with your knowledge. For example adding commeents to the DDL check that  DDL statements as the trigger&apos;s action statement are disallowed by the parser and the check is for statements executed by procedures executed within a trigger context. Similar comments for before triggers, making it clear the multiple ways DML is disallowed, e.g. currently the DML is disallowed at compile time.&lt;/p&gt;</comment>
                            <comment id="12420633" author="djd" created="Wed, 12 Jul 2006 22:57:23 +0100"  >&lt;p&gt;Patch derby-551-patch1-v1.diff committed revision 421281. Thanks Deepa&lt;/p&gt;</comment>
                            <comment id="12420663" author="deepa" created="Thu, 13 Jul 2006 00:22:26 +0100"  >&lt;p&gt;Thanks Dan for committing patch1. &lt;/p&gt;

&lt;p&gt;Based on Dan&apos;s suggestion, I am working on adding a check to the parser for disallowing procedures that modify SQL data in before triggers. However, this patch is not quite ready.&lt;/p&gt;

&lt;p&gt;Meantime, I am attaching a follow-up patch &apos;derby-551-patch2-v1.diff&apos; which adds more comments to InternalTriggerExecutionContext.validateStatement. This patch only adds comments and does not change any code. Please take a look at it and commit if okay.&lt;/p&gt;</comment>
                            <comment id="12421132" author="djd" created="Fri, 14 Jul 2006 16:17:22 +0100"  >&lt;p&gt;Applied patch derby-551-patch2-v1.diff - Thanks Deepa&lt;/p&gt;</comment>
                            <comment id="12421155" author="deepa" created="Fri, 14 Jul 2006 17:53:57 +0100"  >&lt;p&gt;Attaching a patch &apos;derby-551-patch3-v1.diff&apos; which disallows creation of before triggers which contain calls to procedures that modify SQL data. Changes are:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Adds a new reliability bit mask(PROCEDURE_CALL_ILLEGAL) to CompilerContext.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Sets the above reliability for before triggers before binding the actionNode in CreateTrigger Node.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Checks the above reliability in CallStatementNode. After the called procedure is resolved, the sql allowed by the procedure is checked and if it is &quot;modifies sql data&quot; and if we have set the reliability to PROCEDURE_CALL_ILLEGAL, it means we are calling a procedure that modifies sql data in the action statement of a before trigger. In this case, an exception is thrown and trigger creation fails. When I was making this change, I was not sure if this reliability setting will interfere with any other checks. After going through other places it is used, I think we are making specific checks to reliability and this setting will not interfere with other cases. Also, I did not see failures in any of the tests. Can someone please confirm this usage is correct?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Reverts the modified check added in InternalTriggerExecutionContext.validateStatement to catch the above case at runtime. With the addition of the above compile time check, there is no need for the check at runtime.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds a new message. Reuses the same SQLSatate as for invalid statement in triggers.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modifies procedureInTrigger.sql test to handle this change.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Ran derbyall with the changes and did not see any failures. However, I made few minor changes and re-running derbyall now. &lt;/p&gt;

&lt;p&gt;Meantime, I would like to get feedback on this patch mainly to see if the usage of CompilerContext is correct. &lt;/p&gt;</comment>
                            <comment id="12421196" author="djd" created="Fri, 14 Jul 2006 20:07:22 +0100"  >&lt;p&gt;The changes using the relability mechansim seem fine, though the constant PROCEDURE_CALL_ILLEGAL seems worng. I would read that to mean all procedure calls are illegal, which is not the case. Clear naming of fields, methods etc. really helps people understand the code and reduce bugs due to misunderstanding.&lt;/p&gt;

&lt;p&gt;I&apos;m a little confused by the changes to InternalTriggerExecutionContext.validateStatement for the before trigger and DML section.&lt;br/&gt;
The patch reverts the code to its old state, what is the purpose of this changes and the resulting check left? Also the comment&lt;br/&gt;
that you just made in the previous patch was useful, but you have replaced it with a comment with less value. It seems to me&lt;br/&gt;
knowning that INSERT/UPDATE/DELETE statements are blocked by the parser is still useful information to have in this method.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// No INSERT/UPDATE/DELETE for a before trigger. Parser does not allow&lt;/li&gt;
	&lt;li&gt;// these DML statements in a trigger&apos;s action statement in a before&lt;/li&gt;
	&lt;li&gt;// trigger. Currently, parser does not disallow creation of before&lt;/li&gt;
	&lt;li&gt;// triggers calling procedures that modify SQL data. This runtime check&lt;/li&gt;
	&lt;li&gt;// is needed to not allow execution of these DML statements by procedures&lt;/li&gt;
	&lt;li&gt;// within a before trigger context.&lt;br/&gt;
+ 		/*&lt;br/&gt;
+ 		** No INSERT/UPDATE/DELETE on trigger table&lt;br/&gt;
+ 		** for a before trigger.&lt;br/&gt;
+ 		*/&lt;br/&gt;
 	 	else if (triggerd.isBeforeTrigger() &amp;amp;&amp;amp; &lt;br/&gt;
 				constantAction instanceof WriteCursorConstantAction)&lt;br/&gt;
 		{&lt;/li&gt;
	&lt;li&gt;throw StandardException.newException(SQLState.LANG_NO_DML_IN_TRIGGER, triggerd.getName(), targetTableName);&lt;br/&gt;
+			if (constantAction.modifiesTableId(targetTableId))&lt;br/&gt;
+			
{
+				throw StandardException.newException(SQLState.LANG_NO_DML_IN_TRIGGER, triggerd.getName(), targetTableName);
+			}&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12421204" author="deepa" created="Fri, 14 Jul 2006 20:40:00 +0100"  >&lt;p&gt;Thanks Dan for looking at the patch. I will rename the variable from PROCEDURE_CALL_ILLEGAL to MODIFIES_SQL_DATA_PROCEDURE_ILLEGAL which I think captures the case we are trying to block.&lt;/p&gt;

&lt;p&gt;About the changes to InternalTriggerExecutionContext.validateStatement, the changes I did in patch1+2 were temporary changes meant to catch the execution of DML statements in before triggers at runtime as these would not be caught by the parser. With the new patch, this case will be caught in the parser. So I reverted this code to the state before my patch. On looking at it again, I think this has been a redundant check in the first place. I will try removing this check from validateStatement.&lt;/p&gt;</comment>
                            <comment id="12421207" author="djd" created="Fri, 14 Jul 2006 20:50:05 +0100"  >&lt;p&gt;Sounds good, looks like the check is redundant. Though I believe the comment is not, it&apos;s a good example of a &quot;why&quot; comment, &quot;No need to check for I/U/D here &lt;b&gt;because&lt;/b&gt; ...&quot;.&lt;/p&gt;</comment>
                            <comment id="12421310" author="deepa" created="Sat, 15 Jul 2006 16:26:24 +0100"  >&lt;p&gt;Attaching a patch &apos;derby-551-patch3-v2.diff&apos; which addresses Dan&apos;s comments. &lt;/p&gt;

&lt;p&gt;Summary of patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Adds a new reliability bit mask(MODIFIES_SQL_DATA_PROCEDURE_ILLEGAL) to CompilerContext.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Sets the above reliability for before triggers before binding the actionNode in CreateTriggerNode.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Checks the above reliability in CallStatementNode. After the called procedure is resolved, the sql allowed by the procedure is checked and if it is &quot;modifies sql data&quot; and if we have set the reliability to MODIFIES_SQL_DATA_PROCEDURE_ILLEGAL, it means we are calling a procedure that modifies sql data in the action statement of a before trigger. In this case, an exception is thrown and trigger creation fails.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removes the check in InternalTriggerExecutionContext.validateStatement which was used to catch the use of DML in before triggers. This is a redundant check as use of DML in before triggers is now caught at compile time. Added a comment to indicate this.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds a new message to indicate procedures that modify sql data are not allowed in before triggers. Reuses the same SQLState as for invalid statement in triggers.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Modifies the test lang/procedureInTrigger.sql to handle this change.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this patch, ran derbyall with Sun jdk 1.4.2 on Windows XP. No failures related to the patch. Seeing 7 failures also seen in Tinderbox tests (&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/Limited/testSummary-422045.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/Limited/testSummary-422045.html&lt;/a&gt;).  &lt;/p&gt;

&lt;p&gt;This patch will resolve this issue. There are two open items for which I will open new JIRAs:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;New issue to handle case where a procedure called in trigger&apos;s action statement can cause recursion. Trigger recursion is being discussed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1261&quot; title=&quot;Two triggers on same table cause &amp;quot;ERROR 54038: Maximum depth of nested triggers was exceeded.&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1261&quot;&gt;DERBY-1261&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Sub-task to change documentation to indicate support of this feature.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Please take a look at this patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12421996" author="djd" created="Wed, 19 Jul 2006 00:22:58 +0100"  >&lt;p&gt;Patch derby-551-patch3-v2.diff&apos; Committed revision 423266. Thanks Deepa&lt;/p&gt;

&lt;p&gt;Not sure we need the new error message, would have thought the existing one could be used.&lt;/p&gt;</comment>
                            <comment id="12421998" author="deepa" created="Wed, 19 Jul 2006 00:37:52 +0100"  >&lt;p&gt;Thanks Dan for committing patch3.&lt;/p&gt;

&lt;p&gt;I had tried to use the existing message: &lt;br/&gt;
42Z9D=&apos;&apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos;&apos; statements are not allowed in &apos;&apos;&lt;/p&gt;
{1}
&lt;p&gt;&apos;&apos; triggers.&lt;/p&gt;

&lt;p&gt;Somehow I was not able to fit the new scenario in the same message. So I created a new message which uses the same SQLState: &lt;br/&gt;
42Z9D.S.1=Procedures that modify SQL data are not allowed in BEFORE triggers.&lt;/p&gt;

&lt;p&gt;Does anyone see a way to avoid the new message?&lt;/p&gt;</comment>
                            <comment id="12423941" author="deepa" created="Thu, 27 Jul 2006 22:53:51 +0100"  >&lt;p&gt;I was waiting to check if there are any suggestions to avoid addition of an extra message. I think it is okay to keep the new message. Hence marking this issue as resolved. If we get any ideas, we can update this later.&lt;/p&gt;

&lt;p&gt;I have opened the following issues for the open items:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1602&quot; title=&quot;Handle cases where a statement in a procedure called by a trigger can cause trigger recursion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1602&quot;&gt;DERBY-1602&lt;/a&gt; - issue to handle case where a procedure called in trigger&apos;s action statement can cause recursion.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1551&quot; title=&quot;Update documentation to indicate procedures can be called from triggers (DERBY-551)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1551&quot;&gt;&lt;del&gt;DERBY-1551&lt;/del&gt;&lt;/a&gt; - issue to change documentation to indicate support of this feature.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12551287" author="fuzzylogic" created="Thu, 13 Dec 2007 09:04:42 +0000"  >&lt;p&gt;This issue has been resolved for over a year with no further movement. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12346352">DERBY-1551</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12348251">DERBY-1729</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12336175" name="ProcedureInTrigger_Tests_v1.html" size="10429" author="deepa" created="Fri, 30 Jun 2006 05:04:03 +0100"/>
                            <attachment id="12336173" name="derby-551-draft1.diff" size="31228" author="deepa" created="Fri, 30 Jun 2006 05:04:03 +0100"/>
                            <attachment id="12336174" name="derby-551-draft1.status" size="926" author="deepa" created="Fri, 30 Jun 2006 05:04:03 +0100"/>
                            <attachment id="12336521" name="derby-551-draft2.status" size="1178" author="deepa" created="Sat, 8 Jul 2006 06:43:56 +0100"/>
                            <attachment id="12336605" name="derby-551-draft3.diff" size="71412" author="deepa" created="Tue, 11 Jul 2006 01:09:34 +0100"/>
                            <attachment id="12336606" name="derby-551-draft3.status" size="1103" author="deepa" created="Tue, 11 Jul 2006 01:09:34 +0100"/>
                            <attachment id="12336664" name="derby-551-patch1-v1.diff" size="69188" author="deepa" created="Tue, 11 Jul 2006 23:46:29 +0100"/>
                            <attachment id="12336665" name="derby-551-patch1-v1.status" size="1103" author="deepa" created="Tue, 11 Jul 2006 23:46:29 +0100"/>
                            <attachment id="12336751" name="derby-551-patch2-v1.diff" size="1704" author="deepa" created="Thu, 13 Jul 2006 00:22:26 +0100"/>
                            <attachment id="12336894" name="derby-551-patch3-v1.diff" size="11642" author="deepa" created="Fri, 14 Jul 2006 17:53:57 +0100"/>
                            <attachment id="12336895" name="derby-551-patch3-v1.status" size="737" author="deepa" created="Fri, 14 Jul 2006 17:53:57 +0100"/>
                            <attachment id="12336938" name="derby-551-patch3-v2.diff" size="11804" author="deepa" created="Sat, 15 Jul 2006 16:26:24 +0100"/>
                            <attachment id="12336939" name="derby-551-patch3-v2.status" size="737" author="deepa" created="Sat, 15 Jul 2006 16:26:24 +0100"/>
                            <attachment id="12336520" name="derby-551draft2.diff" size="75291" author="deepa" created="Sat, 8 Jul 2006 06:43:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 3 Sep 2005 02:49:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29606</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sjr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38443</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>