<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:13:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2201/DERBY-2201.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2201] Calling functions that return Blob/Clob does not work.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2201</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Calling functions that return Blob/Clob results in NoSuchMethodException (See stackTrace below).  It fails because DataValueFactory.getClobDataValue(Clob, StringDataValue) does not exist.  However,  getClobDataValue(String, StringDataValue) exists.  I will attach program to repro this.&lt;/p&gt;

&lt;p&gt;java.lang.NoSuchMethodException: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue)        at java.lang.Class.getDeclaredMethod(Class.java:1909)&lt;br/&gt;
        at org.apache.derby.impl.services.bytecode.d_BCValidate.checkMethod(d_BCValidate.java:133)&lt;br/&gt;
        at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(BCMethod.java:745)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.BaseTypeCompiler.generateDataValue(BaseTypeCompiler.java:135)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ExpressionClassBuilder.generateDataValue(ExpressionClassBuilder.java:918)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:179)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.CastNode.generateExpression(CastNode.java:884)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateSQLValue(SQLToJavaValueNode.java:361)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateExpression(SQLToJavaValueNode.java:341)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:176)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:884)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1097)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1516)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1303)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:110)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:565)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:333)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:447)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:741)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:129)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&amp;lt;init&amp;gt;(EmbedPreparedStatement20.java:83)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&amp;lt;init&amp;gt;(EmbedPreparedStatement30.java:63)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Driver30.java:93)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:742)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:586)&lt;br/&gt;
        at lobtests.ClobFunction.main(ClobFunction.java:87)&lt;br/&gt;
Invalid method org.apache.derby.iapi.types.DataValueFactory &amp;gt;&amp;gt; org.apache.derby.iapi.types.StringDataValue getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue) because java.lang.NoSuchMethodException: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue)&lt;br/&gt;
java.sql.SQLException: Java exception: &apos;ASSERT FAILED Invalid method org.apache.derby.iapi.types.DataValueFactory &amp;gt;&amp;gt; org.apache.derby.iapi.types.StringDataValue getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue) because java.lang.NoSuchMethodException: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue): org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Invalid method org.apache.derby.iapi.types.DataValueFactory &amp;gt;&amp;gt; org.apache.derby.iapi.types.StringDataValue getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue) because java.lang.NoSuchMethodException: org.apache.derby.iapi.types.DataValueFactory.getClobDataValue(java.sql.Clob, org.apache.derby.iapi.types.StringDataValue)&lt;br/&gt;
        at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:149)&lt;br/&gt;
        at org.apache.derby.impl.services.bytecode.d_BCValidate.checkMethod(d_BCValidate.java:192)&lt;br/&gt;
        at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(BCMethod.java:745)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.BaseTypeCompiler.generateDataValue(BaseTypeCompiler.java:135)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ExpressionClassBuilder.generateDataValue(ExpressionClassBuilder.java:918)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:179)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.CastNode.generateExpression(CastNode.java:884)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateSQLValue(SQLToJavaValueNode.java:361)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateExpression(SQLToJavaValueNode.java:341)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:176)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:884)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1097)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1516)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1303)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:110)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:565)&lt;br/&gt;
        at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:333)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:447)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:88)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:741)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:129)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&amp;lt;init&amp;gt;(EmbedPreparedStatement20.java:83)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&amp;lt;init&amp;gt;(EmbedPreparedStatement30.java:63)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Driver30.java:93)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:742)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:586)&lt;br/&gt;
        at lobtests.ClobFunction.main(ClobFunction.java:87)&lt;/p&gt;</description>
                <environment>Derby, head of trunk. Sun JVM 5. Solaris 10 (x86).</environment>
        <key id="12359485">DERBY-2201</key>
            <summary>Calling functions that return Blob/Clob does not work.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="oysteing">&#216;ystein Gr&#248;vlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Dec 2006 12:40:06 +0000</created>
                <updated>Thu, 2 May 2013 03:29:19 +0100</updated>
                            <resolved>Thu, 4 Jun 2009 15:55:11 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12461185" author="oysteing" created="Thu, 28 Dec 2006 12:42:08 +0000"  >&lt;p&gt;This program reproduces the problem for Clob.  Similar problems exists for Blob.&lt;/p&gt;</comment>
                            <comment id="12461187" author="oysteing" created="Thu, 28 Dec 2006 12:54:29 +0000"  >&lt;p&gt;I tried defining getBlobDataValue/getClobDataValue that takes a Blob/Clob parameter instead of a String (see attached getClobDataValue.diff), but then the repro fails because getObject is not implemented for SQLBlob/SQLClob:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: An attempt was made to get a data value of type &apos;java.lang.Object&apos; from a data value of type &apos;CLOB&apos;.&lt;br/&gt;
ERROR 22005: An attempt was made to get a data value of type &apos;java.lang.Object&apos; from a data value of type &apos;CLOB&apos;.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:316)&lt;br/&gt;
        at org.apache.derby.iapi.types.DataType.dataTypeConversion(DataType.java:1038)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLClob.getObject(SQLClob.java:141)&lt;br/&gt;
        at org.apache.derby.exe.ac07170079x010fxc918x10adx0000001741881.e1(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:488)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:292)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:475)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:440)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:384)&lt;br/&gt;
        at lobtests.ClobFunction.main(ClobFunction.java:89)&lt;/p&gt;

</comment>
                            <comment id="12461970" author="oysteing" created="Wed, 3 Jan 2007 14:49:47 +0000"  >&lt;p&gt;If nobody has the itch to fix this for the next release, I feel we should disallow creating functions that return Blob/Clob.  I do not think it makes sense to allow a definition if the functions can never be successfully called.&lt;/p&gt;</comment>
                            <comment id="12534913" author="kmarsden" created="Mon, 15 Oct 2007 18:48:38 +0100"  >&lt;p&gt;I think this should be marked improvement not bug.  &lt;/p&gt;</comment>
                            <comment id="12535213" author="oysteing" created="Tue, 16 Oct 2007 10:51:58 +0100"  >&lt;p&gt;I think it is a bug that you are able to create such functions, but not to call them.  Either this should be fixed, or you should get an error when attempting to create a function that returns a Blob/Clob.&lt;/p&gt;</comment>
                            <comment id="12670112" author="rhillegas" created="Tue, 3 Feb 2009 21:09:14 +0000"  >&lt;p&gt;Attaching derby-2201-aa-01-crudeDog.diff. This patch allows functions to return Blob and Clob values. This is incremental improvement and may be adequate for small values. The implementation will be slow for large LOBs, however. That is because the contents of the LOBs are materialized into memory. For large LOBs we may consider building stream support.&lt;/p&gt;

&lt;p&gt;The bug arises because two bits of the code path for LOBs were not implemented:&lt;/p&gt;

&lt;p&gt;1) DataValueFactory was missing overloads for the methods which re-use existing LOB holders as you advance through the rows of a ResultSet. This is the stack trace recorded above. Addressed in this patch by implementing the missing overloads, crudely materializing LOBs into memory.&lt;/p&gt;

&lt;p&gt;2) Once (1) was patched, a new problem arose because the refined getObject() methods for the LOB data values were not implemented. This was addressed by making SQLBlob and SQLClob be implementations of java.sql.Blob and java.sql.Clob respectively and by making the objects return themselves when getObject() is called.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/DataValueFactory.java&lt;/p&gt;

&lt;p&gt;Addresses (1).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/DataType.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLBlob.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLClob.java&lt;/p&gt;

&lt;p&gt;Addresses (2).&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Uncommented the tests for functions which return LOBs.&lt;/p&gt;</comment>
                            <comment id="12670114" author="rhillegas" created="Tue, 3 Feb 2009 21:09:49 +0000"  >&lt;p&gt;Running regression tests now.&lt;/p&gt;</comment>
                            <comment id="12670286" author="kristwaa" created="Wed, 4 Feb 2009 09:25:06 +0000"  >&lt;p&gt;Thanks for looking into this, Rick.&lt;/p&gt;

&lt;p&gt;At first sight, I have to say that I don&apos;t like what is done to the SQLBlob/SQLClob classes. In my opinion these classes are already complex enough, and with the change we&apos;re also implementing java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob in several places. History has shown us that dealing with LOBs is difficult to get right &lt;span class=&quot;error&quot;&gt;&amp;#91;in Derby&amp;#93;&lt;/span&gt;; freeing resources / cleanup, materialization and performance.&lt;/p&gt;

&lt;p&gt;Is the DVD returned to the user as a java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob? If so, I suggest that we consider to create a proper Blob/Clob object instead of returning the DVD. Quite a lot of effort has been put into the relevant classes.&lt;br/&gt;
To make the getObject-method return either EmbedBlob or EmbedClob, we need a reference to the connection. Is there a way we can obtain it?&lt;/p&gt;

&lt;p&gt;If creating EmbedBlob/-Clob isn&apos;t feasible, I think two rather simple classes implementing Blob/Clob can be written and instantiated from the DVD. Both of these will do their work off char[]/String or byte[]. As soon as we start working with source streams, my preference is to use the existing LOB classes. Even in the simplest case, I&apos;m sure there will be pitfalls related to updates and cleanup/closing.&lt;/p&gt;

&lt;p&gt;Also, are any special considerations required for LOBs in this context?&lt;/p&gt;</comment>
                            <comment id="12670340" author="rhillegas" created="Wed, 4 Feb 2009 14:51:51 +0000"  >&lt;p&gt;Thanks for the quick feedback, Kristian.&lt;/p&gt;

&lt;p&gt;This new kind of java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;ob is never returned to the user. Having a SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob return an Embed&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob feels to me like a layering violation for two reasons:&lt;/p&gt;

&lt;p&gt;1) it would mean that an iapi package would be reaching into an impl package&lt;/p&gt;

&lt;p&gt;2) it would mean that the internal datatype layer would be reaching up into the JDBC layer, inverting the normal layering of these components&lt;/p&gt;

&lt;p&gt;We could create vacuous implementations of java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob in the iapi package next to SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob. Let&apos;s call them &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lobImpl. A  &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lobImpl would wrap the byte or stream contents of a SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob, either by being constructed from the bytes or streams or by simply forwarding its methods to the SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob. That might be easier to understand than having SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob implement java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.&lt;/p&gt;

&lt;p&gt;Your point about the complexity of writing another implementation of java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob is well founded. Writing a vacuous implementation of java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob is easy--but as you know better than anyone else, handling the streaming methods is very hard.&lt;/p&gt;

&lt;p&gt;In this particular code path, I think that SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.getObject() should not return a SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob or an Embed&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob but rather a User&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob, where the User&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob is what&apos;s returned by the user-defined function. That is, the nesting/wrapping of these classes should be:&lt;/p&gt;

&lt;p&gt;   Embed&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob&lt;br/&gt;
   (&lt;br/&gt;
       SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob&lt;br/&gt;
       (&lt;br/&gt;
            User&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob&lt;br/&gt;
       )&lt;br/&gt;
   )&lt;/p&gt;

&lt;p&gt;I tried to get this to work a couple months ago, but my User&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob kept getting lost in the SQLBinary pinball machine. I will put some more effort into this approach.&lt;/p&gt;

&lt;p&gt;For the record, the tests ran cleanly for me.&lt;/p&gt;</comment>
                            <comment id="12670748" author="kristwaa" created="Thu, 5 Feb 2009 13:19:52 +0000"  >&lt;p&gt;Thanks for the extra information, Rick.&lt;/p&gt;

&lt;p&gt;I have to admit, I still don&apos;t understand the problem at hand here.&lt;br/&gt;
Can you briefly say in which situations the object returned by SQLClob.getObject() can/will be used?&lt;br/&gt;
Is it read-only, or can it be modified?&lt;br/&gt;
What is the life-time of the object?&lt;br/&gt;
Does the data in the DVD (that implements getObject()) come from the user/function or Derby? Or can it be both?&lt;/p&gt;</comment>
                            <comment id="12670750" author="rhillegas" created="Thu, 5 Feb 2009 13:47:42 +0000"  >&lt;p&gt;Hi Kristian,&lt;/p&gt;

&lt;p&gt;Here&apos;s some more context on the problem:&lt;/p&gt;

&lt;p&gt;&amp;gt;Can you briefly say in which situations the object returned by SQLClob.getObject() can/will be used?&lt;/p&gt;

&lt;p&gt;The data can be used anywhere that you can use the return value of a user-defined function. It is possible that there are other contexts but I don&apos;t know what they are. Since the current effect of calling this method is that Derby raises a coercion exception today, those use cases would be hidden behind coercion exceptions.&lt;/p&gt;

&lt;p&gt;&amp;gt;Is it read-only, or can it be modified?&lt;/p&gt;

&lt;p&gt;In the use cases I understand (function return values), the data is read-only.&lt;/p&gt;

&lt;p&gt;&amp;gt;What is the life-time of the object?&lt;/p&gt;

&lt;p&gt;It depends on what the object is. If the object is a SQLClob (as in this patch), then it is a transient, internal object which disappears at the end of the query.&lt;/p&gt;

&lt;p&gt;If, however, the object is the UserClob (a solution I am experimenting with now), then the object&apos;s lifetime is determined by the application.&lt;/p&gt;

&lt;p&gt;&amp;gt;Does the data in the DVD (that implements getObject()) come from the user/function or Derby? Or can it be both? &lt;/p&gt;

&lt;p&gt;The data in the DVD comes out of the Clob returned by the user-defined function. The function, of course, could have gotten the data from anywhere.&lt;/p&gt;</comment>
                            <comment id="12670917" author="rhillegas" created="Thu, 5 Feb 2009 21:59:43 +0000"  >&lt;p&gt;Attaching derby-2201-02-aa-wrapUserLob.diff. This is a second approach to the problem. In this patch, SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.getObject() return the &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob instantiated by the user-defined function. When writing LOBs to this store, this approach takes advantage of the stream api on the user &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob in order to stream the user data into the store--I expect that this approach will perform better on large LOBs.&lt;/p&gt;

&lt;p&gt;Item (1) from the previous patch remains unchanged.&lt;/p&gt;

&lt;p&gt;Item (2) is replaced with&lt;/p&gt;

&lt;p&gt;2&apos;) Previously SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob could contain the data as a raw array of bytes/chars, a string, or as a stream attached to Derby&apos;s on-disk storage of the value. With this patch, SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob can contain the data in yet another form, namely as a java.sql.&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.&lt;/p&gt;

&lt;p&gt;I&apos;m running regression tests now. I will write additional tests.&lt;/p&gt;

&lt;p&gt;Given the following script, during the final insert, this approach should cause SQL&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob to stream data out of the &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob returned by the user-defined functions and directly into the store. That is, this approach should not materialize the &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lobs in memory on the way to writing them to disk.&lt;/p&gt;

&lt;p&gt;drop function &quot;blob_Blob_String&quot;;&lt;br/&gt;
create function &quot;blob_Blob_String&quot;&lt;br/&gt;
(&lt;br/&gt;
	a_0 varchar( 10 )&lt;br/&gt;
)&lt;br/&gt;
returns blob&lt;br/&gt;
language java&lt;br/&gt;
parameter style java&lt;br/&gt;
no sql&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.blob_Blob_String&apos;&lt;br/&gt;
;&lt;br/&gt;
drop function &quot;clob_Clob_String&quot;;&lt;br/&gt;
create function &quot;clob_Clob_String&quot;&lt;br/&gt;
(&lt;br/&gt;
	a_0 varchar( 10 )&lt;br/&gt;
)&lt;br/&gt;
returns clob&lt;br/&gt;
language java&lt;br/&gt;
parameter style java&lt;br/&gt;
no sql&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.clob_Clob_String&apos;&lt;br/&gt;
;&lt;br/&gt;
drop table t;&lt;br/&gt;
create table t( a clob, b blob );&lt;/p&gt;

&lt;p&gt;insert into t( a, b ) values( &quot;clob_Clob_String&quot;( &apos;abc&apos; ), &quot;blob_Blob_String&quot;( &apos;abc&apos; ) );&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/DataValueFactory.java&lt;/p&gt;

&lt;p&gt;As in the previous patch, the changes above implement (1).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/BitDataValue.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLBinary.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLBlob.java&lt;/p&gt;

&lt;p&gt;The changes above implement (2&apos;) for Blobs. That is, binary data types can now hold the user data as a java.sql.Blob as well as the old forms (byte array and Derby storage stream).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/iapi/types/StringDataValue.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLChar.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLVarchar.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/types/SQLClob.java&lt;/p&gt;

&lt;p&gt;The changes above implement (2&apos;) for Clobs. That is, string data types can now hold the user data as a java.sql.Clob as well as the old forms of char array, String, and Derby storage stream.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/unitTests/store/T_Recovery.java&lt;/p&gt;

&lt;p&gt;Small change to disambiguate the new SQLChar( Clob ) constructor from the SQLChar( String ) constructor.&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java&lt;/p&gt;

&lt;p&gt;Uncomments some tests which were introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3652&quot; title=&quot;Derby does not follow the SQL Standard when trying to map SQL routines to Java methods.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3652&quot;&gt;&lt;del&gt;DERBY-3652&lt;/del&gt;&lt;/a&gt; but which had to be commented out because of this bug.&lt;/p&gt;</comment>
                            <comment id="12671145" author="rhillegas" created="Fri, 6 Feb 2009 14:28:52 +0000"  >&lt;p&gt;Regression tests passed cleanly for me except for the heisenbug in the stress multi tests.&lt;/p&gt;</comment>
                            <comment id="12671219" author="kristwaa" created="Fri, 6 Feb 2009 17:58:29 +0000"  >&lt;p&gt;I had a very quick look at the patch, and have one initial comment. However, I plan to take a better look next week.&lt;br/&gt;
My comment is regarding the Clob part of the patch;&lt;br/&gt;
 o Do you have to push the Clob into SQLVarchar and SQLChar?&lt;br/&gt;
 o How many methods do you have to override in SQLClob if you make the java.sql.Clob part of the SQLClob state?&lt;/p&gt;

&lt;p&gt;Answering these questions may involve some work, but I thought I&apos;d ask them now anyway &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
My motivation from asking is the assumption that only SQLClob will be instantiated with a java.sql.Clob as the source. If that is not the case, maybe SQLChar and SQLVarchar should have special methods that materialize the source, which should be acceptable due to their limited maximum size.&lt;br/&gt;
There is already some Clob specific code in SQLChar, but they were introduced to avoid making the state in SQLChar directly available to its subclasses.&lt;/p&gt;</comment>
                            <comment id="12671233" author="rhillegas" created="Fri, 6 Feb 2009 18:31:16 +0000"  >&lt;p&gt;Thanks for taking a look at the patch, Kristian. I think that the Clob state should be parked in SQLChar next to the other kinds of state. It ought to be possible to construct a CHAR or VARCHAR from a Clob. It is certainly possible to cast between those types and CLOB.&lt;/p&gt;

&lt;p&gt;Parking the Clob in SQLClob would involve overriding the following methods:&lt;/p&gt;

&lt;p&gt;setStream()&lt;br/&gt;
getObject()&lt;br/&gt;
getLength()&lt;br/&gt;
getString()&lt;br/&gt;
isNull()&lt;br/&gt;
writeClobUTF()&lt;br/&gt;
cloneObject()&lt;br/&gt;
setFrom()&lt;br/&gt;
copyState()&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12671844" author="kristwaa" created="Mon, 9 Feb 2009 13:12:34 +0000"  >&lt;p&gt;I agree it it possible to cast between CHAR/VARCHAR and Clob, and that constructing one of these from a CLOB is / should be possible. That, however, doesn&apos;t mean that it should be represented internally as a java.sql.Clob.&lt;br/&gt;
For instance, since a CHAR has a maximum size of 255 characters,  the Clob value could be read and then stored in the SQLChar object as a string. I admit it&apos;s not as clear-cut for VARCHAR.&lt;br/&gt;
Using the same code to deal with CHAR and CLOB has caused lots of problems in the past, because the maximum length of these values differ so much.&lt;/p&gt;

&lt;p&gt;Where will the new constructors and the new setValue(Clob) be used? Is it only in the case of functions, and for SQLClob?&lt;/p&gt;</comment>
                            <comment id="12671854" author="knutanders" created="Mon, 9 Feb 2009 13:38:40 +0000"  >&lt;p&gt;Should the position arguments in the code below be 1L instead of 0L?&lt;/p&gt;

&lt;p&gt;+                try &lt;/p&gt;
{
+                    value = _clobValue.getSubString( 0L, getClobLength() );
+                    _clobValue = null;
+                }

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;+			if ((dataValue == null) &amp;amp;&amp;amp; (_blobValue != null) )&lt;br/&gt;
+            {&lt;br/&gt;
+                dataValue = _blobValue.getBytes( 0L,  getBlobLength() );&lt;/p&gt;


&lt;p&gt;I see that SQLBinary.estimateMemoryUsage() was updated. Should SQLChar.estimateMemoryUsage() be updated too?&lt;/p&gt;</comment>
                            <comment id="12672327" author="rhillegas" created="Tue, 10 Feb 2009 17:27:01 +0000"  >&lt;p&gt;Thanks for the feedback, Kristian and Knut. Here are some responses. I will post a revised patch which addresses your comments.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should the position arguments in the code below be 1L instead of 0L? &lt;/p&gt;

&lt;p&gt;Thanks for catching that.&lt;/p&gt;

&lt;p&gt;&amp;gt; I see that SQLBinary.estimateMemoryUsage() was updated. Should SQLChar.estimateMemoryUsage() be updated too? &lt;/p&gt;

&lt;p&gt;Thanks for noticing that asymmetry. After mulling this over further, I came to the conclusion that if the data is really in a user Clob or Blob, then the space is already allocated. It would be wrong to increase the estimated memory by the length of the Lob because we intend to use the streaming api if we can. So I have removed the changes to SQLBinary.estimateMemoryUsage().&lt;/p&gt;

&lt;p&gt;&amp;gt; Where will the new constructors and the new setValue(Clob) be used? Is it only in the case of functions, and for SQLClob? &lt;/p&gt;

&lt;p&gt;Thanks for raising this question. It caused me to go through the code and find that, due to some short-circuiting in the pinball machine, we were not taking advantage of the streaming apis. It has taken me a while to get back to you because this is tricky code to debug. I had to decompile the generated code and prune it back so that I could see the forest instead of the trees--a painstaking process.&lt;/p&gt;

&lt;p&gt;These methods will be invoked in SQL statements which invoke Lob-returning functions. I don&apos;t know of other cases but I can&apos;t promise that they don&apos;t exist. Today, those other cases would raise the compiler errors seen in this bug.&lt;/p&gt;

&lt;p&gt;Here, for instance, is a case in which the compiler will generate code which stuffs a user Clob into a SQLVarchar. The final INSERT statement generates that code:&lt;/p&gt;

&lt;p&gt;create function &quot;clob_Clob_String&quot;&lt;br/&gt;
(&lt;br/&gt;
	a_0 varchar( 10 )&lt;br/&gt;
)&lt;br/&gt;
returns clob&lt;br/&gt;
language java&lt;br/&gt;
parameter style java&lt;br/&gt;
no sql&lt;br/&gt;
external name &apos;org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.clob_Clob_String&apos;&lt;br/&gt;
;&lt;br/&gt;
create table t2( a varchar( 32000 ) );&lt;br/&gt;
insert into t2( a ) values( cast( &quot;clob_Clob_String&quot;( &apos;abc&apos; ) as varchar( 32000)) );&lt;/p&gt;</comment>
                            <comment id="12672329" author="rhillegas" created="Tue, 10 Feb 2009 17:42:21 +0000"  >&lt;p&gt;Attaching derby-2201-02-ac-wrapUserLob.diff. This is the derby-2201-02-aa-wrapUserLob.diff patch with the following improvements, discussed in the previous comment:&lt;/p&gt;

&lt;p&gt;A) 0L changed to 1L in the getSubString() and getBytes() calls.&lt;/p&gt;

&lt;p&gt;B) Removed changes to SQLBinary.estimateMemoryUsage().&lt;/p&gt;

&lt;p&gt;C) Removed the short-circuiting which prevented us from using the streaming apis when serializing SQLClobs which contain user Clobs.&lt;/p&gt;

&lt;p&gt;D) Adjusted the serialization of SQLVarchar to use the streaming apis when the payload is a user Clob.&lt;/p&gt;

&lt;p&gt;I need to run the regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following additional file:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java&lt;/p&gt;

&lt;p&gt;The dummy &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob implementations in this class were coded to use 0-based indexing rather than 1-based indexing. This is why the tests did not catch problem (A). I have corrected Clob.getSubString() and Blob.getBytes() to use 1-based indexing.&lt;/p&gt;</comment>
                            <comment id="12673040" author="rhillegas" created="Thu, 12 Feb 2009 20:11:16 +0000"  >&lt;p&gt;The previous patch produced errors in the following tests:&lt;/p&gt;

&lt;p&gt;  org.apache.derbyTesting.functionTests.tests.lang.triggerGeneral.sql&lt;br/&gt;
  org.apache.derbyTesting.functionTests.tests.lang.TriggerTest&lt;br/&gt;
  org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest&lt;/p&gt;

&lt;p&gt;I have tracked the errors down to the fix for short-circuiting (item (C) above) which I introduced in the previous patch. It appears that when setting the width of a Derby Clob which is attached to a Store stream, we rely on the following side-effect of SQLChar.setWidth(): this method throws away the Store stream and materializes a string payload for the SQLChar. This, in turn, is a side-effect of SQLChar.getString().&lt;/p&gt;

&lt;p&gt;The latter side-effect was the root cause of the short-circuiting described above. I am not thrilled by this side-effect and I suspect that it gives rise to other inefficiencies and bugs. However, removing the side-effect falls outside the scope of this JIRA.&lt;/p&gt;

&lt;p&gt;Attaching a new version of the patch which takes this subtlety into account: derby-2201-02-ad-wrapUserLob.diff.&lt;/p&gt;</comment>
                            <comment id="12673254" author="rhillegas" created="Fri, 13 Feb 2009 14:20:52 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-2201-02-ad-wrapUserLob.diff except for a heisenbug in the JMX tests (NetworkServerMBeanTest):&lt;/p&gt;

&lt;p&gt;1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011f-6c92-dc68-ffffe1d7aa3e&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(MBeanTest.java:379)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount(NetworkServerMBeanTest.java:93)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:105)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: javax.management.InstanceNotFoundException: org.apache.derby:type=NetworkServer,system=c013800d-011f-6c92-dc68-ffffe1d7aa3e&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1010)&lt;br/&gt;
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:627)&lt;br/&gt;
	at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:659)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.MBeanTest$4.run(MBeanTest.java:382)&lt;br/&gt;
	... 41 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 9425,  Failures: 0,  Errors: 1&lt;/p&gt;</comment>
                            <comment id="12674322" author="rhillegas" created="Tue, 17 Feb 2009 19:25:05 +0000"  >&lt;p&gt;Committed derby-2201-02-ad-wrapUserLob.diff at subversion revision 745202.&lt;/p&gt;</comment>
                            <comment id="12675374" author="rhillegas" created="Fri, 20 Feb 2009 14:16:30 +0000"  >&lt;p&gt;Attaching patch which adds more tests for functions which return lobs: derby-2201-03-aa-moreTests.diff. Committed at subversion revision 746245. Touches the following files:&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/UserLobTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;</comment>
                            <comment id="12716293" author="rhillegas" created="Thu, 4 Jun 2009 15:55:11 +0100"  >&lt;p&gt;Looks to me like this one is resolved.&lt;/p&gt;</comment>
                            <comment id="12871134" author="kristwaa" created="Tue, 25 May 2010 14:18:43 +0100"  >&lt;p&gt;Closing issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12399289">DERBY-3744</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12395004">DERBY-3652</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12333102">DERBY-1285</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12347972" name="ClobFunction.java" size="3235" author="oysteing" created="Thu, 28 Dec 2006 12:42:08 +0000"/>
                            <attachment id="12399596" name="derby-2201-02-aa-wrapUserLob.diff" size="26720" author="rhillegas" created="Thu, 5 Feb 2009 21:59:43 +0000"/>
                            <attachment id="12399933" name="derby-2201-02-ac-wrapUserLob.diff" size="27648" author="rhillegas" created="Tue, 10 Feb 2009 17:42:21 +0000"/>
                            <attachment id="12400126" name="derby-2201-02-ad-wrapUserLob.diff" size="27688" author="rhillegas" created="Thu, 12 Feb 2009 20:11:16 +0000"/>
                            <attachment id="12400610" name="derby-2201-03-aa-moreTests.diff" size="9446" author="rhillegas" created="Fri, 20 Feb 2009 14:16:30 +0000"/>
                            <attachment id="12399385" name="derby-2201-aa-01-crudeDog.diff" size="14585" author="rhillegas" created="Tue, 3 Feb 2009 21:09:14 +0000"/>
                            <attachment id="12347973" name="getClobDataValue.diff" size="4059" author="oysteing" created="Thu, 28 Dec 2006 12:54:29 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 15 Oct 2007 17:48:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22941</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0jov:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37008</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>