<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2480/DERBY-2480.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2480] DriverManager.getConnection leaks memory when connecting to a non-existent database</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2480</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Repeated calls to java.sql.DriverManager.getConnection(&quot;jdbc:derby:C:&lt;br class=&quot;atl-forced-newline&quot; /&gt;DOES_NOT_EXIST&quot;) leak memory and eventually lead to an OutOfMemoryError.&lt;/p&gt;

&lt;p&gt;This bug is similar to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt; in that ContextManager objects are not getting removed from the HashSet.  The attached test program demonstrates the issue.  When run with VM options -Xms8m -Xmx8m, it throws an OutOfMemoryError after 19022 calls to DriverManager.getConnection.&lt;/p&gt;


</description>
                <environment>Windows Vista, JDK 1.4.2_13&lt;br/&gt;
Solaris 10, Sun JDK 1.4.2, 1.5.0 &amp;amp; 1.6.0&lt;br/&gt;
Red Hat Enterprise Linux 4 (2.6.9-34.ELsmp_64), Sun JDK 1.5.0 &amp;amp; 1.6.0</environment>
        <key id="12365617">DERBY-2480</key>
            <summary>DriverManager.getConnection leaks memory when connecting to a non-existent database</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="johnemb">John H. Embretsen</assignee>
                                    <reporter username="clary2137">Jeff Clary</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Mar 2007 21:06:26 +0000</created>
                <updated>Fri, 21 Jan 2011 17:49:59 +0000</updated>
                            <resolved>Wed, 18 Apr 2007 22:16:58 +0100</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12483323" author="clary2137" created="Thu, 22 Mar 2007 21:08:06 +0000"  >&lt;p&gt;Small test program demonstrating bug.&lt;/p&gt;</comment>
                            <comment id="12483333" author="kristwaa" created="Thu, 22 Mar 2007 21:57:51 +0000"  >&lt;p&gt;I tried the repro on Solaris 10 with both Java 1.4.2 and Java 1.5. Both failed with Derby 10.2.2.0 and with trunk.&lt;br/&gt;
However, I was not able to reproduce the bug with Derby 10.1.3.1, so this seems like a regression. I stopped the test after a little over 500&apos;000 iterations.&lt;/p&gt;

&lt;p&gt;We could maybe add the repro to the test suite, as doing the connect a reasonable number of times (say 20-50000 repetitions) doesn&apos;t take long when the memory leak is not around. 50000 iterations with 10.1.3.1 took around 25 seconds on my machine. The problem is that we have to run this in a separate VM, and I don&apos;t know how good support we have for that currently?&lt;/p&gt;

&lt;p&gt;I also lowered the priority, as I consider this use-case a bit &quot;on the edge&quot; compared to common practice.&lt;/p&gt;

&lt;p&gt;Thank you for the report &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12483470" author="johnemb" created="Fri, 23 Mar 2007 08:57:38 +0000"  >&lt;p&gt;I downloaded and modified the repro java file so that I could run it with the ClientDriver against a Derby Network Server. It seems that the issue is not limited to the EmbeddedDriver, as the server JVM (trunk/10.3) with a max heap of 32 MB hit an OutOfMemoryError after 46918 connection attempts (using JDK 6).&lt;/p&gt;

&lt;p&gt;Attaching JConsole screenshot showing the heap usage for the server JVM: heap-server-Xmx32m.png.&lt;/p&gt;</comment>
                            <comment id="12483513" author="johnemb" created="Fri, 23 Mar 2007 10:53:03 +0000"  >&lt;p&gt;Removing the regression flag and changing affects versions, as further testing and an offline discussion with Kristian has resulted in the following findings:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;the issue can be reproduced against older Derby version as well, unless an &quot;invalid&quot; database path (e.g. &quot;C:&lt;br class=&quot;atl-forced-newline&quot; /&gt;whatever&quot; on a unix system) AND a sane build is used...&lt;/li&gt;
	&lt;li&gt;If a sane build AND an invalid path is used, the booting attempts are stopped by an assertion failure, and no OutOfMemoryError (OOME) is seen:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED serviceName (/tmp/C:\DOES_NOT_EXIST) expected to equal getCanonicalServiceName(serviceName) (null)&lt;/p&gt;

&lt;p&gt;     I am not yet sure if this is true for all versions of derby, or just some. Further testing is needed.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;If a sane build and a valid path (e.g. &quot;whateverDB&quot;) is used, we see the memory leak on all versions/platforms tested so far.&lt;/li&gt;
	&lt;li&gt;Also, if an insane build is used (regardless of path), we see the memory leak on all versions/platforms tested so far. I have tested insane versions of all official releases of Derby (and the current trunk) on Sun&apos;s 1.5.0_07 JVM.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With a max heap size of 32 MB the OOME occurs after about 49000 connection attempts.&lt;/p&gt;

&lt;p&gt;I have not tested all variants and combinations of Derby versions, JVMs, database paths and operating systems, so I do not guarantee that these findings are 100% precise...&lt;/p&gt;</comment>
                            <comment id="12483620" author="clary2137" created="Fri, 23 Mar 2007 14:46:12 +0000"  >&lt;p&gt;This might be a bit premature, but I am attaching a patch we are trying locally to fix this problem and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt;.  From our analysis, it looks like we are missing some calls to TransactionResourceImpl.cleanupOnError().&lt;/p&gt;

&lt;p&gt;I have just now gotten set up to check out, build, and test Derby.  I am running derbyall against svn revision 521727 now, and will re-run it this afternoon with this patch in place.  I&apos;ll post my results here.&lt;/p&gt;


&lt;p&gt;(By the way, sorry for not granting ASF license for the original test program...that was just a newbie error.  But I don&apos;t see any way to grant it now.)&lt;/p&gt;</comment>
                            <comment id="12483860" author="dagw" created="Sat, 24 Mar 2007 17:30:48 +0000"  >&lt;p&gt;Hi Jeff, I looked at the patch, since I am working on the related&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt;. I think the change in your patch which adds the call on&lt;br/&gt;
cleanupOnError to EmbedConnection&apos;s constructor is orthogonal to the&lt;br/&gt;
changes I made in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt;-1, and it looks good.&lt;/p&gt;

&lt;p&gt;I think that maybe the change you made to EmbedConnection&apos;s public&lt;br/&gt;
close method really addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt;? (I ran your repro&lt;br/&gt;
without OOM with just the change to the constructor&apos;s catch clause). &lt;/p&gt;


&lt;p&gt;I think it is better to make the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt; as a patch to&lt;br/&gt;
that issue, so you may want to simplify this patch to just keep the&lt;br/&gt;
constructor change. &lt;/p&gt;

&lt;p&gt;You may want to have a look at the patch I made for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1947&quot; title=&quot;OutOfMemoryError after repeated calls to boot and shutdown a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1947&quot;&gt;&lt;del&gt;DERBY-1947&lt;/del&gt;&lt;/a&gt;. Feel&lt;br/&gt;
free to comment on that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
</comment>
                            <comment id="12484127" author="clary2137" created="Mon, 26 Mar 2007 14:42:04 +0100"  >&lt;p&gt;At Dag&apos;s suggestion I have attached a patch that addresses only &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2480&quot; title=&quot;DriverManager.getConnection leaks memory when connecting to a non-existent database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2480&quot;&gt;&lt;del&gt;DERBY-2480&lt;/del&gt;&lt;/a&gt;.  It is a strict subset of the previous patch, so I am pretty confident that it should be good.  I am running derbyall against it right now.  Please consider it ready fo review.&lt;/p&gt;</comment>
                            <comment id="12484757" author="johnemb" created="Wed, 28 Mar 2007 09:25:02 +0100"  >&lt;p&gt;I tried the patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2480&quot; title=&quot;DriverManager.getConnection leaks memory when connecting to a non-existent database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2480&quot;&gt;&lt;del&gt;DERBY-2480&lt;/del&gt;&lt;/a&gt;-1.diff, and it seems to fix this issue. Ran the repro (with modified database path on Solaris) against sane jars, 1M iterations with the embedded driver (8 MB max heap; fails after less than 20k iterations without the patch) and 160k iterations with the client driver (16 MB max heap in the server VM). I saw no signs of a memory leak. I used JDK 6 for testing and its JConsole tool for monitoring.&lt;/p&gt;</comment>
                            <comment id="12485439" author="johnemb" created="Fri, 30 Mar 2007 08:36:59 +0100"  >&lt;p&gt;Changed the Summary to reflect the fact that this is issue is not limited to the EmbeddedDriver.&lt;br/&gt;
Added my test platforms to Environment.&lt;/p&gt;</comment>
                            <comment id="12486467" author="clary2137" created="Tue, 3 Apr 2007 20:02:32 +0100"  >&lt;p&gt;I&apos;ve  been working on my ongoing Derby setup issues, and have an &lt;b&gt;almost&lt;/b&gt; clean run of the derbyall suite against this patch.  One single test failed due to an OutOfMemoryError.  I&apos;ve attached my derbyall_report.txt for reference.&lt;/p&gt;

&lt;p&gt;I see this bug is still unassigned.  Any committer out there want to take ownership of this one-liner and get it into the build?&lt;/p&gt;</comment>
                            <comment id="12486479" author="bryanpendleton" created="Tue, 3 Apr 2007 21:07:00 +0100"  >&lt;p&gt;Jeff, I believe you should assign the bug to &lt;b&gt;yourself&lt;/b&gt;, since you are the one who developed the fix.&lt;/p&gt;

&lt;p&gt;I see that your patch includes a code change only. Is there a way to construct a test case which&lt;br/&gt;
demonstrates the bug and the fix? John, I see that you worked with the repro code; do you think we&lt;br/&gt;
can extract a test case from the repro code?&lt;/p&gt;
</comment>
                            <comment id="12487756" author="johnemb" created="Tue, 10 Apr 2007 13:05:23 +0100"  >&lt;p&gt;Bryan: I see no reason why it should not be possible to create a test case based on Jeff&apos;s repro. Unless he or someone else beats me to it, I&apos;ll try to experiment a little with this, after familiarizing myself with Derby&apos;s JUnit test configurations etc.&lt;/p&gt;</comment>
                            <comment id="12488090" author="johnemb" created="Wed, 11 Apr 2007 15:28:54 +0100"  >&lt;p&gt;Assigning this issue to myself while I&apos;m trying to figure out the best way to integrate a test for this into Derby&apos;s JUnit test framework. It seems that there is currently no support for trying to connect to a database without also creating it if it does not already exist. I won&apos;t be working full time on this, so feel free to reassign if desired.&lt;/p&gt;</comment>
                            <comment id="12489390" author="johnemb" created="Tue, 17 Apr 2007 13:46:52 +0100"  >&lt;p&gt;Attaching a patch (d2480-junitTest_v1.diff) which adds a JUnit test class to the ...functionTests.tests.memory package and a build file for that package. &lt;/p&gt;

&lt;p&gt;The test class is named ConnectionHandlingJunit.java, and its functionality is similar to that of the existing non-JUnit test class ConnectionHandling.java in the same package, added for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-444&quot; title=&quot;Handle OutOfMemoryError exceptions when creating a new embedded connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-444&quot;&gt;&lt;del&gt;DERBY-444&lt;/del&gt;&lt;/a&gt;. I imagine that the older test may be converted to JUnit at some point so that the two can be combined into one class - I was not creative enough to come up with a better name for the new test class.&lt;/p&gt;

&lt;p&gt;The test uses java.sql.DriverManager to attempt to get a connection to a database that does not exist. The test is set up to run 130 thousand attempts, which should be more than enough to trigger this bug in JVMs with up to 64 MB of max heap size (the default on many desktop machines/JVMs).&lt;/p&gt;

&lt;p&gt;The test is set up to run in embedded mode only. The test can run in client/server mode as well, but it has to be slightly modified and recompiled - see implementation comments.&lt;/p&gt;

&lt;p&gt;The test has not been added to any larger JUnit suite, because it a) takes a while to run and b) eats JVM resources if the bug is present.&lt;/p&gt;

&lt;p&gt;Run the test for example by doing: &lt;/p&gt;

&lt;p&gt;java junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit&lt;/p&gt;

&lt;p&gt;To observe test status (including memory &quot;usage&quot;) while it is running, include -Dderby.tests.debug=true when starting the TestRunner.&lt;/p&gt;

&lt;p&gt;Without Jeff&apos;s latest patch memory usage increases dramatically and an OutOfMemoryError is eventually thrown. With Jeff&apos;s patch, memory usage is very low and stable. I&apos;ve run the test on Sun&apos;s JVMs 1.4.2_02, 1.5.0_07 and 1.6.0_01, using sane jars.&lt;/p&gt;

&lt;p&gt;The test does not always fail when an OutOfMemoryError is thrown - I think this may be because the JVM is running out of resources and crashes before it gets that far. In any case, an alarm message should be printed when such an error occurs.&lt;/p&gt;

&lt;p&gt;Please review/commit.&lt;/p&gt;</comment>
                            <comment id="12489443" author="bryanpendleton" created="Tue, 17 Apr 2007 17:00:53 +0100"  >&lt;p&gt;Hi John, thanks for the test! It works great for me: without the fix, the test fails for me&lt;br/&gt;
on iteration 109455, and with the fix the test passes.&lt;/p&gt;

&lt;p&gt;If there are no other comments from other reviewers, I&apos;ll commit the fix and the&lt;br/&gt;
test to the trunk later this week.&lt;/p&gt;</comment>
                            <comment id="12489510" author="bryanpendleton" created="Tue, 17 Apr 2007 19:50:02 +0100"  >&lt;p&gt;In addition to John&apos;s new test, all the existing regression tests ran cleanly for&lt;br/&gt;
me with the two patches applied. &lt;/p&gt;</comment>
                            <comment id="12489884" author="bryanpendleton" created="Wed, 18 Apr 2007 22:16:58 +0100"  >&lt;p&gt;Thanks Jeff for the bug report, and for the patch. Thanks John for reviewing&lt;br/&gt;
the change and contributing the test program. And thanks to the other&lt;br/&gt;
reviewers for the comments and notes.&lt;/p&gt;

&lt;p&gt;I submitted both patches in a single change to the trunk as revision 530159.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12352818">DERBY-1947</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12354213" name="DERBY-2480-1.diff" size="467" author="clary2137" created="Mon, 26 Mar 2007 14:42:04 +0100"/>
                            <attachment id="12354083" name="Patch_DERBY-1947_and_DERBY-2480.diff" size="1646" author="clary2137" created="Fri, 23 Mar 2007 14:46:12 +0000"/>
                            <attachment id="12355693" name="d2480-junitTest_v1.diff" size="15875" author="johnemb" created="Tue, 17 Apr 2007 13:46:52 +0100"/>
                            <attachment id="12355694" name="d2480-junitTest_v1.stat" size="277" author="johnemb" created="Tue, 17 Apr 2007 13:46:52 +0100"/>
                            <attachment id="12354876" name="derbyall_report.txt" size="4904" author="clary2137" created="Tue, 3 Apr 2007 20:02:32 +0100"/>
                            <attachment id="12354035" name="heap-server-Xmx32m.png" size="88291" author="johnemb" created="Fri, 23 Mar 2007 08:57:38 +0000"/>
                            <attachment id="12354003" name="testOpenOfMissingDatabase.java" size="1511" author="clary2137" created="Thu, 22 Mar 2007 21:08:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Mar 2007 21:57:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23070</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0miv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37467</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>