<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6665/DERBY-6665.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6665] Violation of deferred constraints not detected when conglomerates are erroneously shared</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6665</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;See the following script:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij version 10.11
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;
ij&amp;gt; create table t1(x int primary key);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int primary key);
0 rows inserted/updated/deleted
ij&amp;gt; create table t3(x int, constraint fk1 foreign key (x) references t1 initially deferred, constraint fk2 foreign key (x) references t2 initially deferred);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t1 values 1;
1 row inserted/updated/deleted
ij&amp;gt; autocommit off;
ij&amp;gt; insert into t3 values 1;
1 row inserted/updated/deleted
ij&amp;gt; insert into t2 values 1;
1 row inserted/updated/deleted
ij&amp;gt; delete from t1;
1 row inserted/updated/deleted
ij&amp;gt; commit;
ij&amp;gt; select * from t1;
X          
-----------

0 rows selected
ij&amp;gt; select * from t2;
X          
-----------
1          

1 row selected
ij&amp;gt; select * from t3;
X          
-----------
1          

1 row selected
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since T3.X contains a value (1) that is not present in T1, the foreign key FK1 is violated, and the COMMIT statement should have failed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12727497">DERBY-6665</key>
            <summary>Violation of deferred constraints not detected when conglomerates are erroneously shared</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Tue, 15 Jul 2014 23:42:46 +0100</created>
                <updated>Thu, 25 Sep 2014 00:13:43 +0100</updated>
                            <resolved>Wed, 30 Jul 2014 13:31:19 +0100</resolved>
                                    <version>10.11.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14063404" author="knutanders" created="Wed, 16 Jul 2014 12:51:45 +0100"  >&lt;p&gt;The two foreign keys FK1 and FK2 share the same physical conglomerate, since they are declared on the same column. When a violation of a deferred constraint is detected, it is registered in a hash table whose key is the physical conglomerate number. This means the deferred validation at commit-time cannot reliably tell whether it should check for FK1 or FK2 violations. In the example above, since the first constraint violation that is recorded is a violation of FK2 (for the &quot;insert into t3 values 1&quot; statement), the check on commit thinks all of the registered violations on that conglomerate were FK2 violations, and it only checks FK2. The violation of FK1 is therefore not detected.&lt;/p&gt;

&lt;p&gt;I think the hash table (GenericLanguageConnectionContext.deferredHashTables) needs to be changed so that its key is an identifier of the logical conglomerate instead of the physical conglomerate, so that violations of FK1 and FK2 go into separate buckets and can be distinguished when the deferred check is performed. The conglomerate id (a UUID) can probably be used. It seems to be different for different logical conglomerates that share the same physical conglomerate.&lt;/p&gt;</comment>
                            <comment id="14063414" author="knutanders" created="Wed, 16 Jul 2014 13:02:11 +0100"  >&lt;p&gt;Conglomerate sharing also causes problems if a FOREIGN KEY constraint and a UNIQUE/PRIMARY KEY constraint share one physical conglomerate.&lt;/p&gt;

&lt;p&gt;See for example this transcript, where the deferred uniqueness check was not performed on commit:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ij version 10.11
ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true&apos;;
ij&amp;gt; create table t1(x int primary key);
0 rows inserted/updated/deleted
ij&amp;gt; create table t2(x int primary key initially deferred references t1 initially deferred);
0 rows inserted/updated/deleted
ij&amp;gt; insert into t1 values 1;
1 row inserted/updated/deleted
ij&amp;gt; autocommit off;
ij&amp;gt; insert into t2 values 3;
1 row inserted/updated/deleted
ij&amp;gt; insert into t2 values 3;
1 row inserted/updated/deleted
ij&amp;gt; insert into t1 values 3;
1 row inserted/updated/deleted
ij&amp;gt; commit;
ij&amp;gt; select * from t1;
X          
-----------
1          
3          

2 rows selected
ij&amp;gt; select * from t2;
X          
-----------
3          
3          

2 rows selected
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The commit statement should have failed because T2 contained duplicates in its primary key column.&lt;/p&gt;</comment>
                            <comment id="14063415" author="knutanders" created="Wed, 16 Jul 2014 13:05:07 +0100"  >&lt;p&gt;(Updated summary to reflect that the issue is not limited to foreign key constraints.)&lt;/p&gt;</comment>
                            <comment id="14063424" author="rhillegas" created="Wed, 16 Jul 2014 13:21:08 +0100"  >&lt;p&gt;Marking this as a data corruption since this bug gives rise to data which is not internally consistent.&lt;/p&gt;</comment>
                            <comment id="14064705" author="knutanders" created="Thu, 17 Jul 2014 09:20:39 +0100"  >&lt;p&gt;The key of the &lt;tt&gt;HashMap&amp;lt;Long, ValidationInfo&amp;gt; deferredHashTables&lt;/tt&gt; field in &lt;tt&gt;GenericLanguageConnectionContext&lt;/tt&gt; is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CHECK constraint: The conglomerate number of the heap conglomerate of the table on which the constraint is defined.&lt;/li&gt;
	&lt;li&gt;UNIQUE constraint: The conglomerate number of the B-tree conglomerate that backs the constraint.&lt;/li&gt;
	&lt;li&gt;FOREIGN KEY constraint: The conglomerate number of the B-tree conglomerate that backs the constraint.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If we change the key to a UUID, we have these choices:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CHECK constraint: Either the UUID of the table descriptor or the UUID of the heap conglomerate.&lt;/li&gt;
	&lt;li&gt;UNIQUE constraint: Either the UUID of the constraint or the UUID of the B-tree conglomerate.&lt;/li&gt;
	&lt;li&gt;FOREIGN KEY constraint: Either the UUID of the constraint or the UUID of the B-tree conglomerate.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Functionally, I don&apos;t think it matters much which UUID we choose, as long as we&apos;re consistent. They all seem to be allocated uniquely for logical conglomerates rather than physical conglomerates. It sounds cleaner, though, to use the table/constraint UUIDs and not deal with the conglomerate ids at all.&lt;/p&gt;

&lt;p&gt;One more important difference between the conglomerate numbers that we currently hash on, and the UUIDs, is that the UUIDs do not change when SYSCS_COMPRESS_TABLE is called. There is a fair amount of code to handle the case where compression has changed the conglomerate numbers during the transaction, and I believe that code will be redundant if we switch to UUIDs.&lt;/p&gt;</comment>
                            <comment id="14064853" author="rhillegas" created="Thu, 17 Jul 2014 13:07:39 +0100"  >&lt;p&gt;We could use the constraint UUID as the key in all 3 cases, I think. The regularity of that approach appeals to me. Thanks.&lt;/p&gt;</comment>
                            <comment id="14064930" author="knutanders" created="Thu, 17 Jul 2014 14:49:07 +0100"  >&lt;p&gt;The patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12656272/12656272_junit.diff&quot; title=&quot;junit.diff attached to DERBY-6665&quot;&gt;junit.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; adds a JUnit test case that reproduces the bug.&lt;/p&gt;</comment>
                            <comment id="14064940" author="knutanders" created="Thu, 17 Jul 2014 15:03:01 +0100"  >&lt;p&gt;The constraint UUID should work in all three cases, yes. The table id is used for CHECK constraint so that all constraints for a single table are stored in the same bucket, which makes it easier to validate all the CHECK constraints with one scan of the table at the transaction boundary. So there may be some extra refactoring needed to get it completely regular.&lt;/p&gt;</comment>
                            <comment id="14065056" author="knutanders" created="Thu, 17 Jul 2014 17:05:47 +0100"  >&lt;p&gt;Fixing this was a little more involved than I had hoped, and I am going to be out next week, so I&apos;m unassigning myself from this bug so that I don&apos;t block others from picking it up.&lt;/p&gt;

&lt;p&gt;The attached patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12656284/12656284_braindump.diff&quot; title=&quot;braindump.diff attached to DERBY-6665&quot;&gt;braindump.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; shows what I&apos;ve tried so far. ForeignKeysDeferrableTest passes with that patch, including the test case for this bug.&lt;/p&gt;

&lt;p&gt;I don&apos;t quite trust the logic I&apos;ve put into IndexChanger and InsertResultSet to map back from the index conglomerate number to the constraint id (remember that it&apos;s a one to many relation between conglomerate numbers and constraints).&lt;/p&gt;

&lt;p&gt;Also, I still haven&apos;t eliminated all uses of SQLSessionContextImpl.uniquePKConstraintModes, which still hashes on a Long instead of a UUID. And I haven&apos;t eliminated all callers of LanguageConnectionContext.isEffectivelyDeferred(SQLSessionContext sc, long indexCID). Both of those have parallel implementations that use UUID instead of long. I&apos;d expect that all users of the data structures and methods that use a long are either buggy or redundant.&lt;/p&gt;</comment>
                            <comment id="14065835" author="bryanpendleton" created="Fri, 18 Jul 2014 01:37:38 +0100"  >&lt;p&gt;&amp;gt;  It sounds cleaner, though, to use the table/constraint UUIDs and not deal with the conglomerate ids at all.&lt;/p&gt;

&lt;p&gt;+1.&lt;/p&gt;

&lt;p&gt;One thing that occurs to me is that someone trying to diagnose problems in this area would naturally&lt;br/&gt;
try to query the database metadata and look in the system catalogs to figure out these UUIDs.&lt;/p&gt;

&lt;p&gt;To me, that process would be easiest if we used the UUIDs that corresponded to the &quot;logical&quot;&lt;br/&gt;
elements in the schema (tables, indexes, constraints, etc.) rather than the lower-level&lt;br/&gt;
&quot;physical&quot; elements in the schema.&lt;/p&gt;

&lt;p&gt;Just wanted to chime in with that observation.&lt;/p&gt;</comment>
                            <comment id="14068334" author="dyret" created="Mon, 21 Jul 2014 10:07:31 +0100"  >&lt;p&gt;AFAICT, after applying the braindump patch, the only method which inserts something into the &lt;tt&gt;SQLSessionContextImpl.uniquePKConstraintModes&lt;/tt&gt; hash map, is &lt;tt&gt;setDeferred(long, boolean)&lt;/tt&gt; which appears not to be called. Only &lt;tt&gt;LanguageConnectionContext.isEffectivelyDeferred(SQLSessionContext sc, long indexCID)&lt;/tt&gt; appears to be reading from the map, so any code depending on it is likely broken.&lt;/p&gt;</comment>
                            <comment id="14068410" author="dyret" created="Mon, 21 Jul 2014 12:10:12 +0100"  >&lt;p&gt;I tried replacing the one call to &lt;tt&gt;LanguageConnectionContext.isEffectivelyDeferred(SQLSessionContext sc, long indexCID)&lt;/tt&gt; with its UUID-based equivalent. But that resulted in two NPEs in the ForeignKeysDeferrableTest because there appears to be no ConstraintDescriptor for the UUID passed in to &lt;tt&gt;LanguageConnectionContext.isEffectivelyDeferred(SQLSessionContext sc, UUID constraintId)&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="14068485" author="dyret" created="Mon, 21 Jul 2014 14:12:46 +0100"  >&lt;p&gt;I tried simply returning false if the there was no &lt;tt&gt;ConstraintDescriptor&lt;/tt&gt; for the UUID being passed in, cf. comment in the braindump patch, but that did not work. Running in the debugger shows that &lt;tt&gt;SQLSessionContextImpl.checkConstraintModes&lt;/tt&gt; is null in the call to &lt;tt&gt;isDeferred(UUID constraintId)&lt;/tt&gt;, meaning that &lt;tt&gt;setDeferred&lt;/tt&gt; cannot have been called for this (or any other) UUID. Inspecting the call hierarchy for &lt;tt&gt;setDeferred&lt;/tt&gt; reveals that it is only called from &lt;tt&gt;SetConstraintsConstantAction.executeConstantAction&lt;/tt&gt;. &lt;/p&gt;

&lt;p&gt;In the failing test case there are no explicit SET DEFERRED call, but the table is created with &quot;...constraint ct primary key&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; deferrable initially deferred&quot;. I&apos;m a bit unsure about how the constraint specifications embedded in the CREATE TABLE statement are handled - should the CreateTableConstantAction have handled it, or should it somehow &quot;link&quot; to a SetConstraintConstantAction...?&lt;/p&gt;</comment>
                            <comment id="14068512" author="dyret" created="Mon, 21 Jul 2014 14:37:44 +0100"  >&lt;p&gt;Wondering if perhaps it is &lt;tt&gt;CreateIndexConstantAction&lt;/tt&gt; for the deferred primary key that is responsible for associating the &lt;tt&gt;ConstraintDescriptor&lt;/tt&gt; with the corresponding UUID? If so it does not appear to be doing so - the braindump patch removes &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (initiallyDeferred) {
                DeferredConstraintsMemory.associateDuplicatesWithConglomerate(
                    lcc, conglomId);
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but does not add a replacement based on UUIDs, AFAICT...&lt;/p&gt;</comment>
                            <comment id="14069181" author="rhillegas" created="Mon, 21 Jul 2014 20:59:05 +0100"  >&lt;p&gt;Thanks for all of that investigation, Dyre. That saved me a ton of time.&lt;/p&gt;

&lt;p&gt;Attaching derby-6665-01-aa-remove-uniquePKConstraintModes.diff. This is a next rev of the braindump patch. This version removes SQLSessionContextImpl.uniquePKConstraintModes. ForeignKeysDeferrableTest passes cleanly for me with this patch. I think I&apos;ll run full regression tests and see what breaks.&lt;/p&gt;

&lt;p&gt;A couple notes:&lt;/p&gt;

&lt;p&gt;1) I removed the overload of isEffectivelyDeferred() which takes a long.&lt;/p&gt;

&lt;p&gt;2) I added a refConstraintID to FKInfo so that it could call the overload of isEffectivelyDeferred() which takes a UUID.&lt;/p&gt;

&lt;p&gt;3) I eliminated some vacuous code from GenericLanguageContextImpl. The code was supposed to propagate knowledge about deferred unique/primary keys to the new SQLSessionContext, when pushing session contexts. The code didn&apos;t actually do that, so I whacked it. I put a big &quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6665&quot; title=&quot;Violation of deferred constraints not detected when conglomerates are erroneously shared&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6665&quot;&gt;&lt;del&gt;DERBY-6665&lt;/del&gt;&lt;/a&gt; FIXME&quot; comment where the vacuous code used to be. This may be a place to continue evolving the patch after we find out what&apos;s broken in the tests.&lt;/p&gt;</comment>
                            <comment id="14070626" author="rhillegas" created="Tue, 22 Jul 2014 19:17:02 +0100"  >&lt;p&gt;There were lots of errors in the tests, but they appear to all be in ConstraintCharacteristicsTest. The root cause seems to be the following code in DeferredConstraintsMemory, which is trying to use the table&apos;s conglomerate number in order to look up the buckets of candidate check constraint violations:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    public static Enumeration&amp;lt;Object&amp;gt; getDeferredCheckConstraintLocations(
            Activation activation,
            long validatingBaseTableCID) throws StandardException {

        CheckInfo ci = (DeferredConstraintsMemory.CheckInfo)activation.
                getLanguageConnectionContext().
                getDeferredHashTables().get(
                    Long.valueOf(validatingBaseTableCID));
        return ci.infoRows.elements();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fix is probably to use some other handle to look up those buckets. I will need to study the patch to figure out whether that other handle is the table UUID or something else.&lt;/p&gt;</comment>
                            <comment id="14070809" author="rhillegas" created="Tue, 22 Jul 2014 21:15:26 +0100"  >&lt;p&gt;Attaching derby-6665-01-ab-useTableUUIDforCheckConstraints.diff. This moves the patch forward a bit. This version of the patch uses the table UUID as the key to the buckets of candidate CHECK constraint violations. This patch reduces the problems in ConstraintCharacteristicsTest down to 4 failures and 2 errors. Heigh-ho, more work to do!&lt;/p&gt;</comment>
                            <comment id="14070889" author="dyret" created="Tue, 22 Jul 2014 22:03:07 +0100"  >&lt;p&gt;Excellent progress! Have you been able to figure out why the testXA() test does not seem to clean up after itself? AFAICS the setUp() and tearDown() methods look correct, but when testXA() fails the REFERENCED table is not removed as it should be. I&apos;m thinking perhaps the rollback() inside the tearDown() throws in this case (and so prevents the DROP from happening).&lt;/p&gt;</comment>
                            <comment id="14070926" author="dyret" created="Tue, 22 Jul 2014 22:23:37 +0100"  >&lt;p&gt;In the debugger it looks more like the DROP in tearDown() hits a lock timeout... Not really clear how that could be when the previous transaction was rolled back. &lt;/p&gt;</comment>
                            <comment id="14071702" author="dyret" created="Wed, 23 Jul 2014 14:22:10 +0100"  >&lt;p&gt;The lock conflict appears to be on SYSCONGLOMERATES. The DROP TABLE referenced is blocked by a CREATE TABLE statement issued on the XA-connection inside &lt;tt&gt;doXAWorkUniquePK()&lt;/tt&gt; method; &quot;create table derby532xa(i int, constraint derby532xa_c primary key&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; initially deferred)&quot;. After this statement &lt;br/&gt;
&lt;tt&gt;XAResource.end()&lt;/tt&gt; and  &lt;tt&gt;XAConnection.close()&lt;/tt&gt; are called.&lt;/p&gt;

&lt;p&gt;The test gets an NPE from &lt;tt&gt;XAResource.prepare()&lt;/tt&gt;. This call is supposed to fail, but with an &lt;tt&gt;XAException&lt;/tt&gt;. The catch block for &lt;tt&gt;XAException&lt;/tt&gt; will call &lt;tt&gt;assertXidRolledBack(xar, xid)&lt;/tt&gt;, which isn&apos;t really an assert as it attempts a &lt;tt&gt;rollback()&lt;/tt&gt; and catches the resulting exception to verify that the it is the expected one. Could it be that this attempted rollback is necessary to release locks, even if it throws?&lt;/p&gt;</comment>
                            <comment id="14071710" author="rhillegas" created="Wed, 23 Jul 2014 14:33:48 +0100"  >&lt;p&gt;Hm, the NPE in XAResource.prepare() sounds like another bug we need to bag. Thanks.&lt;/p&gt;</comment>
                            <comment id="14071714" author="rhillegas" created="Wed, 23 Jul 2014 14:43:24 +0100"  >&lt;p&gt;I&apos;m going to take a look at the &quot;ERROR XSAM5: Scan must be opened and positioned by calling next() before making other calls.&quot; error which is being raised in ConstraintCharacteristicsTest.testDeferredRowsInvalidation(). The following script shows this error:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;

autocommit off;

create table t(i int,  constraint c check (i &amp;gt; 0) initially deferred);
insert into t values -1, -2, -2, -3;
set constraints c immediate;
truncate table t;

-- this raises a scan error
commit;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14071776" author="dyret" created="Wed, 23 Jul 2014 15:30:05 +0100"  >&lt;p&gt;I have tried everything I can think of to get the tx holding the lock on sysconglomerates to roll back, but I cannot make it work...&lt;/p&gt;</comment>
                            <comment id="14071789" author="rhillegas" created="Wed, 23 Jul 2014 15:37:50 +0100"  >&lt;p&gt;While investigating the scan error, I tripped across some cut-and-paste code which I recommend cleaning up. I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6674&quot; title=&quot;Cleanup brittle code in ValidateCheckConstraintResultSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6674&quot;&gt;&lt;del&gt;DERBY-6674&lt;/del&gt;&lt;/a&gt; to track this cleanup.&lt;/p&gt;</comment>
                            <comment id="14072231" author="rhillegas" created="Wed, 23 Jul 2014 20:54:37 +0100"  >&lt;p&gt;Attaching the next rev of the patch, derby-6665-01-ac-unpositionedScan.diff. This rev fixes a scan-positioning bug in ValidateCheckConstraintResultSet and a missing constraintID bug in CreateIndexConstantAction. However, there is at least one more instance of an unininitialized constraintID because I am still seeing 5 failures and 1 error in ConstraintCharacteristicsTest. So, more work for tomorrow.&lt;/p&gt;</comment>
                            <comment id="14073508" author="rhillegas" created="Thu, 24 Jul 2014 19:44:57 +0100"  >&lt;p&gt;Attaching derby-6665-01-ad-import-and-unique.diff. This is the latest checkpoint of where I am. This patch fixes a spot in the code where we were passing in a hard-coded null even though the constraintID was handy; this caused an NPE. This patch also fixes a spot in InsertResultSet where we were switching on the deferrability information in the index descriptor rather than on the effective deferrability of the constraint in the current session.&lt;/p&gt;

&lt;p&gt;Together, these fixes bring ConstraintCharacteristicsTest down to 1 error and 1 failure. Onward...&lt;/p&gt;</comment>
                            <comment id="14073527" author="rhillegas" created="Thu, 24 Jul 2014 20:03:07 +0100"  >&lt;p&gt;The next bug to fix is a data corruption caused when you violate a deferred constraint and then compress the table in the same transaction. The following script shows this problem:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;

autocommit off;

create table t(i int,  constraint c check (i &amp;gt; 0) initially deferred);
commit;

insert into t values -1;
call syscs_util.syscs_compress_table(&apos;APP&apos;, &apos;T&apos;, 0);

-- this should fail because the check constraint is violated
commit;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14074418" author="rhillegas" created="Fri, 25 Jul 2014 15:04:05 +0100"  >&lt;p&gt;Attaching derby-6665-01-ae-deferredCheckAndDroppedFK.diff. This patch fixes two more problems:&lt;/p&gt;

&lt;p&gt;1) Deferred check constraints were not being enforced after table compression. Some previous rev of the patch removed the logic which does this. The fix was to put that logic back in.&lt;/p&gt;

&lt;p&gt;2) An NPE was raised at commit time after a deferred foreign key was dropped. I put in logic to skip the checking of the nonexistent foreign key.&lt;/p&gt;

&lt;p&gt;With these fixes, ConstraintCharacteristcsTest now runs cleanly. I will run the full regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/conn/SQLSessionContext.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/conn/SQLSessionContextImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ProjectRestrictResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ValidateCheckConstraintResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CreateConstraintConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ForeignKeyRIChecker.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ReferencedKeyRIChecker.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CreateIndexConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/DeferredConstraintsMemory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/IndexConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RIBulkChecker.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UniqueWithDuplicateNullsIndexSortObserver.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/SetConstraintsConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/FKInfo.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ConstraintConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/UniqueIndexSortObserver.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/UUID.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ForeignKeysDeferrableTest.java&lt;/p&gt;</comment>
                            <comment id="14074556" author="rhillegas" created="Fri, 25 Jul 2014 17:46:19 +0100"  >&lt;p&gt;Tests passed cleanly for me. However, I see the following warning. I see this warning in the nightly test runs too, so the warning indicates a separate problem:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-- Note: At least one unexpected error/warning message was
-- encountered during DDL generation.  See dblook.log
-- to review the message(s).

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14074564" author="rhillegas" created="Fri, 25 Jul 2014 17:50:31 +0100"  >&lt;p&gt;At this point, the patch is very large. I&apos;m reluctant to commit this patch without review by Dag. I believe he returns from vacation on Monday.&lt;/p&gt;</comment>
                            <comment id="14074581" author="rhillegas" created="Fri, 25 Jul 2014 18:00:38 +0100"  >&lt;p&gt;Another bit of good news: The patch appears to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6670&quot; title=&quot;Rollback to savepoint allows violation of deferrable constraints&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6670&quot;&gt;&lt;del&gt;DERBY-6670&lt;/del&gt;&lt;/a&gt; as well.&lt;/p&gt;</comment>
                            <comment id="14076819" author="dagw" created="Mon, 28 Jul 2014 21:51:32 +0100"  >&lt;p&gt;Attaching a patch that corrects a hole in the logic that should have prevented deferrable constraint supporting indexes to be shared (the current implementation restriction). This corrects the repro errors seen in this issue (but not the error in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6670&quot; title=&quot;Rollback to savepoint allows violation of deferrable constraints&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6670&quot;&gt;&lt;del&gt;DERBY-6670&lt;/del&gt;&lt;/a&gt; - I&apos;ll handle that separately).&lt;/p&gt;

&lt;p&gt;Moving from using the conglomerate id to the constraint UUID in the maps internally is probably a good idea going forward, though. I had already made one attempt to do this, but it turned out to have some complexities which made me abandon that approach. I suggest we defer that refactoring until after the release. Running regressions on this patch.&lt;/p&gt;</comment>
                            <comment id="14077151" author="dagw" created="Tue, 29 Jul 2014 00:49:55 +0100"  >&lt;p&gt;I&apos;ll have a look at the &quot;ae&quot; patch to see if that could be the best way forward to address &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6670&quot; title=&quot;Rollback to savepoint allows violation of deferrable constraints&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6670&quot;&gt;&lt;del&gt;DERBY-6670&lt;/del&gt;&lt;/a&gt; since it appears to solve that issue.&lt;/p&gt;

&lt;p&gt;&lt;font color=&quot;green&quot;&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Update: this turned out to be the case and the fix for that issue is now based on the &amp;quot;ae&amp;quot; patch.&amp;#93;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;</comment>
                            <comment id="14077666" author="dagw" created="Tue, 29 Jul 2014 13:37:16 +0100"  >&lt;p&gt;Regressions passed for the patch &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12658241/12658241_derby-6665-dhw-dont-share.diff&quot; title=&quot;derby-6665-dhw-dont-share.diff attached to DERBY-6665&quot;&gt;derby-6665-dhw-dont-share.diff&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;</comment>
                            <comment id="14077667" author="jira-bot" created="Tue, 29 Jul 2014 13:38:38 +0100"  >&lt;p&gt;Commit 1614327 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1614327&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1614327&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6665&quot; title=&quot;Violation of deferred constraints not detected when conglomerates are erroneously shared&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6665&quot;&gt;&lt;del&gt;DERBY-6665&lt;/del&gt;&lt;/a&gt; Violation of deferred constraints not detected when conglomerates are shared&lt;/p&gt;

&lt;p&gt;Patch (derby-6665-dhw-dont-share) to fix missing logic to exclude&lt;br/&gt;
deferrable foreign key constrants form sharing supporting index. Adds&lt;br/&gt;
repro tests to ForeignKeysDeferrableTest.&lt;/p&gt;</comment>
                            <comment id="14147012" author="mikem" created="Wed, 24 Sep 2014 23:42:49 +0100"  >&lt;p&gt;I believe this bugs is specific to deferrable constraints so marking as not appropriate to backport to 10.10 and previous releases.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12727754">DERBY-6668</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12727966">DERBY-6670</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12729178">DERBY-6674</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12656284" name="braindump.diff" size="68996" author="knutanders" created="Thu, 17 Jul 2014 17:05:47 +0100"/>
                            <attachment id="12656943" name="derby-6665-01-aa-remove-uniquePKConstraintModes.diff" size="73811" author="rhillegas" created="Mon, 21 Jul 2014 20:59:05 +0100"/>
                            <attachment id="12657176" name="derby-6665-01-ab-useTableUUIDforCheckConstraints.diff" size="84273" author="rhillegas" created="Tue, 22 Jul 2014 21:15:26 +0100"/>
                            <attachment id="12657427" name="derby-6665-01-ac-unpositionedScan.diff" size="85921" author="rhillegas" created="Wed, 23 Jul 2014 20:54:37 +0100"/>
                            <attachment id="12657649" name="derby-6665-01-ad-import-and-unique.diff" size="85910" author="rhillegas" created="Thu, 24 Jul 2014 19:44:57 +0100"/>
                            <attachment id="12657830" name="derby-6665-01-ae-deferredCheckAndDroppedFK.diff" size="85110" author="rhillegas" created="Fri, 25 Jul 2014 15:04:05 +0100"/>
                            <attachment id="12658241" name="derby-6665-dhw-dont-share.diff" size="13368" author="dagw" created="Mon, 28 Jul 2014 21:51:32 +0100"/>
                            <attachment id="12656272" name="junit.diff" size="3863" author="knutanders" created="Thu, 17 Jul 2014 14:49:07 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10364"><![CDATA[Data corruption]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 16 Jul 2014 12:21:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>405603</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzrnon:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>405628</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10050"><![CDATA[Blocker]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>