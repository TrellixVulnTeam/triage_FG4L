<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:17:00 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2432/DERBY-2432.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2432] Unimplemented transaction time out for XA transactions may cause that locks will not be released when client terminates outside a unit of work.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2432</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The XAResource interface provides function setTransactionTimeout which is currently not supported in derby.&lt;/p&gt;

&lt;p&gt;When client application uses client driver to connect to derby database and the application crashes outside the unit of work of XA transaction and the transaction is not committed or rolled back yet the locks held by the transaction will not be released.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12364570">DERBY-2432</key>
            <summary>Unimplemented transaction time out for XA transactions may cause that locks will not be released when client terminates outside a unit of work.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="julo">Julius Stroffek</assignee>
                                    <reporter username="julo">Julius Stroffek</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Mar 2007 16:09:26 +0000</created>
                <updated>Wed, 1 Jul 2009 01:34:30 +0100</updated>
                            <resolved>Fri, 15 Jun 2007 14:23:02 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12479634" author="julo" created="Fri, 9 Mar 2007 16:14:47 +0000"  >&lt;p&gt;There is a commented code in NetXAResource.setTransactionTimeout which contains a call to non-existing method xaSetTransTimeOut. Anybody knows the origin of this code? Why it is still there?&lt;/p&gt;

&lt;p&gt;the function code is:&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
    public boolean setTransactionTimeout(int seconds) throws XAException {&lt;br/&gt;
        if (conn_.agent_.loggingEnabled()) &lt;/p&gt;
{
            conn_.agent_.logWriter_.traceExit(this, &quot;setTransactionTimeout&quot;, false);
        }
&lt;p&gt;        exceptionsOnXA = null;&lt;br/&gt;
        return false; // we don&apos;t support transaction timeout in our layer.&lt;br/&gt;
        /* int rc = xaSetTransTimeOut(seconds);&lt;br/&gt;
           if (rc != XAResource.XA_OK)&lt;br/&gt;
             throwXAException(rc); */&lt;br/&gt;
    }&lt;/p&gt;
</comment>
                            <comment id="12502336" author="julo" created="Thu, 7 Jun 2007 14:28:56 +0100"  >&lt;p&gt;I ran derbyall and suites.All without failures.&lt;/p&gt;

&lt;p&gt;The description of the patch is in description.txt file. There are some more explanations in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2508&quot; title=&quot;Implement the XA transaction timeout support for embedded driver.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2508&quot;&gt;&lt;del&gt;DERBY-2508&lt;/del&gt;&lt;/a&gt; sub-task.&lt;/p&gt;

&lt;p&gt;Please, review the patch and ask questions or post comments.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="12503304" author="julo" created="Mon, 11 Jun 2007 08:13:16 +0100"  >&lt;p&gt;The patch contains all the changes for sub-tasks &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2508&quot; title=&quot;Implement the XA transaction timeout support for embedded driver.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2508&quot;&gt;&lt;del&gt;DERBY-2508&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2509&quot; title=&quot;Implement the XA transaction timeout support for client driver.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2509&quot;&gt;&lt;del&gt;DERBY-2509&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12503893" author="knutanders" created="Tue, 12 Jun 2007 16:57:12 +0100"  >&lt;p&gt;Hi Julo,&lt;/p&gt;

&lt;p&gt;I have started reviewing the patch, but I haven&apos;t studied the entire patch in detail yet. Here are some preliminary comments and questions:&lt;/p&gt;

&lt;p&gt;XATransactionState.java:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it would be good if the new methods had javadoc comments&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;perhaps the common code in xa_rollback() and xa_commit() could be factored out into a utility method, say cancelCancellationTask()?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think there is a possibility that CancelXATransactionTask tries to roll back the transaction after an explicit rollback or commit has been issued. This is because CancelXATransactionTask.run() and XATransactionState.xa_commit()/xa_rollback() synchronize on different objects.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;would it be more natural to have CancelXATransactionTask as a non-static class? Then we wouldn&apos;t need the tranState variable (it could be accessed with XATransactionState.this).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m not sure I understand why scheduleTimeoutTask() can be unsynchronized whereas all the other methods require synchronization of some kind. Could you please explain?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if CancelXATransactionTask.run() catches an exception, it prints it to the console. I&apos;m not sure what&apos;s the best way to handle these exceptions, but I don&apos;t think printing them is appropriate. Perhaps it would be better to use Monitor.logMessage() (or perhaps create a Monitor.logThrowable() which could print the stack trace)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;XATransactionState.cancel() catches SQLException and re-throws it as XAException. Do you think we could chain the exceptions with initCause() so that we preserve the original error?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12504168" author="julo" created="Wed, 13 Jun 2007 09:56:35 +0100"  >&lt;p&gt;Thanks Knut for spending some time with a patch.&lt;/p&gt;

&lt;p&gt;&amp;gt; XATransactionState.java: &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;   - it would be good if the new methods had javadoc comments &lt;/p&gt;

&lt;p&gt;I&apos;ll add missing javadoc.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt;   - perhaps the common code in xa_rollback() and xa_commit() could be factored out into a utility method, say cancelCancellationTask()? &lt;/p&gt;

&lt;p&gt;I thought that it is too simple to be a method.&lt;/p&gt;

&lt;p&gt;&amp;gt;   - I think there is a possibility that CancelXATransactionTask tries to roll back the transaction after an explicit rollback or commit has been issued. This is because CancelXATransactionTask.run() and XATransactionState.xa_commit()/xa_rollback() synchronize on different objects. &lt;/p&gt;

&lt;p&gt;Yes, it is. But it does not succeed. If I will change the CancelXATransactionTask class to non-static just the same synchronization might not help. It is not documented what the TimerTask.cancel method does when the task is running (and waiting for the synchronization on run method). How can I synchronize on the same objects if some of those might be null (XATransactionState.timeoutTask) or might be null after synchronization (CancelXATransactionTask.run method)? I think that maintaining a variable whether the transaction was committed/rolled back already might be appropriate. I can check that variable in XATransactionState.cancel method.&lt;/p&gt;

&lt;p&gt; &amp;gt;   - would it be more natural to have CancelXATransactionTask as a non-static class? Then we wouldn&apos;t need the tranState variable (it could be accessed with XATransactionState.this). &lt;/p&gt;

&lt;p&gt;I copied the way of the transaction timeout from org.apache.derby.impl.sql.conn.GenericStatementContext where the CancelTask is made static. I can not see &lt;/p&gt;

&lt;p&gt;&amp;gt;   - I&apos;m not sure I understand why scheduleTimeoutTask() can be unsynchronized whereas all the other methods require synchronization of some kind. Could you please explain? &lt;/p&gt;

&lt;p&gt;I wanted to avoid unnecessary synchronization. scheduleTimeoutTask is called just from EmbedXAResource.start which is synchornized on EmbedXAResource. You can not execute any other statements/functions on behalf of that global transaction in parallel or more precisely said all of those paralel invocations (except one) will fail.&lt;/p&gt;

&lt;p&gt;This should be explained in comment but looking again at this I think it is much more transparent to add a synchronization on scheduleTimeoutTask since the function is not heavily invoked... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt;   - if CancelXATransactionTask.run() catches an exception, it prints it to the console. I&apos;m not sure what&apos;s the best way to handle these exceptions, but I don&apos;t think printing them is appropriate. Perhaps it would be better to use Monitor.logMessage() (or perhaps create a Monitor.logThrowable() which could print the stack trace)?&lt;/p&gt;

&lt;p&gt;I had no idea about correct handling either. I made it to print it to the console just temporary but I forgot to think about he correct handling. I&apos;ll add a method Monitor.logThrowable as you are suggesting.&lt;/p&gt;

&lt;p&gt;&amp;gt;   - XATransactionState.cancel() catches SQLException and re-throws it as XAException. Do you think we could chain the exceptions with initCause() so that we preserve the original error?&lt;/p&gt;

&lt;p&gt;Probably yes, because this exception will end in Monitor.logThrowable as you are suggesting.&lt;/p&gt;

&lt;p&gt;I&apos;ll prepare a new version of the patch ASAP. Thanks.&lt;/p&gt;</comment>
                            <comment id="12504209" author="julo" created="Wed, 13 Jun 2007 13:22:45 +0100"  >&lt;p&gt;I have created a new patch ran XATransactionTest without any errors or failures. Now I am running suites.All and derbyall.&lt;/p&gt;

&lt;p&gt;I have changed the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Function Monitor.logThrowable created and I am reporting exceptions thrown during a scheduled rollback using that function.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A member isFinished created in XATransactionState which indicates that the transaction was committed or rolled back and this value is checked in &apos;cancel&apos; method and nothing is done if the transaction was already committed or rolled back.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Missing javadoc comments were added.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The class CancelXATransactionTask changed to be non-static.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;synchronize added to scheduleTimeoutTask method&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;call to initCause added in XATransactionState.cancel()&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12504215" author="knutanders" created="Wed, 13 Jun 2007 13:32:57 +0100"  >&lt;p&gt;Thanks Julo, your answers make sense.&lt;/p&gt;

&lt;p&gt;A couple of more questions:&lt;/p&gt;

&lt;p&gt;Is it specified anywhere what the transaction timeout means? I found a&lt;br/&gt;
description in the javadoc for XAResource.setTransactionTimeout(), but&lt;br/&gt;
it doesn&apos;t say anything about the effect of the timeout.&lt;/p&gt;

&lt;p&gt;The property is called derby.jdbc.xaTransactionTimeout. Is it related&lt;br/&gt;
to JDBC, or should we call it something else, like&lt;br/&gt;
derby.xa.transactionTimeout?&lt;/p&gt;

&lt;p&gt;Perhaps EmbedXAResource.start() could have a comment explaining why it&lt;br/&gt;
checks (timeoutSeconds != Integer.MAX_VALUE).&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I quite understand what the test does. For instance, it&apos;s&lt;br/&gt;
not clear to me which statements/transactions should time out and what&lt;br/&gt;
makes them time out. Also, would it be possible to split the test into&lt;br/&gt;
smaller/simpler test cases, like (a) set transaction timeout, (b)&lt;br/&gt;
start transaction, (c) sleep for a while, (d) check that the&lt;br/&gt;
transaction was aborted?&lt;/p&gt;

&lt;p&gt;In the test, the variables xaConn, xaRes and conn are declared and&lt;br/&gt;
initialized right before the for loop, but also at the beginning of&lt;br/&gt;
the body of the for loop, so their initial values are always thrown&lt;br/&gt;
away. Could the variable declarations be moved inside the for loop&lt;br/&gt;
instead?&lt;/p&gt;

&lt;p&gt;In this try/catch in the test, shouldn&apos;t there have been a call to&lt;br/&gt;
fail() after xaRes.end()?&lt;br/&gt;
+                try &lt;/p&gt;
{
+                xaRes.end(xid, XAResource.TMFAIL);
+                }
&lt;p&gt; catch (XAException ex) {&lt;br/&gt;
+                    if (ex.errorCode &amp;lt; XAException.XA_RBBASE&lt;br/&gt;
+                        || ex.errorCode &amp;gt; XAException.XA_RBEND)&lt;br/&gt;
+                    &lt;/p&gt;
{
+                        throw ex;
+                    }
&lt;p&gt;+                }&lt;/p&gt;

&lt;p&gt;I&apos;m also not sure I understand the following code&lt;br/&gt;
+            } else &lt;/p&gt;
{
+                // check the timout for associated transactions
+                ;
+            }
&lt;p&gt;It says it checks the timeout, but it doesn&apos;t do anything.&lt;/p&gt;</comment>
                            <comment id="12504218" author="knutanders" created="Wed, 13 Jun 2007 13:50:12 +0100"  >&lt;p&gt;I looked at the v2 patch. Some additional comments:&lt;/p&gt;

&lt;p&gt;I think Monitor.logThrowable() could be simpler:&lt;br/&gt;
    t.printStackTrace(getStream().getPrintWriter());&lt;/p&gt;

&lt;p&gt;The tranState variable in CancelXATransactionTask is not used.&lt;/p&gt;

&lt;p&gt;I believe the synchronization in CancelXATransactionTask.run() is not necessary as this method is the only one that uses that synchronization object, and its only call is to a synchronized method anyway.&lt;/p&gt;</comment>
                            <comment id="12504255" author="julo" created="Wed, 13 Jun 2007 15:22:30 +0100"  >&lt;p&gt;&amp;gt; Is it specified anywhere what the transaction timeout means? I found a &lt;br/&gt;
&amp;gt; description in the javadoc for XAResource.setTransactionTimeout(), but &lt;br/&gt;
&amp;gt; it doesn&apos;t say anything about the effect of the timeout.&lt;/p&gt;

&lt;p&gt;No, there is no exact specification what timeout means.&lt;/p&gt;

&lt;p&gt;&amp;gt; The property is called derby.jdbc.xaTransactionTimeout. Is it related &lt;br/&gt;
&amp;gt; to JDBC, or should we call it something else, like &lt;br/&gt;
&amp;gt; derby.xa.transactionTimeout?&lt;/p&gt;

&lt;p&gt;Yes, it is the &apos;default value&apos; about which the javadoc&lt;br/&gt;
of XAResource.setTransactionTimeout is talking about.&lt;br/&gt;
And it&apos;s from JDBC specification. &lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;m not sure I quite understand what the test does. For instance, it&apos;s &lt;br/&gt;
&amp;gt; not clear to me which statements/transactions should time out and what &lt;br/&gt;
&amp;gt; makes them time out. Also, would it be possible to split the test into &lt;br/&gt;
&amp;gt; smaller/simpler test cases, like (a) set transaction timeout, (b) &lt;br/&gt;
&amp;gt; start transaction, (c) sleep for a while, (d) check that the &lt;br/&gt;
&amp;gt; transaction was aborted?&lt;/p&gt;

&lt;p&gt;Yes, that would be possible. Currently, 1000 global transactions&lt;br/&gt;
are performed during the test. Everyone of them just inserts a row&lt;br/&gt;
into XATT table. The rows inserted by the transactions are different.&lt;br/&gt;
Some of these transactions are committed and some of them are&lt;br/&gt;
left in different stages. After finishing these 1000 transactions a select&lt;br/&gt;
statement is executed on that table. However, if there are still some&lt;br/&gt;
unfinished transactions that were not aborted they will hold a lock&lt;br/&gt;
on a XATT table until they will get rolled back by the transaction timeout.&lt;br/&gt;
The number of rows in the XATT table is calculated. It is then compared&lt;br/&gt;
with the excepted number of rows (the trnsaction we know we have&lt;br/&gt;
committed).&lt;/p&gt;

&lt;p&gt;The call&lt;br/&gt;
            xaRes.setTransactionTimeout(5);&lt;br/&gt;
before calling xaRes.start() makes the transactions to get timed out.&lt;/p&gt;

&lt;p&gt;Is this understandable? Would it be ok to explain this more in comments?&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;m also not sure I understand the following code &lt;br/&gt;
&amp;gt; + } else &lt;/p&gt;
{ 
&amp;gt; + // check the timout for associated transactions 
&amp;gt; + ; 
&amp;gt; + }
&lt;p&gt; &lt;br/&gt;
&amp;gt; It says it checks the timeout, but it doesn&apos;t do anything.&lt;/p&gt;

&lt;p&gt;The time out is setted up for the transaction at the beggining&lt;br/&gt;
of the transaction. Different transactions are left in different&lt;br/&gt;
states as the timeout task will try to roll back transactions&lt;br/&gt;
in different state / connection association, etc. The code&lt;br/&gt;
actually does not test the timeout for associated transactions&lt;br/&gt;
directly, it just left the transaction in a state it is (and it is&lt;br/&gt;
associated with the connection).&lt;/p&gt;

&lt;p&gt;&amp;gt; In this try/catch in the test, shouldn&apos;t there have been a call to &lt;br/&gt;
&amp;gt; fail() after xaRes.end()? &lt;br/&gt;
&amp;gt; + try &lt;/p&gt;
{ 
&amp;gt; + xaRes.end(xid, XAResource.TMFAIL); 
&amp;gt; + }
&lt;p&gt; catch (XAException ex) { &lt;br/&gt;
&amp;gt; + if (ex.errorCode &amp;lt; XAException.XA_RBBASE &lt;br/&gt;
&amp;gt; + || ex.errorCode &amp;gt; XAException.XA_RBEND) &lt;br/&gt;
&amp;gt; + &lt;/p&gt;
{ 
&amp;gt; + throw ex; 
&amp;gt; + }
&lt;p&gt; &lt;br/&gt;
&amp;gt; + }&lt;/p&gt;

&lt;p&gt;Might be, it will then test something more than just a timeout feature.&lt;/p&gt;

&lt;p&gt;&amp;gt; In the test, the variables xaConn, xaRes and conn are declared and &lt;br/&gt;
&amp;gt; initialized right before the for loop, but also at the beginning of &lt;br/&gt;
&amp;gt; the body of the for loop, so their initial values are always thrown &lt;br/&gt;
&amp;gt; away. Could the variable declarations be moved inside the for loop &lt;br/&gt;
&amp;gt; instead?&lt;/p&gt;

&lt;p&gt;Yes, i missed that.&lt;/p&gt;</comment>
                            <comment id="12504397" author="julo" created="Wed, 13 Jun 2007 21:21:10 +0100"  >&lt;p&gt;The tests (sutes.All and derbyall) for v2 patch finished without errors and failures.&lt;/p&gt;

&lt;p&gt;I am attaching a new version of the patch. I am running the tests now.&lt;/p&gt;

&lt;p&gt;Changes compared to a v2 patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added comment to EmbedXAResource.start about the test of transaction timeout value to Integer.MAX_VALUE&lt;/li&gt;
	&lt;li&gt;CancelXATransactionTask - field tranState removed, synchronization in run method also removed.&lt;/li&gt;
	&lt;li&gt;Monitor.logThrowable - changed as suggested (sorry I missed getPrintWriter method).&lt;/li&gt;
	&lt;li&gt;XATransactionTest - much more detailed comment added to testXATransactionTimeout method.&lt;/li&gt;
	&lt;li&gt;XATransactionTest - removed initialization of xaRes, xaConn and conn before the for loop.&lt;/li&gt;
	&lt;li&gt;XATransactionTest - Assert.fail() added to corresponding try-catch blok when checking the exception thrown.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I can not see any chance that the tests could fail due to the change in a code compared to the v2 patch (I ran XATransactionTest alone without failures and changes has no impact on other tests). However, I&apos;ll let you know when my test run will finish.&lt;/p&gt;</comment>
                            <comment id="12504581" author="julo" created="Thu, 14 Jun 2007 08:51:57 +0100"  >&lt;p&gt;All tests (suites.All and derbyall) succeeded for v3 patch.&lt;/p&gt;</comment>
                            <comment id="12504588" author="knutanders" created="Thu, 14 Jun 2007 09:00:27 +0100"  >&lt;p&gt;&amp;gt;&amp;gt; Is it specified anywhere what the transaction timeout means? I found a&lt;br/&gt;
&amp;gt;&amp;gt; description in the javadoc for XAResource.setTransactionTimeout(), but&lt;br/&gt;
&amp;gt;&amp;gt; it doesn&apos;t say anything about the effect of the timeout.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; No, there is no exact specification what timeout means.&lt;/p&gt;

&lt;p&gt;Could you explain the rationale for choosing this particular&lt;br/&gt;
behaviour? How do other databases use the timeout?&lt;/p&gt;

&lt;p&gt;I&apos;m asking because it is not quite clear to me how the timeout is&lt;br/&gt;
used, and what users would expect from the timeout. From the&lt;br/&gt;
description of this issue, it seems like the purpose of the timeout is&lt;br/&gt;
to ensure that resources are freed if no commit or rollback is&lt;br/&gt;
issued. Is this the primary use case for the timeout? If so, is the&lt;br/&gt;
code that cancels the running statement necessary? (It does seem to me&lt;br/&gt;
that cancelling statements is something one rather would do with a&lt;br/&gt;
query timeout than with an XA transaction timeout.) And would it make&lt;br/&gt;
more sense to restart the timer each time a method is called on&lt;br/&gt;
XAResource, so that the timeout became some sort of idle timeout? (To&lt;br/&gt;
avoid cases like: transaction manager calls prepare(), the XAResource&lt;br/&gt;
votes OK, and half a second later the XAResource aborts because the&lt;br/&gt;
transaction took too long.)&lt;/p&gt;</comment>
                            <comment id="12504629" author="julo" created="Thu, 14 Jun 2007 10:58:55 +0100"  >&lt;p&gt;I wanted to solve the similiar problem like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2220&quot; title=&quot;Uncommitted transactions executed throught XAResource will held locks after the application terminates (or crashes during the transaction).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2220&quot;&gt;&lt;del&gt;DERBY-2220&lt;/del&gt;&lt;/a&gt; solved&lt;br/&gt;
but also for the case where the global transaction is not associated&lt;br/&gt;
with any connection. In that case without a timeout that global&lt;br/&gt;
transaction may held locks forever. I do not know what is&lt;br/&gt;
the purpose of timeout in jdbc specification (it is not explained)&lt;br/&gt;
but I see the purpose in just not to held resource for a long time.&lt;/p&gt;

&lt;p&gt;&amp;gt; If so, is the code that cancels the running statement necessary?&lt;/p&gt;

&lt;p&gt;What else could we do in this case? The transaction times out so&lt;br/&gt;
I thing the best way is to cancell everything. If there is a running&lt;br/&gt;
statement and we will not cancel it, so shell we schedule a new&lt;br/&gt;
timeout task later? Or just ignore this transaction? I think that&lt;br/&gt;
doing something else would lead to not quite transparent behaviour.&lt;/p&gt;

&lt;p&gt;The behaviour you are proposing is also acceptable.&lt;/p&gt;

&lt;p&gt;&amp;gt; To avoid cases like: transaction manager calls prepare(), the XAResource &lt;br/&gt;
&amp;gt; votes OK, and half a second later the XAResource aborts because the &lt;br/&gt;
&amp;gt; transaction took too long.)&lt;/p&gt;

&lt;p&gt;This might be handled by cancelling a timeout task also in prepare method.&lt;br/&gt;
After the application calls prepare, RM is allowed to heuristically commit&lt;br/&gt;
or rollback the transaction. This means that it will no longer hold any resources.&lt;br/&gt;
I do not know quite well how the heuristicall commit/rollback works. I&apos;ll explore&lt;br/&gt;
this.&lt;/p&gt;

&lt;p&gt;About other DBs:&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
IBM JDBC Universal Driver - feature not implemented.&lt;br/&gt;
PostgreSQL - feature not implemented.&lt;br/&gt;
MySQL - feature not implemented.&lt;br/&gt;
Oracle - I do not know. I have no Oracle installed.&lt;/p&gt;
</comment>
                            <comment id="12504686" author="julo" created="Thu, 14 Jun 2007 13:24:28 +0100"  >&lt;p&gt;Heuristic branch completition seems not to work in derby. I have not found anything in the docs and I tried to leave a prepared transaction for a while and it remains uncommitted/unrolled back.&lt;/p&gt;

&lt;p&gt;However if the applciation crashes and there are prepared transactions pending, there exists an interface how to maintain those transactions (XAResource.recover). So, it should be ok if we will also cancel the time out task in a call to XAResource.prepare.&lt;/p&gt;</comment>
                            <comment id="12504707" author="julo" created="Thu, 14 Jun 2007 13:58:14 +0100"  >&lt;p&gt;I found some small piece about the xa transaction timeout behaviour in DRDA  V4 - Vol 3: Distributed Data Management Architecture.&lt;/p&gt;

&lt;p&gt;Page 964:&lt;br/&gt;
The TIMEOUT parameter is a 64-bit binary number which measures time in milliseconds. It&lt;br/&gt;
represents the elapsed time before the transaction is rolled back. The timer is started at the&lt;br/&gt;
beginning of the transaction SYNCCTL(New UOW).&lt;br/&gt;
If the request SYNCCTL(Prepare to Commit) is not received during this time period, the&lt;br/&gt;
transaction will be implicitly rolled back.&lt;/p&gt;</comment>
                            <comment id="12504711" author="julo" created="Thu, 14 Jun 2007 14:05:49 +0100"  >&lt;p&gt;I have created an additional patch.&lt;/p&gt;

&lt;p&gt;changes:&lt;br/&gt;
XATransactionState:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added a timeout task cancellation to xa_prepare() method.&lt;/li&gt;
	&lt;li&gt;Common code from xa_commit/rollback/prepare moved&lt;br/&gt;
  to xa_finalize()&lt;/li&gt;
	&lt;li&gt;Some more comments added to cancel()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am running the tests now. However, the change should not affect the tests. I&apos;ll post the results after tests will finish.&lt;/p&gt;</comment>
                            <comment id="12504903" author="knutanders" created="Thu, 14 Jun 2007 21:42:28 +0100"  >&lt;p&gt;Thanks for investigating this Julo. It also seems like many of the same questions were asked and answered under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2508&quot; title=&quot;Implement the XA transaction timeout support for embedded driver.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2508&quot;&gt;&lt;del&gt;DERBY-2508&lt;/del&gt;&lt;/a&gt; as well. There weren&apos;t any objections to the approach as far as I could see, so I guess it is uncontroversial to go for that solution. If there are no objections, I will commit the patch tomorrow.&lt;/p&gt;

&lt;p&gt;Just one final question about the changes in the v4 patch:&lt;br/&gt;
&amp;gt; changes:&lt;br/&gt;
&amp;gt; XATransactionState:&lt;br/&gt;
&amp;gt; - Added a timeout task cancellation to xa_prepare() method.&lt;/p&gt;

&lt;p&gt;Will the locks mentioned in the description be released after xa_prepare()? If they are, this sounds fine.&lt;/p&gt;</comment>
                            <comment id="12504955" author="julo" created="Thu, 14 Jun 2007 23:43:14 +0100"  >&lt;p&gt;&amp;gt; Will the locks mentioned in the description be released after xa_prepare()?&lt;/p&gt;

&lt;p&gt;Unfortunatelly, the would not. However, according the JTA spec after calling prepare resource manager is allowed to heuristically commit or rollback the transaction. This feature is not implementedyet in derby - at least I tried this and it does not work and I also have not found anything in docsnorthe code.&lt;/p&gt;

&lt;p&gt;User can use the method XAResource.recover to obtain the list of the prepared transactions and he can commit/rollback the transactions afterwards even after the application server crash. This process is also described in JTA spec, so it is possible to write a client application with some cleanup at the startup.&lt;/p&gt;

&lt;p&gt;The alternative to v4 patch approach is not to cancel the timeout task in a call to prepare function. We can file a JIRA to implement heuristic commit/rollbackof the global transactions and add the cancellation o ftimeout task to xa_prepare with introduction of this feature. Having the implementation of the xa transaction timeout feature temporarily rolling back prepared transactions should not matter because if I would know that my transaction should run 2s and I would like to give a timeout to that transaction I would choose a much higher value like 10s or so just to besurethat my transaction would finish. The interval between prepare and commit is expecting to be very short.&lt;/p&gt;

&lt;p&gt;What is your opinion on this?&lt;/p&gt;</comment>
                            <comment id="12504956" author="julo" created="Thu, 14 Jun 2007 23:44:12 +0100"  >&lt;p&gt;Tests (suites.All and derbyall) of v4 patch finished without errors.&lt;/p&gt;</comment>
                            <comment id="12505088" author="knutanders" created="Fri, 15 Jun 2007 09:16:34 +0100"  >&lt;p&gt;&amp;gt; What is your opinion on this?&lt;/p&gt;

&lt;p&gt;If it is possible that we hold on to resources forever if we cancel the timer on prepare, I would think it&apos;s safer not to do it. I also think it would be easier to explain the behaviour if we don&apos;t cancel the timer until the transaction has completed. Do you see any problem with taking the v4 patch and removing the call to xa_finalize() in xa_prepare()?&lt;/p&gt;</comment>
                            <comment id="12505111" author="julo" created="Fri, 15 Jun 2007 10:04:37 +0100"  >&lt;p&gt;I changed the patch. Running the tests now. I do not see any chance that these tests could fail due to a change in v5 patch.&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed a call to XATransactionState.xa_finalize from XATransactionState.xa_prepare&lt;/li&gt;
	&lt;li&gt;changed comments stating that XATransactionState.isFinished is assigned to true also during a prepare.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12505225" author="knutanders" created="Fri, 15 Jun 2007 14:23:02 +0100"  >&lt;p&gt;Thank you, Julo! I committed v5 to trunk with revision 547674.&lt;br/&gt;
Please also file a JIRA issue for documenting the derby.jdbc.xaTransactionTimeout property. I think it is OK to leave it undocumented for the 10.3 release, but it would be good to have it documented in the reference manual some time.&lt;/p&gt;</comment>
                            <comment id="12505918" author="army" created="Mon, 18 Jun 2007 19:38:27 +0100"  >&lt;p&gt;I think the changes for this issue have led to a couple of javadoc errors...?&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\jdbc\EmbedXAResource.java:530: warning - Tag @see: reference not found: Property.PROP_XA_TRANSACTION_TIMEOUT&lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\jdbc\EmbedXAResource.java:530: warning - Tag @see: reference not found: Property.DEFAULT_XA_TRANSACTION_TIMEOUT&lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; java\engine\org\apache\derby\jdbc\XATransactionState.java:337: warning - @param argument &quot;onPhase&quot; is not a parameter name.&lt;/p&gt;</comment>
                            <comment id="12506197" author="julo" created="Tue, 19 Jun 2007 16:08:35 +0100"  >&lt;p&gt;I&apos;ll fix these and post a patch.&lt;/p&gt;</comment>
                            <comment id="12506205" author="army" created="Tue, 19 Jun 2007 16:25:37 +0100"  >&lt;p&gt;&amp;gt; I&apos;ll fix these and post a patch.&lt;/p&gt;

&lt;p&gt;Actually, it looks likes Rick already took care of them:&lt;/p&gt;

&lt;p&gt;  URL: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=548720&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=548720&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the changes look good to you, then no further work is required.  Thanks for being willing, though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12506206" author="julo" created="Tue, 19 Jun 2007 16:26:06 +0100"  >&lt;p&gt;Seems to be already fixed. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Thanks.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12372049">DERBY-2849</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12359174" name="d2432.diff" size="38810" author="julo" created="Thu, 7 Jun 2007 14:28:56 +0100"/>
                            <attachment id="12359175" name="d2432.stat" size="872" author="julo" created="Thu, 7 Jun 2007 14:28:56 +0100"/>
                            <attachment id="12359593" name="d2432_v2.diff" size="40561" author="julo" created="Wed, 13 Jun 2007 13:22:44 +0100"/>
                            <attachment id="12359594" name="d2432_v2.stat" size="943" author="julo" created="Wed, 13 Jun 2007 13:22:45 +0100"/>
                            <attachment id="12359627" name="d2432_v3.diff" size="41443" author="julo" created="Wed, 13 Jun 2007 21:21:10 +0100"/>
                            <attachment id="12359628" name="d2432_v3.stat" size="943" author="julo" created="Wed, 13 Jun 2007 21:21:10 +0100"/>
                            <attachment id="12359724" name="d2432_v4.diff" size="41788" author="julo" created="Thu, 14 Jun 2007 14:05:49 +0100"/>
                            <attachment id="12359725" name="d2432_v4.stat" size="943" author="julo" created="Thu, 14 Jun 2007 14:05:49 +0100"/>
                            <attachment id="12359822" name="d2432_v5.diff" size="41746" author="julo" created="Fri, 15 Jun 2007 10:04:37 +0100"/>
                            <attachment id="12359823" name="d2432_v5.stat" size="943" author="julo" created="Fri, 15 Jun 2007 10:04:37 +0100"/>
                            <attachment id="12359173" name="description.txt" size="2877" author="julo" created="Thu, 7 Jun 2007 14:28:56 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12366392">DERBY-2508</subtask>
                            <subtask id="12366396">DERBY-2509</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 12 Jun 2007 15:57:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30441</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0t4v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38538</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>