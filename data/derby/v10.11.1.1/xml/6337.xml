<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6337/DERBY-6337.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6337] derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception  java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6337</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;On Windows on IBM JVM with &lt;br/&gt;
IBM_JAVA_OPTIONS=-Xgcpolicy:optthruput -Xjit:count=0 -Xnocompressedrefs&lt;/p&gt;

&lt;p&gt;derbynet.ServerPropertiesTest prints the exception:&lt;br/&gt;
(net)derbynet.ServerPropertiesTest.ttestSetPortPriority java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f&lt;br/&gt;
rom network server: Insufficient data.&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)&lt;br/&gt;
        at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:613)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.&lt;br/&gt;
java:280)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerProperti&lt;br/&gt;
esTest.java:476)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:607)&lt;br/&gt;
        at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
        at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)&lt;br/&gt;
        at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
        at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
        at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
        at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)&lt;br/&gt;
        at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)&lt;br/&gt;
        at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:613)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.&lt;br/&gt;
java:280)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(ServerPropertiesTest&lt;br/&gt;
.java:309)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerProperti&lt;br/&gt;
esTest.java:483)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:76)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:607)&lt;br/&gt;
        at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
        at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)&lt;br/&gt;
        at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
        at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
        at junit.textui.TestRunner.doRun(TestRunner.java:121)&lt;br/&gt;
        at junit.textui.TestRunner.start(TestRunner.java:185)&lt;br/&gt;
        at junit.textui.TestRunner.main(TestRunner.java:143)&lt;br/&gt;
used 53367 ms .&lt;br/&gt;
(net)derbynet.ServerPropertiesTest.ttestDefaultProperties used 387 ms .&lt;br/&gt;
(net)derbynet.ServerPropertiesTest.testToggleTrace used 34428 ms .&lt;br/&gt;
(net)derbynet.ServerPropertiesTest.testToggleLogConnections used 34064 ms&lt;br/&gt;
Time: 157.034&lt;/p&gt;

&lt;p&gt;OK (4 tests)&lt;/p&gt;

&lt;p&gt;but the test passes.&lt;/p&gt;

</description>
                <environment>Windows 7, IBM java 7 &lt;br/&gt;
java version &amp;quot;1.7.0&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build pwi3270sr5-20130619_01(SR5))&lt;br/&gt;
IBM J9 VM (build 2.6, JRE 1.7.0 Windows 7 x86-32 20130617_152572 (JIT enabled, AOT enabled)&lt;br/&gt;
J9VM - R26_Java726_SR5_20130617_1436_B152572&lt;br/&gt;
JIT  - r11.b04_20130528_38954ifx1&lt;br/&gt;
GC   - R26_Java726_SR5_20130617_1436_B152572&lt;br/&gt;
J9CL - 20130617_152572)&lt;br/&gt;
JCL - 20130616_01 based on Oracle 7u25-b12&lt;br/&gt;
&lt;br/&gt;
With IBM_JAVA_OPTIONS=-Xgcpolicy:optthruput -Xjit:count=0 -Xnocompressedrefs</environment>
        <key id="12667166">DERBY-6337</key>
            <summary>derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception  java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Sep 2013 20:32:28 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:38 +0000</updated>
                            <resolved>Sat, 24 May 2014 06:46:41 +0100</resolved>
                                                    <fixVersion>10.10.2.1</fixVersion>
                    <fixVersion>10.11.1.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13759354" author="kmarsden" created="Thu, 5 Sep 2013 20:36:58 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5610&quot; title=&quot;ServerPropertiesTest prints .java.net.SocketException: Connection reset to console but test passes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5610&quot;&gt;&lt;del&gt;DERBY-5610&lt;/del&gt;&lt;/a&gt; was a similar issue where the ping error prints but the test passes.&lt;/p&gt;</comment>
                            <comment id="13771240" author="kmarsden" created="Wed, 18 Sep 2013 22:07:35 +0100"  >&lt;p&gt;I can no longer reproduce this. It seemed to be I had a server in an odd state on my machine.&lt;/p&gt;</comment>
                            <comment id="13934104" author="myrna" created="Thu, 13 Mar 2014 21:26:46 +0000"  >&lt;p&gt;I have reports of this test failure on very slow machines.&lt;/p&gt;

&lt;p&gt;Reopening...&lt;/p&gt;</comment>
                            <comment id="13934158" author="myrna" created="Thu, 13 Mar 2014 21:51:59 +0000"  >&lt;p&gt;The stack trace for the new reports is like the original report:&lt;br/&gt;
java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:613)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(ServerPropertiesTest.java:280)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority(ServerPropertiesTest.java:476)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:82)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;... further junit stuff ...&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This new report is on a really slow machine (zOS)&lt;/p&gt;

&lt;p&gt;At this point in the test we expect the server to be down. &lt;br/&gt;
I am wondering if it is possible that the shutdown just takes longer to write about this than expected...&lt;br/&gt;
It seems that for some reason the replyBufferCount is -1 in this code section from NetworkServerControlImpl.fillReplyBuffer:&lt;br/&gt;
----------------------------------------------&lt;br/&gt;
        try &lt;/p&gt;
{
            replyBufferCount = clientIs.read(replyBuffer);
        }
&lt;p&gt;        catch (IOException e)&lt;/p&gt;
        {
            clientSocketError(e);
        }
&lt;p&gt;        if (replyBufferCount == -1)&lt;br/&gt;
            consolePropertyMessage(&quot;DRDA_InvalidReplyTooShort.S&quot;, true);&lt;br/&gt;
        replyBufferPos = 0;&lt;br/&gt;
----------------------------------------------------&lt;br/&gt;
But I am not sure where this print to the console is coming from.&lt;/p&gt;
</comment>
                            <comment id="13935051" author="myrna" created="Fri, 14 Mar 2014 14:09:33 +0000"  >&lt;p&gt;For what it&apos;s worth, I ran ServerPropertiesTest 100x on my windows 7 laptop, with ibm 1.7 SR6, and while it failed twice (with timeout messages, and non-available port errors), it did not show the &apos;insuficient data&apos; error.&lt;/p&gt;</comment>
                            <comment id="13943378" author="mamtas" created="Fri, 21 Mar 2014 18:48:28 +0000"  >&lt;p&gt;I am just trying to collect some background information to see if anything stands out about this intermittent failure,&lt;/p&gt;

&lt;p&gt;This test has been reported failing intermittently 5 times atleast since April 9th 2008. The first occurrence of it was reported on April 9th 2008 and the checkin that went in about a month before that into the test was as follows&lt;/p&gt;

&lt;p&gt;Revision 634425 - Modified Thu Mar 6 21:30:48 2008&lt;br/&gt;
The commit comments were as follows&lt;br/&gt;
******&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3504&quot; title=&quot;getting &amp;quot;Timed out waiting for network server to start&amp;quot; errors while running JMX unit tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3504&quot;&gt;&lt;del&gt;DERBY-3504&lt;/del&gt;&lt;/a&gt; Fix timeout errors in management._Suite when running with classes. Was due to the spawned vm to execute the server failing as installing the policy file requires jars. Changed the decorator to add the -noSecurityManager flag if classes is being used with comments indicating if tests need a different behaviour they need to provide it.&lt;br/&gt;
Added a SpawnedProcess utilitly class that correctly handles the output streams written by a spawned process by having two background threads that read from the streams into a buffer. This stops the change the process hangs due to being blocked writing stdout or stderr. Used this utility class in one more location where a vm was being spawned. Ideally the spawning of a java process should be in a single utility not scattered around multple tests, separate cleanup issue. &lt;br/&gt;
******&lt;/p&gt;</comment>
                            <comment id="13945457" author="mamtas" created="Mon, 24 Mar 2014 18:19:23 +0000"  >&lt;p&gt;I have spent some time understanding the test fixture ttestSetPortPriority and following is a brief description of it.&lt;/p&gt;

&lt;p&gt;The test is trying to set the port number in 4 different way while starting the server.&lt;/p&gt;

&lt;p&gt;1)First, it makes sure that if there are any instance of Network Server running on default port, then it is shutdown.&lt;br/&gt;
2)Then using the test harness(which uses NetworkServerControl to start the network server), the test starts the network server on the default port. As part of starting the server, the test makes canPingServer() call to make sure that the server is up. &lt;br/&gt;
3)Next, the test finds another available port and creates derby.properties file and puts the new port number info in the derby.properties using derby.drda.portNumber property. &lt;br/&gt;
4)In order for Derby to read the derby.properties file, the test shutdowns Derby engine and starts a new instance of network server which should use the port number specified in derby.properties file. Again, as part of starting the server, the test makes canPingServer() call to make sure that the server is up. &lt;br/&gt;
5)By now, we have 2 instances of Network Server running.&lt;br/&gt;
6)Next, the test finds another available port but this time it sets the system property derby.drda.portNumber to the available port number and starts the server. Again, as part of starting the server, the test makes canPingServer() call to make sure that the server is up. Note that system property takes precedence over derby.properties file and hence even though there is a port number specified in derby.properties file, Network Server will be started on the port number specified by system property derby.drda.portNumber.&lt;br/&gt;
7)Next, the test finds another available port and starts the network server using the test harness but this time it passes the port number directly to NetworkServerControl(even though system property derby.drda.portNumber and derby.properties have different port numbers, the port number passed to NetworkServerControl supercedes system property and derby.properties). As usual, as part of starting the server, the test makes canPingServer() call to make sure that the server is up. The network server is started using following call by the test harness. Note the use of the port number. In all the other cases so far, the port number was not passed to NetworkServerControl constructor.&lt;br/&gt;
new NetworkServerControl(host, port, user, password)&lt;br/&gt;
8)Lastly, as the 4th variation of specifying the port number, the test finds another availble port number. But this time, it does not start the server using the test harness. Instead, it uses Java executable to start the network server as shown below&lt;br/&gt;
java -Dderby.system.home=homeDir org.apache.derby.drda.NetworkServerControl -pPortNumber -noSecurityManager start&lt;br/&gt;
9)After issuing this command, the test makes an attempt to ping the server and this is where the test has failed intermittently. None of the other way of attempting to start and ping the server ever run into intermittent Insufficient Data failure issue. All the intermittent failures have been after starting the server using Java executable. It appears that while doing protocol handshake with the server during the ping call, client side runs into Insufficient Data(normally this error means that client was expecting more data from server but instead it got end of data signal from the server. I hope my understanding of Insufficient Data is correct). And this error is just printed on the console and no error is thrown and ttestSetPortPriority continues with the rest of the testing. The rest of the test is as follows.&lt;br/&gt;
10)It issues another Java executable command to shutdown the server started in step 8). It pings the server to see if it is still up but the ping command returns false.&lt;br/&gt;
11)Next, it shuts down server started in step 7). It passes the port number to NetworkServerControl. It pings the server to see if it ia still up but the ping command returns false.&lt;br/&gt;
12)Next, it shuts down server started in step 6). It passes the port number using system property derby.drda.portNumber. After shutdown, it removes the system property derby.drda.portNumber. It pings the server to see if it is still up but the ping command returns false.&lt;br/&gt;
13)Next, it shuts down server started in step 4). It passes the port number using derby.properties file. It pings the server to see if it is still up but the ping command returns false. It removes the derby.properties file after this shutdown.&lt;br/&gt;
14)Next, it shuts down the only remaining network server instance which was started in step 2). It pings the server to see if it is still up but the ping command returns false. It removes the derby.properties file after this shutdown.&lt;/p&gt;

&lt;p&gt;Hopefully, the above explanation of the test fixture is helpful. If I have missed anything in my understanding, please correct me.&lt;/p&gt;

&lt;p&gt;I am not sure why we get intermittent insufficient data when the network server is started using Java executable rather than direct calls to instantiate NetworkServerControl in the test harness. One assumption could be that by the time we find an available port and use that port in Java executable command to start the server, the port is not available any more on slow machines. But in that case, should we be getting insufficient data? May be we can add some diagnostic information to the test after starting a Java executable server to see if Java executable network server start resulted in any failure. We should also test after starting the server if the port is still available(indicating server never got started). May be shutdown of that server using Java executable actually fails but we never see the output from the Java executable command. We should also find out if we can get output from the two Java executable calls to start and stop the server to see if we missed any failures from those commands. I will start to see how to gather up results from Java executable. If there is anything else I should pursue, please let me know. Thanks&lt;/p&gt;</comment>
                            <comment id="13947560" author="mamtas" created="Wed, 26 Mar 2014 05:14:09 +0000"  >&lt;p&gt;Spent more time on this jira and I believe we should try to ping the server using Java command rather than using API when the server is started and later is being shut down using Java command. As mentioned above, the test is testing 5 ways of setting port while starting network server. 4 of these 5 tests use Network Server Control to start the network server and then we ping the server. These 4 test cases have not run into intermittent insufficient data error on ping. But the 5th test starts the network server using Java command and later that server is stopped using Java command but the ping on it is being done using Network Server Control rather than Java command. I think we should do the ping using Java command too. I am still not sure why Network Server Control ping would sometimes result into insufficient data.&lt;/p&gt;</comment>
                            <comment id="13956126" author="mamtas" created="Tue, 1 Apr 2014 06:29:51 +0100"  >&lt;p&gt;Attaching patch DERBY6337_patch1_diff.txt. It changes ttestSetPortPriority to use Java executable to ping and shutdown server which was started using Java executable. Earlier, the fixture was using NetworkServerControl api for ping and shutdown the server which was started using Java executable. If no one has objection to this change, I will go ahead and commit it in a day or two.&lt;/p&gt;</comment>
                            <comment id="13964408" author="mamtas" created="Wed, 9 Apr 2014 18:17:38 +0100"  >&lt;p&gt;I have spent past couple days trying to reproduce the problem on different machines but have not gotten it to fail again. In last 6years, the test has failed intermittently for about 5 times so probably not surprising that it is not reproducing that easily. I have been trying it on my Windows 7 laptop, a zOS machine and on a slow Windows 2003 machine and the test finishes without the DRDA_InvalidReplyTooShort.S stack trace from the ping of the server. Just to reiterate, the issue is when we start the network server as a Java executable from the test and then we ping it using Network Server Control api. All the intermittent failures were in the ping code. The other test cases in the test start the network server using Network Server Control api and use the same api to ping the server. It just looks like the Network Server started by Java executable is in some strange state which causes ping to receive end of data when it is expecting more from the server. I have put some simple debugging printlns in server code and test code on my codeline so I have more info when the test fails. Can&apos;t checkin definitely the server code printlns as it will cause all the other network server related tests to print all the unneeded additional info.&lt;/p&gt;</comment>
                            <comment id="13976364" author="mamtas" created="Tue, 22 Apr 2014 05:31:43 +0100"  >&lt;p&gt;I was able to reproduce the problem on my machine. Took lots of iterations before it failed. It actually failed two times so far intermittently. I had put some debug code and need to put some more before I fire the tests again. With my current debug code, I have found that the problem area of the test where it fails is after we shutdown the server using Java executable, the test pings it to see if the server is down as expected. The test uses pingForServerUp() method in helper class junit.NetworkServerTestSetup to see if the server is down. pingForServerUp() method keeps pinging the server for upto 60 seconds to see if the server is down. In that 60 seconds time period, ping to server may indicate the server is still up since ping won&apos;t throw any exception. But as soon as ping to server gets an exception &quot;DRDA_NoIO.S:Could not connect to Derby Network Server on host ... : Connection refused: &quot;, the method will return saying the server is down. But if the ping gets any other exception, method will print that exception&apos;s stack trace on the console and it will return saying the server is down. In  the intermittent case, ping rather than getting exception &quot;DRDA_NoIO.S:Could not connect to Derby Network Server on host ... : Connection refused: &quot;, it gets &quot;java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.&quot;. So, in either exception case, I guess the test is assuming that the server is down, its just that it expected to get &quot;DRDA_NoIO.S:Could not connect to Derby Network Server on host ... : Connection refused: &quot; rather than &quot;java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.&quot;. I will put more debugging info on the server side when the server is shutting down to see if it can show any light on why client might be getting insufficient data exception rather than connection refused exception.&lt;/p&gt;</comment>
                            <comment id="13976483" author="knutanders" created="Tue, 22 Apr 2014 08:28:16 +0100"  >&lt;p&gt;The &quot;insufficient data&quot; error indicates that the ping command was able to connect to the server, but didn&apos;t get a full response back from it. I suppose that it might happen if the server shutdown is completed after the ping command has connected to it and before the response has been sent back.&lt;/p&gt;</comment>
                            <comment id="13977728" author="mamtas" created="Wed, 23 Apr 2014 02:58:17 +0100"  >&lt;p&gt;Thanks Knut. It looks like then to resolve the intermittent failure, we should have the ping accept &quot;insufficient data&quot; error exception as an acceptable exception like it already accepts &quot;DRDA_NoIO.S:Could not connect to Derby Network Server on host ... : Connection refused: &quot; exception. &lt;/p&gt;</comment>
                            <comment id="13977940" author="knutanders" created="Wed, 23 Apr 2014 08:34:57 +0100"  >&lt;p&gt;Yes, I think that sounds like a reasonable solution for this issue.&lt;/p&gt;</comment>
                            <comment id="13991103" author="mamtas" created="Tue, 6 May 2014 21:42:33 +0100"  >&lt;p&gt;Attaching patch DERBY6337_patch1_diff.txt.&lt;/p&gt;

&lt;p&gt;Basically the issue is that sometimes when server is shutting down and a ping is sent to it, ping might be able to connect to server but before the hand shake can be successful, the server might shutdown thus resulting in ping receiving a DRDA_InvalidReplyTooShort. This is probably why the test in this issue fails intermittently. To work around the issue, I am proposing that if ping does run into DRDA_InvalidReplyTooShort.S:Invalidreply, we should send another ping after waiting for a little wait, and this time around we should get expected can&apos;t connect to server exception.&lt;/p&gt;

&lt;p&gt;I ran the test many times on my machine and it finally ran into DRDA_InvalidReplyTooShort but subsequent ping found the server to be down. I had put a println in my environment to do this testing. &lt;/p&gt;

&lt;p&gt;Please let me know if there is any feedback on this approach. I will plan on committing it in next couple days if there is no feedback on the patch. Thanks&lt;/p&gt;</comment>
                            <comment id="13991119" author="mamtas" created="Tue, 6 May 2014 21:57:55 +0100"  >&lt;p&gt;Attaching another patch DERBY6337_patch2_diff.txt. It is same as the earlier patch but I have removed the println from the earlier patch. &lt;/p&gt;</comment>
                            <comment id="13991299" author="myrna" created="Wed, 7 May 2014 00:01:18 +0100"  >&lt;p&gt;The problem is not just that we see sometimes hit this situation and needed an explanation, but also that we see a stack trace to the console, even when this is an acceptable return.&lt;/p&gt;

&lt;p&gt;If I am reading the patch correctly the stack trace will &lt;b&gt;still&lt;/b&gt; be printed - this needs to be prevented.&lt;/p&gt;</comment>
                            <comment id="13992545" author="mamtas" created="Thu, 8 May 2014 07:22:44 +0100"  >&lt;p&gt;Hi Myrna, thanks for reviewing the patch. &lt;/p&gt;

&lt;p&gt;With the new patch, chances of us running into this issue and printing the stack trace should be extremely unlikely. The patch waits for some time after receiving the reply too short exception and send a ping back to the server and this time we should get server down message. But in the rare case that we get reply too short exception again, then we will pint the stack trace.&lt;/p&gt;

&lt;p&gt;I ran junit suite and derbyall with these changes. junit ran fine with no new errors. derbyall gave errors for simpleApp as shown below. But I am getting this error in simpleApp consistently even without my changes. I will go ahead and create a jira for this simpleApp failure. There is no derby.log for this failure probably because Derby engine was never started because of no suitable driver error. Not sure why the test is running into no suitable driver error though. I will go ahead and commit my changes for this issue. Thanks&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/simpledemo/SimpleApp.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: SimpleApp jdk1.6.0 derbyall:simpledemo 2014-05-07 17:21:18 ***&lt;br/&gt;
2 del&lt;br/&gt;
&amp;lt; Connected to and created database derbyDB&lt;br/&gt;
3 del&lt;br/&gt;
&amp;lt; Created table location&lt;br/&gt;
4 del&lt;br/&gt;
&amp;lt; Inserted 1956 Webster&lt;br/&gt;
5 del&lt;br/&gt;
&amp;lt; Inserted 1910 Union&lt;br/&gt;
6 del&lt;br/&gt;
&amp;lt; Updated 1956 Webster to 180 Grand&lt;br/&gt;
7 del&lt;br/&gt;
&amp;lt; Updated 180 Grand to 300 Lakeshore&lt;br/&gt;
8 del&lt;br/&gt;
&amp;lt; Verified the rows&lt;br/&gt;
9 del&lt;br/&gt;
&amp;lt; Dropped table location&lt;br/&gt;
10 del&lt;br/&gt;
&amp;lt; Committed the transaction&lt;br/&gt;
11 del&lt;br/&gt;
&amp;lt; Derby shut down normally&lt;br/&gt;
11a2,5&lt;br/&gt;
&amp;gt; ----- SQLException -----&lt;br/&gt;
&amp;gt;   SQL State:  08001&lt;br/&gt;
&amp;gt;   Error Code: 0&lt;br/&gt;
&amp;gt;   Message:    No suitable driver&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   SimpleApp jdk1.6.0 derbyall:simpledemo 2014-05-07 17:21:19 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13997110" author="jira-bot" created="Wed, 14 May 2014 01:34:38 +0100"  >&lt;p&gt;Commit 1594435 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1594435&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1594435&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6337&quot; title=&quot;derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception  java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6337&quot;&gt;&lt;del&gt;DERBY-6337&lt;/del&gt;&lt;/a&gt;(derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes)&lt;/p&gt;

&lt;p&gt;Basically the issue is that sometimes when server is shutting down and a ping is sent to it around the same time, ping might be able to connect to server but before the ping hand shake can complete, the server might shutdown thus resulting in the ping client receiving a DRDA_InvalidReplyTooShort. This is probably why the test in this issue fails intermittently. To fix the issue, if ping does run into DRDA_InvalidReplyTooShort.S:Invalidreply, we will send another ping after waiting for a little time, and this time around we should get expected can&apos;t connect to server exception because server is down by now.&lt;/p&gt;</comment>
                            <comment id="14004425" author="mamtas" created="Wed, 21 May 2014 07:55:39 +0100"  >&lt;p&gt;I am working on backporting the changes to 10.10. I do not plan to backport it to earlier codelines but it is safe to backport this change to earlier codelines.&lt;/p&gt;</comment>
                            <comment id="14005619" author="jira-bot" created="Thu, 22 May 2014 06:09:37 +0100"  >&lt;p&gt;Commit 1596749 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/branches/10.10&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1596749&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1596749&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6337&quot; title=&quot;derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception  java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6337&quot;&gt;&lt;del&gt;DERBY-6337&lt;/del&gt;&lt;/a&gt;(derbynet.ServerPropertiesTest.ttestSetPortPriority prints exception java.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply f rom network server: Insufficient data. but test passes)&lt;/p&gt;

&lt;p&gt;Backporting changes from trunk to 10.10&lt;/p&gt;</comment>
                            <comment id="14284835" author="myrna" created="Wed, 21 Jan 2015 00:23:38 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12541899">DERBY-5610</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12643627" name="DERBY6337_patch1_diff.txt" size="2453" author="mamtas" created="Tue, 6 May 2014 21:42:33 +0100"/>
                            <attachment id="12638003" name="DERBY6337_patch1_diff.txt" size="6110" author="mamtas" created="Tue, 1 Apr 2014 06:29:51 +0100"/>
                            <attachment id="12643630" name="DERBY6337_patch2_diff.txt" size="2304" author="mamtas" created="Tue, 6 May 2014 21:57:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Mar 2014 21:26:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>347103</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzhp4f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>347402</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>