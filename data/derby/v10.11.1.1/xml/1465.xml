<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:36:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1465/DERBY-1465.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1465] NetworkServerControl.start() should throw an exception and not just  print  exceptions  if the server fails to start</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1465</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;NetworkServerControl.start()  will not throw an exception  if another server is already running on the same port.    I am not sure but think perhaps this was changed at  one point to accomodate the derby.drda.startNetworkServer property  so that the embedded server could continue to boot even if the network server failed to start, but  I think this is wrong for normal usage.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Questions-about-Network-Server-API-Behavior-p5055814.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Questions-about-Network-Server-API-Behavior-p5055814.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12345203">DERBY-1465</key>
            <summary>NetworkServerControl.start() should throw an exception and not just  print  exceptions  if the server fails to start</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="myrna">Myrna van Lunteren</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jun 2006 21:17:12 +0100</created>
                <updated>Mon, 9 Nov 2009 19:57:08 +0000</updated>
                            <resolved>Mon, 9 Nov 2009 19:57:08 +0000</resolved>
                                    <version>10.1.2.1</version>
                                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12418481" author="johnemb" created="Thu, 29 Jun 2006 22:50:41 +0100"  >&lt;p&gt;The relationship between the Network Server API and the derby.drda.startNetworkServer property (and its related functionality) is indeed puzzling. See my comment to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt; (June 16th), particularly observation b), for another example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1326#action_12416494&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1326#action_12416494&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12497621" author="kmarsden" created="Mon, 21 May 2007 23:55:42 +0100"  >&lt;p&gt;Attached is a patch for this issue.  I ran derbynetclientmats, derbynetmats and suites.All.&lt;br/&gt;
I am a little unsure about this patch.  I wait only 5 seconds for any error to occur on startup.  It will catch the most common error that there is already another server on the same port, but still the server can&apos;t be verified as up until ping is successful.   I&apos;ll submit another patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1467&quot; title=&quot;It would be useful to have a NetworkServerControl start  API that took a timeout parameter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1467&quot;&gt;DERBY-1467&lt;/a&gt; which allows a timeout to be specified.  That seems the preferred way to go.&lt;/p&gt;

</comment>
                            <comment id="12497924" author="kmarsden" created="Tue, 22 May 2007 17:37:18 +0100"  >&lt;p&gt;The patch attached has a conflict with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2671&quot; title=&quot;Errors/messages early in starting the network server through NetworkServerControl.start() are not reported to the PrintWriter passed into start().&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2671&quot;&gt;&lt;del&gt;DERBY-2671&lt;/del&gt;&lt;/a&gt;, so needs to be redone.  Ignore the patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1465&quot; title=&quot;NetworkServerControl.start() should throw an exception and not just  print  exceptions  if the server fails to start&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1465&quot;&gt;&lt;del&gt;DERBY-1465&lt;/del&gt;&lt;/a&gt;_diff.txt&lt;/p&gt;
</comment>
                            <comment id="12497984" author="kmarsden" created="Tue, 22 May 2007 21:13:30 +0100"  >&lt;p&gt;Patch for this issue.  start() will now wait until the server has been started.  It will wait until just before the server started message prints to return and will throw an exception if one occurred. One possible problem with the existing.  One possible problem with the existing code is that it prints &quot;server started&quot; before launching the client thread.  If that needs to be moved, I will log it as a separate issue.&lt;/p&gt;

&lt;p&gt;derbynetmats, derbynetclientmats and suites.All passed.&lt;br/&gt;
I&apos;ll commit this late today if I hear no comments, but I would appreciate if someone would take a look.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12498044" author="kmarsden" created="Tue, 22 May 2007 23:35:24 +0100"  >&lt;p&gt;Committed revision 540779&lt;/p&gt;</comment>
                            <comment id="12498051" author="djd" created="Wed, 23 May 2007 00:00:46 +0100"  >&lt;p&gt;Should the thread you create via this start method be a daemon thread? I couldn&apos;t really tell either way from the diff.&lt;/p&gt;

&lt;p&gt;Is it possible to add some comments to the code you added while it&apos;s fresh in your mind? At least on the&lt;br/&gt;
serverStartComplete variable and its wait/notify. Give future readers some clue as to what is going on. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12498057" author="kmarsden" created="Wed, 23 May 2007 00:15:23 +0100"  >&lt;p&gt;Thanks Dan for looking.&lt;/p&gt;

&lt;p&gt;I don&apos;t think it should be a daemon thread if I understand the concept of a daemon thread correctly.  I don&apos;t want the jvm to exit while this thread is running.   I&apos;ll add comments for serverStartComplete.&lt;/p&gt;
</comment>
                            <comment id="12498058" author="djd" created="Wed, 23 May 2007 00:33:06 +0100"  >&lt;p&gt;Could you also explain the lifetime of this new thread then?&lt;/p&gt;

&lt;p&gt;Does this change mean that starting the network server now has an extra Thread for the lifetime of the network server?&lt;/p&gt;

&lt;p&gt;Does it mean a change in behaviour where previously the JVM could exit but now it cannot until the network server is shutdown?&lt;/p&gt;</comment>
                            <comment id="12498061" author="kmarsden" created="Wed, 23 May 2007 00:53:50 +0100"  >&lt;p&gt;Dan asked:&lt;br/&gt;
&amp;gt;Could you also explain the lifetime of this new thread then?&lt;br/&gt;
&amp;gt;Does this change mean that starting the network server now has an extra Thread for the lifetime of the network server? &lt;/p&gt;

&lt;p&gt;No.  We used to start with DRDAServerStarter which made a thread to start network server. Now NetworkServerControl&lt;/p&gt;

&lt;p&gt;old:&lt;br/&gt;
NetworkServerControl.start() called DRDAServerStarter which started a thread calling blockingStart.  blockingStart would log any exceptions.&lt;/p&gt;

&lt;p&gt;new:&lt;br/&gt;
NetworkServerControl.start() creates its own thread calling blockingStart and throws any exceptions that occur during the startup phase.  To determine the end of the startup phase it waits on serverStartComplete. &lt;br/&gt;
If start is  successful ...&lt;br/&gt;
 When blockingStart gets to the point that it would print the server is up, it notifies serverStartComplete so the start method can return or throw any exception that occurred and waits to be shutdown.&lt;/p&gt;

&lt;p&gt;If start fais....&lt;br/&gt;
blockingStart will throw an exception, notify serverStartComplete  and the thread will end.&lt;/p&gt;
</comment>
                            <comment id="12498068" author="djd" created="Wed, 23 May 2007 02:04:41 +0100"  >&lt;p&gt;The old thread was started as a daemon thread, in derby&apos;s daemon thread group, but this new thread isn&apos;t (for either).&lt;/p&gt;

&lt;p&gt;I think Bryan was trying to clean up the code to start the network server, I wonder if that has progressed to be useable, because this is adding another mechanism to start the server in already confused code.&lt;/p&gt;

&lt;p&gt;There are a couple of timing bugs in the wait code:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There is a chance the server can fail to start but the start method will not throw any exceptions.&lt;br/&gt;
This is because the waiter is notified before &apos;runtimeException&apos; is set, thus the waiter may see runtimeException as null and not throw an exception.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There is a chance the start() method will hang, if the spawned thread reaches the notifyAll() before the start() call reaches the wait().&lt;br/&gt;
   The standard way to avoid this is to include boolean state information, so that the sync calls are like:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;			synchronized (serverStartComplete) &lt;/p&gt;
{
                                completedBoot = true;
				serverStartComplete.notifyAll();
			}



&lt;p&gt;      		     synchronized(serverStartComplete)&lt;/p&gt;
{
                        while (!completedBoot )
		    	      serverStartComplete.wait();
		    }

&lt;p&gt;I wonder if the code could be modifed slightly to use the old thread, rather than creating a new thread ...&lt;/p&gt;</comment>
                            <comment id="12498084" author="kmarsden" created="Wed, 23 May 2007 03:37:37 +0100"  >&lt;p&gt;There are some issues with the change noted in Dan&apos;s comments.  Backing out the change and reopen until those can be resolved.&lt;/p&gt;</comment>
                            <comment id="12498287" author="kmarsden" created="Wed, 23 May 2007 17:31:42 +0100"  >&lt;p&gt;Dan said&lt;br/&gt;
&amp;gt;I think Bryan was trying to clean up the code to start the network server, I wonder if that has progressed to be &amp;gt;useable, because this is adding another mechanism to start the server in already confused code.&lt;/p&gt;

&lt;p&gt;I think actually it was Bernt who was working on rewriting NetworkServerControlImpl.  I agree that it makes sense to wait until that work is done and see if it perhaps resolves this issue.  My hope was to get it resolved for 10.3 because we already have a bunch of Network Server incompatible changes and if this is going to affect anyone, it is better to have one big hit with 10.3 instead of hitting users again with 10.4. Bernt do you ...&lt;br/&gt;
1) expect your rewrite of NetworkServerControlImpl to go in for 10.3?&lt;br/&gt;
2) think your changes will address this issue.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12498595" author="bernt" created="Thu, 24 May 2007 12:26:24 +0100"  >&lt;p&gt;1) I am not going to finish the rewrite of NetworkServerControlImpl for 10.3 (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2412&quot; title=&quot;Refactor NetworkServerControlImpl&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2412&quot;&gt;DERBY-2412&lt;/a&gt;). My approach to keep the internal code an chop the class into smaller pieces proved not to solve the basic problems. We need to rewrite some basic mechanisms (e.g. exception handling and reporting) first. I plan to do the rewrite for the next release.&lt;br/&gt;
2) Yes (or at least make it much easier to fix it).&lt;/p&gt;</comment>
                            <comment id="12498734" author="kmarsden" created="Thu, 24 May 2007 18:41:35 +0100"  >&lt;p&gt;Per Dan&apos;s recommendation, I think I will hold off on this issue until Bernt&apos;s changes go in.  Unassigning myself for now.&lt;/p&gt;</comment>
                            <comment id="12641992" author="myrna" created="Thu, 23 Oct 2008 00:02:33 +0100"  >&lt;p&gt;Since Bernt has now (see update to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2412&quot; title=&quot;Refactor NetworkServerControlImpl&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2412&quot;&gt;DERBY-2412&lt;/a&gt;) no plans to complete redesign of NetworkServerControlImpl, I was thinking it might make sense to revisit this issue.&lt;/p&gt;

&lt;p&gt;However, I am not sure about one of Dan&apos;s comments:&lt;br/&gt;
&quot; wonder if the code could be modifed slightly to use the old thread, rather than creating a new thread ... &quot;&lt;/p&gt;

&lt;p&gt;I can imagine DRDAServerStarter.boot(...) carrying an additional parameter to indicate whether to throw an exception or not, is that what was meant? Or is there another solution?&lt;/p&gt;</comment>
                            <comment id="12647120" author="myrna" created="Wed, 12 Nov 2008 23:36:11 +0000"  >&lt;p&gt;I&apos;m attaching a patch for this issue...&lt;br/&gt;
It&apos;s basically Kathey&apos;s latest patch, but with the synchronization changes suggested by Dan, and the Thread has been made a daemon thread.&lt;br/&gt;
There&apos;s also some extra comments.&lt;/p&gt;

&lt;p&gt;I tried to make DRDAServerStarter.boot carry an extra parameter, and based on that parameter, exceptions got thrown as well as logged, but the exception in the test (NSinSameJVMTest fixture testShutdown has a new test case) came from DRDAServerStarter.run (invocationException), which did not allow me to throw a standard exception. Also, I felt the code got more convoluted and expansive.&lt;/p&gt;

&lt;p&gt;Anyone have another suggestion on how to fix this, or how Dan&apos;s comment (&quot;maybe the code could be slightly modified to use the old thread&quot;) could be interpreted?&lt;/p&gt;</comment>
                            <comment id="12648375" author="myrna" created="Mon, 17 Nov 2008 22:10:01 +0000"  >&lt;p&gt;No suggestions/comments so far. &lt;br/&gt;
suites.All ran without failures. I plan to commit this tomorrow.&lt;/p&gt;</comment>
                            <comment id="12648611" author="myrna" created="Tue, 18 Nov 2008 14:36:34 +0000"  >&lt;p&gt;I committed the latest patch with revision 718616.&lt;/p&gt;

&lt;p&gt;Now - this issue has &apos;release note needed&apos; flagged, but I&apos;m not certain why&lt;br/&gt;
It does need to be in the release notes, of course, but does this need a special explanation? It seems to me, that either way, the server is not started (as it&apos;s already started), and we&apos;re still also printing the exceptions, so I have some trouble seeing how this could affect existing applications. Any thoughts?&lt;/p&gt;</comment>
                            <comment id="12648649" author="kmarsden" created="Tue, 18 Nov 2008 16:56:45 +0000"  >&lt;p&gt;Applications may have only been expecting exceptions when they ping the server to see if it is is up, not from start() since start would always succeed before.  Applications need to be prepared for an exception to be thrown from start().&lt;/p&gt;</comment>
                            <comment id="12648682" author="myrna" created="Tue, 18 Nov 2008 18:10:36 +0000"  >&lt;p&gt;Attaching a first attempt at a release note.&lt;/p&gt;</comment>
                            <comment id="12648683" author="myrna" created="Tue, 18 Nov 2008 18:12:55 +0000"  >&lt;p&gt;pretty much the same release note, but replace reference to NetworkServerControlImpl.start() with NetworkServerControl.start()&lt;/p&gt;</comment>
                            <comment id="12648782" author="kmarsden" created="Tue, 18 Nov 2008 22:19:19 +0000"  >&lt;p&gt;Release note looks fine to me.&lt;/p&gt;</comment>
                            <comment id="12649102" author="myrna" created="Wed, 19 Nov 2008 17:17:23 +0000"  >&lt;p&gt;I wanted to close this today, but I see in the nightlies that this has resulted in an intermittent failure - and with sun jdk 1.4.2, it&apos;s all over.&lt;br/&gt;
I&apos;ll investigate.&lt;/p&gt;</comment>
                            <comment id="12649448" author="myrna" created="Thu, 20 Nov 2008 19:10:08 +0000"  >&lt;p&gt;Attaching a patch that I think gets around the trouble the previous attempt caused in the nightly tests.&lt;/p&gt;

&lt;p&gt;However, I need to do some more research before I commit - I ran suites.All twice, once I got this failure:&lt;br/&gt;
--------------------------------&lt;br/&gt;
1) testStartStopManagementFromApplication(org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest)junit.framework.AssertionFailedError: expected:&amp;lt;4&amp;gt; but was:&amp;lt;6&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.startStopManagement(ManagementMBeanTest.java:76)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.testStartStopManagementFromApplication(ManagementMBeanTest.java:56)&lt;br/&gt;
--------------------------------&lt;br/&gt;
I think I get this intermittently, so this may be unrelated.&lt;br/&gt;
But once I got a hang after an error:&lt;br/&gt;
--------------------------------&lt;br/&gt;
testXAConnection used 0 ms EEjava.lang.Exception: DRDA_InvalidReplyTooShort.S:Invalid reply from network server: Insufficient data.&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.readResult(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.NetworkServerControlImpl.ping(Unknown Source)&lt;br/&gt;
	at org.apache.derby.drda.NetworkServerControl.ping(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerTestSetup.java:561)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerTestSetup.java:630)&lt;br/&gt;
	at org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp(NetworkServerTestSetup.java:191)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:18)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:116)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:172)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:138)&lt;br/&gt;
--------------------------------&lt;/p&gt;</comment>
                            <comment id="12652477" author="myrna" created="Tue, 2 Dec 2008 19:45:10 +0000"  >&lt;p&gt;Attaching another patch - it has only 2 differences vs. patch diff4;&lt;br/&gt;
1. setting runtimeException to null at the top of start (or the exception might not get cleared out)&lt;br/&gt;
2. add some comments&lt;/p&gt;</comment>
                            <comment id="12652479" author="myrna" created="Tue, 2 Dec 2008 19:50:54 +0000"  >&lt;p&gt;I have not seen the hang anymore on my own machine; however, it seems that since my check-in of November 18, tests are hanging regularly in nightlies on windows, see: &lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t understand the hang, so I don&apos;t have a solution...&lt;/p&gt;

&lt;p&gt;I have two approaches currently;&lt;br/&gt;
1. check in the latest patch&lt;br/&gt;
2. back out my first change&lt;/p&gt;

&lt;p&gt;Or is there someone who can spot a mistake in the (patch) code?&lt;/p&gt;</comment>
                            <comment id="12652511" author="olesolberg" created="Tue, 2 Dec 2008 21:12:42 +0000"  >&lt;p&gt;I am also seeing this, after November 18, on &lt;/p&gt;

&lt;p&gt;Red Hat Enterprise Linux AS release 4 (Nahant Update 3) 64bits&lt;br/&gt;
Linux 2.6.9-34.ELsmp #1 SMP Fri Feb 24 16:56:28 EST 2006 GNU/Linux&lt;br/&gt;
and&lt;br/&gt;
Solaris 10 5/08 s10x_u5wos_10 X86 64bits&lt;br/&gt;
SunOS 5.10 Generic_127128-11&lt;/p&gt;

&lt;p&gt;with&lt;br/&gt;
Sun Microsystems Inc.&lt;br/&gt;
java version &quot;1.5.0_14&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_14-b03)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.5.0_14-b03, mixed mode)&lt;/p&gt;

&lt;p&gt;See e.g.&lt;br/&gt;
&lt;a href=&quot;http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.10_i86pc-i386/722171-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/trunk15/jvm1.5/testing/testlog/SunOS-5.10_i86pc-i386/722171-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12652551" author="myrna" created="Tue, 2 Dec 2008 22:27:13 +0000"  >&lt;p&gt;I couldn&apos;t figure out off hand where the trouble is that causes the hang. Somehow, it seems there is no ClientThread running to handle the clients&apos; requests, and thus, the whole thing hangs - can&apos;t start a new server, can&apos;t connect to the current one, can&apos;t shut it down.&lt;/p&gt;

&lt;p&gt;I&apos;ve backed out the changes of revision 718616 with revision 722639.&lt;/p&gt;

&lt;p&gt;Sorry for all the trouble.&lt;/p&gt;</comment>
                            <comment id="12654796" author="knutanders" created="Tue, 9 Dec 2008 13:22:18 +0000"  >&lt;p&gt;I don&apos;t know why it hung, but since blockingStart() calls startNetworkServer() before the try/finally block, it&apos;s possible that an exception is thrown without completedBoot being set to true, which will leave the main thread waiting forever.&lt;/p&gt;

&lt;p&gt;It also looks like #718616 did not address this comment (by Dan):&lt;br/&gt;
&amp;gt;  - There is a chance the server can fail to start but the start method will not throw any exceptions.&lt;br/&gt;
&amp;gt; This is because the waiter is notified before &apos;runtimeException&apos; is set, thus the waiter may see runtimeException as null and not throw an exception.&lt;/p&gt;</comment>
                            <comment id="12656691" author="myrna" created="Mon, 15 Dec 2008 18:44:51 +0000"  >&lt;p&gt;Attaching a next iteration - &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1465&quot; title=&quot;NetworkServerControl.start() should throw an exception and not just  print  exceptions  if the server fails to start&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1465&quot;&gt;&lt;del&gt;DERBY-1465&lt;/del&gt;&lt;/a&gt;.diff6&lt;/p&gt;

&lt;p&gt;Dan&apos;s comment cited by Knut Anders:&lt;br/&gt;
&quot;There is a chance the server can fail to start but the start method will not throw any exceptions, because the waiter is notified before &apos;runtimeException&apos; is set, thus the waiter may see runtimeException as null and not throw an exception&quot;&lt;br/&gt;
was actually addressed by patch 4.&lt;br/&gt;
(patch 5 corrected the fact that the runtimeException never got set to null, so you&apos;d get that message all the time).&lt;/p&gt;

&lt;p&gt;Patch 6 I think addresses the second logic issue spotted by Knut Anders:&lt;br/&gt;
&quot;since blockingStart() calls startNetworkServer() before the try/finally block, it&apos;s possible that an exception is thrown without completedBoot being set to true, which will leave the main thread waiting forever&quot;&lt;br/&gt;
This is addressed by (simply) setting completedBoot to true when an error is encountered. &lt;/p&gt;

&lt;p&gt;I ran NSinSameTest withouth problems 50 times (this at one time would reproduce the hang occassionally). I ran suitesall 4 times on 2 different windows machines, and derbyall once, and I hit the following known problems:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-654&quot; title=&quot;unit/T_RawStoreFactory.unit fails with an assert failure in J2ME/CDC/FP&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-654&quot;&gt;&lt;del&gt;DERBY-654&lt;/del&gt;&lt;/a&gt;; derbyall: unit/T_RawStoreFactory.unit&lt;br/&gt;
&amp;lt; &amp;#8211; Unit Test T_RawStoreFactory finished&lt;br/&gt;
 2 add&lt;br/&gt;
 &amp;gt; There should be 0 observers, but we still have 1 observers.&lt;br/&gt;
&amp;gt; Shutting down due to unit test failure.&lt;br/&gt;
   (maybe this is a j9 technology issue rather than j2me).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3915&quot; title=&quot;ReplicationTests.ReplicationRun_Local_3_p3 failed with Expected SQLState&amp;#39;08004&amp;#39;, but got connection!&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3915&quot;&gt;&lt;del&gt;DERBY-3915&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
1) testReplication_Local_3_p3_StateNegativeTests&lt;br/&gt;
(org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3)&lt;br/&gt;
junit.framework.AssertionFailedError: Expected SQLState&apos;08004&apos;, but got connection!&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3689&quot; title=&quot;&amp;#39;PrivilegedActionException: javax.management.InstanceNotFoundException&amp;#39; in &amp;#39;*(VersionMBeanTest / NetworkServerMBeanTest)&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3689&quot;&gt;&lt;del&gt;DERBY-3689&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
1) testAttributeAccumulatedConnectionCount(org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest)&lt;br/&gt;
java.security.PrivilegedActionException: javax.management.InstanceNotFoundException: &lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3757&quot; title=&quot;&amp;#39;ASSERT FAILED transaction table has null entry when running new StressMultiTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3757&quot;&gt;&lt;del&gt;DERBY-3757&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
1) testStressMulti(org.apache.derbyTesting.functionTests.tests.multi.StressMultiTest)junit.framework.AssertionFailedError: &lt;br/&gt;
Caused by: &lt;br/&gt;
java.sql.SQLException: Java exception: &apos;ASSERT FAILED transaction table has null entry: &lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In addition, I got: &lt;br/&gt;
1) ttestSetPortPriority(org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest)&lt;br/&gt;
junit.framework.AssertionFailedError: failed to start server with port 1529&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.checkWhetherNeedToShutdown(ServerPropertiesTest.java:378)&lt;br/&gt;
I think this is probably the same as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3873&quot; title=&quot;Intermittent failures in &amp;#39;ttestSetPortPriority(o.a.dT.fT.tests.derbynet.ServerPropertiesTest)&amp;#39;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3873&quot;&gt;&lt;del&gt;DERBY-3873&lt;/del&gt;&lt;/a&gt;, or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2779&quot; title=&quot;10.2 derbynet/testProperties.java  test hangs when run against 10.3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2779&quot;&gt;&lt;del&gt;DERBY-2779&lt;/del&gt;&lt;/a&gt;, but because we now throw the Exception when the server doesn&apos;t start, we see the problem earlier. Which is exactly what this fix is intended to do.&lt;/p&gt;

&lt;p&gt;So I think this is ok now.&lt;/p&gt;

&lt;p&gt;Ready for review.&lt;/p&gt;</comment>
                            <comment id="12657045" author="knutanders" created="Tue, 16 Dec 2008 16:30:52 +0000"  >&lt;p&gt;In patch 6, completedBoot is set to true in the catch block in&lt;br/&gt;
startNetworkServer() after consolePropertyMessage() has been&lt;br/&gt;
called. If I understand the code in consolePropertyMessage()&lt;br/&gt;
correctly, it will in many cases throw an exception in addition to&lt;br/&gt;
printing a message to the console, in which case completedBoot is not&lt;br/&gt;
set to true. And I guess notifyAll() would have to be called there as&lt;br/&gt;
well.&lt;/p&gt;

&lt;p&gt;Should completedBoot also be reset when runtimeException is reset?&lt;/p&gt;

&lt;p&gt;Perhaps this is a more robust approach:&lt;/p&gt;

&lt;p&gt;  1) Remove the runtimeException instance variable, and don&apos;t set it&lt;br/&gt;
     in blockingStart()&lt;/p&gt;

&lt;p&gt;  2) Move the setting of completedBoot out of the finally block in&lt;br/&gt;
  blockingStart(), and don&apos;t set it in startNetworkServer(), so that&lt;br/&gt;
  it&apos;s only set if there was no error&lt;/p&gt;

&lt;p&gt;  3) Put this in the start() method:&lt;/p&gt;

&lt;p&gt;    completedBoot = false; // reset before we boot&lt;br/&gt;
    final Exception[] exceptionHolder = new Exception&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    .&lt;br/&gt;
    .&lt;br/&gt;
    .&lt;br/&gt;
    Thread t = new Thread(&quot;NetworkServerControl&quot;) {&lt;br/&gt;
        public void run() {&lt;br/&gt;
            try &lt;/p&gt;
{
                blockingStart(consoleWriter);
            }
&lt;p&gt; catch (Exception e) {&lt;br/&gt;
                synchronized (serverStartComplete) &lt;/p&gt;
{
                    exceptionHolder[0] = e;
                    serverStartComplete.notifyAll();
                }
&lt;p&gt;            }&lt;br/&gt;
        }&lt;br/&gt;
    };&lt;br/&gt;
    .&lt;br/&gt;
    .&lt;br/&gt;
    .&lt;br/&gt;
    t.start();&lt;br/&gt;
    // wait until the server has started successfully&lt;br/&gt;
    // or an error has been detected&lt;br/&gt;
    synchronized (serverStartComplete) {&lt;br/&gt;
        while (!completedBoot &amp;amp;&amp;amp; exceptionHolder&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; == null) &lt;/p&gt;
{
            serverStartComplete.wait();
        }
&lt;p&gt;    }&lt;br/&gt;
    if (!completedBoot) &lt;/p&gt;
{
        // boot was not successful, throw the exception
        throw exceptionHolder[0];
    }

&lt;p&gt;With this approach, we make the tracking of the exception simpler (all&lt;br/&gt;
exception handling is local to the start() method), and since&lt;br/&gt;
completedBoot is only set on successful boot, we don&apos;t need to track&lt;br/&gt;
down all error paths where it needs to be set.&lt;/p&gt;</comment>
                            <comment id="12657477" author="myrna" created="Wed, 17 Dec 2008 18:42:24 +0000"  >&lt;p&gt;Thanks for the suggestions.&lt;/p&gt;

&lt;p&gt;I implemented them with this latest patch.&lt;br/&gt;
I saw no new failures with this and no hangs.&lt;/p&gt;</comment>
                            <comment id="12658653" author="knutanders" created="Mon, 22 Dec 2008 20:29:59 +0000"  >&lt;p&gt;Thanks for making the changes, Myrna.&lt;/p&gt;

&lt;p&gt;I think the entire synchronization block, including the call to notifyAll(), should be moved out of the finally block along with the setting of completedBoot to true in blockingStart(). It&apos;s probably going to work without that change, but the setting of completedBoot and the call to notifyAll() belong together logically, so I think it would be clearer if they were located the same place in the code.&lt;/p&gt;

&lt;p&gt;Otherwise, the patch looks good to me.&lt;/p&gt;</comment>
                            <comment id="12658655" author="knutanders" created="Mon, 22 Dec 2008 20:40:10 +0000"  >&lt;p&gt;Just one tiny nit in the test. We have this code:&lt;/p&gt;

&lt;p&gt;+        } catch (Exception e) &lt;/p&gt;
{
+            assertTrue(e.getMessage().indexOf(&quot;java.net.BindException&quot;) &amp;gt; 1);
+        }

&lt;p&gt;Perhaps it&apos;s better with something like this (untested):&lt;/p&gt;

&lt;p&gt;catch (Exception e) {&lt;br/&gt;
    boolean ok = false;&lt;br/&gt;
    for (Throwable t = e; t != null; t = t.getCause()) {&lt;br/&gt;
        if (t instanceof java.net.BindException) &lt;/p&gt;
{
            ok = true;
            break;
        }
&lt;p&gt;    }&lt;br/&gt;
    if (!ok) &lt;/p&gt;
{
        throw e;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;The advantage is that we keep the original exception if it&apos;s not the one we expected, and that we don&apos;t depend on the contents of the message text (don&apos;t know, but it may perhaps vary between different JVMs).&lt;/p&gt;</comment>
                            <comment id="12659007" author="myrna" created="Wed, 24 Dec 2008 00:23:08 +0000"  >&lt;p&gt;I&apos;m still looking at the previous comment, but the last comment throws me for a loop.&lt;/p&gt;

&lt;p&gt;In the latest patch, using the exceptionHolder array as suggested and not using a global variable to hold the exception, we do not know what kind of exception it is in the start() method. So we can&apos;t actually check for the BindException class in the test, all we have there is a java.lang.Exception.&lt;/p&gt;

&lt;p&gt;When we use a global variable (we used runtimeException in earlier patches), and assign the Exception underlying the PrivilegedActionException at the top of the privilegedException block to it, then the cause of the Exception, at least  for IOExceptions (i.e. in the case of the java.net.BindException the test is forcing) is saved off. Like so:&lt;br/&gt;
		} catch (PrivilegedActionException e) {&lt;br/&gt;
			Exception e1 = e.getException();&lt;br/&gt;
			runtimeException = e1;&lt;/p&gt;

&lt;p&gt;I could reinstate the runtimeException, and in the start() method do some tomfoolery like:&lt;br/&gt;
                        if (runtimeException != null)&lt;br/&gt;
                            exceptionHolder&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = runtimeException;&lt;br/&gt;
                        else&lt;br/&gt;
                            exceptionHolder&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = e; &lt;br/&gt;
Then I can check for the bindException instance in the test...But that&apos;s reintroducing the global variable...&lt;br/&gt;
What is the better approach?&lt;br/&gt;
I do like the fact that with the global variable you can actually check for IOExceptions in the test (and thus app) code, gives more info/control...But maybe it&apos;s enough to have an Exception?&lt;/p&gt;</comment>
                            <comment id="12659110" author="knutanders" created="Wed, 24 Dec 2008 16:03:55 +0000"  >&lt;p&gt;Right, I assumed that the BindException was in the exception chain, but I see now that that&apos;s not the case. If we just want to preserve the exception in case it&apos;s an unexpected one in the test, we could simply do this and ignore that we don&apos;t really have a BindException in the chain:&lt;/p&gt;

&lt;p&gt;catch (Exception e) {&lt;br/&gt;
    if (e.getMessage().indexOf(&quot;java.net.BindException&quot;) == -1) &lt;/p&gt;
{
        throw e;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;As to the issue of preserving the original exception when a BindException (or any other exception) is thrown, I think the problem here is that consolePropertyMessage() only takes the message to print as an argument. Since it in many cases generates and throws a new exception, it should also take the underlying exception as an argument, and it should either re-throw it or put it in the chain with initCause() so that we preserve the stack trace of the root cause. It doesn&apos;t have to be fixed as part of this issue, but I think it would be worth fixing.&lt;/p&gt;</comment>
                            <comment id="12659141" author="myrna" created="Wed, 24 Dec 2008 18:48:04 +0000"  >&lt;p&gt;Yes, it would be better if consolePropertyMessage passed on the underlying Exception.&lt;/p&gt;

&lt;p&gt;I&apos;ll create one last patch modifying just the start and blockingStart methods and changing the test - then (after one more test cycle) commit that.&lt;/p&gt;

&lt;p&gt;I can then look into the consolePropertyMessage change - and will decide then whether to do it as part of this issue in a follow up commit or log a new issue.&lt;/p&gt;</comment>
                            <comment id="12659183" author="myrna" created="Thu, 25 Dec 2008 03:33:56 +0000"  >&lt;p&gt;uploading patch diff8, which addresses further comments, as discussed, in the start and blockingStart methods of NetworkServerControlImpl, and the NSinSameJVMTest, but doesn&apos;t try to modify consolePropertyMessage method.&lt;/p&gt;

&lt;p&gt;suites.all passed without mishap.&lt;/p&gt;</comment>
                            <comment id="12659316" author="knutanders" created="Sat, 27 Dec 2008 09:11:50 +0000"  >&lt;p&gt;diff8 looks fine to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12659585" author="myrna" created="Mon, 29 Dec 2008 16:36:02 +0000"  >&lt;p&gt;I committed diff8 with revision 729933. If no hangs are reported in a week I&apos;ll consider this part done...&lt;/p&gt;</comment>
                            <comment id="12659851" author="myrna" created="Tue, 30 Dec 2008 17:10:29 +0000"  >&lt;p&gt;Well, it seems there still is a hang.&lt;/p&gt;

&lt;p&gt;With ibm142 on another machine than where I ran my tests before, suites.All is hanging (it&apos;s been at it for about 11 hours, should take about 5 hours on this particular machine) - the test run seems wedged currently in testReplication_Local_existingTestsAsReplLoad.&lt;/p&gt;

&lt;p&gt;I&apos;ll back out my changes...(again). Apologies for the trouble.&lt;/p&gt;</comment>
                            <comment id="12661345" author="myrna" created="Tue, 6 Jan 2009 21:24:09 +0000"  >&lt;p&gt;On Dec 30, I also ran with ibm15 and ibm16 on the same machine, and although ibm16 ran through without trouble, the ibm15 run got wedged in StressMultiTest.&lt;/p&gt;</comment>
                            <comment id="12661347" author="myrna" created="Tue, 6 Jan 2009 21:29:55 +0000"  >&lt;p&gt;Attaching stack traces of the javacore dump I caused to be generated while the test was hanging in the replication test.&lt;/p&gt;

&lt;p&gt;The db_master dir had a derby.log in it with the following:&lt;br/&gt;
---------------------&lt;br/&gt;
2008-12-30 09:05:59.447 GMT : Could not listen on port 1527 on host 0.0.0.0:&lt;br/&gt;
 java.net.BindException: Address already in use: NET_Bind&lt;br/&gt;
---------------------&lt;/p&gt;

&lt;p&gt;This is probably one of the faster machines I run on...(2 cpu,  3.40 Ghz).&lt;/p&gt;</comment>
                            <comment id="12661373" author="myrna" created="Tue, 6 Jan 2009 23:32:56 +0000"  >&lt;p&gt;Attaching a java core dump of the test run that hung with ibm15. &lt;/p&gt;

&lt;p&gt;I only now noticed that there were a number (15 to 20) of Errors both with ibm142 and ibm15, starting with the fixture testGrantAndRevoke. But of course there is no list of these at the bottom of the output, because I killed the test run...&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no &apos;fail&apos; directory, not sure why not...&lt;/p&gt;</comment>
                            <comment id="12731917" author="myrna" created="Thu, 16 Jul 2009 13:19:06 +0100"  >&lt;p&gt;I think this issue was possibly blocked by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4053&quot; title=&quot;Network Server&amp;#39;s failure to rollback local transactions on shutdown can cause  hang on startup with message java.net.BindException: Address already in use: NET_Bind in derby.log &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4053&quot;&gt;&lt;del&gt;DERBY-4053&lt;/del&gt;&lt;/a&gt;, or perhaps &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4034&quot; title=&quot;Document database name  and attribute length and character set limitations for network client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4034&quot;&gt;&lt;del&gt;DERBY-4034&lt;/del&gt;&lt;/a&gt;, or the additional bind error and hang described in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4155?focusedCommentId=12731086&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12731086&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-4155?focusedCommentId=12731086&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12731086&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12768855" author="kmarsden" created="Thu, 22 Oct 2009 21:11:33 +0100"  >&lt;p&gt;I have been thinking about this issue which I filed back in Jan, 2006.  At the time it seemed to make sense, but now the compatibility risks seem significant, now that Derby has been out for years. I think by now folks have figured out that they need to ping the server to determine if it is up. If it now starts throwing an exception it might cause problems.&lt;/p&gt;

&lt;p&gt;I think Myrna&apos;s work on this issue has been valuable as it helped expose the issues mentioned in the previous comment, but I am beginning to think we should close this won&apos;t fix.  There had been talk about a new API for network server to replace the one that we have, if we do that then the exception on start issue can be taken under consideration.&lt;/p&gt;</comment>
                            <comment id="12775098" author="myrna" created="Mon, 9 Nov 2009 19:57:08 +0000"  >&lt;p&gt;Closing as won&apos;t fix after reporter&apos;s reconsidering.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12364338">DERBY-2412</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12393825" name="DERBY-1465.diff3" size="3984" author="myrna" created="Wed, 12 Nov 2008 23:36:11 +0000"/>
                            <attachment id="12394360" name="DERBY-1465.diff4" size="3680" author="myrna" created="Thu, 20 Nov 2008 19:10:08 +0000"/>
                            <attachment id="12395118" name="DERBY-1465.diff5" size="3974" author="myrna" created="Tue, 2 Dec 2008 19:45:10 +0000"/>
                            <attachment id="12396113" name="DERBY-1465.diff6" size="5673" author="myrna" created="Mon, 15 Dec 2008 18:44:51 +0000"/>
                            <attachment id="12396334" name="DERBY-1465.diff7" size="5052" author="myrna" created="Wed, 17 Dec 2008 18:42:24 +0000"/>
                            <attachment id="12396764" name="DERBY-1465.diff8" size="4841" author="myrna" created="Thu, 25 Dec 2008 03:33:56 +0000"/>
                            <attachment id="12357916" name="DERBY-1465_diff.txt" size="5501" author="kmarsden" created="Tue, 22 May 2007 21:13:29 +0100"/>
                            <attachment id="12357812" name="DERBY-1465_diff.txt" size="3620" author="kmarsden" created="Mon, 21 May 2007 23:55:42 +0100"/>
                            <attachment id="12357917" name="DERBY-1465_stat.txt" size="248" author="kmarsden" created="Tue, 22 May 2007 21:14:15 +0100"/>
                            <attachment id="12357813" name="DERBY-1465_stat.txt" size="316" author="kmarsden" created="Mon, 21 May 2007 23:57:56 +0100"/>
                            <attachment id="12397231" name="DERBY-1465hangibm142_12_29_08.txt" size="17347" author="myrna" created="Tue, 6 Jan 2009 21:29:55 +0000"/>
                            <attachment id="12397243" name="DERBY-1465hangibm15_12_29_08.txt" size="12940" author="myrna" created="Tue, 6 Jan 2009 23:32:56 +0000"/>
                            <attachment id="12394181" name="releaseNote.html" size="4315" author="myrna" created="Tue, 18 Nov 2008 18:12:55 +0000"/>
                            <attachment id="12394180" name="releaseNote.html" size="4307" author="myrna" created="Tue, 18 Nov 2008 18:10:36 +0000"/>
                            <attachment id="12357925" name="releaseNote.html" size="3311" author="kmarsden" created="Tue, 22 May 2007 21:53:15 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 29 Jun 2006 21:50:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22524</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0rmv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38295</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>