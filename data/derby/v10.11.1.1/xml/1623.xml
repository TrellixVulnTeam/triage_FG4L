<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:40:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1623/DERBY-1623.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1623] Add ANSI TRIM implementation</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1623</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;JPA is requiring databases to support this ANSI feature esp the ability to chose the trimmed character&lt;/p&gt;

&lt;p&gt;TRIM([ [ LEADING | TRAILING | BOTH ] [ chars ] FROM ] str)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12347086">DERBY-1623</key>
            <summary>Add ANSI TRIM implementation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mkhettry">Manish Khettry</assignee>
                                    <reporter username="epbernard">Emmanuel Bernard</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Aug 2006 18:38:18 +0100</created>
                <updated>Fri, 21 Jan 2011 17:49:08 +0000</updated>
                            <resolved>Wed, 13 Jun 2007 18:11:00 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                                                            <comments>
                            <comment id="12428830" author="steve.ebersole@jboss.com" created="Fri, 18 Aug 2006 00:31:48 +0100"  >&lt;p&gt;FWIW, an ANSI SQL compliant TRIM function would be fabulous.  But even a REPLACE function would allow JPA providers to emulate the ANSI SQL TRIM functionality.  Right now in Hibernate, for example, we emulate this on SQL Server and Sybase because neither support the full TRIM definition, but each do support LTRIM, RTRIM, and REPLACE which we use to achieve this emulation.&lt;/p&gt;</comment>
                            <comment id="12483146" author="djd" created="Thu, 22 Mar 2007 13:46:14 +0000"  >&lt;p&gt;I assume the purpose of the issue is to add the feature, not just sit around and &quot;consider&quot; it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12484245" author="mkhettry" created="Mon, 26 Mar 2007 23:18:07 +0100"  >&lt;p&gt;I&apos;m thinking of adding an optional argument to the existing LTRIM and RTRIM functions. This will be a string literal and is basically the set of chars to trim.&lt;/p&gt;

&lt;p&gt;RTRIM(&apos;abcxyzxx&apos;, &apos;zyx&apos;) =&amp;gt; abc.&lt;/p&gt;

&lt;p&gt;Also a new function TRIM with the same arguments as L/R TRIM which trims both leading and trailing characters. If anyone has any thoughts let me know.&lt;/p&gt;


</comment>
                            <comment id="12484255" author="army" created="Mon, 26 Mar 2007 23:56:38 +0100"  >&lt;p&gt;&amp;gt; I&apos;m thinking of adding an optional argument to the existing LTRIM and RTRIM functions. This will&lt;br/&gt;
&amp;gt; be a string literal and is basically the set of chars to trim. &lt;/p&gt;

&lt;p&gt;I&apos;m assuming this new functionality is defined by the SQL standard, but I&apos;m not familiar enough with said standard to find it (I couldn&apos;t even find LTRIM or RTRIM).  Can you point me to the relevant sections of the relevant spec?  Sorry for my ignorance here...&lt;/p&gt;</comment>
                            <comment id="12484256" author="mkhettry" created="Tue, 27 Mar 2007 00:07:54 +0100"  >&lt;p&gt;Its pretty much in the description of this bug. I found this as well  &lt;a href=&quot;http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="12484354" author="bernt" created="Tue, 27 Mar 2007 09:43:23 +0100"  >&lt;p&gt;The SQL 2003 standard defines the TRIM function like this:&lt;/p&gt;

&lt;p&gt;&amp;lt;trim function&amp;gt; ::= TRIM &amp;lt;left paren&amp;gt; &amp;lt;trim operands&amp;gt; &amp;lt;right paren&amp;gt;&lt;br/&gt;
&amp;lt;trim operands&amp;gt; ::= [ [ &amp;lt;trim specification&amp;gt; ] [ &amp;lt;trim character&amp;gt; ] FROM ] &amp;lt;trim source&amp;gt;&lt;br/&gt;
&amp;lt;trim source&amp;gt; ::= &amp;lt;character value expression&amp;gt;&lt;br/&gt;
&amp;lt;trim specification&amp;gt; ::= LEADING | TRAILING | BOTH&lt;br/&gt;
&amp;lt;trim character&amp;gt; ::= &amp;lt;character value expression&amp;gt;&lt;/p&gt;

&lt;p&gt;Note that the LTRIM/RTRIM functions are defined in the JDBC spec as scalar string functions that a JDBC driver should support as escaped function calls:   &lt;/p&gt;
{fn LTRIM(....)}
&lt;p&gt; etc.&lt;/p&gt;

&lt;p&gt;I think the most proper solution here is to implement the SQL TRIM function, and keep LTRIM/RTRIM as is, as specified in the JDBC spec (for upward compatability, the escape syntax should not be required).&lt;/p&gt;</comment>
                            <comment id="12484362" author="bernt" created="Tue, 27 Mar 2007 10:02:06 +0100"  >&lt;p&gt;BTW: This is feature E021-09 (See &lt;a href=&quot;http://wiki.apache.org/db-derby/SQLvsDerbyFeatures&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/SQLvsDerbyFeatures&lt;/a&gt; )&lt;/p&gt;</comment>
                            <comment id="12484479" author="army" created="Tue, 27 Mar 2007 16:16:10 +0100"  >&lt;p&gt;Thank you, Bernt, that&apos;s what I was looking for (esp. the part about LTRIM and RTRIM).&lt;/p&gt;</comment>
                            <comment id="12484510" author="mkhettry" created="Tue, 27 Mar 2007 18:29:18 +0100"  >&lt;p&gt;Yes, I agree the better thing to do is to implement the sql standard and leave ltrim/rtrimalone. &lt;/p&gt;

&lt;p&gt;I don&apos;t have ready access to the sql standard so I&apos;m a litlle unsure about the &amp;lt;trim character&amp;gt;. I&apos;m taking it as a string literal. Looking at this page, &lt;a href=&quot;http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html&lt;/a&gt;, it looks like, it is interpreted as a string that needs to be removed. i.e.&lt;/p&gt;

&lt;p&gt;trim(leading &apos;ab&apos; from &apos;bac&apos;) =&amp;gt; bac&lt;br/&gt;
trim(leading &apos;ba&apos; from &apos;bac&apos;) =&amp;gt; c&lt;/p&gt;

&lt;p&gt;and not as I&apos;d thought earlier a set of characters to be removed.&lt;/p&gt;
</comment>
                            <comment id="12484566" author="bernt" created="Tue, 27 Mar 2007 20:52:15 +0100"  >&lt;p&gt;The standard says (Ch. 6.29):&lt;/p&gt;

&lt;p&gt;Syntax Rules:&lt;/p&gt;

&lt;p&gt;  11) If &amp;lt;trim function&amp;gt; is specified, then&lt;br/&gt;
    a) Case:&lt;br/&gt;
      i) If FROM is specified, then:&lt;br/&gt;
        1) Either &amp;lt;trim specification&amp;gt; or &amp;lt;trim character&amp;gt; or both shall be specified.&lt;br/&gt;
        2) If &amp;lt;trim specification&amp;gt; is not specified, then BOTH is implicit.&lt;br/&gt;
        3) If &amp;lt;trim character&amp;gt; is not specified, then &apos; &apos; is implicit.&lt;br/&gt;
      ii) Otherwise, let SRC be &amp;lt;trim source&amp;gt;. TRIM ( SRC ) is equivalent to TRIM ( BOTH &apos; &apos; FROM SRC ).&lt;br/&gt;
    b) Case:&lt;br/&gt;
      i) If the declared type of &amp;lt;character value expression&amp;gt; is fixed-length character string or variablelength&lt;br/&gt;
         character string, then the declared type of the &amp;lt;trim function&amp;gt; is variable-length character&lt;br/&gt;
         string with maximum length equal to the fixed length or maximum variable length of the &amp;lt;trim&lt;br/&gt;
         source&amp;gt;.&lt;br/&gt;
      ii) Otherwise, the declared type of the &amp;lt;trim function&amp;gt; is a character large object type with maximum&lt;br/&gt;
          length equal to the maximum variable length of the &amp;lt;trim source&amp;gt;.&lt;br/&gt;
    c) If a &amp;lt;trim character&amp;gt; is specified, then &amp;lt;trim character&amp;gt; and &amp;lt;trim source&amp;gt; shall be comparable.&lt;br/&gt;
    d) The declared type of the &amp;lt;trim function&amp;gt; is that of the &amp;lt;trim source&amp;gt;.&lt;/p&gt;

&lt;p&gt;General Rules:&lt;br/&gt;
 9) If &amp;lt;trim function&amp;gt; is specified, then:&lt;br/&gt;
    a) Let S be the value of the &amp;lt;trim source&amp;gt;.&lt;br/&gt;
    b) If &amp;lt;trim character&amp;gt; is specified, then let SC be the value of &amp;lt;trim character&amp;gt;; otherwise, let SC be &amp;lt;space&amp;gt;.&lt;br/&gt;
    c) If either S or SC is the null value, then the result of the &amp;lt;trim function&amp;gt; is the null value.&lt;br/&gt;
    d) If the length in characters of SC is not 1 (one), then an exception condition is raised: data exception &#8212; trim error.&lt;br/&gt;
    e) Case:&lt;br/&gt;
      i) If BOTH is specified or if no &amp;lt;trim specification&amp;gt; is specified, then the result of the &amp;lt;trim function&amp;gt; is the value of S with any leading or trailing characters equal to SC removed.&lt;br/&gt;
      ii) If TRAILING is specified, then the result of the &amp;lt;trim function&amp;gt; is the value of S with any trailing characters equal to SC removed.&lt;br/&gt;
      iii) If LEADING is specified, then the result of the &amp;lt;trim function&amp;gt; is the value of S with any leading characters equal to SC removed.&lt;/p&gt;

&lt;p&gt;So we can safely assume that &amp;lt;trim character&amp;gt; is one character.&lt;/p&gt;

&lt;p&gt;Another clarification: Both &amp;lt;trim character&amp;gt; and &amp;lt;trim source&amp;gt; are &amp;lt;character value expression&amp;gt; which means they may be literals, expressions (e.g string functions, concatenations etc) or column refernces. Thus&lt;/p&gt;

&lt;p&gt;create table tt (v varchar(256), t varchar(10));&lt;br/&gt;
select TRIM(TRAILING t FROM v);&lt;/p&gt;

&lt;p&gt;is legal as long as that values of t is of length 1.&lt;/p&gt;

</comment>
                            <comment id="12484569" author="bernt" created="Tue, 27 Mar 2007 20:54:00 +0100"  >&lt;p&gt;The SQL example above should of course be:&lt;/p&gt;

&lt;p&gt;create table tt (v varchar(256), t varchar(10));&lt;br/&gt;
select TRIM(TRAILING t FROM v) FROM tt; &lt;/p&gt;</comment>
                            <comment id="12487668" author="mkhettry" created="Tue, 10 Apr 2007 02:15:19 +0100"  >&lt;p&gt;I have spent several days but I cannot seem to express the grammar for trim without warnings from JavaCC. The warning says: &lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Warning: Choice conflict involving two expansions at&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          line 6268, column 5 and line 6279, column 5 respectively.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          A common prefix is: &quot;leading&quot; &quot;+&quot;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          Consider using a lookahead of 3 or more for earlier expansion&lt;/p&gt;

&lt;p&gt;I&apos;ve included a skeleton of the production rules that I&apos;m using.  I&apos;m also not sure if additiveExpression is the right production to use in this case.&lt;/p&gt;

&lt;p&gt;ValueNode&lt;br/&gt;
ansiTrimProduction() throws StandardException :&lt;br/&gt;
{&lt;br/&gt;
}&lt;br/&gt;
{&lt;br/&gt;
    &amp;lt;LEADING&amp;gt; additiveExpression(null, 0, false)&lt;/p&gt;
    {
        return null;    //TODO obviously return a ValueNode when warnings are fixed.
    }
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;    LOOKAHEAD ( &amp;lt;LEADING&amp;gt; &amp;lt;FROM&amp;gt;)&lt;br/&gt;
    &amp;lt;LEADING&amp;gt; &amp;lt;FROM&amp;gt; additiveExpression(null,0,false)&lt;/p&gt;
    {
        return null;
    }    &lt;br/&gt;
|    &lt;br/&gt;
    &amp;lt;LEADING&amp;gt; additiveExpression(null,0,false) &amp;lt;FROM&amp;gt; additiveExpression(null,0,false)&lt;br/&gt;
    {
        return null;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;From reading the JavaCC documentation and this tutorial (&lt;a href=&quot;https://javacc.dev.java.net/doc/lookahead.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://javacc.dev.java.net/doc/lookahead.html&lt;/a&gt;) it seems the parser does not which production (the first or the third) to take when it reads a token like &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Using a fixed lookahead to disambiguate between the two productions is not possible in this case. For now, I&apos;m sort of stuck at this point. Any ponters would be appreciated.&lt;/p&gt;</comment>
                            <comment id="12487714" author="fuzzylogic" created="Tue, 10 Apr 2007 09:24:16 +0100"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;I took a stab at implementing the TRIM grammar that Bernt described. This generates a valid grammar via javacc, but only because the call to columnReference in the new characterValueExpression is commented out. Uncommented, that generates the following error:&lt;/p&gt;

&lt;p&gt;     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Warning: Choice conflict involving two expansions at&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          line 6183, column 5 and line 6188, column 5 respectively.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          A common prefix is: &quot;ucase&quot;&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt;          Consider using a lookahead of 2 for earlier expansion.&lt;/p&gt;

&lt;p&gt;so some work would be needed to disambiguate characterValueFunction and columnReference.&lt;/p&gt;

&lt;p&gt;And of course, execution is an entirely separate matter, but I thought this might give you some food for thought.&lt;/p&gt;</comment>
                            <comment id="12487717" author="fuzzylogic" created="Tue, 10 Apr 2007 09:38:10 +0100"  >&lt;p&gt;Adding LOOKAHEAD(2) before characterValueFunction in characterValueExpression does resolve the ambiguous &apos;ucase&apos;, reattaching my parser diff with that lookahead added.&lt;/p&gt;</comment>
                            <comment id="12488822" author="mkhettry" created="Sat, 14 Apr 2007 01:11:32 +0100"  >&lt;p&gt;Andrew&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to take a look at this. I took your grammar and wrote some unit tests for it (only the parsing part). I&apos;ve attached the Test. As you can see, the characterValueExpression production does not cover all the cases which can apply to trimCharacter or trimSource.&lt;/p&gt;

&lt;p&gt;Second, I was trying to make the tokens LEADING/TRAILING/BOTH as non reserved keyword. I&apos;m not sure if that is going possible. For example in a query like:&lt;/p&gt;

&lt;p&gt;select LEADING from col. &lt;/p&gt;

&lt;p&gt;is LEADING a trimspec or is it a column name? The problem with making these reserved keywords is that it may break existing code.&lt;/p&gt;

&lt;p&gt;I will spend more time when its available to working on this-- if anyone else has thoughts on how to come up with an unambiguous grammar, please do jump in.&lt;/p&gt;</comment>
                            <comment id="12488823" author="mkhettry" created="Sat, 14 Apr 2007 01:13:01 +0100"  >&lt;p&gt;Unit test for parsing trim expressions.&lt;/p&gt;</comment>
                            <comment id="12488848" author="fuzzylogic" created="Sat, 14 Apr 2007 06:01:09 +0100"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;SQL99 does list LEADING, TRAILING, and BOTH as reserved words. Also, I don&apos;t think that making them non-reserved keywords is going to be possible with the current parser implementation, since if you place them in the non-reserved list, you will necessarily get a conflict between the first token (in my suggestion, from ansiTrimType()) and the expansion of the non-optional token - in my example, characterValueExpression() - which can be a columnReference and thus just an identifier. The rule for identifiers currently includes the list of non-reserved keywords, which I suspect would lead to a conflict in any implementation which checks non-reserved keywords against identifiers. While there is a possibility for impact to existing applications, I&apos;m wondering how serious the impact would be since the SQL99 standard has the keywords in question listed as reserved.&lt;/p&gt;

&lt;p&gt;As for the case expression not working, it doesn&apos;t appear that SQL99 includes case expressions in &amp;lt;character value expression&amp;gt; or &amp;lt;character value function&amp;gt;, but it is very likely that I&apos;m missing something in the spec. If such expressions in column references are allowed, and this is something other databases support, we should give it consideration.&lt;/p&gt;

&lt;p&gt;I&apos;d love to hear more feedback, and I&apos;ll dig some more into the standards to see what I can find.&lt;/p&gt;</comment>
                            <comment id="12488871" author="mkhettry" created="Sat, 14 Apr 2007 17:02:10 +0100"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;I am going by snippets of the spec posted in this bug. I did take &amp;lt;character value expression&amp;gt; to mean any expression that yields a char/varchar/clob value. I also tried a few queries in mysql which did accept case and other expressions. Does DB2 accept them as well?&lt;/p&gt;</comment>
                            <comment id="12488898" author="fuzzylogic" created="Sat, 14 Apr 2007 23:13:32 +0100"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;You are of course correct, any expression that returns a character data type is allowed. I just couldn&apos;t find it in the few minutes that I took last night to look in the spec. Found it today, the relevant portion is:&lt;/p&gt;

&lt;p&gt;&amp;lt;character value expression&amp;gt; ::=&lt;br/&gt;
&amp;lt;concatenation&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;character factor&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&amp;lt;character factor&amp;gt; ::=&lt;br/&gt;
&amp;lt;character primary&amp;gt; [ &amp;lt;collate clause&amp;gt; ]&lt;/p&gt;

&lt;p&gt;&amp;lt;character primary&amp;gt; ::=&lt;br/&gt;
&amp;lt;value expression primary&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;string value function&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;and valueExpressionPrimary() in the parser covers everything necessary here. I expected to be able to replace characterValueExpression() with:&lt;/p&gt;

&lt;p&gt;ValueNode&lt;br/&gt;
characterValueExpression() throws StandardException:&lt;/p&gt;
{
    ValueNode expr;
}
&lt;p&gt;{&lt;br/&gt;
    LOOKAHEAD(2)&lt;br/&gt;
    expr = valueExpressionPrimary(false)&lt;/p&gt;
    {
        return expr;
    }&lt;br/&gt;
|&lt;br/&gt;
    expr = characterValueFunction() &lt;br/&gt;
    {
        return expr;
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;JavaCC does not complain about this, but generates an invalid grammar: you get a compile error because JavaCC split the parse tree for the subquery choice of valueExpressionPrimary but failed to push the inSelectClause boolean that was a part of the valueExpressionPrimary declaration into the new node. JavaCC bug? Not sure, i&apos;ll investigate later.&lt;/p&gt;</comment>
                            <comment id="12488917" author="fuzzylogic" created="Sun, 15 Apr 2007 07:05:17 +0100"  >&lt;p&gt;The compile error I mentioned in the last comment may be a JavaCC bug, attaching a simplified grammar which reproduces the compile error mentioned in the previous comment. It takes some effort to be able to subscribe / post to their mailing list, so it might be a few days before I can confirm with them this is really a JavaCC bug - or, more likely, my bad grammar &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; - and work with them on a workaround or fix.&lt;/p&gt;</comment>
                            <comment id="12488923" author="fuzzylogic" created="Sun, 15 Apr 2007 08:02:20 +0100"  >&lt;p&gt;Posted to the javacc users list concerning the compile error when using semantic lookahead. I&apos;ll copy any feedback I get here.&lt;/p&gt;</comment>
                            <comment id="12490680" author="mkhettry" created="Sun, 22 Apr 2007 04:59:29 +0100"  >&lt;p&gt;I think this grammar would work. What do you think Andrew?&lt;/p&gt;</comment>
                            <comment id="12490686" author="fuzzylogic" created="Sun, 22 Apr 2007 08:07:56 +0100"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;Sorry I didn&apos;t have time to come back to this sooner. Your new grammar looks great. It avoids the multiple levels of lookahead into valueExpressionPrimary that led to the compile error that I was seeing, and I tried throwing numerous malformed and properly formed trim statements at it and everything worked pretty much as expected, including statements with dynamic parameters and subqueries. I didn&apos;t come close to trying out all the possible paths through valueExpressionPrimary, but all the obvious ones were fine. &lt;/p&gt;

&lt;p&gt;I did notice that the following did not parse:&lt;/p&gt;

&lt;p&gt;select v from t where TRIM(v) = TRIM(c)&lt;/p&gt;

&lt;p&gt;where other similar statements such as:&lt;/p&gt;

&lt;p&gt;select v from t where TRIM(v) = c&lt;br/&gt;
select v from t where v = TRIM(LEADING FROM c)&lt;/p&gt;

&lt;p&gt;parsed ok. I haven&apos;t looked at it any further than throwing a bunch of different statements at it, this might be something to come back and investigate at a later date.&lt;/p&gt;</comment>
                            <comment id="12490737" author="mkhettry" created="Sun, 22 Apr 2007 17:05:53 +0100"  >&lt;p&gt;Thanks Andrew-- if you have those queries saved up, it would be a good starting point for writing tests. BTW, I did try this query and it came back with a NPE which is a good thing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select v from t where TRIM(v) = TRIM(c)&lt;br/&gt;
;&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;/p&gt;</comment>
                            <comment id="12500987" author="mkhettry" created="Sun, 3 Jun 2007 05:53:47 +0100"  >&lt;p&gt;I apologize for not being able to wrap this up sooner-- work has taken up more than 40 hours of time these last few weeks.&lt;/p&gt;

&lt;p&gt;trim,leading,trailing,both are now reserved keywords. &lt;/p&gt;</comment>
                            <comment id="12500988" author="mkhettry" created="Sun, 3 Jun 2007 05:55:09 +0100"  >&lt;p&gt;The bugfix is in the attachment, 1623.patch.txt&lt;/p&gt;
</comment>
                            <comment id="12501647" author="army" created="Tue, 5 Jun 2007 19:31:10 +0100"  >&lt;p&gt;Hi Manish,&lt;/p&gt;

&lt;p&gt;Thank your for your work on this.  I did a review of the changes and have the following comments/questions, in no particular order:&lt;/p&gt;

&lt;p&gt;1. Following fails with an NPE. SQL standard says the result should be NULL (General Rules 9.c as posted by Bernt above).&lt;/p&gt;

&lt;p&gt;  create table ts (c char(1), vc varchar(10));&lt;br/&gt;
  insert into ts values (default, default);&lt;/p&gt;

&lt;p&gt;  &amp;#8211; Note &quot;c&quot; here is null.&lt;br/&gt;
  select trim(c from &apos;  hmm  &apos;) from ts;&lt;/p&gt;

&lt;p&gt;  &amp;#8211; And similarly...&lt;br/&gt;
  select trim ((values cast (null as char(1))) from vc) from ts;&lt;/p&gt;

&lt;p&gt;2. Error message 22020 says that the trim string cannot be null, but the SQL standard allows it to be (per General Rules 9.c noted above).   Were you intentionally planning to enforce this restriction, or is this just a typo?  If it was not intentional, then I think the corresponding text can be removed the the error message.&lt;/p&gt;

&lt;p&gt;3. There is an extra space between &quot;string&quot; and &quot;must&quot; in the error message for 22020:&lt;/p&gt;

&lt;p&gt;  ERROR 22020: Invalid trim string, &apos;&apos;. The trim string  must be exactly one character. It&lt;br/&gt;
  cannot be a null or more than one character.&lt;/p&gt;

&lt;p&gt;4. The SQL 2003 standard indicates that TRIM is a reserved keyword, and one of your previous comments says that, as well.  However, I don&apos;t see &quot;TRIM&quot; in the list of reserved keywords in sqlgrammar.jj. There is a code comment which says:&lt;/p&gt;

&lt;p&gt;  /* NOTE - If you add a keyword, then you must add it to reservedKeyword()&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;or nonReservedKeyword() as well!&lt;br/&gt;
   */&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;and I see that &quot;TRIM&quot; has been added as a keyword with your patch, but I don&apos;t see it listed in either reservedKeyword() nor in nonReservedKeyword().  I also noticed that this patch adds &quot;TRIM&quot; to the &quot;miscBuiltins()&quot; method, which means that it can be used (in some form) with the JDBC escape syntax, ex:&lt;/p&gt;

&lt;p&gt;  values &lt;/p&gt;
{ fn trim(&apos;  a  &apos;) }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;Was that intentional?  If so, is this function defined in the JDBC spec like LTRIM and RTRIM are, and does ANSI behavior satisfy the JDBC requirements? (sorry for my ignorance here).&lt;/p&gt;

&lt;p&gt;6. Is the &quot;trim(...)&quot; method on StringDataValue still used anywhere after these changes? It looks like you replaced it with &quot;ansiTrim&quot;, though I could of course be overlooking something.  If the old &quot;trim&quot; method is no longer used, would it make sense to remove the code from SQLChar?&lt;/p&gt;

&lt;p&gt;7. I&apos;m not entirely sure, but I think that use of statements like the following in JUnit tests is not ideal:&lt;/p&gt;

&lt;p&gt;            rs = prepareStatement(sql).executeQuery();&lt;/p&gt;

&lt;p&gt;The reason is (I &lt;b&gt;think&lt;/b&gt;) that the PreparedStatement object is never explicitly closed.  There have been situations in the past where failure to close a statement leads to problems in the JUnit suite.  I can&apos;t say what the specifics are, but if possible I think it would be better to explicitly assign the prepared statement and close it when appropriate.  Fortunately there are only two such cases in the new test, so this should be pretty easy to change.&lt;/p&gt;

&lt;p&gt;8. Do you have any plans to document this new function?  It might be good to create a subtask for tracking, so that the documentation can be completed at some point (even if it&apos;s not complete for 10.3, it would be good to have a Jira so that we don&apos;t lose track of it).&lt;/p&gt;

&lt;p&gt;I ran some simple tests by hand and everything seems to work (with the exception of the NPE noted above).  I did not, however, run either of the nightly suites.  Did you run derbyall and suites.All with this patch applied, and did everything run cleanly?&lt;/p&gt;

&lt;p&gt;Thanks again for your time with this feature!&lt;/p&gt;</comment>
                            <comment id="12502197" author="mkhettry" created="Thu, 7 Jun 2007 04:28:51 +0100"  >&lt;p&gt;Thanks for reviewing the code. All your points are valid and 1 is a pretty egregious mistake on my part. As far as 4 goes-- yes, it does have to be in reservedKeyword but is there a problem if its in miscBuiltinsCore? I needed to add the token there because the ansi trim is parsed inside the characterValueFunction production which in turn is under the miscBuiltinsCore production. Infact this comment in miscBuiltinsCore says:&lt;/p&gt;

&lt;p&gt; miscBuiltinsCore() are the core&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;system, string and numeric functions.&lt;/li&gt;
	&lt;li&gt;NOTE: date functions not currently considered&lt;/li&gt;
	&lt;li&gt;core for purposes of the grammar since&lt;/li&gt;
	&lt;li&gt;they can only be escaped when they appear&lt;/li&gt;
	&lt;li&gt;as functions (not special registers).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So is trim not a core function?&lt;/p&gt;
</comment>
                            <comment id="12502467" author="army" created="Thu, 7 Jun 2007 19:47:00 +0100"  >&lt;p&gt;&amp;gt; So is trim not a core function? &lt;/p&gt;

&lt;p&gt;Sorry, I think I was confusing myself here.  The issue I was trying to point out is that the patch exposes the TRIM function through the JDBC escaped function syntax, and I was wondering if that&apos;s correct--i.e. is TRIM actually a JDBC escaped function, or is just an SQL function?&lt;/p&gt;

&lt;p&gt;But it looks like this is an existing problem in the Derby handling of functions, per &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-591&quot; title=&quot;Several builtin functions are incorrectly exposed through the JDBC escaped function syntax {fn &amp;lt;function_call&amp;gt;}&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-591&quot;&gt;DERBY-591&lt;/a&gt;.  So technically that&apos;s a different issue.  It&apos;d be nice if we could somehow avoid adding &quot;TRIM&quot; to the list of functions that are already incorrectly exposed via JDBC escape syntax.  If, however, you feel like that&apos;s the out of the scope of this issue, then perhaps you could just add a comment to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-591&quot; title=&quot;Several builtin functions are incorrectly exposed through the JDBC escaped function syntax {fn &amp;lt;function_call&amp;gt;}&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-591&quot;&gt;DERBY-591&lt;/a&gt; indicating that &quot;TRIM&quot; is now part of that list, as well?&lt;/p&gt;</comment>
                            <comment id="12502604" author="mkhettry" created="Fri, 8 Jun 2007 03:00:54 +0100"  >&lt;p&gt;Followup patch. Addresses all the issues raised by A. B. Ran derbylang and all lang junit tests.&lt;/p&gt;</comment>
                            <comment id="12502869" author="army" created="Fri, 8 Jun 2007 17:30:05 +0100"  >&lt;p&gt;&amp;gt; Addresses all the issues raised by A. B.&lt;/p&gt;

&lt;p&gt;Thanks for the updated patch, Manish.  It looks good to me, with the exception of some minor formatting glitches (lines longer than 80 chars and tab/space mixups) that I can perhaps fix before committing.&lt;/p&gt;

&lt;p&gt;There are still two questions that have yet to be answered:&lt;/p&gt;

&lt;p&gt;  6. Is the &quot;trim(...)&quot; method on StringDataValue still used anywhere after these changes?&lt;br/&gt;
  8. Do you have any plans to document this new function?&lt;/p&gt;

&lt;p&gt;Also, if this is going into 10.3 then I think it should be listed on the &quot;buddy testing&quot; wiki page for 10.3, correct?&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://wiki.apache.org/db-derby/TenThreeBuddyTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenThreeBuddyTesting&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12502891" author="mkhettry" created="Fri, 8 Jun 2007 18:46:25 +0100"  >&lt;p&gt;Sorry, I guess not all issues were addressed.&lt;/p&gt;

&lt;p&gt;re: space vs tabs-- the new file AnsiTrimTest is all spaces I think. Please do not put any tabs in there!&lt;br/&gt;
6-- trim in SQLChar/StringDataValue is not being generated by the code generator anymore. However I do not know if there are existing triggers or query plans on disk which refer to it so I did not remove it. If upgrade is not an issue then by all means the trim function should go away or ansiTrim should just be named trim.&lt;br/&gt;
8. I hadn&apos;t thought of documentation but I could take a stab at it or atleast open a subtask for it.&lt;br/&gt;
If it does make it to 10.3, then it should be buddy tested.&lt;/p&gt;
</comment>
                            <comment id="12503461" author="army" created="Mon, 11 Jun 2007 17:31:36 +0100"  >&lt;p&gt;Thank you for answering all of my question, Manish.  I committed d1623_v3.patch with svn # 546183:&lt;/p&gt;

&lt;p&gt;  URL: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=546183&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;rev=546183&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The _v3 patch is the same as your latest patch, but with some minor formatting changes.&lt;/p&gt;

&lt;p&gt;Thanks for adding this feature!&lt;/p&gt;

&lt;p&gt;Please note: as a regular contributor to Derby we are hoping that you will take the time to complete an ICLA, per Myrna&apos;s email here:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/43960&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/43960&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sooner you are able to do so, the better...&lt;/p&gt;</comment>
                            <comment id="12504332" author="army" created="Wed, 13 Jun 2007 18:11:00 +0100"  >&lt;p&gt;Marking issue as RESOLVED as the patch has been committed and tinderbox results ran cleanly.  Note that the 10.3 deadline is two days away, so if you are still planning to document this issue for 10.3 (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2794&quot; title=&quot;Document ansi trim functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2794&quot;&gt;&lt;del&gt;DERBY-2794&lt;/del&gt;&lt;/a&gt;), it might be good to start sooner rather than later...&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12378615">DERBY-3081</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12355228" name="1623-parser-guess.diff" size="3651" author="fuzzylogic" created="Tue, 10 Apr 2007 09:38:10 +0100"/>
                            <attachment id="12358766" name="1623.patch.txt" size="20729" author="mkhettry" created="Sun, 3 Jun 2007 05:51:59 +0100"/>
                            <attachment id="12359232" name="1623_take2.patch.txt" size="21442" author="mkhettry" created="Fri, 8 Jun 2007 03:00:52 +0100"/>
                            <attachment id="12355532" name="AnsiTrimTest.java" size="1972" author="mkhettry" created="Sat, 14 Apr 2007 01:13:01 +0100"/>
                            <attachment id="12355564" name="compile_error.jj" size="2371" author="fuzzylogic" created="Sun, 15 Apr 2007 07:05:17 +0100"/>
                            <attachment id="12359433" name="d1623_v3.patch" size="21680" author="army" created="Mon, 11 Jun 2007 17:32:00 +0100"/>
                            <attachment id="12355995" name="sqlgrammar.jj.diff" size="3481" author="mkhettry" created="Sun, 22 Apr 2007 04:59:29 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12371274">DERBY-2794</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 17 Aug 2006 23:31:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30079</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0n2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37557</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>