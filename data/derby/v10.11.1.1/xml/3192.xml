<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:55:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3192/DERBY-3192.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3192] Cache session data in the client driver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3192</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The reason for doing this is to avoid a rather&lt;br/&gt;
substantial performance hit observed when the client driver is used&lt;br/&gt;
together with an appserver that uses connection pooling. There are two&lt;br/&gt;
problems:&lt;/p&gt;

&lt;p&gt;1) The connection pool will compare the isolation level it has&lt;br/&gt;
stored for the connection with the value returned from&lt;br/&gt;
Connection.getTransactionIsolation() each and every time someone&lt;br/&gt;
requests a new connection from the pool.&lt;/p&gt;

&lt;p&gt;2) The users of the connection pool (ab)use it to avoid having to keep&lt;br/&gt;
track of their current connection. So each time a query needs to be&lt;br/&gt;
executed a call to the connection pool&apos;s getConnection() method is&lt;br/&gt;
made. Getting a connection from the connection pool like this also&lt;br/&gt;
means that a new PreparedStatement must be prepared each time.&lt;/p&gt;

&lt;p&gt;The net result is that each query results in the following sequence:&lt;/p&gt;

&lt;p&gt;getConnection()&lt;br/&gt;
getTransactionIsolation() --&amp;gt; roundtrip + lookup in server&apos;s statement cache&lt;/p&gt;

&lt;p&gt;prepareStatment()         --&amp;gt; roundtrip + lookup in server&apos;s statement cache&lt;/p&gt;

&lt;p&gt;executeQuery()            --&amp;gt; roundtrip&lt;/p&gt;

&lt;p&gt;Arguably this is a &quot;user error&quot; but when suggesting this I&apos;m kindly&lt;br/&gt;
informed that this works &quot;just fine&quot; with other datbases (such as&lt;br/&gt;
PostgreSQL and ORACLE). &lt;/p&gt;

&lt;p&gt;The reason why it works is that these databases do statement caching&lt;br/&gt;
in the driver. I&apos;ve tried to implement a very (too) simple statement&lt;br/&gt;
cache in Derby&apos;s client driver and to re-enable caching of the&lt;br/&gt;
isolation level (see&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1148&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1148&lt;/a&gt;). With these changes&lt;br/&gt;
I observe a marked performance improvement when running with appserver&lt;br/&gt;
load. &lt;/p&gt;

&lt;p&gt;A proper statment cache cannot be implemented without knowing what the&lt;br/&gt;
current schema is. If the current schema has changed since the&lt;br/&gt;
statement was prepared, it is no longer valid and must be evicted from&lt;br/&gt;
the cache.&lt;/p&gt;

&lt;p&gt;The problem with caching both the isolation level and the current schema in&lt;br/&gt;
the driver is that both can change on the server without the client&lt;br/&gt;
detecting it (through SQL and XA and possibly stored procedures).&lt;/p&gt;

&lt;p&gt;I think this problem can be overcome if we piggy-back the information we would &lt;br/&gt;
like to cache on messages going back to the client. This can be done by&lt;br/&gt;
utilizing the EXCSQLSET DRDA command. According to the DRDA spec (v4, volume 3, &lt;br/&gt;
page 359-360) it is possible to add one or more SQLSTT objects after SQLCARD in the reply,&lt;/p&gt;

&lt;p&gt;I think it would be possible to cache additional session information when this becomes relevant.  It&lt;br/&gt;
would also be possible to use EXCSQLSET to batch session state changes&lt;br/&gt;
going from the client to the server.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12382122">DERBY-3192</key>
            <summary>Cache session data in the client driver</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dyret">Dyre Tjeldvoll</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Nov 2007 19:43:11 +0000</created>
                <updated>Thu, 2 May 2013 03:29:11 +0100</updated>
                            <resolved>Fri, 7 Mar 2008 11:05:33 +0000</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                    <component>Network Server</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12543691" author="dyret" created="Mon, 19 Nov 2007 21:04:40 +0000"  >&lt;p&gt;In the interest of having test-driven and incremental development I&apos;m starting my work on this issue&lt;br/&gt;
by attaching a patch for a new JUnit test. The test runs ok by itself and as a part of jdbcapi. I have not run it as part of suites.All.&lt;/p&gt;

&lt;p&gt;Currently, only isolation level changes are tested.&lt;/p&gt;

&lt;p&gt;If anyone knows about other ways of changing the isolation level that should be part of this  test, I would love to hear about it. (Other comments are also appreciated).&lt;/p&gt;</comment>
                            <comment id="12544022" author="dyret" created="Tue, 20 Nov 2007 19:36:48 +0000"  >&lt;p&gt;Forgot to set patch available when I uploaded the patch. if there are no objections, I plan to commit this patch in a couple of days. &lt;/p&gt;</comment>
                            <comment id="12544741" author="dyret" created="Thu, 22 Nov 2007 09:37:13 +0000"  >&lt;p&gt;Committed revision 597352.&lt;/p&gt;</comment>
                            <comment id="12544790" author="knutanders" created="Thu, 22 Nov 2007 12:10:02 +0000"  >&lt;p&gt;Hi Dyre,&lt;/p&gt;

&lt;p&gt;I think it&apos;s a very good idea to write the test up front, and the test looks good. I&apos;m not sure, but I think maybe the test needs to be excluded when running JSR-169 tests since the stored procedures use DriverManager.&lt;/p&gt;

&lt;p&gt;Some nits:&lt;/p&gt;

&lt;p&gt;Some of the test cases have code which looks like this:&lt;br/&gt;
+        Connection c = getConnection();&lt;br/&gt;
+        Statement s = c.createStatement();&lt;br/&gt;
and&lt;br/&gt;
+        Connection c = getConnection();&lt;br/&gt;
+        PreparedStatement ps = c.prepareStatement(&quot;SELECT * FROM &quot; + table, &lt;/p&gt;

&lt;p&gt;It&apos;s probably better to use the helper methods create/prepareStatement() in JDBCBaseTestCase, since they will automatically perform clean-up in tearDown().&lt;/p&gt;

&lt;p&gt;It seems like the assertEquals() calls have swapped expected and actual value (correct order is assertEquals(expected, actual)).&lt;/p&gt;</comment>
                            <comment id="12544840" author="dyret" created="Thu, 22 Nov 2007 16:02:32 +0000"  >&lt;p&gt;Hi Knut, &lt;br/&gt;
thank you for comments. You have valid points and I plan to address them soon. &lt;/p&gt;

&lt;p&gt;Wrt. to JSR-169; I think all test cases depend on at least one stored procedure that uses DriverManager (verifyCachedIsolation(), which is used by all test cases, use such a stored procedure). So what is the best way of disabling the entire test when running with JSR-169? I guess I could let suite() return only the C/S decorated suite, since functionality being tested only is used in C/S mode, but perhaps there is a more suitable way?&lt;/p&gt;</comment>
                            <comment id="12544842" author="knutanders" created="Thu, 22 Nov 2007 16:17:17 +0000"  >&lt;p&gt;You could wrap the adding of tests in the suite() method with &quot;if (JDBC.vmSupportsJDBC3()) ...&quot;, so that it only returns an empty test suite for JSR-169. It seems like other tests that don&apos;t run under JSR-169 additionally add themselves to the main test suite from inside a similar if statement in jdbcapi._Suite.suite().&lt;/p&gt;</comment>
                            <comment id="12544858" author="dyret" created="Thu, 22 Nov 2007 18:06:54 +0000"  >&lt;p&gt;I attached .fup1.diff which addresses Knut&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="12544941" author="knutanders" created="Fri, 23 Nov 2007 08:32:00 +0000"  >&lt;p&gt;Looks good. +1 to commit.&lt;/p&gt;

&lt;p&gt;I noticed that you had a couple of System.out.println() statements commented out. Just in case you&apos;re not already aware of it, the println() method in BaseTestCase gives you an easier way to enable/disable debug printing without recompiling the test. It is normally silent, but if you set derby.tests.debug to true, it starts printing the messages.&lt;/p&gt;</comment>
                            <comment id="12544948" author="dyret" created="Fri, 23 Nov 2007 09:09:18 +0000"  >&lt;p&gt;That is good to know. I expect that those printlns can be removed completely one day, but since I&apos;m still developing the feature being tested it is very useful to have some more info about what the test is doing, so that&apos;s why I kept them.&lt;/p&gt;</comment>
                            <comment id="12544966" author="dyret" created="Fri, 23 Nov 2007 10:22:39 +0000"  >&lt;p&gt;Attaching *.fup2.diff which does s/System.out.println/println/g&lt;/p&gt;</comment>
                            <comment id="12545413" author="dyret" created="Mon, 26 Nov 2007 11:47:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3198&quot; title=&quot;Using setQueryTimeout will leak sections &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3198&quot;&gt;&lt;del&gt;DERBY-3198&lt;/del&gt;&lt;/a&gt; also uses writeSetSpecialRegister() so it suffers from same problem. &lt;/p&gt;</comment>
                            <comment id="12552114" author="dyret" created="Sat, 15 Dec 2007 17:45:21 +0000"  >&lt;p&gt;I&apos;ve attached a preliminary patch (prelim1) which implements caching of the isolation level in the client driver. It is a fully working solution and all the tests pass, but there is a particular implementation issue which I especially would like to get feedback on:&lt;/p&gt;

&lt;p&gt;When executing a query with a scrollable result set a complete row will be fetched each time Statement.flowExecute() is called, even if this requires multiple round-trips. This means that trailing piggy-backed session data may end up being processed either by the code assembling a complete row for a scrollable result set, or by flowExecute (normal case). This will complicate the logic in because flowExecute needs to know if the session data was processed when the row was assembled, or if the session data is still waiting to be read.&lt;/p&gt;

&lt;p&gt;In the attached patch I&apos;ve chosen to work around this problem by detecting split rows destined for a scrollable result set on the server, and then delay sending the session data until the final fragment of the row is sent. Doing it this way has three benefits:&lt;br/&gt;
1) No piggy-backing logic needs to be added to the row-assembly logic&lt;br/&gt;
2) No complication of flowExecute&lt;br/&gt;
3) No unnecessary piggy-backing is done while a row is re-assembled&lt;/p&gt;

&lt;p&gt;The primary drawback is that the DRDAConnThread logic gets more complicated and normal DRDA flow is interrupted. Normally each DRDA request is receives a corresponding reply in next message going back to the client. In this patch the answer to a session info request is delayed until all fragments of a row have been sent. This breaks the normal DRDA chaining mechanism. The details can be seen by searching for comments beginning with &apos;TODO DT&apos; in the patch.&lt;/p&gt;

&lt;p&gt;All review comments will be much appreciated.&lt;/p&gt;</comment>
                            <comment id="12552431" author="knutanders" created="Mon, 17 Dec 2007 15:00:35 +0000"  >&lt;p&gt;Hi Dyre,&lt;/p&gt;

&lt;p&gt;In DRDAConnThread.writeEXCSQLSETReply() I see this code:&lt;br/&gt;
+            else {&lt;br/&gt;
+                // At least one SQLSTT is required when rtnsetstt is true&lt;br/&gt;
+                writeSQLSTT(&quot;&quot;);&lt;/p&gt;

&lt;p&gt;However, DRDA V4, vol 3, p. 761 says this about RTNSETSTT:&lt;br/&gt;
&amp;gt; No SQLSTT reply data object is returned by the target server if no special register has had its&lt;br/&gt;
&amp;gt; setting modified on the current connection, regardless of the RTNSETSTT setting.&lt;/p&gt;

&lt;p&gt;Doesn&apos;t this mean that we shouldn&apos;t send SQLSTT if the cached session state hasn&apos;t changed?&lt;/p&gt;</comment>
                            <comment id="12552452" author="knutanders" created="Mon, 17 Dec 2007 15:51:54 +0000"  >&lt;p&gt;By the way, is the plan to have the caching enabled by default? Do you think it&apos;s worth the effort to make it optional? If I understand correctly, the caching will increase the size of a request from the client by about 30 bytes (this could perhaps be reduced by using a shorter SET statement string?), and there will be close to zero bytes extra on the reply unless the state has changed. This sounds like a negligible cost to me, but I think it would be a good idea to run a VALUES 1 test or something similar to verify that it doesn&apos;t degrade the general performance.&lt;/p&gt;</comment>
                            <comment id="12552519" author="djd" created="Mon, 17 Dec 2007 20:22:07 +0000"  >&lt;p&gt;Is there a writeup that describes how this is implemented, kind of hard to review the patch otherwise.&lt;/p&gt;</comment>
                            <comment id="12552727" author="dyret" created="Tue, 18 Dec 2007 12:19:15 +0000"  >&lt;p&gt;@Knut1: I hope your interpretation of the DRDA spec is correct as&lt;br/&gt;
I would prefer not sending an empty string when there is no info.&lt;/p&gt;

&lt;p&gt;@Knut2: The current version of the patch does not allow the&lt;br/&gt;
caching to be turned off, but this could certainly be added. Your&lt;br/&gt;
estimates of the overhead are accurate AFAICT. I did run some&lt;br/&gt;
tests (d2911) to see if there was a perf impact and I could not&lt;br/&gt;
see any degradation. I could re-run those tests with a final&lt;br/&gt;
version of the patch and attach them here.&lt;/p&gt;

&lt;p&gt;@Dan: There is no writeup per se, only the following discussions&lt;br/&gt;
on derby-dev (part of which is included in the Description&lt;br/&gt;
field): &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Cache-session-data-in-the-client-driver--to13231212.html#a13231212&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Cache-session-data-in-the-client-driver--to13231212.html#a13231212&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/DRDA-confusion-to13495130.html#a13495130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/DRDA-confusion-to13495130.html#a13495130&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I could certainly provide a writeup.  It didn&apos;t occur to me that one&lt;br/&gt;
would be needed, since the plan was to use existing mechanisms&lt;br/&gt;
that are currently used for similar&lt;br/&gt;
purposes (setQueryTimeout). In retrospect, there are some&lt;br/&gt;
unforeseen complications that mandate more explanation, but I&apos;m&lt;br/&gt;
guessing that they would not have been part of an initial writeup&lt;br/&gt;
either...&lt;/p&gt;</comment>
                            <comment id="12552846" author="djd" created="Tue, 18 Dec 2007 18:29:42 +0000"  >&lt;p&gt;&amp;gt; In retrospect, there are some unforeseen complications that mandate more explanation, but I&apos;m guessing that they would not have been part of an initial writeup either... &lt;/p&gt;

&lt;p&gt;It&apos;s not an initial writeup I was looking for, but some summary of the actual change being made.&lt;/p&gt;

&lt;p&gt;The description is this bug has a couple of places where it says &quot;I think ....&quot;, so that doesn&apos;t really help a reviewer of the code. Did the implementor solve this issues using the ideas that followed the &quot;I think&quot;, or was it handled some other way?&lt;/p&gt;

&lt;p&gt;It&apos;s also not clear from the description that the mechanism to be used is the same as setQueryTimeout, it&apos;s not mentioned until the last comment.&lt;/p&gt;

&lt;p&gt;I personally just don&apos;t know how to review a 1552 line patch without a good overview of is being attempted and how it is being attempted, I&apos;m then just reading code that obviously does X without knowing if X was what is intended or not.&lt;/p&gt;

&lt;p&gt;These comments in this issue worry me:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;the caching will increase the size of a request from the client by about 30 bytes&quot; - is this every request, seems too much to me?&lt;/li&gt;
	&lt;li&gt;&quot;When executing a query with a scrollable result  ...&quot; - why is scrollable result set called out here, at a high level I can&apos;t see why the scrollability of a result set would affect caching of session state?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Of course no-one has to provide a writeup, as long as a committer has confidence in a patch it can be committed, but producing a writeup has the muilti-purpose of adding to the community knowledge, potentially improving the quality of the code &amp;amp; reviews and often helps the implementor ensure they fully understand the changes they are making&lt;/p&gt;
</comment>
                            <comment id="12559431" author="dyret" created="Wed, 16 Jan 2008 10:34:35 +0000"  >&lt;p&gt;I&apos;m currently creating a writeup which describes the patch, but&lt;br/&gt;
in the process I have discovered that the current solution for&lt;br/&gt;
the previously mentioned multiple round-trip problem is&lt;br/&gt;
broken. &lt;/p&gt;

&lt;p&gt;The multiple round-trip problem only appears&lt;br/&gt;
for ((TYPE_SCROLL_SENSITIVE || TYPE_SCROLL_INSENSITIVE) &amp;amp;&amp;amp;&lt;br/&gt;
CONCUR_READ_ONLY) result sets.&lt;/p&gt;

&lt;p&gt;The current solution will work correctly, only if fetchSize is 1&lt;br/&gt;
or greater than the number of round-trips needed. If this&lt;br/&gt;
criteria does not hold, the client will wait indefinitely for&lt;br/&gt;
session data that the server has not yet sent. I guess the best&lt;br/&gt;
way to avoid this is to extend &apos;flowToCompleteRowset()&apos; so that&lt;br/&gt;
it reads and sends session data.&lt;/p&gt;</comment>
                            <comment id="12560975" author="dyret" created="Mon, 21 Jan 2008 10:25:00 +0000"  >&lt;p&gt;I&apos;ve finally managed to finish the writeup I promised. It can be found at&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/Derby3192Writeup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/Derby3192Writeup&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12561002" author="knutanders" created="Mon, 21 Jan 2008 13:12:45 +0000"  >&lt;p&gt;In the writeup, I read this:&lt;br/&gt;
&amp;gt; Most of the overhead seems to come from the PKGNAMCSN instance variable which by itself uses 76 bytes&lt;/p&gt;

&lt;p&gt;It does however seem like DRDA allows this variable to be skipped.&lt;/p&gt;

&lt;p&gt;DRDA, ver. 4, vol 1, p 10:&lt;/p&gt;

&lt;p&gt;&amp;gt; PKGNAM, PKGNAMCSN, PKGNAMCT&lt;br/&gt;
&amp;gt; The length is no longer fixed and is based on the lengths of the RDBNAM,&lt;br/&gt;
&amp;gt; RDBCOLID, and PKGID contained therein. As of SQLAM Level 7, the&lt;br/&gt;
&amp;gt; PKGNAMCSN instance variable is optional. If not specified, the PKGSN is&lt;br/&gt;
&amp;gt; required to identify the package section number. The package name and&lt;br/&gt;
&amp;gt; consistency token defaults to the last set of values specified on the connection.&lt;/p&gt;

&lt;p&gt;DRDA, ver. 4, vol 1, p 463:&lt;/p&gt;

&lt;p&gt;&amp;gt; CU15 The fully qualified package name and package consistency token are not required to be&lt;br/&gt;
&amp;gt; specified on every SQL-related request. If the package name and consistency token are&lt;br/&gt;
&amp;gt; not specified on a request, the last request that specified the package name and&lt;br/&gt;
&amp;gt; consistency token is used to identify the package name and consistency token for the&lt;br/&gt;
&amp;gt; request. The package section number is not optional and is required if the package&lt;br/&gt;
&amp;gt; name and consistency token are not specified. If the package name and consistency&lt;br/&gt;
&amp;gt; token were not specified on a previous request to establish the default, the request is&lt;br/&gt;
&amp;gt; rejected by the application server with a conversational protocol error with the error&lt;br/&gt;
&amp;gt; code set to X&apos;20&apos; (default package name not established).&lt;/p&gt;</comment>
                            <comment id="12561017" author="dyret" created="Mon, 21 Jan 2008 14:26:00 +0000"  >&lt;p&gt;Thnak you, Knut. That is very good news!&lt;br/&gt;
 I may need some time to digest the details, though.&lt;/p&gt;

&lt;p&gt;Btw. You don&apos;t know if it is also legal to truncate/drop SQLCARD in the reply, do you?&lt;/p&gt;
</comment>
                            <comment id="12561042" author="knutanders" created="Mon, 21 Jan 2008 16:02:45 +0000"  >&lt;p&gt;&amp;gt; You don&apos;t know if it is also legal to truncate/drop SQLCARD in the reply, do you?&lt;br/&gt;
No, I don&apos;t know.&lt;/p&gt;

&lt;p&gt;I just noticed that the DRDA spec allows you to define product-unique extensions as long as you&apos;re still able to talk to a server/client which doesn&apos;t have the extension. I haven&apos;t studied the details, but you could take a look at section 2.5.5.4 in DRDA ver 4, vol 3. Perhaps we could have a custom OPNQRYRM/QRYDTA object which contained session state with minimal overhead?&lt;/p&gt;</comment>
                            <comment id="12561144" author="dyret" created="Mon, 21 Jan 2008 22:04:50 +0000"  >&lt;p&gt;Thank you! This is indeed interesting. &lt;/p&gt;

&lt;p&gt;This really opens up the possibilities. But an asynchronous approach as you suggest (no polling, which is great) would require some handshake logic to figure out if both the client and the server supports this. I&apos;m guessing that perhaps EXCSAT could be used for this somehow, but I don&apos;t quite understand how it works yet...&lt;/p&gt;</comment>
                            <comment id="12561287" author="knutanders" created="Tue, 22 Jan 2008 10:19:15 +0000"  >&lt;p&gt;The server knows which version of the client it talks to. See impl.drda.AppRequester.getClientType()/greaterThanOrEqualTo(). This could be used to decide which kind of reply to send. Similarly, the client knows the version of the server (see NetDatabaseMetadata.computeFeatureSet_()).&lt;/p&gt;</comment>
                            <comment id="12561465" author="dyret" created="Tue, 22 Jan 2008 21:03:50 +0000"  >&lt;p&gt;Ah, good. One less thing to worry about. I&apos;m trying to understand how you can add &apos;product-specific&apos; extensions (specifically code points) to DDM commands. I&apos;m trying &lt;br/&gt;
to understand the CODPNTDR section of vol3 (page 224):&lt;/p&gt;

&lt;p&gt;Codepoints consist of two values, a 1-hex index into a list of dictionaries and a 3-hex identifier&lt;br/&gt;
unique within the referenced dictionary. The resolution of codepoints to class descriptors is&lt;br/&gt;
illustrated in Figure 3-18 (on page 225).&lt;br/&gt;
For Agent Level 3, the list of dictionaries is fixed, and specific index values are assigned as&lt;br/&gt;
follows:&lt;br/&gt;
&#8226; C-F: Reserved for product extensions (see EXTENSIONS (on page 381))&lt;br/&gt;
&#8226; 4-B: Reserved for DDM Architecture&lt;br/&gt;
&#8226; 3: DDM dictionary QDDADLD&lt;br/&gt;
&#8226; 2: DDM dictionary QDDRDBD&lt;br/&gt;
&#8226; 1: DDM dictionary QDDBASD&lt;br/&gt;
&#8226; 0: DDM dictionary QDDPRMD&lt;/p&gt;

&lt;p&gt;Does that mean I can use codepoints in the range &lt;span class=&quot;error&quot;&gt;&amp;#91;0xC000-0xFFFF&amp;#93;&lt;/span&gt; to product-unique stuff? And use them as instance variables in OPNQRYRM/QRYDTA?&lt;/p&gt;</comment>
                            <comment id="12561663" author="knutanders" created="Wed, 23 Jan 2008 13:15:50 +0000"  >&lt;p&gt;&amp;gt; Does that mean I can use codepoints in the range &lt;span class=&quot;error&quot;&gt;&amp;#91;0xC000-0xFFFF&amp;#93;&lt;/span&gt; to product-unique stuff?&lt;/p&gt;

&lt;p&gt;Yes, that&apos;s how I interpret it.&lt;/p&gt;

&lt;p&gt;&amp;gt; And use them as instance variables in OPNQRYRM/QRYDTA?&lt;/p&gt;

&lt;p&gt;I think so. EXTENSIONS on page 381 says:&lt;/p&gt;

&lt;p&gt;&amp;gt; In both cases, the framework of existing DDM classes are used as the basis for extensions to&lt;br/&gt;
&amp;gt; DDM architecture. DDM allows the following &quot;open architecture&quot; enhancements:&lt;br/&gt;
&amp;gt; &#8226; Whole new classes of objects (such as libraries or mailboxes) can be defined, either with&lt;br/&gt;
&amp;gt; new commands and replies unique to the class, or with existing DDM commands and&lt;br/&gt;
&amp;gt; replies as appropriate.&lt;br/&gt;
&amp;gt; &#8226; Defining new commands for class can enhance the function of DDM classes.&lt;br/&gt;
&amp;gt; &#8226; New parameters can be added to existing DDM commands.&lt;br/&gt;
&amp;gt; &#8226; New values can be defined as valid for existing DDM parameters.&lt;/p&gt;

&lt;p&gt;Strictly speaking, OPNQRYRM and QRYDTA are replies, not commands. I don&apos;t see why we should be allowed to add parameters to existing DDM commands, but not to existing replies. If we want to follow the spec&apos;s letter, we may need to invent a new codepoint for the reply messages too, not only for the added instance variables. I may be missing something, though...&lt;/p&gt;</comment>
                            <comment id="12567437" author="dyret" created="Sun, 10 Feb 2008 14:30:49 +0000"  >&lt;p&gt;I&apos;m attaching a completely reworked&lt;br/&gt;
patch (derby-3192-mark2.v1.diff) based on the new idea of adding&lt;br/&gt;
product-specific code points. All tests pass. &lt;/p&gt;

&lt;p&gt;I plan to update the writeup on the Wiki as well, but here is a&lt;br/&gt;
short summary of the new patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Adds a new method (getCurrentSchemaName()) to EmbedConnection&lt;br/&gt;
  and EngineConnection that the NetworkServer can use to find out&lt;br/&gt;
  what the current schema is.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds functionality to the Database class that keeps track of&lt;br/&gt;
  the latest isolation level and schema which have been&lt;br/&gt;
  sent to the client, and whether the values have changed&lt;br/&gt;
  since the last piggy-backing.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds three product-specific code points, PBSD, PBSD_ISO and&lt;br/&gt;
  PBSD_SCHEMA as well as a method (DRDAConnThread.writePBSD)&lt;br/&gt;
  which adds a PBSD containing one or both of PBSD_ISO and PBSD_SCHEMA&lt;br/&gt;
  to outgoing messages when piggy-backing is needed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The reply to EXCSQLIMM, EXSQLSTT, OPNQRY and CNTQRY will&lt;br/&gt;
  include session data when needed. There is no additional data&lt;br/&gt;
  being transmitted when session attributes are unchanged.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The corresponding parse methods for the replies on the client&lt;br/&gt;
  have been augmented to handle the new code points and invoke a&lt;br/&gt;
  callback on the client which updates (syncs) the cached session&lt;br/&gt;
  data.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;am.Connection on the client side is modified to use its cached&lt;br/&gt;
  copy of the session attributes, unless they have a&lt;br/&gt;
  special &quot;unknown&quot; value which will force a fetch from the&lt;br/&gt;
  server (as before).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Joining/leaving an XA transaction is handled by dropping the&lt;br/&gt;
  cached values (by assigning the special &quot;unknown&quot; value).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;A new variable and access method for the schema name has been added&lt;br/&gt;
  to am.Connection. This is primarily intended for use by the new&lt;br/&gt;
  StatementCache&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567522" author="dyret" created="Mon, 11 Feb 2008 05:54:49 +0000"  >&lt;p&gt;Note that there is a bug in the mark2-v1 patch. The Database.pbsd_ variable is not assigned when a new object is created so session data will be piggybacked every time, not only when they have changed.&lt;br/&gt;
I&apos;ll upload a new patch.&lt;/p&gt;</comment>
                            <comment id="12567696" author="army" created="Mon, 11 Feb 2008 16:41:09 +0000"  >&lt;p&gt;&amp;gt; ... based on the new idea of adding product-specific code points.&lt;/p&gt;

&lt;p&gt;I assume these new code points will be completely hidden from, and ignored by, connections/communication with non-Derby clients, esp. ODBC.  Is that correct?&lt;/p&gt;</comment>
                            <comment id="12567725" author="dyret" created="Mon, 11 Feb 2008 17:55:30 +0000"  >&lt;p&gt;AB&amp;gt; I assume these new code points will be completely hidden from, and ignored by, connections/communication with non-Derby clients, esp. ODBC. Is that correct?&lt;/p&gt;

&lt;p&gt;Yes. The intention is that they would only be sent to Derby client drivers version 10.4 and newer. Right now I have the following&lt;/p&gt;

&lt;p&gt;     private void writePBSD() throws SQLException, DRDAProtocolException&lt;br/&gt;
    {&lt;br/&gt;
        if (!appRequester.greaterThanOrEqualTo(10, 4, 0)) &lt;/p&gt;
{
            return;
        }

&lt;p&gt;Looking at it again, I guess I should add &lt;/p&gt;

&lt;p&gt;appRequester.getClientType()  != AppRequester.DNC_CLIENT&lt;/p&gt;

&lt;p&gt;to the condition as well.&lt;/p&gt;</comment>
                            <comment id="12567763" author="army" created="Mon, 11 Feb 2008 19:18:25 +0000"  >&lt;p&gt;&amp;gt; Yes. The intention is that they would only be sent to Derby client drivers version 10.4 and newer.&lt;/p&gt;

&lt;p&gt;Thanks for verifying, Dyre.&lt;/p&gt;</comment>
                            <comment id="12568017" author="dyret" created="Tue, 12 Feb 2008 09:26:05 +0000"  >&lt;p&gt;Attaching a new patch (mark2.v2) which fixes missing assignment to Database.pbsd_ and adds an ASSERT to verify this. Also added a test to ensure that the new code points only get sent to DNC clients.&lt;/p&gt;</comment>
                            <comment id="12568077" author="dyret" created="Tue, 12 Feb 2008 12:13:25 +0000"  >&lt;p&gt;I just noticed that Netbeans had introduced a number of property changes that ended up in the v2 patch. Here is &lt;br/&gt;
a new version without the property changes. Sorry about the noise.&lt;/p&gt;</comment>
                            <comment id="12569314" author="dyret" created="Fri, 15 Feb 2008 16:56:05 +0000"  >&lt;p&gt;I have updated the writeup at&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/Derby3192Writeup&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/Derby3192Writeup&lt;/a&gt;&lt;br/&gt;
so that it correctly describes the mark2.v3 patch.&lt;/p&gt;</comment>
                            <comment id="12569922" author="knutanders" created="Mon, 18 Feb 2008 15:13:06 +0000"  >&lt;p&gt;I think the approach used in the patch looks fine, though I haven&apos;t&lt;br/&gt;
tested it yet. Please see my comments and questions below.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;DRDAConnThread.writePBSD() checks client type and version. It&apos;s&lt;br/&gt;
  perhaps cleaner if we put the check in a method in AppRequester (for&lt;br/&gt;
  instance, supportsPiggybackedSessionState).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Is there any reason why the definition of the PiggyBackedSessionData&lt;br/&gt;
  class is appended to Database.java rather than put in a separate&lt;br/&gt;
  file? The class is not private to Database and keeping it there&lt;br/&gt;
  might make it harder to find it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I think DRDAConnThread.trace() is normally only called when&lt;br/&gt;
  SanityManager.DEBUG is true, but writePBSD() sometimes call it&lt;br/&gt;
  regardless of the sanity setting.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Could &quot;catch (Throwable t) 
{ t.printStackTrace(); }
&lt;p&gt;&quot; be removed from&lt;br/&gt;
  DRDAConnThread.writePBSD()?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;BrokeredConnection.getCurrentSchemaName() uses a mix of tabs and&lt;br/&gt;
  spaces.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;EmbedConnection.getCurrentSchemaName() is declared as throws&lt;br/&gt;
  SQLException, but I don&apos;t think any of the methods it calls throws&lt;br/&gt;
  SQLException.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The debug code at the end of DRDAConnThread.processCommands()&lt;br/&gt;
  allocates and populates a Hashtable each time it is executed,&lt;br/&gt;
  whereas it is only needed if an error has occurred. Perhaps it could&lt;br/&gt;
  be allocated inside the if block and the catch block instead? Not a&lt;br/&gt;
  big issue, though, since it&apos;s only in debug code. (This makes me&lt;br/&gt;
  wish CodePointNameTable had static fields and methods, but that&apos;s&lt;br/&gt;
  another patch in another JIRA issue...)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;NetStatementReply.parsePBSD() and&lt;br/&gt;
  Connection/NetConnection.completePiggyBackSessionData() use an&lt;br/&gt;
  Object array to represent the session state, and use the magic&lt;br/&gt;
  numbers 0 and 1 to access the isolation level and the schema,&lt;br/&gt;
  respectively. At a minimum, I think we should document in&lt;br/&gt;
  Connection.completePiggyBackSessionData()&apos;s javadoc comment what&apos;s&lt;br/&gt;
  stored in each element of the array. It does however sound easier to&lt;br/&gt;
  understand and maintain the code if we create a separate class to&lt;br/&gt;
  hold this information. Or perhaps even simpler:&lt;br/&gt;
  completePiggyBackSessionData() could take two arguments instead of a&lt;br/&gt;
  two element array.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;In Connection.getTransactionIsolation(), I think the scope of the&lt;br/&gt;
  isolation variable could be narrowed down a bit. I believe it could&lt;br/&gt;
  be declared where it&apos;s assigned the first time, and the return&lt;br/&gt;
  statement can be moved inside the try block.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12569928" author="dyret" created="Mon, 18 Feb 2008 16:02:05 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;thank you for your through review. Basically I think all of your comment are valid, except for&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;EmbedConnection.getCurrentSchemaName() is declared as throws&lt;br/&gt;
  SQLException, but I don&apos;t think any of the methods it calls throws&lt;br/&gt;
  SQLException. &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What you&apos;re saying here is true, but the problem is that getCurrentSchemaName() is declared in the EngineConnection interface which is also implemented by BrokeredConnection. And in order to follow the BrokeredConnection pattern of checking that the actual connection isn&apos;t closed before forwarding, you have to either propagate the SQLException (as the other methods do) or catch it and do something clever. I guess a comment would be in order here...&lt;/p&gt;</comment>
                            <comment id="12569961" author="knutanders" created="Mon, 18 Feb 2008 17:44:20 +0000"  >&lt;p&gt;I don&apos;t think the implementation in EmbedConnection needs to throw SQLException, even if the interface says it can. See for instance getLOBMapping() which is declared as &quot;throws SQLException&quot; in EngineConnection and BrokeredConnection, and doesn&apos;t have any throws clause in EmbedConnection.&lt;/p&gt;</comment>
                            <comment id="12570169" author="dyret" created="Tue, 19 Feb 2008 10:46:38 +0000"  >&lt;p&gt;Ok, I just assumed that since the exception spec was part of  the signature it had to be identical.&lt;/p&gt;

&lt;p&gt;I have added a supportsSessionDataCaching predicate to AppRequester as you suggest (changed the wording slightly to match that used elsewhere). &lt;br/&gt;
I see that there is precedence for doing it this way, but I don&apos;t like it. As long as getClientType() and greaterThanOrEqualTo() are accessible, the interface is complete and minimal as it should be. Adding convenience methods on top of that bloats the interface IMHO. (It also needlessly grants the convenience methods access to the internals of AppRequester)&lt;/p&gt;

&lt;p&gt;I tried moving the call to the CodePointTableName constructor into the try-block as you suggest, but then I get a compilation error because the code point string is referenced in the catch-block... I guess I could always make a static final instance in DRDAConnThread, and have a static initializer which assigns null unless it is a DEBUG build, or something. But then you introduce the risk of dereferencing that pointer in non-debug mode...&lt;/p&gt;</comment>
                            <comment id="12570180" author="knutanders" created="Tue, 19 Feb 2008 11:30:24 +0000"  >&lt;p&gt;I think I agree with your comments about the supports methods. I still think it&apos;s a good idea to have the check in a separate method, but perhaps a private method in DRDAConnThread would do?&lt;/p&gt;

&lt;p&gt;Regarding CodePointNameTable, I think the simplest way is to allocate a new one in the catch block. Having a static field sounds a bit too complex, given that this is just debug code. I&apos;d say just leave it as it is for now. We can always rewrite CodePointNameTable.lookup() as a static method later, if it becomes a problem in the sane builds.&lt;/p&gt;</comment>
                            <comment id="12570303" author="dyret" created="Tue, 19 Feb 2008 16:39:23 +0000"  >&lt;p&gt;Uploading mark2.v4 to address the comments.&lt;/p&gt;</comment>
                            <comment id="12570679" author="dyret" created="Wed, 20 Feb 2008 13:11:40 +0000"  >&lt;p&gt;Yet another version, hopefully without trailing white space this time...&lt;/p&gt;</comment>
                            <comment id="12570990" author="kristwaa" created="Thu, 21 Feb 2008 10:18:04 +0000"  >&lt;p&gt;I had a quick look at the patch (mark2.v5) to see if I can easily start using it as part of the statement pooling feature, and I believe I can.&lt;/p&gt;

&lt;p&gt;I did notice one thing in am.Connection.getCurrentSchemaName:&lt;br/&gt;
+            System.err.println(&quot;*** Need query to get current schema ***&quot;);&lt;/p&gt;

&lt;p&gt;Is it supposed to be there?&lt;/p&gt;</comment>
                            <comment id="12571005" author="dyret" created="Thu, 21 Feb 2008 10:44:56 +0000"  >&lt;p&gt;Kristian&amp;gt; Is it supposed to be there?&lt;/p&gt;

&lt;p&gt;Yes and no. No, it should probably not be there permanently, but I wanted to get some kind of warning if this starts to happen more frequently than we expect it to. Otherwise, if a bug kept setting the cached schema name to null, then we would not see it (other than as a performance degradation). Maybe that line should have been put into some kind of client-side tracing system... &lt;/p&gt;</comment>
                            <comment id="12571327" author="dyret" created="Fri, 22 Feb 2008 09:36:51 +0000"  >&lt;p&gt;Here is a version of the patch where the stderr println has been replaced by agent tracing.&lt;/p&gt;</comment>
                            <comment id="12571345" author="knutanders" created="Fri, 22 Feb 2008 10:50:00 +0000"  >&lt;p&gt;Thanks for the updated patch, Dyre. I think it looks good and ready for commit now. I still plan to test it more thoroughly, but that doesn&apos;t mean you should hold the commit. If I find any issues, they can be handled in follow-ups.&lt;/p&gt;

&lt;p&gt;One question about the SYNCCTL messages: Would it make sense to write PBSD in the reply even though the client ignores it for 10.4? Could that make it easier to implement the session state caching for XA later? I was thinking then it perhaps would be a pure client-side fix to enable it for XA, and the client didn&apos;t need special handling of yet another version (that is, you wouldn&apos;t need both serverSupportsSessionDataCaching() and serverSupportsSessionDataCachingForXA() on the client). I&apos;m not sure whether this is possible and/or desirable, but I thought I&apos;d mention it.&lt;/p&gt;</comment>
                            <comment id="12571346" author="knutanders" created="Fri, 22 Feb 2008 10:51:49 +0000"  >&lt;p&gt;One more thing: Shouldn&apos;t am.Connection.getCurrentSchemaName() close the Statement it creates?&lt;/p&gt;</comment>
                            <comment id="12571355" author="knutanders" created="Fri, 22 Feb 2008 11:00:25 +0000"  >&lt;p&gt;And perhaps PiggyBackedSessionData.conn_ should be declared final just to spell out that a new PBSD object must be created when the connection changes.&lt;/p&gt;</comment>
                            <comment id="12571371" author="dyret" created="Fri, 22 Feb 2008 12:16:10 +0000"  >&lt;p&gt;Hi Knut, thanks for the comments. I have added closing of the statement, and made conn_ final in my sandbox. &lt;/p&gt;

&lt;p&gt;I see your point about avoiding more compatibility tests by adding piggy-backing to the SYNCCTL reply right away. I have not looked at the code in detail yet, but I suspect that you cannot ignore the PBSD without adding the parsing necessary to confirm that it actually is a PBSD. And then most of the job is already done, because then all that needs to be done is to call readPBSD(). I&apos;ll try experiment with this to see if it works...&lt;/p&gt;</comment>
                            <comment id="12571393" author="knutanders" created="Fri, 22 Feb 2008 13:02:48 +0000"  >&lt;p&gt;Thanks Dyre. But don&apos;t let the experiment stop you from committing the patch as it is. The main issue is not whether or not it is part of the first check-in, but whether or not it is part of 10.4. And even if it doesn&apos;t make it for 10.4, it&apos;s not a very big deal.&lt;/p&gt;</comment>
                            <comment id="12572087" author="dyret" created="Mon, 25 Feb 2008 14:08:49 +0000"  >&lt;p&gt;Sending PBSD with the SYNCCTL reply seemed to work, after some trouble-shooting. Initially I was fooled by the fact that both NetConnection and XANetConnection implementes parseSYNCCTLreply(). My first attempt failed because I had only added PBSD handling to NetConnection. &lt;br/&gt;
Seems safer to handle PBSD in both classes, although I would expect that only NetXAConnection actually needs to.&lt;/p&gt;

&lt;p&gt;I plan to post another patch when I&apos;ve removed yet another set of debug printouts...&lt;/p&gt;</comment>
                            <comment id="12572474" author="dyret" created="Tue, 26 Feb 2008 14:09:09 +0000"  >&lt;p&gt;OK, here is v7 which sends PBSD in SYNCCTLreply and uses the extra piggy-backing to avoid clearing the cached attributes in every XA state change. All tests pass.&lt;/p&gt;

&lt;p&gt;I plan to update the writeup to reflect the changes.&lt;/p&gt;

&lt;p&gt; I intend to commit tomorrow unless there are showstopper-comments.&lt;/p&gt;</comment>
                            <comment id="12572491" author="dyret" created="Tue, 26 Feb 2008 14:29:32 +0000"  >&lt;p&gt;v8 moves parsePBSD() from Reply to NetConnection where it logically belongs, and also calls parseCommonError() if an unexpected sub code point is found in parsePBSD(). Please disregard the v7 version.&lt;/p&gt;</comment>
                            <comment id="12572909" author="dyret" created="Wed, 27 Feb 2008 13:57:29 +0000"  >&lt;p&gt;Committed revision 631593&lt;/p&gt;</comment>
                            <comment id="12573013" author="dyret" created="Wed, 27 Feb 2008 18:29:50 +0000"  >&lt;p&gt;I have updated the writeup so that it matches the committed patch. When doing that it occurred to me that I should probably remove the special handling of SYNCCTL in my sanity ASSERT at the bottom of the processCommands-switch. I&apos;ll upload a follow-up patch when I&apos;ve tested it. &lt;/p&gt;</comment>
                            <comment id="12573321" author="dyret" created="Thu, 28 Feb 2008 15:35:22 +0000"  >&lt;p&gt;Attaching fup.v1 which removes the special treatment of SYNCCTL in the sanity check. All tests still pass.&lt;/p&gt;</comment>
                            <comment id="12574407" author="dyret" created="Mon, 3 Mar 2008 10:05:04 +0000"  >&lt;p&gt;Committed derby-3192-fup.v1.diff with revision 633011.&lt;/p&gt;</comment>
                            <comment id="12576140" author="dyret" created="Fri, 7 Mar 2008 11:05:33 +0000"  >&lt;p&gt;I&apos;m resolving this as I have not seen any regressions in the testing so far.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12382298">DERBY-3198</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12385979">DERBY-3313</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12376735" name="derby-3192-fup.v1.diff" size="1737" author="dyret" created="Thu, 28 Feb 2008 15:35:22 +0000"/>
                            <attachment id="12375177" name="derby-3192-mark2.v1.diff" size="43647" author="dyret" created="Sun, 10 Feb 2008 14:30:46 +0000"/>
                            <attachment id="12375334" name="derby-3192-mark2.v2.diff" size="44754" author="dyret" created="Tue, 12 Feb 2008 09:26:05 +0000"/>
                            <attachment id="12375347" name="derby-3192-mark2.v3.diff" size="44441" author="dyret" created="Tue, 12 Feb 2008 12:13:25 +0000"/>
                            <attachment id="12375939" name="derby-3192-mark2.v4.diff" size="45970" author="dyret" created="Tue, 19 Feb 2008 16:39:23 +0000"/>
                            <attachment id="12376018" name="derby-3192-mark2.v5.diff" size="45717" author="dyret" created="Wed, 20 Feb 2008 13:11:40 +0000"/>
                            <attachment id="12376209" name="derby-3192-mark2.v6.diff" size="45811" author="dyret" created="Fri, 22 Feb 2008 09:36:51 +0000"/>
                            <attachment id="12376485" name="derby-3192-mark2.v7.diff" size="47460" author="dyret" created="Tue, 26 Feb 2008 14:09:09 +0000"/>
                            <attachment id="12376489" name="derby-3192-mark2.v8.diff" size="47210" author="dyret" created="Tue, 26 Feb 2008 14:29:32 +0000"/>
                            <attachment id="12370078" name="derby-3192-test.fup1.diff" size="9901" author="dyret" created="Thu, 22 Nov 2007 18:06:53 +0000"/>
                            <attachment id="12370114" name="derby-3192-test.fup2.diff" size="10455" author="dyret" created="Fri, 23 Nov 2007 10:22:39 +0000"/>
                            <attachment id="12369820" name="derby-3192-test.v1.diff" size="31596" author="dyret" created="Mon, 19 Nov 2007 21:04:40 +0000"/>
                            <attachment id="12369821" name="derby-3192-test.v1.stat" size="274" author="dyret" created="Mon, 19 Nov 2007 21:04:40 +0000"/>
                            <attachment id="12371731" name="derby-3192.prelim1.diff" size="84624" author="dyret" created="Sat, 15 Dec 2007 17:45:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Nov 2007 12:10:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30761</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0k2n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37070</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>