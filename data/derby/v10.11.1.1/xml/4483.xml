<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:53:17 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4483/DERBY-4483.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4483] Provide a way to change the hash algorithm used by BUILTIN authentication</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4483</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The BUILTIN authentication scheme protects the passwords by hashing them with the SHA-1 algorithm. It would be nice to have way to specify a different algorithm so that users can take advantage of new, stronger algorithms provided by their JCE provider if so desired.&lt;/p&gt;

&lt;p&gt;This issue tracks our response to security vulnerability CVE-2009-4269, which Marcell Major identified. See &lt;a href=&quot;http://marcellmajor.com/derbyhash.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://marcellmajor.com/derbyhash.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443752">DERBY-4483</key>
            <summary>Provide a way to change the hash algorithm used by BUILTIN authentication</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Dec 2009 12:26:25 +0000</created>
                <updated>Tue, 8 Jun 2010 14:45:19 +0100</updated>
                            <resolved>Tue, 20 Apr 2010 08:59:15 +0100</resolved>
                                    <version>10.5.3.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12792551" author="forsini" created="Fri, 18 Dec 2009 18:01:43 +0000"  >&lt;p&gt;Note: Allowing to set a different hash algorithm would have to be done at the time the database is created when the hash password is stored in the database (storing the user property) as otherwise during runtime, one would not be able to compare some hash produced by the new configured hash algorithm versus the stored hash value which would have been generated using some previous and different algorithm.&lt;/p&gt;</comment>
                            <comment id="12793125" author="knutanders" created="Mon, 21 Dec 2009 09:18:53 +0000"  >&lt;p&gt;One possibility for allowing changing hash algorithm at runtime, is to store the name of the algorithm along with the hash. Something like&lt;/p&gt;

&lt;p&gt;  sha256:ad6f438f529e021f62b3c97be2b34c3b73dd444334de08fcaa7f54fd302fb92d&lt;br/&gt;
  md5:3865ab6a65c2d5a3be1733b4408d7b74&lt;br/&gt;
  ...&lt;/p&gt;

&lt;p&gt;Then, when you change the algorithm, you&apos;ll only use the new algorithm for passwords created/updated after the change, and the authentication service would know which hash algorithm to use for each user. If no algorithm name is specified, we could fall back to the SHA-1 algorithm to stay compatible with old databases.&lt;/p&gt;</comment>
                            <comment id="12793329" author="forsini" created="Mon, 21 Dec 2009 20:07:41 +0000"  >&lt;p&gt;Sounds like a great approach, Knut - that should work indeed.&lt;/p&gt;</comment>
                            <comment id="12838848" author="knutanders" created="Fri, 26 Feb 2010 12:37:46 +0000"  >&lt;p&gt;I&apos;ve experimented with some code changes, see the attached patch&lt;br/&gt;
experiment.diff, to see if it would work to implement this along the&lt;br/&gt;
lines suggested above. Here&apos;s a description of how the patch works and&lt;br/&gt;
the behaviour we will get if we go for that approach:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;API and behaviour *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A new property called derby.authentication.builtin.algorithm is&lt;br/&gt;
introduced. This is a dynamic property that can be set at database or&lt;br/&gt;
system level. The property names a digest/hash algorithm that must be&lt;br/&gt;
supported by a security provider registered in the JVM.&lt;/p&gt;

&lt;p&gt;If this property is set to a non-empty string, calls to&lt;br/&gt;
SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY that change a password (that&lt;br/&gt;
is, set a derby.user.* property) will use the algorithm specified by&lt;br/&gt;
the property to hash the password before storing it in the&lt;br/&gt;
database. Otherwise, the old algorithm (based on SHA-1) is used.&lt;/p&gt;

&lt;p&gt;Since the hashing happens when a derby.user.* property is set, a&lt;br/&gt;
change in which algorithm to use will only take effect on passwords&lt;br/&gt;
that are changed after the algorithm was changed. This means that a&lt;br/&gt;
database may contain passwords that are hashed using different&lt;br/&gt;
algorithms. To update all the stored passwords to use the new&lt;br/&gt;
algorithm, one has to call SYSCS_SET_DATABASE_PROPERTY again on all&lt;br/&gt;
derby.user.* properties after the&lt;br/&gt;
derby.authentication.builtin.algorithm property has been set.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Errors *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If the derby.authentication.builtin.algorithm specifies an algorithm&lt;br/&gt;
that is not known by any of the registered security providers, an&lt;br/&gt;
SQLException with SQLState XJ001 (java exception) will be raised if a&lt;br/&gt;
password is attempted modified later. The SQLException is chained to a&lt;br/&gt;
NoSuchAlgorithmException.&lt;/p&gt;

&lt;p&gt;If a stored password token for a user has been hashed with an&lt;br/&gt;
algorithm that is not available on the current platform (could for&lt;br/&gt;
example happen if the database was created on another platform with a&lt;br/&gt;
different set of security providers), an SQLException with SQLState&lt;br/&gt;
XJ001 (java exception) will be raised when validating the credentials&lt;br/&gt;
for that user. The SQLException is chained to a&lt;br/&gt;
NoSuchAlgorithmException.&lt;/p&gt;

&lt;p&gt;We may want more specific messages in these situations. Currently, the&lt;br/&gt;
message looks like this if you specify a non-existing algorithm, for&lt;br/&gt;
example DOES-NOT-EXIST:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; call syscs_util.syscs_set_database_property(&apos;derby.user.kah&apos;, &apos;abc&apos;);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;java.security.NoSuchAlgorithmException: DOES-NOT-EXIST MessageDigest not available&apos;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Compatibility *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If derby.authentication.builtin.algorithm is not set or an empty&lt;br/&gt;
string, there should be no change in behaviour.&lt;/p&gt;

&lt;p&gt;Otherwise, you will get the new behaviour. The new behaviour should be&lt;br/&gt;
mostly transparent to the users. However, you will no longer be able&lt;br/&gt;
to connect from the client driver with securityMechanism=8 (strong&lt;br/&gt;
password substitution). This is because the strong password&lt;br/&gt;
substitution security mechanism needs to use the same algorithm itself&lt;br/&gt;
to produce a password token that can be compared against the token&lt;br/&gt;
stored in the database.&lt;/p&gt;

&lt;p&gt;Adding support for this on the client is not straightforward, since&lt;br/&gt;
the client would need to be told by the server which algorithm to use,&lt;br/&gt;
and this would probably require a protocol extension. It is further&lt;br/&gt;
complicated by the fact that the passwords can be stored with&lt;br/&gt;
different hash algorithms for different users. Anyways, that&apos;s for&lt;br/&gt;
another issue to address, if someone wants that functionality.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Upgrade *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Since earlier versions of Derby don&apos;t understand the new format of the&lt;br/&gt;
stored password tokens, derby.authentication.builtin.algorithm is&lt;br/&gt;
ignored if the data dictionary is not at version 10.6 or higher. The&lt;br/&gt;
old algorithm will be used instead in that case. This allows you to&lt;br/&gt;
change the password of a user while running in soft upgrade mode and&lt;br/&gt;
still be able to log in as that user if you move back to an older&lt;br/&gt;
version of Derby.&lt;/p&gt;

&lt;p&gt;If the database has been upgraded (with a full upgrade) so that the&lt;br/&gt;
data dictionary is at version 10.6 or later, or if the database was&lt;br/&gt;
created with Derby version 10.6 or later, setting the&lt;br/&gt;
derby.authentication.builtin.algorithm will modify the behaviour as&lt;br/&gt;
described in the sections above.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Implementation *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The code changes are limited to two classes (with the exception of the&lt;br/&gt;
definition of a constant in a third one).&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;AuthenticationServiceBase.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The method map(), which does the mapping from plaintext password to&lt;br/&gt;
hashed password, is extended with logic to check the&lt;br/&gt;
derby.authentication.builtin.algorithm property and the data&lt;br/&gt;
dictionary version in order to choose which algorithm to use.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BasicAuthenticationServiceImpl.java:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The method authenticateUser() is extended with logic so that it&lt;br/&gt;
understands which algorithm has been used to hash a stored&lt;br/&gt;
password. It applies the same algorithm on the user-supplied password&lt;br/&gt;
and compares it with the one stored in the database.&lt;/p&gt;

&lt;p&gt;The existing code in these two classes already had a mechanism to&lt;br/&gt;
distinguish between different hashing approaches. It did this by&lt;br/&gt;
prefixing the stored hash with an identifier telling which approach&lt;br/&gt;
was used. The code in the patch piggybacked on that mechanism and&lt;br/&gt;
prefixed the tokens with a different identifier. Also, the name of the&lt;br/&gt;
algorithm (for instance SHA-256 or MD5) is appended to the token, with&lt;br/&gt;
a colon separating the hash and the name of the algorithm.&lt;/p&gt;

&lt;p&gt;One somewhat confusing detail is that the old authentication scheme is&lt;br/&gt;
called the new authentication scheme, both in comments and names of&lt;br/&gt;
constants. We may want to rename it to something that&apos;s more neutral&lt;br/&gt;
to where it is on the evolutionary path. SHA-1 authentication scheme,&lt;br/&gt;
perhaps.&lt;/p&gt;

&lt;p&gt;For the new authentication scheme implemented here, I tentatively&lt;br/&gt;
picked the name &quot;configurable hash authentication scheme&quot;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Internal differences between the schemes *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are some differences in how the hashes/digests are generated in&lt;br/&gt;
the two schemes, apart from the obvious that the old scheme always&lt;br/&gt;
uses SHA-1 and the new scheme can use a variety of algorithms.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Translating passwords into byte arrays&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The old scheme uses StringUtil.toHexByte() to convert the password to&lt;br/&gt;
a byte array. This code however assumes that all characters are within&lt;br/&gt;
the ISO-8859-1 range by only looking at the eight lower bits. It&lt;br/&gt;
doesn&apos;t break when characters outside this range is used, but it does&lt;br/&gt;
not give you any benefit from the extra bits/bytes you&apos;ve provided&lt;br/&gt;
either. Therefore, I used String.getBytes(&quot;UTF-8&quot;) instead, which is&lt;br/&gt;
simpler and uses all bits regardless of which Unicode characters you&lt;br/&gt;
have in your password.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Salting the hash&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The old scheme created a hash from the password alone. This means that&lt;br/&gt;
if two users have the same password, they will have the same hashed&lt;br/&gt;
password. In the new scheme, the user name and the password are&lt;br/&gt;
concatenated before applying the hash function. This means that two&lt;br/&gt;
users with the same password will (most likely) not have the same&lt;br/&gt;
hashed password, which makes a dictionary attack more time&lt;br/&gt;
consuming. Although it&apos;s not strictly necessary within the context of&lt;br/&gt;
this issue, it sounded like a cheap way to enhance the security while&lt;br/&gt;
we&apos;re first at it.&lt;/p&gt;

&lt;p&gt;For those interested, I found this blog entry well-written and an easy&lt;br/&gt;
to understand introduction to the technique of salting password&lt;br/&gt;
hashes:&lt;br/&gt;
&lt;a href=&quot;http://pentesterconfessions.blogspot.com/2008/05/secure-salt-for-tastey-hashes.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://pentesterconfessions.blogspot.com/2008/05/secure-salt-for-tastey-hashes.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(The current scheme in Derby is similar to scenario 1, described in&lt;br/&gt;
that entry, and the proposed new scheme is similar to scenario 2.)&lt;/p&gt;



&lt;p&gt;Comments and suggestions to improve this proposal are welcome!&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="12838850" author="knutanders" created="Fri, 26 Feb 2010 12:52:18 +0000"  >&lt;p&gt;One note about testing:&lt;/p&gt;

&lt;p&gt;There are no tests in experiment.diff. There will of course have to be tests in the final patch. In addition to tests of the basic functionality, there should also be upgrade tests to verify that it works as expected in full and soft upgrade, as well as that you can move back to older versions after a soft upgrade. I don&apos;t know if the upgrade tests currently support tests that use authentication. I will have to look at that.&lt;/p&gt;

&lt;p&gt;I did however run derbyall and suites.All with the patch and saw no failures (as expected since the old code path was still used in all tests).&lt;/p&gt;

&lt;p&gt;I also ran derbyall and suites.All with a variant of the patch that hard-coded the use of the new scheme with the SHA-256 algorithm. Only one test failed, NSSecurityMechanismTest. This was an expected failure because of the incompatibility with the strong password substitution mechanism mentioned in my previous comment.&lt;/p&gt;</comment>
                            <comment id="12838974" author="bryanpendleton" created="Fri, 26 Feb 2010 18:32:24 +0000"  >&lt;p&gt;Knut Anders, thanks &lt;b&gt;very&lt;/b&gt; much for the detailed writeup. It will be very helpful to people studying your proposal.&lt;/p&gt;

&lt;p&gt;&amp;gt; This means that a database may contain passwords that are hashed using different algorithms. &lt;/p&gt;

&lt;p&gt;Can the Derby administrator or DBA tell that they are in this state? Is there a way to know&lt;br/&gt;
which user/passwords are hashed with which algorithm, during a situation in which my database has&lt;br/&gt;
such a mixture?&lt;/p&gt;</comment>
                            <comment id="12839215" author="knutanders" created="Sat, 27 Feb 2010 10:05:24 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; This means that a database may contain passwords that are hashed using different algorithms.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Can the Derby administrator or DBA tell that they are in this state? Is there a way to know&lt;br/&gt;
&amp;gt; which user/passwords are hashed with which algorithm, during a situation in which my database has&lt;br/&gt;
&amp;gt; such a mixture? &lt;/p&gt;

&lt;p&gt;If the DBA has a list of all users in the system, he could query the derby.user.* database properties and look at their suffixes. For example:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select name, substr(pw, length(pw) - 9, 10) from&lt;br/&gt;
&amp;gt; (select u, syscs_util.syscs_get_database_property(rtrim(&apos;derby.user.&apos;||u))&lt;br/&gt;
&amp;gt; from (values &apos;knut&apos;, &apos;bryan&apos;, &apos;dag&apos;) v(u)) s(name, pw);&lt;br/&gt;
NAME |2         &lt;br/&gt;
----------------&lt;br/&gt;
knut |5de26b791b&lt;br/&gt;
bryan|f4a77c:MD5&lt;br/&gt;
dag  |a2:SHA-512&lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;Here, the user &apos;knut&apos; has a password that&apos;s hashed with the old scheme (there&apos;s no algorithm name in the suffix), &apos;bryan&apos; has a password hashed with MD5, and &apos;dag&apos; with SHA-512.&lt;/p&gt;

&lt;p&gt;I don&apos;t think we currently have any way of listing all database properties, so the DBA must know all users up front in order to perform this query. It might be useful (in a separate JIRA) to add a new diagnostic table function to improve the monitoring capabilities. Then we could simply have done something like this:&lt;/p&gt;

&lt;p&gt;select * from table ( syscs_diag.database_properties(&apos;derby.user.%&apos;) ) p;&lt;/p&gt;</comment>
                            <comment id="12840667" author="knutanders" created="Wed, 3 Mar 2010 14:18:40 +0000"  >&lt;p&gt;Attaching an upgrade test that verifies that the new algorithm is only used in hard-upgraded databases. The upgrade test framework does not support tests that use authentication, but I found that the roles tests worked around this by creating a separate database and manually enabling authentication on it, so I followed that pattern.&lt;/p&gt;</comment>
                            <comment id="12841979" author="rhillegas" created="Fri, 5 Mar 2010 19:13:44 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;Thanks for the experiment.patch increment. I had a couple polishing issues:&lt;/p&gt;

&lt;p&gt;o Thanks for the extensive write-up explaining how the new code works. It would be helpful if that writeup were included in a header comment somewhere.&lt;/p&gt;

&lt;p&gt;o I did not understand why the prefixes 3b60 and 3b61 were chosen to flag authentication schemes. Since you have been in there and probably understand why those strings are used rather than some other strings, it would be helpful if you could record that reasoning in a comment.&lt;/p&gt;

&lt;p&gt;o The symbol name ID_PATTERN_NEW_SCHEME suggests that there is an even older scheme which might still be used in really old databases. Is that possible? If so, does BasicAuthenticationServiceImpl.encryptPasswordUsingStoredAlgorithm() need to handle another case? If not, it would be less confusing if this symbol were renamed so that it did not suggest an impossibile situation to unwary readers like me.&lt;/p&gt;

&lt;p&gt;o If AuthenticationServiceBase.encryptPassword() really is only used by the newly introduced configurable scheme, it would be helpful if the name of this method indicated that.&lt;/p&gt;

&lt;p&gt;o I agree that it would be good to add a more specific error message in that method.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12842642" author="knutanders" created="Mon, 8 Mar 2010 12:46:00 +0000"  >&lt;p&gt;Thanks for looking at the patch and providing these useful comments&lt;br/&gt;
and suggestions, Rick! I&apos;ve added my responses below.&lt;/p&gt;

&lt;p&gt;&amp;gt; o Thanks for the extensive write-up explaining how the new code&lt;br/&gt;
&amp;gt;   works. It would be helpful if that writeup were included in a&lt;br/&gt;
&amp;gt;   header comment somewhere.&lt;/p&gt;

&lt;p&gt;That&apos;s a good suggestion. Will do that.&lt;/p&gt;

&lt;p&gt;&amp;gt; o I did not understand why the prefixes 3b60 and 3b61 were chosen to&lt;br/&gt;
&amp;gt;   flag authentication schemes. Since you have been in there and&lt;br/&gt;
&amp;gt;   probably understand why those strings are used rather than some&lt;br/&gt;
&amp;gt;   other strings, it would be helpful if you could record that&lt;br/&gt;
&amp;gt;   reasoning in a comment.&lt;/p&gt;

&lt;p&gt;I&apos;m afraid I have no idea where the prefix 3b60 comes from. I&lt;br/&gt;
generated 3b61 just by adding 1 to the first prefix. The only&lt;br/&gt;
requirement, as far as I can see, is that the prefixes must be&lt;br/&gt;
unique. I&apos;ll add a comment saying that.&lt;/p&gt;

&lt;p&gt;&amp;gt; o The symbol name ID_PATTERN_NEW_SCHEME suggests that there is an&lt;br/&gt;
&amp;gt;   even older scheme which might still be used in really old&lt;br/&gt;
&amp;gt;   databases. Is that possible? If so, does&lt;br/&gt;
&amp;gt;   BasicAuthenticationServiceImpl.encryptPasswordUsingStoredAlgorithm()&lt;br/&gt;
&amp;gt;   need to handle another case? If not, it would be less confusing if&lt;br/&gt;
&amp;gt;   this symbol were renamed so that it did not suggest an impossibile&lt;br/&gt;
&amp;gt;   situation to unwary readers like me.&lt;/p&gt;

&lt;p&gt;There is no other scheme that must be handled in the current code. The&lt;br/&gt;
naming is probably a remnant from an old Cloudscape release which&lt;br/&gt;
contained another (&quot;old&quot;) authentication scheme. I think I&apos;ll go ahead&lt;br/&gt;
with the suggestion from the writeup and rename the &quot;new&lt;br/&gt;
authentication scheme&quot; to &quot;SHA-1 authentication scheme&quot; and update&lt;br/&gt;
symbol names accordingly.&lt;/p&gt;

&lt;p&gt;&amp;gt; o If AuthenticationServiceBase.encryptPassword() really is only used&lt;br/&gt;
&amp;gt;   by the newly introduced configurable scheme, it would be helpful&lt;br/&gt;
&amp;gt;   if the name of this method indicated that.&lt;/p&gt;

&lt;p&gt;There are two encryptPassword() methods with different signatures in&lt;br/&gt;
that class; one for the the existing scheme and one for the&lt;br/&gt;
configurable scheme. Adding the name of the scheme to those methods&lt;br/&gt;
sounds like a good suggestion.&lt;/p&gt;

&lt;p&gt;&amp;gt; o I agree that it would be good to add a more specific error message&lt;br/&gt;
&amp;gt;   in that method.&lt;/p&gt;

&lt;p&gt;Will do that.&lt;/p&gt;</comment>
                            <comment id="12844479" author="knutanders" created="Fri, 12 Mar 2010 12:24:48 +0000"  >&lt;p&gt;Attaching a new patch (derby-4483-1a) which merges the experiment patch and the upgrade test patch. Additionally, it contains the following changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Some test cases have been added to AuthenticationTest (suggestions for more tests are welcome!)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Comments have been expanded to contain most of the information in the writeup&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Renamed the old authentication mechanism to prevent confusion (including changes to constant names and method names)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added a more specific error message for the case where an invalid algorithm name has been specified:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ij&amp;gt; call syscs_util.syscs_set_database_property(&apos;derby.user.kah&apos;, &apos;test&apos;);&lt;br/&gt;
ERROR XBCXW: The message digest algorithm &apos;xyz&apos; is not supported by any of the available cryptography providers. Please install a cryptography provider that supports that algorithm, or specify another algorithm in the derby.authentication.builtin.algorithm property.&lt;br/&gt;
ERROR XJ001: Java exception: &apos;xyz MessageDigest not available: java.security.NoSuchAlgorithmException&apos;.&lt;/p&gt;

&lt;p&gt;I believe this patch is ready for commit.&lt;/p&gt;</comment>
                            <comment id="12844529" author="rhillegas" created="Fri, 12 Mar 2010 15:00:18 +0000"  >&lt;p&gt;Thanks for these changes, Knut. +1&lt;/p&gt;</comment>
                            <comment id="12844554" author="knutanders" created="Fri, 12 Mar 2010 16:03:54 +0000"  >&lt;p&gt;Thanks Rick! I&apos;ve committed the patch with revision 922304.&lt;/p&gt;

&lt;p&gt;I plan to post a follow up patch which adds more details to the comments about strong password substitution. The current comments state that it can be used with BUILTIN authentication, but now that&apos;s only partially true.&lt;/p&gt;</comment>
                            <comment id="12846454" author="bryanpendleton" created="Wed, 17 Mar 2010 16:23:01 +0000"  >&lt;p&gt;It seems like the only call to StringUtil.toHexByte is now in AuthenticationServiceBase.&lt;/p&gt;

&lt;p&gt;Would it make sense to move the toHexByte method from StringUtil to AuthenticationServiceBase,&lt;br/&gt;
and make it private there?&lt;/p&gt;</comment>
                            <comment id="12846534" author="knutanders" created="Wed, 17 Mar 2010 19:08:38 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;That sounds like a good idea, since we&apos;d want to encourage the use of the more robust String.getBytes(&quot;UTF-8&quot;) in new code.&lt;/p&gt;</comment>
                            <comment id="12846867" author="knutanders" created="Thu, 18 Mar 2010 12:09:54 +0000"  >&lt;p&gt;Here&apos;s a patch that updates some comments with information about the extra requirement for strong password substitution (touches code in the client and the server, as well as in the engine). It also fixes up one more symbol name that refers to the SHA-1 based old scheme as the new scheme.&lt;/p&gt;</comment>
                            <comment id="12846874" author="knutanders" created="Thu, 18 Mar 2010 12:27:54 +0000"  >&lt;p&gt;Committed comments.diff to trunk with revision 924746.&lt;/p&gt;</comment>
                            <comment id="12848107" author="knutanders" created="Mon, 22 Mar 2010 12:44:16 +0000"  >&lt;p&gt;Here&apos;s a patch that moves toHexByte() from StringUtil to AuthenticationServiceBase and makes it private. It also removes the offset and length parameters because all callers operate on the entire string, so they&apos;re not needed, and since the original method also seems to have a couple of bugs in the handling of offset/length, it&apos;s better to remove those parameters to prevent other code from starting using them.&lt;/p&gt;</comment>
                            <comment id="12848647" author="knutanders" created="Tue, 23 Mar 2010 10:38:54 +0000"  >&lt;p&gt;Committed toHexByte.diff to trunk with revision 926520.&lt;/p&gt;</comment>
                            <comment id="12848786" author="knutanders" created="Tue, 23 Mar 2010 16:25:05 +0000"  >&lt;p&gt;Attached is a new patch (2a) that enables the configurable hash scheme by default in new databases. The patch makes SHA-256 the default algorithm. SHA-256 is believed to be more secure than the currently used SHA-1 algorithm, and it&apos;s also one of the algorithms NIST recommended U.S. Government agencies to use instead of SHA-1 (see &lt;a href=&quot;http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html#Approved%20Algorithms&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html#Approved%20Algorithms&lt;/a&gt;). The default algorithm can easily be changed, though, if someone thinks we should have another default. Also, it&apos;s possible to change the default in a future release just by changing the value of a constant, and that should not have any compatibility implications that I&apos;m aware of, so we won&apos;t be stuck forever with the algorithm we pick here.&lt;/p&gt;

&lt;p&gt;Making the configurable hash authentication scheme the default authentication scheme has one known compatibility implication: Strong password substitution when exchanging credentials between the network client and the server will not work in new databases unless you manually disable the configurable hash authentication scheme first (by setting the derby.authentication.builtin.algorithm property to null). Because of this, I&apos;m attaching a release note as well.&lt;/p&gt;

&lt;p&gt;Here&apos;s a description of the changes made by the patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;iapi/reference/Property.java: added a constant for the default value (SHA-256) of the property that enables the new scheme&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;impl/sql/catalog/DataDictionaryImpl.java: set the database property when the database is created (note: only on database creation, so upgraded databases will continue working the same way as before)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tests/jdbcapi/AuthenticationTest.java: added test case to verify that the property was initialized to SHA-256&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tests/upgradeTests/Changes10_6.java: added test case to verify that the authentication scheme does not change on upgrade&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;tests/derbynet/NSSecurityMechanismTest.java: disable the new scheme for the test case that tests strong password substitution together with BUILTIN authentication&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch. Comments on the patch and the release note would be appreciated. Thanks.&lt;/p&gt;</comment>
                            <comment id="12848956" author="bryanpendleton" created="Tue, 23 Mar 2010 23:05:53 +0000"  >&lt;p&gt;The release note is clear and well-written. Thanks for putting it together. +1&lt;/p&gt;

&lt;p&gt;Would there be any benefit to augmenting the client-side error message that is received when using strong password substitution against a conf-hash DB, so that the client-side message suggests this alternate possibility for the error? Something along the lines of:&lt;/p&gt;

&lt;p&gt;  ERROR 08004: Connection authentication failure occurred.  Reason: userid or password invalid, or the database may be using an alternate password encryption scheme.&lt;/p&gt;</comment>
                            <comment id="12848970" author="kmarsden" created="Wed, 24 Mar 2010 00:04:29 +0000"  >&lt;p&gt;It might be nice even if the error message is somewhat prescriptive without being too wordy like:&lt;/p&gt;

&lt;p&gt;ERROR 08004: Connection authentication failure occurred. Reason: userid or password invalid, or the database may be using an alternate password encryption scheme.  If this error started after upgrade refer to the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4483&quot; title=&quot;Provide a way to change the hash algorithm used by BUILTIN authentication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4483&quot;&gt;&lt;del&gt;DERBY-4483&lt;/del&gt;&lt;/a&gt; release note for options.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if there is a precedent for referring to Jira issues in messages, but it might help users with self service if they encounter the issue on upgrade.&lt;/p&gt;</comment>
                            <comment id="12849175" author="knutanders" created="Wed, 24 Mar 2010 13:15:52 +0000"  >&lt;p&gt;Thanks for the suggestions about the error message. That sounds like a good idea. The attached patch (errormsg.diff) makes BasicAuthenticationServiceImpl.authenticateUser() raise an exception with a custom error message if strong password substitution is enabled. Now it will look this on the client:&lt;/p&gt;

&lt;p&gt;ERROR 08004: DERBY SQL error: SQLCODE: -1, SQLSTATE: 08004, SQLERRMC: Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme which is not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4483&quot; title=&quot;Provide a way to change the hash algorithm used by BUILTIN authentication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4483&quot;&gt;&lt;del&gt;DERBY-4483&lt;/del&gt;&lt;/a&gt; for options.&lt;/p&gt;

&lt;p&gt;I think this patch could go in independently of the patch that changes the default, if the wording in the new message sounds OK.&lt;/p&gt;</comment>
                            <comment id="12849195" author="chaase3" created="Wed, 24 Mar 2010 14:12:15 +0000"  >&lt;p&gt;Is there a precedent for having an error message that is specific to a particular release? It could be a maintenance headache because you&apos;d have to remember to remove the last sentence for the next release.&lt;/p&gt;

&lt;p&gt;I would guess that if they got the message and were puzzled by it, they might go to the release notes anyway.&lt;/p&gt;</comment>
                            <comment id="12849204" author="bryanpendleton" created="Wed, 24 Mar 2010 14:39:44 +0000"  >&lt;p&gt;That error message reads fine to me, thanks for putting it together. I agree that mentioning&lt;br/&gt;
the issue in the error message is unusual, but I think it is worth the risk if it helps people&lt;br/&gt;
track down the cause of what might appear to be a frustrating regression in behavior.&lt;/p&gt;</comment>
                            <comment id="12849526" author="knutanders" created="Wed, 24 Mar 2010 23:35:55 +0000"  >&lt;p&gt;Thanks Kim and Bryan.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if the last sentence would have to be removed for the next release. Since users may skip versions when they upgrade, it may be just as relevant in future releases. But then there&apos;s the problem that we say &quot;refer to the release note&quot; although it won&apos;t be mentioned in the release notes for that future release, so I agree it may be somewhat confusing.&lt;/p&gt;

&lt;p&gt;Perhaps we should keep the sentence for now and file a JIRA issue to get it removed from trunk once the 10.6 branch has been cut? Then all 10.6.X releases will give this hint, hopefully helping most of those who&apos;ll be hit by the issue, while future feature releases won&apos;t have a reference to the release notes for an ancient release. And would it be better to say &quot;refer to the release notes for Derby 10.6.1&quot; instead of &quot;release note for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4483&quot; title=&quot;Provide a way to change the hash algorithm used by BUILTIN authentication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4483&quot;&gt;&lt;del&gt;DERBY-4483&lt;/del&gt;&lt;/a&gt;&quot;? That may make it clearer where to look if a user gets this message in a later release.&lt;/p&gt;</comment>
                            <comment id="12849686" author="knutanders" created="Thu, 25 Mar 2010 12:40:29 +0000"  >&lt;p&gt;I went ahead and committed errormsg.diff (revision 927367) and derby-4483-2a.diff (revision 927368) as they were, since the only unresolved issue now appears to be the wording of the error message, which could easily be changed once we reach agreement.&lt;/p&gt;

&lt;p&gt;I&apos;m also attaching an updated release note which contains the error message used in the current code on trunk.&lt;/p&gt;</comment>
                            <comment id="12850207" author="rhillegas" created="Fri, 26 Mar 2010 16:46:01 +0000"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;The (2a) patch looks good to me. +1 Thanks.&lt;/p&gt;</comment>
                            <comment id="12851490" author="knutanders" created="Tue, 30 Mar 2010 19:03:11 +0100"  >&lt;p&gt;It looks like we&apos;ll have to change the default algorithm to SHA-1, since SHA-256 is not supported on weme 6.2 (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4602&quot; title=&quot;10 failures and 11 errors with IBM weme6.2/j9/cdc-foundation after revision 922304 for DERBY-4483&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4602&quot;&gt;&lt;del&gt;DERBY-4602&lt;/del&gt;&lt;/a&gt;). It seems the only algorithms available on all supported platforms are SHA-1 and MD5.&lt;/p&gt;</comment>
                            <comment id="12851493" author="knutanders" created="Tue, 30 Mar 2010 19:07:54 +0100"  >&lt;p&gt;To make it easier to choose another algorithm than the default, we may want to handle derby.authentication.builtin.algorithm more like derby.database.sqlAuthorization during database creation. If d.d.sqlAuthorization is set as a system property when a database is created, its value will be persisted in the database. This way it will be possible to change the algorithm at database creation time without executing any SQL statements.&lt;/p&gt;</comment>
                            <comment id="12851516" author="rhillegas" created="Tue, 30 Mar 2010 20:11:42 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;I am not thrilled by using SHA-1 as the default algorithm. It is not considered secure enough for use by the U.S. government as of this year; see &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA_hash_functions&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/SHA_hash_functions&lt;/a&gt; I would prefer to see a solution like this:&lt;/p&gt;

&lt;p&gt;1) If the user specifies an algorithm, use it&lt;/p&gt;

&lt;p&gt;2) Otherwise, try to use SHA-256&lt;/p&gt;

&lt;p&gt;3) If SHA_256 isn&apos;t available, fall back on SHA-1&lt;/p&gt;

&lt;p&gt;4) If even that isn&apos;t available, then raise an error&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12851805" author="knutanders" created="Wed, 31 Mar 2010 11:20:03 +0100"  >&lt;p&gt;Thanks Rick. I&apos;m fine with that approach, and have posted a patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4602&quot; title=&quot;10 failures and 11 errors with IBM weme6.2/j9/cdc-foundation after revision 922304 for DERBY-4483&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4602&quot;&gt;&lt;del&gt;DERBY-4602&lt;/del&gt;&lt;/a&gt; that implements what you suggested. I think this change warrants a release note in itself, though, as databases created on a more capable platform may now need some extra maintenance steps before being usable on a more restricted platform if authentication has been enabled.&lt;/p&gt;</comment>
                            <comment id="12858780" author="knutanders" created="Tue, 20 Apr 2010 08:59:15 +0100"  >&lt;p&gt;The work on this issue has been completed, so I&apos;m marking it as resolved. If there are more problems, please file new JIRA issues to handle those.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12442969">DERBY-4468</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12458937">DERBY-4579</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12460598">DERBY-4602</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12439154" name="comments.diff" size="5397" author="knutanders" created="Thu, 18 Mar 2010 12:09:54 +0000"/>
                            <attachment id="12438612" name="derby-4483-1a.diff" size="33323" author="knutanders" created="Fri, 12 Mar 2010 12:24:48 +0000"/>
                            <attachment id="12438611" name="derby-4483-1a.stat" size="672" author="knutanders" created="Fri, 12 Mar 2010 12:24:48 +0000"/>
                            <attachment id="12439586" name="derby-4483-2a.diff" size="6425" author="knutanders" created="Tue, 23 Mar 2010 16:25:04 +0000"/>
                            <attachment id="12439585" name="derby-4483-2a.stat" size="439" author="knutanders" created="Tue, 23 Mar 2010 16:25:04 +0000"/>
                            <attachment id="12439653" name="errormsg.diff" size="3562" author="knutanders" created="Wed, 24 Mar 2010 13:15:52 +0000"/>
                            <attachment id="12437172" name="experiment.diff" size="13180" author="knutanders" created="Fri, 26 Feb 2010 12:37:46 +0000"/>
                            <attachment id="12439775" name="releaseNote.html" size="7041" author="knutanders" created="Thu, 25 Mar 2010 12:40:29 +0000"/>
                            <attachment id="12439587" name="releaseNote.html" size="6752" author="knutanders" created="Tue, 23 Mar 2010 16:25:04 +0000"/>
                            <attachment id="12439451" name="toHexByte.diff" size="5029" author="knutanders" created="Mon, 22 Mar 2010 12:44:16 +0000"/>
                            <attachment id="12437740" name="upgrade-test.diff" size="7648" author="knutanders" created="Wed, 3 Mar 2010 14:18:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Dec 2009 18:01:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31248</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0q2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38043</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>