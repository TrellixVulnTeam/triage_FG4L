<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:30:24 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6096/DERBY-6096.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6096] OutOfMemoryError with Clob or Blob hash join: DataTypeDescriptor.estimatedMemoryUsage()  has no case for BLOB or CLOB so would underestimate memory usage for those types at zero</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6096</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In discussion on derby-dev regarding how much memory is used for hash joins, Knut noted:&lt;/p&gt;

&lt;p&gt;I haven&apos;t verified, but I think HashJoinStrategy uses&lt;br/&gt;
DataTypeDescriptor.estimatedMemoryUsage() to estimate how much memory&lt;br/&gt;
the hash table will consume. That method has no case for BLOB or CLOB,&lt;br/&gt;
so it looks as if it will return zero for LOB columns. If that&apos;s so, it&lt;br/&gt;
will definitely overestimate how many rows fits in maxMemoryPerTable&lt;br/&gt;
kilobytes if the rows contain LOBs.&lt;/p&gt;


&lt;p&gt;DataTypeDescriptor.estimatedMemoryUsage() should be updated to include BLOB and CLOB and we should try verify if this theory is correct with a reproduction.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12635128">DERBY-6096</key>
            <summary>OutOfMemoryError with Clob or Blob hash join: DataTypeDescriptor.estimatedMemoryUsage()  has no case for BLOB or CLOB so would underestimate memory usage for those types at zero</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Mon, 4 Mar 2013 14:13:22 +0000</created>
                <updated>Mon, 9 Jun 2014 13:57:02 +0100</updated>
                            <resolved>Thu, 13 Jun 2013 23:43:26 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.3.0</version>
                    <version>10.9.1.0</version>
                    <version>10.10.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13593431" author="kmarsden" created="Tue, 5 Mar 2013 14:25:37 +0000"  >&lt;p&gt;I am out today but thought I would post where I was on trying to get a reproduction for the memory usage with Clob hash joins.  I created this fixture in memory.ClobMemTest.  At one point I was getting an OOM on the query if derby.language.maxMemoryPerTable wasn&apos;t set running -Xmx64M   but then started cleaning up and it no longer occurs.  I will look more closely tomorrow but just wanted to post where I am and get input on how to reproduce.&lt;/p&gt;

&lt;p&gt;    public void testClobHashJoin() throws SQLException {&lt;br/&gt;
        Statement s = createStatement();&lt;br/&gt;
        try {&lt;br/&gt;
            // Setting maxMemoryPerTable to 0 allows the query to complete&lt;br/&gt;
            // until OOM is fixed.&lt;br/&gt;
            //println(&quot;setSystemProperty(\&quot;derby.language.maxMemoryPerTable\&quot;, \&quot;0\&quot;)&quot;);&lt;br/&gt;
            //setSystemProperty(&quot;derby.language.maxMemoryPerTable&quot;, &quot;0&quot;);&lt;/p&gt;

&lt;p&gt;            s.executeUpdate(&quot;CREATE TABLE T1 (ID INT , NAME VARCHAR(30))&quot;);&lt;br/&gt;
            s.executeUpdate(&quot;CREATE TABLE T2 (ID INT , CDATA CLOB(1G))&quot;);&lt;br/&gt;
            PreparedStatement ps = prepareStatement(&quot;insert into t1 values(?,?)&quot;);&lt;br/&gt;
            PreparedStatement ps2 = prepareStatement(&quot;insert into t2 values(?,?)&quot;);&lt;br/&gt;
            // insert 8 long rows&lt;br/&gt;
            for (int i = 1; i &amp;lt;= 8; i++) &lt;/p&gt;
{
                ps.setInt(1, i);
                ps.setString(2, &quot;name&quot; + i);
                ps.executeUpdate();
                ps2.setInt(1, i);
                ps2.setCharacterStream(2, new LoopingAlphabetReader(
                        LONG_CLOB_LENGTH), LONG_CLOB_LENGTH);
                ps2.executeUpdate();
            }
&lt;p&gt;            s.execute(&quot;CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)&quot;);&lt;br/&gt;
            // Do a query. Force a hash join&lt;br/&gt;
            PreparedStatement ps3 = prepareStatement(&quot;SELECT * FROM t1, t2 --DERBY-PROPERTIES joinStrategy=hash\n&quot;&lt;br/&gt;
                    + &quot;where t1.id = t2.id AND t1.id &amp;lt; 8  &quot;);&lt;br/&gt;
            ResultSet rs = ps3.executeQuery();&lt;br/&gt;
            int i = 0;&lt;br/&gt;
            for (; rs.next(); i++) &lt;/p&gt;
{
                // just fetch don&apos;t materialize results
                // derby.tests.trace prints memory usage
                println(&quot;TotalMemory:&quot; + Runtime.getRuntime().totalMemory()
                        + &quot; &quot; + &quot;Free Memory:&quot;
                        + Runtime.getRuntime().freeMemory());
            }
&lt;p&gt;            assertEquals(&quot;Expected 7 rows, got + i&quot;, 7, i);&lt;br/&gt;
            rs.close();&lt;br/&gt;
            RuntimeStatisticsParser p = SQLUtilities&lt;br/&gt;
                    .getRuntimeStatisticsParser(s);&lt;br/&gt;
            println(p.toString());&lt;br/&gt;
            assertTrue(p.usedHashJoin());&lt;/p&gt;

&lt;p&gt;        } finally &lt;/p&gt;
{
            removeSystemProperty(&quot;derby.language.maxMemoryPerTable&quot;);
            s.execute(&quot;CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0)&quot;);
                  }
&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="13593464" author="knutanders" created="Tue, 5 Mar 2013 15:15:35 +0000"  >&lt;p&gt;You may have better luck with smaller LOBs. LONG_CLOB_LENGTH is 18000000, which means the SQLClob objects inserted into BackingStoreHashtable aren&apos;t materialized and don&apos;t take up that much space. Using a larger number of smaller LOBs (so small that they don&apos;t overflow to another page) should increase the memory footprint, as those LOBs will come out of store fully materialized.&lt;/p&gt;</comment>
                            <comment id="13593468" author="knutanders" created="Tue, 5 Mar 2013 15:20:21 +0000"  >&lt;p&gt;The attached program, D6096.java, produces an OOME in BackingStoreHashtable during a join when I run it with -Xmx64M.&lt;/p&gt;

&lt;p&gt;The program inserts 1500 32KB BLOBs into a table and joins the table with itself.&lt;/p&gt;</comment>
                            <comment id="13593597" author="kmarsden" created="Tue, 5 Mar 2013 17:09:16 +0000"  >&lt;p&gt;Thank you Knut.I was able to reproduce the OOM with your program. Also  a quick hack of DataTypeDescriptor.estimatedMemoryUsage()  rectifies the problem and verifies your original theory. Updating the summary accordingly.&lt;/p&gt;
</comment>
                            <comment id="13594913" author="mikem" created="Wed, 6 Mar 2013 18:10:25 +0000"  >&lt;p&gt;what estimate is proposed for estimatedMemoryUsage of blob&apos;s clob&apos;s?  Since they are variable length objects it is hard to know what actual size they are.  &lt;br/&gt;
Given your repro program, it might be reasonable to use 32k and assume store will stream the rest of each.  definitely better than 0.  &lt;/p&gt;

&lt;p&gt;Note that with the fix we may use way less memory for the query, and for some like your repro that will be good.  But for others that did not see errors their&lt;br/&gt;
queries may run slower now after the fix when we use less memory.  This may especially be a concern if the fix is to be backported.&lt;/p&gt;</comment>
                            <comment id="13595119" author="kmarsden" created="Wed, 6 Mar 2013 21:04:34 +0000"  >&lt;p&gt;My thought was to just match the existing entries for LONGVARCHAR_TYPE_ID LONGVARBIT_TYPE_ID&lt;br/&gt;
which is:&lt;/p&gt;

&lt;p&gt; /* Who knows? Let&apos;s just use some big number */&lt;br/&gt;
				return 10000.0;&lt;/p&gt;

&lt;p&gt;I see the concern with backporting. Maybe the fix should just go into 10.10 along with a release note with a  work around for performance issues of setting derby.language.maxMemoryPerTable higher. Maybe documenting derby.language.maxMemoryPerTable would be good at the same time.  &lt;/p&gt;</comment>
                            <comment id="13619798" author="kmarsden" created="Tue, 2 Apr 2013 14:39:23 +0100"  >&lt;p&gt;This is the proposed code change for this issue, which is to have BLOB and CLOB match the other long types at an estimated 10,000 bytes.  I still need to add tests.  &lt;/p&gt;

&lt;p&gt;This change will require a release note as users my want to increase derby.language.maxMemoryPerTable to accomodate that this value is now being used with BLOB and CLOB.&lt;/p&gt;</comment>
                            <comment id="13619946" author="kmarsden" created="Tue, 2 Apr 2013 16:59:26 +0100"  >&lt;p&gt;derby-6096_diff.txt is the full patch with tests based on Knut&apos;s repro. Tests are in progress, please review.&lt;/p&gt;</comment>
                            <comment id="13620147" author="kmarsden" created="Tue, 2 Apr 2013 20:14:24 +0100"  >&lt;p&gt;Suites.All, derbyall, and the memory suite with -Xmx64M passed with the derby-6096_diff.txt patch except for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6138&quot; title=&quot;org.apache.derbyTesting.functionTests.tests.store.ClassLoaderBootTest fails with  sealing violation: package org.apache.derby.iapi.services.sanity is sealed depending on classpath order&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6138&quot;&gt;&lt;del&gt;DERBY-6138&lt;/del&gt;&lt;/a&gt; which passed on rerun with a different classpath and is not likely related.&lt;/p&gt;</comment>
                            <comment id="13620154" author="mikem" created="Tue, 2 Apr 2013 20:24:05 +0100"  >&lt;p&gt;i reviewed the change, and seems a good change to me.  some day we probably should just raise the default internal maxMemoryPerTable on a major release boundary to reflect increased default memory for most users, or maybe come up with a better zero admin auto config for it.  1 meg seems pretty small.  &lt;/p&gt;</comment>
                            <comment id="13620177" author="kmarsden" created="Tue, 2 Apr 2013 20:45:42 +0100"  >&lt;p&gt;Attached is a release note for this issue. I am not sure if it has too much information as I don&apos;t think the current default maxMemoryPerTable is published and I know there has been talk of increasing  it.&lt;/p&gt;</comment>
                            <comment id="13620178" author="mamtas" created="Tue, 2 Apr 2013 20:45:42 +0100"  >&lt;p&gt;I reviewed the change too and it looks good to me. Just one minor comment, in the tests, should we initialize the data to be inserted into clob and blob data types?&lt;/p&gt;</comment>
                            <comment id="13620232" author="kmarsden" created="Tue, 2 Apr 2013 21:17:24 +0100"  >&lt;p&gt;Thanks Mamta. derby-6096_diff2.txt fills the arrays.&lt;/p&gt;</comment>
                            <comment id="13621617" author="kmarsden" created="Thu, 4 Apr 2013 02:14:39 +0100"  >&lt;p&gt;Sending        java\engine\org\apache\derby\iapi\types\DataTypeDescriptor.java&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\memory\BlobMemTest.java&lt;br/&gt;
Sending        java\testing\org\apache\derbyTesting\functionTests\tests\memory\ClobMemTest.java&lt;br/&gt;
Transmitting file data ...&lt;br/&gt;
Committed revision 1464247.&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/r1464247&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/r1464247&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6096&quot; title=&quot;OutOfMemoryError with Clob or Blob hash join: DataTypeDescriptor.estimatedMemoryUsage()  has no case for BLOB or CLOB so would underestimate memory usage for those types at zero&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6096&quot;&gt;&lt;del&gt;DERBY-6096&lt;/del&gt;&lt;/a&gt; OutOfMemoryError with Clob or Blob hash join: DataTypeDescriptor.estimatedMemoryUsage() has no case for BLOB or CLOB so would underestimate memory usage for those types at zero &lt;/p&gt;

&lt;p&gt;Estimate BLOB/CLOB size at 10000 like other long types.&lt;/p&gt;
</comment>
                            <comment id="13622059" author="knutanders" created="Thu, 4 Apr 2013 12:46:01 +0100"  >&lt;p&gt;Attaching less-gc.diff which makes a small change in the tests so that they only run System.gc() if the memory statistics are actually going to be printed. (The call to gc() doesn&apos;t seem to slow down the test when it&apos;s run separately, but I suppose it could take longer if it runs as part of a larger test suite and there&apos;s more data on the heap.)&lt;/p&gt;

&lt;p&gt;Committed revision 1464470.&lt;/p&gt;</comment>
                            <comment id="13662906" author="dagw" created="Tue, 21 May 2013 12:32:36 +0100"  >&lt;p&gt;Can this issue be resolved?&lt;/p&gt;</comment>
                            <comment id="13682854" author="kmarsden" created="Thu, 13 Jun 2013 23:43:26 +0100"  >&lt;p&gt;Resolving. This issue should not be back ported as it could cause a change in performance for some applications that expect the zero estimate.&lt;/p&gt;</comment>
                            <comment id="14024795" author="rhillegas" created="Mon, 9 Jun 2014 13:57:02 +0100"  >&lt;p&gt;Correct some typos in the detailed release note.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12462352">DERBY-4620</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12572104" name="D6096.java" size="823" author="knutanders" created="Tue, 5 Mar 2013 15:20:21 +0000"/>
                            <attachment id="12576571" name="derby-6096_code_diff.txt" size="925" author="kmarsden" created="Tue, 2 Apr 2013 14:39:23 +0100"/>
                            <attachment id="12576595" name="derby-6096_diff.txt" size="6054" author="kmarsden" created="Tue, 2 Apr 2013 16:59:26 +0100"/>
                            <attachment id="12576646" name="derby-6096_diff2.txt" size="6160" author="kmarsden" created="Tue, 2 Apr 2013 21:17:24 +0100"/>
                            <attachment id="12576966" name="less-gc.diff" size="2215" author="knutanders" created="Thu, 4 Apr 2013 12:46:01 +0100"/>
                            <attachment id="12649320" name="releaseNote.html" size="2016" author="rhillegas" created="Mon, 9 Jun 2014 13:57:02 +0100"/>
                            <attachment id="12576639" name="releaseNote.html" size="4549" author="kmarsden" created="Tue, 2 Apr 2013 20:45:42 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Mar 2013 15:15:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315621</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzcbav:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315964</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>