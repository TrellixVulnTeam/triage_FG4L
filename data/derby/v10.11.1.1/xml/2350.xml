<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2350/DERBY-2350.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2350] Use of XML values in the action statement of a trigger throw exceptions.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2350</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;A  trigger like, where V, V1 and V2 are columns of type XML will thrown an exception when fired.&lt;/p&gt;

&lt;p&gt;CREATE TRIGGER AIS AFTER INSERT ON T_MAIN &lt;br/&gt;
                REFERENCING NEW_TABLE AS N&lt;br/&gt;
                FOR EACH STATEMENT  &lt;br/&gt;
                INSERT INTO T_ACTION_STATEMENT(A, V1, ID, V2) &lt;br/&gt;
                SELECT &apos;I&apos;, V, ID, V FROM N&lt;/p&gt;

&lt;p&gt;ERROR 38000: The exception &apos;java.sql.SQLException: An attempt was made to get a data value of type &apos;java.lang.Object&apos; from a data value of type &apos;XML&apos;.&apos; was thrown while evaluating an expression.&lt;/p&gt;

&lt;p&gt;Most likely because triggers are implementing using VTIs and hence JDBC ResultSets and XML is not supported through JDBC yet.&lt;/p&gt;

&lt;p&gt;TriggerTest shows this issue, see the comment with the bug number to reproduce.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12363055">DERBY-2350</key>
            <summary>Use of XML values in the action statement of a trigger throw exceptions.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikem">Mike Matrigali</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Feb 2007 22:53:11 +0000</created>
                <updated>Fri, 21 Jan 2011 17:49:46 +0000</updated>
                            <resolved>Wed, 1 Aug 2007 00:00:14 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12508961" author="mikem" created="Fri, 29 Jun 2007 00:44:33 +0100"  >&lt;p&gt;What would be the right approach to fixing this one?  Seems like the options are:&lt;br/&gt;
1) implement full XML support in JDBC &lt;br/&gt;
     o is this even possible for jdk1.4 and jdk1.5 - is there XML support there?&lt;br/&gt;
2) change trigger implementation to not use jdbc&lt;br/&gt;
     o if we take this route, does anyone have an idea the extent of the changes necessary?   Would such a change be appropriate&lt;br/&gt;
         as a bug fix to an existing release or would it be a feature to new release?&lt;/p&gt;

&lt;p&gt;Long term is one choice better architecturally?  Does option 2 allow us to better optimize the performance?&lt;/p&gt;</comment>
                            <comment id="12508981" author="djd" created="Fri, 29 Jun 2007 02:49:55 +0100"  >&lt;p&gt;Some trigger background here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/TriggerImplementation&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TriggerImplementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe 2) is the best approach. The before &amp;amp; after rows are currently forced as JDBC objects which means a performance hit for most datatypes.&lt;br/&gt;
There&apos;s no reason to use JDBC, it&apos;s a hang over from Cloudscape 4.x when a non-standard mechanism was provided to access the before &amp;amp; after rows. But now Derby uses standard SQL to access the before &amp;amp; after rows, thus there is no requirement to convert the row into a JDBC form, keeping the rows as Derby rows (Row &amp;amp; DataValueDescriptor&apos;s) would make more sense. This approach would also avoid any jdk specific issues since the SQLXML datatype was only introduced in JDBC 4.&lt;/p&gt;

&lt;p&gt;Not sure of the effort involved, I&apos;ll try to think about it.&lt;/p&gt;</comment>
                            <comment id="12512309" author="mikem" created="Fri, 13 Jul 2007 00:39:59 +0100"  >&lt;p&gt;I took a look at this issue.  I agree with the suggestion on the mentioned wiki that a good longterm solution in this area which would also fix this bug is to change the underlying trigger implementation to not be dependent on jdbc to get the old and new values for the&lt;br/&gt;
trigger actions.  My initial take is that such a change would be most appropriate for a new &lt;br/&gt;
release not a bug fix in an existing release.  It would be nice to get XML working in triggers in 10.2 and 10.3 in the meantime, even if the solution is not the best.&lt;/p&gt;

&lt;p&gt;The base problem for the bug seems to be that by default we use the jdbc getObject() call in the generated call to the old and new values.  From comments in &lt;br/&gt;
CreateTriggerNode.java we generate &quot;internal&quot; sql of the following form for all the&lt;br/&gt;
datatypes:&lt;br/&gt;
/*&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Generate something like this:&lt;br/&gt;
**&lt;/li&gt;
		&lt;li&gt;cast (org.apache.derby.iapi.db.Factory::&lt;/li&gt;
		&lt;li&gt;getTriggerExecutionContext().getNewRow().&lt;/li&gt;
		&lt;li&gt;getObject(&amp;lt;colPosition&amp;gt;) AS DECIMAL(6,2))&lt;br/&gt;
**&lt;/li&gt;
		&lt;li&gt;Column position is used to avoid the wrong column being&lt;/li&gt;
		&lt;li&gt;selected problem (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1258&quot; title=&quot;Wrong value returned in a row trigger action statement if the table has column names that are identical when upper-cased.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1258&quot;&gt;&lt;del&gt;DERBY-1258&lt;/del&gt;&lt;/a&gt;) caused by the case insensitive&lt;/li&gt;
		&lt;li&gt;JDBC rules for fetching a column by name.&lt;br/&gt;
**&lt;/li&gt;
		&lt;li&gt;The cast back to the SQL Domain may seem redundant&lt;/li&gt;
		&lt;li&gt;but we need it to make the column reference appear&lt;/li&gt;
		&lt;li&gt;EXACTLY like a regular column reference, so we need&lt;/li&gt;
		&lt;li&gt;the object in the SQL Domain and we need to have the&lt;/li&gt;
		&lt;li&gt;type information.  Thus a user should be able to do&lt;/li&gt;
		&lt;li&gt;something like&lt;br/&gt;
**&lt;/li&gt;
		&lt;li&gt;CREATE TRIGGER ... INSERT INTO T length(Column), ...&lt;br/&gt;
*/&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The problem is that the jdbc being called does not support getObject on an XML object&lt;br/&gt;
and thus throws the exception.&lt;/p&gt;

&lt;p&gt;I spent some time, and will post an example patch, looking at generating different code&lt;br/&gt;
for XML.  What I was looking at was generating the following in the case of XML rather&lt;br/&gt;
than the above:&lt;/p&gt;

&lt;p&gt;          XMLPARSE(DOCUMENT&lt;br/&gt;
             CAST (org.apache.derby.iapi.db.Factory::&lt;br/&gt;
                  getTriggerExecutionContext().getNewRow().&lt;br/&gt;
                     getString(&amp;lt;colPosition&amp;gt;) AS CLOB)&lt;br/&gt;
                       PRESERVE WHITESPACE)&lt;/p&gt;

&lt;p&gt;The patch I will post has this change and when I run the junit TriggerTest test it gets past the getObject() error but then gets the following which I have not yet figured out.  I believe&lt;br/&gt;
the parsing done by the XMLPARSE generated for the old/new reference is working, so&lt;br/&gt;
not quite sure where this error is coming from.  &lt;/p&gt;

&lt;p&gt;...E&lt;br/&gt;
Time: 84.552&lt;br/&gt;
There was 1 error:&lt;br/&gt;
1) testTypesInActionStatement(org.apache.derbyTesting.functionTests.tests.lang.T&lt;br/&gt;
riggerTest)java.sql.SQLException: Values assigned to XML columns must be well-fo&lt;br/&gt;
rmed DOCUMENT nodes.&lt;br/&gt;
    at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExcepti&lt;br/&gt;
onFactory.java:45)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:202)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Tra&lt;br/&gt;
nsactionResourceImpl.java:391)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Transa&lt;br/&gt;
ctionResourceImpl.java:346)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnectio&lt;br/&gt;
n.java:1572)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChil&lt;br/&gt;
d.java:81)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement&lt;br/&gt;
.java:1293)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedP&lt;br/&gt;
reparedStatement.java:1652)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPrep&lt;br/&gt;
aredStatement.java:299)&lt;br/&gt;
    at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesI&lt;br/&gt;
nsertTest(TriggerTest.java:580)&lt;br/&gt;
    at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypeTe&lt;br/&gt;
st(TriggerTest.java:445)&lt;br/&gt;
    at org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testTypesInA&lt;br/&gt;
ctionStatement(TriggerTest.java:427)&lt;br/&gt;
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java&lt;br/&gt;
:64)&lt;br/&gt;
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorI&lt;br/&gt;
mpl.java:43)&lt;br/&gt;
    at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:95)&lt;br/&gt;
    at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
    at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
    at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
    at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: ERROR 2200L: Values assigned to XML columns must be well-formed DOCUM&lt;br/&gt;
ENT nodes.&lt;br/&gt;
    at org.apache.derby.iapi.error.StandardException.newException(StandardExcept&lt;br/&gt;
ion.java:280)&lt;br/&gt;
    at org.apache.derby.iapi.types.XML.normalize(XML.java:386)&lt;br/&gt;
    at org.apache.derby.iapi.types.DataTypeDescriptor.normalize(DataTypeDescript&lt;br/&gt;
or.java:505)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(Normali&lt;br/&gt;
zeResultSet.java:330)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(Norma&lt;br/&gt;
lizeResultSet.java:189)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWri&lt;br/&gt;
teResultSet.java:125)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.ja&lt;br/&gt;
va:496)&lt;br/&gt;
    at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPrepare&lt;br/&gt;
dStatement.java:370)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Gener&lt;br/&gt;
icTriggerExecutor.java:173)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(St&lt;br/&gt;
atementTriggerExecutor.java:80)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Trigg&lt;br/&gt;
erEventActivator.java:278)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Insert&lt;br/&gt;
ResultSet.java:1163)&lt;br/&gt;
    at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.ja&lt;br/&gt;
va:497)&lt;br/&gt;
    at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPrepare&lt;br/&gt;
dStatement.java:370)&lt;br/&gt;
    at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement&lt;br/&gt;
.java:1203)&lt;br/&gt;
    ... 26 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 3,  Failures: 0,  Errors: 1&lt;/p&gt;


</comment>
                            <comment id="12512310" author="mikem" created="Fri, 13 Jul 2007 00:44:05 +0100"  >&lt;p&gt;This patch is not ready for commit, it shows some intial work I did to try for &lt;br/&gt;
a tempory solution.  It gets a different error than before, not sure why.  I don&apos;t currently plan on doing more on this one, if anyone is interested feel free to pick it up or fix it some other way.&lt;/p&gt;</comment>
                            <comment id="12512639" author="army" created="Fri, 13 Jul 2007 23:20:12 +0100"  >&lt;p&gt;Attaching d2350_v2.patch, which is Mike&apos;s original patch plus some changes in iapi/types/XML.java to solve the error that he mentioned in his previous comment.&lt;/p&gt;

&lt;p&gt;The problem is actually in the &quot;setValueFromResultSet()&quot; method of XML.java.  That method is called from VTIResultSet and is used to &quot;load&quot; results from into the target XML column.  But that method does not set the &apos;xType&quot; field, which means it defaults to -1.  Then later, when we try to normalize the XML value in preparation for insertion into the XML column, we throw an error because an xType of &quot;-1&quot; indicates that the XML value is not a well-formed DOCUMENT.&lt;/p&gt;

&lt;p&gt;The easiest fix would be to add a single line to XML.setValueFromResult() that sets &quot;xType&quot; to XML_DOC_ANY.  However, I do not know if we can safely assume that the string value in the received ResultSet is well-formed XML.  My inclination is to believe that we canNOT make such an assumption, though I can&apos;t currently think of any examples to prove it.   To be cautious we need some admittedly ugly code to check the well-formedness of the string value in question.  (Since the result set object is java.sql.ResultSet , and since &quot;getObject()&quot; won&apos;t work, we have to jump through some hoops to figure out if the desired column is in fact an XML value).&lt;/p&gt;

&lt;p&gt;The attached patch makes changes to set &quot;xType&quot; based on whether or not the string value in question is well-formed XML.  This is rather undesirable, though, because this change in combination with Mike&apos;s change in CreateTriggerNode means that we are now parsing each XML value &lt;b&gt;TWO&lt;/b&gt; additional times--once as part of the rewrite contributed by Mike, and again when we get to setValueFromResultSet().  That seems like it could lead to pretty bad performance very easily...&lt;/p&gt;

&lt;p&gt;That said, though, I&apos;m not sure what the alternatives are outside of the trigger re-write mentioned by Dan and Mike in preceding comments.  So I&apos;m posting this far-less-than-ideal solution in case people think it&apos;s worth committing.  I ran lang/TriggerTest.java and suites.XMLSuite on Windows using ibm142 and saw no failures.  I haven&apos;t run any other tests...&lt;/p&gt;</comment>
                            <comment id="12512721" author="bryanpendleton" created="Sat, 14 Jul 2007 16:47:34 +0100"  >&lt;p&gt;What about &quot;sniffing&quot; the first few bytes of the string? To be a valid document,&lt;br/&gt;
it should either start with &amp;lt;?xml , possibly preceded by a bytemark, or &amp;lt; and a tag.&lt;/p&gt;

&lt;p&gt;Not a perfect test by any means, but vastly less expensive than cranking up the XML parser.&lt;/p&gt;</comment>
                            <comment id="12512810" author="djd" created="Sun, 15 Jul 2007 18:28:03 +0100"  >&lt;p&gt;The issue might be that the patch only addresses (I think) row level triggers, but the test uses statement level and row level triggers.&lt;br/&gt;
That would lead to the error seen, as only a statement trigger will end up calling the setValueFromResultSet method.&lt;/p&gt;

&lt;p&gt;Bryan wrote:&lt;br/&gt;
&amp;gt; What about &quot;sniffing&quot; the first few bytes of the string? To be a valid document,&lt;br/&gt;
&amp;gt; it should either start with &amp;lt;?xml , possibly preceded by a bytemark, or &amp;lt; and a tag.&lt;/p&gt;

&lt;p&gt;&amp;gt; Not a perfect test by any means, but vastly less expensive than cranking up the XML parser.&lt;/p&gt;

&lt;p&gt;I might be missing something here, but how does this help? Are you saying that would be the only test?&lt;br/&gt;
As you point out it&apos;s not sufficient, so we would need to use the parser anyway. It seems it would only help kick out&lt;br/&gt;
invalid values earlier, which is not really a case we want to optimize for.&lt;/p&gt;</comment>
                            <comment id="12516515" author="mikem" created="Mon, 30 Jul 2007 21:39:45 +0100"  >&lt;p&gt;Thanks for posting the patch got my original changes to work, I have some time to work on this now.  I think it is better to get this fix in, even if xml trigger is not optimal.  It does not work at all without it.  I am going to run some tests and see if I can get this into trunk and 10.3.  I will also create a follow on JIRA issue to log possible performance improvements in the future.  &lt;/p&gt;</comment>
                            <comment id="12516818" author="mikem" created="Wed, 1 Aug 2007 00:00:08 +0100"  >&lt;p&gt;fixed in trunk and 10.3 branch.&lt;/p&gt;

&lt;p&gt;Fix XML in triggers by changing code generation to generate different code&lt;br/&gt;
in the case of XML of the form when referencing old and new column values.:&lt;br/&gt;
XMLPARSE(DOCUMENT&lt;br/&gt;
CAST (org.apache.derby.iapi.db.Factory::&lt;br/&gt;
getTriggerExecutionContext().getNewRow().&lt;br/&gt;
getString(&amp;lt;colPosition&amp;gt;) AS CLOB)&lt;br/&gt;
PRESERVE WHITESPACE)&lt;/p&gt;

&lt;p&gt;Also change XML.setValueFromResult() to validate the character stream and&lt;br/&gt;
set the xType as appropriate after parsing the stream.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12361821" name="d2350_v2.patch" size="10186" author="army" created="Fri, 13 Jul 2007 23:20:12 +0100"/>
                            <attachment id="12361727" name="derby-2350.diff" size="6258" author="mikem" created="Fri, 13 Jul 2007 00:44:05 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Jun 2007 23:44:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23012</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0mo7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37491</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>