<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:19:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4771/DERBY-4771.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4771] Continue investigation of automatic creation/update of index statistics</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4771</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Work was started to improve Derby&apos;s handling of index statistics. This issue tracks further discussion and work for this task.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12471534">DERBY-4771</key>
            <summary>Continue investigation of automatic creation/update of index statistics</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Aug 2010 14:00:58 +0100</created>
                <updated>Tue, 19 Apr 2011 13:39:03 +0100</updated>
                            <resolved>Sun, 6 Mar 2011 11:38:50 +0000</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.1.2</fixVersion>
                                    <component>SQL</component>
                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12898232" author="kristwaa" created="Fri, 13 Aug 2010 14:31:59 +0100"  >&lt;p&gt;Attached is a prototype of another attempt at implementing auto-update&lt;br/&gt;
of Derby index statistics. First I&apos;ll describe the patch briefly, then&lt;br/&gt;
I&apos;ll note some potential improvements and ideas.&lt;br/&gt;
I&apos;ve omitted lots of details, feel free to ask questions and to comment&lt;br/&gt;
on the suggested improvements etc. They need a lot more work...&lt;/p&gt;

&lt;p&gt;The code is nowhere near complete, its primary purpose is to spur&lt;br/&gt;
discussion and hopefully guide us in the right direction.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Prototype description&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The prototype performs some checks for whether the index statistics are&lt;br/&gt;
stale during statement compilation, as Mamta did under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3788&quot; title=&quot;Provide a zero-admin way of updating the statisitcs of an index&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3788&quot;&gt;&lt;del&gt;DERBY-3788&lt;/del&gt;&lt;/a&gt;. If&lt;br/&gt;
the statistics are considered stale, an update job to update all indexes&lt;br/&gt;
for the base table is scheduled with a &quot;daemon&quot;. The daemon keeps track&lt;br/&gt;
of scheduled update jobs, and will execute them in a separate thread.&lt;br/&gt;
Only one job will be taken care of at a time, and if there are too many&lt;br/&gt;
jobs, new jobs are discarded. When a slot frees up in the work queue,&lt;br/&gt;
these jobs will eventually be scheduled. If there are no statistics,&lt;br/&gt;
creating them will be scheduled (the daemon doesn&apos;t separate between&lt;br/&gt;
creating and updating stats). When a job is scheduled for a base table,&lt;br/&gt;
this is recorded in the associated index descriptors (transient state)&lt;br/&gt;
to avoid having to query the daemon too often.&lt;/p&gt;

&lt;p&gt;As mentioned, the work is carried out in a separate thread, created as&lt;br/&gt;
required (there is no permanent background thread, it dies if the queue&lt;br/&gt;
is emptied). This seems appropriate as statistics update should be&lt;br/&gt;
rather infrequent compared to other operations in a database system.&lt;/p&gt;

&lt;p&gt;When new statistics are computed for the indexes of a table, they are&lt;br/&gt;
stored in the daemon. They require little memory (table identifier, and&lt;br/&gt;
per index, the index identifer, two longs and one int).&lt;/p&gt;

&lt;p&gt;As a statement is compiled, the optimizer will consider the available&lt;br/&gt;
indexes. At this point the index statistics are checked, and if we see&lt;br/&gt;
that they have been scheduled we make sure we check if they are&lt;br/&gt;
completed a little later in the compilation process. If we find new&lt;br/&gt;
statistics for the query being compiled, we also write any other&lt;br/&gt;
completed statistics to the data dictionary. Writing to the data&lt;br/&gt;
dictionary is currently done with a nested read-write user transaction&lt;br/&gt;
in the user transaction (during statement compilation) - mainly to avoid&lt;br/&gt;
keeping locks for an extended period of time.&lt;/p&gt;

&lt;p&gt;For clarity, statement compilation/execution will not wait for new&lt;br/&gt;
statistics to be generated. In the case of large tables, it could take&lt;br/&gt;
hours to generate new stats.&lt;/p&gt;

&lt;p&gt;Obvious weaknesses:&lt;br/&gt;
 o code organization (I don&apos;t know the code well) - choices made based on&lt;br/&gt;
   what worked and on reducing overhead (i.e., checking indexes when we&lt;br/&gt;
   have already obtained handles to them)&lt;br/&gt;
 o the async/decoupled data dictionary update - done to avoid having to&lt;br/&gt;
   create a LanguageConnectionContext (lcc).&lt;br/&gt;
 o logic/thresholds for determining when stats are stale&lt;br/&gt;
 o the row estimate logic also has weaknesses (for instance when mixing&lt;br/&gt;
   setting absolute values and updating the estimate based on deltas)&lt;/p&gt;

&lt;p&gt;Other notes/characteristics of the prototype:&lt;br/&gt;
 o stats not generated/updated for system tables (caused locking problems)&lt;br/&gt;
 o lower limit on the row estimate (don&apos;t generate for tables with few rows)&lt;br/&gt;
 o I considered to expose the NO_WAIT option in the call to add new&lt;br/&gt;
   descriptors to the data dictionary. Don&apos;t know if this is needed if we&lt;br/&gt;
   update stats with a separate transaction from the daemon, then we can&lt;br/&gt;
   either use TransactionControl.setNoLockWait() or maybe even just wait?&lt;br/&gt;
 o current staleness code is dependent on reasonable row estimates&lt;br/&gt;
 o the &quot;unit of work&quot; is currently a base table - when scheduled all&lt;br/&gt;
   associated index statistics will be regenerated.&lt;br/&gt;
 o I suspect that most tests in suites.All run with the DBO as the user,&lt;br/&gt;
   and I haven&apos;t done anything specific to handle missing privileges.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Prototype state&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Runs suites.All and derby.all with only four failures, all in&lt;br/&gt;
OrderByAndSortAvoidance. The tests fail on an assert for whether a table&lt;br/&gt;
scan is performed. To me it looks like the new stats makes the&lt;br/&gt;
compiler/optimizer choose a different plan (not necessarily better in&lt;br/&gt;
terms of pages visited though, but that&apos;s a DBA/optimizer issue).&lt;/p&gt;

&lt;p&gt;Currently two flags control the prototype behavior:&lt;br/&gt;
 o derby.language.disableIndexStatsUpdate=&lt;b&gt;false&lt;/b&gt;|true&lt;br/&gt;
 o derby.language.logIndexStatsUpdate=&lt;b&gt;false&lt;/b&gt;|true&lt;/p&gt;

&lt;p&gt;If you grep for &apos;istat&apos; in derby.log, you should get all the lines&lt;br/&gt;
relevant to automatic index statistics update.&lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Potential improvements&amp;#93;&lt;/span&gt;&lt;br/&gt;
 o update data dictionary from the daemon thread&lt;br/&gt;
   (must then be able to create an appropriate lcc)&lt;/p&gt;

&lt;p&gt; o drift in the number of unique values isn&apos;t handled.&lt;br/&gt;
   Some potential remedies (raw ideas):&lt;/p&gt;

&lt;p&gt;   Mechanism                       Distinct value drift     Row count change&lt;br/&gt;
   =========================================================================&lt;br/&gt;
   (a) compilation check                    N                       Y&lt;br/&gt;
   (b) timed check                          N                       Y&lt;br/&gt;
   (c) timed unconditional update           Y                       Y&lt;br/&gt;
   (d) UPDATE table SET ...                 y                       N&lt;/p&gt;

&lt;p&gt;   In short:&lt;br/&gt;
   (a) creates statistics when not existing and kicks off the update job&lt;br/&gt;
   as soon as stale we believe we should have had better stats. (b) helps&lt;br/&gt;
   systems which are in a steady state (all statements compiled and&lt;br/&gt;
   reused) - would typically check all user tables with indexes and&lt;br/&gt;
   perform the staleness check from (a). (c) would help against&lt;br/&gt;
   &quot;anything&quot; - but potentially with a large delay. Only useful for&lt;br/&gt;
   applications where the database is up for very long periods of time&lt;br/&gt;
   (days, weeks, months). Intervals for (b) and (c) would have to be&lt;br/&gt;
   configurable. Mechanism (d) would help for updates changing a large&lt;br/&gt;
   percentage of the rows, but would not catch many small updates&lt;br/&gt;
   changing the selectivity of an index.&lt;br/&gt;
   It may be possible to reuse BasicDaemon for the timed checks&lt;br/&gt;
   (scheduling only, work would still be performed in a separate thread).&lt;/p&gt;

&lt;p&gt; o do we need to throttle (a) the index scans, or (b) the processing&lt;br/&gt;
   rate of the scheduled jobs?&lt;br/&gt;
   (I started playing with a crude utilization rate)&lt;/p&gt;

&lt;p&gt; o almost as above, but we should take care to avoid &quot;infinite-loops&quot;&lt;/p&gt;

&lt;p&gt; o at which point may a change in either the number of rows or the field&lt;br/&gt;
   values be big enough to warrant a recalculation of the stats?&lt;br/&gt;
   What&apos;s more costly; a sub-optimal plan or reading all the data?&lt;/p&gt;


&lt;p&gt;I&apos;ll be away for some weeks, but plan to return to this issue when I&apos;m back.&lt;br/&gt;
My next steps depends on the feedback I get, but one way forwards may be&lt;br/&gt;
to try to do the data dictionary update from the daemon itself. Once we get&lt;br/&gt;
the core framework in place, we can start working on all the various issues&lt;br/&gt;
that have to be addressed.&lt;/p&gt;</comment>
                            <comment id="12904718" author="lilywei" created="Tue, 31 Aug 2010 19:36:07 +0100"  >&lt;p&gt;Hi Kristian:&lt;br/&gt;
     Thank you so much for doing this. This will be a great plus for Derby in my opinion.&lt;/p&gt;

&lt;p&gt;     Overall, I like the design. Having a daemon gathering statistic and execute in a separate thread is a common statistic gathering implementation strategy.  I agree that the memory consumption should be little for the implementation. At the compilation process, new statistic for the query is written along with completed statistics to the data dictionary with a nested read-write user transaction.  And, we will not wait for new statistics to be generated. Should we have more detail priority strategy in turn of how and when completed statistic gets written to data dictionary associate with query complete time and new statistic? i.e. For the case we write and the cases we don&apos;t wait for too long of time consideration.&lt;br/&gt;
I am not sure this is cover in the weaknesses already or the  NO_WAIT option in the call to add new &lt;br/&gt;
   descriptors to the data dictionary.  I personally was not clear in turn of the implementation on compilation time. So, any elaboration on compilation process for the current operation and additional with new statistics and completed statistics information written to data directory will be very helpful to me.&lt;/p&gt;

&lt;p&gt;     I include my run(rjall.out) for Suites.All on Windows 7 with jdk1.6.0_13 32 bits with my comments. This is just for reference in case we can see other issues were not mention already.&lt;/p&gt;</comment>
                            <comment id="12907600" author="kristwaa" created="Thu, 9 Sep 2010 12:40:02 +0100"  >&lt;p&gt;Attaching patch revision 1b.&lt;/p&gt;

&lt;p&gt;Thanks for having a look at the patch, Lily.&lt;br/&gt;
Seems a last minute change caused a lot of trouble. Early on the I think I ignored all exceptions originating from IndexStatisticsDaemon.writeUpdatedStats, but before I uploaded the patch I added checks for specific errors.&lt;br/&gt;
I have added another check for the container opened in read-only mode error. The issue I see is that Derby doesn&apos;t detect that the database is read-only before it&apos;s too late to disable the statistics update feature. I tried the isReadOnly-method on both store, lcc, and tx - but none of those returned true at the time when the index statistics daemon is called for. In this case the read-only was caused by missing file privileges, maybe Derby will handle other causes better &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;If you run the tests again with patch 1b, hopefully all you&apos;ll see is four failures in lang.OrderByAndSortAvoidance (two distinct failures).&lt;/p&gt;</comment>
                            <comment id="12908632" author="lilywei" created="Mon, 13 Sep 2010 07:03:02 +0100"  >&lt;p&gt;Hi Kristian:&lt;br/&gt;
     Thank you for doing such a great work. I am very interested of this feature and would love to keep learning about this feature. The check for container opened in read-only mode error behaves much better. I was wondering, is it a good idea to check set a flag on PrepareStatement that possible allow check about database status somewhere between generating PreparedStatement and the time we check for exception in  GenericStatement.java for store, lcc, tx or something else? Could it help the situation we are in? &lt;/p&gt;

&lt;p&gt;     I did run the Suites.all test suits. This is for reference point only. I got 6 failures. Four of them are all for lang.OrderByAndSortAvoidance except testOSReadOnly is having permission problem when it try to remove directory: c:\derby2\trunk\testallpackages\system\singleUse\readOnly or copy directory from c:\derby2\trunk\testallpackages\system\singleUse\oneuse4e to c:\derby2\trunk\testallpackages\system\singleUse\readOnly   Hope this help!&lt;/p&gt;</comment>
                            <comment id="12908668" author="kristwaa" created="Mon, 13 Sep 2010 09:29:10 +0100"  >&lt;p&gt;Hi Lily,&lt;/p&gt;

&lt;p&gt;First, did you modify the code before you ran the second time? I still see &quot;CHECKING: ...&quot; in the output, but I disabled this println in the 1b patch.&lt;br/&gt;
Also, did you run in a new directory, or delete all existing directories before running again?&lt;br/&gt;
It would be interesting to know if testOSReadOnly fails also if you run it individually and in a clean test directory.&lt;/p&gt;

&lt;p&gt;With database status, do you mean whether it is read-only or not?&lt;/p&gt;</comment>
                            <comment id="12909060" author="lilywei" created="Tue, 14 Sep 2010 01:12:33 +0100"  >&lt;p&gt;Thanks Kristian for the prompt reply and explanation.&lt;/p&gt;

&lt;p&gt;Good eyes. I add the &quot;CHECKING&quot; so it is easier for me to see what is going on for now.  &lt;br/&gt;
                if (tableDescriptor.getTableType() ==&lt;br/&gt;
                        TableDescriptor.BASE_TABLE_TYPE &amp;amp;&amp;amp;&lt;br/&gt;
                        tableDescriptor.getTotalNumberOfIndexes() &amp;gt; 0) {&lt;br/&gt;
                    System.out.println(&quot;CHECKING: &quot; + tableDescriptor.getQualifiedName());&lt;br/&gt;
                    long rows = baseRowCount();&lt;br/&gt;
                    if (statisticsForTable) &lt;/p&gt;
{
                        tableDescriptor.markForIndexStatsUpdate(rows);
                    }
&lt;p&gt; else if (rows &amp;gt; 100) &lt;/p&gt;
{
                        // Only create statistics if there are &quot;enough&quot; rows.
                        tableDescriptor.markForIndexStatsUpdate(-1);
                    }
&lt;p&gt;                }&lt;/p&gt;

&lt;p&gt;I delete all existing directories before I run the test suites.  I run the testOSReadOnly and it failed as I run it individually. I am attaching the error-stacktrace.out and derby.log and hope it is helpful to you.&lt;/p&gt;

&lt;p&gt;With database status, I mean it allows us to know the state of the database. i.e. read-only status.&lt;/p&gt;</comment>
                            <comment id="12910498" author="kristwaa" created="Fri, 17 Sep 2010 08:45:22 +0100"  >&lt;p&gt;Investigation showed that the errors Lily are getting on Windows in store.OSReadOnlyTest are caused by a partly read-only database directory. The fact that it isn&apos;t fully read-only makes Derby believe the database is read-write.&lt;br/&gt;
I&apos;ll fix the test issue, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4804&quot; title=&quot;Make database used in store.OSReadOnlyTest fully read-only&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4804&quot;&gt;&lt;del&gt;DERBY-4804&lt;/del&gt;&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;I expect to post a new version of the prototype soon. It will use an lcc to update the data dictionary directly.&lt;/p&gt;</comment>
                            <comment id="12910588" author="lilywei" created="Fri, 17 Sep 2010 14:59:11 +0100"  >&lt;p&gt;Thanks Kristian for such detail report. It is hard to handle all platform at prototype stage. Thank you so much for doing it and share all the details with us.&lt;/p&gt;</comment>
                            <comment id="12914200" author="kristwaa" created="Thu, 23 Sep 2010 21:07:46 +0100"  >&lt;p&gt;Patch 2a is another code dump, still prototyping.&lt;br/&gt;
I am now using an lcc to update the data dictionary directly from the daemon.&lt;br/&gt;
The damoen is enabled by default and will write some information to the log. More detailed tracing can be enabled (see the comments in IndexStatisticsDaemon).&lt;/p&gt;

&lt;p&gt;If anyone has an application or a db load they can test this with, I&apos;d be happy to know if the daemon works.&lt;br/&gt;
To do so, build Derby with the patch, run your app and then grep your derby.log file afterwards for &quot;istat&quot;.&lt;br/&gt;
It might also crash...&lt;br/&gt;
You should see statistics being generated for indexes which don&apos;t have them, and potentially also updates of existing stats (depends on many factors, I&apos;ll explain more later, but some keywords: row count estimate, table growth, statement compilation).&lt;/p&gt;

&lt;p&gt;I&apos;ll be away for a week, and will answer any comments when I&apos;m back.&lt;br/&gt;
My next step will be to validate/rewrite the logic I added to the table descriptor and the other &quot;catalog classes&quot;, potentially followed by some initial tuning of various thresholds, and writing more tests.&lt;/p&gt;</comment>
                            <comment id="12916788" author="lilywei" created="Fri, 1 Oct 2010 06:43:15 +0100"  >&lt;p&gt;Before adding application tests, I thought I tried it with Suites.All with all the tracing and flag set to true for the feature. UpdateStatisticsTest failed by itself on my machine. Maybe the lcc to update the data dictionary directly from the daemon has some concurrency issue to tweet with. I really enjoy seeing all the tracing log for this feature. That is so great. I will try to run it with application next and understand the lcc more.&lt;/p&gt;</comment>
                            <comment id="12917656" author="lilywei" created="Mon, 4 Oct 2010 18:14:45 +0100"  >&lt;p&gt;With more tracking and specific tracing in the JDBC.java and RuntimeStatisticsParser.java, I generate rjone.out for &apos;java -Dderby.tests.trace=true -Dderby.language.disableIndexStatsUpdate=false -Dd&lt;br/&gt;
erby.language.logIndexStatsUpdate=true -Dderby.language.traceIndexStatsUpdate=bo&lt;br/&gt;
th junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.lang.Upda&lt;br/&gt;
teStatisticsTest&apos; Form looking by the output, the unexpected result row come from &apos;SELECT * FROM SYS.STATISTICS&apos;for &apos;Index Scan ResultSet for T2 using index T2I1&apos;. And, it gets error &apos;A lock could not be obtained within the time requested&apos; was thrown while evaluating an expression.&apos;  The test did ask to lock table t with share mode.  I am not really familiar with locking for Derby. Could we need more concurrency control for StatementNode and RAMTransactionContext? I am including rjone.out for reference.&lt;/p&gt;</comment>
                            <comment id="12919306" author="kristwaa" created="Fri, 8 Oct 2010 16:26:03 +0100"  >&lt;p&gt;I&apos;ve taken a look at the test failures:&lt;br/&gt;
 o failures in OrderByAndSortAvoidance were taken care of by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4833&quot; title=&quot;Prepare existing JUnit tests for running with automatic index statistics generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4833&quot;&gt;&lt;del&gt;DERBY-4833&lt;/del&gt;&lt;/a&gt; patch 1a.&lt;br/&gt;
 o the failure UpdateStatisticsTest.testUpdateStatistics will continue to happen for the time being (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4837&quot; title=&quot;Prepare lang.UpdateStatisticsTest for automatic index statistics generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4837&quot;&gt;&lt;del&gt;DERBY-4837&lt;/del&gt;&lt;/a&gt;). The failure surfaced because the statistics are automatically generated faster now (written to the dd as soon as they are computed).&lt;br/&gt;
 o the failure UpdateStatisticsTest.testNoExclusiveLockOnTable failed due to a bug in the prototype. It left the dd in write-mode, and that causes at least one path in the dd to take an exclusive lock instead of a shared lock when looking up stuff in the system table.&lt;br/&gt;
 o I suspect the failure in AutoIncrementTest.testsyslocks may have been caused by the same bug in the prototype, but I&apos;m not sure. It doesn&apos;t reproduce again on my machine, but it could be timing-dependent.&lt;/p&gt;

&lt;p&gt;I have also seen an intermittent test failure in XplainStatisticsTest, which I&apos;m unable to explain. Seems like there are two rows in one of the XPLAIN tables where there is supposed to be only one.&lt;br/&gt;
Today I also saw the old harness test store/updatelocks.sql fail, but I haven&apos;t looked into it yet.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching the latest revision (patch 2b).&lt;/p&gt;</comment>
                            <comment id="12931006" author="kristwaa" created="Thu, 11 Nov 2010 13:25:13 +0000"  >&lt;p&gt;Attaching patch 2c.&lt;/p&gt;

&lt;p&gt;The two main changes:&lt;br/&gt;
 a) Removed code in AlterTableConstantAction for updating statistics, and made it use the daemon.&lt;br/&gt;
 b) Removed status tracking code in TableDescriptor/statistics object.&lt;/p&gt;

&lt;p&gt;The removal of code for (b) may cause some extra calls to the daemon, and the scheduling requests will be rejected. I&apos;m not sure how critical this is yet, which is why I decided to remove the code. Maybe a more light-weight mechanism can be re-added later.&lt;/p&gt;

&lt;p&gt;One major concern I have right now, is how to use the dependency system.&lt;br/&gt;
When should the invalidation request be performed?&lt;br/&gt;
Does it have to be before the statistics have been generated, or can it be done afterwards?&lt;br/&gt;
If the table is large, it may take a long time from the invalidation request is performed until the index(es) has been scanned and the new statistics added to the system tables.&lt;/p&gt;

&lt;p&gt;I also see a problem when running CheckToursDBTest, where we end up in a kind of  deadlock situation. There are two threads, one daemon thread (D) updating statistics, and one user thread (U) updating a table with some triggers. Depending on timing, the following may happen:&lt;br/&gt;
  D: takes S-locks on some rows in SYSDEPENDS for invalidation&lt;br/&gt;
  U: compiles trigger/statement, enters DependencyManager.clearDependencies() and grabs the monitor &apos;this&apos;.&lt;br/&gt;
  D: needs to enter DM.clearDependencies(), but U already has the monitor &apos;this&apos; (BLOCKED)&lt;br/&gt;
  U: needs to get X-locks on the rows already locked by D in SYSDEPENDS (TIMES OUT)&lt;br/&gt;
  D: after U is killed due to a lock timeout, D can continue and successfully complete the invalidation&lt;/p&gt;

&lt;p&gt;I have not yet figured out how/if this issue can be resolved.&lt;br/&gt;
Also, IndexStatisticsDaemon has to be moved to a different package, or at least a new interface has to be introduced if the DataDictionary is used to access the daemon. Any opinions on where to place and how to access the daemon?&lt;/p&gt;

&lt;p&gt;I&apos;m asking for review, particularly of the code in IndexStatisticsDaemon. The changes in impl/sql would also benefit from review from someone who knows more about the dynamics here.&lt;br/&gt;
When I run suites.All I see from zero to three failures on my machine. I&apos;ve also seen some failures in derbyall earlier, but I haven&apos;t run it with my latest changes (will do).&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12931011" author="kristwaa" created="Thu, 11 Nov 2010 13:41:29 +0000"  >&lt;p&gt;The properties have been changed, and are now:&lt;br/&gt;
derby.storage.indexStats.auto=&lt;b&gt;true&lt;/b&gt;|false&lt;br/&gt;
derby.storage.indexStats.log=true|&lt;b&gt;false&lt;/b&gt;&lt;br/&gt;
derby.storage.indexStats.trace=&lt;b&gt;off&lt;/b&gt;|dblog|stdout|both&lt;/p&gt;

&lt;p&gt;It may be wise to change the log property default to true, at least as we test the feature.&lt;/p&gt;</comment>
                            <comment id="12931426" author="kristwaa" created="Fri, 12 Nov 2010 15:45:03 +0000"  >&lt;p&gt;After the commit for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4899&quot; title=&quot;Refactor access to primary structures in AlterTableConstantAction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4899&quot;&gt;&lt;del&gt;DERBY-4899&lt;/del&gt;&lt;/a&gt; the patch no longer applies cleanly.&lt;/p&gt;

&lt;p&gt;I&apos;m working on a new version, in which I will rename some methods, do some changes to the error handling, and move the invalidation to after all statistics for an index have been generated.&lt;br/&gt;
I expect to post the revised version early next week. I find that the daemon code is a bit hard to read, so if you plan to have a look I would wait for the next rev &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12932461" author="kristwaa" created="Tue, 16 Nov 2010 13:39:09 +0000"  >&lt;p&gt;Added link to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3790&quot; title=&quot;Investigate if request for update statistics can be skipped for certain kind of indexes, one instance may be unique indexes based on one column.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3790&quot;&gt;&lt;del&gt;DERBY-3790&lt;/del&gt;&lt;/a&gt;, which discusses if we can skip statistics generation for &lt;span class=&quot;error&quot;&gt;&amp;#91;some&amp;#93;&lt;/span&gt; unique indexes.&lt;/p&gt;</comment>
                            <comment id="12932501" author="kristwaa" created="Tue, 16 Nov 2010 15:28:36 +0000"  >&lt;p&gt;Attached patch 2d: 18 files changed, 2085 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 259 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Note that this version has both logging and tracing (to derby.log) enabled.&lt;/p&gt;

&lt;p&gt;Patch ready for review and testing.&lt;/p&gt;
</comment>
                            <comment id="12933453" author="lilywei" created="Thu, 18 Nov 2010 15:36:02 +0000"  >&lt;p&gt;Thanks Kristian for great work!!! When does the invalidation request be performed now? Does it control in IndexStatisticDaemon? I run the Suites.all with the following comment in windows &apos;java -client -Dderby.tests.trace=true -Dderby.language.disableIndexStatsUpdate=t&lt;br/&gt;
rue -Dderby.language.logIndexStatsUpdate=true -Dderby.language.traceIndexStatsUp&lt;br/&gt;
date=both -Dderby.storage.indexStats.auto=true -Dderby.storage.indexStats.log=tr&lt;br/&gt;
ue -Dderby.storage.indexStats.trace=both -XX:MaxPermSize=192M -Xmx1024M -Xms512&lt;br/&gt;
M -DderbyTesting.oldReleasePath=c:/derby/oldrelease/jars junit.textui.TestRunner&lt;br/&gt;
 org.apache.derbyTesting.functionTests.suites.AllPackages 2&amp;gt;&amp;amp;1 | tee rjall.out  &lt;br/&gt;
As expected, some tests fail because of standard out is different than canon. I will run it again and set -Dderby.storage.indexStats.trace to dblog instead. Is dblog the best name? I think it is very Derby orientated and might not be that intuitive to new Derby user. How about just &quot;log&quot;?&lt;br/&gt;
I am attaching the output just for reference. &lt;/p&gt;</comment>
                            <comment id="12933790" author="kristwaa" created="Fri, 19 Nov 2010 12:22:04 +0000"  >&lt;p&gt;Thanks Lily,&lt;/p&gt;

&lt;p&gt;The invalidation request is still performed in IndexStatisticsDaemon, but not until after all the statistics for a given table (for all the indexes of that table, that is) have been generated.&lt;br/&gt;
As said, there are still some problem with the invalidation, since I have discovered that it can &quot;deadlock&quot;. The situation involves both database locks and Java monitors, so it is not a regular database deadlock, and it will result in a timeout.&lt;/p&gt;

&lt;p&gt;Regarding the value of the property, I can change that to &apos;log&apos; in the next rev of the patch. Note that the trace-property may be removed in the final version, I haven&apos;t decided yet. We also have to decide what should be logged, and maybe consider adding multiple log levels to control the amount of data written to the log.&lt;/p&gt;

&lt;p&gt;Let me summarize what I think are the next most important steps:&lt;br/&gt;
 o testing! This will be easier once the code is committed to trunk, but we&apos;re not quite there yet. I think the best way to test this is to run it with various applications, also some that run for a longer period of time.&lt;br/&gt;
 o organization of the code; where to place the daemon, whether to introduce an interface, whether to move daemon control out of the data dictionary.&lt;br/&gt;
 o tuning of table size boundaries for when the daemon kicks in&lt;/p&gt;</comment>
                            <comment id="12934834" author="kristwaa" created="Tue, 23 Nov 2010 13:56:32 +0000"  >&lt;p&gt;Attached patch 2e, which contains the following changes:&lt;br/&gt;
 o removed tracing code from BTreeScan (included by mistake)&lt;br/&gt;
 o renamed value of trace-property from &quot;dblog&quot; to &quot;log&quot; (derby.storage.indexStats.trace=off|log|stdout|both)&lt;br/&gt;
 o introduced interface iapi...IndexStatisticsDaemon, renamed existing class to impl...IndexStatisticsDaemonImpl&lt;/p&gt;

&lt;p&gt;Also attached a small HTML-file, &apos;autoindexstats.html&apos;, which describes some preliminary ideas for what can be done for later revisions of the feature. Feel free to add stuff if you have more ideas. We should also document a decision about not implementing any of these &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; For instance, how many knobs do we want to expose for power-users? Another reason may be too high complexity.&lt;/p&gt;

&lt;p&gt;Patch 2e ready for review.&lt;br/&gt;
I&apos;d really like some review before committing this code, but if I nothing happens I will just commit it and handle the problems as they come &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12935808" author="dagw" created="Thu, 25 Nov 2010 17:28:51 +0000"  >&lt;p&gt;I&apos;ll have a look at patch 2e.&lt;/p&gt;</comment>
                            <comment id="12935887" author="dagw" created="Thu, 25 Nov 2010 21:44:39 +0000"  >&lt;p&gt;Some comments on the tests first (started with those). Looks good, as&lt;br/&gt;
far as I can understand the tests do test the auto-update feayure in&lt;br/&gt;
many aspects, and the MT test stresses it with concurrent drop/create&lt;br/&gt;
of the table in question. Without the rest of the patch, the&lt;br/&gt;
AutomaticIndexStatisticsTest fail as expected;&lt;br/&gt;
AutomaticIndexStatisticsTest also hung waiting for three stat entries,&lt;br/&gt;
that&apos;s ok I guess.&lt;/p&gt;

&lt;p&gt;AutomaticIndexStatisticsMultiTest worked also without the rest of the&lt;br/&gt;
patch, but it still adds value since we know auto-update happens now,&lt;br/&gt;
so the code paths exercised is different.&lt;/p&gt;

&lt;p&gt;Some comments on AutomaticIndexStatisticsTest:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;hardcoded use of &quot;system&quot; &amp;amp; &quot;system/wombat&quot; should be avoided&lt;/li&gt;
	&lt;li&gt;Is 500ms wait for deamon to update stats enough/stable&lt;br/&gt;
    enough for the tests? Have you measured how long it&lt;br/&gt;
    typically takes?&lt;/li&gt;
	&lt;li&gt;Does testStatsCreatedOnGrowth add any value compared to&lt;br/&gt;
    testGenerationCompleteDeleteDb?&lt;/li&gt;
	&lt;li&gt;hardwired constant string &quot;masterDb&quot;&lt;/li&gt;
	&lt;li&gt;Not safe to copy db without freezing source db?&lt;br/&gt;
    (postcommit could do writes?)&lt;/li&gt;
	&lt;li&gt;I guess testDropWhileScanningThenDelete doesn&apos;t really know&lt;br/&gt;
    for sure whether it exercised to logic to stop scan (based&lt;br/&gt;
    on timing), so just passing isn&apos;t proof the righ tthing&lt;br/&gt;
    happened. Probably hard to improve on that though? Maybe you&lt;br/&gt;
    could start with one statistics and assert that its still&lt;br/&gt;
    same date after shutting down &amp;amp; rebooting?&lt;/li&gt;
	&lt;li&gt;// We expect three stats objects: base table, index and&lt;br/&gt;
    third is ? Would be nice with explanation in comment here.&lt;/li&gt;
	&lt;li&gt;dumpLocks isn&apos;t used, so could be commented out or removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More when I have looked into the implementation.&lt;/p&gt;</comment>
                            <comment id="12935889" author="dagw" created="Thu, 25 Nov 2010 22:10:18 +0000"  >&lt;p&gt;Some comments on the tests first (started with those). Looks good, as&lt;br/&gt;
far as I can understand the tests do test the auto-update feature in&lt;br/&gt;
many aspects, and the MT test stresses it with concurrent drop/create&lt;br/&gt;
of the table in question. Without the rest of the patch, the&lt;br/&gt;
AutomaticIndexStatisticsTest fail as expected;&lt;br/&gt;
AutomaticIndexStatisticsTest also hung waiting for three stat entries,&lt;br/&gt;
that&apos;s ok I guess.&lt;/p&gt;

&lt;p&gt;AutomaticIndexStatisticsMultiTest worked also without the rest of the&lt;br/&gt;
patch, but it still adds value since we know auto-update happens now,&lt;br/&gt;
so the code paths exercised is different.&lt;/p&gt;

&lt;p&gt;Some comments on AutomaticIndexStatisticsTest:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;hard-coded use of &quot;system&quot; &amp;amp; &quot;system/wombat&quot; should be avoided&lt;/li&gt;
	&lt;li&gt;Is 500ms wait for daemon to update stats enough/stable&lt;br/&gt;
    enough for the tests? Have you measured how long it&lt;br/&gt;
    typically takes?&lt;/li&gt;
	&lt;li&gt;Does testStatsCreatedOnGrowth add any value compared to&lt;br/&gt;
    testGenerationCompleteDeleteDb?&lt;/li&gt;
	&lt;li&gt;hardwired constant string &quot;masterDb&quot;&lt;/li&gt;
	&lt;li&gt;Not safe to copy db without freezing source db?&lt;br/&gt;
    (post-commit could do writes?)&lt;/li&gt;
	&lt;li&gt;I guess testDropWhileScanningThenDelete doesn&apos;t really know&lt;br/&gt;
    for sure whether it exercised to logic to stop scan (based&lt;br/&gt;
    on timing), so just passing isn&apos;t proof the right thing&lt;br/&gt;
    happened. Probably hard to improve on that though? Maybe you&lt;br/&gt;
    could start with one statistics and assert that its still&lt;br/&gt;
    same date after shutting down &amp;amp; rebooting?&lt;/li&gt;
	&lt;li&gt;// We expect three stats objects: base table, index and&lt;br/&gt;
    third is ? Would be nice with explanation in comment here.&lt;/li&gt;
	&lt;li&gt;dumpLocks isn&apos;t used, so could be commented out or removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More when I have looked into the implementation.&lt;/p&gt;</comment>
                            <comment id="12964631" author="lilywei" created="Mon, 29 Nov 2010 06:02:39 +0000"  >&lt;p&gt;Thanks Kristian.  I really like the change from derby.storage.indexStats.trace to &quot;log&quot; and interface IndexStatisticsDaemon .  Suites.all run fine for me with Statistic Index turn on. When test on AutomaticIndexStatisticTest, I am seeing failure on testGenerationCompleteDeleteDb, testStatsCreatedOnGrowth, and testStatsUpdatedOnGrowth. testStatisticsCorrectness hangs. I use the following script:&lt;br/&gt;
java -client -Dderby.tests.trace=true -Dderby.language.disableIndexStatsUpdate=t&lt;br/&gt;
rue -Dderby.language.logIndexStatsUpdate=true -Dderby.language.traceIndexStatsUp&lt;br/&gt;
date=both -Dderby.storage.indexStats.auto=true -Dderby.storage.indexStats.log=tu&lt;br/&gt;
re -Dderby.storage.indexStats.trace=log junit.textui.TestRunner $1 2&amp;gt;&amp;amp;1 | tee rj&lt;br/&gt;
all.out&lt;/p&gt;

&lt;p&gt;I am attaching my the zip file that contain the entire out on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4771&quot; title=&quot;Continue investigation of automatic creation/update of index statistics&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4771&quot;&gt;&lt;del&gt;DERBY-4771&lt;/del&gt;&lt;/a&gt;-2e-prototype.rar&lt;/p&gt;</comment>
                            <comment id="12964840" author="kristwaa" created="Mon, 29 Nov 2010 17:19:27 +0000"  >&lt;p&gt;&amp;#8212; Dag&apos;s comment&lt;br/&gt;
Thanks, Dag. See my comments below (same order as above). I&apos;m attaching&lt;br/&gt;
&apos;derby-4771-2f-prototype_lcc_code_dump-WORK-IN-PROGRESS.diff&apos;, which isn&apos;t&lt;br/&gt;
quite finished yet but contains most of the test fixes.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;fixed&lt;/li&gt;
	&lt;li&gt;the daemon will start working as soon as the work is scheduled.&lt;br/&gt;
   The time it takes depends on overhead related to thread creation/start and&lt;br/&gt;
   scanning the base table. Since the tables are small, 500ms is enough if the&lt;br/&gt;
   system is in a good state. You are right it may be too low in some cases, so&lt;br/&gt;
   I added a method that will try to get the statistics several times until the&lt;br/&gt;
   minimum number of stats has been obtained, or the operation times out (I set&lt;br/&gt;
   the default timeout to 20 seconds).&lt;/li&gt;
	&lt;li&gt;No, I deleted one and renamed the other.&lt;/li&gt;
	&lt;li&gt;You mean that it is used in several places without being declared a constant?&lt;br/&gt;
   I created MASTERDB.&lt;/li&gt;
	&lt;li&gt;Thanks, I have forgotten to shut down that database.&lt;/li&gt;
	&lt;li&gt;testDropWhileScanningThenDelete: TBD, but one option is to trigger another&lt;br/&gt;
   automated update after the drop, to at least make sure the daemon is able to&lt;br/&gt;
   work after a table has disappeared under its feet.&lt;br/&gt;
   Didn&apos;t quite get you proposal, but I&apos;ll give it some more thought tomorrow.&lt;br/&gt;
   I think originally this test found a bug where I was unable to delete the&lt;br/&gt;
   database because of dangling file handles on Windows.&lt;/li&gt;
	&lt;li&gt;comment added. We&apos;re expecting three entries for the single index, since it&lt;br/&gt;
   contains three columns (leading columns: c1, c1-c2, c1-c2-c3).&lt;/li&gt;
	&lt;li&gt;deleted dumpLocks, I think Knut added a similar function somewhere that can&lt;br/&gt;
   be copied (and adapted if required) if needed.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&amp;#8212; Lily&apos;s comment&lt;br/&gt;
Thanks for testing again, Lily.&lt;/p&gt;

&lt;p&gt;Can you please apply patch 2f (work in progress, but no reason to test with the&lt;br/&gt;
older tests now), make sure you do a clean build and then run the tests again?&lt;br/&gt;
They&apos;re not failing for me, but I&apos;m currently testing on Solaris.&lt;br/&gt;
From the output, it looks like the statistics aren&apos;t getting generated &lt;span class=&quot;error&quot;&gt;&amp;#91;in time&amp;#93;&lt;/span&gt;&lt;br/&gt;
on your machine. This could be due to the problem that Dag commented on,&lt;br/&gt;
which is hopefully addressed in the preliminary patch 2f.&lt;/p&gt;

&lt;p&gt;I&apos;ll run the tests on Windows myself too, to get some more data points.&lt;/p&gt;

&lt;p&gt;For brevity, it would be nice if you deleted the deprecated properties from the&lt;br/&gt;
command line.&lt;/p&gt;</comment>
                            <comment id="12965450" author="dagw" created="Tue, 30 Nov 2010 21:41:27 +0000"  >&lt;p&gt;Thanks Kristian! Re testDropWhileScanningThenDelete proposal, sorry, reviewer was just confused &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12965757" author="lilywei" created="Wed, 1 Dec 2010 17:39:44 +0000"  >&lt;p&gt;Thanks Kristian for all the detail information. I apply patch 2f. I clean the build and run the AutomaticIndexStatisticsTest. As your prediction, take out deleted deprecated properties make the hang go away. Yeah! Thank you! However, I am still getting failure on testStatsCreatedOnGrowthThenDeleteDb, testStatisticsCorrectness and testStatsCreatedOnGrowthThenDeleteDb. I am including the .zip for my test result. I did not find a lot of tracing information for index storage. Should this be the case?&lt;br/&gt;
It is great to learn we can drop table while statistic indexing daemon thread is working. I think we can test it by turning feature on and run Suites.all. Is that a right assumption? I did that and the tests run just fine. &lt;/p&gt;</comment>
                            <comment id="12965851" author="kristwaa" created="Wed, 1 Dec 2010 21:15:08 +0000"  >&lt;p&gt;The only thing I can say based on the output you attached, is that it appears that the feature has been disabled.&lt;br/&gt;
I think this is because of a bug I introduced when I changed the names of the properties. Try running &lt;b&gt;without&lt;/b&gt; specifying derby.storage.indexStats.auto.&lt;/p&gt;

&lt;p&gt;I have already fixed this in my sandbox, and I&apos;ll include it in the proper version of 2f, along with one more test and some additional changes to the tests/utilities. I&apos;ll also inculde the value of the disable-flag in the trace line printed when the daemon is created.&lt;/p&gt;</comment>
                            <comment id="12965879" author="dagw" created="Wed, 1 Dec 2010 22:23:03 +0000"  >&lt;p&gt;Hi Kristian, some comments on the patch beyond the tests. I still need to look at the meat in IndexStatisticsDaemonImpl, that will follow in a next review installment. To the extent my (preliminary) questions will be answered when I have read IndexStatisticsDaemonImpl fully, please ignore them &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Generally the structure of the patch is clear and seems to do the right things. There are some amount of TODOs left that need weork as you are no doubt aware, and some of the naming could use some work, more below.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/CursorNode.java&lt;/p&gt;

&lt;p&gt;                if (fromTable instanceof FromBaseTable) {&lt;br/&gt;
                    TableDescriptor td = fromTable.getTableDescriptor();&lt;br/&gt;
                    :&lt;br/&gt;
                    // TODO: This was done because I didn&apos;t find another way to&lt;br/&gt;
                    //       access the base tables in the query at the time I&lt;br/&gt;
                    //       needed to. There may be a better way to do this!&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The privilege collection phase seems like a good place to do it to me? Obviates need for an extra pass, and it&apos;s always performed I think. It would be nice to format the block in &quot;if (fromTable.isPrivilegeCollectionRequired())&quot; with braces and correct indentation while you are at it, too.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;                    if (checkIndexStats &amp;amp;&amp;amp;&lt;br/&gt;
                            td.getTableType() == TableDescriptor.BASE_TABLE_TYPE) {&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Isn&apos;t td&apos;s table type always BASE_TABLE_TYPE here? Cf. &quot;if (fromTable instanceof FromBaseTable)&quot; above.. No, it seems it can also be a view, cf comment in FromBaseTable&apos;s class Javadoc. Confusing.. maybe add a comment.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;                        if (statsToUpdate == null) &lt;/p&gt;
{
                            statsToUpdate = new ArrayList(2);
                        }
&lt;p&gt;                        statsToUpdate.add(td);&lt;br/&gt;
                    }&lt;br/&gt;
                }&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Btw, why use &quot;2&quot; as initialCapacity to &quot;new ArrayList&quot;? Is it statistically more likely we have 2 than any other number (1, 3)? If so, comment, if not, I&apos;d suggest use no-arg constructor.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;// Look for missing and stale statistics.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  The loop seems to be doing the opposite: removing those that are up-to-date? I am not a big fan of include type (here &quot;flag&quot; in the name of methods &amp;amp; variables); I&apos;d prefer a name that indicated the semantics of the flag instead, e.g. &quot;getAndClearIsUpToDate&quot;. That reversed meaning removes the need for the &quot;!&quot; in the test and makes it easier to read.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;// Assume a low number of base tables.&lt;br/&gt;
  baseTables.remove();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I presume this comment pertains to performance only.&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;p&gt;Parameterize 100 properly with a constant or property? Fix two TODOs in estimateCost.&lt;/p&gt;


&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Remove TODO in setIndexStatsRefresher (machinery is temporary, code says).&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;markForIndexStatsUpdate: sdl may see nullpointerexception if tableRowCountEstimate &amp;gt;= 0, cf.&lt;br/&gt;
  test: &quot;if (sdl.isEmpty() &amp;amp;&amp;amp; tableRowCountEstimate &amp;lt; 0)&quot; doesn&apos;t hold. If known invariant, use ASSERT instead. Javadoc should explain the use of negative tableRowCountEstimate which seems expected.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The diff must be one order of magnitude as far as i can read the code, for an update to be triggered. Would be nice to comment this logic a bit. Not sure why you need the first comparison (against 1000 - has a TODO attached though) when you have the log comparison anyway just beneath? Only saves som math operations; worth it?  The generated reason string&lt;/p&gt;

&lt;p&gt;  &quot;indexStatsUpdateReason = &quot;t-est=&quot; + tableRowCountEstimate +&lt;br/&gt;
  &quot;, i-est=&quot; + indexRowCountEstimate + &quot; =&amp;gt; cmp=&quot; + cmp;&lt;/p&gt;

&lt;p&gt;seems to be comparing apples to oranges (number vs log number)?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;markForIndexStatsUpdate: change comment to Javadoc. Remaining TODO: The statement &quot;the more accurate table row count estimate may be lost&quot; isn&apos;t clear to me.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;/p&gt;

&lt;p&gt;getIndexStatsRefresher: &quot;if disabled&quot; how can it be disabled? A: See disableIndexStatsRefresher.&lt;br/&gt;
When is this one used (scenario) ? Can it be reeenabled, if so, how? No, only on fatal error. Maybe note in Javadoc what it&apos;s for..&lt;/p&gt;

&lt;p&gt;doSetIndexStatsRefresher, setIndexStatsRefresher: I&apos;d prefer doCreateIndexStatsRefresher, createIndexStatsRefresher I think. It just seemed vague to me what the verb &quot;set&quot; meant here. Since a refresher isn&apos;t provided in &quot;setIndexStatsRefresher&quot;, I mean, as in a normal getter/setter pattern.&lt;/p&gt;

&lt;p&gt;doSetIndexStatsRefresher -&amp;gt; !indexRefreshedExists&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/services/daemon/IndexStatisticsDaemon.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The background mode will try to&lt;/li&gt;
	&lt;li&gt;affect other operations as little as possible, and errors won&apos;t be reported&lt;/li&gt;
	&lt;li&gt;unless they are severe.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;How is this safe? (errors not reported?) explain! What happens if scheduled work throws? Under which condition can work queue be full? Then what happens? I guess I&apos;ll know when I read the Impl class &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Javadoc typo for schedule: schedulig&lt;/p&gt;</comment>
                            <comment id="12965886" author="dagw" created="Wed, 1 Dec 2010 22:27:26 +0000"  >&lt;p&gt;Note that QueryTreeNode (also) has an unused method called &quot;getRowEstimate&quot; (you added that to Statistics), that could perhaps be removed to avoid confusion.&lt;/p&gt;</comment>
                            <comment id="12965893" author="kristwaa" created="Wed, 1 Dec 2010 22:35:38 +0000"  >&lt;p&gt;Thanks for the comments, Dag!&lt;/p&gt;

&lt;p&gt;I&apos;ll get to work on these tomorrow. This is the first review this prototype code has seen, and it has changed significantly since I wrote the first version. Nice to get someone with fresh eyes and no prior knowledge about the patch to pick up things like naming and strange comments &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12966165" author="dagw" created="Thu, 2 Dec 2010 16:31:16 +0000"  >&lt;p&gt;Last review installment. Just minor issues with the daemon implementation, and some questions:&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/services/daemon/IndexStatisticsDaemon.java&lt;/p&gt;

&lt;p&gt;  The background mode will try to&lt;br/&gt;
  affect other operations as little as possible, and errors won&apos;t be reported&lt;br/&gt;
  unless they are severe. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;How is this safe? (errors not reported?) explain! What happens if schedule throws? Under which condition can work queue be full? Then what hapens?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;LOG_HEADER can be private&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&quot;For instance, it will not set locks on the conglomerates it scans, and if it needs to take locks it will give up immediately if the locks cannot be obtained. This isn&apos;t true in all cases, which means that the background work may still interfere with the user activity in the database (besides from using resources).&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This seems contradictory to me. What are &quot;in all cases&quot; exactly? Not in daemon mode? Or is the first sentence not true: &quot;if it needs to take locks it will give up immediately if the locks cannot be obtained&quot;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Class javadoc IMPROVEMENTS: Note sure I understand the comments about &quot;row estimate when writing statistics&quot;: doesn&apos;t this class compute the &quot;real&quot; numbers? If so, how could they be improved upon?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;daemonDisabled is supposedly guarded by queue monitor. What about access in updateIndexStatsMinion? Seems to be called from runExplicitly, which does not syhcronize on &quot;queue&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The use of volatile for &quot;daemonStopped&quot; appears to be safe for use even with Java 1.4 (cf. &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#volatile&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#volatile&lt;/a&gt;), good. (I can&apos;t see any variable access reordering that could impact its correctness here),&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Under what conditions can &quot;daemonLCC&quot; be null when &quot;run&quot; is called? (cf test ca line 4 of that method) I think, if a thread is started up again. Could use a comment.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Top of run method: question of philosopy of local use of &quot;final&quot;:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        long runStart = System.currentTimeMillis();&lt;br/&gt;
        final ContextService ctxService = ContextService.getFactory();&lt;/p&gt;

&lt;p&gt;  Both variables are effectively final, but only one is marked as such. Is it accidental?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&quot;// TODO: Would be nice to name the transaction.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Interesting, is there a facility to do that in Derby?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Optional (additional) tracing to std out is just temporary? Or do you want to keep it in production code as well?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;javadoc for &quot;schedule&quot;: &quot;Assume the descriptor will be valid until we get around to generate the statistics.&quot; Is this assured somewhere outside this class? If not, what would happen if it does not hold?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;the boolean result from &quot;schedule&quot; does not seem to be used. Needed?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you want this for some future use, the reject due to the table already being scheduled should probably have another value; it seems less serious than the queue being full or the daemon beinbg disabled, I think: maybe of of &lt;/p&gt;
{accepted, rejected, redundant}
&lt;p&gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;runningThread is supposed to be protected by &quot;queue&quot;, but setting it to null in &quot;run&quot;&apos;s &quot;finally&quot; block is not protected, so you could risk a race condition when determining if thread is running or not on schedule, I think. &quot;runningThread&quot; need probably be set to false inside the synchronized block of run where you discover the queue is empty, sinc efater that point, the thread will invariable terminate, and schedule needs to create a new one.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;} else if (se.getSeverity() &amp;gt;= ExceptionSeverity.DATABASE_SEVERITY) 
{
            // The database or system is going down. Probably handled elsewhere
            // but disable daemon anyway.

Do we know this for sure? I thought that usually this would be handled when the severity bubbled up to handleException on the API level, which in turn calls TransactionResourceImpl#handleException to do the handling.

* handleUnexpectedErrors#TODO: Do we need a mechanism to disable the daemon if too many
  unexpected errors are raised within a short period of time?&quot;

Probably a good idea, yes.

* run: &quot;// Queue may have been cleared due to a severe failure
        // or shutdown.&quot;
 
Where in the code would this happen?

* }
&lt;p&gt; catch (ShutdownException se) {&lt;br/&gt;
  stop(); // Call stop to log activity&lt;br/&gt;
  ctxMgr.cleanupOnError(se);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Can this happen? I tried to convince myself it could... Answer, yes it can happen, e.g in Dep man&apos;s coreInvalidateFor which does popCompilerContext.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;generateStatistics  &quot;TODO: Do we want to retry if we can&apos;t get the lock(s)?&lt;br/&gt;
                      If so, maybe add sleep for a while if there are no&lt;br/&gt;
                      other stats to generate?&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seems you do add sleep now always. Would you want to try another queue task in meantime, if there is one?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In invalidateStatements, you always retry when seeing StandardException. Is that safe? Shouldn&apos;t it only be for LOCK_TIMEOUT as in generateStatistics?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Javadoc for RowCountable#setEstimatedRowCount should probably be updated now: &quot;For instance if we implement some sort of update statistics command, or just after a create index a complete scan will have been done of the table.&quot; (It is called from setHeapRowEstimate)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Sorry it took so long to review the patch, much new code for me, edifying though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


</comment>
                            <comment id="12966258" author="kristwaa" created="Thu, 2 Dec 2010 20:14:43 +0000"  >&lt;p&gt;Attaching patch 2f, which contains mostly test improvements. I also fixed the bug in the property handling.&lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure about the value of the multi-test, but the logging output shows that the code dealing with duplicates is stressed a bit:&lt;br/&gt;
$ grep istat system/derby.log &lt;br/&gt;
Thu Dec 02 21:02:08 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-3,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: update scheduled - 6c44409f-012c-a8ad-5f23-ffffb00d8f4e reason=&lt;span class=&quot;error&quot;&gt;&amp;#91;no stats, row-estimate=-80075&amp;#93;&lt;/span&gt; (queueSize=1)&lt;br/&gt;
Thu Dec 02 21:02:08 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; &quot;APP&quot;.&quot;MTSEL&quot;: generating index statistics&lt;br/&gt;
Thu Dec 02 21:02:08 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: wrote stats for index ace4c0a3-012c-a8ad-5f23-ffffb00d8f4e (rows=100000, card=&lt;span class=&quot;error&quot;&gt;&amp;#91;10,100000&amp;#93;&lt;/span&gt;), 0.0% utilization&lt;br/&gt;
Thu Dec 02 21:02:08 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; &quot;APP&quot;.&quot;MTSEL&quot;: scan durations (c1153=124ms)&lt;br/&gt;
Thu Dec 02 21:02:08 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: generation complete (269 ms)&lt;br/&gt;
Thu Dec 02 21:02:18 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;TestRunner-Thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; stopping daemon, active=false &lt;span class=&quot;error&quot;&gt;&amp;#91;q/p/s=0/1/1,err:k/u=0/0,rej=76&amp;#93;&lt;/span&gt;&lt;br/&gt;
Thu Dec 02 21:02:22 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread-12,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: update scheduled - b4df26ce-012c-a8ad-5f23-ffffb00d8f4e reason=&lt;span class=&quot;error&quot;&gt;&amp;#91;no stats, row-estimate=-80095&amp;#93;&lt;/span&gt; (queueSize=1)&lt;br/&gt;
Thu Dec 02 21:02:22 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; &quot;APP&quot;.&quot;MTSEL&quot;: generating index statistics&lt;br/&gt;
Thu Dec 02 21:02:22 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: wrote stats for index 7baea6d2-012c-a8ad-5f23-ffffb00d8f4e (rows=100000, card=&lt;span class=&quot;error&quot;&gt;&amp;#91;10,100000&amp;#93;&lt;/span&gt;), 0.0% utilization&lt;br/&gt;
Thu Dec 02 21:02:22 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; &quot;APP&quot;.&quot;MTSEL&quot;: scan durations (c1185=72ms)&lt;br/&gt;
Thu Dec 02 21:02:22 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;index-stat-thread,5,main&amp;#93;&lt;/span&gt; &lt;/p&gt;
{istat} &quot;APP&quot;.&quot;MTSEL&quot;: generation complete (429 ms)&lt;br/&gt;
Thu Dec 02 21:02:32 CET 2010 Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;TestRunner-Thread,5,main&amp;#93;&lt;/span&gt; {istat}
&lt;p&gt; stopping daemon, active=false &lt;span class=&quot;error&quot;&gt;&amp;#91;q/p/s=0/1/1,err:k/u=0/0,rej=337&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;BTW, I find the &quot;daemon stats&quot; to be a bit messy. Any ideas how to improve the presentation?&lt;br/&gt;
Is it too much info?&lt;br/&gt;
Anything you miss?&lt;br/&gt;
It will only be printed when the database is properly shut down.&lt;/p&gt;

&lt;p&gt;Here&apos;s a quick legend:&lt;br/&gt;
 active = whether the daemon was doing work when stopped&lt;br/&gt;
 q = queued&lt;br/&gt;
 p = processed&lt;br/&gt;
 s = scheduled&lt;br/&gt;
 k = known errors (expected)&lt;br/&gt;
 u = unexpected errors&lt;br/&gt;
 rej = rejected requests (full queue or duplicate entries)&lt;/p&gt;

&lt;p&gt;I&apos;ll address Dag&apos;s comments in the next patch.&lt;/p&gt;</comment>
                            <comment id="12967099" author="kristwaa" created="Mon, 6 Dec 2010 06:39:22 +0000"  >&lt;p&gt;Removed unused method QueryTreeNode.getRowEstimate with revision 1042461.&lt;br/&gt;
Thanks, Dag!&lt;/p&gt;</comment>
                            <comment id="12967249" author="kristwaa" created="Mon, 6 Dec 2010 16:42:57 +0000"  >&lt;p&gt;Attached patch 2g.&lt;/p&gt;

&lt;p&gt;Addressing Dag&apos;s first set of comments from 01/Dec/10 05:23 PM (in order).&lt;/p&gt;

&lt;p&gt;M   java/engine/org/apache/derby/impl/sql/compile/CursorNode.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I removed the TODO comment and created method collectTablePrivsAndStats.&lt;br/&gt;
  Also reformatted the existing comment somewhat.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added comment. The BaseFromTable can represent several types of sources,&lt;br/&gt;
  for instance system tables, sub queries, and VTIs. It can also represent a&lt;br/&gt;
  view, but FromBaseTable nodes representing views are rewritten to&lt;br/&gt;
  FromSubqueries during binding according to the FromBaseTable class JavaDoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Now using no-arg constructor.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added comment and made for-loop iterate backwards to. It is very likely&lt;br/&gt;
  that statistics are mostly up-to-date, so removing from the end of the list&lt;br/&gt;
  saves some copies. On the other hand, the list will mostly be very small,&lt;br/&gt;
  which is why I&apos;m not creating a second list to copy relevant table&lt;br/&gt;
  descriptors to.&lt;br/&gt;
  Renamed method in TableDescriptor to getAndClearIndexStatsIsUpToDate.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Yes, comment removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M   java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I decided to rewrite the code, which relocates the use of the constant.&lt;br/&gt;
  It will now be handled inside TableDescriptor.markForIndexStatsUpdate.&lt;br/&gt;
  See also comment below at the bottom.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M   java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I&apos;m keeping this temporary code for now, but I have changed it.&lt;br/&gt;
  If the user hasn&apos;t explicitly specified the logging property, it will be set&lt;br/&gt;
  to true. If explicitly specified by the user, it won&apos;t be overridden.&lt;br/&gt;
  This code should be removed before going into a release, though, and then I&lt;br/&gt;
  guess logging will default to false.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A   java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;br/&gt;
M   java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;br/&gt;
M   java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;TBD: I&apos;ll get back to this later, I have rewritten the code a bit (ditching&lt;br/&gt;
  the use of negative row count estimates).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I removed the TODO comment. I added it when I discovered that the row count&lt;br/&gt;
  estimate can get &quot;out of sync&quot; due to how Derby is updating it. It will only&lt;br/&gt;
  happen in certain circumstances, and based on the comments for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2949&quot; title=&quot;AssertionFailedError in testStalePlansOnLargeTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2949&quot;&gt;&lt;del&gt;DERBY-2949&lt;/del&gt;&lt;/a&gt; it&lt;br/&gt;
  looks like Knut hit the same problem. He also says that it might be possible&lt;br/&gt;
  to improve the logic.&lt;br/&gt;
  Added JavaDoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M   java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Various comments from Dag here:&lt;br/&gt;
  o The daemon can disabled at runtime if it experiences severe errors. Note&lt;br/&gt;
    that if the user doesn&apos;t want to have the daemon running, he/she would&lt;br/&gt;
    disable it by setting a (system-wide or database) property.&lt;br/&gt;
  o Renamed methods.&lt;br/&gt;
  o Not sure what I&apos;m supposed to do about this comment, but it is correct &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TBD: I&apos;ll address the comment about errors in the next iteration.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed typo.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I decided to add four properties to aid debugging and development. These&lt;br/&gt;
properties are (with current defaults:&lt;br/&gt;
 a) derby.storage.indexStats.debug.createThreshold (100)&lt;br/&gt;
 b) derby.storage.indexStats.debug.absdiffThreshold (1000)&lt;br/&gt;
 c) derby.storage.indexStats.debug.lndiffThreshold (1.0)&lt;br/&gt;
 d) derby.storage.indexStats.debug.queueSize (5)&lt;/p&gt;

&lt;p&gt;(a) determines how big a table must be before statistics are automatically&lt;br/&gt;
created. (b) determines how big the discrepancy between the row estimates for&lt;br/&gt;
the table and the index must be before the statistics are updated. (c)&lt;br/&gt;
determines how big the logarithmic (natural logarithm) must be before the&lt;br/&gt;
statistics are updated. The values of these properties are printed if tracing&lt;br/&gt;
is turned on. Now:&lt;/p&gt;

&lt;p&gt;  Q: I don&apos;t understand these properties!&lt;br/&gt;
  A: Read the code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
     These properties are made available for experimentation and debugging&lt;br/&gt;
     only. a-c affect when statistics are created or updated, and are used in&lt;br/&gt;
     TableDescriptor. (d) is only used in IndexStatisticsDaemonImpl.&lt;/p&gt;

&lt;p&gt;  Q: Why have both (a) and (b)?&lt;br/&gt;
  A: Purely for debugging and experimentation. If these properties are included&lt;br/&gt;
     in production code, I expect they can be folded into one.&lt;/p&gt;

&lt;p&gt;  Q: Why have both (b) and (c)?&lt;br/&gt;
  A: In general (c) will decide if the statistics are updated. However, for&lt;br/&gt;
     small tables (c) will cause frequent updates of the statistics. For small&lt;br/&gt;
     tables accurate statistics are not needed for good performance &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, so&lt;br/&gt;
     there is no reason to frequently update the stats. This is where (b) comes&lt;br/&gt;
     into play.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; One exception might be if the rows are huge.&lt;/p&gt;

&lt;p&gt;Note that I have two outstanding comments from Dag (marked TBD), and ten TODOs&lt;br/&gt;
left. Four of these won&apos;t go away until later. The remaining six I&apos;ll try to&lt;br/&gt;
address in the next iteration.&lt;/p&gt;</comment>
                            <comment id="12968765" author="kristwaa" created="Tue, 7 Dec 2010 14:56:37 +0000"  >&lt;p&gt;Attaching untested patch 2h, which addresses Dag&apos;s comments from 02/Dec/10 11:31 AM.&lt;/p&gt;

&lt;p&gt;(Q = question, C = comment, A = action)&lt;/p&gt;

&lt;p&gt;A   java/engine/org/apache/derby/iapi/services/daemon/IndexStatisticsDaemon.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Various questions here:&lt;br/&gt;
  Q: How is this safe? (errors not reported?) explain!&lt;br/&gt;
  C: I guess it isn&apos;t totally safe. That said, except for writing statistics&lt;br/&gt;
     entries into a system table, the daemon is only reading data. The basic&lt;br/&gt;
     principle for the daemon when it comes to error handling is to ditch the&lt;br/&gt;
     current unit of work if there in an error and continue with the next one.&lt;br/&gt;
     It doesn&apos;t really care if the operation fails, because an update will be&lt;br/&gt;
     scheduled again. The daemon is currently separating between expected and&lt;br/&gt;
     unexpected errors. The former will simple be ignored, as they can arise&lt;br/&gt;
     for various reasons during &quot;normal operation&quot;. One such error is failed&lt;br/&gt;
     invalidation because someone else is accessing the existing statistics.&lt;br/&gt;
     Unexpected errors are errors for which the daemon doesn&apos;t have specific&lt;br/&gt;
     code to handle. The best we can do here is to log it and continue if&lt;br/&gt;
     possible.&lt;br/&gt;
  A: I have rewritten the logging code, such that unexpected errors are always&lt;br/&gt;
     logged, even if logging is disabled.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Q: What happens if schedule throws?&lt;br/&gt;
  C: It doesn&apos;t. If it did, it would have to be&lt;br/&gt;
     handled by the code calling it.&lt;br/&gt;
  A: I removed the throws clause.&lt;/p&gt;

&lt;p&gt;  Q: Under which condition can work queue be full? Then what hapens?&lt;br/&gt;
  C: If work is scheduled at a higher rate than the daemon can generate new&lt;br/&gt;
     statistics. Would typically only happen if there are very large tables in&lt;br/&gt;
     the database.&lt;br/&gt;
     If the queue is full, the work simply won&apos;t be added. It will eventually&lt;br/&gt;
     be added when there is free space in the queue and a query compilation&lt;br/&gt;
     triggers the scheduling.&lt;br/&gt;
  A: I think the current default queue size is too small (5). I have&lt;br/&gt;
     increased to 20 for now (worst case is 19 comparisons to look for&lt;br/&gt;
     duplicates per query compilation).&lt;/p&gt;

&lt;p&gt;A   java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I removed LOG_HEADER (used in only one place now).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Various questions:&lt;br/&gt;
  Q: What are &quot;in all cases&quot; exactly?&lt;br/&gt;
  C: Currently the daemon has to take locks when invalidating statements and&lt;br/&gt;
     dropping/adding statistics entries.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Q: Not in daemon mode?&lt;br/&gt;
  C: Yes, in explicit mode it will take locks during scanning as well to stop&lt;br/&gt;
     another transaction to drop the table/index.&lt;/p&gt;

&lt;p&gt;  Q: Or is the first sentence not true: &quot;if it needs to take locks it will give up immediately if the locks cannot be obtained&quot;&lt;br/&gt;
  C: This is true as far as there is an easy way to do it. I think the&lt;br/&gt;
  A: I rewrote the comment somewhat, and added a description of the flow.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Removed comment. I think I added it when considering very large tables, but I&lt;br/&gt;
  don&apos;t understand it myself any more...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Rewrote loop slightly to synchronize on &quot;queue&quot; when checking &quot;daemonDisabled&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Good!&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&quot;daemonLCC&quot; will be null the first time run is started. Since the daemon&lt;br/&gt;
  might not run at all, I decided to create the database connection lazily.&lt;br/&gt;
  I have now coded under the assumption that the daemon won&apos;t lose the&lt;br/&gt;
  connection to the database unless the database is shut down (for whatever&lt;br/&gt;
  reason). This basically consisted of removing parts of the comment for&lt;br/&gt;
  &quot;daemonLCC&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I added final to both.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Yes, but not at this level. I thought it would be nice to have a name for the&lt;br/&gt;
  transaction to identify it in the transaction table.&lt;br/&gt;
  I think some new methods must be added to be able to name a transaction at&lt;br/&gt;
  this level, so I&apos;m not sure if it is worth the trouble.&lt;br/&gt;
  I&apos;m keeping the TODO for now, might remove it in the next iteration.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Opinions?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Whether or not to remove the tracing code depends on the feedback received&lt;br/&gt;
  during testing. If people find it useful, it can be improved a little and&lt;br/&gt;
  kept, but if not it should be removed.&lt;br/&gt;
  I envision this happening closer to when the target release is cut.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added another sentence to the JavaDoc, stating that the table descriptor&lt;br/&gt;
  (unit of work) will be discarded if it turns out to be invalid when the&lt;br/&gt;
  statistics update is about to happen. I expect the most common error is that&lt;br/&gt;
  the table has been dropped since the work for it was scheduled.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;It isn&apos;t needed now. Since the interface is internal, and there is only one&lt;br/&gt;
  implementation of it, I suppose the best action to take now is to remove it.&lt;br/&gt;
  We can introduce it again later, and then probably in a shape more like you&lt;br/&gt;
  have described. It feels a bit odd to say in the JavaDoc that scheduling&lt;br/&gt;
  requests may be denied, and not have a way to learn if it happened or not...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Opinions?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added synchronization for runningThread in the finally-block.&lt;br/&gt;
  The current code will let the thread die and then create a new one on the&lt;br/&gt;
  next update request. I considered adding a sleep before letting the thread&lt;br/&gt;
  die, in case a new request would come in quickly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Opinions?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Do you mean we should call TransactionResourceImpl#handleException explicitly&lt;br/&gt;
  here?&lt;br/&gt;
  I think the comment meant to say that the daemon will be disabled elsewhere.&lt;br/&gt;
  I&apos;ll address this issue in the next iteration.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added simple shutdown mechanism if there are too many consecutive errors.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Currently the queue is cleared only when the daemon is shut down.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Here&apos;s another way it can happen. Parts of the trace may be familiar to you &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
org.apache.derby.iapi.error.ShutdownException: &lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.checkInterrupt(ContextManager.java:437)&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.getContext(ContextManager.java:155)&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextService.getContextOrNull(ContextService.java:249)&lt;br/&gt;
        at org.apache.derby.iapi.util.InterruptStatus.setInterrupted(InterruptStatus.java:71)&lt;br/&gt;
        at org.apache.derby.iapi.util.InterruptStatus.noteAndClearInterrupt(InterruptStatus.java:112)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.recoverContainerAfterInterrupt(RAFContainer4.java:807)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(RAFContainer4.java:366)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(RAFContainer4.java:246)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.readPage(CachedPage.java:671)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(CachedPage.java:190)&lt;br/&gt;
        at org.apache.derby.impl.services.cache.ConcurrentCache.find(ConcurrentCache.java:295)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2530)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.FileContainer.getPage(FileContainer.java:2580)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:319)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:833)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:820)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.ControlRow.getRightSibling(ControlRow.java:531)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(BTreeScan.java:493)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:464)&lt;br/&gt;
        at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(BTreeScan.java:1596)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl$KeyComparator.fetchRows(IndexStatisticsDaemonImpl.java:1016)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(IndexStatisticsDaemonImpl.java:432)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateAllIndexStats(IndexStatisticsDaemonImpl.java:329)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(IndexStatisticsDaemonImpl.java:291)&lt;br/&gt;
        at org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(IndexStatisticsDaemonImpl.java:650)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:662)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I think I meant to retry the whole operation, that is to add the unit of work&lt;br/&gt;
  to the end of the queue or something. The way it is now, it will retry to get&lt;br/&gt;
  the locks, but if that fails it will discard the unit of work.&lt;br/&gt;
  Note that there is retry logic on several levels here.&lt;br/&gt;
  Since a new unit of work will be scheduled the next time a query using the&lt;br/&gt;
  index(es) is compiled, I&apos;ll delete the TODO and keep the code as it is.&lt;br/&gt;
  If this strategy turns out to be inadequate, we can fix it later.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Updated comment (and some formatting).&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Running tests.&lt;br/&gt;
I asked for opinions on three issues, and one issue will have to be addressed&lt;br/&gt;
in the next iteration (error handling).&lt;/p&gt;

&lt;p&gt;I will now start splitting up the patch by creating a master JIRA with some subtasks.&lt;br/&gt;
I think I also need to write a wiki-page describing the current properties controlling the feature, including the debug properties (for tuning during the development/testing phase).&lt;/p&gt;</comment>
                            <comment id="12969313" author="kristwaa" created="Wed, 8 Dec 2010 13:55:52 +0000"  >&lt;p&gt;I have created the master issue &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4934&quot; title=&quot;Provide automatic update and creation of index cardinality statistics (istat)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4934&quot;&gt;&lt;del&gt;DERBY-4934&lt;/del&gt;&lt;/a&gt; to get the feature into the code base.&lt;br/&gt;
If possible, please provide specific feedback to the various sub tasks.&lt;/p&gt;

&lt;p&gt;Dag, I have copied the text for the remaining issues to address to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4936&quot; title=&quot;Add core istat daemon&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4936&quot;&gt;&lt;del&gt;DERBY-4936&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12969506" author="dagw" created="Wed, 8 Dec 2010 21:43:19 +0000"  >&lt;p&gt;Hi Kristian, thanks for addressing my comments. Here:answers to your questions in connection with my latest batch of comments:&lt;/p&gt;

&lt;p&gt;&amp;gt; * Yes, but not at this level. I thought it would be nice to have a name for the transaction to identify it in the transaction table.  I think some new methods must be added to be able to name a transaction at this level, so I&apos;m not sure if it is worth the trouble.  I&apos;m keeping the TODO for now, might remove it in the next iteration.&lt;br/&gt;
&amp;gt;   &lt;br/&gt;
&amp;gt;   Opinions?&lt;/p&gt;

&lt;p&gt;Fine with me.&lt;/p&gt;

&lt;p&gt;&amp;gt; * It isn&apos;t needed now. Since the interface is internal, and there is only one implementation of it, I suppose the best action to take now is to remove it.  We can introduce it again later, and then probably in a shape more like you have described. It feels a bit odd to say in the JavaDoc that scheduling requests may be denied, and not have a way to learn if it happened or not...&lt;br/&gt;
&amp;gt;   &lt;br/&gt;
&amp;gt;   Opinions?&lt;/p&gt;

&lt;p&gt;Fine, too.&lt;/p&gt;

&lt;p&gt;&amp;gt; * Added synchronization for runningThread in the finally-block.  The current code will let the thread die and then create a new one on the next update request. I considered adding a sleep before letting the thread die, in case a new request would come in quickly.&lt;br/&gt;
&amp;gt;   Opinions?&lt;/p&gt;

&lt;p&gt;I guess this could be improved later if it turns out to be an issue. +1&lt;/p&gt;


&lt;p&gt;&amp;gt; * Do you mean we should call TransactionResourceImpl#handleException explicitly here?&lt;br/&gt;
&amp;gt;   I think the comment meant to say that the daemon will be disabled elsewhere.  I&apos;ll address this issue in the next iteration.&lt;/p&gt;

&lt;p&gt;Great.&lt;/p&gt;


&lt;p&gt;&amp;gt; * I think I meant to retry the whole operation, that is to add the unit of work to the end of the queue or something. The way it is now, it will retry to get the locks, but if that fails it will discard the unit of work.  Note that there is retry logic on several levels here.  Since a new unit of work will be scheduled the next time a query using the index(es) is compiled, I&apos;ll delete the TODO and keep the code as it is.  If this strategy turns out to be inadequate, we can fix it later.&lt;/p&gt;

&lt;p&gt;Ok, fine.&lt;/p&gt;</comment>
                            <comment id="13003131" author="kristwaa" created="Sun, 6 Mar 2011 11:38:50 +0000"  >&lt;p&gt;Closing this issue since the feature has been implemented.&lt;br/&gt;
Further improvements and functionality will be tracked by separate JIRAs.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12480900">DERBY-4918</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12400682">DERBY-3788</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12400684">DERBY-3790</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                                                <inwardlinks description="is superceded by">
                                        <issuelink>
            <issuekey id="12492655">DERBY-4934</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12464827" name="DERBY-4771-2e-prototype.rar" size="7020632" author="lilywei" created="Mon, 29 Nov 2010 06:02:37 +0000"/>
                            <attachment id="12465051" name="Derby-4771-2f-AutomaticIndexStatisticsTest_wondows7.rar" size="1667822" author="lilywei" created="Wed, 1 Dec 2010 17:39:44 +0000"/>
                            <attachment id="12460266" name="autoindexstats.html" size="2274" author="kristwaa" created="Tue, 23 Nov 2010 13:56:32 +0000"/>
                            <attachment id="12452024" name="derby-4771-1a-prototype_code_dump.diff" size="49237" author="kristwaa" created="Fri, 13 Aug 2010 14:31:59 +0100"/>
                            <attachment id="12452023" name="derby-4771-1a-prototype_code_dump.stat" size="1034" author="kristwaa" created="Fri, 13 Aug 2010 14:31:59 +0100"/>
                            <attachment id="12454205" name="derby-4771-1b-prototype_code_dump.diff" size="49768" author="kristwaa" created="Thu, 9 Sep 2010 12:40:02 +0100"/>
                            <attachment id="12455411" name="derby-4771-2a-prototype_lcc_code_dump.diff" size="80475" author="kristwaa" created="Thu, 23 Sep 2010 21:07:45 +0100"/>
                            <attachment id="12456708" name="derby-4771-2b-prototype_lcc_code_dump.diff" size="60579" author="kristwaa" created="Fri, 8 Oct 2010 16:26:03 +0100"/>
                            <attachment id="12459345" name="derby-4771-2c-prototype_lcc_code_dump.diff" size="101181" author="kristwaa" created="Thu, 11 Nov 2010 13:25:13 +0000"/>
                            <attachment id="12459704" name="derby-4771-2d-prototype_lcc_code_dump.diff" size="107899" author="kristwaa" created="Tue, 16 Nov 2010 15:28:36 +0000"/>
                            <attachment id="12460265" name="derby-4771-2e-prototype_lcc_code_dump.diff" size="110824" author="kristwaa" created="Tue, 23 Nov 2010 13:56:32 +0000"/>
                            <attachment id="12464882" name="derby-4771-2f-prototype_lcc_code_dump-WORK-IN-PROGRESS.diff" size="128729" author="kristwaa" created="Mon, 29 Nov 2010 17:19:27 +0000"/>
                            <attachment id="12465161" name="derby-4771-2f-prototype_lcc_code_dump.diff" size="122096" author="kristwaa" created="Thu, 2 Dec 2010 20:14:43 +0000"/>
                            <attachment id="12465387" name="derby-4771-2g-prototype_lcc_code_dump.diff" size="132379" author="kristwaa" created="Mon, 6 Dec 2010 16:42:57 +0000"/>
                            <attachment id="12465694" name="derby-4771-2h-prototype_lcc_code_dump.diff" size="137854" author="kristwaa" created="Tue, 7 Dec 2010 14:56:37 +0000"/>
                            <attachment id="12454500" name="derby.log" size="38089" author="lilywei" created="Tue, 14 Sep 2010 01:12:32 +0100"/>
                            <attachment id="12454501" name="error-stacktrace.out" size="3381" author="lilywei" created="Tue, 14 Sep 2010 01:12:32 +0100"/>
                            <attachment id="12459919" name="rjall.out" size="1432255" author="lilywei" created="Thu, 18 Nov 2010 15:36:01 +0000"/>
                            <attachment id="12454427" name="rjall.out" size="814882" author="lilywei" created="Mon, 13 Sep 2010 07:03:01 +0100"/>
                            <attachment id="12453529" name="rjall.out" size="3196073" author="lilywei" created="Tue, 31 Aug 2010 19:36:06 +0100"/>
                            <attachment id="12456087" name="rjall.rar" size="782094" author="lilywei" created="Fri, 1 Oct 2010 06:43:15 +0100"/>
                            <attachment id="12456296" name="rjone.out" size="17642" author="lilywei" created="Mon, 4 Oct 2010 18:14:45 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 31 Aug 2010 18:36:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31369</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0gpr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36526</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>