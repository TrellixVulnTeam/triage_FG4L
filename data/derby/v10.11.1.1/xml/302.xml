<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-302/DERBY-302.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-302] Takes over 3 minutes to insert a 500kb String into CLOB</title>
                <link>https://issues.apache.org/jira/browse/DERBY-302</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I downloaded a Cloudescape Version 10 from here &lt;a href=&quot;http://www-106.ibm.com/developerworks/db2/library/techarticle/dm-0408cline/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www-106.ibm.com/developerworks/db2/library/techarticle/dm-0408cline/index.html&lt;/a&gt;.  Not sure exactly which version of 10 this is.&lt;/p&gt;

&lt;p&gt;Would like to store up to a 10MB XML string in a CLOB.  However, I noticed it took over 3 minutes to insert a 500kb string.  I am using the PreparedStatement to get around the 37kb limitation encountered in a previous issue.  It takes less than 2 seconds to insert a 500kb string into a CLOB in mySQl.&lt;/p&gt;

&lt;p&gt;Here the snippet:&lt;/p&gt;

&lt;p&gt;      FileReader fr = new FileReader (&quot;sample.txt&quot;);  &lt;br/&gt;
      BufferedReader br = new BufferedReader(fr);&lt;br/&gt;
      String record = null;&lt;br/&gt;
      try {&lt;/p&gt;

&lt;p&gt;        while ( (record=br.readLine()) != null ) &lt;/p&gt;
{

          bufferStr.append( record );

      }

&lt;p&gt;      } catch (IOException e) &lt;/p&gt;
{
      //
      // put your error-handling code here
      //
         System.out.println(&quot;Error reading file&quot;);
      }


&lt;p&gt;      System.out.println(&quot;Size of inputStr: &quot;+bufferStr.length() );&lt;/p&gt;

&lt;p&gt;      PreparedStatement ps = mm.connection.prepareStatement(&quot;INSERT into  documents           VALUES (?,?)&quot; );&lt;br/&gt;
      ps.setInt(1, 13 );&lt;br/&gt;
      StringReader reader1 = new StringReader(bufferStr.toString());&lt;br/&gt;
      ps.setCharacterStream(2, reader1, bufferStr.length());&lt;br/&gt;
      System.out.println(&quot;Uploading string....&quot;);&lt;br/&gt;
      ps.execute();&lt;br/&gt;
      System.out.println(&quot;Done uploading string...&quot;);&lt;br/&gt;
      mm.connection.commit();&lt;/p&gt;


&lt;p&gt;Thanks for your the help,&lt;/p&gt;

&lt;p&gt;Glenn O.&lt;/p&gt;</description>
                <environment>Windows XP Professional, Dell Pentium IV</environment>
        <key id="32734">DERBY-302</key>
            <summary>Takes over 3 minutes to insert a 500kb String into CLOB</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="skambha">Sunitha Kambhampati</assignee>
                                    <reporter username="glenno">Glenn Orbon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 May 2005 04:14:40 +0100</created>
                <updated>Wed, 29 Jun 2005 02:55:09 +0100</updated>
                            <resolved>Wed, 29 Jun 2005 02:55:09 +0100</resolved>
                                                    <fixVersion>10.1.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="65858" author="glenno" created="Sat, 21 May 2005 00:56:23 +0100"  >&lt;p&gt; I am running Cloudscape as an embedded database.&lt;/p&gt;</comment>
                            <comment id="65878" author="skambha" created="Sat, 21 May 2005 04:54:12 +0100"  >&lt;p&gt;using setString instead of setCharacterStream in this case ( insert of 500kb clob) performs way much better.   But ofcourse, setString cannot be used for large data (or data that wont fit into memory) and one would need to use streams.&lt;/p&gt;

&lt;p&gt;Inserting a 500kb blob using setBinaryStream is also much faster than the setCharacterStream. &lt;/p&gt;





</comment>
                            <comment id="12312888" author="skambha" created="Wed, 8 Jun 2005 00:16:14 +0100"  >&lt;p&gt;For Sun JVM ( 1.4.2 _07) the first insert takes 3 minutes but with IBM jvm 1.4.2 it takes about 20seconds on my laptop. Further with Sun JVM you can improve performance if you use the BufferedReader and give a large buffer size to it. &lt;/p&gt;

&lt;p&gt;Adding this as a comment  here so the info is not lost.  I  have just started looking into this issue, but if someone else has other suggestions etc, please post here/to the list.  &lt;/p&gt;</comment>
                            <comment id="12313310" author="skambha" created="Sat, 11 Jun 2005 03:15:19 +0100"  >&lt;p&gt;Currently in derby,  for an insert on a clob using setCharacterStream what will happen is , the entire stream will be materialized into a char array and sent to store for the insert.  ( we should not have to stream here. I will file another jira issue for this and put in all information I learnt)&lt;/p&gt;

&lt;p&gt;Given this is how inserts for large clobs are happening, the performance issue analysis is as follows:&lt;br/&gt;
&amp;#8211;  profiler run shows that most time is spent in SQLChar.readExternal which is where the materialization into a char array for the user&apos;s input stream happens.  The growth of this array happens gradually till the entire stream is materialized into the array.  Below code snippet shows by how much the array is grown each time when it realizes it has to read more bytes from the stream.&lt;/p&gt;

&lt;p&gt;The dvd hierarchy for clob is  -  SQLClob ( dvd) extends SQLVarChar extends SQLChar.&lt;/p&gt;

&lt;p&gt;So in SQLChar.readExternal&lt;br/&gt;
........&lt;br/&gt;
    int growby = in.available();&lt;br/&gt;
   if(growby &amp;lt; 64)&lt;br/&gt;
       growby = 64&lt;br/&gt;
 and then an allocation and an arraycopy to the new allocated array.&lt;/p&gt;

&lt;p&gt;&amp;#8211;  In the code snippet,  &apos;in&apos; is the wrapper around the user&apos;s stream which is ReaderToUTF8Stream .   ReaderToUTF8Stream extends InputStream and  does not override available() method . As per the spec, InputStream.available() returns 0.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Thus each time, the array growth is by 64 bytes which is obviously not performant.  so for a 500k clob insert, this would mean allocation &amp;amp; arraycopy steps happen  ~8000 times.&lt;/p&gt;

&lt;p&gt;&amp;#8211; The ReaderToUTF8Stream that has the user&apos;s stream reads from the stream and does the utf8 conversion and puts it in a 4k array.  I think it is reasonable to have a 32k buffer to store this information for clobs.&lt;/p&gt;

&lt;p&gt;Although I think there seems to be more possible optimizations in this area,  I prefer the incremental approach too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  so this patch  is a first step towards fixing the insert clob performance in the current system.&lt;/p&gt;

&lt;p&gt;Fix includes:&lt;br/&gt;
&amp;#8211; enhanced the way the array was grown to keep the original  64 bytes for char ( seems reasonable given the upper limit for char) but override it to have  4k for varchar and clobs.&lt;br/&gt;
&amp;#8211; override available() in ReaderToUTF8Stream to return a better estimate of how many bytes can be read.&lt;/p&gt;

&lt;p&gt;svn stat&lt;br/&gt;
M      java\engine\org\apache\derby\impl\jdbc\ReaderToUTF8Stream.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\io\LimitReader.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\types\SQLChar.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\types\SQLVarchar.java&lt;/p&gt;

&lt;p&gt;&amp;#8211; ran derbyall ok with sun jvm.&lt;/p&gt;

&lt;p&gt;&amp;#8211;  I can add a test and compare times but I realize that is probably not the best solution here.  It should ideally be part of a performance regression suite.&lt;/p&gt;

&lt;p&gt;Numbers for clob inserts in seconds for one insert  on my laptop  - as per the jira issue.&lt;br/&gt;
With fix , times are in seconds for 1 insert on a clob on my laptop (windows, 1G ram, 1.6Ghz Intel Pentium(M) )&lt;/p&gt;

&lt;p&gt;FileSize            ibm jvm 1.4.2      sun jvm 1.4.2         sun jvm 1.5&lt;br/&gt;
500k               0.9s                     1.6s                        1.7s&lt;br/&gt;
1M                  2.1s                     4s                           5s&lt;br/&gt;
2M                  3s                        9s                           11s&lt;br/&gt;
4M                  7s                        18s                         22s&lt;/p&gt;


&lt;p&gt;Without the fix, 500k with sun jvm takes 3 mins and ibm jvm takes 20 seconds.&lt;br/&gt;
I will add the test program along with the input files to jira issue.&lt;br/&gt;
_________________________&lt;br/&gt;
Without this fix :  As I already mentioned in the jira comment for derby302,  I changed the program in the attached jira entry to use BufferedReader with the buffersize set to a bigger value than the default ( to 64k) brought down the times for sun jvm closer to ibm jvm.  I noticed that in my test, if I ran the test multiple times and did multiple inserts the performance of sun jvm and ibm jvm for 500k clob was around 20 seconds - guess the jit kicks in , plus the OS cache may also be a factor..&lt;br/&gt;
________________________&lt;/p&gt;</comment>
                            <comment id="12313345" author="skambha" created="Sat, 11 Jun 2005 10:55:32 +0100"  >&lt;p&gt;This patch addresses Mike&apos;s comments  (#1 and #2)in &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200506.mbox/%3c42A9CE92.7070808@sbcglobal.net%3e&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200506.mbox/%3c42A9CE92.7070808@sbcglobal.net%3e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Added final to the methods except for SQLChar for performance reasons. &lt;br/&gt;
2) Added constants to improve readability for all the humbers. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ran derbyall on jdk142 OK.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12313346" author="skambha" created="Sat, 11 Jun 2005 11:16:51 +0100"  >&lt;p&gt;I just realized since the link I provided in my earlier comment to mike&apos;s email goes to 2 lines .. the link doesnt open up, so attaching the shorter gmane link to his mail and thread on derby dev. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/5405&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/5405&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12314622" author="skambha" created="Wed, 29 Jun 2005 02:55:09 +0100"  >&lt;p&gt;has been committed with  svn 190415.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12310659" name="fixclobperf_0609.txt" size="5966" author="skambha" created="Sat, 11 Jun 2005 03:15:18 +0100"/>
                            <attachment id="12310668" name="fixclobperf_0610.txt" size="7156" author="skambha" created="Sat, 11 Jun 2005 10:55:32 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 21 May 2005 03:54:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21883</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy17vz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40928</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>