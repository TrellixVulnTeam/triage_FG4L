<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:01 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1136/DERBY-1136.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1136] JDBC driver on rs.getFloat() gives LossOfPrecisionConversionException for float fields containing Float.MAX_VALUE</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1136</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt; I have a table created in the Derby database with a field as &quot;float&quot;. I am able to successfully insert into this field the value FLOAT.MAX_VALUE (3.4028235E38). But when I try to query this field and try to use resultSet.getFloat() to retrieve this value I get a SQLException thrown.&lt;br/&gt;
 The derby driver that I am using is the one that is part of our Glassfish 9.0 build.&lt;br/&gt;
 The stack trace is :&lt;br/&gt;
 org.apache.derby.client.am.LossOfPrecisionConversionException: Invalid data conversion:Requested conversion would result in a loss of precision of 3.4028235E38&lt;br/&gt;
        at org.apache.derby.client.am.CrossConverters.getFloatFromDouble(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.getFloat(Unknown Source)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.getFloat(Unknown Source)&lt;br/&gt;
        at DerbyFloat.testFloat(DerbyFloat.java:121)&lt;br/&gt;
        at DerbyFloat.main(DerbyFloat.java:139)&lt;/p&gt;

&lt;p&gt; I have attached a simple java program that I have used to reproduce this problem. &lt;/p&gt;


&lt;p&gt; import java.sql.*; &lt;br/&gt;
 import java.lang.reflect.Method;&lt;br/&gt;
 import java.lang.reflect.Modifier;&lt;/p&gt;

&lt;p&gt; public class DerbyFloat {&lt;/p&gt;

&lt;p&gt;     /* Derby */&lt;br/&gt;
     static final String userName = &quot;APP&quot;;&lt;br/&gt;
     static final String password = &quot;APP&quot;;&lt;br/&gt;
     static final String connectionURL =&lt;br/&gt;
             &quot;jdbc:derby://localhost:1527/sun-appserv-samples;retrieveMessagesFromServerOnGetMessage=true;&quot;;&lt;br/&gt;
     static final String driverName = &quot;org.apache.derby.jdbc.ClientDriver&quot;;&lt;br/&gt;
     Connection conn;&lt;/p&gt;

&lt;p&gt;     public DerbyFloat() {}&lt;/p&gt;

&lt;p&gt;     void init() throws SQLException &lt;/p&gt;
{
         conn = getConnection(driverName, connectionURL, userName, password);
     }

&lt;p&gt;     private static Connection getConnection(String driverName, String connectionURL,&lt;br/&gt;
            String userName, String password) throws SQLException {&lt;br/&gt;
        Connection conn = null;&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            Class.forName (driverName);
        }
&lt;p&gt;        catch (ClassNotFoundException e) &lt;/p&gt;
{
            System.out.println(&quot;Could not load the driver class. Error is &quot; + e);
        }

&lt;p&gt;        try &lt;/p&gt;
{
            conn = DriverManager.getConnection(connectionURL, userName, password);
            conn.setAutoCommit(false);
        }
&lt;p&gt; catch (SQLException e) {&lt;br/&gt;
            System.out.println(&quot;Error while getting connection&quot;);&lt;br/&gt;
            SQLException currentException = e;&lt;br/&gt;
            do &lt;/p&gt;
{
                System.out.println(&quot;Exception is&quot; + currentException);
                System.out.println(
                        &quot;getMessage()&quot; + currentException.getMessage());
                System.out.println(
                        &quot;getErrorCode()&quot; + currentException.getErrorCode());
                System.out.println(
                        &quot;getSQLState()&quot; + currentException.getSQLState());
                currentException = currentException.getNextException();
            }
&lt;p&gt; while (currentException != null);&lt;br/&gt;
            throw e;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        return conn;&lt;br/&gt;
     }&lt;/p&gt;

&lt;p&gt;    public void insertRows() throws java.sql.SQLException {&lt;br/&gt;
        PreparedStatement ps;&lt;br/&gt;
         try &lt;/p&gt;
{
             ps = conn.prepareStatement(&quot;DROP TABLE DERBYFLOAT&quot;);
             ps.executeUpdate();           
         }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
             System.out.println(&quot;Table does not exist&quot;);
         }
&lt;p&gt;       &lt;/p&gt;

&lt;p&gt;         ps = conn.prepareStatement(&quot;CREATE TABLE DERBYFLOAT (ID INT PRIMARY KEY, FLOATDATA FLOAT)&quot;);&lt;br/&gt;
 //        ps = conn.prepareStatement(&quot;CREATE TABLE DERBYFLOAT (ID INT PRIMARY KEY, FLOATDATA FLOAT(24))&quot;);       &lt;br/&gt;
         ps.executeUpdate();        &lt;/p&gt;

&lt;p&gt;         ps = conn.prepareStatement(&quot;DELETE FROM DERBYFLOAT&quot;);&lt;br/&gt;
         ps.executeUpdate();        &lt;br/&gt;
         ps = conn.prepareStatement(&lt;br/&gt;
             &quot;INSERT INTO DERBYFLOAT(ID, FLOATDATA) VALUES(1, 1)&quot;);&lt;br/&gt;
         ps.executeUpdate();    &lt;br/&gt;
         ps = conn.prepareStatement(&lt;br/&gt;
             &quot;INSERT INTO DERBYFLOAT(ID, FLOATDATA) VALUES(2, 124567890123456)&quot;);&lt;br/&gt;
         ps.executeUpdate();          &lt;br/&gt;
         ps = conn.prepareStatement(&lt;br/&gt;
             &quot;INSERT INTO DERBYFLOAT(ID, FLOATDATA) VALUES(3, 3.4028235E37)&quot;);&lt;br/&gt;
         ps.executeUpdate(); &lt;br/&gt;
         ps = conn.prepareStatement(&lt;br/&gt;
             &quot;INSERT INTO DERBYFLOAT(ID, FLOATDATA) VALUES(4, 3.4028235E38)&quot;);&lt;br/&gt;
         ps.executeUpdate();          &lt;/p&gt;

&lt;p&gt;     }&lt;/p&gt;

&lt;p&gt;     public void testFloat() throws java.sql.SQLException {        &lt;br/&gt;
         PreparedStatement ps = conn.prepareStatement(&lt;br/&gt;
                &quot;SELECT ID, FLOATDATA FROM DERBYFLOAT&quot;);&lt;br/&gt;
         ResultSet rs = ps.executeQuery();&lt;br/&gt;
         ResultSetMetaData rsmd = rs.getMetaData();&lt;br/&gt;
         while(rs.next()) {&lt;br/&gt;
 /*&lt;br/&gt;
                Object o = rs.getObject&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;/p&gt;

&lt;p&gt;                String columnTypeName = rsmd.getColumnTypeName&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
                System.out.println(&quot;column &quot; + &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; + &quot; type: &quot; + columnTypeName +&lt;br/&gt;
                      &quot; (&quot; + rsmd.getColumnType&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; + &quot;) &quot; + &quot;\t\tJava Type: &quot; +  o.getClass());&lt;br/&gt;
 */               &lt;br/&gt;
                 System.out.println(&quot;\n Value of field 1 uing getInt() : &quot; + rs.getInt(1));  &lt;br/&gt;
                 try &lt;/p&gt;
{
                     System.out.println(&quot;\n Value of field 2 using getFloat() : &quot; + rs.getFloat(2));    
                 }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
                     System.out.println(&quot;\n Value of field 2 using getFloat() resulted in a SQLException&quot;);
                     e.printStackTrace();
                     System.out.println(&quot;\n Value of field 2 using getObject() : &quot; + rs.getObject(2));
                 }

&lt;p&gt;        }&lt;/p&gt;

&lt;p&gt;     }&lt;/p&gt;

&lt;p&gt;     public static final void main (String args [])&lt;br/&gt;
     {&lt;br/&gt;
         DerbyFloat dbFloat = new DerbyFloat();&lt;br/&gt;
         try &lt;/p&gt;
{
             dbFloat.init();
             dbFloat.insertRows();
             dbFloat.testFloat();
         }
&lt;p&gt; catch (SQLException ex) &lt;/p&gt;
{
             System.out.println(&quot;SQLException : &quot;+ ex);
             ex.printStackTrace();            
         }
&lt;p&gt;     }&lt;/p&gt;

&lt;p&gt; }&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12330533">DERBY-1136</key>
            <summary>JDBC driver on rs.getFloat() gives LossOfPrecisionConversionException for float fields containing Float.MAX_VALUE</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="miteshm">Mitesh Meswani</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Mar 2006 10:47:23 +0000</created>
                <updated>Thu, 13 Dec 2007 09:04:51 +0000</updated>
                            <resolved>Thu, 18 May 2006 19:08:26 +0100</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12371475" author="hmork" created="Thu, 23 Mar 2006 06:29:43 +0000"  >&lt;p&gt;Attached suggested patch for the problem. The problem occurs by a inaccuracy when casting float.max_value to double for comparison. IJ avoids the problem by using getDouble instead.&lt;/p&gt;</comment>
                            <comment id="12371477" author="miteshm" created="Thu, 23 Mar 2006 06:39:12 +0000"  >&lt;p&gt;Thanks for looking into this. I don&apos;t have environment setup to build Derby. I will not be able to try the patch. Does the test case in the bug run successfully with the patch? &lt;/p&gt;

&lt;p&gt;&amp;gt;IJ avoids the problem by using getDouble instead.&lt;br/&gt;
This is not an option for us as we are implenenting Java Persistence API in Glassfish and the code that reads value from the result set is generic and common to all databases. &lt;/p&gt;

&lt;p&gt;Do you have expected date this would get checked in?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Mitesh&lt;/p&gt;</comment>
                            <comment id="12371553" author="bernt" created="Thu, 23 Mar 2006 20:52:56 +0000"  >&lt;p&gt;Committed revision 388161.&lt;/p&gt;</comment>
                            <comment id="12371883" author="bryanpendleton" created="Sun, 26 Mar 2006 11:58:29 +0100"  >&lt;p&gt;Attached is a patch containing a regression test for this bug:&lt;br/&gt;
derby-1136-reg-test.diff. If anyone has time to look at this&lt;br/&gt;
patch, I would be very grateful.&lt;/p&gt;

&lt;p&gt;I intend to commit the regression test, unless somebody feels&lt;br/&gt;
like that would be a bad idea.&lt;/p&gt;

&lt;p&gt;I found myself interested in this bug, for reasons I can&apos;t&lt;br/&gt;
totally explain. Floating point is still rather a mystery to&lt;br/&gt;
me, and so I enjoy fooling around with it when I get a chance.&lt;/p&gt;

&lt;p&gt;In particular, the notion that there was a floating point value&lt;br/&gt;
which was greater than Float.MAX_VALUE, but which when cast to&lt;br/&gt;
float returns FALSE from Float.isInfinite(), intrigued me, so&lt;br/&gt;
I wrote a little program (test.java) to explore that behavior&lt;br/&gt;
and am attaching it for anyone who wants to share my joy in&lt;br/&gt;
floating point behaviors...&lt;/p&gt;

&lt;p&gt;While developing the regression test, I discovered two things:&lt;br/&gt;
1) The JCC 2.4 driver also suffers from this bug. If anybody has&lt;br/&gt;
a way to pass this fix along to the JCC team, they might be&lt;br/&gt;
grateful.&lt;br/&gt;
2) I don&apos;t really understand why the patch to this problem also&lt;br/&gt;
includes a change to SQLDouble.java. From what I can tell, that&lt;br/&gt;
change is not necessary to resolve the behavior reported by this&lt;br/&gt;
bug; only the change to CrossConverters.java is needed. Still,&lt;br/&gt;
the change to SQLDouble seems reasonable to me, and I&apos;m not&lt;br/&gt;
opposed to it. I just didn&apos;t write a regression test for it,&lt;br/&gt;
because I don&apos;t understand it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12371957" author="hmork" created="Mon, 27 Mar 2006 18:31:46 +0100"  >&lt;p&gt;I changed SQLDouble.java in order to address the same behaviour in the embedded driver also. I&apos;m a newbie here, so I&apos;m unsure wether that constitute a problem. Is it necessary to check for net client in the regression test?&lt;/p&gt;</comment>
                            <comment id="12372011" author="bryanpendleton" created="Tue, 28 Mar 2006 04:01:19 +0100"  >&lt;p&gt;Thank you for the information about the SQLDouble change.&lt;/p&gt;

&lt;p&gt;Your comment helped me realize that derbynet/prepStmt.java is not the best location for the regression test, because those tests run only for the network server environments, not for the embedded environment.&lt;/p&gt;

&lt;p&gt;Therefore, I&apos;ve attached a new patch, &apos;derby-1136-resultset-reg-test.diff&apos;, which moves the regression test to jdbcapi/resultset.java. The resultset regression test runs in the embedded environment as well as in the network server environment.&lt;/p&gt;

&lt;p&gt;With this new test, I am able to confirm &lt;b&gt;both&lt;/b&gt; of your fixes. That is, when I backed both your fixes out of my sandbox, resultset.java produces the expected exception failure in both the embedded and DerbyNetClient configurations. Then, when I restored the SQLDouble.java change, the embedded test works. And when I restored the CrossConverters.java change, the DerbyNetClient test works. This makes me much happier about the regression test, since now it confirms both fixes.&lt;/p&gt;

&lt;p&gt;Please let me know of any other comments about this patch.&lt;/p&gt;</comment>
                            <comment id="12372138" author="bryanpendleton" created="Wed, 29 Mar 2006 04:59:06 +0100"  >&lt;p&gt;I&apos;ve committed the regression test to subversion:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewcvs?rev=389575&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=389575&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12412327" author="bernt" created="Thu, 18 May 2006 19:05:58 +0100"  >&lt;p&gt;Merge to 10.1 branch&lt;/p&gt;</comment>
                            <comment id="12412328" author="bernt" created="Thu, 18 May 2006 19:08:26 +0100"  >&lt;p&gt;Committed revision 407519 to 10.1 branch&lt;br/&gt;
NOTE: Regression test (Rev. 389575) not (yet?) merged.&lt;/p&gt;

&lt;p&gt;Should this issue be closed?&lt;/p&gt;</comment>
                            <comment id="12413102" author="bernt" created="Wed, 24 May 2006 19:46:54 +0100"  >&lt;p&gt;The regression test cannot be merged into 10.1 without conflict on all files. This fix is very small, and have a regression test on trunk, so I suggest we don&apos;t backport the test to 10.1, but close this issue. Unless there are someone that has the itch to backport the test, of course.&lt;/p&gt;</comment>
                            <comment id="12551326" author="fuzzylogic" created="Thu, 13 Dec 2007 09:04:51 +0000"  >&lt;p&gt;This issue has been resolved for over a year with no further movement. Closing.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12324465" name="1136.diff" size="1266" author="hmork" created="Thu, 23 Mar 2006 06:29:42 +0000"/>
                            <attachment id="12324583" name="derby-1136-reg-test.diff" size="5523" author="bryanpendleton" created="Sun, 26 Mar 2006 11:58:27 +0100"/>
                            <attachment id="12324613" name="derby-1136-resultset-reg-test.diff" size="5856" author="bryanpendleton" created="Tue, 28 Mar 2006 04:01:11 +0100"/>
                            <attachment id="12324584" name="test.java" size="485" author="bryanpendleton" created="Sun, 26 Mar 2006 11:58:29 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 23 Mar 2006 06:29:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22330</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10c7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39705</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>