<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:23:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3655/DERBY-3655.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3655] errror in nightly regression test: LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:\jartest\JarResults.2008-04-29\ibm16_suites.All\system\singleUse\oneuse1e\tmp\lob6165.tmp</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3655</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:\jartest\JarResults.2008-04-29\ibm16_suites.All\system\singleUse\oneuse1e\tmp\lob6165.tmp&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:130)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:128)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:105)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(AccessController.java:202)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:102)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:98)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:91)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:77)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;</description>
                <environment>OS: Windows, Test: v10_4 branch insane jars, ibm16 jvm&lt;br/&gt;
OS: Windows, Test: v10_3 branch insane jars, ibm142 jvm</environment>
        <key id="12395101">DERBY-3655</key>
            <summary>errror in nightly regression test: LobStreamsTest:encryptedjunit.framework.AssertionFailedError: f:\jartest\JarResults.2008-04-29\ibm16_suites.All\system\singleUse\oneuse1e\tmp\lob6165.tmp</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="mikem">Mike Matrigali</reporter>
                        <labels>
                    </labels>
                <created>Wed, 30 Apr 2008 20:51:42 +0100</created>
                <updated>Mon, 6 Feb 2012 09:45:05 +0000</updated>
                            <resolved>Tue, 7 Oct 2008 19:00:26 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12593420" author="mikem" created="Wed, 30 Apr 2008 20:53:25 +0100"  >&lt;p&gt;I have not had a chance to try and reproduce or debug, but from the stack it seems similar to previous problems in teardown where&lt;br/&gt;
the running test or the previous test has not properly cleaned up leaving some sort of open on the file or the file in a directory and then the teardown on windows can&apos;t clean up.&lt;/p&gt;
</comment>
                            <comment id="12593427" author="mikem" created="Wed, 30 Apr 2008 21:01:03 +0100"  >&lt;p&gt;saw what I think is same error in 10.3 testing (slightly different line numbers and stack):&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/v10_3/windows/testlog/ibm142/652236-suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/v10_3/windows/testlog/ibm142/652236-suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time: 12,146.641&lt;br/&gt;
There was 1 failure:&lt;br/&gt;
1) LobStreamsTest:encryptedjunit.framework.AssertionFailedError: E:\cloudtst\jartest\JarResults.2008-04-29\ibm142_suites.All\system\singleUse\oneuse1c\tmp\lob57551.tmp&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:126)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(DropDatabaseSetup.java:124)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.access$000(DropDatabaseSetup.java:35)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup$1.run(DropDatabaseSetup.java:101)&lt;br/&gt;
	at java.security.AccessController.doPrivileged1(Native Method)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(AccessController.java:287)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:98)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase(DropDatabaseSetup.java:91)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown(DropDatabaseSetup.java:77)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;</comment>
                            <comment id="12620474" author="myrna" created="Thu, 7 Aug 2008 00:23:22 +0100"  >&lt;p&gt;I&apos;ve looked at the results for the automated tests at IBM and I haven&apos;t seen this failure again...&lt;br/&gt;
If it happens again, we can try to spend more time, but I believe on the whole the cleanup troubles should be fixed now...&lt;/p&gt;</comment>
                            <comment id="12623429" author="myrna" created="Mon, 18 Aug 2008 19:31:14 +0100"  >&lt;p&gt;saw this again on 8/15, see: &lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-686436.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-686436.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12634582" author="kmarsden" created="Thu, 25 Sep 2008 20:20:59 +0100"  >&lt;p&gt;This happens reliably with IBM 1.6 service release 2. I noticed if I force a gc() before removing the directory the issue does not occur as the temporary Lobs are garbage collected and their finalize method is called to close the temporary lob file.  I don&apos;t know if it is appropriate to force a gc() when we shutdown the database so the temporary lob objects get garbage collected or if we should make an effort to keep a reference to these files so they can be closed on shutdown.&lt;/p&gt;

</comment>
                            <comment id="12634799" author="knutanders" created="Fri, 26 Sep 2008 10:39:08 +0100"  >&lt;p&gt;I was under the impression that EmbedConnection.commit() and EmbedConnection.rollback() would iterate over the list of lobs and call Embed&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob.free(), which again would call LOBStreamControl.free() and close the file. Why isn&apos;t that happening?&lt;/p&gt;</comment>
                            <comment id="12634841" author="knutanders" created="Fri, 26 Sep 2008 13:47:32 +0100"  >&lt;p&gt;I found a problem in LOBStreamControl.replaceBytes() that could prevent files from being closed (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3883&quot; title=&quot;LOBStreamControl.replaceBytes() leaves temporary files open&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3883&quot;&gt;&lt;del&gt;DERBY-3883&lt;/del&gt;&lt;/a&gt;). I didn&apos;t see that happening in my environment when I added some println statements and ran LobStreamsTest, so it&apos;s probably unrelated, but there is a patch that you could try just in case.&lt;/p&gt;</comment>
                            <comment id="12634936" author="kmarsden" created="Fri, 26 Sep 2008 18:18:46 +0100"  >&lt;p&gt;Thanks Knut for fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3883&quot; title=&quot;LOBStreamControl.replaceBytes() leaves temporary files open&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3883&quot;&gt;&lt;del&gt;DERBY-3883&lt;/del&gt;&lt;/a&gt;. It looks like a good fix albeit not related to this issue. I still see the failure with your patch and this is what I think is going on.&lt;/p&gt;

&lt;p&gt;What I see with IBM 1.6 is that by the time we get to rollback() the Lob references have already been removed from the WeakHashMap EmbedConnection.lobReferences  but have not yet been garbage collected.  I think it is ok for WeakHashMap to do this.  The javadoc says.&lt;br/&gt;
The behavior of the WeakHashMap class depends in part upon the actions of the garbage collector, so several familiar (though not required) Map invariants do not hold for this class. Because the garbage collector may discard keys at any time, a WeakHashMap may behave as though an unknown thread is silently removing entries. &lt;/p&gt;

&lt;p&gt;Changing the WeakHashMap to a HashMap corrects this problem, ensuring that when we get to rollback() the entries will still be there, but I am sure there must be a good reason for using a WeakHashMap in this case.  Does anyone know why we use WeakHashMap  instead of HashMap, when it seems ultimately we will get to the end of the transaction and clear these entries?&lt;/p&gt;



</comment>
                            <comment id="12634938" author="kmarsden" created="Fri, 26 Sep 2008 18:25:41 +0100"  >&lt;p&gt;Here is the comment from the checkin that introduced the WeakHashMap&lt;br/&gt;
 	 &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3354&quot; title=&quot;Select from large lob table with embedded gives OutOfMemoryError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3354&quot;&gt;&lt;del&gt;DERBY-3354&lt;/del&gt;&lt;/a&gt;: Select from large lob table with embedded gives OutOfMemoryError&lt;br/&gt;
Contributed by Anurag.&lt;/p&gt;

&lt;p&gt;This patch introduces a new WeakHashMap in EmbedConnection. EmbedBlob and EmbedClob objects references are stored in this&lt;br/&gt;
map (objects as key and null as value). Adding entry to locater map is&lt;br/&gt;
differed till the first call of getLocater.&lt;br/&gt;
This ensures that there is entry of LOB objects in locater map if they are invoked in embedded mode.&lt;br/&gt;
As the keys of WeakHashMap doesn&apos;t prevents the objects from being&lt;br/&gt;
garbage collected, once the lob objects are unreferenced lob objects will&lt;br/&gt;
be garbage collected releasing the memory.&lt;/p&gt;

&lt;p&gt;During commit/rollback or Connection.close, free is invoked on all the lob&lt;br/&gt;
objects from WeakHashMap and the map is cleared.&lt;/p&gt;


&lt;p&gt;So, I guess the reason for the WeakHashMap is so that blobs that are no longer referenced can be garbage collected before the transaction ends.  Perhaps the correct solution is to force a gc and finalization after clearLobMapping does its work.&lt;/p&gt;

</comment>
                            <comment id="12634975" author="kmarsden" created="Fri, 26 Sep 2008 20:19:43 +0100"  >&lt;p&gt;Actually playing with the gc() on clearLobMapping solution, I see that it is not a good idea as it seems to have a performance impact and even hung one test (not sure what that&apos;s about), maybe the gc() on shutdown makes more sense.&lt;/p&gt;</comment>
                            <comment id="12634983" author="knutanders" created="Fri, 26 Sep 2008 20:54:26 +0100"  >&lt;p&gt;Thanks for doing the research, Kathey. So the problem seen from the users&apos; perspective is that they can&apos;t necessarily delete the database until finalization has been performed after the database shutdown if they have accessed lobs.&lt;/p&gt;

&lt;p&gt;I don&apos;t know what&apos;s the best way to fix this, but I would strongly oppose forcing gc and finalization as part of the normal commit/rollback logic as it is not guaranteed to have any effect and may have a significant performance impact. Doing it as part of the database shutdown wouldn&apos;t be that problematic, but I feel that we should try to avoid explicit gc if we could.&lt;/p&gt;

&lt;p&gt;One thought is that LOBStreamControl could use a cache (instance of CacheManager) of open file descriptors used for temporary lobs, kind of like the container cache. If the file descriptor is in the cache when LOBStreamControl needs it, it can just fetch it. Otherwise, the cache would have to reopen the temporary file and return the new file descriptor. When a &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob object is finalized, it invalidates the cache entry and closes the file descriptor. If the &lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob object is gc&apos;ed but not finalized when the database is shut down (as in the problem case in this issue), we&apos;ll still have a reference to the file descriptor in the file descriptor cache, and we can close it as part of the database shutdown.&lt;/p&gt;

&lt;p&gt;Just a half-baked idea for now, but I think it should work, with the additional benefit of reducing the peak in the number of open file descriptors we can get when we open many lobs in the same transaction without explicitly freeing them, and also reducing the reliance on gc to free up resources for us.&lt;/p&gt;</comment>
                            <comment id="12635011" author="kmarsden" created="Fri, 26 Sep 2008 21:46:41 +0100"  >&lt;p&gt;Thanks Knut for looking at possibilities.  I am just trying to get my head around what you are suggesting.  If we use the CacheManager idea would there be one cache per database or one cache per transaction?  How would that fit into LobStreamControl which is instantiated once for each lob?&lt;/p&gt;</comment>
                            <comment id="12635123" author="knutanders" created="Sat, 27 Sep 2008 10:44:35 +0100"  >&lt;p&gt;My thought was to have one instance per database since it sounds too heavy to create one per transaction. It might be that it&apos;s too complex to be worth it, though.&lt;/p&gt;

&lt;p&gt;Another idea is to just add a list/set of file objects (either LOBFile or RandomAccessFile) in EmbedConnection. Each time LOBStreamControl creates a temporary file, it is added to the list/set, and each time LOBStreamControl closes a temporary file, it is removed. Since there are no references from LOBFile/RandomAccessFile to Embed&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob, this list won&apos;t prevent the lob objects in the WeakHashMap from being gc&apos;ed. And if an object has been gc&apos;ed and removed from the WeakHashMap, and finalization is still pending, a reference to the file is accessible from EmbedConnection on the transaction boundary so that it can be closed.&lt;/p&gt;</comment>
                            <comment id="12635504" author="kmarsden" created="Mon, 29 Sep 2008 21:02:27 +0100"  >&lt;p&gt;Attached is a patch implementing Knut&apos;s suggestion to keep a set of LOBFile&apos;s in EmbedConnection so that they can be closed at transaction boundaries.  It corrects the problem with IBM 1.6 sr2 and passed suites.All and derbyall.&lt;/p&gt;

&lt;p&gt;Please Review&lt;/p&gt;</comment>
                            <comment id="12635721" author="knutanders" created="Tue, 30 Sep 2008 12:31:48 +0100"  >&lt;p&gt;Thanks, Kathey! I think the patch looks very good. Some small comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should we also call removeLOBFile() from truncate() and replaceBytes() in LOBStreamControl? Those methods also close the file. (Perhaps a helper method to do close+remove would be appropriate?)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;addLobFile() and removeLobFile() could be package private&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Could LOBStreamControl.conn be made final?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Typo in javadoc for addLobFile(): fileto -&amp;gt; file to&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;@param dbName&quot; should be removed from LOBStreamControl&apos;s constructors&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Not necessary as part of this issue, but in a follow-up patch we may consider removing the dbName field from LOBStreamControl. It&apos;s only used once in init(), so just calling conn.getDBName() would be simpler now.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12635884" author="kmarsden" created="Tue, 30 Sep 2008 23:42:13 +0100"  >&lt;p&gt;Thanks Knut for the review. Here is an updated patch addressing your comments.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12636002" author="knutanders" created="Wed, 1 Oct 2008 12:26:28 +0100"  >&lt;p&gt;Thanks, the updated patch looks good to me. Unfortunately, it doesn&apos;t apply cleanly because of a conflict with the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3883&quot; title=&quot;LOBStreamControl.replaceBytes() leaves temporary files open&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3883&quot;&gt;&lt;del&gt;DERBY-3883&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One question that I forgot in my previous comment: Why was the synchronization added to LOBStreamControl.free()?&lt;/p&gt;</comment>
                            <comment id="12636012" author="kmarsden" created="Wed, 1 Oct 2008 13:40:34 +0100"  >&lt;p&gt;I added the synchronization because I think there is the potential for free to be called by both the finalizer and removeLobFile at the same time. Without the synchronization it might cause an NPE.&lt;/p&gt;</comment>
                            <comment id="12636019" author="knutanders" created="Wed, 1 Oct 2008 14:07:07 +0100"  >&lt;p&gt;If the finalizer calls free(), the object must have been gc&apos;ed, so I&apos;m not sure how anyone else could be able to call free() at the same time. Did you ever experience a NullPointerException without the synchronization?&lt;/p&gt;

&lt;p&gt;What I think could happen which would require synchronization, is that LOBStreamControl.finalize() calls free() -&amp;gt; EmbedConnection.removeLOBFile() while EmbedConnection.clearLOBMapping() is iterating over lobFiles. This could cause a ConcurrentModificationException or something in EmbedConnection. To prevent this, we would have to add synchronization in EmbedConnection around the accesses to lobFiles. I don&apos;t think synchronization in LOBStreamControl would prevent it.&lt;/p&gt;

&lt;p&gt;Another reason to synchronize accesses to EmbedConnection.lobFiles is that we could have code that did something like this:&lt;/p&gt;

&lt;p&gt;  Blob b1 = conn.createBlob();&lt;br/&gt;
  Blob b2 = conn.createBlob();&lt;br/&gt;
  new Thread(new BlobHandler(b1, ...)).start();&lt;br/&gt;
  new Thread(new BlobHandler(b2, ...)).start();&lt;/p&gt;

&lt;p&gt;In such a case, we could get calls to addLobFile/removeLobFile on the same EmbedConnection from different threads concurrently.&lt;/p&gt;</comment>
                            <comment id="12636227" author="kmarsden" created="Wed, 1 Oct 2008 23:44:59 +0100"  >&lt;p&gt;Thanks Knut for pointing out the synchronization issue. Attached  is a patch that adds synchronization on access to lobFiles.   Running tests now.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12636303" author="knutanders" created="Thu, 2 Oct 2008 10:04:48 +0100"  >&lt;p&gt;Thanks Kathey, I think the patch is ready for commit now. For extra credit you may also fix these tiny nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;indentation of closing brackets in LOBStreamControl.free(), EmbedConnection.clearLOBMapping(), EmbedConnection.addLobFile()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;lines with trailing blanks added in EmbedConnection&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;EmbedConnection.lobFiles could be made final now&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In the latest patch, we always create a HashSet for the lob files when we create an EmbedConnection, even if the connection doesn&apos;t use lobs that overflow to disk. Most connections don&apos;t use the HashSet, so perhaps we should go back to the approach with lazy initialization used in the previous patches? In that case, we would have to synchronize on the EmbedConnection object itself, since lobFiles may be null. If we think this is a good idea, it could be changed in a followup patch.&lt;/p&gt;</comment>
                            <comment id="12636384" author="kmarsden" created="Thu, 2 Oct 2008 17:11:10 +0100"  >&lt;p&gt;Thanks Knut,  I will change it to go back to lazy creation. One question. Do you think it is better on clearLobMapping, if lobFiles exists,  to set lobFiles to null  or to clear it? &lt;/p&gt;</comment>
                            <comment id="12636411" author="knutanders" created="Thu, 2 Oct 2008 18:56:53 +0100"  >&lt;p&gt;I lean slightly towards clearing it, I think. If an EmbedConnection instantiates a set in one transaction, it is probably more likely to use it in the subsequent transactions too, so clearing and reusing the object makes sense. We don&apos;t save that much memory by nulling it out in the situations where it&apos;s not reused, so it shouldn&apos;t hurt. But I think the performance penalty of overflowing to a temporary file is so high that the cost of allocating a new HashSet is negligible, and therefore either approach would be fine.&lt;/p&gt;</comment>
                            <comment id="12636494" author="kmarsden" created="Thu, 2 Oct 2008 23:48:54 +0100"  >&lt;p&gt;Here is the latest patch derby-3655_diff4.txt which changes back to lazy creation of the lobFiles HashSet and synchronizes on the EmbedConnection object.&lt;/p&gt;</comment>
                            <comment id="12636614" author="knutanders" created="Fri, 3 Oct 2008 13:34:54 +0100"  >&lt;p&gt;Thanks. The latest patch looks good. +1 to commit.&lt;/p&gt;

&lt;p&gt;(Minor nit: The latest patch changed the indentation for most of the new code in EmbedConnection so that it uses tabs instead of spaces. In that process some existing space-indented code in clearLOBMapping() was changed, and the javadoc for removeLobFile() was only partly changed and now has a mix of tabs and spaces.)&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12541205">DERBY-5603</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12391158" name="derby-3655_diff.txt" size="12837" author="kmarsden" created="Mon, 29 Sep 2008 21:02:27 +0100"/>
                            <attachment id="12391240" name="derby-3655_diff2.txt" size="14030" author="kmarsden" created="Tue, 30 Sep 2008 23:42:13 +0100"/>
                            <attachment id="12391327" name="derby-3655_diff3.txt" size="13788" author="kmarsden" created="Wed, 1 Oct 2008 23:44:59 +0100"/>
                            <attachment id="12391387" name="derby-3655_diff4.txt" size="13637" author="kmarsden" created="Thu, 2 Oct 2008 23:48:54 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Aug 2008 23:23:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23772</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0e7r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36121</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>