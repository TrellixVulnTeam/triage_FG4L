<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1178/DERBY-1178.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1178] NetworkServer doesn&apos;t handle new subclasses of SQLException correctly</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1178</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I observe a strange diff when running metadata.java under 1.6 and&lt;br/&gt;
NetworkServer.&lt;/p&gt;

&lt;p&gt;Some expected SQLExceptions that are printed in the output have &apos; : &apos;&lt;br/&gt;
appended to them, and this causes a diff.&lt;/p&gt;

&lt;p&gt;After some debugging and poking around I discovered that this is&lt;br/&gt;
because&lt;/p&gt;

&lt;p&gt;DRDAConnThread::buildSqlerrmc(SQLException se) &lt;/p&gt;

&lt;p&gt;assumes that if &apos;se&apos; is NOT an EmbedSQLException it should not build a&lt;br/&gt;
tokenized sqlerrmc:&lt;/p&gt;

&lt;p&gt;		if (se instanceof EmbedSQLException  &amp;amp;&amp;amp; ! severe)&lt;br/&gt;
			sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);&lt;br/&gt;
		else &lt;/p&gt;
{
		    System.out.println(&quot;using preformatted...&quot;); 
			// If this is not an EmbedSQLException or is a severe excecption where
			// we have no hope of succussfully calling the SYSIBM.SQLCAMESSAGE send
			// preformatted message using the server locale
			sqlerrmc = buildPreformattedSqlerrmc(se);
			}

&lt;p&gt;But in Java 1.6 &apos;se&apos; can indeed be something else, e.g.&lt;br/&gt;
java.sql.SQLSyntaxErrorException&lt;/p&gt;

&lt;p&gt;in this case the NetworkServer will build a preformatted message, and&lt;br/&gt;
SYSIBM.SQLCAMESSAGE will be called on this. Unfortunately  the input&lt;br/&gt;
is not checked very well so it ends up trying to use the preformatted&lt;br/&gt;
message as a real messageId and try to look up a localized version of&lt;br/&gt;
the message. This obviously doesn&apos;t work and in the bail-out process we end up&lt;br/&gt;
with the preformatted message with &apos; : &apos; appended to it...&lt;/p&gt;

&lt;p&gt;So I think DRDAConnThread::buildSqlerrmc(SQLException se) must be able&lt;br/&gt;
to handle all the new SQLException types.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12331549">DERBY-1178</key>
            <summary>NetworkServer doesn&apos;t handle new subclasses of SQLException correctly</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12328846">DERBY-955</parent>
                                    <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Apr 2006 16:28:29 +0100</created>
                <updated>Sun, 19 Apr 2015 19:05:38 +0100</updated>
                            <resolved>Tue, 18 Apr 2006 18:35:24 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                    <component>Localization</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12373872" author="rhillegas" created="Tue, 11 Apr 2006 00:57:39 +0100"  >&lt;p&gt;I have attached bug1178_rev1.diff, which supplies a fix to this issue. The patch also eliminates a boatload of jdk16-specific test canons. Here is a description of the patch:&lt;/p&gt;

&lt;p&gt;The problem, as Dyre notes, arises because of the peculiar way that we serialize SQLExceptions across DRDA. This is what we do:&lt;/p&gt;

&lt;p&gt;1) The server breaks open the Derby exception and scrapes out the Derby message ID and its arguments. These scraps are then encoded into a string and sent across DRDA.&lt;/p&gt;

&lt;p&gt;2) The client, on receiving this encoded string, decodes the message ID and args, then asks the server to translate the message into the language preferred by the client.&lt;/p&gt;

&lt;p&gt;This is a fair amount of fragile jiggery-pokery for ferrying and localizing SQLExceptions across DRDA. You might want to think about how, given a more stateful session, the server could localize the message text in the first place, eliminating the handshake in (2). However, this raises backward compatibility issues which I&apos;m not itching to address in this release.&lt;/p&gt;

&lt;p&gt;The current approach breaks under JDBC4 because the server no longer holds a Derby exception. Instead, the server holds one of the JDBC4-introduced subclasses of SQLException. These sublcasses do not contain the Derby message ID and its arguments. With nothing to encode, the serialization falls on its face.&lt;/p&gt;

&lt;p&gt;My solution to this problem is to poke the Derby exception into the cause field of the JDBC4-introduced SQLException. By looking inside the wrapped Derby exception, the serialization logic can find the message ID and its args.&lt;/p&gt;

&lt;p&gt;Derbyall ran &quot;cleanly&quot; (modulo expected diffs in wisconsin) under jdk1.4. Derbyall also ran cleanly (modulo the wisconsin diffs) under jkd16 except for some diffs in lang/procedure and lang/updatableResultSet. I have updated their jdk16-specific canons and I believe derbyall now runs under jdk1.6 as well as it runs under jdk1.4. The jdbc4 tests also run cleanly.&lt;/p&gt;

&lt;p&gt;Here are the files touched by this patch:&lt;/p&gt;

&lt;p&gt;M      java\engine\org\apache\derby\impl\jdbc\SQLExceptionFactory.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\jdbc\SQLExceptionFactory40.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\jdbc\Util.java&lt;br/&gt;
M      java\drda\org\apache\derby\impl\drda\DRDAConnThread.java&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\Stream.java&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\holdCursorJDBC30.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\importExport.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\LOBTest.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\savepointJdbc30_JSR169.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\prepStmt.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\checkSecMgr.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\unaryArithmeticDynamicParameter.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\metadata.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\setTransactionIsolation.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\users2.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\procedure.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\forupdate.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\resultset.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\nullSQLText.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\ieptests.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\holdCursorJavaReflection.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\blobclob4BLOB.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\users.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\testij.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\csPrepStmt.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\optimizerOverrides.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\syscat.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\odbc_metadata.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\holdCursorIJ.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\secureUsers.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\jdk16\supersimple.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNet\Stream.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\jdk16\closed.out&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\jdk16\dblook_test.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\jdk16\releaseCompileLocks.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\importExport.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\unaryArithmeticDynamicParameter.ou&lt;br/&gt;
t&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\metadata.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\setTransactionIsolation.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\holdCursorJava.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\procedure.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\Stream.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\ieptests.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\blobclob4BLOB.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\holdCursorJavaReflection.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\xaSimplePositive.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\syscat.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\odbc_metadata.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\supersimple.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\holdCursorJDBC30.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\savepointJdbc30_JSR169.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\LOBTest.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\updatableResultSet.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\prepStmt.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\checkSecMgr.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\users2.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\savepointJdbc30_XA.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\forupdate.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\resultset.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\parameterMapping.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\nullSQLText.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\users.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\testij.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\csPrepStmt.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\optimizerOverrides.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\holdCursorIJ.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\secureUsers.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk16\XATest.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\Stream.out&lt;br/&gt;
D      java\testing\org\apache\derbyTesting\functionTests\master\DerbyNetClient\jdk14\Stream.out&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\master\Stream.out&lt;/p&gt;</comment>
                            <comment id="12374047" author="rhillegas" created="Tue, 11 Apr 2006 23:52:19 +0100"  >&lt;p&gt;Committed bug1178_rev1.diff at subversion revision 393239.&lt;/p&gt;</comment>
                            <comment id="12374899" author="dyret" created="Tue, 18 Apr 2006 18:36:19 +0100"  >&lt;p&gt;Fixed and verified&lt;/p&gt;</comment>
                            <comment id="14502019" author="bryanpendleton" created="Sun, 19 Apr 2015 18:45:35 +0100"  >&lt;p&gt;As part of studying &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6773&quot; title=&quot;Derby throws plain SQLIntegrityConstraintViolationException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6773&quot;&gt;DERBY-6773&lt;/a&gt;, I&apos;ve been digging more deeply into how the message handling occurs in the client.&lt;/p&gt;

&lt;p&gt;In particular, I&apos;m quite interested in how the message *&lt;b&gt;arguments&lt;/b&gt;* are handled.&lt;/p&gt;

&lt;p&gt;As Rick noted above:&lt;/p&gt;

&lt;p&gt;       &quot;2) The client, on receiving this encoded string, decodes the message ID and args, &lt;br/&gt;
        then asks the server to translate the message into the language preferred by the client.&quot;&lt;/p&gt;

&lt;p&gt;The heavy lifting for this part of the process occurs in two bits of code which cooperate.&lt;/p&gt;

&lt;p&gt;On the client side, we have the method Sqlca.getMessage(), in org.apache.derby.client.am.Sqlca,&lt;br/&gt;
which is called by SqlException.getMessage(), in org.apache.derby.client.am.SqlException&lt;/p&gt;

&lt;p&gt;And on the server side, we have the SystemProcedure SYSIBM.SQLCAMESSAGE, whose&lt;br/&gt;
code lives in org.apache.derby.catalog.SystemProcedures, in the method SQLCAMESSAGE,&lt;br/&gt;
and in the lower-level utility routine MessageService.getLocalizedMessage, whose code lives&lt;br/&gt;
in org.apache.derby.iapi.services.i18n.MessageService.&lt;/p&gt;

&lt;p&gt;So a typical client-side stack trace for getting the correct SQLException to throw on the&lt;br/&gt;
client side would look something like this:&lt;/p&gt;

&lt;p&gt;        at org.apache.derby.client.am.Sqlca.getMessage(Sqlca.java:285)&lt;br/&gt;
        at org.apache.derby.client.am.Sqlca.getJDBCMessage(Sqlca.java:347)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getMessage(SqlException.java:375)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:324)&lt;br/&gt;
        at org.apache.derby.client.am.ClientPreparedStatement.executeUpdate(ClientPreparedStatement.java:404)&lt;br/&gt;
        at DERBY6733Repro.testDerby6733(DERBY6733Repro.java:36)&lt;/p&gt;

&lt;p&gt;The reason this is important, is because I think the reality is *&lt;b&gt;slightly&lt;/b&gt;* different&lt;br/&gt;
that Rick described it. It doesn&apos;t appear to me that the client code&lt;/p&gt;

&lt;p&gt;        &quot;decodes the message ID and args&quot;&lt;/p&gt;

&lt;p&gt;in a complete sense. The client code indeed separates the message ID from the&lt;br/&gt;
args, so that when we get to Sqlca.getMessage(), we have, in the case of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6773&quot; title=&quot;Derby throws plain SQLIntegrityConstraintViolationException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6773&quot;&gt;DERBY-6773&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;    SqlCode: -20001&lt;br/&gt;
    SqlState: 23505&lt;br/&gt;
    errmc:UK_APPLICATION_NAME&#182;APPLICATION&#182;23505&lt;/p&gt;

&lt;p&gt;This means that, for the purposes of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6673&quot; title=&quot;Access denied in ImportExportTest.testWithCodeset&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6673&quot;&gt;DERBY-6673&lt;/a&gt;, which would really like to&lt;br/&gt;
get access to the arguments &quot;UK_APPLICATION_NAME&quot; and &quot;APPLICATION&quot;,&lt;br/&gt;
more work would need to be done on the client side to be able to extract them.&lt;/p&gt;</comment>
                            <comment id="14502036" author="bryanpendleton" created="Sun, 19 Apr 2015 19:05:38 +0100"  >&lt;p&gt;The server-side portion of the logic described by Rick:&lt;/p&gt;

&lt;p&gt;       &quot;1) The server breaks open the Derby exception and scrapes out &lt;br/&gt;
        the Derby message ID and its arguments. These scraps are then &lt;br/&gt;
        encoded into a string and sent across DRDA.&quot;&lt;/p&gt;

&lt;p&gt;is not quite as complicated; it is implemented in org.apache.derby.impl.drda.DRDAConnThread,&lt;br/&gt;
in the method buildTokenizedSqlerrmc(), with this little bit of code:&lt;/p&gt;

&lt;p&gt;                // arguments are variable part of a message&lt;br/&gt;
                Object[] args = ferry.getArguments();&lt;br/&gt;
                for (int i = 0; args != null &amp;amp;&amp;amp;  i &amp;lt; args.length; i++) &lt;/p&gt;
{
                    sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
                }
&lt;p&gt;                sqlerrmc += messageId;&lt;br/&gt;
                se = se.getNextException();&lt;/p&gt;

&lt;p&gt;So this is the code that is paired with MessageService.getLocalizedMessage.&lt;/p&gt;

&lt;p&gt;I think this code is a bit fragile, which might account for the &quot;jiggery-pokery&quot;&lt;br/&gt;
observation earlier in this JIRA. For example, the argument delimiter is known&lt;br/&gt;
to be the byte value &apos;20&apos; in both DRDAConnThread.java and MessageService.jjava,&lt;br/&gt;
as described by this comment in DRDAConnThread.java:&lt;/p&gt;

&lt;p&gt;    // Delimiters for SQLERRMC values.&lt;br/&gt;
    // The token delimiter value will be used to parse the MessageId from the&lt;br/&gt;
    // SQLERRMC in MessageService.getLocalizedMessage and the MessageId will be&lt;br/&gt;
    // used to retrive the localized message. If this delimiter value is changed&lt;br/&gt;
    // please make sure to make appropriate changes in&lt;br/&gt;
    // MessageService.getLocalizedMessage that gets called from&lt;br/&gt;
    // SystemProcedures.SQLCAMESSAGE&lt;br/&gt;
    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;lt;code&amp;gt;SQLERRMC_TOKEN_DELIMITER&amp;lt;/code&amp;gt; separates message argument tokens&lt;br/&gt;
     */&lt;br/&gt;
    private static String SQLERRMC_TOKEN_DELIMITER = new String(new char[] 
{(char)20}
&lt;p&gt;);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m just trying to document these observations here in case we decide to try&lt;br/&gt;
to refactor this code for the purposes of something like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6773&quot; title=&quot;Derby throws plain SQLIntegrityConstraintViolationException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6773&quot;&gt;DERBY-6773&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12328846">DERBY-955</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12325146" name="bug1178_rev1.diff" size="1938740" author="rhillegas" created="Tue, 11 Apr 2006 00:57:39 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 10 Apr 2006 23:57:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29884</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0sbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38405</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>