<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:55 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2472/DERBY-2472.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2472] Use Throwable.initCause() to improve error reporting</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2472</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;As Derby has moved to J2SE 1.4, Throwable.initCause() can now be used to improve error reporting.&lt;br/&gt;
As stated in the initial commit (that was backed out, see below):&lt;br/&gt;
&apos;Set Throwable.initCause() in a couple of locations at the JDBC level where we setup nested SQLExceptions.&lt;br/&gt;
This means that automatically the stack trace for a database failed to start includes the reason&lt;br/&gt;
for the failure, rather than just &quot;see next exception&quot;. This is a great help when running&lt;br/&gt;
JUnit tests and getting failures to start a database.&apos;&lt;/p&gt;

&lt;p&gt;The initial commit was backed out because it broke numerous tests under JDK 1.6, and the author indicated he had no time to investigate.&lt;br/&gt;
The patch caused no failures when running the tests with Java SE 5.0.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12365437">DERBY-2472</key>
            <summary>Use Throwable.initCause() to improve error reporting</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Mar 2007 09:59:50 +0000</created>
                <updated>Wed, 20 Jun 2007 08:21:53 +0100</updated>
                            <resolved>Fri, 1 Jun 2007 09:31:54 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>JDBC</component>
                    <component>Miscellaneous</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12482696" author="kristwaa" created="Wed, 21 Mar 2007 10:04:22 +0000"  >&lt;p&gt;Backed out the initial commit to keep the test runs clean.&lt;br/&gt;
The reason for the failures under Java SE 6 should be investigated, and actions taken to enable complete stack traces everywhere.&lt;br/&gt;
Again, note that all tests run without failures when applying the patch and running with Java SE 5.0.&lt;/p&gt;

&lt;p&gt;Attached &apos;derby-2472_initial_patch.diff&apos; for reference.&lt;/p&gt;</comment>
                            <comment id="12483946" author="knutanders" created="Sun, 25 Mar 2007 16:11:59 +0100"  >&lt;p&gt;Attaching a patch which removes the printStackTrace() overloads in EmbedSQLException and instead calls setStackTrace() in the constructor. Tests ran cleanly with JDK6. Running on 1.4.2 now to verify that it also works with the non-JDBC4 exception factory.&lt;/p&gt;</comment>
                            <comment id="12483948" author="knutanders" created="Sun, 25 Mar 2007 16:18:20 +0100"  >&lt;p&gt;Does anyone know what this comment in EmbedSQLException means?&lt;/p&gt;

&lt;p&gt;	/**&lt;br/&gt;
		Java exception that caused this exception, can be null.&lt;br/&gt;
	*/&lt;br/&gt;
    //Because it&apos;s transient, it doesn&apos;t get sent over to the client&lt;br/&gt;
    //side and hence the classes which needs to be included in the&lt;br/&gt;
    //client.jar file decreases 5 folds.&lt;br/&gt;
	private transient Throwable javaException;&lt;/p&gt;

&lt;p&gt;I haven&apos;t found any code that serializes (in the meaning ObjectOutputStream.writeObject()) the exception and sends it over to the client. If the comment is true, we can&apos;t use initCause() on the EmbedSQLException.&lt;/p&gt;</comment>
                            <comment id="12484043" author="knutanders" created="Mon, 26 Mar 2007 07:53:33 +0100"  >&lt;p&gt;lang/closed.java and lang/releaseCompileLocks.sql failed with trivial diffs on JDK 1.4.2 and JDK 5. Attaching an updated patch which modifies the canons.&lt;/p&gt;</comment>
                            <comment id="12484426" author="knutanders" created="Tue, 27 Mar 2007 12:06:30 +0100"  >&lt;p&gt;Committed setStackTrace-v2.diff with revision 522866.&lt;/p&gt;</comment>
                            <comment id="12495003" author="knutanders" created="Fri, 11 May 2007 10:02:02 +0100"  >&lt;p&gt;Assigning the issue to me since I&apos;m working on it as a background task. If someone needs this to be resolved quickly, feel free to reassign the issue, and I&apos;ll upload whichever partial patch I have at that point.&lt;/p&gt;

&lt;p&gt;Right now what I&apos;m experimenting with is to replace StandardException&apos;s set/getNestedException() and EmbedSQLException&apos;s getJavaException() with initCause/getCause. I&apos;m also using initCause() to link EmbedSQLException&apos;s next exception if no other cause has been specified. An example of the improved error reporting using this approach:&lt;/p&gt;

&lt;p&gt;Running CharacterStreamsTest with the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-827&quot; title=&quot;Performance can be improved by re-using language ResultSets across Activation executions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-827&quot;&gt;&lt;del&gt;DERBY-827&lt;/del&gt;&lt;/a&gt; patch normally gives this error (stack frames removed):&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;ASSERT FAILED Unexpected exception: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;With the suggested chaining, this is what JUnit will report:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Java exception: &apos;ASSERT FAILED Unexpected exception: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED Unexpected exception&lt;br/&gt;
Caused by: ERROR XCL30: An IOException was thrown when reading a &apos;java.sql.String&apos; from an InputStream.&lt;br/&gt;
Caused by: java.io.EOFException&lt;/p&gt;

&lt;p&gt;However, it will take some time to clean up the regression tests.&lt;/p&gt;</comment>
                            <comment id="12495237" author="knutanders" created="Sat, 12 May 2007 08:46:35 +0100"  >&lt;p&gt;Here&apos;s the first step which makes StandardException use initCause/getCause instead of its own setNestedException/getNestedException mechanism. I think the patch also fixes a bug where the original code could end up trying to cast a StandardException to ThreadDeath. Derbyall and suites.All passed on Java 1.5 and Java 1.6.&lt;/p&gt;</comment>
                            <comment id="12495270" author="knutanders" created="Sat, 12 May 2007 14:16:02 +0100"  >&lt;p&gt;Committed standardexception.diff with revision 537412.&lt;/p&gt;</comment>
                            <comment id="12495351" author="knutanders" created="Sun, 13 May 2007 10:40:18 +0100"  >&lt;p&gt;Attaching patch which replaces EmbedSQLException&apos;s chaining (getJavaException()) with initCause/getCause and makes EmbedSQLException use initCause (in addition to setNextException) for the next SQLException if no Java exception has been specified.&lt;/p&gt;

&lt;p&gt;Derbyall and suites.All ran cleanly on Java 1.5 and Java 1.6.&lt;/p&gt;</comment>
                            <comment id="12495369" author="knutanders" created="Sun, 13 May 2007 15:52:24 +0100"  >&lt;p&gt;Committed revision 537592.&lt;/p&gt;</comment>
                            <comment id="12495518" author="knutanders" created="Mon, 14 May 2007 09:45:11 +0100"  >&lt;p&gt;The original patch (the one that was backed out) called initCause() on an exception thrown from EmbedConnection.bootDatabase(). The attached patch tries to achieve the same thing by passing the next SQLException to EmbedSQLException&apos;s constructor (via a new utility method &amp;#8211; Util.seeNextException()), so that the chaining implemented by the previous patches makes the next SQLException also the cause of the main exception, without breaking the JDBC 4.0 driver. The patch also fixes the chaining of exceptions in EmbedConnection.createDatabase(). Derbyall and suites.All passed on Java 1.5 and Java 1.6.&lt;/p&gt;

&lt;p&gt;Without the patch, the output from calling printStackTrace() on an exception thrown when booting a database may look like this:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Failed to start database &apos;/tmp/db&apos;, see the next exception for details.&lt;br/&gt;
	(stack frames)&lt;/p&gt;

&lt;p&gt;With the patch, the output looks like this:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Failed to start database &apos;/tmp/db&apos;, see the next exception for details.&lt;br/&gt;
	(stack frames)&lt;br/&gt;
Caused by: java.sql.SQLException: Unsupported upgrade from &apos;10.2&apos; to &apos;10.3 beta&apos;.&lt;br/&gt;
	(stack frames)&lt;br/&gt;
Caused by: ERROR XCW00: Unsupported upgrade from &apos;10.2&apos; to &apos;10.3 beta&apos;.&lt;br/&gt;
	(stack frames)&lt;/p&gt;</comment>
                            <comment id="12495521" author="knutanders" created="Mon, 14 May 2007 09:52:07 +0100"  >&lt;p&gt;Committed seenext.diff with revision 537753.&lt;/p&gt;</comment>
                            <comment id="12497266" author="knutanders" created="Sun, 20 May 2007 17:21:10 +0100"  >&lt;p&gt;The patch that replaced StandardException.setNestedException() with Throwable.initCause() may have introduced a problem in GenericLanguageConnectionContext.dropAllDeclaredGlobalTempTables() and BasicDependencyManager.coreInvalidateFor(). These two methods accumulate StandardExceptions which are thrown from within a loop, and the exceptions are re-thrown when the loop has ended. The exception that is re-thrown is the last exception that was caught, and it has all previously caught exceptions as its cause. The code that accumulates the exceptions looks like this:&lt;/p&gt;

&lt;p&gt;	} catch (StandardException e) &lt;/p&gt;
{
		e.initCause(topLevelStandardException);
		topLevelStandardException = e;
	}

&lt;p&gt;The problem is that initCause() can only be called once on a Throwable, so if the StandardException already has a cause, initCause() will throw an IllegalStateException. The old code would not fail if this happened since setNestedException() would happily overwrite any existing nested exception.&lt;/p&gt;

&lt;p&gt;One solution is to call initCause() on the exception&apos;s cause (or the cause of the cause, etc) if it has one. However, this wouldn&apos;t work if the last exception in the chain has been initialized with null as cause, since null also blocks subsequent calls to initCause(). Therefore, I suggest that we change the code so that it tries to chain the exceptions as suggested above, but if the StandardException cannot add a new exception to its chain, a new exception is created with the same SQL state, message and stack trace, but with no cause, and the clone is inserted into the chain instead.&lt;/p&gt;</comment>
                            <comment id="12499063" author="knutanders" created="Fri, 25 May 2007 13:02:29 +0100"  >&lt;p&gt;Attaching initCause.diff which removes the possibly dangerous use of initCause(). After a discussion on derby-dev, I chose to go for a solution where only the first exception caught is re-thrown. This is because it might be confusing for users to get a caused-by chain when the exceptions are not necessarily caused by eachother, and the code will be very complex for little added value if we want to do the chaining.&lt;/p&gt;

&lt;p&gt;Derbyall and suites.All ran cleanly on Sun Java 1.6.&lt;/p&gt;</comment>
                            <comment id="12499406" author="knutanders" created="Sun, 27 May 2007 15:19:58 +0100"  >&lt;p&gt;I have changed my mind again about how to handle the unsafe calls to initCause(). The comments in the code indicate that the complexity was added deliberately and I do see the value of getting all the errors for instance if you try to drop a table and there are many dependent objects. Therefore, I suggest that we keep the current behaviour when we can, and if initCause() throws IllegalStateException, we skip the exception we could not put into the chain. This is a very simple change, it doesn&apos;t require any test changes like the previous suggestion did, and it guarantees that the first exception caught is always part of the exception chain. initCause2.diff implements the suggested solution. All tests passed.&lt;/p&gt;</comment>
                            <comment id="12499709" author="knutanders" created="Tue, 29 May 2007 08:45:49 +0100"  >&lt;p&gt;Committed initCause2.diff with revision 542446.&lt;/p&gt;</comment>
                            <comment id="12500361" author="knutanders" created="Thu, 31 May 2007 13:38:33 +0100"  >&lt;p&gt;I went through all the calls to SQLException.setNextException() in the engine code to see if there were more problems with the chaining. Most of them seemed OK, as they for instance cleaned up after an error and put the subsequent exceptions into the next chain. In those cases initCause() is not necessary because the subsequent errors are not causing the first error, and the first error is what is thrown to the caller.&lt;/p&gt;

&lt;p&gt;The problems I found, were:&lt;/p&gt;

&lt;p&gt;  1) EmbedStatement.executeBatch() catches SQLException and re-throws it as BatchUpdateException. It only links it to the original exception with setNextException(), but should also have used initCause().&lt;/p&gt;

&lt;p&gt;  2) EmbedResultSet.closeOnTransactionError() tries to close the ResultSet, and if close() fails, it throws the exception from close() with a next pointer to the original exception. It should always throw the original exception, and instead have a next pointer to the exception thrown from close(). No need for initCause() since the exceptions don&apos;t necessarily cause each other, and you&apos;ll always get the original (and most interesting) exception.&lt;/p&gt;

&lt;p&gt;  3) ImportReadData.realOpenFile() sets the cause of the SQLException by manually creating an SQLException with the same message as the original Java exception and calling setNextException(). Instead, it should use factory methods which performs the correct chaining.&lt;/p&gt;

&lt;p&gt;The attached patch fixes these issues. Derbyall and suites.All ran cleanly.&lt;/p&gt;</comment>
                            <comment id="12500595" author="jorgenlo" created="Fri, 1 Jun 2007 08:25:56 +0100"  >&lt;p&gt;Hi Knut&lt;/p&gt;

&lt;p&gt;I had a few empty cycles. For what it&apos;s worth, Derbyall and suites.All run without errors here as well.&lt;/p&gt;

&lt;p&gt;The patch looks good to me, but I have one small question: Would it be possible to narrow the scope of LoadError.dataFileNotFound to take an Exception instead of a Throwable? That would look more intuitive to me, but I may have missed something here... The only uses of this method I have found (in ImportReadData) use Exceptions. &lt;/p&gt;</comment>
                            <comment id="12500609" author="knutanders" created="Fri, 1 Jun 2007 09:06:49 +0100"  >&lt;p&gt;Thanks for the review, J&#248;rgen!&lt;/p&gt;

&lt;p&gt;It&apos;s certainly possible to let dataFileNotFound() take an Exception parameter instead of a Throwable since it&apos;s only ever called with FileNotFoundException or SecurityException. I chose to use a more generic data type in the signature to allow different uses in the future, but it doesn&apos;t seem likely that anyone will call that method with a Throwable, so I&apos;ll change it.&lt;/p&gt;</comment>
                            <comment id="12500615" author="knutanders" created="Fri, 1 Jun 2007 09:22:19 +0100"  >&lt;p&gt;Attaching new patch which changes the signature of LoadError.dataFileNotFound().&lt;/p&gt;</comment>
                            <comment id="12500619" author="knutanders" created="Fri, 1 Jun 2007 09:31:54 +0100"  >&lt;p&gt;Committed revision 543424.&lt;/p&gt;

&lt;p&gt;I&apos;m marking the issue as resolved since the problems the initial check-in intended to solve, have been fixed.&lt;/p&gt;</comment>
                            <comment id="12506429" author="kristwaa" created="Wed, 20 Jun 2007 08:21:53 +0100"  >&lt;p&gt;I believe it is correct as Knut Anders says, that the initially reported problem has been fixed.&lt;br/&gt;
It should now be possible to improve error reporting further by making sure initCause (or a suitable constructor where available) is used around in the Derby code. This will probably be handled as part of other tasks, or separate Jiras.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12353836" name="derby-2472_initial_patch.diff" size="970" author="kristwaa" created="Wed, 21 Mar 2007 10:04:22 +0000"/>
                            <attachment id="12357179" name="embedsqlexception.diff" size="5897" author="knutanders" created="Sun, 13 May 2007 10:40:18 +0100"/>
                            <attachment id="12357180" name="embedsqlexception.stat" size="394" author="knutanders" created="Sun, 13 May 2007 10:40:18 +0100"/>
                            <attachment id="12358224" name="initCause.diff" size="11999" author="knutanders" created="Fri, 25 May 2007 13:02:28 +0100"/>
                            <attachment id="12358225" name="initCause.stat" size="478" author="knutanders" created="Fri, 25 May 2007 13:02:29 +0100"/>
                            <attachment id="12358326" name="initCause2.diff" size="2867" author="knutanders" created="Sun, 27 May 2007 15:19:57 +0100"/>
                            <attachment id="12358327" name="initCause2.stat" size="168" author="knutanders" created="Sun, 27 May 2007 15:19:57 +0100"/>
                            <attachment id="12357235" name="seenext.diff" size="2562" author="knutanders" created="Mon, 14 May 2007 09:45:11 +0100"/>
                            <attachment id="12357236" name="seenext.stat" size="123" author="knutanders" created="Mon, 14 May 2007 09:45:11 +0100"/>
                            <attachment id="12354185" name="setStackTrace-v2.diff" size="4937" author="knutanders" created="Mon, 26 Mar 2007 07:53:33 +0100"/>
                            <attachment id="12354164" name="setStackTrace.diff" size="2614" author="knutanders" created="Sun, 25 Mar 2007 16:11:59 +0100"/>
                            <attachment id="12358612" name="setnext.diff" size="2747" author="knutanders" created="Thu, 31 May 2007 13:38:33 +0100"/>
                            <attachment id="12358613" name="setnext.stat" size="259" author="knutanders" created="Thu, 31 May 2007 13:38:33 +0100"/>
                            <attachment id="12358700" name="setnext2.diff" size="2750" author="knutanders" created="Fri, 1 Jun 2007 09:22:19 +0100"/>
                            <attachment id="12357160" name="standardexception.diff" size="8683" author="knutanders" created="Sat, 12 May 2007 08:46:34 +0100"/>
                            <attachment id="12357161" name="standardexception.stat" size="672" author="knutanders" created="Sat, 12 May 2007 08:46:35 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 25 Mar 2007 15:11:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30466</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11lz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39911</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>