<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2493/DERBY-2493.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2493] Use unsynchronized collections in BackingStoreHashtable</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2493</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;BackingStoreHashtable uses a Vector and a Hashtable, but doesn&apos;t need the synchronization provided by these classes (I think). Replacing them with ArrayList and HashMap could improve performance for some kinds of operations.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12365928">DERBY-2493</key>
            <summary>Use unsynchronized collections in BackingStoreHashtable</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Mar 2007 20:23:08 +0100</created>
                <updated>Mon, 29 Jun 2009 15:11:40 +0100</updated>
                            <resolved>Fri, 13 Apr 2007 08:21:50 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12484857" author="knutanders" created="Wed, 28 Mar 2007 13:57:21 +0100"  >&lt;p&gt;Replacing the Hashtable with a HashMap was trivial, but because of differences between the implementations of Hashtable and HashMap, the rows come out in different order for some queries (in particular SELECT DISTINCT). And since the implementation of HashMap changed between JDK5 and JDK6, the order varies between JVMs as well. Three tests will be affected by this change:&lt;br/&gt;
  JUnit:&lt;br/&gt;
    LangScripts.aggregate&lt;br/&gt;
    ResultSetsFromPreparedStatementTest.testDistinctScanResultSet&lt;br/&gt;
  derbyall:&lt;br/&gt;
    lang/distinct.sql (currently being converted to JUnit, see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2491&quot; title=&quot;Convert distinct.sql to JUnit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2491&quot;&gt;&lt;del&gt;DERBY-2491&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I don&apos;t think the LangScripts tests can handle different results in different JVMs, so that one will probably have to be converted to pure JUnit in order to work with this change. In ResultSetsFromPreparedStatementTest it should be possible to use an assert method which didn&apos;t require a specific order.&lt;/p&gt;</comment>
                            <comment id="12484860" author="knutanders" created="Wed, 28 Mar 2007 14:06:46 +0100"  >&lt;p&gt;It seems like the ordering is already a problem in lang/distinct.sql. That&apos;s why it has different canons for different JVMs.&lt;/p&gt;</comment>
                            <comment id="12484923" author="fuzzylogic" created="Wed, 28 Mar 2007 17:55:02 +0100"  >&lt;p&gt;Thanks for the review, Knut! I appreciate it.&lt;/p&gt;

&lt;p&gt;checkDistinctRows does only check the number of rows returned, and it is some cause for concern. Theoretically, I suppose a change could cause a row to be eliminated from one set of duplicates and then not removed from another for some reason, and the number of rows as checked by assertRowCount() would be the same, masking an actual failure. But because the data and queries here are so simple, I think it is more likely that duplicates would just fail to be eliminated, and such a change would cause some testcases to fail with higher row counts. So, while some detail has now been lost in the translation to JUnit, I think confidence in the test lies in its simple data sets and in the redundancy of the queries run over them.&lt;/p&gt;

&lt;p&gt;As for additional checks in the new test, the only thing that immediately came to mind was to add a check into checkDistinctRows/assertRowCount that some key row in each query has returned only unique values. However, the row that is &apos;key&apos; for the select * from ... queries changes depending on the data set, so it might be hard to nail down a generic solution that provides a good, simple assert method.&lt;/p&gt;

&lt;p&gt;There are several tests that assert full result sets in the new test, but it might be worthwhile to add some tests that select distinct on one column, and then order by another column so that differences in row order are eliminated, and then assert the full result set in the test. If you have any ideas or time for that, feel free to add them to the new JUnit test once it is committed (which will be very shortly).&lt;/p&gt;

&lt;p&gt;I&apos;ll correct the two items as regards checkDistinctRows(). After having some time away from the test, I&apos;m thinking a better approach for RuntimeStatisticsParser is to let it do the parsing. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  i.e. instead of:&lt;/p&gt;

&lt;p&gt;assertEquals(-1, rtsp.indexOf(&quot;Distinct Scan&quot;));&lt;br/&gt;
assertTrue(rtsp.indexOf(&quot;Eliminate duplicates = true&quot;) &amp;gt; 0);&lt;/p&gt;

&lt;p&gt;in the test, have RuntimeStatisticsParser make the proper String calls and store the results as private instance variables whose value can be asserted using getter methods. The above would then become:&lt;/p&gt;

&lt;p&gt;assertFalse(rtsp.usedDistinctScan());&lt;br/&gt;
assertTrue(rtsp.eliminatedDuplicates());&lt;/p&gt;

&lt;p&gt;which I think would give the test better readability and make RuntimeStatisticsParser more useful.&lt;/p&gt;

&lt;p&gt;Let me know if you have any other comments, otherwise I&apos;ll check the test in once I&apos;ve made the changes mentioned above.&lt;/p&gt;</comment>
                            <comment id="12485107" author="knutanders" created="Thu, 29 Mar 2007 09:29:41 +0100"  >&lt;p&gt;Attaching patch (derby-2493-assert) which creates a new assert method JDBC.assertUnorderedResultSet() which is similar to assertFullResultSet() only that it doesn&apos;t care about the order of the result set. Also made two test cases (one in DistinctTest and one in ResultSetsFromPreparedStatementTest) use the new method to prevent them from failing when the Hashtable in BackingStoreHashtable is replaced with a HashMap.&lt;/p&gt;</comment>
                            <comment id="12485109" author="knutanders" created="Thu, 29 Mar 2007 09:34:31 +0100"  >&lt;p&gt;Committed the test changes with revision 523621.&lt;/p&gt;</comment>
                            <comment id="12485167" author="knutanders" created="Thu, 29 Mar 2007 13:51:50 +0100"  >&lt;p&gt;The only part of lang/aggregate.sql that is sensitive to the Hashtable changes, is the repro for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-280&quot; title=&quot;Wrong result from select when aliasing to same name as used in group by&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-280&quot;&gt;&lt;del&gt;DERBY-280&lt;/del&gt;&lt;/a&gt;. Attaching a patch (derby-2493-aggregate) which moves that part into lang.GroupByTest. The new JUnit test case uses assertUnorderedResultSet to avoid the problem with different row order (except for one query which already specifies an explicit ORDER BY).&lt;/p&gt;</comment>
                            <comment id="12485170" author="knutanders" created="Thu, 29 Mar 2007 13:59:25 +0100"  >&lt;p&gt;Committed derby-2493-aggregate with revision 523691.&lt;/p&gt;</comment>
                            <comment id="12485191" author="bryanpendleton" created="Thu, 29 Mar 2007 15:02:08 +0100"  >&lt;p&gt;I read (can&apos;t find the reference, sorry) that switching to use of unsynchronized&lt;br/&gt;
collection classes appears to provide substantially less benefit in JDK 1.5/1.6&lt;br/&gt;
than it did in, say, 1.3.&lt;/p&gt;

&lt;p&gt;What is your experience? Does switching to the unsynchronized class provide&lt;br/&gt;
a substantial benefit in a 1.5 or 1.6 environment? Is there any easy comparison&lt;br/&gt;
of the magnitude of the difference between, say, 1.4 and 1.6 environments?&lt;/p&gt;</comment>
                            <comment id="12485198" author="knutanders" created="Thu, 29 Mar 2007 15:40:07 +0100"  >&lt;p&gt;In my experience, things have become much better, especially in 1.6. Since the monitors in this issue are uncontended, I wouldn&apos;t expect any significant performance improvement on 1.6 (but I still think it&apos;s good to get rid of unnecessary synchronization). For contended monitors, the benefit would be greater even on 1.6. For instance, Olav&apos;s nightly performance tests (&lt;a href=&quot;http://home.online.no/~olmsan/derby/perf/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://home.online.no/~olmsan/derby/perf/&lt;/a&gt;) show significantly improved performance for many of the multi-user tests between March 17 and March 18. That improvement was caused by Dyre&apos;s patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2114&quot; title=&quot;Let Clock embed a HashMap rather than inherit from Hashtable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2114&quot;&gt;&lt;del&gt;DERBY-2114&lt;/del&gt;&lt;/a&gt;, which reduced some double synchronization by replacing a Hashtable with a HashMap in Clock. Similar effects were seen when replacing Hashtables with HashMaps in the lock manager.&lt;/p&gt;

&lt;p&gt;I haven&apos;t done much testing with 1.4 lately, but there are some graphs attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2327&quot; title=&quot;Reduce monitor contention in LockSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2327&quot;&gt;&lt;del&gt;DERBY-2327&lt;/del&gt;&lt;/a&gt; which show the difference between 1.5 and 1.6, comparing an approach using a HashMap inside a synchronized block with an approach using a ConcurrentHashMap. The difference between the two approaches is much greater on 1.5 than on 1.6, mainly because synchronization has become cheaper.&lt;/p&gt;</comment>
                            <comment id="12487790" author="knutanders" created="Tue, 10 Apr 2007 16:11:24 +0100"  >&lt;p&gt;derby-2493-hashtable.diff replaces the Hashtable in BackingStoreHashtable with a HashMap. Derbyall and suites.All ran successfully (except the tests that also fail in the Tinderbox).&lt;/p&gt;</comment>
                            <comment id="12488010" author="knutanders" created="Wed, 11 Apr 2007 08:21:03 +0100"  >&lt;p&gt;Committed derby-2493-hashtable.diff with revision 527402.&lt;/p&gt;</comment>
                            <comment id="12488348" author="knutanders" created="Thu, 12 Apr 2007 13:19:41 +0100"  >&lt;p&gt;derby-2493-vector.diff replaces the Vectors with ArrayLists. Changes were also needed outside BackingStoreHashtable since some of the callers expected Vectors to be returned. I changed them so that they expected List objects instead of Vectors. All tests passed.&lt;/p&gt;</comment>
                            <comment id="12488600" author="knutanders" created="Fri, 13 Apr 2007 08:21:50 +0100"  >&lt;p&gt;Committed derby-2493-vector.diff with revision 528374.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12354507" name="derby-2493-aggregate.diff" size="7678" author="knutanders" created="Thu, 29 Mar 2007 13:51:49 +0100"/>
                            <attachment id="12354508" name="derby-2493-aggregate.stat" size="248" author="knutanders" created="Thu, 29 Mar 2007 13:51:50 +0100"/>
                            <attachment id="12354486" name="derby-2493-assert.diff" size="5901" author="knutanders" created="Thu, 29 Mar 2007 09:29:41 +0100"/>
                            <attachment id="12354487" name="derby-2493-assert.stat" size="257" author="knutanders" created="Thu, 29 Mar 2007 09:29:41 +0100"/>
                            <attachment id="12355251" name="derby-2493-hashtable.diff" size="11261" author="knutanders" created="Tue, 10 Apr 2007 16:11:24 +0100"/>
                            <attachment id="12355419" name="derby-2493-vector.diff" size="14402" author="knutanders" created="Thu, 12 Apr 2007 13:19:41 +0100"/>
                            <attachment id="12355420" name="derby-2493-vector.stat" size="409" author="knutanders" created="Thu, 12 Apr 2007 13:19:41 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 28 Mar 2007 16:55:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30479</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39112</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>