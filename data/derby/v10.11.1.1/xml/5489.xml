<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:49 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5489/DERBY-5489.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5489] getBinary() returns incorrect data after getObject() call on BLOB column</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5489</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When ResultSet.getObject(int) is called on a BLOB column, the correct EmbedBlob object is returned. But if afterwards the ResultSet.getBytes(int) is called on the same row, the returned array contains invalid data - it is offset by 3 bytes and its size is incorrect.&lt;br/&gt;
The problem only occurs when the stored BLOB is large enough to be internally represented by stream and not by array of bytes (at least ~32KiB).&lt;br/&gt;
It seems that the getObject method shifts the stream position and therefore the getBytes method starts to read the data after the third byte, thus incorrectly calculating its length.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12529576">DERBY-5489</key>
            <summary>getBinary() returns incorrect data after getObject() call on BLOB column</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="pfronczak">Pawel Fronczak</reporter>
                        <labels>
                            <label>derby_backport_reject_10_8</label>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Mon, 31 Oct 2011 22:52:18 +0000</created>
                <updated>Mon, 9 Feb 2015 19:51:48 +0000</updated>
                            <resolved>Thu, 26 Apr 2012 08:27:16 +0100</resolved>
                                    <version>10.7.1.1</version>
                    <version>10.8.2.2</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13140647" author="pfronczak" created="Mon, 31 Oct 2011 22:59:35 +0000"  >&lt;p&gt;I have attached a code snippet reproducing this bug.&lt;br/&gt;
It requires the springframework-jdbc library to operate.&lt;br/&gt;
The mentioned sequence of getObject / getBytes methods is buried inside the JdbcTemplate.queryForList method:&lt;br/&gt;
		Object obj = rs.getObject(index);&lt;br/&gt;
		(...)&lt;br/&gt;
		if (obj instanceof Blob) &lt;/p&gt;
{
			obj = rs.getBytes(index);
		}</comment>
                            <comment id="13141065" author="kristwaa" created="Tue, 1 Nov 2011 10:27:30 +0000"  >&lt;p&gt;I think we decided to forbid accessing the same column (on the same row) multiple times for streams and LOBs (I can&apos;t find the JIRA issue right now). It may be an oversight that getBytes doesn&apos;t throw an exception in this case. The decision was based partly on the following text for the Java API documentation for java.sql.ResultSet:&lt;br/&gt;
&quot;For maximum portability, result set columns within each row should be read in left-to-right order, and each column should be read only once.&quot;&lt;br/&gt;
getString appears to have the same issue.&lt;/p&gt;

&lt;p&gt;A possible change/fix for the code above would be to cast obj to Blob and use one of the java.sql.Blob methods to obtain the bytes. One could also rewrite the code to chose the correct action based on metadata instead of the type of the object returned by getObject, I suppose.&lt;/p&gt;

&lt;p&gt;I have not looked at actually fixing the Derby positioning bug itself.&lt;/p&gt;</comment>
                            <comment id="13141336" author="pfronczak" created="Tue, 1 Nov 2011 17:11:25 +0000"  >&lt;p&gt;The problem with changing the code responsible for the data retrieval is that it is part of the SpringFramework library. Since it seems that it is opposing the JDBC API, I shall file a bug report for that.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a simple workaround - instead of using the queryForList() method, one could use the query() method and supply custom RowMapper (or RowCallbackHandler) which will read the BLOB column only once.&lt;/p&gt;

&lt;p&gt;Nevertheless, an exception from getBytes explaining what has happened would be very helpful. Right now it is not very easy to track down the cause of the problem.&lt;/p&gt;</comment>
                            <comment id="13151748" author="dagw" created="Thu, 17 Nov 2011 02:52:37 +0000"  >&lt;p&gt;I found I could reproduce the error in a simplified repro (without Spring dependencies) using the uploaded Repro.diff (diff against BLOBTest.java in the regressions suite).&lt;/p&gt;</comment>
                            <comment id="13213660" author="dagw" created="Wed, 22 Feb 2012 14:40:15 +0000"  >&lt;p&gt;Data point: I don&apos;t see this issue with the client driver.&lt;/p&gt;</comment>
                            <comment id="13224665" author="kristwaa" created="Wed, 7 Mar 2012 20:14:21 +0000"  >&lt;p&gt;The Spring Framework issue has been logged as SPR-8810 &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://jira.springsource.org/browse/SPR-8810&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jira.springsource.org/browse/SPR-8810&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13224928" author="dagw" created="Thu, 8 Mar 2012 01:55:42 +0000"  >&lt;p&gt;Unassigning myself, not actively working on this.&lt;/p&gt;</comment>
                            <comment id="13226039" author="kristwaa" created="Fri, 9 Mar 2012 12:23:54 +0000"  >&lt;p&gt;According to the JDBC specification, using getBytes on a BLOB column isn&apos;t allowed. This is stated in table B-6 and the following text:&lt;br/&gt;
&quot;&quot;&quot;&lt;br/&gt;
TABLE B-6 Type Conversions Supported by ResultSet getter Methods&lt;br/&gt;
This table shows which JDBC types may be returned by ResultSet getter methods. A&lt;br/&gt;
bold X indicates the method recommended for retrieving a JDBC type. A plain x&lt;br/&gt;
indicates for which JDBC types it is possible to use a getter method.&lt;br/&gt;
&quot;&quot;&quot;&lt;/p&gt;

&lt;p&gt;There is no x/X in the cell where getBytes and BLOB intersects.&lt;/p&gt;

&lt;p&gt;If this is correct, I will create a new JIRA to track the work on forbidding this in Derby since the title of this issue doesn&apos;t express what is changing very well. This change will most likely have consequences for some existing applications and will require a release note.&lt;/p&gt;

&lt;p&gt;The work mentioned above is probably not suitable for backporting, but as an an alternative we could use the mechanism that disallows multiple accesses of the same LOB/stream column on a single row to improve the situation on 10.8 and earlier. That means applications using only ResultSet.getBytes() on a BLOB will continue to work, whereas applications using ResultSet.get&lt;span class=&quot;error&quot;&gt;&amp;#91;Blob|BinaryStream|Object&amp;#93;&lt;/span&gt; plus getBytes will fail. Failing with an exception is preferable to data corruption/wrong results. Some applications may not see the data corruption/wrong results - I believe this will be the case if the BLOBs are below a given threshold (represented in-memory vs store stream). Based on Dag&apos;s comment this may also be the case for applications using the client driver (independent of the BLOB size).&lt;/p&gt;

&lt;p&gt;I haven&apos;t verified it, but I suspect there will be similar issues to fix for CLOB.&lt;/p&gt;

&lt;p&gt;Any opinions on my interpretation of the JDBC specification, and on the suggested improvements?&lt;/p&gt;</comment>
                            <comment id="13226103" author="chaase3" created="Fri, 9 Mar 2012 14:40:47 +0000"  >&lt;p&gt;You may also want to file a documentation issue, Kristian &amp;#8211; the following topic mentions using getBytes with a BLOB, and getString with a CLOB:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/docs/dev/ref/rrefjdbc96386.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/ref/rrefjdbc96386.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Topics elsewhere in the docs mention only the use of getBlob and getClob, fortunately.&lt;/p&gt;</comment>
                            <comment id="13226117" author="kristwaa" created="Fri, 9 Mar 2012 14:51:40 +0000"  >&lt;p&gt;Thanks, Kim!&lt;br/&gt;
I&apos;ll keep that in mind, but will hold off until we&apos;re sure we want to forbid those methods on LOB columns.&lt;/p&gt;</comment>
                            <comment id="13227366" author="knutanders" created="Mon, 12 Mar 2012 08:27:30 +0000"  >&lt;p&gt;&amp;gt; The work mentioned above is probably not suitable for backporting,&lt;br/&gt;
&amp;gt; but as an an alternative we could use the mechanism that disallows&lt;br/&gt;
&amp;gt; multiple accesses of the same LOB/stream column on a single row to&lt;br/&gt;
&amp;gt; improve the situation on 10.8 and earlier.&lt;/p&gt;

&lt;p&gt;If we take the trouble to implement this solution for 10.8 and&lt;br/&gt;
earlier, couldn&apos;t we do the same for trunk? It sounds like it fixes&lt;br/&gt;
the same problem, but with a much smaller compatibility impact.&lt;/p&gt;</comment>
                            <comment id="13228447" author="kristwaa" created="Tue, 13 Mar 2012 15:35:39 +0000"  >&lt;p&gt;I&apos;ve been talking to Lance Anderson, the JDBC spec lead, and the intention is to specify that getBytes is supported on BLOB columns in a future release/update of the JDBC specification. The same goes for getString on CLOB columns. The recommended way to access a BLOB is still through getBlob.&lt;/p&gt;

&lt;p&gt;This makes it clear that we must allow getBytes on BLOB columns, but the existing restriction we have on calling a getter only once on a LOB column will still be there.&lt;/p&gt;

&lt;p&gt;Knut, the answer to your question is definitely yes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13256738" author="kristwaa" created="Wed, 18 Apr 2012 18:39:16 +0100"  >&lt;p&gt;Attaching a first version of a test as patch 1a. &lt;/p&gt;

&lt;p&gt;A few comments:&lt;br/&gt;
 o expects getBytes on BLOB and getString on CLOB to be supported&lt;br/&gt;
 o additionally, we support getString, getAsciiStream, and getCharacterStream on BLOB (note differing behavior regarding how the raw bytes are interpreted, see JDBC implementation notes on the Derby web site)&lt;br/&gt;
 o as an exception to the rule, multiple invocations of getString/getBytes is supported as long as no other getter has been invoked previously. This works because those getters always materialize. Do we want to keep this exception to the rule as a convenience, or should we go  for consistency?&lt;br/&gt;
 o the behavior between embedded and client differs on several accounts&lt;/p&gt;</comment>
                            <comment id="13257417" author="kristwaa" created="Thu, 19 Apr 2012 11:32:43 +0100"  >&lt;p&gt;Attaching patch 1b, a slightly updated version of the test. Only naming, typos, and comments have been changed.&lt;/p&gt;</comment>
                            <comment id="13257421" author="kristwaa" created="Thu, 19 Apr 2012 11:50:11 +0100"  >&lt;p&gt;Attaching patch 2a, which implements the checks to make getBytes, getString, and getObject throw an exception when invoked on a LOB column after another getter has already has been invoked, and harmoinzes the behavior for the embedded and the client driver.&lt;/p&gt;

&lt;p&gt;As already noted, getBytes and getString currently behave differently than the rest. It is allowed to call those two getters repeatedly because they materialize the value.&lt;br/&gt;
Examples of behavior with the patch:&lt;br/&gt;
(I&apos;m using getObject, but it could be any of the other valid getters for LOBs)&lt;br/&gt;
 a) OK: getBytes - getBytes&lt;br/&gt;
 b) FAILS: getObject - getBytes&lt;br/&gt;
 c) OK: getBytes - getObject&lt;br/&gt;
 d) FAILS: getBytes - getObject - getBytes&lt;br/&gt;
 e) FAILS: getBlob - getBinaryStream&lt;/p&gt;

&lt;p&gt;The changes to lang.UpdatableResultSetTest adjust the access pattern to be compatible with the new rules/restrictions.&lt;/p&gt;

&lt;p&gt;Assuming everything else is ok, it must be decided if we want to keep the special behavior for getBytes and getString (i.e. either remove the TODOs, or modify the implementation).&lt;/p&gt;

&lt;p&gt;I&apos;ve successfully run suites.All with the patches: &lt;br/&gt;
15488 tests executed&lt;br/&gt;
  0 errors&lt;br/&gt;
  0 failures&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13258175" author="knutanders" created="Fri, 20 Apr 2012 13:13:49 +0100"  >&lt;p&gt;The new checks that are added to the getters look almost identical. Would it be possible to factor them out in a shared helper method?&lt;/p&gt;

&lt;p&gt;&amp;gt; Assuming everything else is ok, it must be decided if we want to keep the special behavior for getBytes and getString&lt;/p&gt;

&lt;p&gt;I&apos;m fine with it either way. The advantage of not having special treatment of getBytes and getString is that the behaviour is easier to explain: LOB columns can only be accessed once. But keeping the special treatment reduces the chances of breaking existing applications, and I don&apos;t see any significant downside, so I think I&apos;m leaning towards the approach you chose in the 2a patch.&lt;/p&gt;</comment>
                            <comment id="13259535" author="kristwaa" created="Mon, 23 Apr 2012 12:26:23 +0100"  >&lt;p&gt;I committed the test (patch 1b) to trunk with revision 1329186.&lt;/p&gt;

&lt;p&gt;Thank you for your opinion, Knut Anders.&lt;br/&gt;
Based on your feedback and my own opinion, I will keep the special treatment of getBytes and getString.&lt;/p&gt;

&lt;p&gt;Regarding the suggested refactoring, I will do so to more clearly document the special treatment. Note that the getters belong to two different result set implementations, so I still need two helper methods.&lt;/p&gt;</comment>
                            <comment id="13260391" author="kristwaa" created="Tue, 24 Apr 2012 10:41:48 +0100"  >&lt;p&gt;Attaching patch 2b:&lt;br/&gt;
 o ResultSet and EmbedResultSet:&lt;br/&gt;
   Adds the required checks to behave as specified (see above). Factored out method checkLOBMultiCall(int). In the client driver I added a missing check for getObject.&lt;br/&gt;
 o UpdatableResultSetTest:&lt;br/&gt;
   Made access pattern compatible with the new behavior. The test worked because it always called a getter that materialized the value first, or the value was so small that it was kept in a materialized representation.&lt;br/&gt;
 o jdbcapi/LobRsGetterTest:&lt;br/&gt;
   Renamed some methods (only actual test methods now start with &quot;test&quot;, the private ones I renamed to &quot;_test&quot;).&lt;br/&gt;
   Added some more comments, and two more tests. The tests verifies the content of LOB in various scenarios when multiple getters are invoked.&lt;br/&gt;
 o jdbcapi/_Suite:&lt;br/&gt;
   Enabled the test as part of the test suite.&lt;/p&gt;

&lt;p&gt;Patch ready for final review.&lt;br/&gt;
Tests passed on Linux and Solaris with JDK 1.6.&lt;br/&gt;
I intend to commit this patch tomorrow at the latest.&lt;/p&gt;</comment>
                            <comment id="13262431" author="kristwaa" created="Thu, 26 Apr 2012 08:27:16 +0100"  >&lt;p&gt;Committed patch 2b to trunk with revision 1330681.&lt;/p&gt;

&lt;p&gt;Unless something new comes up, I don&apos;t plan more work on this issue.&lt;/p&gt;</comment>
                            <comment id="13262472" author="kristwaa" created="Thu, 26 Apr 2012 09:41:39 +0100"  >&lt;p&gt;Attaching a first attempt at a release note.&lt;br/&gt;
It doesn&apos;t say anything about the fact that you can invoke getBytes/getString multiple times. Should it, given that one of the purposes of a release note is to determine if an upgrade will cause your application to break?&lt;/p&gt;</comment>
                            <comment id="13272769" author="dagw" created="Thu, 10 May 2012 22:19:49 +0100"  >&lt;p&gt;I suggest you omit saying anything about that (for simplicity also).&lt;/p&gt;</comment>
                            <comment id="13823392" author="knutanders" created="Fri, 15 Nov 2013 08:15:08 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update: close all resolved issues that haven&amp;#39;t had any activity the last year&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12773015">DERBY-6793</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12551627">DERBY-5696</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12501699" name="SelectBlobBug.java" size="889" author="pfronczak" created="Mon, 31 Oct 2011 22:59:34 +0000"/>
                            <attachment id="12523221" name="derby-5489-1a-test.diff" size="16871" author="kristwaa" created="Wed, 18 Apr 2012 18:39:16 +0100"/>
                            <attachment id="12523333" name="derby-5489-1b-test.diff" size="17455" author="kristwaa" created="Thu, 19 Apr 2012 11:32:43 +0100"/>
                            <attachment id="12523334" name="derby-5489-2a-fixes.diff" size="8382" author="kristwaa" created="Thu, 19 Apr 2012 11:50:11 +0100"/>
                            <attachment id="12523950" name="derby-5489-2b-fixes.diff" size="20287" author="kristwaa" created="Tue, 24 Apr 2012 10:41:48 +0100"/>
                            <attachment id="12524409" name="releaseNote.html" size="3389" author="kristwaa" created="Thu, 26 Apr 2012 09:41:38 +0100"/>
                            <attachment id="12504016" name="repro.diff" size="6796" author="dagw" created="Thu, 17 Nov 2011 02:53:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Nov 2011 10:27:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>215436</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0a53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35461</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>