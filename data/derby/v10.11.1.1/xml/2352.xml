<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:46 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2352/DERBY-2352.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2352] Assertion Failure with order by and group by expression</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2352</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Assertion failure with order by expression:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select substr(&apos;abc&apos;, 1) from t1 order by substr(&apos;abc&apos;, 1);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLVarchar) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLChar): org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;/p&gt;

&lt;p&gt;Stacktrace:&lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED col1.getClass() (class org.apache.derby.iapi.types.SQLVarchar) expected to be the same as col2.getClass() (class org.apache.derby.iapi.types.SQLChar)&lt;br/&gt;
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:149)&lt;br/&gt;
	at org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(MergeSort.java:472)&lt;br/&gt;
	at org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:106)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(SortResultSet.java:318)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:269)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:169)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:260)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:358)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1182)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:585)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:321)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:517)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:370)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:268)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:204)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:170)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:71)&lt;/p&gt;</description>
                <environment>Any</environment>
        <key id="12363077">DERBY-2352</key>
            <summary>Assertion Failure with order by and group by expression</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="yipng">Yip Ng</reporter>
                        <labels>
                    </labels>
                <created>Sat, 17 Feb 2007 09:26:03 +0000</created>
                <updated>Fri, 21 Jan 2011 17:49:47 +0000</updated>
                            <resolved>Fri, 23 Nov 2007 00:16:26 +0000</resolved>
                                    <version>10.2.2.0</version>
                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.2.1</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12473904" author="yipng" created="Sat, 17 Feb 2007 09:29:27 +0000"  >&lt;p&gt;Also fails with group by expression.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select substr(&apos;abc&apos;, 1) from t1 group by substr(&apos;abc&apos;, 1);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED col1.getClass() (class org.apache.de&lt;br/&gt;
rby.iapi.types.SQLVarchar) expected to be the same as col2.getClass() (class org&lt;br/&gt;
.apache.derby.iapi.types.SQLChar): org.apache.derby.shared.common.sanity.AssertF&lt;br/&gt;
ailure&apos;.&lt;/p&gt;</comment>
                            <comment id="12531818" author="bryanpendleton" created="Tue, 2 Oct 2007 15:51:35 +0100"  >&lt;p&gt;Is &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3094&quot; title=&quot;Grouping of expressions causes NullPointerException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3094&quot;&gt;&lt;del&gt;DERBY-3094&lt;/del&gt;&lt;/a&gt; related?&lt;/p&gt;</comment>
                            <comment id="12533932" author="bryanpendleton" created="Thu, 11 Oct 2007 03:01:47 +0100"  >&lt;p&gt;My first attempt to reproduce this failed:&lt;/p&gt;

&lt;p&gt;ij version 10.4&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:brydb;create=true&apos;;&lt;br/&gt;
ij&amp;gt; run &apos;d2352.sql&apos;;&lt;br/&gt;
ij&amp;gt; drop table d2352;&lt;br/&gt;
ERROR 42Y55: &apos;DROP TABLE&apos; cannot be performed on &apos;D2352&apos; because it does not exi&lt;br/&gt;
st.&lt;br/&gt;
ij&amp;gt; create table d2352 (c int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select substr(&apos;abc&apos;, 1) from d2352 order by substr(&apos;abc&apos;, 1);&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;</comment>
                            <comment id="12533933" author="bryanpendleton" created="Thu, 11 Oct 2007 03:04:47 +0100"  >&lt;p&gt;The group by variant did not easily reproduce, either:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select substr(&apos;abc&apos;, 1) from d2352 group by substr(&apos;abc&apos;, 1);&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;</comment>
                            <comment id="12533945" author="bryanpendleton" created="Thu, 11 Oct 2007 04:16:36 +0100"  >&lt;p&gt;Ah. For this to reproduce, table &quot;t&quot; must contain at least one row:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; insert into d2352 values (1), (2), (3);&lt;br/&gt;
3 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select substr(&apos;abc&apos;, 1) from d2352 order by substr(&apos;abc&apos;, 1);&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED col1.getClass() (class org.apache.de&lt;br/&gt;
rby.iapi.types.SQLVarchar) expected to be the same as col2.getClass() (class org&lt;br/&gt;
.apache.derby.iapi.types.SQLChar): org.apache.derby.shared.common.sanity.AssertF&lt;br/&gt;
ailure&apos;.&lt;/p&gt;</comment>
                            <comment id="12534436" author="bryanpendleton" created="Sat, 13 Oct 2007 00:03:45 +0100"  >&lt;p&gt;Here is the generated code for the &quot;projection&quot; method (e1) and the &quot;rowAllocator&quot; method (e3)&lt;br/&gt;
for the &quot;order by&quot; variant of the select statement:&lt;/p&gt;

&lt;p&gt;    public Object e1()&lt;br/&gt;
        throws StandardException, Exception&lt;/p&gt;
    {
        ConcatableDataValue concatabledatavalue = 
         getDataValueFactory().getCharDataValue(&quot;abc&quot;, null).
                  substring(getDataValueFactory().getDataValue(1, null), null, e3, 3);
        e3 = concatabledatavalue;
        e2.setColumn(1, (DataValueDescriptor)concatabledatavalue);
        ConcatableDataValue concatabledatavalue1 = 
             getDataValueFactory().getCharDataValue(&quot;abc&quot;, null).
                 substring(getDataValueFactory().getDataValue(1, null), null, e4, 3);
        e4 = concatabledatavalue1;
        e2.setColumn(2, (DataValueDescriptor)concatabledatavalue1);
        return e2;
    }

&lt;p&gt;    public Object e2()&lt;br/&gt;
        throws StandardException&lt;/p&gt;
    {
        e5.setColumn(1, getDataValueFactory().getNullChar(null));
        e5.setColumn(2, getDataValueFactory().getNullChar(null));
        return e5;
    }

&lt;p&gt;The projection method&apos;s call to getCharDataValue() constructs a SQLChar,&lt;br/&gt;
and SQLChar.substring() then returns a SQLVarchar.&lt;/p&gt;

&lt;p&gt;But the rowAllocator&apos;s getNullChar() method constructs a SQLChar.&lt;/p&gt;

&lt;p&gt;It is the mismatch between the SQLVarchar that is returned by substring,&lt;br/&gt;
and the SQLChar that is created by the rowAllocator&apos;s getNullChar, that&lt;br/&gt;
is causing the assertion to trip in the sorter.&lt;/p&gt;</comment>
                            <comment id="12534932" author="bryanpendleton" created="Mon, 15 Oct 2007 19:43:50 +0100"  >&lt;p&gt;Seems like there are 3 alternatives worth pursuing:&lt;br/&gt;
1) Turn the SQLVarchar into a SQLChar&lt;br/&gt;
2) Turn the SQLChar into a SQLVarchar&lt;br/&gt;
3) Teach the sorter that it should tolerate a mixture of SQLVarchar/SQLChar&lt;/p&gt;

&lt;p&gt;The first alternative involves modifying SQLChar.substring() so that &lt;br/&gt;
instead of returning a Varchar, it returns a Char. Perhaps the algorithm&lt;br/&gt;
could be something like: substring of a Char returns a Char; substring&lt;br/&gt;
of a Varchar returns a Varchar.&lt;/p&gt;

&lt;p&gt;The second alternative involves modifying the code that generates the&lt;br/&gt;
projection and rowAllocator methods so that the code can more accurately&lt;br/&gt;
track the datatype of the ResultColumn in the presence of expression such&lt;br/&gt;
as substring, and ensure that the proper actual data type (Varchar in this case)&lt;br/&gt;
is used when generating the template row in the rowAllocator method. It&lt;br/&gt;
looks like TernaryNode.substrBind() makes some attempts to compute the&lt;br/&gt;
resulting data type; perhaps this data type computation just isn&apos;t making it&lt;br/&gt;
properly into the REsultColumn&apos;s data type ID.&lt;/p&gt;

&lt;p&gt;The third alternative involves figuring out why MergeSort is complaining when&lt;br/&gt;
SQLVarchar != SQLChar, and whether MergeSort could be enhanced to&lt;br/&gt;
be more tolerant of mismatching types. As a start, I could try removing the&lt;br/&gt;
sanity assertion and see what problems occur farther down the road.&lt;/p&gt;

&lt;p&gt;I don&apos;t immediately see any reason to prefer one of these solutions over any other;&lt;br/&gt;
if anybody has any suggestions about which course of action seems best, please&lt;br/&gt;
let me know. Otherwise I&apos;ll probably try them each and see how much progress I make.&lt;/p&gt;</comment>
                            <comment id="12535394" author="bryanpendleton" created="Wed, 17 Oct 2007 03:02:25 +0100"  >&lt;p&gt;Attached is substringReturnsChar.diff, which modifies the substring, trim, and similar functions in SQLChar so that they no longer always return a value of type SQLVarchar, but instead return either SQLChar or SQLVarchar, depending on what type of object they are called on.&lt;/p&gt;

&lt;p&gt;That is, SQLChar.substring returns SQLChar, but SQLVarchar.substring returns SQLVarchar.&lt;/p&gt;

&lt;p&gt;With this change, the reproduction code passes.&lt;/p&gt;

&lt;p&gt;Also, with this change, derbyall and suites.All are 100% pass.&lt;/p&gt;

&lt;p&gt;I intend to follow this up with a more complete patch proposal, including various new regression tests, to allow for a more complete review. In the meantime, any feedback about the attached code change is most welcome.&lt;/p&gt;</comment>
                            <comment id="12536345" author="bryanpendleton" created="Fri, 19 Oct 2007 22:05:30 +0100"  >&lt;p&gt;Modifying SQLChar.getNewVarchar() will affect SQLChar.substring(),&lt;br/&gt;
SQLChar.trim(), and SQLChar.ansiTrim().&lt;/p&gt;

&lt;p&gt;I&apos;m not clear on the difference between trim() and ansiTrim(). May have to set&lt;br/&gt;
breakpoints to try to figure out which one is called by what SQL. I think that&lt;br/&gt;
the difference may involve LTRIM vs TRIM LEADING and RTRIM vs&lt;br/&gt;
TRIM TRAILING&lt;/p&gt;

&lt;p&gt;I see that in our docs, we state explicitly that TRIM and SUBSTR return&lt;br/&gt;
a value of type VARCHAR. For example,&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/10.3/ref/rreftrimfunc.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.3/ref/rreftrimfunc.html&lt;/a&gt;&lt;br/&gt;
So if we change this we&apos;ll need to change some docs.&lt;/p&gt;

&lt;p&gt;The docs also talk about how these functions work with CLOB types, which&lt;br/&gt;
indicates that any complete patch built on substringReturnsChar.diff would&lt;br/&gt;
need to have tests that include CLOB.&lt;/p&gt;

&lt;p&gt;So, to turn substringReturnsChar.diff into a complete patch, I need to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;figure out exactly what SQL functions cause us to arrive at the&lt;br/&gt;
   SQLChar methods &apos;substring&apos;, &apos;trim&apos;, and &apos;ansiTrim&apos;.&lt;/li&gt;
	&lt;li&gt;write tests which use those SQL functions in both ORDER BY and&lt;br/&gt;
   GROUP BY expressions&lt;/li&gt;
	&lt;li&gt;ensure that those tests cover CHAR, VARCHAR, LONG VARCHAR,&lt;br/&gt;
   CHAR FOR BIT DATA, VARCHAR FOR BIT DATA, &lt;br/&gt;
   LONG VARCHAR FOR BIT DATA, BLOB, and CLOB data types.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12536899" author="bryanpendleton" created="Tue, 23 Oct 2007 04:53:26 +0100"  >&lt;p&gt;A naive attempt to use other data types in the repro script via CAST expressions is not so successful:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select substr( cast (&apos;abc&apos; as long varchar), 1) from d2352 order by substr(cast (&apos;abc&apos; as long varchar), 1);&lt;br/&gt;
ERROR X0X67: Columns of type &apos;LONG VARCHAR&apos; may not be used in CREATE INDEX, ORDER BY, GROUP BY, UNION, INTERSECT, EXCEPT or DISTINCT statements because comparisons are not supported for that type.&lt;br/&gt;
ij&amp;gt; select substr( cast (&apos;abc&apos; as char for bit data), 1) from d2352 order by substr( cast (&apos;abc&apos; as char for bit data), 1);&lt;br/&gt;
ERROR 42846: Cannot convert types &apos;CHAR&apos; to &apos;CHAR () FOR BIT DATA&apos;.&lt;br/&gt;
ij&amp;gt; select substr( cast (&apos;abc&apos; as clob), 1) from d2352 order by substr( cast (&apos;abc&apos; as clob), 1);&lt;br/&gt;
ERROR X0X67: Columns of type &apos;CLOB&apos; may not be used in CREATE INDEX, ORDER BY, GROUP BY, UNION, INTERSECT, EXCEPT or DISTINCT statements because comparisons are not supported for that type.&lt;/p&gt;

&lt;p&gt;Perhaps I can still invoke substring, trim, and ansiTrim on these other data types, just not in the ORDER BY or GROUP BY clauses.&lt;/p&gt;</comment>
                            <comment id="12536900" author="bryanpendleton" created="Tue, 23 Oct 2007 05:07:51 +0100"  >&lt;p&gt;LTRIM and TRIM (TRAILING) don&apos;t obviously suffer from the same problem as SUBSTR:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:brydb&apos;;&lt;br/&gt;
ij(CONNECTION1)&amp;gt; select ltrim(&apos;abc&apos;) from d2352 order by ltrim(&apos;abc&apos;);&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;abc&lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij(CONNECTION1)&amp;gt; select trim(trailing &apos; &apos; from &apos;abc&apos;) from d2352 order by trim(trailing &apos; &apos; from &apos;abc&apos;);&lt;br/&gt;
1&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;abc&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;</comment>
                            <comment id="12543301" author="bryanpendleton" created="Sat, 17 Nov 2007 19:08:10 +0000"  >&lt;p&gt;Here is the generated projection (e1) and rowAllocator (e2) code for&lt;/p&gt;

&lt;p&gt;    select ltrim(&apos;abcd&apos;) from d2352 order by trim(&apos;abcd&apos;);&lt;/p&gt;


&lt;p&gt;    public Object e1()&lt;br/&gt;
        throws StandardException, Exception&lt;/p&gt;
    {
        StringDataValue stringdatavalue = getDataValueFactory().getCharDataValue(&quot;abcd&quot;, null).
                         ansiTrim(2, getDataValueFactory().getCharDataValue(&quot; &quot;, null), e3);
        e3 = stringdatavalue;
        e2.setColumn(1, (DataValueDescriptor)stringdatavalue);
        StringDataValue stringdatavalue1 = getDataValueFactory().getCharDataValue(&quot;abcd&quot;, null).
                         ansiTrim(2, getDataValueFactory().getCharDataValue(&quot; &quot;, null), e4);
        e4 = stringdatavalue1;
        e2.setColumn(2, (DataValueDescriptor)stringdatavalue1);
        return e2;
    }

&lt;p&gt;   public Object e2()&lt;br/&gt;
     throws StandardException&lt;/p&gt;
 {
     e5.setColumn(1, getDataValueFactory().getNullVarchar(null));
     e5.setColumn(2, getDataValueFactory().getNullVarchar(null));
     return e5;
 }

&lt;p&gt;Note that the generated projection code calls SQLChar.ansiTrim, and also note&lt;br/&gt;
that the rowAllocator allocates columns of Varchar type, not of Char type.&lt;/p&gt;

&lt;p&gt;I believe this explains why the CHAR vs VARCHAR assertion does not arise&lt;br/&gt;
in the cases of LTRIM and TRIM(TRAILING), but only for SUBSTR.&lt;/p&gt;</comment>
                            <comment id="12543307" author="bryanpendleton" created="Sat, 17 Nov 2007 19:53:09 +0000"  >&lt;p&gt;Perhaps there are no longer any code paths which lead to SQLChar.trim,&lt;br/&gt;
but instead the code always goes to SQLChar.ansiTrim.&lt;/p&gt;

&lt;p&gt;I&apos;ll try looking at code coverage results to see if they indicate that trim() is ever called.&lt;/p&gt;
</comment>
                            <comment id="12543312" author="bryanpendleton" created="Sat, 17 Nov 2007 21:14:25 +0000"  >&lt;p&gt;According to fairly recent code coverage results, trim() is not called at all:&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~fuzzylogic/codecoverage/579033/_files/181.html#69&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~fuzzylogic/codecoverage/579033/_files/181.html#69&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I commented out the trim() method in SQLChar and in StringDataValue and&lt;br/&gt;
I got no compilation errors in the rest of the system, so perhaps SQLChar.trim&lt;br/&gt;
can be entirely removed. I&apos;ll log that as a separate JIRA for some future consideration.&lt;/p&gt;

&lt;p&gt;In the meantime, I think I can proceed with putting together some test cases and&lt;br/&gt;
making a complete patch proposal out of the already-proposed code change.&lt;/p&gt;</comment>
                            <comment id="12543386" author="bryanpendleton" created="Sun, 18 Nov 2007 18:10:47 +0000"  >&lt;p&gt;Attached is substrBind.diff, an alternate idea for a patch.&lt;/p&gt;

&lt;p&gt;I found myself interested in why the rowAllocator method for&lt;/p&gt;

&lt;p&gt;   select substr(&apos;abc&apos;, 1) from d2352 order by substr(&apos;abc&apos;, 1); &lt;/p&gt;

&lt;p&gt;is different from the rowAllocator method that is generated for&lt;/p&gt;

&lt;p&gt;   select ltrim(&apos;abc&apos;) from d2352 order by ltrim(&apos;abc&apos;); &lt;/p&gt;

&lt;p&gt;The SUBSTR version generates &lt;/p&gt;

&lt;p&gt;     e5.setColumn(1, getDataValueFactory().getNullChar(null)); &lt;/p&gt;

&lt;p&gt;while the LTRIM version generates&lt;/p&gt;

&lt;p&gt;     e5.setColumn(1, getDataValueFactory().getNullVarchar(null)); &lt;/p&gt;

&lt;p&gt;The generation activity happens in ResultColumnList.generateHolderMethod,&lt;br/&gt;
so I stepped through that code to see what was different in the two cases.&lt;br/&gt;
ResultColumnList.generateHolderMethod() calls ResultColumn.generateHolder()&lt;br/&gt;
for each result column, and that code in turn generates a null of the&lt;br/&gt;
appropriate type, where the type is given by the DataTypeDescriptor in&lt;br/&gt;
the ResultColumn, and controls the behavior of CharTypeCompiler.nullMethodName.&lt;/p&gt;

&lt;p&gt;During bind processing, ResultColumn.bindResultColumnToExpression() sets&lt;br/&gt;
the ResultColumn type to the type of its expression, which in both cases&lt;br/&gt;
is a TernaryOperatorNode.&lt;/p&gt;

&lt;p&gt;The TernaryOperatorNode&apos;s type is determined during bind processing. For&lt;br/&gt;
the TRIM expression, TernaryOperatorNode.trimBind() is called, and it&lt;br/&gt;
chooses a VARCHAR type except in some cases involving BLOBs.&lt;/p&gt;

&lt;p&gt;   TypeId	resultType = TypeId.getBuiltInTypeId(Types.VARCHAR);&lt;/p&gt;

&lt;p&gt;For the SUBSTR expression, TernaryOperatorNode.substrBind() is called, and&lt;br/&gt;
it has a completely different set of logic for choosing the result type,&lt;br/&gt;
which is driven by the type of the value on which we&apos;re calling SUBSTR:&lt;/p&gt;

&lt;p&gt;   resultType = receiverType = receiver.getTypeId();&lt;/p&gt;

&lt;p&gt;In the case of SUBSTR(&apos;abc&apos;, 1), &quot;receiver&quot; is a CharConstantNode, and its&lt;br/&gt;
typeId is a CHAR type, so the resultType is set to CHAR, not VARCHAR.&lt;/p&gt;

&lt;p&gt;The technique of substrBind() &amp;#8211; using the receiver&apos;s type &amp;#8211; also handles&lt;br/&gt;
CLOB/BLOB types, but it has the result of choosing CHAR in cases where&lt;br/&gt;
trimBind() chooses VARCHAR instead.&lt;/p&gt;

&lt;p&gt;So it seems that an alternate solution for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2352&quot; title=&quot;Assertion Failure with order by and group by expression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2352&quot;&gt;&lt;del&gt;DERBY-2352&lt;/del&gt;&lt;/a&gt; could be to modify&lt;br/&gt;
TernaryOperatorNode.substrBind() so that it chooses the result type using&lt;br/&gt;
a set of rules more like those used by TernaryOperatorNode.trimBind().&lt;br/&gt;
The attached &apos;substrBind.diff&apos; implements those alternate rules, and the&lt;br/&gt;
resulting code successfully processes the repro script, and the generated&lt;br/&gt;
row allocator method now matches the code generated in the TRIM cases.&lt;/p&gt;

&lt;p&gt;I think this is a cleaner approach than &apos;substringReturnsChar.diff&apos;, because&lt;br/&gt;
I think that the intent of the system is for SUBSTR to return a VARCHAR&lt;br/&gt;
type. Feedback about whether one change seems better or worse, or any other&lt;br/&gt;
feedback on these topics, would be most welcome.&lt;/p&gt;
</comment>
                            <comment id="12543463" author="bryanpendleton" created="Mon, 19 Nov 2007 05:23:02 +0000"  >&lt;p&gt;Attached is &apos;substrBindWithTests.diff&apos;, which includes some simple&lt;br/&gt;
tests that verify that substrBind now works correctly.&lt;/p&gt;

&lt;p&gt;I believe this patch is ready for review. Please let me know what you think.&lt;/p&gt;

&lt;p&gt;derbyall and suites.All were clean.&lt;/p&gt;</comment>
                            <comment id="12543495" author="thomanie" created="Mon, 19 Nov 2007 08:50:57 +0000"  >&lt;p&gt;I&apos;m giving the the latest patch a spin with the tests now.&lt;/p&gt;

&lt;p&gt;Are the &quot;missing&quot; spaces in the &lt;br/&gt;
   ... trim(trailing&apos; &apos; ...&lt;br/&gt;
of the last two select statements in &apos;orderby.out.original&apos; intentional? Seems you have mixed using and not using a space - just curious.&lt;/p&gt;

&lt;p&gt;To be really picky, there&apos;s an extra blank line (@839) introduced in TernaryOperatorNode.java by substrBindWithTests.diff.&lt;/p&gt;

&lt;p&gt;Otherwise the patch looks sane to me.&lt;/p&gt;</comment>
                            <comment id="12543540" author="thomanie" created="Mon, 19 Nov 2007 12:28:19 +0000"  >&lt;p&gt;Since you will touch TernaryOperatorNode.java anyway, there&apos;s&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;an unused import of &apos;org.apache.derby.iapi.sql.dictionary.DataDictionary&apos;&lt;/li&gt;
	&lt;li&gt;an unused import of &apos;org.apache.derby.iapi.types.NumberDataValue&apos;&lt;/li&gt;
	&lt;li&gt;an unused import of &apos;org.apache.derby.iapi.store.access.Qualifier&apos;&lt;/li&gt;
	&lt;li&gt;an import from the same package of &apos;org.apache.derby.impl.sql.compile.ExpressionClassBuilder&apos;&lt;br/&gt;
These could possibly be cleaned up?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both suites.All and derbyAll ran successfully for me as well.&lt;/p&gt;</comment>
                            <comment id="12543610" author="bryanpendleton" created="Mon, 19 Nov 2007 16:41:36 +0000"  >&lt;p&gt;Thanks Thomas for the feedback and testing and suggestions! I&apos;ll try to clean these&lt;br/&gt;
up when I commit the change.&lt;/p&gt;</comment>
                            <comment id="12543718" author="bryanpendleton" created="Mon, 19 Nov 2007 22:49:35 +0000"  >&lt;p&gt;Attached &apos;substrBindWithTestsUpdated.diff&apos; incorporates the feedback &lt;br/&gt;
from Thomas. Re-testing was uneventful.&lt;/p&gt;

&lt;p&gt;I intend to commit this change to the trunk fairly soon.&lt;/p&gt;</comment>
                            <comment id="12543805" author="thomanie" created="Tue, 20 Nov 2007 07:57:24 +0000"  >&lt;p&gt;&apos;substrBindWithTestsUpdated.diff&apos; looks good. &lt;/p&gt;

&lt;p&gt;+1 to commit&lt;/p&gt;</comment>
                            <comment id="12544062" author="bryanpendleton" created="Tue, 20 Nov 2007 20:55:55 +0000"  >&lt;p&gt;Thanks Thomas! I committed substrBindWithTestsUpdated.diff to the&lt;br/&gt;
trunk as revision 596824. I will investigate merging this patch to 10.3,&lt;br/&gt;
hopefully by Nov 25 so that it can make the 10.3.2 release.&lt;/p&gt;</comment>
                            <comment id="12544902" author="bryanpendleton" created="Fri, 23 Nov 2007 00:16:26 +0000"  >&lt;p&gt;Merged the change to the 10.3 branch and submitted as revision 597516.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12369748" name="substrBind.diff" size="1567" author="bryanpendleton" created="Sun, 18 Nov 2007 18:10:47 +0000"/>
                            <attachment id="12369762" name="substrBindWithTests.diff" size="4692" author="bryanpendleton" created="Mon, 19 Nov 2007 05:23:02 +0000"/>
                            <attachment id="12369827" name="substrBindWithTestsUpdated.diff" size="5686" author="bryanpendleton" created="Mon, 19 Nov 2007 22:49:35 +0000"/>
                            <attachment id="12367844" name="substringReturnsChar.diff" size="826" author="bryanpendleton" created="Wed, 17 Oct 2007 03:02:24 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Oct 2007 14:51:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23014</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0mnj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37488</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>