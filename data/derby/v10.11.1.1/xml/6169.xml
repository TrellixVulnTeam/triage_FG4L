<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:16:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6169/DERBY-6169.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6169] Reduce visibility of classes and methods under impl/sql</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6169</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;My IDE shows many warnings in the classes under impl/sql because they are public and may make parts of the internal state more visible than necessary. I&apos;d like to reduce the visibility of classes and methods, if possible, to make it clearer to IDEs and tools that perform static analysis that the code is only accessed from the same package, and reduce some of the noise from the tools.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12642044">DERBY-6169</key>
            <summary>Reduce visibility of classes and methods under impl/sql</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Apr 2013 15:28:57 +0100</created>
                <updated>Mon, 17 Jun 2013 10:27:19 +0100</updated>
                            <resolved>Mon, 13 May 2013 13:19:47 +0100</resolved>
                                    <version>10.11.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13628979" author="knutanders" created="Thu, 11 Apr 2013 15:38:39 +0100"  >&lt;p&gt;Attaching a patch that reduces the visibility in some classes in the impl.sql.execute package.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;some classes that are not used outside of the package are made package protected&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in some classes that need to be public because they are Formatable, the constructor could be made package protected&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a new method to the TriggerExecutionContext interface so that caller could access it without casting the context instance to the internal implementation class, and made InternalTriggerExecutionContext package protected&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed some unused fields in DeleteCascadeResultSet&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13629920" author="knutanders" created="Fri, 12 Apr 2013 09:22:29 +0100"  >&lt;p&gt;Committed revision 1467201.&lt;/p&gt;</comment>
                            <comment id="13630003" author="knutanders" created="Fri, 12 Apr 2013 13:03:58 +0100"  >&lt;p&gt;Patch derby-6169-02-a.diff silences some warnings under impl/sql/compile.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It reduces the visibility of some classes, fields and methods that are only accessed from within the same package.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It removes some unused methods. One of the removed methods, ConstraintDefinitionNode.setCheckColumnReferences(int[]) is actually called once, but the variable it sets is never used, so I removed both the method and the call to it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;UnaryOperatorNode&apos;s init() method was changed to expect a scalar rather than an array in the third parameter. FindBugs didn&apos;t quite like the possibility of setting an array field directly via a public method and warned about this (because arrays are mutable). The array always contained a single element, so it could just as well be a scalar.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13631050" author="dagw" created="Sat, 13 Apr 2013 15:00:32 +0100"  >&lt;p&gt;derby-6169-01-a look good to me. +1&lt;/p&gt;</comment>
                            <comment id="13632635" author="knutanders" created="Tue, 16 Apr 2013 08:07:52 +0100"  >&lt;p&gt;Thanks, Dag.&lt;/p&gt;

&lt;p&gt;I&apos;ve also committed the 02-a patch with revision 1468317.&lt;/p&gt;</comment>
                            <comment id="13636372" author="knutanders" created="Fri, 19 Apr 2013 14:41:46 +0100"  >&lt;p&gt;Attaching derby-6169-03-a.diff which improves the encapsulation of the&lt;br/&gt;
targetColumns and updateColumns fields in the CursorInfo and&lt;br/&gt;
GenericPreparedStatement classes.&lt;/p&gt;

&lt;p&gt;The targetColumns field was never actually used for anything, so the&lt;br/&gt;
patch removes it and a lot of code that was used for building up the&lt;br/&gt;
data structure.&lt;/p&gt;

&lt;p&gt;The updateColumns field was only used to check whether there were any&lt;br/&gt;
update columns and to check if a specific column could be updated. To&lt;br/&gt;
prevent exposing the internal, mutable array through the public&lt;br/&gt;
getUpdateColumns() method, the patch replaces that method with two&lt;br/&gt;
more specific methods that hide the internal data structure:&lt;br/&gt;
hasUpdateColumns() and isUpdateColumn(String)&lt;/p&gt;

&lt;p&gt;The patch also changes the type of CursorInfo.updateColumns from&lt;br/&gt;
String[] to List, which has the following advantages:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CursorNode already has this field as a List, so we can remove some&lt;br/&gt;
  code for converting it to String[]&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Code that manually searches the array can be replaced with a call to&lt;br/&gt;
  List.contains()&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Debug code in CursorInfo.toString() can be simplified by using&lt;br/&gt;
  List.toString() instead of manually converting the array to a&lt;br/&gt;
  readable string&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ArrayUtil.readStringArray(), which the patch started using in&lt;br/&gt;
  CursorInfo.readExternal(), was changed so that it didn&apos;t have to&lt;br/&gt;
  create an intermediate Object array&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;QueryTreeNode.getCursorInfo() was moved to StatementNode, since it&apos;s&lt;br/&gt;
  only ever called on nodes whose type is a child of Statement node&lt;br/&gt;
  (at least after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2096&quot; title=&quot;Change the Parser.parserStatement() to return the more specific StatementNode instead of QueryTreeNode.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2096&quot;&gt;&lt;del&gt;DERBY-2096&lt;/del&gt;&lt;/a&gt;, and I believe that it was just an&lt;br/&gt;
  oversight that this method was left in QueryTreeNode)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch removes more code than it adds. According to diffstat:&lt;br/&gt;
 11 files changed, 66 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 263 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13637971" author="knutanders" created="Mon, 22 Apr 2013 13:40:16 +0100"  >&lt;p&gt;Committed 03-a to trunk with revision 1470478.&lt;/p&gt;</comment>
                            <comment id="13639077" author="knutanders" created="Tue, 23 Apr 2013 15:03:14 +0100"  >&lt;p&gt;Attaching derby-6169-04-a.diff which improves the encapsulation of the savedObjects field in GenericPreparedStatement.&lt;/p&gt;

&lt;p&gt;The field is exposed through the public method getSavedObjects(), and since it&apos;s an array, the caller may modify it and change the state directly. And, in fact, VTIResultSet does exactly that during execution, which is a bit ugly. It does that in order to lazily initialize one of the saved objects. And when performing the lazy initialization, it also uses the broken double-checked locking idiom, which should be avoided.&lt;/p&gt;

&lt;p&gt;The patch cleans up this usage by removing the lazy initialization code in VTIResultSet. Instead, it ensures that FromVTI creates a proper instance of the object so that lazy initialization is not needed. Also, it makes getSavedObjects() return a read-only view of the internal array (added helper method for this in ArrayUtil), so that no other callers are tempted to try the same.&lt;/p&gt;

&lt;p&gt;In IndexRowToBaseRowResultSet, the call to getSavedObjects() is replaced with calls to getSavedObject(int) to make it retrieve only the objects it is interested in, rather than the full array.&lt;/p&gt;

&lt;p&gt;When I ran the full tests, I saw one unrelated failure logged as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6196&quot; title=&quot;ArrayIndexOutOfBoundsException in SURQueryMixTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6196&quot;&gt;&lt;del&gt;DERBY-6196&lt;/del&gt;&lt;/a&gt;. All tests passed when I reran them.&lt;/p&gt;</comment>
                            <comment id="13640296" author="knutanders" created="Wed, 24 Apr 2013 10:43:23 +0100"  >&lt;p&gt;Committed the 04 patch with revision 1471331.&lt;/p&gt;</comment>
                            <comment id="13640380" author="knutanders" created="Wed, 24 Apr 2013 13:23:48 +0100"  >&lt;p&gt;Attaching derby-6169-05-a.diff which removes some unused methods and makes DDColumnDependableFinder&apos;s constructor package private.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;

&lt;p&gt;Committed revision 1471382.&lt;/p&gt;</comment>
                            <comment id="13642755" author="knutanders" created="Fri, 26 Apr 2013 12:37:00 +0100"  >&lt;p&gt;Attaching derby-6169-06-a.diff which makes the following changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reduce the visibility of all classes generated from sqlgrammar.jj from public to package, since they are never accessed from outside the impl.sql.compile package, and never should be.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove the getParameterTypes() method from the CompilerContext interface, since it is never called from outside of the impl.sql.compile package and doesn&apos;t have to be public. The implementation of the method in CompilerContextImpl has been made package protected.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch (except some upgrade test failures also seen in the latest nightly tests on trunk).&lt;/p&gt;</comment>
                            <comment id="13642838" author="knutanders" created="Fri, 26 Apr 2013 14:27:36 +0100"  >&lt;p&gt;The 06-a patch causes a javadoc warning because there is still a reference to the removed interface method. Uploading an updated patch, derby-6169-06-b.diff, which fixes the javadoc.&lt;/p&gt;</comment>
                            <comment id="13644353" author="knutanders" created="Mon, 29 Apr 2013 09:21:35 +0100"  >&lt;p&gt;Committed the 06-a patch to trunk with revision 1476915.&lt;/p&gt;</comment>
                            <comment id="13644364" author="knutanders" created="Mon, 29 Apr 2013 09:36:03 +0100"  >&lt;p&gt;derby-6169-07-a.diff improves the encapsulation of the array of ProviderInfo objects returned by CreateViewNode.getProviderInfo().&lt;/p&gt;

&lt;p&gt;The getProviderInfo() method has to be public because it is used outside of the impl.sql.compile package in which CreateViewNode lives. Instead of reducing the visibility of the method, the patch makes getProviderInfo() return an immutable list view of the array, so that callers cannot accidentally change the internal array. Since this method is currently only called while invalidating a view, I don&apos;t think there are any performance concerns with adding a thin wrapper around the array.&lt;/p&gt;

&lt;p&gt;The patch also reduces the visibility of all fields in CreateViewNode and BasicProviderInfo to private, and BasicProviderInfo&apos;s constructor to package private, in order to further protect the internal state of these classes.&lt;/p&gt;

&lt;p&gt;All tests passed with the patch.&lt;/p&gt;</comment>
                            <comment id="13644386" author="knutanders" created="Mon, 29 Apr 2013 10:25:51 +0100"  >&lt;p&gt;Attaching derby-6169-08-a.diff which removes some unused code.&lt;/p&gt;

&lt;p&gt;The methods wasColumnModified(String) and wasColumnModified(int) in the TriggerExecutionContext interface are never called. By removing these methods, and their implementations in InternalTriggerExecutionContext, fields that hold arrays of modified column numbers and column names in InternalTriggerExecutionContext and TriggerInfo also become unused, and so do many method parameters for passing the unused arrays between them.&lt;/p&gt;

&lt;p&gt;The patch removes these unused fields, methods and parameters. Since TriggerInfo implements Formatable and must be readable across Derby versions, the readExternal() and writeExternal() methods still need to have logic for reading and writing the fields, but now the actual values are discarded. I checked out the 10.0 sources and it looked like the fields were not used even back then, so I don&apos;t believe any old versions will be surprised and fail if they see a TriggerInfo instance with empty values instead of the actual arrays. Also, no problems were revealed by the upgrade tests.&lt;/p&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13645286" author="knutanders" created="Tue, 30 Apr 2013 06:35:48 +0100"  >&lt;p&gt;Committed derby-6169-07-a.diff to trunk with revision 1477476.&lt;br/&gt;
Committed derby-6169-08-a.diff to trunk with revision 1477477.&lt;/p&gt;</comment>
                            <comment id="13645352" author="knutanders" created="Tue, 30 Apr 2013 08:38:38 +0100"  >&lt;p&gt;Attaching derby-6169-09-a.diff which touches some classes under impl.sql.execute that are used to pass information between impl.sql.compile and impl.sql.execute. They are created by impl.sql.compile code, so their constructors need to stay public, but their fields are typically only accessed by impl.sql.execute code, so they don&apos;t need to be public, like many of them currently are.&lt;/p&gt;

&lt;p&gt;The patch reduces the visibility of the fields in these classes to private or package. (One field actually needed to be accessed outside of the package, and a public accessor was added and the field was made non-public.) Also, a couple of accessor methods were changed from public to package.&lt;/p&gt;

&lt;p&gt;Additionally, the public constructors were changed to create defensive copies of mutable arrays so that they cannot be modified directly by code in other packages. The copying does impose a small overhead. However, since these constructors are only called during compilation of CREATE TABLE, ALTER TABLE, GRANT and REVOKE, that cost should be negligible and probably worth the improved protection of the internal state of these classes.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13645543" author="knutanders" created="Tue, 30 Apr 2013 13:54:33 +0100"  >&lt;p&gt;I think the 07-a patch introduced a bug in CreateViewNode.getProviderInfo() so that it now returns the wrong field. This did not get caught by the regression tests because there is only one caller (BasicDependencyManager), and it never actually calls the method as part of the tests, according to the test coverage results. I&apos;ll post a patch that fixes the bug, and I&apos;ll also see if I can add a test case that exercises this code.&lt;/p&gt;</comment>
                            <comment id="13645625" author="knutanders" created="Tue, 30 Apr 2013 15:34:23 +0100"  >&lt;p&gt;I haven&apos;t been able to come up with a test case that exercises the (now buggy) getProviderInfo() method yet. A comment in BasicDependencyManager indicates that it is only called if the view was created in a &quot;previous version of server which doesn&apos;t support column dependency&quot;. That comment is also present in the 10.0 code line, so I think it is very likely that it is part of some pre-Derby upgrade logic that is not needed anymore.&lt;/p&gt;</comment>
                            <comment id="13647368" author="knutanders" created="Thu, 2 May 2013 08:47:14 +0100"  >&lt;p&gt;I&apos;ve committed derby-6169-09-a.diff to trunk with revision 1478295.&lt;/p&gt;</comment>
                            <comment id="13647469" author="knutanders" created="Thu, 2 May 2013 13:29:27 +0100"  >&lt;p&gt;Attaching derby-6169-10-a.diff which fixes the mistake from the 07-a patch by removing the presumably dead code.&lt;/p&gt;

&lt;p&gt;The patch removes both CreateViewNode.getProviderInfo() and the code that calls it in BasicDependencyManager.coreInvalidateFor(). An assert has been placed where the dead code used to be, and it will be triggered if that code path is ever taken. I have also updated comments to reflect that this code path is (believed to be) unreachable in all versions of Derby. I haven&apos;t been able to convince myself 100%, but I&apos;m fairly confident that it&apos;s unreachable.&lt;/p&gt;

&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13649737" author="knutanders" created="Mon, 6 May 2013 14:19:23 +0100"  >&lt;p&gt;Committed derby-6169-10-a.diff to trunk with revision 1479562.&lt;/p&gt;</comment>
                            <comment id="13650754" author="knutanders" created="Tue, 7 May 2013 13:08:44 +0100"  >&lt;p&gt;There are many methods with public or protected visibility that reference package-private classes. Since calling these methods from other packages does not make much sense, they should not be visible outside the package. derby-6169-11-a.diff reduces the visibility of some of these methods:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;QueryTreeNode.generate()&lt;/li&gt;
	&lt;li&gt;QueryTreeNode.getNullNode()&lt;/li&gt;
	&lt;li&gt;ResultSetNode.bindResultColumns()&lt;/li&gt;
	&lt;li&gt;ResultSetNode.generateNormalizationResultSet()&lt;/li&gt;
	&lt;li&gt;ResultSetNode.generateResultSet()&lt;/li&gt;
	&lt;li&gt;ResultSetNode.getFromTableByName()&lt;/li&gt;
	&lt;li&gt;ValueNode.generateExpression()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As well as all methods overriding the ones mentioned above.&lt;/p&gt;

&lt;p&gt;The patch also removes the unused ValueNode.generateFilter() method, which exposes the package-private class ExpressionClassBuilder in its parameter list.&lt;/p&gt;

&lt;p&gt;All the regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13651718" author="knutanders" created="Wed, 8 May 2013 09:58:55 +0100"  >&lt;p&gt;Committed derby-6169-11-a.diff to trunk with revision 1480187.&lt;/p&gt;</comment>
                            <comment id="13651842" author="knutanders" created="Wed, 8 May 2013 13:27:50 +0100"  >&lt;p&gt;Attaching derby-6169-12-a.diff which reduces the visibility of more methods and fields in impl/sql/compile that expose package-private classes outside the package.&lt;/p&gt;

&lt;p&gt;The patch also removes the unused DeleteNode.fkInfo field and the unused ResultColumn.generateHolder() method.&lt;/p&gt;

&lt;p&gt;All tests ran cleanly.&lt;/p&gt;</comment>
                            <comment id="13653646" author="knutanders" created="Fri, 10 May 2013 09:56:34 +0100"  >&lt;p&gt;Committed derby-6169-12-a.diff to trunk with revision 1480941.&lt;/p&gt;</comment>
                            <comment id="13655837" author="knutanders" created="Mon, 13 May 2013 08:58:56 +0100"  >&lt;p&gt;Attaching derby-6169-13-a.diff which cleans up the last set of &quot;Exporting non-public type through public API&quot; warnings I see in the impl/sql subtree.&lt;/p&gt;

&lt;p&gt;The patch reduces the visibility of the fields and methods to package or private if possible. Some of them were actually not used, and those fields and methods were removed.&lt;/p&gt;

&lt;p&gt;Some methods had to stay public because they were interface methods. The patch changes the signatures of these methods to use public interfaces instead of the non-public types. Specifically, the signatures of some methods in the RelationalOperator interface were changed to use Optimizable instead of FromTable and ExpressionClassBuilderInterface instead of ExpressionClassBuilder.&lt;/p&gt;

&lt;p&gt;All regression tests passed.&lt;/p&gt;</comment>
                            <comment id="13655922" author="knutanders" created="Mon, 13 May 2013 13:19:47 +0100"  >&lt;p&gt;Committed derby-6169-13-a.diff to trunk with revision 1481816.&lt;/p&gt;

&lt;p&gt;I don&apos;t plan any more changes. Marking the issue as resolved.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12578220" name="derby-6169-01-a.diff" size="11913" author="knutanders" created="Thu, 11 Apr 2013 15:38:39 +0100"/>
                            <attachment id="12578408" name="derby-6169-02-a.diff" size="17781" author="knutanders" created="Fri, 12 Apr 2013 13:03:58 +0100"/>
                            <attachment id="12579539" name="derby-6169-03-a.diff" size="21507" author="knutanders" created="Fri, 19 Apr 2013 14:41:46 +0100"/>
                            <attachment id="12580049" name="derby-6169-04-a.diff" size="12078" author="knutanders" created="Tue, 23 Apr 2013 15:03:14 +0100"/>
                            <attachment id="12580273" name="derby-6169-05-a.diff" size="3574" author="knutanders" created="Wed, 24 Apr 2013 13:23:48 +0100"/>
                            <attachment id="12580687" name="derby-6169-06-a.diff" size="5975" author="knutanders" created="Fri, 26 Apr 2013 12:37:00 +0100"/>
                            <attachment id="12580690" name="derby-6169-06-b.diff" size="6048" author="knutanders" created="Fri, 26 Apr 2013 14:27:36 +0100"/>
                            <attachment id="12580951" name="derby-6169-07-a.diff" size="5266" author="knutanders" created="Mon, 29 Apr 2013 09:36:03 +0100"/>
                            <attachment id="12580956" name="derby-6169-08-a.diff" size="21200" author="knutanders" created="Mon, 29 Apr 2013 10:25:51 +0100"/>
                            <attachment id="12581128" name="derby-6169-09-a.diff" size="12428" author="knutanders" created="Tue, 30 Apr 2013 08:38:38 +0100"/>
                            <attachment id="12581512" name="derby-6169-10-a.diff" size="7815" author="knutanders" created="Thu, 2 May 2013 13:29:27 +0100"/>
                            <attachment id="12582080" name="derby-6169-11-a.diff" size="60603" author="knutanders" created="Tue, 7 May 2013 13:08:44 +0100"/>
                            <attachment id="12582286" name="derby-6169-12-a.diff" size="41127" author="knutanders" created="Wed, 8 May 2013 13:27:50 +0100"/>
                            <attachment id="12582899" name="derby-6169-13-a.diff" size="28805" author="knutanders" created="Mon, 13 May 2013 08:58:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 13 Apr 2013 14:00:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>322458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzdhhz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>322803</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>