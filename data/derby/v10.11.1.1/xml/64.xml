<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-64/DERBY-64.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-64] Create a table with a query</title>
                <link>https://issues.apache.org/jira/browse/DERBY-64</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I suggest to implement a SQL statement to create and fill a table with a query, without having to write the columns definition.&lt;/p&gt;

&lt;p&gt;e.g.:&lt;/p&gt;

&lt;p&gt; CREATE TABLE new_table AS SELECT ...;&lt;/p&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;p&gt; SELECT ... INTO new_table FROM ...;&lt;/p&gt;</description>
                <environment></environment>
        <key id="28326">DERBY-64</key>
            <summary>Create a table with a query</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="james.f.adams">James F. Adams</assignee>
                                    <reporter username="chdh@inventec.ch">Christian d&apos;Heureuse</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Nov 2004 21:30:04 +0000</created>
                <updated>Fri, 21 Jan 2011 17:48:09 +0000</updated>
                            <resolved>Fri, 2 Feb 2007 21:57:19 +0000</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12443861" author="bryanpendleton" created="Fri, 20 Oct 2006 16:20:31 +0100"  >&lt;p&gt;Derby does support&lt;br/&gt;
   INSERT INTO t SELECT ... FROM other_t;&lt;br/&gt;
For example you can do:&lt;br/&gt;
  INSERT INTO t1 (a, b) SELECT x, y from t2 where x &amp;gt; 17;&lt;/p&gt;

&lt;p&gt;Is this an acceptable solution to your problem?&lt;/p&gt;</comment>
                            <comment id="12443902" author="chdh@inventec.ch" created="Fri, 20 Oct 2006 18:16:34 +0100"  >&lt;p&gt;No, the normal INSERT...SELECT statement does not create a table. The table must already exist for the normal INSERT...SELECT statement.&lt;/p&gt;

&lt;p&gt;Most SQL DBMS provide a method to store a query result into a table so that the table is automatically created.&lt;/p&gt;

&lt;p&gt;For DB2 and Oracle the syntax is:&lt;br/&gt;
    CREATE TABLE new_table AS SELECT ...&lt;/p&gt;

&lt;p&gt;For MS-SQL Server the syntax is:&lt;br/&gt;
    SELECT ... INTO new_table FROM ...&lt;/p&gt;

&lt;p&gt;This is convenient for complex SQL scripts that store intermediate results in temporary tables. Without such a statement, every intermediate table has to be created with a CREATE TABLE statement, before it can be filled with INSERT ... SELECT, and each CREATE TABLE statement for a temporary table must repeat the full columns definition.&lt;/p&gt;</comment>
                            <comment id="12443918" author="bryanpendleton" created="Fri, 20 Oct 2006 19:23:53 +0100"  >&lt;p&gt;Thanks for the clarification. I agree, that would be a useful feature to have.&lt;/p&gt;</comment>
                            <comment id="12443928" author="djd" created="Fri, 20 Oct 2006 20:09:07 +0100"  >&lt;p&gt;Section 11.3 of the SQL2003 foundation describes the&lt;/p&gt;

&lt;p&gt;CREATE TABLE new_table AS &amp;lt;subquery&amp;gt;&lt;/p&gt;

&lt;p&gt;syntax and behaviour.&lt;/p&gt;</comment>
                            <comment id="12453456" author="james.f.adams" created="Sun, 26 Nov 2006 22:42:45 +0000"  >&lt;p&gt;I uploaded the patch Derby64Patch1.txt.&lt;/p&gt;

&lt;p&gt;This is certainly a work in progress and is not complete, but I uploaded it as I have a few questions and could use some guidance.&lt;/p&gt;

&lt;p&gt;The patch includes the following:&lt;/p&gt;

&lt;p&gt;SQLState.java and messages.xml were modified to add three messages to flag various errors.  These error messages are similar to those used by CREATE VIEW.  I was wondering if I should have parameterized the two messages that differ only in the use of TABLE instead of VIEW?&lt;/p&gt;

&lt;p&gt;sqlgrammer.jj was modified to support the following syntax:&lt;/p&gt;

&lt;p&gt;CREATE TABLE new_table AS subquery WITH &lt;span class=&quot;error&quot;&gt;&amp;#91;NO&amp;#93;&lt;/span&gt; DATA&lt;/p&gt;

&lt;p&gt;CreateTableNode.java was modified to define a new init method to take a result column list and a query expression.  The bindStatement method was modified to bind the quiery expression and create the table element list from the result column list and the query expression.&lt;/p&gt;

&lt;p&gt;The current patch does not implement the WITH DATA option.  When WITH DATA is specified the table should be populated with the result of the query expression.  It is not obvious to me how this should be implemented.  Any guideance would be greatly appreciated.&lt;/p&gt;

&lt;p&gt;Things left to do:&lt;/p&gt;

&lt;p&gt;Implement the WITH DATA option.&lt;br/&gt;
Implement tests.&lt;br/&gt;
Update documentation.&lt;/p&gt;</comment>
                            <comment id="12457085" author="james.f.adams" created="Sat, 9 Dec 2006 16:39:19 +0000"  >&lt;p&gt;I have updated the patch due to numerous changes on the trunk.  Hopefully someone will have time to review and comment.&lt;/p&gt;</comment>
                            <comment id="12457097" author="mkhettry" created="Sat, 9 Dec 2006 19:21:46 +0000"  >&lt;p&gt;I spent some time looking at the patch and it looks like a good first stab at the compile and bind phase. The execution of this DDL takes place in in CreateTableConstantAction. I would think that to populate the table with the results of the queryr, you would need to call generate on the query tree and somehow execute it. It may also help to see how a simple select query is compiled to byte code and executed.&lt;/p&gt;

&lt;p&gt;I should add the caveat that I am not a commiter and not very familiar with the code since I work on it off and on, so hopefully others more familiar with the code  will jump in with their take on the patch.&lt;/p&gt;

&lt;p&gt;Do existing tests psas with your changes? It seems even without the WITH DATA option it is a useful addition to the sysetm.&lt;/p&gt;
</comment>
                            <comment id="12457191" author="james.f.adams" created="Sun, 10 Dec 2006 19:29:33 +0000"  >&lt;p&gt;Thanks for looking at my patch Manish.  I ran derbyAll and the JUnit functionTests.suites.All and saw no errors.  I think I will develop tests for  the functionality I provided so far.  After that I will see what I can do to implement the WITH DATA option. &lt;/p&gt;</comment>
                            <comment id="12463331" author="army" created="Tue, 9 Jan 2007 16:07:36 +0000"  >&lt;p&gt;I noticed that the patch for this issue was posted about a month ago and has been idle since.   So I did a quick review and it looks like a great start.  I ran some simple tests and things work as I would expect them to.  If I specify &quot;WITH DATA&quot; I get a reasonable &quot;incremental&quot; error message (&quot;Feature not supported&quot;) instead of an internal failure, which is good.  The code is well-contained and nicely commented--and the indentation even matches the surrounding code (nice job!).  There are handful of lines in CreateTableNode and sqlgrammar.jj that go beyond 80 characters, but that&apos;s just me being picky.&lt;/p&gt;

&lt;p&gt;I also looked at section 11.3 of SQL2003 foundation and so far as I can tell Derby64Patch2.txt lines up with the standard in terms of the required &quot;NO DATA&quot; syntax and functionality.  As a sanity check I ran derbyall on Red Hat Linux with ibm142 and there were no failures.&lt;/p&gt;

&lt;p&gt;The most recent comment for this issue is from James Adams saying:&lt;/p&gt;

&lt;p&gt;&quot;I think I will develop tests for the functionality I provided so far.&quot;&lt;/p&gt;

&lt;p&gt;James, are you still planning to contribute test cases for the current (NO DATA) functionality?  If you do so, I&apos;d be willing to look at committing this patch as the first step in incremental development for this feature. &lt;/p&gt;</comment>
                            <comment id="12463447" author="james.f.adams" created="Wed, 10 Jan 2007 02:07:36 +0000"  >&lt;p&gt;A B,&lt;/p&gt;

&lt;p&gt;Yes, I am still planning to create test cases for the the current (NO DATA) functionality.  I should be able to have something to contribute by the end of this week.&lt;/p&gt;</comment>
                            <comment id="12463457" author="james.f.adams" created="Wed, 10 Jan 2007 04:36:28 +0000"  >&lt;p&gt;I attached a new version of the patch (Derby64Patch3.txt) that adds tests for the functionality provided so far.&lt;/p&gt;</comment>
                            <comment id="12463626" author="army" created="Wed, 10 Jan 2007 16:51:09 +0000"  >&lt;p&gt;James &amp;#8211; Thank you for the test cases.  This is a good start.  Some quick notes:&lt;/p&gt;

&lt;p&gt;  1. The name of the new test is simply &quot;tables.sql&quot;, which is a bit vague--based on the name alone I don&apos;t think I could guess what it&apos;s actually testing.  Is it possible to rename the test to something more descriptive, such as &quot;CreateTableFromQuery.sql&quot;?&lt;/p&gt;

&lt;p&gt;  2. The test is an ij (.sql) test, which is okay but is not ideal.  Over the past several months we have been trying to move the test harness to JUnit, so it&apos;d be better if all new tests were added as JUnit tests.  In this particular case I think it should be easy to do: I ran the &quot;ijToJUnit&quot; tool that is attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2151&quot; title=&quot;&amp;quot;Fixer-upper&amp;quot; utility to help convert ij canon-based tests to JUnit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2151&quot;&gt;&lt;del&gt;DERBY-2151&lt;/del&gt;&lt;/a&gt; against the .out file in your patch and the tool ran without problem, creating a default JUnit test that should (in theory) run.  You would of course have to add a package declaration and license header, etc., but you should be able to do that by looking at existing JUnit tests.  If you have any problems with the tool or with the resulting JUnit test, please feel free to post.&lt;/p&gt;

&lt;p&gt;  3. The test cases that you have ensure that the CREATE TABLE statements execute without error, but they do not show what was actually created.  In order to verify that the correct columns were created with the correct names, it might be good to do a &quot;select * &quot; from the newly created tables before deleting them.  Ex: &lt;/p&gt;

&lt;p&gt;  &amp;#8211; create table based on t1&lt;br/&gt;
  create table t2 as select * from t1 with no data;&lt;br/&gt;
  select * from t2;&lt;br/&gt;
  drop table t2;&lt;/p&gt;

&lt;p&gt;It would be even better if you could add tests to check that the types of the columns are what they should be, as well.  This is one thing that would probably be easier in ij than in JUnit (because ij has the &quot;describe table&quot; commands), but it should be doable in JUnit, too.&lt;/p&gt;

&lt;p&gt;  4. The SQL spec indicates that if a column in the query is known to be non-nullable then the corresponding column in the new table should be non-nullable, as well.  I did a quick test and this is in fact correct with your patch--but it doesn&apos;t look like you have any test cases to show this.  Is it possible to add one?&lt;/p&gt;

&lt;p&gt;Thanks for replying to my comment in such timely fashion, and for the initial test cases.  If you have any questions/concerns about my feedback above, please do ask!&lt;/p&gt;</comment>
                            <comment id="12463775" author="james.f.adams" created="Thu, 11 Jan 2007 00:33:12 +0000"  >&lt;p&gt;A B &amp;#8211; Thanks for reviewing my work.&lt;/p&gt;

&lt;p&gt;I will convert the tests that I wrote to JUnit tests to be inline with the current testing philosophy.  I will add additional tests to verify that the tables were created correctly, including the nullability of the columns.&lt;/p&gt;</comment>
                            <comment id="12463799" author="djd" created="Thu, 11 Jan 2007 04:47:20 +0000"  >&lt;p&gt;James - here&apos;s the top-level wiki page on derby&apos;s Junit tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyJUnitTesting&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyJUnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to ask questions on derby-dev as well!&lt;/p&gt;</comment>
                            <comment id="12463906" author="james.f.adams" created="Thu, 11 Jan 2007 14:40:44 +0000"  >&lt;p&gt;I have attached an updated patch (Derby64Patch4.txt) that should address the comments on my previous effort.&lt;/p&gt;

&lt;p&gt;The tests have been re-implemented as JUnit tests.&lt;br/&gt;
I added code to verify that the created tables have the correct column names, types, and nullability.&lt;br/&gt;
I modified the changes I made to CreateTableNode.java and sqlgrammar.jj so none of the added/modified lines are longer than 80 characters.&lt;/p&gt;</comment>
                            <comment id="12464362" author="army" created="Fri, 12 Jan 2007 21:58:27 +0000"  >&lt;p&gt;Thank you for the latest patch, James.  I ran derbyall on Red Hat Linux as a sanity check and then committed the patch to the 10.3 trunk with svn revision #495750.&lt;/p&gt;

&lt;p&gt;I noticed that in the &quot;suite()&quot; method of the JUnit test you use:&lt;/p&gt;

&lt;p&gt;+        suite.addTestSuite(CreateTableFromQueryTest.class);&lt;/p&gt;

&lt;p&gt;instead of calling the default JUnit decorator, i.e.:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;suite.addTestSuite(CreateTableFromQueryTest.class);&lt;br/&gt;
+        suite.addTest(TestConfiguration.defaultSuite(&lt;br/&gt;
+            CreateTableFromQueryTest.class));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The latter ensures that the test runs in both embedded mode and client/server mode, whereas the former (the patch as committed) only runs the test in embedded mode.  I think the general approach has been to try to run JUnit tests in both modes (by using the &quot;defaultSuite()&quot; method shown above) unless there is a specific reason to only run the test in one mode.  To see what would happen I made the above change and ran the new CreateTableFromQueryTest in both modes without any problems.&lt;/p&gt;

&lt;p&gt;This isn&apos;t a strict requirement, though, so I went ahead and committed the patch as it was.  If you agree that this makes sense and you would like to change the test to use &quot;defaultSuite()&quot;, you can post another follow-up patch with just that change and I&apos;ll gladly commit it.&lt;/p&gt;

&lt;p&gt;Also: I don&apos;t think anyone ever answered your question about the creation of three new error messages that are almost identical to existing ones except for the word &quot;VIEW&quot;.  For what it&apos;s worth, my feeling is that it might be cleaner if you could in fact parameterize the existing messages so that the term &quot;TABLE&quot; or &quot;VIEW&quot; can be passed in.  But that can be done as a follow-up patch if you are so inclined.&lt;/p&gt;

&lt;p&gt;One other note: I noticed that there is a new &quot;test&quot; method for each query in the JUnit test.  Generally speaking that is not a requirement: you should feel free to have multiple test scenarios/queries in the same &quot;test&quot; method if they have something in common. Maybe you knew that and just decided to have separate test methods, anyways--if that&apos;s the case, then no problem &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I just thought I&apos;d bring it up in case you were thinking each query/test case required its own test method.&lt;/p&gt;

&lt;p&gt;In any event, thank you for the contribution!  Since the changes have been committed I am unchecking the &quot;Patch Available&quot; flag.  I am leaving the issue open, though, since it sounds like you are still planning to work on the &quot;WITH DATA&quot; option? &lt;/p&gt;

&lt;p&gt;Thanks again!&lt;/p&gt;</comment>
                            <comment id="12464383" author="djd" created="Sat, 13 Jan 2007 00:13:57 +0000"  >&lt;p&gt;A B wrote:&lt;br/&gt;
--------------------------------------&lt;br/&gt;
I noticed that in the &quot;suite()&quot; method of the JUnit test you use:&lt;/p&gt;

&lt;p&gt;+ suite.addTestSuite(CreateTableFromQueryTest.class);&lt;/p&gt;

&lt;p&gt;instead of calling the default JUnit decorator, i.e.:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;suite.addTestSuite(CreateTableFromQueryTest.class);&lt;br/&gt;
+ suite.addTest(TestConfiguration.defaultSuite(&lt;br/&gt;
+ CreateTableFromQueryTest.class));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The latter ensures that the test runs in both embedded mode and client/server mode, whereas the former (the patch as committed) only runs the test in embedded mode. I think the general approach has been to try to run JUnit tests in both modes (by using the &quot;defaultSuite()&quot; method shown above) unless there is a specific reason to only run the test in one mode.&lt;br/&gt;
----------------------------------------&lt;/p&gt;

&lt;p&gt;I don&apos;t think that&apos;s quite correct, a test class&apos;s suite method should run the test in the modes that provide useful testing.&lt;br/&gt;
For tests that are testing JDBC features it makes sense to test in both modes as it tests both JDBC drivers.&lt;br/&gt;
However for SQL language tests it doesn&apos;t always make sense to test also in the client mode, since what is being tested is the SQL behaviour of the embedded engine. For example a test of server side procedures makes little sense to also run in client mode. I also think that test like this one that are primary DDL tests have little value in being run in client mode. On the other hand a test that tests a new data type in the SQL language would make sense to run in the client mode to ensure that the data value is transfered over DRDA correctly.&lt;/p&gt;

&lt;p&gt;It basically comes down to what value would running the test in both configurations add in terms of quality as opposed to the extra time required to run the two modes.&lt;/p&gt;

&lt;p&gt;This is very very briefly covered in &quot;Primary Configurations&quot; section but could be expanded.&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyJunitTestConfiguration#head-74a803dbe5c01e00d93dc978dc502c4c17446460&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyJunitTestConfiguration#head-74a803dbe5c01e00d93dc978dc502c4c17446460&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12464384" author="army" created="Sat, 13 Jan 2007 00:38:10 +0000"  >&lt;p&gt;&amp;gt; I don&apos;t think that&apos;s quite correct, a test class&apos;s suite method should run the test&lt;br/&gt;
&amp;gt; in the modes that provide useful testing.&lt;/p&gt;

&lt;p&gt;Okay, I stand corrected.  Thanks for pointing this out.&lt;/p&gt;</comment>
                            <comment id="12465036" author="james.f.adams" created="Tue, 16 Jan 2007 02:20:44 +0000"  >&lt;p&gt;A B,&lt;/p&gt;

&lt;p&gt;Thank you for reviewing and committing the latest patch.&lt;/p&gt;

&lt;p&gt;I would like to work on the &quot;WITH DATA&quot; option.  I assume I will need to modify CreateTableConstantAction to load the data obtained via the query expression after the conglomerate is created.  I am not at all familiar with this area of the code so any guidance would be greatly appreciated.&lt;/p&gt;</comment>
                            <comment id="12465037" author="bryanpendleton" created="Tue, 16 Jan 2007 02:37:31 +0000"  >&lt;p&gt;Hi James, this feature is coming along great! Thanks for all the good work!&lt;/p&gt;

&lt;p&gt;Regarding &quot;WITH DATA&quot;, can you model that implementation to mimic what is done by INSERT ... SELECT?&lt;/p&gt;</comment>
                            <comment id="12466255" author="james.f.adams" created="Sat, 20 Jan 2007 17:33:03 +0000"  >&lt;p&gt;I do not have time to continue to work on this at this time.  I am setting the issue to unassigned in case someone else wants to finish the &quot;WITH DATA&quot; option.&lt;/p&gt;</comment>
                            <comment id="12469888" author="djd" created="Fri, 2 Feb 2007 21:57:19 +0000"  >&lt;p&gt;I think this should be marked as fixed an a new issue related to supporting the WITH DATA option added.&lt;br/&gt;
Marking this as fixed means that it will appear in the list of fixed items for the next release.&lt;br/&gt;
Even without the WITH DATA option it is a useful feature. Thanks James.&lt;/p&gt;</comment>
                            <comment id="12469889" author="djd" created="Fri, 2 Feb 2007 22:01:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2288&quot; title=&quot;Support WITH DATA option of CREATE TABLE new_table AS subquery WITH [NO] DATA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2288&quot;&gt;DERBY-2288&lt;/a&gt; has been added to implement the WITH DATA option.&lt;/p&gt;</comment>
                            <comment id="12504911" author="army" created="Thu, 14 Jun 2007 21:48:32 +0100"  >&lt;p&gt;Just curious: has anyone thought about whether or not this new feature creates any holes in the existing grant/revoke functionality?  That is, can a user use the CREATE TABLE AS ... syntax to select from tables that s/he otherwise does not have permission to access?  Sort of like it (briefly) allowed users to create columns that they weren&apos;t supposed to be allowed to create...(&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2605&quot; title=&quot;You can create BOOLEAN columns in 10.3&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2605&quot;&gt;&lt;del&gt;DERBY-2605&lt;/del&gt;&lt;/a&gt;, now resolved).&lt;/p&gt;

&lt;p&gt;I did some quick tests by creating a table and a view and then using the CREATE TABLE AS ... statement to try to select from that table and view.  As far as I can tell things work correctly: if the user does not have permission to select from the table/view, the CREATE TABLE AS statement fails with the appropriate error.  Ex:&lt;/p&gt;

&lt;p&gt;  ij(CONNECTION1)&amp;gt; create table t_oops as select * from app.v1 with no data;&lt;br/&gt;
  ERROR 42502: User &apos;INIGO&apos; does not have select permission on column &apos;I&apos; of table &apos;APP&apos;.&apos;V1&apos;&lt;/p&gt;

&lt;p&gt;So my guess is that everything is okay here.  But I thought I&apos;d raise the issue anyways, just to see if anyone out there might know of any problematic scenarios...&lt;/p&gt;

&lt;p&gt;If there does turn out to be an issue here, it&apos;s probably not &lt;b&gt;that&lt;/b&gt; big of a deal since we don&apos;t support the &quot;WITH DATA&quot; option yet (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2288&quot; title=&quot;Support WITH DATA option of CREATE TABLE new_table AS subquery WITH [NO] DATA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2288&quot;&gt;DERBY-2288&lt;/a&gt;) and thus there&apos;s no way to use this new syntax to see data.  So all a user  would be able to do is see the column names and types of the table/view, which s/he can do via the ij &quot;describe&quot; command already.&lt;/p&gt;

&lt;p&gt;But still, it&apos;d be good to understand whether not such &quot;holes&quot; exist...&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12361879">DERBY-2288</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12368079">DERBY-2593</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12368561">DERBY-2605</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12345789" name="Derby64Patch1.txt" size="11786" author="james.f.adams" created="Sun, 26 Nov 2006 22:42:45 +0000"/>
                            <attachment id="12346833" name="Derby64Patch2.txt" size="10867" author="james.f.adams" created="Sat, 9 Dec 2006 16:39:19 +0000"/>
                            <attachment id="12348617" name="Derby64Patch3.txt" size="18203" author="james.f.adams" created="Wed, 10 Jan 2007 04:34:45 +0000"/>
                            <attachment id="12348734" name="Derby64Patch4.txt" size="21634" author="james.f.adams" created="Thu, 11 Jan 2007 14:32:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Oct 2006 15:20:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29377</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0nfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37613</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>