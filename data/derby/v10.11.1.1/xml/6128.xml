<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:43:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6128/DERBY-6128.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6128] Examine Derby classes to determine if we need to add serialVersionUID to any of them</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6128</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6124&quot; title=&quot;Marshalling error in JDBCDriverTest as part of CompatibilityTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6124&quot;&gt;&lt;del&gt;DERBY-6124&lt;/del&gt;&lt;/a&gt; has raised the possibility that we may need to add serialVersionUIDs to some serializable Derby classes. Without the serialVersionUIDs, Derby may encounter deserialization errors on objects which were serialized by one version of Derby or the JVM and then deserialized by another version of Derby or the JVM.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12638566">DERBY-6128</key>
            <summary>Examine Derby classes to determine if we need to add serialVersionUID to any of them</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Mar 2013 18:54:04 +0000</created>
                <updated>Mon, 9 Jun 2014 14:30:48 +0100</updated>
                            <resolved>Thu, 18 Apr 2013 08:21:18 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13611078" author="rhillegas" created="Fri, 22 Mar 2013 18:59:02 +0000"  >&lt;p&gt;Attaching SerializableLister.java. This program lists out all Derby classes which implement Serializable but don&apos;t implement Formatable and which DON&apos;T have explicitly declared serialVersionUIDs. I think that the Formatable classes should be ok because Derby takes responsibility for encoding their type ids.&lt;/p&gt;

&lt;p&gt;Here is the output of this program. There are some false positives in here, but this is a small enough list that it should be easy to go through them and determine if we need to add serialVersionUIDs to any of them.&lt;/p&gt;

&lt;p&gt;org.apache.derby.iapi.error.PassThroughException&lt;br/&gt;
org.apache.derby.iapi.error.ShutdownException&lt;br/&gt;
org.apache.derby.iapi.error.StandardException$BadMessageArgumentException&lt;br/&gt;
org.apache.derby.iapi.error.StandardException&lt;br/&gt;
org.apache.derby.iapi.services.cache.ClassSizeCatalog&lt;br/&gt;
org.apache.derby.iapi.services.classfile.Attributes&lt;br/&gt;
org.apache.derby.iapi.services.io.DerbyIOException&lt;br/&gt;
org.apache.derby.iapi.services.sanity.AssertFailure&lt;br/&gt;
org.apache.derby.iapi.sql.depend.ProviderList&lt;br/&gt;
org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList&lt;br/&gt;
org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList&lt;br/&gt;
org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList&lt;br/&gt;
org.apache.derby.iapi.sql.dictionary.GenericDescriptorList&lt;br/&gt;
org.apache.derby.iapi.util.DoubleProperties&lt;br/&gt;
org.apache.derby.iapi.util.InterruptDetectedException&lt;br/&gt;
org.apache.derby.impl.io.DirFile&lt;br/&gt;
org.apache.derby.impl.io.DirFile4&lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedSQLException&lt;br/&gt;
org.apache.derby.impl.services.monitor.UpdateServiceProperties&lt;br/&gt;
org.apache.derby.impl.sql.compile.ParseException&lt;br/&gt;
org.apache.derby.impl.sql.compile.SQLParser$LookaheadSuccess&lt;br/&gt;
org.apache.derby.impl.sql.compile.TokenMgrError&lt;br/&gt;
org.apache.derby.impl.store.access.btree.WaitError&lt;br/&gt;
org.apache.derby.impl.store.raw.data.AllocExtent&lt;br/&gt;
org.apache.derby.impl.store.raw.data.LongColumnException&lt;br/&gt;
org.apache.derby.impl.store.raw.data.NoSpaceOnPage&lt;br/&gt;
org.apache.derby.impl.store.replication.buffer.LogBufferFullException&lt;br/&gt;
org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40&lt;br/&gt;
org.apache.derby.security.DatabasePermission&lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure&lt;br/&gt;
org.apache.derby.vti.Restriction$AND&lt;br/&gt;
org.apache.derby.vti.Restriction$ColumnQualifier&lt;br/&gt;
org.apache.derby.vti.Restriction$OR&lt;br/&gt;
org.apache.derby.client.am.ColumnTypeConversionException&lt;br/&gt;
org.apache.derby.client.am.DisconnectException&lt;br/&gt;
org.apache.derby.client.am.OutsideRangeForDataTypeException&lt;br/&gt;
org.apache.derby.client.am.SqlException&lt;br/&gt;
org.apache.derby.client.am.SqlWarning&lt;br/&gt;
org.apache.derby.client.am.XaException&lt;br/&gt;
org.apache.derby.client.am.stmtcache.JDBCStatementCache$BoundedLinkedHashMap&lt;br/&gt;
org.apache.derby.client.net.CodePointNameTable&lt;br/&gt;
Caught exception while trying to inspect org.apache.derby.iapi.reference.DRDAConstants: sealing violation: package org.apache.derby.iapi.reference is sealed&lt;br/&gt;
Caught exception while trying to inspect org.apache.derby.shared.common.error.ExceptionUtil: sealing violation: package org.apache.derby.shared.common.error is sealed&lt;br/&gt;
Caught exception while trying to inspect org.apache.derby.shared.common.reference.Attribute: sealing violation: package org.apache.derby.shared.common.reference is sealed&lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure&lt;br/&gt;
org.apache.derby.drda.NetServlet&lt;br/&gt;
org.apache.derby.impl.drda.CodePointNameTable&lt;br/&gt;
org.apache.derby.impl.drda.DRDAProtocolException&lt;br/&gt;
org.apache.derby.impl.drda.DRDASocketTimeoutException&lt;br/&gt;
org.apache.derby.impl.tools.ij.mtGrammar$LookaheadSuccess&lt;br/&gt;
org.apache.derbyTesting.functionTests.harness.SimpleDiff$DiffBuffer&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest$TestFailedException&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.FullName&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BigDecimalMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BigintMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BooleanMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$DoubleMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$FullNameMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$IntMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$RealMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$ShortMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode$StringMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.GenericMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.IntArray&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$BinaryMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$BlobMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$ClobMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$DateMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$TimeMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode$TimestampMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LobMode&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.LongMagnitude&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate$Accumulator&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.lang.Price&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.ManyMethods&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.ProtocolTestGrammar&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.ShortHolder&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.SubClass&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.SubInterfaceClass&lt;br/&gt;
org.apache.derbyTesting.functionTests.util.SubSubClass&lt;br/&gt;
org.apache.derbyTesting.junit.utilXid&lt;br/&gt;
org.apache.derbyTesting.unitTests.harness.T_Fail&lt;br/&gt;
org.apache.derbyTesting.unitTests.services.T_CacheException&lt;br/&gt;
org.apache.derbyTesting.unitTests.services.T_StandardException&lt;br/&gt;
org.apache.derby.impl.tools.ij.ParseException&lt;br/&gt;
org.apache.derby.impl.tools.ij.TokenMgrError&lt;br/&gt;
org.apache.derby.impl.tools.ij.ij$LookaheadSuccess&lt;br/&gt;
org.apache.derby.impl.tools.ij.ijException&lt;br/&gt;
org.apache.derby.impl.tools.ij.ijFatalException&lt;br/&gt;
org.apache.derby.impl.tools.ij.ijTokenException&lt;br/&gt;
org.apache.derby.impl.tools.ij.ijXid&lt;/p&gt;</comment>
                            <comment id="13611139" author="rhillegas" created="Fri, 22 Mar 2013 19:46:25 +0000"  >&lt;p&gt;Here is a first triage pass through these classes. Only a handful require a second pass. They are:&lt;/p&gt;

&lt;p&gt;org.apache.derby.impl.io.DirFile&lt;br/&gt;
org.apache.derby.impl.io.DirFile4&lt;br/&gt;
org.apache.derby.impl.store.raw.data.AllocExtent&lt;br/&gt;
org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40&lt;br/&gt;
org.apache.derby.security.DatabasePermission&lt;br/&gt;
org.apache.derby.drda.NetServlet&lt;br/&gt;
org.apache.derby.impl.tools.ij.ijXid&lt;/p&gt;

&lt;p&gt;The others look harmless to me. That is, I don&apos;t see any exposure because they don&apos;t declare explicit serialVersionUIDs. My analysis follows.&lt;/p&gt;

&lt;p&gt;Legend:&lt;/p&gt;

&lt;p&gt;  ACCIDENT: Never serialized. Serializable because the class extends a Serializable JRE class.&lt;br/&gt;
  EX: Exception. These aren&apos;t serialized.&lt;br/&gt;
  HAS: Actually has a serialVersionUID.&lt;br/&gt;
  TEST: Test code, not critical.&lt;/p&gt;


&lt;p&gt;EX: org.apache.derby.iapi.error.PassThroughException&lt;br/&gt;
EX: org.apache.derby.iapi.error.ShutdownException&lt;br/&gt;
EX: org.apache.derby.iapi.error.StandardException$BadMessageArgumentException&lt;br/&gt;
EX: org.apache.derby.iapi.error.StandardException&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.services.cache.ClassSizeCatalog&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.services.classfile.Attributes&lt;br/&gt;
EX: org.apache.derby.iapi.services.io.DerbyIOException&lt;br/&gt;
EX: org.apache.derby.iapi.services.sanity.AssertFailure&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.sql.depend.ProviderList&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.sql.dictionary.GenericDescriptorListo&lt;br/&gt;
ACCIDENT: org.apache.derby.iapi.util.DoubleProperties&lt;br/&gt;
EX: org.apache.derby.iapi.util.InterruptDetectedException&lt;br/&gt;
EX: org.apache.derby.impl.jdbc.EmbedSQLException&lt;br/&gt;
ACCIDENT: org.apache.derby.impl.services.monitor.UpdateServiceProperties&lt;br/&gt;
EX: org.apache.derby.impl.sql.compile.ParseException&lt;br/&gt;
EX: org.apache.derby.impl.sql.compile.SQLParser$LookaheadSuccess&lt;br/&gt;
EX: org.apache.derby.impl.sql.compile.TokenMgrError&lt;br/&gt;
EX: org.apache.derby.impl.store.access.btree.WaitError&lt;br/&gt;
EX: org.apache.derby.impl.store.raw.data.LongColumnException&lt;br/&gt;
EX: org.apache.derby.impl.store.raw.data.NoSpaceOnPage&lt;br/&gt;
EX: org.apache.derby.impl.store.replication.buffer.LogBufferFullException&lt;br/&gt;
EX: org.apache.derby.shared.common.sanity.AssertFailure&lt;br/&gt;
HAS: org.apache.derby.vti.Restriction$AND&lt;br/&gt;
HAS: org.apache.derby.vti.Restriction$ColumnQualifier&lt;br/&gt;
HAS: org.apache.derby.vti.Restriction$OR&lt;br/&gt;
EX: org.apache.derby.client.am.ColumnTypeConversionException&lt;br/&gt;
EX: org.apache.derby.client.am.DisconnectException&lt;br/&gt;
EX: org.apache.derby.client.am.OutsideRangeForDataTypeException&lt;br/&gt;
EX: org.apache.derby.client.am.SqlException&lt;br/&gt;
EX: org.apache.derby.client.am.SqlWarning&lt;br/&gt;
EX: org.apache.derby.client.am.XaException&lt;br/&gt;
ACCIDENT: org.apache.derby.client.am.stmtcache.JDBCStatementCache$BoundedLinkedHashMap&lt;br/&gt;
ACCIDENT: org.apache.derby.client.net.CodePointNameTable&lt;br/&gt;
EX: org.apache.derby.shared.common.sanity.AssertFailure&lt;br/&gt;
ACCIDENT: org.apache.derby.impl.drda.CodePointNameTable&lt;br/&gt;
EX: org.apache.derby.impl.drda.DRDAProtocolException&lt;br/&gt;
EX: org.apache.derby.impl.drda.DRDASocketTimeoutException&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.mtGrammar$LookaheadSuccess&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.harness.SimpleDiff$DiffBuffer&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest$TestFailedException&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.FullName&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BigDecimalMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BigintMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$BooleanMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$DoubleMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$FullNameMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$IntMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$RealMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$ShortMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode$StringMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.GenericMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.IntArray&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$BinaryMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$BlobMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$ClobMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$DateMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$TimeMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode$TimestampMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LobMode&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.LongMagnitude&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate$Accumulator&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.ModeAggregate&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.tests.lang.Price&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.ManyMethods&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.ProtocolTestGrammar&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.ShortHolder&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.SubClass&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.SubInterfaceClass&lt;br/&gt;
TEST: org.apache.derbyTesting.functionTests.util.SubSubClass&lt;br/&gt;
TEST: org.apache.derbyTesting.junit.utilXid&lt;br/&gt;
TEST: org.apache.derbyTesting.unitTests.harness.T_Fail&lt;br/&gt;
TEST: org.apache.derbyTesting.unitTests.services.T_CacheException&lt;br/&gt;
TEST: org.apache.derbyTesting.unitTests.services.T_StandardException&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.ParseException&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.TokenMgrError&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.ij$LookaheadSuccess&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.ijException&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.ijFatalException&lt;br/&gt;
EX: org.apache.derby.impl.tools.ij.ijTokenException&lt;/p&gt;</comment>
                            <comment id="13611974" author="dagw" created="Sun, 24 Mar 2013 05:06:18 +0000"  >&lt;p&gt;EmbeddedConnectionPoolDataSource40 definitely requires one, at least. I must have missed this one when I added SerialVersionUID to the other data source classes that were lacking it (found it when I reworked the data sources for CP2).&lt;/p&gt;</comment>
                            <comment id="13611979" author="dagw" created="Sun, 24 Mar 2013 05:16:16 +0000"  >&lt;p&gt;DirFile, DirFile4 don&apos;t seem to implement Serializable? (only StorageFile)&lt;br/&gt;
ijXid seems to already have a serialVersionUID?&lt;/p&gt;</comment>
                            <comment id="13612593" author="rhillegas" created="Mon, 25 Mar 2013 12:58:28 +0000"  >&lt;p&gt;Thanks for taking a look at this Dag. Some more conclusions:&lt;/p&gt;

&lt;p&gt;ACCIDENT: org.apache.derby.impl.io.DirFile (extends java.io.File)&lt;br/&gt;
ACCIDENT: org.apache.derby.impl.io.DirFile4 (extends java.io.File)&lt;br/&gt;
OK: org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40 (only serialized in the scope of a single JVM)&lt;br/&gt;
ACCIDENT: org.apache.derby.security.DatabasePermission (extends java.security.Permission)&lt;br/&gt;
OK: org.apache.derby.drda.NetServlet (only serialized in the scope of a single JVM)&lt;br/&gt;
OK: org.apache.derby.impl.tools.ij.ijXid (has serialVersionUID)&lt;/p&gt;

&lt;p&gt;That leaves the following Externalizable class:&lt;/p&gt;

&lt;p&gt;    org.apache.derby.impl.store.raw.data.AllocExtent&lt;/p&gt;

&lt;p&gt;It&apos;s ok that AllocExtent doesn&apos;t have a serialVersionUID. That is because it&apos;s only (de)serialized by AllocPage. AllocPage knows where in the stream to look for an AllocExtent and AllocPage creates the empty AllocExtent by itself, rather than relying on the Serializable machinery to do that.  So the serialVersionUID is never checked.&lt;/p&gt;</comment>
                            <comment id="13613505" author="dagw" created="Tue, 26 Mar 2013 05:15:42 +0000"  >&lt;p&gt;EmbeddedConnectionPoolDataSource40 should be serializable across VMs, cf. our tests in DataSourceSerializationTest, so I still&lt;br/&gt;
believe we need to add it there. The persistent data sources are produced by org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources, a standalone program.&lt;/p&gt;</comment>
                            <comment id="13613728" author="rhillegas" created="Tue, 26 Mar 2013 12:21:25 +0000"  >&lt;p&gt;Thanks, Dag. Are you going to add a serialization id to EmbeddedConnectionPoolDataSource40? Should we build another release candidate with that fix? Thanks.&lt;/p&gt;</comment>
                            <comment id="13617100" author="dagw" created="Fri, 29 Mar 2013 05:49:12 +0000"  >&lt;p&gt;Attaching a patch for adding EmbeddedConnectionPoolDataSource40 (derby-6128-ecpds40). This has an explicit serialVersionUID which equals the one generated by default. So, I don&apos;t think we need a respin, as long as we backport this patch to the 10.10 branch: any changes in the code going forward would retain the original (default) serial uid for that class.&lt;/p&gt;</comment>
                            <comment id="13617135" author="dagw" created="Fri, 29 Mar 2013 06:30:50 +0000"  >&lt;p&gt;Actually, it should be backported to 10.9/10.8 as well; which has the same default. 10.7 has another default.&lt;/p&gt;</comment>
                            <comment id="13617283" author="rhillegas" created="Fri, 29 Mar 2013 12:17:18 +0000"  >&lt;p&gt;Thanks for the patch, Dag, with its clear explanation of how EmbeddedConnectionPoolDataSource40 behaves on various releases. +1&lt;/p&gt;</comment>
                            <comment id="13632941" author="mikem" created="Tue, 16 Apr 2013 16:55:47 +0100"  >&lt;p&gt;are there any more outstanding for this issue?&lt;/p&gt;</comment>
                            <comment id="13632989" author="rhillegas" created="Tue, 16 Apr 2013 17:37:05 +0100"  >&lt;p&gt;Hi Mike: It don&apos;t think that derby-6128-ecpds40 has been checked in yet.&lt;/p&gt;</comment>
                            <comment id="13634932" author="dagw" created="Thu, 18 Apr 2013 08:20:38 +0100"  >&lt;p&gt;Committed as svn 1469197. Commit log:&lt;/p&gt;

&lt;p&gt;This explicit UID was missing for releases 10.10.1.1 and lower.  The default changed between 10.7 and 10.8, so even with this explicit UID in place, serialized data sources created with 10.7 or older would not be readable.  The default UID in 10.7 was -2155993232624542236.  This was not caught by the serialization tests at the time since the &quot;40&quot;-suffixed data sources were not tested back then, cf &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5955&quot; title=&quot;Prepare Derby to run with Compact Profiles (JEP 161)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5955&quot;&gt;&lt;del&gt;DERBY-5955&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1438035&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1438035&lt;/a&gt; .&lt;/p&gt;</comment>
                            <comment id="13635240" author="mikem" created="Thu, 18 Apr 2013 16:26:39 +0100"  >&lt;p&gt;Dag what kind of errors and in what situations will users using past releases.  What does a user do if they run into problems?&lt;br/&gt;
And does soft vs. hard upgrade come into play?&lt;br/&gt;
Also can this change be backported, or does it cause problems if a user takes a new release but then wants to downgrade back&lt;br/&gt;
to the older release within the version (ie. takes a 10.10.2 with a fix, but then wants to go back to 10.10.1).&lt;/p&gt;

&lt;p&gt;I&apos;ve marked that this issue needs a release note, so that we warn users.  &lt;/p&gt;</comment>
                            <comment id="13636037" author="dagw" created="Fri, 19 Apr 2013 05:12:55 +0100"  >&lt;p&gt;As far as I understand it means that if someone has serialized a EmbeddedConnectionPoolDataSource40 using a 10.7 or older Derby (notwithstanding soft/hard upgrade mode at the time), and then later try to read that serialized data source using a Derby 10.8 or newer, notwithstanding soft/hard upgrade mode), the read would fail. The only remedy would be to use a 10.7 or older Derby to read it, but if the user had hard upgraded already it could be a bit of a catch-22..&lt;/p&gt;

&lt;p&gt;I presume we could put manual reading logic in place to recognize the old versioned data source for this particular class and allow reading of the older version, and back-port such a patch to Derby 10.8, 10.9 and 10.10), perhaps we should file a JIRA issue for that?&lt;/p&gt;

&lt;p&gt;I&apos;ll put together a release note for now.&lt;/p&gt;
</comment>
                            <comment id="13636053" author="dagw" created="Fri, 19 Apr 2013 05:22:38 +0100"  >&lt;p&gt;Note that the patch committed doesn&apos;t introduce any regression, it merely fixes the version number going forward.  The regression happened in 10.8, since by then there was no explicit serialVersionUID, so Java computes one based on the class dependencies. Obviously, that must have changed between 10.7 and 10.8 for the (implicit) version number to change the way it did.&lt;/p&gt;

&lt;p&gt;But since our content of the serialized class didn&apos;t really change it would be good to install logic to recognize and accept both the pre-10.8 and post-10.7 version numbers when reading a serialized class instance.&lt;/p&gt;</comment>
                            <comment id="13636061" author="dagw" created="Fri, 19 Apr 2013 05:35:56 +0100"  >&lt;p&gt;Uploading a release note. I am unsure whether this is the right thing to do, though, do we normally release note regressions bugs found?&lt;/p&gt;</comment>
                            <comment id="13636520" author="mikem" created="Fri, 19 Apr 2013 17:00:02 +0100"  >&lt;p&gt;+1 to adding a new JIRA to fix problem in previous releases.  Worst case if no one is interested in doing that work we could&lt;br/&gt;
put examples of the problems someone would get if they hit this, and workarounds.  Maybe using a certain jvm version is&lt;br/&gt;
a workaround?&lt;/p&gt;</comment>
                            <comment id="13641798" author="dagw" created="Thu, 25 Apr 2013 14:49:19 +0100"  >&lt;p&gt;Added &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6204&quot; title=&quot;Add logic to read 10.7 and earlier versions of EmbeddedConnectionPoolDataSource40 &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6204&quot;&gt;&lt;del&gt;DERBY-6204&lt;/del&gt;&lt;/a&gt; to track work on adding logic to read the pre-10.8 versions of serialized EmbeddedConnectionPoolDataSource40 .&lt;/p&gt;</comment>
                            <comment id="14025184" author="rhillegas" created="Mon, 9 Jun 2014 14:30:48 +0100"  >&lt;p&gt;Correct typos in detailed release note.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12638429">DERBY-6124</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12644599">DERBY-6204</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12665201">DERBY-6314</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12575070" name="SerializableLister.java" size="7621" author="rhillegas" created="Fri, 22 Mar 2013 18:59:02 +0000"/>
                            <attachment id="12576030" name="derby-6128-ecpds40.diff" size="1264" author="dagw" created="Fri, 29 Mar 2013 06:28:41 +0000"/>
                            <attachment id="12649377" name="releaseNote.html" size="1574" author="rhillegas" created="Mon, 9 Jun 2014 14:30:48 +0100"/>
                            <attachment id="12579474" name="releaseNote.html" size="3892" author="dagw" created="Fri, 19 Apr 2013 05:35:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 24 Mar 2013 05:06:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319042</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzcwef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>319383</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>