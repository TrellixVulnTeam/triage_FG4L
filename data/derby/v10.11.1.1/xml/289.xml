<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-289/DERBY-289.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-289] Enable code sharing between Derby client and engine</title>
                <link>https://issues.apache.org/jira/browse/DERBY-289</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Right now, there is no way for the Derby network client to share code with the Derby engine.  We should have a separate jar file, e.g. derby_common.jar, that contains shared code and is used by both the client and the engine.  &lt;/p&gt;</description>
                <environment>N/A</environment>
        <key id="32644">DERBY-289</key>
            <summary>Enable code sharing between Derby client and engine</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="davidvc">David Van Couvering</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 May 2005 03:57:24 +0100</created>
                <updated>Thu, 25 Jan 2007 20:38:22 +0000</updated>
                                            <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.0.2.2</version>
                    <version>10.1.1.0</version>
                                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="65541" author="davidvc" created="Tue, 17 May 2005 04:00:41 +0100"  >&lt;p&gt;Can&apos;t fix this until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-289&quot; title=&quot;Enable code sharing between Derby client and engine&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-289&quot;&gt;DERBY-289&lt;/a&gt; is resolved, as there is no place to put shared code.&lt;/p&gt;</comment>
                            <comment id="12315632" author="davidvc" created="Wed, 13 Jul 2005 07:59:57 +0100"  >&lt;p&gt;I would like to modify the network client to use localized messages.&lt;br/&gt;
However, the right way to do this is using message ids, and these&lt;br/&gt;
message ids probably should be based on SQL states, just as with&lt;br/&gt;
the embedded code.  We should also take advantage of the existing&lt;br/&gt;
infrastructure for properly loading and composing message strings,&lt;br/&gt;
rather than build a duplicate infrastructure for the client code.&lt;/p&gt;

&lt;p&gt;As a first step towards fixing exception handling in the client, I am&lt;br/&gt;
therefore planning on working on creating a common package hierarchy &lt;br/&gt;
that contains code that can be shared across client and server code.&lt;/p&gt;

&lt;p&gt;Here are the steps I am planning on taking.  Your comments are most welcome.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Create a new top-level directory under trunk/java called &quot;common&quot;.  All&lt;br/&gt;
  packages under this directory would have the prefix org.apache.derby.common&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Refactor the existing service classes under org.apache.derby.iapi.services&lt;br/&gt;
  and org.apache.derby.impl.services into common code and engine-specific&lt;br/&gt;
  code.  I would do the minimum possible so that the error and i18n&lt;br/&gt;
  services can move over to the common directory.  I do not intend to move&lt;br/&gt;
  over other services even if they could be considered common; I feel this&lt;br/&gt;
  work should be done only as needed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  At first glance, the packages impacted by this refactoring effort would be:&lt;br/&gt;
    org.apache.derby.iapi.services.Monitor&lt;br/&gt;
    org.apache.derby.impl.services.Monitor&lt;br/&gt;
    org.apache.derby.iapi.services.i18n&lt;br/&gt;
    org.apache.derby.iapi.error&lt;/p&gt;

&lt;p&gt;  There may be other packages impacted due to dependencies I have yet to&lt;br/&gt;
  discover.&lt;/p&gt;

&lt;p&gt;  I have noticed that some of the code seems to have some fairly strong&lt;br/&gt;
  ties to the engine environment.  I hope to solve this by &lt;br/&gt;
  splitting some classes into a generic superclass in the common &lt;br/&gt;
  hierarchy and a subclass in the engine hierarchy.  &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In terms of the build environment, the easy approach, and the approach&lt;br/&gt;
  that matches what already exists, would suggest creating a new jar file, &lt;br/&gt;
  derbyclient.jar.  &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  However, we already have a large number of jar files, and adding one &lt;br/&gt;
  more I feel is going in the wrong direction.  I would like to better &lt;br/&gt;
  understand the motivation for having multiple jar files when I think &lt;br/&gt;
  we could do with two: one for engine/server-side code and one for &lt;br/&gt;
  client code, e.g.  &lt;/p&gt;

&lt;p&gt;    derby.jar&lt;br/&gt;
    derbyclient.jar&lt;br/&gt;
    &amp;lt;locale_jar_files&amp;gt;&lt;/p&gt;

&lt;p&gt;  Comments on this are most appreciated.&lt;/p&gt;

&lt;p&gt;  Thanks,&lt;/p&gt;

&lt;p&gt;  David&lt;/p&gt;</comment>
                            <comment id="12315635" author="davidvc" created="Wed, 13 Jul 2005 08:04:01 +0100"  >&lt;p&gt;Internationalizing error messages can&apos;t be done without common code framework without a lot of code duplication.&lt;/p&gt;</comment>
                            <comment id="12315645" author="djd" created="Wed, 13 Jul 2005 10:05:26 +0100"  >&lt;p&gt;I think any shared solution needs to handle mixing of client and server/engine versions. E.g. assuming shared code is added in 10.2, an application could be using a local 10.2 derby engine  but using a 10.3 client to talk to a remote derby engine, all from the same JVM. Apart from mismatched classes, it&apos;s also hard to guarantee which common code is loaded, the 10.2 or the 10.3, usually depends on class path order. Thus you may have  handle the common code be at a lower or higher level than expected.&lt;/p&gt;

&lt;p&gt;As for a single server side jar, that forces the network server overhead on simple embedded users, and may add a security concern they don&apos;t want to have, basically code that listens on a network port. Even having the code in the jar may of concern, even if they never start it.&lt;/p&gt;</comment>
                            <comment id="12315656" author="davidvc" created="Wed, 13 Jul 2005 12:19:17 +0100"  >&lt;p&gt;Thanks for your comments, Dan.&lt;/p&gt;

&lt;p&gt;Can you explain to me how a classloader can load a 10.2 shared class for the client code and a 10.3 shared class for the server?  Isn&apos;t the classpath the same, so you end up picking up the same class either way?  Assuming this is possible, is this something we actually want to try and handle?  I could see doing two versions under two different classloaders, with different classpaths, to support online upgrade &amp;#8211; but within the same Derby system/classloader?  It seems if anything, I should catch a version mismatch and throw an exception, but do we really want to try and make this work?  Can you give me a scenario where this is useful/desirable?&lt;/p&gt;

&lt;p&gt;Regarding the jar files, I see your point: jars are units of security.  Why expose an embedded user to the risks of network code unnecessarily.  I&apos;ll rescind my suggestion.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12315662" author="djd" created="Wed, 13 Jul 2005 13:37:52 +0100"  >&lt;p&gt;I meant either the 10.2 version or the 10.3 version would be loaded, only one. And the code has to deal with it.&lt;br/&gt;
As it being useful, I don&apos;t know, but it is supported today because the client jar and the engine jar are totally independent,&lt;br/&gt;
thus you would be removing this option, or enforcing the requirement that within a same JVM the client and engine must be in sync.&lt;br/&gt;
Maybe that&apos;s acceptable, but it does need to be discussed or  addressed, not just assume the client and the engine will be in sync.&lt;/p&gt;</comment>
                            <comment id="12315760" author="davidvc" created="Thu, 14 Jul 2005 03:08:12 +0100"  >&lt;p&gt;Ok, got it. &lt;/p&gt;

&lt;p&gt;I think it&apos;s reasonable to require that all the jars in the classpath should be the same version.  That said, configuration mistakes happen, and I agree the code should detect it and raise an error if there is a version mismatch.   Should I put this (and/or the whole proposal) up for a vote?&lt;/p&gt;</comment>
                            <comment id="12315775" author="djd" created="Thu, 14 Jul 2005 05:35:43 +0100"  >&lt;p&gt;In case it&apos;s not clear, this is the type of situation I&apos;m talking about.&lt;/p&gt;

&lt;p&gt;Application A is a client server application and requires Derby client 10.2&lt;/p&gt;

&lt;p&gt;Application B is a local embedded Derby application and requires Derby engine 10.3&lt;/p&gt;

&lt;p&gt;Now I want to run a client to A  and B in the same JVM for some reason, maybe portlets, maybe multiple applications&lt;br/&gt;
in the same app server, maybe application B requires access to application A.&lt;/p&gt;

&lt;p&gt;This would be supported with the current model, complete flexibility because the code bases are separate.&lt;/p&gt;

&lt;p&gt;So do we want to lose this flexibility, or support it with the shared code model?&lt;/p&gt;

&lt;p&gt;Some side history, we did do some work at IBM for Cloudscape prior to open sourcing that ensured that the tools (ij mainly) did not have to be at the same version as the engine, basically by ensuring there was no code in common. This was a request from our customers.&lt;/p&gt;
</comment>
                            <comment id="12315860" author="davidvc" created="Fri, 15 Jul 2005 07:43:46 +0100"  >&lt;p&gt;OK.  I think we need to solve this.  It seems wrong to me to make it so we can&apos;t share code across client and server because of, what seems to me anyway, an edge case.&lt;/p&gt;

&lt;p&gt;I have some ideas, I&apos;m going to do some playing around and prototyping, and I&apos;ll get back to you all about this.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12315870" author="rhillegas" created="Fri, 15 Jul 2005 09:15:19 +0100"  >&lt;p&gt;I confess I&apos;m still puzzled. It seems to me there may be two separate issues here: 1) the interoperability of different derby versions across a network and 2) the coherence of derby code running in a single VM. I&apos;m all in favor of interoperability. But mixing and matching derby versions in the same VM puzzles  me. I wonder whether we are talking about an edge case here. Is that edge case worth not sharing utility libraries across derby?&lt;/p&gt;</comment>
                            <comment id="12315943" author="kmarsden" created="Sat, 16 Jul 2005 04:38:22 +0100"  >&lt;p&gt;As for the mixed versions, I would like to understand how we would recommend upgrading in a situation where the jvm in question has both server and client to talk to remote servers in a failover situation or whatever.  So I have 100 nodes each with client and server talking to each other.&lt;/p&gt;

&lt;p&gt;Typically you might tell me.&lt;/p&gt;

&lt;p&gt;1) upgrade all your servers.&lt;br/&gt;
2)  upgrade your clients and application to use the new functionality.&lt;/p&gt;

&lt;p&gt;So at least for some period of time there would be a mix of versions.  Theoretically if we guarantee full backward/forward compatibility,  I  could use my old application with the new client for some period of time, but that would be a burdon because I  would have to test my  old application with the new client and who wants to spend time on that.&lt;/p&gt;

&lt;p&gt;So how would I upgrade in this scenario?&lt;/p&gt;</comment>
                            <comment id="12319057" author="kmarsden" created="Thu, 18 Aug 2005 02:37:40 +0100"  >&lt;p&gt;The biggest concern for me is upgrade in server configurations where both the client  and server are in the classpath. See the upgrade scenario  in the previous comment.    &lt;/p&gt;

&lt;p&gt;I think taking away the ability to mix versions and requiring  users  to judiciously use  ClassLoaders in order to upgrade is not reasonable, especially when the reason for the change cannot be explained in terms of any functionality improvement.&lt;/p&gt;

&lt;p&gt;I think &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We need to allow mixing of client and server versions, both on a protocol level and in the same classpath.&lt;/li&gt;
	&lt;li&gt;We should keep jar file growth commensurate with functionality improvement.&lt;/li&gt;
	&lt;li&gt;We should try to avoid asking every user in the world to change their classpath.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For code sharing now, I think constants would be a great place to start since they get compiled out.&lt;/p&gt;

&lt;p&gt;For other code, it seems to me that we will need either some stable internal API (hard to manage) or some build trick to create a client jar with a separate package namespace for the common code (weird because the classes in the stack traces  would be a little different than the actual code).  That&apos;s all I have in the way of ideas, but know I really don&apos;t want to see us loose the ability to mix client and server versions.&lt;/p&gt;
</comment>
                            <comment id="12319066" author="rhillegas" created="Thu, 18 Aug 2005 03:49:26 +0100"  >&lt;p&gt;The build trick would be fairly easy to implement. It would, however, become a speed bump for new developers. We could slap a big comment in BUILDING.txt. Any other suggestions about how to avoid confusing the unwary?&lt;/p&gt;</comment>
                            <comment id="12319068" author="bandaram" created="Thu, 18 Aug 2005 03:50:13 +0100"  >&lt;p&gt;Thanks, Kathey... I think we may be able to use JAR sealing mechanism to enforce consistant version of the classes are used. We already use sealing for the server JAR, so a similar mechanism could work for the client. I haven&apos;t actually used sealing yet, so don&apos;t know if there are any issues in doing so &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12319072" author="rhillegas" created="Thu, 18 Aug 2005 04:24:18 +0100"  >&lt;p&gt;I&apos;m unclear on how jar file sealing helps us here. According to &lt;a href=&quot;http://java.sun.com/developer/JDCTechTips/2001/tt0130.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/developer/JDCTechTips/2001/tt0130.html&lt;/a&gt;, jar file sealing is a mechanism to prevent hackers from subverting package protection by creating new classes in your packages. Jar file sealing causes an error to be raised if someone tries to load a class that isn&apos;t in your jar file but is masquerading in your package. I don&apos;t think this will help us out if we have two copies of the same class, an uprev copy in one jar file and a downrev copy in the other jar file. Jar file sealing doesn&apos;t seem to address the problem of classes from other packages referencing your common code. I think that even with jar file sealing you will continue to see the behavior you don&apos;t like: the first copy of the class on the CLASSPATH is the one that will be loaded.&lt;/p&gt;</comment>
                            <comment id="12319103" author="kmarsden" created="Thu, 18 Aug 2005 08:27:20 +0100"  >&lt;p&gt;David Van Couvering wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt;I&apos;m uncomfortable with the &quot;build trick&quot; &amp;#8211; it feels like a hack.  Let&apos;s&lt;br/&gt;
&amp;gt;think about this some more.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
I agree.  I don&apos;t like either one of my ideas much to tell you the truth and stick by original assessment of hard and weird respecively.  I  threw them out there in the hopes that someone would counter with something better #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.     Satheesh&apos;s sealed jar idea sounds much more promising to me  if it pans out.    If not,   maybe others have some good ideas on how to share code and still allow version mixing of the jar files.&lt;/p&gt;</comment>
                            <comment id="12319152" author="johnemb" created="Thu, 18 Aug 2005 19:46:43 +0100"  >&lt;p&gt;Regarding issues with jar sealing:&lt;br/&gt;
The &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-496&quot; title=&quot;unit test &amp;#39;org.apache.derbyTesting.unitTests.services.T_Diagnosticable&amp;#39; was failed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-496&quot;&gt;&lt;del&gt;DERBY-496&lt;/del&gt;&lt;/a&gt; issue (&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-496&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-496&lt;/a&gt;) is certainly related to jar sealing. A sealed package exists in multiple jar files, causing a SecurityException, which in turn causes a specific test to fail (on some systems) unless the ordering of jar-files in the CLASSPATH is compensating for this. I don&apos;t know how relevant it is to this discussion, though...&lt;/p&gt;</comment>
                            <comment id="12319404" author="rhillegas" created="Sat, 20 Aug 2005 03:02:45 +0100"  >&lt;p&gt;Please ignore this dummy edit. I want to see if this triggers JIRA mail.&lt;/p&gt;</comment>
                            <comment id="12319405" author="rhillegas" created="Sat, 20 Aug 2005 03:28:39 +0100"  >&lt;p&gt;Please also ignore this dummy comment, again added to see if it triggers JIRA mail.&lt;/p&gt;</comment>
                            <comment id="12322900" author="davidvc" created="Thu, 8 Sep 2005 10:37:57 +0100"  >&lt;p&gt;PROPOSAL FOR SHARING CODE IN DERBY&lt;/p&gt;

&lt;p&gt;Here are the outlines of how we plan to share code in Derby.  This first&lt;br/&gt;
version is a high-level description of the approach.  After incorporating&lt;br/&gt;
your feedback and piloting with the internationalization code, I will write &lt;br/&gt;
up a more detailed proposal.  &lt;/p&gt;


&lt;p&gt;PRINCIPLES AND REQUIREMENTS&lt;/p&gt;

&lt;p&gt;It&apos;s important to understand and agree upon the principles and requirements&lt;br/&gt;
of this feature&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Allow sharing of common code across all parts of the Derby codeline,&lt;br/&gt;
  in particular between the network client and the engine.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Make it easy to code agains common components (avoid onerous overhead)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Support the following binary compatibility rules.  This is based&lt;br/&gt;
  off of the compatibility rules defined for the Apache Portable&lt;br/&gt;
  Runtime (APR) project (see &lt;a href=&quot;http://apr.apache.org/versioning.html):&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://apr.apache.org/versioning.html):&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;compatibility guaranteed against later versions until&lt;br/&gt;
     the major version number changes (e.g. a 10.1 consumer will &lt;br/&gt;
     work with with 10.2 common classes, but a 10.2 consumer is &lt;br/&gt;
     not guaranteed to work with 11.0 common classes).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;compatibility guaranteed for all previous patch versions&lt;br/&gt;
     (e.g. a 10.1.2 consumer will work with 10.1.1 common classes).  &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;compatibility will be strongly encouraged but not guaranteed&lt;br/&gt;
     against previous minor versions (e.g. a 10.2 consumer works &lt;br/&gt;
     with 10.1 common classes, but a 10.3 consumer has a hard &lt;br/&gt;
     dependency on new methods, it can not work with 10.2&lt;br/&gt;
     common classes).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;no expectation for compatibility for previous major versions&lt;br/&gt;
     (e.g. 10.1 is not guaranteed to work with 11.0).&lt;/li&gt;
&lt;/ul&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Support for both direct creation of classes and pluggable infrastructure&lt;br/&gt;
  where this is needed.  Some common classes are very simple, and not&lt;br/&gt;
  everything should require a pluggable infrastructure.&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;IMPLEMENTATION PLAN&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Create a new directory java/common&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Create a new package directory under common, org/apache/derby/common&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Classes created within the common package hierarchy needs to follow the&lt;br/&gt;
  guidelines for common components as described below&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Provide a CommonVersion helper class (described further below)&lt;br/&gt;
  that allows consumers to detect what version of the common components &lt;br/&gt;
  is available and determine whether the version is compatible.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modify the build script to create a new jar file, derby-common.jar,&lt;br/&gt;
  which contains all the common classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Update the documentation to describe the need for this new jar file&lt;br/&gt;
  in the classpath/ext directory/etc.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;COMMON CLASS CODING GUIDELINES&lt;/p&gt;

&lt;p&gt;These guidelines are for any classes in the common package with&lt;br/&gt;
public methods.  These guidelines should actually be applied to major&lt;br/&gt;
releases as well, as much as possible, but compatibility is not&lt;br/&gt;
required between major releases.&lt;/p&gt;

&lt;p&gt;Compatibility will be tested with a new suite of compatibility&lt;br/&gt;
tests (currently being devised by Rick Hillegas)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Class names and package names should not change between patch or&lt;br/&gt;
  minor releases.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Existing public method names, method signatures, and public field&lt;br/&gt;
  names should not change between patch or minor releases.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Existing public fields or methods should not be removed between patch&lt;br/&gt;
  or minor releases.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Although the code of existing methods can change, the defined behavior,&lt;br/&gt;
  in terms of semantics and observable effects, should not change &lt;br/&gt;
  between patch and minor releases.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;New classes, packages, public fields and methods can be added between&lt;br/&gt;
  minor releases, but not between patch releases, as this would break &lt;br/&gt;
  forward-compatibility for patch releases.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;VERSION DETECTION&lt;/p&gt;

&lt;p&gt;The Version class will be defined as a common class and is used to &lt;br/&gt;
define a version and check for compatibility between a consumer and&lt;br/&gt;
the common package.  Here is a first pass at the methods on this class.&lt;/p&gt;

&lt;p&gt;public class Version&lt;/p&gt;
{
  /** 
    * return the String representation of the version of the
    * common package
    */
  static Version getCommonVersion()

  /**
    * Create a version object.  For 10.1.2 you would say
    * &amp;lt;code&amp;gt;new Version(10, 1, 2)&amp;lt;/code&amp;gt;
    */
  public Version(int major, int minor, int patch)

  int getMajor()

  int getMinor()

  int getPatch()

  /**
   * Check to see if a consumer is compatible with the common package.
   * This method should be called when the consumer is being initialized,
   * and an exception should be thrown if they are not compatible.
   *
   * If the consumer version is older than or the same as the common 
   * package version, we have all the knowledge we need to determine 
   * compatibility.
   *
   * If the consumer is newer than the common package, then we need
   * to check for forward compatibility (e.g. to see if the older common
   * package can work with the newer consumer).  If only the patch 
   * versions differ, then by our compatibility rules the two versions 
   * must be compatible.  If the major or minor versions differ then we
   * use the firstIncompatibleVersion parameter to determine forward
   * compatibility.  If firstIncompatibleVersion is null then we
   * assume full forward compatibility (the consumer is saying &quot;I can
   * work with anything&quot;).
   * 
   *
   * Usage example:
   *
   *  checkCommonCompatibility(new Version(10, 1, 2), null);
   *  checkCommonCompatibility(new Version(11, 0, 1), new Version(10, 9, 0)
   */
  boolean checkCommonCompatibility(Version consumer, 
    Version firstIncompatibleVersion)
}</comment>
                            <comment id="12322975" author="davidvc" created="Fri, 9 Sep 2005 07:48:09 +0100"  >&lt;p&gt;Discussion of the above proposal can be found on this email thread:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinyurl.com/bqvp9&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tinyurl.com/bqvp9&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12356976" author="davidvc" created="Tue, 8 Nov 2005 05:22:23 +0000"  >&lt;p&gt;Hi, all.  Here is the proposed patch that provides the framework for code sharing.  I was thinking folks could look at it and discuss, and then once issues have (hopefully) been worked out, we can have a vote.&lt;/p&gt;

&lt;p&gt;When you apply these changes, you need to manually create an empty master file master/FeatureManagement.out&lt;/p&gt;

&lt;p&gt;Summary of changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Created new top-level source directory trunk/java/common&lt;/li&gt;
	&lt;li&gt;common/org/apache/derby/common/package.html has a full description of the framework and the guidelines around it.  This is an updated version of the policy as we worked out on the Wiki.  The intention is that this becomes the official guidelines (and gets updated as needed) once we vote on this and it gets checked in&lt;/li&gt;
	&lt;li&gt;Created some utilities for i18n and error handling that both the engine and network client make use of&lt;/li&gt;
	&lt;li&gt;Created a new SQLException class for the client, SQLException2, which makes use of the common framework.  I did this rather than modify the existing class because I wanted a well-structured way to  migrate exception code over incrementally.&lt;/li&gt;
	&lt;li&gt;Relocated iapi.services.sanity from the engine to the common area, since it&apos;s shared by all (there are more opportunities like this, but this seemed like the simplest example)&lt;/li&gt;
	&lt;li&gt;Moved a few messages from the engine&apos;s messages_en.properties under the engine directory to common-messages_en.properties under the common directory.  Note that I did not at this time move all the translations over.  This is a tedious manual job and I am going to write a tool to do this automatically once all the messages are relocated (or we are ready for a release, whichever comes first).&lt;/li&gt;
	&lt;li&gt;Note that I did NOT move SQLState from iapi.reference at this time.  What do you all think &amp;#8211; should this be relocated at some point, since it is shared code?  It&apos;s irrelevant at runtime since it&apos;s a class that is simply constants, so it doesn&apos;t even get included at runtime.  Also&lt;/li&gt;
	&lt;li&gt;Created some unit tests for the feature management aspects of the common framework under tests/common.  These are written as JUnit tests.  They can be relocated at some point if we identify a single area for new JUnit tests&lt;/li&gt;
	&lt;li&gt;Modified the build to build the common code.  I noticed that the build infrastructure automatically picked up common code that the various jar files depended on for derby.jar, derbytools.jar and derbynet.jar.  This did not appear to be the case for the client jar, so I modified the derbyclientjar build target to add the common classes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This passes derbyall.  The new unit tests for the common framework are not included in derbyall as they can only be run against the classes directory, not against jar files.  This is because the unit tests depend on two &quot;shared component&quot; jar files, and my classloader can&apos;t seem to find the classes inside them when they are embedded inside another jar file (e.g. derbyTesting.jar).  They need to be jar files because they are two different versions of the same component and they need to be sealed.  An alternative approach is to keep them outside of derbyTesting but I was loathe to add the requirement for two more jar files in the classpath to run derbyall.&lt;/p&gt;

&lt;p&gt;svn status output:&lt;/p&gt;

&lt;p&gt;M      tools\ant\properties\dirs.properties&lt;br/&gt;
M      java\tools\org\apache\derby\impl\tools\sysinfo\Main.java&lt;br/&gt;
M      java\engine\org\apache\derby\impl\services\monitor\BaseMonitor.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\i18n\BundleFinder.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\i18n\MessageService.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\sanity\SanityManager.java&lt;br/&gt;
D      java\engine\org\apache\derby\iapi\services\sanity\SanityState.tmpl&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\sanity\AssertFailure.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\error\StandardException.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\error\ExceptionSeverity.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\reference\SQLState.java&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_de_DE.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_zh_CN.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_en.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_ja_JP.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_ko_KR.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_pt_BR.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_es.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_fr.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_zh_TW.properties&lt;br/&gt;
M      java\engine\org\apache\derby\loc\messages_it.properties&lt;br/&gt;
A      java\common&lt;br/&gt;
A      java\common\org&lt;br/&gt;
A      java\common\org\apache&lt;br/&gt;
A      java\common\org\apache\derby&lt;br/&gt;
A      java\common\org\apache\derby\common&lt;br/&gt;
A      java\common\org\apache\derby\common\i18n&lt;br/&gt;
A      java\common\org\apache\derby\common\i18n\MessageUtil.java&lt;br/&gt;
A      java\common\org\apache\derby\common\CommonInfo.java&lt;br/&gt;
A      java\common\org\apache\derby\common\SharedComponentInfo.java&lt;br/&gt;
A      java\common\org\apache\derby\common\sanity&lt;br/&gt;
A      java\common\org\apache\derby\common\sanity\SanityManager.java&lt;br/&gt;
A      java\common\org\apache\derby\common\sanity\SanityState.tmpl&lt;br/&gt;
A      java\common\org\apache\derby\common\sanity\SanityState.java&lt;br/&gt;
A      java\common\org\apache\derby\common\sanity\AssertFailure.java&lt;br/&gt;
A      java\common\org\apache\derby\common\CommonFeatures.java&lt;br/&gt;
A      java\common\org\apache\derby\common\error&lt;br/&gt;
A      java\common\org\apache\derby\common\error\ExceptionSeverity.java&lt;br/&gt;
A      java\common\org\apache\derby\common\error\ExceptionUtil.java&lt;br/&gt;
A      java\common\org\apache\derby\common\package.html&lt;br/&gt;
A      java\common\org\apache\derby\loc&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_es.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_fr.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_zh_TW.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_it.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_de_DE.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_zh_CN.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_en.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_ja_JP.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_ko_KR.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\common-messages_pt_BR.properties&lt;br/&gt;
A      java\common\org\apache\derby\loc\build.xml&lt;br/&gt;
A      java\common\build.xml&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\tools\build.xml&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\FeatureManagement_app.properties&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc1&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc1\TestSCInfo.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc1\TestSCFeatures.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc1\TestSharedClass.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\NewClass.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\TestSCInfo.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\TestSCFeatures.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\newPackage&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\newPackage\NewPackageClass.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\sc2\TestSharedClass.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\FeatureManagement.java&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\build.xml&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\tests\common\copyfiles.ant&lt;br/&gt;
M      java\testing\org\apache\derbyTesting\functionTests\tests\jdbcapi\build.xml&lt;br/&gt;
A      java\testing\org\apache\derbyTesting\functionTests\master\FeatureManagement.out&lt;br/&gt;
M      java\testing\build.xml&lt;br/&gt;
M      java\client\org\apache\derby\jdbc\ClientBaseDataSource.java&lt;br/&gt;
A      java\client\org\apache\derby\loc&lt;br/&gt;
A      java\client\org\apache\derby\loc\client-messages_en.properties&lt;br/&gt;
A      java\client\org\apache\derby\loc\build.xml&lt;br/&gt;
A      java\client\org\apache\derby\loc\client-messages.properties&lt;br/&gt;
A      java\client\org\apache\derby\client\i18n&lt;br/&gt;
A      java\client\org\apache\derby\client\i18n\ClientMessageUtil.java&lt;br/&gt;
M      java\client\org\apache\derby\client\ClientPooledConnection.java&lt;br/&gt;
M      java\client\org\apache\derby\client\am\Connection.java&lt;br/&gt;
A      java\client\org\apache\derby\client\am\SqlException2.java&lt;br/&gt;
M      java\client\org\apache\derby\client\am\SqlException.java&lt;br/&gt;
M      java\client\build.xml&lt;br/&gt;
M      build.xml&lt;/p&gt;</comment>
                            <comment id="12357094" author="rhillegas" created="Wed, 9 Nov 2005 08:08:04 +0000"  >&lt;p&gt;o Yes, please. Please move SQLState.java to common.&lt;/p&gt;

&lt;p&gt;o CommonFeatures doesn&apos;t seem to provide much value. Could it be merged into SharedComponentInfo?&lt;/p&gt;

&lt;p&gt;o I&apos;m curious about the catching of ShutdownException in MessageServices after calling MessageUtil.getCompleteMessage(). Do you understand how this exception is raised?&lt;/p&gt;

&lt;p&gt;o You might want to hold off on this submission until you check in my compatibility test patch which moves the JUnit tests under their own subdirectory in the code tree. That will avoid the nasty svn-moving of your tests.&lt;/p&gt;</comment>
                            <comment id="12358358" author="kmarsden" created="Wed, 23 Nov 2005 22:01:19 +0000"  >&lt;p&gt;Dan had mentioned in a thread on a different topic:&lt;br/&gt;
&quot;In addition most of the packages in derby.jar are now sealed, which&lt;br/&gt;
means that classes in a sealed package must be loaded from the same jar.&quot;&lt;/p&gt;

&lt;p&gt;I think this might be a problem for the code sharing proposal which relies on the ability of one jar to be able to load the class from the other jar if  the other jar is loaded first.    It seems we would get an error if the package was sealed.  &lt;/p&gt;</comment>
                            <comment id="12358384" author="davidvc" created="Thu, 24 Nov 2005 01:40:01 +0000"  >&lt;p&gt;I am aware of the package sealing issue.  The unit test I wrote actually has a test case that shows what package sealing does.  One way package sealing impacts things that new classes can not be loaded from a package where a class was already loaded from the old jar file &amp;#8211; it&apos;s another form of &quot;shadowing&quot;.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12415429" author="davidvc" created="Fri, 9 Jun 2006 05:08:46 +0100"  >&lt;p&gt;Now that the i18n work is pretty much done and the 10.1.3 release is&lt;br/&gt;
closed, I&apos;d like to revisit our beloved issue of code sharing.&lt;/p&gt;

&lt;p&gt;I have had time to think about this further, and believe it or not I&lt;br/&gt;
am warming to Kathey&apos;s proposed approach.  I&apos;d like to propose a&lt;br/&gt;
refinement to this here, and get your feedback.&lt;/p&gt;

&lt;p&gt;I&apos;d like to desribe the proposal in terms of an example.  Let&apos;s say&lt;br/&gt;
we have a class we want to share between derbyclient jar and&lt;br/&gt;
derby.jar, called DavidUtil.  Here&apos;s how I would share it.&lt;/p&gt;

&lt;p&gt;(a) Create the class under the shared package hierarchy (or move&lt;br/&gt;
    it if it is an existing class.  Yes, yes, I know it needs&lt;br/&gt;
    copyrights and javadoc &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;package org.apache.derby.shared.common;&lt;/p&gt;

&lt;p&gt;public class DavidUtil {&lt;br/&gt;
  public int foo(int a, int b) &lt;/p&gt;
{
     // code here
  }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;(b) Add an ant target that takes all classes under&lt;br/&gt;
org.apache.derby.shared and makes a copy of them under&lt;br/&gt;
org.apache.derby.shared.generated.client.  This would need&lt;br/&gt;
to be done prior to any compilation.&lt;/p&gt;

&lt;p&gt;Yes, I know the package name is a mouthful, but we really should&lt;br/&gt;
have the &quot;generated&quot; package name to make it clear this is generated&lt;br/&gt;
code.  The alternative is to add a comment, but then the line numbers&lt;br/&gt;
are out of sync between generated and original code, and this makes&lt;br/&gt;
debugging very difficult.&lt;/p&gt;

&lt;p&gt;If we also want to create shared classes for derbynet and&lt;br/&gt;
derbytools, we would create copies there too.   For example:&lt;/p&gt;

&lt;p&gt;package org.apache.derby.shared.generated.client.common;&lt;/p&gt;

&lt;p&gt;public class DavidUtil {&lt;br/&gt;
   public int foo(int a, int b) &lt;/p&gt;
{
      // code here
   }&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
==&lt;br/&gt;
package org.apache.derby.shared.generated.net.common;&lt;br/&gt;
&lt;br/&gt;
public class DavidUtil {&lt;br/&gt;
   public int foo(int a, int b) {
      // code here
   }
&lt;p&gt;}&lt;br/&gt;
==&lt;br/&gt;
package org.apache.derby.shared.generated.tools.common;&lt;/p&gt;

&lt;p&gt;public class DavidUtil {&lt;br/&gt;
   public int foo(int a, int b) &lt;/p&gt;
{
      // code here
   }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Although this needs to be tested and verified, The &apos;generated&apos; directory &lt;br/&gt;
would be marked as a directory to be ignored by subversion using the &lt;br/&gt;
svn:ignore property.  This way these files would not show up under &lt;br/&gt;
svn status as &quot;?&quot; and could not be checked in by accident.&lt;/p&gt;

&lt;p&gt;(c) In the engine code (e.g. the classes that go into derby.jar),&lt;br/&gt;
I import org.apache.derby.shared.common.DavidUtil.&lt;/p&gt;

&lt;p&gt;In the client code I import&lt;br/&gt;
org.apache.derby.shared.generated.client.common.DavidUtil&lt;/p&gt;

&lt;p&gt;and so on...&lt;/p&gt;

&lt;p&gt;(d) During runtime, the stack trace on the client will show&lt;br/&gt;
the generated class.  The line numbers should match because&lt;br/&gt;
we&apos;re not adding or removing any lines, just modifying the&lt;br/&gt;
package name.&lt;/p&gt;

&lt;p&gt;ADVANTAGES&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Meets all the requirements of shared code.  Each jar has a distinct&lt;br/&gt;
  and separate class.   There is no potential for shadowing and&lt;br/&gt;
  compatibility issues in mixed-version environments.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Simple to implement and fairly simple understand (my concern about&lt;br/&gt;
  the classloader solution has been its overall complexity and that it&lt;br/&gt;
  would require most developers to understand the subtleties of&lt;br/&gt;
  classloading to  be able to work with parts of Derby).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;DISADVANTAGES&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Potential of confusion for developers who try to modify&lt;br/&gt;
  generated code or add new classes to the generated packages.&lt;br/&gt;
  This is mitigated by the &quot;generated&quot; part of the package name&lt;br/&gt;
  and the fact that the generated directories are ignored by&lt;br/&gt;
  subversion.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Doesn&apos;t solve the more general problem of being able to include&lt;br/&gt;
  third-party jar files and share them between derby jar files&lt;br/&gt;
  in a mixed-version environment.  I would argue this&lt;br/&gt;
  is a different problem to solve and less urgent than sharing code&lt;br/&gt;
  within Derby itself.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Your thoughts are most appreciated.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12415437" author="rhillegas" created="Fri, 9 Jun 2006 05:30:43 +0100"  >&lt;p&gt;A small refinement:&lt;/p&gt;

&lt;p&gt;I&apos;d like to see the generated files go under a subdirectory parallel to classes and java. The generated subtree can be wholesale whacked when you clobber your workspace.&lt;/p&gt;</comment>
                            <comment id="12433234" author="davidvc" created="Thu, 7 Sep 2006 22:07:50 +0100"  >&lt;p&gt;Unassigning this for now, I am not able to work on this right now.&lt;/p&gt;</comment>
                            <comment id="12435901" author="rhillegas" created="Tue, 19 Sep 2006 16:41:42 +0100"  >&lt;p&gt;Moving to 10.2.2.0.&lt;/p&gt;</comment>
                            <comment id="12456134" author="rhillegas" created="Wed, 6 Dec 2006 17:36:00 +0000"  >&lt;p&gt;Move to 10.2.3.0.&lt;/p&gt;</comment>
                            <comment id="12456135" author="rhillegas" created="Wed, 6 Dec 2006 17:36:25 +0000"  >&lt;p&gt;Er, make that 10.3.0.0.&lt;/p&gt;</comment>
                            <comment id="12467591" author="fuzzylogic" created="Thu, 25 Jan 2007 20:38:22 +0000"  >&lt;p&gt;Unsetting Fix Version on unassigned issues.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="32645">DERBY-290</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12320517" name="DERBY-289.diff" size="192316" author="davidvc" created="Tue, 8 Nov 2005 05:22:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Jul 2005 09:05:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29476</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy13h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40213</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>