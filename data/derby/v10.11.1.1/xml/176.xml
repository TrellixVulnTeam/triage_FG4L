<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:10:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-176/DERBY-176.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-176] Derby throws ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.aced07c066x0102xca87x3319x00004aa5686e1 during execution of large query</title>
                <link>https://issues.apache.org/jira/browse/DERBY-176</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When executing a large query or oather large operations, Derby throws a java linkage exception.&lt;br/&gt;
This is because the generated byte code exceeds the JVM limits for method sizes constant pool entries etc, the amount of code in a conditional etc.  The attached repro demonstrates the problem but the problem can also occur for other operations that generate lots of byte code.  The repro is just a new functional test,&lt;br/&gt;
so should be copied to derbyTesting/functionTests/lang/largeCodeGen.java and run like&lt;br/&gt;
 java -Djvmflags=-Xmx512M org.apache.derbyTesting.harness.RunTest lang/largeCodeGen&lt;/p&gt;


&lt;p&gt;When this problem is fixed additional scenarios should be added to this test.&lt;/p&gt;

&lt;p&gt;ERROR XBCM1: Java linkage error thrown during load of &lt;br/&gt;
generated class org.apache.derby.exe.aced07c066x0102xca87x3319x00004aa5686e1.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:315)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(DatabaseClasses.java:162)&lt;br/&gt;
	at org.apache.derby.impl.services.bytecode.GClass.getGeneratedClass(GClass.java:59)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getGeneratedClass(ExpressionClassBuilder.java:920)&lt;br/&gt;
	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:270)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:432)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:107)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:688)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:118)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&amp;lt;init&amp;gt;(EmbedPreparedStatement20.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&amp;lt;init&amp;gt;(EmbedPreparedStatement30.java:62)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Driver30.java:92)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:675)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:519)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.main(largeCodeGen.java:86)&lt;br/&gt;
Exception in thread &quot;main&quot; &lt;/p&gt;
</description>
                <environment></environment>
        <key id="31093">DERBY-176</key>
            <summary>Derby throws ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.aced07c066x0102xca87x3319x00004aa5686e1 during execution of large query</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="djd">Daniel John Debrunner</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Mar 2005 23:12:23 +0000</created>
                <updated>Fri, 2 Nov 2007 15:43:02 +0000</updated>
                            <resolved>Fri, 2 Nov 2007 15:43:02 +0000</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.0.2.2</version>
                    <version>10.1.1.0</version>
                                    <fixVersion>10.1.3.2</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="61425" author="jackklebanoff" created="Thu, 24 Mar 2005 05:06:52 +0000"  >&lt;p&gt;I think that there are 3 approaches to solving the problem of the Derby code generator exceeding JVM class size limits:&lt;br/&gt;
1. Reduce the amount of code that is generated.&lt;br/&gt;
2. Split oversized generated methods into multiple methods.&lt;br/&gt;
3. Split oversized generated classes into multiple classes.&lt;br/&gt;
We may want (need) to use all three.&lt;/p&gt;

&lt;p&gt;We may be able to reduce the amount of generated code by looking for common sub-expressions in the optimized query tree and putting the code for them in separate methods. Or we may be able to reuse intermediate result sets. Perhaps just sharing code for equivalent ProjectResrictNodes and SubQueryNodes would be enough.&lt;/p&gt;

&lt;p&gt;Splitting generated classes may be difficult. Derby assumes that each statement only generates one class. It might be possible to put the byte code for the overflow classes into saved objects of the generated ExecPreparedStatement. The main generated class would load the byte code when needed.&lt;/p&gt;</comment>
                            <comment id="62227" author="kmarsden" created="Wed, 6 Apr 2005 09:00:59 +0100"  >&lt;p&gt;large code generation test&lt;/p&gt;</comment>
                            <comment id="62286" author="djd" created="Thu, 7 Apr 2005 03:16:53 +0100"  >&lt;p&gt;Kathey Marsden and myself made a number of changes in IBM&apos;s Cloudscape 5.1 codeline to make progress in this area and address an urgent customer issue. They fall into Jack&apos;s 1) and 2) categories, generate less code and split methods up into multiple methods. In addition some simple checks are made to ensure the structure of the class file is not corrupted by exceeding limits. These checks are made before handing the class off to the class loader/verifier.&lt;/p&gt;

&lt;p&gt;I&apos;ll migrate these changes to Derby&apos;s trunk and add notes for them in this bug.&lt;/p&gt;</comment>
                            <comment id="62384" author="djd" created="Fri, 8 Apr 2005 04:32:11 +0100"  >&lt;p&gt;svn revision 160426&lt;br/&gt;
Added checks when the generated class file&apos;s format is created to ensure the structure is not corrupted by writing truncated values. E.g. a constant pool count N with N &amp;gt;65535 now will throw an error rather than generate a class file with an apparent constant pool count of N % 65535.&lt;/p&gt;</comment>
                            <comment id="62388" author="djd" created="Fri, 8 Apr 2005 04:50:52 +0100"  >&lt;p&gt;svn revision 160429&lt;/p&gt;

&lt;p&gt;Reduce the number of constant pool entries in code generation by removing some uses of java fields.&lt;/p&gt;

&lt;p&gt;In the binary operator nodes code is generated like&lt;/p&gt;

&lt;p&gt;&amp;lt;left&amp;gt;.method(&amp;lt;left&amp;gt;, &amp;lt;right&amp;gt;)&lt;/p&gt;

&lt;p&gt;where &amp;lt;left&amp;gt; and &amp;lt;right&amp;gt; are arbitary expressions.&lt;br/&gt;
In this case &amp;lt;left&amp;gt; must only be evaluated once and the existing implementation used Java fields.&lt;/p&gt;

&lt;p&gt;DataValueDescriptor f34;&lt;/p&gt;

&lt;p&gt;f34 = &amp;lt;left&amp;gt;;&lt;/p&gt;

&lt;p&gt;f34.method(f34, &amp;lt;right&amp;gt;)&lt;/p&gt;

&lt;p&gt;The issue is that a field is not required, really a local variable is, and a field and its use will create three unique constant pool entries. However local variables are not supported by the byte code compiler currently.&lt;/p&gt;

&lt;p&gt;The stack based code generation allows the use of the stack through MethodBuilder.dup() method to evaluate &amp;lt;left&amp;gt; once and re-use the result.&lt;br/&gt;
E.g.&lt;/p&gt;

&lt;p&gt;&amp;lt;left&amp;gt;&lt;br/&gt;
dup&lt;br/&gt;
&amp;lt;right&amp;gt;&lt;/p&gt;

&lt;p&gt;leaves the stack as left,left,right which is the correct order for such a method call. The use of MethodBuilder.swap() allows the same pattern when &amp;lt;right&amp;gt; needs to be re-used in &amp;lt;right&amp;gt;.method(&amp;lt;left&amp;gt;, &amp;lt;right&amp;gt;)&lt;/p&gt;

&lt;p&gt;&amp;lt;right&amp;gt;&lt;br/&gt;
dup&lt;br/&gt;
&amp;lt;left&amp;gt;&lt;br/&gt;
swap&lt;/p&gt;

&lt;p&gt;leaves right,left,right on the stack.&lt;/p&gt;</comment>
                            <comment id="62393" author="djd" created="Fri, 8 Apr 2005 05:05:35 +0100"  >&lt;p&gt;A modified version of Kathey&apos;s test case has been committed into the trunk&lt;/p&gt;</comment>
                            <comment id="64088" author="kmarsden" created="Sat, 30 Apr 2005 06:19:06 +0100"  >&lt;p&gt;Not able to work on this right now so unassigning myself&lt;/p&gt;</comment>
                            <comment id="12359092" author="djd" created="Fri, 2 Dec 2005 07:44:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-176&quot; title=&quot;Derby throws ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.aced07c066x0102xca87x3319x00004aa5686e1 during execution of large query&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-176&quot;&gt;&lt;del&gt;DERBY-176&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-732&quot; title=&quot;ERROR XBCM1: Java linkage error thrown during load of generated class  for  query with large number of logical operators and substitution parameters.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-732&quot;&gt;&lt;del&gt;DERBY-732&lt;/del&gt;&lt;/a&gt; are most likely both instances where a SQL query blows some limit of the class file format.&lt;/p&gt;</comment>
                            <comment id="12359176" author="djd" created="Sat, 3 Dec 2005 04:59:10 +0000"  >&lt;p&gt;Other commits for this issue:&lt;/p&gt;

&lt;p&gt;160444 - Add pop() method to byte code compiler. (incorrect makred for Derby-167)&lt;/p&gt;

&lt;p&gt;160580 - Change generate fields to use the same name space as generated methods to reduce the number of constant pool entries created.&lt;/p&gt;

&lt;p&gt;160631 -Automatically handle a generated method exceeding the&lt;br/&gt;
byte code limit of 65,535 in limited cases of a method&lt;br/&gt;
with no parameters and whose stack depth drops to zero&lt;br/&gt;
during code generation. Solution is to generate sub methods&lt;br/&gt;
with the same signature and pass control to those methods.&lt;br/&gt;
The sub methods are private and hidden to any callers, who&lt;br/&gt;
just interact with the single top-level method.&lt;/p&gt;

&lt;p&gt;160932  - Reduce the number of code instructions generated for a putField() followed by an endStatement()&lt;br/&gt;
by providing a setField() method that sets a field with the top value of the stack but does not&lt;br/&gt;
leave the field&apos;s contents on the stack. The use of putField() mimicing the Java language field=value;&lt;br/&gt;
lead to many cases where the value on the stack was not required and immediately popped using endStatement().&lt;br/&gt;
This lead to two extra instructions per field assignment (dup and pop), providing a setField() removes the&lt;br/&gt;
need for the endStatement() as it never performs the dup.&lt;/p&gt;


</comment>
                            <comment id="12359697" author="kmarsden" created="Thu, 8 Dec 2005 13:27:49 +0000"  >&lt;p&gt;While we would like to continue to make progress on  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-176&quot; title=&quot;Derby throws ERROR XBCM1: Java linkage error thrown during load of generated class org.apache.derby.exe.aced07c066x0102xca87x3319x00004aa5686e1 during execution of large query&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-176&quot;&gt;&lt;del&gt;DERBY-176&lt;/del&gt;&lt;/a&gt;, there will likely always be some upper bound on the complexity of queries.  I think a new error message would help a lot in clarifying necessary action and  setting proper expectations for users.&lt;/p&gt;

&lt;p&gt;How about this?&lt;/p&gt;


&lt;p&gt;Statement  too complex.  The resulting java  byte code exceeds java class file format limit(s). Try  rewriting the query to remove complexity.  Eliminating  many duplicate expressions or breaking up the query and storing interim results in a temporary table  can often help resolve this error.   method:fillResultSet code_length (68224 &amp;gt; 6&lt;br/&gt;
5536) in generated class org.apache.derby.exe.ace5214067x0108x0775x104fxfffff2d773e3c&lt;/p&gt;

</comment>
                            <comment id="12359747" author="djd" created="Fri, 9 Dec 2005 01:52:47 +0000"  >&lt;p&gt;I have code that traps most limit execeed errors and throws a statement too complex error. I will submit this soon, I will check it in with wording similar to yours:&lt;/p&gt;

&lt;p&gt;Statement too complex.  Try rewriting the query to remove complexity. Eliminating many duplicate expressions or breaking up the query and storing interim results in a temporary table can often help resolve this error. &lt;/p&gt;

&lt;p&gt;I don&apos;t think the application developer cares that the Java class limits have  been execeed, that&apos;s an implementation detail. The exception will have a nested/chained exception that has the specific info on the class file.&lt;/p&gt;

&lt;p&gt;Coding this exception actually help me find the cause for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-732&quot; title=&quot;ERROR XBCM1: Java linkage error thrown during load of generated class  for  query with large number of logical operators and substitution parameters.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-732&quot;&gt;&lt;del&gt;DERBY-732&lt;/del&gt;&lt;/a&gt;, the method is not exceeding any limit but a branch offset with the method is greater than 32k. Branch offsets are a 16bit signed value, most other 16bit values in the class file are unsigned values.&lt;/p&gt;</comment>
                            <comment id="12429315" author="djd" created="Mon, 21 Aug 2006 02:16:14 +0100"  >&lt;p&gt;Changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-766&quot; title=&quot;Improve code generation to handle 5000 unions in a select the  union test  in largeCodeGen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-766&quot;&gt;&lt;del&gt;DERBY-766&lt;/del&gt;&lt;/a&gt; and under this bug ensured that a &quot;Query too complex&quot; exception  is thrown if  the resulting generated class will not be loadable by the JVM due to exceeding limits.&lt;/p&gt;</comment>
                            <comment id="12538116" author="kmarsden" created="Fri, 26 Oct 2007 22:55:57 +0100"  >&lt;p&gt;I received a request to backport this change to 10.1.  I will be looking at doing so incrementally so their are multiple checkins to 10.1 rather than one big change.  Please let me know if you have any concerns.&lt;/p&gt;</comment>
                            <comment id="12538138" author="kmarsden" created="Sat, 27 Oct 2007 00:32:08 +0100"  >&lt;p&gt;Reopen to backport to 10.1&lt;/p&gt;</comment>
                            <comment id="12539393" author="kmarsden" created="Thu, 1 Nov 2007 15:38:48 +0000"  >&lt;p&gt;After merging change 377609, I see a different error at 99,000 parameters which causes lose of the connection instead of the query too complex message.   Below is the trace.  I think this is an acceptable difference for 10.1,&lt;br/&gt;
since this limit is unlikely to be reached and the previous limit is 3400.  If this is acceptable I will just change the largeCodeGenTest to open a new connection after getting this failure at 99,000 parameters. up to 98,000 is fine.&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException: org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(CodeChunk.java:978)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.CodeChunk.getVariableStackDelta(CodeChunk.java:1030)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.CodeChunk.stackWordDelta(CodeChunk.java:964)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.CodeChunk.findMaxStack(CodeChunk.java:926)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.CodeChunk.complete(CodeChunk.java:781)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.services.bytecode.BCMethod.complete(BCMethod.java:237)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1437)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1249)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1300)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1249)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:109)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.ReadCursorNode.generate(ReadCursorNode.java:118)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:546)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:232)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:468)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:107)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:704)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.&amp;lt;init&amp;gt;(EmbedPreparedStatement.java:121)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.&amp;lt;init&amp;gt;(EmbedPreparedStatement20.java:82)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.&amp;lt;init&amp;gt;(EmbedPreparedStatement30.java:62)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(Driver30.java:92)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:682)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:526)&lt;/p&gt;

&lt;p&gt;	at org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.checkT0Query(largeCodeGen.java:97)&lt;/p&gt;

&lt;p&gt;	at org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testInClause(largeCodeGen.java:199)&lt;/p&gt;

&lt;p&gt;	at org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testInClause(largeCodeGen.java:177)&lt;/p&gt;

&lt;p&gt;	at org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.main(largeCodeGen.java:50)&lt;/p&gt;</comment>
                            <comment id="12539620" author="kmarsden" created="Fri, 2 Nov 2007 15:43:02 +0000"  >&lt;p&gt;Merged for this issue:&lt;br/&gt;
354826,358605,377609,378383&lt;/p&gt;

&lt;p&gt;Also merged fixes for &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-740&quot; title=&quot;Have BCMethod.cast() optimize the case when the requested cast is to the same Java type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-740&quot;&gt;&lt;del&gt;DERBY-740&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-739&quot; title=&quot;Reduce generated code required to access a parameter&amp;#39;s value&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-739&quot;&gt;&lt;del&gt;DERBY-739&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-738&quot; title=&quot;Initialize parameters within activation without using generated code.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-738&quot;&gt;&lt;del&gt;DERBY-738&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-921&quot; title=&quot;Support 32bit branch offsets for conditional logic in generated code.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-921&quot;&gt;&lt;del&gt;DERBY-921&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-742&quot; title=&quot;Use a single result BooleanDataValue for a boolean expression in class generation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-742&quot;&gt;&lt;del&gt;DERBY-742&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-766&quot; title=&quot;Improve code generation to handle 5000 unions in a select the  union test  in largeCodeGen&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-766&quot;&gt;&lt;del&gt;DERBY-766&lt;/del&gt;&lt;/a&gt;  &lt;br/&gt;
which were needed to complete change.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12326197">DERBY-732</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12326197">DERBY-732</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="19498" name="largeCodeGen.java" size="4125" author="kmarsden" created="Wed, 6 Apr 2005 09:00:48 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="31609">DERBY-216</subtask>
                            <subtask id="12326794">DERBY-766</subtask>
                            <subtask id="12328541">DERBY-921</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Mar 2005 05:06:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21819</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10u7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39786</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>