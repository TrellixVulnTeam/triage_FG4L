<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:16:08 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3813/DERBY-3813.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3813] Derby tests for the existance of BigDecimal methods toPlainString and bdPrecison but does not check if they were found before using them.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3813</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I received the following problem report:&lt;/p&gt;

&lt;p&gt;Having failures running with our VM that is a subset of Java 5.   Failure is with the handling of the BigDecimal class in the org.apache.derby.iapi.types.SQLDecimal class.  &lt;/p&gt;

&lt;p&gt;The SQLDecimal class does reflection to determine if the methods toPlainString and bdPrecison are present or not&lt;br/&gt;
 private static final Method toPlainString;&lt;br/&gt;
    private static final Method bdPrecision;&lt;br/&gt;
    static {&lt;br/&gt;
        Method m;&lt;br/&gt;
        try &lt;/p&gt;
{
            m = BigDecimal.class.getMethod(&quot;toPlainString&quot;, null);
        }
&lt;p&gt; catch (NoSuchMethodException e) &lt;/p&gt;
{
            m = null;
        }&lt;br/&gt;
        toPlainString = m;&lt;br/&gt;
        try {
            m = BigDecimal.class.getMethod(&quot;precision&quot;, null);
        } catch (NoSuchMethodException e) {            m = null;        }
&lt;p&gt;        bdPrecision = m;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;however, when it comes time to use them, it does not check whether it found the methods, but rather the JVM level, equating JVM specification level with method existence&lt;/p&gt;

&lt;p&gt;	public String	getString()&lt;br/&gt;
	{&lt;br/&gt;
		BigDecimal localValue = getBigDecimal();&lt;br/&gt;
		if (localValue == null)&lt;br/&gt;
			return null;&lt;br/&gt;
		else if (JVMInfo.JDK_ID &amp;lt; JVMInfo.J2SE_15)&lt;br/&gt;
			return localValue.toString();&lt;br/&gt;
        else&lt;br/&gt;
        {&lt;br/&gt;
            // use reflection so we can still compile using JDK1.4&lt;br/&gt;
            // if we are prepared to require 1.5 to compile then this can be a direct call&lt;br/&gt;
            try &lt;/p&gt;
{
                return (String) toPlainString.invoke(localValue, null);
            }
&lt;p&gt; catch (IllegalAccessException e) {&lt;/p&gt;


&lt;p&gt;and&lt;br/&gt;
	private static int getWholeDigits(BigDecimal decimalValue)&lt;br/&gt;
	{&lt;br/&gt;
        /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;if ONE &amp;gt; abs(value) then the number of whole digits is 0&lt;br/&gt;
         */&lt;br/&gt;
        decimalValue = decimalValue.abs();&lt;br/&gt;
        if (ONE.compareTo(decimalValue) == 1)
        {
            return 0;
        }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        if (JVMInfo.JDK_ID &amp;gt;= JVMInfo.J2SE_15)&lt;br/&gt;
		{&lt;br/&gt;
	        // use reflection so we can still compile using JDK1.4&lt;br/&gt;
			// if we are prepared to require 1.5 to compile then this can be a&lt;br/&gt;
			// direct call&lt;br/&gt;
			try {&lt;br/&gt;
				// precision is the number of digits in the unscaled value,&lt;br/&gt;
				// subtracting the scale (positive or negative) will give the&lt;br/&gt;
				// number of whole digits.&lt;br/&gt;
				int precision = ((Integer) bdPrecision.invoke(decimalValue,&lt;br/&gt;
						null)).intValue();&lt;br/&gt;
				return precision - decimalValue.scale();&lt;/p&gt;

&lt;p&gt;Since the JVM is claiming 1.5 specification, the code assumes the methods exist,  and result in NullPointerExceptions at the low level Derby class, resulting in SQLExceptions thrown to the caller.   &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; ***Created table: dish&lt;br/&gt;
***Created table: VNMEDICALRECORD&lt;br/&gt;
Fail to make the query to database:&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLDecimal.getString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.types.DataType.getTraceString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericParameter.toString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericParameterValueSet.toString(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericStatementContext.appendErrorInfo(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)&lt;br/&gt;
        at com.ibm.rcp.samples.derby.Derby.updateDB(Derby.java:175)&lt;br/&gt;
        at com.ibm.rcp.samples.derby.Derby.run(Derby.java:89)&lt;br/&gt;
        at java.lang.Thread.run(Unknown Source)&lt;br/&gt;
Fail to close:&lt;br/&gt;
java.sql.SQLException: Cannot issue rollback in a nested connection when there is a pending operation in the parent connection.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.close(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.close(Unknown Source)&lt;br/&gt;
        at com.ibm.rcp.samples.derby.Derby.updateDB(Derby.java:258)&lt;br/&gt;
        at com.ibm.rcp.samples.derby.Derby.run(Derby.java:89)&lt;br/&gt;
        at java.lang.Thread.run(Unknown Source)&lt;br/&gt;
Caused by: ERROR X0Y67: Cannot issue rollback in a nested connection when there is a pending operation in the parent connection.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doRollback(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.userRollback(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.rollback(Unknown Source)&lt;br/&gt;
        ... 5 more&lt;/p&gt;


&lt;p&gt;Making the following change would fix the problem of running on our VM&lt;br/&gt;
Instead of this test&lt;br/&gt;
        if (JVMInfo.JDK_ID &amp;gt;= JVMInfo.J2SE_15)&lt;br/&gt;
test if (toPlainString == null), or if (bdPrecision == null) or equivalent, this should achieved the same results&lt;/p&gt;
</description>
                <environment>Using a VM that is a subset of Java 5 without full BigDecimal support</environment>
        <key id="12401523">DERBY-3813</key>
            <summary>Derby tests for the existance of BigDecimal methods toPlainString and bdPrecison but does not check if they were found before using them.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="stan">Stan Bradbury</reporter>
                        <labels>
                    </labels>
                <created>Sat, 2 Aug 2008 01:46:01 +0100</created>
                <updated>Fri, 21 Jan 2011 17:52:05 +0000</updated>
                            <resolved>Fri, 8 Aug 2008 04:47:06 +0100</resolved>
                                    <version>10.3.3.0</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12619709" author="kmarsden" created="Mon, 4 Aug 2008 22:15:29 +0100"  >&lt;p&gt;Here is some links with info on the jvm in question.&lt;br/&gt;
Understanding the jclDekstop JRE:  &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.tools.doc.appdev/devapps_understandingthejcldesktopjre.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.tools.doc.appdev/devapps_understandingthejcldesktopjre.html&lt;/a&gt;&lt;br/&gt;
Javadoc - overview: &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.jcl.desktop.javadoc/doc/overview-summary.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.jcl.desktop.javadoc/doc/overview-summary.html&lt;/a&gt;&lt;br/&gt;
Javadoc - differences between jclDesktop and Java 5.0: &lt;a href=&quot;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.jcl.desktop.javadoc/jclDesktop-J2SE50-Differences.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://publib.boulder.ibm.com/infocenter/ledoc/v6r11/topic/com.ibm.rcp.jcl.desktop.javadoc/jclDesktop-J2SE50-Differences.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll download the trial version and see if I can reproduce the problem.&lt;/p&gt;</comment>
                            <comment id="12619940" author="kmarsden" created="Tue, 5 Aug 2008 17:10:32 +0100"  >&lt;p&gt;Here is a patch to correct this issue.  I reproduced the NPE with the JVM in question and verified that this fixes it.  I ran suites.All and derbyall on weme 6.1, suites.All on jdk142.  Still need to run more tests, but here is the patch for review.   &lt;/p&gt;
</comment>
                            <comment id="12620315" author="kmarsden" created="Wed, 6 Aug 2008 17:50:32 +0100"  >&lt;p&gt;I  plan to go ahead and check this in and backport to 10.4 and 10.3.  I ran suites.All and derbyall with weme 6.1, jdk142, and jdk 1.6.  I ran the repro with the jvm in question and saw the NullPointerException and saw it run clean with the fix, so this is likely to fix the problem for this particular case.  That doesn&apos;t say anything for how Derby will run in general against a 1.5 subset.     &lt;/p&gt;
</comment>
                            <comment id="12620789" author="blebert" created="Fri, 8 Aug 2008 00:32:01 +0100"  >&lt;p&gt;What are the reasons you go through reflection to use toPlainString() and precision() if in the Java 1.4 case toString() and your code to determine the precision seem to be just fine?&lt;/p&gt;</comment>
                            <comment id="12620826" author="kmarsden" created="Fri, 8 Aug 2008 04:47:06 +0100"  >&lt;p&gt;Committed fix to trunk, 10.4 and 10.5 codeline.  Dan do you know the answer to Berthold&apos;s question?&lt;/p&gt;
</comment>
                            <comment id="12620964" author="djd" created="Fri, 8 Aug 2008 16:57:05 +0100"  >&lt;p&gt;The issue is that the format of the value issued by toString() changed from Java 1.4 to 1.5, an unusual incompatibility introduced into java.&lt;/p&gt;

&lt;p&gt;Thus the code to determine precision from toString() works in 1.4 but will not work in 1.5, would have to use toPlainString() instead, but since 1.5 introduced a precision() method it makes most sense to use that in 1.5.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12387574" name="DERBY-3813_diff.txt" size="827" author="kmarsden" created="Tue, 5 Aug 2008 17:10:32 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 4 Aug 2008 21:15:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23856</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0lbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37271</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>