<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:53 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-801/DERBY-801.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-801] Allow parallel access to data files.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-801</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby currently serializes accesses to a data file.  For example, the&lt;br/&gt;
implementation of RAFContainer.readPage is as follows:&lt;/p&gt;

&lt;p&gt;    synchronized (this) &lt;/p&gt;
{  // &apos;this&apos; is a FileContainer, i.e. a file object
        fileData.seek(pageOffset);  // fileData is a RandomAccessFile
        fileData.readFully(pageData, 0, pageSize);
    }

&lt;p&gt;I have experiemented with a patch where I have introduced several file&lt;br/&gt;
descriptors (RandomAccessFile objects) per RAFContainer.  These are&lt;br/&gt;
used for reading.  The principle is that when all readers are busy, a&lt;br/&gt;
readPage request will create a new reader.  (There is a maximum number&lt;br/&gt;
of readers.)  With this patch, throughput was improved by 50% on&lt;br/&gt;
linux.  For more discussion on this, see&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Derby-I-O-issues-during-checkpointing-t473523.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Derby-I-O-issues-during-checkpointing-t473523.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The challenge with the suggested approach is to make a mechanism to&lt;br/&gt;
limit the number of open file descpriptors.  Mike Matrigali has&lt;br/&gt;
suggested to use the existing CacheManager infrastructure for this&lt;br/&gt;
purpose.  For a discussion on that, see:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/new-uses-for-basic-services-cache---looking-for-advice-t756863.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/new-uses-for-basic-services-cache---looking-for-advice-t756863.html&lt;/a&gt;&lt;/p&gt;
</description>
                <environment>Any</environment>
        <key id="12327421">DERBY-801</key>
            <summary>Allow parallel access to data files.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andersmo">Anders Morken</assignee>
                                    <reporter username="oysteing">&#216;ystein Gr&#248;vlen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 Jan 2006 19:43:30 +0000</created>
                <updated>Mon, 29 Jun 2009 15:41:38 +0100</updated>
                            <resolved>Wed, 15 Nov 2006 15:55:54 +0000</resolved>
                                    <version>10.0.2.0</version>
                    <version>10.0.2.1</version>
                    <version>10.1.1.0</version>
                    <version>10.1.2.1</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12413109" author="andersmo" created="Wed, 24 May 2006 21:08:34 +0100"  >&lt;p&gt;NIO-RAFContainer-v1.patch is an experimental patch using the java.nio (New IO) framework to perform concurrent reads and writes to the same file without mutual exclusion. It passes storeall for me with Sun Java 1.4.2_09 on Linux, but needs some cleanup and refinement - and I don&apos;t even know if it actually helps performance yet. =)&lt;/p&gt;</comment>
                            <comment id="12413541" author="andersmo" created="Sat, 27 May 2006 06:06:18 +0100"  >&lt;p&gt;I&apos;ve found a benchmark to test this patch with, and quite frankly I&apos;m not seeing any difference in throughput between my patch and the original at all. &lt;br/&gt;
I&apos;ve tested on a 4x400MHz Sun Enterprise 450 with a 10-disk ZFS raid0 of old disks for data and logs and my own single-cpu 2,4GHz Athlon64 with a two disk raid0 for data and a single disk for logs.&lt;/p&gt;

&lt;p&gt;Anyway, I think I&apos;ll need to work a bit harder on making more of the RAFContainer methods called by readPage and writePage thread safe, so we can ditch more of the synchronization still left in them. &#216;ystein, don&apos;t waste too much time on testing this patch yet, it needs more work. =)&lt;/p&gt;</comment>
                            <comment id="12413841" author="oysteing" created="Tue, 30 May 2006 22:44:45 +0100"  >&lt;p&gt;I have run our tpc-b like benchmark on with and without your patch on a 2-CPU opteron box with 2 local disks running Linux. &lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;

&lt;p&gt;Without patch:  Throughput: 70 tps.  Max response time: 47.8 seconds&lt;br/&gt;
With patch: Throughput: 106 tps. Max response time: 4.5 seconds&lt;/p&gt;

&lt;p&gt;All tests were run on the same database (17.5 GB) with a 500 MB page cache.   For each code version I ran 2 tests each lasting 1 hour.&lt;/p&gt;

&lt;p&gt;I think this looks very good.  It increases throughput with 50% and reduces the max response time with 90%.  I think this is comparable to the results I saw with multiple file descriptors per file.  However, your solution is much cleaner.  Do think much work is remaining on this patch to make it ready for production?&lt;/p&gt;
</comment>
                            <comment id="12413925" author="andersmo" created="Wed, 31 May 2006 06:29:49 +0100"  >&lt;p&gt;Ooh, very cool to see those numbers. Thanks for testing it despite my&lt;br/&gt;
pessimism. I probably haven&apos;t been running the benchmark I found&lt;br/&gt;
floating around the net on a big enough scale - while I have generated a&lt;br/&gt;
16.5 GB database, I haven&apos;t been patient enough to run the tests&lt;br/&gt;
properly. =)&lt;/p&gt;

&lt;p&gt;Off the top of my head, things that need fixing are:&lt;/p&gt;

&lt;p&gt;1) The class loading/initialization tricks in BaseDataFileFactory -&lt;br/&gt;
there&apos;s no need to do all that reflection every time we open a&lt;br/&gt;
container. Could probably be done in a static initializer, the boot&lt;br/&gt;
method or a constructor.  (Which one is appropriate? The boot method?)&lt;/p&gt;

&lt;p&gt;2) A couple of hackish casts in the wrapping methods that retrieve the&lt;br/&gt;
FileChannel object when the Container&apos;s identity is set. Dunno if these&lt;br/&gt;
should be left in or we should change the StorageRandomAccessFile&lt;br/&gt;
interface to extend java.io.RandomAccessFile? Both the two&lt;br/&gt;
implementations are extensions of java.io.RandomAccessFile, so the &quot;this&lt;br/&gt;
cast works&quot; assumption is pretty safe (as well as defensively&lt;br/&gt;
implemented) now, but assumption is the mother of all **ck-ups? =)&lt;/p&gt;

&lt;p&gt;3) Handling exceptions from FileChannel properly. The current code&lt;br/&gt;
handles IOExceptions by padding the file and trying again. I have no&lt;br/&gt;
idea if the pad-the-file trick is of any use at all with FileChannel -&lt;br/&gt;
it was simply retained from the original implementation. Maybe padFile&lt;br/&gt;
should be refitted for FileChannel as well?&lt;/p&gt;

&lt;p&gt;3.5) There&apos;s probably a bug in the original implementation of&lt;br/&gt;
RAFContainer#writePage(): If the catch(IOException e) &lt;/p&gt;
{...try again...}
&lt;p&gt;path is executed, updatePageArray() is not called, so modifications such&lt;br/&gt;
as adding the container header to the first page will be done (unless it&lt;br/&gt;
was done before the IOException was thrown) - and perhaps a security&lt;br/&gt;
issue: the page written will not be encrypted. The fact that this hasn&apos;t&lt;br/&gt;
been discovered by encryption tests is probably an indicator that this&lt;br/&gt;
codepath doesn&apos;t succeed where the first attempt failed very often.&lt;br/&gt;
Anyway, I&apos;ll make a separate Jira issue for this.&lt;/p&gt;

&lt;p&gt;4) Skip more synchronization? Low priority, but I think there&apos;s a few&lt;br/&gt;
cases where one or more synchronizations could be merged into one block&lt;br/&gt;
or removed altogether - but thread safety is a delicate matter.&lt;/p&gt;

&lt;p&gt;5) And last but not least, anything else code review turns up, of&lt;br/&gt;
course. =)&lt;/p&gt;

&lt;p&gt;I&apos;ll see if I have some time to work on this later this week. Thanks for&lt;br/&gt;
the help, &#216;ystein. =)&lt;/p&gt;</comment>
                            <comment id="12424661" author="andersmo" created="Mon, 31 Jul 2006 22:12:40 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v2.patch is what I&apos;ve got now. It&apos;s not anything very new since the previous patch, but it&apos;s a bit cleaner - and I&apos;ve spent a lot of time pondering if what I&apos;ve done here is safe. I think it mostly is. I&apos;m sorry this has taken such an awful lot of time - I&apos;ve been very busy with my day job this summer, and I haven&apos;t really had the time to sit down and do any proper work on this. Anyway, except for number 2. in my comment above, I think I&apos;ve mostly addressed what I worried most about in the last patch. I&apos;d appreciate any comments and suggestions for further improvement on this one. It passes storeall except for store/TransactionTable.sql which also fails in a clean trunk checkout. Thanks! =)&lt;/p&gt;</comment>
                            <comment id="12429015" author="knutanders" created="Fri, 18 Aug 2006 14:36:27 +0100"  >&lt;p&gt;Hi Anders,&lt;/p&gt;

&lt;p&gt;Thank you for working on this issue! I have looked at your patch, and&lt;br/&gt;
my impression is that your approach looks good and complete. A couple&lt;br/&gt;
of comments and questions follows.&lt;/p&gt;

&lt;p&gt;First to your questions in JIRA and in the comments:&lt;/p&gt;

&lt;p&gt;1) I don&apos;t think casting dataFile to RandomAccessFile is such an ugly&lt;br/&gt;
   hack. You check that it is an instance of RandomAccessFile before&lt;br/&gt;
   you cast it, and fall back to the old behaviour if it is not. Seems&lt;br/&gt;
   perfectly safe to me.&lt;/p&gt;

&lt;p&gt;   If you&apos;re really determined to clean up the interfaces, I would&lt;br/&gt;
   suggest that the implementations of StorageRandomAccessFile&lt;br/&gt;
   contained a RandomAccessFile instance instead of extending the&lt;br/&gt;
   class. Then the StorageRandomAccessFile interface could be changed&lt;br/&gt;
   to provide a FileChannel-like abstraction. In that case, there&lt;br/&gt;
   would be only one implementation of RAFContainer (and it would look&lt;br/&gt;
   very much like your RAFContainer4), but the implementations of&lt;br/&gt;
   StorageRandomAccessFile would have to differ between different VMs&lt;br/&gt;
   (that is, on jvm&amp;gt;=1.4 they would use FileChannel under the hood, on&lt;br/&gt;
   jvm 1.3 they would pretend that they did, but actually serialize&lt;br/&gt;
   reads and writes).&lt;/p&gt;

&lt;p&gt;2) In a comment to a try/finally statement where the finally clause&lt;br/&gt;
   only contains debug code, you write that you hope the compiler will&lt;br/&gt;
   optimize it away. I think this is a reasonable expectation.&lt;/p&gt;

&lt;p&gt;Then to my own comments:&lt;/p&gt;

&lt;p&gt;3) I&apos;m not sure the access to needsSync is thread safe even though you&lt;br/&gt;
   have declared it as volatile. All accesses to it in RAFContainer&lt;br/&gt;
   are synchronized on the RAFContainer instance, but the one in&lt;br/&gt;
   RAFContainer4 is not. I think this can lead to race conditions,&lt;br/&gt;
   such as:&lt;/p&gt;

&lt;p&gt;     Thread 1 is invoking RAFContainer.clean() which calls&lt;br/&gt;
     writeRAFHeader() and clearDirty() in a synchronized block.&lt;/p&gt;

&lt;p&gt;     At the same time, thread 2 is executing RAFContainer4.writePage()&lt;br/&gt;
     which contains the assignment &quot;needsSync = true&quot; without any&lt;br/&gt;
     synchronization.&lt;/p&gt;

&lt;p&gt;   It is possible that needsSync is assigned to true after thread 1&lt;br/&gt;
   invokes writeRAFHeader() but before it invokes clearDirty(). Since&lt;br/&gt;
   clearDirty() sets needsSync to false, the second thread&apos;s request&lt;br/&gt;
   for syncing disappears.&lt;/p&gt;

&lt;p&gt;   If the assignment were changed to&lt;br/&gt;
      synchronized (this) &lt;/p&gt;
{ needsSync = true; }
&lt;p&gt;   I think it would be thread safe (there would be no way to change&lt;br/&gt;
   the value of needsSync between writeRAFHeader() and clearDirty()).&lt;/p&gt;

&lt;p&gt;4) Is the synchronization in RAFContainer4.updatePageArray() needed?&lt;br/&gt;
   There is no synchronization in RAFContainer.updatePageArray(). To&lt;br/&gt;
   me, it seems like RAFContainer.updatePageArray() could be used&lt;br/&gt;
   directly (but you&apos;ll have to check whether the database is&lt;br/&gt;
   encrypted and allocate a new encryption buffer if it is). Is there&lt;br/&gt;
   a particular reason why RAFContainer4 needs its own&lt;br/&gt;
   updatePageArray()?&lt;/p&gt;

&lt;p&gt;5) Should there have been iosInProgress++ and iosInProgress-- in the&lt;br/&gt;
   &quot;if (syncPage)&quot; part of RAFContainer4.writePage() too?&lt;/p&gt;

&lt;p&gt;6) The two new java files added by your patch use a mix of tabs and&lt;br/&gt;
   spaces as indentation character. It would be better if they&lt;br/&gt;
   consistently used spaces. And extra bonus if none of the lines&lt;br/&gt;
   exceed 80 characters. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;7) Apache has decided that we should use another licence notice in the&lt;br/&gt;
   file headers. You could just copy the new text from another file&lt;br/&gt;
   (you might need to run &apos;svn up&apos; since this was changed recently).&lt;/p&gt;

&lt;p&gt;8) The RAFContainer4 class and the RAFContainerFactory class could be&lt;br/&gt;
   package protected, not public.&lt;/p&gt;

&lt;p&gt;9) In RAFContainer4, ourChannel and iosInProgress could be private.&lt;/p&gt;

&lt;p&gt;10) In RAFContainerFactory, the comment to rafContainerConstructor&lt;br/&gt;
    says &quot;Immutable, initialized by constructor.&quot; Since this is the&lt;br/&gt;
    case, I would prefer that it was made explicit in the code by&lt;br/&gt;
    declaring it as final. And it could be made private (and maybe&lt;br/&gt;
    static).&lt;/p&gt;

&lt;p&gt;11) RAFContainer.padFile() was changed from private to protected, but&lt;br/&gt;
    that is not needed since padFile() isn&apos;t used in RAFContainer4.&lt;/p&gt;

&lt;p&gt;12) Javadoc for RAFContainer4.writeFully() says &quot;readFully&quot; instead of&lt;br/&gt;
    &quot;writeFully&quot;.&lt;/p&gt;

&lt;p&gt;13) The javadocs for the classes look great! If you could add &amp;lt;p&amp;gt;&lt;br/&gt;
    between the paragraphs, they would look great after they have been&lt;br/&gt;
    transformed into HTML files as well. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;14) RAFContainerFactory.newRAFContainer() could be written more&lt;br/&gt;
    compactly if &quot;return new RAFContainer(factory);&quot; were moved out of&lt;br/&gt;
    the catch clause and the else clause. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;With the exception of 3 and 4, these comments are really minor&lt;br/&gt;
nits. (I was in a picky mood today, sorry! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ). You have done a great&lt;br/&gt;
job! Thank you very much!&lt;/p&gt;</comment>
                            <comment id="12429018" author="knutanders" created="Fri, 18 Aug 2006 15:01:01 +0100"  >&lt;p&gt;When this fix gets into the codeline, the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-733&quot; title=&quot;Starvation in RAFContainer.readPage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-733&quot;&gt;&lt;del&gt;DERBY-733&lt;/del&gt;&lt;/a&gt; could be backed out.&lt;/p&gt;</comment>
                            <comment id="12430260" author="andersmo" created="Thu, 24 Aug 2006 15:50:13 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v3.patch is a cleaned up version of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v2.patch.&lt;/p&gt;

&lt;p&gt;First off, thanks to Knut Anders for a thorough review - I appreciate it, even the &lt;br/&gt;
nitpicking. Part of my motivation for doing this is to get rid of my bad habits. =)&lt;/p&gt;

&lt;p&gt;Now, about this patch - I&apos;ll just reply to KAH&apos;s comments in the order they appeared.&lt;/p&gt;

&lt;p&gt;1) I didn&apos;t particularly feel like modifying the interfaces in this patch. &lt;br/&gt;
   Incremental development, right? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Maybe we should stick a note in JIRA about it.&lt;/p&gt;

&lt;p&gt;   The problem with the instanceof check is that RAFContainer4 will fall back to old&lt;br/&gt;
   behavior on tests that utilize the functionTests/util/corruptio/CorruptRandomAccessFile&lt;br/&gt;
   class to simulate a broken file, and thus it won&apos;t be tested there. May not really be an&lt;br/&gt;
   issue now, but could be one in a similar case later. Maybe I&apos;m just paranoid. =)&lt;/p&gt;

&lt;p&gt;2) OK =)&lt;/p&gt;

&lt;p&gt;3) Good point, fixed.&lt;/p&gt;

&lt;p&gt;4) updatePageArray() was only called from within a synchronized block before, so I&lt;br/&gt;
   didn&apos;t trust it to be MT-safe. To make the fast path lock-free I moved the synchronization&lt;br/&gt;
   inside the if/else blocks. Could be removed if you&apos;re sure it&apos;s safe? =)&lt;/p&gt;

&lt;p&gt;5-14) Thanks, fixed. =)&lt;/p&gt;

&lt;p&gt;I&apos;ve tried to make sure the code adheres to the Java Coding Conventions now. I made one&lt;br/&gt;
exception (hopefully for the better): after a method head/if condition has been broken into multiple&lt;br/&gt;
lines I&apos;ve used a newline before the { to make it easier to spot where the method head ends and &lt;br/&gt;
the body starts. Should be quick to fix if you disagree with me, anyway. =)&lt;/p&gt;</comment>
                            <comment id="12430262" author="andersmo" created="Thu, 24 Aug 2006 15:54:28 +0100"  >&lt;p&gt;Oh, and yes, it still passes tests. storeall ran flawlessly, derbyall failed in the derbynetmats suite&apos;s jdbcapi/checkDriver.java test because it got a &quot;connection refused&quot; error when connecting. Hopefully unrelated. =)&lt;/p&gt;</comment>
                            <comment id="12430721" author="knutanders" created="Sat, 26 Aug 2006 11:08:44 +0100"  >&lt;p&gt;Thanks for addressing my comments, Anders. I see your point about&lt;br/&gt;
CorruptRandomAccessFile, but that is a test issue which could be&lt;br/&gt;
addressed later.&lt;/p&gt;

&lt;p&gt;I still think it would be safe to use the old, unsynchronized&lt;br/&gt;
updatePageArray(). It is true that it is called from within a&lt;br/&gt;
synchronized block in RAFContainer.writePage(), but it is also called&lt;br/&gt;
with no synchronization in RAFContainer.privBackupContainer(). If you&lt;br/&gt;
look at privBackupContainer(), you&apos;ll see that the page is latched&lt;br/&gt;
before the call to updatePageArray(), and I think it is safe to assume&lt;br/&gt;
that the page is latched before a call to readPage() or writePage() as&lt;br/&gt;
well.&lt;/p&gt;

&lt;p&gt;One more question: Is it possible that the container enters the&lt;br/&gt;
committed drop state while RAFContainer4.writePage() is executing? If&lt;br/&gt;
yes, what are the consequences?&lt;/p&gt;

&lt;p&gt;I haven&apos;t figured out yet why the original code checks the value&lt;br/&gt;
returned by getCommittedDropState() in writePage(), but only has an&lt;br/&gt;
assert in readPage().&lt;/p&gt;</comment>
                            <comment id="12434281" author="andersmo" created="Tue, 12 Sep 2006 22:31:43 +0100"  >&lt;p&gt;Thanks again for your review and comments, Knut Anders, I appreciate it. Sorry for the long delay, but I&apos;ve gotten busy with my autumn project - incidentally it&apos;s related to your work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1704&quot; title=&quot;Allow more concurrency in the lock manager&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1704&quot;&gt;&lt;del&gt;DERBY-1704&lt;/del&gt;&lt;/a&gt;. =)&lt;/p&gt;

&lt;p&gt;Now, you&apos;ve convinced me regarding updatePageArray, I&apos;ve removed it from the patch. =)&lt;/p&gt;

&lt;p&gt;Regarding writePage() while the container is in the committedDrop state, I think it can happen in two cases: Somebody&apos;s writing to the container without obeying the lock protocols in Derby - or the cache is cleaning out dirty pages it is holding to the container.&lt;/p&gt;

&lt;p&gt;According to  BaseDataFileFactory#dropContainer(), the Container is locked in container exclusive mode while it is being closed and dropped. I haven&apos;t investigated the cache to see if it checks any such locks, but I presume it relies on it&apos;s clients to have the appropriate locks before writing to the container through the cache. &lt;/p&gt;

&lt;p&gt;Since the original check for the commited drop state just makes writes to a committed dropped container a noop, I figure we can do that if somebody races in and closes the container between the first check and the actual write as well - so I&apos;ve added a little exception handling which hopefully does the Right Thing. Comments or better suggestions welcome, of course.&lt;/p&gt;

&lt;p&gt;So, here we go, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v4.patch. Hit it. Both storeall and encryptionAll passed before I added the exception handling mentioned above, and storeall passed just great on the attached patch as well. =)&lt;/p&gt;</comment>
                            <comment id="12434420" author="knutanders" created="Wed, 13 Sep 2006 13:13:17 +0100"  >&lt;p&gt;Thank you, Anders! I think the patch looks very good, and unless someone objects within a couple of days, I will commit it. Since the patch touches such a critical part of the system, I don&apos;t think we should port it to 10.2 this late in the release process.&lt;/p&gt;

&lt;p&gt;Derbyall ran cleanly on Solaris 10 x86, Sun JVM 1.5.0.&lt;/p&gt;</comment>
                            <comment id="12434613" author="tsuresh" created="Thu, 14 Sep 2006 09:42:45 +0100"  >&lt;p&gt;Thanks for working on this issue, Anders. I really like your solution to solve&lt;br/&gt;
this issue. Patch is very good, I have only few minor comments/questions.&lt;br/&gt;
 I am really sorry  for not reviewing it sooner. &lt;/p&gt;


&lt;p&gt;RAFContainerFactory.java&lt;br/&gt;
------------------------&lt;/p&gt;

&lt;p&gt;Logic in this new class seems to be deciding whether to load RafContainer.java or&lt;br/&gt;
the RafContainer4.java based on the JVM.  I am not sure, if  this logic is&lt;br/&gt;
necessary here. Did you consider using basic services to load the java classes &lt;br/&gt;
specific to a JVM ?&lt;/p&gt;

&lt;p&gt;I think basic services has support to boot a specific factory implementation&lt;br/&gt;
based on the JVM using modules.properties. For example in the current&lt;br/&gt;
scenario, one can extend BaseDataFileFactory.java class to  &lt;br/&gt;
implement newContainerObject(), which will return the RafContainer4( ..).  add&lt;br/&gt;
the new class to modules.properties to boot only on versions &amp;gt;=jdk14.&lt;/p&gt;



&lt;p&gt;In RafContainer4.java :&lt;br/&gt;
---------------------&lt;/p&gt;

&lt;p&gt;1) I think following import is not needed. &lt;/p&gt;

&lt;p&gt;+import java.io.*; &lt;/p&gt;

&lt;p&gt;2) Is it really necessary to rewind() the buffers in readFull/writeFull ? From what I understood, &lt;br/&gt;
   there is a new ByteBuffer object being created on  both read/write page&lt;br/&gt;
   methods.  &lt;/p&gt;

&lt;p&gt;+        dstBuffer.rewind(); // Reset buffer position before we start read&lt;br/&gt;
and &lt;br/&gt;
+        srcBuffer.rewind(); // Reset buffer position before we start writing.&lt;/p&gt;


&lt;p&gt;3) do we really need the following method ? &lt;/p&gt;

&lt;p&gt;+    final protected FileChannel getChannel() &lt;/p&gt;
{
+        return ourChannel;
+    }

&lt;p&gt;4) I noticed, there is new encryption buffer created on every writePage() call,&lt;br/&gt;
   if the database is encrypted. This may cause jvm peak memory usage increase,&lt;br/&gt;
   when there is a checkpoint, if there are lot of dirty pages in the cache and&lt;br/&gt;
   if garbage collection is not happening fast enough.  I hope this does not&lt;br/&gt;
   lead to out of memory errors!&lt;/p&gt;

&lt;p&gt;   We may need to implement some kind of scheme, that will help in reuse of&lt;br/&gt;
   the encryption buffers. &lt;/p&gt;

&lt;p&gt;5) I am ok with readPage() and writePage() routines in RafContainer4.java. &lt;br/&gt;
   just curious , if you considered implementing  new read/write..etc  calls in &lt;br/&gt;
   the RafContainer4.java using file channel and just wrapper methods in the&lt;br/&gt;
   RafContainer.java using the existing random access file,  instead of &lt;br/&gt;
   overriding readPage()/writePage() ...etc. &lt;/p&gt;

&lt;p&gt;6) Please file a JIRA  to enhance StorageFactory interfaces to support NIO. &lt;/p&gt;


&lt;p&gt;/suresh&lt;/p&gt;</comment>
                            <comment id="12434965" author="knutanders" created="Fri, 15 Sep 2006 14:13:43 +0100"  >&lt;p&gt;I will hold the commit until Anders has responded to the questions from Suresh.&lt;/p&gt;

&lt;p&gt;1, 2 and 3 seem like trivial changes which should be easy to fix. Suresh, if these were fixed, do you think the patch could be committed and the other issues addressed in followup patches? I think it sounds reasonable to make these changes incrementally (if only to make it easier to review the next revision of the patch). The current patch clearly is an improvement, and the optimizations/improvements suggested by Suresh would improve it further. &lt;/p&gt;</comment>
                            <comment id="12435610" author="tsuresh" created="Tue, 19 Sep 2006 01:02:44 +0100"  >&lt;p&gt;Hi Knut , &lt;/p&gt;

&lt;p&gt;Patch is good. It  is  ok with  me ,  if you would like to commit  the current patch and let Anders address, other enhancements in the followup patches.  &lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
-suersh&lt;/p&gt;</comment>
                            <comment id="12435677" author="andersmo" created="Tue, 19 Sep 2006 07:09:47 +0100"  >&lt;p&gt;Suresh, Knut Anders, thanks for your advice. There&apos;s no need to rush this patch for my part, I&apos;ll be happy to provide a new one incorporating Suresh&apos; suggestions. They probably end up making the whole patch smaller, as most of it is about removing redundant code (such as my homegrown RAFContainerFactory). I&apos;ve already fixed 2) and 3) in my working copy, and I plan to take a long, hard look at 1) tonight. =)&lt;/p&gt;</comment>
                            <comment id="12435752" author="knutanders" created="Tue, 19 Sep 2006 12:25:45 +0100"  >&lt;p&gt;Committed v4 into trunk with revision 447815. Fixed Suresh&apos;s comments 1-3 in RAFContainer4 before committing. Now that RAFContainer is no longer used in jdk 1.5, I will back out the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-733&quot; title=&quot;Starvation in RAFContainer.readPage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-733&quot;&gt;&lt;del&gt;DERBY-733&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12435798" author="knutanders" created="Tue, 19 Sep 2006 15:27:22 +0100"  >&lt;p&gt;Backed out the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-733&quot; title=&quot;Starvation in RAFContainer.readPage()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-733&quot;&gt;&lt;del&gt;DERBY-733&lt;/del&gt;&lt;/a&gt; with the following commands:&lt;br/&gt;
  svn merge -r 357275:357274 .&lt;br/&gt;
  svn merge -r 356884:356883 .&lt;br/&gt;
Derbyall ran cleanly. Committed revision 447856.&lt;/p&gt;</comment>
                            <comment id="12437257" author="mikem" created="Sun, 24 Sep 2006 23:06:12 +0100"  >&lt;p&gt;I am unsetting the patch available flag as the submittter has indicated that we should not apply this patch, and wait for another patch.&lt;/p&gt;</comment>
                            <comment id="12443040" author="knutanders" created="Tue, 17 Oct 2006 20:13:50 +0100"  >&lt;p&gt;I&apos;m wondering whether we should change the DEBUG_PRINT calls to ASSERT/THROWASSERT. Falling back to the old implementation on errors is a good approach in insane mode, but I think the errors should be exposed in sane mode so we can see them and fix them.&lt;/p&gt;

&lt;p&gt;After running the JUnit tests (java junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All) I noticed that derby.log contained this message (but no tests failed):&lt;/p&gt;

&lt;p&gt;DEBUG RAFContainerFactory OUTPUT: Caught exception when setting up rafContainerConstructor&lt;/p&gt;</comment>
                            <comment id="12443179" author="knutanders" created="Wed, 18 Oct 2006 07:29:02 +0100"  >&lt;p&gt;Army Brown reported an intermittent assert failure in a comment to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1976&quot; title=&quot;Add new utility methods to BaseJDBCTestCase to make conversion of ij tests to JUnit easier.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1976&quot;&gt;&lt;del&gt;DERBY-1976&lt;/del&gt;&lt;/a&gt;. It is probably related to this issue. The assert error is thrown when a DROP TABLE is committed. Could it be that a checkpoint is writing pages in that table&apos;s container while the container is dropped/closed? Only guessing...&lt;/p&gt;

&lt;p&gt;&amp;gt; I ran the JUnit suite &quot;suites.All&quot; against ibm142, jdk142, ibm15, jdk15, and jdk16 on a Windows 2000 machine.  The only failure I saw was an intermittent failure in LobLengthTest on jdk15:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; There was 1 error:&lt;br/&gt;
&amp;gt; 1) testLongLobLengths(org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest)&lt;br/&gt;
&amp;gt;    java.sql.SQL Exception: DERBY SQL error: SQLCODE: -1, SQLSTATE: XJ001, SQLERRMC:&lt;br/&gt;
&amp;gt;    org.apache.derby.shared.common.sanity.AssertFailure#ASSERT FAILED Container closed&lt;br/&gt;
&amp;gt;    while IO operations are in progress.  This should not happen.#XJ001.U&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:345)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.Connection.commit(Connection.java:555)&lt;br/&gt;
&amp;gt;         at org.apache.derbyTesting.junit.BaseJDBCTestCase.commit(BaseJDBCTestCase.java:159)&lt;br/&gt;
&amp;gt;         at org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.tearDown(LobLengthTest.java:87)&lt;br/&gt;
&amp;gt;         at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:76)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
&amp;gt;         at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
&amp;gt;    Caused by: org.apache.derby.client.am.SqlException: DERBY SQL error: SQLCODE: -1,&lt;br/&gt;
&amp;gt;    SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailure#ASSERT&lt;br/&gt;
&amp;gt;    FAILED Container closed while IO operations are in progress.  This should not happen.#XJ001.U&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.Connection.completeSqlca(Connection.java:1920)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.net.NetConnectionReply.parseRDBCMMreply(NetConnectionReply.java:215)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.net.NetConnectionReply.readLocalCommit(NetConnectionReply.java:147)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.net.ConnectionReply.readLocalCommit(ConnectionReply.java:43)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.net.NetConnection.readLocalCommit_(NetConnection.java:1574)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.Connection.readCommit(Connection.java:639)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.Connection.flowCommit(Connection.java:588)&lt;br/&gt;
&amp;gt;         at org.apache.derby.client.am.Connection.commit(Connection.java:551)&lt;br/&gt;
&amp;gt;         ... 33 more&lt;/p&gt;</comment>
                            <comment id="12443260" author="oysteing" created="Wed, 18 Oct 2006 14:08:40 +0100"  >&lt;p&gt;I saw the above error when developing the LobLengthTest, but it went away after I made some changes to the test.  One of the changes I made was that the test was run earlier in the suite.  Knut Anders&apos; guess may explain this since my changes may have changed the possibility of running the test concurrently with checkpointing.  The reason the problem hits this test may be that the table has probably allocated more blocks that any of the other tests in the suite (It inserts a16MB blob).  &lt;/p&gt;</comment>
                            <comment id="12443338" author="andersmo" created="Wed, 18 Oct 2006 20:07:19 +0100"  >&lt;p&gt;Yeah, looks like I&apos;ve let in some critters. I&apos;ll give it a bit of a kickin&apos; and see if I can figure it out. =)&lt;/p&gt;</comment>
                            <comment id="12446383" author="andersmo" created="Wed, 1 Nov 2006 21:24:46 +0000"  >&lt;p&gt;I&apos;m attaching a patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v5.patch (relative to trunk), which incorporates Suresh&apos;s suggestion that I use the built-in Monitor mechanisms to boot an appropriate version of the BaseDataFileFactory. This removed a bunch of useless code, and should fix the &quot;Caught exception when setting up rafContainerConstructor&quot; errors. =)&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/modules.properties&lt;br/&gt;
M      java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java&lt;br/&gt;
A      java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactoryJ4.java&lt;br/&gt;
D      java/engine/org/apache/derby/impl/store/raw/data/RAFContainerFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/store/build.xml&lt;/p&gt;

&lt;p&gt;$ diffstat &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-v5.patch&lt;br/&gt;
 impl/store/build.xml                           |    2&lt;br/&gt;
 impl/store/raw/data/BaseDataFileFactory.java   |   29 +++---&lt;br/&gt;
 impl/store/raw/data/BaseDataFileFactoryJ4.java |   47 ++++++++++&lt;br/&gt;
 impl/store/raw/data/RAFContainerFactory.java   |  110 -------------------------&lt;br/&gt;
 modules.properties                             |    8 +&lt;br/&gt;
 5 files changed, 73 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 123 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;derbyall passed without errors - it just took me a loong while to actually get around to running derbyall on this one. =)&lt;/p&gt;

&lt;p&gt;I&apos;ve also played with the LobLengthTest.junit test and provoked the error message, and what I&apos;ve seen is that the problem happens when the container is being closed and deleted - the very same race condition case Knut Anders pointed out in previous comments. This happens when one thread starts closing the container just after a write has almost finished - after the write call to the FileChannel but before iosInProgress is decremented. So, it seems mostly harmless. Maybe moving the committedDropState check to the start of writePage and skipping the write altogether if it is in that state is a good approach? Any insight would be appreciated. =)&lt;/p&gt;</comment>
                            <comment id="12446493" author="andersmo" created="Thu, 2 Nov 2006 07:42:04 +0000"  >&lt;p&gt;&amp;gt; Maybe moving the committedDropState check to the start of writePage and skipping the write altogether if it is in that state is a good approach?&lt;/p&gt;

&lt;p&gt;Never mind my ramblings, we already do that. OK, maybe we could check the committedDropState in the (iosInProgress == 0) assertion in closePage as well? All of this mess (iosInProgress and the associated assertions) is intended as a sanity checking aid, and if we agree that closing a container that is being dropped while IO is still active on it is sane, it shouldn&apos;t be a source of noise.&lt;/p&gt;</comment>
                            <comment id="12446607" author="knutanders" created="Thu, 2 Nov 2006 13:54:45 +0000"  >&lt;p&gt;I couldn&apos;t build the jar files with this patch because the build system expected cloudscape.config.rawStore.data.generic to have a J1/J4 suffix. When I removed the old cloudscape.config line from modules.properties and inserted one with J1 and one with J4, the jars were built just fine. I verified that RAFContainer4 was loaded when using JDK 1.5. Derbyall and the JUnit tests ran cleanly. Committed the modified patch with revision 470362. Thanks Anders!&lt;/p&gt;</comment>
                            <comment id="12446609" author="knutanders" created="Thu, 2 Nov 2006 14:02:46 +0000"  >&lt;p&gt;&amp;gt; if we agree that closing a container that is being dropped while IO is still active on it is sane, it shouldn&apos;t be a source of noise.&lt;/p&gt;

&lt;p&gt;I think that sounds OK. You have already code in writePage() to take care of this situation. Should readPage() have the same logic (that is, catching IOExceptions and checking committed-drop state)?&lt;/p&gt;</comment>
                            <comment id="12446745" author="andersmo" created="Thu, 2 Nov 2006 22:21:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-6.patch remedies the noise from the iosInProgress sanity checking by checking the committed drop state before croaking. I&apos;ve run jdbcapi/LobLengthTest.junit 100 times in a row now without seeing any problems, and I used to see the problem once every four or five runs without this patch.&lt;/p&gt;

&lt;p&gt; RAFContainer4.java |    7 ++++++-&lt;br/&gt;
 1 files changed, 6 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 1 deletion&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not sure checking for the committed drop state in the readPage method is something we want to do - flushing the cache into a black hole is one thing, trying to read data that is supposed to be gone is another - I think I&apos;d want to know if we had some logic that permitted reading from a dropped container. =)&lt;/p&gt;

&lt;p&gt;I&apos;ve sort of got a feeling that maybe we are masking a problem here - should anyone (even the cache?) write to a dropped container? Maybe we should remove pages destined for a dying container from the cache when the container is dropped? =)&lt;/p&gt;</comment>
                            <comment id="12446767" author="knutanders" created="Thu, 2 Nov 2006 23:19:28 +0000"  >&lt;p&gt;Thanks Anders. I committed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-6.patch with revision 470573.&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;m not sure checking for the committed drop state in the readPage&lt;br/&gt;
&amp;gt; method is something we want to do - flushing the cache into a black&lt;br/&gt;
&amp;gt; hole is one thing, trying to read data that is supposed to be gone&lt;br/&gt;
&amp;gt; is another&lt;/p&gt;

&lt;p&gt;You are of course right about the error checking in readPage().&lt;/p&gt;

&lt;p&gt;&amp;gt; I&apos;ve sort of got a feeling that maybe we are masking a problem here&lt;br/&gt;
&amp;gt; - should anyone (even the cache?) write to a dropped container?&lt;/p&gt;

&lt;p&gt;Actually, I think it&apos;s the other way around. We are not writing to a&lt;br/&gt;
dropped container, but dropping a container which we happen to be&lt;br/&gt;
writing to. Since the dropping of the container has been committed, we&lt;br/&gt;
know that we&apos;ll never need those pages, so there&apos;s no need to complete&lt;br/&gt;
the write operations. The alternative would be to let closeContainer()&lt;br/&gt;
wait until all write operations on the container have finished.&lt;/p&gt;

&lt;p&gt;&amp;gt; Maybe we should remove pages destined for a dying container from the&lt;br/&gt;
&amp;gt; cache when the container is dropped?&lt;/p&gt;

&lt;p&gt;After the container has been dropped, it shouldn&apos;t be a problem&lt;br/&gt;
because getCommittedDropState() returns true, so writePage() will&lt;br/&gt;
return immediately without trying to write the page. Also, the pages&lt;br/&gt;
will be marked as invalid so that the cache space can be reclaimed.&lt;/p&gt;</comment>
                            <comment id="12449467" author="andersmo" created="Mon, 13 Nov 2006 19:54:12 +0000"  >&lt;p&gt;This patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-7.patch) turns the DEBUG_PRINT messages in RAFContainer4 into assertions guarding the method entry points. Dunno if they&apos;re of any use now, but if they catch a bug later, they could be worth the overhead in debug builds. =)&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/store/raw/data/RAFContainer4.java&lt;/p&gt;

&lt;p&gt; RAFContainer4.java |   24 ++++++++++++++++--------&lt;br/&gt;
 1 file changed, 16 insertions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/add.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, 8 deletions&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/forbidden.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Anything else I need to do before marking this one as resolved? =)&lt;/p&gt;</comment>
                            <comment id="12449474" author="andersmo" created="Mon, 13 Nov 2006 19:59:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-801&quot; title=&quot;Allow parallel access to data files.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-801&quot;&gt;&lt;del&gt;DERBY-801&lt;/del&gt;&lt;/a&gt;-7.patch passed derbyall, by the way. =)&lt;/p&gt;</comment>
                            <comment id="12449607" author="knutanders" created="Tue, 14 Nov 2006 08:44:19 +0000"  >&lt;p&gt;Committed revision 474695.&lt;/p&gt;

&lt;p&gt;I don&apos;t think there is much left before the issue can be marked as resolved. Suresh had some comments, and I don&apos;t think that (4) and (6) have been addressed yet. If you file JIRAs for those two issues, this one could be closed.&lt;/p&gt;</comment>
                            <comment id="12449848" author="tsuresh" created="Tue, 14 Nov 2006 22:45:59 +0000"  >&lt;p&gt;Hi Anders, &lt;/p&gt;

&lt;p&gt;I agree with Knut,  this issue can be marked as fixed,   Thanks a lot for  working on this improvement. &lt;/p&gt;

&lt;p&gt;-suresh&lt;/p&gt;
</comment>
                            <comment id="12450078" author="andersmo" created="Wed, 15 Nov 2006 15:55:54 +0000"  >&lt;p&gt;OK, I&apos;m marking this one as resolved, then. I&apos;ve logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2086&quot; title=&quot;Build a resource pooling subsystem to facilitate object reuse and concurrency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2086&quot;&gt;&lt;del&gt;DERBY-2086&lt;/del&gt;&lt;/a&gt; to remind us to look into some kind of resource pooling mechanism for encryption buffers and similar. I guess this isn&apos;t the only place where a pooling mechanism could be useful, so I intentionally worded it in a generic fashion.&lt;/p&gt;

&lt;p&gt;Regarding enhancing the StorageFactory interfaces to support general parallel access, I&apos;m not sure I understand Suresh&apos;s intention completely. Implementing support for concurrent IO is specific to the different container types - and it may not even be feasible for compressed containers that require on decompression for seeks. Suresh, maybe you could explain it in a new Jira issue? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As I considered earlier, we could enhance the StorageRandomAccessFile interface to add getChannel() support, but even that would apply only to random access files backed by real files that do support getChannel - and we&apos;d have to throw in some JVM-dependent trickery as well, since getChannel() in RandomAccessFile only exists in Java 1.4+. (What&apos;s the timeframe on deprecating 1.3 support? I guess it could be a while? =)&lt;/p&gt;

&lt;p&gt;Anyway, thanks to everyone who helped me on this one. =)&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="32276">DERBY-262</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12344245" name="DERBY-801-6.patch" size="963" author="andersmo" created="Thu, 2 Nov 2006 22:21:36 +0000"/>
                            <attachment id="12344910" name="DERBY-801-7.patch" size="2444" author="andersmo" created="Mon, 13 Nov 2006 19:54:12 +0000"/>
                            <attachment id="12337843" name="DERBY-801-v2.patch" size="21829" author="andersmo" created="Mon, 31 Jul 2006 22:12:40 +0100"/>
                            <attachment id="12339495" name="DERBY-801-v3.patch" size="24463" author="andersmo" created="Thu, 24 Aug 2006 15:50:13 +0100"/>
                            <attachment id="12340684" name="DERBY-801-v4.patch" size="23330" author="andersmo" created="Tue, 12 Sep 2006 22:31:43 +0100"/>
                            <attachment id="12344139" name="DERBY-801-v5.patch" size="11189" author="andersmo" created="Wed, 1 Nov 2006 21:24:46 +0000"/>
                            <attachment id="12334504" name="NIO-RAFContainer-v1.patch" size="14695" author="andersmo" created="Wed, 24 May 2006 21:08:34 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 24 May 2006 20:08:34 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29710</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wfr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39073</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>