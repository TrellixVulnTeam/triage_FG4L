<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:24 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3729/DERBY-3729.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3729] Error message is rather unrevealing when creating large databases on FAT32 drives</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3729</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I was creating a test database on an external USB drive formatted as FAT32- it contains some tables that have quite large binary objects in: This was in conjunction with Hibernate. I got this rather cryptic error message.&lt;/p&gt;

&lt;p&gt;Looks rather scary:&lt;/p&gt;

&lt;p&gt;18:02:37,550  WARN JDBCExceptionReporter:77 - SQL Error: 40000, SQLState: 08006&lt;br/&gt;
18:02:37,550 ERROR JDBCExceptionReporter:78 - A network protocol error was encountered and the connection has been terminated: the requested command encountered an unarchitected and implementation-specific condition for which there was no architected message&lt;br/&gt;
18:02:37,597 ERROR AbstractFlushingEventListener:301 - Could not synchronize database state with session&lt;br/&gt;
org.hibernate.exception.JDBCConnectionException: could not insert: &lt;span class=&quot;error&quot;&gt;&amp;#91;proteinChainMoleculeBinaryData&amp;#93;&lt;/span&gt;&lt;br/&gt;
        at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:74)&lt;br/&gt;
        at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)&lt;br/&gt;
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.&lt;br/&gt;
java:2263)&lt;br/&gt;
        at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2656)&lt;br/&gt;
        at org.hibernate.action.EntityInsertAction.execute(EntityInsertAction.java:52)&lt;br/&gt;
        at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:248)&lt;br/&gt;
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:232)&lt;br/&gt;
        at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:139)&lt;br/&gt;
        at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)&lt;br/&gt;
        at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)&lt;br/&gt;
        at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338)&lt;br/&gt;
        at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)&lt;/p&gt;

&lt;p&gt;Initially it didnt even occur to me that this may be due to me using a FAT32 drive, but eventually I figured out that the table&apos;s file had got to the operating FAT32 limit: I had a file of 4,194,272 KB.&lt;/p&gt;

&lt;p&gt;In the derby log, there&apos;s a more revealing, but still incorrect, error message:&lt;/p&gt;

&lt;p&gt;ERROR XSDG1: Page Page(131071,Container(0, 2384)) could not be written to disk, please check if disk is full.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.writePage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.CachedItem.takeOnIdentity(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.Clock.addEntry(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.cache.Clock.create(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.initPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.newPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainer.addPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertLongColumn(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BasePage.insert(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.doInsert(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAStatement.execute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;br/&gt;
Caused by: java.io.IOException: There is not enough space on the disk&lt;br/&gt;
	at sun.nio.ch.FileDispatcher.pwrite0(Native Method)&lt;br/&gt;
	at sun.nio.ch.FileDispatcher.pwrite(FileDispatcher.java:51)&lt;br/&gt;
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:100)&lt;br/&gt;
	at sun.nio.ch.IOUtil.write(IOUtil.java:75)&lt;br/&gt;
	at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:651)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writeFull(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage0(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(Unknown Source)&lt;br/&gt;
	... 26 more&lt;/p&gt;

&lt;p&gt;The error is still strictly speaking incorrect - my disk is far from full, but I have created a file too big for the disk type - but the error is at least closer to the truth and this would be useful information for the derby client to display rather than the rather scary looking message I was getting.&lt;/p&gt;</description>
                <environment>Windows XP with a FAT32 drive</environment>
        <key id="12398588">DERBY-3729</key>
            <summary>Error message is rather unrevealing when creating large databases on FAT32 drives</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="jason_cole">Jason C. Cole</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Jun 2008 14:42:20 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:52 +0100</updated>
                            <resolved>Fri, 19 Feb 2010 20:00:24 +0000</resolved>
                                    <version>10.3.3.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12806862" author="bryanpendleton" created="Sun, 31 Jan 2010 20:01:28 +0000"  >&lt;p&gt;It seems like it might be worthwhile to change this message from&lt;/p&gt;

&lt;p&gt;  Page Page(131071,Container(0, 2384)) could not be written to disk, please check if disk is full.&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;  Page Page(131071,Container(0, 2384)) could not be written to disk, please check if disk is full, or if a filesystem limit or quota on the maximum file size has been reached.&lt;/p&gt;</comment>
                            <comment id="12828775" author="bryanpendleton" created="Tue, 2 Feb 2010 21:36:24 +0000"  >&lt;p&gt;Attached is a patch proposal to enhance the XSDG1 message with some&lt;br/&gt;
additional text. The extra text is intended to suggest other possible reasons&lt;br/&gt;
that the file could not be written, such as if a filesystem limit has been&lt;br/&gt;
reached (e.g., the FAT32 4GB file limit) or a quota has been reached.&lt;/p&gt;</comment>
                            <comment id="12829149" author="knutanders" created="Wed, 3 Feb 2010 17:14:14 +0000"  >&lt;p&gt;Since a quota normally limits the total size of all files belonging to a user, and not the size of a single file, would it be better to turn the last part of the sentence around to avoid the term &quot;quota on the maximum file size&quot;? Something like&lt;/p&gt;

&lt;p&gt;..., or if a quota or a file system limit on the maximum file size has been reached.&lt;/p&gt;

&lt;p&gt;or perhaps&lt;/p&gt;

&lt;p&gt;..., or if a file system limit, like a quota or maximum file size, has been reached.&lt;/p&gt;</comment>
                            <comment id="12829270" author="jason_cole" created="Wed, 3 Feb 2010 21:20:33 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Either option sounds fine to me; I would note that the main issue I had &lt;br/&gt;
was that this got reported up the chain as a non-architected &lt;br/&gt;
implementation specific error; disk issues would not seem to fall into &lt;br/&gt;
that domain to me, but that is most likely hibernate&apos;s problem, rather &lt;br/&gt;
than derby.&lt;/p&gt;

&lt;p&gt;Fixing the lower level error to be more general would be fine from the &lt;br/&gt;
&apos;derby&apos; side of things&lt;/p&gt;

&lt;p&gt;Thanks for looking at it&lt;/p&gt;

&lt;p&gt;Jason&lt;/p&gt;
</comment>
                            <comment id="12829280" author="knutanders" created="Wed, 3 Feb 2010 21:44:43 +0000"  >&lt;p&gt;Actually, I think the message about the &quot;unarchitected and implementation-specific condition&quot; is something Derby&apos;s client driver comes up with when the connection is terminated abruptly. I think the original request is perfectly fine, that the &quot;disk full&quot; message should be displayed at the client side instead of &quot;unarchitected condition&quot;.&lt;/p&gt;</comment>
                            <comment id="12829613" author="bryanpendleton" created="Thu, 4 Feb 2010 14:49:00 +0000"  >&lt;p&gt;Ah. I see I somewhat missed the point.&lt;/p&gt;

&lt;p&gt;Let me see if I can reproduce this problem in a client/server scenario, so I can better&lt;br/&gt;
understand where the &quot;unarchitected&quot; message is coming from and whether we can improve it.&lt;/p&gt;

&lt;p&gt;Thanks for clarifying, Jason and Knut!&lt;/p&gt;</comment>
                            <comment id="12829808" author="bryanpendleton" created="Thu, 4 Feb 2010 21:57:44 +0000"  >&lt;p&gt;I&apos;m experimenting with the following hack, which is intended to make it easier to work on this problem.&lt;br/&gt;
This hack alters the store so that it simulates an error whenever any table tries to be grown&lt;br/&gt;
beyond 6K pages. With this hack in place, I&apos;m working on some simple repro programs to&lt;br/&gt;
enable a comparison of the behavior in Embedded versus Client/Server configurations.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java    (revision 905108)&lt;br/&gt;
+++ java/engine/org/apache/derby/impl/store/raw/data/CachedPage.java    (working copy)&lt;br/&gt;
@@ -782,6 +782,11 @@&lt;br/&gt;
                                        identity));&lt;br/&gt;
                }&lt;/p&gt;

&lt;p&gt;+                if (identity != null &amp;amp;&amp;amp; identity.getPageNumber() &amp;gt;= (6*1024) )&lt;br/&gt;
+                    throw StandardException.newException(&lt;br/&gt;
+                               SQLState.FILE_WRITE_PAGE_EXCEPTION,&lt;br/&gt;
+                               new IOException(&quot;FAKE FAKE FAKE&quot;), identity);&lt;br/&gt;
+&lt;br/&gt;
                try&lt;br/&gt;
                {&lt;br/&gt;
                        myContainer.writePage(&lt;/p&gt;</comment>
                            <comment id="12829850" author="bryanpendleton" created="Thu, 4 Feb 2010 23:29:20 +0000"  >&lt;p&gt;Attached &apos;repro.java&apos; and &apos;reproEmbedded.java&apos;, which differ only in&lt;br/&gt;
the JDBC driver class name and the connection URL, can be used,&lt;br/&gt;
together with the CachedPage.java hack mentioned in my earlier comment,&lt;br/&gt;
to reproduce the XSDG1 error in client/server and embedded environments.&lt;/p&gt;</comment>
                            <comment id="12829853" author="bryanpendleton" created="Thu, 4 Feb 2010 23:30:00 +0000"  >&lt;p&gt;derby.log files resulting from the client/server and embeded reproductions, for comparison.&lt;/p&gt;</comment>
                            <comment id="12829854" author="bryanpendleton" created="Thu, 4 Feb 2010 23:32:28 +0000"  >&lt;p&gt;Exception received by the test program for the client/server and embedded test&lt;br/&gt;
programs are attached. Note that, just as happened for Jason, in the client/server&lt;br/&gt;
case I get the confusing &quot;unarchitected and implementation-specific condition&quot;&lt;br/&gt;
exception whereas in the embedded case the XSDG1 exception is delivered&lt;br/&gt;
straight to the program, so just as Knut suspected this appears to be a weakness&lt;br/&gt;
in the client exception handling.&lt;/p&gt;</comment>
                            <comment id="12830436" author="bryanpendleton" created="Sat, 6 Feb 2010 02:53:53 +0000"  >&lt;p&gt;I think that a substantial portion of this behavior may be due to the following code from DRDAConnThread:&lt;/p&gt;

&lt;p&gt;		// If it is a real SQL Error write a SQLERRRM first&lt;br/&gt;
		severity = getExceptionSeverity(e);&lt;br/&gt;
		if (severity &amp;gt; CodePoint.SVRCOD_ERROR)&lt;/p&gt;
		{
			// For a session ending error &amp;gt; CodePoint.SRVCOD_ERROR you cannot
			// send a SQLERRRM. A CMDCHKRM is required.  In XA if there is a
			// lock timeout it ends the whole session. I am not sure this 
			// is the correct behaviour but if it occurs we have to send 
			// a CMDCHKRM instead of SQLERRM
			writeCMDCHKRM(severity);
		}

&lt;p&gt;The &quot;FILE_WRITE_PAGE_EXCEPTION&quot; is listed as XSDG1.D, meaning that it has &quot;database&quot; severity,&lt;br/&gt;
which means that getExceptionSeverity() treats it as:&lt;/p&gt;

&lt;p&gt;               severity = CodePoint.SVRCOD_SESDMG;&lt;/p&gt;

&lt;p&gt;Because of this, the exception falls into the &quot;unarchitected and implementation-specific condition&quot;.&lt;/p&gt;

&lt;p&gt;It appears that if I change the exception to &quot;transaction&quot; severity, by changing it from&lt;br/&gt;
XSDG1.D to XSDG1.T, then the error-handling flow in the client/server code is dramatically&lt;br/&gt;
different, and the underlying exception &lt;b&gt;does&lt;/b&gt; get transmitted back to the client.&lt;/p&gt;

&lt;p&gt;I&apos;ll continue to explore the implications of downgrading the severity of this particular message&lt;br/&gt;
from database severity to transaction severity, but am interested in whether others have a reaction&lt;br/&gt;
about what that would mean, in practice.&lt;/p&gt;</comment>
                            <comment id="12830598" author="bryanpendleton" created="Sun, 7 Feb 2010 00:24:35 +0000"  >&lt;p&gt;I briefly investigated two other possibilities:&lt;br/&gt;
1) Changing DRDAConnThread.getExceptionSeverity so that it processed&lt;br/&gt;
     DATABASE_SEVERITY and SESSION_SEVERITY using SVRCOD_ERROR,&lt;br/&gt;
     rather than SVRCOD_SESDMG&lt;br/&gt;
2) Changing the client processing in NetConnectionReply so that it treated&lt;br/&gt;
     SVRCOD_SESDMG using the same path as SVRCOD_ERROR&lt;/p&gt;

&lt;p&gt;The first change seemed to be very close to working, but I had some&lt;br/&gt;
unexpected errors in the replication suite, which concerned me.&lt;/p&gt;

&lt;p&gt;The second change was complex. I didn&apos;t see an easy way to change the&lt;br/&gt;
client handling of SESDMG to make it more like the ERROR code point.&lt;/p&gt;

&lt;p&gt;So, for now, I&apos;m continuing to pursue the notion of downgrading the severity&lt;br/&gt;
of XSDG1 from DATABASE severity to TRANSACTION severity.&lt;/p&gt;

&lt;p&gt;Does anybody know of a good writeup which describes the severity&lt;br/&gt;
levels and the implications of choosing a particular severity level for a message?&lt;/p&gt;</comment>
                            <comment id="12831068" author="bryanpendleton" created="Mon, 8 Feb 2010 19:25:20 +0000"  >&lt;p&gt;I spent some time stepping through the handling of the XSDG1 error in the engine code.&lt;/p&gt;

&lt;p&gt;The bulk of this processing is driven by ContextManager.cleanupOnError, which iterates&lt;br/&gt;
through each of the various contexts (language context, connection context,&lt;br/&gt;
compiler context, transaction context, and so forth). For each such context, the&lt;br/&gt;
ContextManager calls the context&apos;s cleanupOnError method.&lt;/p&gt;

&lt;p&gt;My conclusion after studying this code is that the cleanup handling for a database-severity&lt;br/&gt;
exception differs substantially from the cleanup handling for a transaction-severity message.&lt;/p&gt;

&lt;p&gt;Since the severity level for message XSDG1 was chosen a long time ago, presumably&lt;br/&gt;
for very good reasons, I&apos;m increasingly reluctant to downgrade the severity of this exception.&lt;/p&gt;

&lt;p&gt;I&apos;ll spend some time looking at how the client handles SVRCOD_SESDMG, but I&apos;m&lt;br/&gt;
increasingly thinking that it&apos;s going to be hard to do much beyond just trying to improve&lt;br/&gt;
the error message text.&lt;/p&gt;</comment>
                            <comment id="12831277" author="bryanpendleton" created="Tue, 9 Feb 2010 03:19:25 +0000"  >&lt;p&gt;After looking through the derby client trace file, I could see that at least some of&lt;br/&gt;
the server-side information was in fact available to the client, as a SQLCARD&lt;br/&gt;
message following the CMDCHKRM.&lt;/p&gt;

&lt;p&gt;So I made the following experimental change to the client&apos;s NetConnectionReply.java:&lt;/p&gt;

&lt;p&gt;Index: NetConnectionReply.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; NetConnectionReply.java     (revision 907116)&lt;br/&gt;
+++ NetConnectionReply.java     (working copy)&lt;br/&gt;
@@ -876,9 +876,12 @@&lt;br/&gt;
         checkRequiredObjects(svrcodReceived);&lt;/p&gt;

&lt;p&gt;         netAgent_.setSvrcod(svrcod);&lt;br/&gt;
+        NetSqlca netSqlca = parseSQLCARD(null);&lt;br/&gt;
+        netAgent_.netConnection_.completeSqlca(netSqlca);&lt;br/&gt;
         agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,&lt;br/&gt;
             new ClientMessageId(SQLState.DRDA_CONNECTION_TERMINATED),&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;msgutil_.getTextMessage(MessageId.CONN_DRDA_CMDCHKRM)));&lt;br/&gt;
+            msgutil_.getTextMessage(MessageId.CONN_DRDA_CMDCHKRM),&lt;br/&gt;
+            new Exception(netSqlca.getSqlErrmc())));&lt;br/&gt;
     }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this change, the SQLException that the user program receives contains within it a&lt;br/&gt;
DisconnectException, and that exception in turn contains within it a simple Exception&lt;br/&gt;
with the error message information from the server.&lt;/p&gt;

&lt;p&gt;When this exception is thrown on the client side, it thus looks something like:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: A network protocol error was encountered and the connection has been terminated: the requested command encountered an unarchitected and implementation-specific condition for which there was no architected message&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:358)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:399)&lt;br/&gt;
        at repro.main(repro.java:27)&lt;br/&gt;
Caused by: org.apache.derby.client.am.DisconnectException: A network protocol error was encountered and the connection has been terminated: the requested command encountered an unarchitected and implementation-specific condition for which there was no architected message&lt;br/&gt;
        at org.apache.derby.client.net.NetConnectionReply.parseCMDCHKRM(NetConnectionReply.java:881)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseExecuteError(NetStatementReply.java:684)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:351)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.readExecute(NetStatementReply.java:71)&lt;br/&gt;
        at org.apache.derby.client.net.StatementReply.readExecute(StatementReply.java:55)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.readExecute_(NetPreparedStatement.java:189)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.readExecute(PreparedStatement.java:1865)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2162)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:404)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:390)&lt;br/&gt;
        ... 1 more&lt;br/&gt;
Caused by: java.lang.Exception: Page Page(6144,Container(0, 1136)) could not be written to disk, please check if disk is full.::SQLSTATE: XJ001Java exception: &apos;FAKE FAKE FAKE: java.io.IOException&apos;.&lt;br/&gt;
        ... 11 more&lt;/p&gt;
</comment>
                            <comment id="12831525" author="knutanders" created="Tue, 9 Feb 2010 16:32:21 +0000"  >&lt;p&gt;I would feel more comfortable with this solution than downgrading the severity of this particular error. For database-level errors, I think we automatically shut down the database so that nothing more harmful should happen to it until we&apos;ve performed recovery. I don&apos;t know the consequences of not doing that.&lt;/p&gt;</comment>
                            <comment id="12831560" author="bryanpendleton" created="Tue, 9 Feb 2010 17:56:58 +0000"  >&lt;p&gt;Thanks Knut, I agree. I am no longer pursuing the downgrading of the severity.&lt;/p&gt;</comment>
                            <comment id="12831565" author="bryanpendleton" created="Tue, 9 Feb 2010 18:02:18 +0000"  >&lt;p&gt;As a side note, it looks like the sending of the CMDCHKRM was modified during this checkin:&lt;/p&gt;

&lt;p&gt;Author: kmarsden&lt;br/&gt;
Date: Fri Dec 31 13:49:50 2004&lt;br/&gt;
New Revision: 123827&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?view=rev&amp;amp;rev=123827&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?view=rev&amp;amp;rev=123827&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
Initial check in of XA for Network Server.&lt;/p&gt;

&lt;p&gt;Prior to revision 123827, the Network Server apparently sent a SQLERRRM even for high severity errors.&lt;/p&gt;

&lt;p&gt;At any rate, the important thing from the point of view of this issue is that, whether the server&lt;br/&gt;
sends CMDCHKRM or SQLERRRM, it also sends the SQLCARD either way, so the client code&lt;br/&gt;
should be safe in checking for the SQLCARD.&lt;/p&gt;

&lt;p&gt;I&apos;m going to try to put together a new patch proposal that:&lt;br/&gt;
1) Adds more text to the XSDG1 error message suggesting file system limits or quotas as a possible cause&lt;br/&gt;
2) Adds more text to the J123 (&quot;unarchitected condition&quot;) error message suggesting that&lt;br/&gt;
more information may be available in the server&apos;s derby.log file&lt;br/&gt;
3) Adds the reading of the SQLCARD after the reading of the CMDCHKRM, and the&lt;br/&gt;
incorporation of whatever error message contents we can find in the SQLCA, as&lt;br/&gt;
described in my comment above.&lt;/p&gt;</comment>
                            <comment id="12831573" author="knutanders" created="Tue, 9 Feb 2010 18:21:41 +0000"  >&lt;p&gt;Sounds like a good plan! +1&lt;/p&gt;</comment>
                            <comment id="12832372" author="bryanpendleton" created="Thu, 11 Feb 2010 03:18:02 +0000"  >&lt;p&gt;Attached &apos;UpdateMessagesImproveClient.diff&apos; is a patch proposal which:&lt;br/&gt;
a) Adds additional text to XSDG1 and J123 messages&lt;br/&gt;
b) Enhances the client&apos;s handling of CMDCHKRM to look for possible info in the SQLCARD&lt;/p&gt;

&lt;p&gt;Regression tests were clean.&lt;/p&gt;

&lt;p&gt;I&apos;m planning to commit this patch, and would appreciate any feedback.&lt;/p&gt;</comment>
                            <comment id="12832469" author="knutanders" created="Thu, 11 Feb 2010 12:45:34 +0000"  >&lt;p&gt;The patch looks like an improvement to me. +1. As far as I can see from DRDAConnThread.writeSQLCARDs(), a CMDCHKRM is always followed by an SQLCARD, so the change in NetConnectionReply should be safe.&lt;/p&gt;</comment>
                            <comment id="12835923" author="bryanpendleton" created="Fri, 19 Feb 2010 20:00:24 +0000"  >&lt;p&gt;Thanks Knut Anders for the various reviews and suggestions. I think that&lt;br/&gt;
this change is about as good as it&apos;s going to get in my client, so I&apos;ve committed&lt;br/&gt;
it to the trunk so we can get some additional experience with it there.&lt;/p&gt;

&lt;p&gt;Committed to subversion as revision 911955.&lt;/p&gt;</comment>
                            <comment id="13685381" author="knutanders" created="Mon, 17 Jun 2013 10:19:52 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12435543" name="UpdateMessagesImproveClient.diff" size="3290" author="bryanpendleton" created="Thu, 11 Feb 2010 03:18:02 +0000"/>
                            <attachment id="12434895" name="clientSQLException.txt" size="1873" author="bryanpendleton" created="Thu, 4 Feb 2010 23:32:28 +0000"/>
                            <attachment id="12434892" name="clientServer_derby.log" size="215958" author="bryanpendleton" created="Thu, 4 Feb 2010 23:30:00 +0000"/>
                            <attachment id="12434894" name="embeddedSQLException.txt" size="3284" author="bryanpendleton" created="Thu, 4 Feb 2010 23:32:28 +0000"/>
                            <attachment id="12434893" name="embedded_derby.log" size="214710" author="bryanpendleton" created="Thu, 4 Feb 2010 23:30:00 +0000"/>
                            <attachment id="12434595" name="enhanceErrorMessage.diff" size="1851" author="bryanpendleton" created="Tue, 2 Feb 2010 21:36:24 +0000"/>
                            <attachment id="12434890" name="repro.java" size="1379" author="bryanpendleton" created="Thu, 4 Feb 2010 23:29:20 +0000"/>
                            <attachment id="12434891" name="reproEmbedded.java" size="1372" author="bryanpendleton" created="Thu, 4 Feb 2010 23:29:20 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 31 Jan 2010 20:01:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30974</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0r3z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38210</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>