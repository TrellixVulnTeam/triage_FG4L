<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:14:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3223/DERBY-3223.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3223] SQL roles: make use of privileges granted to roles in actual privilege checking</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3223</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Pushing out to 10.5&lt;/p&gt;</description>
                <environment></environment>
        <key id="12383067">DERBY-3223</key>
            <summary>SQL roles: make use of privileges granted to roles in actual privilege checking</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Nov 2007 13:58:21 +0000</created>
                <updated>Tue, 30 Jun 2009 01:14:37 +0100</updated>
                            <resolved>Wed, 3 Sep 2008 19:46:59 +0100</resolved>
                                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                                                            <comments>
                            <comment id="12553193" author="dagw" created="Wed, 19 Dec 2007 01:43:39 +0000"  >&lt;p&gt;From derby-dev thread:&lt;/p&gt;

&lt;p&gt;From: &quot;Dag H. Wanvik&quot; &amp;lt;Dag.Wanvik@Sun.COM&amp;gt;&lt;br/&gt;
Date: Mon, 17 Dec 2007 18:03:30 +0100&lt;/p&gt;

&lt;p&gt;Working on SQL roles, I have encountered a problem related to&lt;br/&gt;
invalidation of prepared statements. &lt;/p&gt;

&lt;p&gt;My understanding at this point: Presently, at execute time, permission&lt;br/&gt;
is only checked the first time a prepared statement is executed for a&lt;br/&gt;
connection, as part of creating a result set object structure which is&lt;br/&gt;
subsequently reused (BaseActivation#resultSet).&lt;/p&gt;

&lt;p&gt;When permissions are revoked, invalidation is signaled from&lt;br/&gt;
GrantRevokeConstantAction (see TablePrivilegeInfo and&lt;br/&gt;
RoutinePrivilegeInfo respectively) via the dependency the prepared&lt;br/&gt;
statement has on the &lt;b&gt;SQL object&lt;/b&gt; (e.g. table) for which premission is&lt;br/&gt;
revoked, cf. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2594&quot; title=&quot;Revoking a privilege from an SQL Object should invalidate statements dependent on that object&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2594&quot;&gt;&lt;del&gt;DERBY-2594&lt;/del&gt;&lt;/a&gt;, via the action USER_RECOMPILE_REQUEST&lt;br/&gt;
(&lt;b&gt;not&lt;/b&gt; via dependency on the permission descriptor itself). &lt;/p&gt;

&lt;p&gt;This causes the prepare statement to be recompiled, and hence also a&lt;br/&gt;
new permissions check (the call to authorize happen as part of&lt;br/&gt;
fillResultSet which is conditional, c.f code generation in&lt;br/&gt;
StatementNode#generate which generates call to fillResultSet which in&lt;br/&gt;
turn calls authorize (see CursorNode#generate which calls&lt;br/&gt;
generateAuthorizeCheck to accomplish this). Earlier, permissions&lt;br/&gt;
checking happened every time a prepared statement was executed, but&lt;br/&gt;
this was changed with the work to reuse result sets, cf. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-827&quot; title=&quot;Performance can be improved by re-using language ResultSets across Activation executions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-827&quot;&gt;&lt;del&gt;DERBY-827&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, with the introduction of roles, when checking permissions at&lt;br/&gt;
execute time, an activation can come to rely on a privilege obtained&lt;br/&gt;
indirectly via a role grant to the user of the current session. But&lt;br/&gt;
when this role is revoked from the user, execution of the (prepared)&lt;br/&gt;
statement should (possibly) no longer be allowed. (Note: there is no&lt;br/&gt;
revoke of a privilege here, since the grant of the privilege is to the&lt;br/&gt;
role, so the current mechanism to force recompilation is&lt;br/&gt;
unsufficient).&lt;/p&gt;

&lt;p&gt;To accomplish the required behavior, the authorize check needs to be&lt;br/&gt;
executed anew, possibly leading to an error if no other applicable&lt;br/&gt;
privilege can be found to satisfy the query in question.&lt;/p&gt;

&lt;p&gt;I can imagine the following ways of making this happen:&lt;/p&gt;

&lt;p&gt;a) going back to checking permissions for every execution&lt;br/&gt;
   Any revoked role grant would then be effective immediately.&lt;/p&gt;

&lt;p&gt;b) as part of authorize() (e.g. in&lt;br/&gt;
   StatementTablePermission#hasPermissionOnTable), introduce a&lt;br/&gt;
   dependency for the activation on a role grant descriptor (that is,&lt;br/&gt;
   if indeed a role is required to satisfy the required privilege),&lt;br/&gt;
   causing the dropping of that descriptor to invalidate any dependent&lt;br/&gt;
   activation, so a new permission check can take place when the&lt;br/&gt;
   statement is executed next time.&lt;/p&gt;

&lt;p&gt;c) as part of authorize() introduce a dependency on the Prepared&lt;br/&gt;
   statement on the role grant descriptor, causing the dropping of&lt;br/&gt;
   that descriptor to invalidate any dependent prepared statement.&lt;/p&gt;

&lt;p&gt;Currently, a prepared statement can be a Dependent, but not the&lt;br/&gt;
activation as far as i can see. I tried c) and it seems to work (but&lt;br/&gt;
is it safe to register a dependency at execute time for a prepared&lt;br/&gt;
statement?). This is essentially extending the present solution.  It&lt;br/&gt;
seems a bit heavy, though, to have to recompile, when all that is&lt;br/&gt;
needed is a new check in the current connection? Maybe there is a&lt;br/&gt;
reason why we cannot make an activation a Dependent?&lt;/p&gt;

&lt;p&gt;I would also like to avoid a) for performance reasons, so b) seems to&lt;br/&gt;
have the correct granularity. Comments?&lt;/p&gt;

&lt;p&gt;-------------------------&lt;br/&gt;
From: Rick Hillegas &amp;lt;Richard.Hillegas@Sun.COM&amp;gt;&lt;br/&gt;
Date: Mon, 17 Dec 2007 10:06:01 -0800&lt;/p&gt;

&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;It will take me a while to understand the complexity of the issue you&lt;br/&gt;
are wrestling with. But let me ask some initial questions:&lt;/p&gt;

&lt;p&gt;1) You can&apos;t set yourself to a role which is not granted to you. Is&lt;br/&gt;
that right?&lt;/p&gt;

&lt;p&gt;2) What does it mean to revoke a role from a user whose session is&lt;br/&gt;
currently operating as that role? It seems to me that this should&lt;br/&gt;
either be forbidden (that is, the revoke should fail) or the user&apos;s&lt;br/&gt;
session should be switched to having a null role or the user should be&lt;br/&gt;
allowed to continue operating as that role until she logs out.&lt;/p&gt;

&lt;p&gt;3) So how does the situation you are describing arise? Don&apos;t you&lt;br/&gt;
always have to check at runtime whether the session is operating as&lt;br/&gt;
the necessary role?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------------&lt;br/&gt;
From: Dag.Wanvik@Sun.COM (Dag H. Wanvik)&lt;br/&gt;
Date: Mon, 17 Dec 2007 23:51:23 +0100&lt;/p&gt;


&lt;p&gt;Thanks for your answer, Rick,&lt;/p&gt;

&lt;p&gt;Rick Hillegas &amp;lt;Richard.Hillegas@Sun.COM&amp;gt; writes:&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) You can&apos;t set yourself to a role which is not granted to you. Is&lt;br/&gt;
&amp;gt; that right?&lt;/p&gt;

&lt;p&gt;It must be granted to the current user or to PUBLIC, yes, cf. section&lt;br/&gt;
18.3 GR 4.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) What does it mean to revoke a role from a user whose session is&lt;br/&gt;
&amp;gt; currently operating as that role? It seems to me that this should&lt;br/&gt;
&amp;gt; either be forbidden (that is, the revoke should fail) or the user&apos;s&lt;br/&gt;
&amp;gt; session should be switched to having a null role or the user should be&lt;br/&gt;
&amp;gt; allowed to continue operating as that role until she logs out.&lt;/p&gt;

&lt;p&gt;Those are possible semantics, but not how I read the standard. As far&lt;br/&gt;
as I can interpret it, the necessary privilege should always (still)&lt;br/&gt;
be available/valid at execute time for the execution to be&lt;br/&gt;
legal. Also, I can&apos;t see in the standard any constraint for revoke&lt;br/&gt;
role that prohibits revoke of the role even if it is still set as&lt;br/&gt;
current role in a session.  The optional RESTRICT described in 12.7 SR&lt;br/&gt;
36 does nto mention any such condition.  Hence my wish to invalidate.&lt;br/&gt;
Let me know if you found something that indicates I am wrong in this,&lt;br/&gt;
please.&lt;/p&gt;


&lt;p&gt;&amp;gt; 3) So how does the situation you are describing arise? Don&apos;t you&lt;br/&gt;
&amp;gt; always have to check at runtime whether the session is operating as&lt;br/&gt;
&amp;gt; the necessary role?&lt;/p&gt;

&lt;p&gt;Yes, I think this is true. I guess I would be willing to accept that&lt;br/&gt;
this is checked only the first time the execute is attempted, though,&lt;br/&gt;
so avoid having to check on every execute (since nothing has been&lt;br/&gt;
revoked), although this is not quite according to the letter of the&lt;br/&gt;
standard. A semantically correct solution would be to &lt;b&gt;also&lt;/b&gt;&lt;br/&gt;
invalidate activations and/or prepared statements (cf alternatives b&lt;br/&gt;
or c) dependent on the current role being every time a SET ROLE&lt;br/&gt;
statement is performed. This is just one &lt;b&gt;more&lt;/b&gt; possibility for&lt;br/&gt;
invalidation in addition to the revoke of the role I described in my&lt;br/&gt;
previous message. I am less inclined to allow the prepared statement&lt;br/&gt;
to &quot;survive&quot; &lt;b&gt;revoke&lt;/b&gt; of a needed role.. So, the invalidation of&lt;br/&gt;
prepared statement is needed, as far as I can see (or check every&lt;br/&gt;
time).&lt;/p&gt;

&lt;p&gt;Dag&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;From: Rick Hillegas &amp;lt;Richard.Hillegas@Sun.COM&amp;gt;&lt;br/&gt;
Subject: Re: How to invalidate when a role is revoked, so privileges will be rechecked?&lt;br/&gt;
To: derby-dev@db.apache.org&lt;br/&gt;
Date: Tue, 18 Dec 2007 06:17:26 -0800&lt;br/&gt;
Reply-to: derby-dev@db.apache.org&lt;/p&gt;

&lt;p&gt;Dag H. Wanvik wrote:&lt;br/&gt;
&amp;gt; Thanks for your answer, Rick,&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Rick Hillegas &amp;lt;Richard.Hillegas@Sun.COM&amp;gt; writes:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   &lt;br/&gt;
&amp;gt;&amp;gt; 1) You can&apos;t set yourself to a role which is not granted to you. Is&lt;br/&gt;
&amp;gt;&amp;gt; that right?&lt;br/&gt;
&amp;gt;&amp;gt;     &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; It must be granted to the current user or to PUBLIC, yes, cf. section&lt;br/&gt;
&amp;gt; 18.3 GR 4.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;   &lt;br/&gt;
&amp;gt;&amp;gt; 2) What does it mean to revoke a role from a user whose session is&lt;br/&gt;
&amp;gt;&amp;gt; currently operating as that role? It seems to me that this should&lt;br/&gt;
&amp;gt;&amp;gt; either be forbidden (that is, the revoke should fail) or the user&apos;s&lt;br/&gt;
&amp;gt;&amp;gt; session should be switched to having a null role or the user should be&lt;br/&gt;
&amp;gt;&amp;gt; allowed to continue operating as that role until she logs out.&lt;br/&gt;
&amp;gt;&amp;gt;     &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Those are possible semantics, but not how I read the standard. As far&lt;br/&gt;
&amp;gt; as I can interpret it, the necessary privilege should always (still)&lt;br/&gt;
&amp;gt; be available/valid at execute time for the execution to be&lt;br/&gt;
&amp;gt; legal. Also, I can&apos;t see in the standard any constraint for revoke&lt;br/&gt;
&amp;gt; role that prohibits revoke of the role even if it is still set as&lt;br/&gt;
&amp;gt; current role in a session.  The optional RESTRICT described in 12.7 SR&lt;br/&gt;
&amp;gt; 36 does nto mention any such condition.  Hence my wish to invalidate.&lt;br/&gt;
&amp;gt; Let me know if you found something that indicates I am wrong in this,&lt;br/&gt;
&amp;gt; please.&lt;br/&gt;
&amp;gt;   &lt;br/&gt;
Thanks, Dag. This is helping me understand the problem. I&apos;m still&lt;br/&gt;
unclear on the following point. Here&apos;s the setup:&lt;/p&gt;

&lt;p&gt;a) User U sets her session S to operate under role R&lt;/p&gt;

&lt;p&gt;b) The DBO revokes role R from U&lt;/p&gt;

&lt;p&gt;c) Now U does more work in session S&lt;/p&gt;

&lt;p&gt;But what is the role associated with session S now? Is it still R? If&lt;br/&gt;
so I would expect that the problematic statement would still be able&lt;br/&gt;
to execute in session S until the role of session S is changed.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;

&lt;p&gt;--------------------------------------------------------------------&lt;br/&gt;
From: Dag.Wanvik@Sun.COM (Dag H. Wanvik)&lt;br/&gt;
Subject: Re: How to invalidate when a role is revoked, so privileges will be rechecked?&lt;br/&gt;
To: derby-dev@db.apache.org&lt;br/&gt;
Date: Tue, 18 Dec 2007 17:14:02 +0100&lt;br/&gt;
Reply-to: derby-dev@db.apache.org&lt;/p&gt;

&lt;p&gt;Rick Hillegas &amp;lt;Richard.Hillegas@Sun.COM&amp;gt; writes:&lt;/p&gt;

&lt;p&gt;&amp;gt; Thanks, Dag. This is helping me understand the problem. I&apos;m still&lt;br/&gt;
&amp;gt; unclear on the following point. Here&apos;s the setup:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; a) User U sets her session S to operate under role R&lt;br/&gt;
&amp;gt; b) The DBO revokes role R from U&lt;br/&gt;
&amp;gt; c) Now U does more work in session S&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; But what is the role associated with session S now? Is it still R? If&lt;br/&gt;
&amp;gt; so I would expect that the problematic statement would still be able&lt;br/&gt;
&amp;gt; to execute in session S until the role of session S is changed.&lt;/p&gt;

&lt;p&gt;The way I read the standard, the revoke is effective immediately. In&lt;br/&gt;
my current implementation, a session&apos;s current role is still&lt;br/&gt;
(technically) set although no longer valid (see the field&lt;br/&gt;
GenericLanguageConnectionContext#currentRole, which is a role&lt;br/&gt;
descriptor)&lt;/p&gt;

&lt;p&gt;However, it is lazily (re)set to none as soon as the session tries to&lt;br/&gt;
&quot;use&quot; it after it has been revoked.  So, if you try to reprepare the&lt;br/&gt;
same statement after the revoke, the authorization would fail, as it&lt;br/&gt;
should.&lt;/p&gt;

&lt;p&gt;The issue here is that the statement has already been prepared at a&lt;br/&gt;
time at which the role was not yet revoked, so the activation for the&lt;br/&gt;
prepared statement thinks it is still valid. A reprepare, for example&lt;br/&gt;
provoked by my alternative c) approach, causes all connections to&lt;br/&gt;
regenerate the result set structure and as a part of that one-time&lt;br/&gt;
set-up, also do the authorization check, and hence assure that the&lt;br/&gt;
needed permission is available, or fail the execute. This is a bit&lt;br/&gt;
heavy-handed, though, since connections not affected by the role&lt;br/&gt;
revoke will be forced to do extra work, hence my alternative b) to&lt;br/&gt;
invalidate just the affected activations. This does away with the&lt;br/&gt;
reprepare, but would just make the affected connections reinitialize&lt;br/&gt;
the activation (including redoing the authorization check).&lt;/p&gt;

&lt;p&gt;Dag&lt;/p&gt;</comment>
                            <comment id="12588018" author="dagw" created="Fri, 11 Apr 2008 17:42:15 +0100"  >&lt;p&gt;Uploading an experimental patch, 3223-1a, which adds privileges&lt;br/&gt;
granted to roles to the set of privileges available to a session user,&lt;br/&gt;
in addition to privileges granted to that user and to PUBLIC. &lt;br/&gt;
Code to handle revocation logic when role grants are revoked,&lt;br/&gt;
privileges grants are revoked from roles, modifying the current role,&lt;br/&gt;
and dropping roles is included.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Role descriptors are still not cached in memory. This is/may be a&lt;br/&gt;
  performance issue, of course. The present implementation naively&lt;br/&gt;
  fetches role descriptors from disk as needed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If an execute privilege is conferred via a role, and that role is&lt;br/&gt;
  revoked from a user (directly or indirectly via inheritance), the&lt;br/&gt;
  dependent object (constraint, trigger, view) will be dropped, that&lt;br/&gt;
  is, the RESTRICT semantics is not used.  This is in contrast to when&lt;br/&gt;
  such a privilege is revoked from a role (or user), in this case, the&lt;br/&gt;
  RESTRICT semantics apply.  Since privilege revocation for the&lt;br/&gt;
  different privileges are not compatible with regards to&lt;br/&gt;
  RESTRICT/CASCADE, I need to find a workable solution for this choice&lt;br/&gt;
  when revoking roles (which can confer all kinds of privileges).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Resetting the current role role for the current session leads to&lt;br/&gt;
  invalidation of dependent prepared statements (they need to be&lt;br/&gt;
  checked again), which is too expensive, cf discussion with Dan on&lt;br/&gt;
  this.  I will look into if I can invalidate just the activations&lt;br/&gt;
  instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Similar to the present solution fopr GRANT/REVOKE, when privileges&lt;br/&gt;
  are revoked, for dependent persistent objects (constraint, trigger,&lt;br/&gt;
  view), there is no attempt to find an alternative privilege which&lt;br/&gt;
  can apply: For example, if the discretionary privilege to user U is&lt;br/&gt;
  revoked, there is no attempt to find an applicable privilege granted&lt;br/&gt;
  to PUBLIC instead; the object is dropped, or RESTRICT kicks in as&lt;br/&gt;
  the case may be. This holds when privileges are revoked from roles&lt;br/&gt;
  as well.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  This situation is bad for roles, since, in the general case, when&lt;br/&gt;
  dependencies are inherited through a role grant graph, the present&lt;br/&gt;
  implementation records dependencies on the current role set (it does&lt;br/&gt;
  not record not the entire path of grant descriptors leading through&lt;br/&gt;
  the role grant graph from the current role up to the role which&lt;br/&gt;
  received the privilege grant). This has the consequence that when a&lt;br/&gt;
  revoke is performed on a role high up in a role inheritance graph,&lt;br/&gt;
  all downstream roles in the transitive closure of the grant relation&lt;br/&gt;
  of that role are invalidated, which may lead to excessive&lt;br/&gt;
  invalidations (and hence objects drops) in some cases.&lt;/p&gt;

&lt;p&gt;  For dependent prepared statements, this is only a performance issue,&lt;br/&gt;
  since DDL operations are rare enough that some extra recompilations&lt;br/&gt;
  should be ok.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Roles are applied only after discretionary and public privileges are&lt;br/&gt;
  exhausted, with one exception: A full table select permission to a&lt;br/&gt;
  role will be preferred over column selects to user or public. This&lt;br/&gt;
  order determines the behavior at revoke time for persistent objects,&lt;br/&gt;
  cf previous bullet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The usual disclaimers for experimental code; bugs, lacking comments,&lt;br/&gt;
lacking tests, code reduncancy which need refactoring, etc, etc apply &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Please kick the tires and see if the behavior is what you would&lt;br/&gt;
expect.&lt;/p&gt;</comment>
                            <comment id="12588085" author="rhillegas" created="Fri, 11 Apr 2008 20:29:55 +0100"  >&lt;p&gt;Thanks for the patch, Dag. I&apos;ve attached a test case (roles.sql), which shows some behavior which puzzled me. This is what the patch does:&lt;/p&gt;

&lt;p&gt;1) Creates a table and some roles.&lt;br/&gt;
2) Grants a select privilege to one of the roles.&lt;br/&gt;
3) Grants that role to another user.&lt;br/&gt;
4) Logs in as that user, sets that role, and successfully selects from the table.&lt;br/&gt;
5) Switches back to the original user and revokes the role from the second user.&lt;br/&gt;
6) Switches back to the second user and verifies that select privilege has been lost.&lt;/p&gt;

&lt;p&gt;So far, so good. What&apos;s puzzling me is that after the role is revoked, the second user&apos;s session still reports that its current role is the revoked role. It would have seemed more sensible to me if the current role had become null or NONE.&lt;/p&gt;</comment>
                            <comment id="12588096" author="rhillegas" created="Fri, 11 Apr 2008 20:57:14 +0100"  >&lt;p&gt;Attaching another puzzling case, roles2.sql. This test does the following:&lt;/p&gt;

&lt;p&gt;1) Creates 2 roles.&lt;br/&gt;
2) Grants the first role to the second role.&lt;br/&gt;
3) Grants the second role to the first role.&lt;/p&gt;

&lt;p&gt;I expected that Derby would reject this circularity in the role graph.&lt;/p&gt;</comment>
                            <comment id="12588169" author="dagw" created="Sat, 12 Apr 2008 00:30:13 +0100"  >&lt;p&gt;Thanks for looking at the patch, Rick!&lt;br/&gt;
First observation: yes, the current role is presently not reset (if it has been revoked) until you try to use it for something, except for the use in current_role, but I agree this is confusing and I have decided to change it so that current_role will behave as you expect, but I didn&apos;t get there yet. &lt;br/&gt;
Second observation: You are right, the circularity check is missing still. Sorry, I forgot to mention it.&lt;br/&gt;
I will fix issues both in the next revision.&lt;/p&gt;</comment>
                            <comment id="12588434" author="dagw" created="Sun, 13 Apr 2008 22:17:46 +0100"  >&lt;p&gt;Uploading a revised version of the experimental patch which&lt;br/&gt;
fixes Rick&apos;s two observations, plus fixes some bugs.&lt;/p&gt;

&lt;p&gt;CURRENT_ROLE now checks that the role is still valid. I use a nested read transaction to&lt;br/&gt;
avoid changing transaction state (in lcc#getCurrentRoleIdChecked); is that kosher here?&lt;/p&gt;

&lt;p&gt;Another notable outstanding issue (in addition to those mentioned for 1a,&lt;br/&gt;
is the missing check that role being created is not already used &lt;br/&gt;
as a user name (can be a heuristic only, since we have no dictionary info on users yet).&lt;/p&gt;</comment>
                            <comment id="12589781" author="dagw" created="Thu, 17 Apr 2008 01:14:53 +0100"  >&lt;p&gt;Uploading derby-3223-1c, which adds the heuristic for checking whether a&lt;br/&gt;
role being created is already known by Derby to be a user id, see code&lt;br/&gt;
in CreateRoleConstantAction#knownUser. &lt;/p&gt;

&lt;p&gt;I will probably stop the experimental patch at this point, unless someone&lt;br/&gt;
wants an update,  as it has grown way too large, and start breaking it up into &lt;br/&gt;
smaller patches for commit, now that I feel more confident that the approach yields &lt;br/&gt;
working code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12591759" author="rhillegas" created="Wed, 23 Apr 2008 20:52:35 +0100"  >&lt;p&gt;Thanks for the latest patch, Dag. I have verified that roles.sql and roles2.sql now run cleanly. I am attaching a new problem case, roles3.sql. This does the following:&lt;/p&gt;

&lt;p&gt;1) creates a number of roles&lt;/p&gt;

&lt;p&gt;2) links them together in a grant chain&lt;/p&gt;

&lt;p&gt;3) drops the first link&lt;/p&gt;

&lt;p&gt;Mysteriously, this also seems to drop the last link but not the intervening second link. The behavior seems odd to me.&lt;/p&gt;</comment>
                            <comment id="12593789" author="dagw" created="Fri, 2 May 2008 15:07:10 +0100"  >&lt;p&gt;Thanks Rick! Uploading a new version, derby-3223-1d, which fixes this regression, it&lt;br/&gt;
was an aliasing error in DropRoleConstantAction.&lt;/p&gt;</comment>
                            <comment id="12611564" author="dagw" created="Tue, 8 Jul 2008 13:51:59 +0100"  >&lt;p&gt;Uploading patch derby-3223-revise-iterator-api which:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes the API of the role closure iterator to also return the start role.&lt;br/&gt;
  This simplies usage in that the application code does not need to first treat&lt;br/&gt;
  the case of the current role, and then, if necessary, look in the closure.&lt;br/&gt;
  The API guarantees that the root will be returned first by the next method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Made the role closure implementation defer computing the closure until&lt;br/&gt;
  it is needed, that is on the second call to next (optimization).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Corrected a comment and an import statement in RolesTest.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12611986" author="dagw" created="Wed, 9 Jul 2008 12:24:40 +0100"  >&lt;p&gt;Uploading derby-3223-revise-iterator-api-b which replaces derby-3223-revise-iterator-api.&lt;br/&gt;
Relative to the first version, it is simpler by using package local visibility&lt;br/&gt;
instead of public in one instance.&lt;/p&gt;</comment>
                            <comment id="12611987" author="dagw" created="Wed, 9 Jul 2008 12:28:35 +0100"  >&lt;p&gt;Committed derby-3223-revise-iterator-api-b as svn 675133.&lt;/p&gt;</comment>
                            <comment id="12612446" author="dagw" created="Thu, 10 Jul 2008 12:59:23 +0100"  >&lt;p&gt;This patch, derby-3223-activate-roles-1, enables permissions granted&lt;br/&gt;
to applicable roles to actually confer privileges to a user who has&lt;br/&gt;
set the current role.&lt;/p&gt;

&lt;p&gt;No revocation logic has been added in this patch, that will be added&lt;br/&gt;
in a separate patch.&lt;/p&gt;

&lt;p&gt;Patch details:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementRoutinePermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementTablePermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementColumnPermission.java&lt;/p&gt;

&lt;p&gt;These three classes implement the extra checking for privileges via&lt;br/&gt;
roles which is the essence of this patch. After looking for privileges&lt;br/&gt;
granted to the current user or to public, if there are still&lt;br/&gt;
unresolved permissions, we look at roles for fulfillment.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementRolePermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementSchemaPermission.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/conn/GenericAuthorizer.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/StatementPermission.java&lt;/p&gt;

&lt;p&gt;Added activation to the check method signature of&lt;br/&gt;
StatementPermission. Needed to get at current role.&lt;/p&gt;

&lt;p&gt;Also added toString methods to all Statement&amp;lt;object&amp;gt;Permission classes&lt;br/&gt;
to help debugging. I can remove these if someones feels they just add&lt;br/&gt;
weight..&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;Added extra checks since now that roles may confer privileges, an&lt;br/&gt;
existing invariant no longer holds. This code will change with the&lt;br/&gt;
next patch which adds dependencies on roles and revocation logic, so&lt;br/&gt;
this is just a temporary measure.&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesConferredPrivilegesTest.java&lt;/p&gt;

&lt;p&gt;A new test which attempt to exercise all kinds of Derby privileges&lt;br/&gt;
using roles, when privileges are granted to the current role as well&lt;br/&gt;
as inherited roles, and roles granted to PUBLIC as well as to the&lt;br/&gt;
current user, i.e. the cross product:&lt;/p&gt;

&lt;p&gt;        &lt;/p&gt;
{current role, some inherited role}
&lt;p&gt; X&lt;br/&gt;
        &lt;/p&gt;
{role granted to current user, role granted to PUBLIC}
&lt;p&gt; X&lt;/p&gt;
        {set of Derby privileges}

&lt;p&gt;M      java/testing/org/apache/derbyTesting/junit/JDBC.java&lt;/p&gt;

&lt;p&gt;Added a utility method: identifierToCNF used by RolesConferredPrivilegesTest.&lt;/p&gt;

&lt;p&gt;Regressions passed, please review.&lt;/p&gt;</comment>
                            <comment id="12613305" author="knutanders" created="Mon, 14 Jul 2008 13:24:36 +0100"  >&lt;p&gt;The patch looks good to me (I&apos;ve only read through it and not actually&lt;br/&gt;
tested it, though). The code was well-commented and easy to read. I&lt;br/&gt;
have a couple of questions and comments, most of them minor. Feel free&lt;br/&gt;
to ignore them, I have no problem with the patch being committed as&lt;br/&gt;
is.&lt;/p&gt;

&lt;p&gt;StatementRolePermission.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;mix of tabs and spaces in getPrivName() and toString()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StatementRoutinePermission.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in comment: s/attemped/attempted&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;perhaps the check method would be simpler if the second condition&lt;br/&gt;
    was inverted (would save one nesting level for a large section of&lt;br/&gt;
    the code)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if (perms != null &amp;amp;&amp;amp; perms.getHasExecutePermission()) &lt;/p&gt;
{
        // The user has execute permission, the check is successful
        return;
    }

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if the current role is not granted to the user, would it be more&lt;br/&gt;
    appropriate to raise an exception saying that than to set the role&lt;br/&gt;
    to null?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;(in old code that is moved, not new code - same in&lt;br/&gt;
    StatementTablePermission and StatementColumnPermission) error&lt;br/&gt;
    messages are created with hard-coded strings &quot;routine&quot; and&lt;br/&gt;
    &quot;schema&quot; that won&apos;t be localized&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StatementTablePermission.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;same question as above about setting current role to null&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;perhaps the code will be slightly simpler if the role check in&lt;br/&gt;
    hasPermissionOnTable() is factored out into a separate method?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StatementColumnPermission.java&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in comment: columns are still be unauthorized&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in comment: s/attemped/attempted&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;RolesConferredPrivilegesTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in class javadoc: s/thats/that&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in makeSuite(): s/as lot/a lot&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the first two calls to assertEquals() in assertPrivilegeMetadata()&lt;br/&gt;
    have mixed up the arguments (actual/expected instead of&lt;br/&gt;
    expected/actual)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(): is JDBC.identifierToCNF() needed around&lt;br/&gt;
    the literal &quot;test_dbo&quot;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(): garbage in comment (&#239;&#191;&#189;)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(): assertTrue(noFound == X) =&amp;gt;&lt;br/&gt;
    assertEquals(X, noFound)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;setRole() looks like a useful helper method. Should it be moved to&lt;br/&gt;
    JDBC?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the PreparedStatement in setRole() should be closed&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;doGrantRevoke(): try 
{ ... }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{ fail(&quot;hmmmm&quot;, e); }
&lt;p&gt;    Why not just propagate the exception without try/catch?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;doGrantRevoke(): no need to check if (warn == null) since that&apos;s&lt;br/&gt;
    also checked by assertSQLState()&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12613311" author="knutanders" created="Mon, 14 Jul 2008 13:47:55 +0100"  >&lt;p&gt;Another simplification you may consider is to remove the close method&lt;br/&gt;
from RoleClosureIterator. As far as I can see, the iterator never has&lt;br/&gt;
a lifetime that exceeds the lifetime of the objects it refers to, so&lt;br/&gt;
the close method doesn&apos;t provide any real benefit. Some of the&lt;br/&gt;
benefits of removing it are:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;less code&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;simpler use of the iterator (no need for a try/finally block)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;some of the member fields can be made final&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;saves a couple of CPU cycles&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12613475" author="dagw" created="Mon, 14 Jul 2008 23:35:58 +0100"  >&lt;p&gt;Thanks for looking at this patch, Knut!&lt;/p&gt;

&lt;p&gt;The new version of this patch, derby-3223-activate-roles-2, addresses&lt;br/&gt;
most of your comments, except as noted below:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if the current role is not granted to the user, would it be more&lt;br/&gt;
    appropriate to raise an exception saying that than to set the role &lt;br/&gt;
    to null? &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No, this is the way I handle role revocation; the session(s) which has&lt;br/&gt;
a role set &quot;discover&quot; that they have lost the right the next time they&lt;br/&gt;
attempt to make use of it (&quot;lazily&quot;); the revoking session (data base&lt;br/&gt;
owner) is thus relieved of synchronizing with these session threads to&lt;br/&gt;
set their current roles to none.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;(in old code that is moved, not new code - same in&lt;br/&gt;
    StatementTablePermission and StatementColumnPermission) error &lt;br/&gt;
    messages are created with hard-coded strings &quot;routine&quot; and &lt;br/&gt;
    &quot;schema&quot; that won&apos;t be localized &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right, I leave that for another issue. I am not sure it needs fixing&lt;br/&gt;
though, since both strings are used in SQL syntax (ROUTINE is&lt;br/&gt;
valid SQL, although not in the Derby syntax). Maybe it would be good to&lt;br/&gt;
make them uppercase to underscore that fact.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;perhaps the code will be slightly simpler if the role check in&lt;br/&gt;
    hasPermissionOnTable() is factored out into a separate method? &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I chose to let this method be as it is..&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(): is JDBC.identifierToCNF() needed around&lt;br/&gt;
    the literal &quot;test_dbo&quot;? &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Well, either that or use upper case literal; I chose to use&lt;br/&gt;
identifierToCNF throughout when comparing against strings from&lt;br/&gt;
metadata queries which are in CNF.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(): garbage in comment (&#185;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I removed this. It was originally a ISO-8859-1 superscript &quot;1&quot; which&lt;br/&gt;
is legal in Java comments, but I think the JIRA attachment mangled it&lt;br/&gt;
to what you saw. I&apos;ll stick to 7-bit ASCII... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;setRole() looks like a useful helper method. Should it be moved to&lt;br/&gt;
    JDBC? &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Good idea, but I think I will postpone this until I have&lt;br/&gt;
resolved the semantics of SET ROLE, cf. the discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3137&quot; title=&quot;SQL roles: add catalog support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3137&quot;&gt;&lt;del&gt;DERBY-3137&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the close method of the iterator, I originally planned to use&lt;br/&gt;
this for decrementing a usage counter if/when I get to caching the&lt;br/&gt;
grant graphs, but you are right, right now it is totally useless, so I&lt;br/&gt;
remove it for now. Better to re-introduce it later if needed.&lt;/p&gt;</comment>
                            <comment id="12613581" author="knutanders" created="Tue, 15 Jul 2008 12:09:45 +0100"  >&lt;p&gt;Thanks for the new patch, Dag! It looks good. I agree that it would be better if the hard-coded strings were in uppercase.&lt;/p&gt;

&lt;p&gt;A couple of small nits that I missed in the previous review. Don&apos;t let them stop you from committing. They can be fixed in another patch.&lt;/p&gt;

&lt;p&gt;RolesConferredPrivilegesTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;two constants (FKVIOLATION and CHECKCONSTRAINTVIOLATED) are indented with tabs, the rest with spaces&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertExecutePrivilege() creates a statement that it doesn&apos;t close&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertSelectPrivilege/5 creates a statement that it never uses (nor closes)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;assertPrivilegeMetadata(), isOwner() and formatArgs() create statements that they don&apos;t close&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12613588" author="dagw" created="Tue, 15 Jul 2008 12:59:45 +0100"  >&lt;p&gt;Patch derby-3223-activate-roles-2 committed as svn 676890.&lt;/p&gt;

&lt;p&gt;Next step is to wire in the revocation logic. The new test,&lt;br/&gt;
RolesConferredPrivilegesTest is not yet wired into lang._Suite.&lt;/p&gt;</comment>
                            <comment id="12613590" author="dagw" created="Tue, 15 Jul 2008 13:01:33 +0100"  >&lt;p&gt;Thanks for the new comments, Knut! I&apos;ll handle those in a new patch!&lt;/p&gt;</comment>
                            <comment id="12613646" author="dagw" created="Tue, 15 Jul 2008 16:47:55 +0100"  >&lt;p&gt;Uploading a follow-up patch addressing Knut&apos;s comments,&lt;br/&gt;
derby-3223-activate-roles-2b.&lt;/p&gt;</comment>
                            <comment id="12613647" author="dagw" created="Tue, 15 Jul 2008 16:51:42 +0100"  >&lt;p&gt;Committed 2b as svn 676943.&lt;/p&gt;</comment>
                            <comment id="12614035" author="dagw" created="Wed, 16 Jul 2008 18:42:28 +0100"  >&lt;p&gt;Uploading the next patch, derby-3223-revocation-logic-1, which&lt;br/&gt;
invalidates view, constraints, triggers and prepared statements when&lt;br/&gt;
revoked. Prepared statements are also (still) recompiled when the&lt;br/&gt;
current role changes; I plan to move to invalidating just the&lt;br/&gt;
activations in a follow-up patch.&lt;/p&gt;

&lt;p&gt;It is as yet unpolished, but I am going on vacation and post it now in&lt;br/&gt;
the hope that someone will find time to have a look at it. The patch&lt;br/&gt;
still contains some tracing code which can be seen when running&lt;br/&gt;
RolesConferredPrivilegesTest and is definitely not for commit.  Some&lt;br/&gt;
refactoring is also called for, especially in DDLConstantAction.&lt;/p&gt;
</comment>
                            <comment id="12623064" author="dagw" created="Sat, 16 Aug 2008 01:12:59 +0100"  >&lt;p&gt;Uploading derby-3223-revocation-logic-2, which includes a .txt file&lt;br/&gt;
describing the patch in some detail. &lt;/p&gt;

&lt;p&gt;The intention is that with this patch the basic role functionality as specified in&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2207&quot; title=&quot;Improve usability of Derby&amp;#39;s client/server security by implementing ANSI Roles&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2207&quot;&gt;&lt;del&gt;DERBY-2207&lt;/del&gt;&lt;/a&gt; should be operational, although I plan some follow-up patches.&lt;/p&gt;

&lt;p&gt;Regressions ran ok, please review.&lt;/p&gt;</comment>
                            <comment id="12623377" author="dagw" created="Mon, 18 Aug 2008 16:28:18 +0100"  >&lt;p&gt;Uploaded derby-3223-revocation-logic-3, which replaces #2. Factors out some shared added code&lt;br/&gt;
in DDLConstantaction. Otherwise it is identical to #2, cf. writeup for #2.&lt;/p&gt;</comment>
                            <comment id="12623443" author="rhillegas" created="Mon, 18 Aug 2008 20:28:42 +0100"  >&lt;p&gt;Thanks for the patch, Dag. A couple small comments:&lt;/p&gt;

&lt;p&gt;o General - Some of the paragraphs in the explanatory text file might make good source code comments which would help the next person who walks through this code.&lt;/p&gt;

&lt;p&gt;o DDLConstantAction - It would be helpful if findRoleUsage() and trackRoleDependency() had header comments.&lt;/p&gt;

&lt;p&gt;o StatementTablePermission.hasPermissionOnTable() - The name of this method indicates that it is just checking for permissions, but the method can have the side-effect of creating an in-memory dependency. It would be good if the method&apos;s header mentioned this side-effect.&lt;/p&gt;

&lt;p&gt;o StatementColumnPermission.allColumnsCoveredByUserOrPUBLIC() - The first line of the header comment says that the method returns true if the permissions depend on the current role. But the @return clause says the opposite. I think that the @return clause agrees with the actual implementation.&lt;/p&gt;</comment>
                            <comment id="12623493" author="dagw" created="Tue, 19 Aug 2008 00:26:49 +0100"  >&lt;p&gt;Thanks for looking at this patch, Rick!&lt;/p&gt;

&lt;p&gt;Uploading revision derby-3223-revocation-logic-4, which addresses&lt;br/&gt;
your last three comments. As for the first, which paragraphs in particular&lt;br/&gt;
did you miss equivalent comments for in the code? &lt;br/&gt;
(just not sure what to add where.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Also, in DDLConstantAction, I changed the state variable roleDepAdded to just&lt;br/&gt;
a wrapped boolean (a hashmap was overkill).&lt;/p&gt;</comment>
                            <comment id="12623712" author="rhillegas" created="Tue, 19 Aug 2008 17:18:25 +0100"  >&lt;p&gt;Thanks, Dag. I thought that the following paragraphs were useful for understanding the associated classes:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DropRoleConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/RevokeRoleConstantAction.java&lt;/p&gt;

&lt;p&gt;When a role is dropped, for every role in its grantee closure, we call&lt;br/&gt;
two invalidate actions.  REVOKE_ROLE and INTERNAL_RECOMPILE_REQUEST.&lt;br/&gt;
The latter is used to force recompilation of dependent prepared&lt;br/&gt;
statements, the former to drop dependent objects (constraints,&lt;br/&gt;
triggers and views).  Note that until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1632&quot; title=&quot;During revoke privilege, Derby does not look for replacement privilege for the dependent objects and simply drops the dependent objects. This is not SQL compliant and should be fixed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1632&quot;&gt;DERBY-1632&lt;/a&gt; is fixed, we risk&lt;br/&gt;
dropping objects not really dependent on this role, but one some other&lt;br/&gt;
role just because it inherits from this one.&lt;/p&gt;




&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/DDLConstantAction.java&lt;/p&gt;

&lt;p&gt;In storeConstraintDependenciesOnPrivileges, for each required&lt;br/&gt;
privilege, we now register of a dependency on a role if that role was&lt;br/&gt;
required to find an applicable privilege.&lt;/p&gt;

&lt;p&gt;In storeViewTriggerDependenciesOnPrivileges, for each required&lt;br/&gt;
privilege, we now register of a dependency on a role if that role was&lt;br/&gt;
required to find an applicable privilege. Also added a sanity check to&lt;br/&gt;
make the trigger does nto depend on schema or role creation privileges.&lt;/p&gt;</comment>
                            <comment id="12623812" author="dagw" created="Tue, 19 Aug 2008 22:15:43 +0100"  >&lt;p&gt;Thanks, Rick. I added those comments, uploading revision #5, which replaces the earlier revs. Regressions ran OK. I intend to commit this is there are no further comments in a few days.&lt;/p&gt;</comment>
                            <comment id="12625534" author="dagw" created="Mon, 25 Aug 2008 23:14:56 +0100"  >&lt;p&gt;Committed patch #5 as svn revision 688900.&lt;/p&gt;

&lt;p&gt;Not closing yet; I am working on a patch to change to invalidating activations rather&lt;br/&gt;
than prepared statements when a session changes the current role, and that role was&lt;br/&gt;
relied upon for authorizing the activation of the ps.&lt;/p&gt;</comment>
                            <comment id="12625804" author="dagw" created="Tue, 26 Aug 2008 18:47:06 +0100"  >&lt;p&gt;Uploading a new patch, derby-3223-invalidate-activations-1 for review;&lt;br/&gt;
regressions ran ok.&lt;/p&gt;

&lt;p&gt;This patch changes the way we handle what happens in the following&lt;br/&gt;
situation:&lt;/p&gt;

&lt;p&gt;A session has a current role set. A prepared statement has been&lt;br/&gt;
executed which relies on the current role to get the necessary&lt;br/&gt;
privileges. Then, if the current role changes, we need to re-check if&lt;br/&gt;
sufficient privileges are still in place.&lt;/p&gt;

&lt;p&gt;Currently, this is being handled by invalidating the compiled plan of&lt;br/&gt;
the prepared statement, causing all activations of the prepared&lt;br/&gt;
statement to be discarded. The checking happens the first time the&lt;br/&gt;
prepared statement is used in a session, i.e. when the activation is&lt;br/&gt;
constructed. So, invalidated the compiled plans (shared across&lt;br/&gt;
sessions) is a sufficient, but heavy-handed way of forcing a re-check&lt;br/&gt;
in the session which changed its current role.&lt;/p&gt;

&lt;p&gt;This patch does away with this, instead marking the activation as&lt;br/&gt;
invalid when the current role changes. So, the next time execution of&lt;br/&gt;
the prepared statement is attempted, the activation is recreated for&lt;br/&gt;
the session context. This is quicker for the current session than&lt;br/&gt;
recompiling the execution plan, and also shields other sessions from&lt;br/&gt;
having to recreate their activation.&lt;/p&gt;

&lt;p&gt;Any open result sets will remain usable as before, since these remain&lt;br/&gt;
open; even though the old (base)activation is no longer referenced&lt;br/&gt;
from the GenericActivationHolder, there is a reference to the old&lt;br/&gt;
activation from the result set, so it stays alive.&lt;/p&gt;

&lt;p&gt;It is only the next execute of the prepared statement after a SET ROLE&lt;br/&gt;
that we will notice if privileges are now insufficient. This is the&lt;br/&gt;
same behavior as before (and the same behavior as other privilege&lt;br/&gt;
revokes).&lt;/p&gt;

&lt;p&gt;I have tried to check that this new method is safe, but please don&apos;t&lt;br/&gt;
assume anything. It should be thread safe, since only the current&lt;br/&gt;
session&apos;s thread is involved.&lt;/p&gt;

&lt;p&gt;Since this is just an optimization, the role tests are unmodified.&lt;/p&gt;</comment>
                            <comment id="12625838" author="rhillegas" created="Tue, 26 Aug 2008 20:48:05 +0100"  >&lt;p&gt;Thanks for the patch, Dag. I have a couple comments, mostly related to the switch statements which filter out useful invalidation reasons:&lt;/p&gt;

&lt;p&gt;BaseActivation.makeInvalid(): To my eyes there is only one case in this switch&lt;br/&gt;
statement which does anything. Are the other cases performing some&lt;br/&gt;
useful work? There&apos;s a similar, long switch statement in&lt;br/&gt;
ConstraintDescriptor.prepareToInvalidate(), which I noticed you had to&lt;br/&gt;
touch. Was that useful?&lt;/p&gt;

&lt;p&gt;ViewDescriptor.prepareToInvalidate(). Here&apos;s another long, vacuous&lt;br/&gt;
switch statement which puzzles me. Is there some reason that all of&lt;br/&gt;
the cases fall through to the RECHECK_PRIVILEGES case except for the&lt;br/&gt;
INTERNAL_RECOMPILE_REQUEST case? It looks to me as though the work of&lt;br/&gt;
this switch statement could be accomplished by one case&lt;br/&gt;
(REVOKE_PRIVILEGE_RESTRICT), which raises an exception--all other&lt;br/&gt;
cases could exit gracefully without having to bother to name themselves.&lt;/p&gt;

&lt;p&gt;GenericActivationHolder. I wonder what it means for this object to&lt;br/&gt;
have the same UUID as the Activation it holds. This UUID will not&lt;br/&gt;
uniquely identify an object.&lt;/p&gt;</comment>
                            <comment id="12625905" author="dagw" created="Wed, 27 Aug 2008 00:22:28 +0100"  >&lt;p&gt;Thanks, Rick!&lt;/p&gt;

&lt;p&gt;&amp;gt; BaseActivation.makeInvalid(): To my eyes there is only one case in this&lt;br/&gt;
&amp;gt; switch statement which does anything. Are the other cases performing some&lt;br/&gt;
&amp;gt; useful work?&lt;/p&gt;

&lt;p&gt;No, but the two actions that are no-ops will arrive but should be&lt;br/&gt;
ignored. Other actions (than these two) should not even arrive, so I added a&lt;br/&gt;
sane assert.&lt;/p&gt;

&lt;p&gt;The action REVOKE_ROLE is called when a role is revoked, to force invalidation&lt;br/&gt;
(i.e. dropping currently) of views, triggers and constraints which depend on a&lt;br/&gt;
role, similarly to what is done when permissions are revoked&lt;br/&gt;
(REVOKE_PRIVILEGE). Since activations also may now depend on a role, we must&lt;br/&gt;
be prepared for the REVOKE_ROLE action to arrive, since the invalidation called (see&lt;br/&gt;
e.g. invalidateFor(REVOKE_ROLE) call in RevokeRoleConstantAction) visits all&lt;br/&gt;
dependents of the role, not just the ones that need it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The action INTERNAL_RECOMPILE_REQUEST is intended to invalidate prepared&lt;br/&gt;
statements (which I relied on before this patch), but also to invalidate SPSes&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;which are used by triggers and constraints&amp;#93;&lt;/span&gt;, but it may now be unnecessary to&lt;br/&gt;
call this action from RevokeRoleConstantAction/DropRoleConstantAction since&lt;br/&gt;
the descriptors do it themselves, cf. ViewDescriptor#drop which&lt;br/&gt;
calls invalidateFor(DROP_VIEW), which in turn is heeded by SPSes. I will see if I can&lt;br/&gt;
safely omit the invalidateFor(INTERNAL_RECOMPILE_REQUEST) call from&lt;br/&gt;
RevokeRoleConstantAction/ DropRoleConstantAction.&lt;/p&gt;

&lt;p&gt;&amp;gt; There&apos;s a similar, long switch statement in&lt;br/&gt;
&amp;gt; ConstraintDescriptor.prepareToInvalidate(), which I noticed you had&lt;br/&gt;
&amp;gt; to touch. Was that useful?&lt;/p&gt;

&lt;p&gt;Yes. Since constraints can also depend on roles, they would also get signalled&lt;br/&gt;
when we issue the RECHECK_PRIVILEGES when the current role is changed (in&lt;br/&gt;
addition to the intended activation), but we don&apos;t want views, constraints or&lt;br/&gt;
triggers to be impacted by this action, hence the no-op.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; ViewDescriptor.prepareToInvalidate(). Here&apos;s another long, vacuous&lt;br/&gt;
&amp;gt; switch statement which puzzles me. Is there some reason that all of&lt;br/&gt;
&amp;gt; the cases fall through to the RECHECK_PRIVILEGES case except for the&lt;br/&gt;
&amp;gt; INTERNAL_RECOMPILE_REQUEST case? It looks to me as though the work&lt;br/&gt;
&amp;gt; of this switch statement could be accomplished by one case&lt;br/&gt;
&amp;gt; (REVOKE_PRIVILEGE_RESTRICT), which raises an exception--all other&lt;br/&gt;
&amp;gt; cases could exit gracefully without having to bother to name&lt;br/&gt;
&amp;gt; themselves.&lt;/p&gt;

&lt;p&gt;Right, I think they are enumerated to show they are legal no-ops. I just added&lt;br/&gt;
my two new actions here following the existing pattern.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; GenericActivationHolder. I wonder what it means for this object to&lt;br/&gt;
&amp;gt; have the same UUID as the Activation it holds. This UUID will not&lt;br/&gt;
&amp;gt; uniquely identify an object.&lt;/p&gt;

&lt;p&gt;The forwarding implementation in GenericActivationHolder is vacuous; it is presently not&lt;br/&gt;
used, but needed to make the class concrete. I will add comments/asserts to make this&lt;br/&gt;
clear instead of the redirections (I initially thought I needed them).  Thanks for noticing,&lt;br/&gt;
I&apos;ll respin the patch. &lt;/p&gt;
</comment>
                            <comment id="12626347" author="dagw" created="Wed, 27 Aug 2008 23:36:39 +0100"  >&lt;p&gt;Uploading #2 of this patch which replaces #1 (derby-3223-invalidate-activations-2.diff).&lt;/p&gt;

&lt;p&gt;This changes the Dependent and Depandable implementations in GenericActivationHolder with comments that they are dummies, and sanity check we won&apos;t get there.&lt;/p&gt;

&lt;p&gt;Removed the invalidation with action INTERNAL_RECOMPILE_REQUEST from DropRoleConstantAction/RevoekRoleConstantAction and verified that they are ot needed.&lt;/p&gt;

&lt;p&gt;I also added a new testcase (testOpenRs) for verifying that an already open result set can still be read even if the required privileges of the statements are no longer in place (lost while we access the rs).&lt;/p&gt;

&lt;p&gt;Re-running regressions.&lt;/p&gt;</comment>
                            <comment id="12626978" author="dagw" created="Fri, 29 Aug 2008 15:05:16 +0100"  >&lt;p&gt;Regressions passed. If there are no further comments on this patch I will commit it on Monday.&lt;/p&gt;</comment>
                            <comment id="12627498" author="dagw" created="Mon, 1 Sep 2008 17:06:36 +0100"  >&lt;p&gt;Committed derby-3223-invalidate-activations-2as svn 691007.&lt;/p&gt;</comment>
                            <comment id="12628033" author="mamtas" created="Wed, 3 Sep 2008 17:06:36 +0100"  >&lt;p&gt;Dag, sorry I need to reopen the issue but I noticed some javadoc failures which I think I related to commits made for this jira entry.&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\GenericActivationHolder.java:679: warning - Tag @see: reference not found: Dependent#isValid&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\GenericActivationHolder.java:692: warning - Tag @see: reference not found: Dependent#makeInvalid&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\GenericActivationHolder.java:705: warning - Tag @see: reference not found: Dependent#prepareToInvalidate&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\execute\BaseActivation.java:1784: warning - Tag @see: reference not found: Dependent#isValid&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\execute\BaseActivation.java:1791: warning - Tag @see: reference not found: Dependent#makeInvalid&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\execute\BaseActivation.java:1825: warning - Tag @see: reference not found: Dependent#prepareToInvalidate&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\execute\DropRoleConstantAction.java:82: warning - Tag @see: reference not found: org.apache.derby.iapi.sql.&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt;       execute.ConstantAction#executeConstantAction&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\sql\execute\RevokeRoleConstantAction.java:71: warning - Tag @see: reference not found: org.apache.derby.iapi.sql.execute.&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt;       ConstantAction#executeConstantAction&lt;/p&gt;</comment>
                            <comment id="12628093" author="dagw" created="Wed, 3 Sep 2008 19:46:58 +0100"  >&lt;p&gt;Thanks, Mamta! Committed a fix as svn 691726, closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12359718">DERBY-2207</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12379930" name="derby-3223-1a.diff" size="78636" author="dagw" created="Fri, 11 Apr 2008 17:42:15 +0100"/>
                            <attachment id="12379931" name="derby-3223-1a.stat" size="2379" author="dagw" created="Fri, 11 Apr 2008 17:42:15 +0100"/>
                            <attachment id="12380020" name="derby-3223-1b.diff" size="92735" author="dagw" created="Sun, 13 Apr 2008 22:17:46 +0100"/>
                            <attachment id="12380021" name="derby-3223-1b.stat" size="2931" author="dagw" created="Sun, 13 Apr 2008 22:17:46 +0100"/>
                            <attachment id="12380347" name="derby-3223-1c.diff" size="109375" author="dagw" created="Thu, 17 Apr 2008 01:14:53 +0100"/>
                            <attachment id="12380348" name="derby-3223-1c.stat" size="3072" author="dagw" created="Thu, 17 Apr 2008 01:14:53 +0100"/>
                            <attachment id="12381313" name="derby-3223-1d.diff" size="109363" author="dagw" created="Fri, 2 May 2008 15:07:10 +0100"/>
                            <attachment id="12381314" name="derby-3223-1d.stat" size="3072" author="dagw" created="Fri, 2 May 2008 15:07:10 +0100"/>
                            <attachment id="12385738" name="derby-3223-activate-roles-1.diff" size="64133" author="dagw" created="Thu, 10 Jul 2008 12:59:23 +0100"/>
                            <attachment id="12385739" name="derby-3223-activate-roles-1.stat" size="826" author="dagw" created="Thu, 10 Jul 2008 12:59:23 +0100"/>
                            <attachment id="12386019" name="derby-3223-activate-roles-2.diff" size="67370" author="dagw" created="Mon, 14 Jul 2008 23:35:58 +0100"/>
                            <attachment id="12386020" name="derby-3223-activate-roles-2.stat" size="1071" author="dagw" created="Mon, 14 Jul 2008 23:35:58 +0100"/>
                            <attachment id="12386069" name="derby-3223-activate-roles-2b.diff" size="4153" author="dagw" created="Tue, 15 Jul 2008 16:47:55 +0100"/>
                            <attachment id="12386070" name="derby-3223-activate-roles-2b.stat" size="103" author="dagw" created="Tue, 15 Jul 2008 16:47:55 +0100"/>
                            <attachment id="12388929" name="derby-3223-invalidate-activations-1.diff" size="27149" author="dagw" created="Tue, 26 Aug 2008 18:47:06 +0100"/>
                            <attachment id="12388930" name="derby-3223-invalidate-activations-1.stat" size="1264" author="dagw" created="Tue, 26 Aug 2008 18:47:06 +0100"/>
                            <attachment id="12389051" name="derby-3223-invalidate-activations-2.diff" size="37720" author="dagw" created="Wed, 27 Aug 2008 23:36:39 +0100"/>
                            <attachment id="12389052" name="derby-3223-invalidate-activations-2.stat" size="1264" author="dagw" created="Wed, 27 Aug 2008 23:36:39 +0100"/>
                            <attachment id="12385617" name="derby-3223-revise-iterator-api-b.diff" size="11756" author="dagw" created="Wed, 9 Jul 2008 12:24:40 +0100"/>
                            <attachment id="12385618" name="derby-3223-revise-iterator-api-b.stat" size="487" author="dagw" created="Wed, 9 Jul 2008 12:24:40 +0100"/>
                            <attachment id="12385494" name="derby-3223-revise-iterator-api.diff" size="14556" author="dagw" created="Tue, 8 Jul 2008 13:51:56 +0100"/>
                            <attachment id="12385495" name="derby-3223-revise-iterator-api.stat" size="638" author="dagw" created="Tue, 8 Jul 2008 13:51:59 +0100"/>
                            <attachment id="12386201" name="derby-3223-revocation-logic-1.diff" size="100469" author="dagw" created="Wed, 16 Jul 2008 18:42:28 +0100"/>
                            <attachment id="12386202" name="derby-3223-revocation-logic-1.stat" size="1476" author="dagw" created="Wed, 16 Jul 2008 18:42:28 +0100"/>
                            <attachment id="12388343" name="derby-3223-revocation-logic-2.diff" size="93992" author="dagw" created="Sat, 16 Aug 2008 01:12:59 +0100"/>
                            <attachment id="12388344" name="derby-3223-revocation-logic-2.stat" size="1002" author="dagw" created="Sat, 16 Aug 2008 01:12:59 +0100"/>
                            <attachment id="12388342" name="derby-3223-revocation-logic-2.txt" size="13422" author="dagw" created="Sat, 16 Aug 2008 01:12:59 +0100"/>
                            <attachment id="12388450" name="derby-3223-revocation-logic-3.diff" size="92515" author="dagw" created="Mon, 18 Aug 2008 16:28:18 +0100"/>
                            <attachment id="12388451" name="derby-3223-revocation-logic-3.stat" size="1002" author="dagw" created="Mon, 18 Aug 2008 16:28:18 +0100"/>
                            <attachment id="12388477" name="derby-3223-revocation-logic-4.diff" size="94272" author="dagw" created="Tue, 19 Aug 2008 00:26:49 +0100"/>
                            <attachment id="12388478" name="derby-3223-revocation-logic-4.stat" size="1002" author="dagw" created="Tue, 19 Aug 2008 00:26:49 +0100"/>
                            <attachment id="12388562" name="derby-3223-revocation-logic-5.diff" size="100020" author="dagw" created="Tue, 19 Aug 2008 22:15:43 +0100"/>
                            <attachment id="12388563" name="derby-3223-revocation-logic-5.stat" size="1002" author="dagw" created="Tue, 19 Aug 2008 22:15:43 +0100"/>
                            <attachment id="12379951" name="roles.sql" size="794" author="rhillegas" created="Fri, 11 Apr 2008 20:29:55 +0100"/>
                            <attachment id="12379953" name="roles2.sql" size="229" author="rhillegas" created="Fri, 11 Apr 2008 20:57:14 +0100"/>
                            <attachment id="12380793" name="roles3.sql" size="258" author="rhillegas" created="Wed, 23 Apr 2008 20:52:35 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12395431">DERBY-3666</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Apr 2008 19:29:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30776</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0v93:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38881</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>