<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:27:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4413/DERBY-4413.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4413] INSERT from SELECT DISTINCT gives assertFailure (sane), or  NPE (insane) in presence of generated columns</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4413</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When a generated column is present in a table, an INSERT DISTINCT fail:&lt;br/&gt;
Repro:&lt;/p&gt;

&lt;p&gt;create table t(i integer, &lt;br/&gt;
               j integer not null generated always as (i*66));&lt;br/&gt;
insert into t&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; values 1,2;&lt;br/&gt;
insert into t&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; select distinct i from t;&lt;/p&gt;

&lt;p&gt;In an insane build we see this assertFailure:&lt;/p&gt;

&lt;p&gt;ij version 10.5&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat2;create=true&apos;;&lt;br/&gt;
ij&amp;gt; create table t(i integer, &lt;br/&gt;
               j integer not null generated always as (i*66));&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; values 1,2;&lt;br/&gt;
2 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; select distinct i from t;&lt;br/&gt;
ERROR XJ001: Java exception: &apos;ASSERT FAILED col&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
java.sql.SQLException: Java exception: &apos;ASSERT FAILED col&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Util.java:244)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:555)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:329)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:505)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:347)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.go(Main.java:217)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)&lt;br/&gt;
	at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)&lt;br/&gt;
	at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
	at org.apache.derby.iapi.tools.run.main(run.java:53)&lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;ASSERT FAILED col&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  is null: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
	... 18 more&lt;br/&gt;
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED col&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  is null&lt;br/&gt;
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)&lt;br/&gt;
	at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)&lt;br/&gt;
	at org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(MergeSort.java:458)&lt;br/&gt;
	at org.apache.derby.impl.store.access.sort.MergeInserter.insert(MergeInserter.java:98)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(SortResultSet.java:317)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:268)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore(NormalizeResultSet.java:139)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:415)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;br/&gt;
	... 11 more&lt;/p&gt;</description>
                <environment></environment>
        <key id="12438441">DERBY-4413</key>
            <summary>INSERT from SELECT DISTINCT gives assertFailure (sane), or  NPE (insane) in presence of generated columns</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Oct 2009 13:26:54 +0100</created>
                <updated>Thu, 13 Jan 2011 17:23:26 +0000</updated>
                            <resolved>Tue, 6 Jul 2010 19:51:14 +0100</resolved>
                                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                                    <fixVersion>10.5.3.1</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12767311" author="dagw" created="Mon, 19 Oct 2009 13:36:35 +0100"  >&lt;p&gt;If I use a default value rather than a GENERATED ALWAYS AS, it works&lt;br/&gt;
as expected.&lt;/p&gt;

&lt;p&gt;It seems the generated values are computed deferredly,&lt;br/&gt;
i.e. when row is to be inserted (InsertResultSet), whereas default&lt;br/&gt;
values are generated along with the rest of the columns. This causes a&lt;br/&gt;
problem for the sorter in the former case.&lt;/p&gt;

&lt;p&gt;Default values are handled via this logic:&lt;/p&gt;

&lt;p&gt;Cf. InsertNode#bindStatement -&amp;gt; InsertNode#enhanceAndCheckForAutoincrement -&amp;gt;&lt;br/&gt;
    ResultSetNode#enhanceRCLForInsert -&amp;gt; genNewRCForInsert (ca line 1149)&lt;/p&gt;

&lt;p&gt;whereas generated columns are explicitly deferred in that code&lt;br/&gt;
and handled here:&lt;br/&gt;
    InsertNode#bindStatement -&amp;gt; parseAndBindGenerationClauses&lt;/p&gt;

&lt;p&gt;Since generated columns are not bound down through the &quot;enhanced&quot;&lt;br/&gt;
result set&apos;s RCL, code is not generated for the &quot;null&quot; constants left&lt;br/&gt;
by enhanceRCLForInsert, and the sorter crashes.&lt;/p&gt;

&lt;p&gt;Note that the RC has an expression containing an untyped NULL,&lt;br/&gt;
so it seems the column is not well-formed when the sorter sees it.&lt;/p&gt;

&lt;p&gt;   org.apache.derby.impl.sql.compile.ResultColumn@9dca26&lt;br/&gt;
   exposedName: null&lt;br/&gt;
   name: J&lt;br/&gt;
   tableName: null&lt;br/&gt;
   isDefaultColumn: false&lt;br/&gt;
   wasDefaultColumn: false&lt;br/&gt;
   isNameGenerated: false&lt;br/&gt;
   sourceTableName: null&lt;br/&gt;
   type: INTEGER NOT NULL&lt;br/&gt;
   columnDescriptor: columnName: J&lt;br/&gt;
   columnPosition: 2&lt;br/&gt;
   columnType: INTEGER NOT NULL&lt;br/&gt;
   columnDefault: null&lt;br/&gt;
   uuid: eb0f4097-0124-6cc9-1ba1-000003db0968&lt;br/&gt;
   defaultUUID: c3350098-0124-6cc9-1ba1-000003db0968&lt;/p&gt;

&lt;p&gt;   isGenerated: false&lt;br/&gt;
   isGeneratedForUnmatchedColumnInInsert: true&lt;br/&gt;
   isGroupingColumn: false&lt;br/&gt;
   isReferenced: true&lt;br/&gt;
   isRedundant: false&lt;br/&gt;
   virtualColumnId: 2&lt;br/&gt;
   resultSetNumber: -1&lt;br/&gt;
   dataTypeServices: INTEGER NOT NULL&lt;br/&gt;
   expression:             &lt;br/&gt;
      org.apache.derby.impl.sql.compile.UntypedNullConstantNode@1429cb2&lt;br/&gt;
      value: null&lt;br/&gt;
      dataTypeServices: null&lt;/p&gt;</comment>
                            <comment id="12768969" author="dagw" created="Fri, 23 Oct 2009 00:27:26 +0100"  >&lt;p&gt;Attaching a patch which makes DISTINCT work.  It turns out that&lt;br/&gt;
untyped nulls (as used in the query tree for generated columns), do&lt;br/&gt;
not generate any code, so the column will be empty while the result&lt;br/&gt;
set to be INSERTed is being constructed (at execution time). This is&lt;br/&gt;
OK since the value will be filled in later (by InsertResultSet&apos;s call&lt;br/&gt;
evaluateGenerationClauses).&lt;/p&gt;

&lt;p&gt;This small patch makes sorted result sets accept (ignore, really)&lt;br/&gt;
empty columns, which is OK I think, since they are not part of the&lt;br/&gt;
sort key anyway. Added a new test case to GeneratedColumnsTest.&lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="12768971" author="dagw" created="Fri, 23 Oct 2009 00:34:48 +0100"  >&lt;p&gt;For the record, I found this issue when trying to warm up Bryan&apos;s patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt; to allow&lt;br/&gt;
INSERT with ORDER BY on the result set as part of investigating &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4397&quot; title=&quot;Allow ORDER BY in subqueries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4397&quot;&gt;&lt;del&gt;DERBY-4397&lt;/del&gt;&lt;/a&gt; (ORDER BY in subqueries).&lt;br/&gt;
Since DISTINCT in this issue requires a sort, the cases hit the same problem.&lt;/p&gt;</comment>
                            <comment id="12769100" author="knutanders" created="Fri, 23 Oct 2009 07:07:37 +0100"  >&lt;p&gt;Thanks for the fix, Dag. Perhaps it would be worth adding one-line comments in BasicSortObserver and MergeSort that state when the column is expected to be null, and perhaps also that the column cannot be part of the sort key. Instead of removing the assert in MergeSort when the column is null, we may want to replace it with a check for whether the column is part of the sort key, and fail if it is.&lt;/p&gt;</comment>
                            <comment id="12769120" author="knutanders" created="Fri, 23 Oct 2009 08:17:42 +0100"  >&lt;p&gt;You have probably already considered this, but do you think it would work to make enhanceAndCheckForAutoIncrement() insert a node between the InsertNode and its child, and modify the RCL of the inserted node instead of the RCL of the child? I was thinking that it might make the code more robust against bugs such as this one, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4419&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and identity columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4419&quot;&gt;&lt;del&gt;DERBY-4419&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4420&quot; title=&quot;NullPointerException with INSERT INTO ... from EXCEPT/INTERSECT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4420&quot;&gt;&lt;del&gt;DERBY-4420&lt;/del&gt;&lt;/a&gt;. And it also sounds (slightly) cheaper to add the stubs for the generated columns after the result has been sorted, as there will be less data to process for the sorter.&lt;/p&gt;</comment>
                            <comment id="12769223" author="rhillegas" created="Fri, 23 Oct 2009 14:39:55 +0100"  >&lt;p&gt;Thanks for the tidy patch, Dag. I agree with Knut that it might be good to assert that the null value is not part of the sort key. Thanks.&lt;/p&gt;</comment>
                            <comment id="12769279" author="dagw" created="Fri, 23 Oct 2009 17:19:53 +0100"  >&lt;p&gt;Thanks for the comments, guys. Yes, I will add the assert that the&lt;br/&gt;
column is not part of the key; good improvement, and some more&lt;br/&gt;
comments.&lt;/p&gt;

&lt;p&gt;Currently, columns that are auto generated (BY IDENTITY) are&lt;br/&gt;
constructed early (general generated columns have only the stubs) and&lt;br/&gt;
will be along in the sort. That early approach also led to the the&lt;br/&gt;
effect that Bryan saw in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;. I think it would better (and more&lt;br/&gt;
correct if I read the standard correctly) to compute those values when&lt;br/&gt;
the row is being inserted (as is currently done for the (general)&lt;br/&gt;
generated columns (&quot;late&quot;). I&apos;d like to look at that, but I think this&lt;br/&gt;
patch could go in an an incremental improvement first.&lt;/p&gt;

&lt;p&gt;Interesting about the similarity with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4419&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and identity columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4419&quot;&gt;&lt;del&gt;DERBY-4419&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4420&quot; title=&quot;NullPointerException with INSERT INTO ... from EXCEPT/INTERSECT&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4420&quot;&gt;&lt;del&gt;DERBY-4420&lt;/del&gt;&lt;/a&gt;,&lt;br/&gt;
Knut. As for adding an intermediary node, I guess that could work for&lt;br/&gt;
SELECT, but would it work for a VALUES clause that specified&lt;br/&gt;
&quot;DEFAULT&quot;? It seems we would have to remove explicit DEFAULT column&lt;br/&gt;
values from the RCL to get uniform treatment then? (I.e. a result set&lt;br/&gt;
tree devoid of any generated columns, and maybe of plain DEFAULT&lt;br/&gt;
columns as well?) However, if we managed to do this, it might solve&lt;br/&gt;
4419/4420 too. As for cheaper, sorting the stubs for (general)&lt;br/&gt;
generated columns is probably cheaper than sorting the BY IDENTITY&lt;br/&gt;
values, since those columns are not empty. Instantiating By IDENTITY&lt;br/&gt;
(and possible plain DEFAULT) late rather than early would save (more)&lt;br/&gt;
cycles, too.&lt;/p&gt;</comment>
                            <comment id="12769307" author="knutanders" created="Fri, 23 Oct 2009 18:16:48 +0100"  >&lt;p&gt;Good point about the VALUES (DEFAULT), Dag. I didn&apos;t think about that case. I wonder what that would mean if we have an ORDER BY on a generated column, like in the query below (the syntax not allowed yet - &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;  INSERT INTO T(X) VALUES (DEFAULT), (DEFAULT) ORDER BY 1&lt;/p&gt;

&lt;p&gt;I&apos;d assume that the columns that we sort on must be generated before the rows are sent through the sorter. But then it would break the rule that the value must be computed when the row is being inserted.&lt;/p&gt;

&lt;p&gt;I agree that the current patch is a good incremental improvement, and my question about adding an intermediary node was out of curiosity and not a request for a different approach.&lt;/p&gt;</comment>
                            <comment id="12769373" author="dagw" created="Fri, 23 Oct 2009 20:15:26 +0100"  >&lt;p&gt;Thanks, Knut. Interesting corner case; I&apos;ll see if I can get any help from the standard on that one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="12769454" author="knutanders" created="Fri, 23 Oct 2009 22:12:52 +0100"  >&lt;p&gt;Just for the record... Before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1644&quot; title=&quot;NPE when inserting values to a table that has a column declared as generated by default as identity&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1644&quot;&gt;&lt;del&gt;DERBY-1644&lt;/del&gt;&lt;/a&gt;, enhanceRCLForInsert() did insert a ProjectRestrictNode on top of the existing node in order to add the generated columns, but only for set operations.&lt;/p&gt;</comment>
                            <comment id="12769492" author="dagw" created="Fri, 23 Oct 2009 23:35:23 +0100"  >&lt;p&gt;Looking at the syntax for insert statement in SQL 2008, I conclude that&lt;br/&gt;
an ORDER BY can not be attached to the INSERT INTO .. VALUES.&lt;/p&gt;

&lt;p&gt;Section 14.11 &amp;lt;insert statement&amp;gt;:&lt;/p&gt;

&lt;p&gt;    &amp;lt;insert statement&amp;gt; ::=&lt;br/&gt;
        INSERT INTO &amp;lt;insertion target&amp;gt; &amp;lt;insert columns and source&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;insert columns and source&amp;gt; ::=&lt;br/&gt;
        &amp;lt;from subquery&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;from constructor&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;from default&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    &amp;lt;from constructor&amp;gt; ::=&lt;br/&gt;
      [ &amp;lt;left paren&amp;gt; &amp;lt;insert column list&amp;gt; &amp;lt;right paren&amp;gt; ]&lt;br/&gt;
      [ &amp;lt;override clause&amp;gt; ]&lt;br/&gt;
      &amp;lt;contextually typed table value constructor&amp;gt;&lt;/p&gt;


&lt;p&gt;    &amp;lt;contextually typed table value constructor&amp;gt; ::=&lt;br/&gt;
      VALUES &amp;lt;contextually typed row value expression list&amp;gt;&lt;/p&gt;

&lt;p&gt;This would not allow and ORDER BY.  However, looking at the &amp;lt;from&lt;br/&gt;
subquery&amp;gt; alternative:&lt;/p&gt;

&lt;p&gt;    &amp;lt;from subquery&amp;gt; ::=&lt;br/&gt;
      [ &amp;lt;left paren&amp;gt; &amp;lt;insert column list&amp;gt; &amp;lt;right paren&amp;gt; ]&lt;br/&gt;
      [ &amp;lt;override clause&amp;gt; ]&lt;br/&gt;
      &amp;lt;query expression&amp;gt;&lt;/p&gt;

&lt;p&gt;    &amp;lt;query expression&amp;gt; ::=&lt;br/&gt;
      [ &amp;lt;with clause&amp;gt; ] &amp;lt;query expression body&amp;gt;&lt;br/&gt;
      [ &amp;lt;order by clause&amp;gt; ] [ &amp;lt;result offset clause&amp;gt; ] [ &amp;lt;fetch first clause&amp;gt; ]&lt;/p&gt;

&lt;p&gt;we see that here we could supply an ORDER BY clause if we the VALUES&lt;br/&gt;
clause can be derived from &amp;lt;query expression body&amp;gt;, and indeed it can:&lt;/p&gt;

&lt;p&gt;    &amp;lt;query expression body&amp;gt; ::=&lt;br/&gt;
        &amp;lt;query term&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;query expression body&amp;gt; UNION [ ALL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; DISTINCT ]&lt;br/&gt;
          [ &amp;lt;corresponding spec&amp;gt; ] &amp;lt;query term&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;query expression body&amp;gt; EXCEPT [ ALL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; DISTINCT ]&lt;br/&gt;
          [ &amp;lt;corresponding spec&amp;gt; ] &amp;lt;query term&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    &amp;lt;query term&amp;gt; ::=&lt;br/&gt;
        &amp;lt;query primary&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;query term&amp;gt; INTERSECT [ ALL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; DISTINCT ]&lt;br/&gt;
          [ &amp;lt;corresponding spec&amp;gt; ] &amp;lt;query primary&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    &amp;lt;query primary&amp;gt; ::=&lt;br/&gt;
        &amp;lt;simple table&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;left paren&amp;gt; &amp;lt;query expression body&amp;gt;&lt;br/&gt;
          [ &amp;lt;order by clause&amp;gt; ] [ &amp;lt;result offset clause&amp;gt; ] [ &amp;lt;fetch first clause&amp;gt; ] &amp;lt;right paren&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    &amp;lt;simple table&amp;gt; ::=&lt;br/&gt;
        &amp;lt;query specification&amp;gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;table value constructor&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &amp;lt;explicit table&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    &amp;lt;table value constructor&amp;gt; ::=&lt;br/&gt;
      VALUES &amp;lt;row value expression list&amp;gt;&lt;/p&gt;

&lt;p&gt;So how to resolve this?&lt;br/&gt;
Finally, looking closely, I found this (14.11, Syntactic Rule 17):&lt;/p&gt;

&lt;p&gt;    17) A &amp;lt;query expression&amp;gt; simply contained in a &amp;lt;from subquery&amp;gt; shall&lt;br/&gt;
        not be a &amp;lt;table value constructor&amp;gt;.&lt;/p&gt;

&lt;p&gt;    NOTE 391 - This rule removes a syntactic ambiguity; otherwise, &quot;VALUES (1)&quot; &lt;br/&gt;
           could be parsed either as&lt;/p&gt;

&lt;p&gt;    &amp;lt;insert columns and source&amp;gt; ::=&lt;br/&gt;
        &amp;lt;from subquery&amp;gt; ::=&lt;br/&gt;
        &amp;lt;query expression&amp;gt; ::=&lt;br/&gt;
        &amp;lt;table value constructor&amp;gt; ::=&lt;br/&gt;
        VALUES (1)&lt;/p&gt;

&lt;p&gt;    or&lt;/p&gt;

&lt;p&gt;    &amp;lt;insert columns and source&amp;gt; ::=&lt;br/&gt;
        &amp;lt;from constructor&amp;gt; ::=&lt;br/&gt;
        &amp;lt;contextually typed table value constructor&amp;gt; ::=&lt;br/&gt;
        VALUES (1)&lt;/p&gt;

&lt;p&gt;So, in conclusion, the &amp;lt;contextually typed table value constructor&amp;gt;&lt;br/&gt;
derivation will prevail, and ORDER BY can not be attached to VALUES here. &lt;/p&gt;</comment>
                            <comment id="12769532" author="dagw" created="Sat, 24 Oct 2009 00:32:23 +0100"  >&lt;p&gt;Dag said above: &quot;I think it would better (and more&lt;br/&gt;
correct if I read the standard correctly) to compute those values when&lt;br/&gt;
the row is being inserted (as is currently done for the (general)&lt;br/&gt;
generated columns (&quot;late&quot;).&quot;&lt;/p&gt;

&lt;p&gt;I checked the standard again on this point, and the upshot is that&lt;br/&gt;
defaults and default generated valued for columns not supplied should&lt;br/&gt;
be constructed when the row is inserted:&lt;/p&gt;

&lt;p&gt;Section 14.11 (SQL 2008, part 2), General rules 5,6 and 7:&lt;/p&gt;


&lt;p&gt;5) QT is effectively evaluated before insertion of any rows into T.&lt;br/&gt;
6) Let Q be the result of evaluating QT.&lt;br/&gt;
7) For each row R of Q:&lt;/p&gt;

&lt;p&gt;   a) A candidate row of T is effectively created in which the value&lt;br/&gt;
      of each column is its default value, as specified in the General&lt;br/&gt;
      Rules of Subclause 11.5, &quot;default clause&amp;gt;&quot;. The&lt;br/&gt;
      candidate row consists of every column of T.&lt;br/&gt;
      :&lt;/p&gt;

&lt;p&gt;   c) For each object column in the candidate row, let Ci be the&lt;br/&gt;
      object column identified by the i-th &amp;lt;column name&amp;gt; in the&lt;br/&gt;
      &amp;lt;insert column list&amp;gt; and let SVi be the i-th value of R.&lt;/p&gt;

&lt;p&gt;   d) For every Ci for which one of the following conditions is true:&lt;/p&gt;

&lt;p&gt;      i) Ci is not marked as unassigned and no underlying column of Ci&lt;br/&gt;
      is a self-referencing column.&lt;br/&gt;
      :&lt;/p&gt;

&lt;p&gt;      the General Rules of Subclause 9.2, &quot;Store assignment&quot;, are applied&lt;br/&gt;
      with Ci and SVi as TARGET and SOURCE, respectively. Ci is no longer&lt;br/&gt;
      marked as unassigned.&lt;/p&gt;

&lt;p&gt;My takeaway from this is that the defaults should be constructed as&lt;br/&gt;
each row is picked form the fully evaluated result set (QA). With SQL&lt;br/&gt;
2008, that result set may be sorted before insertion, e.g. as&lt;/p&gt;

&lt;p&gt;  CREATE TABLE t (i int generated always as identity, j int)&lt;br/&gt;
  INSERT INTO t (j) SELECT j from sometab ORDER BY j&lt;/p&gt;

&lt;p&gt;With the present implementation, the auto-increment happens &quot;early&quot;&lt;br/&gt;
(before the sort) and would not be monotonically increasing in the&lt;br/&gt;
result set to be inserted, cf. Bryan&apos;s issue in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4&quot; title=&quot;&amp;quot;order by&amp;quot; is not supported for &amp;quot;insert ... select&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4&quot;&gt;&lt;del&gt;DERBY-4&lt;/del&gt;&lt;/a&gt;.  For general&lt;br/&gt;
generated columns, it happens at the right time (&quot;late&quot;).  So, for&lt;br/&gt;
&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4397&quot; title=&quot;Allow ORDER BY in subqueries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4397&quot;&gt;&lt;del&gt;DERBY-4397&lt;/del&gt;&lt;/a&gt; Allow ORDER BY in subqueries&quot;, we would need to move the&lt;br/&gt;
auto-increment to &quot;late&quot; phase also to make it correct (not just a&lt;br/&gt;
performance issue).&lt;/p&gt;</comment>
                            <comment id="12769559" author="dagw" created="Sat, 24 Oct 2009 02:08:50 +0100"  >&lt;p&gt;Uploading derby-4413-2, which checks that&apos;s we accept a null in the sanity check only if the column is not part of the sort key. It also adds comments as suggested. Re-running regressions with insane and sane modes (since code path varies).&lt;/p&gt;</comment>
                            <comment id="12769676" author="dagw" created="Sat, 24 Oct 2009 17:37:23 +0100"  >&lt;p&gt;Regressions ran ok with both sane and insane jars.&lt;/p&gt;</comment>
                            <comment id="12769677" author="dagw" created="Sat, 24 Oct 2009 17:58:52 +0100"  >&lt;p&gt;Committed as svn 829410, resolving. We may want to backport this fix.&lt;/p&gt;</comment>
                            <comment id="12783902" author="dagw" created="Mon, 30 Nov 2009 22:33:35 +0000"  >&lt;p&gt;After &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4442&quot; title=&quot;Evaluation of default value and identity in an INSERT result set evaluated too early.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4442&quot;&gt;&lt;del&gt;DERBY-4442&lt;/del&gt;&lt;/a&gt; went in, the exception to the ASSERT check we made in the fix for this issue, could be rolled back, so as to provide a better internal consistency check. Attaching&lt;br/&gt;
derby-4413-rollback to that end. I keep the extras test cases, though. Running regressions.&lt;/p&gt;</comment>
                            <comment id="12784022" author="dagw" created="Tue, 1 Dec 2009 02:51:48 +0000"  >&lt;p&gt;Regressions passed, committed the rollback patch as svn 885659, closing.&lt;/p&gt;</comment>
                            <comment id="12884453" author="lilywei" created="Thu, 1 Jul 2010 23:04:17 +0100"  >&lt;p&gt;Reopen to 10.5 back port&lt;/p&gt;</comment>
                            <comment id="12884933" author="mikem" created="Sat, 3 Jul 2010 16:38:02 +0100"  >&lt;p&gt;working on backporting this issue to 10.5.  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4419&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and identity columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4419&quot;&gt;&lt;del&gt;DERBY-4419&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4413&quot; title=&quot;INSERT from SELECT DISTINCT gives assertFailure (sane), or  NPE (insane) in presence of generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4413&quot;&gt;&lt;del&gt;DERBY-4413&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4425&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and columns generated from expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4425&quot;&gt;&lt;del&gt;DERBY-4425&lt;/del&gt;&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4442&quot; title=&quot;Evaluation of default value and identity in an INSERT result set evaluated too early.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4442&quot;&gt;&lt;del&gt;DERBY-4442&lt;/del&gt;&lt;/a&gt; all seem related.  I am going to apply and checkin the backported changes to these issues in order.  I think the changes necessary are:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4413&quot; title=&quot;INSERT from SELECT DISTINCT gives assertFailure (sane), or  NPE (insane) in presence of generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4413&quot;&gt;&lt;del&gt;DERBY-4413&lt;/del&gt;&lt;/a&gt; #829410&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4419&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and identity columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4419&quot;&gt;&lt;del&gt;DERBY-4419&lt;/del&gt;&lt;/a&gt; #831304&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4425&quot; title=&quot;NullPointerException with INSERT INTO ... from UNION and columns generated from expressions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4425&quot;&gt;&lt;del&gt;DERBY-4425&lt;/del&gt;&lt;/a&gt; #831319&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4442&quot; title=&quot;Evaluation of default value and identity in an INSERT result set evaluated too early.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4442&quot;&gt;&lt;del&gt;DERBY-4442&lt;/del&gt;&lt;/a&gt; #885421&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4413&quot; title=&quot;INSERT from SELECT DISTINCT gives assertFailure (sane), or  NPE (insane) in presence of generated columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4413&quot;&gt;&lt;del&gt;DERBY-4413&lt;/del&gt;&lt;/a&gt; #885659&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4442&quot; title=&quot;Evaluation of default value and identity in an INSERT result set evaluated too early.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4442&quot;&gt;&lt;del&gt;DERBY-4442&lt;/del&gt;&lt;/a&gt; #888311&lt;/p&gt;</comment>
                            <comment id="12884978" author="mikem" created="Sun, 4 Jul 2010 00:50:19 +0100"  >&lt;p&gt;committed backport of #829410 from trunk to 10.5 branch.&lt;/p&gt;

&lt;p&gt;m105_jdk16:33&amp;gt;svn commit&lt;br/&gt;
Sending        .&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java&lt;br/&gt;
Transmitting file data ....&lt;br/&gt;
Committed revision 960285.&lt;/p&gt;</comment>
                            <comment id="12885423" author="mikem" created="Tue, 6 Jul 2010 05:58:07 +0100"  >&lt;p&gt;merged change #885659 from trunk to 10.5.&lt;/p&gt;

&lt;p&gt;m105_jdk16:99&amp;gt;svn commit&lt;br/&gt;
Sending        .&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/access/sort/MergeSort.java&lt;br/&gt;
Transmitting file data ..&lt;br/&gt;
Committed revision 960783.&lt;/p&gt;</comment>
                            <comment id="12885634" author="mikem" created="Tue, 6 Jul 2010 19:51:14 +0100"  >&lt;p&gt;backported all changes for this fix from trunk to 10.5, resolving as fixed and reassigning the orignal owner.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12440634">DERBY-4442</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12468384">DERBY-4728</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12423089" name="derby-4413-2.diff" size="5488" author="dagw" created="Sat, 24 Oct 2009 02:08:50 +0100"/>
                            <attachment id="12423090" name="derby-4413-2.stat" size="323" author="dagw" created="Sat, 24 Oct 2009 02:08:50 +0100"/>
                            <attachment id="12426459" name="derby-4413-rollback.diff" size="3031" author="dagw" created="Mon, 30 Nov 2009 22:33:35 +0000"/>
                            <attachment id="12426460" name="derby-4413-rollback.stat" size="152" author="dagw" created="Mon, 30 Nov 2009 22:33:35 +0000"/>
                            <attachment id="12422968" name="derby-4413.diff" size="3690" author="dagw" created="Fri, 23 Oct 2009 00:27:26 +0100"/>
                            <attachment id="12422969" name="derby-4413.stat" size="323" author="dagw" created="Fri, 23 Oct 2009 00:27:26 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Oct 2009 06:07:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24241</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0npz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37661</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>