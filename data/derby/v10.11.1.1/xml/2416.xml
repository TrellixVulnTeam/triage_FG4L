<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:48 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2416/DERBY-2416.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2416] Provide collation sensitive subclasses for SQLChar, SQLVarchar, SQLLongvarchar and SQLClob which will use the passed Collator to do the collation rather than the default collation of UCS_BASIC</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2416</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This jira entry is one of the tasks involved in implementing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2336&quot; title=&quot;Enable collation based ordering for CHAR data type.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2336&quot;&gt;&lt;del&gt;DERBY-2336&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The existing SQLChar datatype has the Derby&apos;s default collation which is UCS_BASIC defined on them. With Derby 10.3, we want to support an additional collation for char datatypes which will be based on the territory. This jira issue is the placeholder for creating subclass of SQLChar which will use the passed Collator to do the collation. The current use of this class in Derby 10.3 will be for territory based collation but this class can be used in future for other kinds of collations like case-insensitive etc.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12364376">DERBY-2416</key>
            <summary>Provide collation sensitive subclasses for SQLChar, SQLVarchar, SQLLongvarchar and SQLClob which will use the passed Collator to do the collation rather than the default collation of UCS_BASIC</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Mar 2007 19:37:07 +0000</created>
                <updated>Thu, 2 May 2013 03:29:05 +0100</updated>
                            <resolved>Mon, 14 May 2007 22:30:49 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12479335" author="djd" created="Thu, 8 Mar 2007 15:24:52 +0000"  >&lt;p&gt;Will this class have knowledge of &quot;territory based collation&quot; or will it just use a java.text.Collator to perform collation?&lt;br/&gt;
I don&apos;t think the class needs any knowledge of how the Collator was created or how it is sorting.&lt;/p&gt;</comment>
                            <comment id="12479336" author="mamtas" created="Thu, 8 Mar 2007 15:31:21 +0000"  >&lt;p&gt;The class will not have any knowledge of what kind of collation it is using. Instead, it will just use the Collator object for comparison. The Collator object will get passed to it in it&apos;s constructor.&lt;/p&gt;</comment>
                            <comment id="12479694" author="mamtas" created="Fri, 9 Mar 2007 19:52:21 +0000"  >&lt;p&gt;I have a simple patch (DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v1.txt) which contains a class for character datatype with it&apos;s own collator. The class extends the existing SQLChar and it is called SQLCharWithNonDefaultCollation (I am always on verbose side while naming classes and methods. So, if someone has any other suggestion for the new class name, please feel free to suggest). The class lies in the same package as other datatypes at org.apache.derby.iapi.types. In addition, I added a new format id for this class in supporting classes RegisteredFormatIds, StoredFormatIds and DTSClassInfo&lt;/p&gt;

&lt;p&gt;For now, I have added bare minimum to this new datatype class just to get started. As the next incremental step, I am planning to tweak the compile code to generate this datatype somehow. I will add more collation related methods to the new class as subsequent patches. At this point, this new class does not get used by Derby. It will get used in subsequent patches.&lt;/p&gt;

&lt;p&gt;Also, everything in the new class is not coded from scratch meaning I have copied methods ike &quot;getIntArray&quot;, &quot;like&quot; etc have come from the existing SQLChar class. I made some modifications to those methods (for some reason, existing SQLChar has collation related code into it which in my opinion should have been disabled SQLNationalChar. But may be there is a good reason for it which I am not aware of).&lt;/p&gt;

&lt;p&gt;I would like reviewers to take note of following comment at line 125 in the new class&lt;br/&gt;
			/* Believe it or not, a String might have more&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;collation elements than characters.&lt;/li&gt;
	&lt;li&gt;So, we handle that case by increasing the int array&lt;/li&gt;
	&lt;li&gt;by 5 and copying array elements.&lt;br/&gt;
			 */&lt;br/&gt;
Basically, when the characters in the string are converted to collation elements, one character can get translated into say 2 collation elements (more info can be found on it in this url &lt;a href=&quot;http://www.developertutorials.com/tutorials/java/text-searching-java-050524/page3.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.developertutorials.com/tutorials/java/text-searching-java-050524/page3.html&lt;/a&gt;)&lt;br/&gt;
My question is is there another way of handling array broadening more effectively in the code rather than allocating a new array with 5 more int spaces and copying the old arrary into the expanded new array?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any other comments will be appreciated too.&lt;/p&gt;

&lt;p&gt;svn stat -q output is attached as DERBY2416_NewCharClassWithDifferentCollationSupport_stat_v1.txt&lt;/p&gt;</comment>
                            <comment id="12479698" author="mkhettry" created="Fri, 9 Mar 2007 20:20:06 +0000"  >&lt;p&gt;A couple of thoughts.&lt;/p&gt;

&lt;p&gt;1. The name can simply be SQLCharWithCollation?&lt;/p&gt;

&lt;p&gt;2. The cut and paste and one minor change in getIntArray is a bad idea. It should be possible to add a RuleBasedCollator parameter to getIntArray and reuse the code in the superclass?&lt;/p&gt;

&lt;p&gt;i.e. in SQLChar&lt;/p&gt;

&lt;p&gt;protected int[] getIntArray(RuleBasedCollator rbc) {&lt;br/&gt;
    if (rbc == null) &lt;/p&gt;
{
        rbc = getLocaleFinder().getCollator();
    }
&lt;p&gt;    // rest of the code.&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;in the subclass call getIntArray with rbc?&lt;/p&gt;</comment>
                            <comment id="12479730" author="mamtas" created="Fri, 9 Mar 2007 21:51:15 +0000"  >&lt;p&gt;Manish, thanks for your time.&lt;/p&gt;

&lt;p&gt;Answers to your comments&lt;br/&gt;
1)I like your name suggestion because it is shorter but one thing to note is that the existing SQLChars do have collation associated with them, it&apos;s just that it happens to be the default collation. So, if we call the subclass as SQLCharWithCollation, will it cause confusion about collation requirement for SQLChar and the new class? &lt;br/&gt;
2)As for the cut and paste, the reason behind it is we do not want to penalize the existing SQLChar performance by addition of this new feature. Ideally, all the non-default collation related information should go away from SQLChar because that class is supposed to work with the default collation. As a cleanup step we should look at cleaning up methods like getIntArray from the superclass SQLChar and have the new subclass deal with non-default collation. Note that the existing getIntArray in SQLChar gets used for national character datatypes related code. But since Derby doesn&apos;t support that datatype any more, we can get rid of getIntArray entirely from SQLChar class.&lt;/p&gt;</comment>
                            <comment id="12479740" author="mkhettry" created="Fri, 9 Mar 2007 22:18:49 +0000"  >&lt;p&gt;I am not sure what you mean by penalize SQLChar? If you mean runtime performance, my suggestion adds one conditional. Is that unacceptable performance penalty?&lt;/p&gt;
</comment>
                            <comment id="12479741" author="mamtas" created="Fri, 9 Mar 2007 22:23:50 +0000"  >&lt;p&gt;The goal is to unburden SQLChar from collation related information that is not required at that class level. And that is why I disagree in modifying the getIntArray code in SQLChar which really does not belong there.&lt;/p&gt;</comment>
                            <comment id="12479747" author="mamtas" created="Fri, 9 Mar 2007 22:44:05 +0000"  >&lt;p&gt;I forgot to mark patch available flag.&lt;/p&gt;</comment>
                            <comment id="12479771" author="djd" created="Fri, 9 Mar 2007 23:47:18 +0000"  >&lt;p&gt;I agree with Manish on a shorter name, but I think it should use Collator, not Collation.&lt;br/&gt;
The existing SQLChar does have a collation, just not using Collator. Maybe CollatorSQLChar?&lt;/p&gt;

&lt;p&gt;The comments for the class indicates it uses a Collator, but the code requires a RuleBasedCollator,&lt;br/&gt;
is there some dependency on the collator being a RulesBasedCollator?&lt;/p&gt;

&lt;p&gt;The field intLength says it&apos;s the size of the array above, but I don&apos;t think it is.&lt;br/&gt;
It represents the number of valid elements in the intArray array. Also possibly&lt;br/&gt;
there could be better names for the array and length, ones that describe what they&lt;br/&gt;
are, rather than what datatype they are.&lt;/p&gt;

&lt;p&gt;It would be good to have javadoc for all the fields and methods of this class from its inception.&lt;/p&gt;

&lt;p&gt;The existing collation code using Collators that you based this class upon could use some&lt;br/&gt;
performance improvements. Not sure what to do here, could be a separate clean-up or could be designed&lt;br/&gt;
into the class from the start. For example, the full collation array is filled before any comparision&lt;br/&gt;
and as coded this requires creating a string. So for LIKE if the pattern is &apos;A%&apos; and the CHAR&lt;br/&gt;
read from disk is &apos;BXXXXXXXXXXXXXXXXXXXXXXX&apos; the char[] array is converted to a String and then&lt;br/&gt;
fully converted into an int[] of collation values, and then compared. Instead creating the&lt;br/&gt;
collation on-demand and from the char[] means that only one collation integer value would have&lt;br/&gt;
to be created before discarding the value.&lt;/p&gt;</comment>
                            <comment id="12479782" author="mamtas" created="Sat, 10 Mar 2007 00:41:56 +0000"  >&lt;p&gt;Thanks, Dan, for your feedback. The shorter name does sound better. I will go ahead with CollatorSQLChar. Just one last but about the name: I thought having a suffix rather than a prefix to &quot;SQLChar&quot; would be better because that way it is easy to find all the variants of SQLChar in the org.apache.derby.iapi.types package. &lt;/p&gt;

&lt;p&gt;As for requiring RuleBasedCollator, I had started out with requiring Collator rather than RuleBasedCollator. I wanted to go the route of using Collator rather than RuleBasedCollator so that any kind of Collator object could be used for collation with this new class. I reverted to using RuleBasedCollator because getIntArray method uses RuleBasedCollator.getCollationElementIterator. This method is defined on RuleBasedCollator and not on the Collator interface. &lt;/p&gt;

&lt;p&gt;I haven&apos;t given this much thought but maybe I can change getIntArray to see if Collator is an instance of RuleBasedCollator and if yes then use getCollationElementIterator to find collation elements otherwise throw an exception saying the passed Collator is not supported. In future, as we add other types of Collator objects, we can modify getIntArray accordingly. This suggestion is not based on lot of thinking but I thought I would throw it out on the list to see what people thought.&lt;/p&gt;

&lt;p&gt;As for your other comments about more meaningful names and javadoc, let me work on those in my updated patch.&lt;/p&gt;

&lt;p&gt;About the performance improvement, let me tackle that later in a subsequent patch so I can think about it a little more. I will write it down in my todo list for this project.&lt;/p&gt;
</comment>
                            <comment id="12479784" author="djd" created="Sat, 10 Mar 2007 00:51:14 +0000"  >&lt;p&gt;&amp;gt; I thought having a suffix rather than a prefix to &quot;SQLChar&quot; would be better because that way it is easy to find all the variants of SQLChar in the org.apache.derby.iapi.types package.&lt;/p&gt;

&lt;p&gt;Java convention would have XXXCollator being an implementation of Collator, that&apos;s why I didn&apos;t suggest the suffix, though probably either would do.&lt;/p&gt;</comment>
                            <comment id="12479793" author="djd" created="Sat, 10 Mar 2007 01:58:35 +0000"  >&lt;p&gt;Looking at RulesBasedCollator more it is probably better to require that the collator be of that type, it seems to have a more flexible api than the pure Collator.&lt;/p&gt;

&lt;p&gt;And for the performance stuff, I agree if you can get the functionality working then the performance improvements should be somewhat easy since the code will be fairly self-contained in these classes.&lt;/p&gt;</comment>
                            <comment id="12479907" author="mamtas" created="Sun, 11 Mar 2007 07:07:18 +0000"  >&lt;p&gt;I am attaching a new patch, DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v2.txt which has incorporated some of the feedback on the first patch.&lt;br/&gt;
1)I have renamed the new class as CollatorSQLChar&lt;br/&gt;
2)I have renamed intArray as collationElementsForString&lt;br/&gt;
3)I have renamed intLength as countOfCollationElements&lt;br/&gt;
4)Added javadocs for the fields and methods.&lt;br/&gt;
5)I have changed the javadoc for the class to talk in terms of RuleBasedCollator rather than the interface Collator because the class is using RuleBasedCollator.&lt;/p&gt;

&lt;p&gt;I will commit this patch in few more minutes but if anyone has any further comments on this patch, please feel free to raise them. I can address those comments in a followup patch.&lt;/p&gt;</comment>
                            <comment id="12479910" author="mamtas" created="Sun, 11 Mar 2007 07:16:33 +0000"  >&lt;p&gt;Removed the earlier DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v2.txt patch because I forgot to set the svn:eol-style native on the new class CollatorSQLChar. I am attachine the updated DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v2.txt which has the proper eol-style for the new class.&lt;/p&gt;</comment>
                            <comment id="12479912" author="mamtas" created="Sun, 11 Mar 2007 07:38:32 +0000"  >&lt;p&gt;commited DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v2.txt patch with revision 516864. The commit comments are as follows&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;start of commit comment for revision 516864 **************&lt;br/&gt;
Patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2416&quot; title=&quot;Provide collation sensitive subclasses for SQLChar, SQLVarchar, SQLLongvarchar and SQLClob which will use the passed Collator to do the collation rather than the default collation of UCS_BASIC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2416&quot;&gt;&lt;del&gt;DERBY-2416&lt;/del&gt;&lt;/a&gt; : Provide a shell for a subclass of SQLChar which will use the passed Collator to do the collation rather than SQLChar&apos;s default collation of UCS_BASIC&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch introduces a new class called CollatorSQLChar which extends SQLChar. The new class has a RuleBasedCollator associated with it and that Collator object determines the collation. A new format id is added for this class and code regarding format id has gone into RegisteredFormatIds, StoredFormatIds and DTSClassInfo.&lt;/p&gt;

&lt;p&gt;The new class is bare minimum at this point and new collation related methods will be added to this class in later patches. This new class does not get used in Derby at this point. The query compiler code will need to be changed so that this class can get some action. This will happen in upcoming patches.&lt;/p&gt;

&lt;p&gt;Dan had some suggestion on creating collation elements as required rather than doing it all upfront. Dag also had suggestion on alternative implementation for array handling involved with collation element creation. We agreed on tackling these issues once the basic functionality is in for language based ordering.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;end of commit comment for revision 516864 **************&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12479915" author="mamtas" created="Sun, 11 Mar 2007 08:13:52 +0000"  >&lt;p&gt;When I renamed the new class with the _v2 patch, I forgot to fix DTSClassInfo and RegisteredFormatIds to use the new name. Fixing that with patch DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v3.txt&lt;/p&gt;</comment>
                            <comment id="12479916" author="mamtas" created="Sun, 11 Mar 2007 08:17:48 +0000"  >&lt;p&gt;DTSClassInfo and RegisteredFormatIds are referring to the new subclass of SQLChar by it&apos;s old name which is not correct and results into build errors. The new class should be referred to as CollatorSQLChar. The checkin 516869 fixes that problem.&lt;/p&gt;</comment>
                            <comment id="12481031" author="mamtas" created="Thu, 15 Mar 2007 04:55:18 +0000"  >&lt;p&gt;Commited following changes with revision 518479&lt;br/&gt;
**********&lt;b&gt;start of commit comments&lt;/b&gt;************&lt;br/&gt;
Some cosmetic changes to CollatorSQLChar. Changed the class comment to get rid of the copy and paste from the superclass&apos;s class comment. Changed the comments for class fields to javadocs. Changed one of the class field&apos;s name so it indicates it&apos;s purpose rather than it&apos;s field&apos;s type. And lastly, added additional comments to the like() method.&lt;br/&gt;
**********&lt;b&gt;end of commit comments&lt;/b&gt;************&lt;/p&gt;</comment>
                            <comment id="12482587" author="djd" created="Tue, 20 Mar 2007 23:12:23 +0000"  >&lt;p&gt;Seems like the patches have been applied.&lt;/p&gt;</comment>
                            <comment id="12485420" author="mamtas" created="Fri, 30 Mar 2007 06:52:50 +0100"  >&lt;p&gt;Updating the description of this Jira entry so it can be placeholder for a collation sensitive subclass of SQLVarchar also.&lt;/p&gt;</comment>
                            <comment id="12485432" author="mamtas" created="Fri, 30 Mar 2007 08:10:59 +0100"  >&lt;p&gt;I would like to submit a patch (DERBY2416_CollationSensitiveVarcharShell_diff_v1.txt), which provides a subclass of SQLVarchar called CollatorSQLVarchar. This new class differs from it&apos;s superclass in how a non-default Collator is used for collation sensitive methods.&lt;/p&gt;

&lt;p&gt;The main problem that I came across while working on this patch is that Java does not allow multiple inheritence. Currently, the iapi.types package has SQLChar as the base class. From this SQLChar, we have 2 subclasses, namely, CollatorSQLChar and SQLVarchar. At the moment, CollatorSQLChar overrides the collation sensitive methods(currently, there is only one collation sensitive method in CollatorSQLChar called like. More will be added later) from SQLChar. In order to provide a non-default collation implementation of SQLVarchar, I need to subclass SQLVarchar, but I can&apos;t simultaneously inherit from CollatorSQLChar method to get the collation sensitive implementation of the like method. Becuase of this limitation, one option is to duplicate the implementation ofcollation sensitive methods from CollatorSQLChar into CollatorSQLVarchar. That also means that we will have to duplicate the code in Collation sensitive subclasses of SQLLongvarchar and SQLClob. That is code duplicaiton in 4 classes.&lt;/p&gt;

&lt;p&gt;In order to avoid this code duplication, I am introducing a new helper class called WorkHorseForCollatorDatatype. This new class will keep the Collator and the SQLChar object whose data needs to be collated. The new class&apos;s like method will user the Collator object on SQLChar to do the comparison. Now, the non-default collation implementation of SQLChar and SQLVarchar can simply instantiate the new WorkHorseForCollatorDatatype class and delegate all the work for like method to WorkHorseForCollatorDatatype. This will avoid the code duplication and will keep the code in one central place.&lt;/p&gt;

&lt;p&gt;In addition, I have added a new interface called CollationElementsInterface. This interface should be mplemented by all the non-default collation implementation subclasses. The methods defined in the interface will be used by the like method(and other collation methods in future) in WorkHorseForCollatorDatatype. &lt;/p&gt;

&lt;p&gt;These new non-default collation implementations for SQLChar and SQLVarchar are not hooked into Derby at query compile phase and hence they do not currently get used. More code to follow later to make these classes active in Derby.&lt;/p&gt;

&lt;p&gt;One other change in this package is to remove the formatid for CollatorSQLChar. These formatid changes for CollatorSQLChar went into revision 516864. But since then, we have changed the design and rather than adding new datatypes for non-default collation implementations, we will simply associate a RuleBasedCollator with them and this collator will get used during collation at runtime. Because of this design change, I am removing the changes related to new formatid that went in revision 516864. This impacts RegisteredFormatIds.java, StoredFormatIds.java and CollatorSQLChar.java&lt;/p&gt;

&lt;p&gt;svn stat -q &lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\io\RegisteredFormatIds.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\services\io\StoredFormatIds.java&lt;br/&gt;
A      java\engine\org\apache\derby\iapi\types\CollationElementsInterface.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\types\DTSClassInfo.java&lt;br/&gt;
M      java\engine\org\apache\derby\iapi\types\CollatorSQLChar.java&lt;br/&gt;
A      java\engine\org\apache\derby\iapi\types\CollatorSQLVarchar.java&lt;br/&gt;
A      java\engine\org\apache\derby\iapi\types\WorkHorseForCollatorDatatypes.java&lt;/p&gt;

&lt;p&gt;Please provide your input on this patch. If there are no comments by Monday, April 2nd PST evening, I will go ahead and checkin this patch. I have fired the tests on my XP machine using Sun&apos;s jdk142 few minutes back but do not expect anything to fail because the new classes introduced by this patch are not hooked into Derby runtime yet.&lt;/p&gt;</comment>
                            <comment id="12485765" author="mamtas" created="Sun, 1 Apr 2007 03:32:42 +0100"  >&lt;p&gt;With patch DERBY2416_CollationSensitiverShells_diff_v2.txt, I am extending the patch attached yesterday (DERBY2416_CollationSensitiveVarcharShell_diff_v1.txt). This latest patch has collation sensitive subclasses for SQLVarchar, SQLLongvarchar and SLQClob. The collation sensitive subclass for SQLChar is already checked in as CollatorSQLChar. &lt;/p&gt;

&lt;p&gt;So, In brief, the change description for yesterday&apos;s patch applies to the patch I am attaching right now. In addition, it applies the same logic for creating subclasses for SQLVarchar, SQLLongvarchar and SLQClob.&lt;/p&gt;

&lt;p&gt;These classes are not hooked into Derby runtime yet and hence won&apos;t impact the existing tests.  &lt;/p&gt;

&lt;p&gt;I will go ahead and commit this patch, so I can make more progress on language based ordering task. If anyone has any comments on this patch, please let me know about them and I can address them in subsequent patches. &lt;/p&gt;
</comment>
                            <comment id="12485774" author="mamtas" created="Sun, 1 Apr 2007 07:41:48 +0100"  >&lt;p&gt;Commited patch DERBY2416_CollationSensitiverShells_diff_v2.txt as revision 524545&lt;/p&gt;</comment>
                            <comment id="12495679" author="mamtas" created="Mon, 14 May 2007 18:16:54 +0100"  >&lt;p&gt;The shells have been checked in for some time now. Will close this issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12362830">DERBY-2336</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12354582" name="DERBY2416_CollationSensitiveVarcharShell_diff_v1.txt" size="25222" author="mamtas" created="Fri, 30 Mar 2007 08:10:59 +0100"/>
                            <attachment id="12354583" name="DERBY2416_CollationSensitiveVarcharShell_stat_v1.txt" size="592" author="mamtas" created="Fri, 30 Mar 2007 08:10:59 +0100"/>
                            <attachment id="12354661" name="DERBY2416_CollationSensitiverShells_diff_v2.txt" size="35444" author="mamtas" created="Sun, 1 Apr 2007 03:32:42 +0100"/>
                            <attachment id="12354662" name="DERBY2416_CollationSensitiverShells_stat_v2.txt" size="737" author="mamtas" created="Sun, 1 Apr 2007 03:32:42 +0100"/>
                            <attachment id="12353010" name="DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v1.txt" size="9446" author="mamtas" created="Fri, 9 Mar 2007 19:52:21 +0000"/>
                            <attachment id="12353067" name="DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v2.txt" size="10339" author="mamtas" created="Sun, 11 Mar 2007 07:16:33 +0000"/>
                            <attachment id="12353069" name="DERBY2416_NewCharClassWithDifferentCollationSupport_diff_v3.txt" size="1405" author="mamtas" created="Sun, 11 Mar 2007 08:13:52 +0000"/>
                            <attachment id="12353011" name="DERBY2416_NewCharClassWithDifferentCollationSupport_stat_v1.txt" size="372" author="mamtas" created="Fri, 9 Mar 2007 19:52:21 +0000"/>
                            <attachment id="12353066" name="DERBY2416_NewCharClassWithDifferentCollationSupport_stat_v2.txt" size="357" author="mamtas" created="Sun, 11 Mar 2007 07:07:18 +0000"/>
                            <attachment id="12353070" name="DERBY2416_NewCharClassWithDifferentCollationSupport_stat_v3.txt" size="213" author="mamtas" created="Sun, 11 Mar 2007 08:13:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 8 Mar 2007 15:24:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30432</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ke7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37122</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>