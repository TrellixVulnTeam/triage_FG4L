<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:35:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2114/DERBY-2114.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2114] Let Clock embed a HashMap rather than inherit from Hashtable</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2114</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Clock currently inherits from Hashtable, but the use of Hashtable is really an implementation detail that would benefit from being hidden as private member. All access to the hashtable happens inside sychronized blocks so it is safe to substitute a HashMap. This change appears to trigger a small increase in throughput, as measured by the average TPS number obtained by running the select client from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1961&quot; title=&quot;Investigate resource usage for different types of load on an in-memory database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1961&quot;&gt;&lt;del&gt;DERBY-1961&lt;/del&gt;&lt;/a&gt; repeatedly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12356495">DERBY-2114</key>
            <summary>Let Clock embed a HashMap rather than inherit from Hashtable</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dyret">Dyre Tjeldvoll</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Nov 2006 13:31:27 +0000</created>
                <updated>Mon, 29 Jun 2009 15:22:58 +0100</updated>
                            <resolved>Tue, 1 May 2007 22:03:30 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12452258" author="dyret" created="Thu, 23 Nov 2006 15:25:17 +0000"  >&lt;p&gt;When comparing the average of 7 100 sec runs  against trunk (r478151) I see 2% improvement in throughput:&lt;/p&gt;

&lt;p&gt;Trunk: 23094.577 TPS&lt;br/&gt;
Patch: 23563.977 TPS (+2.032%)&lt;/p&gt;

</comment>
                            <comment id="12452392" author="dyret" created="Fri, 24 Nov 2006 08:52:21 +0000"  >&lt;p&gt;Unfortunately, it was not so easy. The VTI interface needs to cast Clock to Hashtable, so with the change one gets a ClassCast exception in some tests. &lt;/p&gt;</comment>
                            <comment id="12464779" author="dyret" created="Mon, 15 Jan 2007 13:34:23 +0000"  >&lt;p&gt;Closing this issue since the fix had unexpected side effects.&lt;/p&gt;</comment>
                            <comment id="12480741" author="dyret" created="Wed, 14 Mar 2007 12:16:25 +0000"  >&lt;p&gt;Reopening this issue since I now have an idea about how to solve the VTI problem. &lt;/p&gt;

&lt;p&gt;The real problem was not really related to VTIs, but to the implementation of StatementCache. Its constructor looks up the LanguageConnectionContext&apos;s statementCache which is of type CacheManager, and implemented by Clock. Since the CacheManager interface doesn&apos;t support iteration over the elements of the cache, a hack has been introduced here. The knowledge that a CacheManager really is a Clock AND that Clock extends Hashtable is used to cast lcc.statementCache to Hashtable. This Hashtable is then used to do the iteration. However, this hack defeats the purpose of having the CacheManager interface since it creates a solid unwanted dependency between the implementation of StatementCache and the implementation of Clock. &lt;/p&gt;

&lt;p&gt;If iteration is to be allowed it is better to extend the CacheManager interface with the necessary methods (They can&apos;t simply be added to Clock, since StatementCache isn&apos;t allowed to downcast to Clock  which isn&apos;t public in its package.) &lt;/p&gt;</comment>
                            <comment id="12481082" author="dyret" created="Thu, 15 Mar 2007 08:59:20 +0000"  >&lt;p&gt;Attaching a patch (v1) for this. derbyall and suites.All pass. Please review.&lt;/p&gt;</comment>
                            <comment id="12481098" author="knutanders" created="Thu, 15 Mar 2007 10:05:05 +0000"  >&lt;p&gt;The patch generally looks good. I verified that the unsynchronized HashMap methods were called either from the inside of a block synchronized on the Clock object or from a method whose javadoc said the caller should be synchronized on Clock. The only exception was the new Clock.values() method, which requires the caller to be synchronized but doesn&apos;t say so in its javadoc. Perhaps you could add a comment about it in the javadoc?&lt;/p&gt;

&lt;p&gt;I was wondering whether it would be better if the new values() method returned a copy of the values in the cache. The reason is this code in diag.StatementCache&apos;s constructor:&lt;br/&gt;
+			synchronized(lcc.statementCache) {&lt;br/&gt;
+				final Collection values = lcc.statementCache.values();&lt;br/&gt;
+				data = new Vector(values.size());&lt;br/&gt;
+				for (Iterator i = values.iterator(); i.hasNext(); ) &lt;/p&gt;
{
+					CachedItem ci = (CachedItem) i.next();
+					CachedStatement cs = (CachedStatement) ci.getEntry();
+					GenericPreparedStatement ps = (GenericPreparedStatement) 
+						cs.getPreparedStatement();
+					data.addElement(ps);
+				}
&lt;p&gt;+			} // synchronized(lcc.statementCache)&lt;/p&gt;

&lt;p&gt;By requiring the caller to synchronize on the Clock object, I feel that we are exposing an implementation detail that could be hidden. If we return a copy, the synchronization could be done inside values() instead. Since it is only used in a diagnostic VTI, I don&apos;t think the extra cost of creating a shallow copy should be a problem.&lt;/p&gt;</comment>
                            <comment id="12481105" author="dyret" created="Thu, 15 Mar 2007 10:32:09 +0000"  >

&lt;p&gt;Sounds like a good idea.&lt;/p&gt;


&lt;p&gt;Well, honestly I&apos;ve not considered how well StatementCache was&lt;br/&gt;
implemented, as this wasn&apos;t my itch. That said, I&apos;m sure a lot could&lt;br/&gt;
be done. But why create two copies? Why not just return a Vector of&lt;br/&gt;
PreparedStatements directly, then?&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;br/&gt;
dt&lt;/p&gt;</comment>
                            <comment id="12481114" author="knutanders" created="Thu, 15 Mar 2007 11:21:49 +0000"  >&lt;p&gt;&amp;gt; Well, honestly I&apos;ve not considered how well StatementCache was implemented, as this wasn&apos;t my itch.&lt;br/&gt;
This is not so much about the implementation of StatementCache. My worry is that by requiring the callers of CacheManager.values() to synchronize on the CacheManager and hold the synchronization while traversing the returned collection, it will be harder to replace Clock with another implementation of CacheManager later because the interface implicitly dictates how the internal synchronization must be implemented. If someone wants to rewrite the cache manager, say, to allow threads to enter it concurrently, she couldn&apos;t just implement the interface and plug in the new implementation since the interface required that there was a global synchronization point.&lt;/p&gt;

&lt;p&gt;&amp;gt; But why create two copies? Why not just return a Vector of PreparedStatements directly, then?&lt;br/&gt;
That&apos;s possible, but I&apos;m not sure it&apos;s a good idea to introduce a dependency from CacheManager/Clock to PreparedStatement. Since this is diagnostic code, I wouldn&apos;t worry too much about copying it twice. Keeping the interface cleaner is more important in this case, I think.&lt;/p&gt;

&lt;p&gt;By the way, if we make values() return a copy, I think it is better if it returns a collection of Cacheables instead of a collection of CachedItems, since Cacheable is iapi and CachedItem is impl. (Actually, I think the use in diag.StatementCache is the only reason why CachedItem is public and not package private.)&lt;/p&gt;</comment>
                            <comment id="12481253" author="dyret" created="Thu, 15 Mar 2007 17:51:27 +0000"  >&lt;p&gt;New patch, v2. suites.All pass.&lt;/p&gt;</comment>
                            <comment id="12481937" author="knutanders" created="Sun, 18 Mar 2007 13:49:13 +0000"  >&lt;p&gt;Thank you for addressing my comments! There is one thing I missed in the previous review:&lt;/p&gt;

&lt;p&gt;+	public boolean containsKey(Object k) {&lt;br/&gt;
+		synchronized(cache_) {&lt;/p&gt;

&lt;p&gt;+	public Collection values() {&lt;br/&gt;
+		synchronized (cache_) {&lt;/p&gt;

&lt;p&gt;I believe these two methods should have been synchronized on this, not on cache_. I have made that change to the patch and started the regression tests. Will commit if the tests don&apos;t fail.&lt;/p&gt;</comment>
                            <comment id="12481963" author="knutanders" created="Sun, 18 Mar 2007 17:33:36 +0000"  >&lt;p&gt;Committed revision 519644.&lt;/p&gt;</comment>
                            <comment id="12485217" author="dyret" created="Thu, 29 Mar 2007 16:26:36 +0100"  >&lt;p&gt;Attaching a follow-up patch (derby-2114.currentsize.v1) which provides an unsynchronized version of currentSize() which can be used inside synchronized regions to avoid double synchronization.&lt;/p&gt;</comment>
                            <comment id="12485247" author="dyret" created="Thu, 29 Mar 2007 17:48:44 +0100"  >&lt;p&gt;Forgot to mention that suites.All and derbyall both pass, (with the exception of the SecurityManager issue also reported in the Tinderbox test)&lt;/p&gt;</comment>
                            <comment id="12485907" author="dyret" created="Sun, 1 Apr 2007 18:40:16 +0100"  >&lt;p&gt;Reopening to allow the follow-up patch to be reviewed&lt;/p&gt;</comment>
                            <comment id="12488595" author="knutanders" created="Fri, 13 Apr 2007 08:10:32 +0100"  >&lt;p&gt;I verified that all callers of getCurrentSizeNoSync() are synchronized on Clock and that all tests passed. Committed revision 528370. Perhaps it would be good to add comments to getCurrentSize() and getCurrentSizeNoSync() to make it clear when to use which method?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12354527" name="derby-2114.currentsize.v1.diff" size="9807" author="dyret" created="Thu, 29 Mar 2007 16:26:36 +0100"/>
                            <attachment id="12354528" name="derby-2114.currentsize.v1.stat" size="285" author="dyret" created="Thu, 29 Mar 2007 16:26:36 +0100"/>
                            <attachment id="12353358" name="derby-2114.v1.diff" size="9468" author="dyret" created="Thu, 15 Mar 2007 08:59:20 +0000"/>
                            <attachment id="12353359" name="derby-2114.v1.stat" size="421" author="dyret" created="Thu, 15 Mar 2007 08:59:20 +0000"/>
                            <attachment id="12353413" name="derby-2114.v2.diff" size="10284" author="dyret" created="Thu, 15 Mar 2007 17:51:27 +0000"/>
                            <attachment id="12353414" name="derby-2114.v2.stat" size="519" author="dyret" created="Thu, 15 Mar 2007 17:51:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 15 Mar 2007 10:05:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30280</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wlr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39100</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>