<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:44:05 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1338/DERBY-1338.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1338] Client tests DerbyNetNewServer and NSinSameVM fail with NoClassDefFoundError: DRDAProtocolExceptionInfo when run from classes dir</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1338</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When run from Sun JDK 1.4.2 and Sun JDK 1.5, these two tests fail when run from the&lt;br/&gt;
classes directory. They work, though, when run from jars.&lt;/p&gt;

&lt;p&gt;Running NSinSameVM in my sandbox:&lt;/p&gt;

&lt;p&gt;bash-3.00$ java   -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest derbynet/NSinSameJVM.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: NSinSameJVM jdk1.4.2_05 DerbyNetClient 2006-05-22 14:49:05 ***&lt;br/&gt;
Initialize for framework: DerbyNetClient&lt;br/&gt;
startServer = false. Bypass server startup&lt;br/&gt;
6 add&lt;br/&gt;
&amp;gt; java.lang.NoClassDefFoundError: org/apache/derby/impl/drda/DRDAProtocolExceptionInfo&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   NSinSameJVM jdk1.4.2_05 DerbyNetClient 2006-05-22 14:49:27 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I get similar behavior for DerbyNetNewServer.  I ran this on a Solaris 10/i86x box. Davis has seen it too, see &lt;br/&gt;
initial discusson on this thread: &lt;a href=&quot;http://www.nabble.com/forum/ViewPost.jtp?post=4477600&amp;amp;framed=y&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/forum/ViewPost.jtp?post=4477600&amp;amp;framed=y&lt;/a&gt;&lt;/p&gt;</description>
                <environment>Sun JDK 1.4.2, Sun JDK 1.5 on Solaris&lt;br/&gt;
</environment>
        <key id="12343348">DERBY-1338</key>
            <summary>Client tests DerbyNetNewServer and NSinSameVM fail with NoClassDefFoundError: DRDAProtocolExceptionInfo when run from classes dir</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 May 2006 21:16:51 +0100</created>
                <updated>Tue, 10 Oct 2006 17:55:22 +0100</updated>
                            <resolved>Wed, 21 Jun 2006 23:51:32 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12412772" author="dagw" created="Mon, 22 May 2006 21:18:49 +0100"  >&lt;p&gt;(quote from mail thread)&lt;/p&gt;

&lt;p&gt;Dag says:&lt;/p&gt;

&lt;p&gt;I looked at this again: This is my understanding so far.&lt;/p&gt;

&lt;p&gt;I think this is a problem with the test and/or the server code.&lt;br/&gt;
Apperently there is a race condition between the connection being&lt;br/&gt;
closed and the shutdown of the server.  This test starts its own&lt;br/&gt;
server and then opens and closes a connection to it, in this case via&lt;br/&gt;
the derby client driver.  Skeleton code:&lt;/p&gt;

&lt;p&gt;  server.start&lt;br/&gt;
  conn = DriverManager.getConnection(&amp;lt;derby client&amp;gt;)&lt;br/&gt;
  conn.close&lt;br/&gt;
         &amp;lt;inserting a small sleep here makes problem go away&amp;gt;&lt;br/&gt;
  server.shutdown&lt;/p&gt;

&lt;p&gt;By inserting a small sleep between the close and the shutdown, the&lt;br/&gt;
test works in my environment. I would guess the problem appears&lt;br/&gt;
because the server gets to (start) shut down &lt;b&gt;before&lt;/b&gt; the close&lt;br/&gt;
message process is started/completed, and when the server DRDA&lt;br/&gt;
protocol code is in the process of handling the close, the server is&lt;br/&gt;
going down, hence the class not found exceptions.&lt;/p&gt;

&lt;p&gt;The larger question is: Is there any way to avoid this in the server?&lt;br/&gt;
Users can hit this one, too, and it would be nice if the server were&lt;br/&gt;
more rubust. I think is possibly related to the problem discussed&lt;br/&gt;
under JIRA-1219 and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt;, although in those cases, the problems&lt;br/&gt;
occur further down the line: ghost sessions remain after shutdown&lt;br/&gt;
causing trouble on restart. &lt;/p&gt;</comment>
                            <comment id="12412773" author="dagw" created="Mon, 22 May 2006 21:20:20 +0100"  >&lt;p&gt;Dag.Wanvik@Sun.COM (Dag H. Wanvik) writes:&lt;/p&gt;

&lt;p&gt;&amp;gt; Hi,&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I looked at this again: This is my understanding so far.&lt;/p&gt;

&lt;p&gt;Ooops. The analysis in my previous post was for the test&lt;br/&gt;
DerbyNetNewServer.java, which has a similar symptom in my&lt;br/&gt;
environment. For NSinSameVM.java, I found that the connection is&lt;br/&gt;
actually &lt;b&gt;not&lt;/b&gt; closed prior to shutdown:&lt;/p&gt;

&lt;p&gt; :&lt;br/&gt;
 // Leave the connection open before shutdown to make &lt;br/&gt;
 // sure the thread closes down. &lt;br/&gt;
 // connection.close();&lt;br/&gt;
 :&lt;br/&gt;
 serverControl.shutdown();&lt;/p&gt;

&lt;p&gt;By uncommenting the close, the test passed. I am not sure what the&lt;br/&gt;
meaning of the above comment is.&lt;/p&gt;

&lt;p&gt;Anyway, it would seem my explanation in my previous post is not the&lt;br/&gt;
whole story here. One hypothesis might be that the error occurs at&lt;br/&gt;
shutdown when the connection is not closed, but then, I don&apos;t&lt;br/&gt;
understand why it works if run from jars. Can anyone shed some light&lt;br/&gt;
on this?&lt;/p&gt;

&lt;p&gt;Dag&lt;/p&gt;</comment>
                            <comment id="12412775" author="dagw" created="Mon, 22 May 2006 21:21:34 +0100"  >&lt;p&gt;Bryan Pendleton &amp;lt;bpendleton@amberpoint.com&amp;gt; writes:&lt;/p&gt;

&lt;p&gt;&amp;gt; This is very interesting! I don&apos;t know what is going on here, either, but&lt;br/&gt;
&amp;gt; it sounds very similar to the issues that I&apos;ve been investigating with&lt;br/&gt;
&amp;gt; Deepa and Kathey under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1219&quot; title=&quot;jdbcapi/checkDataSource.java and jdbcapi/checkDataSource30.java hang intermittently with client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1219&quot;&gt;&lt;del&gt;DERBY-1219&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I&apos;m hoping to put some effort into Network Server session/connection&lt;br/&gt;
&amp;gt; management in the context of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I think it is too soon to tell whether the problems you are seeing&lt;br/&gt;
&amp;gt; are identical to those of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1219&quot; title=&quot;jdbcapi/checkDataSource.java and jdbcapi/checkDataSource30.java hang intermittently with client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1219&quot;&gt;&lt;del&gt;DERBY-1219&lt;/del&gt;&lt;/a&gt;, but I certainly&lt;br/&gt;
&amp;gt; think that this part of the system will benefit from having a number&lt;br/&gt;
&amp;gt; of contributors carefully analyzing it.&lt;/p&gt;</comment>
                            <comment id="12412791" author="dagw" created="Mon, 22 May 2006 23:24:46 +0100"  >&lt;p&gt;I have looked at this some more and I think I understand&lt;br/&gt;
more of what&apos;s happening, although the root cause is still &lt;br/&gt;
an open question. Here are my findings so far:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When I run this with JDK1.6 the test works.&lt;/li&gt;
	&lt;li&gt;Running without security manager did not impact the error.&lt;/li&gt;
	&lt;li&gt;I ran the test with -Duseprocess=false and the error still occurs,&lt;br/&gt;
  so I can see what happens in jdb. In jdb, I was able to find where&lt;br/&gt;
  the exception occurs: &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  As the NetworkServerStarter#blockingStart, released from its wait on&lt;br/&gt;
  shutdownSync, is dowing the actual shutdown (interrupting threads,&lt;br/&gt;
  closing server socket), the connection thread is blocked on a read:&lt;/p&gt;

&lt;p&gt;DRDAConnThread_4&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; where&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; java.net.SocketInputStream.socketRead0 (native method)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; java.net.SocketInputStream.read (SocketInputStream.java:129)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.fill (DDMReader.java:1,720)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.ensureALayerDataInBuffer (DDMReader.java:1,473)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DDMReader.readDssHeader (DDMReader.java:315)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;6&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.processCommands (DRDAConnThread.java:628)&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;7&amp;#93;&lt;/span&gt; org.apache.derby.impl.drda.DRDAConnThread.run (DRDAConnThread.java:238)&lt;/p&gt;

&lt;p&gt;The read then fails when socket is closed, and gives an IOException&lt;br/&gt;
here:&lt;/p&gt;

&lt;p&gt;&amp;gt; breakpoint hit: &quot;thread=DRDAConnThread_4&quot;,&lt;br/&gt;
&amp;gt; org.apache.derby.impl.drda.DDMReader.fill(), line=1,724 bci=43&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; DRDAConnThread_4&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; print ioe&lt;br/&gt;
&amp;gt;  ioe = &quot;java.net.SocketException: Socket closed&quot;&lt;/p&gt;

&lt;p&gt;At this point the method markCommunicationsFailure is called, which&lt;br/&gt;
tries to create an exception of class DRDAProtocolException. This is&lt;br/&gt;
where the class loader gives the error. I used jdb to check which&lt;br/&gt;
classes were loaded &lt;b&gt;before&lt;/b&gt; this line:&lt;/p&gt;

&lt;p&gt;	throw DRDAProtocolException.newDisconnectException(this,oa);&lt;/p&gt;

&lt;p&gt;And I could see that &lt;b&gt;both&lt;/b&gt; DRDAProtocolException and&lt;br/&gt;
DRDAProtocolExceptionInfo were unknown to the VM. After I step this&lt;br/&gt;
statement in jdb, DRDAProtocolException is known, but &lt;b&gt;not&lt;/b&gt;&lt;br/&gt;
DRDAProtocolExceptionInfo, hence the error. Why it cannot load it, I&lt;br/&gt;
don&apos;t know.&lt;/p&gt;

&lt;p&gt;If I make a dummy DRDAProtocolExceptionInfo object in&lt;br/&gt;
NetworkServerControlImpl, the error goes away.&lt;/p&gt;

&lt;p&gt;This all leads me to believe that the Derby code is ok, and that this&lt;br/&gt;
is a class loader issue, all the more so, since the problem goes away&lt;br/&gt;
when the test is run with jars or with the newer JDK1.6.&lt;/p&gt;

&lt;p&gt;I did run the test inside jdb with JDK1.6 and could see that both&lt;br/&gt;
classes got loaded correctly at this point in the code.&lt;/p&gt;</comment>
                            <comment id="12412841" author="bryanpendleton" created="Tue, 23 May 2006 06:46:11 +0100"  >&lt;p&gt;Thank you for filing the bug, and for posting the results of your&lt;br/&gt;
debugging. Your analysis is very interesting, and I can&apos;t think&lt;br/&gt;
of a reason why the class would fail to be loaded.&lt;/p&gt;

&lt;p&gt;I was wondering if there was a way to figure out whether this&lt;br/&gt;
problem &lt;b&gt;only&lt;/b&gt; happens at server shutdown, or whether it could&lt;br/&gt;
happen earlier in the server&apos;s lifetime as well.&lt;/p&gt;

&lt;p&gt;For example, would it be possible to run a test in which you&lt;br/&gt;
cause a client to break a connection with the server during&lt;br/&gt;
&quot;normal&quot; server processing, because it seems like in that case&lt;br/&gt;
the server should go through a similar path (calling the&lt;br/&gt;
markCommunicationsFailure routine to handle the IOException),&lt;br/&gt;
and in that case does the DRDAProtocolExceptionInfo class get&lt;br/&gt;
loaded successfully?&lt;/p&gt;</comment>
                            <comment id="12413021" author="dagw" created="Wed, 24 May 2006 06:44:44 +0100"  >&lt;p&gt;Thanks for the suggestion Bryan. I tried it, but in that case the socket read &lt;br/&gt;
returns -1 (end of data) and all is well. So i had to do some more digging.&lt;/p&gt;

&lt;p&gt;It seems clear that this is bug in the classloader.  I suggest a&lt;br/&gt;
simple workaround, see below.&lt;/p&gt;

&lt;p&gt;I compiled my own version of URLClassLoader so I could see what&lt;br/&gt;
happens when the class fails to load and I found that the reading of&lt;br/&gt;
the actual bytes of the class fails with java.io.InterruptedIOException:&lt;/p&gt;

&lt;p&gt;java/net/URLClassLoader.java (JDK 1.5)&lt;br/&gt;
                    :&lt;br/&gt;
line 214           private Class defineClass(String name, Resource res) throws IOException {&lt;br/&gt;
                       :&lt;br/&gt;
line 256               byte[] b = res.getBytes();&lt;br/&gt;
                                      **&lt;br/&gt;
We get java.io.InterruptedIOException here. This in turn causes&lt;br/&gt;
URLClassLoader#findClass to throw ClassNotFoundException:&lt;/p&gt;

&lt;p&gt;line 184           protected Class&amp;lt;?&amp;gt; findClass(final String name) &lt;br/&gt;
                       throws ClassNotFoundException&lt;br/&gt;
                       :&lt;br/&gt;
line 194                    try &lt;/p&gt;
{
                                return defineClass(name, res);
                            }
&lt;p&gt; catch (IOException e) &lt;/p&gt;
{
                                throw new ClassNotFoundException(name, e);
                            }


&lt;p&gt;The shutdown of the server &lt;b&gt;has&lt;/b&gt; interrupted the thread, in&lt;br/&gt;
NetworkServerStarter#blockingStart. So, is this the reason we get this&lt;br/&gt;
exception? Most likely. I googled and found relevant these bug&lt;br/&gt;
reports:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4549130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4549130&lt;/a&gt;&lt;br/&gt;
	URLClassLoader: NoClassDefFoundError thrown when not using rt.jar&lt;br/&gt;
&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4764778&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4764778&lt;/a&gt;&lt;br/&gt;
	Interrupted thread can&apos;t load classes from classes directory (sol)&lt;br/&gt;
&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4385444&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4385444&lt;/a&gt;&lt;br/&gt;
        (spec) InterruptedIOException should not be required by platform specification (sol)&lt;br/&gt;
&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6375934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6375934&lt;/a&gt;&lt;br/&gt;
        thread interruption interferes with classloading (sol)&lt;/p&gt;

&lt;p&gt;I quote from the first:&lt;/p&gt;

&lt;p&gt;&amp;gt; On Solaris java.io is interruptible. Therefore, if you&lt;br/&gt;
&amp;gt; read class from a classfile and the thread gets interrupted,&lt;br/&gt;
&amp;gt; one gets an InterruptedIOException.&lt;br/&gt;
&amp;gt; One needs to catch InterruptedIOException in defineClass&lt;br/&gt;
&amp;gt; of URLClassLoader and then retry.&lt;/p&gt;

&lt;p&gt;A simple repro is enclosed:&lt;/p&gt;

&lt;p&gt;----------------------------------------&lt;br/&gt;
public class Test {&lt;br/&gt;
    public static void main(String[] args) &lt;/p&gt;
{
        new HappyClass();
        Thread.currentThread().interrupt();
        new UnhappyClass();
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;class HappyClass {}&lt;br/&gt;
class UnhappyClass {}&lt;br/&gt;
----------------------------------------&lt;/p&gt;

&lt;p&gt;The second issue indicates that this has been fixed for Mustang. &lt;/p&gt;

&lt;p&gt;In deed, when I run this repro, it fails on JDK1.5, but &lt;b&gt;not&lt;/b&gt; on JDK&lt;br/&gt;
1.6. It would seem this is the root cause of our problem, and that&lt;br/&gt;
JDK1.6 does not have this problem. I checked the source for 1.6,&lt;br/&gt;
though, and the code in URLCLassLoader is unchanged, so presumably it&lt;br/&gt;
has been fixed somewhere else, the bug issue doesn&apos;t say how. &lt;/p&gt;

&lt;p&gt;However, &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6375934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6375934&lt;/a&gt;&lt;br/&gt;
dated Jan 2006, seems to say it has not been fully fixed, even in&lt;br/&gt;
1.6 - it seems to be gone, though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It is a Solaris specific problem, according to CR 4385444, since under&lt;br/&gt;
other OSes, the interrupting of a Java thread goes not give rise to&lt;br/&gt;
the InterruptedIOException.&lt;/p&gt;

&lt;p&gt;Again, this has not been seen when running from jars, but I think it&lt;br/&gt;
is sufficiently annoying/risky that it would be nice to fix it, since&lt;br/&gt;
it will be some time before we only run on 1.6 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned before, we can make sure the classes in question&lt;br/&gt;
(DRDAProtocolExceptionInfo and DRDAProtocolException) are already&lt;br/&gt;
loaded (by creating a dummy object) before the thread is interrupted,&lt;br/&gt;
thus sidestepping the issue.  If nobody objects, I will post a patch&lt;br/&gt;
with this solution.&lt;/p&gt;
</comment>
                            <comment id="12416817" author="dagw" created="Tue, 20 Jun 2006 06:56:52 +0100"  >&lt;p&gt;From: Bryan Pendleton, Date: Tue, 23 May 2006 16:17:59 -0700&lt;/p&gt;

&lt;p&gt;&amp;gt; The shutdown of the server &lt;b&gt;has&lt;/b&gt; interrupted the thread, in&lt;br/&gt;
&amp;gt; NetworkServerStarter#blockingStart. So, is this the reason we get this&lt;br/&gt;
&amp;gt; exception? &lt;/p&gt;

&lt;p&gt;This is &lt;b&gt;very&lt;/b&gt; interesting &amp;#8211; thank you for doing this great research!&lt;/p&gt;

&lt;p&gt;This sort of thing is exactly why I&apos;ve been so scared to add more&lt;br/&gt;
calls to interrupt() as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1219&quot; title=&quot;jdbcapi/checkDataSource.java and jdbcapi/checkDataSource30.java hang intermittently with client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1219&quot;&gt;&lt;del&gt;DERBY-1219&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt; &amp;#8211; interrupt()&lt;br/&gt;
is a very scary call to make.&lt;/p&gt;

&lt;p&gt;The good news is that this does mean that this is purely a shutdown&lt;br/&gt;
problem, as the only place that we interrupt the DRDAConnThread instances&lt;br/&gt;
right now is at the very end of the blockingStart() method.&lt;/p&gt;

&lt;p&gt;But it certainly means we&apos;ll have to be even more careful about whatever&lt;br/&gt;
fix we eventually make for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1326&quot; title=&quot;Network server may abandon sessions when Derby system is shutdown and this causes intermittent hangs in the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1326&quot;&gt;&lt;del&gt;DERBY-1326&lt;/del&gt;&lt;/a&gt;, as we definitely don&apos;t want to&lt;br/&gt;
casually add any more interrupt() calls, given the possibility of horrible&lt;br/&gt;
side effects like this.&lt;/p&gt;

&lt;p&gt;&amp;gt; As I mentioned before, we can make sure the classes in question&lt;br/&gt;
&amp;gt; (DRDAProtocolExceptionInfo and DRDAProtocolException) are already&lt;br/&gt;
&amp;gt; loaded (by creating a dummy object) before the thread is interrupted,&lt;br/&gt;
&amp;gt; thus sidestepping the issue.&lt;/p&gt;

&lt;p&gt;Alternatively, we could remove the interrupt() call in Network Server shutdown.&lt;/p&gt;

&lt;p&gt;Since we are shutting down the server anyway, I don&apos;t know how crucial it&lt;br/&gt;
is to clean up those background threads. We have called close() on them already,&lt;br/&gt;
so if they try to run again, they will quickly detect that they have been closed&lt;br/&gt;
and exit themselves. And, so long as they have been marked as &quot;daemon&quot; threads,&lt;br/&gt;
their mere presence won&apos;t prevent the server from shutting down.&lt;/p&gt;

&lt;p&gt;But I&apos;m also fine with pre-loading the classes if that seems to help.&lt;/p&gt;

&lt;p&gt;These sorts of startup/shutdown bugs always seem very hard to me: trying to&lt;br/&gt;
shut down a complex piece of server software while all sorts of complicated&lt;br/&gt;
processing may be still underway has always been a dicey business.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;

</comment>
                            <comment id="12416818" author="dagw" created="Tue, 20 Jun 2006 07:03:26 +0100"  >&lt;p&gt;Here is a simple patch which preloads the class causing the problem.&lt;br/&gt;
It makes the tests run correctly - derbyall ran without errors on the classes&lt;br/&gt;
directory on my Solaris 10/x86 box).&lt;/p&gt;

&lt;p&gt;I don&apos;t have to time to work on getting rid of the thread interrupts right now; although&lt;br/&gt;
I would prefer that solution.  I can leave this issue open or we could file another&lt;br/&gt;
one.&lt;/p&gt;</comment>
                            <comment id="12416840" author="bryanpendleton" created="Tue, 20 Jun 2006 11:17:25 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;I looked at your patch. Unless anybody else has a better suggestion, I think we&lt;br/&gt;
should go ahead and use your patch, since it clearly improves the behavior&lt;br/&gt;
in your environment.&lt;/p&gt;

&lt;p&gt;I think that we should put a more complete comment in the code itself, though,&lt;br/&gt;
so that people aren&apos;t required to visit JIRA unless they really need the detailed&lt;br/&gt;
background. What do you think about the following comment &amp;#8211; is it accurate?&lt;/p&gt;

&lt;p&gt;  // Work around a classloader bug involving interrupt handling during&lt;br/&gt;
  // class loading. If the first request to load the DRDAProtocolException&lt;br/&gt;
  // class occurs during shutdown, the loading of the class may be aborted&lt;br/&gt;
  // when the Network Server calls Thread.interrupt() on the DRDAConnThread.&lt;br/&gt;
  // By including a static reference to the DRDAProtocolException class here,&lt;br/&gt;
  // we ensure that it is loaded as soon as the DRDAConnThread class is loaded,&lt;br/&gt;
  // and therefore we know we won&apos;t be trying to load the class during shutdown.&lt;br/&gt;
  // See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1338&quot; title=&quot;Client tests DerbyNetNewServer and NSinSameVM fail with NoClassDefFoundError: DRDAProtocolExceptionInfo when run from classes dir&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1338&quot;&gt;&lt;del&gt;DERBY-1338&lt;/del&gt;&lt;/a&gt; for more background, including pointers to the apparent&lt;br/&gt;
  // classloader bug in the JVM.&lt;/p&gt;

&lt;p&gt;If this comment seems reasonable to you, and if the community doesn&apos;t come up&lt;br/&gt;
with any better suggestions, I can commit this change later this week.&lt;/p&gt;</comment>
                            <comment id="12416942" author="dagw" created="Wed, 21 Jun 2006 01:21:27 +0100"  >&lt;p&gt;Hi Bryan, &lt;/p&gt;

&lt;p&gt;Thanks for quick feed-back!&lt;br/&gt;
I did consider including a longer comment - I agree it is better. The&lt;br/&gt;
comment is fine, except it should be DRDAProtocolExceptionInfo in all&lt;br/&gt;
cases, not plain DRDAProtocolException. &lt;/p&gt;

&lt;p&gt;  // Work around a classloader bug involving interrupt handling during&lt;br/&gt;
  // class loading. If the first request to load the&lt;br/&gt;
  // DRDAProtocolExceptionInfo class occurs during shutdown, the&lt;br/&gt;
  // loading of the class may be aborted when the Network Server calls&lt;br/&gt;
  // Thread.interrupt() on the DRDAConnThread.  By including a static&lt;br/&gt;
  // reference to the DRDAProtocolExceptionInfo class here, we ensure&lt;br/&gt;
  // that it is loaded as soon as the DRDAConnThread class is loaded,&lt;br/&gt;
  // and therefore we know we won&apos;t be trying to load the class during&lt;br/&gt;
  // shutdown.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1338&quot; title=&quot;Client tests DerbyNetNewServer and NSinSameVM fail with NoClassDefFoundError: DRDAProtocolExceptionInfo when run from classes dir&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1338&quot;&gt;&lt;del&gt;DERBY-1338&lt;/del&gt;&lt;/a&gt; for more background, including pointers&lt;br/&gt;
  // to the apparent classloader bug in the JVM.&lt;/p&gt;

&lt;p&gt;I made a minimal patch; to be safe, one could preload&lt;br/&gt;
DRDAProtocolException as well, since that class did not seem to be&lt;br/&gt;
loaded at the time of the protocol exception either, but every time&lt;br/&gt;
the loader succeed with its loading, but failed on&lt;br/&gt;
DRDAProtocolExceptionInfo.&lt;/p&gt;
</comment>
                            <comment id="12417136" author="bryanpendleton" created="Wed, 21 Jun 2006 23:51:32 +0100"  >&lt;p&gt;Thanks for the patch, Dag! In addition to your testing, derbynetclientmats runs&lt;br/&gt;
clean for me. I edited in the revised comment to the code and submitted it&lt;br/&gt;
to subversion: &lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=416012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=416012&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12335635" name="derby-1338.diff" size="721" author="dagw" created="Tue, 20 Jun 2006 07:03:26 +0100"/>
                            <attachment id="12335634" name="derby-1338.stat" size="130" author="dagw" created="Tue, 20 Jun 2006 07:03:26 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 23 May 2006 05:46:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22447</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy147r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40333</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>