<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3955/DERBY-3955.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3955] test lang/selectivity.sql can be revived</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3955</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;One test that was contributed during the IBM contribution of derby code was not runnable at the time - lang/selectivity.sql.&lt;br/&gt;
This test is still there, and I think might have some valuable regression tests if it gets adapted to the current functionality in Derby.&lt;/p&gt;

&lt;p&gt;Ideally too, it should get converted to junit, or at least be made to run through the langScripts junit suite.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12408783">DERBY-3955</key>
            <summary>test lang/selectivity.sql can be revived</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="myrna">Myrna van Lunteren</assignee>
                                    <reporter username="myrna">Myrna van Lunteren</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Nov 2008 22:30:51 +0000</created>
                <updated>Wed, 22 Oct 2014 20:17:48 +0100</updated>
                            <resolved>Wed, 29 Jan 2014 14:22:03 +0000</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12648786" author="myrna" created="Tue, 18 Nov 2008 22:35:06 +0000"  >&lt;p&gt;Attaching a first cut at modifying the test so it runs a bit.&lt;/p&gt;

&lt;p&gt;Still needs more work with regards to figuring out what is the correct/expected runtime statistics output.&lt;/p&gt;</comment>
                            <comment id="12688747" author="kmarsden" created="Tue, 24 Mar 2009 17:00:05 +0000"  >&lt;p&gt;I started converting this test and ran into a couple issues  that I wanted to ask about.  I am attaching what I have done so far as derby-3955_sanityCheck_dont_commit_diff.txt&lt;/p&gt;

&lt;p&gt;1) We don&apos;t seem to print estimatedRowCount() with  runtime statistics output. I had to use internal (but public) interfaces to get the estimated rowcount. Is this ok for a functional test? Please sanity check the patch to confirm the approach is ok.&lt;/p&gt;

&lt;p&gt;2) On the first test we need to check the estimated row count. In the old sql test, we have:&lt;br/&gt;
ij&amp;gt; &amp;#8211; choose whatever plan you want but the row estimate should be.&lt;br/&gt;
&amp;#8211; (n * n) * 0.5&lt;br/&gt;
get cursor c as &lt;br/&gt;
&apos;select template.id&lt;br/&gt;
from properties joinOrder=fixed test, template&lt;br/&gt;
where test.two = template.two&apos;;&lt;br/&gt;
ij&amp;gt; close c;&lt;/p&gt;

&lt;p&gt;For Derby that&apos;s&lt;br/&gt;
 s.executeQuery(&quot;select template.id from --DERBY-PROPERTIES joinOrder=fixed\n&quot; &lt;br/&gt;
                + &quot;test, template where test.two = template.two&quot;).close();         &lt;/p&gt;

&lt;p&gt;Since tables test and template each have 4000 rows, according to the comment, I would think the estimatedRowCount should be about 8000000. (In Cloudscape 5.1.60 it is actually 8020012  which is close enough I guess.) in Derby 10.5, it is 1648057, which seems off from the comment.  I can&apos;t easily  test with older Derby releases because I don&apos;t have optimizer directives or update statistics.  Is the new estimated row count an expected change or a bug?&lt;/p&gt;

</comment>
                            <comment id="12688789" author="kmarsden" created="Tue, 24 Mar 2009 18:47:25 +0000"  >&lt;p&gt;I wrote this java program (oldSelectivity.java) so I could do some testing on old branches and discovered something interesting.    Our estimated row count is different if we make the index before or after the insert, even if we update statistics.  The usage is&lt;br/&gt;
usage: java oldSelectivity &amp;lt;indexBeforeInsert |indexAfterInsert&amp;gt;&lt;br/&gt;
you have to delete the database wombat each time you run.&lt;/p&gt;

&lt;p&gt;On trunk/10.5 where update statistics is run  we get:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexBeforeInsert&lt;br/&gt;
FAIL: expected row count:8020012.5 actual:1648057.5&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; rm -rf wombat&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexAfterInsert&lt;br/&gt;
PASS: got expected row count8020012.5&lt;/p&gt;


&lt;p&gt;On 10.4/10.3 we get the same numbers but update statistics is not run.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexBeforeInsert&lt;br/&gt;
Couldn&apos;t execute update statistics:&apos;SYSCS_UTIL.SYSCS_UPDATE_STATISTICS&apos; is not recognized as a function or procedure.&lt;br/&gt;
FAIL: expected row count:8020012.5 actual:1648057.5&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; rm -rf wombat&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexAfterInsert&lt;br/&gt;
Couldn&apos;t execute update statistics:&apos;SYSCS_UTIL.SYSCS_UPDATE_STATISTICS&apos; is not recognized as a function or procedure.&lt;br/&gt;
PASS: got expected row count8020012.5&lt;/p&gt;

&lt;p&gt;For 10.1 we get a different number if the index is created before the insert&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; export CLASSPATH=&quot;.;$CLASSPATH&quot;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexBeforeInsert&lt;br/&gt;
Couldn&apos;t execute update statistics:&apos;SYSCS_UTIL.SYSCS_UPDATE_STATISTICS&apos; is not recognized as a function or procedure.&lt;br/&gt;
FAIL: expected row count:8020012.5 actual:329611.5&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;C:/kmarsden/repro/derby-3955&amp;#93;&lt;/span&gt; java oldSelectivity indexAfterInsert&lt;br/&gt;
Couldn&apos;t execute update statistics:&apos;SYSCS_UTIL.SYSCS_UPDATE_STATISTICS&apos; is not recognized as a function or procedure.&lt;br/&gt;
PASS: got expected row count8020012.5&lt;/p&gt;

&lt;p&gt;So summary is that we seem to get what the test expects if we make the index after the data is inserted, but get sundry values otherwise.  Regardless of what the right value is, I think at least for 10.5 and trunk we should get the same value if we updated statistics.&lt;/p&gt;

</comment>
                            <comment id="12688813" author="mikem" created="Tue, 24 Mar 2009 19:28:12 +0000"  >&lt;p&gt;I am not sure what is going on here, but thought I would bring up the store part of this equation &amp;#8211; which might make&lt;br/&gt;
sense of your test cases.&lt;br/&gt;
Store maintains an &quot;estimated&quot; row count of a table, it does not guarantee that it matches the exact count of &lt;br/&gt;
rows in the table and often it does not.  This count is updated either when the store thinks the number has been&lt;br/&gt;
changed by 10% or when a dirty page leaves the cache.  So the number can vary depending on what state the cache&lt;br/&gt;
is in before the test is run.&lt;/p&gt;

&lt;p&gt;Note the counts I am talking about are the raw counts on the individual tables, where the counts you are looking at&lt;br/&gt;
come from doing additional math on those numbers - that math is in the optimizer.&lt;/p&gt;

&lt;p&gt;There are some points in the code where the sql layer of the system &quot;knows&quot; that it has just done a scan of every&lt;br/&gt;
row in the table so it knows the exact count of the table and it updates the store&apos;s estimate through a store interface.&lt;br/&gt;
I think this is triggered by a full index or base table scan.  But would be reasonable to do a create index and update&lt;br/&gt;
statistic time also.  &lt;/p&gt;

&lt;p&gt;I also believe creating an index after data is added to the table does the same thing as what update statistics does, if&lt;br/&gt;
there is only one index on the table.  The cardinality statistics are only gathered on existing indexes.&lt;/p&gt;</comment>
                            <comment id="12688891" author="kmarsden" created="Tue, 24 Mar 2009 21:35:47 +0000"  >&lt;p&gt;Thanks Mike, that is very helpful.  If I do a full scan of both tables before running the query in the case where I create the index before inserting the data, I get the expected estimated row count (at least on trunk. Haven&apos;t tried elsewhere).  I agree that it makes sense for update statistics to update this store statistic as well. I&apos;ll file a Jira issue for that.&lt;/p&gt;</comment>
                            <comment id="12689171" author="kmarsden" created="Wed, 25 Mar 2009 17:28:20 +0000"  >&lt;p&gt;I attached an initial, partial conversion to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4116&quot; title=&quot;SYSCS_UTIL.SYSCS_UPDATE_STATISTICS should update the store estimated row count for the table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4116&quot;&gt;&lt;del&gt;DERBY-4116&lt;/del&gt;&lt;/a&gt; to test that issue (derby-4116_diff.txt), which I plan to check in if it passes review and then will follow up with the rest of the conversion in follow up patches.&lt;/p&gt;
</comment>
                            <comment id="13449836" author="kmarsden" created="Thu, 6 Sep 2012 18:29:19 +0100"  >&lt;p&gt;Not working on this now&lt;/p&gt;</comment>
                            <comment id="13871722" author="myrna" created="Wed, 15 Jan 2014 06:28:10 +0000"  >&lt;p&gt;Attaching a patch which adds the rest of selectivity.sql to the SelectivityTest.&lt;br/&gt;
Except for the section with t5, which in the old Cloudscape incarnation tested stored prepared statements, which are not supported in Derby, and without this, what remains of the test case does not test anything new.&lt;/p&gt;

&lt;p&gt;This patch touches the following files:&lt;br/&gt;
D       java\testing\org\apache\derbyTesting\functionTests\tests\lang\selectivity_derby.properties&lt;br/&gt;
M       java\testing\org\apache\derbyTesting\functionTests\tests\lang\SelectivityTest.java&lt;br/&gt;
D       java\testing\org\apache\derbyTesting\functionTests\tests\lang\selectivity.sql&lt;/p&gt;

&lt;p&gt;One thing to note - the original test was using selectivity_derby.properties, which had the following property:&lt;br/&gt;
  derby.language.statementCacheSize=0&lt;br/&gt;
It seems to me that the results without the property were reasonable, and I don&apos;t see that this would contribute to the test, so I did not try to preserve it in the junit test.&lt;/p&gt;</comment>
                            <comment id="13877744" author="myrna" created="Tue, 21 Jan 2014 19:05:05 +0000"  >&lt;p&gt;I have not committed the patch because I ran into trouble when I ran the lang._Suite.&lt;/p&gt;

&lt;p&gt;The behavior is that the expected row count for some of the test cases is different when run in the suite, and also, it seemed that the expanded test caused failures in the test OptimizerOverridesTest, even though all three tests use CleanDatabaseSetup.&lt;/p&gt;

&lt;p&gt;To overcome the failures in the OptimizerOverridesTest, I changed the name of the table used in SelectivityTest from &apos;test&apos; (which was also used in OptimizerOverridesTest), to &apos;seltest&apos;, and that seemed to do the trick for that issue.&lt;/p&gt;

&lt;p&gt;I debugged the other failures to where if the test GroupByExpressionTest is run before the expanded SelectivityTest, there is a failure after the following query:&lt;br/&gt;
------------&lt;br/&gt;
        s.executeUpdate(&quot;call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)&quot;);&lt;br/&gt;
        s.executeQuery(&quot;select template.id from &quot; +&lt;br/&gt;
                &quot;--DERBY-PROPERTIES joinOrder=fixed \n&quot; + &lt;br/&gt;
                &quot;seltest, template --DERBY-PROPERTIES joinStrategy=hash, &quot; +&lt;br/&gt;
                &quot;index=null \n&quot; +&lt;br/&gt;
                &quot;where seltest.twenty = template.twenty &quot; +&lt;br/&gt;
                &quot;and seltest.two = template.two&quot;).close();&lt;br/&gt;
        checkEstimatedRowCount(conn,401000.625);&lt;br/&gt;
----------&lt;br/&gt;
and in 3 other places.&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;thought&lt;/b&gt; the difference in estimated rowcount might be dependent on the name of the table also, because GroupByExpressionsTest also used table name &apos;test&apos;, but even after the change of the table name to &apos;seltest; in the SelectivityTest, this failure still occurred. I eliminated things from the GroupByExpressionsTest until I get this error when the only thing happening in the GroupByExpressionsTest is the creation of the 3 tables &apos;test&apos;, &apos;coal&apos;, and &apos;AllTypes&apos;. If any of these 3 are eliminated, the error does not occur. &lt;/p&gt;

&lt;p&gt;Does anyone have a suggestion of how to prevent the earlier test from affecting the estimated rowcount in the later test?&lt;/p&gt;</comment>
                            <comment id="13877859" author="mikem" created="Tue, 21 Jan 2014 21:12:00 +0000"  >&lt;p&gt;In general I think checking for specific estimated row counts is a bad idea in tests, unless there is a very specific need to do so.  Tests that look at plans should be looking at the shape of the plan, and the specific estimates do not matter.  Check that the expected statement nodes using the expected indexes are there.&lt;/p&gt;

&lt;p&gt; In some cases  estimates are going to be affected by background activity and may thus lead to intermittent failures when run across hardware.&lt;/p&gt;

&lt;p&gt;If you must check for specific estimates do everything you can to isolate your test from varying performance issues:&lt;br/&gt;
o turn off the automatic background statistics gatherer (as you can&apos;t be sure when it will kick in across platforms and thus estimates might be affected by machines).&lt;br/&gt;
o run the test in a different db than other tests.  the row estimates in store are just estimates, and they are updated internally based on page cache events (like a page with deleted or inserted rows getting written to disk).  The state of the cache may be dependent on previous tests.  It may be ok to just shutdown and restart before the test, but certainly running in a different db is safest.&lt;br/&gt;
o after you change the number of rows in a table run an compress on the tables.  again estimates are based on cache behavior, and especially after deletes there are background jobs going on recovering the deleted space and they may perform differently on different machines.  running a compress after update, delete, and or inserts will get the row estimates from store into a reproducible state.  some of the code uses an internal procedure to wait for background tasks to finish, but my opinion is that we should use &quot;supported&quot; interfaces in tests whenever possible.  If the test needs to specifically exercise the path where there are committed deleted rows in the table that have not been reclaimed it may then be necessary to use the internal call to get reproducible results.  Probably most query plan tests can follow a mode where they do all the ddl and data load up front and run compress to get system to known estimate state.&lt;/p&gt;</comment>
                            <comment id="13878222" author="myrna" created="Wed, 22 Jan 2014 03:51:12 +0000"  >&lt;p&gt;Thanks Mike for the response. I did not make the test create a new database, but I did make the following changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;wrap the test in a DatabasePropertySetup decorator which&lt;br/&gt;
   a. sets derby.storage.indexStats.auto to &quot;false&quot;&lt;br/&gt;
   b. sets derby.language.statementCacheSize to &quot;0&quot;&lt;br/&gt;
   and &lt;br/&gt;
   c. bounces the database&lt;br/&gt;
This got rid of the impact from the previous test, and also of this test on other tests.&lt;br/&gt;
However there then were a few places where the estimated rowcount was different from before, and this was fixed by:&lt;/li&gt;
	&lt;li&gt;adding more update_statistics calls&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think certainly in a number of these cases the estimated rowcount is indeed the purpose of the test, and &lt;b&gt;not&lt;/b&gt; whether the expected path is taken; the test verifies that the optimizer calculates the same estimated rowcount with a number of different optimizer overrides and slightly different query parameters; and there seem to be very specific calculations about the expected rowcounts in the comments. So, while I appreciate what you were saying about the sensitivity for platform differences I left this as is...&lt;/p&gt;

&lt;p&gt;If it turns out that this is indeed too fragile to maintain, then we can revisit.&lt;/p&gt;

&lt;p&gt;If desired, we can add checks to ensure the correct paths are taken, using the org.apache.derby.junit.RuntimeStatisticsParser.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit this shortly, suites.All passed on my windows 7 system with this patch.&lt;/p&gt;</comment>
                            <comment id="13878224" author="jira-bot" created="Wed, 22 Jan 2014 03:52:43 +0000"  >&lt;p&gt;Commit 1560247 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1560247&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1560247&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3955&quot; title=&quot;test lang/selectivity.sql can be revived&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3955&quot;&gt;&lt;del&gt;DERBY-3955&lt;/del&gt;&lt;/a&gt;; test lang/selectivity.sql can be revived&lt;br/&gt;
   committing patch 3 - which adds the remaining test cases from selectivity.sql to SelectivityTest.java&lt;/p&gt;</comment>
                            <comment id="13883159" author="myrna" created="Mon, 27 Jan 2014 19:28:44 +0000"  >&lt;p&gt;It seems that this test, when run with a jdk 1.8 (pre release?) is showing a problem:&lt;br/&gt;
e.g. &lt;a href=&quot;http://download.java.net/javadesktop/derby/request_5586696/javadb-task-3791625.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/request_5586696/javadb-task-3791625.html&lt;/a&gt;&lt;br/&gt;
shows the following stack trace:&lt;br/&gt;
junit.framework.AssertionFailedError: expected:&amp;lt;4010&amp;gt; but was:&amp;lt;12913&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.checkEstimatedRowCount(BaseJDBCTestCase.java:1561)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.SelectivityTest.testStatMatcher(SelectivityTest.java:785)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;I think this is related to the fact that the fixtures in the test are run in a different sequence, i.e. &lt;br/&gt;
jdk1.8:&lt;br/&gt;
-----------------&lt;br/&gt;
(emb)lang.SelectivityTest.testSingleColumnSelectivity used 296 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testMultiPredicate used 126 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testTwoWayJoins used 26 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testStatMatcher used 254 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testBeetle4321 used 78 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testBasic used 2198 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testThreeWayJoins used 758 ms &lt;br/&gt;
(emb)lang.SelectivityTest.testScratch used 115 ms &lt;br/&gt;
-----------------&lt;br/&gt;
my ibm 1.7 run:&lt;br/&gt;
-----------------&lt;br/&gt;
(emb)lang.SelectivityTest.testSingleColumn used 323 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testMultiPredicate used 184 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testTwoWayJoins used 27 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testThreeWayJoins used 608 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testScratch used 145 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testStatMatcher used 114 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testBeetle4321 used 76 ms .&lt;br/&gt;
(emb)lang.SelectivityTest.testBasic used 2830 ms&lt;br/&gt;
-----------------&lt;br/&gt;
These fixtures should be independent of eachother, I&apos;ll look into this.&lt;/p&gt;</comment>
                            <comment id="13883331" author="jira-bot" created="Mon, 27 Jan 2014 21:25:37 +0000"  >&lt;p&gt;Commit 1561859 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=myrna&quot; class=&quot;user-hover&quot; rel=&quot;myrna&quot;&gt;Myrna van Lunteren&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1561859&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1561859&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3955&quot; title=&quot;test lang/selectivity.sql can be revived&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3955&quot;&gt;&lt;del&gt;DERBY-3955&lt;/del&gt;&lt;/a&gt;; test lang/selectivity.sql can be revived&lt;br/&gt;
   fixing an issue that showed up when the sequence of fixtures was different&lt;/p&gt;</comment>
                            <comment id="13883802" author="myrna" created="Tue, 28 Jan 2014 06:07:55 +0000"  >&lt;p&gt;Attaching a patch which attempts to address further instability in the SelectivityTest by adding update statistics calls to each fixture before doing any tests; hopefully that will ensure this works correctly for any jvm.&lt;br/&gt;
It works with Oracle prerelease u5 and my ibm 17 sr6...&lt;/p&gt;

&lt;p&gt;This patch is bigger though because it&apos;s also adding number of other run-time statistics text checks.&lt;/p&gt;

&lt;p&gt;I will commit this shortly.&lt;/p&gt;</comment>
                            <comment id="13883805" author="myrna" created="Tue, 28 Jan 2014 06:11:14 +0000"  >&lt;p&gt;oops, attached a bad version, it had a debugging method left in.&lt;/p&gt;</comment>
                            <comment id="13884493" author="myrna" created="Tue, 28 Jan 2014 19:39:51 +0000"  >&lt;p&gt;I committed the (new) patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3955&quot; title=&quot;test lang/selectivity.sql can be revived&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3955&quot;&gt;&lt;del&gt;DERBY-3955&lt;/del&gt;&lt;/a&gt;.diff4 with revision 1561949 &lt;a href=&quot;http://svn.apache.org/r1561949&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/r1561949&lt;/a&gt; - (but typed DERBy-3955, so the svngitjira tool didn&apos;t pick it up). Fixed the text now.&lt;/p&gt;</comment>
                            <comment id="13885374" author="myrna" created="Wed, 29 Jan 2014 14:22:03 +0000"  >&lt;p&gt;It looks as if the instability has been addressed now, the latest test runs at Oracle seem clear, and where reasonable checks to see if the optimizer picks expected paths have been added. I do not intend to add to this test at this time, so resolving.&lt;/p&gt;</comment>
                            <comment id="14180355" author="myrna" created="Wed, 22 Oct 2014 20:17:48 +0100"  >&lt;p&gt;close all resolved issues with myself as reporter and assignee.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12419355">DERBY-4116</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12698860">DERBY-6495</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12394198" name="DERBY-3955.diff1" size="44537" author="myrna" created="Tue, 18 Nov 2008 22:35:06 +0000"/>
                            <attachment id="12623071" name="DERBY-3955.diff2" size="96973" author="myrna" created="Wed, 15 Jan 2014 06:28:10 +0000"/>
                            <attachment id="12624271" name="DERBY-3955.diff3" size="99535" author="myrna" created="Wed, 22 Jan 2014 03:51:12 +0000"/>
                            <attachment id="12625530" name="DERBY-3955.diff4" size="31865" author="myrna" created="Tue, 28 Jan 2014 06:11:14 +0000"/>
                            <attachment id="12403533" name="derby-3955_sanityCheck_dont_commit_diff.txt" size="8142" author="kmarsden" created="Tue, 24 Mar 2009 17:00:03 +0000"/>
                            <attachment id="12403539" name="oldSelectivity.java" size="7170" author="kmarsden" created="Tue, 24 Mar 2009 18:47:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 24 Mar 2009 17:00:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31072</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0a6n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35468</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>