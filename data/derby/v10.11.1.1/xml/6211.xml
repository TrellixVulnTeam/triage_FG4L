<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:11:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6211/DERBY-6211.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6211] Make Optimizer trace logic pluggable.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6211</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Right now the trace logic in the optimizer is hard-coded to produce a stream of diagnostics. It would be good to be able to plug alternative trace logic into the optimizer. This would make the following possible:&lt;/p&gt;

&lt;p&gt;1) Plug in trace logic which produces formats which are easier to study and which can be analyzed mechanically. E.g., xml formatted output.&lt;/p&gt;

&lt;p&gt;2) Plug in trace logic which can be used during unit testing to verify that the optimizer has picked the right plan. Over time this might make it easier to migrate canon-based tests to assertion-based tests.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12645677">DERBY-6211</key>
            <summary>Make Optimizer trace logic pluggable.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Wed, 1 May 2013 19:37:45 +0100</created>
                <updated>Tue, 27 May 2014 19:00:51 +0100</updated>
                            <resolved>Thu, 6 Mar 2014 13:15:47 +0000</resolved>
                                    <version>10.11.1.1</version>
                                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13646831" author="rhillegas" created="Wed, 1 May 2013 20:06:42 +0100"  >&lt;p&gt;Attaching derby-6211-01-aa-createPlugin.diff. This patch abstracts out the optimizer trace logic so that other tracers can be plugged in. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Adds a new interface OptTrace, which describes the trace operations performed by the Optimizer.&lt;/p&gt;

&lt;p&gt;2) Removes the generic trace dispatcher from Level2OptimizerImpl. The giant switch statement is removed and the individual cases are moved into separate methods in DefaultOptTrace, the default implementation of OptTrace. DefaultOptTrace produces the familiar, current optimizer trace output. The generic, opaque, weakly typed trace() method is removed and replaced by the strongly typed methods in OptTrace.&lt;/p&gt;

&lt;p&gt;3) Removes the trace flag constants from Optimizer.&lt;/p&gt;

&lt;p&gt;4) Makes trace callers use the new strongly typed methods in OptTrace.&lt;/p&gt;

&lt;p&gt;I have run some hand tests. With and without this patch, the output of optimizer tracing looks the same.&lt;/p&gt;

&lt;p&gt;Follow-on patches can introduce alternative trace plugins.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/iapi/sql/compile/OptTrace.java&lt;/p&gt;

&lt;p&gt;Changes for (1).&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/sql/compile/DefaultOptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/Level2OptimizerImpl.java&lt;/p&gt;

&lt;p&gt;Changes for (2).&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/Optimizer.java&lt;/p&gt;

&lt;p&gt;Changes for (3).&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/NestedLoopJoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/JoinNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/HashJoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;/p&gt;

&lt;p&gt;Changes for (4).&lt;/p&gt;</comment>
                            <comment id="13646900" author="mamtas" created="Wed, 1 May 2013 21:37:01 +0100"  >&lt;p&gt;Hi Rick, thanks for working on this useful addition to Derby. I was wondering what were you planning on doing as part of following&lt;br/&gt;
**************************&lt;br/&gt;
2) Plug in trace logic which can be used during unit testing to verify that the optimizer has picked the right plan. Over time this might make it easier to migrate canon-based tests to assertion-based tests. &lt;br/&gt;
**************************&lt;br/&gt;
Recently, when I wrote couple optimizer related junit test, I was able to use existing utilities to determine if the optimizer was choosing the correct scan - InListMultiProbeTest:runThreeQueries&lt;br/&gt;
        s.execute(&quot;call SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)&quot;);&lt;br/&gt;
        ...&lt;br/&gt;
        rtsp = SQLUtilities.getRuntimeStatisticsParser(s);&lt;br/&gt;
        assertTrue(rtsp.usedIndexScan());&lt;br/&gt;
Are you planning on replacing this mechanism with something else? Thanks&lt;/p&gt;</comment>
                            <comment id="13647472" author="rhillegas" created="Thu, 2 May 2013 13:34:52 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-01-aa-createPlugin.diff. Committed at subversion revision 1478347.&lt;/p&gt;</comment>
                            <comment id="13647477" author="rhillegas" created="Thu, 2 May 2013 13:44:25 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;I&apos;m not planning to fix anything that isn&apos;t broken. I think that the RuntimeStatisticsParser does a good job of analyzing the plans chosen for many queries. But I think that there are limitations in the approach taken by RuntimeStatisticsParser: looking for the presence of specific strings in the runtime statistics output. For instance, the following RuntimeStatisticsParser method&lt;/p&gt;

&lt;p&gt;   public boolean usedTableScan(String tableName)&lt;/p&gt;

&lt;p&gt;...will give you useful information if a table is only scanned once by a query. But if a table is scanned more than once, then the method won&apos;t tell you which scan was the table scan. I&apos;m hoping that a trace plugin will be able to give us the detailed structure of the plan. Thanks.&lt;/p&gt;</comment>
                            <comment id="13648504" author="rhillegas" created="Fri, 3 May 2013 16:39:56 +0100"  >&lt;p&gt;Attaching derby-6211-02-aa-cleanup.diff. This patch removes some unused code related to optimizer tracing. This patch also tries to clean up the confusing and brittle division of tracing responsibility currently split between the optimizer itself and the LanguageConnectionContext. I am running tests now.&lt;/p&gt;

&lt;p&gt;The following changes are made:&lt;/p&gt;

&lt;p&gt;1) Removes the unused and unusable support for html formatting of optimizer traces. Once I have implemented an xml-formatted tracer, it should be easy to follow its pattern in order to write an html-formatted tracer--in case anyone really wants html.&lt;/p&gt;

&lt;p&gt;2) Centralizes tracing responsibility in the LanguageConnectionContext. The LCC now has only 3 methods related to optimizer tracing and the optimizer itself retrieves the tracer from the LCC:&lt;/p&gt;

&lt;p&gt;    setOptimizerTracer()&lt;br/&gt;
    getOptimizerTracer()&lt;br/&gt;
    optimizerTracingIsOn()&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/impl/tools/optional/OptimizerTracer.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/compile/OptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/db/OptimizerTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DefaultOptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/Level2OptimizerImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java&lt;/p&gt;</comment>
                            <comment id="13648580" author="rhillegas" created="Fri, 3 May 2013 18:16:25 +0100"  >&lt;p&gt;Attaching derby-6211-02-ab-cleanup.diff. This second rev of the patch fixes a bug introduced by derby-6211-01-aa-createPlugin.diff but which was obscured by some self-healing code in that patch. I am re-running tests now.&lt;/p&gt;</comment>
                            <comment id="13648691" author="rhillegas" created="Fri, 3 May 2013 20:17:11 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-02-ab-cleanup.diff. Committed at subversion derby-6211-02-ab-cleanup.diff.&lt;/p&gt;</comment>
                            <comment id="13649132" author="rhillegas" created="Sat, 4 May 2013 19:22:25 +0100"  >&lt;p&gt;Attaching derby-6211-03-aa-customTracer.diff. This patch adds the ability to plug custom trace logic into the Optimizer. I am running tests now.&lt;/p&gt;

&lt;p&gt;To plug custom trace logic into the Optimizer, do the following:&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_register_tool&lt;br/&gt;
(&lt;br/&gt;
    &apos;optimizerTracing&apos;, true, &apos;custom&apos;,&lt;br/&gt;
    &apos;my.custom.Classname&apos;&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;...where my.custom.Classname is the name of a class which&lt;/p&gt;

&lt;p&gt;1) implements org.apache.derby.iapi.sql.compile.OptTrace&lt;/p&gt;

&lt;p&gt;2) has a 0-arg constructor&lt;/p&gt;

&lt;p&gt;Then run a couple queries. When you are finished tracing, unload your custom trace logic. If your class implements OptTrace.printToWriter(), then your custom trace output will go to System.out or to a file, depending on the arguments to the unload command. This prints the output to System.out:&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false );&lt;/p&gt;

&lt;p&gt;...and this prints the trace output to z1.txt:&lt;/p&gt;

&lt;p&gt;call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false, &apos;z1.txt&apos; );&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/impl/tools/optional/OptimizerTracer.java&lt;br/&gt;
M       java/tools/org/apache/derby/loc/toolsmessages.properties&lt;/p&gt;

&lt;p&gt;Support for custom optimizer tracing.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DummyOptTrace.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/OptionalToolsTest.java&lt;/p&gt;

&lt;p&gt;Tests for this new functionality.&lt;/p&gt;</comment>
                            <comment id="13649673" author="knutanders" created="Mon, 6 May 2013 12:46:13 +0100"  >&lt;p&gt;After the latest changes, derbytools.jar includes many of the iapi classes that previously were only included in derby.jar. In addition to increasing the size of derbytools.jar (from 245KB to 680KB in a sane build) it causes sealing violations in the nightly tests on some platforms, for example here: &lt;a href=&quot;http://download.java.net/javadesktop/derby/javadb-5576120-report/javadb-5576120-3641400-details.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/javadb-5576120-report/javadb-5576120-3641400-details.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13649705" author="rhillegas" created="Mon, 6 May 2013 13:46:54 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-03-aa-customTracer.diff. Committed at subversion revision 1479552.&lt;/p&gt;</comment>
                            <comment id="13649713" author="rhillegas" created="Mon, 6 May 2013 13:49:56 +0100"  >&lt;p&gt;Thanks for catching that, Knut. I think this may mean that OptimizerTracer needs to move out of the tools jar and into the engine jar. The right thing might be to move all of the optional tools into the engine jar since none of them really needs to be in the tools jar. Dag wondered about this in a 2013-01-03 comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6022&quot; title=&quot;Add a system procedure for (un)registering optional packages of Derby tools.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6022&quot;&gt;&lt;del&gt;DERBY-6022&lt;/del&gt;&lt;/a&gt;. For the moment I will just move OptimizerTracer and see if that helps. Thanks.&lt;/p&gt;</comment>
                            <comment id="13649780" author="rhillegas" created="Mon, 6 May 2013 15:54:23 +0100"  >&lt;p&gt;Attaching derby-6211-04-aa-moveOptimizerTracerToEngineJar.diff. This patch moves the OptimizerTracer optional tool out of the tools jar and into the engine jar. I am running tests now.&lt;/p&gt;

&lt;p&gt;With this patch, the tools jar shrinks back to its old size. Hopefully this will address the sealing violations in the compatibility tests.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;D       java/tools/org/apache/derby/impl/tools/optional/OptimizerTracer.java&lt;br/&gt;
A  +    java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/build.xml&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;br/&gt;
M       tools/jar/tools.properties&lt;/p&gt;

&lt;p&gt;Build changes for this move. I added a Java 6 build target to java/engine/org/apache/derby/impl/sql/build.xml because OptimizerTracer requires varargs in order to compile. We can rip out this new target when we deprecate support for Java 5 and CDC.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/catalog/Java5SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Look for OptimizerTracer in its new package.&lt;/p&gt;

&lt;p&gt;----------------&lt;/p&gt;

&lt;p&gt;M       java/tools/org/apache/derby/loc/toolsmessages.properties&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;Move some OptimizerTracer messages to the engine message file.&lt;/p&gt;</comment>
                            <comment id="13649866" author="rhillegas" created="Mon, 6 May 2013 18:00:44 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-04-aa-moveOptimizerTracerToEngineJar.diff. Committed at subversion revision 1479642.&lt;/p&gt;</comment>
                            <comment id="13680468" author="rhillegas" created="Tue, 11 Jun 2013 17:46:51 +0100"  >&lt;p&gt;Attaching derby-6211-05-aa-xmlOptimizerTracer.diff. This patch adds an optimizer tracer which produces its output in xml. In addition, this patch adds an optional tool for viewing that xml output using SQL. I am running tests now.&lt;/p&gt;

&lt;p&gt;I find that it is very hard to read the existing optimizer traces for the following reasons:&lt;/p&gt;

&lt;p&gt;i) The trace output is not indented to indicate how facts relate to one another.&lt;/p&gt;

&lt;p&gt;ii) In particular, it is hard to piece together the shapes of the query plans which are being evaluated.&lt;/p&gt;

&lt;p&gt;I hope that this xml output is easier to read and understand. The output contains elements which nest like the corresponding optimizer data structures:&lt;/p&gt;

&lt;p&gt;A) statement - This is the text of an SQL statement which needs optimization.&lt;/p&gt;

&lt;p&gt;B) queryBlock - A statement may have many query blocks. For instance, a UNION statement contains many branches, each of which is its own query block. Most subqueries are also independent query blocks. Each query block is optimized in isolation from the others. The isolation goes so far that each query block gets its own optimizer instance.&lt;/p&gt;

&lt;p&gt;C) joinOrder - For each query block, the optimizer may consider several join orders. These are the left-to-right orders in which tables would be accessed at execution time. The optimizer builds up a join order incrementally, starting from the leftmost position and adding more tables as it goes. The optimizer may abandon a join order before it is completely filled out. This happens if the optimizer determines that no completion of the join order can result in a plan that&apos;s cheaper than the best plan found so far.&lt;/p&gt;

&lt;p&gt;D) decoration - As the optimizer fills out the join order, it also considers which conglomerate to use for each table and how to join the table to the table to its left. Of course, the leftmost table doesn&apos;t join to anything before it, so for the leftmost table the join strategy is always NESTED_LOOP.&lt;/p&gt;

&lt;p&gt;The following other elements appear in the xml output:&lt;/p&gt;

&lt;p&gt;E) planCost - The optimizer evaluates the costs of decorated join orders, including the costs of decorated but partial join orders. The planCost element nests inside the joinOrder element. In addition, each queryBlock contains a best planCost.&lt;/p&gt;

&lt;p&gt;F) decConglomerateCost - This represents the cost of using a particular conglomerate to scan a table. This element nests inside the decoration element.&lt;/p&gt;

&lt;p&gt;In addition to presenting cost information, the planCost element presents two descriptions of the decorated join order being evaluated:&lt;/p&gt;

&lt;p&gt;1) summary - This is meant to be a compact, precise description of the plan which we might consider using in an optimizer override. This description identifies conglomerates by the (often cryptic) names stored in SYS.SYSCONGLOMERATES.&lt;/p&gt;

&lt;p&gt;2) verbose - This is meant to be a more human-readable description of the plan. Tables are identified by their SQL names or by their correlation names in the query. In addition, index column names are included if the table is accessed by an index.&lt;/p&gt;

&lt;p&gt;Although the optimizer considers how tables join leftward, English speakers will want to view the join order rightward. That is how the descriptions are written. In addition, I have introduced the following infix operators to represent the join strategies:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;NESTED_LOOP&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;HASH_JOIN&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I have also fully parenthesized the plan descriptions even though Derby only supports left-deep parentheses today. In the future, Derby may support bushy join orders, requiring different parenthesizing. Putting all of this together, here is a sample summary description:&lt;/p&gt;

&lt;p&gt;((45b300a8-013f-33ba-d007-000003789be8 # b6b2c0ae-013f-33ba-d007-000003789be8) # 67bb80b4-013f-33ba-d007-000003789be8) # d8cd40ba-013f-33ba-d007-000003789be8&lt;/p&gt;

&lt;p&gt;...and here is the corresponding verbose description:&lt;/p&gt;

&lt;p&gt;((APP.TAB1 # APP.TAB2) # APP.TAB3) # APP.TAB4&lt;/p&gt;

&lt;p&gt;For the following query...&lt;/p&gt;

&lt;p&gt;select tablename from sys.systables t, sys.syscolumns c, sys.sysaliases a, sys.syssequences s&lt;br/&gt;
where t.tablename = c.columnname and c.columnname = a.alias and a.alias = s.sequencename&lt;/p&gt;

&lt;p&gt;...here&apos;s a sample verbose plan description:&lt;/p&gt;

&lt;p&gt;((C # T&lt;/p&gt;
{TABLENAME,SCHEMAID}
&lt;p&gt;) # A&lt;/p&gt;
{SCHEMAID,ALIAS,NAMESPACE}
&lt;p&gt;) # S&lt;/p&gt;
{SCHEMAID,SEQUENCENAME}

&lt;p&gt;I think that this xml output is much easier to read than traditional Derby optimizer traces. If you use a browser like Firefox, you can collapse and expand elements in order to expose just the information you want to see.&lt;/p&gt;

&lt;p&gt;This patch also includes an optional tool (optimizerTracingViews) which gives you a SQL view of all of the planCost elements in the xml output. Here&apos;s an example of how to use xml optimizer tracing along with this optional viewing tool. Note that the tracer wants a file name argument but the viewer wants a file url argument:&lt;/p&gt;

&lt;p&gt;&amp;#8211; turn on xml-based optimizer tracing&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, true, &apos;xml&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; run this query through the tracer&lt;br/&gt;
select * from tab1, tab2, tab3, tab4 where -tab1.b = tab2.b and tab2.a = tab3.a and tab3.a = tab4.a;&lt;/p&gt;

&lt;p&gt;&amp;#8211; turn off optimizer tracing&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false, &apos;z.xml&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; load the trace viewer&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracingViews&apos;, true, &apos;file:///Users/rh161140/derby/mainline/z.xml&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; view the costs of all complete plans&lt;br/&gt;
select estimatedCost, verbose from planCost&lt;br/&gt;
where complete&lt;br/&gt;
order by estimatedCost&lt;br/&gt;
;&lt;/p&gt;

&lt;p&gt;&amp;#8211; unload the trace viewer&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracingViews&apos;, false );&lt;/p&gt;

&lt;p&gt;Here is the output of the query against the planCost view:&lt;/p&gt;

&lt;p&gt;ESTIMATEDCOST           |VERBOSE                                                                                                                         &lt;br/&gt;
------------------------------------------------------------&lt;br/&gt;
8595.596000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB4) # APP.TAB3                                                                                   &lt;br/&gt;
8595.596000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB3) # APP.TAB4                                                                                   &lt;br/&gt;
8595.596000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB3) # APP.TAB4                                                                                   &lt;br/&gt;
9114.756000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB4) # APP.TAB3                                                                                   &lt;br/&gt;
9114.756000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB3) # APP.TAB4                                                                                   &lt;br/&gt;
9114.756000000001       |((APP.TAB1 # APP.TAB2) # APP.TAB3) # APP.TAB4                                                                                   &lt;br/&gt;
18224.740429176647      |((APP.TAB3 # APP.TAB2) # APP.TAB4) * APP.TAB1                                                                                   &lt;br/&gt;
18224.740429176647      |((APP.TAB2 # APP.TAB3) # APP.TAB4) * APP.TAB1                                                                                   &lt;br/&gt;
27806.645417006024      |((APP.TAB3 # APP.TAB4) # APP.TAB2) * APP.TAB1                                                                                   &lt;br/&gt;
27806.645417006024      |((APP.TAB2 # APP.TAB4) # APP.TAB3) * APP.TAB1                                                                                   &lt;br/&gt;
27903.296430890066      |((APP.TAB4 # APP.TAB3) # APP.TAB2) * APP.TAB1                                                                                   &lt;br/&gt;
27903.296430890066      |((APP.TAB4 # APP.TAB2) # APP.TAB3) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB4 # APP.TAB3) # APP.TAB2) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB4 # APP.TAB2) # APP.TAB3) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB3 # APP.TAB4) # APP.TAB2) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB3 # APP.TAB2) # APP.TAB4) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB2 # APP.TAB4) # APP.TAB3) * APP.TAB1                                                                                   &lt;br/&gt;
28336.34888640299       |((APP.TAB2 # APP.TAB3) # APP.TAB4) * APP.TAB1                                                                                   &lt;/p&gt;

&lt;p&gt;Here is the full shape of the planCost view:&lt;/p&gt;

&lt;p&gt;(&lt;br/&gt;
    text varchar( 32672 ),&lt;br/&gt;
    stmtID    int,&lt;br/&gt;
    qbID   int,&lt;br/&gt;
    complete  boolean,&lt;br/&gt;
    summary   varchar( 32672 ),&lt;br/&gt;
    verbose   varchar( 32672 ),&lt;br/&gt;
    type        varchar( 50 ),&lt;br/&gt;
    estimatedCost        double,&lt;br/&gt;
    estimatedRowCount    bigint&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;I think this functionality is useful enough now that other people can test-drive it. Before writing regression tests for this patch, I would like to gather feedback from developers about how to improve this basic functionality. For instance, is this readable enough? Is there some information from optimizer traces which you often use but which is missing from the xml output?&lt;/p&gt;

&lt;p&gt;Further improvements could include:&lt;/p&gt;

&lt;p&gt;I) Adding more information to the xml trace. Right now, I have only implemented a subset of the trace methods.&lt;/p&gt;

&lt;p&gt;II) Adding more SQL views for reading the xml trace output.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DefaultOptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/Level2OptimizerImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DummyOptTrace.java&lt;/p&gt;

&lt;p&gt;Changes to the signatures of some of the trace methods so that they give the xml tracer the information it needs.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/JoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/NestedLoopJoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/HashJoinStrategy.java&lt;/p&gt;

&lt;p&gt;Each JoinStrategy now has an operator symbol for use in planCost descriptions.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java&lt;/p&gt;

&lt;p&gt;The new xml trace logic.&lt;/p&gt;

&lt;p&gt;------------------&lt;/p&gt;

&lt;p&gt;A       java/engine/org/apache/derby/impl/sql/compile/OptTraceViewer.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/Java5SystemProcedures.java&lt;br/&gt;
M       tools/jar/extraDBMSclasses.properties&lt;/p&gt;

&lt;p&gt;The new optional tool for viewing xml trace output.&lt;/p&gt;</comment>
                            <comment id="13680556" author="rhillegas" created="Tue, 11 Jun 2013 20:05:22 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-05-aa-xmlOptimizerTracer.diff. Committed at subversion revision 1491893.&lt;/p&gt;

&lt;p&gt;JIRA was not reachable when I committed this patch. It appears that the &quot;ASF subversion and git services&quot; commit trigger does not buffer up and retry a commit comment if it fails to add the comment immediately after committing.&lt;/p&gt;</comment>
                            <comment id="13680737" author="mikem" created="Tue, 11 Jun 2013 22:54:55 +0100"  >&lt;p&gt;Can you describe the impact on derby.jar.  In general I would like to see tools go in some other optional jar, and as much as possible separate&lt;br/&gt;
from the mainline server code.   I understand for this particular work there is server based work to provide the framework to plug.  &lt;/p&gt;

&lt;p&gt;Is there an extra cost (size or execution lines) added for a server that is not interested in optimizer trace?&lt;/p&gt;
</comment>
                            <comment id="13681167" author="rhillegas" created="Wed, 12 Jun 2013 13:35:31 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;The xml-based tracing adds 2 new classes to the engine jar:&lt;/p&gt;

&lt;p&gt;o XMLOptTrace. This is the xml tracer. It needs to be in the engine jar because it references many engine classes. It weighs 23K.&lt;/p&gt;

&lt;p&gt;o OptTraceViewer. This is the code which loads and unloads the optional tool for viewing the xml output. It weighs 4K.&lt;/p&gt;

&lt;p&gt;Here&apos;s how xml-based tracing affects Derby processing:&lt;/p&gt;

&lt;p&gt;o If you don&apos;t turn on optimizer tracing, then there is no effect. That is because the tracing methods are only called if tracing is turned on. No new tracing methods have been added.&lt;/p&gt;

&lt;p&gt;o If you turn on optimizer tracing and you use the old-style tracer, then there is a tiny effect: one extra (unused) argument apiece has been added to the signatures of two tracing methods. I don&apos;t think that this extra argument passing will give rise to any measurable performance drag.&lt;/p&gt;

&lt;p&gt;o If you turn on optimizer tracing and you use xml-based tracing, then for some trace calls, the tracing may create more transient objects. Other trace calls, which are NOPs in the xml-tracer, will create fewer transient objects. I haven&apos;t measured the performance effects of turning on either style of tracing.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13681524" author="rhillegas" created="Wed, 12 Jun 2013 20:08:12 +0100"  >&lt;p&gt;Attaching derby-6211-06-ab-packageProtect-XMLOptTrace.diff. This patch reduces the visibility of XMLOptTrace to package visibility.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;</comment>
                            <comment id="13681526" author="jira-bot" created="Wed, 12 Jun 2013 20:09:33 +0100"  >&lt;p&gt;Commit 1492378 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1492378&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1492378&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Commit derby-6211-06-ab-packageProtect-XMLOptTrace.diff, reducing the visibility of XMLOptTrace.&lt;/p&gt;</comment>
                            <comment id="13687642" author="dagw" created="Wed, 19 Jun 2013 06:54:37 +0100"  >&lt;p&gt;I took the XML tracing for a test drive, also using the optional view tool to check the results and I think the functionality is useful. I haven&apos;t really done enough work in the optimizer to be able to say what possible extra trace might be useful, but it seems straight forward to add more tracing as we see the need.&lt;br/&gt;
The new notation is helpful to quickly grok what plan has been selected. &lt;/p&gt;

&lt;p&gt;Question: If I do this twice, e.g one with XML, one with standard text, as in this stanza, I see no proper trace in round two. Why? (possible answer below)&lt;/p&gt;

&lt;p&gt;    connect &apos;jdbc:derby:memory:wombat;create=true&apos;;&lt;br/&gt;
    create table t(i int primary key, j int);&lt;br/&gt;
    insert into t values (1,1),(2,2);&lt;br/&gt;
    call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, true);&lt;br/&gt;
    select * from t a, t b;&lt;br/&gt;
    call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false, &apos;plan.txt&apos;); &lt;br/&gt;
    call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, true, &apos;xml&apos;);&lt;br/&gt;
    select * from t a, t b;&lt;br/&gt;
    call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false, &apos;plan.xml&apos;); &lt;/p&gt;

&lt;p&gt;It doesn&apos;t matter if I use xml or traditional trace, the second time, I see no real plan in the output file. I guess the statement cache tricks us here...&lt;br/&gt;
It it a tad confusing for the user... perhaps we could force recompilation the next statement after we register optimizer tracing?&lt;/p&gt;
</comment>
                            <comment id="13687915" author="rhillegas" created="Wed, 19 Jun 2013 13:15:24 +0100"  >&lt;p&gt;Thanks for that feedback, Dag. Concerning the experiment you ran when you traced the same statement twice in a row: I also blundered into this behavior and came to the same conclusion. The statement is recorded in the trace but the optimizer is never called because the plan has already been compiled and cached. As you note, it doesn&apos;t matter what kind of tracing you request. A slight enhancement to your suggestion might be to always skip the statement cache when optimizer tracing is on. Thanks.&lt;/p&gt;</comment>
                            <comment id="13688328" author="rhillegas" created="Wed, 19 Jun 2013 20:06:12 +0100"  >&lt;p&gt;Attaching derby-6211-07-aa-useSchemaQualifiedNamesInSummaries.diff. This patch makes a couple changes to how object names are presented in xml-based optimizer traces.&lt;/p&gt;

&lt;p&gt;This patch makes these significant changes:&lt;/p&gt;

&lt;p&gt;1) Uses fully qualified (schema + object) names to identify conglomerates and table functions in plan summaries.&lt;/p&gt;

&lt;p&gt;2) Prefixes table function names with the [ character in order to distinguish them from the names of indexes.&lt;/p&gt;

&lt;p&gt;3) Fixes some NPEs when tracing queries which involve table functions.&lt;/p&gt;

&lt;p&gt;The idea is to produce plan summaries which are complete enough that they can be used to specify complete plans via the work to be done on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The extra [ character used to distinguish table functions from indexes is cryptic, idiosyncratic, and maybe overkill. Moreover, there&apos;s only a low risk that the name spaces would conflict. But I thought it was better to be cautious here. Please let me know if you have another idea for how to distinguish the name spaces.&lt;/p&gt;

&lt;p&gt;Here are sample plan summaries involving tables, views, and table functions. Note that views are replaced with base tables before Derby gets to the optimizer.&lt;/p&gt;

&lt;p&gt;This query...&lt;/p&gt;

&lt;p&gt;  select tablename from v, sys.syscolumns where tablename = columnname&lt;/p&gt;

&lt;p&gt;...produces a summary plan like this:&lt;/p&gt;

&lt;p&gt;   &quot;SYS&quot;.&quot;SYSCOLUMNS_HEAP&quot; # &quot;SYS&quot;.&quot;SYSTABLES_INDEX1&quot;&lt;/p&gt;

&lt;p&gt;This query...&lt;/p&gt;

&lt;p&gt;  select columnname from sys.syscolumns c, table( integerList() ) i where c.columnNumber = i.a and i.a &amp;lt; 0 &lt;/p&gt;

&lt;p&gt;...produces a summary plan like this:&lt;/p&gt;

&lt;p&gt;  &quot;SYS&quot;.&quot;SYSCOLUMNS_HEAP&quot; # [&quot;APP&quot;.&quot;INTEGERLIST&quot;&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/TableName.java&lt;/p&gt;

&lt;p&gt;Adds a new method which prints a TableName as a schema-qualified, quoted, and escaped SQL name.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;

&lt;p&gt;Makes the changes described above.&lt;/p&gt;</comment>
                            <comment id="13689187" author="rhillegas" created="Thu, 20 Jun 2013 13:28:40 +0100"  >&lt;p&gt;Attaching derby-6211-07-ab-useSchemaQualifiedNamesInSummaries.diff. Tests passed cleanly on the previous rev of the patch. The new rev of the patch improves the notation for table functions, based on a suggestion by Dag given over a private channel.&lt;/p&gt;

&lt;p&gt;Dag suggested that &quot;APP&quot;.&quot;INTEGERLIST&quot;() would be less cryptic and idiosyncratic than [&quot;APP&quot;.&quot;INTEGERLIST&quot;. I agree. Thanks, Dag.&lt;/p&gt;</comment>
                            <comment id="13689189" author="jira-bot" created="Thu, 20 Jun 2013 13:32:02 +0100"  >&lt;p&gt;Commit 1494954 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1494954&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1494954&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Use schema-qualified names in plan summaries printed by the xml-based optimizer tracer; commit derby-6211-07-ab-useSchemaQualifiedNamesInSummaries.diff.&lt;/p&gt;</comment>
                            <comment id="13695003" author="rhillegas" created="Thu, 27 Jun 2013 20:55:36 +0100"  >&lt;p&gt;Attaching derby-6211-08-aa-fixNPE.diff. This patch fixes an NPE in xml-based optimizer tracing. The NPE was introduced by recent work on removing the NodeFactory. The NPE was not discovered because there are no regression tests for xml-based optimizer tracing yet.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;</comment>
                            <comment id="13695006" author="jira-bot" created="Thu, 27 Jun 2013 20:56:40 +0100"  >&lt;p&gt;Commit 1497537 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1497537&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1497537&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Fix NPE in xml-based optimizer tracing; committing derby-6211-08-aa-fixNPE.diff.&lt;/p&gt;</comment>
                            <comment id="13695217" author="bryanpendleton" created="Fri, 28 Jun 2013 02:47:37 +0100"  >&lt;p&gt;Hi Rick, Do you think it is a complex task to write some tests for XML-based optimizer tracing?&lt;/p&gt;

&lt;p&gt;I am wondering if it would be a good sub-task of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6164&quot; title=&quot;Improve Derby&amp;#39;s Code Coverage - GSoC 2013 Project&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6164&quot;&gt;&lt;del&gt;DERBY-6164&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13695413" author="rhillegas" created="Fri, 28 Jun 2013 13:17:33 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;I&apos;m not quite ready to write regression tests for xml-based optimizer tracing. I apologize that this creates more gaps for the code-coverage project. I have at least one more change to make to the xml output before I add some tests.&lt;/p&gt;

&lt;p&gt;Right now I&apos;m working on adding compact optimizer overrides for complete query plans (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;). The idea is that the plan summaries output by xml-based optimizer tracing will work as plan descriptions in optimizer overrides. I&apos;ve made a lot of progress on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt; and may have a patch to show the community in a couple days.&lt;/p&gt;

&lt;p&gt;Until then, I want to hold off writing tests for xml-based optimizer tracing, just in case the format of the plan summaries changes. For the same reason, I&apos;ve been holding off writing tests for xml-based execution plans (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6266&quot; title=&quot;Add ability to print a Derby execution ResultSet as xml.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6266&quot;&gt;&lt;del&gt;DERBY-6266&lt;/del&gt;&lt;/a&gt;). I want to use those ResultSet summaries in the tests which verify the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6267&quot; title=&quot;Add ability to compactly specify a complete query plan in an optimizer override.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6267&quot;&gt;&lt;del&gt;DERBY-6267&lt;/del&gt;&lt;/a&gt;. And there&apos;s a possibility that the ResultSet summaries may have to change a bit in order to serve that purpose.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13700922" author="rhillegas" created="Fri, 5 Jul 2013 15:55:08 +0100"  >&lt;p&gt;Attaching derby-6211-09-aa-addTests.diff. This patch adds tests for xml-based optimizer tracing. I am running the full tests now.&lt;/p&gt;

&lt;p&gt;This patch makes a couple changes:&lt;/p&gt;

&lt;p&gt;1) Wraps a privilege block around the file writes performed by optimizer tracing.&lt;/p&gt;

&lt;p&gt;2) Wraps a privilege block around the file reading performed by the XmlVTI.&lt;/p&gt;

&lt;p&gt;3) Changes xml-based optimizer tracing:&lt;/p&gt;

&lt;p&gt;a) Removes the verbose summary element. After other changes to the summary element, I don&apos;t think that the verbose element adds much value any more.&lt;/p&gt;

&lt;p&gt;b) Uses OptimizerPlan.toString() to format plan summaries. This should help enforce the contract that summary lines can be used as optimizer overrides.&lt;/p&gt;

&lt;p&gt;4) Adds tests for xml-based optimizer tracing. More extensive tests would be useful but I haven&apos;t figured out a way to ensure cross-platform stability for the results of more complicated tests. I am hoping that these tests turn out to be stable when run as part of the full regression test suite.&lt;/p&gt;

&lt;p&gt;While experimenting with these tests, I tripped across some interesting behaviors:&lt;/p&gt;

&lt;p&gt;A) An optimizer trace (either xml-based or otherwise) can show two separate optimizer sessions for a query. The first session happens when you prepare the query. The second happens when the execution logic decides that it needs to re-prepare the query you just prepared. I saw this behavior for a query against tables which I had just stuffed with many rows. Maybe statistics were being automatically calculated between the initial preparation and the actual execution of the query.&lt;/p&gt;

&lt;p&gt;B) The order in which plan shapes appear in the optimizer trace is not deterministic. This may be an instability in the planCost table function. But the instability may be in the optimizer itself. Maybe the optimizer considers plans in an unstable order. That would be weird and troubling.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/OptimizerTracer.java&lt;/p&gt;

&lt;p&gt;(1)&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/vti/XmlVTI.java&lt;/p&gt;

&lt;p&gt;(2)&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;

&lt;p&gt;(3)&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/RSMDWrapper.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java&lt;/p&gt;

&lt;p&gt;(4). Along the way, I checked in a slightly amended version of the RSMDWrapper table function attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4926&quot; title=&quot;Create a table function to wrap ResultSetMetaData&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4926&quot;&gt;DERBY-4926&lt;/a&gt;. This creates a table function out of the ResultSetMetaData returned by a query; it can be useful in tests which need to verify the shapes of ResultSets.&lt;/p&gt;</comment>
                            <comment id="13700968" author="jira-bot" created="Fri, 5 Jul 2013 17:17:17 +0100"  >&lt;p&gt;Commit 1500056 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1500056&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1500056&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Add basic tests for xml-based optimizer tracing; tests passed cleanly on derby-6211-09-aa-addTests.diff.&lt;/p&gt;</comment>
                            <comment id="13701010" author="knutanders" created="Fri, 5 Jul 2013 18:19:07 +0100"  >&lt;p&gt;Thanks for writing the test, Rick.&lt;/p&gt;

&lt;p&gt;I think the two privilege blocks can be narrowed down. I don&apos;t think there&apos;s a problem at the moment, but keeping the blocks as small as possible reduces the risk of problematic code sneaking into the privilege blocks by accident later.&lt;/p&gt;

&lt;p&gt;I only found these two lines that needed to run with privileges:&lt;/p&gt;

&lt;p&gt;+                         FileInputStream     is = new FileInputStream( file );&lt;/p&gt;

&lt;p&gt;and &lt;/p&gt;

&lt;p&gt;+                                 pw = new PrintWriter( configurationParameters[ 0 ] );&lt;/p&gt;

&lt;p&gt;(I didn&apos;t test, so I may have missed some.)&lt;/p&gt;</comment>
                            <comment id="13727637" author="rhillegas" created="Fri, 2 Aug 2013 13:42:51 +0100"  >&lt;p&gt;Attaching derby-6211-10-aa-makingCostEstimateObject.diff. This patch simplifies the construction of CostEstimate objects and fixes an NPE when running XML-based optimizer tracing against an outer join query. Tests passed cleanly for me on this patch.&lt;/p&gt;

&lt;p&gt;While investigating the optimizer&apos;s handling of outer joins, I tripped across 2 problems:&lt;/p&gt;

&lt;p&gt;1) The xml-based optimizer tracer dies on an NPE in trying to assign a table name to the ProjectRestrictNode which sits on top of the outer join node. The fix, for the moment, is to give the ProjectRestrictNode a generic name.&lt;/p&gt;

&lt;p&gt;2) During outer join optimization, other optimizers are created for the sole purpose of asking them to manufacture empty CostEstimate objects. This is wrong for several reasons:&lt;/p&gt;

&lt;p&gt;a) It violates the principle that an optimizer instance corresponds to a query block.&lt;/p&gt;

&lt;p&gt;b) It&apos;s inefficient.&lt;/p&gt;

&lt;p&gt;c) It&apos;s unnecessary because there is already a method on OptimizerFactory for creating an empty CostEstimate object.&lt;/p&gt;

&lt;p&gt;The fix to (2) is to make Optimizer.newCostEstimate() private, remove the pointless instantiations of new optimizers, and call OptimizerFactory.getCostEstimate() to make empty CostEstimates.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;

&lt;p&gt;Changes for (1).&lt;/p&gt;

&lt;p&gt;--------------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptimizerFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/compile/Optimizer.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DistinctNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/GroupByNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java&lt;/p&gt;

&lt;p&gt;Changes for (2).&lt;/p&gt;</comment>
                            <comment id="13727639" author="jira-bot" created="Fri, 2 Aug 2013 13:46:54 +0100"  >&lt;p&gt;Commit 1509671 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1509671&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1509671&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Don&apos;t instantiate new optimizers just to create empty CostEstimate objects; commit derby-6211-10-aa-makingCostEstimateObject.diff.&lt;/p&gt;</comment>
                            <comment id="13727688" author="rhillegas" created="Fri, 2 Aug 2013 14:58:53 +0100"  >&lt;p&gt;Attaching derby-6211-11-aa-moveTracerOutOfOptimizer.diff. This is a follow-on patch to the previous patch. This patch moves the tracer out of the optimizer to reduce the likelihood that someone will try to instantiate a new optimizer just to get the tracer. I am running tests now.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/Optimizable.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/compile/Optimizer.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/NestedLoopJoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/JoinNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/HashJoinStrategy.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;/p&gt;</comment>
                            <comment id="13727825" author="rhillegas" created="Fri, 2 Aug 2013 18:21:36 +0100"  >&lt;p&gt;Attaching second rev of patch, derby-6211-11-ab-moveTracerOutOfOptimizer.diff. This fixes a bug in the first rev which raised NPE in certain situations and hung the tests. I am re-running the tests now.&lt;/p&gt;

&lt;p&gt;Touches the same files as the previous rev.&lt;/p&gt;</comment>
                            <comment id="13727965" author="jira-bot" created="Fri, 2 Aug 2013 20:05:28 +0100"  >&lt;p&gt;Commit 1509815 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1509815&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1509815&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Move the tracer out of the optimizer; tests passed cleanly on derby-6211-11-ab-moveTracerOutOfOptimizer.diff.&lt;/p&gt;</comment>
                            <comment id="13731994" author="rhillegas" created="Wed, 7 Aug 2013 14:46:14 +0100"  >&lt;p&gt;Attaching derby-6211-12-aa-traceEndOfQueryBlock.diff. This patch makes a couple improvements to the xml-based optimizer tracing of outer join queries. Tests passed cleanly for me on this patch.&lt;/p&gt;

&lt;p&gt;The optimization of outer joins is interesting. In some cases, an outer join can be turned into an inner join and optimized as a single query block. However, in other cases, the tables in the outer join cannot be placed into a master join order with the other tables in the query. The following query behaves as an inner join because the compiler sees that the &quot;t3.c1 = t2.c1&quot; qualification will only be satisfied for rows in which t2 inner joined to t1 and therefore t2&apos;s columns are not null:&lt;/p&gt;

&lt;p&gt;a)&lt;br/&gt;
  select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t2.c1;&lt;/p&gt;

&lt;p&gt;However, the following query may qualify rows in which t2 outer joined to t1 and t2&apos;s columns are null. The following query cannot be turned into one big inner join:&lt;/p&gt;

&lt;p&gt;b)&lt;br/&gt;
  select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t1.c1;&lt;/p&gt;

&lt;p&gt;For query (b), the whole &quot;(t1 left outer join t2 on t1.c1 = t2.c1)&quot; clause is treated as a separate query block. The situation is actually even more complicated than that, and we&apos;ll get to that later. But at a high level, the optimizer starts out considering two join orders:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;t3, QueryBock2&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;QueryBlock2, t3&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;While evaluating these join orders, the optimizer recurses and optimizes QueryBlock2. As you can see, QueryBlock2 will be optimized twice.&lt;/p&gt;

&lt;p&gt;This situation broke xml-based optimizer tracing in several ways:&lt;/p&gt;

&lt;p&gt;1) The xml tracer died on an NPE when trying to represent the join order and give a compact name to QueryBlock2. The fix was to give QueryBlock2 a generic name, viz., the class name of the query tree node which sits on top of QueryBlock2.&lt;/p&gt;

&lt;p&gt;2) Once that bug was fixed, it became apparent that there was no marker for the end of the recursive optimization of QueryBlock2. This caused trace information to be added to the wrong query block. The fix was to add some recursion to the xml tracer and to add a new trace method which flags the end of an attempt to optimize a query block.&lt;/p&gt;

&lt;p&gt;3) Once that bug was fixed, another variant of problem (1) surfaced: an NPE was raised trying to give QueryBlock2 a compact name in the query plan summary. Again, that problem was fixed by using the class name of the query tree node which sits on top of QueryBlock2.&lt;/p&gt;

&lt;p&gt;As promised above, the situation is actually a bit more complicated. Remember that QueryBlock2 represents the following clause:&lt;/p&gt;

&lt;p&gt;  (t1 left outer join t2 on t1.c1 = t2.c1)&lt;/p&gt;

&lt;p&gt;The optimizer doesn&apos;t have many tricks for this outer join. It can&apos;t permute the join order. t1 must be outer to t2. So, the optimizer treats this clause as two separate query blocks and optimizes them separately. This happens because the HalfOuterJoinNode is really a TableOperatorNode, just like a UNION. Each branch of the HalfOuterJoinNode is treated as its own query block just as each branch of a UNION is treated as a separate, independent query block.&lt;/p&gt;

&lt;p&gt;I hope that this explanation makes it easier to interpret the results of the following script. You will notice two plans considered for query (b):&lt;/p&gt;

&lt;p&gt;( ProjectRestrictNode * &quot;APP&quot;.&quot;SQL130807054111430&quot; )&lt;/p&gt;

&lt;p&gt;( &quot;APP&quot;.&quot;67bb80b4-0140-58cb-8920-00000383a238&quot; * ProjectRestrictNode )&lt;/p&gt;

&lt;p&gt;Here&apos;s the script:&lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:memory:db;create=true&apos;;&lt;/p&gt;

&lt;p&gt;create table t1&lt;br/&gt;
(&lt;br/&gt;
  c1 int,&lt;br/&gt;
  c2 int,&lt;br/&gt;
  c3 int,&lt;br/&gt;
  constraint cons1 primary key(c1, c2)&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;create table t2&lt;br/&gt;
(&lt;br/&gt;
  c1 int not null,&lt;br/&gt;
  c2 int not null,&lt;br/&gt;
  c3 int,&lt;br/&gt;
  constraint cons2 unique(c1, c2)&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;create table t3&lt;br/&gt;
(&lt;br/&gt;
  c1 int,&lt;br/&gt;
  c2 int,&lt;br/&gt;
  c3 int,&lt;br/&gt;
  constraint cons3 primary key(c1, c2)&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;select cast( t.tablename as varchar(2)), c.conglomeratename&lt;br/&gt;
from sys.systables t, sys.sysconglomerates c&lt;br/&gt;
where t.tableid = c.tableid&lt;br/&gt;
and t.tabletype = &apos;T&apos;&lt;br/&gt;
order by t.tablename;&lt;/p&gt;

&lt;p&gt;--turn on xml-based optimizer tracing&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, true, &apos;xml&apos; );&lt;/p&gt;

&lt;p&gt;select * from t1 left outer join t2 on t1.c1 = t2.c1;&lt;/p&gt;

&lt;p&gt;select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t2.c1;&lt;/p&gt;

&lt;p&gt;select * from t3, (t1 left outer join t2 on t1.c1 = t2.c1) where t3.c1 = t1.c1;&lt;/p&gt;

&lt;p&gt;&amp;#8211; turn off optimizer tracing&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracing&apos;, false, &apos;optimizerTrace.xml&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; load the trace viewer&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracingViews&apos;, true, &apos;optimizerTrace.xml&apos; );&lt;/p&gt;

&lt;p&gt;&amp;#8211; view the costs of all complete plans&lt;br/&gt;
select stmtID, qbID, estimatedCost, summary from planCost&lt;br/&gt;
where complete&lt;br/&gt;
order by stmtID, qbID, estimatedCost&lt;br/&gt;
;&lt;/p&gt;

&lt;p&gt;&amp;#8211; unload the trace viewer&lt;br/&gt;
call syscs_util.syscs_register_tool( &apos;optimizerTracingViews&apos;, false );&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/XMLOptTrace.java&lt;/p&gt;

&lt;p&gt;Added recursive treatment of query blocks and fixed the NPEs.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptimizerPlan.java&lt;/p&gt;

&lt;p&gt;Added a new kind of node in the OptimizerPlan: DeadEnd. This is a node for cases when the xml tracer can&apos;t peer inside an Optimizable. For instance, when the Optimizable is another query block.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/sql/compile/OptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/DefaultOptTrace.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/OptimizerImpl.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DummyOptTrace.java&lt;/p&gt;

&lt;p&gt;Changed the name of the traceStart() method to traceStartQueryBlock(). Added a new traceEndQueryBlock() method.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java&lt;/p&gt;

&lt;p&gt;Adds a traceEndQueryBlock() call after a recursive optimization finishes.&lt;/p&gt;</comment>
                            <comment id="13731996" author="jira-bot" created="Wed, 7 Aug 2013 14:50:14 +0100"  >&lt;p&gt;Commit 1511315 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1511315&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1511315&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Trace the end of optimizing a query block so that the xml-based optimizer tracer can associate trace information with the correct query block; commits derby-6211-12-aa-traceEndOfQueryBlock.diff.&lt;/p&gt;</comment>
                            <comment id="13733854" author="rhillegas" created="Thu, 8 Aug 2013 20:10:09 +0100"  >&lt;p&gt;Attaching derby-6211-13-aa-SelectNode_optimizer.diff. This patch moves the getOptimizer() method out of ResultSetNode down into SelectNode, the only subclass which actually calls it. The optimizer creation in SelectNode is balanced by a call to traceEndQueryBlock() just as was done to TableOperatorNode in the previous patch. I am running tests now.&lt;/p&gt;

&lt;p&gt;At this point, the SelectNode and TableOperatorNode are the only nodes which create optimizers. This helps us reason about where optimizable query blocks occur and ensure that every optimizer creation is balanced with a call to traceEndQueryBlock() after join optimization via that optimizer is finished.&lt;/p&gt;

&lt;p&gt;I would like to be able to hide or throw away the OptimizerImpl after join optimization is done. But that is not possible right now. Before explaining why, let me first sketch my current understanding of the phases of optimization:&lt;/p&gt;

&lt;p&gt;1) Preprocessing. This is the phase in which the query is rewritten. Rewriting tasks include subquery flattening and putting predicates into conjunctive normal form.&lt;/p&gt;

&lt;p&gt;2) Join optimization. Most of what we describe as optimization happens in this phase. It is the phase which selects join orders, join strategies, and access paths.&lt;/p&gt;

&lt;p&gt;3) Projection and restriction. This is the phase in which predicates are pushed down as close to the row sources as possible. And rows are pruned back to the minimal number of columns needed by higher operators in the plan. The workhorses for this phase are the modifyAccessPath() methods. There is some other miscellaneous, mechanical processing in this phase related to the CostEstimates which were calculated during join optimization.&lt;/p&gt;

&lt;p&gt;OptimizerImpl is responsible for phases (2) and (3). When a ResultSetNode is join optimized, the OptimizerImpl is saved away in ResultSetNode.optimizer so that it can be dug up later to perform projection and restriction. The OptimizerImpl used for join optimization retains information which is needed for projection and restriction.&lt;/p&gt;

&lt;p&gt;I don&apos;t like the fact that the OptimizerImpl is stashed away. That makes it hard to reason about when join optimization is done. I hope that the traceEndQueryBlock() calls now mark the end of join optimization attempts. I would prefer to save just the projection/restriction and CostEstimate variables rather than the whole OptimizerImpl. But that&apos;s a rototill I don&apos;t want to embark on now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SelectNode.java&lt;/p&gt;

&lt;p&gt;Moves getOptimizer() down into SelectNode and adds a traceEndQueryBlock() call.&lt;/p&gt;

&lt;p&gt;-------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLOptimizerTraceTest.java&lt;/p&gt;

&lt;p&gt;Adds a test for xml-based optimizer tracing of outer joins.&lt;/p&gt;</comment>
                            <comment id="13733942" author="rhillegas" created="Thu, 8 Aug 2013 21:29:21 +0100"  >&lt;p&gt;Tests passed cleanly for me on derby-6211-13-aa-SelectNode_optimizer.diff.&lt;/p&gt;</comment>
                            <comment id="13734755" author="jira-bot" created="Fri, 9 Aug 2013 14:22:41 +0100"  >&lt;p&gt;Commit 1512294 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rhillegas&quot; class=&quot;user-hover&quot; rel=&quot;rhillegas&quot;&gt;Rick Hillegas&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1512294&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1512294&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6211&quot; title=&quot;Make Optimizer trace logic pluggable.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6211&quot;&gt;&lt;del&gt;DERBY-6211&lt;/del&gt;&lt;/a&gt;: Mark the end of join optimization with a call to traceEndQueryBlock(); commit derby-6211-13-aa-SelectNode_optimizer.diff.&lt;/p&gt;</comment>
                            <comment id="13922472" author="knutanders" created="Thu, 6 Mar 2014 13:08:40 +0000"  >&lt;p&gt;Is there more work planned on this issue, or can it be resolved?&lt;/p&gt;</comment>
                            <comment id="13922478" author="rhillegas" created="Thu, 6 Mar 2014 13:15:47 +0000"  >&lt;p&gt;Thanks for the nudge, Knut. Additional work in this area can happen on other JIRAs. Resolving.&lt;/p&gt;</comment>
                            <comment id="14009999" author="rhillegas" created="Tue, 27 May 2014 19:00:51 +0100"  >&lt;p&gt;Optimizer tracing is now an optional tool. Enabling old-style optimizer tracing is described here: &lt;a href=&quot;http://wiki.apache.org/db-derby/OptimizerTracing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/OptimizerTracing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enabling xml-style optimizer tracing is described here: &lt;a href=&quot;http://wiki.apache.org/db-derby/XmlOptimizerTracing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/XmlOptimizerTracing&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12653266">DERBY-6267</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12327886">DERBY-837</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12624875">DERBY-6022</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12581397" name="derby-6211-01-aa-createPlugin.diff" size="76016" author="rhillegas" created="Wed, 1 May 2013 20:06:42 +0100"/>
                            <attachment id="12581699" name="derby-6211-02-aa-cleanup.diff" size="28417" author="rhillegas" created="Fri, 3 May 2013 16:39:56 +0100"/>
                            <attachment id="12581715" name="derby-6211-02-ab-cleanup.diff" size="28416" author="rhillegas" created="Fri, 3 May 2013 18:16:25 +0100"/>
                            <attachment id="12581798" name="derby-6211-03-aa-customTracer.diff" size="17206" author="rhillegas" created="Sat, 4 May 2013 19:22:25 +0100"/>
                            <attachment id="12581893" name="derby-6211-04-aa-moveOptimizerTracerToEngineJar.diff" size="15382" author="rhillegas" created="Mon, 6 May 2013 15:54:23 +0100"/>
                            <attachment id="12587253" name="derby-6211-05-aa-xmlOptimizerTracer.diff" size="47476" author="rhillegas" created="Tue, 11 Jun 2013 17:46:51 +0100"/>
                            <attachment id="12587485" name="derby-6211-06-ab-packageProtect-XMLOptTrace.diff" size="576" author="rhillegas" created="Wed, 12 Jun 2013 20:08:12 +0100"/>
                            <attachment id="12588663" name="derby-6211-07-aa-useSchemaQualifiedNamesInSummaries.diff" size="10128" author="rhillegas" created="Wed, 19 Jun 2013 20:06:12 +0100"/>
                            <attachment id="12588838" name="derby-6211-07-ab-useSchemaQualifiedNamesInSummaries.diff" size="10129" author="rhillegas" created="Thu, 20 Jun 2013 13:28:40 +0100"/>
                            <attachment id="12589956" name="derby-6211-08-aa-fixNPE.diff" size="2051" author="rhillegas" created="Thu, 27 Jun 2013 20:55:36 +0100"/>
                            <attachment id="12591009" name="derby-6211-09-aa-addTests.diff" size="36117" author="rhillegas" created="Fri, 5 Jul 2013 15:55:08 +0100"/>
                            <attachment id="12595599" name="derby-6211-10-aa-makingCostEstimateObject.diff" size="11771" author="rhillegas" created="Fri, 2 Aug 2013 13:42:51 +0100"/>
                            <attachment id="12595612" name="derby-6211-11-aa-moveTracerOutOfOptimizer.diff" size="18570" author="rhillegas" created="Fri, 2 Aug 2013 14:58:53 +0100"/>
                            <attachment id="12595631" name="derby-6211-11-ab-moveTracerOutOfOptimizer.diff" size="18597" author="rhillegas" created="Fri, 2 Aug 2013 18:21:36 +0100"/>
                            <attachment id="12596623" name="derby-6211-12-aa-traceEndOfQueryBlock.diff" size="24036" author="rhillegas" created="Wed, 7 Aug 2013 14:46:14 +0100"/>
                            <attachment id="12596907" name="derby-6211-13-aa-SelectNode_optimizer.diff" size="7647" author="rhillegas" created="Thu, 8 Aug 2013 20:10:09 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 1 May 2013 20:37:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>326038</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hze3kn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>326383</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>