<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:50:14 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2936/DERBY-2936.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2936] Use java.nio.ByteBuffer for buffering in DDMWriter</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2936</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;org.apache.derby.impl.drda.DDMWriter uses a byte array as a buffer. Wrapping the array in a java.nio.ByteBuffer has some advantages, for instance:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;utility methods for encoding primitive types into the byte array could be used instead of manually encoding the values&lt;/li&gt;
	&lt;li&gt;it allows us to encode strings directly into the buffer (using a CharsetEncoder) without doing an expensive String.getBytes(String encoding) in an intermediate step&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By using a utility class, the code becomes easier to maintain. Also, ByteBuffer allows us to access the backing byte array without going through the ByteBuffer interface, so we still have the possibility to modify the byte array directly in cases where that&apos;s more convenient.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12373752">DERBY-2936</key>
            <summary>Use java.nio.ByteBuffer for buffering in DDMWriter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Jul 2007 13:25:58 +0100</created>
                <updated>Thu, 14 Jul 2011 10:09:26 +0100</updated>
                            <resolved>Sat, 25 Aug 2007 13:56:29 +0100</resolved>
                                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12512469" author="knutanders" created="Fri, 13 Jul 2007 13:57:35 +0100"  >&lt;p&gt;Attaching a patch which adds a ByteBuffer field which wraps the byte array (the byte array is still a field). Also removed the offset variable, since the byte buffer maintains a position variable. DDMWriter now uses ByteBuffer&apos;s utility methods for encoding primitive types, but it still uses String.getBytes() to encode strings. I plan to change the string encoding methods later.&lt;/p&gt;

&lt;p&gt;The patch also fixes a bug where writeBigDecimal() called ensureLength() with offset+length as argument, instead of length as it should. Derbyall and suites.All ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12512914" author="knutanders" created="Mon, 16 Jul 2007 12:06:03 +0100"  >&lt;p&gt;Committed revision 556583.&lt;/p&gt;</comment>
                            <comment id="12512954" author="bryanpendleton" created="Mon, 16 Jul 2007 15:33:00 +0100"  >&lt;p&gt;I noticed the patch has changes such as this:&lt;/p&gt;

&lt;p&gt; 		ensureLength (1);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;offset++&amp;#93;&lt;/span&gt; = (byte) (value &amp;amp; 0xff);&lt;br/&gt;
+		buffer.put((byte) value);&lt;br/&gt;
 	}&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;@@ -485,9 +496,7 @@&lt;br/&gt;
 	protected void writeNetworkShort (int value)&lt;br/&gt;
 	{&lt;br/&gt;
 		ensureLength (2);&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;offset&amp;#93;&lt;/span&gt; = (byte) ((value &amp;gt;&amp;gt;&amp;gt; 8) &amp;amp; 0xff);&lt;/li&gt;
	&lt;li&gt;bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;offset + 1&amp;#93;&lt;/span&gt; = (byte) (value &amp;amp; 0xff);&lt;/li&gt;
	&lt;li&gt;offset += 2;&lt;br/&gt;
+		buffer.putShort((short) value);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The new code is certainly simpler and clearer, which is great!&lt;/p&gt;

&lt;p&gt;But why is it that we no longer need to do the masking and shifting?&lt;/p&gt;

&lt;p&gt;Is this something that the ByteBuffer methods do for us automatically?&lt;/p&gt;</comment>
                            <comment id="12513001" author="knutanders" created="Mon, 16 Jul 2007 20:22:03 +0100"  >&lt;p&gt;Thanks for looking at the patch, Bryan!&lt;/p&gt;

&lt;p&gt;Yes, the ByteBuffer methods do the masking and shifting automatically for us.&lt;/p&gt;

&lt;p&gt;In the first diff, &quot;(byte) (value &amp;amp; 0xff)&quot; is actually identical to &quot;(byte) value&quot; since &amp;amp; 0xff masks away all but the eight least significant bits and the cast to byte only looks at the eight least significant bits, which were not affected by the mask, so the masking was not required in the first place.&lt;/p&gt;

&lt;p&gt;In the second diff, the original code manually encoded an int as a two-byte big-endian byte sequence (and I think the same argument about masking goes for this code). ByteBuffer can read/write both big-endian byte order and little-endian byte order; the default is big-endian. So if you pass in an int consisting of the following bits: xxxxxxxxyyyyyyyyzzzzzzzzwwwwwwww, the old code would do&lt;/p&gt;

&lt;p&gt;  1. right shift (without preserving sign bit) so that the int becomes 00000000xxxxxxxxyyyyyyyyzzzzzzzz&lt;br/&gt;
  2. mask away three most significant bytes from (1), which gives this int: 000000000000000000000000zzzzzzzz&lt;br/&gt;
  3. store the eight least significant bits (zzzzzzzz) in bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;offset&amp;#93;&lt;/span&gt;&lt;br/&gt;
  4. mask away the 3 most significant bytes from the original int: 0000000000000000000000000wwwwwwww&lt;br/&gt;
  5. store the least significant byte of (4) in bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;offset+1&amp;#93;&lt;/span&gt;: wwwwwwww&lt;/p&gt;

&lt;p&gt;The new code does this:&lt;/p&gt;

&lt;p&gt;  1. cast original int to short, discarding the two most significant bytes. Bit pattern for the short: zzzzzzzzwwwwwwww&lt;br/&gt;
  2. store the short in two bytes, big-endian byte order, that is&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;first byte: zzzzzzzz&lt;/li&gt;
	&lt;li&gt;second byte: wwwwwwww&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Note that it&apos;s the bit patterns of the ints/shorts/bytes that are interesting, not the actual values of the bytes. So it&apos;s perfectly fine to encode a positive int as two negative byte values.&lt;/p&gt;

&lt;p&gt;If we decode the values with a ByteBuffer (that would be in DDMReader) we might have to do some masking, depending on whether we see them as signed or unsigned shorts. Since a Java short is signed, the code for reading an unsigned short from a byte buffer would look like this:&lt;/p&gt;

&lt;p&gt;  int ushort = 0xffff &amp;amp; buffer.getShort();&lt;/p&gt;</comment>
                            <comment id="12513504" author="knutanders" created="Wed, 18 Jul 2007 10:40:52 +0100"  >&lt;p&gt;Attaching a patch which removes the use of String.getBytes(String) in DDMWriter. It does the following:&lt;/p&gt;

&lt;p&gt;  1) Removes an unused constructor and an unused writeString() method so that they don&apos;t have to be updated with duplicated and unused code.&lt;br/&gt;
  2) Adds a CharsetEncoder object for the default encoding to the DDMWriters. (I made the encoder replace unmappable characters with the default replacement character. It is undefined what String.getBytes(String) does with such characters, so this might or might not match the old behaviour depending on the JVM, but the new implementation will at least have a clearly defined behaviour across different JVMs.)&lt;br/&gt;
  3) Changes writeString() and writeLDString() so that they encode the strings directly into the output buffer (using the CharsetEncoder object) instead of encoding it into a new temporary byte array before copying it to the output buffer.&lt;br/&gt;
  4) Removes constants and helper methods used for truncating the byte sequence on a character boundary in writeLDString() since CharsetEncoder automatically truncates it correctly.&lt;/p&gt;

&lt;p&gt;Derbyall and suites.All ran cleanly.&lt;/p&gt;</comment>
                            <comment id="12513833" author="knutanders" created="Thu, 19 Jul 2007 08:11:49 +0100"  >&lt;p&gt;Committed revision 557506.&lt;/p&gt;</comment>
                            <comment id="12515029" author="djd" created="Tue, 24 Jul 2007 18:00:53 +0100"  >&lt;p&gt;In DDMWriter is there a good reason to keep the byte[] bytes field?&lt;/p&gt;

&lt;p&gt;It&apos;s basically a bug waiting to happen, for bytes and buffer to get out of sync. I had to waste time going through the code to ensure that they currently are kept in sync.&lt;/p&gt;

&lt;p&gt;Why not just use buffer.array() anytime direct access to the array is required. Then it&apos;s clearly visible in the method that they will be in sync.&lt;/p&gt;</comment>
                            <comment id="12516244" author="knutanders" created="Sun, 29 Jul 2007 20:56:05 +0100"  >&lt;p&gt;I agree, the bytes field should be removed. Reopening the issue to fix it.&lt;/p&gt;</comment>
                            <comment id="12520965" author="knutanders" created="Sun, 19 Aug 2007 17:41:22 +0100"  >&lt;p&gt;Attaching a partial patch (derby-2936-3) which removes some uses of the bytes field.&lt;/p&gt;

&lt;p&gt;Description of the patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;replaces all occurrences of bytes&lt;span class=&quot;error&quot;&gt;&amp;#91;xxx&amp;#93;&lt;/span&gt; with absolute buffer.get/put methods&lt;/li&gt;
	&lt;li&gt;replaces calls to Arrays.fill() + buffer.position() with calls to the existing padBytes() method&lt;/li&gt;
	&lt;li&gt;makes CcsidManager.convertFromUCS2() take a ByteBuffer instead of byte array + offset&lt;/li&gt;
	&lt;li&gt;removes the original writeBigDecimal() method and renames bigDecimalToPackedDecimalBytes() to writeBigDecimal()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Derbyall and suites.All ran cleanly (except a known, intermittent failure in ProcedureInTriggerTest).&lt;/p&gt;</comment>
                            <comment id="12521371" author="knutanders" created="Tue, 21 Aug 2007 10:33:28 +0100"  >&lt;p&gt;Committed revision 568039.&lt;/p&gt;</comment>
                            <comment id="12522406" author="knutanders" created="Fri, 24 Aug 2007 08:33:16 +0100"  >&lt;p&gt;Attaching a patch (derby-2936-4) which removes the DDMWriter.bytes field entirely. This patch&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removes the field &quot;bytes&quot;&lt;/li&gt;
	&lt;li&gt;updates comments which contain references to the old field&lt;/li&gt;
	&lt;li&gt;makes endDdm() use ByteBuffer.put(byte[],int,int) instead of System.arraycopy()&lt;/li&gt;
	&lt;li&gt;makes writeScalarStream() use buffer.array() instead of the old field&lt;/li&gt;
	&lt;li&gt;removes unused variables and narrows the scope of others in writeScalarStream()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Derbyall and suites.All ran cleanly.&lt;/p&gt;</comment>
                            <comment id="12522745" author="knutanders" created="Sat, 25 Aug 2007 13:56:29 +0100"  >&lt;p&gt;Committed derby-2936-4.diff with revision 569661.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12514035">DERBY-5331</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12505773">DERBY-5210</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12361782" name="d2936-1.diff" size="21018" author="knutanders" created="Fri, 13 Jul 2007 13:57:35 +0100"/>
                            <attachment id="12362047" name="derby-2936-2.diff" size="8750" author="knutanders" created="Wed, 18 Jul 2007 10:40:52 +0100"/>
                            <attachment id="12362048" name="derby-2936-2.stat" size="133" author="knutanders" created="Wed, 18 Jul 2007 10:40:52 +0100"/>
                            <attachment id="12364106" name="derby-2936-3.diff" size="18010" author="knutanders" created="Sun, 19 Aug 2007 17:41:22 +0100"/>
                            <attachment id="12364107" name="derby-2936-3.stat" size="248" author="knutanders" created="Sun, 19 Aug 2007 17:41:22 +0100"/>
                            <attachment id="12364483" name="derby-2936-4.diff" size="4871" author="knutanders" created="Fri, 24 Aug 2007 08:33:16 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 16 Jul 2007 14:33:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30665</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0fon:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36359</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>