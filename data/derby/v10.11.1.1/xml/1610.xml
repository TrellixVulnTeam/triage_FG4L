<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:39:46 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1610/DERBY-1610.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1610] Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1610</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;There exists difference of type compatibility between  Embedded and NetworkServer/NetworkClient.&lt;br/&gt;
This issue tries to resolve it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12346905">DERBY-1610</key>
            <summary>Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="naka">Tomohito Nakayama</assignee>
                                    <reporter username="naka">Tomohito Nakayama</reporter>
                        <labels>
                    </labels>
                <created>Sun, 30 Jul 2006 08:22:15 +0100</created>
                <updated>Fri, 21 Jan 2011 17:49:07 +0000</updated>
                            <resolved>Sun, 27 May 2007 04:49:15 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Client</component>
                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12424362" author="naka" created="Sun, 30 Jul 2006 08:26:44 +0100"  >&lt;p&gt;Result of the execution is as next :&lt;/p&gt;

&lt;p&gt;In the case of Network Client/Server :&lt;br/&gt;
naka@rufelza:~/derby/test/20060730$ java TestNullChar&lt;br/&gt;
streamAsNull:&lt;br/&gt;
null&lt;br/&gt;
setNull:&lt;br/&gt;
null&lt;/p&gt;

&lt;p&gt;In the case of Engine :&lt;br/&gt;
naka@rufelza:~/derby/test/20060730$ java TestNullChar embedded&lt;br/&gt;
streamAsNull:&lt;br/&gt;
java.sql.SQLException: An attempt was made to get a data value of type &apos;CHAR&apos; from a data value of type &apos;java.io.InputStream&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:44)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:180)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:1958)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:153)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.dataTypeConversion(EmbedPreparedStatement.java:1611)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBinaryStreamConditions(EmbedPreparedStatement.java:923)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStream(EmbedPreparedStatement.java:839)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStream(EmbedPreparedStatement.java:853)&lt;br/&gt;
	at TestNullChar.updateStreamAsNull(TestNullChar.java:118)&lt;br/&gt;
	at TestNullChar.main(TestNullChar.java:46)&lt;br/&gt;
java.sql.SQLException: Invalid cursor state - no current row.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:44)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:104)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:168)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:1952)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:147)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.checkOnRow(EmbedResultSet.java:325)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.getColumn(EmbedResultSet.java:4378)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.getString(EmbedResultSet.java:680)&lt;br/&gt;
	at TestNullChar.updateStreamAsNull(TestNullChar.java:139)&lt;br/&gt;
	at TestNullChar.main(TestNullChar.java:46)&lt;br/&gt;
setNull:&lt;br/&gt;
null&lt;/p&gt;</comment>
                            <comment id="12424366" author="naka" created="Sun, 30 Jul 2006 08:38:34 +0100"  >&lt;p&gt;Using jdb, I found that next code is executed at NetworkServer in both case of setBinaryStream method with null and setNull method.&lt;/p&gt;

&lt;p&gt;Step completed: &quot;thread=DRDAConnThread_3&quot;, org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA_work(), line=4,047 bci=722&lt;br/&gt;
4,047                                                                          ps.setNull(i+1, pmeta.getParameterType(i+1));&lt;/p&gt;

&lt;p&gt;I think current implementation of NetworkClient/NetworkServer handle them in same way both to call setBinaryStream method with null value and to call of setNull method.&lt;/p&gt;</comment>
                            <comment id="12424368" author="naka" created="Sun, 30 Jul 2006 08:50:21 +0100"  >&lt;p&gt;I think current behavior of Engine is reasonable.&lt;/p&gt;

&lt;p&gt;When setNull method was called, type information of the null value is specified.&lt;br/&gt;
Then, Engine can determine whether the type of null value is acceptable.&lt;/p&gt;

&lt;p&gt;On the other hand, when setBinaryStream method was called, type information of the null value is not specified.&lt;br/&gt;
Then Engine does not have any other way other than takeing the null value as incompatible type error.&lt;/p&gt;


&lt;p&gt;Now questionable part is implementation of NetworkClient/NetoworkServer around type of value, especially null value.&lt;br/&gt;
Current behavior looks like as if NetworkClient/NetworkServer ignore type of null value.&lt;/p&gt;</comment>
                            <comment id="12424892" author="naka" created="Tue, 1 Aug 2006 16:07:20 +0100"  >&lt;p&gt;I surveyed execution of Network Server with jdb when TestNullChar.java was executed.&lt;br/&gt;
In both of updateStreamAsNull and setNull, type information at server side was as next.&lt;/p&gt;

&lt;p&gt;DRDAConnThread_3&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; dump pmeta.types&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.typeId.baseTypeId&lt;br/&gt;
 pmeta.types&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.typeId.baseTypeId = &lt;/p&gt;
{
    SQLTypeName: &quot;CHAR&quot;
    JDBCTypeId: 1
    formatId: 17
    wrapperTypeFormatId: 5
}

&lt;p&gt;It is very questionable that type is regarded as char when InputStream was passed.&lt;/p&gt;</comment>
                            <comment id="12425235" author="naka" created="Wed, 2 Aug 2006 14:47:21 +0100"  >&lt;p&gt;Reading the code, it seems that NetworkServer recognize the type of the parameter, according to the SQL and not according to the method which passes the parameter value.&lt;/p&gt;

&lt;p&gt;SQL to be executed in the TestNullChar.java is as next and type of the parameter is recognized as CHAR.&lt;br/&gt;
INSERT INTO NULL_CHAR_TEST(CHAR_VALUE) VALUES&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Ground of my reading is that type data is retrieved from Statement and not from FDODSC of SQLDTA.&lt;/p&gt;</comment>
                            <comment id="12425527" author="naka" created="Thu, 3 Aug 2006 15:16:25 +0100"  >&lt;p&gt;I tried to guess type of java.sql.Type when value was null ,&lt;br/&gt;
from drdaType as the patch.&lt;/p&gt;

&lt;p&gt;As the result, the NetClientTest of  jdbcapi/parameterMapping.java was failed and got amount of difference.&lt;/p&gt;

&lt;p&gt;I think this difference is too large to accept.&lt;br/&gt;
Originally, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; was issue around setBinaryStream(null).&lt;/p&gt;

&lt;p&gt;Remembering the original problem, &lt;br/&gt;
it was more problematic point of this issue that setBinaryStream(null) to character colum was failed though setBinaryStream(notNull) to character column was successed, than difference between Engine and NetworkServer/NetworkEngine.&lt;/p&gt;
</comment>
                            <comment id="12429244" author="naka" created="Sun, 20 Aug 2006 05:40:02 +0100"  >&lt;p&gt;I updated description of this issue in order to make it easy to understand what is the problem.&lt;/p&gt;</comment>
                            <comment id="12429247" author="naka" created="Sun, 20 Aug 2006 06:20:44 +0100"  >&lt;p&gt;I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-160&quot; title=&quot;Foreign key constraint failure closes the cursors in embedded mode but not in Network Server mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-160&quot;&gt;DERBY-160&lt;/a&gt;_2.diff.&lt;br/&gt;
With this patch, errors happens in intended cases at jdbcapi/parameterMapping.java.&lt;br/&gt;
That difference of errors in parameterMapping.out is uploaded as parameterMapping.diff too.&lt;/p&gt;

&lt;p&gt;However, there remains concerning points in the error.&lt;/p&gt;

&lt;p&gt;In the case of batch processing, there found next exception like as next.&lt;br/&gt;
&amp;gt;   setNull with batching support(BLOB) SQLSTATE(XJ208): org.apache.derby.client.am.BatchUpdateException: Non-atomic batch failure.  The batch was submitted, but at least one exception occurred on an individual member of the batch. Use getNextException() to retrieve the exceptions for specific batched elements.&lt;br/&gt;
&amp;gt; SQLSTATE(22005): java.sql.SQLException: Error for batch element #0: An attempt was made to get a data value of type &apos;CLOB&apos; from a data value of type &apos;BLOB&apos;.&lt;/p&gt;

&lt;p&gt;I think these errors should be ignored in jdbcapi/parameterMapping.java ,but not sure yet.&lt;/p&gt;

&lt;p&gt;I will continue surveying about them.&lt;/p&gt;</comment>
                            <comment id="12429256" author="knutanders" created="Sun, 20 Aug 2006 10:45:25 +0100"  >&lt;p&gt;Hi Tomohito,&lt;/p&gt;

&lt;p&gt;The BatchUpdateException indicates that the error happens when executeBatch() is invoked, not when setXXX() or addBatch() is called. I think this is OK, but it would of course be better if the exception were raised in setXXX().&lt;/p&gt;

&lt;p&gt;If you want to ignore these errors in parameterMapping.java, you could wrap each call to executeBatch() like this:&lt;/p&gt;

&lt;p&gt;try &lt;/p&gt;
{
    psi.executeBatch();
}
&lt;p&gt; catch (BatchUpdateException bue) &lt;/p&gt;
{
    SQLException reason = bue.getNextException();
    throw (reason == null) ? bue : reason;
}

&lt;p&gt;Also, do you think a release note is needed for this issue? If I understand correctly, the client driver (and possibly JCC) will throw an exception in situations where they didn&apos;t throw an exception before.&lt;/p&gt;</comment>
                            <comment id="12429263" author="naka" created="Sun, 20 Aug 2006 15:12:35 +0100"  >&lt;p&gt;The mystery was the reason why test of setNull generats different error message than not null method in the test.&lt;/p&gt;

&lt;p&gt;I found that method  checkForInvalidConversion(SQLException sqle) was used in the test of setXXX and handles BatchUpdateException.&lt;/p&gt;

&lt;p&gt;This method was not used in the test of setNull, then BatchUpdateException was simply dumped.&lt;/p&gt;

&lt;p&gt;I think we should use the checkForInvalidConversion(SQLException sqle) method in the case of setNull also.&lt;br/&gt;
Then, this exception can be handled correctly in the test program.&lt;/p&gt;
</comment>
                            <comment id="12429265" author="naka" created="Sun, 20 Aug 2006 15:19:38 +0100"  >&lt;p&gt;I think release note should be prepared for this issue, &lt;br/&gt;
including difference originally introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is it sufficient to write at &lt;a href=&quot;http://wiki.apache.org/db-derby/TenTwoRelease?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/TenTwoRelease?&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12429275" author="knutanders" created="Sun, 20 Aug 2006 18:06:17 +0100"  >&lt;p&gt;Adding the Release Note Needed flag to keep it on the release manager&apos;s radar.&lt;/p&gt;</comment>
                            <comment id="12429278" author="knutanders" created="Sun, 20 Aug 2006 18:40:35 +0100"  >&lt;p&gt;With the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_2.diff patch, setBinaryStream(null), setBlob(null) and setNull(Types.BLOB) throw exception if they are called on a parameter of type CHAR, VARCHAR, LONGVARCHAR or CLOB. However, they can still be used to set parameters of other types (for instance SHORT, INTEGER, FLOAT, DOUBLE and TIMESTAMP) to null. I think it would be better and more consistent behaviour if all of these failed as well.&lt;/p&gt;

&lt;p&gt;In fact, all other setXXX methods can be used to set null values on parameters of all types. I find it a bit unintuitive that only the combinations mentioned above should raise exceptions. Is it possible to make the calcJdbcTypeForNullValue() more complete so that all setXXX(null) calls on parameters of incompatible type throw an exception?&lt;/p&gt;</comment>
                            <comment id="12429286" author="naka" created="Sun, 20 Aug 2006 19:56:55 +0100"  >&lt;p&gt;Technically, I think we can make the calcJdbcTypeForNullValue() &lt;b&gt;more complete&lt;/b&gt;. &lt;br/&gt;
However, I&apos;m not sure we should do it right now.&lt;/p&gt;

&lt;p&gt;At first, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; started from side effects of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;, improvement of streaming from client to server.&lt;br/&gt;
It was found this side effect of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; has meaning of partial fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt;. Then, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt; started.&lt;/p&gt;

&lt;p&gt;//Modification of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; will be overwrtten almostly by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
//However &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; has the same side effect as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;, because the code of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; passes InputStream object instead of byte array to the Engine as the code of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;Historically this issue had meaning of accepting side effect of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt; (and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;) as partial fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt;, at least in my true mind.&lt;/p&gt;

&lt;p&gt;However, if it comes to &lt;b&gt;complete&lt;/b&gt; fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt; around type compatibility, &lt;br/&gt;
I concern that throwing many new exceptions may cause large impact to the user, &lt;br/&gt;
even if it was the behavior in Embedded mode.&lt;/p&gt;

&lt;p&gt;If we aim &lt;b&gt;complete&lt;/b&gt; fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt; around type compatibility, &lt;br/&gt;
I think some more carefulness is needed, &lt;br/&gt;
because sphere to be influenced is pretty large if we aim &lt;b&gt;completion&lt;/b&gt; ...&lt;/p&gt;

&lt;p&gt;....Well.&lt;br/&gt;
I think we need to know what is the carefulness needed in this issue ....&lt;/p&gt;

&lt;p&gt;....Release note .....? may be .......&lt;/p&gt;</comment>
                            <comment id="12429368" author="knutanders" created="Mon, 21 Aug 2006 10:34:29 +0100"  >&lt;p&gt;There will be user impact even if only a few of the incompatible combinations are changed to throw exceptions. Therefore, I think that it is better to fix all of them at once. Fixing only a couple of them makes the current state of the code harder to understand. For instance, I don&apos;t understand why setBlob(null) should fail on a CHAR parameter, but succeed on a DOUBLE parameter.&lt;/p&gt;

&lt;p&gt;Also, I&apos;m not sure whether this type checking should happen on the server. Since the DRDA protocol doesn&apos;t preserve which JDBC method was used, and which arguments the user passed in, it might not always have enough information to decide what to do. Another problem with having the check on the server, is that old clients (or jcc clients) running against a new server will also get these new exceptions. Some people might call that a regression.&lt;/p&gt;

&lt;p&gt;If it is possible to get the type checks on the client instead of on the server, I would prefer that solution. If that is not possible, I think we should only make sure that all setXXX(null) calls work as before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;, and delay the change of behaviour until we have found a way to make all calls behave correctly.&lt;/p&gt;</comment>
                            <comment id="12429374" author="naka" created="Mon, 21 Aug 2006 11:09:04 +0100"  >&lt;p&gt;I see ....&lt;br/&gt;
I think opinion of Knut is proper.&lt;/p&gt;

&lt;p&gt;I will rollback &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, this task is regarded as blocking &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
We need to solve this issue before those issues.&lt;/p&gt;</comment>
                            <comment id="12429378" author="naka" created="Mon, 21 Aug 2006 11:31:54 +0100"  >&lt;p&gt;Because &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; passes InputStream to engine instead of byte[] as same as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1535&quot; title=&quot;Trial 2 for DERBY-550, improve use of Engine from NetworkServer and reduce memory usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1535&quot;&gt;&lt;del&gt;DERBY-1535&lt;/del&gt;&lt;/a&gt;, &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1559&quot; title=&quot;when receiving a single EXTDTA object representing a BLOB, the server do not need to read it into memory before inserting it into the DB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1559&quot;&gt;&lt;del&gt;DERBY-1559&lt;/del&gt;&lt;/a&gt; stands on precondition that the differences in compatibility of types caused by the patch are accepted.&lt;/p&gt;

&lt;p&gt;To accept the difference caused by the patch, cases of compatibility of types around difference caused by the patch should be resolved at once, in order to keep the integration in compatibility of type.&lt;/p&gt;</comment>
                            <comment id="12429387" author="naka" created="Mon, 21 Aug 2006 11:55:46 +0100"  >&lt;p&gt;I think we need to fix the range of modification.&lt;br/&gt;
My plan is making compatibility around setBlob(notNull/null) in NetworkServer/NetworkClient as same as that of Embedded.&lt;/p&gt;

&lt;p&gt;Please give your comment.&lt;/p&gt;</comment>
                            <comment id="12429390" author="naka" created="Mon, 21 Aug 2006 12:06:07 +0100"  >&lt;p&gt;I meant setBinaryStream(notNull/null) also ...&lt;/p&gt;</comment>
                            <comment id="12429416" author="naka" created="Mon, 21 Aug 2006 14:25:53 +0100"  >&lt;p&gt;By the way, is it really possible to judge the type checks on the client side ?&lt;/p&gt;

&lt;p&gt;There are only less information about table defiinition at client side.&lt;br/&gt;
Then I think we can&apos;t check completely at client side....&lt;/p&gt;

&lt;p&gt;I think information about method called at client side is sent to server in DRDA protocol.&lt;br/&gt;
Of cource , method information itself cannot be passed directly in DRDA protocol, &lt;br/&gt;
then it must be sent in different semantics, such as type of value.&lt;/p&gt;</comment>
                            <comment id="12429424" author="knutanders" created="Mon, 21 Aug 2006 15:20:51 +0100"  >&lt;p&gt;Yes, I think you can decide the correct type on the client side. ParameterMetaData (which can be obtained through PreparedStatement.getParameterMetaData()) contains this information.&lt;/p&gt;

&lt;p&gt;To test, I created a prepared statement with&lt;/p&gt;

&lt;p&gt;        String sql = &quot;VALUES (&quot; +&lt;br/&gt;
            &quot;CAST (? AS SMALLINT),&quot; +&lt;br/&gt;
            &quot;CAST (? AS INTEGER),&quot; +&lt;br/&gt;
            &quot;CAST (? AS BIGINT),&quot; +&lt;br/&gt;
            &quot;CAST (? AS VARCHAR(128)),&quot; +&lt;br/&gt;
            &quot;CAST (? AS CLOB),&quot; +&lt;br/&gt;
            &quot;CAST (? AS BLOB),&quot; +&lt;br/&gt;
            &quot;CAST (? AS TIMESTAMP))&quot;;&lt;br/&gt;
        PreparedStatement ps = c.prepareStatement(sql);&lt;/p&gt;

&lt;p&gt;I was able to retrieve the correct parameter types with ParameterMetaData.getParameterType() and ParameterMetaData.getParameterTypeName().&lt;/p&gt;</comment>
                            <comment id="12429425" author="naka" created="Mon, 21 Aug 2006 15:28:50 +0100"  >&lt;p&gt;Regarding check on the client side, I found description of PRPSQLSTT in the spec of drda.&lt;br/&gt;
It seems that information for parameter seems to be handled in TYPDEFOVR/TYPDEFNAM.&lt;/p&gt;

&lt;p&gt;It may be possible to check type at client side in drda. &lt;/p&gt;

&lt;p&gt;However not clear about currrent implementation of ClientDriver yet ...&lt;/p&gt;</comment>
                            <comment id="12429427" author="naka" created="Mon, 21 Aug 2006 15:33:45 +0100"  >&lt;p&gt;Oh...&lt;br/&gt;
Our comments were conflicted &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I see.&lt;br/&gt;
Anyway it seems that I need to work on current implementation of NetworkClient.&lt;/p&gt;

&lt;p&gt;I will try. &lt;/p&gt;</comment>
                            <comment id="12429998" author="naka" created="Wed, 23 Aug 2006 14:20:18 +0100"  >&lt;p&gt;I read the test class, parameterMapping.java as next.&lt;/p&gt;

&lt;p&gt;This test is executed for each types on which column of table was created.&lt;br/&gt;
Test items executed for each types is as next.&lt;/p&gt;

&lt;p&gt;1. Test of getXXX method for  null value&lt;br/&gt;
    setNull is executed as type of column. &lt;br/&gt;
    And then test getting from created record in this testing item as each of all types which was prepared in get methods of ResultSet.&lt;/p&gt;

&lt;p&gt;2. Test of getXXX method for none null value&lt;br/&gt;
    Correspoindng set method of PreparedStatement for type of column is executed. &lt;br/&gt;
    And then test getting from created record in this testing item as each of all types which was prepared in get methods of ResultSet.&lt;/p&gt;

&lt;p&gt;3. Test of setNull method&lt;br/&gt;
     This test item is executed for each of all types (including illegal type which is illegal type value in JDBC).&lt;br/&gt;
     Here, call it as the type of this test item group.&lt;br/&gt;
3-1. setNull is executed as the type of this test item group. &lt;br/&gt;
        And then test getting from created record in this testing item as type of this test item group.&lt;br/&gt;
3-2. setNull is executed as the type of this test item group.  And addBatch is executed.&lt;br/&gt;
        And then test getting from created record in this testing item as type of this test item group.&lt;/p&gt;

&lt;p&gt;4 Test of setXXX method&lt;br/&gt;
   This test item is executed for each of all types which was provided as set method of PreparedStatement.&lt;br/&gt;
   Here, call it as the type of this test item group.&lt;br/&gt;
4-1. Set method of the type of this test item group and executeUpdae is executed.&lt;br/&gt;
        And then test getting from created record in this testing item as type of column.&lt;br/&gt;
        Furthermore tries to set null value using setXXX method if possible in that type.&lt;br/&gt;
4-2. Set method of the type of this test item group and executeUpdae is executed. And addBatch is executed.&lt;br/&gt;
        And then test getting from created record in this testing item as type of column.&lt;br/&gt;
        Furthermore tries to set null value using setXXX method if possible in that type.&lt;/p&gt;

&lt;p&gt;5 Test of stored procedure&lt;br/&gt;
   This test item is for stored procedure. In this test, actual column of table created is not used. But test is done for the type of column as same as 1-4.   &lt;br/&gt;
5-1 Stored procedure which have IN INOUT OUT parameters which have type of column is created.&lt;br/&gt;
5-2 This test item is executed for all of types.&lt;br/&gt;
       Here call it as the type of this test item group.&lt;br/&gt;
5-2-1 INOUT parameter is registered by registerOutParameter as the type of this test item group.&lt;br/&gt;
5-2-2 OUT parameter is registered by registerOutParameter as the type of this test item gorup.&lt;br/&gt;
5-2-3 IN parameter is set as type of column.&lt;br/&gt;
5-2-4 Stored procedure is executed.&lt;br/&gt;
5-2-5 OUT parameter and INOUT parameter is retrieved as  the type of this test item gorup.&lt;/p&gt;</comment>
                            <comment id="12430700" author="naka" created="Sat, 26 Aug 2006 06:28:01 +0100"  >&lt;p&gt;I tried to read difference of parameterMapping between Embedded and NetworkServer/NetworkClient, which is uploaded as parameterMapping.diff.betweenEmbedded_and_NetworkServerNetworkClient.&lt;/p&gt;

&lt;p&gt;Nexts are the result which I could understand.&lt;/p&gt;

&lt;p&gt;1) Difference around null.&lt;br/&gt;
 Embedded regards null as different type as imcompatible in many combinations between types while&lt;br/&gt;
NetworkServer/NetworkClient regards null as different type in almost all combinations between types.&lt;br/&gt;
This problem seems to exists in both setNull and passing null via setXXXX. &lt;/p&gt;

&lt;p&gt;2) Difference whether set method of BinaryStream/Blob/Clob is accepted to CHAR/VARCHAR/LONG VARCHAR or not.&lt;br/&gt;
set method of BinaryStream/Blob/Clob is accepted to CHAR/VARCHAR/LONG VARCHAR typed variable in NetworkServer/NetworkClient &lt;br/&gt;
while it is not accepted in Embedded.&lt;/p&gt;

&lt;p&gt;3) Difference whether setCharacterStream/setCLob for numeric type is accepted or not.&lt;br/&gt;
Embedded refuse and NetworkServer/NetworkClient accept.&lt;br/&gt;
it may be true only when the value can be interpreted as numeric.&lt;br/&gt;
Furthermore this may be true in DATE/TIME/DATETIME also if format of value is possible to interpret those types.&lt;/p&gt;

&lt;p&gt;4) Execution of test for storedProcedure&lt;br/&gt;
storedProcedure is not tested in NetworkServer/NetworkClient case.&lt;/p&gt;

&lt;p&gt;5) Execution of test for setObject(Blob/Clob)&lt;br/&gt;
setObject(Blob/Clob) is note tested in NetworkServer/NetworkClient case.&lt;/p&gt;

&lt;p&gt;------------------------------------------------&lt;br/&gt;
What I couln&apos;t understand.&lt;br/&gt;
I found questionable message of &quot;SPECIFIC CHECK OK&quot; was in some test items of NetworkServer/NetworkClient case.&lt;br/&gt;
I could not understand what this message stands for .... &lt;br/&gt;
Reading the code, it seems that those test items is skipped with this message in some condition, but not sure.&lt;/p&gt;</comment>
                            <comment id="12430701" author="naka" created="Sat, 26 Aug 2006 06:33:37 +0100"  >&lt;p&gt;I&apos;m thinking to solve each those problem 1) to 5).&lt;br/&gt;
(May be more problem will be found in regards with what I couldn&apos;t understand...)&lt;/p&gt;

&lt;p&gt;In concern with blocking improvement of streaming,&lt;br/&gt;
I think 2) should be the first to be solved....&lt;/p&gt;</comment>
                            <comment id="12430702" author="naka" created="Sat, 26 Aug 2006 06:52:37 +0100"  >&lt;p&gt;I correct description of 1)...&lt;/p&gt;

&lt;p&gt;1) Difference around null.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Embedded regards null as different type as imcompatible in many combinations between types while&lt;br/&gt;
-NetworkServer/NetworkClient regards null as different type in almost all combinations between types.&lt;br/&gt;
+Embedded regards null value typed in different type as imcompatible in many combinations between types while&lt;br/&gt;
+NetworkServer/NetworkClient regards them compatible in almost all combinations between types.&lt;br/&gt;
This problem seems to exists in both setNull and passing null via setXXXX. &lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12430818" author="naka" created="Sun, 27 Aug 2006 04:24:35 +0100"  >&lt;p&gt;I update this issue more general.&lt;/p&gt;</comment>
                            <comment id="12431576" author="naka" created="Wed, 30 Aug 2006 13:55:17 +0100"  >&lt;p&gt;Reading the org.apache.derby.client.am.PreparedStatement,&lt;br/&gt;
I think each set&amp;lt;type name&amp;gt; and setNull method should have type checking implementation. &lt;/p&gt;

&lt;p&gt;It will resolve problem of 1) and 2) and 3). &lt;/p&gt;</comment>
                            <comment id="12432531" author="naka" created="Mon, 4 Sep 2006 18:41:36 +0100"  >&lt;p&gt;Now, I&apos;m adding type checking code to org.apache.derby.client.am.PreparedStatement, &lt;br/&gt;
and found what is questionable in test of setNull method.&lt;/p&gt;

&lt;p&gt;Reading the jdbcapi/parameterMapping.java, &lt;br/&gt;
it seems that only exception of &quot;22005&quot; is regarded as expected exception in test of setNull method.&lt;/p&gt;

&lt;p&gt;Next is the code of that:&lt;/p&gt;

&lt;p&gt;org.apache.derbyTesting.functionTests.tests.jdbcapi.parameterMapping :&lt;br/&gt;
				 // NOW THE SET METHODS&lt;br/&gt;
				 System.out.println(&quot;setNull() with all JDBC Types on &quot; + SQLTypes&lt;span class=&quot;error&quot;&gt;&amp;#91;type&amp;#93;&lt;/span&gt;);&lt;br/&gt;
				 for (int st = 0; st &amp;lt;= jdbcTypes.length + 1; st++) {&lt;/p&gt;

&lt;p&gt;					if (st &amp;gt;= jdbcTypes.length || jdbcTypes&lt;span class=&quot;error&quot;&gt;&amp;#91;st&amp;#93;&lt;/span&gt; != Types.NULL)&lt;br/&gt;
					{&lt;br/&gt;
						// explictily test Types.NULL.&lt;br/&gt;
						 int sqlTypeNull;&lt;br/&gt;
						 if (st == jdbcTypes.length + 1)&lt;br/&gt;
							sqlTypeNull = 235350345; // bad value&lt;br/&gt;
						 else if (st == jdbcTypes.length)&lt;br/&gt;
							 sqlTypeNull = Types.NULL;&lt;br/&gt;
						 else&lt;br/&gt;
							sqlTypeNull = jdbcTypes&lt;span class=&quot;error&quot;&gt;&amp;#91;st&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;						s.execute(&quot;DELETE FROM PM.TYPE_AS&quot;);&lt;/p&gt;

&lt;p&gt;						SQLException sqleResult = null;&lt;br/&gt;
						try &lt;/p&gt;
{
							System.out.print(&quot;  setNull(&quot; + TestUtil.sqlNameFromJdbc(sqlTypeNull) + &quot;) &quot;);
							psi.setNull(1, sqlTypeNull);
							psi.executeUpdate();

							getValidValue(psq, jdbcTypes[type]); // yes type, not st

							System.out.println(&quot;&quot;);

						}
&lt;p&gt; catch (SQLException sqle) &lt;/p&gt;
{
							sqleResult = sqle;
							if (&quot;22005&quot;.equals(sqle.getSQLState()))
								System.out.println(&quot;IC&quot;);
							else
								dumpSQLExceptions(sqle);

						}

&lt;p&gt;The error of 22005 was found in SQLState as next.&lt;br/&gt;
	String LANG_DATA_TYPE_GET_MISMATCH                                 = &quot;22005&quot;; // same 22005 error&lt;/p&gt;

&lt;p&gt;The name of this variable told that this exception is thrown from get method.&lt;/p&gt;

&lt;p&gt;However, this part of the test is setNull test and not test of get method.&lt;br/&gt;
Is it mean that setNull method does not throw any exception caused by incompatible type ?&lt;/p&gt;

&lt;p&gt;//Well... reading &lt;a href=&quot;http://db.apache.org/derby/docs/dev/ref/rrefsqlj19433.html#rrefsqlj19433__sqlj18370&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/ref/rrefsqlj19433.html#rrefsqlj19433__sqlj18370&lt;/a&gt;, &lt;br/&gt;
//it is told that NULL is an untyped constant representing the unknown value.&lt;br/&gt;
//Then, it may be natural consequence setNull method does not throw any exception for  incompatible type...&lt;/p&gt;</comment>
                            <comment id="12432568" author="knutanders" created="Tue, 5 Sep 2006 06:16:53 +0100"  >&lt;p&gt;LANG_DATA_TYPE_GET_MISMATCH is not the only exception with SQLState 22005. From SQLState.java:&lt;/p&gt;

&lt;p&gt;	String LANG_DATA_TYPE_GET_MISMATCH                                 = &quot;22005&quot;; // same 22005 error&lt;br/&gt;
    String UNSUPPORTED_ENCODING                                        = &quot;22005.S.1&quot;;&lt;br/&gt;
    String CHARACTER_CONVERTER_NOT_AVAILABLE                           = &quot;22005.S.2&quot;;&lt;br/&gt;
    String CANT_CONVERT_UNICODE_TO_EBCDIC                              = &quot;22005.S.3&quot;;&lt;br/&gt;
    String NET_UNRECOGNIZED_JDBC_TYPE                                  = &quot;22005.S.4&quot;;&lt;br/&gt;
    String NET_INVALID_JDBC_TYPE_FOR_PARAM                             = &quot;22005.S.5&quot;;&lt;br/&gt;
    String UNRECOGNIZED_JAVA_SQL_TYPE                                  = &quot;22005.S.6&quot;;&lt;/p&gt;

&lt;p&gt;&quot;.S.X&quot; is only used internally and not part of the SQL state, so all of these have SQL state 22005.&lt;/p&gt;

&lt;p&gt;EmbedPreparedStatement.setNull() calls EmbedPreparedStatement.dataTypeConversion() to generate a data conversion exception. In fact, dataTypeConversion() uses SQLState.LANG_DATA_TYPE_GET_MISMATCH. This means the error message is inaccurate for the setters (An attempt was made to get a data value of type &apos;&apos;&lt;/p&gt;
{0}
&lt;p&gt;&apos;&apos; from a data value of type &apos;&apos;&lt;/p&gt;
{1}
&lt;p&gt;&apos;&apos;.), but the SQL state is correct.&lt;/p&gt;</comment>
                            <comment id="12433144" author="naka" created="Thu, 7 Sep 2006 16:17:14 +0100"  >&lt;p&gt;I added type compatibility checking code to PreparedStatement class.&lt;/p&gt;

&lt;p&gt;The parameterMapping_3.diff is the difference between Embedded and NetServer/NetClient with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_3.diff.&lt;/p&gt;

&lt;p&gt;Now, I&apos;m examing difference.&lt;/p&gt;</comment>
                            <comment id="12433196" author="knutanders" created="Thu, 7 Sep 2006 19:49:21 +0100"  >&lt;p&gt;Hi Tomohito,&lt;/p&gt;

&lt;p&gt;Thank you for working on this issue! I have only had a brief look at your patch. It looks like a great start, but I have a couple of questions/comments:&lt;/p&gt;

&lt;p&gt;1) throwLangDataTypeSetException() throws an exception with state XCL12. Does that match embedded? I though embedded used 22005.&lt;br/&gt;
2) Would it be possible to have the integer arrays as constants? I think it would be good to avoid allocating a new array for each call to a setter method. Also, it would make the getPossibleTypesForNull() method more compact.&lt;br/&gt;
3) checkType() uses Arrays.binarySearch(), which requires that the array is sorted, but I don&apos;t think the arrays that are passed in are sorted.&lt;/p&gt;</comment>
                            <comment id="12434120" author="naka" created="Tue, 12 Sep 2006 12:15:31 +0100"  >&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;1) &lt;br/&gt;
The jdbcapi/parameterMapping.java takes both of  XCL12 and 22005 as expected Exception...&lt;br/&gt;
Well .. anyway, I wiill test and report it.&lt;/p&gt;

&lt;p&gt;However, I&apos;m not sure whether 22005 is reasonable Exception .....&lt;/p&gt;


&lt;p&gt;2)&lt;br/&gt;
Technically possible.&lt;br/&gt;
However I think define them as constants will make the code harder to read ...&lt;br/&gt;
Well ... avoid allocating a new memory would be much more important for the program ....&lt;/p&gt;


&lt;p&gt;3)&lt;br/&gt;
I sorted the element by hand and the result was hard-coded.&lt;br/&gt;
DEBUG code in checkType method proof that they are in correct order.&lt;/p&gt;</comment>
                            <comment id="12434135" author="naka" created="Tue, 12 Sep 2006 13:14:37 +0100"  >&lt;p&gt;I commented out code to accept XCL12 Exception in parameterMapping.java and execute it with Embedded.&lt;/p&gt;

&lt;p&gt;Attached file is the result.&lt;br/&gt;
There found XCL12 Exception was thrown in some cases.&lt;/p&gt;


&lt;p&gt;By the way, I found questionable comment  in parameterMapping.java, as next .&lt;/p&gt;

&lt;p&gt;	private static String checkForInvalidConversion(SQLException sqle)&lt;br/&gt;
	{&lt;br/&gt;
		if (sqle == null)&lt;br/&gt;
			return null;&lt;/p&gt;

&lt;p&gt;		boolean unknownException = true;&lt;br/&gt;
		SQLException e = sqle;&lt;br/&gt;
		while (e != null &amp;amp;&amp;amp; unknownException == true)&lt;br/&gt;
		{&lt;br/&gt;
			// XCL12 is temp&lt;br/&gt;
			if (&quot;22005&quot;.equals(e.getSQLState()) ||&lt;br/&gt;
				&quot;XCL12&quot;.equals(e.getSQLState()) ||&lt;br/&gt;
				e.getMessage().indexOf(&quot;Illegal Conv&quot;) != -1)&lt;br/&gt;
			{&lt;/p&gt;


&lt;p&gt;It says that XCL12 is temp .....&lt;/p&gt;

&lt;p&gt;What does this comment mean ...?&lt;br/&gt;
Exception of XCL12 is a kind of deprecated existance ..?&lt;/p&gt;

&lt;p&gt;Does anyone know background about it ?&lt;/p&gt;</comment>
                            <comment id="12434161" author="naka" created="Tue, 12 Sep 2006 14:56:49 +0100"  >&lt;p&gt;I upload &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_4.diff.&lt;/p&gt;

&lt;p&gt;Difference from previous patch is &lt;br/&gt;
that this patch avoids allocating int[] object each time when method was called.&lt;/p&gt;</comment>
                            <comment id="12434234" author="knutanders" created="Tue, 12 Sep 2006 19:38:41 +0100"  >&lt;p&gt;Thank you for the explanation and the new patch, Tomohito!&lt;/p&gt;

&lt;p&gt;Since the constant arrays are required to be sorted, I think they&lt;br/&gt;
should have a comment saying they must be sorted in case someone needs&lt;br/&gt;
to modify them later. Also, I think it would be clearer (and safer) if&lt;br/&gt;
they were defined as&lt;/p&gt;

&lt;p&gt;  CONSTANT = Arrays.sort(new int[] &lt;/p&gt;
{ .... }
&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;That would explicitly show that they are sorted. Since the sorting&lt;br/&gt;
only happens when the class is loaded, it shouldn&apos;t be a performance&lt;br/&gt;
issue.&lt;/p&gt;

&lt;p&gt;Another small comment is that POSSIBLE_TYPES_IN_SET_XXX is identical&lt;br/&gt;
for boolean, byte, short, int, long, float, double and BigDecimal. It&lt;br/&gt;
would probably be good to use one constant only (for instance,&lt;br/&gt;
POSSIBLE_TYPES_IN_SET_SCALAR). It would reduce the disk and memory&lt;br/&gt;
footprint. The same comment is valid for the&lt;br/&gt;
POSSIBLE_TYPES_FOR_XXX_NULL constants.&lt;/p&gt;

&lt;p&gt;(In fact, for the types mentioned above, the&lt;br/&gt;
POSSIBLE_TYPES_FOR_XXX_NULL constants could also be used by the setXXX&lt;br/&gt;
methods. The only difference between FOR_XXX_NULL and IN_SET_XXX, is&lt;br/&gt;
that the setNull constants contain BIT, TINYINT, NUMERIC and FLOAT&lt;br/&gt;
whereas the setXXX ones don&apos;t. Since these types also are compatible&lt;br/&gt;
with int, byte, boolean etc., it wouldn&apos;t hurt to add them to the&lt;br/&gt;
setXXX constants.)&lt;/p&gt;

&lt;p&gt;I don&apos;t know what is meant by &quot;XCL12 is temp&quot; in parameterMapping, but&lt;br/&gt;
I assume it&apos;s because the one who wrote it meant only one SQL state&lt;br/&gt;
should be used for all conversion errors.&lt;/p&gt;</comment>
                            <comment id="12435283" author="naka" created="Sun, 17 Sep 2006 05:59:39 +0100"  >&lt;p&gt;I upload new patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_5.diff.&lt;/p&gt;

&lt;p&gt;In this patch, int[] object of possible types are accessed via PossibleType class.&lt;br/&gt;
The object of this class sort array of possible types when constructed.&lt;/p&gt;

&lt;p&gt;Furthermore objects which have same possible types are unified and &lt;br/&gt;
exceptions for incompatible type are unified to that of 22005.&lt;/p&gt;

</comment>
                            <comment id="12435413" author="naka" created="Mon, 18 Sep 2006 07:59:37 +0100"  >&lt;p&gt;Through examing the patch.&lt;br/&gt;
I found a problem that Engine throw exception of XCL12 when String typed value is passed to BLOB typed variable though the patch throw exception of 22005 .&lt;/p&gt;

&lt;p&gt;Exceptions found in my environment using TestTypeCompatiblity.java are as next.&lt;/p&gt;

&lt;p&gt;naka@rufelza:~/derby/wok/20060918$ javac TestTypeCompatibility.java&lt;br/&gt;
naka@rufelza:~/derby/wok/20060918$ java TestTypeCompatibility embedded&lt;br/&gt;
streamAsNull:&lt;br/&gt;
ERROR XCL12: An attempt was made to put a data value of type &apos;java.lang.String&apos; into a data value of type &apos;BLOB&apos;.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:316)&lt;br/&gt;
	at org.apache.derby.iapi.types.DataType.throwLangSetMismatch(DataType.java:601)&lt;br/&gt;
	at org.apache.derby.iapi.types.DataType.setValue(DataType.java:343)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.setString(EmbedPreparedStatement.java:492)&lt;br/&gt;
	at TestTypeCompatibility.update(TestTypeCompatibility.java:71)&lt;br/&gt;
	at TestTypeCompatibility.main(TestTypeCompatibility.java:45)&lt;br/&gt;
java.sql.SQLException: Invalid cursor state - no current row.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:89)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:105)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:169)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:1982)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:148)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.checkOnRow(EmbedResultSet.java:326)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.getColumn(EmbedResultSet.java:4408)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.getString(EmbedResultSet.java:681)&lt;br/&gt;
	at TestTypeCompatibility.update(TestTypeCompatibility.java:92)&lt;br/&gt;
	at TestTypeCompatibility.main(TestTypeCompatibility.java:45)&lt;br/&gt;
naka@rufelza:~/derby/wok/20060918$ &lt;/p&gt;

&lt;p&gt;I&apos;m thinking revive PreparedStatement.throwLangDataTypeSetException method which is commented out in the patch, and use it to throw exception of XCL12 in this case.&lt;/p&gt;</comment>
                            <comment id="12435783" author="naka" created="Tue, 19 Sep 2006 14:32:53 +0100"  >&lt;p&gt;I found same problem in VARBINARY as in &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12435413&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12435413&lt;/a&gt;...&lt;/p&gt;</comment>
                            <comment id="12436122" author="knutanders" created="Wed, 20 Sep 2006 07:13:36 +0100"  >&lt;p&gt;Although embedded throws XCL12 in some cases, I don&apos;t think the client driver needs to do the same. From the comments in parameterMapping, it seems like XCL12 was not meant to be used permanently. I think it would be better if the client consistently threw 22005 for all the type errors. The patch looks good. Perhaps you could add a comment describing the PossibleTypes class?&lt;/p&gt;</comment>
                            <comment id="12436209" author="naka" created="Wed, 20 Sep 2006 11:22:18 +0100"  >&lt;p&gt;Thank you for your reviewing.&lt;/p&gt;

&lt;p&gt;I tried derbyall last night and found several error happens.&lt;br/&gt;
I will submit next patch also with the modification for your suggestion.&lt;/p&gt;</comment>
                            <comment id="12436536" author="naka" created="Thu, 21 Sep 2006 14:54:35 +0100"  >&lt;p&gt;I found problem in test of setNull method in derbynet/csPrepStmt.java.&lt;/p&gt;

&lt;p&gt;In that test, 16 th value in sql is typed as LONGVARCHAR.&lt;br/&gt;
However 16th column is typed as DATE....&lt;/p&gt;

&lt;p&gt;I will try to correct this test too ...&lt;/p&gt;</comment>
                            <comment id="12436543" author="knutanders" created="Thu, 21 Sep 2006 15:18:03 +0100"  >&lt;p&gt;I&apos;m not sure the test should be changed. The test intentionally calls setNull() with another type and expects it to succeed. From the conversion tables in appendix B of the JDBC spec, it seems reasonable to expect that setNull(Types.LONGVARCHAR) on a DATE parameter succeeds. (LONGVARCHAR maps into a String object, and setObject(String) is allowed on a DATE parameter. Also, getDate() is allowed on a LONGVARCHAR column, and getString() is allowed on a DATE column.)&lt;/p&gt;</comment>
                            <comment id="12436554" author="naka" created="Thu, 21 Sep 2006 16:25:24 +0100"  >&lt;p&gt;Through examing result, I found another problem, in result of parameterMapping.java at engine itself.&lt;/p&gt;

&lt;p&gt;The result of setNull(java.sql.Types.TIME) for TIMESTAMP typed variable is regarded as error.&lt;br/&gt;
However, the result of setTime(null) for TIMESTAMP typed variable is not regarded as error ....&lt;/p&gt;

</comment>
                            <comment id="12436555" author="naka" created="Thu, 21 Sep 2006 16:32:05 +0100"  >&lt;p&gt;I correct my previous comment in &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12436536&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12436536&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In that test, 16 th value in sql is typed as LONGVARCHAR FOR BIT DATA. &lt;br/&gt;
 However 16th column is typed as DATE.... &lt;/p&gt;

&lt;p&gt;Not LONGVARCHAR, but LONGVARCHAR FOR BIT DATA.&lt;/p&gt;</comment>
                            <comment id="12436557" author="naka" created="Thu, 21 Sep 2006 16:38:38 +0100"  >&lt;p&gt;I understand Knut&apos;s comment at &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12436543&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12436543&lt;/a&gt;.&lt;br/&gt;
I found comments in derbynet/csPrepStmt.java told as next.&lt;/p&gt;

&lt;p&gt;// test setNull on different datatypes of the input parameters of PreparedStatement&lt;/p&gt;


&lt;p&gt;But I&apos;m not sure about question at &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12436554&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12436554&lt;/a&gt; yet.&lt;/p&gt;</comment>
                            <comment id="12436566" author="naka" created="Thu, 21 Sep 2006 16:55:49 +0100"  >&lt;p&gt;Based on Knut&apos;s comment at &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12436543&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12436543&lt;/a&gt;, &lt;br/&gt;
The result of parameterMapping.java at enginemay have another problem.&lt;/p&gt;

&lt;p&gt;This result of parameterMapping.java at engine is inconsistent with the result of derbynet/csPrepStmt.java&lt;/p&gt;

&lt;p&gt;In the result of parameterMapping.java, &lt;br/&gt;
it is regarded as type imcompatible error to call setNull(VARCHAR FOR BIT DATA) for column typed in DATE, though derbynet/csPrepStmt.java expect same processing to be passed.&lt;/p&gt;</comment>
                            <comment id="12436568" author="naka" created="Thu, 21 Sep 2006 17:01:46 +0100"  >&lt;p&gt;As I could understand .....&lt;/p&gt;

&lt;p&gt;Now, we have two inconsistency.&lt;/p&gt;

&lt;p&gt;1: Inconsistency in a result of jdbcapi/parameterMapping.java at engine.&lt;br/&gt;
    The result of setNull(java.sql.Types.TIME) for TIMESTAMP typed variable is regarded as error. &lt;br/&gt;
    However, the result of setTime(null) for TIMESTAMP typed variable is not regarded as error .&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12436554&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12436554&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2: Inconsistency between results of jdbcpai/parameterMapping.java at engine and &lt;br/&gt;
     derbynet/csPrepStmt.java.&lt;br/&gt;
    Former regards it as error to execute setNull(VARCHAR FOR BIT DATA) for column typed in DATE.&lt;br/&gt;
    Though latter regards it as expected.&lt;/p&gt;</comment>
                            <comment id="12436793" author="knutanders" created="Fri, 22 Sep 2006 09:50:55 +0100"  >&lt;p&gt;I&apos;m sorry, I didn&apos;t notice the &quot;FOR BIT DATA&quot; part. I agree with your first comment, that csPrepStmt should be changed. setNull(Date) should fail on a VARCHAR FOR BIT DATA (VARBINARY) parameter. What worried me, was that I thought the test ran under embedded and expected the call to succeed. But it is a derbynet test and doesn&apos;t run under embedded, so that should not be a problem.&lt;/p&gt;

&lt;p&gt;I also agree that setNull(Types.TIME) and setTime(null) should behave the same way. Table B-5 in the JDBC spec says that setObject(java.sql.Time) can be used on parameters of type CHAR, VARCHAR, LONGVARCHAR or TIME. I would expect setNull(Types.TIME) and setTime() to accept the same parameter types as setObject(Time).&lt;/p&gt;</comment>
                            <comment id="12436883" author="naka" created="Fri, 22 Sep 2006 16:20:11 +0100"  >&lt;p&gt;Thank you for your concern, Knut.&lt;/p&gt;

&lt;p&gt;I will correct csPrepStmt.java and &lt;br/&gt;
unify the behavior of setNull(Types.TIME) and setTiime(null) in NetworkClient in this issue.&lt;/p&gt;

&lt;p&gt;Moreover, I will file it as different issue to unify the behavior of setNull(Types.TIME) and setTiime(null) in engine.&lt;/p&gt;</comment>
                            <comment id="12437796" author="naka" created="Tue, 26 Sep 2006 11:35:41 +0100"  >&lt;p&gt;I found another inconsistency.&lt;/p&gt;

&lt;p&gt;At Line 300 in derbynet/callable.java, BLOB is set to  variable typed as VARCHAR(10000) FOR BIT DATA.&lt;br/&gt;
However, this combination was expected to be failed in jdbcapi/parameterMapping.java.&lt;/p&gt;

&lt;p&gt;I will correct derbynet/callable.java to solve this inconsistency.&lt;/p&gt;</comment>
                            <comment id="12438082" author="naka" created="Wed, 27 Sep 2006 12:01:54 +0100"  >&lt;p&gt;I upload the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;Type compatibility checking code was added to PreparedStateemnt class in NetworkClient.&lt;/li&gt;
	&lt;li&gt;Consequently, the results in some of the tests werer modified.&lt;/li&gt;
	&lt;li&gt;The result of parameterMapping.out was changed.&lt;br/&gt;
         The attached file, parameterMapping.out.diff, shows the difference between Engine and DerbyNetClient after this patch. &lt;/li&gt;
	&lt;li&gt;Through examining the results of the test, I found inconsistency in the tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The result of test&lt;/li&gt;
	&lt;li&gt;execute derbyall and found derbyall/derbynetclientmats/derbynetmats.fail.&lt;br/&gt;
     However, I confirmed this error is intermittent.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12438657" author="knutanders" created="Fri, 29 Sep 2006 08:31:04 +0100"  >&lt;p&gt;Hi Tomohito,&lt;/p&gt;

&lt;p&gt;I tried to test all type combinations on setNull(). Seems like most of the combinations are treated the same way by the client driver and the embedded driver. Great! The only differences I found were:&lt;/p&gt;

&lt;p&gt;1. setNull(LONGVARCHAR) on parameter of type CHAR FOR BIT DATA (Types.BINARY): Client succeeds, embedded fails (state 22005).&lt;br/&gt;
2. setNull(LONGVARBINARY) on parameter of type CHAR FOR BIT DATA (Types.BINARY): Embedded succeeds, client fails (state 22005).&lt;br/&gt;
3. setNull(LONGVARBINARY) on parameter of type VARCHAR FOR BIT DATA (Types.VARBINARY): Embedded succeeds, client fails (state 22005).&lt;br/&gt;
4. setNull(BINARY) on parameter of type LONG VARCHAR FOR BIT DATA (Types.LONGVARBINARY): Embedded succeeds, client fails (state 22005).&lt;br/&gt;
5. setNull(TIME) on parameter of TIMESTAMP: Client succeeds, embedded fails (state 22005).&lt;/p&gt;

&lt;p&gt;I believe the embedded driver behaves correctly in these cases, and that the client driver should behave the same way. Do you think so too?&lt;/p&gt;</comment>
                            <comment id="12438886" author="naka" created="Sat, 30 Sep 2006 12:36:51 +0100"  >&lt;p&gt;1)-4)&lt;br/&gt;
Test on parameter of type CHAR FOR BIT DATA/VARCHAR FOR BIT DATA/LONG VARCHAR FOR BIT DATA was not included in parameterMapping.java. &lt;/p&gt;

&lt;p&gt;I agree your suggested line.&lt;/p&gt;


&lt;p&gt;5)&lt;br/&gt;
Well ...  Type compatibility should be strict rather than lenient. &lt;/p&gt;</comment>
                            <comment id="12438887" author="naka" created="Sat, 30 Sep 2006 12:45:09 +0100"  >&lt;p&gt;Sorry. I took mistaken.&lt;/p&gt;

&lt;p&gt;Test for CHAR FOR BIT DATA/VARCHAR FOR BIT DATA/LONG VARCHAR FOR BIT DATA existed in parameterMapping.java as next. &lt;/p&gt;

&lt;p&gt;CHAR(60) FOR BIT DATA was skipped.&lt;br/&gt;
VARCHAR(60) FOR BIT DATA was executed.&lt;br/&gt;
LONG VARCHAR FOR BIT DATA was sipped.&lt;/p&gt;

&lt;p&gt;I think here exists something ...&lt;/p&gt;</comment>
                            <comment id="12438889" author="naka" created="Sat, 30 Sep 2006 13:06:34 +0100"  >&lt;p&gt;In the parameterMapping.java, tests of setNull on parameter typed VARCHAR FOR BIT DATA (Types.VARBINARY) existed and execued.&lt;/p&gt;

&lt;p&gt;However, setNull(LONGVARBINARY) was not tested in those tests.&lt;/p&gt;</comment>
                            <comment id="12438952" author="naka" created="Sun, 1 Oct 2006 01:27:20 +0100"  >&lt;p&gt;Regarding &quot;1. setNull(LONGVARCHAR) on parameter of type CHAR FOR BIT DATA (Types.BINARY): Client succeeds, embedded fails (state 22005).&quot;, I found derbynet/csPrepStmt.java have problem.&lt;/p&gt;

&lt;p&gt;The part of setNull in this test tries to setNull(LONGVARCHAR) on 13th column typed as char(23) for bit data.&lt;/p&gt;

&lt;p&gt;I think we need to modify this test program in this point.&lt;/p&gt;
</comment>
                            <comment id="12438972" author="naka" created="Sun, 1 Oct 2006 13:50:37 +0100"  >&lt;p&gt;I found another problem in derbynet/csPrepStmt.java.&lt;/p&gt;

&lt;p&gt;The part of setNull in this test expect it possible to setNull(TIME) on 18th column typed as TIMESTAMP.&lt;br/&gt;
If nod modified this test, it is impossible to correct &quot;5. setNull(TIME) on parameter of TIMESTAMP: Client succeeds, embedded fails (state 22005).&quot; @ &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12438657&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12438657&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;I will fix this part in the test too.&lt;/p&gt;</comment>
                            <comment id="12439170" author="naka" created="Mon, 2 Oct 2006 15:26:29 +0100"  >&lt;p&gt;I upload the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_7.patch &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;Type compatibility checking code was added to PreparedStateemnt class in NetworkClient.&lt;/li&gt;
	&lt;li&gt;Consequently, the results in some of the tests were modified.&lt;/li&gt;
	&lt;li&gt;The result of parameterMapping.out was changed.&lt;br/&gt;
          The attached file, parameterMapping.out.7.diff, shows the difference between Engine and DerbyNetClient after this patch. &lt;/li&gt;
	&lt;li&gt;Through examining the results of the test, I found inconsistency in the tests and solve it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Difference from previous patch&lt;/li&gt;
	&lt;li&gt;Problems 1)-5) commented in &lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1610#action_12438657&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1610#action_12438657&lt;/a&gt; was solved.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The result of test&lt;/li&gt;
	&lt;li&gt;execute derbyall and found only error of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1910&quot; title=&quot;OutOfMemoryError happens when jdbcapi/_Suite.junit was executed as DerbyNetClient (in jvm1.4.2)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1910&quot;&gt;&lt;del&gt;DERBY-1910&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12439477" author="knutanders" created="Tue, 3 Oct 2006 13:42:22 +0100"  >&lt;p&gt;I have run tests of setNull() and setObject() on most type combinations, and I didn&apos;t find any inconsistencies. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12439485" author="naka" created="Tue, 3 Oct 2006 13:59:06 +0100"  >&lt;p&gt;Thank you for your persistent follow-up !&lt;/p&gt;

&lt;p&gt;I will commit the patch after 10.2 is released.&lt;/p&gt;

&lt;p&gt;This patch have much impact on behavior of NetworkClient driver and &lt;br/&gt;
I think it should not be committed in rush. &lt;/p&gt;</comment>
                            <comment id="12439547" author="bryanpendleton" created="Tue, 3 Oct 2006 16:57:44 +0100"  >&lt;p&gt;Is this issue related to the issue discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1904&quot; title=&quot;COALESCE with NULL parameter problem&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1904&quot;&gt;&lt;del&gt;DERBY-1904&lt;/del&gt;&lt;/a&gt;, specifically:&lt;br/&gt;
&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1904?page=comments#action_12439484&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1904?page=comments#action_12439484&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12440655" author="naka" created="Sat, 7 Oct 2006 12:25:05 +0100"  >&lt;p&gt;Committed.&lt;/p&gt;

&lt;p&gt;Sending        java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/callable.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/callable.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/parameterMapping.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java&lt;br/&gt;
Transmitting file data ........&lt;br/&gt;
Committed revision 453886.&lt;/p&gt;</comment>
                            <comment id="12440667" author="oysteing" created="Sat, 7 Oct 2006 15:21:25 +0100"  >&lt;p&gt;The latest check-in seems to have introduced an error in callable.java&lt;/p&gt;</comment>
                            <comment id="12440668" author="oysteing" created="Sat, 7 Oct 2006 15:23:39 +0100"  >&lt;p&gt;Diff from the tinderbox test:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/derbynetmats/DerbyNet/derbynetmats/callable.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: callable jdk1.5.0_07 DerbyNet derbynetmats:derbynetmats 2006-10-07 14:02:10 ***&lt;br/&gt;
34d33&lt;br/&gt;
&amp;lt; execute the procedure with BLOB&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   callable jdk1.5.0_07 DerbyNet derbynetmats:derbynetmats 2006-10-07 14:02:16 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12440671" author="naka" created="Sat, 7 Oct 2006 15:37:38 +0100"  >&lt;p&gt;Sorry for the regression ....&lt;/p&gt;

&lt;p&gt;I updated next 2 callable.out file in patch.&lt;br/&gt;
naka@rufelza:~/derby/dev/trunk$ grep Index: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_7.patch | grep callable.out&lt;br/&gt;
Index: java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/callable.out&lt;br/&gt;
Index: java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/callable.out&lt;/p&gt;

&lt;p&gt;However, there exists next 4 callable.out file &lt;br/&gt;
naka@rufelza:~/derby/dev/trunk$ find -name &quot;callable.out&quot;&lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/jdk15/callable.out&lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/callable.out&lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk15/callable.out&lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/callable.out&lt;/p&gt;

&lt;p&gt;Next 2 out file needs to be updated.&lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/jdk15/callable.out and &lt;br/&gt;
./java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk15/callable.out&lt;/p&gt;

&lt;p&gt;I will fix it soon.&lt;/p&gt;</comment>
                            <comment id="12440673" author="naka" created="Sat, 7 Oct 2006 15:43:49 +0100"  >&lt;p&gt;This patch updates next 2 files&lt;br/&gt;
naka@rufelza:~/derby/dev/trunk$ grep Index: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_7_regressionfix.patch &lt;br/&gt;
Index: java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/jdk15/callable.out&lt;br/&gt;
Index: java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk15/callable.out&lt;/p&gt;

&lt;p&gt;I will test this patch with jdk15&lt;/p&gt;</comment>
                            <comment id="12440675" author="naka" created="Sat, 7 Oct 2006 15:55:35 +0100"  >&lt;p&gt;I committed.&lt;/p&gt;

&lt;p&gt;Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/jdk15/callable.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/jdk15/callable.out&lt;br/&gt;
Transmitting file data ..&lt;br/&gt;
Committed revision 453922.&lt;/p&gt;</comment>
                            <comment id="12440677" author="naka" created="Sat, 7 Oct 2006 16:08:36 +0100"  >&lt;p&gt;In addition to the derbyall test, the compatibility test seems to be failed after this patch. &lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/Limited/testSummary-453887.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/TinderBox_Derby/Limited/testSummary-453887.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I will see what happen.&lt;/p&gt;

&lt;p&gt;However, jdk13 can&apos;t work at my site.&lt;br/&gt;
Then, I will use ibm13 instead .....&lt;/p&gt;</comment>
                            <comment id="12440684" author="naka" created="Sat, 7 Oct 2006 17:18:23 +0100"  >&lt;p&gt;I think I could find reason for compatibility error ....&lt;br/&gt;
Next error was found in serverVM-1.3_serverTrunk_clientVM-1.3_clientTrunk when compatibility test was executed and failed.&lt;/p&gt;

&lt;p&gt;.E.&lt;br/&gt;
Time: 2.974&lt;br/&gt;
There was 1 error:&lt;br/&gt;
1) testJDBCDriver(org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest)java.lang.NoClassDefFoundError: java/sql/ParameterMetaData&lt;br/&gt;
	at java.lang.ClassLoader.defineClass0(Native Method)&lt;br/&gt;
	at java.lang.ClassLoader.defineClass(ClassLoader.java:703)&lt;br/&gt;
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:133)&lt;br/&gt;
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:320)&lt;br/&gt;
	at java.net.URLClassLoader.access$400(URLClassLoader.java:93)&lt;br/&gt;
	at java.net.URLClassLoader$ClassFinder.run(URLClassLoader.java:678)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at java.net.URLClassLoader.findClass(URLClassLoader.java:239)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:516)&lt;br/&gt;
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:460)&lt;br/&gt;
	at java.lang.ClassLoader.loadClass(ClassLoader.java:448)&lt;br/&gt;
	at org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newParameterMetaData(ClientJDBCObjectFactoryImpl.java:348)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.getParameterMetaDataX(PreparedStatement.java:1774)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.getParameterMetaData(PreparedStatement.java:1759)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.setInt(PreparedStatement.java:562)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.setRow(JDBCDriverTest.java:655)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.stuffTable(JDBCDriverTest.java:377)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.datatypesTest(JDBCDriverTest.java:281)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.testJDBCDriver(JDBCDriverTest.java:258)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(CompatibilitySuite.java:138)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 2,  Failures: 0,  Errors: 1&lt;/p&gt;


&lt;p&gt;Reading javadoc for ParameterMetadata interface, I found we can use this class after jdk.1.4.&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/sql/ParameterMetaData.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/sql/ParameterMetaData.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think using ParameterMetadata is reason why compatibility suite was failed.&lt;/p&gt;</comment>
                            <comment id="12440685" author="naka" created="Sat, 7 Oct 2006 17:24:08 +0100"  >&lt;p&gt;Reading the code, I think I can use org.apache.derby.client.am.ColumnMetaData instead of ParameterMetadata.&lt;/p&gt;

&lt;p&gt;I will fix it too.&lt;/p&gt;</comment>
                            <comment id="12440686" author="naka" created="Sat, 7 Oct 2006 17:44:29 +0100"  >&lt;p&gt;This patch stop getting type information via Interface java.sql.ParameterMetaData, which can be used only after jdk 1.4, inside PreparedStatement class.&lt;br/&gt;
Instead, type information is gotten from org.apache.derby.client.am.ColumnMetaData directly.&lt;/p&gt;

&lt;p&gt;Now I will examine patch with derbyall ...&lt;/p&gt;</comment>
                            <comment id="12440687" author="naka" created="Sat, 7 Oct 2006 17:49:43 +0100"  >&lt;p&gt;And compatibility test also ....&lt;/p&gt;</comment>
                            <comment id="12440688" author="bryanpendleton" created="Sat, 7 Oct 2006 17:54:16 +0100"  >&lt;p&gt;It appears that you are working on making this change compatible with JDK 1.3.&lt;/p&gt;

&lt;p&gt;I thought we had decided that the trunk no longer worked with JDK 1.3?&lt;/p&gt;</comment>
                            <comment id="12440716" author="naka" created="Sun, 8 Oct 2006 02:56:23 +0100"  >&lt;p&gt;At least, current lateest release support JDK1.3.&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/releases/release-10.2.1.6.cgi#Release%20Overview&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/releases/release-10.2.1.6.cgi#Release%20Overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And phenomena would make it almost completely impossilbe to run DerbyNetClient of next release on JDK 1.3 ...&lt;/p&gt;

&lt;p&gt;I think we have two options.&lt;br/&gt;
1) Make DerbyNetClient to work on JDK 1.3 to some extent though not supported officialy.&lt;br/&gt;
2) Give up DerbyNetClient to work on JDK 1.3.  DerbyNet (db2jcc.jar) may work as expected ....&lt;/p&gt;

&lt;p&gt;Well ....&lt;br/&gt;
I think we need to know how difficult 1) is , at least ...&lt;/p&gt;</comment>
                            <comment id="12440717" author="bryanpendleton" created="Sun, 8 Oct 2006 03:10:03 +0100"  >&lt;p&gt;Here&apos;s a link to the 1.3 discussion on the mailing list:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/forum/ViewPost.jtp?post=6610713&amp;amp;framed=y&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/forum/ViewPost.jtp?post=6610713&amp;amp;framed=y&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12440719" author="naka" created="Sun, 8 Oct 2006 03:25:12 +0100"  >&lt;p&gt;With the patch  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_7_regressionfix_2.patch , &lt;br/&gt;
I executed derbyall and compatibility suite.&lt;/p&gt;

&lt;p&gt;The result was that &lt;br/&gt;
compatibility test was passed and &lt;br/&gt;
jdbcapi/StmtCloseFunTest.java in DerbyNetClinet of derbyall was failed.&lt;/p&gt;

&lt;p&gt;Next are exceptions found in StmtCloseFunTest.tmp :&lt;br/&gt;
Prepared Statement test begin&lt;br/&gt;
FAIL &amp;#8211; unexpected exception:java.lang.NullPointerException&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.setInt(PreparedStatement.java:562)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StmtCloseFunTest.test2(StmtCloseFunTest.java:335)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StmtCloseFunTest.main(StmtCloseFunTest.java:72)&lt;br/&gt;
Callable Statement test begin&lt;br/&gt;
The result is 3&lt;br/&gt;
FAIL &amp;#8211; unexpected exception:java.lang.NullPointerException&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.setString(PreparedStatement.java:925)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StmtCloseFunTest.test3(StmtCloseFunTest.java:577)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.jdbcapi.StmtCloseFunTest.main(StmtCloseFunTest.java:73)&lt;br/&gt;
Statement Close Fun Test finished&lt;/p&gt;

&lt;p&gt;Where exception found was around next ....&lt;/p&gt;

&lt;p&gt;org.apache.derbyTesting.functionTests.tests.jdbcapi.StmtCloseFunTest :&lt;br/&gt;
test2 method :&lt;br/&gt;
                        ps.setInt(1, 420);&lt;br/&gt;
		   	ps.setFloat(2, (float)12.21);&lt;br/&gt;
		   	ps.setDate(3, new Date(870505200000L));&lt;br/&gt;
		   	ps.setString(4, &quot;China&quot;);&lt;br/&gt;
		   	ps.executeUpdate();&lt;br/&gt;
		   	ps.close();&lt;/p&gt;

&lt;p&gt;			//now, we begin the test&lt;br/&gt;
			try &lt;/p&gt;
{
				ps.setInt(1, 530);
				System.out.println(&quot;Prepared Statement Test failed&quot;);
			}
&lt;p&gt;			catch(SQLException e) { }&lt;/p&gt;

&lt;p&gt;test3 method :&lt;br/&gt;
				cs = conn.prepareCall(&quot;call takesString(?,?)&quot;);&lt;/p&gt;

&lt;p&gt;				cs.registerOutParameter(1, Types.CHAR);&lt;br/&gt;
				cs.setInt(2, Types.INTEGER);&lt;/p&gt;

&lt;p&gt;				cs.execute();&lt;br/&gt;
				System.out.println(&quot;The result is &quot; + cs.getString(1));&lt;/p&gt;

&lt;p&gt;				cs.close();&lt;/p&gt;

&lt;p&gt;				try &lt;/p&gt;
{
					cs.setString(1, &quot;ABC&quot;);
					System.out.println(&quot;Callable Statement Test failed&quot;);
				}
&lt;p&gt;				catch(SQLException e) { }&lt;/p&gt;

&lt;p&gt;It seems that program throw NullPointerExceptioon &lt;br/&gt;
because method of instance variable ,parameterMetaData_ , was called &lt;br/&gt;
after Statement was closed and substituted null for parameterMetaData_  .&lt;/p&gt;</comment>
                            <comment id="12440726" author="naka" created="Sun, 8 Oct 2006 04:03:30 +0100"  >&lt;p&gt;I think it is possible to solve problem found in jdbcapi/StmtCloseFunTest.java ...&lt;br/&gt;
I will post the patch after derbyall was examined.&lt;/p&gt;</comment>
                            <comment id="12440733" author="naka" created="Sun, 8 Oct 2006 08:33:51 +0100"  >&lt;ul&gt;
	&lt;li&gt;Description of the patch&lt;/li&gt;
	&lt;li&gt;This patch resolve error in jdk13 test of compatibility suite.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test&lt;/li&gt;
	&lt;li&gt;execute derbyall and compatibility suite and found no error.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12440735" author="naka" created="Sun, 8 Oct 2006 08:42:10 +0100"  >&lt;p&gt;Committed.&lt;/p&gt;

&lt;p&gt;Sending        java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
Transmitting file data .&lt;br/&gt;
Committed revision 454098.&lt;/p&gt;</comment>
                            <comment id="12440806" author="naka" created="Mon, 9 Oct 2006 05:24:43 +0100"  >&lt;p&gt;Reading the code, I found problem in the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1610&quot; title=&quot;Resolve difference of type compatibility between Embedded and NetworkServer/NetworkDriver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1610&quot;&gt;&lt;del&gt;DERBY-1610&lt;/del&gt;&lt;/a&gt;_7_regressionfix_2_2.patch ...&lt;/p&gt;

&lt;p&gt;In the case PreparedStatement.escapedProcedureCallWithResult_ is true, &lt;br/&gt;
I can&apos;t access type information of parameterMetaData_ with original parameter index value.&lt;/p&gt;

&lt;p&gt;As it is treated in ParameterMetaData, I need to decreaseindex value before access the type information.&lt;/p&gt;

&lt;p&gt;It seeems that I need to use checkForEscapedCallWithResult method ....&lt;/p&gt;</comment>
                            <comment id="12440831" author="naka" created="Mon, 9 Oct 2006 09:48:10 +0100"  >&lt;ul&gt;
	&lt;li&gt;Description of patch&lt;/li&gt;
	&lt;li&gt;adjust index for parameter using checkForEscapedCallWithResult method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test&lt;/li&gt;
	&lt;li&gt;execute derbyall and only found intermittent errors.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12440832" author="naka" created="Mon, 9 Oct 2006 09:56:09 +0100"  >&lt;p&gt;Committed.&lt;/p&gt;

&lt;p&gt;Sending        java/client/org/apache/derby/client/am/PreparedStatement.java&lt;br/&gt;
Transmitting file data .&lt;br/&gt;
Committed revision 454312.&lt;/p&gt;</comment>
                            <comment id="12441109" author="knutanders" created="Tue, 10 Oct 2006 10:55:28 +0100"  >&lt;p&gt;There are some failures in the jdbc40 suite caused by these changes. I&apos;ll post a patch for it.&lt;/p&gt;</comment>
                            <comment id="12441131" author="knutanders" created="Tue, 10 Oct 2006 13:02:26 +0100"  >&lt;p&gt;Attaching a patch which fixes the failures in the jdbc40 suite (see&lt;br/&gt;
&lt;a href=&quot;http://www.multinet.no/~solberg/public/Apache/Daily/jvm1.6/testlog/solN+1/454410-derbyall_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.multinet.no/~solberg/public/Apache/Daily/jvm1.6/testlog/solN+1/454410-derbyall_diff.txt&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Description of the patch (derby-1610-jdk16.diff):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Check for unsupported types before checking incompatibilities&lt;br/&gt;
    since JDBC 4.0 specifies that SQLFeatureNotSupportedException&lt;br/&gt;
    should be raised for certain types if they are unsupported.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Change timing of calls to checkForClosedStatement() to make&lt;br/&gt;
    ClosedObjectTest get the expected SQLState when the statement is&lt;br/&gt;
    closed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Add type checking to the JDBC 4.0 length-less blob/clob overloads.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Since the type checking already checks for closed statement and&lt;br/&gt;
    invalid parameter index, remove those tests from&lt;br/&gt;
    checkSetterPreconditions(). Since the only code that is left in&lt;br/&gt;
    checkSetterPreconditions() after the removal of those checks is a&lt;br/&gt;
    call to checkForEscapedCallWithResult(), replace all calls to&lt;br/&gt;
    checkSetterPreconditions() with calls to&lt;br/&gt;
    checkForEscapedCallWithResult().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have run derbynetclientmats with no failures. The jdbc40 suite also&lt;br/&gt;
runs cleanly (196 failures without the patch).&lt;/p&gt;</comment>
                            <comment id="12441136" author="naka" created="Tue, 10 Oct 2006 13:57:32 +0100"  >&lt;p&gt;Thank you for clean up those.&lt;/p&gt;

&lt;p&gt;I have a concern for checkTypeForSetAsciiStream, checkTypeForSetBlob, checkTypeForSetClob.&lt;br/&gt;
I think static method is better than instance methods, &lt;br/&gt;
because information handled in the static method is clearer ...&lt;/p&gt;</comment>
                            <comment id="12441374" author="knutanders" created="Wed, 11 Oct 2006 09:05:42 +0100"  >&lt;p&gt;Thanks Tomohito. If the methods are static, each setter method must&lt;br/&gt;
call getColumnMetaDataX(), getColumnType() and&lt;br/&gt;
checkForEscapedCallWithResult(). I think it is better to have these&lt;br/&gt;
calls in checkTypeForXXX() because it makes the setters cleaner and&lt;br/&gt;
reduces the footprint. Since it reduces the amount of duplicated code,&lt;br/&gt;
I think it also makes the code more maintainable.&lt;/p&gt;</comment>
                            <comment id="12441400" author="naka" created="Wed, 11 Oct 2006 11:37:49 +0100"  >&lt;p&gt;I see.&lt;br/&gt;
It would be a descision.&lt;/p&gt;

&lt;p&gt;My stand point is +0.&lt;/p&gt;</comment>
                            <comment id="12441436" author="knutanders" created="Wed, 11 Oct 2006 13:12:59 +0100"  >&lt;p&gt;So with your +0 and my +1, the average is +0.5. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Committed revision 462784.&lt;/p&gt;</comment>
                            <comment id="12496603" author="rhillegas" created="Thu, 17 May 2007 16:39:51 +0100"  >&lt;p&gt;Hi Tomohito and Knut Anders,&lt;/p&gt;

&lt;p&gt;Is this issue ready to have a release note written? A comment on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2430&quot; title=&quot; setObject(int targetType, Blob source) and setObject(int targetType, Clob source) should disallow updates on all targetTypes except BLOB and CLOB respectively&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2430&quot;&gt;&lt;del&gt;DERBY-2430&lt;/del&gt;&lt;/a&gt; suggests that a single release note should cover both issues. Is that the plan? Thanks-Rick&lt;/p&gt;</comment>
                            <comment id="12496619" author="naka" created="Thu, 17 May 2007 17:44:03 +0100"  >&lt;p&gt;Hi.&lt;/p&gt;

&lt;p&gt;I think release note should be written.&lt;br/&gt;
However I have a concern around type compatibility of OUT PARAMETER of stored procedure .&lt;/p&gt;


&lt;p&gt;When I implemented this issue, the functionality of setObject(java.sql.Blob)/ setObject(java.sql.Clob)/ &lt;br/&gt;
OUT PARAMETER of stored procedure was not implemented in NetworkServer/NetworkClient.&lt;/p&gt;

&lt;p&gt;//Please have a glance on &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12339632/parameterMapping.diff.betweenEmbedded_and_NetworkServerNetworkClient&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12339632/parameterMapping.diff.betweenEmbedded_and_NetworkServerNetworkClient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because those functionality was not same between NetworkServer and NetworkClient, &lt;br/&gt;
type compatibility was &lt;b&gt;not completely same&lt;/b&gt; between them &lt;br/&gt;
though they are &lt;b&gt;not different&lt;/b&gt; in the extent where functionality was implemented.&lt;/p&gt;

&lt;p&gt;The reason why I did not resolve this issue is that I felt concern around them.&lt;/p&gt;

&lt;p&gt;I understand &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2430&quot; title=&quot; setObject(int targetType, Blob source) and setObject(int targetType, Clob source) should disallow updates on all targetTypes except BLOB and CLOB respectively&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2430&quot;&gt;&lt;del&gt;DERBY-2430&lt;/del&gt;&lt;/a&gt; resolve my concern around setObject(java.sql.Blob)/ setObject(java.sql.Clob).&lt;br/&gt;
Then there still remain OUT PARAMETER of stored procedure.&lt;/p&gt;

&lt;p&gt;I think we need to take the care of not implemented functionality when we wrote release note.&lt;/p&gt;</comment>
                            <comment id="12499358" author="myrna" created="Sat, 26 May 2007 23:16:49 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This issue is one of several that is in progress, however, if I understand it correctly, a change that might impact existing applications has already gone in, and will be in for 10.3.&lt;/p&gt;

&lt;p&gt;I too find it important to document this change in behavior in the 10.3 release notes.&lt;/p&gt;

&lt;p&gt;The way it works, though, is that unless we do something, nothing will show up in the release notes on this.&lt;/p&gt;

&lt;p&gt;We have a number of choices;&lt;br/&gt;
1. adjust/falsify history and change the comment for revision 453886 to belong to for instance &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1501&quot; title=&quot;PreparedStatement#setNull(int parameterIndex, int sqlType) throws SQL Exception if given sqlType is LONGVARBINARY in embedded mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1501&quot;&gt;&lt;del&gt;DERBY-1501&lt;/del&gt;&lt;/a&gt;, or maybe &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1494&quot; title=&quot;PreparedStatement.setNull(int, int) checks type compatibility on embedded, but not on the client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1494&quot;&gt;&lt;del&gt;DERBY-1494&lt;/del&gt;&lt;/a&gt;...&lt;br/&gt;
2. close this bug as fixed in 10.3 and add the release note here.&lt;/p&gt;

&lt;p&gt;I vote for 2.&lt;/p&gt;

&lt;p&gt;I propose the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;log a new bug (if not done already) for the issue with the type incompatibility of OUT parameters for stored procedures and link this new bug to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-310&quot; title=&quot;Document and/or change Derby client code to match behavior with Embedded driver where possible.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-310&quot;&gt;&lt;del&gt;DERBY-310&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;close this bug as fixed in 10.3.&lt;/li&gt;
	&lt;li&gt;removing the existing application impact check from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1501&quot; title=&quot;PreparedStatement#setNull(int parameterIndex, int sqlType) throws SQL Exception if given sqlType is LONGVARBINARY in embedded mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1501&quot;&gt;&lt;del&gt;DERBY-1501&lt;/del&gt;&lt;/a&gt; because no change specific to that bug went into subversion, so a release note seems contrary.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I understand your concern about giving the impression that all type differences were resolved, but then again, I don&apos;t think a release note about a fix is the appropriate place for that. So, I suggest we use verbage that suggests more differences may exist.&lt;/p&gt;

&lt;p&gt;I propose something like the following for the release note, please review &amp;amp; correct:&lt;br/&gt;
------------------------------&lt;br/&gt;
Summary of Change&lt;br/&gt;
Derby&apos;s Client implementation will return an appropriate error, matching the behavior with Embedded in the a number of situations related to PreparedStatement.setNull(int, int). &lt;/p&gt;

&lt;p&gt;Symptoms Seen by Applications Affected by Change&lt;br/&gt;
In a number of situations, Derby&apos;s client implementation behaved differently from the Embedded implementation:&lt;br/&gt;
1. setNull(LONGVARCHAR) on parameter of type CHAR FOR BIT DATA (Types.BINARY).&lt;br/&gt;
	In previous releases, the Client succeeds, embedded fails (state 22005).&lt;br/&gt;
2. setNull(LONGVARBINARY) on parameter of type CHAR FOR BIT DATA (Types.BINARY).&lt;br/&gt;
	In previous releases, Embedded succeeds, client fails (state 22005).&lt;br/&gt;
3. setNull(LONGVARBINARY) on parameter of type VARCHAR FOR BIT DATA (Types.VARBINARY).&lt;br/&gt;
	In previous releases, Embedded succeeds, client fails (state 22005).&lt;br/&gt;
4. setNull(BINARY) on parameter of type LONG VARCHAR FOR BIT DATA (Types.LONGVARBINARY)&lt;br/&gt;
	In previous releases, Embedded succeeds, client fails (state 22005).&lt;br/&gt;
5. setNull(TIME) on parameter of TIMESTAMP. &lt;br/&gt;
	In previous releases, Client succeeds, embedded fails (state 22005).&lt;/p&gt;


&lt;p&gt;Incompatibilities with Previous Release&lt;br/&gt;
Now, in the cases indicated above, the client and Embedded implementation show the behavior previously shown only with Embedded.&lt;/p&gt;

&lt;p&gt;Rationale for Change&lt;br/&gt;
Derby&apos;s Client implementation and Embedded implementation should behave the same way from the point of view of an application whenever possible.&lt;/p&gt;

&lt;p&gt;Application Changes Required&lt;br/&gt;
Applications relying on the Client behaving in the old way will have to be adjusted.&lt;br/&gt;
------------------------------&lt;/p&gt;

&lt;p&gt;If I do not hear objections, I&apos;ll proceed with this plan.&lt;/p&gt;
</comment>
                            <comment id="12499381" author="naka" created="Sun, 27 May 2007 04:40:16 +0100"  >&lt;p&gt;I have no objection for your plan on the whole.&lt;br/&gt;
I think we should refer to imcompatible type of setXXXXX(null).&lt;/p&gt;

&lt;p&gt;========================&lt;br/&gt;
By the way my concern around OUT PARAMETER of stored procedure seems to be groundless fears.&lt;br/&gt;
It was resolved in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2381&quot; title=&quot;ParameterMappingTest fails due to ArrayIndexOutOfBoundsException  executing a procedure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2381&quot;&gt;&lt;del&gt;DERBY-2381&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;However, reading current ParameterMappingTest, &lt;br/&gt;
there seems to remain difference of handling NULL value in getXXXXStream/getBlob/getClob  &lt;/p&gt;

&lt;p&gt;The specificCheck method supresses the test for them.&lt;/p&gt;

&lt;p&gt;I will file it and close this issue.&lt;/p&gt;</comment>
                            <comment id="12499382" author="naka" created="Sun, 27 May 2007 04:48:45 +0100"  >&lt;p&gt;Not close but resolve .....&lt;/p&gt;</comment>
                            <comment id="12499449" author="myrna" created="Sun, 27 May 2007 22:35:36 +0100"  >&lt;p&gt;Attaching my attempt at a release note. I have added mention of the setXXX methods. If this is not sufficient, please feel free to attach an updated version of the file.&lt;/p&gt;</comment>
                            <comment id="12499584" author="naka" created="Mon, 28 May 2007 16:05:39 +0100"  >&lt;p&gt;Hello.&lt;br/&gt;
I think we should use ol and li element. &lt;/p&gt;

&lt;p&gt;I upload modified one.&lt;/p&gt;</comment>
                            <comment id="12499585" author="naka" created="Mon, 28 May 2007 16:08:28 +0100"  >&lt;p&gt;Previous html document was very confusing because of same name ....&lt;br/&gt;
I upload one with different name again.&lt;/p&gt;</comment>
                            <comment id="12499597" author="naka" created="Mon, 28 May 2007 16:54:07 +0100"  >&lt;p&gt;I upload again and again for automatically generating the Release Notes. ( see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2570&quot; title=&quot;Create a utility which generates Release Notes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2570&quot;&gt;&lt;del&gt;DERBY-2570&lt;/del&gt;&lt;/a&gt; )&lt;/p&gt;</comment>
                            <comment id="12505495" author="rhillegas" created="Sat, 16 Jun 2007 18:22:55 +0100"  >&lt;p&gt;New version of release note: used the angle bracket entities so that &amp;lt;type&amp;gt; would print out as is and not be misconstrued as an unbalanced tag.&lt;/p&gt;</comment>
                            <comment id="12510846" author="myrna" created="Sat, 7 Jul 2007 04:36:51 +0100"  >&lt;p&gt;uploading newer version of release note that has corrected 1 English grammar/editing mistake (&quot;in the a number of&quot;) and consistently uses Client and Embedded with  first letter uppercased.&lt;/p&gt;</comment>
                            <comment id="12510849" author="djd" created="Sat, 7 Jul 2007 05:11:48 +0100"  >&lt;p&gt;It takes a while with that release note to understand what the new behaviour is. &lt;/p&gt;

&lt;p&gt;Replacing text of the form:&lt;/p&gt;

&lt;p&gt;&amp;gt; setNull(LONGVARBINARY) on parameter of type CHAR FOR BIT DATA (Types.BINARY). In previous releases, Embedded succeeds, Client fails (state 22005)&lt;/p&gt;

&lt;p&gt;with something like&lt;/p&gt;

&lt;p&gt;&amp;gt; These method calls now succeed on both drivers. In 10.2 and earlier releases the client driver threw an exception with SQL state 22005&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; setNull(Types.LONGVARBINARY) on parameter of type CHAR FOR BIT DATA (Types.BINARY) &lt;br/&gt;
&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;and other calls&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;might be clearer&lt;/p&gt;</comment>
                            <comment id="12510892" author="myrna" created="Sat, 7 Jul 2007 14:02:31 +0100"  >&lt;p&gt;thx for your input...Except of course that in some of the calls, client has been made to &lt;b&gt;fail&lt;/b&gt; for both drivers, if that was the correct action....&lt;/p&gt;</comment>
                            <comment id="12510898" author="myrna" created="Sat, 7 Jul 2007 14:57:32 +0100"  >&lt;p&gt;attaching another attempt at the release note. Hopefully this is clear now.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12346249">DERBY-1535</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12346417">DERBY-1559</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12314092">DERBY-550</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12370338">DERBY-2704</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12345802">DERBY-1501</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12345682">DERBY-1494</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="32841">DERBY-310</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12364533">DERBY-2430</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12352066">DERBY-1904</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12352709">DERBY-1942</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12352552">DERBY-1938</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370709">DERBY-2743</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12338066" name="DERBY-1610.diff" size="3364" author="naka" created="Thu, 3 Aug 2006 15:16:25 +0100"/>
                            <attachment id="12339176" name="DERBY-1610_2.diff" size="2342" author="naka" created="Sun, 20 Aug 2006 06:20:44 +0100"/>
                            <attachment id="12340389" name="DERBY-1610_3.diff" size="38816" author="naka" created="Thu, 7 Sep 2006 16:17:14 +0100"/>
                            <attachment id="12340660" name="DERBY-1610_4.diff" size="39877" author="naka" created="Tue, 12 Sep 2006 14:56:49 +0100"/>
                            <attachment id="12340998" name="DERBY-1610_5.diff" size="33461" author="naka" created="Sun, 17 Sep 2006 05:59:39 +0100"/>
                            <attachment id="12341781" name="DERBY-1610_6.patch" size="147531" author="naka" created="Wed, 27 Sep 2006 12:01:54 +0100"/>
                            <attachment id="12342102" name="DERBY-1610_7.patch" size="149731" author="naka" created="Mon, 2 Oct 2006 15:26:29 +0100"/>
                            <attachment id="12342500" name="DERBY-1610_7_regressionfix.patch" size="1268" author="naka" created="Sat, 7 Oct 2006 15:43:49 +0100"/>
                            <attachment id="12342502" name="DERBY-1610_7_regressionfix_2.patch" size="10847" author="naka" created="Sat, 7 Oct 2006 17:44:29 +0100"/>
                            <attachment id="12342513" name="DERBY-1610_7_regressionfix_2_2.patch" size="11846" author="naka" created="Sun, 8 Oct 2006 08:33:51 +0100"/>
                            <attachment id="12342554" name="DERBY-1610_7_regressionfix_2_3.patch" size="11482" author="naka" created="Mon, 9 Oct 2006 09:48:10 +0100"/>
                            <attachment id="12337770" name="TestNullChar.java" size="4716" author="naka" created="Sun, 30 Jul 2006 08:26:44 +0100"/>
                            <attachment id="12341022" name="TestTypeCompatibility.java" size="3760" author="naka" created="Mon, 18 Sep 2006 07:59:37 +0100"/>
                            <attachment id="12340649" name="XCL12.diff" size="211514" author="naka" created="Tue, 12 Sep 2006 13:14:37 +0100"/>
                            <attachment id="12342653" name="derby-1610-jdk16.diff" size="25217" author="knutanders" created="Tue, 10 Oct 2006 13:02:26 +0100"/>
                            <attachment id="12339177" name="parameterMapping.diff" size="7832" author="naka" created="Sun, 20 Aug 2006 06:20:44 +0100"/>
                            <attachment id="12338067" name="parameterMapping.diff" size="229202" author="naka" created="Thu, 3 Aug 2006 15:16:25 +0100"/>
                            <attachment id="12339632" name="parameterMapping.diff.betweenEmbedded_and_NetworkServerNetworkClient" size="167298" author="naka" created="Sat, 26 Aug 2006 06:28:01 +0100"/>
                            <attachment id="12342103" name="parameterMapping.out.7.diff" size="73961" author="naka" created="Mon, 2 Oct 2006 15:26:29 +0100"/>
                            <attachment id="12341782" name="parameterMapping.out.diff" size="72674" author="naka" created="Wed, 27 Sep 2006 12:01:54 +0100"/>
                            <attachment id="12340390" name="parameterMapping_3.diff" size="84486" author="naka" created="Thu, 7 Sep 2006 16:17:14 +0100"/>
                            <attachment id="12361353" name="releaseNote.html" size="4974" author="myrna" created="Sat, 7 Jul 2007 14:57:32 +0100"/>
                            <attachment id="12361340" name="releaseNote.html" size="4463" author="myrna" created="Sat, 7 Jul 2007 04:36:51 +0100"/>
                            <attachment id="12359936" name="releaseNote.html" size="4339" author="rhillegas" created="Sat, 16 Jun 2007 18:22:55 +0100"/>
                            <attachment id="12358380" name="releaseNote.html" size="4462" author="naka" created="Mon, 28 May 2007 16:54:07 +0100"/>
                            <attachment id="12358341" name="releaseNote.html" size="4414" author="myrna" created="Sun, 27 May 2007 22:35:36 +0100"/>
                            <attachment id="12358379" name="releaseNote_2.html" size="4462" author="naka" created="Mon, 28 May 2007 16:08:28 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 20 Aug 2006 09:45:25 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0n33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37558</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>