<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:10:39 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3745/DERBY-3745.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3745] Derby can leak classloaders in an app server environment</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3745</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;A user reported potential class loader leaks in Derby&lt;/p&gt;

&lt;p&gt;...The first one looks like Derby created a long-running&lt;br/&gt;
thread and copying the context class loader.  To fix, the&lt;br/&gt;
context class loader should be saved/set/restored around the&lt;br/&gt;
creation of the new thread so that it copies some benign class&lt;br/&gt;
loader instead (e.g., null or getClass().getClassLoader()):&lt;/p&gt;

&lt;p&gt; 0x42278e58 java/lang/Thread@302e302e&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;truncating at running thread LEAK&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Object:  0x42278e58 java/lang/Thread@302e302e&lt;br/&gt;
Children:&lt;br/&gt;
 0x42278ee0 java/lang/String@303f303f&lt;br/&gt;
 0x4226e558 java/lang/ThreadGroup@6f2e6f2e&lt;br/&gt;
 0x42278e40&lt;br/&gt;
org/apache/derby/impl/services/monitor/AntiGC@603a603a&lt;br/&gt;
 0x419cfac0&lt;/p&gt;

&lt;p&gt;The second is another long running thread.  The same applies:&lt;/p&gt;

&lt;p&gt; 0x426fe7a0 java/lang/Thread@19901990&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;truncating at running thread LEAK&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Object:  0x426fe7a0 java/lang/Thread@19901990&lt;br/&gt;
Parents:&lt;br/&gt;
 0x4226e5a8 [Ljava/lang/Thread;@6f386f38&lt;br/&gt;
 0x426fe548&lt;br/&gt;
org/apache/derby/iapi/services/context/ContextManager@19421942&lt;br/&gt;
Children:&lt;br/&gt;
 0x426fe838 java/lang/String@19a319a3&lt;br/&gt;
 0x4226e558 java/lang/ThreadGroup@6f2e6f2e&lt;br/&gt;
 0x426fe4f8&lt;br/&gt;
org/apache/derby/impl/services/daemon/BasicDaemon@19381938&lt;br/&gt;
 0x419cfac0&lt;/p&gt;

&lt;p&gt;The third is a TimerThread owneed , which is created when a&lt;br/&gt;
Timer is created.  The same applies:&lt;/p&gt;

&lt;p&gt; 0x425ac538 java/util/Timer$TimerImpl@6b8a6b8a&lt;br/&gt;
  &lt;span class=&quot;error&quot;&gt;&amp;#91;truncating at running thread LEAK&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Object:  0x425ac538 java/util/Timer$TimerImpl@6b8a6b8a&lt;br/&gt;
Parents:&lt;br/&gt;
 0x41faaf58 [Ljava/lang/Thread;@3c583c58&lt;/p&gt;

&lt;p&gt;Object:  0x425ac510 java/util/Timer@6b856b85&lt;br/&gt;
Parents:&lt;br/&gt;
 0x425ac500&lt;br/&gt;
org/apache/derby/impl/services/timer/SingletonTimerFactory@56e25&lt;br/&gt;
6e2&lt;/p&gt;

&lt;p&gt;For more info, see thread at:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/ClassLoader-leaks--td18121374.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/ClassLoader-leaks--td18121374.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399325">DERBY-3745</key>
            <summary>Derby can leak classloaders in an app server environment</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Jul 2008 00:30:30 +0100</created>
                <updated>Mon, 25 Aug 2014 18:57:10 +0100</updated>
                            <resolved>Mon, 25 Aug 2008 21:30:00 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12609408" author="kmarsden" created="Tue, 1 Jul 2008 00:56:11 +0100"  >&lt;p&gt;One problem with setting the contextClasssLoader for the new threads is that we don&apos;t document that setContextClassLoader permission is required for derby.jar, so trying it I get java.security.AccessControlException: access denied (java.lang.RuntimePermission setContextClassLoader) using the default testing policy file.&lt;/p&gt;
</comment>
                            <comment id="12609672" author="kmarsden" created="Tue, 1 Jul 2008 19:37:08 +0100"  >&lt;p&gt;The only thing I can think of to do to fix this is to &lt;br/&gt;
1) Document that derby.jar requires getContextClassLoader/setContextClasssLoader privileges.&lt;br/&gt;
2) Change the code to attempt to set the context class loader to null for these threads if we have permissions and ignore security exceptions if we are not able to. (Leave the potential for class loader leaks)&lt;br/&gt;
3) Change sample, test and default policy files to have these privileges.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12611708" author="kmarsden" created="Tue, 8 Jul 2008 18:27:38 +0100"  >&lt;p&gt;Attached is a patch for this issue for the 10.3 branch.  This takes care of the leak for 10.3, but the same change on trunk still shows a leak related to com/ibm/lang/management/MemoryNotificationThread&lt;br/&gt;
There must be some additional change related to jmx that is necessary.  I  would like to go ahead and check in this change to get a fix for 10.3 and track down the trunk issue separately.&lt;/p&gt;

&lt;p&gt;I wasn&apos;t sure how to add a test for this, so didn&apos;t.  I verified manually using the IBM Heap analyzer and the test program supplied by the user.&lt;/p&gt;

&lt;p&gt;I am running regresssion tests now.&lt;/p&gt;</comment>
                            <comment id="12611813" author="kmarsden" created="Tue, 8 Jul 2008 22:32:22 +0100"  >&lt;p&gt;regression tests passed.&lt;/p&gt;</comment>
                            <comment id="12611962" author="knutanders" created="Wed, 9 Jul 2008 11:04:37 +0100"  >&lt;p&gt;I don&apos;t know enough about class loading issues to tell whether or not the approach is OK. A couple of questions, though:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is it Derby&apos;s responsibility to set the context class loader for every thread that it spawns, or should the application rather set the context class loader to the appropriate value (null?) when loading the Derby driver? It sounds to me like Derby behaves as expected by using the current context class loader, and I don&apos;t know if changing it could cause problems in other scenarios.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Does Derby prevent the class loader from being garbage collected after the driver has been unloaded? If not, I would think it was the application&apos;s responsibility to unload the driver when it wants all resources to be freed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other than that, the patch looks fine to me. Some nits:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You may want to use spaces instead of tabs in SingletonTimerFactory, since that&apos;s what&apos;s used in the rest of the file.&lt;/li&gt;
	&lt;li&gt;Some of the @param tags in PrivilegedThreadOps are empty.&lt;/li&gt;
	&lt;li&gt;SecurityException is a RuntimeException, so the PrivilegedThreadOps should use PrivilegedAction instead of PrivilegedExceptionAction (if the code in the catch block is ever executed, the cast to SecurityException is guaranteed to fail since PrivilegedActionExceptions only wrap checked exceptions).&lt;/li&gt;
	&lt;li&gt;Typo in javadoc for setCCLIfPrivileged: priveleged --&amp;gt; privileged&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12612183" author="kmarsden" created="Wed, 9 Jul 2008 17:43:57 +0100"  >&lt;p&gt;Thanks Knut Anders for reviewing the patch.&lt;br/&gt;
Here is a patch updated with Knut&apos;s comments.  I asked the user that filed this case and suggested the fix to comment on the  questions. My understanding of the class loader issues is somewhat limited so I myself am not that comfortable with the fix.  Perhaps Dan could take a look too.&lt;/p&gt;
</comment>
                            <comment id="12612200" author="kmarsden" created="Wed, 9 Jul 2008 18:31:20 +0100"  >&lt;p&gt;The reporting user is out this week.  I will let this patch sit until he returns or we get answers to Knut&apos;s questions.&lt;/p&gt;</comment>
                            <comment id="12612304" author="bkail" created="Wed, 9 Jul 2008 23:15:33 +0100"  >&lt;p&gt;If code is creating a background Thread for its own purposes, then it needs to ensure that it does not hold on to an application class loader.  This is true for any code intended to run in an application server environment.&lt;/p&gt;

&lt;p&gt;If the driver is unloaded, then Derby did seem to properly stop threads in the testcase I looked at.  However, in an application server environment, the Derby driver cannot be unloaded when a single application is stopped since there can be many applications running that all depend on Derby.&lt;/p&gt;</comment>
                            <comment id="12612466" author="knutanders" created="Thu, 10 Jul 2008 13:41:33 +0100"  >&lt;p&gt;Thanks for the new patch! If I have understood correctly what a context class loader is, I don&apos;t think the patch should do any harm (none of Derby&apos;s daemon threads should ever use the context class loader, should they?). I just had a feeling that we might have been trying to fix the problem the wrong place, but I think you&apos;re right that the impact of the fix should be limited, so I&apos;m fine with it.&lt;/p&gt;

&lt;p&gt;If it is the case that some of Derby&apos;s threads are not stopped when the driver is unloaded, that should be treated as a bug, and a separate JIRA issue should be filed for it to get it fixed.&lt;/p&gt;

&lt;p&gt;(Two tiny nits: (a) one line in one of the comment in SingletonTimerFactory is indented with space+tab+space, and (b) trailing white-space has been added after the end-of-method brace in the same file)&lt;/p&gt;</comment>
                            <comment id="12612675" author="kmarsden" created="Thu, 10 Jul 2008 23:22:47 +0100"  >&lt;p&gt;Here is a patch for the trunk and I will port the same change to 10.4. It is the same as the 10.3 patch except for the change to JMXManagementService.java to save/set/restore the context class loader around ManagementFactory.getPlatformMBeanServer() which launches a thread, at least on IBM JVM&apos;s.&lt;/p&gt;

&lt;p&gt;I will follow up on trunk only with the doc change and template/default policy file change.&lt;/p&gt;</comment>
                            <comment id="12612805" author="knutanders" created="Fri, 11 Jul 2008 09:28:33 +0100"  >&lt;p&gt;It looks like the indentation is wrong in JMXManagementService.findServer().&lt;/p&gt;</comment>
                            <comment id="12615323" author="kmarsden" created="Mon, 21 Jul 2008 18:40:10 +0100"  >&lt;p&gt;Does anyone have thoughts as to whether the new permissions should go under Mandatory or Optional  permissions?&lt;/p&gt;</comment>
                            <comment id="12615398" author="kmarsden" created="Mon, 21 Jul 2008 21:10:44 +0100"  >&lt;p&gt;Attached is a patch to update the default and template policy files to contain.&lt;br/&gt;
  permission java.lang.RuntimePermission &quot;getClassLoader&quot;;&lt;br/&gt;
  permission java.lang.RuntimePermission &quot;setContextClassLoader&quot;;&lt;/p&gt;</comment>
                            <comment id="12615450" author="kmarsden" created="Mon, 21 Jul 2008 23:17:57 +0100"  >&lt;p&gt;Doc update for new permissions requirement. I put it under mandatory.&lt;/p&gt;</comment>
                            <comment id="12615676" author="kmarsden" created="Tue, 22 Jul 2008 18:09:17 +0100"  >&lt;p&gt;derby-3745_doc_diff.txt, derby-3745_policy_files_diff.txt ready for review.&lt;/p&gt;</comment>
                            <comment id="12615681" author="djd" created="Tue, 22 Jul 2008 18:15:59 +0100"  >&lt;p&gt;Why unset and then reset the context class loader for the current thread? Why not just set the class loader for the created thread to null? Simpler code.&lt;/p&gt;</comment>
                            <comment id="12615685" author="djd" created="Tue, 22 Jul 2008 18:22:59 +0100"  >&lt;p&gt;&amp;gt; Doc update for new permissions requirement. I put it under mandatory. &lt;/p&gt;

&lt;p&gt;Why mandatory? The patch is not coded that the permission is mandatory, nor is it required in all situations.&lt;/p&gt;</comment>
                            <comment id="12615689" author="kmarsden" created="Tue, 22 Jul 2008 18:33:05 +0100"  >&lt;p&gt;In the instance of the Timer thread and the thread  that starts with the MBean server I don&apos;t have direct access to the thread so cannot do that.  In the case of the daemon threads I tried setting the context class loader directly but found it still leaked (not sure why) so I reverted to this method.&lt;/p&gt;

&lt;p&gt;I&apos;ll change the doc to make the permissions optional.&lt;/p&gt;</comment>
                            <comment id="12615702" author="djd" created="Tue, 22 Jul 2008 19:05:50 +0100"  >&lt;p&gt;Probably good to comment in the getDaemonThread() case why it&apos;s not being done the simpler way, though I&apos;m pretty sure the simpler way will have the same effect. It would be good to investigate why the leak did not go away when setting the context class loader directly for the new thread.&lt;/p&gt;</comment>
                            <comment id="12615705" author="kmarsden" created="Tue, 22 Jul 2008 19:11:04 +0100"  >&lt;p&gt;Thanks Dan. I&apos;ll take another look and at least add the comment if I can&apos;t figure it out.&lt;/p&gt;
</comment>
                            <comment id="12615797" author="kmarsden" created="Tue, 22 Jul 2008 22:30:54 +0100"  >&lt;p&gt;Since we are listing the permissions as optional,  I wonder if it makes sense to add them to the default and template policy files after all, since these are geared more toward starting network server from the command line where the leak probably wouldn&apos;t be an issue.&lt;/p&gt;</comment>
                            <comment id="12615824" author="kmarsden" created="Tue, 22 Jul 2008 23:53:26 +0100"  >&lt;p&gt;Of course on retry it all seems to work properly now to set the context classloader directly on the thread.  I can&apos;t say what I was doing wrong before.&lt;br/&gt;
Attached is derby-3745_BaseMonitor_cleanup_diff.txt to clean it up.&lt;/p&gt;</comment>
                            <comment id="12616690" author="kmarsden" created="Thu, 24 Jul 2008 23:34:08 +0100"  >&lt;p&gt;Well I have a 50./50 chance of getting this right, so I guess I will say let&apos;s &lt;b&gt;not&lt;/b&gt;  add the new permissions to the server default and template policy files, since they seem primarily focussed on network server permissions needed when starting from the command  line.  I will  make the doc change to make these permissions optional and will commit the patch derby-3745_Base_Monitor_cleanup_diff.txt.  Let me know if you have any concerns.&lt;/p&gt;</comment>
                            <comment id="12619640" author="djd" created="Mon, 4 Aug 2008 19:52:19 +0100"  >&lt;p&gt;-1 on the patch that added the class PrivilegedThreadOps.&lt;/p&gt;

&lt;p&gt;This class allows other code to bypass security and inherit permissions that are granted to Derby&apos;s codebase.&lt;/p&gt;

&lt;p&gt;Writing a utility class for privileged blocks is strongly discouraged by the Java documentation: &quot;Do not be tempted to write a utility class that itself calls doPrivileged as that could lead to security holes. &quot;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/javase/6/docs/technotes/guides/security/doprivileged.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/technotes/guides/security/doprivileged.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12619645" author="kmarsden" created="Mon, 4 Aug 2008 19:58:41 +0100"  >&lt;p&gt;Thanks Dan for catching this.  I will make yet another go at the patch.&lt;br/&gt;
Does this mean we should open a bug to remove PrivilegedFileOps as well?  That was added to the code quite a while ago.&lt;/p&gt;

</comment>
                            <comment id="12621986" author="kmarsden" created="Tue, 12 Aug 2008 22:24:36 +0100"  >&lt;p&gt;Attached is a trunk patch to inline the doPrivileged blocks and remove PrivilegedThreadOps.  Please review.&lt;/p&gt;</comment>
                            <comment id="12622325" author="suranjay" created="Wed, 13 Aug 2008 20:25:07 +0100"  >&lt;p&gt;derby-3745_removePrivThreadOps_diff.txt reviewed. &lt;br/&gt;
Except for a few very trivial style nits (missing spaces) in a few places, the inlining of the PrivilegedThread operations seems equivalent to the utility method calls.&lt;/p&gt;</comment>
                            <comment id="12622602" author="kmarsden" created="Thu, 14 Aug 2008 17:44:50 +0100"  >&lt;p&gt;It would be good to get the last patch for this issue (revision 685674) merged to 10.4 for the release, but we should wait until test results are in on the trunk fix first.  I won&apos;t be around, so hopefully someone else can merge the fix back to 10.4.&lt;/p&gt;

</comment>
                            <comment id="12622606" author="myrna" created="Thu, 14 Aug 2008 18:01:42 +0100"  >&lt;p&gt;I can take care of the backport...&lt;/p&gt;</comment>
                            <comment id="12622862" author="kmarsden" created="Fri, 15 Aug 2008 13:30:48 +0100"  >&lt;p&gt;Myrna said this fix was causing a new build warning. Unfortunately I am not seeing the build warning in my environment, so I can&apos;t verify the fix, but I think this patch should fix it.  Could someone who is seeing the warning give this a try.  The warning is &lt;br/&gt;
C:\nightlies\main\src\opensource\java\engine\org\apache\derby\impl\services\jmx\JMXManagementService.java uses unchecked or unsafe operations.&lt;br/&gt;
my jdk15lib points to this jvm:&lt;/p&gt;

&lt;p&gt;java version &quot;1.5.0_13&quot;&lt;br/&gt;
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_13-b05)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 1.5.0_13-b05, mixed mode)&lt;/p&gt;</comment>
                            <comment id="12622905" author="myrna" created="Fri, 15 Aug 2008 17:09:03 +0100"  >&lt;p&gt;Your patch fixes the warning. &lt;br/&gt;
Did you run tests, or should I?&lt;/p&gt;
</comment>
                            <comment id="12622907" author="kmarsden" created="Fri, 15 Aug 2008 17:17:17 +0100"  >&lt;p&gt;I ran suites.All and all passed.  Since derbyall doesn&apos;t touch JMX I didn&apos;t run that.&lt;/p&gt;</comment>
                            <comment id="12622951" author="myrna" created="Fri, 15 Aug 2008 19:03:12 +0100"  >&lt;p&gt;I committed the patch to fix the build warning with revision 686296. Thanks Kathey.&lt;/p&gt;</comment>
                            <comment id="12623506" author="myrna" created="Tue, 19 Aug 2008 01:06:56 +0100"  >&lt;p&gt;The patch was committed.&lt;br/&gt;
I&apos;m leaving this open for backport to 10.4, but I&apos;m not sure I can get it done in time for 10.4 point release. If anyone else has some cycles...&lt;/p&gt;</comment>
                            <comment id="12624585" author="mamtas" created="Fri, 22 Aug 2008 07:17:56 +0100"  >&lt;p&gt;I am planning on backporting the attached patch to 10.4 codeline in few minutes. The backporting includes revisions 679620, 685674 and 686296 from the trunk. &lt;/p&gt;

&lt;p&gt;derbyall tests ran fine. I ran junit test suites with classes and with jar files after backporting the changes to my 10.4 client. With classes, I ran into &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3836&quot; title=&quot;On 10.4 branch JMX tests fail with security exceptions when run against classes &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3836&quot;&gt;&lt;del&gt;DERBY-3836&lt;/del&gt;&lt;/a&gt; but didn&apos;t run into &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3836&quot; title=&quot;On 10.4 branch JMX tests fail with security exceptions when run against classes &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3836&quot;&gt;&lt;del&gt;DERBY-3836&lt;/del&gt;&lt;/a&gt; with jar files. I did run into some out of memory issues but I think it might be local to my machine because of all the other processes running on the machine and probably not enough memory to the junit tests when I specified -Xmx1024m. I will keep an eye on the 10.4 test runs after I commit the changes. &lt;/p&gt;</comment>
                            <comment id="12624605" author="knutanders" created="Fri, 22 Aug 2008 08:39:25 +0100"  >&lt;p&gt;The patch looks fine to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="12625501" author="rhillegas" created="Mon, 25 Aug 2008 21:30:00 +0100"  >&lt;p&gt;Resolving this issue so that it will appear in the 10.4.2 release notes. It appears to me that the patch has been ported to 10.4.&lt;/p&gt;</comment>
                            <comment id="12647350" author="dagw" created="Thu, 13 Nov 2008 18:05:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3887&quot; title=&quot;Embedded Derby fails under JBoss because of JMX-related conflicts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3887&quot;&gt;&lt;del&gt;DERBY-3887&lt;/del&gt;&lt;/a&gt; points to a possible problem with the fix for this issue. I do not know&lt;br/&gt;
what the right solution is, though.&lt;/p&gt;</comment>
                            <comment id="14109332" author="jira-bot" created="Mon, 25 Aug 2014 18:20:14 +0100"  >&lt;p&gt;Commit 1620379 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1620379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1620379&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6619&quot; title=&quot;After silently swallowing SecurityExceptions, Derby can leak class loaders&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6619&quot;&gt;&lt;del&gt;DERBY-6619&lt;/del&gt;&lt;/a&gt; After silently swallowing SecurityExceptions, Derby can leak class loaders&lt;/p&gt;

&lt;p&gt;Patch derby-6619-2.&lt;/p&gt;

&lt;p&gt;The fix introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt; correctly is there in order to&lt;br/&gt;
protect against the case where the thread that starts Derby, has a&lt;br/&gt;
context class loader that is different from the system class&lt;br/&gt;
loader. In such cases, if the timer thread inherits the context class&lt;br/&gt;
loader, the context class loader will stay in memory until the Derby&lt;br/&gt;
engine is shut down, even if all other references to the class loader&lt;br/&gt;
are gone.&lt;/p&gt;

&lt;p&gt;If the context class loader is the same as the system class loader, on&lt;br/&gt;
the other hand, such a &quot;leak&quot; would not be a problem, since the system&lt;br/&gt;
class loader will stay in memory until the JVM is shut down anyway.&lt;/p&gt;

&lt;p&gt;We take advantage of this and only attempt to change the context class&lt;br/&gt;
loader if it is different from the system class loader.  With this&lt;br/&gt;
patch, no warning is printed to derby.log when starting the server&lt;br/&gt;
from the command line, and there&apos;s no warning when starting the server&lt;br/&gt;
using the API with a security manager installed when the context class&lt;br/&gt;
loader hasn&apos;t been changed from the default. However, if the server is&lt;br/&gt;
started using the API with a non-default context class loader, we do&lt;br/&gt;
see warnings in derby.log if a security manager is installed and the&lt;br/&gt;
permission to set the class loader is missing.&lt;/p&gt;

&lt;p&gt;Added tests for this behavior. Moved utility methods from&lt;br/&gt;
UpgradeClassLoader to ClassLoaderTestSetup, a new decorator. It seemed&lt;br/&gt;
more logical to put them there to allow reuse.&lt;/p&gt;</comment>
                            <comment id="14109356" author="jira-bot" created="Mon, 25 Aug 2014 18:33:52 +0100"  >&lt;p&gt;Commit 1620385 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1620385&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1620385&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6619&quot; title=&quot;After silently swallowing SecurityExceptions, Derby can leak class loaders&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6619&quot;&gt;&lt;del&gt;DERBY-6619&lt;/del&gt;&lt;/a&gt; After silently swallowing SecurityExceptions, Derby can leak class loaders&lt;/p&gt;

&lt;p&gt;Patch derby-6619-2-refinement which implements the following&lt;br/&gt;
refinements to the test to avoid changing the context class loader in&lt;br/&gt;
SingletonTimerFactory (suggested by Knut):&lt;/p&gt;

&lt;p&gt;The orginal test tested against the system class loader. This new patch will:&lt;/p&gt;

&lt;p&gt;1) Check if the context class loader is the same as the loader of the&lt;br/&gt;
SingletonTimerFactory class (that is, the class loader from which&lt;br/&gt;
Derby classes are loaded). Even if this isn&apos;t the same as the system&lt;br/&gt;
class loader, it would be safe to skip the workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt;,&lt;br/&gt;
since the class loader for the Derby classes would not be eligible for&lt;br/&gt;
garbage collection until the engine is shut down anyway. This would&lt;br/&gt;
prevent some more false positives from being reported in&lt;br/&gt;
derby.log. I&apos;d assume this is a kind of false positive that could&lt;br/&gt;
easily occur in an application server environment where the Derby&lt;br/&gt;
classes are not found on the system class loader.&lt;/p&gt;

&lt;p&gt;2) Check against Thread.class.getClassLoader() instead of&lt;br/&gt;
ClassLoader.getSystemClassLoader(). Normally, those two checks would&lt;br/&gt;
be identical. If however the setup is such that they aren&apos;t identical,&lt;br/&gt;
we&apos;d still know that the class loader actually used for system classes&lt;br/&gt;
such as the Thread class would have to stay in memory for as long as&lt;br/&gt;
the timer thread is alive, regardless of the context class loader of&lt;br/&gt;
the thread, so the workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt; can be skipped if it&apos;s&lt;br/&gt;
the same as the context class loader. The check will be a bit more&lt;br/&gt;
specific this way.&lt;/p&gt;</comment>
                            <comment id="14109394" author="jira-bot" created="Mon, 25 Aug 2014 18:53:34 +0100"  >&lt;p&gt;Commit 1620391 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/branches/10.11&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1620391&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1620391&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6619&quot; title=&quot;After silently swallowing SecurityExceptions, Derby can leak class loaders&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6619&quot;&gt;&lt;del&gt;DERBY-6619&lt;/del&gt;&lt;/a&gt; After silently swallowing SecurityExceptions, Derby can leak class loaders&lt;/p&gt;

&lt;p&gt;Backport from trunk svn 1620378.&lt;/p&gt;

&lt;p&gt;Patch derby-6619-2.&lt;/p&gt;

&lt;p&gt;The fix introduced in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt; correctly is there in order to&lt;br/&gt;
protect against the case where the thread that starts Derby, has a&lt;br/&gt;
context class loader that is different from the system class&lt;br/&gt;
loader. In such cases, if the timer thread inherits the context class&lt;br/&gt;
loader, the context class loader will stay in memory until the Derby&lt;br/&gt;
engine is shut down, even if all other references to the class loader&lt;br/&gt;
are gone.&lt;/p&gt;

&lt;p&gt;If the context class loader is the same as the system class loader, on&lt;br/&gt;
the other hand, such a &quot;leak&quot; would not be a problem, since the system&lt;br/&gt;
class loader will stay in memory until the JVM is shut down anyway.&lt;br/&gt;
We take advantage of this and only attempt to change the context class&lt;br/&gt;
loader if it is different from the system class loader. With this&lt;br/&gt;
patch, no warning is printed to derby.log when starting the server&lt;br/&gt;
from the command line, and there&apos;s no warning when starting the server&lt;br/&gt;
using the API with a security manager installed when the context class&lt;br/&gt;
loader hasn&apos;t been changed from the default. However, if the server is&lt;br/&gt;
started using the API with a non-default context class loader, we do&lt;br/&gt;
see warnings in derby.log if a security manager is installed and the&lt;br/&gt;
permission to set the class loader is missing.&lt;/p&gt;

&lt;p&gt;Added tests for this behavior. Moved utility methods from&lt;br/&gt;
UpgradeClassLoader to ClassLoaderTestSetup, a new decorator. It seemed&lt;br/&gt;
more logical to put them there to allow reuse.&lt;/p&gt;</comment>
                            <comment id="14109400" author="jira-bot" created="Mon, 25 Aug 2014 18:57:10 +0100"  >&lt;p&gt;Commit 1620392 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dagw&quot; class=&quot;user-hover&quot; rel=&quot;dagw&quot;&gt;Dag H. Wanvik&lt;/a&gt; in branch &apos;code/branches/10.11&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1620392&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1620392&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6619&quot; title=&quot;After silently swallowing SecurityExceptions, Derby can leak class loaders&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6619&quot;&gt;&lt;del&gt;DERBY-6619&lt;/del&gt;&lt;/a&gt; After silently swallowing SecurityExceptions, Derby can leak class loaders&lt;/p&gt;

&lt;p&gt;Backported from trunk svn 1620385.&lt;/p&gt;

&lt;p&gt;Patch derby-6619-2-refinement which implements the following&lt;br/&gt;
refinements to the test to avoid changing the context class loader in&lt;br/&gt;
SingletonTimerFactory (suggested by Knut):&lt;/p&gt;

&lt;p&gt;The orginal test tested against the system class loader. This new&lt;br/&gt;
patch will:&lt;/p&gt;

&lt;p&gt;1) Check if the context class loader is the same as the loader of the&lt;br/&gt;
SingletonTimerFactory class (that is, the class loader from which&lt;br/&gt;
Derby classes are loaded). Even if this isn&apos;t the same as the system&lt;br/&gt;
class loader, it would be safe to skip the workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt;,&lt;br/&gt;
since the class loader for the Derby classes would not be eligible for&lt;br/&gt;
garbage collection until the engine is shut down anyway. This would&lt;br/&gt;
prevent some more false positives from being reported in&lt;br/&gt;
derby.log. I&apos;d assume this is a kind of false positive that could&lt;br/&gt;
easily occur in an application server environment where the Derby&lt;br/&gt;
classes are not found on the system class loader.&lt;/p&gt;

&lt;p&gt;2) Check against Thread.class.getClassLoader() instead of&lt;br/&gt;
ClassLoader.getSystemClassLoader(). Normally, those two checks would&lt;br/&gt;
be identical. If however the setup is such that they aren&apos;t identical,&lt;br/&gt;
we&apos;d still know that the class loader actually used for system classes&lt;br/&gt;
such as the Thread class would have to stay in memory for as long as&lt;br/&gt;
the timer thread is alive, regardless of the context class loader of&lt;br/&gt;
the thread, so the workaround for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3745&quot; title=&quot;Derby can leak classloaders in an app server environment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3745&quot;&gt;&lt;del&gt;DERBY-3745&lt;/del&gt;&lt;/a&gt; can be skipped if it&apos;s&lt;br/&gt;
the same as the context class loader. The check will be a bit more&lt;br/&gt;
specific this way.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12401236">DERBY-3803</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12721691">DERBY-6619</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12405427">DERBY-3887</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12386580" name="cdevbabejgjd.html" size="9915" author="kmarsden" created="Mon, 21 Jul 2008 23:17:57 +0100"/>
                            <attachment id="12385520" name="derby-3745_10.3_diff.txt" size="9668" author="kmarsden" created="Tue, 8 Jul 2008 18:27:38 +0100"/>
                            <attachment id="12385641" name="derby-3745_10.3_diff2.txt" size="9756" author="kmarsden" created="Wed, 9 Jul 2008 17:43:57 +0100"/>
                            <attachment id="12386666" name="derby-3745_BaseMonitor_cleanup_diff.txt" size="1613" author="kmarsden" created="Tue, 22 Jul 2008 23:53:26 +0100"/>
                            <attachment id="12386579" name="derby-3745_doc_diff.txt" size="1793" author="kmarsden" created="Mon, 21 Jul 2008 23:17:57 +0100"/>
                            <attachment id="12388310" name="derby-3745_fix_build_warning_diff.txt" size="1574" author="kmarsden" created="Fri, 15 Aug 2008 13:30:48 +0100"/>
                            <attachment id="12386567" name="derby-3745_policy_files_diff.txt" size="1662" author="kmarsden" created="Mon, 21 Jul 2008 21:10:44 +0100"/>
                            <attachment id="12388085" name="derby-3745_removePrivThreadOps_diff.txt" size="15239" author="kmarsden" created="Tue, 12 Aug 2008 22:24:36 +0100"/>
                            <attachment id="12385810" name="derby-3745_trunk_diff.txt" size="7564" author="kmarsden" created="Thu, 10 Jul 2008 23:22:47 +0100"/>
                            <attachment id="12662596" name="derby.log" size="15559" author="dagw" created="Mon, 18 Aug 2014 23:12:24 +0100"/>
                            <attachment id="12388717" name="derby3745_backport_to_104_diff_v1.txt" size="15273" author="mamtas" created="Fri, 22 Aug 2008 07:17:55 +0100"/>
                            <attachment id="12388718" name="derby3745_backport_to_104_stat_v1.txt" size="402" author="mamtas" created="Fri, 22 Aug 2008 07:17:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 9 Jul 2008 10:04:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23821</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xvb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39305</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>