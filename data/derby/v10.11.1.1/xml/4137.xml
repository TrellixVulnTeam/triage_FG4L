<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4137/DERBY-4137.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4137] OOM issue using XA with timeouts</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4137</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When using JTA for transaction control and a transaction timeout is set,&lt;br/&gt;
EmbedXAResource ends up calling XATransactionState.scheduleTimeoutTask() which&lt;br/&gt;
in turn registers a timeoutTask with java.util.Timer. In the normal case where&lt;br/&gt;
the transaction finishes before the timeout, XATransactionState.xa_finalize()&lt;br/&gt;
then calls timeoutTask.cancel(). So far this so good. The problem, however, is&lt;br/&gt;
that java.util.TimerTask.cancel() does not actually remove the task from the&lt;br/&gt;
timer queue, meaning that a strong reference to the timeoutTask is kept (and&lt;br/&gt;
through that to XATransactionState, the EmbedConnection, etc). The reference&lt;br/&gt;
is not removed until the time at which the timeout would have fired, which can&lt;br/&gt;
be a long time. Under load this can quickly lead to an OOM situation.&lt;/p&gt;

&lt;p&gt;A simple fix is to call Timer.purge() every so often. While the javadocs talk&lt;br/&gt;
about purge() being rarely needed and that it&apos;s not extremely cheap, I&apos;ve&lt;br/&gt;
found that calling it after every cancel() is the best approach, for several&lt;br/&gt;
reasons: 1) the scenario here is that almost all tasks are cancelled, and&lt;br/&gt;
hence this somewhat fits the Timer.purge() description of an &quot;application that&lt;br/&gt;
cancels a large number of tasks&quot;; 2) there usually isn&apos;t a very large number&lt;br/&gt;
of simultaneous transactions, and hence purge() is actually quite cheap; 3)&lt;br/&gt;
this ensures the strong reference is immediately removed, allowing the GC to&lt;br/&gt;
do a better job. Interestingly enough, I&apos;ve had this exact same issue on a&lt;br/&gt;
different type of db, and I had tested the purge() there and found it to be in&lt;br/&gt;
the sub-microsecond range for 100 transactions (or similar - I don&apos;t recall&lt;br/&gt;
the exact data), i.e. completely negligible.&lt;/p&gt;

&lt;p&gt;In short, my suggestion is to change xa_finalize as follows:&lt;/p&gt;

&lt;p&gt;    synchronized void xa_finalize() {&lt;br/&gt;
        if (timeoutTask != null) &lt;/p&gt;
{
            timeoutTask.cancel();
            Monitor.getMonitor().getTimerFactory().
                    getCancellationTimer().purge();
        }
&lt;p&gt;        isFinished = true;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;As a temporary workaround, applications can do this themselves, i.e.&lt;br/&gt;
add something like the following whenever they close a Connection:&lt;/p&gt;

&lt;p&gt;  import org.apache.derby.iapi.services.monitor.Monitor;&lt;br/&gt;
  Monitor.getMonitor().getTimerFactory().getCancellationTimer().purge();&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12421766">DERBY-4137</key>
            <summary>OOM issue using XA with timeouts</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="ronald@innovation.ch">Ronald Tschalaer</reporter>
                        <labels>
                            <label>derby_triage10_5_2</label>
                    </labels>
                <created>Wed, 1 Apr 2009 13:33:40 +0100</created>
                <updated>Wed, 3 Sep 2014 09:31:25 +0100</updated>
                            <resolved>Thu, 16 Jun 2011 11:23:46 +0100</resolved>
                                    <version>10.4.2.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12694533" author="ronald@innovation.ch" created="Wed, 1 Apr 2009 15:00:17 +0100"  >&lt;p&gt;I just noticed that GenericStatementContext has potentially the same issue (I haven&apos;t delved&lt;br/&gt;
deep enough to understand the lifecyle of instances of that class, so it may or may not be an&lt;br/&gt;
issue there).&lt;/p&gt;</comment>
                            <comment id="12726623" author="rhillegas" created="Thu, 2 Jul 2009 19:49:18 +0100"  >&lt;p&gt;Triaged July 2, 2009: Marked as Crash and assigned normal urgency.&lt;/p&gt;</comment>
                            <comment id="12883131" author="kristwaa" created="Mon, 28 Jun 2010 13:57:10 +0100"  >&lt;p&gt;Note that the proposed fix uses a method introduced in Java SE 5.0. It&apos;ll be a while before we can drop J2SE 1.4 support...&lt;br/&gt;
We can still make the fix work when using Java SE 5.0, and the workaround can also be used where appropriate.&lt;/p&gt;</comment>
                            <comment id="13045280" author="kristwaa" created="Tue, 7 Jun 2011 06:25:13 +0100"  >&lt;p&gt;Attaching patch 1a, which implements the fix suggested by Ronald. I also added a test to the lowmem suite.&lt;br/&gt;
The fix will only be available when running with Java 1.5 or newer, so Java 1.4 will still have the bug.&lt;/p&gt;

&lt;p&gt;Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13045282" author="kristwaa" created="Tue, 7 Jun 2011 06:32:53 +0100"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5264&quot; title=&quot;OOM issue using XA with timeouts with Java 1.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5264&quot;&gt;&lt;del&gt;DERBY-5264&lt;/del&gt;&lt;/a&gt; to track the fact that there is no planned fix for this in Derby when running with Java 1.4.&lt;/p&gt;</comment>
                            <comment id="13045398" author="knutanders" created="Tue, 7 Jun 2011 13:39:02 +0100"  >&lt;p&gt;The patch removes the initialization of the timeoutTask field in CancelXATransactionTask&apos;s constructor, but I can&apos;t see that it&apos;s initialized anywhere else. Does it mean it&apos;s always null now?&lt;/p&gt;</comment>
                            <comment id="13045835" author="kristwaa" created="Wed, 8 Jun 2011 09:30:41 +0100"  >&lt;p&gt;Thanks for catching that blunder, Knut!&lt;/p&gt;

&lt;p&gt;Attaching a revised patch 1b. I additionally fixed a typo, and increased and commented on the timeout value used in the test. The test didn&apos;t fail even though timeoutTask was always null because of the lowish timeout (10 seconds, the timer itself removed the tasks before an OOME occurred).&lt;/p&gt;

&lt;p&gt;Rerunning regression tests.&lt;br/&gt;
Revised patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13045872" author="knutanders" created="Wed, 8 Jun 2011 10:53:08 +0100"  >&lt;p&gt;Thanks. The patch makes more sense to me now. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Does the OOME happen because there are too many CancelXATransactionTask objects, or because the CancelXATransactionTask objects reference too many other objects via the XATransactionState? If the latter, would it be sufficient to clear the reference to the XATransactionState object when calling cancel()? I see that CancelQueryTask in GenericStatementContext uses that technique. If possible, it would be good to avoid calling the purge() method on every XA commit/rollback, both because of the complexity caused by reflection and because the javadoc warns about its performance impact.&lt;/p&gt;</comment>
                            <comment id="13045908" author="kristwaa" created="Wed, 8 Jun 2011 12:35:36 +0100"  >&lt;p&gt;&amp;gt; Does the OOME happen because there are too many CancelXATransactionTask objects, or because the CancelXATransactionTask objects reference too many other objects via the XATransactionState?&lt;/p&gt;

&lt;p&gt;Both, but the primary factor is the objects referenced via XATransactionState.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Current (top three at OOME):&lt;br/&gt;
class [B 	91172 	7859790&lt;br/&gt;
class org.apache.derby.jdbc.XATransactionState 	43581 	1830402&lt;br/&gt;
class org.apache.derby.jdbc.XATransactionState$CancelXATransactionTask 	43581 	1220268&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Nullifying reference to XATransactionState (top three at OOME)&lt;br/&gt;
class org.apache.derby.jdbc.XATransactionState$CancelXATransactionTask 	261134 	7311752&lt;br/&gt;
class [B 	4010 	1584124&lt;br/&gt;
class [Ljava.util.TimerTask; 	1 	1048584 &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The memory requirements are decided by the transaction rate (# of objects) and the timeout value (lifetime of objects).&lt;br/&gt;
CancelXATransactionTask seems to occupy 28 bytes, which is rather small. I have no idea what kind of transaction rates and timeout values people are using, but maybe the alternative solution you are proposing will be good enough for most use cases?&lt;/p&gt;

&lt;p&gt;I&apos;ll write a patch for it.&lt;/p&gt;</comment>
                            <comment id="13046395" author="knutanders" created="Thu, 9 Jun 2011 09:34:08 +0100"  >&lt;p&gt;So it sounds like clearing the reference should at least reduce the problem considerably. It&apos;s worth trying out. If it turns out not to be enough in all scenarios, we can always add the call to purge() back. Given that the timer queue isn&apos;t very long, it might be an acceptable cost to do the purging every time an XA transaction is committed/aborted when a tx timeout is enabled.&lt;/p&gt;</comment>
                            <comment id="13047182" author="kristwaa" created="Fri, 10 Jun 2011 14:37:22 +0100"  >&lt;p&gt;Attaching patch 2a, which reduces the footprint of the cancellation task object.&lt;/p&gt;

&lt;p&gt;I made the cancellation task class static, and made it accept a reference to the XAState object. When the task is canceled, which happens when the XA transaction succeeds within the timeout value, the reference to the XAState object is cleared.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, the memory usage when using XA timeouts is a function of the transaction rate and the timeout value. Setting the timeout value very high is not a good idea (i.e. several hours or days).&lt;/p&gt;

&lt;p&gt;If this fix is insufficient, we can as already mentioned add the purge functionality.&lt;/p&gt;

&lt;p&gt;suites.All and &apos;ant junit-lowmem&apos; passed.&lt;br/&gt;
Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="13050333" author="kristwaa" created="Thu, 16 Jun 2011 11:23:47 +0100"  >&lt;p&gt;Committed patch 2a to trunk with revision 1136363.&lt;br/&gt;
Awaiting test results from nightlies before backporting.&lt;/p&gt;</comment>
                            <comment id="13053134" author="knutanders" created="Wed, 22 Jun 2011 09:54:48 +0100"  >&lt;p&gt;When backporting this issue, include the change in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5291&quot; title=&quot;test failure: NullPointerException with J2ME (weme 6.2) in testDerby4137_TransactionTimeoutSpecifiedNotExceeded(org.apache.derbyTesting.functionTests.tests.memory.XAMemTest) &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5291&quot;&gt;&lt;del&gt;DERBY-5291&lt;/del&gt;&lt;/a&gt; to disable the test on Java ME.&lt;/p&gt;</comment>
                            <comment id="13059810" author="kristwaa" created="Tue, 5 Jul 2011 11:11:49 +0100"  >&lt;p&gt;Merged fixes back to 10.5:&lt;br/&gt;
  10.8: r1142956 (with manual conflict resolution in memoy/_Suite class)&lt;br/&gt;
  10.7: r1142957&lt;br/&gt;
  10.6: r1142958&lt;br/&gt;
  10.5: r1142960&lt;/p&gt;

&lt;p&gt;Got merge conflicts on 10.4.&lt;/p&gt;</comment>
                            <comment id="14119556" author="knutanders" created="Wed, 3 Sep 2014 09:31:25 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12509421">DERBY-5264</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12518023">DERBY-5375</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12637922">DERBY-6114</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12511145">DERBY-5291</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12481663" name="derby-4137-1a-purge_on_cancel.diff" size="7257" author="kristwaa" created="Tue, 7 Jun 2011 06:25:13 +0100"/>
                            <attachment id="12481662" name="derby-4137-1a-purge_on_cancel.stat" size="237" author="kristwaa" created="Tue, 7 Jun 2011 06:25:13 +0100"/>
                            <attachment id="12481787" name="derby-4137-1b-purge_on_cancel.diff" size="8307" author="kristwaa" created="Wed, 8 Jun 2011 09:30:41 +0100"/>
                            <attachment id="12482058" name="derby-4137-2a-reduce_memory_footprint.diff" size="6889" author="kristwaa" created="Fri, 10 Jun 2011 14:37:22 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Jul 2009 18:49:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24051</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10426"><![CDATA[Known fix]]></customfieldvalue>
    <customfieldvalue key="10427"><![CDATA[Workaround attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0err:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36211</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>