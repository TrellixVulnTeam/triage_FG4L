<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:29:28 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4095/DERBY-4095.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4095] Trigger  fails with ERROR 38000: The exception &apos;java.sql.SQLException: ResultSet not open  during VTIResultSet.getNextRowCore()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4095</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I don&apos;t have a reproduction without the user database yet, but it seems that recompiling the trigger stored prepared statements on upgrade is causing a result set to get closed and is causing the following error when firing a trigger in a global transaction.  The holdability in an XA  transaction is CLOSE_CURSORS_AT_COMMIT so it may be that there is a commit occurring as part of the process that is causing the problem.  I haven&apos;t tried yet with a regular transaction and using default holdability CLOSE_CURSORS_AT_COMMIT.   The error comes on a delete which fires an after delete statement trigger to insert some values into another table.&lt;/p&gt;

&lt;p&gt;Here is the stack trace:&lt;/p&gt;

&lt;p&gt;2009-03-13 14:10:49.375 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 1853834), (SESSIONID = 1), (DATABASE = derby/wpsdb), (DRDAID = null), Cleanup action starting&lt;/p&gt;

&lt;p&gt;2009-03-13 14:10:49.375 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 1853834), (SESSIONID = 1), (DATABASE = derby/wpsdb), (DRDAID = null), Failed Statement is: DELETE FROM XXX WHERE WSID=9&lt;/p&gt;

&lt;p&gt;ERROR 38000: The exception &apos;java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&apos; was thrown while evaluating an expression.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:294)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:554)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:326)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113)&lt;/p&gt;

&lt;p&gt;	at ReproRSClosed.main(ReproRSClosed.java:20)&lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308)&lt;/p&gt;

&lt;p&gt;	... 18 more&lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;/p&gt;

&lt;p&gt;	... 28 more&lt;/p&gt;

&lt;p&gt;============= begin nested exception, level (1) ===========&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113)&lt;/p&gt;

&lt;p&gt;	at ReproRSClosed.main(ReproRSClosed.java:20)&lt;/p&gt;

&lt;p&gt;Caused by: java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;/p&gt;

&lt;p&gt;	... 28 more&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (1) ===========&lt;/p&gt;

&lt;p&gt;============= begin nested exception, level (2) ===========&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:135)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:88)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:94)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2244)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4280)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4292)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:404)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:388)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:308)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176)&lt;/p&gt;

&lt;p&gt;	at org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(BrokeredStatement.java:113)&lt;/p&gt;

&lt;p&gt;	at ReproRSClosed.main(ReproRSClosed.java:20)&lt;/p&gt;

&lt;p&gt;============= end nested exception, level (2) ===========&lt;/p&gt;

&lt;p&gt;Cleanup action completed&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12416839">DERBY-4095</key>
            <summary>Trigger  fails with ERROR 38000: The exception &apos;java.sql.SQLException: ResultSet not open  during VTIResultSet.getNextRowCore()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Mar 2009 14:13:19 +0000</created>
                <updated>Mon, 5 Jul 2010 17:58:48 +0100</updated>
                            <resolved>Tue, 7 Apr 2009 00:51:45 +0100</resolved>
                                    <version>10.2.2.1</version>
                    <version>10.3.3.1</version>
                    <version>10.4.2.1</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.2.2.1</fixVersion>
                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12681734" author="kmarsden" created="Fri, 13 Mar 2009 14:45:24 +0000"  >&lt;p&gt;It does reproduce with a local transaction, autocommit off,  and connection holdability set to ResultSet.CLOSE_CURSORS_AT_COMMIT as well, so apparently there is an unexpected commit occurring.&lt;/p&gt;
</comment>
                            <comment id="12681958" author="kmarsden" created="Sat, 14 Mar 2009 00:36:36 +0000"  >&lt;p&gt;Most of what I have found on this issue today is quite mysterious to me, but I figure I will summarize it here for weekend contemplation and attack it again on Monday.&lt;/p&gt;

&lt;p&gt;Here is the little program I use to reproduce the issue. Unfortunately table and trigger information I can&apos;t post here, except to say there is a after delete statement trigger that inserts some rows into a table.&lt;/p&gt;

&lt;p&gt;import org.apache.derby.jdbc.EmbeddedDataSource;&lt;br/&gt;
import java.sql.*;&lt;/p&gt;


&lt;p&gt;public class ReproRSClosedLocal {&lt;/p&gt;

&lt;p&gt;    public static void main(String[] args) throws Exception &lt;/p&gt;
{
        EmbeddedDataSource ds = new EmbeddedDataSource();
        ds.setDatabaseName(&quot;mydb&quot;);
        Connection conn = ds.getConnection();
        conn.setAutoCommit(false);
        conn.setHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);
        Statement s = conn.createStatement();
        s.executeUpdate(&quot;DELETE FROM XXX WHERE WSID=9&quot;);
        conn.rollback();
        conn.close();



    }

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Notice the program rolls back so there should be no change from one run to the next in terms of what gets deleted and what trigger fires.&lt;/p&gt;

&lt;p&gt;I am not sure yet, what version the user database was upgraded from, just that with the database as I got it from the user, the trigger works fine up until 660483 where the version was bumped and we start getting the error.  What I have noticed is.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;With the failing and passing runs we get the same number of commits, so there doesn&apos;t seem to be an extra commit.&lt;/li&gt;
	&lt;li&gt;If I run the program at 660482 (before the version change) and &lt;b&gt;then&lt;/b&gt; move up to 660483 the trigger works fine.  I have to unzip the db to get the error again.&lt;/li&gt;
	&lt;li&gt;If I drop and recreate the trigger, and then run the program it runs fine.&lt;/li&gt;
	&lt;li&gt;If I connect with 10.4  with soft upgrade  the program works fine.&lt;/li&gt;
&lt;/ul&gt;





</comment>
                            <comment id="12682793" author="kmarsden" created="Tue, 17 Mar 2009 20:50:53 +0000"  >&lt;p&gt;In the failing case we go through VTIResultSet.reopenCore during execution of the trigger and close the ResultSet associated with the TriggerOldTransitionRows VTI.  Here is the trace when we go through this code.&lt;/p&gt;

&lt;p&gt;java.lang.Exception: TemporaryRowHolderResultSet.close()&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.close(TemporaryRowHolderResultSet.java:574)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.close(EmbedResultSet.java:596)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.VTIResultSet.reopenCore(VTIResultSet.java:258)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.reopenCore(ProjectRestrictResultSet.java:212)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(JoinResultSet.java:266)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:147)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(NormalizeResultSet.java:186)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:496)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:173)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:81)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:278)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:479)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:167)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1203)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:596)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:176)&lt;br/&gt;
	at ReproRSClosedLocal.main(ReproRSClosedLocal.java:16)&lt;/p&gt;


&lt;p&gt;In VTIResultSet reopenCore we have:&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If the VTI is a version2 vti that does not&lt;/li&gt;
	&lt;li&gt;need to be instantiated multiple times then&lt;/li&gt;
	&lt;li&gt;we simply close the current ResultSet and&lt;/li&gt;
	&lt;li&gt;create a new one via a call to&lt;/li&gt;
	&lt;li&gt;PreparedStatement.executeQuery().&lt;br/&gt;
	 *&lt;/li&gt;
	&lt;li&gt;@see NoPutResultSet#openCore&lt;/li&gt;
	&lt;li&gt;@exception StandardException thrown if cursor finished.&lt;br/&gt;
	 */&lt;br/&gt;
	public void reopenCore() throws StandardException&lt;br/&gt;
	{&lt;br/&gt;
		if (reuseablePs)&lt;br/&gt;
		{&lt;br/&gt;
			/* close the user ResultSet.&lt;br/&gt;
			 */&lt;br/&gt;
			if (userVTI != null)&lt;br/&gt;
			{&lt;br/&gt;
				try&lt;br/&gt;
				{&lt;br/&gt;
--&amp;gt; We close the RS here		userVTI.close();&lt;br/&gt;
					userVTI = userPS.executeQuery();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;					/* Save off the target VTI */&lt;br/&gt;
					if (isTarget)&lt;/p&gt;
					{
						activation.setTargetVTI(userVTI);
					}
&lt;p&gt;				} catch (SQLException se)&lt;/p&gt;
				{
					throw StandardException.unexpectedUserException(se);
				}
&lt;p&gt;			}&lt;br/&gt;
		}&lt;br/&gt;
		else&lt;/p&gt;
		{
			close();
			openCore();	
		}
&lt;p&gt;	}&lt;/p&gt;


&lt;p&gt;The TriggerOldTransitionRows VTI seems to have reusablePs set to true, so we close the ResultSet and call executeQuery() on the VTI prepared statement, but our TriggerOldTransitionRows.executeQuery()  method only returns the existing resultSet, even if it has been closed and this the issue.  It is not really a reusable prepared statement.  If I change executeQuery to rebuild the resultSet  like:&lt;/p&gt;

&lt;p&gt;    public ResultSet executeQuery() throws SQLException &lt;/p&gt;
{              
           TriggerExecutionContext tec = Factory.getTriggerExecutionContext();
           resultSet = tec.getOldRowSet();               
           return resultSet;
            
       }


&lt;p&gt;instead of just returning the existing ResultSet, it works ok, but I am not sure that this is the right fix.&lt;/p&gt;

&lt;p&gt;In the working case we don&apos;t seem to go through this reopenCore code.  I&apos;m not entirely sure why, perhaps a different plan?&lt;/p&gt;

&lt;p&gt;Also not clear to me is what CLOSE_CURSORS_AT_COMMIT has to do with this, because it doesn&apos;t seem to be a commit that is closing the result set.&lt;/p&gt;

&lt;p&gt;I will debug more and try to find answers to those questions but thought I would post my findings so far.&lt;/p&gt;</comment>
                            <comment id="12682863" author="kmarsden" created="Wed, 18 Mar 2009 00:13:04 +0000"  >&lt;p&gt;So yes, the failing case was using a different plan which reopened the VTI multiple times, which just happened to change on upgrade.  I was able to construct a reproduction (Derby4095Local.java) by using optimizer directives in the trigger definition.&lt;/p&gt;

&lt;p&gt;I think the CLOSE_CURSORS_AT_COMMIT was a red herring.  I was able to reproduce with the original user case without setting CLOSE_CURSORS_AT_COMMIT, so that was not really part of it.&lt;/p&gt;


&lt;p&gt;Anyway, here is the trunk stack trace.&lt;br/&gt;
&amp;gt;java Derby4095Local&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: The exception &apos;java.sql.SQLException: ResultSet not open. Operation &apos;n&lt;br/&gt;
ext&apos; not permitted. Verify that autocommit is OFF.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:95)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:223)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:398)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2201)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:81)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1323)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:625)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:175)&lt;br/&gt;
        at ReproDerby4095Local.main(ReproDerby4095Local.java:14)&lt;br/&gt;
Caused by: java.sql.SQLException: The exception &apos;java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitt&lt;br/&gt;
ed. Verify that autocommit is OFF.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11&lt;br/&gt;
9)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        ... 10 more&lt;br/&gt;
Caused by: java.sql.SQLException: ResultSet not open. Operation &apos;next&apos; not permitted. Verify that autocommit is OFF.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:11&lt;br/&gt;
9)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:70)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:87)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:93)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:172)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(EmbedConnection.java:2951)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(ConnectionChild.java:151)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(EmbedResultSet.java:4275)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(EmbedResultSet.java:4287)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:387)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:371)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(VTIResultSet.java:338)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:255)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1058)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:495)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:286)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:159)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(StatementTriggerExecutor.java:80)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:269)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers(DeleteResultSet.java:465)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DeleteResultSet.open(DeleteResultSet.java:158)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:416)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:297)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1235)&lt;/p&gt;


&lt;p&gt;I think I will pursue the fix of having TriggerOldTransitionRows reconstruct the ResultSet on executeQuery.  Please let me know if that does not sound acceptable.&lt;/p&gt;

</comment>
                            <comment id="12683108" author="kmarsden" created="Wed, 18 Mar 2009 17:49:56 +0000"  >&lt;p&gt;Attached is a patch for this issue.&lt;br/&gt;
It changes TriggerOldTransitionRows.java and TriggerNewTransitionRows.java to intialize the ResultSet on executeQuery to fix the ResultSet not open problem when a nested loop join is performed.&lt;br/&gt;
It adds two tests to TriggerTest testDerby4095OldTriggerRows()  and testDerby4095NewTriggerRows() &lt;/p&gt;

&lt;p&gt;I am running tests now.&lt;/p&gt;</comment>
                            <comment id="12683198" author="kmarsden" created="Wed, 18 Mar 2009 22:04:13 +0000"  >&lt;p&gt;Tests passed. Please review patch derby-4095_diff.txt.&lt;/p&gt;</comment>
                            <comment id="12683449" author="knutanders" created="Thu, 19 Mar 2009 12:21:30 +0000"  >&lt;p&gt;With the patch, we always reinitialize the result set on executeQuery(), even if the existing one has not been closed. Is there a way to avoid it? And is it worth avoiding? (I don&apos;t know what the initialization does and if it&apos;s a heavy operation.)&lt;/p&gt;</comment>
                            <comment id="12683498" author="kmarsden" created="Thu, 19 Mar 2009 16:02:38 +0000"  >&lt;p&gt;Well ResultSet.isClosed() is not available in the 1.5 context which this seems to be, so we can&apos;&apos;t tell if the ResultSet is closed or not, but I think even if the ResultSet wasn&apos;t closed but was positioned on a different row than the first it would need to be reinitialized, so probably safest to do it always.&lt;/p&gt;</comment>
                            <comment id="12683543" author="mamtas" created="Thu, 19 Mar 2009 17:57:53 +0000"  >&lt;p&gt;Hi Kathey, the patch looks good. I just had one question. &lt;/p&gt;

&lt;p&gt;Seems like, during the initialization of the new resultset, the following piece of code gets executed for TriggerNewTransitionRows(very similar code gets executed for TriggerOldTransitionRows). I was just wondering if we should close the old resultset that we are not going to use. &lt;br/&gt;
	public java.sql.ResultSet getNewRowSet() throws SQLException&lt;br/&gt;
	{&lt;br/&gt;
		ensureProperContext();&lt;/p&gt;

&lt;p&gt;		if (afterResultSet == null)&lt;/p&gt;
		{
			return null;
		}
&lt;p&gt;		try&lt;br/&gt;
		&lt;/p&gt;
{
			/* We should really shallow clone the result set, because it could be used
			 * at multiple places independently in trigger action.  This is a bug found
			 * during the fix of beetle 4373.
			 */
			CursorResultSet ars = afterResultSet;
			if (ars instanceof TemporaryRowHolderResultSet)
				ars = (CursorResultSet) ((TemporaryRowHolderResultSet) ars).clone();
			else if (ars instanceof TableScanResultSet)
				ars = (CursorResultSet) ((TableScanResultSet) ars).clone();
			ars.open();
			java.sql.ResultSet rs = cc.getResultSet(ars);
			resultSetVector.addElement(rs);
			return rs;
		}
&lt;p&gt; catch (StandardException se)&lt;/p&gt;
		{
			throw PublicAPI.wrapStandardException(se);
		}
&lt;p&gt;	}&lt;/p&gt;</comment>
                            <comment id="12683600" author="kmarsden" created="Thu, 19 Mar 2009 20:33:06 +0000"  >&lt;p&gt;Thanks Mamta for looking at the patch.  I changed it to close the previous ResultSet and am rerunning tests now and will wait to see what Knut says about the performance concern.  I hope I can get this checked in tomorrow as there is a user on 10.3 that needs it.  Perhaps if more performance work is needed I could check that in as a separate patch? Since we are moving from not working to working the performance is a lot better than it was before #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</comment>
                            <comment id="12683612" author="kmarsden" created="Thu, 19 Mar 2009 21:00:40 +0000"  >&lt;p&gt;Changing the title of the bug since this really could occur on any version if the plan with the problem is chosen. Leaving as regression, since from the user perspective, this was a regression triggered by upgrade.&lt;/p&gt;</comment>
                            <comment id="12683632" author="mamtas" created="Thu, 19 Mar 2009 21:39:42 +0000"  >&lt;p&gt;Kathey, I agree that performance can be addressed later on so feel free to checkin tomorrow the patch that you are testing.&lt;/p&gt;</comment>
                            <comment id="12683709" author="kmarsden" created="Fri, 20 Mar 2009 01:49:27 +0000"  >&lt;p&gt;Tests ran fine. Attached is the new patch closing the previous ResultSet (derby-4095_diff2.txt).  I&apos;ll commit tomorrow morning if I hear no objection.&lt;/p&gt;</comment>
                            <comment id="12685378" author="kmarsden" created="Fri, 20 Mar 2009 22:22:27 +0000"  >&lt;p&gt;committed to trunk and 10.3. Will commit to 10.5,10.4.10.2, and 10.1 next week.  Leaving this issue open until then.&lt;/p&gt;
</comment>
                            <comment id="12688109" author="knutanders" created="Sun, 22 Mar 2009 09:29:03 +0000"  >&lt;p&gt;Sorry for not responding earlier, I&apos;ve been on the road for a couple of days.&lt;/p&gt;

&lt;p&gt;I&apos;m fine with the patch as it is. The reinitialization of the result set apparently creates a shallow clone of the underlying result set (see InternalTriggerExecutionContext.getNewRowSet()) so it shouldn&apos;t be that expensive to perform it twice, even if the before or after image is big.&lt;/p&gt;</comment>
                            <comment id="12688149" author="kmarsden" created="Sun, 22 Mar 2009 16:51:15 +0000"  >&lt;p&gt;Thanks Knut for looking at the performance issue. I will go ahead and backport and close this out then as is.&lt;/p&gt;</comment>
                            <comment id="12688185" author="kmarsden" created="Sun, 22 Mar 2009 23:56:02 +0000"  >&lt;p&gt;For 10.1 I don&apos;t think this bug exists because TriggerNewTransitionRows and TriggerOldTransitionRows extend VTITemplate insted of UpdatableVTITemplate  (This was changed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-438&quot; title=&quot;Update triggers on tables with BLOB and CLOB columns fail at execution time if the triggered-SQL-statement references the LOB column(s).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-438&quot;&gt;&lt;del&gt;DERBY-438&lt;/del&gt;&lt;/a&gt;) so I don&apos;t think it will be considered a &quot;version2&quot; style VTI and go through the reOpenCore code and there is no executeQuery for it to execute anyway.&lt;/p&gt;

&lt;p&gt;I am not &lt;b&gt;totally&lt;/b&gt;  sure the problematic plan does not have a problem in  10.1 because we don&apos;t have optimizer directives in 10.1 so  can&apos;t try it out, but for now we will leave this just as affecting 10.2&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12402436" name="ReproDerby4095Local.java" size="1782" author="kmarsden" created="Wed, 18 Mar 2009 00:13:04 +0000"/>
                            <attachment id="12402501" name="derby-4095_diff.txt" size="6424" author="kmarsden" created="Wed, 18 Mar 2009 17:49:56 +0000"/>
                            <attachment id="12402614" name="derby-4095_diff2.txt" size="6530" author="kmarsden" created="Fri, 20 Mar 2009 01:49:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 19 Mar 2009 12:21:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24020</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0pyn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38024</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>