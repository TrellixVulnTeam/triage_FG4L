<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:35:45 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1025/DERBY-1025.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1025] [xa] client XAResource.start() does not commit an active local transaction when auto commit is true</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1025</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Embedded XAResource.start() implementation commits the active local transaction on the Connection associated with the XAResource if the connection is auto-commit mode.&lt;/p&gt;

&lt;p&gt;Client incorrectly throws an XAException with the XAER_RMFAIL error code (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1024&quot; title=&quot;Client&amp;#39;s XAResource.start throws XAException with XAER_RMFAIL when local transaction is active&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1024&quot;&gt;&lt;del&gt;DERBY-1024&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;XATest contains a work-around for client (calling commit) with a comment with this bug number.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12329302">DERBY-1025</key>
            <summary>[xa] client XAResource.start() does not commit an active local transaction when auto commit is true</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="deepa">Deepa Remesh</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Feb 2006 10:47:59 +0000</created>
                <updated>Tue, 8 May 2007 01:49:38 +0100</updated>
                            <resolved>Mon, 7 May 2007 21:08:48 +0100</resolved>
                                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12369590" author="kmarsden" created="Thu, 9 Mar 2006 11:18:03 +0000"  >
&lt;p&gt;So on XAResource.start() we need to flowcommit if&lt;br/&gt;
1) We are in autocommit mode. &lt;br/&gt;
        conn_.autocommit_ == true&lt;br/&gt;
2) We are in a an active local Transaction.&lt;br/&gt;
   conn_getXAState() == XA_T0_NOT_ASSOCIATED&lt;br/&gt;
   conn_.inUnitOfWork_ == true&lt;/p&gt;

&lt;p&gt;For my first shot at fixing this bug I added the folling code to &lt;br/&gt;
NetXAResource.start()&lt;br/&gt;
	// &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1025&quot; title=&quot;[xa] client XAResource.start() does not commit an active local transaction when auto commit is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1025&quot;&gt;&lt;del&gt;DERBY-1025&lt;/del&gt;&lt;/a&gt; &lt;br/&gt;
        // autocommit the local transaction before starting the global transaction&lt;br/&gt;
        // if autocommit is set&lt;br/&gt;
        if (conn_.autoCommit_  &amp;amp;&amp;amp; conn_.inActiveLocalTransaction())&lt;/p&gt;
        {
		conn_.flowAutoCommit();
        }


&lt;p&gt;Where in NetXAConnection we have&lt;br/&gt;
public boolean inActiveLocalTransaction() &lt;/p&gt;
{
		return (isInUnitOfWork_() &amp;amp;&amp;amp; 
    			(getXAState() == XA_T0_NOT_ASSOCIATED));   
		
	}

&lt;p&gt;And in Connection.java&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@return Returns the inUnitOfWork_.&lt;br/&gt;
	 */&lt;br/&gt;
	public boolean isInUnitOfWork_() 
{
		return inUnitOfWork_;
	}&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;With my change, putting this code in I found some very strange behaviour in this case in XATest&lt;br/&gt;
1)  I got a commit on start when no local transaction was active after  a suspend&lt;br/&gt;
2)  I seemed to lose a totally different suspended transaction in the process.&lt;/p&gt;

&lt;p&gt;See comments for behaviour:&lt;br/&gt;
    private static void interleavingTransactions(XADataSource xads) {&lt;br/&gt;
        System.out.println(&quot;interleavingTransactions&quot;);&lt;br/&gt;
        try {&lt;br/&gt;
            XAConnection xac = xads.getXAConnection(&quot;sku&quot;, &quot;testxa&quot;);&lt;br/&gt;
            XAResource xar = xac.getXAResource();&lt;/p&gt;

&lt;p&gt;            Xid xid1 = XATestUtil.getXid(1, 93, 18);&lt;br/&gt;
            Xid xid2 = XATestUtil.getXid(2, 45, 77);&lt;/p&gt;

&lt;p&gt;            xar.start(xid1, XAResource.TMNOFLAGS);&lt;/p&gt;

&lt;p&gt;            Connection conn = xac.getConnection();&lt;/p&gt;

&lt;p&gt;            Statement s = conn.createStatement();&lt;br/&gt;
            s.executeUpdate(&quot;insert into APP.foo values (1)&quot;);&lt;br/&gt;
            xar.end(xid1, XAResource.TMSUSPEND);&lt;br/&gt;
            // commit occurred here because inUnitOfWork_ was true&lt;br/&gt;
            // when it should be false.&lt;br/&gt;
            xar.start(xid2, XAResource.TMNOFLAGS);&lt;br/&gt;
            s.executeUpdate(&quot;insert into APP.foo values (2)&quot;);&lt;br/&gt;
            xar.end(xid2, XAResource.TMSUSPEND);&lt;/p&gt;

&lt;p&gt;            xar.start(xid1, XAResource.TMRESUME);&lt;br/&gt;
            s.executeUpdate(&quot;insert into APP.foo values (3)&quot;);&lt;br/&gt;
            // XAER_NOTA on suspend  of xid1.&lt;br/&gt;
            // very strange because the resume worked ok.&lt;br/&gt;
            // where did it go?&lt;br/&gt;
            xar.end(xid1, XAResource.TMSUSPEND);&lt;/p&gt;


&lt;p&gt;I am trying to understand:&lt;/p&gt;

&lt;p&gt;1)  When and how inUnitOfWork_ is set and its relation to XA&lt;br/&gt;
2)  Why the autocommit after the suspension of xid2 caused xid1 to go away after it resumed just fine.&lt;/p&gt;

&lt;p&gt;All very strange.&lt;/p&gt;</comment>
                            <comment id="12372170" author="djd" created="Wed, 29 Mar 2006 10:06:03 +0100"  >&lt;p&gt;I wonder if the problem you are seeing may be due to this code in DRDAStatement:&lt;/p&gt;

&lt;p&gt;	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Get prepared statement&lt;br/&gt;
	 *&lt;/li&gt;
	&lt;li&gt;@return prepared statement&lt;br/&gt;
	 */&lt;br/&gt;
	protected PreparedStatement getPreparedStatement() throws SQLException
	{
		if (ps instanceof BrokeredPreparedStatement)
			return (PreparedStatement)(
						   ((BrokeredPreparedStatement) ps).getStatement());
		else
			return ps;
	}&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;This code, for some unknown reason due to lack of comments, is getting the underlying embedded statement&lt;br/&gt;
from a BrokeredPreparedStatement.  This should not be allowed, the BrokeredStatement wrappers are there to&lt;br/&gt;
hide the embedded statement object as it can change under the covers of the wrapper.&lt;/p&gt;

&lt;p&gt;It could be that the network server is getting the prepared statement and then hanging on too long and performing&lt;br/&gt;
actions on the wrong object. Though it seems unlikely that auto-commit on a connection would go through the&lt;br/&gt;
prepared statement.&lt;/p&gt;

&lt;p&gt;I wonder why this code needs the inner statement&lt;/p&gt;</comment>
                            <comment id="12374400" author="deepa" created="Fri, 14 Apr 2006 03:22:23 +0100"  >&lt;p&gt;I was looking at this and understanding the differences between embedded and client code. I see the client does not have code to commit in auto-commit mode. I was trying to test my changes when I found that this problem no longer reproduces with the latest trunk. &lt;/p&gt;

&lt;p&gt;What I tried was - run jdbcapi/XATest.java in client framewrok by commenting out the following workaround in the test:&lt;br/&gt;
            // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1025&quot; title=&quot;[xa] client XAResource.start() does not commit an active local transaction when auto commit is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1025&quot;&gt;&lt;del&gt;DERBY-1025&lt;/del&gt;&lt;/a&gt; Client only bug&lt;br/&gt;
            /*if (TestUtil.isDerbyNetClientFramework()) &lt;/p&gt;
{
                System.out.println(&quot;DERBY-1025 Call conn.commit to avoid exception with client&quot;);
                conn.commit();
            }
&lt;p&gt;            */&lt;/p&gt;

&lt;p&gt;I do not get any exceptions. I ran this about 10 times and the test passes without the explicit &quot;commit&quot; workaround. Can someone please confirm this is right way to repro this issue? If anyone knows any other repros, please let me know.&lt;/p&gt;</comment>
                            <comment id="12374403" author="djd" created="Fri, 14 Apr 2006 03:38:44 +0100"  >&lt;p&gt;There&apos;s a chance that changes to the code preceeding that masked the issue, or maybe the pre-fetching changed behaviour by fetching&lt;br/&gt;
rows and causing a commit..&lt;/p&gt;

&lt;p&gt;I added this code just before the code you commented out and saw the issue again:&lt;/p&gt;

&lt;p&gt;            rs.close(); &lt;br/&gt;
             // ensure a transaction is active to test &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1025&quot; title=&quot;[xa] client XAResource.start() does not commit an active local transaction when auto commit is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1025&quot;&gt;&lt;del&gt;DERBY-1025&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
            rs = sdh.executeQuery(&quot;SELECT * FROM APP.FOO&quot;);&lt;/p&gt;</comment>
                            <comment id="12374404" author="kmarsden" created="Fri, 14 Apr 2006 03:53:38 +0100"  >&lt;p&gt;There is a case disabled for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1025&quot; title=&quot;[xa] client XAResource.start() does not commit an active local transaction when auto commit is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1025&quot;&gt;&lt;del&gt;DERBY-1025&lt;/del&gt;&lt;/a&gt; in jdbcapi/checkDataSource.java  as well.  &lt;/p&gt;
</comment>
                            <comment id="12374439" author="deepa" created="Fri, 14 Apr 2006 07:38:21 +0100"  >&lt;p&gt;Attaching a draft patch &apos;derby-1025-draft1.diff&apos; which is only for review and not for commit. This fixes the repros in the tests XATest.java and checkDataSource.java.&lt;/p&gt;

&lt;p&gt;I have a question about the expected exceptions in the test checkDataSource.java. The exceptions thrown by the client are different from what is thrown by the embedded driver. Specifically, I want to make sure this is the expected exception in the following case:&lt;/p&gt;

&lt;p&gt;---------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
		conn4.setAutoCommit(false);&lt;/p&gt;

&lt;p&gt;		rs4 = s4.executeQuery(&quot;select i from autocommitxastart&quot;);&lt;br/&gt;
		rs4.next(); System.out.println(&quot;acxs &quot; + rs4.getInt(1));&lt;br/&gt;
		rs4.next(); System.out.println(&quot;acxs &quot; + rs4.getInt(1));&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			xac4.getXAResource().start(xid4a, XAResource.TMNOFLAGS);
		}
&lt;p&gt; catch (XAException xae) &lt;/p&gt;
{
			showXAException(&quot;autocommitxastart expected &quot;, xae);
		}
&lt;p&gt;---------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
Exception:&lt;br/&gt;
autocommitxastart expected  : XAException - XAER_DUPID : Error executing a XAResource.start(), Server returned XAER_DUPID&lt;br/&gt;
---------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;With the draft patch, I have only run jdbcapi/checkDataSource.java and jdbcapi/XATest.java in client framework. I will be running derbynetclientmats shortly. Also, for testing purposes, I have removed the test jdbcapi/checkDataSource.java from DerbyNetClient.exclude.&lt;/p&gt;

&lt;p&gt;I would appreciate if someone can go through this patch quickly and let me know if the changes are okay. &lt;/p&gt;</comment>
                            <comment id="12374440" author="djd" created="Fri, 14 Apr 2006 07:45:38 +0100"  >&lt;p&gt;The change in NetXAResource looks ok. The XAER_DUPID (duplicate xid) exception looks wrong though. The error code should match embedded.&lt;br/&gt;
Make sure the rs4 result set has not closed and thus committed the transaction, maybe fetch less rows or no at all?&lt;/p&gt;</comment>
                            <comment id="12374444" author="deepa" created="Fri, 14 Apr 2006 08:56:17 +0100"  >&lt;p&gt;I looked into this a bit more and found that embedded and client are actually returning the same XA error code (XAER_DUPID). I printed out the error code in the test to verify this. The test just calls getMessage() on the XAException and prints it out. In case of embedded, I think the message is null. Whereas, in case of client, I see that the method NetXAResource.xaRetValErrorAccumSQL creates a message as follows: &lt;br/&gt;
---------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
if (rc != XAResource.XA_OK) { // error was detected&lt;br/&gt;
            // create an SqlException to report this error within&lt;br/&gt;
            String xaRetValStr = &quot;Error executing a &quot; +&lt;br/&gt;
                    getXAFuncStr(callInfo.xaFunction_) + &quot;, &quot; +&lt;br/&gt;
                    &quot;Server returned &quot; + getXAExceptionText(rc);&lt;/p&gt;

&lt;p&gt;---------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;This accounts for the difference in embedded and client messages. &lt;/p&gt;

&lt;p&gt;However, it is not clear to me what the purpose of this test is. If it is meant to check for XAER_DUPID, it does not seem to fit into the remaining tests.  I need to look into this some more. &lt;br/&gt;
---------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
               try &lt;/p&gt;
{
			xac4.getXAResource().start(xid4a, XAResource.TMNOFLAGS);
		}
&lt;p&gt; catch (XAException xae) &lt;/p&gt;
{
			showXAException(&quot;autocommitxastart expected &quot;, xae);
		}

&lt;p&gt;---------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;</comment>
                            <comment id="12374524" author="deepa" created="Fri, 14 Apr 2006 22:23:33 +0100"  >&lt;p&gt;Thanks Dan and Kathey for replying to my questions. I am attaching a patch &apos;derby-1025-patch1-v1.diff&apos; which makes client&apos;s XAResource.start() to commit a local transaction when auto commit is true. &lt;/p&gt;

&lt;p&gt;------------------------------------------------&lt;br/&gt;
Summary:&lt;br/&gt;
------------------------------------------------&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Modifies NetXAResource.start to check if the connection is in autocommit mode and flow an auto commit.&lt;/li&gt;
	&lt;li&gt;Uncomments the tests for this issue in jdbcapi/XATest.java and jdbcapi/checkDataSource.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;------------------------------------------------&lt;br/&gt;
Test:&lt;br/&gt;
------------------------------------------------&lt;br/&gt;
With this patch, I ran derbynetclientmats using Sun JDK1.4.2 on Windows XP. I also ran checkDataSource test in client framework by temporarily removing it from the exclude file. &lt;/p&gt;

&lt;p&gt;------------------------------------------------&lt;br/&gt;
Questions:&lt;br/&gt;
------------------------------------------------&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;When working on this issue, I saw this piece of code in client&apos;s Connection.flowCommit method:&lt;br/&gt;
        // Per JDBC specification (see javadoc for Connection.commit()):&lt;br/&gt;
        //   &quot;This method should be used only when auto-commit mode has been disabled.&quot;&lt;br/&gt;
        // However, some applications do this anyway, it is harmless, so&lt;br/&gt;
        // if they ask to commit, we could go ahead and flow a commit.&lt;br/&gt;
        // But note that rollback() is less harmless, rollback() shouldn&apos;t be used in auto-commit mode.&lt;br/&gt;
        // This behavior is subject to further review.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        //   if (!this.inUnitOfWork)&lt;br/&gt;
        //     return;&lt;br/&gt;
        // We won&apos;t try to be &quot;too smart&quot;, if the user requests a commit, we&apos;ll flow a commit,&lt;br/&gt;
        // regardless of whether or not we&apos;re in a unit of work or in auto-commit mode.&lt;br/&gt;
        //&lt;/p&gt;

&lt;p&gt;I saw that Kathey&apos;s trial patch was trying to check if we are in unit of work before calling flowAutoCommit. On looking at the flowAutoCommit method, I saw that this logic was planned to be in the commit method itself but currently it is commented out mentioning &quot;further review&quot;. Should I open a JIRA issue for this so that we can pursue this later?&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I think the test for derby-1025 in checkDataSource.java is wrongly testing XAER_DUPID because the second transaction uses the same xid. I think we want to test that we cannot start a global transaction when the resource manager is doing some work outside. I have changed the test to use a different xid. And now the test gives me XAER_OUTSIDE,which I think is what we want to test. If I&apos;m wrong here, please let me know. I&apos;ll submit a separate patch for this.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12374540" author="kmarsden" created="Sat, 15 Apr 2006 00:32:22 +0100"  >&lt;p&gt;I checked the patch into the trunk:&lt;br/&gt;
Date: Fri Apr 14 09:30:00 2006&lt;br/&gt;
New Revision: 394134&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=394134&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=394134&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This change looks good to me but when I ran jdbcapi/checkDataSource.java  and jdbcapi/checkDataSource30.java and  with client I got these (expected I think) diffs.  I updated the masters and checked in.&lt;br/&gt;
Please check that the output difference is expected.&lt;/p&gt;

&lt;p&gt;Attempt to shutdown framework: DerbyNetClient&lt;br/&gt;
58 del&lt;br/&gt;
&amp;lt; expected java.sql.SQLException: Invalid operation: result set closed&lt;br/&gt;
58a58&lt;br/&gt;
&amp;gt; expected java.sql.SQLException: &apos;ResultSet&apos; already closed.&lt;br/&gt;
460 del&lt;br/&gt;
&amp;lt; autocommitxastart expected Invalid operation: result set closed&lt;br/&gt;
460a460&lt;br/&gt;
&amp;gt; autocommitxastart expected &apos;ResultSet&apos; already closed.&lt;br/&gt;
Test Failed.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;End:   checkDataSource jdk1.4.2_07 DerbyNetClient 2006-04-14 09:04:19 ***&lt;/li&gt;
			&lt;li&gt;Start: checkDataSource30 jdk1.4.2_07 DerbyNetClient 2006-04-14 09:17:14 ***&lt;br/&gt;
Initialize for framework: DerbyNetClient&lt;br/&gt;
java -Dderby.system.home=D:\testout\DerbyNetClient\checkDataSource30 -Djava.security.manager -Djava.security.policy=D:\testout\derby_tests.policy -DderbyTesting.codeclasses=&lt;a href=&quot;file:/D:/p4/marsden_patch/c&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file:/D:/p4/marsden_patch/c&lt;/a&gt;&lt;br/&gt;
lasses/ -DderbyTesting.codedir=D:\p4\marsden_patch\classes -DderbyTesting.serverhost=localhost -DderbyTesting.clienthost=localhost -DderbyTesting.codejar=&lt;a href=&quot;file://unused/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;file://unused/&lt;/a&gt; org.apache.derby.drda.NetworkSe&lt;br/&gt;
rverControl start&lt;br/&gt;
Attempt to shutdown framework: DerbyNetClient&lt;br/&gt;
70 del&lt;br/&gt;
&amp;lt; expected java.sql.SQLException: Invalid operation: result set closed&lt;br/&gt;
70a70&lt;br/&gt;
&amp;gt; expected java.sql.SQLException: &apos;ResultSet&apos; already closed.&lt;br/&gt;
551a552,559&lt;br/&gt;
&amp;gt; conn4 autcommit true&lt;br/&gt;
&amp;gt; acxs 1&lt;br/&gt;
&amp;gt; acxs 2&lt;br/&gt;
&amp;gt; autocommitxastart expected &apos;ResultSet&apos; already closed.&lt;br/&gt;
&amp;gt; acxs 1&lt;br/&gt;
&amp;gt; acxs 2&lt;br/&gt;
&amp;gt; autocommitxastart expected  : XAException - XAER_DUPID : Error executing a XAResource.start(), Server returned XAER_DUPID&lt;br/&gt;
&amp;gt; acxs 3&lt;br/&gt;
578 del&lt;br/&gt;
&amp;lt; Expected SQLException Invalid operation: result set closed&lt;br/&gt;
578a586&lt;br/&gt;
&amp;gt; Expected SQLException &apos;ResultSet&apos; already closed.&lt;br/&gt;
590 del&lt;br/&gt;
&amp;lt; Expected SQLException Invalid operation: result set closed&lt;br/&gt;
591 del&lt;br/&gt;
&amp;lt; Expected SQLException Invalid operation: result set closed&lt;br/&gt;
591a598,599&lt;br/&gt;
&amp;gt; Expected SQLException &apos;ResultSet&apos; already closed.&lt;br/&gt;
&amp;gt; Expected SQLException &apos;ResultSet&apos; already closed.&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   checkDataSource30 jdk1.4.2_07 DerbyNetClient 2006-04-14 09:18:29 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12374556" author="deepa" created="Sat, 15 Apr 2006 02:41:56 +0100"  >&lt;p&gt;Thanks Kathey for updating the master files. The diffs in the master file are expected. This is because the error messages were changed by commit for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-842&quot; title=&quot;Internationalize messages in PreparedStatement to Section in org.apache.derby.client.am&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-842&quot;&gt;&lt;del&gt;DERBY-842&lt;/del&gt;&lt;/a&gt;, svn revision# 393967. I had my workspace synched up to a older revision when I created the patch.&lt;/p&gt;

&lt;p&gt;I am attaching &apos;derby-1025-patch2-v1.diff&apos; which changes checkDataSource test to test that starting a global transcation when a local transaction is active will give an exception. The XA error code is also printed out to verify that we get the expected exception. This patch will resolve this issue fully.&lt;/p&gt;

&lt;p&gt;With this patch, I have run checkDataSource checkDataSource30 tests with embedded and client frameworks. Please take a look at this patch.&lt;/p&gt;</comment>
                            <comment id="12374581" author="deepa" created="Sat, 15 Apr 2006 07:33:53 +0100"  >&lt;p&gt;Attaching &apos;derby-1025-10.1.diff&apos; for 10.1 branch. A direct merge does not work because the test checkDataSource is not enabled for client in 10.1. &lt;/p&gt;

&lt;p&gt;I ran derbynetclientmats using Sun JDK 1.4.2 on Windows XP. I also ran the test jdbcapi/XATest on client and embedded frameworks. Please look at this patch.&lt;/p&gt;

&lt;p&gt;NOTE: &lt;br/&gt;
There are two pending patches attached to this issue:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;derby-1025-10.1.diff for 10.1 branch&lt;/li&gt;
	&lt;li&gt;derby-1025-patch2-v1.diff for trunk (changes to the test checkDataSource.java)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12375139" author="deepa" created="Wed, 19 Apr 2006 22:56:02 +0100"  >&lt;p&gt;Patches committed as revision# 394134,394949 in trunk; revision# 394230 in 10.1 branch&lt;/p&gt;</comment>
                            <comment id="12485331" author="myrna" created="Thu, 29 Mar 2007 21:07:18 +0100"  >&lt;p&gt;I believe this was incorrectly closed.&lt;br/&gt;
Although I don&apos;t see the XAID_DUP error, so there was improvement, it seems to me the transaction is still active.&lt;/p&gt;

&lt;p&gt;checkDataSource has I think a mistake in it that gave the impression this was fixed:&lt;/p&gt;

&lt;p&gt;    try &lt;/p&gt;
{
         rs4.next(); System.out.println(&quot;acxs &quot; + rs.getInt(1))
    }
&lt;p&gt; catch (SQLException sqle) &lt;/p&gt;
{
         System.out.println(&quot;autocommitxastart expected &quot; + sqle.getMessage());
    }

&lt;p&gt;We&apos;re doing rs4.next(), but then attempt to get a value out of rs, rather than rs4. rs has been closed way before this point, so not surprisingly, this gives an sqlexception.&lt;/p&gt;

&lt;p&gt;When I change rs.getInt(1) to rs4.getInt(1), things work unchanged for embedded. However, with DerbyNetClient, we get different behavior; we happily get a value returned (3). &lt;/p&gt;</comment>
                            <comment id="12494117" author="kmarsden" created="Mon, 7 May 2007 20:53:07 +0100"  >&lt;p&gt;Looking at the test, I think to test whether the cursor is closed we needed to create the statement with CLOSE_CURSRS_AT_COMMIT.  Making that change, client seems to work as expected.  We get SQLState XCL16, but embedded is getting 08003 - No current connection, which I think is wrong. The connection should still be valid. It is only the resultset that is closed. I will open another issue for that and submit the test change.&lt;/p&gt;</comment>
                            <comment id="12494119" author="kmarsden" created="Mon, 7 May 2007 21:08:48 +0100"  >&lt;p&gt;Fixed the test case to create the statement CLOSE_CURSORS_AT_COMMIT.  Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2620&quot; title=&quot;embedded throws SQLState 8003 (No current connection) on rs.next() on closed resultSet in test for DERBY-1025 in DataSourceTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2620&quot;&gt;DERBY-2620&lt;/a&gt; for an issue with embedded losing the connection in this case.&lt;/p&gt;</comment>
                            <comment id="12494167" author="djd" created="Tue, 8 May 2007 01:49:38 +0100"  >&lt;p&gt;In jdbcapi.DataSourceTest there is a piece of code with this comment related to this bug:&lt;/p&gt;

&lt;p&gt;        // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1025&quot; title=&quot;[xa] client XAResource.start() does not commit an active local transaction when auto commit is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1025&quot;&gt;&lt;del&gt;DERBY-1025&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
        // With Embedded, this will give error: 08003 - No current connection&lt;br/&gt;
        // But with NetworkServer / DerbyNetClient, the transaction does not&lt;br/&gt;
        // appear to be closed, and we actually get a value.&lt;/p&gt;


&lt;p&gt;The comment related to the network server does not seem valid any more.&lt;br/&gt;
Assuming the test passes since the path through the code that would result in getting a value back would result in fail() being called.&lt;br/&gt;
Should the comment be cleaned up to reflect reality or am I missing something?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12325360" name="derby-1025-10.1.diff" size="3030" author="deepa" created="Sat, 15 Apr 2006 07:33:53 +0100"/>
                            <attachment id="12325361" name="derby-1025-10.1.status" size="250" author="deepa" created="Sat, 15 Apr 2006 07:33:53 +0100"/>
                            <attachment id="12325326" name="derby-1025-draft1.diff" size="9091" author="deepa" created="Fri, 14 Apr 2006 07:38:21 +0100"/>
                            <attachment id="12325327" name="derby-1025-draft1.status" size="562" author="deepa" created="Fri, 14 Apr 2006 07:38:21 +0100"/>
                            <attachment id="12325336" name="derby-1025-patch1-v1.diff" size="8512" author="deepa" created="Fri, 14 Apr 2006 22:23:33 +0100"/>
                            <attachment id="12325337" name="derby-1025-patch1-v1.status" size="473" author="deepa" created="Fri, 14 Apr 2006 22:23:33 +0100"/>
                            <attachment id="12325353" name="derby-1025-patch2-v1.diff" size="4092" author="deepa" created="Sat, 15 Apr 2006 02:41:56 +0100"/>
                            <attachment id="12325354" name="derby-1025-patch2-v1.status" size="568" author="deepa" created="Sat, 15 Apr 2006 02:41:56 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 9 Mar 2006 11:18:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22270</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy12h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40051</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>