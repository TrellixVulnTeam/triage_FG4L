<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:18 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5358/DERBY-5358.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5358] SYSCS_COMPRESS_TABLE failed with conglomerate not found exception</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5358</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When running the D4275.java repro attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4275&quot; title=&quot;Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4275&quot;&gt;&lt;del&gt;DERBY-4275&lt;/del&gt;&lt;/a&gt; (with the patch invalidate-during-invalidation.diff as well as the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5161&quot; title=&quot;Cannot rollback after syntax error in internal statement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5161&quot;&gt;&lt;del&gt;DERBY-5161&lt;/del&gt;&lt;/a&gt; to prevent the select thread from failing) in four parallel processes on the same machine, one of the processes failed with the following stack trace:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: The exception &apos;java.sql.SQLException: The conglomerate (4,294,967,295) requested does not exist.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:407)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1341)&lt;br/&gt;
        at D4275.main(D4275.java:52)&lt;br/&gt;
Caused by: java.sql.SQLException: The exception &apos;java.sql.SQLException: The conglomerate (4,294,967,295) requested does not exist.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
        ... 10 more&lt;br/&gt;
Caused by: java.sql.SQLException: The conglomerate (4,294,967,295) requested does not exist.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:400)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308)&lt;br/&gt;
        at org.apache.derby.catalog.SystemProcedures.SYSCS_COMPRESS_TABLE(SystemProcedures.java:792)&lt;br/&gt;
        at org.apache.derby.exe.acd381409ax0131x72b6x8e11x0000037164a81.g0(Unknown Source)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:448)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
        ... 3 more&lt;br/&gt;
Caused by: ERROR XSAI2: The conglomerate (4,294,967,295) requested does not exist.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.getFactoryFromConglomId(RAMAccessManager.java:382)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(RAMAccessManager.java:482)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(RAMTransaction.java:394)&lt;br/&gt;
        at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(RAMTransaction.java:1308)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.DDLConstantAction.lockTableForDDL(DDLConstantAction.java:252)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantActionBody(AlterTableConstantAction.java:364)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(AlterTableConstantAction.java:275)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.MiscResultSet.open(MiscResultSet.java:61)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:448)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:319)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
        ... 15 more&lt;br/&gt;
Test stopped after 9342310 ms&lt;/p&gt;

&lt;p&gt;The conglomerate number 4,294,967,295 looks suspicious, as it&apos;s equal to 2^32-1. Perhaps it&apos;s hitting some internal limit on the number of conglomerates? The test case used the in-memory back-end.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12515751">DERBY-5358</key>
            <summary>SYSCS_COMPRESS_TABLE failed with conglomerate not found exception</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Fri, 29 Jul 2011 10:12:25 +0100</created>
                <updated>Mon, 17 Jun 2013 10:27:17 +0100</updated>
                            <resolved>Tue, 11 Sep 2012 22:50:52 +0100</resolved>
                                    <version>10.9.1.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.2.2</fixVersion>
                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13108493" author="knutanders" created="Tue, 20 Sep 2011 11:19:26 +0100"  >&lt;p&gt;Saw this again when running D4275.java. Same stack trace, same conglomerate number, but this time it happened a lot sooner (after 5 minutes).&lt;/p&gt;</comment>
                            <comment id="13108498" author="kristwaa" created="Tue, 20 Sep 2011 11:34:50 +0100"  >&lt;p&gt;Again with the in-memory back end? If so, I can start a few runs with the on-disk back end.&lt;/p&gt;</comment>
                            <comment id="13108599" author="knutanders" created="Tue, 20 Sep 2011 12:27:12 +0100"  >&lt;p&gt;Yes, it was with the in-memory back end. I used the D4275.java repro that&apos;s attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4275&quot; title=&quot;Query executions fail when compressing a table using SYSCS_UTIL.SYSCS_COMPRESS_TABLE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4275&quot;&gt;&lt;del&gt;DERBY-4275&lt;/del&gt;&lt;/a&gt; unmodified, and I ran it with trunk patched with the 1a patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5406&quot; title=&quot;Intermittent failures in CompressTableTest and TruncateTableTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5406&quot;&gt;&lt;del&gt;DERBY-5406&lt;/del&gt;&lt;/a&gt;, sane build.&lt;/p&gt;

&lt;p&gt;You may see other conglomerate does not exist errors being thrown because of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5406&quot; title=&quot;Intermittent failures in CompressTableTest and TruncateTableTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5406&quot;&gt;&lt;del&gt;DERBY-5406&lt;/del&gt;&lt;/a&gt;, but the interesting ones for this issue are those that have SystemProcedures.SYSCS_COMPRESS_TABLE() somewhere in the stack.&lt;/p&gt;</comment>
                            <comment id="13210624" author="mikem" created="Fri, 17 Feb 2012 22:31:02 +0000"  >&lt;p&gt;Triage for 10.9.   leaving normal urgency unless it found that the issue leaves db corrupted in some way.  The message has the&lt;br/&gt;
feel of a temporary timing issue.&lt;/p&gt;</comment>
                            <comment id="13286484" author="knutanders" created="Thu, 31 May 2012 12:19:55 +0100"  >&lt;p&gt;I think I found the problem that&apos;s causing this. There&apos;s a race condition in TableDescriptor.getHeapConglomerateId():&lt;/p&gt;

&lt;p&gt;		/* If we&apos;ve already cached the heap conglomerate number, then&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;simply return it.&lt;br/&gt;
		 */&lt;br/&gt;
		if (heapConglomNumber != -1)
		{
			return heapConglomNumber;
		}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;... (find the heap conglomerate in the list of conglomerates) ...&lt;/p&gt;

&lt;p&gt;		heapConglomNumber = cd.getConglomerateNumber();&lt;/p&gt;

&lt;p&gt;		return heapConglomNumber;&lt;/p&gt;

&lt;p&gt;I instrumented this class and found that it never set heapConglomNumber to 4,294,967,295, but the method still returned that value some times.&lt;/p&gt;

&lt;p&gt;The problem is that heapConglomNumber is a long, and the Java spec doesn&apos;t guarantee that reads/writes of long values are atomic.&lt;/p&gt;

&lt;p&gt;So what seems to happen, is:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Two threads (T1 and T2) call getHeapConglomerateId() on the same TableDescriptor at about the same time, and no other calls to getHeapConglomerateId() have been made on that object before, so heapConglomNumber is initially -1.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;T1 goes ahead finding the real conglomerate number and writing it to heapConglomNumber.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;At the same time, T2 reads heapConglomNumber in order to check if it&apos;s already cached. However, since T1&apos;s write was not atomic, it only sees half of it. That&apos;s enough to make it see that the cached conglomerate number is -1, so that it concludes that it can use it, but the number it sees is not the right one.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If T2 happens to see only the most significant half of the conglomerate number written by T1, that half will probably be all zeros (because it&apos;s not very likely that more than 4 billion conglomerates have been created). The bits in the least significant half will in that case be all ones (because the initial value is -1, which is all ones in two&apos;s complement). The returned value will therefore be 0x00000000ffffffff == 4,294,967,295, as seen in the error in the bug description.&lt;/p&gt;

&lt;p&gt;I&apos;ve also seen variants where the returned number is a negative one. That happens if T2 instead sees the least significant half of the correct column number, and the most significant half of the initial value -1. For example, if the conglomerate number is 344624, the error message will say: The conglomerate (-4&#160;294&#160;622&#160;672) requested does not exist.&lt;/p&gt;</comment>
                            <comment id="13286489" author="knutanders" created="Thu, 31 May 2012 12:33:12 +0100"  >&lt;p&gt;I&apos;m running tests with the heapConglomNumber field declared volatile to enforce atomic updates, to see if that makes these errors go away.&lt;/p&gt;</comment>
                            <comment id="13286614" author="knutanders" created="Thu, 31 May 2012 15:36:12 +0100"  >&lt;p&gt;I&apos;ve had the repro running for more than three hours now with the attached patch (volatile.diff). On the same platform, I usually saw errors popping up after 5 to 15 minutes without the patch.&lt;/p&gt;

&lt;p&gt;The patch makes the fields ConglomerateDescriptor.conglomerateNumber and TableDescriptor.heapConglomNumber volatile to ensure that reads/writes are atomic.&lt;/p&gt;

&lt;p&gt;All the regression tests passed too.&lt;/p&gt;</comment>
                            <comment id="13286689" author="mikem" created="Thu, 31 May 2012 17:09:00 +0100"  >&lt;p&gt;Great catch on this knut.&lt;/p&gt;

&lt;p&gt;When I see a volatile I usually think there is a problem with synchronization.&lt;br/&gt;
Given that this fix seems to be helping, does that indicate that there is missing synchronization in one or both of these classes, or maybe the calling class?   Is it expected that 2 threads would be updating this class &lt;br/&gt;
at the same time?  There is no documentation in the TableDescriptor class to indicate multithreaded&lt;br/&gt;
expectations.&lt;/p&gt;

&lt;p&gt;It would be good to understand if the bug is that TableDescriptor is not properly handling concurrent access,&lt;br/&gt;
or if the bug is that other code should be preventing concurrent access to TableDescriptor.  &lt;/p&gt;

&lt;p&gt;I do see that TableDescriptor.getStatistics() and isValid() is synchronized, so maybe that indicates all updating &lt;br/&gt;
methods, and all methods that look at those updated fields should be synchronized.&lt;/p&gt;


&lt;p&gt;I did a quick scan by eye of TableDescriptor and found the following fields updated in places other than&lt;br/&gt;
the constructors, it was just a quick read through so there may be more:&lt;br/&gt;
constraintDescriptorList&lt;br/&gt;
 triggerDescriptorList&lt;br/&gt;
indexStatsUpToDate&lt;/p&gt;

&lt;p&gt;maybe update?:&lt;br/&gt;
conglomerateDescriptorList&lt;/p&gt;


</comment>
                            <comment id="13286716" author="mikem" created="Thu, 31 May 2012 17:26:01 +0100"  >&lt;p&gt;While reading through TableDescriptor I noticed that resetHeapConglomNumber() which is &lt;br/&gt;
used for global temporary tables also sets this field to -1.  I think in past I have seen user&lt;br/&gt;
unreproducible issues with global temp tables and errors with strange large negative conglomerate&lt;br/&gt;
numbers, so likley related to this issue being tracked here.&lt;/p&gt;</comment>
                            <comment id="13286719" author="mikem" created="Thu, 31 May 2012 17:31:44 +0100"  >&lt;p&gt;once fix is fully understood it would be good to update this issue with what user actions can cause this&lt;br/&gt;
problem.  Is it just SYSCS_COMPRESS_TABLE, or is it any operation that can result in conglomerate&lt;br/&gt;
numbers changing?  Maybe test case can be expanded to show problem also exists in the following &lt;br/&gt;
cases (basically cases where the system creates a new set of files for each table and index, copies data to &lt;br/&gt;
the new files, and then updates catalogs underneath to point at new files):&lt;br/&gt;
o truncate table&lt;br/&gt;
o alter table that adds a non-nullable field&lt;br/&gt;
o insert into with replace&lt;br/&gt;
o other alter table?&lt;br/&gt;
o any others ?&lt;/p&gt;</comment>
                            <comment id="13287320" author="knutanders" created="Fri, 1 Jun 2012 11:40:07 +0100"  >&lt;p&gt;It looks like only the fix in TableDescriptor is needed for this&lt;br/&gt;
particular problem, by the way. The repro is running fine without the&lt;br/&gt;
change in ConglomerateDescriptor.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure whether this is a general synchronization issue in&lt;br/&gt;
TableDescriptor, or just a problem with the one specific method&lt;br/&gt;
getHeapConglomerateId(). The other occurrences of fields being&lt;br/&gt;
modified, seem to be in setter methods or other methods whose names&lt;br/&gt;
suggest they will be modifying the descriptor. I would assume that the&lt;br/&gt;
callers of those methods have obtained an exclusive table lock, or use&lt;br/&gt;
some other mechanism to ensure exclusive access, before they call the&lt;br/&gt;
methods.&lt;/p&gt;

&lt;p&gt;What&apos;s so special about getHeapConglomerateId(), is that the write&lt;br/&gt;
happens inside a method whose name suggests it&apos;ll just do a read,&lt;br/&gt;
because of lazy initialization of the field. The callers cannot&lt;br/&gt;
reasonably be expected to know this and obtain an exclusive table lock&lt;br/&gt;
just to fetch the id of the heap conglomerate, so extra protection is&lt;br/&gt;
needed for this method.&lt;/p&gt;

&lt;p&gt;As to when this could happen, I think it could happen any time two&lt;br/&gt;
threads concurrently ask for the conglomerate id when no other thread&lt;br/&gt;
has done the same before. It could be as simple as two threads&lt;br/&gt;
selecting from the same table right after the database has been booted&lt;br/&gt;
(although that particular may be hidden by the last fix that went into&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5406&quot; title=&quot;Intermittent failures in CompressTableTest and TruncateTableTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5406&quot;&gt;&lt;del&gt;DERBY-5406&lt;/del&gt;&lt;/a&gt;, where we&apos;d re-try if a compilation fails with conglomerate&lt;br/&gt;
not found).&lt;/p&gt;

&lt;p&gt;Also, after any DDL operation, the TD cache in the data dictionary is&lt;br/&gt;
cleared, so any operation that needs a TD after a DDL operation, also&lt;br/&gt;
if the DDL operation didn&apos;t touch the table described by the TD, will&lt;br/&gt;
get an instance whose heapConglomerateNumber field is uninitialized.&lt;/p&gt;

&lt;p&gt;So, theoretically, any two threads accessing the same table after a&lt;br/&gt;
DDL operation, could encounter this problem.&lt;/p&gt;</comment>
                            <comment id="13287323" author="knutanders" created="Fri, 1 Jun 2012 12:00:03 +0100"  >&lt;p&gt;Attaching an alternative repro (MultiThreadedReadAfterDDL.java). In my environment (Solaris 11, Java SE 7u4) it typically fails after one to two minutes (I&apos;ve seen it vary from 10 seconds to 4 minutes).&lt;/p&gt;

&lt;p&gt;ERROR XSAI2: The conglomerate (4,294,967,295) requested does not exist.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.getFactoryFromConglomId(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.db.ConsistencyChecker.checkTable(Unknown Source)&lt;br/&gt;
	at org.apache.derby.catalog.SystemProcedures.SYSCS_CHECK_TABLE(Unknown Source)&lt;br/&gt;
	at org.apache.derby.exe.ac45b300a8x0137xa7a6xf3e3x000003616e100.e0(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)&lt;br/&gt;
	at MultiThreadedReadAfterDDL$1.run(MultiThreadedReadAfterDDL.java:32)&lt;/p&gt;

&lt;p&gt;What the repro does is:&lt;/p&gt;

&lt;p&gt;1) The main thread creates a table called TMP and immediately rolls it back. Because of the DDL, the TD cache in the dictionary is cleared.&lt;/p&gt;

&lt;p&gt;2) As soon as the main thread is done, 10 other threads call VALUES SYSCS_UTIL.SYSCS_CHECK_TABLE(&apos;APP&apos;, &apos;T&apos;) concurrently. Note that it checks a different table than the one touched by the DDL in the main thread.&lt;/p&gt;

&lt;p&gt;3) Once all threads are done executing SYSCS_CHECK_TABLE, repeat the procedure from step 1.&lt;/p&gt;</comment>
                            <comment id="13288520" author="knutanders" created="Mon, 4 Jun 2012 13:21:44 +0100"  >&lt;p&gt;Attaching an updated patch (volatile-v2.diff), which only touches the TableDescriptor class. The new patch adds a javadoc comment that explains why the field is declared volatile. It also removes an unused variable from the getHeapConglomerateId() method.&lt;/p&gt;</comment>
                            <comment id="13401391" author="knutanders" created="Tue, 26 Jun 2012 14:47:07 +0100"  >&lt;p&gt;Committed revision 1354015.&lt;br/&gt;
Leaving the issue open for back-porting.&lt;/p&gt;</comment>
                            <comment id="13409330" author="knutanders" created="Mon, 9 Jul 2012 12:07:46 +0100"  >&lt;p&gt;Backported to 10.9 (revision 1359058) and 10.8 (revision 1359059). Closing the issue.&lt;/p&gt;</comment>
                            <comment id="13453406" author="kmarsden" created="Tue, 11 Sep 2012 21:58:16 +0100"  >&lt;p&gt;Reopen to mark affects version 10.5&lt;/p&gt;</comment>
                            <comment id="13459858" author="mamtas" created="Thu, 20 Sep 2012 20:11:28 +0100"  >&lt;p&gt;I will look at backporting this further&lt;/p&gt;</comment>
                            <comment id="13460598" author="mamtas" created="Fri, 21 Sep 2012 17:27:19 +0100"  >&lt;p&gt;Backported to 10.7 with revision 1388565&lt;/p&gt;</comment>
                            <comment id="13460817" author="mamtas" created="Fri, 21 Sep 2012 22:00:33 +0100"  >&lt;p&gt;Backported to 10.6 with revision 1388678&lt;/p&gt;</comment>
                            <comment id="13460979" author="mamtas" created="Sat, 22 Sep 2012 02:11:23 +0100"  >&lt;p&gt;Backported to 10.5 with revision 1388730&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12428006">DERBY-4275</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12534796">DERBY-5532</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12507367">DERBY-5234</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12530535" name="MultiThreadedReadAfterDDL.java" size="2480" author="knutanders" created="Fri, 1 Jun 2012 12:00:03 +0100"/>
                            <attachment id="12530768" name="volatile-v2.diff" size="2168" author="knutanders" created="Mon, 4 Jun 2012 13:21:43 +0100"/>
                            <attachment id="12530394" name="volatile.diff" size="1432" author="knutanders" created="Thu, 31 May 2012 15:36:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Sep 2011 10:34:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24795</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy09rj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35400</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>