<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:45:38 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3703/DERBY-3703.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3703] Make it possible to build the JSR169 support with the jdk1.4 libraries</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3703</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;It would be good to simplify the Derby build so that the whole product could be built out-of-the-box just from what&apos;s checked into the Derby repository. As a step toward this goal, it would be good to be able to build the jsr169 support without having to download proprietary libraries.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12397319">DERBY-3703</key>
            <summary>Make it possible to build the JSR169 support with the jdk1.4 libraries</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 Jun 2008 00:23:53 +0100</created>
                <updated>Mon, 4 May 2009 19:22:37 +0100</updated>
                            <resolved>Tue, 1 Jul 2008 16:16:23 +0100</resolved>
                                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Build tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12601787" author="djd" created="Tue, 3 Jun 2008 00:28:54 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1672&quot; title=&quot;Create ALv2 licenced JSR 169 jar by taking Apache Harmony&amp;#39;s java.sql and javax.sql classes and subsetting to match JSR 169&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1672&quot;&gt;&lt;del&gt;DERBY-1672&lt;/del&gt;&lt;/a&gt; would be one mechanism to get an open-source ALv2 licenced version of the JSR 169 interface definitions.&lt;/p&gt;</comment>
                            <comment id="12601791" author="rhillegas" created="Tue, 3 Jun 2008 00:43:57 +0100"  >&lt;p&gt;Attaching derby-3703-01-aa-moveJdbc3methods.diff. This moves jdbc3 methods into the base embedded implementations of PreparedStatement, CallableStatement, and ResultSet. With this patch, I can successfully build the jsr169 support under the following techniques:&lt;/p&gt;

&lt;p&gt;1) when I do NOT set jsr169compile.classpath (letting it default to java14compile.classpath)&lt;/p&gt;

&lt;p&gt;2) when I set jsr169compile.classpath to point to a set of small device libraries&lt;/p&gt;

&lt;p&gt;Using jar files created by both techniques, I have successfully run a heartbeat script on a phoneME small device platform. The heartbeat script creates a database and selects from the system tables. I have also run the regression tests cleanly under Java 5 against jars built using technique (1).&lt;/p&gt;

&lt;p&gt;I would appreciate if if someone could apply this patch, build the jars via technique (1), and run the full regression tests on a small device platform.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      build.xml&lt;/p&gt;

&lt;p&gt;Lets jsr169compile.classpath default to be ava14compile.classpath if it is not set.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement30.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet20.java&lt;/p&gt;

&lt;p&gt;Moves methods from the above classes into the classes below:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;/p&gt;</comment>
                            <comment id="12601819" author="djd" created="Tue, 3 Jun 2008 04:33:54 +0100"  >&lt;p&gt;-1 on this patch unless this question can be answered:&lt;/p&gt;

&lt;p&gt;   How do you guarantee that classes (java.sql.Ref, Struct etc.)  that are not in JSR 169 or CDC/Foundation but now are referenced in the classes used to implement Derby&apos;s JDBC driver for JSR 169 will not cause ClassNotFoundExceptions or LinkageExceptions in all J2ME/CDC/Foundation implementations?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;edit&amp;#93;&lt;/span&gt;&lt;br/&gt;
Note the current implementation makes that guarantee by not referencing undefined classes in the classes used to implement Derby&apos;s JDBC driver for JSR 169.&lt;/p&gt;</comment>
                            <comment id="12601920" author="knutanders" created="Tue, 3 Jun 2008 14:21:32 +0100"  >&lt;p&gt;If I understand correctly, the problems with compiling both the&lt;br/&gt;
JSR-169 implementation classes and the JDBC 3.0 implementation classes&lt;br/&gt;
against the JDK 1.4 libraries are:&lt;/p&gt;

&lt;p&gt;  1) Both variants need to implement the appropriate java.sql&lt;br/&gt;
  interface, and they need to be non-abstract, but a non-abstract&lt;br/&gt;
  class which implements just the subset in JSR-169 doesn&apos;t fulfill&lt;br/&gt;
  the contract of the JDBC 3.0 interfaces (the problem Rick&apos;s patch&lt;br/&gt;
  attempts to solve)&lt;/p&gt;

&lt;p&gt;  2) Some of the JDBC 3.0 methods may reference classes that are not&lt;br/&gt;
  part of JSR-169 and possibly fail to load (the issue Dan raised)&lt;/p&gt;

&lt;p&gt;Keeping the separation between the JDBC 3.0 classes and the JSR-169&lt;br/&gt;
classes seems necessary because of (2). So essentially, we need to&lt;br/&gt;
find a way to solve (1) without merging the JDBC 3.0 implementation&lt;br/&gt;
classes and the JSR-169 classes.&lt;/p&gt;

&lt;p&gt;These classes are the only ones of interest, as far as I can tell:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Driver169&lt;/li&gt;
	&lt;li&gt;EmbeddedSimpleDataSource&lt;/li&gt;
	&lt;li&gt;EmbedResultSet169&lt;/li&gt;
	&lt;li&gt;EmbedPreparedStatement169&lt;/li&gt;
	&lt;li&gt;EmbedCallableStatement169&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Driver169 only implements internal Derby interfaces, so compiling it&lt;br/&gt;
against the JDK 1.4 libraries shouldn&apos;t cause any problems (except&lt;br/&gt;
reduced compile-time checking of that it doesn&apos;t rely on&lt;br/&gt;
classes/methods not part of Foundation 1.1, but that&apos;s no different&lt;br/&gt;
from the vast majority of the engine code).&lt;/p&gt;

&lt;p&gt;EmbeddedSimpleDataSource implements java.sql.DataSource, which is&lt;br/&gt;
identical in JDBC 3.0 and JSR-169, and should therefore not cause any&lt;br/&gt;
problems.&lt;/p&gt;

&lt;p&gt;That leaves us with ResultSet, PreparedStatement and&lt;br/&gt;
CallableStatement. None of these classes contains any code, except a&lt;br/&gt;
constructor that calls the constructor of the super class. What we&lt;br/&gt;
could do to make these classes compile, is to let the ant scripts&lt;br/&gt;
create dummy interfaces that they put in the boot classpath so that&lt;br/&gt;
the compiler doesn&apos;t complain about missing methods. We only need&lt;br/&gt;
three empty interfaces to make this work:&lt;/p&gt;

&lt;p&gt;package java.sql;&lt;br/&gt;
public interface ResultSet {}&lt;/p&gt;

&lt;p&gt;package java.sql;&lt;br/&gt;
public interface PreparedStatement {}&lt;/p&gt;

&lt;p&gt;package java.sql;&lt;br/&gt;
public interface CallableStatement {}&lt;/p&gt;

&lt;p&gt;As a refinement, we could perhaps give the PropertySetter ant task&lt;br/&gt;
some more intelligence so that it set up the JSR-169 classpath with&lt;br/&gt;
Foundation + JSR-169 if those jars are available, and use the JDK 1.4&lt;br/&gt;
classes + dummy JDBC classes if they are not available. If we do that,&lt;br/&gt;
we could even compile more of the engine against the Foundation&lt;br/&gt;
libraries if we have them, and in fact get better compile-time&lt;br/&gt;
checking of larger parts of the code.&lt;/p&gt;</comment>
                            <comment id="12601984" author="djd" created="Tue, 3 Jun 2008 16:56:38 +0100"  >&lt;p&gt;I&apos;m somewhat dubious of creating fake interfaces for JSR 169, especially when it&apos;s just as easy to create valid jsr 169 interfaces classes for ResultSet, PreparedStatement  &amp;amp; CallableStatement by copying the Harmony classes and removing the methods that are JDBC 3.0 only.&lt;/p&gt;

&lt;p&gt;The fake interfaces has the potential for changes to introduce errors where the classes no longer fulfill then JSR169 interfaces.&lt;/p&gt;</comment>
                            <comment id="12602218" author="knutanders" created="Wed, 4 Jun 2008 09:08:39 +0100"  >&lt;p&gt;Good points, Dan.&lt;/p&gt;

&lt;p&gt;So, since Harmony is an Apache project, could we just do &quot;svn copy&quot; of&lt;br/&gt;
the relevant interfaces into our source tree and strip them down? Or&lt;br/&gt;
is there a more complex procedure? Much of the Harmony code has been&lt;br/&gt;
donated by a third-party. Does that mean we need to track down who the&lt;br/&gt;
copyright holders are and update our NOTICE file?&lt;/p&gt;

&lt;p&gt;I don&apos;t think the fake interfaces increase the potential for&lt;br/&gt;
introducing errors, as I also suggested that the real JSR-169&lt;br/&gt;
interfaces are used if jsr169compile.classpath is set, just like&lt;br/&gt;
today. The only difference from the current state is that those who&lt;br/&gt;
haven&apos;t set jsr169compile.classpath also compile in JSR-169 support,&lt;br/&gt;
though with less compile-time checking than those who have set the&lt;br/&gt;
property.&lt;/p&gt;

&lt;p&gt;I agree that stripping down the Harmony interfaces is better as it&lt;br/&gt;
also gives compile-time checking for those who haven&apos;t set the&lt;br/&gt;
property. So if it&apos;s not considerably more work, that sounds like the&lt;br/&gt;
way to go.&lt;/p&gt;</comment>
                            <comment id="12602323" author="rhillegas" created="Wed, 4 Jun 2008 16:39:50 +0100"  >&lt;p&gt;Concerning the first patch: I can&apos;t prove that there won&apos;t be linkage errors on some small platform vm. For modern vms which resolve references lazily, I think there would not be a problem. However, a problem could occur on an old vm which resolves references eagerly. See paragraph 2 in this section of the VM spec: &lt;a href=&quot;http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#22574&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#22574&lt;/a&gt; So Dan&apos;s objection stands.&lt;/p&gt;

&lt;p&gt;I would like to clarify the proposals around creating dummy jar files for the small platform api:&lt;/p&gt;

&lt;p&gt;1) I think that if we go to the trouble of creating dummy sources to compile against, then we should check those sources into Derby&apos;s codeline and build them as part of the normal Derby build. I would propose putting them in the following directories unless someone has a better idea:&lt;/p&gt;

&lt;p&gt;  java/build/jsr169/java/sql&lt;br/&gt;
  java/build/jsr169/javax/sql&lt;/p&gt;

&lt;p&gt;2) I just want to clarify that we are only talking about dummy sources for the jsr169 api (java.sql and javax.sql) and not dummy sources for the entire CDC api.&lt;/p&gt;</comment>
                            <comment id="12602390" author="knutanders" created="Wed, 4 Jun 2008 19:21:49 +0100"  >&lt;p&gt;Hi Rick,&lt;/p&gt;

&lt;p&gt;Both (1) and (2) sound reasonable to me. If we first write the code for the interfaces, I think we should have the source, not the binaries, in the repository. Creating dummy interfaces for the entire Foundation Profile API doesn&apos;t sound worthwhile, given that most of the classes that we compile against it don&apos;t contain any code anyway.&lt;/p&gt;

&lt;p&gt;About the directories: java/build is already taken as a source root, so I don&apos;t think they should be placed as subdirs of that directory. What about java/stubs/jsr169/... ?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;edit: fixed some silly typos&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12602399" author="rhillegas" created="Wed, 4 Jun 2008 19:39:29 +0100"  >&lt;p&gt;Thanks for the quick response, Knut. I think that java/stubs/jsr169 sounds fine.&lt;/p&gt;</comment>
                            <comment id="12607731" author="rhillegas" created="Tue, 24 Jun 2008 20:25:51 +0100"  >&lt;p&gt;Attaching derby-3703-01-ab-jsr169stubs.diff. This introduces a stub implementation of the jsr169 api constructed as follows:&lt;/p&gt;

&lt;p&gt;1) First I grabbed the java.sql and javax.sql packages from Apache Harmony.&lt;/p&gt;

&lt;p&gt;2) Then I pruned out classes and methods which don&apos;t appear in the jsr169 api&lt;/p&gt;

&lt;p&gt;3) I put the resulting class tree under java/stubs/jsr169&lt;/p&gt;

&lt;p&gt;4) I changed the build so that these stubs are compiled into a sealed jar ball which lives in the classes directory&lt;/p&gt;

&lt;p&gt;I would like some advice about what to do next.  I ran the following experiment:&lt;/p&gt;

&lt;p&gt;A) I edited EmbedCallableStatement169, adding a method which returned a java.sql.Array object--that class does not appear in the jsr169 api.&lt;/p&gt;

&lt;p&gt;B) I then compiled Derby with my jsr169compile.classpath pointed at my pre-existing phoneME libraries. This generated a compiler error when javac tripped over the java.sql.Array reference in EmbedCallableStatement169.&lt;/p&gt;

&lt;p&gt;C) I ran the same experiment except that I substituted my generated jar ball in place of the JDBC implementation in my phoneME libraries. I got the same result as in (B), viz. a compiler error on EmbedCallableStatement169.&lt;/p&gt;

&lt;p&gt;D) I then changed the build to point jsr169compile.classpath at my generated jsr169 jar ball  followed by java14compile.classpath. This resulted in a clean build. That is, I saw the same behavior I see when I just set jsr169compile.classpath equal to java14compile.classpath. It appears that javac is happy to read the java.sql.Array class from further down the classpath even though the initial jar ball is sealed.&lt;/p&gt;

&lt;p&gt;Does anyone have some suggestion of what to try next? I would prefer a solution that is not as complicated as culling a stub implementation of the entire CDC class library.&lt;/p&gt;</comment>
                            <comment id="12608044" author="rhillegas" created="Wed, 25 Jun 2008 14:55:17 +0100"  >&lt;p&gt;Attaching derby-3703-01-ac-jsr169stubsNoJar.diff. This is identical to the previous patch except that we do not bother building a sealed jar for the stubs. Instead, we point jsr169compile.classpath into the compiled class tree.&lt;/p&gt;

&lt;p&gt;My previous comment said that you get identical results if the build sets&lt;/p&gt;

&lt;p&gt;jsr169compile.classpath=$&lt;/p&gt;
{out.jsr169.dir}
&lt;p&gt;:$&lt;/p&gt;
{java14compile.classpath}&lt;br/&gt;
&lt;br/&gt;
and &lt;br/&gt;
&lt;br/&gt;
jsr169compile.classpath=${java14compile.classpath}

&lt;p&gt;This is not true. In the first case, the build succeeds. In the second case, the build chokes because our jsr169 client does not implement the full JDBC3 api. So the stubs are providing substantial value.&lt;/p&gt;

&lt;p&gt;I believe this is the behavior which developers will see with this patch:&lt;/p&gt;

&lt;p&gt;1) Regardless of whether you set jsr169compile.classpath in your ant.properties, the Derby build will compile our jsr169 client.&lt;/p&gt;

&lt;p&gt;2) If you edit our jsr169 client, adding references to classes which do not appear in the jsr169 api, then&lt;/p&gt;

&lt;p&gt;  a) you will see compiler errors if you have set jsr169compile.classpath in your ant.properties&lt;/p&gt;

&lt;p&gt;  b) otherwise, the build will succeed and you will find out about your errors only after someone else tries to build in an environment which does set jsr169compile.classpath.&lt;/p&gt;

&lt;p&gt;I believe that (1) is a step forward over the situation today. I believe that (2) is pretty much the situation we are in today.&lt;/p&gt;

&lt;p&gt;I am inclined to think that this is good, incremental improvement.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A      java/stubs&lt;br/&gt;
A      java/stubs/jsr169&lt;br/&gt;
A      java/stubs/jsr169/java&lt;br/&gt;
A      java/stubs/jsr169/java/sql&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Connection.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Timestamp.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/BatchUpdateException.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Types.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Statement.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/DatabaseMetaData.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Savepoint.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Date.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Blob.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/SQLException.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Clob.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/DataTruncation.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/CallableStatement.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/SQLWarning.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/PreparedStatement.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/ResultSet.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/ResultSetMetaData.java&lt;br/&gt;
A      java/stubs/jsr169/java/sql/Time.java&lt;br/&gt;
A      java/stubs/jsr169/javax&lt;br/&gt;
A      java/stubs/jsr169/javax/sql&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetInternal.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetWriter.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSet.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetMetaData.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetEvent.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetReader.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/RowSetListener.java&lt;br/&gt;
A      java/stubs/jsr169/javax/sql/DataSource.java&lt;br/&gt;
M      build.xml&lt;br/&gt;
M      tools/ant/properties/dirs.properties&lt;/p&gt;</comment>
                            <comment id="12608054" author="knutanders" created="Wed, 25 Jun 2008 15:31:52 +0100"  >&lt;p&gt;I haven&apos;t looked at the patch, but I agree that (1) is a step forward and (2) is no better or worse than today.&lt;/p&gt;

&lt;p&gt;If you copied the java.sql files from Harmony, you may also have to copy parts of the NOTICE file from Harmony (see &#167;4.4 in the Apache License, &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0#redistribution&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0#redistribution&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="12608173" author="rhillegas" created="Wed, 25 Jun 2008 21:10:53 +0100"  >&lt;p&gt;Thanks for raising the NOTICE issue, Knut. I asked legal-discuss what needed to be done. So far the responses concur that I need to copy some verbiage out of the Harmony NOTICE file into the Derby NOTICE file. Unless I receive contradictory feedback on legal-discuss, I plan to add the following to the end of the NOTICE file:&lt;/p&gt;



&lt;p&gt;The JDBC api for small devices (under java/stubs/jsr169) was produced by&lt;br/&gt;
trimming sources supplied by the Apache Harmony project. The following&lt;br/&gt;
notice covers the Harmony sources:&lt;/p&gt;

&lt;p&gt;Portions of Harmony were originally developed by&lt;br/&gt;
Intel Corporation and are licensed to the Apache Software&lt;br/&gt;
Foundation under the &quot;Software Grant and Corporate Contribution&lt;br/&gt;
License Agreement&quot;, informally known as the &quot;Intel Harmony CLA&quot;.&lt;/p&gt;</comment>
                            <comment id="12608493" author="rhillegas" created="Thu, 26 Jun 2008 17:44:42 +0100"  >&lt;p&gt;Attaching derby-3703-01-ad-jsr169stubsWithNotice. This is identical to the previous patch except that this adds the above verbiage to the NOTICE file. After applying this patch, I built Derby, ran regression tests on Java 5 cleanly, and ran a sample regression test on PhoneME. Committed at subversion revision 671940.&lt;/p&gt;</comment>
                            <comment id="12608560" author="rhillegas" created="Thu, 26 Jun 2008 20:43:52 +0100"  >&lt;p&gt;Attaching derby-3703-02-aa-buildDiagnostic.diff. This moves the setting of jsr169compile.classpath inside PropertySetter, where jdk14compiler.classpath and jdk15compile.classpath are also set. As a side-effect, this causes chatty builds to report the setting of jsr169compile.classpath. Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/build/org/apache/derbyPreBuild/PropertySetter.java&lt;/p&gt;

&lt;p&gt;Moved the setting of jsr169compile.classpath inside this class.&lt;/p&gt;

&lt;p&gt;M      build.xml&lt;/p&gt;

&lt;p&gt;The setCompilerProperties target no longer sets jsr169compile.classpath.&lt;/p&gt;</comment>
                            <comment id="12608682" author="knutanders" created="Fri, 27 Jun 2008 09:01:36 +0100"  >&lt;p&gt;For some reason, it is not possible to build with ant 1.6.5 after this change, but it works with ant 1.7.0.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/UpdateInfo/672008-buildDetails.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/UpdateInfo/672008-buildDetails.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12608692" author="knutanders" created="Fri, 27 Jun 2008 09:36:59 +0100"  >&lt;p&gt;It looks like the problem with ant 1.6.5 is:&lt;/p&gt;

&lt;p&gt;  1) jsr169stubs is compiled before the setCompilerProperties target, hence the compile.classpath property is not set (ant 1.7.0 seems to automatically use the libraries in JAVA_HOME in this case)&lt;/p&gt;

&lt;p&gt;  2) if (1) is fixed, it fails because java.sql.Timestamp uses StringBuilder (introduced in Java 1.5) internally.&lt;/p&gt;

&lt;p&gt;The attached patch fixes (1) by ensuring that the jsr169stubs target is invoked after setCompilerProperties, and (2) by using StringBuffer instead of StringBuilder. (The implementation of the stub classes isn&apos;t important. We only care about the signatures, so all methods could in fact have been empty.)&lt;/p&gt;</comment>
                            <comment id="12608695" author="knutanders" created="Fri, 27 Jun 2008 09:42:11 +0100"  >&lt;p&gt;Committed d3703-buildbreak.diff with revision 672190.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12347799">DERBY-1672</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12384818" name="d3703-buildbreak.diff" size="1567" author="knutanders" created="Fri, 27 Jun 2008 09:36:59 +0100"/>
                            <attachment id="12383266" name="derby-3703-01-aa-moveJdbc3methods.diff" size="86012" author="rhillegas" created="Tue, 3 Jun 2008 00:43:57 +0100"/>
                            <attachment id="12383265" name="derby-3703-01-aa-moveJdbc3methods.diff" size="86012" author="rhillegas" created="Tue, 3 Jun 2008 00:35:23 +0100"/>
                            <attachment id="12384614" name="derby-3703-01-ab-jsr169stubs.diff" size="429300" author="rhillegas" created="Tue, 24 Jun 2008 20:25:51 +0100"/>
                            <attachment id="12384672" name="derby-3703-01-ac-jsr169stubsNoJar.diff" size="428672" author="rhillegas" created="Wed, 25 Jun 2008 14:55:17 +0100"/>
                            <attachment id="12384769" name="derby-3703-01-ad-jsr169stubsWithNotice.diff" size="429363" author="rhillegas" created="Thu, 26 Jun 2008 17:44:42 +0100"/>
                            <attachment id="12384784" name="derby-3703-02-aa-buildDiagnostic.diff" size="7476" author="rhillegas" created="Thu, 26 Jun 2008 20:43:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 2 Jun 2008 23:28:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30961</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xhr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39244</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>