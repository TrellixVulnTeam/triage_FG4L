<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1516/DERBY-1516.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1516] Inconsistent behavior for getBytes and getSubString for embedded versus network</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1516</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;org.apache.derby.client.am.Clob.getSubString(pos, length) and org.apache.derby.client.am.Blob.getBytes(pos, length) check the length for less than zero. &lt;/p&gt;

&lt;p&gt;            if ((pos &amp;lt;= 0) || (length &amp;lt; 0)) {&lt;br/&gt;
                throw new SqlException(agent_.logWriter_, &quot;Invalid position &quot; + pos + &quot; or length &quot; + length);&lt;/p&gt;

&lt;p&gt;But org.apache.derby.impl.jdbc.EmbedClob(pos, length) and org.apache.derby.impl.jdbc.EmbedBlob(pos, length) check the length for less than or equal to zero.&lt;/p&gt;

&lt;p&gt;       if (length &amp;lt;= 0)&lt;br/&gt;
            throw Util.generateCsSQLException(&lt;br/&gt;
                SQLState.BLOB_NONPOSITIVE_LENGTH, new Integer(length));&lt;/p&gt;

&lt;p&gt;The specification does not disallow length of zero, so zero length should be allowed. I believe that the implementation in org.apache.derby.client.am is correct, and the implementation in org.apache.derby.impl.jdbc is incorrect. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12346058">DERBY-1516</key>
            <summary>Inconsistent behavior for getBytes and getSubString for embedded versus network</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="clr">Craig L Russell</assignee>
                                    <reporter username="clr">Craig L Russell</reporter>
                        <labels>
                    </labels>
                <created>Sun, 16 Jul 2006 21:09:58 +0100</created>
                <updated>Fri, 21 Jan 2011 18:08:42 +0000</updated>
                            <resolved>Fri, 11 Aug 2006 17:49:22 +0100</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12421470" author="clr" created="Sun, 16 Jul 2006 21:11:43 +0100"  >&lt;p&gt;The attached patch is against Derby 10.1. A similar patch should work for the current code base.&lt;/p&gt;</comment>
                            <comment id="12424307" author="clr" created="Sat, 29 Jul 2006 19:59:32 +0100"  >&lt;p&gt;This patch applies to the trunk. I&apos;ve updated the tests and canon for this change as well. &lt;/p&gt;</comment>
                            <comment id="12424444" author="kmarsden" created="Sun, 30 Jul 2006 22:29:16 +0100"  >&lt;p&gt;Thanks Craig for the patch and thanks for volunteering for 10.2.  You bring us up to 43 contributors.  I hope we make 50  #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt; The code change looks good.&lt;/p&gt;

&lt;p&gt;For the test &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I  think  it would be good  to test both 0 and -1 length.&lt;/li&gt;
	&lt;li&gt;I think we need a  full derbyall run with the patch in case other tests are affected.   I noticed with DerbyNetClient framework the blobclob4BLOB test fails with&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;753 del&lt;br/&gt;
&amp;lt; EXPECTED SQLSTATE(XJ071): Zero or negative length argument &apos;-76&apos; passed in a BLOB or CLOB method.&lt;br/&gt;
753a753,754&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(XJ071): Negative length argument &apos;-76&apos; passed in a BLOB or CLOB method.&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(XJ071): Negative length argument &apos;-1&apos; passed in a BLOB or CLOB method.&lt;br/&gt;
Test Failed.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;End:   blobclob4BLOB jdk1.4.2_07 DerbyNetClient 2006-07-30 14:14:40 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the output is expected but the master needs to be updated, which is a necessary pain with our diff based harness.&lt;/p&gt;

&lt;p&gt;I see the following  masters for blobclob4BLOB&lt;br/&gt;
./blobclob4BLOB.out&lt;br/&gt;
./DerbyNet/blobclob4BLOB.out&lt;br/&gt;
./DerbyNetClient/blobclob4BLOB.out&lt;/p&gt;

&lt;p&gt;For DerbyNet some folks don&apos;t test with that framework.  If you don&apos;t please just make a not when you submit the patch that there is a master there that may need to be updated.  Also please assign yourself if you are working actively on this issue.  It is always confusing when there are patches on unassigned issues because it is not really clear whether the patch author intends to pursue the fix furthur.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12424448" author="clr" created="Sun, 30 Jul 2006 23:31:10 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Thanks for the feedback on the patch. A few notes:&lt;/p&gt;

&lt;p&gt;1. I&apos;ve added myself to the derby-developers list so I can assign the issue to myself.&lt;br/&gt;
2. The differences in the master blobclob4BLOB.out files shows the inconsistency of the behaviors quite nicely.&lt;br/&gt;
3. I can update the master blobclob4BLOB.out files once we agree what we should test. What I understand from you is that you would like to see lengths of 0, -1, and -76 tested, and the master files updated. But the tests in question clobTest6 and blobTest6 are negative tests that look for exceptions. It&apos;s not clear to me that the test for 0 (which works for the network case) should be tested here.&lt;br/&gt;
4. I noticed an unusual comment in clobTest6:&lt;br/&gt;
            // 0 or negative position value&lt;br/&gt;
                        if (isDerbyNet)&lt;br/&gt;
                                System.out.println(&quot; negative tests for clob.getSubstring won&apos;t run  for network server  until 5243 is fixed&quot;);&lt;br/&gt;
Can you translate this? What&apos;s a 5243? &lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Craig&lt;/p&gt;</comment>
                            <comment id="12424599" author="clr" created="Mon, 31 Jul 2006 19:34:43 +0100"  >&lt;p&gt;I&apos;ve updated the patch with changes to the master/DerbyNetClient/blobclob4BLOB.out canon.&lt;/p&gt;

&lt;p&gt;I did not update master/DerbyNet/blobclob4BLOB.out canon because this canon seems out of date wrt the code. If this is incorrect, please let me know.&lt;/p&gt;</comment>
                            <comment id="12424636" author="kmarsden" created="Mon, 31 Jul 2006 21:15:56 +0100"  >&lt;p&gt;Thanks Craig for updating the masters.  &lt;/p&gt;

&lt;p&gt;I thiink it is really neat how specifying the patch of the same name grays out the old patches but they are still available, seems like a great way to keep our reworked patches organized. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I still think it would be good to add some 0 length test cases before we enable it to make sure behaviour is consistent between the two drivers.   Linking to derby-dev discussion&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Re%3A--jira--Commented%3A-%28DERBY-1516%29-Inconsistent-behavior-for-getBytes-and-getSubString-for-embedded-versus-network-p5577797.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A--jira--Commented%3A-%28DERBY-1516%29-Inconsistent-behavior-for-getBytes-and-getSubString-for-embedded-versus-network-p5577797.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am not sure if the two drivers are consistent in this regard or what the behavior is.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12424673" author="clr" created="Mon, 31 Jul 2006 22:54:39 +0100"  >&lt;p&gt;Including the discussion from the alias referenced immediately above:&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; One interesting test with 0 length is the case for getSubString(1,0) &lt;br/&gt;
&amp;gt;&amp;gt; for a zero length lob. &lt;br/&gt;
&amp;gt;&amp;gt; Should it throw an exception or return a zero length string? &lt;/p&gt;

&lt;p&gt;&amp;gt;The API working doesn&apos;t give much help to resolve this; the wording for the exception in JDK 1.6 is &lt;/p&gt;

&lt;p&gt;&amp;gt; Throws: &lt;br/&gt;
&amp;gt;    SQLException - if there is an error accessing the CLOB value &lt;/p&gt;

&lt;p&gt;&amp;gt; which I guess is equivalent to YMMV... A case for Lance? &lt;/p&gt;

&lt;p&gt;&amp;gt; Even if this case is allowed, should it make a difference if position is &amp;gt; (length+1), e.g. getSubString(2,0) for an empty CLOB? &lt;/p&gt;

&lt;p&gt;Lance has not replied to a request to update the wording, and I think time is running out on this to be added to the specification in progress.&lt;/p&gt;

&lt;p&gt;The jdbc spec has followed the java.lang.String spec pretty closely, modulo 1-origin vs. 0-origin indexing. The String spec allows accessing substrings of a 0-length string, as follows:&lt;/p&gt;

&lt;p&gt;public String substring(int beginIndex,&lt;br/&gt;
                        int endIndex)&lt;br/&gt;
Returns a new string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex...&lt;br/&gt;
IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.&lt;/p&gt;

&lt;p&gt;For a zero-length String:&lt;br/&gt;
1. endIndex must be 0 or else endIndex would be larger than the length of the String;&lt;br/&gt;
2. beginIndex must be 0 or else beginIndex would be larger than endIndex.&lt;/p&gt;

&lt;p&gt;Translating this to jdbc, for a zero-length Clob:&lt;br/&gt;
1. position must be 1;&lt;br/&gt;
2. length must be 0.&lt;/p&gt;

&lt;p&gt;I agree we should add positive test cases to extract a zero-length substring from a Clob and Blob. &lt;/p&gt;

&lt;p&gt;I propose adding to clobTest2 and blobTest2 a test like: &lt;br/&gt;
blobclob4BLOB.printInterval(clob, 1, 0, 7, i, clobLength) // zero length&lt;br/&gt;
blobclob4BLOB.printInterval(blob, 1, 0, 7, i, blobLength) // zero length&lt;/p&gt;</comment>
                            <comment id="12424850" author="kmarsden" created="Tue, 1 Aug 2006 13:51:31 +0100"  >&lt;p&gt;The new positive cases sound fine to me. &lt;/p&gt;

&lt;p&gt; If I understand all you wrote, you are saying that getSubstring(pos,0) where pos &amp;gt; the length of the clob  should throw an exception for now while spec clarification is underway.  Is that correct?  If so,  that sounds good to me as it is always &lt;b&gt;much&lt;/b&gt; easier to change an exception case to work in the future if need be.  What we want to avoid is a situation where something works and then we have to throw an exception later  to be compliant.  Can you add negative cases for this to make sure we are throwing an appropriate exception?  Then I think all the needed zero length cases will be covered.&lt;/p&gt;


&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12424887" author="clr" created="Tue, 1 Aug 2006 15:54:13 +0100"  >&lt;p&gt;Thanks for the feedback. I&apos;ll make some positive and negative test cases and update the patch.&lt;/p&gt;

&lt;p&gt;Yes, I&apos;m suggesting that we follow the java.lang.String specification and allow for zero-length getSubString only if the position is legal. This is so there&apos;s no special if (length == 0) &lt;/p&gt;
{ // ignore position for 0-length ...}
&lt;p&gt;. It actually simplifies development.&lt;/p&gt;</comment>
                            <comment id="12425340" author="clr" created="Wed, 2 Aug 2006 19:48:45 +0100"  >&lt;p&gt;There is different behavior between embedded and network in other areas as well as the one I&apos;m looking at here. I&apos;d like to see what people think about this as well. It&apos;s hard to add test cases for zero-length requests without rationalizing the current behavior.&lt;/p&gt;

&lt;p&gt;1. Both embedded and network do not return an error but truncate the result when going past the end of the Clob. That is, ask a Clob with length 25 for 50 characters starting at position 1 and get 26 characters and no exception.&lt;/p&gt;

&lt;p&gt;Proposal: Leave this behavior; we would need to add a new message, since the current message &quot;SQLSTATE(XJ076): The position argument &apos;5,910&apos; exceeds the size of the BLOB/CLOB&quot; cannot be used to describe running off the end of the Clob. I&apos;d like to see this changed in future, to match the java.lang.String behavior, but this is a compatibility issue (existing applications might depend on this behavior).&lt;/p&gt;

&lt;p&gt;2. Different behavior for zero-length Clobs:&lt;br/&gt;
Embedded Clob with zero length: throws an exception trying to get any non-zero length substring&lt;br/&gt;
Network Clob with zero length throws an exception only if the position is not == 1.&lt;/p&gt;

&lt;p&gt;Proposal: Change Network to throw an exception on any request to get a non-zero length substring.&lt;/p&gt;

&lt;p&gt;Craig&lt;/p&gt;</comment>
                            <comment id="12425440" author="clr" created="Thu, 3 Aug 2006 06:49:12 +0100"  >&lt;p&gt;This patch solves the discrepancy between the treatment of getBytes and getSubString where the requested length is zero. This makes up 2 lines of the patch, in the first 10 lines of EmbedBlob and EmbedClob. Most of the rest of the patch is testing.&lt;/p&gt;

&lt;p&gt;I&apos;ve updated embedded and network Lobs to consistently check validity of position requested. The position must be between 1 and the last position of the Lob. I&apos;ve added positive test cases for retrieving zero length byte[ ] and zero length Strings from position 1 and the last position of Blob and Clobs. &lt;/p&gt;

&lt;p&gt;I&apos;ve added negative test cases for retrieving zero length byte[ ] and String from position 0 and one past the end of the Blob and Clob.&lt;/p&gt;

&lt;p&gt;I&apos;ve changed the message regarding invalid length so that zero length is not mentioned as an error.&lt;/p&gt;

&lt;p&gt;I&apos;ve removed the code to disable tests that was put in because of issues 5243 and 5914. There is no longer any difference between the behavior of embedded and network drivers due to these issues. The canons for blobTest2, clobTest2, blobTest6, and clobTest6 are now the same for embedded and network.&lt;/p&gt;

&lt;p&gt;I just had to reformat some of the test code which had random placement of beginning and ending braces, indentations, and try/catch formatting, and greater than 80 character lines. I removed commented-out code that represented the previous versions of clobTest2 and blobTest2.&lt;/p&gt;

&lt;p&gt;I preserved the treatment of requests that started within the Lob but ran off the end. These cases still return a shorter result than requested, returning the last element of the Lob as the last element of the result. So there should be no backward compatibility issues. All the existing code will still work with this patch. &lt;/p&gt;</comment>
                            <comment id="12425568" author="dagw" created="Thu, 3 Aug 2006 18:07:02 +0100"  >&lt;p&gt;If you are modelling this on the java.lang.String modulo indexing, it&lt;br/&gt;
seems to me that this is slightly wrong:&lt;/p&gt;

&lt;p&gt;&quot;The position must be between 1 and the last position of the Lob&quot;.&lt;/p&gt;

&lt;p&gt;I think it should be &lt;/p&gt;

&lt;p&gt;&quot;The position must be between 1 and the last position + 1 of the Lob&quot;,&lt;br/&gt;
cf. this example which does not throw exceptions. In the substring of&lt;br/&gt;
t2, the position is &lt;b&gt;one past&lt;/b&gt; the final position of the string, final&lt;br/&gt;
position being 0.&lt;/p&gt;

&lt;p&gt;                String t1 = &quot;&quot;;&lt;br/&gt;
                String t2 = &quot;a&quot;;&lt;/p&gt;

&lt;p&gt;                String t3;&lt;/p&gt;

&lt;p&gt;                try &lt;/p&gt;
{
                        System.out.println(&quot;t1.substring(0,0) = &apos;&quot; +
                                                           t1.substring(0,0) +  &quot;&apos;&quot;);
                }
&lt;p&gt; catch (IndexOutOfBoundsException e) &lt;/p&gt;
{
                        System.out.println(&quot;t1.substring(0,0) throws&quot;);
                }

&lt;p&gt;                try &lt;/p&gt;
{
                        System.out.println(&quot;t2.substring(1,1) = &apos;&quot; +
                                                           t2.substring(1,1) +  &quot;&apos;&quot;);
                }
&lt;p&gt; catch (IndexOutOfBoundsException e) &lt;/p&gt;
{
                        System.out.println(&quot;t2.substring(1,1) throws&quot;);
                }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;that is, you can always request an empty string from the position&lt;br/&gt;
&lt;b&gt;immediately after&lt;/b&gt; the last byte, but not further out. This would&lt;br/&gt;
remove the asymmetry you have in the code, too:&lt;/p&gt;

&lt;p&gt;                if (this.length() == 0) {&lt;br/&gt;
                    if (pos &amp;gt; 1) &lt;/p&gt;
{
                    throw new SqlException(agent_.logWriter_, 
                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), 
                        new Long(pos));
                    }
&lt;p&gt;                } else { // this.length() &amp;gt; 0&lt;br/&gt;
                    if (pos &amp;gt; this.length()) &lt;/p&gt;
{
                    throw new SqlException(agent_.logWriter_, 
                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), 
                        new Long(pos));                    
                    }
&lt;p&gt;                }&lt;br/&gt;
would reduce to:&lt;/p&gt;

&lt;p&gt;                if (pos &amp;gt; this.length() + 1) &lt;/p&gt;
{
                    throw new SqlException(agent_.logWriter_, 
                        new ClientMessageId(SQLState.BLOB_POSITION_TOO_LARGE), 
                        new Long(pos));
                }

&lt;p&gt;I also think this is the symmetry one would want for programming&lt;br/&gt;
convenience, like you have mentioned. &lt;/p&gt;</comment>
                            <comment id="12425588" author="clr" created="Thu, 3 Aug 2006 19:51:04 +0100"  >&lt;p&gt;Hi Dag,&lt;/p&gt;

&lt;p&gt;You know, I read this a hundred times and did not read it as allowing t2.substring(1,1), since clearly 1 is beyond the length of the String.&lt;/p&gt;

&lt;p&gt;substring(int beginIndex, int endIndex)&lt;br/&gt;
Throws:&lt;br/&gt;
IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, or beginIndex is larger than endIndex.&lt;/p&gt;

&lt;p&gt;But you are right and I&apos;ll change the implementation to support this. Much cleaner indeed.&lt;/p&gt;

&lt;p&gt;I will reimplement the test for the case of pos one beyond the length of the Lob, which would now be legal. It would always return a zero-length result.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Craig&lt;/p&gt;</comment>
                            <comment id="12425635" author="clr" created="Fri, 4 Aug 2006 00:25:35 +0100"  >&lt;p&gt;This patch incorporates all of the comments (thank you, Kathey and Dag) and therefore the logic is simpler for detecting invalid positions.&lt;/p&gt;

&lt;p&gt;The canons for blobclob4BLOB have been changed to reflect that a request for bytes or a substring starting at position (length + 1) is now valid and the result will be of zero length, regardless of the length requested. This will not break existing applications except possibly regression testing applications that depend on Derby throwing an exception for this case. &lt;/p&gt;</comment>
                            <comment id="12426397" author="clr" created="Tue, 8 Aug 2006 04:13:06 +0100"  >&lt;p&gt;I have run derby-all with these changes, and no errors were reported.&lt;/p&gt;

&lt;p&gt;Any other comments before I check this in?&lt;/p&gt;</comment>
                            <comment id="12426525" author="kmarsden" created="Tue, 8 Aug 2006 11:25:40 +0100"  >&lt;p&gt;Thanks Craig for the change,  adding the test cases, and making sure client and embedded have the same behavior.   My only comment is that  it would be  be good to first check in the reformatting changes for the test  and keep just the substantive code changes in issue commit..   I know the current situation with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1363&quot; title=&quot;Derby should publish a well defined coding convention per the db project guidlines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1363&quot;&gt;DERBY-1363&lt;/a&gt; is pretty intolerable, but it is better to keep code formatting changes, when necessary, separate from the actual code changes.&lt;/p&gt;</comment>
                            <comment id="12426621" author="djd" created="Tue, 8 Aug 2006 17:13:42 +0100"  >&lt;p&gt;Since this has been a tricky area to get correct, it seems that adding Javadoc comments to the methods your are modifying in the Derby implementations of Clob &amp;amp; Blob would add great value. Otherwise a few months from now someone may change the code again thinking it is wrong (especially since the code no longer matches the javadoc).&lt;/p&gt;

&lt;p&gt;In Derby&apos;s JDBC implementation notes this comment exists for getSubString&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the pos (position) argument is greater than the length of the CLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function.&lt;/p&gt;

&lt;p&gt;Does that need to be corrected, do we have an issue because the new code will not match SQL SUBSTR?&lt;/p&gt;</comment>
                            <comment id="12426642" author="clr" created="Tue, 8 Aug 2006 18:11:59 +0100"  >&lt;p&gt;I&apos;ve updated the Derby workspace as of this morning.&lt;/p&gt;

&lt;p&gt;I&apos;ve removed the formatting changes from blobclob4BLOB.java. They would have been duplicated by the changes anticipated by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1363&quot; title=&quot;Derby should publish a well defined coding convention per the db project guidlines&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1363&quot;&gt;DERBY-1363&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tests pass. Check in at will.&lt;/p&gt;


</comment>
                            <comment id="12426647" author="clr" created="Tue, 8 Aug 2006 18:30:15 +0100"  >&lt;p&gt;Dan observes:&lt;/p&gt;

&lt;p&gt;&amp;gt; Since this has been a tricky area to get correct, it seems that adding Javadoc comments to the methods your are modifying in the Derby implementations of Clob &amp;amp; Blob would add great value. Otherwise a few months from now someone may change the code again thinking it is wrong (especially since the code no longer matches the javadoc). &lt;/p&gt;

&lt;p&gt;Could you please be a bit more specific, so I can do this in one pass? Which parts of the code do you want to be better commented; e.g. just the parts I modified, or the entire method?&lt;/p&gt;

&lt;p&gt;&amp;gt; In Derby&apos;s JDBC implementation notes this comment exists for getSubString &lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;a href=&quot;http://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/papers/JDBCImplementation.html#getSubString%28int+pos%2C+int+length%29&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&amp;gt; If the pos (position) argument is greater than the length of the CLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function. &lt;/p&gt;

&lt;p&gt;&amp;gt; Does that need to be corrected, do we have an issue because the new code will not match SQL SUBSTR?&lt;/p&gt;

&lt;p&gt;Yes, that needs to be corrected, and I propose:&lt;br/&gt;
If the pos (position) argument is greater than the length + 1 of the CLOB then an exception is thrown. This matches the semantics of the java.lang.String.subString(int beginIndex, int endIndex) method. &lt;/p&gt;

&lt;p&gt;A similar change is needed for Blob.getBytes&lt;br/&gt;
If the pos (position) argument is greater than the length of the BLOB then an exception is thrown. This matches the semantics of the SQL SUBSTR function.&lt;/p&gt;

&lt;p&gt;I propose:&lt;br/&gt;
If the pos (position) argument is greater than the length + 1 of the BLOB then an exception is thrown. This matches the semantics of the java.lang.System.arraycopy method.&lt;/p&gt;

&lt;p&gt;I don&apos;t think that matching SQL semantics is as important as matching java language semantics. After all, this API is a java language API.&lt;/p&gt;</comment>
                            <comment id="12426674" author="clr" created="Tue, 8 Aug 2006 19:44:32 +0100"  >&lt;p&gt;Here&apos;s a proposed javadoc comment for EmbedClob.getSubString:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Valid pos values require that 0 &amp;lt; pos &amp;lt; clob.length + 1.&lt;/li&gt;
	&lt;li&gt;Valid length values require that 0 &amp;lt;= length &amp;lt;= clob.length.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If this looks ok, I can update the javadoc for the other implementation classes.&lt;/p&gt;</comment>
                            <comment id="12426676" author="clr" created="Tue, 8 Aug 2006 19:51:06 +0100"  >&lt;p&gt;Whoops, there is no maximum restriction on length. Update the comment to:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Valid length values require that 0 &amp;lt;= length.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12426687" author="djd" created="Tue, 8 Aug 2006 20:35:04 +0100"  >&lt;p&gt;I mean comments clarifying the length &amp;amp; position arguments passed in and the valid ranges etc. Though while you were in there you could see if the description was correct, e.g. EmbedClob.getSubString() says:&lt;/p&gt;

&lt;p&gt;NOTE: return the empty string if pos is too large&lt;/p&gt;

&lt;p&gt;which I don&apos;t think is true before or after your changes.&lt;/p&gt;

&lt;p&gt;I think there&apos;s a strong case for matching the SQL semantics rather than the Java semantics. One data point is that the value offsets are 1-based&lt;br/&gt;
matching SQL, not 0-based matching String. This is the offset into a class that represents a SQL value, not a Java value.&lt;/p&gt;

&lt;p&gt;The other data point is the new range for the position argument looks very strange:&lt;/p&gt;

&lt;p&gt;If the pos (position) argument is greater than the length + 1 of the BLOB then an exception is thrown.&lt;/p&gt;

&lt;p&gt;Why length +1, why not &amp;gt; length?&lt;/p&gt;

&lt;p&gt;Also that JDBC document already has clarified the behvaiour, why is it changing?&lt;/p&gt;
</comment>
                            <comment id="12426707" author="clr" created="Tue, 8 Aug 2006 21:44:22 +0100"  >&lt;p&gt;Hi Dan,&lt;/p&gt;

&lt;p&gt;Thanks for your comments.&lt;/p&gt;

&lt;p&gt;&amp;gt; I mean comments clarifying the length &amp;amp; position arguments passed in and the valid ranges etc. Though while you were in there you could see if the description was correct, e.g. EmbedClob.getSubString() says: &lt;/p&gt;

&lt;p&gt;&amp;gt; NOTE: return the empty string if pos is too large &lt;/p&gt;

&lt;p&gt;&amp;gt; which I don&apos;t think is true before or after your changes. &lt;/p&gt;

&lt;p&gt;I think I understand your comments and will try to update the comments to reflect reality.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why length +1, why not &amp;gt; length? &lt;/p&gt;

&lt;p&gt;If 0 &amp;lt; pos &amp;lt;= length, then there is no way to get any bytes (even zero bytes) from a 0-length blob. And I don&apos;t believe that this is the intent. Nor is it consistent with what other vendors have implemented. &lt;/p&gt;

&lt;p&gt;There is no loss of functionality in the &quot;length + 1&quot; behavior. If your position is length + 1, then you can only get zero-length results from it. And this is exactly the case of a zero-length Lob.&lt;/p&gt;

&lt;p&gt;The title of this issue is &quot;inconsistent behavior for embedded versus network&quot;. So something&apos;s gotta give. And after looking at it in detail, I&apos;m convinced that the right behavior is to be consistent with regard to getBytes and getSubString; with regard to zero-length and non-zero-length Lobs; and with regard to embedded versus network. And this patch does it.&lt;/p&gt;</comment>
                            <comment id="12426714" author="djd" created="Tue, 8 Aug 2006 21:58:20 +0100"  >&lt;p&gt;thanks Craig, that&apos;s good reasoning, and the type of useful information I would like to see in the javadoc for these methods (using character for Clob and bytes for Blob though). I think that&apos;s much clearer than trying to equate to the behvaiour of String.substring.&lt;/p&gt;
</comment>
                            <comment id="12426790" author="clr" created="Wed, 9 Aug 2006 02:38:59 +0100"  >&lt;p&gt;I&apos;ve updated the javadoc for the getBytes in EmbedBlob; and getSubString in EmbedClob. I&apos;ve created javadoc for the methods getBytes in Blob; and getSubString in Clob. I&apos;ve corrected the comments within the implementation of the methods.&lt;/p&gt;

&lt;p&gt;No other code changes were made compared to the last patch.&lt;/p&gt;</comment>
                            <comment id="12427062" author="davidvc" created="Thu, 10 Aug 2006 01:26:10 +0100"  >&lt;p&gt;I&apos;m working on comitting this patch&lt;/p&gt;</comment>
                            <comment id="12427263" author="davidvc" created="Thu, 10 Aug 2006 17:26:13 +0100"  >&lt;p&gt;Hi, Craig. I merged your patch into my sandbox and ran derbyall, and I&apos;m sorry to say I had a test failure.  &lt;/p&gt;

&lt;p&gt;derbynetmats/DerbyNet/jdbcapi/blobclob4BLOB is the test, I think you just didn&apos;t run this under the DerbyNet framework (which is the IBM JDBC driver).  Here are the diffs.  If you think these look good I can go ahead and update the master file.  However, I am concerned about the &quot;open result set&quot; error at the end of the diff...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file derbyall/derbynetmats/DerbyNet/jdbcapi/blobclob4BLOB.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: blobclob4BLOB jdk1.5.0_06 DerbyNet derbynetmats:jdbcapi 2006-08-09 18:04:28 ***&lt;br/&gt;
90d89&lt;br/&gt;
&amp;lt; CLOB getSubString 1 &amp;gt; 0&lt;br/&gt;
92,93d90&lt;br/&gt;
&amp;lt; CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 &amp;gt; 0&lt;br/&gt;
&amp;lt; CLOB getSubString 1 &amp;gt; 0&lt;br/&gt;
95 del&lt;br/&gt;
&amp;lt; CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 &amp;gt; 0&lt;br/&gt;
95a92,93&lt;br/&gt;
&amp;gt; 1(7) (len 0)&lt;br/&gt;
&amp;gt; 1(8) (len 0)&lt;br/&gt;
107a106,107&lt;br/&gt;
&amp;gt; 2(7) (len 0)&lt;br/&gt;
&amp;gt; 2(8) (len 0)&lt;br/&gt;
119a120,121&lt;br/&gt;
&amp;gt; 3(7) (len 0)&lt;br/&gt;
&amp;gt; 3(8) (len 0)&lt;br/&gt;
132a135,136&lt;br/&gt;
&amp;gt; 4(7) (len 0)&lt;br/&gt;
&amp;gt; 4(8) (len 0)&lt;br/&gt;
144a149,150&lt;br/&gt;
&amp;gt; 5(7) (len 0)&lt;br/&gt;
&amp;gt; 5(8) (len 0)&lt;br/&gt;
154 del&lt;br/&gt;
&amp;lt; 6(7)&lt;br/&gt;
154a160,162&lt;br/&gt;
&amp;gt; 6(7) (len 0)&lt;br/&gt;
&amp;gt; 6(8) (len 0)&lt;br/&gt;
&amp;gt; 6(9)&lt;br/&gt;
166d173&lt;br/&gt;
&amp;lt; CLOB getSubString 1 &amp;gt; 0&lt;br/&gt;
168,169d174&lt;br/&gt;
&amp;lt; CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 &amp;gt; 0&lt;br/&gt;
&amp;lt; CLOB getSubString 1 &amp;gt; 0&lt;br/&gt;
171 del&lt;br/&gt;
&amp;lt; CLOB FAIL - NO ERROR ON getSubString POS TOO LARGE 1 &amp;gt; 0&lt;br/&gt;
171a176,177&lt;br/&gt;
&amp;gt; 7(7) (len 0)&lt;br/&gt;
&amp;gt; 7(8) (len 0)&lt;br/&gt;
183 del&lt;br/&gt;
&amp;lt; 8(7)&lt;br/&gt;
183a189,191&lt;br/&gt;
&amp;gt; 8(7) (len 0)&lt;br/&gt;
&amp;gt; 8(8) (len 0)&lt;br/&gt;
&amp;gt; 8(9)&lt;br/&gt;
194 del&lt;br/&gt;
&amp;lt; 9(7)&lt;br/&gt;
194a202,204&lt;br/&gt;
&amp;gt; 9(7) (len 0)&lt;br/&gt;
&amp;gt; 9(8) (len 0)&lt;br/&gt;
&amp;gt; 9(9)&lt;br/&gt;
456a467&lt;br/&gt;
&amp;gt; java.lang.StringIndexOutOfBoundsException: String index out of range: -1&lt;br/&gt;
460 del&lt;br/&gt;
&amp;lt;  negative tests for clob.getSubstring won&apos;t run  for network server  until 5243 is fixed&lt;br/&gt;
460a471,475&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 5&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -76&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&lt;br/&gt;
&amp;gt; FAIL &amp;#8211; unexpected exception:java.lang.StringIndexOutOfBoundsException: String index out of range: -1&lt;br/&gt;
577 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
577a592&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
579 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
579a594&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
581 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
581a596&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
583 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
583a598&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
585 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
586 del&lt;br/&gt;
&amp;lt; testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
586a600&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
588,589d601&lt;br/&gt;
&amp;lt; FAIL testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
&amp;lt; testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
591 del&lt;br/&gt;
&amp;lt; FAIL testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
591a603,604&lt;br/&gt;
&amp;gt; 1(7)&lt;br/&gt;
&amp;gt; 1(8)&lt;br/&gt;
593 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
593a606&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
595 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
595a608&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
597 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
597a610&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
599 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
599a612&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
601 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
601a614&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
603a617,618&lt;br/&gt;
&amp;gt; 2(7)&lt;br/&gt;
&amp;gt; 2(8)&lt;br/&gt;
605 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
605a620&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
607 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
607a622&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
609 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
609a624&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
611 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
611a626&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
613 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
613a628&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
615a631,632&lt;br/&gt;
&amp;gt; 3(7)&lt;br/&gt;
&amp;gt; 3(8)&lt;br/&gt;
617 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
617a634&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
619 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
619a636&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
621 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
621a638&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
623 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
623a640&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
625 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
625a642&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
628a646,647&lt;br/&gt;
&amp;gt; 4(7)&lt;br/&gt;
&amp;gt; 4(8)&lt;br/&gt;
630 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
630a649&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
632 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
632a651&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
634 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
634a653&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
636 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
636a655&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
638 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
638a657&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
640a660,661&lt;br/&gt;
&amp;gt; 5(7)&lt;br/&gt;
&amp;gt; 5(8)&lt;br/&gt;
650a672,673&lt;br/&gt;
&amp;gt; 6(8)&lt;br/&gt;
&amp;gt; 6(9)&lt;br/&gt;
653 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
653a676&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
655 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
655a678&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
657 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
657a680&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
659 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
659a682&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
661 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
662 del&lt;br/&gt;
&amp;lt; testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
662a684&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
664,665d685&lt;br/&gt;
&amp;lt; FAIL testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
&amp;lt; testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
667 del&lt;br/&gt;
&amp;lt; FAIL testing Blob.getBytes() with pos 1 &amp;gt; 0&lt;br/&gt;
667a687,688&lt;br/&gt;
&amp;gt; 7(7) &lt;br/&gt;
&amp;gt; 7(8) &lt;br/&gt;
669 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
669a690&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
671 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
671a692&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
673 del&lt;br/&gt;
&amp;lt; Known JCC Bug 5914&lt;br/&gt;
673a694&lt;br/&gt;
&amp;gt; FAIL: Caught exception java.lang.NegativeArraySizeException&lt;br/&gt;
679a701,702&lt;br/&gt;
&amp;gt; 8(8) &lt;br/&gt;
&amp;gt; 8(9) &lt;br/&gt;
690a714,715&lt;br/&gt;
&amp;gt; 9(8) &lt;br/&gt;
&amp;gt; 9(9) &lt;br/&gt;
741a767&lt;br/&gt;
&amp;gt; java.lang.NegativeArraySizeException&lt;br/&gt;
755 del&lt;br/&gt;
&amp;lt; EXPECTED SQLSTATE(null): Search pattern cannot be null.&lt;br/&gt;
756 del&lt;br/&gt;
&amp;lt; EXPECTED SQLSTATE(null): Search pattern cannot be null.&lt;br/&gt;
757 del&lt;br/&gt;
&amp;lt; blobTest6 finished&lt;br/&gt;
757a781,783&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 1 or length -1&lt;br/&gt;
&amp;gt; EXPECTED SQLSTATE(null): Invalid position 0 or length 0&lt;br/&gt;
&amp;gt; FAIL &amp;#8211; unexpected exception:java.lang.NegativeArraySizeException&lt;br/&gt;
761 del&lt;br/&gt;
&amp;lt; Row Count 0 Null Row 0&lt;br/&gt;
762 del&lt;br/&gt;
&amp;lt; Row Count 9 Null Row 1&lt;br/&gt;
763 del&lt;br/&gt;
&amp;lt; Row Count 9 Null Row 1&lt;br/&gt;
764 del&lt;br/&gt;
&amp;lt; blobTest8Trigger finished&lt;br/&gt;
764a787,789&lt;br/&gt;
&amp;gt; FAIL &amp;#8211; unexpected exception ****************&lt;br/&gt;
&amp;gt; SQLSTATE(X0X95): Operation &apos;CREATE TRIGGER&apos; cannot be performed on object &apos;TESTBLOB&apos; because there is an open ResultSet dependent on that object.&lt;br/&gt;
&amp;gt; com.ibm.db2.jcc.c.SqlException: Operation &apos;CREATE TRIGGER&apos; cannot be performed on object &apos;TESTBLOB&apos; because there is an open ResultSet dependent on that object.&lt;br/&gt;
Test Failed.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12427294" author="clr" created="Thu, 10 Aug 2006 19:06:52 +0100"  >&lt;p&gt;Hi David,&lt;/p&gt;

&lt;p&gt;From my comments 31-Jul-2006:&lt;/p&gt;

&lt;p&gt;&amp;gt; I did not update master/DerbyNet/blobclob4BLOB.out canon because this canon seems out of date wrt the code. If this is incorrect, please let me know. &lt;/p&gt;

&lt;p&gt;I recommend checking in the new DerbyNet canon for the blobclob4BLOB output. The differences in the DerbyNet canon are expected due to the additional tests that I wrote. The &quot;unexpected exception&quot; in DerbyNet is expected in this scenario due to the blobTest6 stimulating the DerbyNet driver to throw an exception that is not a SQLException. Once the driver is fixed to properly handle boundary errors (length &amp;lt; 0; pos &amp;gt; lob.length + 1; etc.), this unexpected exception will go away.&lt;/p&gt;

&lt;p&gt;There is a general issue in many of the tests that I looked at, that result sets, statements, and connections are not closed in a finally block but are in the main line code. So &quot;unexpected exceptions&quot; in general will cause subsequent tests to behave unpredictably. But it&apos;s not specific to this issue.&lt;/p&gt;</comment>
                            <comment id="12427555" author="davidvc" created="Fri, 11 Aug 2006 17:49:22 +0100"  >&lt;p&gt;Sending        java/client/org/apache/derby/client/am/Blob.java&lt;br/&gt;
Sending        java/client/org/apache/derby/client/am/Clob.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/jdbc/EmbedClob.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/loc/messages_en.properties&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNet/blobclob4BLOB.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/DerbyNetClient/blobclob4BLOB.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/blobclob4BLOB.out&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java&lt;br/&gt;
Transmitting file data .........&lt;br/&gt;
Committed revision 430825.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="32841">DERBY-310</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12347932">DERBY-1691</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12346951">DERBY-1615</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12338436" name="DERBY-1516.patch" size="53008" author="clr" created="Wed, 9 Aug 2006 02:38:59 +0100"/>
                            <attachment id="12338401" name="DERBY-1516.patch" size="46014" author="clr" created="Tue, 8 Aug 2006 18:11:59 +0100"/>
                            <attachment id="12338107" name="DERBY-1516.patch" size="51807" author="clr" created="Fri, 4 Aug 2006 00:25:35 +0100"/>
                            <attachment id="12338042" name="DERBY-1516.patch" size="54275" author="clr" created="Thu, 3 Aug 2006 06:49:12 +0100"/>
                            <attachment id="12337824" name="DERBY-1516.patch" size="6572" author="clr" created="Mon, 31 Jul 2006 19:34:43 +0100"/>
                            <attachment id="12337752" name="DERBY-1516.patch" size="5529" author="clr" created="Sat, 29 Jul 2006 19:59:32 +0100"/>
                            <attachment id="12336972" name="DERBY-1516.patch" size="1250" author="clr" created="Sun, 16 Jul 2006 21:11:43 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 30 Jul 2006 21:29:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22550</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0kpj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37173</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>