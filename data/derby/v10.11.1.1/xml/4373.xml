<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4373/DERBY-4373.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4373] different results with network server vs. embedded on select from a temporary table with resultset cursor hold over commit</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4373</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Found this during review of conversion of declareGlobalTempTableJavaJDBC30 to junit (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2895&quot; title=&quot;convert lang/declareGlobalTempTableJavaJDBC30.java to JUnit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2895&quot;&gt;&lt;del&gt;DERBY-2895&lt;/del&gt;&lt;/a&gt;) - when I tried to run the test with network server:&lt;/p&gt;

&lt;p&gt;We define a statement like so:&lt;br/&gt;
        Statement s1 = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,&lt;br/&gt;
                    ResultSet.HOLD_CURSORS_OVER_COMMIT );&lt;br/&gt;
and global temp table like so:&lt;br/&gt;
            s1.executeUpdate(&quot;declare global temporary table SESSION.t1(c11 int, c12 int) on commit delete rows not logged&quot;);&lt;/p&gt;

&lt;p&gt;Then, we insert 2 rows, open a result set that selects *, then do commit.&lt;br/&gt;
With a new resultset, we do another select, which with network server gives 0 rows, but with embedded, 2.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12435264">DERBY-4373</key>
            <summary>different results with network server vs. embedded on select from a temporary table with resultset cursor hold over commit</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="myrna">Myrna van Lunteren</reporter>
                        <labels>
                            <label>derby_triage10_8</label>
                    </labels>
                <created>Wed, 9 Sep 2009 23:56:56 +0100</created>
                <updated>Thu, 13 Oct 2011 04:44:09 +0100</updated>
                                            <version>10.6.1.0</version>
                                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12761027" author="dagw" created="Wed, 30 Sep 2009 23:21:01 +0100"  >&lt;p&gt;Interesting. So, what is the right behavior here? It would seem that for a new result set, the temp table should be empty (&quot;on commit delete rows&quot;). The old cursor could still see rows if prefetched, perhaps.&lt;/p&gt;</comment>
                            <comment id="12761199" author="knutanders" created="Thu, 1 Oct 2009 13:38:34 +0100"  >&lt;p&gt;If the prefetching was causing this, I&apos;d expect the result to be the opposite (2 rows with network server, 0 rows with embedded). The client driver has prefetched rows on executeQuery() since &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-822&quot; title=&quot;Client driver: Pre-fetch data on executeQuery()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-822&quot;&gt;&lt;del&gt;DERBY-822&lt;/del&gt;&lt;/a&gt;, whereas embedded normally doesn&apos;t start fetching until ResultSet.next() is called.&lt;/p&gt;

&lt;p&gt;But if I understand the description correctly (the &quot;with a new resultset&quot; part in particular), the result sets that give different results on network/embedded are created after commit, so there is no way the prefetching could have happened before commit.&lt;/p&gt;</comment>
                            <comment id="12761442" author="dagw" created="Fri, 2 Oct 2009 02:06:54 +0100"  >&lt;p&gt;Looking at the repro, the &quot;new result set&quot; that varies between drivers is a COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; of the tmp table &lt;b&gt;after&lt;/b&gt; one call to next() and then commit. Maybe for the embedded case, a cursor is still open on tmp since one row has not been read yet, so rows have not gone away, whereas for the client, all rows have been prefetched, so the engine was free to remove the rows? If anything, I think embedded shows wrong behavior here: the commit &lt;b&gt;has&lt;/b&gt; happened, so it&apos;s ok the delete the rows, I think.&lt;/p&gt;</comment>
                            <comment id="12917126" author="mamtas" created="Sat, 2 Oct 2010 01:26:11 +0100"  >&lt;p&gt;It appears that the embedded behavior is correct. Following is the explanation of the behavior of the embedded and network server(one thing to note is that the Derby resultsets by default are held open over commit. In the repro, all the resultsets are created with the default holdability).&lt;/p&gt;

&lt;p&gt;The relevant part of the attached repro can be broken down to following steps&lt;br/&gt;
		1)autocommit is set to false&lt;br/&gt;
		2)declare global temp table with on commit delete rows&lt;br/&gt;
		3)create resultset rs1tmp&lt;br/&gt;
		4)rs1tmp.next&lt;br/&gt;
		5)rs1tmp.close&lt;br/&gt;
		6)create resultset rs1&lt;br/&gt;
		7)rs1.next&lt;br/&gt;
		8)commit&lt;br/&gt;
		9)create resultset rs5tmp&lt;/p&gt;

&lt;p&gt;As we can see in the above sequence of steps, the second resultset rs1 is opened(step 6) before commit and the user never explicitly closes that resultset before the commit(step 8). &lt;/p&gt;

&lt;p&gt;In the embedded mode, during the commit(step 8), we check if there are any open resultsets over a temporary table and if yes, then even though the temporary table has been defined to delete the rows on commit, it will not delete the rows because of that open resultset. Because of that, after the commit(step 8), when a new resultset is created(step 9) on that temporary table, it still finds all the rows intact in the temporary table.&lt;/p&gt;

&lt;p&gt;Network server on the other hand tries to do optimization with the closing of the resultset. For the steps above, when the first resultset rs1tmp is created(step 3), network server reads all the data and since it is a forward only resultset, it closes the resultset even before client requested close(step 5) of that resultset. Next, when the resultset rs1 is created(step 6), network server reads all the data for that resultset and it closes this resultset too (without the explicit request from the client to close it). Next when commit(step 8) is issued by the client, we check if there are any open resultsets over the temporary table and of course, in case of network server, we don&apos;t find any because network server went ahead and closed them and hence all the rows from the temporary table get deleted. It seems like that the network server should not close the resultset implicitly if they are supposed to be held open over commit. I will get that logic a try and see what happens. I will highly appreciate if there is any feedback on my analysis or the approach to fix the problem.&lt;/p&gt;</comment>
                            <comment id="12917553" author="knutanders" created="Mon, 4 Oct 2010 11:47:58 +0100"  >&lt;p&gt;Thanks for analyzing this issue, Mamta.&lt;/p&gt;

&lt;p&gt;From you description, it sounds to me like what the network client does is not necessarily wrong, just different. Since the forward-only result set has been exhausted, the caller cannot actually use the result set anymore, and that&apos;s why the server thinks it&apos;s ok to close the cursor earlier.&lt;/p&gt;

&lt;p&gt;The lifetime of a cursor may differ between client and embedded in both ends. The client will start fetching rows from the cursor on executeQuery(), whereas embedded won&apos;t do it until next() is called. And the client driver will release the resources held by a forward-only result set when the last row has been fetched, whereas the embedded driver waits until ResultSet.close() is called. These differences cause some differences in when locks are obtained and released, but they also make it possible to save two round-trips between the client and the server for many SELECT statements.&lt;/p&gt;

&lt;p&gt;I&apos;m willing to accept that client and embedded behave differently on the boundaries in this case. So I&apos;d be satisfied with a solution that makes the test expect a difference between client and embedded (with an explanation in a comment), or one that makes the test use a result set that&apos;s not exhausted when testing that an open held cursor prevents emptying the temporary table. But if you still want to make the drivers behave the same way on the boundaries, please make sure that you don&apos;t add extra client/server round-trips on close for queries that don&apos;t access temporary tables.&lt;/p&gt;</comment>
                            <comment id="12934854" author="rhillegas" created="Tue, 23 Nov 2010 15:15:16 +0000"  >&lt;p&gt;Turning off the &quot;wrong query result&quot; flag. It is ok to implicitly close the ResultSet when next() returns false, according to section 15.2.5 of the JDBC 4.0 spec (quoted below). Even though the client and embedded behaviors diverge, I agree with Knut&apos;s analysis that both behaviors conform to our governing standards.&lt;/p&gt;


&lt;p&gt;&amp;#8212; Section 15.2.5 of the JDBC 4.0 spec ----&lt;/p&gt;

&lt;p&gt;15.2.5 Closing a ResultSet Object &lt;/p&gt;

&lt;p&gt;A ResultSet object is explicitly closed when &lt;br/&gt;
&#9632; The close method on the ResultSet is executed, thereby releasing any external resources &lt;br/&gt;
&#9632; The Statement or Connection object that produced the ResultSet is explictly closed &lt;/p&gt;

&lt;p&gt;A ResultSet object is implicitly closed when &lt;br/&gt;
&#9632; The associated Statement object is re-executed &lt;br/&gt;
&#9632; The ResultSet is created with a Holdability of CLOSE_CURSORS_AT_COMMIT and an implicit or explicit commit occurs &lt;/p&gt;

&lt;p&gt;Note - Some JDBC driver implementations may also implicitly close the ResultSet when the ResultSet type is TYPE_FORWARD_ONLY and the next method of ResultSet returns false. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12526969">DERBY-5459</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12419100" name="repro_d4373.java" size="3831" author="myrna" created="Thu, 10 Sep 2009 00:01:12 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 30 Sep 2009 22:21:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24214</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0f6f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36277</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>