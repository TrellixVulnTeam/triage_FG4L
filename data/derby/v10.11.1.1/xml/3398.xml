<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:47:23 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3398/DERBY-3398.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3398] Support min/max values for Java types float/double in real/double columns</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3398</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby doesn&apos;t support the entire range of valid (finite) values of the Java primitive types double/float in columns with SQL type DOUBLE or REAL. This appears to be a limitation that was introduced for compatibility with DB2. There have been some requests on derby-user that we lift this restriction.&lt;/p&gt;

&lt;p&gt;The restriction is enforced by the methods normalizeREAL() and normalizeDOUBLE() in org.apache.derby.iapi.types.NumberDataType.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12388178">DERBY-3398</key>
            <summary>Support min/max values for Java types float/double in real/double columns</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                    </labels>
                <created>Fri, 8 Feb 2008 11:05:08 +0000</created>
                <updated>Mon, 17 Jun 2013 10:27:18 +0100</updated>
                            <resolved>Wed, 20 Feb 2013 04:51:33 +0000</resolved>
                                    <version>10.4.1.3</version>
                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13572326" author="dagw" created="Wed, 6 Feb 2013 10:44:28 +0000"  >&lt;p&gt;Uploading a patch which removes this DB2 restriction, and adds tests. Running regressions&lt;br/&gt;
The patch builds on (requires) the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5546&quot; title=&quot;ResultSet#updateBigDecimal on a REAL column does not do underflow checking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5546&quot;&gt;&lt;del&gt;DERBY-5546&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13572452" author="knutanders" created="Wed, 6 Feb 2013 14:36:47 +0000"  >&lt;p&gt;Thanks, Dag. I think this is a useful improvement.&lt;/p&gt;

&lt;p&gt;Some ideas for more tests:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use the extreme values in some additional contexts. For example in arithmetic operations and as literals.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What happens if a previously not allowed value is stored in a soft-upgraded database and then later attempted read after downgrade?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The patch has test cases for MIN_VALUE and MAX_VALUE. Should probably also test for +/- MIN_NORMAL, which used to be out of range, but should be supported now.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13573236" author="dagw" created="Thu, 7 Feb 2013 06:17:24 +0000"  >&lt;p&gt;Thanks, Knut. Yes, I&apos;ll be adding more tests surely. The upgrade question needs considering. Probably we should not remove the old limits if we are in soft update - just to be safe. The limits are all in the engine, so client/server versions shouldn&apos;t be an issue. The issue would be even more urgent of we allow NaN: We still reject to store/deal with NaN and +/-Infinity. We could consider lifting those, too, but that&apos;s for another issue I think. I see that PostGreSQL allows them:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.postgresql.org/docs/8.3/static/datatype-numeric.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.postgresql.org/docs/8.3/static/datatype-numeric.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but it requires handling equality and sorting too. From the PostGreSQL docs: &lt;/p&gt;

&lt;p&gt;&quot;Note: IEEE754 specifies that NaN should not compare equal to any other floating-point value (including NaN). In order to allow floating-point values to be sorted and used in tree-based indexes, PostgreSQL treats NaN values as equal, and greater than all non-NaN values.&quot;&lt;/p&gt;
</comment>
                            <comment id="13573272" author="knutanders" created="Thu, 7 Feb 2013 07:31:42 +0000"  >&lt;p&gt;Storing NaN and +/- Infinity is tracked by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3290&quot; title=&quot;Derby cannot store java Double or Float values .NaN and .[POSITIVE|NEGATIVE]_INFINITY&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3290&quot;&gt;DERBY-3290&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13573317" author="dagw" created="Thu, 7 Feb 2013 08:51:25 +0000"  >&lt;p&gt;The changes broke some regression tests, uploading new patch that fixes these. No new tests added yet. Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13575648" author="dagw" created="Mon, 11 Feb 2013 07:08:31 +0000"  >&lt;p&gt;Uploading patch derby-3398-3, which replaces #1 and # 2, adding upgrade logic and tests. &lt;br/&gt;
The DB2 limits will only be removed on hard upgrade to &amp;gt;= 10.10.&lt;br/&gt;
Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13575750" author="knutanders" created="Mon, 11 Feb 2013 12:10:44 +0000"  >&lt;p&gt;Will the static boolean flag be able to keep track of the correct behaviour for each database if there are multiple open databases in the same JVM?&lt;/p&gt;</comment>
                            <comment id="13575763" author="knutanders" created="Mon, 11 Feb 2013 12:38:09 +0000"  >&lt;p&gt;I tried this simple upgrade test with the #2 patch (that is, before the upgrade logic was added):&lt;/p&gt;

&lt;p&gt;1) Create a new database with 10.9.1.0 and create a table: create table t(d double);&lt;/p&gt;

&lt;p&gt;2) Attempt to insert a previously illegal value:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; insert into t values 1.7976931348623157e+308;&lt;br/&gt;
ERROR 22003: The resulting value is outside the range for the data type DOUBLE. (errorCode = 30000)&lt;/p&gt;

&lt;p&gt;3) Boot the database with the #2 patch and re-run the above insert statement (which now succeeds).&lt;/p&gt;

&lt;p&gt;4) Reboot the database with 10.9.1.0 and read the table:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select * from t;&lt;br/&gt;
D                     &lt;br/&gt;
----------------------&lt;br/&gt;
1.7976931348623157E308&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;So from this test case, it looks like the old versions are able to read values that are out of range from a table. So maybe it would be OK to accept the values unconditionally in the new versions?&lt;/p&gt;</comment>
                            <comment id="13576341" author="dagw" created="Tue, 12 Feb 2013 03:19:59 +0000"  >&lt;p&gt;Thanks for detecting the boolean howler, Knut. As for accepting the values always, I am sceptical, cf  this example (your scenario post soft upgrade insert):&lt;/p&gt;

&lt;p&gt;    ij&amp;gt; select d from t10_9;&lt;br/&gt;
    D                     &lt;br/&gt;
    ----------------------&lt;br/&gt;
    1.7976931348623157E308&lt;/p&gt;

&lt;p&gt;    ij&amp;gt; select d*1.0 from t10_9;&lt;br/&gt;
    1                     &lt;br/&gt;
    ----------------------&lt;br/&gt;
    ERROR 22003: The resulting value is outside the range for the data type DOUBLE.&lt;/p&gt;

&lt;p&gt;    ij&amp;gt; update t2 set d=(select max(d) from t10_9);&lt;br/&gt;
    ERROR XJ001: Java exception: &apos;ASSERT FAILED error on clone,  value = 1.7976931348623157E308 isnull = false: org.apache.derby.shared.common.sanity.AssertFailure&apos;.&lt;br/&gt;
    ERROR 22003: The resulting value is outside the range for the data type DOUBLE.&lt;/p&gt;

&lt;p&gt;So it seems the normalization is only skipped in certain contexts...&lt;/p&gt;</comment>
                            <comment id="13576433" author="dagw" created="Tue, 12 Feb 2013 07:11:28 +0000"  >&lt;p&gt;It&apos;s actually tricky to get the current dictionary version deep in the type machinery.. In a result set we do not necessarily have an lcc context, either.&lt;br/&gt;
Suggestions? (I am loath to add extra parameters to all the type methods....). &lt;/p&gt;</comment>
                            <comment id="13577364" author="dagw" created="Wed, 13 Feb 2013 06:34:41 +0000"  >&lt;p&gt;Uploading a patch (#4) which changes the way we check dictionary version in NumberDataType:&lt;/p&gt;

&lt;p&gt;On seeing values outside the old DB2 ranges that are otherwise legal (i.e. not infinity or NaN), we check if the current dictionary level is high enough.&lt;br/&gt;
Iff we have an lcc (language connection context, we use that to find the dictionary version). If not we rely on a new short field in NumberDataType poked into the DVD at the time the value is set (ResultSret#updateXXX, PreparedStatement#setXXX). This is a similar approach to that used by Kristian when handling the CLOB header versioning. It seems to work, but running full regressions now, and I&apos;ll add more tests later if we decide to use this approach.&lt;/p&gt;

&lt;p&gt;There are two downsides, one minor and one slightly less so:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;iff the value is outside the old limist (and only then), we some some extra (costly?) processing to check the dictionary version.&lt;/li&gt;
	&lt;li&gt;we have added a short member to all NumberDataType classes (increases heap usage by 4 or 8 bytes pr value object depending on the VMs allocation strategy.)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As before, the patch relies on  the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5546&quot; title=&quot;ResultSet#updateBigDecimal on a REAL column does not do underflow checking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5546&quot;&gt;&lt;del&gt;DERBY-5546&lt;/del&gt;&lt;/a&gt;. Another quirk shows up though; for some reason when I compile the patched source, I get an error: it seems the compilation of the iapi.types classes trigger a compile of EmbedResultSet, which fails, presumably since the iapi classes are compiled with a too low source level: javac complains about not finding enough implementations in ERS. An incremental compile of the patch works though. I&apos;ll look into why this happens.&lt;/p&gt;</comment>
                            <comment id="13577466" author="knutanders" created="Wed, 13 Feb 2013 10:17:39 +0000"  >&lt;p&gt;In the cases where we don&apos;t have a language connection context (updateXXX() and setXXX()) the values will be checked in a later step (updateRow() and execute()), so we still won&apos;t be able to insert illegal values if we skip the range check in soft upgrade mode when the language connection context is not available. That wouldn&apos;t be too bad, I think. In fact, that&apos;s consistent with how the range checking is done in the client driver. It too defers range checking till updateRow() or execute().&lt;/p&gt;</comment>
                            <comment id="13577474" author="kristwaa" created="Wed, 13 Feb 2013 10:29:37 +0000"  >&lt;p&gt;I talked briefly to Dag on this topic, and suggested that a deferred check would be somewhat less user-friendly than an immediate check.&lt;/p&gt;

&lt;p&gt;However, the drawbacks of deferred checking in the embedded driver may be acceptable if&lt;br/&gt;
  o it makes the drivers behave consistently&lt;br/&gt;
  o it simplifies the relevant version check logic in the client driver (i.e. the checking is only performed on the server side)&lt;/p&gt;</comment>
                            <comment id="13577485" author="knutanders" created="Wed, 13 Feb 2013 10:50:15 +0000"  >&lt;p&gt;One could also imagine the following behaviour, consistent across the drivers:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;immediate checking of +/- Infinity and NaN in both client and embedded&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;deferred checking of DB2 limits in both client and embedded&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Since DB2 limits will no longer be checked in new databases, that would mean all range checks happen immediately in upgraded/fresh databases.&lt;/p&gt;

&lt;p&gt;Deferred checks will only happen in soft upgraded databases. Applications that cannot live with the deferred checks could upgrade the database dictionary, and the deferred checks will go away.&lt;/p&gt;</comment>
                            <comment id="13578936" author="dagw" created="Fri, 15 Feb 2013 04:21:55 +0000"  >&lt;p&gt;Thanks, guys. What you suggest could be a way forward here. The only downside I see is that applications in soft upgrade mode relying on the DB limits checks would see a deferred checking on embedded in the lcc-less scenarios, whereas before soft upgrade they got an immediate check.&lt;br/&gt;
I think we could accept that small behavior change and handle it with a release note. Does anybody think this is (too) risky? &lt;/p&gt;
</comment>
                            <comment id="13579009" author="dagw" created="Fri, 15 Feb 2013 07:27:24 +0000"  >&lt;p&gt;Uploading patch #5, which implements the deferred check on DB2 limits in soft upgrade mode, when no lcc is present, cf. discussion above.&lt;/p&gt;

&lt;p&gt;The upgrade tests now verify this distinction, cf. the &quot;defer&quot; parameter to Changes10_10#verifyDB2Behavior.&lt;/p&gt;

&lt;p&gt;The patch also adds upgrade tests for the ResultSet#updateXXX case.&lt;/p&gt;

&lt;p&gt; Rerunning regressions.&lt;/p&gt;</comment>
                            <comment id="13579042" author="knutanders" created="Fri, 15 Feb 2013 08:58:53 +0000"  >&lt;p&gt;Looks fine to me. It won&apos;t be fully consistent with the client driver until &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5534&quot; title=&quot;ResultSet#updateFloat, #updateDouble do not check for NaN and other conditions on client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5534&quot;&gt;DERBY-5534&lt;/a&gt; is fixed, but now at least it should be possible to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5534&quot; title=&quot;ResultSet#updateFloat, #updateDouble do not check for NaN and other conditions on client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5534&quot;&gt;DERBY-5534&lt;/a&gt; without adding knowledge about the DB2 limits to the client driver.&lt;/p&gt;

&lt;p&gt;Some small comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The changes to DataDictionaryImpl look like leftovers from an earlier patch.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes10_10 imports sun.print.PSStreamPrintService. It shouldn&apos;t.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes10_10 uses SQLDataException. Will that work on older platforms (before JDBC 4.0)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It might be worth adding test cases for +/- Float.MIN_NORMAL and +/- Double.MIN_NORMAL. Cannot use the constants directly, as they were added in Java 6, but the values could be tested. Those would test that we&apos;re no longer limited by DB2_SMALLEST_POSITIVE_REAL, DB2_LARGEST_NEGATIVE_REAL, DB2_SMALLEST_POSITIVE_DOUBLE and DB2_LARGEST_NEGATIVE_DOUBLE.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nit: The two normalizeREAL() methods use different casing of &quot;invalid&quot;. I prefer the lowercase variant.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Typo: Comment in NumberDataType.useDB2Limits() says &quot;do no&quot; instead of &quot;do not&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes10_10: The ResultSets produced in the first for loop aren&apos;t closed.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changes10_10: There are three PreparedStatements stored in fields. This technique has been a frequent source of memory leaks in the tests, so it is best avoided if possible. In this case, I think it will prevent the class loaders for the old engines to be garbage collected after the test has completed. Setting the fields to null in tearDown() would help, but making them local variables is probably less error-prone.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13579703" author="dagw" created="Sat, 16 Feb 2013 04:17:51 +0000"  >&lt;p&gt;Thanks, Knut. As for SQLDataException, now I have run this once and I&apos;m satisfied the right exception subclass is used, I guess we can move it back to SQLException; we have other tests that check the subclasses (TestJDBC40EException).&lt;/p&gt;

&lt;p&gt;I used some other constants to test that we accept smaller values than DB2_SMALLEST_POSITIVE_REAL &amp;amp; friends. For example in table beyondDB2Real I used the constant &quot;+1.174E-37f&quot;, smaller than  DB2_SMALLEST_POSITIVE_REAL (+1.175E-37f), but we can add Float.MIN_NORMAL (1.17549435E-38) too, sure.&lt;/p&gt;

&lt;p&gt;I wasn&apos;t aware of the class loader issues you mention, I&apos;ll fix that.&lt;/p&gt;</comment>
                            <comment id="13581039" author="dagw" created="Tue, 19 Feb 2013 05:55:06 +0000"  >&lt;p&gt;Uploading patch #7 after rerunning regressions and finding issues.&lt;/p&gt;

&lt;p&gt;It changes the metadata maximum display size for REAL and DOUBLE to 15 and 24, from 13 and 22 respectively, since some values were truncated by ij.&lt;/p&gt;

&lt;p&gt;The patch adds many canon changes, and also disables the ResultSet#updateXXX part of the Changes10_10 test for pre-10.2 releases since they do not support forward updatable result sets.&lt;/p&gt;

&lt;p&gt;The regressions ran ok with these changes modulo an error in derbynet/DerbyNetAutoStart.java, but I see that on trunk as well.&lt;/p&gt;</comment>
                            <comment id="13581041" author="dagw" created="Tue, 19 Feb 2013 06:00:37 +0000"  >&lt;p&gt;I should add, the patch also adresses Knut&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="13581073" author="dagw" created="Tue, 19 Feb 2013 07:07:15 +0000"  >&lt;p&gt;Uploading release notes for this issue.&lt;/p&gt;</comment>
                            <comment id="13581137" author="kristwaa" created="Tue, 19 Feb 2013 09:01:00 +0000"  >&lt;p&gt;Thanks for uploading a release note, Dag.&lt;/p&gt;

&lt;p&gt;A few comments:&lt;br/&gt;
 o from the template: &quot;This is a one line, one sentence summary of the issue.&quot; So I guess the summary is too long and verbose.&lt;br/&gt;
 o &quot;To allow applications to use Derby to store a wider range of the Java floating point number types.&quot; -&amp;gt; &quot;To allow applications to store a wider range of &lt;span class=&quot;error&quot;&gt;&amp;#91;the&amp;#93;&lt;/span&gt; Java floating point numbers in Derby&quot;?&lt;br/&gt;
   (simplification and matter of preference, feel free to ignore &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;br/&gt;
 o &quot;The application can no rely on&quot;: &quot;no&quot; -&amp;gt; &quot;not&quot; ?&lt;br/&gt;
 o clean up / simplify &quot;to detect when use of numbers outside the DB2 limits were used,&quot;?&lt;/p&gt;</comment>
                            <comment id="13581143" author="knutanders" created="Tue, 19 Feb 2013 09:10:24 +0000"  >&lt;p&gt;Thanks, Dag.&lt;/p&gt;

&lt;p&gt;The patch looks fine to me. You may want to double-check if it builds if you have the j15lib property defined. I suspect it may fail because the tests directly reference the MIN_NORMAL constants, which are new in Java 6.&lt;/p&gt;

&lt;p&gt;In the release note, the summary is supposed to be a single sentence that fits on a single line, so that the release note generator can put it into a bullet list. Maybe just keep the first sentence and move the extra details to the symptoms section?&lt;/p&gt;

&lt;p&gt;Typo in incompatibilities section: &quot;can no&quot; -&amp;gt; &quot;cannot&quot; or, perhaps, &quot;can no longer&quot;?&lt;/p&gt;

&lt;p&gt;In Application Changes Required section: &quot;to detect when use of numbers outside the DB2 limits were used&quot;. Drop &quot;use of&quot;?&lt;/p&gt;</comment>
                            <comment id="13581924" author="dagw" created="Wed, 20 Feb 2013 03:55:55 +0000"  >&lt;p&gt;Thanks, guys, will make another rev of the release notes with those correction. Knut, you were right about MIN_NORMAL, fixed that, posting a final patch when I have run my regressions again. Setting up my ant.properties so I&apos;ll catch that next time around (used to have those settings..)&lt;/p&gt;</comment>
                            <comment id="13581926" author="dagw" created="Wed, 20 Feb 2013 04:04:50 +0000"  >&lt;p&gt;Uploading new rev of release notes.&lt;/p&gt;</comment>
                            <comment id="13581944" author="dagw" created="Wed, 20 Feb 2013 04:48:24 +0000"  >&lt;p&gt;Uploading #8 with the fix for MIN_NORMAL, committed patch as svn 1448002. &lt;/p&gt;

&lt;p&gt;Commit log:&lt;/p&gt;

&lt;p&gt;Removes the legacy DB limits on floating point numbers.&lt;/p&gt;

&lt;p&gt;This lets the application use Derby for all Java float and double&lt;br/&gt;
values with the exception of NaN (not a number), -0.0 (normalized to&lt;br/&gt;
+0.0) and +/- infinity as defined in the IEEE-754 1985 floating-point&lt;br/&gt;
standard.&lt;/p&gt;

&lt;p&gt;After this change, on soft upgrade, instead of throwing on the DB2&lt;br/&gt;
limits when calling ResultSet#updateXXX or PreparedStatement#setXXX,&lt;br/&gt;
the check throws on ResultSet#updateRow, or #insertRow, and similarly&lt;br/&gt;
on PreparedStatement#execute.&lt;/p&gt;

&lt;p&gt;Upgrade tests test this behavior. But don&apos;t run floating&lt;br/&gt;
ResultSet#updateXXX on old releases prior to 10.2 (they don&apos;t support&lt;br/&gt;
forward updatable result sets).&lt;/p&gt;

&lt;p&gt;The patch also fixes max display width for real and double numbers&lt;br/&gt;
since some values&apos;s printed representation were truncated by ij (even&lt;br/&gt;
before the DB2 limits change). This accounts for the all the canons&lt;br/&gt;
changes.&lt;/p&gt;</comment>
                            <comment id="13582197" author="chaase3" created="Wed, 20 Feb 2013 14:10:39 +0000"  >&lt;p&gt;Just checking &amp;#8211; does this fix have any documentation impact, or should we leave the described limits as they are in &lt;a href=&quot;http://db.apache.org/derby/docs/10.9/ref/rrefnumericlimits.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.9/ref/rrefnumericlimits.html&lt;/a&gt;, &lt;a href=&quot;http://db.apache.org/derby/docs/10.9/ref/rrefsqljdoubleprecision.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.9/ref/rrefsqljdoubleprecision.html&lt;/a&gt;, and &lt;a href=&quot;http://db.apache.org/derby/docs/10.9/ref/rrefsqlj14122.html?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.9/ref/rrefsqlj14122.html?&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13582280" author="knutanders" created="Wed, 20 Feb 2013 16:15:14 +0000"  >&lt;p&gt;Hi Kim,&lt;/p&gt;

&lt;p&gt;Yes, those limits need to be updated. New values are:&lt;/p&gt;

&lt;p&gt;Smallest DOUBLE: 4.9e-324 (aka Double.MIN_VALUE)&lt;br/&gt;
Largest DOUBLE: 1.7976931348623157e+308 (aka Double.MAX_VALUE)&lt;br/&gt;
Smallest positive DOUBLE: 2.2250738585072014E-308 (aka Double.MIN_NORMAL)&lt;br/&gt;
Largest negative DOUBLE: -2.2250738585072014E-308&lt;br/&gt;
Smallest REAL: 1.4e-45 (aka Float.MIN_VALUE)&lt;br/&gt;
Largest REAL: 3.4028235e+38 (aka Float.MAX_VALUE)&lt;br/&gt;
Smallest positive REAL: 1.17549435E-38 (aka Float.MIN_NORMAL)&lt;br/&gt;
Largest negative REAL: -1.17549435E-38&lt;/p&gt;</comment>
                            <comment id="13582287" author="knutanders" created="Wed, 20 Feb 2013 16:18:46 +0000"  >&lt;p&gt;The upgrade test case for this issue seems to be failing in the continuous testing: &lt;a href=&quot;http://download.java.net/javadesktop/derby/javadb-5572718-report/javadb-5572718-3596306-details.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/javadesktop/derby/javadb-5572718-report/javadb-5572718-3596306-details.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;junit.framework.AssertionFailedError&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_10.assertSetError(Changes10_10.java:403)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_10.verifyDB2Behavior(Changes10_10.java:508)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_10.testFloatLimits(Changes10_10.java:353)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)&lt;br/&gt;
(...)&lt;/p&gt;</comment>
                            <comment id="13582369" author="chaase3" created="Wed, 20 Feb 2013 17:52:32 +0000"  >&lt;p&gt;Thanks for the info, Knut. I will file a doc issue and link it to this one.&lt;/p&gt;</comment>
                            <comment id="13582527" author="knutanders" created="Wed, 20 Feb 2013 21:20:14 +0000"  >&lt;p&gt;There&apos;s also a javadoc warning in the useDB2Limits() method:&lt;/p&gt;

&lt;p&gt;  &lt;span class=&quot;error&quot;&gt;&amp;#91;javadoc&amp;#93;&lt;/span&gt; /code/derby/trunk/java/engine/org/apache/derby/iapi/types/NumberDataType.java:598: warning - @returns is an unknown tag.&lt;/p&gt;</comment>
                            <comment id="13582993" author="dagw" created="Thu, 21 Feb 2013 08:00:21 +0000"  >&lt;p&gt;Thanks for looking at this, Kim, Knut.&lt;br/&gt;
The upgrade tests broke due to a missing comma error introduced when I changed Float.MIN_NORMAL to a verbatim constant (famous last minute fixes..), committed fix as svn r1448532.&lt;/p&gt;</comment>
                            <comment id="13583663" author="kmarsden" created="Thu, 21 Feb 2013 23:29:30 +0000"  >&lt;p&gt;Three was a discussion earlier in this issue regarding whether it is ok to defer limit checking in soft upgrade mode until execution instead of the setting of the parameters.  I think that is ok but should be mentioned  in the release note.&lt;/p&gt;
</comment>
                            <comment id="13583718" author="myrna" created="Fri, 22 Feb 2013 00:11:47 +0000"  >&lt;p&gt;I updated the j9 canon master/j9_foundation/iepnegativetests_ES.out with revision 1448865 (&lt;a href=&quot;http://svn.apache.org/r1448865&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/r1448865&lt;/a&gt;) to match the changes to the master of revision 1448002.&lt;/p&gt;</comment>
                            <comment id="13584049" author="dagw" created="Fri, 22 Feb 2013 07:26:15 +0000"  >&lt;p&gt;Attached a new version of the release notes, which mentions the deferred checking in soft upgrade mode, as requested by Kathey.&lt;/p&gt;</comment>
                            <comment id="13584051" author="dagw" created="Fri, 22 Feb 2013 07:26:56 +0000"  >&lt;p&gt;Thanks for fixing the j9 canons, Myrna!&lt;/p&gt;</comment>
                            <comment id="13599130" author="rhillegas" created="Mon, 11 Mar 2013 18:50:29 +0000"  >&lt;p&gt;Corrected some markup problems with the release note which caused it to fail the checks applied by org.apache.derbyBuild.ReleaseNoteReader.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12534895">DERBY-5534</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12384960">DERBY-3290</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12633237">DERBY-6083</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12568391" name="derby-3398-2.diff" size="38259" author="dagw" created="Thu, 7 Feb 2013 08:51:25 +0000"/>
                            <attachment id="12568795" name="derby-3398-3.diff" size="43020" author="dagw" created="Mon, 11 Feb 2013 07:08:31 +0000"/>
                            <attachment id="12568796" name="derby-3398-3.stat" size="947" author="dagw" created="Mon, 11 Feb 2013 07:08:31 +0000"/>
                            <attachment id="12569153" name="derby-3398-4.diff" size="68395" author="dagw" created="Wed, 13 Feb 2013 06:37:01 +0000"/>
                            <attachment id="12569471" name="derby-3398-5.diff" size="48389" author="dagw" created="Fri, 15 Feb 2013 07:27:24 +0000"/>
                            <attachment id="12569472" name="derby-3398-5.stat" size="940" author="dagw" created="Fri, 15 Feb 2013 07:27:24 +0000"/>
                            <attachment id="12569909" name="derby-3398-7.diff" size="424449" author="dagw" created="Tue, 19 Feb 2013 06:13:49 +0000"/>
                            <attachment id="12569910" name="derby-3398-7.stat" size="3602" author="dagw" created="Tue, 19 Feb 2013 06:13:49 +0000"/>
                            <attachment id="12570077" name="derby-3398-8.diff" size="424958" author="dagw" created="Wed, 20 Feb 2013 04:48:24 +0000"/>
                            <attachment id="12568200" name="derby-3398.diff" size="13596" author="dagw" created="Wed, 6 Feb 2013 10:44:28 +0000"/>
                            <attachment id="12568201" name="derby-3398.status" size="726" author="dagw" created="Wed, 6 Feb 2013 10:44:28 +0000"/>
                            <attachment id="12573145" name="releaseNote.html" size="4892" author="rhillegas" created="Mon, 11 Mar 2013 18:50:29 +0000"/>
                            <attachment id="12570438" name="releaseNote.html" size="4929" author="dagw" created="Fri, 22 Feb 2013 07:26:15 +0000"/>
                            <attachment id="12570069" name="releaseNote.html" size="4697" author="dagw" created="Wed, 20 Feb 2013 04:04:50 +0000"/>
                            <attachment id="12569914" name="releaseNote.html" size="4690" author="dagw" created="Tue, 19 Feb 2013 07:28:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Feb 2013 10:44:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30834</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08lz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35213</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>