<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:37:06 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-866/DERBY-866.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-866] Derby User Management Enhancements</title>
                <link>https://issues.apache.org/jira/browse/DERBY-866</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Proposal to enhance Derby&apos;s Built-In DDL User Management. (See proposal spec attached to the JIRA).&lt;/p&gt;

&lt;p&gt;Abstract:&lt;/p&gt;

&lt;p&gt;This feature aims at improving the way BUILT-IN users are managed in Derby by providing a more intuitive and familiar DDL interface. Currently (in 10.1.2.1), Built-In users can be defined at the system and/or database level. Users created at the system level can be defined via JVM or/and Derby system properties in the derby.properties file. Built-in users created at the database level are defined via a call to a Derby system procedure (SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY) which sets a database property.&lt;/p&gt;

&lt;p&gt;Defining a user at the system level is very convenient and practical during the development phase (EOD) of an application - However, the user&apos;s password is not encrypted and consequently appears in clear in the derby.properties file. Hence, for an application going into production, whether it is embedded or not, it is preferable to create users at the database level where the password is encrypted.&lt;/p&gt;

&lt;p&gt;There is no real ANSI SQL standard for managing users in SQL but by providing a more intuitive and known interface, it will ease Built-In User management at the database level as well as Derby&apos;s adoption.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12328052">DERBY-866</key>
            <summary>Derby User Management Enhancements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="forsini">Francois Orsini</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Jan 2006 03:10:55 +0000</created>
                <updated>Wed, 3 Sep 2014 09:31:36 +0100</updated>
                            <resolved>Tue, 15 May 2012 18:36:43 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Services</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12363845" author="forsini" created="Wed, 25 Jan 2006 03:12:04 +0000"  >&lt;p&gt;Attached proposal specifications - please post comments in the JIRA itself.&lt;/p&gt;</comment>
                            <comment id="12363881" author="forsini" created="Wed, 25 Jan 2006 05:45:03 +0000"  >&lt;p&gt;Hi Satheesh,&lt;/p&gt;

&lt;p&gt;Thanks for the initial feedback. Please find some answers enclosed below.&lt;/p&gt;

&lt;p&gt;On 1/24/06, Satheesh Bandaram  wrote:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Hi Francois,&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Some questions on the proposal.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;    1. I am not sure if database is the right place to do&lt;br/&gt;
&amp;gt;    authentication. For example, your proposal still calls for sysadmin to know&lt;br/&gt;
&amp;gt;    user passwords (at least initially). Who has the authorization to run ALTER&lt;br/&gt;
&amp;gt;    USER? Database keeping user passwords may not be a good idea for many&lt;br/&gt;
&amp;gt;    reasons. How to ensure no one is snooping on the protocol to read clear text&lt;br/&gt;
&amp;gt;    password that is embedded as part of SQL statement? Can a sysadmin turn on&lt;br/&gt;
&amp;gt;    tracing in network server or in the engine to see what password users are&lt;br/&gt;
&amp;gt;    picking for themselfs?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
This proposal does not discuss how a sysadmin (dba) type of user is defined,&lt;br/&gt;
as obviously we don&apos;t have System privileges support as well as roles (yet)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;specs for these are incoming .&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here it how it would work in the meantime:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;For a database to be created and assuming &apos;sqlStandard&apos; authorization mode&lt;br/&gt;
is enabled and we have support for certain system privileges such as the&lt;br/&gt;
CREATE DATABASE one, a grantee, would be allowed to create a database and&lt;br/&gt;
assign a &apos;dba&apos; (or &apos;admin&apos;) role to a new user in the just created database.&lt;br/&gt;
Again, this is assuming there is support for Roles and System privileges but&lt;br/&gt;
features can be done in phases as you know. Derby supports authentication at&lt;br/&gt;
the System and Database level - Derby databases can defined their own&lt;br/&gt;
security restrictions/settings independently of the system level - as you&lt;br/&gt;
know, derby databases can be moved around independently of the derby system&lt;br/&gt;
realm  - there is no &apos;master&apos; system tables (i.e. mo master DB) in Derby and&lt;br/&gt;
it was done so that databases could be detached, accessed without having to&lt;br/&gt;
be defined in some sort of master database containing metadata to access&lt;br/&gt;
user databases - this is a very powerful and flexible model but it has a&lt;br/&gt;
cost...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;An application should be able to have a database which itself is either&lt;br/&gt;
being shipped to a user or distributed with user credentials and&lt;br/&gt;
authorization (privileges) metadata being defined as part of the database.&lt;br/&gt;
In order to run ALTER USER, the individual would need to have the CREATE&lt;br/&gt;
USER privilege (we don&apos;t have that right now). Derby has a Built-In&lt;br/&gt;
authentication provider (scheme) which allows Derby to run its own user&lt;br/&gt;
authentication realm - You can&apos;t always assume LDAP, many applications don&apos;t&lt;br/&gt;
use or have access to LDAP and are not always connected, yet they still want&lt;br/&gt;
to be able to protect access to a DB.&lt;/p&gt;

&lt;p&gt;As far as snooping the clear text password on the network, we do have the&lt;br/&gt;
same issue with the current scheme of calling&lt;br/&gt;
SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY across a networked JDBC connectoin  -&lt;br/&gt;
in fact, there is a similar issue with LDAP authentication, some people use&lt;br/&gt;
SSL in order to solve this but in our case, DRDA also has mechanisms for&lt;br/&gt;
resetting a user password over a network and in a secure way - hence we&lt;br/&gt;
could either piggyback on existing and similar DRDA mechanisms or have the&lt;br/&gt;
admin use an SSL-enabled (or IPSEC) derby connection for such admin&lt;br/&gt;
commands...&lt;/p&gt;


&lt;p&gt;&amp;gt;    1. Why not sure LDAP or some other standard authentication models?&lt;br/&gt;
&amp;gt;    It may be good to strengthen Derby authentication, but not necessarily by&lt;br/&gt;
&amp;gt;    making Derby manage passwords.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
Derby Built-In authentication is important - again, not everyone is using&lt;br/&gt;
LDAP, especially with small departmental level type of databases as well as&lt;br/&gt;
embedded / disconnected ones. Derby already manages user passwords at the&lt;br/&gt;
database level when a user is defined in a database. Derby stores user&lt;br/&gt;
password in a secure fashion (they cannot be decrypted easily and if at all&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;they are single-hashed) - the transport of passwords across a network is&lt;br/&gt;
defined and handled in the DRDA specifications which themselves are part of&lt;br/&gt;
a standard - encrypting a password in a DB is not related to how a password&lt;br/&gt;
is transported across the network - they are both important to address and&lt;br/&gt;
we have the means.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&amp;gt;    1. You said current user management would work as is in addition to&lt;br/&gt;
&amp;gt;    the new proposal. How do you propose to keep these two in sync? Could a user&lt;br/&gt;
&amp;gt;    be present in both ways and what happens if their passwords are different?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
No - this phase I proposal is to enhance the DDL support for managing&lt;br/&gt;
Built-In Derby users in a database. We would still be using database&lt;br/&gt;
properties to store the actual user/password combination as presently. You&lt;br/&gt;
cannot have 2 users of the same name in a derby database - the only way to&lt;br/&gt;
achieve something close would be to define a user at the system level and&lt;br/&gt;
the same at the database level, and this last one would take precedence -&lt;br/&gt;
also, in derby it is possible to set a a database property to only consider&lt;br/&gt;
database properties and not the system ones, meaning that even if some users&lt;br/&gt;
would be defined at the system level, they would not be granted access to&lt;br/&gt;
the database which has authentication turned ON.&lt;/p&gt;


&lt;p&gt;&amp;gt;    1. Why not make SYSUSERS a system table now, instead of a VTI?&lt;br/&gt;
&amp;gt;    Making it a system catalog has benifits like dictionary management.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
Agreed - just a question of phasing something in different stages - Also, we&lt;br/&gt;
would not have to do any upgrade changes with this first phase since it&lt;br/&gt;
would still be going after database properties underneath. I agree that the&lt;br/&gt;
upgrade issue would still have to be done if sysusers is added - at the same&lt;br/&gt;
time, it is very likely that it will be required if additional user&lt;br/&gt;
semantics are added (i.e. profiles, pwd expiration, roles (hence UID&lt;br/&gt;
required instead of username) - so Yes, this is a valid point&lt;/p&gt;

&lt;p&gt;Thanks for all the comments.&lt;/p&gt;

&lt;p&gt;--francois&lt;/p&gt;</comment>
                            <comment id="12363885" author="djd" created="Wed, 25 Jan 2006 06:19:49 +0000"  >&lt;p&gt;Questions on the spec:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What do you mean by &quot;familar DDL interface&quot; and &quot;known interface&quot;. Are you saying that these are copied from some other database?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&quot;There is no real ANSI SQL standard ...&quot; - What does this mean, is there a ANSI standard that no-one implements, a &quot;pretend&quot; ANSI standard, something else?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What&apos;s the advantage of implementing these utility operations as DDL? The same functionality can be acheived, probably at a lower footprint by using procedures.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think we need to keep a clear separation between the BUILTIN authentication provider and other functionality such as roles, which should be independent of authentication mechanism. Naming becomes important here, SYS_BUILTIN_USERS instead of SYSUSERS, CREATE BUILTIN USER etc. It may be in the future that a Derby database has users which are independent of the authentication mechanism, but there is the ability to provide a mapping between them. E.g. LDAP user fred.jones@acme.com is mapped to user fred in a Derby database.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12363958" author="djd" created="Wed, 25 Jan 2006 23:29:02 +0000"  >&lt;p&gt;What&apos;s the purpose of returning the password column in the table/vti SYSUSERS?&lt;/p&gt;</comment>
                            <comment id="12364048" author="forsini" created="Thu, 26 Jan 2006 09:48:27 +0000"  >&lt;p&gt;&amp;gt; Daniel John Debrunner commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-866&quot; title=&quot;Derby User Management Enhancements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-866&quot;&gt;&lt;del&gt;DERBY-866&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ---------------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Questions on the spec:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; - What do you mean by &quot;familar DDL interface&quot; and &quot;known interface&quot;. Are you saying that these are copied from some other database?&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I mean that at least 2 known database systems out there are using such DDL interface. The CREATE USER syntax works well in respect with creating a new user object (such as CREATE TABLE for instance) but it not defined in the ANSI SQL Specs (at least I have not found any reference myself...if someone does please let me know). From a SQL standpoint, I find this DDL syntax in-line with other other DDL syntax - That&apos;s all.&lt;/p&gt;

&lt;p&gt;&amp;gt; - &quot;There is no real ANSI SQL standard ...&quot; - What does this mean, is there a ANSI standard that no-one implements, a &quot;pretend&quot; ANSI standard, something else?&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I have not found any ANSI SQL defining a standard syntax for SQL USER DDL statements, so that&apos;s what I mean by saying there is no &quot;real&quot;ANSI SQL standard - it is all based on preference and what users would be the most familiar with to use as an interface, knowing that 2 other known RDBMS out are using a similar one.&lt;/p&gt;

&lt;p&gt;&amp;gt; - What&apos;s the advantage of implementing these utility operations as DDL? The same functionality can be acheived, probably at a lower footprint by using procedures.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I thought I mentioned it in the proposal but I omitted to add the &apos;Alternatives&apos; section which would be good to have indeed - I thought it would be more intuitive to use a DDL SQL-like rather than calling a Derby procedure (again for the reasons that this syntax is similar to some used by other RDBMS).&lt;/p&gt;

&lt;p&gt;We know tat the current interface (SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY) does NOT scale in the long run - It is based on using a database property to define a user in the database - It is preventing additional semantics (such as password expiration, default Role, etc) to be added to the user (since it is based on a property Name-Value pair definition right now...Sure we could use procedures to manage users but it won&apos;t be a structured english-like syntac (ala SQL)...&lt;/p&gt;

&lt;p&gt;&amp;gt; - I think we need to keep a clear separation between the BUILTIN authentication provider and other functionality such as roles, which should be independent of authentication mechanism. Naming becomes important here, SYS_BUILTIN_USERS instead of SYSUSERS, CREATE BUILTIN USER etc. It may be in the future that a Derby database has users which are independent of the authentication mechanism, but there is the ability to provide a mapping between them. E.g. LDAP user fred.jones@acme.com is mapped to user fred in a Derby database.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I actually thought about the user mapping but did not mention it - a derby user should be generic enough that once authenticated in the system, it is a user, not a built-in user, neither an LDAP user, etc - The CREATE USER DDL command could be expanded with an EXTERNAL attribute to map/refer to a user outside of the Built-In realm and by overloading the IDENTIFIED BY attribute to specify the LDAP user DN (as used when authenticating with LDAP). Roles are independent of Users, and their relationships should be defined in separate system catalogs, a separate user&amp;lt;&lt;del&gt;&amp;gt;role&amp;lt;&lt;/del&gt;&amp;gt;role relationship catalog can be defined to store the metadata about user roles or roles assigned to other roles...User mapping is good as there is so little control we can have over users defined in LDAP (in terms of settings additional user semantics in the Derby&apos;s realm), hence, we might need to compensate by linking an &quot;external&quot; user defined in Derby (i.e. SYSUSERS) with some user DN (Distinguished Name) defined in an LDAP repository.&lt;/p&gt;

&lt;p&gt;Syntax such as:&lt;/p&gt;

&lt;p&gt;CREATE USER user_id IDENTIFIED BY &apos;LDAP User DN&apos; EXTERNAL&lt;/p&gt;

&lt;p&gt;for instance: CREATE USER user_id IDENTIFIED BY &apos;uid=mary,ou=People,o=FlyTours.com&apos; EXTERNAL&lt;/p&gt;

&lt;p&gt;The other alternative that you suggest by having a SYS_BUILTIN_USERS is conceivable but I was hoping to use SYSUSERS, as a system catalog not just for Built-In users - for instance if we need to add new user semantics such as user profile, role, etc, then we can map an LDAP authenticated user with a derby defined one with additional derby user properties (and via the EXTERNAL attribute). SYSUSERS can be used for the built-in provider when it is used or/and by other providers to map externally authenticated users whom would need to have additional user properties set in Derby...&lt;/p&gt;

&lt;p&gt;--francois&lt;/p&gt;</comment>
                            <comment id="12364050" author="forsini" created="Thu, 26 Jan 2006 09:58:22 +0000"  >&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; Daniel John Debrunner commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-866&quot; title=&quot;Derby User Management Enhancements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-866&quot;&gt;&lt;del&gt;DERBY-866&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ---------------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; What&apos;s the purpose of returning the password column in the table/vti SYSUSERS?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
Password won&apos;t be clearly readable, only the base64 representation of a already hashed password - no risk really, just thought it could have some usage and if we use EXTERNAL to specify that this user maps to one defined in some LDAP repository (as an example), then because of EXTERNAL the password would not be encrypted and instead display the User DN (&apos;uid=mary,ou=People,o=FlyTours.com&apos;) that maps into LDAP...So in that case it would have a meaning...See my previous comment on the EXTERNAL attribute definition. We could also decide not to display anything for built-in stored passwords (eventhough they cannot be decrypted)...&lt;/p&gt;</comment>
                            <comment id="12364054" author="djd" created="Thu, 26 Jan 2006 12:15:19 +0000"  >&lt;p&gt;I see the argument for DDL, maybe the create user could be like&lt;/p&gt;

&lt;p&gt;CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY PASSWORD &amp;lt;password&amp;gt;&lt;/p&gt;

&lt;p&gt;basically the addition of the PASSWORD keyword would make future enhancements more in line, e.g.&lt;/p&gt;

&lt;p&gt;CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY LDAP  &amp;lt;ldap stuff&amp;gt;&lt;/p&gt;

&lt;p&gt;Maybe the SYSUSERS table could have a column indicatting the authentication style, BUILTIN/LDAP/java class name etc.&lt;/p&gt;</comment>
                            <comment id="12364090" author="forsini" created="Fri, 27 Jan 2006 01:03:23 +0000"  >&lt;p&gt;&amp;gt; Daniel John Debrunner commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-866&quot; title=&quot;Derby User Management Enhancements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-866&quot;&gt;&lt;del&gt;DERBY-866&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ---------------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I see the argument for DDL, maybe the create user could be like&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY PASSWORD &amp;lt;password&amp;gt;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; basically the addition of the PASSWORD keyword would make future enhancements more in line, e.g.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY LDAP  &amp;lt;ldap stuff&amp;gt;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Maybe the SYSUSERS table could have a column indicatting the authentication style, BUILTIN/LDAP/java class name etc.&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Yes it could - I somewhat tried to avoid this as we have a pluggable authentication scheme so additional custom-created auth providers would not have the proper grammar defined (unless they are part of Derby where the grammar can always be extended to support a new one) - But a new auth provider can just be implemented outside of Derby, hence we would also need to map to the custom auth providers out there - but if we have a column with the authentication provider name name, then we can expect to have the proper user login info as part of the &apos;IDENTIFIED BY&apos; clause without any extra specific auth type keyword...In this case, the password column can just be renamed to something else (i.e. AUTH_INFO), in order to support &lt;b&gt;not&lt;/b&gt; just a password value but other type of info (it would be a VARCHAR after all) for the the other providers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;or&lt;/em&gt; based on what you&apos;re suggesting we could still have:&lt;/p&gt;

&lt;p&gt;// Built-In&lt;br/&gt;
CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY PASSWORD &amp;lt;password&amp;gt;&lt;/p&gt;

&lt;p&gt;// LDAP (mapping)&lt;br/&gt;
CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY LDAP  &amp;lt;ldap stuff&amp;gt;&lt;/p&gt;

&lt;p&gt;// PAM (mapping)&lt;br/&gt;
CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY PAM &amp;lt;pam stuff&amp;gt;&lt;/p&gt;

&lt;p&gt;// CUSTOME Auth Provider (mapping) - External keyword used for that purpose here&lt;br/&gt;
CREATE USER &amp;lt;username&amp;gt; IDENTIFIED BY EXTERNAL &amp;lt;custom stuff&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12366562" author="forsini" created="Thu, 16 Feb 2006 08:51:07 +0000"  >&lt;p&gt;Posted new 1.1 spec - Derby_User_Enhancement_v1.1.html - please enclose comments to the JIRA itself.&lt;/p&gt;</comment>
                            <comment id="12366665" author="djd" created="Fri, 17 Feb 2006 04:30:13 +0000"  >&lt;p&gt;Thanks for the updated spec, some comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;are you expecting this to be ready for the 10.2 release?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m still confused by the phrase &quot;no real ANSI SQL standard for managing users in SQL&quot;, the &quot;real&quot; implies there is some sort of ANSI standard in this area, but provisional, or not widely adopted or you imagined it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;what the defined behaviour for &apos;CREATE USER dan&apos;, ie. no IDENTIFIED BY clause, since it&apos;s optional?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Without a special type token between IDENTIFIED BY and the auto_info I think you require that the authentication provider is defined for the database, otherwise I don&apos;t see how the code decides to store a hash of the password or the mapping info.&lt;br/&gt;
I was assuming it would be&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;CREATE USER dan IDENTIFIED BY PASSWORD &apos;ek992ffdwfe&apos;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;CREATE USER dan IDENTIFIED BY LDAP &apos;djd@apache.org&apos;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Can user_id and auto_info be parameter markers?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;How the mapping works is not defined.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SYSUSERS example has PASSWORD in it&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Development phasing is a strange section.  Really there is only a single phase (as described) for the functionality described by this spec. Phases 2 and 3 are future ideas, so thye are not related to the development of this spec. I would have put them in a separate section like &quot;Future Direction&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There is a hole in the spec, if this is implemented in 10.2 and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-464&quot; title=&quot;Enhance Derby by adding grant/revoke support. Grant/Revoke provide finner level of privileges than currently provided by Derby that is especially useful in network configurations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-464&quot;&gt;&lt;del&gt;DERBY-464&lt;/del&gt;&lt;/a&gt; (DML grant revoke) is implemented then the addition of CREATE USER will (could?) allow anyone to create users in the database., which in turn allows anyone to create schemas of any name. You refer to this in your NOTE in the Syntax section, where you say CREATE USER permission will be required, but as far as I know no-one is working on that. Ie. as you have written, what happens when the database is in SQL authorization mode, but system priviledges are &lt;b&gt;not&lt;/b&gt; available, as I believe will be the case for 10.2?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12424230" author="kmarsden" created="Sat, 29 Jul 2006 00:57:25 +0100"  >&lt;p&gt;removing from 10.2. see:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/10.2-High-Value-Fix-Candidates-and-Fix-Version-Adjustments-tf2007999.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/10.2-High-Value-Fix-Candidates-and-Fix-Version-Adjustments-tf2007999.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12466550" author="david@gradwell.com" created="Mon, 22 Jan 2007 20:29:40 +0000"  >
&lt;p&gt;An SQL based CREATE USER capability is really important for my application.&lt;/p&gt;

&lt;p&gt;I fully support the syntax proposed by Francis Orsini and hope that this can be implemented soon.&lt;/p&gt;

&lt;p&gt;As an aside, if anyone reading this is a member of the ANSI or ISO SQL Standards committees then please get in touch.  I would be willing to draft a change proposal to the SQL Standard for this area.  Then the various implementations could provide a common capability.&lt;/p&gt;

&lt;p&gt;David Gradwell&lt;/p&gt;</comment>
                            <comment id="13096224" author="rhillegas" created="Fri, 2 Sep 2011 20:22:13 +0100"  >&lt;p&gt;Derby has changed a bit since Francois posted his original spec on this issue. I would like to revive the discussion of this feature. I agree that Derby needs a simple scheme for managing user credentials. This seems to me to be a pre-requisite to making Derby secure-by-default.&lt;/p&gt;

&lt;p&gt;I agree with the previous discussion on this issue that the current BUILTIN mechanism is too limited to support production-quality user management. In particular, the BUILTIN mechanism does not support password expiration limits. The BUILTIN mechanism is a development/debugging aid, not a production-quality tool.&lt;/p&gt;

&lt;p&gt;Since the SQL Standard does not address user management, I am reluctant to introduce new DDL to support this feature.&lt;/p&gt;

&lt;p&gt;Here are the outlines of a scheme which I think would be fairly easy to implement in the 10.9 timeframe:&lt;/p&gt;

&lt;p&gt;1) Introduce a new value for derby.authentication.provider. This would tell Derby to use this new authentication scheme.&lt;/p&gt;

&lt;p&gt;2) Introduce a new database property which defines how long passwords are usable: derby.authentication.password.expiration. This can be set to the number of milliseconds which a password remains valid after being updated. If set to a value &amp;lt;= 0, then newly updated passwords don&apos;t expire.&lt;/p&gt;

&lt;p&gt;3) Introduce a new system table which only the DBO can view. The DBO can grant SELECT on this table to other users/roles:&lt;/p&gt;

&lt;p&gt;create table sys.sysusers&lt;br/&gt;
(&lt;br/&gt;
    userName varchar( 128 ),&lt;br/&gt;
    hashingScheme varchar( 32672 ),&lt;br/&gt;
    password varchar( 32672 ),&lt;br/&gt;
    lastModified timestamp&lt;br/&gt;
);&lt;/p&gt;

&lt;p&gt;The second column of this table (hashingScheme) contains something like the decoding instructions which are prepended to current BUILTIN passwords when they are persisted.&lt;/p&gt;

&lt;p&gt;A user can not log in after derby.authentication.password.expiration milliseconds have elapsed since lastModified. Trying to log in with an expired password will raise an exception.&lt;/p&gt;

&lt;p&gt;4) Introduce the following new system procedures which only the DBO can run. The DBO can grant EXECUTE privilege on these procedures to other users/roles:&lt;/p&gt;

&lt;p&gt;create procedure syscs_util.createUser&lt;br/&gt;
(&lt;br/&gt;
    in userName varchar( 128 ),&lt;br/&gt;
    in password varchar( 32672 )&lt;br/&gt;
) ...&lt;/p&gt;

&lt;p&gt;create procedure syscs_util.modifyUser&lt;br/&gt;
(&lt;br/&gt;
    in userName varchar( 128 ),&lt;br/&gt;
    in password varchar( 32672 )&lt;br/&gt;
)&lt;br/&gt;
 ...&lt;/p&gt;

&lt;p&gt;create procedure syscs_util.dropUser&lt;br/&gt;
(&lt;br/&gt;
    in userName varchar( 128 )&lt;br/&gt;
) ...&lt;/p&gt;

&lt;p&gt;5) Introduce the following new system procedure which any user can run to change their own password:&lt;/p&gt;

&lt;p&gt;create procedure syscs_util.modifyPassword&lt;br/&gt;
(&lt;br/&gt;
    in password varchar( 32672 )&lt;br/&gt;
)&lt;br/&gt;
 ...&lt;/p&gt;

&lt;p&gt;What are your thoughts?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13116906" author="dagw" created="Thu, 29 Sep 2011 00:56:04 +0100"  >&lt;p&gt;Thanks for pushing this forward, Rick! Some questions and comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q1: the password in the system table is the result of the hash, right? (not the password itself)&lt;/li&gt;
	&lt;li&gt;q2: salting?&lt;/li&gt;
	&lt;li&gt;q3: should the system table be encrypted to avoid attacks? currently we encrypt entire database which may not be what one wants&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;q4: boot-strap: how is the dbo user created? Autmatically when sing the provided connection password when creating the database and seeing the property for the new scheme set in derby.authentication.provider?&lt;/li&gt;
	&lt;li&gt;q5: database only properties is not default, but must be enabled. will the new mechanism work without it? (cf. derby.database.propertiesOnly)&lt;br/&gt;
  If so, the authentication could be overridden by specifying another value for derby.authentication.provider.&lt;/li&gt;
	&lt;li&gt;q6: do you see the scheme requiring SQL authorization enabled? If not, we&apos;d need encryption to avoid attacks: arbitrary user could backup entire database and stage dictionary attack against the USER table...Btw, I forget, &lt;b&gt;is&lt;/b&gt; backup restricted with authorization on? Docs doesn&apos;t say...&lt;/li&gt;
	&lt;li&gt;comment: creating a new user/role should cross-check each other to avoid collisions in uids.&lt;/li&gt;
	&lt;li&gt;comment: the new feature only solves the issue of database level authentication, not system level, obviously (limitation)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13116907" author="dagw" created="Thu, 29 Sep 2011 01:05:12 +0100"  >&lt;p&gt;To answer one of my question: backup is restricted:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:wombat;user=donald;password=duck&apos;;&lt;br/&gt;
ij&amp;gt; call SYSCS_UTIL.SYSCS_BACKUP_DATABASE(&apos;/tmp/backupdir2&apos;) ;&lt;br/&gt;
ERROR 42504: User &apos;DONALD&apos; does not have EXECUTE permission on ROUTINE &apos;SYSCS_UTIL&apos;.&apos;SYSCS_BACKUP_DATABASE&apos;.&lt;/p&gt;

&lt;p&gt;The docs have been fixed on trunk, I see &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13117371" author="rhillegas" created="Thu, 29 Sep 2011 16:39:51 +0100"  >&lt;p&gt;Thanks for the analysis and questions, Dag. Some responses follow:&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q1: the password in the system table is the result of the hash, right? (not the password itself)&lt;/li&gt;
	&lt;li&gt;q2: salting?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right. The password in the system table should be salted and hashed.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q3: should the system table be encrypted to avoid attacks? currently we encrypt entire database which may not be what one wants&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This sounds like a good idea but I&apos;m not sure how to secure the encryption key so that the database can be booted by someone other than the dbo. Any ideas?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q4: boot-strap: how is the dbo user created? Autmatically when sing the provided connection password when creating the database and seeing the property for the new scheme set in derby.authentication.provider?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q5: database only properties is not default, but must be enabled. will the new mechanism work without it? (cf. derby.database.propertiesOnly) If so, the authentication could be overridden by specifying another value for derby.authentication.provider.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is a good point. It is goofy that someone can masquerade as the DBO by disabling authentication on the boot command line and then simply asserting &quot;user=dbo&quot; at connection time--even when sql authorization is enabled. This is a security hole for all of our authentication schemes. I&apos;m afraid it&apos;s too late to close this hole for the other schemes, but we could close it for this new scheme. That would be independent of turning on derby.database.propertiesOnly as part of the master security property. Thanks.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q6: do you see the scheme requiring SQL authorization enabled? If not, we&apos;d need encryption to avoid attacks: arbitrary user could backup entire database and stage dictionary attack against the USER table...Btw, I forget, &lt;b&gt;is&lt;/b&gt; backup restricted with authorization on? Docs doesn&apos;t say...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think this is a good idea although it violates the orthogonality of the Derby properties. I don&apos;t understand why anyone would want to run with authentication but not authorization. The ability to do that is an unfortunate accident of our backward compatibility requirements combined with the order in which we implemented the two security mechanisms. Thanks.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;comment: creating a new user/role should cross-check each other to avoid collisions in uids.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Good idea.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;comment: the new feature only solves the issue of database level authentication, not system level, obviously (limitation)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Yes. This is another, closely related discussion we need to have. Thanks.&lt;/p&gt;</comment>
                            <comment id="13117582" author="forsini" created="Thu, 29 Sep 2011 21:15:58 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q5: database only properties is not default, but must be enabled. will the new mechanism work without it? (cf. derby.database.propertiesOnly) If so, the authentication could be overridden by specifying another value for derby.authentication.provider.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is a good point. It is goofy that someone can masquerade as the DBO by disabling authentication on the boot command line and then simply asserting &quot;user=dbo&quot; at connection time--even when sql authorization is enabled. This is a security hole for all of our authentication schemes. I&apos;m afraid it&apos;s too late to close this hole for the other schemes, but we could close it for this new scheme. That would be independent of turning on derby.database.propertiesOnly as part of the master security property. Thanks.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;derby.database.propertiesOnly property cannot be overridden by a system property, unless things have changed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; so &lt;b&gt;no one&lt;/b&gt; should be able to override some authentication provider set at the database level as long as derby.database.propertiesOnly is set to true in that database - unless of course, one is able to change it to false at the file level.&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;q3: should the system table be encrypted to avoid attacks? currently we encrypt entire database which may not be what one wants&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This sounds like a good idea but I&apos;m not sure how to secure the encryption key so that the database can be booted by someone other than the dbo. Any ideas? &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;Most traditional RDBMS do not encrypt their sys.sysusers equivalent as you would protect access to the DB files typically and passwords are (salted)+hashed - if you want to give the files away or they get accessed by other means, then all bets are off, meaning that no matter what and with expensive hardware, it could be possible to decrypt most ciphered streams these days. Of course if the salt is known, then without encryption, someone could just go and replace an existing password in sys.sysusers, assuming they have access to it - Database encryption seems like the way to protect sys.sysusers (to a certain limit as mentioned above) unless one wants to introduce yet another database access (Sesame) secret key that a user would have to enter to get access (without encrypting the whole DB, but rather sys.sysusers). There is probably other ways, that&apos;s the quickest I had in mind.&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At the end, if you want to hand out a some Derby DB files (non client-server topology) and you want to restrict access, Authentication and Authorization should be enabled as well as Database encryption turned ON.&lt;/p&gt;
</comment>
                            <comment id="13118147" author="dagw" created="Fri, 30 Sep 2011 16:43:26 +0100"  >&lt;p&gt;Thanks for helping us think this through, Francois! As far as derby.database.propertiesOnly is concerned, my worry was not that it could be switched off after being enabled, but rather if the new scheme could be made to work without it being set to true (insecure). Rick suggests that the new scheme be independent of this property, I am not sure how we could make that work with the present property based way of determining what authentication scheme to use.... Rick, any ideas? In the end we may not want to force this (present idea being that for deployment, derby.database.propertiesOnly should be set to true, but that it can be convenient during development to override it). This is not secure by default, of course, so we we may want to disallow the new scheme unless derby.database.propertiesOnly is set...&lt;/p&gt;</comment>
                            <comment id="13155433" author="rhillegas" created="Tue, 22 Nov 2011 21:05:48 +0000"  >&lt;p&gt;Here is my next tranche of thoughts about building a more secure out-of-the-box authentication mechanism for Derby. I address two topics:&lt;/p&gt;

&lt;p&gt;1) Setting a reasonable goal.&lt;/p&gt;

&lt;p&gt;2) Handling system-wide users.&lt;/p&gt;

&lt;p&gt;------------- Setting a Reasonable Goal -------------------&lt;/p&gt;

&lt;p&gt;Francois raised the point that if someone can read or write your database directories, then you may have already lost the security battle. If someone can read your database directories, then they can copy the database to a workbench area and crack it at their leisure. If someone can write to the database directories, then they can alter your database; they might even escape detection via an exploit like the one described by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5510&quot; title=&quot;It is easy to override authentication, authorization, and database-only properties if you have physical access to a database.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5510&quot;&gt;DERBY-5510&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If the attacker can connect to a Derby engine which reads directories holding your database, then the attacker can copy the database to a workbench area by exploiting the vulnerability described by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2470&quot; title=&quot;No authentication required to restore a backup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2470&quot;&gt;DERBY-2470&lt;/a&gt;. By using the RESTORE functionality, the attacker does not even need valid credentials to do this.&lt;/p&gt;

&lt;p&gt;Encryption may help protect you from these attacks. However, as Francois points out, once the attacker has a physical copy of your database, cracking it may only be a matter of time. Derby encryption may be particularly vulnerable because system conglomerates keep their original names and begin with known sequences of bytes. It is possible that encrypted file systems may give you a bit more protection.&lt;/p&gt;

&lt;p&gt;For these reasons, I do not expect this JIRA to address the following non-goals:&lt;/p&gt;

&lt;p&gt;A) We are not trying to protect Derby databases on mobile devices like laptops and phones.&lt;/p&gt;

&lt;p&gt;B) We are not trying to protect Derby databases on removable media like USB sticks.&lt;/p&gt;

&lt;p&gt;However, I still think that we can boost the security of databases which live in physically secure locations such as servers inside protected machine rooms. This includes databases embedded inside user-written server applications and databases running inside Derby&apos;s own server framework.&lt;/p&gt;


&lt;p&gt;------------- Handling System-wide Users -------------------&lt;/p&gt;

&lt;p&gt;This JIRA focuses on the problem of database-specific users. However, we need to give some thought to the problem of system-wide users. These users appear in the following situations:&lt;/p&gt;

&lt;p&gt;i) The credentials of Derby network administrators. Here there is no distinguished database to which we can tie the credentials.&lt;/p&gt;

&lt;p&gt;ii) The credentials needed to create a database. Since the database doesn&apos;t exist yet, we can&apos;t tie credentials to it.&lt;/p&gt;

&lt;p&gt;I am tempted to add the following case too:&lt;/p&gt;

&lt;p&gt;iii) The credentials needed to restore a database from a backup. We might want to address this problem by authenticating the user in a read-only connection to the backup BEFORE restoring from it. On the other hand, previous discussions related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2470&quot; title=&quot;No authentication required to restore a backup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2470&quot;&gt;DERBY-2470&lt;/a&gt; have compared this use-case to database creation. If we want to treat this case like database creation, then we may want to treat the credentials like case (ii) above.&lt;/p&gt;

&lt;p&gt;Here are some options for managing system-wide credentials:&lt;/p&gt;

&lt;p&gt;I) Via system-wide properties, stated either on the JVM boot command or in a properties file. Maybe we could reuse the existing BUILTIN user/password properties for this purpose. I do not recommend this solution because it seems vulnerable to being spied on.&lt;/p&gt;

&lt;p&gt;II) Via some encrypted file managed by Derby. This would require building system-wide machinery for changing credentials and for disaster recovery. One variation of this approach might be a master database which just holds system-wide credentials.&lt;/p&gt;

&lt;p&gt;III) Via some application-supplied authenticator. This pushes the problem into the application and seems to defeat the intent of this JIRA.&lt;/p&gt;

&lt;p&gt;Maybe you can think of some other approaches. As you can tell, I am not thrilled by any of the solutions above.&lt;/p&gt;

&lt;p&gt;Perhaps we can finesse these problems and not create a concept of system-wide users:&lt;/p&gt;

&lt;p&gt;i&apos;) We already have a solution to &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;: The server administration credentials are invented at server boot time. In a properly configured server (forget NetServlet), the server can only be booted by someone who has passed other, enterprise-supplied authentication hurdles.&lt;/p&gt;

&lt;p&gt;ii&apos;) Do not allow arbitrary users to write their own Derby connection URLs. The trick here is for the embedding application to not provide a means by which users can specify arbitrary connection URLs. That is, educate users to treat URL injection like SQL injection.&lt;/p&gt;

&lt;p&gt;iii&apos;) We could tackle this as a case similar to (ii&apos;). Or we could first authenticate in a read-only connection to the backup, as noted above.&lt;/p&gt;

&lt;p&gt;I would appreciate your additional thoughts about these topics. Thanks.&lt;/p&gt;</comment>
                            <comment id="13155916" author="bryanpendleton" created="Wed, 23 Nov 2011 15:25:39 +0000"  >&lt;p&gt;I&apos;m having a bit of trouble following the overall threat model. My initial reaction is that the&lt;br/&gt;
primary problem you&apos;re worried about here is the overall security of the Network Server, as&lt;br/&gt;
distinct from the security of the individual database(s) it is providing access to; is that correct?&lt;/p&gt;

&lt;p&gt;It seems like the secondary problem has to do with properly securing a backup of a database,&lt;br/&gt;
since the backup contains information that is as sensitive as the database itself. But that&lt;br/&gt;
seems quite separate from the topic of Network Server security, no?&lt;/p&gt;

&lt;p&gt;I guess I feel like you&apos;re striking out into new ground, and away from the original goals of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-866&quot; title=&quot;Derby User Management Enhancements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-866&quot;&gt;&lt;del&gt;DERBY-866&lt;/del&gt;&lt;/a&gt;,&lt;br/&gt;
and possibly in multiple directions at once.&lt;/p&gt;

&lt;p&gt;Very valuable thoughts, and thanks for sharing them! I&apos;m just having a bit of trouble following it all.&lt;/p&gt;</comment>
                            <comment id="13158538" author="rhillegas" created="Mon, 28 Nov 2011 16:30:22 +0000"  >&lt;p&gt;Thanks for your comments, Bryan. I apologize for my scattershot series of questions and proposals.&lt;/p&gt;

&lt;p&gt;I seem to have come to focus on the following problem: Provide an out-of-the-box authentication scheme for Derby which is better than the current BUILTIN scheme. The new scheme would be used by multi-user applications.&lt;/p&gt;

&lt;p&gt;It doesn&apos;t matter whether the applications use Derby&apos;s Network Server framework or whether they simply embed Derby inside their own session manager. The primary use of this scheme would be to restrict access to databases, that is, to enforce a notion of database-specific user identity.&lt;/p&gt;

&lt;p&gt;The problem I was wrestling with in my last tranche of comments was this: Derby&apos;s other authentication schemes are all JVM-wide schemes, not database-specific schemes. This lets them handle a couple authentication problems which arise when you don&apos;t have a database. I am trying to figure out how we want to handle these problems when application(s) want to use the new scheme across all databases managed by a JVM.&lt;/p&gt;

&lt;p&gt;It&apos;s true, I am striking out in many different directions all at once. I am trying to make sure that the new scheme can handle all use-cases which the other schemes do today. This involves making sure that it will fit into candidate solutions for problems which we haven&apos;t addressed yet, like the database restoration problem described by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2470&quot; title=&quot;No authentication required to restore a backup&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2470&quot;&gt;DERBY-2470&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13158572" author="dagw" created="Mon, 28 Nov 2011 17:13:02 +0000"  >&lt;p&gt;Re: options for managing system-wide credentials:&lt;/p&gt;

&lt;p&gt;&amp;gt; I) Via system-wide properties&lt;br/&gt;
&amp;gt; II) Via some encrypted file managed by Derby&lt;br/&gt;
&amp;gt; III) Via some application-supplied authenticator&lt;/p&gt;

&lt;p&gt;I guess LDAP would fill this need too. Another option is integration with the host OS process id. Downside: system specific.&lt;br/&gt;
For both, the upside is we don&apos;t need to build a Derby specific system level authentication mechanism.&lt;/p&gt;</comment>
                            <comment id="13159253" author="rhillegas" created="Tue, 29 Nov 2011 13:26:10 +0000"  >&lt;p&gt;Thanks, Dag. Yes, LDAP should work. I lump it in category (III). Thanks.&lt;/p&gt;</comment>
                            <comment id="13160990" author="rhillegas" created="Thu, 1 Dec 2011 17:26:30 +0000"  >&lt;p&gt;Attaching a first version of a functional spec for NATIVE user management. This is an attempt to capture the discussion so far. Having a concrete proposal in front of us may help move the discussion forward. Your feedback is appreciated.&lt;/p&gt;

&lt;p&gt;The following topics need more discussion:&lt;/p&gt;

&lt;p&gt;1) This version of the spec does not address the issue of system-wide credentials. I will post a follow-on comment soon which tries to move that discussion forward.&lt;/p&gt;

&lt;p&gt;2) This version of the spec phrases password procedure arguments as CLOBs in order to address the Java vulnerability described here: &lt;a href=&quot;http://securesoftware.blogspot.com/2009/01/java-security-why-not-to-use-string.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://securesoftware.blogspot.com/2009/01/java-security-why-not-to-use-string.html&lt;/a&gt; An alternative approach would be to introduce a new Derby datatype corresponding to char[]. Other suggestions are welcome.&lt;/p&gt;

&lt;p&gt;Thanks in advance for reading this spec.&lt;/p&gt;</comment>
                            <comment id="13161074" author="rhillegas" created="Thu, 1 Dec 2011 19:41:09 +0000"  >&lt;p&gt;Here is a proposal for how NATIVE user management can handle system-wide users. That is, this proposal handles authenticating orderly engine shutdown, database creation/restoration, and other situations where there is no database in focus.&lt;/p&gt;

&lt;p&gt;1) By default, NATIVE authentication successfully authenticates all user/password pairs in system-wide situations. That is, there are no authentication checks preventing orderly engine shutdown and database creation/restoration. In this default mode, Derby is vulnerable to denial-of-service and resource-hogging exploits by anyone who can craft their own connection URLs.&lt;/p&gt;

&lt;p&gt;2) We can introduce a new Derby property: derby.authentication.native.credentialsDB. This property can be pointed at a distinguished Derby database. When this property is set, the NATIVE credentials in the distinguished database are used for all authentication. That is, credentials in the distinguished database work for system-wide authentication as well as for ordinary connections to Derby databases. A typical use-case would be a networked Derby application which uses a single database; in this use-case, that database would be set to be the distinguished credentials database.&lt;/p&gt;

&lt;p&gt;3) Note that what has been proposed so far merely puts an authentication hurdle in front of denial-of-service and resource-hogging exploits. Any legal user could still shutdown the engine and create unlimited numbers of databases. More protection against these attacks would be provided by completing the system privileges work described by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A variation on this proposal would be:&lt;/p&gt;

&lt;p&gt;2&apos;) The distinguished credentials database is only used for system-wide situations. When connecting to an existing Derby database, the NATIVE credentials in that database are used. I think this is a more difficult proposal because it could result in a single identity having to maintain two sets of credentials: a system-wide set and a database-specific set. Note, however, that there is no distinction between (2) and (2&apos;) for the typical use-case cited above, in which a single database serves both as the distinguished credentials database as well as the application data store.&lt;/p&gt;

&lt;p&gt;For extra credit, we might want to make it easy to support the following scenario:&lt;/p&gt;

&lt;p&gt;A) An application could supply a custom authenticator which relies on NATIVE authentication when authenticating connections to existing databases but which validates system-wide users via LDAP or local OS accounts. I am not sure it is worth spending extra effort to make this scenario easy to support. That is because this usage suffers from the same problem as (2&apos;): a single identity would have to maintain multiple sets of credentials.&lt;/p&gt;

&lt;p&gt;---------------------------------------------------------&lt;/p&gt;

&lt;p&gt;More on this problem of multiple credentials for a single identity:&lt;/p&gt;

&lt;p&gt;It is clear that Derby authentication was designed to make it possible for an identity to have multiple sets of credentials. This feature can be exploited currently by both BUILTIN and application-supplied authentication schemes. However, it does not seem to me that the feature is completely baked. In particular, at database creation time there is no way to tease apart which set of credentials you intend. This forces you to keep both sets in sync. That is because database creation and restoration entail 2 separate credentials checks: an initial check using system-wide credentials followed by a connection attempt using database-specific credentials.&lt;/p&gt;

&lt;p&gt;If you want to further investigate this double authentication problem, try out the attached DummyAuthenticator and its dummyCredentials.properties file. Boot ij with the following command line and try to create a database:&lt;/p&gt;

&lt;p&gt;java \&lt;br/&gt;
  -Dderby.connection.requireAuthentication=true  \&lt;br/&gt;
  -Dderby.authentication.provider=DummyAuthenticator \&lt;br/&gt;
  -Dderby.database.sqlAuthorization=true \&lt;br/&gt;
  org.apache.derby.tools.ij&lt;/p&gt;</comment>
                            <comment id="13161679" author="rhillegas" created="Fri, 2 Dec 2011 15:08:48 +0000"  >&lt;p&gt;In the next rev of the spec, I will rephrase the password procedure args as VARCHAR( 32672 ). It should be possible to wrap a char[] password in a CharArrayReader and use CallableStatement.setCharacterStream() to pass the Reader to Derby. CharArrayReader promises that it does NOT copy the char[] used to construct it. When the application zeroes out its char[] password, the contents of the CharArrayReader will be cleared too.&lt;/p&gt;</comment>
                            <comment id="13161738" author="dagw" created="Fri, 2 Dec 2011 17:34:16 +0000"  >&lt;p&gt;&amp;gt;    2) This version of the spec phrases password procedure arguments as&lt;br/&gt;
&amp;gt;    CLOBs in order to address the Java vulnerability described here:&lt;br/&gt;
&amp;gt;    &lt;a href=&quot;http://securesoftware.blogspot.com/2009/01/java-security-why-not-to-use-string.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://securesoftware.blogspot.com/2009/01/java-security-why-not-to-use-string.html&lt;/a&gt;&lt;br/&gt;
&amp;gt;    An alternative approach would be to introduce a new Derby datatype&lt;br/&gt;
&amp;gt;    corresponding to char[]. Other suggestions are welcome.&lt;/p&gt;

&lt;p&gt;Btw, this article mentions not String objects are not necessarily&lt;br/&gt;
immutable (although the interened strings are):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://directwebremoting.org/blog/joe/2005/05/26/java_lang_string_is_not_immutable.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://directwebremoting.org/blog/joe/2005/05/26/java_lang_string_is_not_immutable.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I checked that with our default server policy, this attack doesn&apos;t&lt;br/&gt;
work:&lt;/p&gt;

&lt;p&gt;   java.security.AccessControlException: access denied (java.lang.RuntimePermission accessDeclaredMembers)&lt;br/&gt;
   ***&lt;br/&gt;
   lowercase&lt;/p&gt;

&lt;p&gt;Good to know.&lt;/p&gt;</comment>
                            <comment id="13161766" author="rhillegas" created="Fri, 2 Dec 2011 18:13:37 +0000"  >&lt;p&gt;Thanks for that pointer and for running that experiment, Dag!&lt;/p&gt;</comment>
                            <comment id="13161794" author="dagw" created="Fri, 2 Dec 2011 19:14:52 +0000"  >&lt;p&gt;I have read through the attached spec document UserManagement.html, thanks Rick! Looks like we&apos;re aiming for a much better user experience with this one. Some comments.&lt;/p&gt;

&lt;p&gt;1) Is locking out the users unconditionally after the password expiration nice? You do provide a method (modifyPassword) to let users update their password. How about letting the connect issue a warning is the password is getting stale according to some criterion? This would enable user apps to take action before it&apos;s too late and the DBO needs to be called into action, which could be impractical. Also there is a security downside to that, in that the DBO would have access to the users&apos; password. Presently, its kind of moot, since the DBO can access all schemas anyway, but we might change that in the future..&lt;/p&gt;

&lt;p&gt;2) How do you envisage the initial DBO credentials be specified? For the controlling property to be allowed to be set, you state&lt;/p&gt;

&lt;p&gt;  &quot;derby.authentication.provider - ... This value can only be set if there are credentials for the DBO in SYSUSERS.&quot;&lt;/p&gt;

&lt;p&gt;So I wonder about the bootstrap here: DBO credentials could be taken from supplied credentials (i.e. they would be required) in the URL with the &quot;create=true&quot;. You state:&lt;/p&gt;

&lt;p&gt;  &quot;If you set this value (i.e. derby.authentication.provider -dhw) using a system property before you create databases, all new databases will automatically be set to use NATIVE authentication&quot;&lt;/p&gt;

&lt;p&gt;If so, it seems it would be too late the call createUser to create the DBO manually? The use of the URL would also force a string with the DBO password to be constructed in that case, right?&lt;/p&gt;

&lt;p&gt;3) Like you, I also have reservations about the Clob datatype interface, but it does avoid the complexity of a new Derby type..not sure what&apos;s the right thing to do, maybe you could make an example with a Derby type so we can see how its looks..&lt;/p&gt;

&lt;p&gt;4) nit: examples have password&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; instead of password&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; in the loop to erase the password array characters&lt;/p&gt;

&lt;p&gt;5) In the examples, it may be useful to state that if users are created from a network client, ssl should be enabled. Not important here, but as a note to self when we write the docs based on this in the future..&lt;/p&gt;</comment>
                            <comment id="13161801" author="dagw" created="Fri, 2 Dec 2011 19:29:21 +0000"  >&lt;p&gt;Re my item 3): I just read about your suggestion for the CharArrayReader to wrap passwords, sounds like a good idea!&lt;/p&gt;</comment>
                            <comment id="13161813" author="dagw" created="Fri, 2 Dec 2011 19:45:54 +0000"  >&lt;p&gt;I like the idea of using a dedicated database for &lt;b&gt;all&lt;/b&gt; the credentials (system level, db level) and avoid the problem of maintaining two sets.&lt;br/&gt;
As for the denial of service attack you mention not being covered in the proposed solution,  we could require DBO credentials for the system level operations? We do that already for encryption, upgrade and system shutdown if sqlAuthorization is enabled (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2264&quot; title=&quot;Restrict shutdown, upgrade, and encryption powers to the database owner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2264&quot;&gt;&lt;del&gt;DERBY-2264&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13161824" author="rhillegas" created="Fri, 2 Dec 2011 20:01:31 +0000"  >&lt;p&gt;Thanks for reading the spec, Dag. Some responses follow. I will incorporate your suggestions into the next rev of the spec:&lt;/p&gt;

&lt;p&gt;1) I can see the value of warning users that their password&apos;s lifetime is running out. How about:&lt;/p&gt;

&lt;p&gt;a) Raise a warning if the password will expire within a week.&lt;/p&gt;

&lt;p&gt;b) Raise an exception if the password has expired.&lt;/p&gt;

&lt;p&gt;2) I will try to describe the bootstrapping mechanism better in the next rev of the spec. The idea is that the bootstrap credentials are supplied in the connection arguments when the database is created. If the database is being newly created, then we just trust the bootstrap credentials.&lt;/p&gt;

&lt;p&gt;The credentials could be supplied by the URL or in the Properties object which accompanies the connection attempt or in the DataSource. Derby will internally call createUser() to persist credentials for the DBO when the database is created.&lt;/p&gt;

&lt;p&gt;It is true that the current JDBC connection methods suffer from the String vulnerability described by the link above. I expect that the JDBC expert group will address this vulnerability in JDBC 4.2. In Java 8 I expect that users will be able to state their passwords in a safer way.&lt;/p&gt;

&lt;p&gt;3) Agreed.&lt;/p&gt;

&lt;p&gt;4) Thanks, I&apos;ll clean that up.&lt;/p&gt;

&lt;p&gt;5) Thanks, I&apos;ll add a note about this to the documentation section. SSL is essential for safeguarding credentials when using the Derby network client.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13161826" author="rhillegas" created="Fri, 2 Dec 2011 20:04:33 +0000"  >&lt;p&gt;Thanks for the additional comments, Dag. I think you are recommending that the default behavior should be to refuse to authenticate system-wide operations (like orderly engine shutdown) if a credentials DB has not been specified. I think that sounds safer. Thanks.&lt;/p&gt;</comment>
                            <comment id="13161922" author="dagw" created="Fri, 2 Dec 2011 23:38:57 +0000"  >&lt;p&gt;Hmm, that was not what I was thinking, but is an interesting idea. My point is this: even is a user is authenticated, he would not be allowed to perform system level operations unless the user is actually the DBO. We could possibly be able to delegate (grant) this ability somehow.&lt;/p&gt;</comment>
                            <comment id="13161928" author="dagw" created="Fri, 2 Dec 2011 23:43:47 +0000"  >&lt;p&gt;Another issue, given that we have one credentials database, would there be an a priori DBO or sys admin identity there? Probably not, since the DBO gets to be the user that creates the database. But if so, we have no DBO role at the systems level, and anybody authenticated would be allowed to perform system level operations. All users are created equal &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Which may be what you said all along &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; If so, forget my previous comment.&lt;/p&gt;</comment>
                            <comment id="13162788" author="rhillegas" created="Mon, 5 Dec 2011 14:09:20 +0000"  >&lt;p&gt;Thanks for the additional comments, Dag. For some applications, it&apos;s probably ok to make all DBOs system administrators. Not sure that&apos;s going to be ideal for all applications but it might take us a long way.&lt;/p&gt;

&lt;p&gt;Your comments suggest this side-effect of having a single credentials database: We could implement system privileges via GRANT/REVOKE in that database rather than via the Java security mechanisms proposed by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;. GRANT/REVOKE is much easier to understand and administer than Java security&apos;s policy files. Not sure how to make this work with our other authentication schemes (LDAP/BUILTIN/custom), but it might be possible.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13163031" author="rhillegas" created="Mon, 5 Dec 2011 20:57:52 +0000"  >&lt;p&gt;Attaching a second rev of UserManagement.html.&lt;/p&gt;</comment>
                            <comment id="13163296" author="dagw" created="Tue, 6 Dec 2011 02:57:56 +0000"  >&lt;p&gt;Thanks for the updated spec! Using the varchar instead of the CLOB seems more reasonable, and one can stream the password to that type, too.&lt;br/&gt;
Yes, I think we could consider using the credentials database for implementing system privileges.  If the user wanted system privileges but still wants to use LDAP or custom authentication, the credentials database could still be used for authorization purposes for the system privileges. The GRANT/REVOKE could be independent on how we authenticate.&lt;/p&gt;</comment>
                            <comment id="13163626" author="rhillegas" created="Tue, 6 Dec 2011 14:46:11 +0000"  >&lt;p&gt;Attaching a third rev of UserManagement.html. This version fills in the Documentation section.&lt;/p&gt;</comment>
                            <comment id="13165568" author="rhillegas" created="Thu, 8 Dec 2011 21:15:16 +0000"  >&lt;p&gt;Attaching derby-866-01-aa-sysusers.diff. This first patch adds the SYSUSERS table. I will add upgrade tests in a follow-on patch. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Creates the SYSUSERS table and a unique index on its USERNAME column. This happens in newly created 10.9 databases and in databases which have been hard-upgraded to 10.9.&lt;/p&gt;

&lt;p&gt;2) When SQL authorization is enabled, lets only the DBO view SYSUSERS and prevents even the DBO from viewing the PASSWORD column.&lt;/p&gt;

&lt;p&gt;This patch touches a lot of files for these reasons:&lt;/p&gt;

&lt;p&gt;i) Adding a new catalog involves touching several data dictionary files.&lt;/p&gt;

&lt;p&gt;ii) Many of our tests have canonized the results of selects from SYSTABLES. We should consider adjusting these tests so that they will not break the next time we add a catalog. This might be a good task for a newcomer or GSoC student.&lt;/p&gt;

&lt;p&gt;iii) A couple other files had to be touched because SYSUSERS is a special table with restricted access.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/sql/catalog/SYSUSERSRowFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java&lt;/p&gt;

&lt;p&gt;Adds the SYSUSERS table to the DataDictionary.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/types/SQLChar.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLVarchar.java&lt;/p&gt;

&lt;p&gt;Special logic to allow us to wrap a SQLVarchar around the char[] used to hold a password. This is not intended as general support for representing Strings as char[].&lt;/p&gt;


&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New check to prevent unauthorized viewing of SYSUSERS.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/DBOAccessTest.java&lt;/p&gt;

&lt;p&gt;New test case to verify that Derby prevents unauthorized viewing of SYSUSERS.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;


&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrimaryKeyTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/SystemCatalogTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DMDBugsTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/ij7.out&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/master/compressTable.out&lt;/p&gt;

&lt;p&gt;Additional tests which had to be changed because a new catalog appears when you select from SYSTABLES.&lt;/p&gt;</comment>
                            <comment id="13165670" author="rhillegas" created="Thu, 8 Dec 2011 23:25:44 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-866-01-aa-sysusers.diff.&lt;/p&gt;</comment>
                            <comment id="13165703" author="mikem" created="Fri, 9 Dec 2011 00:12:32 +0000"  >&lt;p&gt;In the proposed system is there a separate database that has to be accessed for every connection to a user database?  &lt;/p&gt;</comment>
                            <comment id="13166142" author="rhillegas" created="Fri, 9 Dec 2011 13:14:24 +0000"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;The credentials database might be a separate database. Or it might be the ordinary database used by the application. I imagine these use cases:&lt;/p&gt;

&lt;p&gt;1) Simple - The application has one database. In this case, that database also serves as the credentials database.&lt;/p&gt;

&lt;p&gt;2) Complex - The application has many databases or the JVM is running many Derby applications. In this case, there would be a separate credentials database. Every new connection to a user database would involve accessing the credentials database in order to authenticate the user.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13166345" author="rhillegas" created="Fri, 9 Dec 2011 17:40:28 +0000"  >&lt;p&gt;Attaching derby-866-01-ab-sysusers.diff. This second rev of the patch adds some additional tests, including an upgrade test.&lt;/p&gt;

&lt;p&gt;Adds the following tests:&lt;/p&gt;

&lt;p&gt;1) Verifies that you can&apos;t use views to subvert the authorization checks on SYSUSERS.&lt;/p&gt;

&lt;p&gt;2) Verifies that SYSUSERS is created by hard-upgrade but not by soft-upgrade.&lt;/p&gt;

&lt;p&gt;I ran the upgrade tests against the following list of old releases. I did not see any errors other than the ones which appear without this patch:&lt;/p&gt;

&lt;p&gt;10.0.2.1&lt;br/&gt;
10.1.1.0&lt;br/&gt;
10.1.2.1&lt;br/&gt;
10.1.3.1&lt;br/&gt;
10.2.1.6&lt;br/&gt;
10.2.2.0&lt;br/&gt;
10.2.2.1&lt;br/&gt;
10.3.1.4&lt;br/&gt;
10.3.2.1&lt;br/&gt;
10.3.3.0&lt;br/&gt;
10.4.1.3&lt;br/&gt;
10.4.2.0&lt;br/&gt;
10.4.2.1&lt;br/&gt;
10.5.1.1&lt;br/&gt;
10.5.2.0&lt;br/&gt;
10.5.3.0&lt;br/&gt;
10.6.1.0&lt;br/&gt;
10.6.2.1&lt;br/&gt;
10.7.1.1&lt;br/&gt;
10.8.1.2&lt;br/&gt;
10.8.2.2&lt;/p&gt;


&lt;p&gt;Touches an additional file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;</comment>
                            <comment id="13166393" author="rhillegas" created="Fri, 9 Dec 2011 18:20:52 +0000"  >&lt;p&gt;Committed derby-866-01-ab-sysusers.diff at subversion revision 1212562.&lt;/p&gt;</comment>
                            <comment id="13166409" author="mikem" created="Fri, 9 Dec 2011 18:30:49 +0000"  >&lt;p&gt;Will the new system catalogs be present in an embedded database that does not have any interest in this user management implementation?  If at all possible it would be nice if this implementation was modular and did not affect code, code paths, and disk footprint if user wants no user managment, or uses their own user management.  Would it be possible to use the existing pluggable interfaces to implement this alternate implementation, and if not maybe that interface needs to be enhanced?&lt;/p&gt;</comment>
                            <comment id="13166424" author="mikem" created="Fri, 9 Dec 2011 18:45:03 +0000"  >&lt;p&gt;In the past I worked on a system that had a 2 database system where one database had info about the other databases.  This caused some&lt;br/&gt;
support nightmares, especially when a single database problem could prevent access to all databases. &lt;/p&gt;

&lt;p&gt;With derby it is nice that all databases are a unit unto themselves and that is what the current architecture is built around.  A number of issues&lt;br/&gt;
jump to mind if you start assume multiple access on one connection:&lt;br/&gt;
o now backup of a database becomes more complicated as it can be out of sync with the master db&lt;br/&gt;
o are databases now not portable across systems, or only if combined with master db?&lt;br/&gt;
o how does this affect replication?&lt;br/&gt;
o can the master db be encrypted, and if so how do you get multiple keys from single connection?&lt;br/&gt;
o does collation of the 2 dbs have an effect, now do all dbs in the system need same collation?&lt;/p&gt;

&lt;p&gt;Having a separate db to me seems like even more administration for derby. &lt;/p&gt;

&lt;p&gt;Also for derby a database is a pretty heavy weight object in the system.   A good Derby application is one that is embedded and uses a single&lt;br/&gt;
database.  This is the best case usage of Derby.  Of course multiple databases are allowed and work but often lead to unexpected problems.&lt;br/&gt;
Adding a 2nd db in a normal case may double the memory requirements of derby given the 1 cache per database model currently implemented,&lt;br/&gt;
n background threads per active db, ...&lt;/p&gt;</comment>
                            <comment id="13166484" author="rhillegas" created="Fri, 9 Dec 2011 19:40:35 +0000"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;Thanks for thinking about this proposal. I would like to begin addressing your comments.&lt;/p&gt;

&lt;p&gt;NATIVE authentication introduces two new conglomerates, the SYSUSERS heap and a primary key index on its USERNAME column. On my system, taking default page sizes, those empty conglomerates take up 16K space on disk. I believe that is noise compared to the 1.8M consumed by the entire empty Derby database. I don&apos;t see much value in optimizing out that noise.&lt;/p&gt;

&lt;p&gt;However, some day we may want to seriously slim down the size of our empty database. If we want to do that, then I could see value in building a mechanism which creates certain catalogs only if they are actually needed. The following catalogs would be targets for this mechanism. All of these catalogs start out empty and will never have any tuples unless the application uses the indicated features:&lt;/p&gt;

&lt;p&gt;SQL Authorization catalogs:&lt;/p&gt;

&lt;p&gt;    sys.syscolperms&lt;br/&gt;
    sys.sysperms&lt;br/&gt;
    sys.sysroles&lt;br/&gt;
    sys.systableperms&lt;/p&gt;

&lt;p&gt;SQL Routines:&lt;/p&gt;

&lt;p&gt;    sys.sysfiles&lt;/p&gt;

&lt;p&gt;Sequences:&lt;/p&gt;

&lt;p&gt;    sys.syssequences&lt;/p&gt;

&lt;p&gt;NATIVE authentication:&lt;/p&gt;

&lt;p&gt;    sys.sysusers&lt;/p&gt;

&lt;p&gt;Views:&lt;/p&gt;

&lt;p&gt;    sys.sysviews&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13166498" author="kmarsden" created="Fri, 9 Dec 2011 19:52:01 +0000"  >&lt;p&gt;I have really only skimmed the spec but totally agree that a separate credentialsDB seems too heavy weight for Derby and also seems like it would cause trouble  in shared environments like Application  Servers.   It seems like it is geared mostly for network server environments, is that correct? &lt;/p&gt;

&lt;p&gt;I also agree that this should be a plug-able feature and not impact standard embedded environments in any way.&lt;/p&gt;


</comment>
                            <comment id="13166546" author="rhillegas" created="Fri, 9 Dec 2011 20:56:55 +0000"  >&lt;p&gt;Hi again Mike,&lt;/p&gt;

&lt;p&gt;I would like to address some of your other concerns.&lt;/p&gt;

&lt;p&gt;Let me start out by noting that no-one is forcing an application to use NATIVE authentication. The application has to opt into this scheme. If the application doesn&apos;t need authentication, then this feature will not affect it at all. If the application uses LDAP or a custom authenticator, then this feature has no effect either.&lt;/p&gt;

&lt;p&gt;Like you, I have worked on systems which had a master database in addition to the application-specific databases. I share your anxiety about the complexity of those systems. Because of those anxieties, I resisted this approach for a long time. However, I have settled on this approach because it is nonetheless more appealing than the other alternatives which I listed above in my 2011-11-22 comment. Option (I) is impossible to implement securely. Option (III) is not a solution at all, it just punts the problem back to the user. So I have settled on option (II).&lt;/p&gt;

&lt;p&gt;This proposal tries not to tightly couple the databases. What is being discussed here is not a master database in the sense of the old systems which we used to work on. This is just a credentials database. In most systems which opt into NATIVE authentication, I suspect that there will only be one database. That is, for them the application database will do double duty as the credentials database too.&lt;/p&gt;

&lt;p&gt;Of course, once we introduce the possibility of a separate credentials database, then developers may think up other uses for it and try to use it to perform some of the other functions of a master database. We will have to be vigilant about that feature-creep.&lt;/p&gt;

&lt;p&gt;Let me address some of your other concerns.&lt;/p&gt;

&lt;p&gt;o You observe that &quot;a single database problem could prevent access to all databases&quot;. True enough. But this is just a special case of the fact that the authenticator, whatever it is, is a bottleneck and single-point-of-failure. LDAP could go down and so could a user-supplied custom authenticator.&lt;/p&gt;

&lt;p&gt;o You observe that &quot;now backup of a database becomes more complicated as it can be out of sync with the master db&quot;. Again, I do not see a new danger being introduced here. The linkage to the credentials database is no stronger than the linkage to LDAP or to a user-supplied custom authenticator.&lt;/p&gt;

&lt;p&gt;o You ask, &quot;are databases now not portable across systems, or only if combined with master db?&quot; Again, the same response. No new danger is introduced other than the danger already experienced with LDAP and user-supplied custom authenticators. If you move your database to another system, then you must make sure that the authentication service is available there too. I would even go so far as to argue that NATIVE authentication is more portable than LDAP for the usual case of an application with a single database which serves as the credentials database. The credentials are in the database. Nothing could be more portable than that.&lt;/p&gt;

&lt;p&gt;o You ask, &quot;how does this affect replication?&quot; I do not see any replication issues for a system which has only one database and which uses it as the credentials database. In systems which manage multiple databases in the same JVM, I do not think that replication failover has really been thought through. In those systems the slave database will be on a separate machine and will somehow have to be copied back to the system hosting the common JVM. After the slave database becomes usable by the common JVM, it will have access to the credentials database managed by that JVM. However, thank you for raising this topic. This is an area we will want to test.&lt;/p&gt;

&lt;p&gt;o You ask, &quot;can the master db be encrypted, and if so how do you get multiple keys from single connection?&quot; Yes, it can be encrypted. As with any encrypted database, it will have to be booted by a super-user before anyone else can use it. Once the encrypted database has been booted, no-one else needs to supply the encryption key. For the common case of a system with one database which also serves as the credentials database, no additional hurdles are introduced by NATIVE authentication. For systems which manage multiple databases, the credentials database will have to be booted with an encryption key before anyone can do any work. But there is nothing special about this situation either. LDAP has to be booted and so does a user-supplied custom authenticator.&lt;/p&gt;

&lt;p&gt;o You ask, &quot;does collation of the 2 dbs have an effect, now do all dbs in the system need same collation?&quot;  I don&apos;t see why. In Derby, user names are stored in SYSSCHEMAS.AUTHORIZATIONID. The string columns of Derby&apos;s catalogs are not governed by the collation used for user tables. Even if you enable a collation for user tables, Derby&apos;s catalogs continue to obey the comparison/sorting semantics of databases which don&apos;t use collations.&lt;/p&gt;

&lt;p&gt;o You observe, &quot;Having a separate db to me seems like even more administration for derby.&quot; I think that this is again a general comment about any authentication scheme. Yes, someone has to administer LDAP and the user-supplied custom authenticator.&lt;/p&gt;

&lt;p&gt;o You observe, &quot;Also for derby a database is a pretty heavy weight object in the system. A good Derby application is one that is embedded and uses a single database. This is the best case usage of Derby. Of course multiple databases are allowed and work but often lead to unexpected problems.&quot; Agreed. I expect that the usual use case will be an application with a single database which also serves as the credentials database.&lt;/p&gt;

&lt;p&gt;o You continue, &quot;Adding a 2nd db in a normal case may double the memory requirements of derby given the 1 cache per database model currently implemented, n background threads per active db, ...&quot; Here we are talking about a system which has a separate credentials database. That would be a system which is already managing multiple Derby databases.&lt;/p&gt;

&lt;p&gt;Hope that this helps allay your concerns.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13166566" author="rhillegas" created="Fri, 9 Dec 2011 21:12:49 +0000"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Thanks for reading the spec and for your comments. Just to recap some of the points I made in my previous response to Mike:&lt;/p&gt;

&lt;p&gt;o A separate credentials database is only necessary for systems which already manage multiple Derby databases. Presumably those systems are familiar with the problems of managing multiple Derby databases in a single JVM.&lt;/p&gt;

&lt;p&gt;o I do not understand your comment about plugability. This feature will slightly increase the size of Derby&apos;s engine jar and the size of an empty Derby database.  However, I expect those increases to be well within the percentage growth which we have tolerated for feature releases over the last 6 years.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13166598" author="mikem" created="Fri, 9 Dec 2011 21:49:40 +0000"  >&lt;p&gt;you comment:&lt;br/&gt;
o A separate credentials database is only necessary for systems which already manage multiple Derby databases. Presumably those systems are familiar with the problems of managing multiple Derby databases in a single JVM.&lt;/p&gt;

&lt;p&gt;Is it necessary to have a separate credentials database in a system with multiple databases, or is that an option?&lt;/p&gt;</comment>
                            <comment id="13166910" author="bryanpendleton" created="Sat, 10 Dec 2011 17:08:18 +0000"  >&lt;p&gt;&amp;gt; With derby it is nice that all databases are a unit unto themselves&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Rick, I know you have tried several times to explain the advantages of a separate database for certain&lt;br/&gt;
purposes, but I&apos;m struggling with it. Is the NetworkServer the primary issue here?&lt;/p&gt;

&lt;p&gt;Would it help to have a configuration option for the NetworkServer where it could be explicitly&lt;br/&gt;
pointed at a specific database and told &quot;use the credentials in THIS database for overall server&lt;br/&gt;
authentication&quot;?&lt;/p&gt;

&lt;p&gt;Then, the administrator of that NetworkServer could choose whether they want to designate&lt;br/&gt;
some database solely for Network Server credentials, or whether they wanted to use one of&lt;br/&gt;
their existing databases, or whether they didn&apos;t want to authorize those NetworkServer actions at all.&lt;/p&gt;</comment>
                            <comment id="13167489" author="rhillegas" created="Mon, 12 Dec 2011 13:24:45 +0000"  >&lt;p&gt;Thanks for continuing to  help me think about this issue, Mike and Bryan. I believe that the scenarios you want to see should be possible to configure. Some responses follow:&lt;/p&gt;

&lt;p&gt;Mike asks: &quot;Is it necessary to have a separate credentials database in a system with multiple databases, or is that an option?&quot; It is an option. The credentials database could just be one of the databases already managed by the application.&lt;/p&gt;

&lt;p&gt;Bryan asks: &quot;Would it help to have a configuration option for the NetworkServer where it could be explicitly&lt;br/&gt;
pointed at a specific database and told &apos;use the credentials in THIS database for overall server&lt;br/&gt;
authentication&apos;?&quot; Perhaps what you are asking for is a simple way to configure the following behavior:&lt;/p&gt;

&lt;p&gt;i) When connecting to an existing database, use the NATIVE credentials in that database.&lt;/p&gt;

&lt;p&gt;ii) When authenticating system-wide actions (server startup/shutdown, create/restore database), use the credentials in a specially designated credentials DB (which could be one of the existing databases or could be another, separate database).&lt;/p&gt;

&lt;p&gt;Bryan&apos;s use can be configured as follows:&lt;/p&gt;

&lt;p&gt;1) Create empty application databases without authentication (but supply credentials so that a dbo account is created).&lt;/p&gt;

&lt;p&gt;2) In each of those databases, set derby.authentication.provider=NATIVE::&lt;/p&gt;

&lt;p&gt;3) Bring down the installation.&lt;/p&gt;

&lt;p&gt;4) Now reboot the installation, setting the following property on the command line: derby.authentication.provider=NATIVE:networkServerCredentialsDB&lt;/p&gt;

&lt;p&gt;5) Continue creating the schemas in your application databases.&lt;/p&gt;

&lt;p&gt;If you can help me describe the scenarios which should be easiest to configure, I can adjust the api to make this possible.&lt;/p&gt;

&lt;p&gt;In any event, did I understand your scenario correctly, Bryan?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13167524" author="bryanpendleton" created="Mon, 12 Dec 2011 15:13:23 +0000"  >&lt;p&gt;Yes, I think that re-states my perspective clearly. Thanks!&lt;/p&gt;</comment>
                            <comment id="13167572" author="rhillegas" created="Mon, 12 Dec 2011 16:12:20 +0000"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Would the following api be easy enough to satisfy your use-case:&lt;/p&gt;

&lt;p&gt;1) At the system level, derby.authentication.provider can be set to the following special value:&lt;/p&gt;

&lt;p&gt;   -Dderby.authentication.provider=NATIVE:$credentialsDB:&lt;/p&gt;

&lt;p&gt;2) The extra trailing : tells Derby that the $credentialsDB should only be used for system-wide authentication. When creating a new database, Derby performs the following steps:&lt;/p&gt;

&lt;p&gt;a) Authenticates the user/password combination against $credentialsDB.&lt;/p&gt;

&lt;p&gt;b) If that succeeds, creates the new database, stores the user/password in the SYSUSERS catalog of the new database, then sets derby.authentication.provider=NATIVE:: in the database.&lt;/p&gt;

&lt;p&gt;c) Subsequent attempts to connect to the newly created database will be authenticated against the NATIVE credentials stored in the database itself.&lt;/p&gt;

&lt;p&gt;d) However, system-wide operations will continue to be authenticated against $credentialsDB.&lt;/p&gt;

&lt;p&gt;At database creation time, the DBO&apos;s local credentials (the ones stored in the new database) start out being the same as the DBO&apos;s credentials in $credentialsDB. The DBO has to decide which of these behaviors is better:&lt;/p&gt;

&lt;p&gt;i) Keep $credentialsDB in sync with the local database. That is, whenever the DBO wants to update her local password, she should remember to update her password in $credentialsDB.&lt;/p&gt;

&lt;p&gt;ii) Or let the local password diverge from what&apos;s in $credentialsDB.&lt;/p&gt;

&lt;p&gt;If the DBO opts for &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, then she will use a single password to connect to her database, restore her database, and shutdown the engine.&lt;/p&gt;

&lt;p&gt;If the DBO opts for (ii), then she will use one password to connect to her database and another password to shutdown the engine and restore her database. She will trip over the following speedbump:&lt;/p&gt;

&lt;p&gt;When she restores a database, she will supply her system-wide password (stored in $credentialsDB). The database will be successfully restored. However, she will not have a connection to it. In fact, she will encounter an authentication error. She will have to get a fresh connection to the newly restored database, using her password as it is stored in that database.&lt;/p&gt;

&lt;p&gt;This odd behavior arises because database restoration causes Derby to verify the supplied credentials twice: first at the system-level and then at the local level. This is the existing behavior of Derby today. Currently there is no way to tell Derby to use one set of credentials for the restoration and a separate set of credentials for the database connection.&lt;/p&gt;

&lt;p&gt;Do people think that this extension would be useful/usable? Should this use-case be sanded down further?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13168101" author="bryanpendleton" created="Tue, 13 Dec 2011 03:30:22 +0000"  >&lt;p&gt;Thanks Rick, lots of good material to chew on there.&lt;/p&gt;

&lt;p&gt;Using a trailing colon to enable special behaviors seems pretty subtle, syntactically. I can imagine&lt;br/&gt;
overlooking it when proof-reading somebody else&apos;s configuration quickly.&lt;/p&gt;

&lt;p&gt;I agree with you that it will start to get confusing when I have a username/password pair in each&lt;br/&gt;
database, and am not sure which username/password is being used when. Not sure I have a&lt;br/&gt;
better answer for the problems you pose, though.&lt;/p&gt;

&lt;p&gt;Overall, what you propose seems useful to me. The biggest problem I was worried about&lt;br/&gt;
was that there would be some &quot;special&quot; database with a &quot;special&quot; name that was unexpected&lt;br/&gt;
and out of my control, and I would overlook it since it was created automatically by the system&lt;br/&gt;
and I didn&apos;t realize it was there. Having a way to point at one of my own, existing databases&lt;br/&gt;
seems to address that problem adequately, to me.&lt;/p&gt;</comment>
                            <comment id="13168384" author="rhillegas" created="Tue, 13 Dec 2011 13:48:28 +0000"  >&lt;p&gt;Thanks, Bryan. I agree that the trailing : is a little subtle. How about making the trailing token something bigger, like :LOCAL. The system property could then have these legal values:&lt;/p&gt;

&lt;p&gt;1) derby.authentication.provider=NATIVE:$credentialsDB&lt;/p&gt;

&lt;p&gt;This setting means &quot;Use $credentialsDB to authenticate system-wide operations as well as connections to existing databases.&quot;&lt;/p&gt;

&lt;p&gt;2) derby.authentication.provider=NATIVE:$credentialsDB:LOCAL&lt;/p&gt;

&lt;p&gt;This setting means &quot;Use $credentialsDB to authenticate system-wide operations. When connecting to an existing database, authenticate using the credentials stored in its SYSUSERS table.&quot;&lt;/p&gt;

&lt;p&gt;To address your other point: Derby never automatically creates a Credentials DB. Derby always uses a database which the application knows about and asked for. The application has to ask Derby to create the Credentials DB and the application has to explicitly point Derby at that database. This is a significant way that a Credentials DB differs from the master databases created by other RDBMS engines.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13171156" author="rhillegas" created="Fri, 16 Dec 2011 19:33:54 +0000"  >&lt;p&gt;Attaching derby-866-02-ag-createDropUser.diff. This patch adds the syscs_create_user() and syscs_drop_user() system procedures. I will run regression tests.&lt;/p&gt;

&lt;p&gt;I had originally planned to add just syscs_create_user(). However, I found myself pulling on a ball of yarn because CleanDatabaseSetup needs to return to an initial state as far as possible, and that means dropping users who were added as part of the tests.&lt;/p&gt;

&lt;p&gt;I ended up pulling on another ball of yarn, which bloated up the number of files touched by this patch: I added StandardException to the exception signature of a method in the string datatypes. This percolated throughout the SQL interpreter, adding StandardException to the signatures of many methods. I debated swallowing the exception lower down and reporting it in the log. However, after some thought I decided that the changed methods all deserved to throw StandardException and should have done so from the start.&lt;/p&gt;

&lt;p&gt;In implementing syscs_create_user() I faced the problem that the implementing method phrases its password arg as a char[] array rather than a String. In order to get around the method resolution problems, I introduced a new, internal SQLPassword type. This type is not available and is mostly invisible to Derby users. SQLPassword has the following behavior:&lt;/p&gt;

&lt;p&gt;1) It appears in DatabaseMetaData.getProcedureColumns() as a VARCHAR type.&lt;/p&gt;

&lt;p&gt;2) But its corresponding Java type is char[] rather than String.&lt;/p&gt;

&lt;p&gt;3) When the SQL interpreter sees a SQLPassword, it treats the contents as a password which needs to be smudged out as soon as possible.&lt;/p&gt;

&lt;p&gt;4) I have found one place where knowledge of this internal type leaks out to users: If you select the aliasinfo of the syscs_create_user() procedure and then call the toString() method on that aliasinfo, you will see that the password arg has type PASSWORD rather than VARCHAR.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/TypeId.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataType.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/StringDataValue.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/types/SQLPassword.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLChar.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLVarchar.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/types/TypesImplInstanceGetter.java&lt;/p&gt;

&lt;p&gt;Support for new internal SQLPassword datatype.&lt;/p&gt;


&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Support for new system procedures syscs_create_user() and syscs_drop_user().&lt;/p&gt;


&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;New error message.&lt;/p&gt;


&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/GenericParameter.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ValueRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/IndexValueRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RowUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RIBulkChecker.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/Activation.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/execute/ExecRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLRef.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/XML.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java&lt;/p&gt;

&lt;p&gt;SQLException percolation across method signatures. Mostly these are trivial changes. The change to EmbedPreparedStatement looks big but it just involves wrapping the existing code in a try/catch block in order to transform the StandardException into a SQLException.&lt;/p&gt;


&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java&lt;/p&gt;

&lt;p&gt;Regression and upgrade tests for new system procedures.&lt;/p&gt;</comment>
                            <comment id="13172355" author="rhillegas" created="Mon, 19 Dec 2011 15:50:18 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-02-ag-createDropUser.diff at subversion revision 1220807.&lt;/p&gt;</comment>
                            <comment id="13172380" author="rhillegas" created="Mon, 19 Dec 2011 16:26:34 +0000"  >&lt;p&gt;Fixed javadoc problem introduced by previous submission: revision 1220828.&lt;/p&gt;</comment>
                            <comment id="13172396" author="knutanders" created="Mon, 19 Dec 2011 16:54:49 +0000"  >&lt;p&gt;I have some questions about the getRawDataAndZeroIt() method in SQLChar:&lt;/p&gt;

&lt;p&gt;1) Could this code&lt;/p&gt;

&lt;p&gt;    char[]  sourceValue = (rawData ==  null) ? getCharArray() : rawData;&lt;/p&gt;

&lt;p&gt;be replaced with&lt;/p&gt;

&lt;p&gt;    char[] sourceValue = getCharArray();&lt;/p&gt;

&lt;p&gt;? It looks to me as if getCharArray() already has a special case for returning rawData directly if it has one.&lt;/p&gt;

&lt;p&gt;2) Would it be better to use getLength() instead of sourceValue.length to get the length of the value? I don&apos;t think those two values are guaranteed to be equal (see for example the comment in readExternalFromArray()), and if they are not equal, I think code like this might end up returning a different (zero-padded) value instead of a clone:&lt;/p&gt;

&lt;p&gt;    public DataValueDescriptor cloneValue(boolean forceMaterialization)&lt;br/&gt;
        throws StandardException&lt;/p&gt;
	{
        return new SQLPassword( getRawDataAndZeroIt() );
	}

&lt;p&gt;3) It calls Arrays.fill( sourceValue, (char) 0 ) right before calling setAndZeroOldValue(). Isn&apos;t that redundant, since calling zeroRawData() is the first thing setAndZeroOldValue() does?&lt;/p&gt;

&lt;p&gt;4) If the value comes from a stream, the call to getCharArray() will create the char array by going via string representation (it calls getString()). Perhaps the stream case should be moved from getString() to getCharArray() to prevent this unnecessary intermediate representation?&lt;/p&gt;</comment>
                            <comment id="13172583" author="rhillegas" created="Mon, 19 Dec 2011 20:26:21 +0000"  >&lt;p&gt;Thanks for looking at the implementation of SQLPassword, Knut. I think there may be some de-serialization issues here as you note. I will try to do something smarter in a follow-on patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="13173283" author="rhillegas" created="Tue, 20 Dec 2011 16:22:50 +0000"  >&lt;p&gt;Attaching derby-866-03-aa-resetModifyPassword.diff. This patch adds the syscs_reset_password() and syscs_modify_password() system procedures. I am running tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/SYSUSERSRowFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Add new procedures.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java&lt;/p&gt;

&lt;p&gt;Add test cases for new procedures.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;Add upgrade sanity check for new procedures.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/CleanDatabaseTestSetup.java&lt;/p&gt;

&lt;p&gt;Make test cleanup handle the fact that the credentials for the DBO can&apos;t be dropped.&lt;/p&gt;</comment>
                            <comment id="13173327" author="rhillegas" created="Tue, 20 Dec 2011 17:23:46 +0000"  >&lt;p&gt;Attaching version 3 of the functional spec. This version incorporates feedback gathered over the past two weeks:&lt;/p&gt;

&lt;p&gt;1) Introduces a new value for derby.authentication.provider. When this property is set to the value NATIVE:$credentialsDB:LOCAL, then $credentialsDB is used to authenticate system-wide operations but connections to an individual database are authenticated using credentials stored in its own SYSUSERS table.&lt;/p&gt;

&lt;p&gt;2) Fills in the section on Documentation changes.&lt;/p&gt;

&lt;p&gt;3) Adds an appendix of sample use cases. This may help people reason about whether the most likely scenarios will be easy to administer. This section may provide a helpful summary for people who don&apos;t have time to read the whole spec.&lt;/p&gt;</comment>
                            <comment id="13173408" author="rhillegas" created="Tue, 20 Dec 2011 18:49:06 +0000"  >&lt;p&gt;Tests ran cleanly for me except for diffs in a couple tests caused by the fact that the new syscs_modify_password() procedure grants EXECUTE privilege to PUBLIC. That in turn adds a new tuple to SYSROUTINEPERMS, causing some tests to fail when they select from that catalog.&lt;/p&gt;

&lt;p&gt;Attaching derby-866-03-ab-resetModifyPassword.diff. This patch corrects GrantRevokeDDLTest to account for the extra row in SYSROUTINEPERMS. I will fix some other tests in a follow-on patch.&lt;/p&gt;

&lt;p&gt;Touches another file in addition to the files touched by the previous rev of the patch:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 1221423.&lt;/p&gt;</comment>
                            <comment id="13173423" author="rhillegas" created="Tue, 20 Dec 2011 19:00:16 +0000"  >&lt;p&gt;Attaching derby-866-04-aa-fixRolesTest.diff. This adjusts RolesTest to account for the new tuple in SYSROUTINEPERMS. Committed at subversion revision 1221434.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java&lt;/p&gt;</comment>
                            <comment id="13173458" author="rhillegas" created="Tue, 20 Dec 2011 19:36:54 +0000"  >&lt;p&gt;Attaching derby-866-05-aa-grantRevoke.diff. This patch verifies that EXECUTE privilege can be granted and revoked on the new system procedures. Committed at subversion revision 1221456.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java&lt;/p&gt;</comment>
                            <comment id="13174110" author="rhillegas" created="Wed, 21 Dec 2011 14:04:46 +0000"  >&lt;p&gt;Attaching derby-866-06-aa-upgradeFrom10.1.diff. This patch fixes another regression test which hard-codes the EXECUTE permissions granted on system routines: when testing the hard-upgrade path from 10.1, we verify the tuples in SYS.SYSROUTINEPERMS. This was found by the tinderbox tests after checking in derby-866-03-aa-resetModifyPassword.diff. Committed at subversion revision 1221734.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_2.java&lt;/p&gt;</comment>
                            <comment id="13174352" author="rhillegas" created="Wed, 21 Dec 2011 19:41:53 +0000"  >&lt;p&gt;Attaching derby-866-07-aa-removeSQLPassword.diff. This backs out the addition of the SQLPassword internal datatype. I am running regression tests now.&lt;/p&gt;

&lt;p&gt;I have been thinking more about the problem which SQLPassword tries to tackle: password Strings are vulnerable to being sniffed in memory, in swap files, and in crash dumps. I have been reading more about the issue and I have come to the conclusion that char[] representations narrow the vulnerability but do not eliminate it. In addition, password maintenance is a rare event compared to the day-to-day event of logging in. As long as JDBC login uses String passwords, I don&apos;t see much value in securing password maintenance. The small security boost does not justify the extra complexity of a new, internal-only data type. I am therefore removing SQLPassword.&lt;/p&gt;

&lt;p&gt;This patch backs out much of derby-866-02-ag-createDropUser.diff (subversion revision 1220807).&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/compile/SQLToJavaValueNode.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/TypeCompilerFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/compile/CharTypeCompiler.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericParameter.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/ValueRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/IndexValueRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/CardinalityCounter.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RowUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/RIBulkChecker.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/execute/BasicSortObserver.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericParameterValueSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/GenericActivationHolder.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/services/daemon/IndexStatisticsDaemonImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/Activation.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/execute/ExecRow.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/ParameterValueSet.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/TypeId.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataTypeDescriptor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataType.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLRef.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/StringDataValue.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/XML.java&lt;br/&gt;
D       java/engine/org/apache/derby/iapi/types/SQLPassword.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLChar.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/SQLVarchar.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/types/DataValueFactory.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/types/BaseTypeIdImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/types/TypesImplInstanceGetter.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/unitTests/store/T_AccessRow.java&lt;/p&gt;</comment>
                            <comment id="13174792" author="rhillegas" created="Thu, 22 Dec 2011 13:16:51 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-07-aa-removeSQLPassword.diff at subversion revision 1222215.&lt;/p&gt;</comment>
                            <comment id="13175509" author="rhillegas" created="Fri, 23 Dec 2011 17:28:56 +0000"  >&lt;p&gt;Attaching derby-866-08-aa-passwordHasher.diff.  This patch wires the NATIVE procedures to the new password hashing scheme which Knut introduced with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5539&quot; title=&quot;Harden password hashing in the builtin authentication service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5539&quot;&gt;&lt;del&gt;DERBY-5539&lt;/del&gt;&lt;/a&gt;. I am running tests now.&lt;/p&gt;

&lt;p&gt;The patch abstracts the post-10.5 password hashing logic into a new class, PasswordHasher. The logic is now used by the SQL layer as well as the authentication code in the JDBC layer. So I put PasswordHasher in the lower layer. More specifically, I put PasswordHasher in the DataDictionary because authentication code was already calling into the DataDictionary in order to configure password hashing. But other people may have ideas about a better place to park this code--your thoughts are of course welcome.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/BasicAuthenticationServiceImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
A       java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java&lt;/p&gt;

&lt;p&gt;Abstracts the password hashing code into a PasswordHasher class which lives in the DataDictionary.&lt;/p&gt;


&lt;p&gt;---------&lt;/p&gt;


&lt;p&gt;M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Wires the PasswordHasher into syscs_create_user, syscs_modify_password, and syscs_reset_password.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java&lt;/p&gt;

&lt;p&gt;Adds new tests to verify that the NATIVE hashing scheme changes as expected when you tune the BUILTIN knobs which control password hashing.&lt;/p&gt;</comment>
                            <comment id="13175539" author="rhillegas" created="Fri, 23 Dec 2011 18:56:04 +0000"  >&lt;p&gt;Attaching derby-866-08-ab-passwordHasher.diff. The previous patch disabled the case when derby.authentication.builtin.algorithm is not set. In that situation, Derby is supposed to default to a SHA-1 message digest. This second rev of the patch seeks to restore the old behavior. Running tests again...&lt;/p&gt;</comment>
                            <comment id="13175582" author="rhillegas" created="Fri, 23 Dec 2011 21:16:36 +0000"  >&lt;p&gt;Tests passed cleanly except for an error in the newly added tests for NATIVE procs. I need to add some defensive logic to protect against the condition when derby.authentication.builtin.algorithm is deliberately unset.&lt;/p&gt;</comment>
                            <comment id="13178333" author="knutanders" created="Mon, 2 Jan 2012 10:05:22 +0000"  >&lt;p&gt;The changes look fine to me. I noticed that the hashingscheme column contains the hashing scheme identifier, the salt and the name of the hash function. These parameters are also stored in the password column. I&apos;m not sure exactly what the hashingscheme column will be used for, but the salt will make every user have a unique value in hashingscheme, and I think I&apos;d expect every user that hashed the password using the same algorithm to have the same value in that column.&lt;/p&gt;</comment>
                            <comment id="13178773" author="rhillegas" created="Tue, 3 Jan 2012 15:24:21 +0000"  >&lt;p&gt;Thanks for looking at the patch, Knut. I&apos;m not understanding the problem you have found with it. I tried to separate the hashed result from the inputs to the hashing algorithm. For BUILTIN passwords, the inputs continue to be concatenated with the hashed password. However, for NATIVE authentication, the inputs are stored in SYSUSERS.HASHINGSCHEME and the hashed result is stored in SYSUSERS.PASSWORD. The inputs should not be concatenated to the result in SYSUSERS.PASSWORD. If they are, I have indeed made a mistake. The idea is that when verifying a NATIVE password, we will perform the following steps:&lt;/p&gt;

&lt;p&gt;1) The connecting user supplies a username and password.&lt;/p&gt;

&lt;p&gt;2) Derby keys into SYSUSERS using the supplied username and looks up the corresponding HASHINGSCHEME inputs and PASSWORD result.&lt;/p&gt;

&lt;p&gt;3) Derby constructs a PasswordHasher from the inputs encoded in HASHINGSCHEME.&lt;/p&gt;

&lt;p&gt;4) Then Derby runs the supplied username and password through the PasswordHasher to produce a candidate hashed password.&lt;/p&gt;

&lt;p&gt;5) Derby compares the candidate hashed password to the PASSWORD retrieved in step (2). If they are identical, then authentication succeeds.&lt;/p&gt;

&lt;p&gt;The following script output seems to verify to me that the NATIVE hashed PASSWORD does not contain the inputs to the hashing algorithm, unlike the BUILTIN analog. Does this help clear up the confusion or do you still see a problem here? Thanks.&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:memory:db;create=true;user=test_dbo;password=test_dbopassword&apos;;&lt;br/&gt;
ij&amp;gt; call syscs_util.syscs_create_user( &apos;TEST_DBO&apos;, &apos;test_dbopassword&apos; );&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; call syscs_util.syscs_set_database_property( &apos;derby.user.TEST_DBO&apos;, &apos;test_dbopassword&apos; );&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select hashingscheme, password from sys.sysusers;&lt;br/&gt;
HASHINGSCHEME                                                                                                                   |PASSWORD                                                                                                                        &lt;br/&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
3b62:07751aa502a988a6b604d3865997a0e9:1000:SHA-256                                                                              |dc0bfe6c3f705699cb6ff0ad7bf0ee815ab818cac3e8bd65851cdeab3c9b8faf                                                                &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; values syscs_util.syscs_get_database_property( &apos;derby.user.TEST_DBO&apos; );&lt;br/&gt;
1                                                                                                                               &lt;br/&gt;
--------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
3b62412e6e60e4e47c6aa6fcdc61a168ef737b99ec5c479b171934355f11536dbdf9:442941b76338dfc6e5cf2daa31b5b062:1000:SHA-256              &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; select length( hashingscheme ), length( password ) from sys.sysusers;&lt;br/&gt;
1          |2          &lt;br/&gt;
-----------------------&lt;br/&gt;
50         |64         &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; values length( syscs_util.syscs_get_database_property( &apos;derby.user.TEST_DBO&apos; ) );&lt;br/&gt;
1          &lt;br/&gt;
-----------&lt;br/&gt;
114        &lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;</comment>
                            <comment id="13178797" author="knutanders" created="Tue, 3 Jan 2012 16:09:05 +0000"  >&lt;p&gt;You&apos;re right, I misread the patch. The behaviour described above sounds fine. Sorry about the noise.&lt;/p&gt;</comment>
                            <comment id="13179016" author="rhillegas" created="Tue, 3 Jan 2012 21:00:35 +0000"  >&lt;p&gt;Attaching derby-866-08-ad-passwordHasher.diff. This rev of the patch stops users from manipulating NATIVE passwords when derby.authentication.builtin.algorithm is not set. If derby.authentication.builtin.algorithm is not set, then Derby&apos;s old-style default password hashing strategy is considered too weak for use by NATIVE authentication. Tests passed cleanly for me with this version of the patch.&lt;/p&gt;

&lt;p&gt;I do not see much point in further complicating the logic to allow the use of weak hashing with NATIVE authentication. Of course, we could change the meaning of derby.authentication.builtin.algorithm=null when NATIVE authentication is enabled. However, that seems more confusing to me than just forbidding the use of weak hashing altogether.&lt;/p&gt;

&lt;p&gt;The functional spec should be updated to reflect this change.&lt;/p&gt;

&lt;p&gt;This version of the patch touches the same files as the previous version plus the following:&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New message raised if the user attempts to manipulate a NATIVE password when derby.authentication.builtin.algorithm is not set.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;The 10.9 upgrade tests now set derby.authentication.builtin.algorithm if it is not set already. This allows us to test the new NATIVE procedures in databases which were hard-upgraded from Derby versions which did not recognize this property.&lt;/p&gt;</comment>
                            <comment id="13179112" author="knutanders" created="Tue, 3 Jan 2012 23:09:20 +0000"  >&lt;p&gt;The simpler logic sounds easier to explain and makes the most sense, I agree. Since derby.authentication.builtin.algorithm gets set to a non-null value at database creation time, its being null means that the DBA has deliberately chosen the old (broken) hashing scheme, and it makes perfect sense to refuse that in NATIVE. There&apos;s one small bump, and that is that databases upgraded from 10.5 and earlier won&apos;t have the derby.authentication.builtin.algorithm property set, so there&apos;s one extra step needed to enable NATIVE in such databases.&lt;/p&gt;</comment>
                            <comment id="13179472" author="rhillegas" created="Wed, 4 Jan 2012 13:31:50 +0000"  >&lt;p&gt;Thanks, Knut. I think we should mention the upgrade issue in the release note for NATIVE authentication. Checked in derby-866-08-ad-passwordHasher.diff at subversion revision 1227150.&lt;/p&gt;</comment>
                            <comment id="13185134" author="rhillegas" created="Thu, 12 Jan 2012 18:40:51 +0000"  >&lt;p&gt;Attaching derby-866-09-ad-nativeAuthenticationService.diff. This is the first rev of a patch which adds a NATIVE authentication service to Derby. Regression tests passed cleanly for me. The patch also passes a battery of ad-hoc tests, but I have not yet collected them into a formal regression test for this new functionality. So the patch is not ready for commit. I am posting the patch now in order to get feedback on whether this approach seems reasonable.&lt;/p&gt;

&lt;p&gt;The new authentication service follows the pattern of the existing BASIC authentication service (BasicAuthenticationServiceImpl). I did not add support for network password substitution but it may be possible to add that in a later patch.&lt;/p&gt;

&lt;p&gt;I have taken the approach of normalizing the user name as a SQL identifier when storing credentials at database-creation time. This causes the values in SYSSCHEMAS.AUTHORIZATIONID and SYSUSERS.USERNAME to agree, making it possible to join on those columns. The user name is also normalized at connection-authorization time. I haven&apos;t thought through the implications of whether syscs_create_user, syscs_reset_password, and syscs_drop_user should also normalize the username. Your opinions are welcome. Perhaps a clear preference will emerge as I write more tests.&lt;/p&gt;

&lt;p&gt;Ad-hoc tests have verified the following behavior (at least in simple configurations):&lt;/p&gt;

&lt;p&gt;1) Creating a credentials DB. The initial credentials are automatically stored in SYSUSERS and the following properties are persisted:&lt;/p&gt;

&lt;p&gt;    derby.database.sqlAuthorization=true&lt;br/&gt;
    derby.authentication.provider=NATIVE::LOCAL&lt;/p&gt;

&lt;p&gt;2) Creating a non-credentials DB, using the credentials DB to authorize the operation.&lt;/p&gt;

&lt;p&gt;3) Shutting down a credentials DB and restarting it.&lt;/p&gt;

&lt;p&gt;4) Trying to create a database with credentials which are not stored in the credentials DB. This operation fails as expected.&lt;/p&gt;

&lt;p&gt;5) Trying to connect to an existing database with credentials which are not stored in the credentials DB. This operation fails as expected.&lt;/p&gt;

&lt;p&gt;6) Verifying that the following system property setting is sufficient to turn on authentication and SQL authorization:&lt;/p&gt;

&lt;p&gt;    derby.authentication.provider=NATIVE:$credentialsDB:LOCAL&lt;/p&gt;

&lt;p&gt;    or&lt;/p&gt;

&lt;p&gt;    derby.authentication.provider=NATIVE:$credentialsDB&lt;/p&gt;

&lt;p&gt;That is, there is no need to also set the following properties:&lt;/p&gt;

&lt;p&gt;   derby.connection.requireAuthentication=true&lt;br/&gt;
   derby.database.sqlAuthorization=true&lt;/p&gt;

&lt;p&gt;7) Verifying that a credentials DB remembers that it is a credentials DB. When you reboot it, the connection is authenticated using credentials stored in the local SYSUSERS table.&lt;/p&gt;

&lt;p&gt;Tests have been run on disk-based and in-memory databases and on desktop and JSR169 platforms.&lt;/p&gt;

&lt;p&gt;I will start assembling a regression test out of the above cases. Even if my approach needs to be reworked, these tests are a low-bar for any implementation.&lt;/p&gt;

&lt;p&gt;I know that code has not yet been written to support the following features:&lt;/p&gt;

&lt;p&gt;i) Prevent NATIVE authentication from being enabled in a pre-existing database which lacks credentials for the DBO.&lt;/p&gt;

&lt;p&gt;ii) Enable password substitution over the network.&lt;/p&gt;

&lt;p&gt;Many more tests need to be written. In addition, more code may need to be written in order to implement the full functional spec. At a minimum, the following behaviors need to be verified and perhaps coded:&lt;/p&gt;

&lt;p&gt;A) Once a credentials database is created, NATIVE authentication cannot be disabled for that database.&lt;/p&gt;

&lt;p&gt;B) Similarly, SQL authorization cannot be disabled for a credentials DB.&lt;/p&gt;

&lt;p&gt;C) Upgrade paths have not been tested.&lt;/p&gt;

&lt;p&gt;D) No testing has been done with databases which are accessed via jar files, the classpath, or http/https URLs.&lt;/p&gt;

&lt;p&gt;E) No testing has been done over the network.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;/p&gt;

&lt;p&gt;Add a method to retrieve a user&apos;s stored credentials. Also added db creation logic to turn on SQL authorization when NATIVE authentication is enabled.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/services/monitor/ModuleFactory.java&lt;/p&gt;

&lt;p&gt;Added a new method which makes it possible for code outside the Store to calculate the canonicalized form of a database name. This is necessary in order to figure out whether the local database is the credentials DB identified by the derby.authentication.provider property.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/reference/Property.java&lt;/p&gt;

&lt;p&gt;Added code so that logic outside the Authentication module can figure out whether NATIVE and NATIVE::LOCAL authentication are enabled.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/SpecificAuthenticationServiceImpl.java&lt;br/&gt;
A       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/jdbc/AuthenticationService.java&lt;br/&gt;
M       java/engine/org/apache/derby/modules.properties&lt;/p&gt;

&lt;p&gt;The NATIVE authentication service.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Refactored some code so that the DBO&apos;s credentials can be stored at database creation time.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;/p&gt;

&lt;p&gt;Added bootstrapping logic to skip NATIVE authentication when the system-wide credentials DB is being created.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages.&lt;/p&gt;</comment>
                            <comment id="13188696" author="rhillegas" created="Wed, 18 Jan 2012 20:57:10 +0000"  >&lt;p&gt;Attaching derby-866-09-ae-nativeAuthenticationServiceWithTests.diff. This adds a first batch of tests to the previous rev of the patch. The new tests pass for me on my desktop and on a JSR169 platform.&lt;/p&gt;

&lt;p&gt;The full regression tests also passed for me except for an error in ErrorMessageTest. ErrorMessageTest ran fine for me standalone. The error may relate to recent work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5564&quot; title=&quot;Code does different things depending if derby.locks.deadlockTrace=true is set&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5564&quot;&gt;&lt;del&gt;DERBY-5564&lt;/del&gt;&lt;/a&gt;? Details at the end of this comment. &lt;/p&gt;

&lt;p&gt;The new tests stress the following configurations for both embedded and client/server: no authentication, NATIVE authentication, NATIVE+LOCAL authentication. That&apos;s a total of 6 configurations.&lt;/p&gt;

&lt;p&gt;Some test framework methods had to be changed to account for the fact that there&apos;s a new authentication failure message raised when the credentials db doesn&apos;t exist yet. Also SystemPropertyTestSetup now shuts down the engine BEFORE changing the properties, rather than vice-versa. Doing those operations in the original order fails if the property you are setting is the one which enables NATIVE authentication. This is because engine shutdown is an operation which must be authenticated and it can&apos;t be authenticated by the NATIVE machinery if the credentials database hasn&apos;t been created yet.&lt;/p&gt;

&lt;p&gt;Touches the following files in addition to the files touched by the previous rev of the patch:&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DatabaseChangeSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java&lt;/p&gt;

&lt;p&gt;---------------------------------&lt;/p&gt;

&lt;p&gt;Here is the error I saw in ErrorMessageTest:&lt;/p&gt;

&lt;p&gt;There was 1 failure:&lt;br/&gt;
1) testDeadlockTimeout(org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest)junit.framework.ComparisonFailure: Not a deadlock expected:&amp;lt;40&lt;span class=&quot;error&quot;&gt;&amp;#91;00&amp;#93;&lt;/span&gt;1&amp;gt; but was:&amp;lt;40&lt;span class=&quot;error&quot;&gt;&amp;#91;XL&amp;#93;&lt;/span&gt;1&amp;gt;&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:790)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testDeadlockTimeout(ErrorMessageTest.java:171)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:116)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
Caused by: java.sql.SQLTransactionRollbackException: A lock could not be obtained within the time requested.  The lockTable dump is: &lt;br/&gt;
Wed Jan 18 11:51:46 PST 2012&lt;br/&gt;
XID       |TYPE         |MODE|LOCKCOUNT|LOCKNAME                                                                        |STATE|TABLETYPE / LOCKOBJ                   |INDEXNAME / CONTAINER_ID / (MODE for LATCH only)  |TABLENAME / CONGLOM_ID                |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;The following row is the victim ***&lt;br/&gt;
333883    |ROW          |S   |0        |(1,7)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;/li&gt;
			&lt;li&gt;The above row is the victim ***&lt;br/&gt;
333883    |ROW          |X   |3        |(1,8)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |S   |0        |(1,8)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |X   |3        |(1,7)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:89)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2331)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(EmbedResultSet.java:4406)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:472)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:376)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertDrainResults(JDBC.java:678)&lt;br/&gt;
	at org.apache.derbyTesting.junit.JDBC.assertDrainResults(JDBC.java:655)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest$2.run(ErrorMessageTest.java:148)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:680)&lt;br/&gt;
Caused by: java.sql.SQLException: A lock could not be obtained within the time requested.  The lockTable dump is: &lt;br/&gt;
Wed Jan 18 11:51:46 PST 2012&lt;br/&gt;
XID       |TYPE         |MODE|LOCKCOUNT|LOCKNAME                                                                        |STATE|TABLETYPE / LOCKOBJ                   |INDEXNAME / CONTAINER_ID / (MODE for LATCH only)  |TABLENAME / CONGLOM_ID                |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;The following row is the victim ***&lt;br/&gt;
333883    |ROW          |S   |0        |(1,7)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;/li&gt;
			&lt;li&gt;The above row is the victim ***&lt;br/&gt;
333883    |ROW          |X   |3        |(1,8)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |S   |0        |(1,8)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |X   |3        |(1,7)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	... 12 more&lt;br/&gt;
Caused by: ERROR 40XL1: A lock could not be obtained within the time requested.  The lockTable dump is: &lt;br/&gt;
Wed Jan 18 11:51:46 PST 2012&lt;br/&gt;
XID       |TYPE         |MODE|LOCKCOUNT|LOCKNAME                                                                        |STATE|TABLETYPE / LOCKOBJ                   |INDEXNAME / CONTAINER_ID / (MODE for LATCH only)  |TABLENAME / CONGLOM_ID                |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;The following row is the victim ***&lt;br/&gt;
333883    |ROW          |S   |0        |(1,7)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;/li&gt;
			&lt;li&gt;The above row is the victim ***&lt;br/&gt;
333883    |ROW          |X   |3        |(1,8)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |S   |0        |(1,8)                                                                           |WAIT |T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IX  |2        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333883    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |TABLE        |IS  |1        |Tablelock                                                                       |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
333879    |ROW          |X   |3        |(1,7)                                                                           |GRANT|T                                     |NULL                                              |T                                     |&lt;br/&gt;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.Timeout.createException(Timeout.java:147)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.Timeout.buildException(Timeout.java:246)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(ConcurrentLockSet.java:613)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.AbstractPool.lockObject(AbstractPool.java:119)&lt;br/&gt;
	at org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(ConcurrentPool.java:28)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(RowLocking2.java:165)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:520)&lt;br/&gt;
	at org.apache.derby.impl.store.access.heap.HeapController.lockRow(HeapController.java:638)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(B2IRowLocking3.java:309)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(B2IRowLocking3.java:599)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(B2IRowLockingRR.java:105)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:305)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1599)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore(TableScanResultSet.java:577)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore(IndexRowToBaseRowResultSet.java:373)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:478)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:432)&lt;br/&gt;
	... 5 more&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 11906,  Failures: 1,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="13189113" author="rhillegas" created="Thu, 19 Jan 2012 13:52:12 +0000"  >&lt;p&gt;Committed derby-866-09-ae-nativeAuthenticationServiceWithTests.diff at subversion revision 1233377.&lt;/p&gt;</comment>
                            <comment id="13192354" author="rhillegas" created="Tue, 24 Jan 2012 18:42:58 +0000"  >&lt;p&gt;Attaching derby-866-10-ac-propChanging.diff. This patch adds logic to govern the on-disk setting of the derby.authentication.provider property. Tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;This patch makes the following changes:&lt;/p&gt;

&lt;p&gt;1) Prevents an existing database from being set to NATIVE LOCAL authentication if the DBO&apos;s credentials haven&apos;t been stored.&lt;/p&gt;

&lt;p&gt;2) Prevents derby.authentication.provider from being set on disk to any NATIVE value other than NATIVE::LOCAL.&lt;/p&gt;

&lt;p&gt;3) Prevents NATIVE LOCAL authentication from being turned off or overridden once it has been turned on.&lt;/p&gt;

&lt;p&gt;4) No longer sets derby.database.sqlAuthorization=true when creating a credentials DB. Instead, the database figures out whether SQL authorization is on based on whether derby.database.sqlAuthorization is set or NATIVE authentication is on.&lt;/p&gt;

&lt;p&gt;Touches the following files&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java&lt;/p&gt;

&lt;p&gt;If NATIVE authentication is set on-disk, then this trumps all other settings of derby.authentication.provider.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;/p&gt;

&lt;p&gt;Removes the transaction argument from DataDictionary.getUser(). The argument was not used.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Don&apos;t set derby.database.sqlAuthorization on disk when creating a credentials DB. Instead, determine whether SQL authorization is on by consulting both derby.database.sqlAuthorization and derby.authentication.provider.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message raised on bad attempts to set derby.authentication.provider on disk.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DatabaseChangeSetup.java&lt;/p&gt;

&lt;p&gt;Logic to shutdown a single-use database as part of a test.&lt;/p&gt;

&lt;p&gt;-----------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;New tests to verify the functionality added by this patch.&lt;/p&gt;</comment>
                            <comment id="13193052" author="rhillegas" created="Wed, 25 Jan 2012 14:14:33 +0000"  >&lt;p&gt;Committed derby-866-10-ac-propChanging.diff at subversion revision 1235750.&lt;/p&gt;</comment>
                            <comment id="13194051" author="rhillegas" created="Thu, 26 Jan 2012 18:26:14 +0000"  >&lt;p&gt;Attaching derby-866-11-aa-upgradeTest.diff. This patch adds a check to prevent you from trying to read a user&apos;s credentials in a database which hasn&apos;t been upgraded to 10.9, that is, a database which doesn&apos;t even have a SYSUSERS table. The patch adds another upgrade test to verify that you can&apos;t enable NATIVE LOCAL authentication in a soft-upgraded database. Committed at subversion revision 1236340.&lt;/p&gt;

&lt;p&gt;I have run the upgrade suite against the following starting versions:&lt;/p&gt;

&lt;p&gt;10.1.3.1&lt;br/&gt;
10.2.2.1&lt;br/&gt;
10.3.3.0&lt;br/&gt;
10.4.2.1&lt;br/&gt;
10.5.3.0&lt;br/&gt;
10.6.2.1&lt;br/&gt;
10.7.1.1&lt;br/&gt;
10.8.2.2&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Prevents code from calling DataDictionary.getUser() until the database has been hard-upgraded to 10.9.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;New upgrade test.&lt;/p&gt;</comment>
                            <comment id="13196963" author="rhillegas" created="Tue, 31 Jan 2012 15:05:24 +0000"  >&lt;p&gt;I committed derby-866-11-aa-upgradeTest.diff on 2012-01-26 at subversion revision 1236340.&lt;/p&gt;</comment>
                            <comment id="13196964" author="rhillegas" created="Tue, 31 Jan 2012 15:07:48 +0000"  >&lt;p&gt;Attaching derby-866-12-ac-passwordExpiration.diff. This patch adds password expiration. I am running the regression tests now.&lt;/p&gt;

&lt;p&gt;This patch adds 2 new Derby knobs:&lt;/p&gt;

&lt;p&gt;1) derby.authentication.native.passwordLifetimeMillis - This is the maximum time (in milliseconds) that a NATIVE password remains valid. If more than this time has expired since a password was updated, then the user can&apos;t log in. A special check prevents the DBO&apos;s password from expiring. This property defaults to be 31 days.&lt;/p&gt;

&lt;p&gt;2) derby.authentication.native.passwordLifetimeThreshold - This is the threshold (expressed as a double) for triggering a warning that a password is about to expire. This property defaults to be 0.125 (i.e. 1/8 the maximum password lifetime). This is a new property not described by the current functional spec. I will add a description to the spec.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;/p&gt;

&lt;p&gt;Adds a warning at connection time if a password is about to expire. Flunks authentication if the password has expired.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/AuthenticationServiceBase.java&lt;/p&gt;

&lt;p&gt;Adds logic to prevent the new properties from being set to bad values.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/iapi/reference/Property.java&lt;/p&gt;

&lt;p&gt;The new properties.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error messages.&lt;/p&gt;

&lt;p&gt;------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;New tests.&lt;/p&gt;</comment>
                            <comment id="13196977" author="rhillegas" created="Tue, 31 Jan 2012 15:26:19 +0000"  >&lt;p&gt;Attaching rev 5 of the functional spec for this feature. This version makes the following changes:&lt;/p&gt;

&lt;p&gt;1)    Documents how the password hashing properties affect NATIVE passwords.&lt;br/&gt;
2)    Documents that you CAN&apos;T connect to un-upgraded databases when NATIVE authentication is on.&lt;br/&gt;
3)    Changes the threshold for password-expiration warnings to be 1/8 the length of the maximum password lifetime. This can be configured via the derby.authentication.native.passwordLifetimeThreshold property.&lt;br/&gt;
4)    Clarifies that the password of the DBO of a Credentials DB never expires.&lt;/p&gt;</comment>
                            <comment id="13197068" author="rhillegas" created="Tue, 31 Jan 2012 18:15:02 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-12-ac-passwordExpiration.diff at subversion revision 1238727.&lt;/p&gt;</comment>
                            <comment id="13197081" author="rhillegas" created="Tue, 31 Jan 2012 18:24:51 +0000"  >&lt;p&gt;I have returned to the topic of implementing network password substitution for NATIVE authentication. I do not believe this is possible.&lt;/p&gt;

&lt;p&gt;NATIVE authentication only works if passwords are hashed by a strong algorithm specified by the derby.authentication.builtin.algorithm property. But password substitution is not possible with these strong algorithms, according to the &quot;Network client security&quot; section of the Admin Guide, and according to the 10.6.1.0 release note accompanying the work on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4483&quot; title=&quot;Provide a way to change the hash algorithm used by BUILTIN authentication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4483&quot;&gt;&lt;del&gt;DERBY-4483&lt;/del&gt;&lt;/a&gt; (see &lt;a href=&quot;http://db.apache.org/derby/releases/release-10.6.1.0.html#Note+for+DERBY-4483&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/releases/release-10.6.1.0.html#Note+for+DERBY-4483&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;This makes sense. For password substitution to work with strong algorithms, the network handshake would have to give the client the details about how the password is hashed on disk at the server end--those details would have to be transmitted BEFORE the substitute password is computed by the client. I am not aware of any such negotiation in the Derby network protocol.&lt;/p&gt;

&lt;p&gt;NATIVE passwords transmitted over the wire must be secured the same way that BUILTIN passwords are secured after the fix to CVE-2009-4269:&lt;/p&gt;

&lt;p&gt;1) Both ends of the connection must use a capable JCE which handles the 256 bit primes needed by ClientDataSource.ENCRYPTED_USER_AND_PASSWORD_SECURITY.&lt;/p&gt;

&lt;p&gt;2) Or the entire network traffic must be encrypted with SSL/TLS.&lt;/p&gt;</comment>
                            <comment id="13199315" author="rhillegas" created="Thu, 2 Feb 2012 22:49:14 +0000"  >&lt;p&gt;Attaching derby-866-13-ab-systemWideOperationTests.diff. This adds an additional test to verify that NATIVE authentication operates correctly when restoring a database from a backup. The regression tests pass for me on this patch.&lt;/p&gt;

&lt;p&gt;The existing NATIVE authentication tests cover the following system-wide operations:&lt;/p&gt;

&lt;p&gt;1) Database creation.&lt;/p&gt;

&lt;p&gt;2) Engine shutdown.&lt;/p&gt;

&lt;p&gt;3) Server shutdown. This is hard to see because the decorators wrap the default credentials. But I have traced the server code and verified that the NATIVE authenticator is being called at server shutdown and it is being passed the default credentials.&lt;/p&gt;

&lt;p&gt;This patch adds tests for database restoration.&lt;/p&gt;

&lt;p&gt;Touches the following files&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;The new test. I also reworked the decorators so that the fix for derby-5580 should not be needed anymore. Let me know if that bug resurfaces.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java&lt;/p&gt;

&lt;p&gt;Removed a shutdown check added by a previous patch. It looks unnecessary to me.&lt;/p&gt;</comment>
                            <comment id="13199698" author="rhillegas" created="Fri, 3 Feb 2012 13:25:50 +0000"  >&lt;p&gt;Committed derby-866-13-ab-systemWideOperationTests.diff at subversion revision 1240152.&lt;/p&gt;</comment>
                            <comment id="13201565" author="rhillegas" created="Mon, 6 Feb 2012 20:41:47 +0000"  >&lt;p&gt;Attaching derby-866-14-ad-badNativeSpec.diff. This patch adds some logic to prevent the authentication service from booting if the user specifies NATIVE + LOCAL authentication at the system level. The patch also adds more tests for setting and changing the value of the authentication provider property. The patch also re-enables this test for all platforms except Windows (see the discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5601&quot; title=&quot;Windows hang in NativeAuthenticationServiceTest testAll with prior interrupt error in SecureServerTest and other cascade errors and failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5601&quot;&gt;&lt;del&gt;DERBY-5601&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The functional spec says that derby.authentication.provider=NATIVE::LOCAL is illegal if specified at the system level. That is because this setting does not identify a credentials DB for system-wide operations. This patch enforces that rule. If you attempt this setting at the system level, Derby will refuse to boot.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;/p&gt;

&lt;p&gt;Check for illegal system-wide setting of derby.authentication.provider=NATIVE::LOCAL.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;New tests for settings of derby.authentication.provider.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;Re-enable NativeAuthenticationServiceTest on non-windows platforms.&lt;/p&gt;</comment>
                            <comment id="13201711" author="rhillegas" created="Mon, 6 Feb 2012 22:36:11 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-866-14-ad-badNativeSpec.diff.&lt;/p&gt;</comment>
                            <comment id="13202441" author="rhillegas" created="Tue, 7 Feb 2012 14:52:05 +0000"  >&lt;p&gt;Committed derby-866-14-ad-badNativeSpec.diff at subversion revision 1241479. Among other actions, this patch re-enables NativeAuthenticationServiceTest on non-windows platforms. If the *nix nightly tests fall over again, then we should disable NativeAuthenticationServiceTest again until we understand the situation better.&lt;/p&gt;</comment>
                            <comment id="13208590" author="rhillegas" created="Wed, 15 Feb 2012 17:17:04 +0000"  >&lt;p&gt;Attaching derby-866-15-ae-dbInJarFileOrOnClasspath.diff. This patch adds tests for booting databases which are protected by NATIVE/LOCAL authentication and which are reached via the jar and classpath subprotocols. I will run full regression tests.&lt;/p&gt;

&lt;p&gt;I have successfully run the patched NativeAuthenticationServiceTest on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;br/&gt;
2) Java 6 on XP&lt;br/&gt;
3) Java 5 on XP&lt;br/&gt;
4) OJEC&lt;/p&gt;

&lt;p&gt;To test the subprotocols, I built a new jar file (nast1.jar) containing a test database. The jar file will be checked into the codeline. The patch includes a script and ant targets for regenerating this jar file. The following command regenerates nast1.jar:&lt;/p&gt;

&lt;p&gt;ant -quiet build-test-jars&lt;/p&gt;

&lt;p&gt;I think that we will have to regenerate this jar file when we create the 10.9 release candidate. That is because the jar file I am checking in now was created with an alpha version of Derby; I think that a production version of Derby will refuse to boot it.&lt;/p&gt;

&lt;p&gt;In testing against databases on the classpath, I tripped across a bug involving classpath databases and security managers: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5615&quot; title=&quot;NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication, authorization, and Java security are turned on&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5615&quot;&gt;&lt;del&gt;DERBY-5615&lt;/del&gt;&lt;/a&gt;. Currently, the classpath db test is run only when the security manager is disabled. Once &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5615&quot; title=&quot;NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication, authorization, and Java security are turned on&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5615&quot;&gt;&lt;del&gt;DERBY-5615&lt;/del&gt;&lt;/a&gt; is fixed, we should check to see whether we can re-enable the security manager for the classpath test in this patch. It may be that there are other bugs having to do with classpath dbs and the security manager.&lt;/p&gt;

&lt;p&gt;I also do not run the subprotocol tests on Windows platforms because of another bug I tripped across, having to do with releasing file handles during engine shutdown when databases have been booted from the classpath (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5618&quot; title=&quot;On Windows, orderly engine shutdown does not release the file handle on a jar file containing a database which was booted using the classpath subprotocol&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5618&quot;&gt;&lt;del&gt;DERBY-5618&lt;/del&gt;&lt;/a&gt;). When that bug is fixed, we can revisit NativeAuthenticationServiceTest.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5615&quot; title=&quot;NPE in Store  when running SELECT in a read-only database accessed via the classpath subprotocol when authentication, authorization, and Java security are turned on&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5615&quot;&gt;&lt;del&gt;DERBY-5615&lt;/del&gt;&lt;/a&gt; tripped an NPE in this class. I put in some defensive logic.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast_init.sql&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/build.xml&lt;br/&gt;
A       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast1.jar&lt;br/&gt;
M       build.xml&lt;/p&gt;

&lt;p&gt;Script and ant targets for building a database in a jar file.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;A       java/testing/org/apache/derbyTesting/junit/ClasspathSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/BaseTestCase.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/SupportFilesSetup.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/util/derby_tests.policy&lt;/p&gt;

&lt;p&gt;Support for booting databases in jar files and on the classpath.&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;The actual new test cases.&lt;/p&gt;</comment>
                            <comment id="13208700" author="rhillegas" created="Wed, 15 Feb 2012 19:23:17 +0000"  >&lt;p&gt;Tests passed cleanly for me on derby-866-15-ae-dbInJarFileOrOnClasspath.diff. Committed at subversion revision 1244666.&lt;/p&gt;</comment>
                            <comment id="13209629" author="rhillegas" created="Thu, 16 Feb 2012 19:17:32 +0000"  >&lt;p&gt;Attaching derby-866-16-aa-credDBViaSubprotocol.diff. This patch adds tests for system-wide authentication using a credentials db accessed via the jar and classpath subprotocols.&lt;/p&gt;

&lt;p&gt;The modified NativeAuthenticationServiceTest ran cleanly for me on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;br/&gt;
2) Java 6 on XP&lt;br/&gt;
3) Java 5 on XP&lt;br/&gt;
4) OJEC&lt;/p&gt;

&lt;p&gt;Committed at subversion revision 1245126.&lt;/p&gt;


&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;</comment>
                            <comment id="13210274" author="rhillegas" created="Fri, 17 Feb 2012 13:55:07 +0000"  >&lt;p&gt;Attaching derby-866-17-aa-grantRevokeNative.diff. This patch adds some more tests for granting/revoking EXECUTE permission on the NATIVE procs. Seemed useful to re-test this behavior with NATIVE authentication turned on. Committed at subversion revision 1245451.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;</comment>
                            <comment id="13210298" author="rhillegas" created="Fri, 17 Feb 2012 14:43:04 +0000"  >&lt;p&gt;Attaching rev 6 of the functional spec. This rev clarifies a couple points:&lt;/p&gt;

&lt;p&gt;o    Clarify that if NATIVE authentication is set at the system level, it can still be overridden at the database level using database-only properties.&lt;/p&gt;

&lt;p&gt;o    Clarify that you must shutdown the network server before shutting down the Derby engine when you are using NATIVE authentication.&lt;/p&gt;</comment>
                            <comment id="13210557" author="rhillegas" created="Fri, 17 Feb 2012 20:58:20 +0000"  >&lt;p&gt;Attaching derby-866-18-aa-encryptedCredentialsDB. This patch adds tests for encrypted credentials databases. I need to run full regression tests.&lt;/p&gt;

&lt;p&gt;I have successfully run NativeAuthenticationServiceTest on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;br/&gt;
2) Java 6 on XP&lt;br/&gt;
3) Java 5 on XP&lt;br/&gt;
4) OJEC &lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/TestConfiguration.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/Connector.java&lt;/p&gt;

&lt;p&gt;Added ability to create a test connection with arbitrary properties.&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast_init.sql&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast1.jar&lt;/p&gt;

&lt;p&gt;New test for encrypted credentials databases.&lt;/p&gt;</comment>
                            <comment id="13217225" author="rhillegas" created="Mon, 27 Feb 2012 15:27:16 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-18-aa-encryptedCredentialsDB.diff at subversion revision 1294183.&lt;/p&gt;</comment>
                            <comment id="13217244" author="knutanders" created="Mon, 27 Feb 2012 16:04:52 +0000"  >&lt;p&gt;I recently checked in a fix (as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5539&quot; title=&quot;Harden password hashing in the builtin authentication service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5539&quot;&gt;&lt;del&gt;DERBY-5539&lt;/del&gt;&lt;/a&gt;) that made builtin authentication hash the supplied credentials also in the case where the specified user name does not exist in the user database. This was done to make it more difficult to determine whether or not a user exist without knowing the user&apos;s password. It looks like a similar fix is needed for native authentication, as NativeAuthenticationServiceImpl.authenticateLocally() returns early if a user descriptor is not found.&lt;/p&gt;</comment>
                            <comment id="13217252" author="knutanders" created="Mon, 27 Feb 2012 16:16:26 +0000"  >&lt;p&gt;Another thing I noticed when I looked at NativeAuthenticationServiceImpl.authenticateLocally(), was this try/finally statement:&lt;/p&gt;


&lt;p&gt;        try {&lt;br/&gt;
            if ( (candidatePassword == null) || (actualPassword == null)) &lt;/p&gt;
{ return false; }
&lt;p&gt;(...)&lt;br/&gt;
        } finally&lt;/p&gt;
        {
            Arrays.fill( candidatePassword, (char) 0 );
            Arrays.fill( actualPassword, (char) 0 );
        }

&lt;p&gt;If the condition in the if statement evaluates to true, the finally block will run into a NullPointerException when trying to fill an array that&apos;s null.&lt;/p&gt;</comment>
                            <comment id="13217263" author="rhillegas" created="Mon, 27 Feb 2012 16:39:32 +0000"  >&lt;p&gt;Thanks, Knut. I am trying to puzzle through what we should do here. If I correctly understand your comments on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5539&quot; title=&quot;Harden password hashing in the builtin authentication service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5539&quot;&gt;&lt;del&gt;DERBY-5539&lt;/del&gt;&lt;/a&gt;, the security vulnerability is this:&lt;/p&gt;

&lt;p&gt;1) It takes a different amount of time to reject a bad password if the username itself is invalid.&lt;/p&gt;

&lt;p&gt;2) This gives blackhats information about which usernames are good.&lt;/p&gt;

&lt;p&gt;We could use some default hashing algorithm to slow down credentials failure when NATIVE authentication discovers that the username itself is invalid. When the default algorithm changes or otherwise diverges from the algorithm stored for most users in SYSUSERS.HASHINGSCHEME, then failure timings will again leak information about what usernames are legal. Information will leak until existing users change their passwords so that they enjoy the new, stronger default algorithm. That&apos;s a smaller problem, but one which stumps me. I am inclined to keep this simple and not worry about the smaller vulnerability.&lt;/p&gt;</comment>
                            <comment id="13217268" author="rhillegas" created="Mon, 27 Feb 2012 16:42:52 +0000"  >&lt;p&gt;Thanks for finding that potential NPE, Knut. Fixing it should be easy.&lt;/p&gt;</comment>
                            <comment id="13218017" author="knutanders" created="Tue, 28 Feb 2012 09:07:52 +0000"  >&lt;p&gt;I think it&apos;s OK to use the default algorithm regardless of which algorithm is used by the majority of the users, as that will catch the common case. And since password expire fairly quickly by default, we won&apos;t have diverging algorithms for a very long time. If we were to address that problem too, I think we could do it by always sleeping for a random amount of time on authentication failures.&lt;/p&gt;</comment>
                            <comment id="13218035" author="kristwaa" created="Tue, 28 Feb 2012 10:05:30 +0000"  >&lt;p&gt;+1 on adding the random sleep - seens like a low cost solution to implement.&lt;/p&gt;</comment>
                            <comment id="13218563" author="rhillegas" created="Tue, 28 Feb 2012 20:11:58 +0000"  >&lt;p&gt;Attaching derby-866-19-aa-replicationTest.diff. This patch adds a test for replicating databases when NATIVE authentication is on.&lt;/p&gt;

&lt;p&gt;Most of the changes in this patch result from replacing copy/pasted code with calls to some common methods which create connection URLs and databases. The common methods add credentials when authentication is on.&lt;/p&gt;

&lt;p&gt;I have successfully run ReplicationSuite with this patch on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;/p&gt;

&lt;p&gt;2) Java 6 on XP&lt;/p&gt;

&lt;p&gt;3) Java 5 on XP&lt;/p&gt;

&lt;p&gt;On the strength of those results, I have committed this patch at subversion revision 1294812.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java&lt;/p&gt;</comment>
                            <comment id="13219241" author="rhillegas" created="Wed, 29 Feb 2012 14:29:01 +0000"  >&lt;p&gt;Attaching derby-866-20-aa-npeAndUserProbing.diff. This patch addresses Knut&apos;s recent suggestions:&lt;/p&gt;

&lt;p&gt;A) Now we perform a dummy password hash if the user doesn&apos;t exist. This is meant to confuse blackhats who probe for legal usernames by measuring how long password evaluation takes.&lt;/p&gt;

&lt;p&gt;B) Some defensive logic was added to prevent some NPEs. Note that I&apos;m not sure that the NPEs could really happen. My attempt to trigger them resulted in tripping across an earlier NPE. I&apos;ve plugged that one too. The defensive logic seems like a good idea, nonetheless.&lt;/p&gt;

&lt;p&gt;I have successfully run NativeAuthenticationServiceTest on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;br/&gt;
2) Java 6 on XP&lt;br/&gt;
3) Java 5 on XP&lt;br/&gt;
4) OJEC &lt;/p&gt;

&lt;p&gt;I am running full regression tests now.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;/p&gt;

&lt;p&gt;Addressed (A) and (B).&lt;/p&gt;

&lt;p&gt;---------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java&lt;/p&gt;

&lt;p&gt;Added a test for the NPE which was fixed.&lt;/p&gt;</comment>
                            <comment id="13219310" author="knutanders" created="Wed, 29 Feb 2012 16:09:11 +0000"  >&lt;p&gt;I gave the patch a try, and now the authentication failures take approximately the same time for existing users and non-existing users.&lt;/p&gt;

&lt;p&gt;One small nit: You might want to use the helper method AuthenticationServiceBase.getDatabaseProperties() introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5539&quot; title=&quot;Harden password hashing in the builtin authentication service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5539&quot;&gt;&lt;del&gt;DERBY-5539&lt;/del&gt;&lt;/a&gt; so that you don&apos;t need to explicitly obtain and commit a nested transaction. Otherwise, the patch looks fine to me.&lt;/p&gt;</comment>
                            <comment id="13219348" author="rhillegas" created="Wed, 29 Feb 2012 17:27:16 +0000"  >&lt;p&gt;Tests passed cleanly for me. Attaching derby-866-20-ab-npeAndUserProbing.diff. This version uses AuthenticationServiceBase.getDatabaseProperties() as Knut suggested. Committed at subversion revision 1295189.&lt;/p&gt;</comment>
                            <comment id="13220034" author="rhillegas" created="Thu, 1 Mar 2012 13:55:53 +0000"  >&lt;p&gt;Attaching first rev of a release note for this feature.&lt;/p&gt;</comment>
                            <comment id="13222499" author="rhillegas" created="Mon, 5 Mar 2012 18:51:40 +0000"  >&lt;p&gt;Attaching derby-866-21-aa-emptyCredentials.diff. This patch adds logic to prevent the creation of a credentials db with vacuous username or password. Null and &quot;&quot; are not allowed as the username or password.&lt;/p&gt;

&lt;p&gt;I am running the full regression tests now. I have successfully run NativeAuthenticationServiceTest on the following platforms:&lt;/p&gt;

&lt;p&gt;1) Java 6 on Mac OSX&lt;br/&gt;
2) Java 6 on XP&lt;br/&gt;
3) Java 5 on XP&lt;br/&gt;
4) OJEC&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java&lt;/p&gt;

&lt;p&gt;The new check for empty credentials.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;A new error message.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;Some tests for this case.&lt;/p&gt;</comment>
                            <comment id="13222596" author="rhillegas" created="Mon, 5 Mar 2012 20:44:01 +0000"  >&lt;p&gt;Attaching derby-866-21-ab-emptyCredentials.diff. This patch adjusts ErrorCodeTest to account for the new error message.&lt;/p&gt;

&lt;p&gt;My regression test run also tripped over a series of NPEs in SecurityManagerSetup.getEffectivePolicyResource(). Those errors went away when I resynced with the head of trunk.&lt;/p&gt;

&lt;p&gt;I will re-run the full regression tests.&lt;/p&gt;

&lt;p&gt;This patch touches the same files as the previous rev plus:&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java&lt;/p&gt;</comment>
                            <comment id="13223332" author="rhillegas" created="Tue, 6 Mar 2012 15:34:04 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-21-ab-emptyCredentials.diff at subversion revision 1297528.&lt;/p&gt;</comment>
                            <comment id="13223333" author="rhillegas" created="Tue, 6 Mar 2012 15:34:45 +0000"  >&lt;p&gt;At this point, I am declaring victory on the coding/unit-testing of NATIVE authentication. I believe that I have implemented and verified all of the functionality in the spec. I have reached the end of my ability to test this feature productively. My blinders, as the author of this feature, prevent me from discovering additional defects. The tests I have written lately do disclose defects in other parts of Derby outside the scope of this feature--but not new defects in NATIVE authentication itself.&lt;/p&gt;

&lt;p&gt;However, I&apos;m sure there are plenty of remaining defects, perhaps even some real howlers. At this point, buddy-testers may be able to find some of the defects hidden behind my blinders.&lt;/p&gt;

&lt;p&gt;To help buddy-testers guess where the weaknesses lie, I would like to describe the current implementation and its touchpoints with other parts of Derby.&lt;/p&gt;

&lt;p&gt;--------------------------------------------------&lt;br/&gt;
&amp;#8211; NATIVE Authentication Service&lt;br/&gt;
--------------------------------------------------&lt;/p&gt;

&lt;p&gt;The core of the implementation is the NATIVE authentication service itself, NativeAuthenticationServiceImpl. This implementation is parallel to the other authentication services, and like them, it extends AuthenticationServiceBase:&lt;/p&gt;

&lt;p&gt;1) BasicAuthenticationServiceImpl - This class implements BASIC authentication. I used it as the template for NativeAuthenticationServiceImpl because NATIVE and BASIC authentication share a key trickiness: the storing of credentials inside the database being connected to.&lt;/p&gt;

&lt;p&gt;2) JNDIAuthenticationServiceImpl - This class handles LDAP authentication.&lt;/p&gt;

&lt;p&gt;3) SpecificAuthenticationServiceImpl - This class handles user-written authenticators.&lt;/p&gt;

&lt;p&gt;4) NoneAuthenticationServiceImpl - This is the default, NOP authentication service used when the application does not require any authentication at all.&lt;/p&gt;

&lt;p&gt;At engine and database startup, all of these implementations of the authentication module are asked whether they match the setting of the Derby authentication properties. I had to modify SpecificAuthenticationServiceImpl because it is the catch-all implementation: by default it matches any setting of derby.authentication.provider which has not been excluded explicitly. There are quite a few Derby authentication properties:&lt;/p&gt;

&lt;p&gt;  derby.authentication.builtin.algorithm&lt;br/&gt;
  derby.authentication.ldap.searchAuthDN&lt;br/&gt;
  derby.authentication.ldap.searchAuthPW&lt;br/&gt;
  derby.authentication.ldap.searchBase&lt;br/&gt;
  derby.authentication.ldap.searchFilter&lt;br/&gt;
  derby.authentication.provider&lt;br/&gt;
  derby.authentication.server&lt;br/&gt;
  derby.connection.requireAuthentication&lt;/p&gt;

&lt;p&gt;&amp;#8212; Bootstrapping&lt;/p&gt;

&lt;p&gt;The first bit of trickiness in NativeAuthenticationServiceImpl is the logic which determines whether this implementation matches the setting of the Derby authentication properties. This is tricky because unlike the other authentication services, NATIVE authentication is supposed to be easy for the user to configure. It only requires that you set one property, viz. derby.authentication.provider. The other authentication services require that you redundantly set derby.connection.requireAuthentication.&lt;/p&gt;

&lt;p&gt;Bootstrapping NATIVE authentication follows the normal Derby model, which divides bootstrapping into two phases: canSupport() and boot(). Validation of property settings can&apos;t be performed by canSupport() because that method does not let you raise an invalidation exception. Note that this behavior gives rise to the quirky result that if you garble the setting of derby.authentication.provider, you will end up booting the catch-all SpecificAuthenticationServiceImpl, which will promptly fall over because the garbled derby.authentication.provider does not resolve to a valid class name.&lt;/p&gt;

&lt;p&gt;However, deferring the validation of derby.authentication.provider to NativeAuthenticationServiceImpl.boot() is fine. That is because the NATIVE authentication service needs to know whether it is being booted system-wide or inside a specific database. The value NATIVE::LOCAL is meaningless for system-wide authentication but it is the only legal value which can be stored in a database. That last point is true because we don&apos;t want to hard-code the name of the system-wide credentials db inside any specific database; we want the database to be portable and we want to give the system administrator the option of moving the credentials db if there is a problem.&lt;/p&gt;

&lt;p&gt;&amp;#8212; Creating the credentials DB&lt;/p&gt;

&lt;p&gt;The next bit of trickiness involves coupling connection management with NATIVE authentication. Special logic in EmbedConnection checks to see whether the database being created is the credentials database. If so, authentication isn&apos;t performed: there is no authentication authority yet and the presented credentials are simply accepted as is and will be used to create the DBO account. It might make more sense if this logic were inside NativeAuthenticationServiceImpl. However, the knowledge that the database is being created is not passed across the authentication call, so NativeAuthenticationServiceImpl can&apos;t perform this check.&lt;/p&gt;

&lt;p&gt;&amp;#8212; Steady-state&lt;/p&gt;

&lt;p&gt;The rest of the logic in NativeAuthenticationServiceImpl happens under authenticateUser() and processes the main execution path: authenticating users for system-wide or database-specific tasks. At this point the NATIVE authentication service is booted and we know that we are not authenticating the creation of the credentials db itself.&lt;/p&gt;

&lt;p&gt;The authenticateUser() method figures out whether credentials should be looked up in the current database or in another database.&lt;/p&gt;

&lt;p&gt;Looking up the credentials in another database gives rise to the next bit of trickiness. This logic has already been corrected to account for a deadlock in the Java 5 VM. We were doing something which fell outside the main execution path understood by  the VM&apos;s JDBC layer, viz., we were trying to open a nested JDBC connection in the middle of establishing an outer JDBC connection. After the corrective logic, we are now merely trying to establish a nested Derby connection while trying to establish an outer Derby connection. Needless to say, this still falls outside the main execution path understood by Derby and there may be bugs lurking here.&lt;/p&gt;

&lt;p&gt;Other trickiness may lurk inside the logic which looks up credentials in the current database. To find the real credentials, we must access the Store before the connection has been completely established. Fortunately, BUILTIN authentication has been doing this for years so many bugs in this area may have been flushed out already. We also access the DataDictionary before the connection has been completely established. This unusual code path is not exercised by BUILTIN authentication and so it may be hiding some bugs.&lt;/p&gt;


&lt;p&gt;--------------------------------------------------&lt;br/&gt;
&amp;#8211; Properties Management&lt;br/&gt;
--------------------------------------------------&lt;/p&gt;

&lt;p&gt;NATIVE authentication attempts to be simple to configure and hard to turn off. All you have to do is turn one knob (the derby.authentication.provider property). When you turn this knob to NATIVE authentication, you also turn on SQL authorization. Once NATIVE authentication has been set in the database itself, it can&apos;t be disabled. &lt;/p&gt;

&lt;p&gt;The interaction of Derby properties is already complicated and is influenced by the following considerations:&lt;/p&gt;

&lt;p&gt;o Whether the property is set on the VM command line, in&lt;br/&gt;
derby.properties, or in the database.&lt;/p&gt;

&lt;p&gt;o Whether the special derby.database.propertiesOnly property is set.&lt;/p&gt;

&lt;p&gt;o Whether other, related properties have been set correctly.&lt;/p&gt;

&lt;p&gt;I confess to being confused repeatedly by the way that Derby properties interact. And now I have complicated that interaction by introducing the peculiar, trumping behaviors of NATIVE authentication. The goal was to simplify how users protect their data, but I can&apos;t promise that edge cases haven&apos;t crept in or been made worse. A crucial piece of trumping happens in PropertyUtil.getPropertyFromSet(). There could be more bugs in this area as well.&lt;/p&gt;


&lt;p&gt;--------------------------------------------------&lt;br/&gt;
&amp;#8211; Data Dictionary&lt;br/&gt;
--------------------------------------------------&lt;/p&gt;

&lt;p&gt;The Data Dictionary assists NATIVE authentication. Here are the major touchpoints:&lt;/p&gt;

&lt;p&gt;1) A new SYSUSERS catalog has been added. Unlike other catalogs, ordinary users can&apos;t view this catalog (when authentication is on) and even the DBO can&apos;t view the PASSWORD column. These behaviors are unprecedented so they may be particularly buggy.&lt;/p&gt;

&lt;p&gt;2) I added 4 new procedures for managing passwords: syscs_util.syscs_create_user, syscs_util.syscs_drop_user, syscs_util.syscs_reset_password, and syscs_util.syscs_modify_password. The first 3 are modelled on other, existing DBO-only procedures. The last procedure is modelled on existing procedures which anyone can run.&lt;/p&gt;

&lt;p&gt;3) I moved the password-hashing logic into a PasswordHasher class in the Data Dictionary.&lt;/p&gt;</comment>
                            <comment id="13226433" author="chaase3" created="Fri, 9 Mar 2012 20:40:57 +0000"  >&lt;p&gt;I thought it was pretty cool that even as the DBO I could not view the passwords:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;jdbc:derby:credsDB&apos;;&lt;br/&gt;
ERROR 08004: Database connection refused.&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:credsDB;user=sysadm;password=little7xylamb&apos;;&lt;br/&gt;
ij&amp;gt; select * from sys.sysusers;&lt;br/&gt;
ERROR 4251E: No-one can view the &apos;SYSUSERS&apos;.&apos;PASSWORD&apos; column.&lt;/p&gt;

&lt;p&gt;One typo-quibble, though: It should be &quot;No one&quot;, not &quot;No-one&quot;.&lt;/p&gt;</comment>
                            <comment id="13226444" author="rhillegas" created="Fri, 9 Mar 2012 20:53:37 +0000"  >&lt;p&gt;Thanks Kim. I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5644&quot; title=&quot;Typo in error message for NATIVE authentication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5644&quot;&gt;&lt;del&gt;DERBY-5644&lt;/del&gt;&lt;/a&gt; for the typo.&lt;/p&gt;</comment>
                            <comment id="13229554" author="kristwaa" created="Wed, 14 Mar 2012 19:56:08 +0000"  >&lt;p&gt;Just a tiny nit about error messages:&lt;br/&gt;
01J15 and 01J16 use upper case for system procedures&lt;br/&gt;
XCY05.S uses lower case for system procedure&lt;/p&gt;</comment>
                            <comment id="13232742" author="rhillegas" created="Mon, 19 Mar 2012 17:22:17 +0000"  >&lt;p&gt;Private discussions with Dag have suggested an improvement to the functional spec for NATIVE authentication. This improvement would support the overriding design goals of this feature:&lt;/p&gt;

&lt;p&gt;1) Easy to setup.&lt;/p&gt;

&lt;p&gt;2) Hard to subvert.&lt;/p&gt;

&lt;p&gt;The improvement would eliminate the following weird edge case. The edge case doesn&apos;t cause any correctness problems which we know of. It just doesn&apos;t fit well with the design goals. Here&apos;s the edge case:&lt;/p&gt;

&lt;p&gt;A) You can store credentials in an unsecured database using the SYSCS_CREATE_USER() system procedure.&lt;/p&gt;

&lt;p&gt;B) Then you can use the unsecure database as a credentials db by setting a system property and rebooting the engine:&lt;/p&gt;

&lt;p&gt; derby.authentication.provider=NATIVE:unsecuredDB:LOCAL&lt;/p&gt;

&lt;p&gt;C) Because the database already exists, Derby won&apos;t automatically set derby.authentication.provider=NATIVE::LOCAL in unsecuredDB. This means that you can later take the database offline and use it without authentication. It seems odd that the credentials DB itself could be so unsecure.&lt;/p&gt;

&lt;p&gt;To eliminate this weird edge case, we propose the following:&lt;/p&gt;

&lt;p&gt;NATIVE::LOCAL authentication is on iff the DBO&apos;s credentials are stored in SYS.SYSUSERS.&lt;/p&gt;

&lt;p&gt;Here&apos;s how we would enforce this rule:&lt;/p&gt;

&lt;p&gt;i) The first user created by SYSCS_CREATE_USER() must be the DBO.&lt;/p&gt;

&lt;p&gt;ii) When the DBO&apos;s credentials are stored in SYS.SYSUSERS, Derby will automatically set derby.authentication.provider=NATIVE::LOCAL in the database.&lt;/p&gt;

&lt;p&gt;This change would further the overriding design goals as follows:&lt;/p&gt;

&lt;p&gt;1&apos;) It would now be even easier to convert a database to use NATIVE authentication. All you would have to do is store credentials for the DBO. You would no longer need to also set derby.authentication.provider=NATIVE::LOCAL.&lt;/p&gt;

&lt;p&gt;2&apos;) The new rule would eliminate one more way of subverting Derby security.&lt;/p&gt;</comment>
                            <comment id="13233391" author="rhillegas" created="Tue, 20 Mar 2012 13:09:17 +0000"  >&lt;p&gt;Attaching derby-866-22-aa-dboFirst.diff. This patch addresses the edge case described above on 2012-03-19. Now the DBO must be the first user whose credentials are stored. Storing credentials for the DBO automatically marks the database as a credentials DB. Committed at subversion revision 1302868.&lt;/p&gt;

&lt;p&gt;Turning a legacy database into a credentials DB is now simpler. All you have to do is call syscs_create_user() to store the DBO&apos;s credentials.&lt;/p&gt;

&lt;p&gt;Regression tests passed cleanly for me. I also successfully ran NativeAuthenticationServiceTest on OJEC.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/impl/jdbc/authentication/NativeAuthenticationServiceImpl.java&lt;br/&gt;
M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;Make sure that the first credentials which are stored are those of the DBO. If they are, then set derby.authentication.provider=NATIVE::LOCAL in the database. That last piece of logic was moved out of the NATIVE authentication service into the syscs_create_user procedure.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M       java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New error message raised if you try to store credentials for some other user before you store the DBO&apos;s credentials.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast_init.sql&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/nast1.jar&lt;/p&gt;

&lt;p&gt;This is the script which creates the jar files used by NativeAuthenticationServiceTest. The script was changed so that it no longer explicitly sets derby.authentication.provider=NATIVE::LOCAL in the database (not needed anymore). In addition, I turned off password expiration in the jar&apos;d databases so that NativeAuthenticationServiceTest won&apos;t fail 32 days after checking in new jar&apos;d databases.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;D       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthProcs.java&lt;br/&gt;
M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;/p&gt;

&lt;p&gt;NativeAuthProcs was failing to shutdown correctly because user creation now turns on NATIVE+LOCAL authentication. This test is largely redundant--except for the password hashing tests, all of its cases are also tested in NativeAuthenticationServiceTest now. The password hashing tests were moved to NativeAuthenticationServiceTest and NativeAuthProcs was deprecated.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;This test needed lots of little tweaks to handle the new behavior.&lt;/p&gt;

&lt;p&gt;----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;/p&gt;

&lt;p&gt;Now the upgrade tests have to be careful to not actually store the DBO&apos;s credentials since that will turn on NATIVE+LOCAL authentication.&lt;/p&gt;</comment>
                            <comment id="13233449" author="rhillegas" created="Tue, 20 Mar 2012 14:40:17 +0000"  >&lt;p&gt;Attaching version 7 of the functional spec. This version describes the new behavior which was just checked in. Changes are summarized in the version 7.0 comment at the head of the spec:&lt;/p&gt;

&lt;p&gt;&quot;Introduced a new rule to simplify the conversion of legacy databases to NATIVE authentication and to make it harder to subvert a Credentials DB. The new rule is this: A database is a Credentials DB iff credentials have been stored in its SYS.SYSUSERS table.&lt;/p&gt;

&lt;p&gt;o    Clarified that derby.authentication.provider is set to the value NATIVE::LOCAL by Derby itself and that this value is never explicitly set by an application.&lt;br/&gt;
o    Clarified that a legacy database becomes a Credentials DB when the DBO stores her credentials in SYS.SYSUSERS. Revised the example in the Database Creation section accordingly. Repeated this clarification in the section on Hard Upgrade.&lt;br/&gt;
o    Clarified that the DBO&apos;s credentials must be the very first credentials stored in a legacy database via the syscs_util.syscs_create_user procedure. Calling this procedure permanently marks a database as a Credentials DB.&lt;/p&gt;

&lt;p&gt;In addition, clarified that when NATIVE authentication is enabled, Derby behaves as if derby.connection.requireAuthentication=true and derby.database.sqlAuthorization=true regardless of how those properties are set by any other means.&quot;&lt;/p&gt;</comment>
                            <comment id="13233654" author="rhillegas" created="Tue, 20 Mar 2012 18:32:38 +0000"  >&lt;p&gt;Attaching derby-866-23-aa-improveErrorMessages.diff. This patch improves the wording of some error messages, based on Kim&apos;s advice. Committed at subversion revision 1303069.&lt;/p&gt;

&lt;p&gt;Touches the following file:&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;</comment>
                            <comment id="13258277" author="rhillegas" created="Fri, 20 Apr 2012 15:33:23 +0100"  >&lt;p&gt;Attaching derby-866-24-aa-dboMustTurnOnSecurity.diff. This patch forbids another weird Derby behavior when NATIVE authentication is involved. I am running tests now.&lt;/p&gt;

&lt;p&gt;The weird behavior is this: If authentication and authorization are not on, then any legal user can hijack the database by turning them on and specifying credentials which lock out everyone else. This patch prevents an insider from using NATIVE authentication to do this. Because of backward compatibility, I am reluctant to close down this behavior for other authentication schemes. But since NATIVE authentication has not gone GA yet, we have the opportunity to make it behave better.&lt;/p&gt;

&lt;p&gt;More exactly, this patch enforces the restriction that only the DBO can turn on NATIVE authentication.&lt;/p&gt;

&lt;p&gt;We can relax this restriction in the future if someone comes up with a supporting use case. However, right now this looks like a security hole to me.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/catalog/SystemProcedures.java&lt;/p&gt;

&lt;p&gt;The new check to let only the DBO turn on NATIVE authentication.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/engine/org/apache/derby/loc/messages.xml&lt;/p&gt;

&lt;p&gt;Slight rewording of an existing error message so that is can be re-used for this check.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M       java/testing/org/apache/derbyTesting/functionTests/tests/lang/NativeAuthenticationServiceTest.java&lt;/p&gt;

&lt;p&gt;New test case to verify the new behavior.&lt;/p&gt;</comment>
                            <comment id="13258343" author="rhillegas" created="Fri, 20 Apr 2012 17:10:34 +0100"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-866-24-aa-dboMustTurnOnSecurity.diff at subversion revision 1328431.&lt;/p&gt;</comment>
                            <comment id="13275897" author="rhillegas" created="Tue, 15 May 2012 16:50:03 +0100"  >&lt;p&gt;Attaching new version of release note. This improves the instructions for  how to migrate from BUILTIN to NATIVE authentication.&lt;/p&gt;</comment>
                            <comment id="13276034" author="rhillegas" created="Tue, 15 May 2012 18:36:43 +0100"  >&lt;p&gt;There are some outstanding issues still linked to this task. Some of those issues will be addressed for 10.9. The others deal with other topics which are outside the scope of this JIRA. I think it is safe to resolve this issue now. That will make its release note turn up in the 10.9 release  notes.&lt;/p&gt;</comment>
                            <comment id="14119606" author="knutanders" created="Wed, 3 Sep 2014 09:31:36 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12541864">DERBY-5607</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12534037">DERBY-5522</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12539207">DERBY-5580</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546399">DERBY-5652</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12554156">DERBY-5748</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12553763">DERBY-5742</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12545905">DERBY-5644</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12365355">DERBY-2470</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546375">DERBY-5651</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12542566">DERBY-5615</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12542684">DERBY-5618</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12553954">DERBY-5744</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12554153">DERBY-5747</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12646842">DERBY-6221</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546097">DERBY-5647</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12535903">DERBY-5548</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12384777">DERBY-3282</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12554944">DERBY-5762</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12555836">DERBY-5763</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12556286">DERBY-5768</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546101">DERBY-5648</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546536">DERBY-5657</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12546577">DERBY-5658</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12553759">DERBY-5741</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12322316" name="Derby_User_Enhancement.html" size="7225" author="forsini" created="Wed, 25 Jan 2006 03:12:04 +0000"/>
                            <attachment id="12323031" name="Derby_User_Enhancement_v1.1.html" size="7967" author="forsini" created="Thu, 16 Feb 2006 08:51:07 +0000"/>
                            <attachment id="12505795" name="DummyAuthenticator.java" size="2619" author="rhillegas" created="Thu, 1 Dec 2011 19:41:09 +0000"/>
                            <attachment id="12519081" name="UserManagement.html" size="36956" author="rhillegas" created="Tue, 20 Mar 2012 14:40:17 +0000"/>
                            <attachment id="12514990" name="UserManagement.html" size="35307" author="rhillegas" created="Fri, 17 Feb 2012 14:43:04 +0000"/>
                            <attachment id="12512579" name="UserManagement.html" size="34059" author="rhillegas" created="Tue, 31 Jan 2012 15:26:19 +0000"/>
                            <attachment id="12508102" name="UserManagement.html" size="31665" author="rhillegas" created="Tue, 20 Dec 2011 17:23:46 +0000"/>
                            <attachment id="12506259" name="UserManagement.html" size="25778" author="rhillegas" created="Tue, 6 Dec 2011 14:46:11 +0000"/>
                            <attachment id="12506159" name="UserManagement.html" size="22825" author="rhillegas" created="Mon, 5 Dec 2011 20:57:52 +0000"/>
                            <attachment id="12505781" name="UserManagement.html" size="16486" author="rhillegas" created="Thu, 1 Dec 2011 17:26:30 +0000"/>
                            <attachment id="12506656" name="derby-866-01-aa-sysusers.diff" size="49049" author="rhillegas" created="Thu, 8 Dec 2011 21:15:16 +0000"/>
                            <attachment id="12506756" name="derby-866-01-ab-sysusers.diff" size="51473" author="rhillegas" created="Fri, 9 Dec 2011 17:40:28 +0000"/>
                            <attachment id="12507717" name="derby-866-02-ag-createDropUser.diff" size="69800" author="rhillegas" created="Fri, 16 Dec 2011 19:33:54 +0000"/>
                            <attachment id="12508096" name="derby-866-03-aa-resetModifyPassword.diff" size="20466" author="rhillegas" created="Tue, 20 Dec 2011 16:22:50 +0000"/>
                            <attachment id="12508114" name="derby-866-03-ab-resetModifyPassword.diff" size="21343" author="rhillegas" created="Tue, 20 Dec 2011 18:49:06 +0000"/>
                            <attachment id="12508115" name="derby-866-04-aa-fixRolesTest.diff" size="1857" author="rhillegas" created="Tue, 20 Dec 2011 19:00:16 +0000"/>
                            <attachment id="12508123" name="derby-866-05-aa-grantRevoke.diff" size="2451" author="rhillegas" created="Tue, 20 Dec 2011 19:36:53 +0000"/>
                            <attachment id="12508240" name="derby-866-06-aa-upgradeFrom10.1.diff" size="761" author="rhillegas" created="Wed, 21 Dec 2011 14:04:46 +0000"/>
                            <attachment id="12508292" name="derby-866-07-aa-removeSQLPassword.diff" size="46536" author="rhillegas" created="Wed, 21 Dec 2011 19:41:53 +0000"/>
                            <attachment id="12508550" name="derby-866-08-aa-passwordHasher.diff" size="40997" author="rhillegas" created="Fri, 23 Dec 2011 17:28:56 +0000"/>
                            <attachment id="12508559" name="derby-866-08-ab-passwordHasher.diff" size="41054" author="rhillegas" created="Fri, 23 Dec 2011 18:56:03 +0000"/>
                            <attachment id="12509339" name="derby-866-08-ad-passwordHasher.diff" size="46469" author="rhillegas" created="Tue, 3 Jan 2012 21:00:34 +0000"/>
                            <attachment id="12510406" name="derby-866-09-ad-nativeAuthenticationService.diff" size="41098" author="rhillegas" created="Thu, 12 Jan 2012 18:40:51 +0000"/>
                            <attachment id="12511038" name="derby-866-09-ae-nativeAuthenticationServiceWithTests.diff" size="68698" author="rhillegas" created="Wed, 18 Jan 2012 20:57:10 +0000"/>
                            <attachment id="12511702" name="derby-866-10-ac-propChanging.diff" size="30919" author="rhillegas" created="Tue, 24 Jan 2012 18:42:58 +0000"/>
                            <attachment id="12512016" name="derby-866-11-aa-upgradeTest.diff" size="5394" author="rhillegas" created="Thu, 26 Jan 2012 18:26:13 +0000"/>
                            <attachment id="12512575" name="derby-866-12-ac-passwordExpiration.diff" size="23485" author="rhillegas" created="Tue, 31 Jan 2012 15:07:48 +0000"/>
                            <attachment id="12513052" name="derby-866-13-ab-systemWideOperationTests.diff" size="14024" author="rhillegas" created="Thu, 2 Feb 2012 22:49:14 +0000"/>
                            <attachment id="12513496" name="derby-866-14-ac-badNativeSpec.diff" size="12877" author="rhillegas" created="Mon, 6 Feb 2012 20:41:47 +0000"/>
                            <attachment id="12514663" name="derby-866-15-ae-dbInJarFileOrOnClasspath.diff" size="35273" author="rhillegas" created="Wed, 15 Feb 2012 17:17:04 +0000"/>
                            <attachment id="12514845" name="derby-866-16-aa-credDBViaSubprotocol.diff" size="14929" author="rhillegas" created="Thu, 16 Feb 2012 19:17:32 +0000"/>
                            <attachment id="12514983" name="derby-866-17-aa-grantRevokeNative.diff" size="6178" author="rhillegas" created="Fri, 17 Feb 2012 13:55:07 +0000"/>
                            <attachment id="12515022" name="derby-866-18-aa-encryptedCredentialsDB.diff" size="32154" author="rhillegas" created="Fri, 17 Feb 2012 20:58:20 +0000"/>
                            <attachment id="12516384" name="derby-866-19-aa-replicationTest.diff" size="20432" author="rhillegas" created="Tue, 28 Feb 2012 20:11:58 +0000"/>
                            <attachment id="12516567" name="derby-866-20-aa-npeAndUserProbing.diff" size="5648" author="rhillegas" created="Wed, 29 Feb 2012 14:29:01 +0000"/>
                            <attachment id="12516582" name="derby-866-20-ab-npeAndUserProbing.diff" size="5567" author="rhillegas" created="Wed, 29 Feb 2012 17:27:16 +0000"/>
                            <attachment id="12517106" name="derby-866-21-aa-emptyCredentials.diff" size="8544" author="rhillegas" created="Mon, 5 Mar 2012 18:51:39 +0000"/>
                            <attachment id="12517122" name="derby-866-21-ab-emptyCredentials.diff" size="9809" author="rhillegas" created="Mon, 5 Mar 2012 20:44:01 +0000"/>
                            <attachment id="12519076" name="derby-866-22-aa-dboFirst.diff" size="51048" author="rhillegas" created="Tue, 20 Mar 2012 13:09:17 +0000"/>
                            <attachment id="12519104" name="derby-866-23-aa-improveErrorMessages.diff" size="1739" author="rhillegas" created="Tue, 20 Mar 2012 18:32:37 +0000"/>
                            <attachment id="12523503" name="derby-866-24-aa-dboMustTurnOnSecurity.diff" size="4659" author="rhillegas" created="Fri, 20 Apr 2012 15:33:23 +0100"/>
                            <attachment id="12505796" name="dummyCredentials.properties" size="122" author="rhillegas" created="Thu, 1 Dec 2011 19:41:09 +0000"/>
                            <attachment id="12527368" name="releaseNote.html" size="3718" author="rhillegas" created="Tue, 15 May 2012 16:50:03 +0100"/>
                            <attachment id="12516676" name="releaseNote.html" size="3742" author="rhillegas" created="Thu, 1 Mar 2012 13:55:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>44.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10361"><![CDATA[Security]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 25 Jan 2006 06:19:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29752</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0btb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35732</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>