<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:16 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2917/DERBY-2917.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2917] Refactor DataTypeDescriptor and TypeDescriptor to result in cleaner code.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2917</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;TypeDescriptor ideally represents a catalog type (column in a table, parameter in a procedure etc.)&lt;br/&gt;
DataTypeDescriptor represents a runtime type&lt;/p&gt;

&lt;p&gt;Currently DataTypeDescriptor  extends (implements) TypeDescriptor , but the relationship would be cleaner if DataTypeDescriptor  had a TypeDescriptor (but was not a TypeDescriptor).&lt;/p&gt;

&lt;p&gt;One can at the moment obtain a TypeDescriptor from a DataTypeDescriptor  using DataTypeDescriptor.getCatalogType() but most code just treats DataTypeDescriptor   as a TypeDescriptor. This has lead to a couple of issues:&lt;/p&gt;

&lt;p&gt;1) When a routine&apos;s parameter/return type is written out a DataTypeDescriptor is written to disk. This results in type information being repeated in the serialized form, thus increasing the on-disk size of a Derby database.&lt;/p&gt;

&lt;p&gt;2) Collation derivation is runtime only (all persistent types by definition have implicit type) but the derivation is on the catalog Typedescriptor interface.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12373451">DERBY-2917</key>
            <summary>Refactor DataTypeDescriptor and TypeDescriptor to result in cleaner code.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12371145">DERBY-2775</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                            <label>derby_triage10_10</label>
                    </labels>
                <created>Tue, 10 Jul 2007 21:32:50 +0100</created>
                <updated>Tue, 2 Oct 2012 05:45:19 +0100</updated>
                                                                            <component>Services</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12511565" author="djd" created="Tue, 10 Jul 2007 21:39:06 +0100"  >&lt;p&gt;Changing this would lead to TypeId and DataTypeDescriptor not being formattable (I think).&lt;br/&gt;
The serialized form of DataTypedescriptor writes out duplicate information&lt;/p&gt;

&lt;p&gt;   TypeId&lt;br/&gt;
      BaseTypeIdImpl      &amp;lt;&amp;lt;&amp;lt; duplicate of information written out by TypeDescriptorImpl&lt;br/&gt;
   TypeDescriptorImpl&lt;br/&gt;
      BaseTypeIdImpl&lt;br/&gt;
      &amp;lt;type attributes&amp;gt;&lt;/p&gt;

&lt;p&gt;A DataTypedescriptor can be fully recreated from its TypeDescriptor(Impl), thus there is no need to write out anything else.&lt;br/&gt;
Once DataTypedescriptor becomes only a runtime representation of the type, then all persistent types would be written out as a TypeDescriptor,&lt;br/&gt;
using DataTypedescriptor.getCatalogType() as required.&lt;/p&gt;</comment>
                            <comment id="12511573" author="rhillegas" created="Tue, 10 Jul 2007 22:09:36 +0100"  >&lt;p&gt;Thanks for tackling this, Dan. I find Derby&apos;s type system to be very puzzling. Cleaning up just this portion of it would be a great service. It is particularly odd that the types actually stored in the catalogs (for function return values at least) are not catalog types. There are a bewildering number of interfaces and classes which cooperate here: TypeIds, Formatable Ids, TypeDescriptors, DataTypeDescriptors. Then there are multiple type systems at work: the Java type system, the SQL type system, the Derby catalog type system, and the Derby runtime type system.&lt;/p&gt;

&lt;p&gt;It seems to me that one ought to be able to get by with just one type system that is rich enough to be usable all across Derby. It should be possible to collapse TypeIds, FormatableIds, TypeDescriptors, and DataTypeDescriptors into a single concept. I suspect that a lot of the confusion arose long ago because the division of labor between datatypes and datavalues was not very satisfactory.&lt;/p&gt;</comment>
                            <comment id="12564968" author="djd" created="Fri, 1 Feb 2008 22:59:49 +0000"  >&lt;p&gt;Note on upgrade from older releases:&lt;/p&gt;

&lt;p&gt;Objects that are org.apache.derby.catalog.TypeDescriptor can be stored in these two system catalogs:&lt;/p&gt;

&lt;p&gt;SYSALIASES - ALIASINFO column as fields with a RoutineAliasInfo (parameter types and return types)&lt;br/&gt;
SYSCOLUMNS - COLUMNDATATYPE &lt;br/&gt;
-----------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;SYSCOLUMNS.COLUMNDATATYPE is always populated with a TypeDescriptorImpl which is the simple correct form of TypeDescriptor for catalogs.&lt;br/&gt;
   SYSCOLUMNSRowFactory has enforced this since the code was contributed. Thus there are no upgrade issues for this catalog.&lt;/p&gt;

&lt;p&gt;SYSALIASES - ALIASINFO is populated with the runtime DataTypeDescriptor in releases older than 10.4, thus their on-disk format for a RoutineAliasInfo uses the serialized version that includes duplicate information (see earlier comment). Some upgrade code might be needed for 10.4 to cope with this format.&lt;/p&gt;</comment>
                            <comment id="12605783" author="ryokota" created="Wed, 18 Jun 2008 01:10:11 +0100"  >&lt;p&gt;I wasn&apos;t able to isolate a test case, but I got the following ClassCastException when doing a hard upgrade from a 10.2.1.6 database to a 10.4.1.3 database.  It looks like it&apos;s related to changes made for this JIRA issue.&lt;/p&gt;

&lt;p&gt;2008-06-12 07:15:53.633 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_15,5,derby.daemons&amp;#93;&lt;/span&gt; Cleanup action starting&lt;br/&gt;
java.sql.SQLException: Failed to start database &apos;/usr/ironhide/var/db/orcmon/derby&apos;, see the next exception for details.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.Database.makeConnection(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;/usr/ironhide/var/db/orcmon/derby&apos;, see the next exception for details.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
        ... 17 more&lt;br/&gt;
Caused by: java.sql.SQLException: Exception during restore of a serializable or SQLData object of class&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
        ... 14 more&lt;br/&gt;
Caused by: ERROR XSDA8: Exception during restore of a serializable or SQLData object of class&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllSPSDescriptors(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DD_Version.dropJDBCMetadataSPSes(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)&lt;br/&gt;
        ... 14 more&lt;br/&gt;
Caused by: java.io.StreamCorruptedException: java.lang.ClassCastException: org.apache.derby.catalog.types.OldRoutineType cannot be cast to org.apache.derby.iapi.ty&lt;br/&gt;
pes.DataTypeDescriptor&lt;br/&gt;
        at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericResultDescription.readExternal(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source)&lt;br/&gt;
        ... 38 more&lt;/p&gt;</comment>
                            <comment id="13467480" author="mamtas" created="Tue, 2 Oct 2012 05:44:14 +0100"  >&lt;p&gt;I do not believe Dan is currently working on this issue. Changing the ownerhsip to unassigned in case some one else wants to pick it up.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 10 Jul 2007 21:09:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30654</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy08gf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35188</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>