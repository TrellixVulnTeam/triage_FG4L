<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:33:34 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4437/DERBY-4437.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4437] Concurrent inserts into table with identity column perform poorly</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4437</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I have a multi-threaded application which is very insert-intensive. I&apos;ve noticed that it sometimes can come into a state where it slows down considerably and basically becomes single-threaded. This is especially harmful on modern multi-core machines since most of the available resources are left idle.&lt;/p&gt;

&lt;p&gt;The problematic tables contain identity columns, and here&apos;s my understanding of what happens:&lt;/p&gt;

&lt;p&gt;1) Identity columns are generated from a counter that&apos;s stored in a row in SYS.SYSCOLUMNS. During normal operation, the counter is maintained in a nested transaction within the transaction that performs the insert. This allows the nested transaction to commit the changes to SYS.SYSCOLUMN separately from the main transaction, and the exclusive lock that it needs to obtain on the row holding the counter, can be releases after a relatively short time. Concurrent transactions can therefore insert into the same table at the same time, without needing to wait for the others to commit or abort.&lt;/p&gt;

&lt;p&gt;2) However, if the nested transaction cannot lock the row in SYS.SYSCOLUMNS immediately, it will give up and retry the operation in the main transaction. This prevents self-deadlocks in the case where the main transaction already owns a lock on SYS.SYSCOLUMNS. Unfortunately, this also increases the time the row is locked, since the exclusive lock cannot be released until the main transaction commits. So as soon as there is one lock collision, the waiting transaction changes to a locking mode that increases the chances of others having to wait, which seems to result in all insert threads having to obtain the SYSCOLUMNS locks in the main transaction. The end result is that only one of the insert threads can execute at any given time as long as the application is in this state.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12440016">DERBY-4437</key>
            <summary>Concurrent inserts into table with identity column perform poorly</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Nov 2009 10:53:58 +0000</created>
                <updated>Mon, 14 Apr 2014 15:48:36 +0100</updated>
                            <resolved>Mon, 14 Apr 2014 15:48:36 +0100</resolved>
                                    <version>10.5.3.0</version>
                                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12774270" author="knutanders" created="Fri, 6 Nov 2009 11:05:12 +0000"  >&lt;p&gt;I haven&apos;t investigated this enough to say if (1) or (2) is the real problem. Since the nested transaction has to commit before it can release the lock, and a commit may need to wait for disk I/O operations, it may be that (2) is just a symptom, and the real problem is that all the insert threads compete for the same row lock.&lt;/p&gt;

&lt;p&gt;In my application, I could work around the problem by removing the identity column and instead maintain a counter in an AtomicInteger that&apos;s initialized by a SELECT MAX(id) query on start-up. This works because the application is one single process with multiple threads, so all threads have access to the AtomicInteger. If the clients run in different processes, such a workaround cannot be used, though.&lt;/p&gt;</comment>
                            <comment id="12774321" author="mikem" created="Fri, 6 Nov 2009 17:21:44 +0000"  >&lt;p&gt;I would not be surprised if good performance gains could be gotten in this area, as I don&apos;t believe any optimization has happened.  The code definitely predates today&apos;s processors and multi-core machines.&lt;/p&gt;

&lt;p&gt;I agree with both your assessments.  &lt;/p&gt;

&lt;p&gt;Some work that could be done in this area:&lt;/p&gt;

&lt;p&gt;1) The system tries to limit the number of times that it goes single threaded by allocating&lt;br/&gt;
     a group of numbers every time it goes to update the system catalog.  This number&lt;br/&gt;
     is probably too low for a multicore insert as fast as it can system.  As a test you &lt;br/&gt;
     could try to just bump this number to make sure it helps your app.  A better derby &lt;br/&gt;
     fix would be to make the fix somehow more zero-admin.  Maybe by tracking how &lt;br/&gt;
     often the value is being updated and dynamically bump it up and down.  Up seems&lt;br/&gt;
     easy, not exactly sure how to make it go down.    The downside of a big number is&lt;br/&gt;
     that values are lost when the system shuts down.&lt;/p&gt;

&lt;p&gt;2) The current lock strategy is based on what was available from the lock manager&lt;br/&gt;
     when it was implemented.  There may be better options.   What the system really&lt;br/&gt;
     wants to do is to do an unlimited wait unless it is waiting on itself.  For a normal&lt;br/&gt;
     application that does not do system catalog queries the normal case is that a hit&lt;br/&gt;
     on this lock is not going to be a self deadlock.  So a quick fix might be to add a &lt;br/&gt;
     retry, or add a longer wait on the lock.  A best fix would be a new lock manager&lt;br/&gt;
     interfaces that allowed it to wait for as long as needed while insuring it was not&lt;br/&gt;
     waiting on parent transaction.&lt;/p&gt;</comment>
                            <comment id="12774331" author="rhillegas" created="Fri, 6 Nov 2009 17:49:43 +0000"  >&lt;p&gt;Hopefully, the solution will be something that we can re-use for sequence generators (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt;). As I read the SQL Standard, a sequence should &quot;normally&quot; not have any gaps but no guarantees are made and it is  hard to understand how  holes won&apos;t turn up since the sequence is not affected by rollbacks and the sequence is supposed to change monotonically in one direction or another.&lt;/p&gt;

&lt;p&gt;Pre-allocating a block of sequence numbers (Mike&apos;s solution #1) is attractive, particularly if we can release the unused ids when the database is brought down in an orderly fashion. I like the idea that the size of that block is self-tuning.&lt;/p&gt;</comment>
                            <comment id="12890463" author="bbergquist" created="Tue, 20 Jul 2010 22:34:12 +0100"  >&lt;p&gt;This bug is really kill us.  We have transaction rates of around 30 inserts/second now and some are done in parallel and now about every couple of days, the database server gets into this state.  I am working around by discontinuing using IDENTITY columns but that requires a long down time on the system to convert the database and this is a continuously up system so that is hard to come by.&lt;/p&gt;

&lt;p&gt;Any solution via a patch or compling derby myself would be greatly appreciated.  Much quicker to stop and drop in a new jar and restart than convert about 18 millon records that are using the identity column.&lt;/p&gt;
</comment>
                            <comment id="12890791" author="knutanders" created="Wed, 21 Jul 2010 18:43:13 +0100"  >&lt;p&gt;A mechanism for allocating sequence numbers without blocking other threads was developed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt;. If someone wants to work on a similar solution for identity columns, they can probably reuse much of that code.&lt;/p&gt;</comment>
                            <comment id="13039119" author="rhillegas" created="Wed, 25 May 2011 14:35:42 +0100"  >&lt;p&gt;If we re-use the mechanism from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt;, then we will probably see more holes in the lists of generated identity values. Holes will appear when the engine is bounced and some number of pre-allocated identity values are thrown away. I think this behavioral change would be ok for a maintenance release like 10.8.2. Other opinions?&lt;/p&gt;

&lt;p&gt;With sequences, the number of pre-allocated values is hard-coded to be 5. With a little effort, we could add an api to configure that number. I think it would be ok to use the same hard-coded number of pre-allocated values for identity columns, too. We can consider adding an api to configure this number after we gain experience with how pre-allocation behaves in the wild. Other opinions?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13039314" author="dagw" created="Wed, 25 May 2011 21:25:34 +0100"  >&lt;p&gt;The change seems a good way forward. I presume that with the API/knobs, you could get the present behavior?&lt;br/&gt;
I am somewhat hesitant to OK the behavior change in a minor release, though. Choosing a default for the knob to mimic the old behavior would be fine of course, but that might not be the most sensible default going forward. Perhaps it would be OK to change the default to a more sensible value in 10.9? This would allow us to introduce the optimizations for those who need it in 10.8.2.&lt;/p&gt;</comment>
                            <comment id="13046131" author="rhillegas" created="Wed, 8 Jun 2011 19:49:08 +0100"  >&lt;p&gt;Attaching derby-4437-01-aj-allTestsPass.diff. This patch replaces the old identity column management with a scheme based on the sequence generators which were introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-712&quot; title=&quot;Support for sequences&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-712&quot;&gt;&lt;del&gt;DERBY-712&lt;/del&gt;&lt;/a&gt;. Regression tests passed for me. More tests need to be written, edge cases need to be stressed, and some dead code may need to be pruned out.&lt;/p&gt;

&lt;p&gt;This patch does the following:&lt;/p&gt;

&lt;p&gt;1) Introduces a new subclass of SequenceUpdater to manage identity values in SYSCOLUMNS rows.&lt;/p&gt;

&lt;p&gt;2) Removes the old identity management and replaces it with calls to the new SequenceUpdater.&lt;/p&gt;

&lt;p&gt;3) No persistent forms were changed so this patch should not affect the user&apos;s ability to upgrade and soft-downgrade.&lt;/p&gt;

&lt;p&gt;The SYSCOLUMNS SequenceUpdater behaves just like the SYSSEQUENCES one: It pre-allocates ranges of identity values. The number of pre-allocated values is hard-coded to the same number of pre-allocated values used for sequences (5).&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;Introduces a SequenceUpdater to manage SYSCOLUMNS. There was already a SequenceUpdater to manage SYSSEQUENCES.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java&lt;/p&gt;

&lt;p&gt;Logic which computes max/min bounds for integer types was moved into a subroutine for re-use.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;/p&gt;

&lt;p&gt;An extra argument was added to DataDictionary.getCurrentValueAndAdvance() so that the method can be used for both sequences and identity columns. Some obsolete methods were removed.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/reference/Property.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Added cache management for identity SequenceUpdaters.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java&lt;/p&gt;

&lt;p&gt;Some unused methods were removed. The array of RowLocations was left untouched and is still constructed by InsertNode. Leaving this array intact avoids the need to change the serialized form of this ConstantAction. That eliminates soft-upgrade/soft-downgrade problems.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;/p&gt;

&lt;p&gt;Replaced the old identity management with calls to the SequenceUpdaters cached in the DataDictionary.&lt;/p&gt;

&lt;p&gt;-----------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java&lt;/p&gt;

&lt;p&gt;The existing test needed some tweaking:&lt;/p&gt;

&lt;p&gt;1) The preallocation of identity ranges changes the results of queries against SYSCOLUMNS.&lt;/p&gt;

&lt;p&gt;2) Fewer locks are held now, changing the results of queries against the lock vti.&lt;/p&gt;

&lt;p&gt;3) The biggest value in a BIGINT identity column used to be (Long.MAX_VALUE - 1). Now it is Long.MAX_VALUE, as it should be. I don&apos;t understand why a wrong result was canonized in AutoIncrementTest.&lt;/p&gt;</comment>
                            <comment id="13048718" author="rhillegas" created="Mon, 13 Jun 2011 20:05:58 +0100"  >&lt;p&gt;Committed derby-4437-01-aj-allTestsPass.diff to trunk at subversion revision 1135226.&lt;/p&gt;</comment>
                            <comment id="13049347" author="rhillegas" created="Tue, 14 Jun 2011 20:14:27 +0100"  >&lt;p&gt;Attaching derby-4437-02-ac-alterTable-bulkImport-deferredInsert.diff. This patch adds additional tests to verify that ALTER TABLE, import, and deferred INSERT work as spec&apos;d with the new generator-based machinery for identity columns. Committed at subversion revision 1135754.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_4437_2.dat&lt;/p&gt;</comment>
                            <comment id="13049768" author="rhillegas" created="Wed, 15 Jun 2011 14:45:00 +0100"  >&lt;p&gt;Attaching derby-4437-03-aa-upgradeTest.diff. This patch adds an upgrade test case to verify that identity columns function correctly across upgrade and downgrade. Committed at subversion revision 1136036.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_9.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java&lt;/p&gt;</comment>
                            <comment id="13049836" author="knutanders" created="Wed, 15 Jun 2011 17:12:53 +0100"  >&lt;p&gt;Thanks for working on this issue, Rick. I haven&apos;t looked at the code yet, but I wrote a small performance test (see the attached Java class D4437PerfTest.java) and ran an experiment on a Sun Fire T2000 machine with 32 cores.&lt;/p&gt;

&lt;p&gt;The test runs multi-threaded inserts, each thread has its own table to avoid lock/latch conflicts. I just now realized that one table per thread is probably not the ideal test, since the problem reported here actually was lock contention... I&apos;ll update the test and rerun it, but I&apos;m posting the results from this first run anyways (see the graph in insertperf.png), as the results are quite interesting. Even in this test with no contention, head of trunk is able to insert rows almost twice as fast as 10.8.1.2 when the table has an identity column. Presumably this is because we don&apos;t need to access the system tables so often?&lt;/p&gt;</comment>
                            <comment id="13049921" author="rhillegas" created="Wed, 15 Jun 2011 18:54:16 +0100"  >&lt;p&gt;Thanks for running that performance test and posting the graph, Knut. Your theory about the performance boost sounds good to me.&lt;/p&gt;</comment>
                            <comment id="13050371" author="knutanders" created="Thu, 16 Jun 2011 13:09:39 +0100"  >&lt;p&gt;Here&apos;s another attempt on a performance test for this improvement. I modified the test to use a set of five tables, all with an identity column. Each thread inserts one row into each of the tables and then commits. This is closer to the scenario in which I saw this problem when I reported the issue. Since each transaction performs multiple inserts, escalating the locks on the system table from the nested transaction to the parent transaction will have a higher likelihood of causing contention than in the previous test which committed for every single insert. Also, since all threads work on the same set of tables, there should be more lock conflicts in the system table.&lt;/p&gt;

&lt;p&gt;This new graph (insertperf2.png) shows the results from the test. As expected, the difference between 10.8 and trunk is bigger than it was in the previous test, but not dramatically. With 10.8, Derby essentially only allows one thread to run at a time, so adding more threads doesn&apos;t increase the throughput. With trunk, the throughput reaches its maximum at three threads. That&apos;s a bit disappointing, given that the machine has 32 cores, but it might be hitting some other bottleneck, most likely disk I/O.&lt;/p&gt;

&lt;p&gt;For reference, I included results from running the same test without having an identity column in the tables, to see how well we could expect the test to scale if generating the identity values was eliminated completely as a bottleneck. That test maxed out around five threads, so only scaling up to three threads when we have identity columns doesn&apos;t sound unreasonable for this kind of load after all.&lt;/p&gt;

&lt;p&gt;I also experimented with the derby.language.identityGeneratorCacheSize property, but that didn&apos;t seem to have any effect on the results (I tried 10, 50, 100, as well as the default 32).&lt;/p&gt;</comment>
                            <comment id="13050381" author="rhillegas" created="Thu, 16 Jun 2011 13:28:12 +0100"  >&lt;p&gt;Thanks for running those experiments and for the analysis, Knut. There is one other knob which might be adjusted: the size of the pre-allocated identity range. This is hardcoded as SequenceGenerator.DEFAULT_PREALLOCATION_COUNT. Changing that knob did not have much affect on the experiments I ran on sequence generators. Thanks.&lt;/p&gt;</comment>
                            <comment id="13051169" author="knutanders" created="Fri, 17 Jun 2011 17:24:40 +0100"  >&lt;p&gt;Thanks Rick. I played with that setting and found that increasing it had a good effect on the scalability. See the attached graph, prealloc.png. In this experiment, the scalability improved with increasing pre-allocation count up to 160, but doubling it to 320 didn&apos;t improve it further.&lt;/p&gt;

&lt;p&gt;Is there a downside with increasing this parameter?&lt;/p&gt;</comment>
                            <comment id="13051187" author="rhillegas" created="Fri, 17 Jun 2011 17:46:38 +0100"  >&lt;p&gt;Hi Knut. Those are impressive results. The only downside I see to increasing this parameter is that we would leak more unused values every time the database shuts down. If that worried us, we could try to flush the current sequence value to disk on shutdown. What are your thoughts?&lt;/p&gt;</comment>
                            <comment id="13051193" author="rhillegas" created="Fri, 17 Jun 2011 17:56:50 +0100"  >&lt;p&gt;I think that we will leak unused values every time the caches are invalidated and thrown away. I think that happens when the user does DDL too.&lt;/p&gt;</comment>
                            <comment id="13051229" author="rhillegas" created="Fri, 17 Jun 2011 19:03:19 +0100"  >&lt;p&gt;People may want to configure the size of the preallocated ranges for sequences (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5151&quot; title=&quot;Don&amp;#39;t leak unused identity/sequence values on abnormal exit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5151&quot;&gt;DERBY-5151&lt;/a&gt;). Being able to set the preallocation size to 1 will give people the power to eliminate holes in sequences that occur when you shut down the database and throw away the unused part of the preallocated range. That in turn, will give people a workaround if they can&apos;t tolerate the holes introduced by the discarded ranges. It may also be useful to tune the size of the preallocated range depending on how many processors a machine has.&lt;/p&gt;

&lt;p&gt;To let people configure the size of preallocated ranges, I propose that we introduce a new family of Derby properties:&lt;/p&gt;

&lt;p&gt;  derby.sequence.cache.size.$UUID=$number&lt;/p&gt;

&lt;p&gt;  where&lt;/p&gt;

&lt;p&gt;     $UUID is the uuid of a sequence or the uuid of a table with an identity column&lt;/p&gt;

&lt;p&gt;     $number is a non-negative number&lt;/p&gt;

&lt;p&gt;If this property is not specified, it defaults to a hardcoded number. Currently that number is 5, but it could be 160 (see Knut&apos;s experiments). Maybe the default can be some function of the number of processors on the machine (if we can figure that out).&lt;/p&gt;

&lt;p&gt;The property will be retrieved by PropertyUtil.getServiceProperty() when the generator is created. This will give it the following behaviors:&lt;/p&gt;

&lt;p&gt;1) It can be set at the system, database, and derby.properties levels.&lt;/p&gt;

&lt;p&gt;2) It is semi-static. That is, it won&apos;t change on the fly if you update the system or database properties. However, if you change the property and then do something which throws away the cache, then the new value of the property will be used when the system recreates the cache. The cache is thrown away at database shutdown and when DDL is run.&lt;/p&gt;</comment>
                            <comment id="13051238" author="knutanders" created="Fri, 17 Jun 2011 19:27:08 +0100"  >&lt;p&gt;So if we could write the sequence value to disk on eviction from the sequence cache and on shutdown, we&apos;d only leak values on an unclean shutdown/crash, right? (And on transaction rollback, but that could happen even before these changes.) The sequence caches are implemented using the generic cache manager, so it shouldn&apos;t be too difficult to implement it, since writing to disk on eviction and shutdown is exactly what the page cache and container cache do. Leaking a bigger chunk of values on unclean shutdown sounds acceptable to me, since applications will have to be prepared for holes in any case.&lt;/p&gt;</comment>
                            <comment id="13051257" author="rhillegas" created="Fri, 17 Jun 2011 20:04:45 +0100"  >&lt;p&gt;Hi Knut. Your conclusions sound correct to me. Thanks.&lt;/p&gt;</comment>
                            <comment id="13051264" author="mikem" created="Fri, 17 Jun 2011 20:16:40 +0100"  >&lt;p&gt;Another option that might fit zero admin better is to have the system dynamically size the cache.  Making it bigger as it notices&lt;br/&gt;
that the cache is getting used up in a &quot;short&quot; amount of time and/or sizing it back down as activity slows.   I&apos;d rather see something like this than have the users tuning the cache size bigger.  &lt;/p&gt;

&lt;p&gt;Figuring out how to leak less by doing work on eviction/shutdown seems like a good idea, if it does not have too big a performance&lt;br/&gt;
 impact.   On shutdown does not seem like a problem to me.  I don&apos;t have a good feel on how often the cache eviction case happens.  &lt;/p&gt;</comment>
                            <comment id="13051269" author="mikem" created="Fri, 17 Jun 2011 20:18:08 +0100"  >&lt;p&gt;From the tests can you come up with what the current overhead is for allocating a chunk of sequence numbers on whatever hardware you are testing on?&lt;/p&gt;</comment>
                            <comment id="13051310" author="knutanders" created="Fri, 17 Jun 2011 21:27:22 +0100"  >&lt;p&gt;One way to estimate the overhead of allocating a chunk of sequence numbers is to look at the numbers in the single-threaded case. When allocating a chunk per insert (what we do in 10.8), there are ~11000 transactions. When allocating a chunk every five insert (current trunk), the number is ~20000. As the frequency of allocations approaches 0 (1/160 and 1/320), the number of transactions seems to stabilize around 27000. So it would seem that the allocation alone is more expensive than the rest of the insert operation.&lt;/p&gt;</comment>
                            <comment id="13052109" author="rhillegas" created="Mon, 20 Jun 2011 19:03:44 +0100"  >&lt;p&gt;Attaching derby-4437-04-aa-reclaimUnusedValuesOnShutdown.diff. This patch makes orderly shutdown reclaim unused, pre-allocated ranges of sequence/identity numbers. Tests passed cleanly for me.&lt;/p&gt;

&lt;p&gt;My first attempt to code this involved putting the reclamation call in DataDictionaryImpl.stop(). That turned out to be too late during orderly shutdown--by that time the LCC could not be found. This is my second attempt. The reclamation call is now in BasicDatabase.stop().&lt;/p&gt;

&lt;p&gt;I also noticed that the DataDictionary was already reclaiming unused ranges when DDL invalidated the caches. So we should not be leaking sequence numbers when we perform DDL.&lt;/p&gt;

&lt;p&gt;Nothing is done about unorderly shutdown. If the application fails to shutdown the database before exiting, then the engine will still leak unused sequence/identity numbers.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;/p&gt;

&lt;p&gt;Adds a new DataDictionary method: clearSequenceCaches(). This method makes the cached sequence/identity generators reclaim unused, pre-allocated values.&lt;/p&gt;


&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;/p&gt;

&lt;p&gt;During orderly shutdown, the Database module now calls the new DataDictionary method.&lt;/p&gt;


&lt;p&gt;--------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;Updates a test case to check that values don&apos;t leak during orderly shutdown.&lt;/p&gt;</comment>
                            <comment id="13052530" author="rhillegas" created="Tue, 21 Jun 2011 13:54:42 +0100"  >&lt;p&gt;Committed derby-4437-04-aa-reclaimUnusedValuesOnShutdown.diff at subversion revision 1137985.&lt;/p&gt;</comment>
                            <comment id="13052538" author="rhillegas" created="Tue, 21 Jun 2011 14:03:47 +0100"  >&lt;p&gt;With the previous checkin, the behavior of this improvement has changed. Now Derby no longer leaks unused sequence/identity values--provided that the database is shutdown in an orderly fashion before the VM exits. However,  holes will still appear in sequences and identity columns if you don&apos;t park your databases before the VM exits.&lt;/p&gt;

&lt;p&gt;Is the behavioral change narrow enough now that we think this work can be backported to the 10.8 branch?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="13052796" author="rhillegas" created="Tue, 21 Jun 2011 21:06:27 +0100"  >&lt;p&gt;Attaching derby-4437-05-aa-pluggablePreallocation.diff. This patch implements pluggable allocators for sequence/identity ranges so that customers can override Derby&apos;s default logic for determining how long the pre-allocated ranges should be. I am running tests now.&lt;/p&gt;

&lt;p&gt;This patch does the following:&lt;/p&gt;

&lt;p&gt;1) Introduces a new public api interface: SequencePreallocator. Customers can customize how they want to pre-allocate sequence/identity ranges by implementing their own SequencePreallocator and then pointing the following new Derby property  at it. The property can be set at the system, database, and derby.properties levels.&lt;/p&gt;

&lt;p&gt;  -Dderby.language.sequence.preallocator=MyRangeAllocator&lt;/p&gt;

&lt;p&gt;2) Supplies a default implementation of SequencePreallocator. For this first increment, the default implementation just specifies the range size used in 10.8 (5 values).&lt;/p&gt;

&lt;p&gt;In a follow-on patch, I will recode the default SequencePreallocator to implement what Mike suggested: The size of the range will keep growing until it reaches the limit that the application can handle. Over time the range may shrink again if the application needs fewer values. Hopefully, this will be good enough for a scalable out-of-the-box experience.&lt;/p&gt;

&lt;p&gt;Customers can write their own SequencePreallocators to do the following:&lt;/p&gt;

&lt;p&gt;1) Set the preallocation value to 1. This eliminates the leaking of preallocated values when the VM exits gracelessly--at the cost of losing the extra concurrency addressed by this JIRA.&lt;/p&gt;

&lt;p&gt;2) Set the preallocation value to some other, larger, hardcoded value.&lt;/p&gt;

&lt;p&gt;3) Optimize preallocation to handle spikes: don&apos;t ever shrink the size of the range, just grow it as necessary.&lt;/p&gt;



&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/iapi/reference/Property.java&lt;br/&gt;
A      java/engine/org/apache/derby/catalog/SequencePreallocator.java&lt;br/&gt;
M      tools/javadoc/publishedapi.ant&lt;/p&gt;

&lt;p&gt;New property and the interface which customers can implement in order to control how Derby pre-allocates ranges.&lt;/p&gt;


&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;/p&gt;

&lt;p&gt;New and changed messages.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/SequenceGenerator.java&lt;br/&gt;
A      java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;Replaces the old hard-coded range allocation with the new pluggable scheme.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;/p&gt;

&lt;p&gt;Corrects a typo here.&lt;/p&gt;

&lt;p&gt;---------------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;New tests to verify the behavior of custom SequencePreallocators.&lt;/p&gt;</comment>
                            <comment id="13053219" author="rhillegas" created="Wed, 22 Jun 2011 13:40:15 +0100"  >&lt;p&gt;Tests passed cleanly for me against derby-4437-05-aa-pluggablePreallocation.diff except for two heisenbugs which I see on Mac OSX from time to time: testPing and testInvalidLDAPServerConnectionError (see derby-5110 and derby-4869). Committed at subversion revision 1138434.&lt;/p&gt;</comment>
                            <comment id="13054003" author="kmarsden" created="Thu, 23 Jun 2011 18:51:19 +0100"  >&lt;p&gt; In general I don&apos;t think people shut down on exiting the vm (although I wish they would).  So what we are offering is change in behavior but a workaround for it which at the same time encourages good Derby practices. That is tempting but I have heard quite  a few embedded products say that they do not have control of the vm at exit time, so can&apos;t shutdown.  Also I think we need to consider surprises that comes up on upgrade in the field we need a non-code solution, so I think we should backport and leave it on by default,  but add a property to turn it off. The more conservative  option might be to have it it off by default on 10.8, but I think the fix is  valuable enough to keep it on and take the risk.&lt;/p&gt;
</comment>
                            <comment id="13054008" author="mikem" created="Thu, 23 Jun 2011 19:08:21 +0100"  >&lt;p&gt;I would be ok if someone backported this to 10.8.  As I understand it the current  performance is at a level for some applications which I would&lt;br/&gt;
consider making the feature unusable without the fix.  It may increase gaps, but we should continue to document that the feature in no way&lt;br/&gt;
guarantees no gaps.  Any application relying on no gaps is a bug waiting to happen whether we backport this change or not.  In general I don&apos;t&lt;br/&gt;
like seeing improvements backported, but performance issues are sometimes ok with me when they cause big enough problems.&lt;/p&gt;

&lt;p&gt;For me I lean toward the behavior change backport being ok for 10.8 as I would guess there are not a lot of applications yet out there on this &lt;br/&gt;
release.  The upcoming release will be available to all users as a supported apache release.  I don&apos;t think I would backport it farther than&lt;br/&gt;
10.8.&lt;/p&gt;</comment>
                            <comment id="13054531" author="rhillegas" created="Fri, 24 Jun 2011 17:31:15 +0100"  >&lt;p&gt;Attaching a couple files:&lt;/p&gt;

&lt;p&gt;1) derby-4437-06-aa-selfTuning - This is an experimental patch, not intended for commit. This patch adds a crude heuristic to the default range preallocator. The heuristic attempts to tune the size of the preallocation range based on the rate at which identity values are being requested.&lt;/p&gt;

&lt;p&gt;2) Experiments_4437.html - This is a webpage of results from some experiments which I ran, measuring the throughput of Knut&apos;s experiment with various hardcoded range lengths and with the crude heuristic.&lt;/p&gt;

&lt;p&gt;Based on my experiments, I believe that I can offer the following modest conclusions:&lt;/p&gt;

&lt;p&gt;i) I don&apos;t know  how to write useful self-tuning logic which will accomplish what Mike wants. This feels like a research project to me. Someone else may want to pick up this project but I do not feel I can spend any more time on it.&lt;/p&gt;

&lt;p&gt;ii) Derby is able to keep boosting the throughput as you keep boosting the size of the preallocated range. Derby will keep delivering better throughput  as you boost the size of that range well past your tolerance for leaked values.&lt;/p&gt;

&lt;p&gt;iii) I can&apos;t offer the customer anything better than a knob which declares how many values the app is willing to leak.&lt;/p&gt;

&lt;p&gt;I can do the following additional work on this issue. Let me know if you think I should do this work:&lt;/p&gt;

&lt;p&gt;A) Add a knob so that apps can tune the size of the default preallocated range.&lt;/p&gt;

&lt;p&gt;B) Change the current default range size of 5 to some other number. If you think this is useful, let me know what a better number would be.&lt;/p&gt;

&lt;p&gt;Devising self-tuning logic sounds like an interesting project but one which should happen under another JIRA.&lt;/p&gt;</comment>
                            <comment id="13054576" author="mikem" created="Fri, 24 Jun 2011 18:48:26 +0100"  >&lt;p&gt;Here are my thoughts.  The work so far looks great and I would be fine seeing it checked in as is and backported.  I think it is &lt;br/&gt;
very reasonable to log a JIRA for the tunable aspect and hope someone is interested in that work.  I actually think that is better as I would&lt;br/&gt;
rather see the tunable aspect go into only trunk and a new release rather than backported as a bug fix - since as you point out it is experimental.&lt;br/&gt;
It would be great if we could have a discussion there on possible ideas for an algorithm there.  I actually think the project could be done by&lt;br/&gt;
a newcomer as the coding would be very localized once you check in, the hard part is just coding the tuning stuff in one place.  Might have&lt;br/&gt;
to do some new work to have interesting inputs to the algorithm.&lt;/p&gt;

&lt;p&gt;It may also be worth logging a separate improvement JIRA if one does not exist to solve the lost range on JIRA crash.  This is not a simple problem, and may&lt;br/&gt;
not be worth effort but might as well create a place holder.  It would somehow probably need new log records and specialized recovery of those during crash&lt;br/&gt;
recovery.  It is complicated in that it is logical work that needs to be done above store but currently only store work is done during crash recovery.  Another &lt;br/&gt;
option would be some brute force work to actually scan the tables on recovery and find the &quot;highest&quot; and reset the range before an application came in.  If&lt;br/&gt;
there are indexes on these things this becomes much faster.  Some of this work is similar to the problem we have with post commit space reclamation &lt;br/&gt;
work that is also lost when a crash happens.&lt;/p&gt;

&lt;p&gt;The following would be my votes on the changes you mentioned you are willing to do, but would not argue strongly with opposing views:&lt;/p&gt;

&lt;p&gt;o if a knob is added so a user could backtrack if they did not like losing ranges, then I would bump the default to something like 20, given&lt;br/&gt;
   knut&apos;s experiments and rick&apos;s notes on other databases defaults.  I would backport this change to 10.8, again only if knob was included.  &lt;br/&gt;
   Given how fast processors are nowadays adding&lt;br/&gt;
   a commit I/O for every 5 inserts seems a high price, when the system is doing 900 inserts a second.&lt;/p&gt;

&lt;p&gt;o If no knob I think I would leave default of 5 for backport to 10.8 and bump default to 20 in trunk.  We could give notice in 10.8 release that upcoming&lt;br/&gt;
   10.9 would bump this default.&lt;/p&gt;

&lt;p&gt;o Using the properties seems like complicated syntax to me.  I assume using &quot;alter table&quot; is not possible as there is no standard in this area.  What would people&lt;br/&gt;
   think about using a system procedure instead of a property.  That way the call could simply take the standard application and table name arguments, and&lt;br/&gt;
   would require the usual alter table database permissions to set.  Underneath the procedure call it should just call an internal alter table call.  &lt;/p&gt;</comment>
                            <comment id="13054594" author="rhillegas" created="Fri, 24 Jun 2011 19:09:46 +0100"  >&lt;p&gt;For the record, here are the default lengths of the preallocated ranges for sequences in some other databases. These are the maximum number of values which are leaked if the database crashes:&lt;/p&gt;

&lt;p&gt;Oracle: 20&lt;br/&gt;
Oracle RDB: 20&lt;br/&gt;
DB2: 20&lt;br/&gt;
Postgres: 1&lt;/p&gt;

&lt;p&gt;As discussed on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5151&quot; title=&quot;Don&amp;#39;t leak unused identity/sequence values on abnormal exit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5151&quot;&gt;DERBY-5151&lt;/a&gt;, there is no SQL Standard language for tuning the size of these ranges although the various non-standard approaches are all pretty similar.&lt;/p&gt;</comment>
                            <comment id="13054637" author="rhillegas" created="Fri, 24 Jun 2011 20:21:27 +0100"  >&lt;p&gt;Thanks for the quick response, Mike. A couple comments:&lt;/p&gt;

&lt;p&gt;o I have changed the title of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5151&quot; title=&quot;Don&amp;#39;t leak unused identity/sequence values on abnormal exit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5151&quot;&gt;DERBY-5151&lt;/a&gt; to indicate that it covers the issue of leaking identity values on abnormal exit.&lt;/p&gt;

&lt;p&gt;o Concerning the knob: A previous checkin introduced the following new Derby property. Currently, it can be set to the name of a class which provides custom preallocation logic. The custom preallocator can give you different range sizes per sequence/identity. We could also let the property be set to a number. If set to a number, then that would be the size of the preallocation range and it would apply to all sequences and identity columns:&lt;/p&gt;

&lt;p&gt;    derby.language.sequence.preallocator&lt;/p&gt;

&lt;p&gt;o I agree that we should not introduce an additional property per sequence/identity.&lt;/p&gt;

&lt;p&gt;o Additional, non-standard SQL language would be acceptable to me. Other databases handle this issue with very simliar language--the differences seem very slight to me. See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5151&quot; title=&quot;Don&amp;#39;t leak unused identity/sequence values on abnormal exit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5151&quot;&gt;DERBY-5151&lt;/a&gt;. With a little patience, I think we could agree on some almost standard language. A nice feature of the language-based approach is that dblook would reconstruct the knob settings.&lt;/p&gt;

&lt;p&gt;o A database procedure would work too. However, the knob settings would be lost when you exported/imported the database. This defect also affects the currently implemented workaround.&lt;/p&gt;

&lt;p&gt;o I don&apos;t want to put any effort into the procedure or the SQL language approaches at this time. But someone else is welcome to pick this up.&lt;/p&gt;</comment>
                            <comment id="13054652" author="mikem" created="Fri, 24 Jun 2011 21:05:43 +0100"  >&lt;p&gt;I would like to get a community consensus on the &quot;knob&quot; issue before this issue is backported to 10.8.  &lt;/p&gt;</comment>
                            <comment id="13054730" author="kmarsden" created="Fri, 24 Jun 2011 23:55:44 +0100"  >&lt;p&gt;Regarding the knob I think derby.language.sequence.preallocator taking a number that is the size of the range would be fine. I am not totally clear if this is something that exists already or is a suggestion for a solution.&lt;/p&gt;
</comment>
                            <comment id="13055494" author="rhillegas" created="Mon, 27 Jun 2011 13:23:25 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;Right now, derby.language.sequence.preallocator can be set to the name of a class which customizes the preallocation behavior of a sequence/identity. It would require a small amount of extra work to let this property also be set to a number. Thanks.&lt;/p&gt;</comment>
                            <comment id="13056626" author="rhillegas" created="Tue, 28 Jun 2011 17:50:11 +0100"  >&lt;p&gt;No further opinions have surfaced. I propose to make the following changes:&lt;/p&gt;

&lt;p&gt;o Increase the size of the default preallocated range from 5 to 20 to match the behavior of other databases.&lt;/p&gt;

&lt;p&gt;o Change the default preallocator so that setting derby.language.sequence.preallocator to a positive integer will cause that number to be the size of the default preallocated ranges for both sequences and identity columns.&lt;/p&gt;

&lt;p&gt;o Backport the accumulated work on this issue to 10.8.&lt;/p&gt;

&lt;p&gt;o Supply a release note which describes the following behavior changes for 10.8.2:&lt;/p&gt;

&lt;p&gt;1) Throughput/concurrency of applications with identity columns should increase.&lt;/p&gt;

&lt;p&gt;2) Sequences and identity columns will leak up to 20 unused values apiece on abnormal shutdown.&lt;/p&gt;

&lt;p&gt;3) Applications can plug the leaks by performing orderly database shutdowns.&lt;/p&gt;

&lt;p&gt;4) Applications can revert to the old identity behavior by setting derby.language.sequence.preallocator=1. This will also reduce the concurrency of sequences.&lt;/p&gt;

&lt;p&gt;5) Applications can change the concurrency and leakage behavior of all sequences and identities by setting derby.language.sequence.preallocator to some other positive number.&lt;/p&gt;

&lt;p&gt;6) Applications can further customize the concurrency (and leakage size) of individual sequences and identities by setting derby.language.sequence.preallocator equal to the name of a user-written class which implements org.apache.derby.catalog.SequencePreallocator.&lt;/p&gt;

&lt;p&gt;If this does not sound like a good plan, please let me know. Thanks.&lt;/p&gt;</comment>
                            <comment id="13056650" author="kmarsden" created="Tue, 28 Jun 2011 18:25:39 +0100"  >&lt;p&gt;That sounds great to me. Thanks Rick for taking such care with the backport.&lt;/p&gt;</comment>
                            <comment id="13057028" author="knutanders" created="Wed, 29 Jun 2011 07:27:50 +0100"  >&lt;p&gt;+1 Sounds like a good plan to me too.&lt;/p&gt;</comment>
                            <comment id="13057231" author="dagw" created="Wed, 29 Jun 2011 14:45:41 +0100"  >&lt;p&gt;+1 from me, too.&lt;/p&gt;</comment>
                            <comment id="13057316" author="rhillegas" created="Wed, 29 Jun 2011 17:01:16 +0100"  >&lt;p&gt;Attaching derby-4437-07-ac-biggerDefault_propertyCanBeInteger.diff. This patch boosts the default preallocation size from 5 to 20. This patch also allows derby.language.sequence.preallocator to be set to an integer, which then becomes the default preallocation size. Regression tests passed cleanly for me on a previous version of this patch, except for known Heisenbugs and for a diff in AlterTableTest, which is corrected in this version of the patch.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;/p&gt;

&lt;p&gt;The changes described above.&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;


&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java&lt;/p&gt;

&lt;p&gt;Fixed to account for the new preallocation default.&lt;/p&gt;

&lt;p&gt;--------&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;/p&gt;

&lt;p&gt;New test case for setting derby.language.sequence.preallocator to be an integer.&lt;/p&gt;</comment>
                            <comment id="13057366" author="rhillegas" created="Wed, 29 Jun 2011 18:49:24 +0100"  >&lt;p&gt;Attaching a release note for this issue.&lt;/p&gt;</comment>
                            <comment id="13057775" author="knutanders" created="Thu, 30 Jun 2011 12:59:27 +0100"  >&lt;p&gt;The release note looks good. Thanks, Rick!&lt;/p&gt;

&lt;p&gt;The patch looks fine too. A couple of nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would be good to add a couple of line breaks to the for loop in the isNumber() method to improve readability. Or perhaps just remove the method altogether and change the logic in makePreallocator() to:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;try &lt;/p&gt;
{
    return new SequenceRange(Integer.parseInt(className));
}
&lt;p&gt; catch (NumberFormatException nfe) &lt;/p&gt;
{
    return (SequencePreallocator) Class.forName(className).newInstance();
}

&lt;p&gt;?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I didn&apos;t quite understand this change:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+            boolean caughtException = true;&lt;br/&gt;
             try &lt;/p&gt;
{
                 updater.getCurrentValueAndAdvance();
-                fail( &quot;Expected to catch cycle exception.&quot; );
+                caughtException = false;
             }
&lt;p&gt;             catch (Exception e)&lt;br/&gt;
             {}&lt;br/&gt;
+            if ( !caughtException )&lt;br/&gt;
+            &lt;/p&gt;
{
+                fail( &quot;Expected to catch cycle exception.&quot; );
+            }

&lt;p&gt;I&apos;m not able to find out what&apos;s changed here (except that the original code looked more concise). Did I miss something?&lt;/p&gt;</comment>
                            <comment id="13057798" author="rhillegas" created="Thu, 30 Jun 2011 13:50:06 +0100"  >&lt;p&gt;Thanks for the quick review, Knut. I am attaching derby-4437-07-ad-biggerDefault_propertyCanBeInteger.diff, a new version which addresses your comments:&lt;/p&gt;

&lt;p&gt;1) I added some newlines to SequenceUpdater.isNumber() to improve readability.&lt;/p&gt;

&lt;p&gt;2) I reverted the confusing changes to SequenceGeneratorTest.vetBump(). They were cruft left over from an experiment to figure out why the revised test took so long to run.&lt;/p&gt;</comment>
                            <comment id="13057823" author="knutanders" created="Thu, 30 Jun 2011 14:47:50 +0100"  >&lt;p&gt;Thanks. The new patch looks good. +1&lt;/p&gt;</comment>
                            <comment id="13057878" author="rhillegas" created="Thu, 30 Jun 2011 16:20:54 +0100"  >&lt;p&gt;Thanks, Knut. Committed derby-4437-07-ad-biggerDefault_propertyCanBeInteger.diff at subversion revision 1141567.&lt;/p&gt;</comment>
                            <comment id="13057963" author="rhillegas" created="Thu, 30 Jun 2011 19:13:43 +0100"  >&lt;p&gt;Backported the following patches from trunk to the 10.8 branch. Tests passed cleanly for me. Committed to 10.8 branch at subversion revision 1141645:&lt;/p&gt;

&lt;p&gt;1135226 derby-4437-01-aj-allTestsPass.diff&lt;br/&gt;
1135754 derby-4437-02-ac-alterTable-bulkImport-deferredInsert.diff&lt;br/&gt;
1137985 derby-4437-04-aa-reclaimUnusedValuesOnShutdown.diff&lt;br/&gt;
1138434 derby-4437-05-aa-pluggablePreallocation.diff&lt;br/&gt;
1141567 derby-4437-07-ad-biggerDefault_propertyCanBeInteger.diff&lt;/p&gt;

&lt;p&gt;The following patches were NOT backported:&lt;/p&gt;

&lt;p&gt;1136036 derby-4437-03-aa-upgradeTest.diff (10.9-specific upgrade test)&lt;br/&gt;
              derby-4437-06-aa-selfTuning (Uncommitted, experimental patch)&lt;/p&gt;


&lt;p&gt;In a follow-on patch, I would like to write a 10.8.2-specific upgrade test to verify the behavior of soft-(up/down)grade between 10.8.1 and 10.8.2.&lt;/p&gt;

&lt;p&gt;This patch touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/storeless/org/apache/derby/impl/storeless/EmptyDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/BaseActivation.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/InsertConstantAction.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SequenceGenerator.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java&lt;br/&gt;
A  +   java/engine/org/apache/derby/impl/sql/catalog/SequenceRange.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/catalog/SequenceUpdater.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/dictionary/SequenceDescriptor.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/reference/Property.java&lt;br/&gt;
A  +   java/engine/org/apache/derby/catalog/SequencePreallocator.java&lt;br/&gt;
M      java/engine/org/apache/derby/loc/messages.xml&lt;br/&gt;
M      java/shared/org/apache/derby/shared/common/reference/SQLState.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AlterTableTest.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/AutoIncrementTest.java&lt;br/&gt;
A  +   java/testing/org/apache/derbyTesting/functionTests/tests/lang/t_4437_2.dat&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/SequenceGeneratorTest.java&lt;br/&gt;
M      tools/javadoc/publishedapi.ant&lt;/p&gt;</comment>
                            <comment id="13058582" author="rhillegas" created="Fri, 1 Jul 2011 15:52:31 +0100"  >&lt;p&gt;Bumped version on 10.8 branch to 10.8.1.6 so that upgrade testing can tell which distributions contain the work done on this issue.&lt;/p&gt;</comment>
                            <comment id="13058614" author="knutanders" created="Fri, 1 Jul 2011 17:00:18 +0100"  >&lt;p&gt;What kind of problem did the bumping of the version number solve? The only 10.8 release used in the upgrade tests is 10.8.1.2, which already has a version number distinct from 10.8.1.5.&lt;/p&gt;</comment>
                            <comment id="13058617" author="rhillegas" created="Fri, 1 Jul 2011 17:07:42 +0100"  >&lt;p&gt;Hi Knut,&lt;/p&gt;

&lt;p&gt;It hasn&apos;t caused a problem yet because I haven&apos;t checked in any tests which are sensitive to the distinction between 10.8.1.2 and 10.8.1.6. I am writing those tests now. Thanks.&lt;/p&gt;</comment>
                            <comment id="13058683" author="rhillegas" created="Fri, 1 Jul 2011 19:09:27 +0100"  >&lt;p&gt;Attaching derby-4437-08-aa-10.8upgrade.diff. This patch adds more upgrade tests for the changed behavior of  sequences and identity columns. Committed at subversion revision 1142013.&lt;/p&gt;

&lt;p&gt;I ran the upgrade tests against trunk, upgrading from the following versions:&lt;/p&gt;

&lt;p&gt;10.5.3.0&lt;br/&gt;
10.6.1.0&lt;br/&gt;
10.6.2.1&lt;br/&gt;
10.7.1.1&lt;br/&gt;
10.8.1.2&lt;br/&gt;
10.8.1.6&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_8_2.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeChange.java&lt;/p&gt;</comment>
                            <comment id="13058748" author="rhillegas" created="Fri, 1 Jul 2011 20:56:37 +0100"  >&lt;p&gt;Ported 1142013 from trunk to 10.8 branch at subversion revision 1142052.&lt;/p&gt;</comment>
                            <comment id="13064077" author="rhillegas" created="Tue, 12 Jul 2011 20:14:54 +0100"  >&lt;p&gt;Resolving this issue because I don&apos;t plan to any more work on it. Follow-on tasks have been created and linked to this issue.&lt;/p&gt;</comment>
                            <comment id="13249885" author="rhillegas" created="Mon, 9 Apr 2012 16:43:17 +0100"  >&lt;p&gt;Re-opening this issue. The concurrency improvements were backed out of the trunk by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5687&quot; title=&quot;Back out the concurrency improvements for identity columns introduced by derby-4437&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5687&quot;&gt;&lt;del&gt;DERBY-5687&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13249886" author="rhillegas" created="Mon, 9 Apr 2012 16:43:42 +0100"  >&lt;p&gt;Unassigning myself from this issue.&lt;/p&gt;</comment>
                            <comment id="13253433" author="rhillegas" created="Fri, 13 Apr 2012 15:58:06 +0100"  >&lt;p&gt;A next attempt to improve the concurrency of identity columns could build on Mike&apos; suggestion on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5493&quot; title=&quot;Same value returned by successive calls to a sequence generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5493&quot;&gt;&lt;del&gt;DERBY-5493&lt;/del&gt;&lt;/a&gt; that we create an internal sequence generator (represented in SYSSEQUENCES) for every identity column. Here are some ideas about this approach:&lt;/p&gt;

&lt;p&gt;1) I think that we could use SYSCOLUMNS.COLUMNDEFAULTID to hold the uuid of the internal sequence (SYSSEQUENCES.SEQUENCEID). I think this should be ok because you can&apos;t declare a default value for an identity column. This would make it relatively easy to find the internal sequence backing an identity column.&lt;/p&gt;

&lt;p&gt;2) We could add a SYSCS_UTIL.PEEK_AT_IDENTITY() function to retrieve the instantaneous current value of the identity column. This would be similar to the SYSCS_UTIL.PEEK_AT_SEQUENCE() function introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5493&quot; title=&quot;Same value returned by successive calls to a sequence generator.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5493&quot;&gt;&lt;del&gt;DERBY-5493&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13253436" author="rhillegas" created="Fri, 13 Apr 2012 16:00:09 +0100"  >&lt;p&gt;Linking to derby-5493 because the discussion on that issue may inform a next attempt to improve the concurrency of identity columns.&lt;/p&gt;</comment>
                            <comment id="13968403" author="rhillegas" created="Mon, 14 Apr 2014 15:47:26 +0100"  >&lt;p&gt;Closing this bug because it now duplicates &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6542&quot; title=&quot;Improve the concurrency of identity columns by using SYS.SYSSEQUENCES&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6542&quot;&gt;&lt;del&gt;DERBY-6542&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12522847">DERBY-5408</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12512234">DERBY-5307</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12523651">DERBY-5422</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12530574">DERBY-5493</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12325742">DERBY-712</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12523654">DERBY-5423</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12524348">DERBY-5428</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12526066">DERBY-5448</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12550222">DERBY-5687</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12502326">DERBY-5151</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12511500">DERBY-5295</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12708269">DERBY-6542</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12523908">DERBY-5426</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12457305">DERBY-4565</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12525736">DERBY-5445</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12482681" name="D4437PerfTest.java" size="3200" author="knutanders" created="Wed, 15 Jun 2011 17:12:53 +0100"/>
                            <attachment id="12482785" name="D4437PerfTest2.java" size="3432" author="knutanders" created="Thu, 16 Jun 2011 13:09:39 +0100"/>
                            <attachment id="12483732" name="Experiments_4437.html" size="4167" author="rhillegas" created="Fri, 24 Jun 2011 17:31:15 +0100"/>
                            <attachment id="12481846" name="derby-4437-01-aj-allTestsPass.diff" size="44475" author="rhillegas" created="Wed, 8 Jun 2011 19:49:08 +0100"/>
                            <attachment id="12482583" name="derby-4437-02-ac-alterTable-bulkImport-deferredInsert.diff" size="10979" author="rhillegas" created="Tue, 14 Jun 2011 20:14:27 +0100"/>
                            <attachment id="12482666" name="derby-4437-03-aa-upgradeTest.diff" size="6767" author="rhillegas" created="Wed, 15 Jun 2011 14:45:00 +0100"/>
                            <attachment id="12483184" name="derby-4437-04-aa-reclaimUnusedValuesOnShutdown.diff" size="4140" author="rhillegas" created="Mon, 20 Jun 2011 19:03:44 +0100"/>
                            <attachment id="12483335" name="derby-4437-05-aa-pluggablePreallocation.diff" size="24656" author="rhillegas" created="Tue, 21 Jun 2011 21:06:27 +0100"/>
                            <attachment id="12483731" name="derby-4437-06-aa-selfTuning.diff" size="10177" author="rhillegas" created="Fri, 24 Jun 2011 17:31:15 +0100"/>
                            <attachment id="12484654" name="derby-4437-07-ac-biggerDefault_propertyCanBeInteger.diff" size="13490" author="rhillegas" created="Wed, 29 Jun 2011 17:01:16 +0100"/>
                            <attachment id="12484765" name="derby-4437-07-ad-biggerDefault_propertyCanBeInteger.diff" size="12954" author="rhillegas" created="Thu, 30 Jun 2011 13:50:06 +0100"/>
                            <attachment id="12484907" name="derby-4437-08-aa-10.8upgrade.diff" size="11476" author="rhillegas" created="Fri, 1 Jul 2011 19:09:27 +0100"/>
                            <attachment id="12482680" name="insertperf.png" size="5826" author="knutanders" created="Wed, 15 Jun 2011 17:12:53 +0100"/>
                            <attachment id="12482786" name="insertperf2.png" size="6976" author="knutanders" created="Thu, 16 Jun 2011 13:09:39 +0100"/>
                            <attachment id="12482949" name="prealloc.png" size="9302" author="knutanders" created="Fri, 17 Jun 2011 17:24:40 +0100"/>
                            <attachment id="12484667" name="releaseNote.html" size="4160" author="rhillegas" created="Wed, 29 Jun 2011 18:49:24 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Nov 2009 17:21:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cef:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35827</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>