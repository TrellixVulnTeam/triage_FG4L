<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:30:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2540/DERBY-2540.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2540] Restructure code for Blob/Clob length in client to prepare for locator implementation</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2540</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;In order to prepare for the locator-based implementation, I want to restructure the code for getting the length of LOBs. &lt;br/&gt;
Currently, the LOB class has a protected field sqlLength_ that will contain the length of the LOB, if known.  Currently, it is always known as long as the LOB has been materialized.  However, when locators are introduced, the length may have to be fetched from the server the first time it is needed.   With the current implementation, where sqlLength_ is accessed directly by many classes in the package, it will become very difficult to keep track of whether one needs to fetch the length from the server or not.&lt;/p&gt;

&lt;p&gt;I will change the implementation to make Lob.sqlLength_ private and add access methods to get and set its value.  (A good thing in itself IMHO).  If the length is unknown, the LOB will be materialized to get the length. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12366982">DERBY-2540</key>
            <summary>Restructure code for Blob/Clob length in client to prepare for locator implementation</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="31583">DERBY-208</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="oysteing">&#216;ystein Gr&#248;vlen</assignee>
                                    <reporter username="oysteing">&#216;ystein Gr&#248;vlen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Apr 2007 13:17:17 +0100</created>
                <updated>Wed, 11 Jul 2007 09:11:26 +0100</updated>
                            <resolved>Wed, 18 Apr 2007 17:20:16 +0100</resolved>
                                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12488082" author="knutanders" created="Wed, 11 Apr 2007 15:14:32 +0100"  >&lt;p&gt;This sounds like a good idea! I don&apos;t know if it&apos;s relevant for this issue, but I think the sqlLength_ variable sometimes holds the byte count and sometimes holds the character count for a CLOB. I don&apos;t remember the all the details, but I once summarized what I found in this JIRA comment: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1417#action_12424055&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1417#action_12424055&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12488308" author="oysteing" created="Thu, 12 Apr 2007 10:06:44 +0100"  >&lt;p&gt;Knut Anders, thanks for the reference to your summary of length&lt;br/&gt;
issues.  For this patch I do not intend to change any behavior here.&lt;/p&gt;

&lt;p&gt;However, I will propose to remove Clob.getByteLength() and its&lt;br/&gt;
associated field.  The method is not used by any Derby code and it is,&lt;br/&gt;
as far as I can tell, not working correctly.  In your summary, you&lt;br/&gt;
write that getByteLength() gives the same result as length().  This is&lt;br/&gt;
initially true, but if the length of the Clob is changed (e.g., by&lt;br/&gt;
truncate()), getByteLength() will still return the original value.&lt;br/&gt;
In addition, I do not understand how this associated comment applies to&lt;br/&gt;
the current implementation:&lt;/p&gt;

&lt;p&gt;    // this method is primarily for mixed clob length calculations.&lt;br/&gt;
    // it was introduced to prevent recursion in the actual char&lt;br/&gt;
    // length calculation&lt;/p&gt;

&lt;p&gt;Given all this, I think it is better to just remove it.&lt;/p&gt;
</comment>
                            <comment id="12488332" author="oysteing" created="Thu, 12 Apr 2007 12:19:52 +0100"  >&lt;p&gt;The attached patch contains the following modifications:&lt;/p&gt;

&lt;p&gt;M      java/client/org/apache/derby/client/am/Lob.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Made sqlLength_ and lengthObtained_ private&lt;/li&gt;
	&lt;li&gt;Moved logic from Clob.length() and Blob.length() to sqlLength()&lt;br/&gt;
     for checking whether length is already obtained and if not,&lt;br/&gt;
     obtain the length by materializing the stream.&lt;/li&gt;
	&lt;li&gt;checkForClosedConnection() was moved to Blob.length() since Clob&lt;br/&gt;
     does not currently have the same behavior with respect to closed&lt;br/&gt;
     connections, and I do not want to change the behavior with this&lt;br/&gt;
     patch.  That will come in later patches.  Also, it should not be&lt;br/&gt;
     necessary to this check for closed connections every time the&lt;br/&gt;
     length is needed, only when this is a user-initiated operation.&lt;/li&gt;
	&lt;li&gt;Added method setSqlLength() to be used to update the length.&lt;/li&gt;
	&lt;li&gt;Added abstract method materializeStream() so that subclasses can&lt;br/&gt;
     do the necessary setup before calling the existing&lt;br/&gt;
     materializeStream().&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/client/org/apache/derby/client/am/Blob.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Replaced all operations on sqlLength_ with calls to the&lt;br/&gt;
     corresponding mehtods in Lob.&lt;/li&gt;
	&lt;li&gt;Replace calls to this.length() with calls to Lob.sqlLength()&lt;br/&gt;
     since length() is primarily a function to be called by users, and&lt;br/&gt;
     contains code that is not necessary for internal usage.&lt;/li&gt;
	&lt;li&gt;Removed some try-catch blocks that is no longer needed since&lt;br/&gt;
     length() is not used.&lt;/li&gt;
	&lt;li&gt;Implemted the new materializeStream() method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/client/org/apache/derby/client/am/Clob.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Same changes as described for Blob.&lt;/li&gt;
	&lt;li&gt;Remove lengthInBytes_ and getByteLength() as discussed earlier.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;M      java/client/org/apache/derby/client/am/BlobOutputStream.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/ClobOutputStream.java&lt;br/&gt;
M      java/client/org/apache/derby/client/am/ClobWriter.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Replaced all operations on sqlLength_ with calls to the&lt;br/&gt;
     corresponding mehtods in Lob.&lt;/li&gt;
	&lt;li&gt;Refactored common code into a private method to be used by the&lt;br/&gt;
     other methods.  This way, I did not have to repeat the same&lt;br/&gt;
     changes over and over again.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12488344" author="oysteing" created="Thu, 12 Apr 2007 12:45:17 +0100"  >&lt;p&gt;Forgot to mention that I have run the Junit All suite with no new failures.&lt;br/&gt;
I am currently running derbyall.  I do not except any new failures since I ran it successfuly earlier on an almost identical version of the patch. &lt;/p&gt;</comment>
                            <comment id="12488545" author="dagw" created="Fri, 13 Apr 2007 02:11:48 +0100"  >&lt;p&gt;I&apos;ll have a look at this one.&lt;/p&gt;</comment>
                            <comment id="12488683" author="dagw" created="Fri, 13 Apr 2007 15:36:17 +0100"  >&lt;p&gt;I think this patch is a good incremental cleanup. I ran derbyall and&lt;br/&gt;
suites.All with (0,2) failures respectively, none related. &lt;br/&gt;
Just some minor nits:&lt;/p&gt;

&lt;p&gt;1) Lob#sqlLength: The method throws SqlException if Layer B streaming&lt;br/&gt;
   is used. The javadoc is not clear on this point (&quot;unless Layer B&lt;br/&gt;
   streaming is used&quot;). Would be good to move this &quot;unless&quot;-comment to the&lt;br/&gt;
   @throws tag.&lt;/p&gt;

&lt;p&gt;2) Lob#materializeStream: Javadoc says &quot;Method to be implemented by&lt;br/&gt;
   subclasses to do the necessary setup before calling&lt;br/&gt;
   #materializedStream(InputStream, String)&quot;. It seems neither&lt;br/&gt;
   Blob.java nor Clob.java does any set-up &lt;b&gt;before&lt;/b&gt; calling&lt;br/&gt;
   #materializedStream(InputStream, String). Maybe it would be better&lt;br/&gt;
   to say just &quot;Method to be implemented by subclasses, which in&lt;br/&gt;
   addition to calling #materializedStream(InputStream, String) will&lt;br/&gt;
   do any setup specific to that subclass&quot;.&lt;/p&gt;

&lt;p&gt;   It also lacks a @throws SqlException tag.&lt;/p&gt;

&lt;p&gt;3) Blob#materializeStream: A @throw SqlException is missing&lt;/p&gt;

&lt;p&gt;4) Clob#materializeStream: A @throw SqlException is missing&lt;/p&gt;

&lt;p&gt;5) Clob#length: It seems this method will no longer be checking for&lt;br/&gt;
   closed connection; is this correct?  Maybe you can&lt;br/&gt;
   explain why this change is ok, it seems from the comments this&lt;br/&gt;
   is intended.&lt;/p&gt;

&lt;p&gt;6) BlobOutputStream#writeX: It seems an arraycopy could be used for&lt;br/&gt;
   the second part of the copy operation as well (not introduced by&lt;br/&gt;
   this patch, though, only refactored, but I thought I&apos;d mention it).&lt;/p&gt;</comment>
                            <comment id="12489031" author="oysteing" created="Mon, 16 Apr 2007 08:42:29 +0100"  >&lt;p&gt;Dag, thanks for the review.  I have addressed your comments below, and&lt;br/&gt;
I will upload a new patch soon,&lt;/p&gt;

&lt;p&gt;&amp;gt; Dag H. Wanvik commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2540&quot; title=&quot;Restructure code for Blob/Clob length in client to prepare for locator implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2540&quot;&gt;&lt;del&gt;DERBY-2540&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; --------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think this patch is a good incremental cleanup. I ran derbyall and&lt;br/&gt;
&amp;gt; suites.All with (0,2) failures respectively, none related. &lt;br/&gt;
&amp;gt; Just some minor nits:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; 1) Lob#sqlLength: The method throws SqlException if Layer B streaming&lt;br/&gt;
&amp;gt;    is used. The javadoc is not clear on this point (&quot;unless Layer B&lt;br/&gt;
&amp;gt;    streaming is used&quot;). Would be good to move this &quot;unless&quot;-comment to the&lt;br/&gt;
&amp;gt;    @throws tag.&lt;/p&gt;

&lt;p&gt;Good point.  Will change the comment.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 2) Lob#materializeStream: Javadoc says &quot;Method to be implemented by&lt;br/&gt;
&amp;gt;    subclasses to do the necessary setup before calling&lt;br/&gt;
&amp;gt;    #materializedStream(InputStream, String)&quot;. It seems neither&lt;br/&gt;
&amp;gt;    Blob.java nor Clob.java does any set-up &lt;b&gt;before&lt;/b&gt; calling&lt;br/&gt;
&amp;gt;    #materializedStream(InputStream, String). Maybe it would be better&lt;br/&gt;
&amp;gt;    to say just &quot;Method to be implemented by subclasses, which in&lt;br/&gt;
&amp;gt;    addition to calling #materializedStream(InputStream, String) will&lt;br/&gt;
&amp;gt;    do any setup specific to that subclass&quot;.&lt;/p&gt;

&lt;p&gt;What it actually does it to call it with the right parameters and&lt;br/&gt;
assign the result to the right stream.  I will update the javadoc to&lt;br/&gt;
reflect that.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt;    It also lacks a @throws SqlException tag.&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;Will fix.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 3) Blob#materializeStream: A @throw SqlException is missing&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;Will fix.&lt;/p&gt;

&lt;p&gt;&amp;gt; 4) Clob#materializeStream: A @throw SqlException is missing&lt;/p&gt;

&lt;p&gt;Will fix.&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 5) Clob#length: It seems this method will no longer be checking for&lt;br/&gt;
&amp;gt;    closed connection; is this correct?  Maybe you can&lt;br/&gt;
&amp;gt;    explain why this change is ok, it seems from the comments this&lt;br/&gt;
&amp;gt;    is intended.&lt;/p&gt;

&lt;p&gt;Clob#length earlier only checked for closed connections if the length&lt;br/&gt;
was not already obtained (i.e., the Clob had been materialized).  I&lt;br/&gt;
could have checked for closed connections in Lob#sqlLength, but the&lt;br/&gt;
problem is Blob and Clob currently behave differently.  Blob always&lt;br/&gt;
checks, Clob only if length needs to be obtained.  Hence, if I put the&lt;br/&gt;
check in Lob#sqlLength, I would have had to change tests.  I wanted to&lt;br/&gt;
avoid that since the behavior will soon change again when locators are&lt;br/&gt;
introduced.  (I guess this means that getting the length of a not&lt;br/&gt;
materialized Clob after the connection is closed is not currently&lt;br/&gt;
tested.)&lt;/p&gt;

&lt;p&gt;&amp;gt; &lt;br/&gt;
&amp;gt; 6) BlobOutputStream#writeX: It seems an arraycopy could be used for&lt;br/&gt;
&amp;gt;    the second part of the copy operation as well (not introduced by&lt;br/&gt;
&amp;gt;    this patch, though, only refactored, but I thought I&apos;d mention it).&lt;br/&gt;
&amp;gt; &lt;/p&gt;

&lt;p&gt;I agree that arraycopy seems a better choice, but I do not think I&lt;br/&gt;
want to change this code as part of this patch.  Also, I do not think&lt;br/&gt;
BlobOutputStream will be in much use going forward since new Stream&lt;br/&gt;
classes will be made for locator based Blobs.&lt;/p&gt;</comment>
                            <comment id="12489035" author="oysteing" created="Mon, 16 Apr 2007 08:53:17 +0100"  >&lt;p&gt;Attached patch, derby-2540_2.diff, addresses review comments.&lt;/p&gt;</comment>
                            <comment id="12489799" author="dagw" created="Wed, 18 Apr 2007 16:43:35 +0100"  >&lt;p&gt;Thanks, &#216;ystein!&lt;br/&gt;
I ran the regression tests over again cleanly with JDK1.6.&lt;/p&gt;

&lt;p&gt;Committed at svn 530070.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12355414" name="derby-2540.diff" size="24896" author="oysteing" created="Thu, 12 Apr 2007 12:19:52 +0100"/>
                            <attachment id="12355415" name="derby-2540.stat" size="431" author="oysteing" created="Thu, 12 Apr 2007 12:19:52 +0100"/>
                            <attachment id="12355589" name="derby-2540_2.diff" size="25179" author="oysteing" created="Mon, 16 Apr 2007 08:53:17 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Apr 2007 14:14:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30509</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11g7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39885</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>