<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:29:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5552/DERBY-5552.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5552] Derby threads hanging when using ClientXADataSource and a deadlock or lock timeout occurs</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5552</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The issue arrives when multiple XA transactions are done in parallel and there is either a lock timeout or a lock deadlock detected.  When this happens the connection is leaked in the Glassfish connection pool and the client thread hangs in &quot;org.apache.derby.client.netReply.fill(Reply.java:172)&quot;.  &lt;/p&gt;

&lt;p&gt;Shutting down the app server fails because the thread has a lock in &quot;org.apache.derby.client.net.NetConnection40&quot; and another task is calling &quot;org.apache.derby.client.ClientPooledConnection.close(ClientPooledConnection.java:214)&quot; which is waiting for the lock.&lt;/p&gt;

&lt;p&gt;Killing the appsever using &quot;kill&quot; and then attempting to shutdown Derby network server causes the Network Server to hang.  One of the threads hangs waiting for a lock at &quot;org.apache.derby.impl.drda.NeworkServerControlImpl.removeFromSessionTable(NetworkServerControlImpl.java:1525)&quot; and the &quot;main&quot; thread has this locked at &quot;org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2242)&quot; and it itself is waiting for a lock which belongs to a thread that is stuck at &quot;org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(ActiveLock.java:118) which is in the TIMED_WAITING state.&lt;/p&gt;

&lt;p&gt;Only by killing the Network Server using &quot;kill&quot; is possible at this point.&lt;/p&gt;

&lt;p&gt;There are transactions left even though all clients have been removed.  &lt;/p&gt;
</description>
                <environment>Solaris 10, Glassfish V2.1.1,</environment>
        <key id="12536170">DERBY-5552</key>
            <summary>Derby threads hanging when using ClientXADataSource and a deadlock or lock timeout occurs</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="brettw">Brett Wooldridge</assignee>
                                    <reporter username="bbergquist">Brett Bergquist</reporter>
                        <labels>
                            <label>derby_triage10_9</label>
                    </labels>
                <created>Thu, 22 Dec 2011 15:54:55 +0000</created>
                <updated>Fri, 15 Nov 2013 08:15:07 +0000</updated>
                            <resolved>Tue, 28 Feb 2012 19:06:14 +0000</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.1.2</version>
                    <version>10.8.2.2</version>
                                    <fixVersion>10.5.3.1</fixVersion>
                    <fixVersion>10.6.2.2</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13174860" author="bbergquist" created="Thu, 22 Dec 2011 15:58:30 +0000"  >&lt;p&gt;Derby log file of showing the deadlock reporting and lock timeout reporting&lt;/p&gt;</comment>
                            <comment id="13174865" author="bbergquist" created="Thu, 22 Dec 2011 16:02:15 +0000"  >&lt;p&gt;Client side trace files&lt;/p&gt;</comment>
                            <comment id="13174869" author="bbergquist" created="Thu, 22 Dec 2011 16:03:05 +0000"  >&lt;p&gt;The transactions left over when there is no client connected (other than IJ querying this)&lt;/p&gt;</comment>
                            <comment id="13174870" author="bbergquist" created="Thu, 22 Dec 2011 16:03:53 +0000"  >&lt;p&gt;The application server stack trace from jstack when the application server is hung at shutdown.&lt;/p&gt;</comment>
                            <comment id="13174871" author="bbergquist" created="Thu, 22 Dec 2011 16:04:53 +0000"  >&lt;p&gt;The Network Server stack trace using jstack when hung at shutdown&lt;/p&gt;</comment>
                            <comment id="13175022" author="bbergquist" created="Thu, 22 Dec 2011 20:10:56 +0000"  >&lt;p&gt;I found one problem.  In BasicNoPutResultImpl.java around line 250 is the code:&lt;/p&gt;

&lt;p&gt;		try {&lt;br/&gt;
			LanguageConnectionContext lcc = getLanguageConnectionContext();&lt;br/&gt;
			if(lcc.getRunTimeStatisticsMode() &amp;amp;&amp;amp; lcc.getXplainOnlyMode()) &lt;/p&gt;
{
				// do nothing
			}
&lt;p&gt; else &lt;/p&gt;
{
				openCore();
			}

&lt;p&gt;		} catch (StandardException se) &lt;/p&gt;
{
			activation.checkStatementValidity();
			throw se;
		}

&lt;p&gt;For whatever reason (looks like something in my code), a lock timeout is being detected while executing in &#8220;openCore&#8221; and a StandardException is being thrown with SQLState &#8220;40XL2&#8221; and a report = 2 (REPORT_ALWAYS I Believe).  The exception is caught and then the &lt;/p&gt;

&lt;p&gt;	Activation.checkStatementValidity()&lt;/p&gt;

&lt;p&gt;Is being called.  The statement appears not to be valid at that point and a new StandardExceptis thrown with SQLState.LANG_STATEMENT_NEEDS_RECOMPILE and report = REPORT_NEVER.  &lt;/p&gt;

&lt;p&gt;The effect is that the Lock timeout exception is swallowed and the statement is recompiled and executed again.    This occurs over and over and the loop never ends.     This looks like the cause that the Network Server cannot shutdown in the bug.&lt;/p&gt;

&lt;p&gt;It seems to me that if the exception being caught above is to be &#8220;REPORT_ALWAYS&#8221;, then the code should never check the statement validity and should just rethrow the original exception.&lt;/p&gt;
</comment>
                            <comment id="13175112" author="bbergquist" created="Thu, 22 Dec 2011 22:28:53 +0000"  >&lt;p&gt;I patched the files to look like this and am running my test setup now.  So far so good.  In fact I am not seeing the deadlocks or lock timeouts at all now.   Not sure why but it is all running smoothly with these changes:&lt;/p&gt;


&lt;p&gt;Index: BasicNoPutResultSetImpl.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; BasicNoPutResultSetImpl.java	(revision 1222480)&lt;br/&gt;
+++ BasicNoPutResultSetImpl.java	(working copy)&lt;br/&gt;
@@ -256,7 +256,9 @@&lt;br/&gt;
 			}&lt;/p&gt;

&lt;p&gt; 		} catch (StandardException se) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;activation.checkStatementValidity();&lt;br/&gt;
+            if (se.report() != StandardException.REPORT_ALWAYS) 
{
+                activation.checkStatementValidity();
+            }
&lt;p&gt; 			throw se;&lt;br/&gt;
 		}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Index: DeleteResultSet.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; DeleteResultSet.java	(revision 1222480)&lt;br/&gt;
+++ DeleteResultSet.java	(working copy)&lt;br/&gt;
@@ -201,7 +201,9 @@&lt;br/&gt;
         		source.reopenCore();&lt;br/&gt;
 			}&lt;br/&gt;
 		} catch (StandardException se) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;activation.checkStatementValidity();&lt;br/&gt;
+            if (se.report() != se.REPORT_ALWAYS) 
{
+    			activation.checkStatementValidity();
+            }
&lt;p&gt; 			throw se;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; 		}&lt;br/&gt;
Index: RowChangerImpl.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; RowChangerImpl.java	(revision 1222480)&lt;br/&gt;
+++ RowChangerImpl.java	(working copy)&lt;br/&gt;
@@ -372,7 +372,7 @@&lt;br/&gt;
 		}&lt;/p&gt;

&lt;p&gt; 		} catch (StandardException se) &lt;/p&gt;
{
-			if (activation != null)
+			if (se.report() != StandardException.REPORT_ALWAYS &amp;amp;&amp;amp; activation != null)
 				activation.checkStatementValidity();
 			throw se;
 		}</comment>
                            <comment id="13175113" author="bbergquist" created="Thu, 22 Dec 2011 22:30:23 +0000"  >&lt;p&gt;Here is the patch that I did to the 10.8 branch.  Basically all I did is to make sure not to swallow the exceptions if the &lt;/p&gt;

&lt;p&gt;StandardException.report() == StandardException.REPORT_ALWAYS&lt;/p&gt;</comment>
                            <comment id="13175151" author="kmarsden" created="Thu, 22 Dec 2011 23:33:37 +0000"  >&lt;p&gt;Hi Brett,&lt;/p&gt;

&lt;p&gt;I am glad you are making progress as I was clearly misunderstanding your scenario.&lt;/p&gt;

&lt;p&gt;Although the residual xa transactions are there in the database, I looked at the client traces and don&apos;t see any indication that XA transactions are being used in the test in fact even the names of the the trace files &lt;em&gt;driver&lt;/em&gt;? indicate a driver manager connection and not an xa datasource connection which would have been created in files &lt;em&gt;xads&lt;/em&gt;?. Since there were no XA transactions, there was not the  SYNCCTL with possible missing   SYNCCRD exchanges that I was looking for.&lt;/p&gt;

&lt;p&gt;Your logic on the above change sounds reasonable to me, but I don&apos;t think I am the best person to review that change.  After you run tests, post a patch and mark patch available and I am sure the community will review and expedite commit of the change if it is the right thing. I think it would definitely be good to get a test checked in too so we don&apos;t regress.&lt;/p&gt;

</comment>
                            <comment id="13175192" author="bbergquist" created="Fri, 23 Dec 2011 00:19:30 +0000"  >&lt;p&gt;I guess I am confused as well Kathey as I had the debugger attached and do see it going through the XA code in Derby on the client side.  The application server is setup with the ClientXADataSource and I do see it calling xa.commit and xa.end for example.   The ClientXADataSource is required otherwise the error:&lt;/p&gt;

&lt;p&gt;	Local transaction already has 1 non-XA Resource: cannot add more resources. &lt;/p&gt;

&lt;p&gt;occurs.  So although there is one database (Derby), it is using XA.   The database is being accessed through EJB&apos;s and through Eclipselink and also through a custom JCA interface driving Message Driven Beans.  &lt;/p&gt;

&lt;p&gt;For the test case, I had to limit things to get my sanity.  So I stopped as much access to the database as I could but still trigger the problem.  Eventually I got down to one thread of control being processed by EJB&apos;s which do start new transactions.  Even with this one access going on, I hit the lockup issue that I posted.  That is when I found the issue that I mention.  So whether or not this is the real issue, I don&apos;t know but when I tried to get as simple a condition as possible, I ran into this.&lt;/p&gt;

&lt;p&gt;Thinking now, I don&apos;t understand why this would not be hit in a normal case of a lock timeout being thrown. The only thing that I can think of is that the Activation.checkStatementValidity() is seeing the statement as valid and not going to try to recompile it.  Why it occurred in my case where I see the &quot;isValid&quot; member set to false, I don&apos;t know.  I will try to hitch up the debugger and try to determine the difference so that I can understand it better.&lt;/p&gt;

&lt;p&gt;I do believe that the code should not swallow and exception such as a lock timeout being reported regardless if the statement is no longer reporting to be valid.  This is definitely a condition that will cause an infinite loop of processing.&lt;/p&gt;

&lt;p&gt;Again, I appreciate the help and your time.  If I gain an understanding of how the condition is triggered, I will look to write a test case for it.  I am reading the Derby testing docs that are relating to use JUnit which I assume is the correct path for newer test cases, correct?&lt;/p&gt;



</comment>
                            <comment id="13175216" author="kmarsden" created="Fri, 23 Dec 2011 01:17:32 +0000"  >&lt;p&gt;Yes, definitely you want your test to be the new Junit style so that is the place to look.&lt;/p&gt;

&lt;p&gt;I think I have solved the mystery of the missing XA client  traces and filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5553&quot; title=&quot;System property for client tracing -Dderby.client.traceDirectory does not work with XADataSource&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5553&quot;&gt;&lt;del&gt;DERBY-5553&lt;/del&gt;&lt;/a&gt; for that issue.&lt;/p&gt;

&lt;p&gt;I am trying to think of a scenario where we we execute a valid statement would get a lock timeout and then at the time of processing the exception the statement would have become invalid.  One reason for a statement becoming invalid would be for instance if a table had been altered, for example if we had a prepared statement &quot;SELECT * FROM TAB&quot; and then a column was added or dropped.  In that scenario the statement would be recompiled long before the lock timeout occurred.  If the problem statement is the one with the lock timeout it would seem to be:&lt;/p&gt;

&lt;p&gt; SELECT DISTINCT t3.ID, t3.OPLOCK FROM PKG_9145E10G.PLPM_PAIR t3, PKG_9145E10G.PLPM_CHASSIS_9145E10G_USER t2, CORE_V1.DEVICE_ENTITY_USER t1, CORE_V1.DEVICE_ENTITY t0 WHERE ((t0.ID = CAST (? AS INTEGER )) AND (((t2.PLPM_PAIR_ID = t3.ID) AND ((t2.ID = t1.ID) AND (t1.DTYPE = &apos;PlpmChassis9145E10GUser&apos;))) AND (t0.ID = t1.DEVICE_ENTITY_ID))) with 1 parameters begin parameter #1: 249360 :end parameter &lt;br/&gt;
ERROR 40XL2: A lock could not be obtained within the time requested.  The lockTable dump is: &lt;br/&gt;
Thu Dec 22 07:03:07 PST 2011&lt;/p&gt;


&lt;p&gt;I am not sure how that could have gone invalid between the initial execution and the lock time out.&lt;/p&gt;
</comment>
                            <comment id="13176215" author="bbergquist" created="Tue, 27 Dec 2011 16:11:32 +0000"  >&lt;p&gt;It is the IndexStatisticsDaemonImpl that is invalidating the statement.  To verify this, I got my test case where it was in this loop.  With my printouts I was seeing that the isValid was being set by the thread that was stuck right after the timeout occurred and then I immediately saw makeInvalid being called with action = 40 (UPDATE_STATISTICS).  So I attached the debugger to the database engine and set a breakpoint in IndexStatisticsDaemonImpl  and then set  &quot;daemonDisabled&quot; to be &quot;false&quot;.   Immediately the lock timeout got reported and the loop terminated and my test case continued on the way it should.&lt;/p&gt;

&lt;p&gt;So the IndexStatisticsDaemonImpl has the ability to invalidate statements in use by other threads.  In this case, it is being invoked right after lock timeout occurs and before the lock timeout exception is being processed.  The code sees that the statement is invalid and swallows the lock exception and sets up to recompile and run the statement again.&lt;/p&gt;</comment>
                            <comment id="13176216" author="bbergquist" created="Tue, 27 Dec 2011 16:11:57 +0000"  >&lt;p&gt;If I disable the istat daemon, I still the the timeout but now the error is reported as it should and the transaction is aborted and my code continues.  With the itstat deamon enabled, then the lock timeout is discovered and signaled by exception being thrown but between the time it gets caught and processed, the istat daemon has set the &quot;isValid&quot; property of the statement to &quot;false&quot;.  The original lock timeout exception is caught but then the &lt;/p&gt;

&lt;p&gt;    Activation.checkStatementValidity()&lt;/p&gt;

&lt;p&gt;is called in the exception handler.  This finds that the statement is not valid (isValid == false) and throws its own exception indicating that a recompilation is required, swallowing the original lock timeout exception in the process.  This causes the existing statement to be rebuilt and re-executed but the locks are still present, the lock timeout will occur again, the lock timeout exception will be thrown, the istat daemon will set the &quot;isValid&quot; to false again, etc.  The process just continues forever.&lt;/p&gt;

&lt;p&gt;The patch that I attached to the bug only calls&lt;/p&gt;

&lt;p&gt;    Activation.checkStatementValidity()&lt;/p&gt;

&lt;p&gt;in the exception handler if the caught exception is not set to REPORT_ALWAYS.  This seem okay and to make sense because if the code is handling an exception that is to be REPORT_ALWAYS, there is no sense looking for a statement that is invalid; just report the exception.&lt;/p&gt;</comment>
                            <comment id="13177292" author="bbergquist" created="Thu, 29 Dec 2011 18:02:38 +0000"  >&lt;p&gt;I have found the cause of the problem.  When a lock timeout or deadlock is detected, the server calls XATransactionState.cleanupOnError.   This looks like:&lt;/p&gt;


&lt;p&gt;	public void cleanupOnError(Throwable t) {&lt;/p&gt;

&lt;p&gt;		if (t instanceof StandardException) {&lt;/p&gt;

&lt;p&gt;			StandardException se = (StandardException) t;&lt;/p&gt;

&lt;p&gt;            if (se.getSeverity() &amp;gt;= ExceptionSeverity.SESSION_SEVERITY) &lt;/p&gt;
{
                popMe();
                return;
            }

&lt;p&gt;			if (se.getSeverity() == ExceptionSeverity.TRANSACTION_SEVERITY) {&lt;/p&gt;

&lt;p&gt;				synchronized (this) &lt;/p&gt;
{
					// disable use of the connection until it is cleaned up.
					conn.setApplicationConnection(null);
					notifyAll();
					associationState = TRO_FAIL;
					if (SQLState.DEADLOCK.equals(se.getMessageId()))
						rollbackOnlyCode = XAException.XA_RBDEADLOCK;
					else if (SQLState.LOCK_TIMEOUT.equals(se.getMessageId()))
						rollbackOnlyCode = XAException.XA_RBTIMEOUT;					
					else
						rollbackOnlyCode = XAException.XA_RBOTHER;
				}
&lt;p&gt;			}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;The problem is the line of code:&lt;/p&gt;

&lt;p&gt;					conn.setApplicationConnection(null);&lt;/p&gt;

&lt;p&gt;The problem that occurs is on the client side, when the SQLException is received, it ends up calling Sqlca.getMessage() to retrieve the formatted exception message.  This makes a call back down to the server on the connection and ends up calling EmbedStatement.checkStatus() and now the EmbedConnection has a null &quot;applicationConnection&quot; and a noCurrentConnection is throw.   DRDA code that receives this exception in processing of Sqlca.getMessage() determines that there is a protocol error and disconnects from the server.&lt;/p&gt;

&lt;p&gt;The XA transaction that was in process never has &quot;end&quot; called on it and the XA transaction on the client side is now lost.  Derby now has a XA transaction that will never end causing all kinds of havoc such as logging all new transactions in case the one lost ever does get rolled back.  The file system fill up with transaction logs, restarting the database engine takes days, etc.&lt;/p&gt;

&lt;p&gt;I have commented out the above line and now the proper lock error is actually reported at the client.  I don&apos;t know if there are any ramifications of doing so at this point however.&lt;/p&gt;</comment>
                            <comment id="13178750" author="bbergquist" created="Tue, 3 Jan 2012 14:29:43 +0000"  >&lt;p&gt;This patch makes sure that if a StandardException is set to REPORT_ALWAYS, no check is made to see if the statement is invalid and rebuild; the exception is just thrown.  This stops lock timeouts and deadlocks from being swallowed.&lt;/p&gt;
</comment>
                            <comment id="13178752" author="bbergquist" created="Tue, 3 Jan 2012 14:37:08 +0000"  >&lt;p&gt;This patch removed the null&apos;ing out of the application connection during cleanup from a lock timeout or lock deadlock.  The application connection is needed because the client code calls back on the connection to retrieve the formatted exception message and if this application connection is null, then a NoCurrentConnection SQLException is thrown during this.  This causes the client to see a DRDA protocol exception and terminate without ever ending an in progress XA transaction.   The XA transaction is now hanging around in the database, the client side has lost track of it, and all manner of things go wrong from that point.&lt;/p&gt;
</comment>
                            <comment id="13178857" author="kmarsden" created="Tue, 3 Jan 2012 17:49:22 +0000"  >&lt;p&gt;I&apos;ll work on a test case for this issue and run the patch through regression tests.  I wouldn&apos;t  think a lock timeout wouldn&apos;t be a transaction level error but a deadlock would be.&lt;/p&gt;

&lt;p&gt;	if (se.getSeverity() == ExceptionSeverity.TRANSACTION_SEVERITY) {&lt;/p&gt;

&lt;p&gt;				synchronized (this) {&lt;br/&gt;
					// disable use of the connection until it is cleaned up.&lt;br/&gt;
					conn.setApplicationConnection(null);&lt;/p&gt;


&lt;p&gt;It makes sense that the connection is needed to retrieve the error message text, but clearly someone at some point thought it was important not to let anything happen on this connection until the transaction was cleaned up.  It would be good to understand the scenarios for which this this code was introduced.&lt;/p&gt;

</comment>
                            <comment id="13178913" author="bbergquist" created="Tue, 3 Jan 2012 18:53:34 +0000"  >&lt;p&gt;I checked the original code and this has been in there since the initial import as far as I can tell from Subversion&apos;s history.  &lt;/p&gt;

&lt;p&gt;I also just check the code more.  The cleanup is synchronous (I believe this is true), so that thread of control will not use the connection until it returns. &lt;/p&gt;

&lt;p&gt;As for other threads, each of the other methods are synchronized on the XATransactionState instance so no other thread will be allowed on the XATransactionState instance while the cleanup is in progress as it also synchronizes on the XATransactionState instance.&lt;/p&gt;

&lt;p&gt;There are 3 other places where conn.setApplicationConnection(null) is called but all three are in XATransactionState.end(), which again, is synchronized on the XATransactionState instance.  &lt;/p&gt;
</comment>
                            <comment id="13179094" author="dagw" created="Tue, 3 Jan 2012 22:44:08 +0000"  >&lt;p&gt;What about getApplicationState which reads applicationConnection? For example, it seems this is called unsynchronized, e.g from EmbedResultSet#movePosition -&amp;gt; checkExecIfClosed -&amp;gt; getEmbedConnection().getApplicationConnection(). If applicationConnection is no nulled, could that break the logic in checkExecIfClosed? There are other cases of calls to getApplicationState which I didn&apos;t look at yet.&lt;/p&gt;</comment>
                            <comment id="13179221" author="bbergquist" created="Wed, 4 Jan 2012 01:51:11 +0000"  >&lt;p&gt;I guess where I am coming from is that the cleanup for a lock timeout or deadlock is NOT closing the connection nor should it be.  The connection IS going to be used again right after the cleanup returns the error to retrieve the exception message text.  So nulling out the connection is wrong the way it is.  The other places where the connection is nulled out are when the XA end is being processed.  Now the application level connection is no longer being used because XA has been signaled that there is no more interaction using the connection, so to me this make sense.&lt;/p&gt;

&lt;p&gt;One thing to remember is that the change is only affecting the XA transactions, not the general usagen.&lt;/p&gt;

&lt;p&gt;As for the other calls not being synchronized, maybe they should be but I don&apos;t know.  &lt;/p&gt;</comment>
                            <comment id="13179995" author="kmarsden" created="Wed, 4 Jan 2012 23:49:55 +0000"  >&lt;p&gt;The attached reproduction ReproDerby5552LockTimeout.java shows the loss of connection with a lock timeout and resulting protocol error.   It doesn&apos;t show the hang, but as I understand it that might be a separate synchronization issue.&lt;br/&gt;
$ java ReproDerby5552LockTimeout&lt;br/&gt;
Wed Jan 04 15:34:10 PST 2012 : Apache Derby Network Server - 10.9.0.0 alpha - (1227344) started and ready to accept conn&lt;br/&gt;
ections on port 1597&lt;br/&gt;
Expected Exception java.sql.SQLTransactionRollbackException: DERBY SQL error: SQLCODE: -1, SQLSTATE: 40XL1, SQLERRMC: 40&lt;br/&gt;
XL1&lt;br/&gt;
Connection ok. got right value&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLNonTransientConnectionException: A network protocol error was encountered and the&lt;br/&gt;
 connection has been terminated: the requested command encountered an unarchitected and implementation-specific conditio&lt;br/&gt;
n for which there was no architected message (additional information may be available in the derby.log file on the serve&lt;br/&gt;
r)&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)&lt;br/&gt;
        at org.apache.derby.client.am.Connection.createStatement(Connection.java:379)&lt;br/&gt;
        at org.apache.derby.client.am.LogicalConnection.createStatement(LogicalConnection.java:164)&lt;br/&gt;
        at ReproDerby5552LockTimeout.checkConn(ReproDerby5552LockTimeout.java:85)&lt;br/&gt;
        at ReproDerby5552LockTimeout.main(ReproDerby5552LockTimeout.java:66)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: A network protocol error was encountered and the connection has been&lt;br/&gt;
 terminated: the requested command encountered an unarchitected and implementation-specific condition for which there wa&lt;br/&gt;
s no architected message (additional information may be available in the derby.log file on the server)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.copyAsUnchainedSQLException(SqlException.java:511)&lt;br/&gt;
        at org.apache.derby.client.am.Sqlca.chainDeferredExceptionsToAgentOrAsConnectionWarnings(Sqlca.java:346)&lt;br/&gt;
        at org.apache.derby.client.am.Sqlca.getJDBCMessage(Sqlca.java:308)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getMessage(SqlException.java:408)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.executeQuery(Statement.java:486)&lt;br/&gt;
        at ReproDerby5552LockTimeout.main(ReproDerby5552LockTimeout.java:57)&lt;/p&gt;

</comment>
                            <comment id="13180258" author="dagw" created="Thu, 5 Jan 2012 09:52:51 +0000"  >&lt;p&gt;Tried the repro, I had to replace &quot;new utilXid&quot; with XATestUtil.getXid calls, then it worked. FYI, the timeout property is misspelt as &quot;derby.locks.locktimeout&quot;, I had to change it to &quot;derby.locks.waitTimeout&quot;, not that it matters, I just was suprprised I had to wait to long (default is 60s) for the timeout to happen. &lt;/p&gt;

&lt;p&gt;Interestingly, if I use EmbeddedXADataSource instead of client ditto, the following call throws:&lt;/p&gt;

&lt;p&gt;     checkConn(conn2);&lt;/p&gt;

&lt;p&gt;again, due to the error cleanup having nulled out&lt;br/&gt;
&quot;applicationConnection&quot;, cf. in this stack trace the frame&lt;br/&gt;
EmbedStatement#getConnection which has this code:&lt;/p&gt;

&lt;p&gt;   java.sql.Connection appConn = getEmbedConnection().getApplicationConnection();&lt;/p&gt;

&lt;p&gt;   if ((appConn != applicationConnection) || (appConn == null)) {&lt;br/&gt;
      throw Util.noCurrentConnection();&lt;/p&gt;


&lt;p&gt;---------------------------------------------------------------- repro output&lt;br/&gt;
Expected Exception java.sql.SQLTransactionRollbackException: A&lt;br/&gt;
lock could not be obtained within the time requested Connection&lt;br/&gt;
ok. got right value Exception in thread &quot;main&quot;&lt;br/&gt;
java.sql.SQLNonTransientConnectionException: No current connection.&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:77)&lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:158)&lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.noCurrentConnection(Util.java:262)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedStatement.getConnection(EmbedStatement.java:1039)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredStatement.controlCheck(BrokeredStatement.java:525)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredStatement.getResultSetHoldability(BrokeredStatement.java:469)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredStatement.&amp;lt;init&amp;gt;(BrokeredStatement.java:63)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredStatement40.&amp;lt;init&amp;gt;(BrokeredStatement40.java:37)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(BrokeredConnection40.java:260)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.jdbc.XAStatementControl.&amp;lt;init&amp;gt;(XAStatementControl.java:64)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(EmbedXAConnection.java:192)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.iapi.jdbc.BrokeredConnection.createStatement(BrokeredConnection.java:100)&lt;br/&gt;
at derby5552repro.Derby5552Repro.checkConn(Derby5552Repro.java:96) at&lt;br/&gt;
derby5552repro.Derby5552Repro.main(Derby5552Repro.java:76) Caused by:&lt;br/&gt;
java.sql.SQLException: No current connection.  at&lt;br/&gt;
org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
at&lt;br/&gt;
org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
... 14 more Java Result: 1 BUILD SUCCESSFUL (total time: 21 minutes 51&lt;br/&gt;
seconds)&lt;/p&gt;</comment>
                            <comment id="13198327" author="kmarsden" created="Wed, 1 Feb 2012 23:37:42 +0000"  >&lt;p&gt;Here is Brett&apos;s patch with a regression test. I am still not clear on the reason that the application connection was being set to null. There are other instances in the same files where this same approach is used on failure.  The connection seems still perfectly valid for use after the rollback.&lt;/p&gt;


</comment>
                            <comment id="13204029" author="kmarsden" created="Wed, 8 Feb 2012 21:48:41 +0000"  >&lt;p&gt;reattaching patch to make minor comment correction. I still would like someone more familiar with this area to look and see removing the nulling of the connection is going to cause problems in some scenarios and what those scenarios might be.&lt;/p&gt;</comment>
                            <comment id="13208194" author="mikem" created="Wed, 15 Feb 2012 02:22:52 +0000"  >&lt;p&gt;i tried to review the change, but am not familar with the assumptions at this level.  I agree with your concern that previous comment&lt;br/&gt;
seems to be indicating it wants to disable the connection.  The comment &quot;disable use of the connection until it is cleaned up.&quot;, seems&lt;br/&gt;
to indicate maybe it meant to reenable it after the work of:&lt;br/&gt;
                    notifyAll();&lt;br/&gt;
                    associationState = TRO_FAIL;&lt;br/&gt;
                    if (SQLState.DEADLOCK.equals(se.getMessageId()))&lt;br/&gt;
                        rollbackOnlyCode = XAException.XA_RBDEADLOCK;&lt;br/&gt;
                    else if (se.isLockTimeout())&lt;br/&gt;
                        rollbackOnlyCode = XAException.XA_RBTIMEOUT;&lt;br/&gt;
                    else&lt;br/&gt;
                        rollbackOnlyCode = XAException.XA_RBOTHER;&lt;/p&gt;

&lt;p&gt;I reviewed the other comments in the issue, and agree with Brett&apos;s analysis of calls to cleanupOnError, and the single thread nature.&lt;/p&gt;

&lt;p&gt;Does anyone think it worthwhile to null out the connection, perform the above code, and then reset the connection?&lt;/p&gt;
</comment>
                            <comment id="13208434" author="bbergquist" created="Wed, 15 Feb 2012 12:36:59 +0000"  >&lt;p&gt;It would be great to have picked the mind of the author of the comment and code but it appeared this was this way since the beginning.  I don&apos;t think it would hurt to do what you suggest but just to let you know, this code is not in production being exercised extensively (private build with this in it as I had a need to fix the problem now) with no issues found.  Just some empirical testing results.&lt;/p&gt;

&lt;p&gt;Thanks for taking the time to look at it.&lt;/p&gt;

&lt;p&gt;Brett&lt;/p&gt;


</comment>
                            <comment id="13210477" author="kmarsden" created="Fri, 17 Feb 2012 19:50:44 +0000"  >&lt;p&gt;Triage for 10.9. &lt;br/&gt;
This issue is in progress and should be committed soon.&lt;/p&gt;

&lt;p&gt;I think I am going to just double check that subsequent operations on the connection start a new local transaction and that the old global transaction is really dead.  The test confirms we cannot do an XA end but should probably also check the transaction table. If all that checks out I will  check in the change as is.&lt;/p&gt;

&lt;p&gt;Thanks Mike and Brett for the input.&lt;/p&gt;


</comment>
                            <comment id="13215046" author="kmarsden" created="Thu, 23 Feb 2012 21:01:30 +0000"  >&lt;p&gt;Attached is a new patch derby-5552_withexpanded_test_diff.txt which expands the test to check the state of the connections and the transaction table after the lock timeout.  &lt;/p&gt;

&lt;p&gt;I think most things are working as expected. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The transaction (xid2) that was rolled back due the lock timeout  is no longer in the transaction table after the lock time out.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;New statements on the connection after the lock timeout start a new local transaction.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;XAResource.end()  on xid2 fails with an RB_TIMEOUT&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Even though it is not in the transaction table and is holding no locks, xid2  has to be explicitly rolled back before it can be reused.  This is the one I am not sure about. Should this be necessary?&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="13215209" author="kmarsden" created="Thu, 23 Feb 2012 23:45:11 +0000"  >&lt;p&gt;Running derbyall I see one failure a test specifically for this case expecting no connection.&lt;br/&gt;
$ cat xaSimpleNegative.diff&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: xaSimpleNegative jdk1.7.0 derbyall:xa 2012-02-23 14:23:29 ***&lt;br/&gt;
202 del&lt;br/&gt;
&amp;lt; ERROR 08003: No current connection.&lt;br/&gt;
202a202,204&lt;br/&gt;
&amp;gt; A         |B&lt;br/&gt;
&amp;gt; ----------------------&lt;br/&gt;
&amp;gt; ERROR 40XL1: A lock could not be obtained within the time requested&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   xaSimpleNegative jdk1.7.0 derbyall:xa 2012-02-23 14:23:45 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Specifically the master xaSimpleNegative.out shows we were expecting the connection to go away after the lock timeout. It also shows that we expected to be able to  still explicitly rollback the transaction. I think that is not something that would be persistent as the transaction is no longer in the transaction table.&lt;/p&gt;

&lt;p&gt;ij(XA)&amp;gt; &amp;#8211; ERROR: deadlock, transaction trashed&lt;br/&gt;
select * from APP.negative;&lt;br/&gt;
A         |B          &lt;br/&gt;
----------------------&lt;br/&gt;
ERROR 40XL1: A lock could not be obtained within the time requested&lt;br/&gt;
ij(XA)&amp;gt; &amp;#8211; ERROR: should have no connection underneath&lt;br/&gt;
select * from APP.negative;&lt;br/&gt;
ERROR 08003: No current connection.&lt;br/&gt;
ij(XA)&amp;gt; &amp;#8211; ERROR: should have no connection underneath and xid 2 is gone&lt;br/&gt;
xa_end xa_suspend 2;&lt;br/&gt;
IJ ERROR: XA_RBTIMEOUT &lt;br/&gt;
ij(XA)&amp;gt; &amp;#8211; ERROR: should have no connection underneath and xid 2 is gone&lt;br/&gt;
xa_end xa_fail 2;&lt;br/&gt;
IJ ERROR: XA_RBTIMEOUT &lt;br/&gt;
ij(XA)&amp;gt; xa_rollback 2;&lt;br/&gt;
ij(XA)&amp;gt; disconnect;&lt;/p&gt;

&lt;p&gt;So I am not sure exactly what to think.   Maybe it would be worthwhile to see what other databases do.&lt;/p&gt;

&lt;p&gt;As an aside in my google research, I noticed I actually asked about this back in 2004!&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200411.mbox/%3C4186AA22.7000305@Sourcery.Org%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://mail-archives.apache.org/mod_mbox/db-derby-dev/200411.mbox/%3C4186AA22.7000305@Sourcery.Org%3E&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13216159" author="kmarsden" created="Sat, 25 Feb 2012 00:24:40 +0000"  >&lt;p&gt;Well, I tried this out with DB2 and things are interesting and different.  The first thing of note is that the default for DB2 is no lock timeout. I had to go into Control Center and change the database application parameter LOCKTIMEOUT to be something other than -1. &lt;/p&gt;

&lt;p&gt;With DB2 after the lock timeout DB2 doesn&apos;t let you use the connection saying &lt;br/&gt;
Exception trying to check conn2 after lock timeout but before explicit rollback&lt;br/&gt;
com.ibm.db2.jcc.am.SqlException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;10342&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;11669&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Application must execute a rollback. The unit of w&lt;br/&gt;
has already been rolled back in the database but other resource managers involved in this unit of work might not. To&lt;br/&gt;
ure integrity of this application, all SQL requests will be rejected until the application issues a rollback.  ERROR&lt;br/&gt;
=-4497, SQLSTATE=null&lt;/p&gt;


&lt;p&gt;Then it won&apos;t actually let you do a rollback, but will let you do an end.  If you try rollback it fails with XAER_PROTO but a rollback after end fails with XAER_NOTA if you try to rollback after end. Statements after the end fail with XA_RBTIMEOUT  so I am not sure actually how one could use the connection again.&lt;/p&gt;

&lt;p&gt;Below is the output and attached is the program I was playing with in case anyone is interested, but I think the main thing I have learned is that since the spec doesn&apos;t really offer any guidance on this, we just need to do something reasonable and make sure that the global transaction doesn&apos;t get used again except to rollback, which I think the behavior with the patch does effectively as the activity that happens on the connection after the implicit rollback happens in a new local transaction.&lt;br/&gt;
So I will go ahead and check in the latest patch  with the expanded test.&lt;/p&gt;

&lt;p&gt;$ java -Duser=xxxxx  -Dpassword=xxx  ReproDerby5552DB2&lt;br/&gt;
Got Expected Lock Timeout Exception DB2 SQL Error: SQLCODE=-911, SQLSTATE=40001, SQLERRMC=68, DRIVER=4.12.55&lt;br/&gt;
Connection ok. got right value&lt;br/&gt;
Exception trying to check conn2 after lock timeout but before explicit rollback&lt;br/&gt;
com.ibm.db2.jcc.am.SqlException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;10342&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;11669&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Application must execute a rollback. The unit of work&lt;br/&gt;
has already been rolled back in the database but other resource managers involved in this unit of work might not. To ens&lt;br/&gt;
ure integrity of this application, all SQL requests will be rejected until the application issues a rollback.  ERRORCODE&lt;br/&gt;
=-4497, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:660)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:60)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:75)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.f(o.java:537)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.a(o.java:495)&lt;br/&gt;
        at com.ibm.db2.jcc.am.Sqlca.getJDBCMessage(Sqlca.java:334)&lt;br/&gt;
        at com.ibm.db2.jcc.am.SqlExceptionContainer.getMessage(SqlExceptionContainer.java:78)&lt;br/&gt;
        at com.ibm.db2.jcc.am.SqlTransactionRollbackException.getMessage(SqlTransactionRollbackException.java:52)&lt;br/&gt;
        at ReproDerby5552DB2.main(ReproDerby5552DB2.java:61)&lt;br/&gt;
Did not get exception on end as with Derby&lt;br/&gt;
Got Exception checking conn2 after end&lt;br/&gt;
com.ibm.db2.jcc.am.SqlException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2041&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;11392&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Error executing XAResource.end().  Server returned XA_R&lt;br/&gt;
BTIMEOUT. ERRORCODE=-4203, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:660)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:60)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:94)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.zb.a(zb.java:2755)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.c.Xb(c.java:271)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.g(o.java:340)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.a.g(a.java:631)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.a(o.java:214)&lt;br/&gt;
        at com.ibm.db2.jcc.am.mn.a(mn.java:3073)&lt;br/&gt;
        at com.ibm.db2.jcc.am.mn.a(mn.java:686)&lt;br/&gt;
        at com.ibm.db2.jcc.am.mn.executeQuery(mn.java:670)&lt;br/&gt;
        at ReproDerby5552DB2.checkConn(ReproDerby5552DB2.java:106)&lt;br/&gt;
        at ReproDerby5552DB2.main(ReproDerby5552DB2.java:86)&lt;br/&gt;
Rolling back xid2&lt;br/&gt;
Exception in thread &quot;main&quot; com.ibm.db2.jcc.am.XaException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2041&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;12326&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Error executing XAResource.ro&lt;br/&gt;
llback().  Server returned XAER_NOTA. ERRORCODE=-4203, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.c(hd.java:453)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.zb.b(zb.java:2773)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.b(ac.java:1546)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.a(ac.java:1326)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.a(ac.java:1321)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.rollback(ac.java:1310)&lt;br/&gt;
        at ReproDerby5552DB2.main(ReproDerby5552DB2.java:94)&lt;/p&gt;

&lt;p&gt;kmarsden@IBM-JDPM42DBIO2 ~/repro/derby-5552&lt;br/&gt;
$&lt;/p&gt;
















































































&lt;p&gt;$ java ReproDerby5552DB2&lt;br/&gt;
Got Expected Lock Timeout Exception DB2 SQL Error: SQLCODE=-911, SQLSTATE=40001, SQLERRMC=6&lt;br/&gt;
Connection ok. got right value&lt;br/&gt;
Exception trying to check conn2 after lock timeout but before explicit rollback&lt;br/&gt;
com.ibm.db2.jcc.am.SqlException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;10342&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;11669&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Application must execute&lt;br/&gt;
has already been rolled back in the database but other resource managers involved in this u&lt;br/&gt;
ure integrity of this application, all SQL requests will be rejected until the application&lt;br/&gt;
=-4497, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:660)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:60)&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.a(hd.java:75)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.f(o.java:537)&lt;br/&gt;
        at com.ibm.db2.jcc.am.o.a(o.java:495)&lt;br/&gt;
        at com.ibm.db2.jcc.am.Sqlca.getJDBCMessage(Sqlca.java:334)&lt;br/&gt;
        at com.ibm.db2.jcc.am.SqlExceptionContainer.getMessage(SqlExceptionContainer.java:7&lt;br/&gt;
        at com.ibm.db2.jcc.am.SqlTransactionRollbackException.getMessage(SqlTransactionRoll&lt;br/&gt;
        at ReproDerby5552DB2.main(ReproDerby5552DB2.java:61)&lt;br/&gt;
Did not get exception on end as with Derby&lt;br/&gt;
Rolling back xid2&lt;br/&gt;
Exception in thread &quot;main&quot; com.ibm.db2.jcc.am.XaException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2041&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;12326&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt;&lt;br/&gt;
llback().  Server returned XAER_NOTA. ERRORCODE=-4203, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.c(hd.java:453)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.zb.b(zb.java:2773)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.b(ac.java:1546)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.a(ac.java:1326)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.a(ac.java:1321)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.rollback(ac.java:1310)&lt;br/&gt;
        at ReproDerby5552DB2.main(ReproDerby5552DB2.java:86)&lt;br/&gt;
Caused by: com.ibm.db2.jcc.am.XaException: &lt;span class=&quot;error&quot;&gt;&amp;#91;jcc&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;t4&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;2041&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;12326&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;4.12.55&amp;#93;&lt;/span&gt; Error executing&lt;br/&gt;
urned XA_RBTIMEOUT. ERRORCODE=-4203, SQLSTATE=null&lt;br/&gt;
        at com.ibm.db2.jcc.am.hd.c(hd.java:453)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.zb.b(zb.java:2773)&lt;br/&gt;
        at com.ibm.db2.jcc.t4.ac.b(ac.java:1520)&lt;br/&gt;
        ... 4 more&lt;/p&gt;

&lt;p&gt;kmarsden@IBM-JDPM42DBIO2 ~/repro/derby-5552&lt;br/&gt;
$&lt;/p&gt;




</comment>
                            <comment id="13216171" author="kmarsden" created="Sat, 25 Feb 2012 00:34:15 +0000"  >&lt;p&gt;Change fix version to 10.9. Leaving open for backport.&lt;/p&gt;</comment>
                            <comment id="13216174" author="kmarsden" created="Sat, 25 Feb 2012 00:38:16 +0000"  >&lt;p&gt;This issue has always been here. Changing affects version accordingly.&lt;/p&gt;</comment>
                            <comment id="13218468" author="kmarsden" created="Tue, 28 Feb 2012 18:54:40 +0000"  >&lt;p&gt;link to testing task&lt;/p&gt;</comment>
                            <comment id="13218483" author="kmarsden" created="Tue, 28 Feb 2012 19:05:13 +0000"  >&lt;p&gt;I backported the fix and test  to 10.5.   Reassigning to Brett who provided the code patch.&lt;br/&gt;
Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5633&quot; title=&quot;Add tests for state transition and behavior with Lock Timeout in XA Transaction (DERBY-5552 testing task)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5633&quot;&gt;&lt;del&gt;DERBY-5633&lt;/del&gt;&lt;/a&gt; for the testing.&lt;/p&gt;
</comment>
                            <comment id="13218487" author="kmarsden" created="Tue, 28 Feb 2012 19:06:14 +0000"  >&lt;p&gt;Resolving. I only went back as far is 10.5 but it certainly would be appropriate to backport further if needed.&lt;/p&gt;

&lt;p&gt;Thanks Brett for tthe fix!&lt;/p&gt;</comment>
                            <comment id="13823391" author="knutanders" created="Fri, 15 Nov 2013 08:15:07 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update: close all resolved issues that haven&amp;#39;t had any activity the last year&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12544462">DERBY-5633</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12536233">DERBY-5553</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12509290" name="DERBY-5552-p1.patch" size="1750" author="bbergquist" created="Tue, 3 Jan 2012 14:29:43 +0000"/>
                            <attachment id="12509291" name="DERBY-5552-p2.patch" size="560" author="bbergquist" created="Tue, 3 Jan 2012 14:37:08 +0000"/>
                            <attachment id="12516005" name="ReproDerby5552DB2.java" size="3893" author="kmarsden" created="Sat, 25 Feb 2012 00:24:40 +0000"/>
                            <attachment id="12509477" name="ReproDerby5552LockTimeout.java" size="4842" author="kmarsden" created="Wed, 4 Jan 2012 23:49:54 +0000"/>
                            <attachment id="12508403" name="appserverstack.txt" size="64497" author="bbergquist" created="Thu, 22 Dec 2011 16:03:53 +0000"/>
                            <attachment id="12508401" name="client.tar.Z" size="70311" author="bbergquist" created="Thu, 22 Dec 2011 16:02:15 +0000"/>
                            <attachment id="12515815" name="derby-5552_withexpanded_test_diff.txt" size="8814" author="kmarsden" created="Thu, 23 Feb 2012 21:01:30 +0000"/>
                            <attachment id="12513867" name="derby-5552_withtest_diff.txt" size="5458" author="kmarsden" created="Wed, 8 Feb 2012 21:48:41 +0000"/>
                            <attachment id="12512868" name="derby-5552_withtest_diff.txt" size="5389" author="kmarsden" created="Wed, 1 Feb 2012 23:37:42 +0000"/>
                            <attachment id="12508400" name="derby.log" size="327366" author="bbergquist" created="Thu, 22 Dec 2011 15:58:30 +0000"/>
                            <attachment id="12508404" name="derbystackatshutdown.txt" size="29836" author="bbergquist" created="Thu, 22 Dec 2011 16:04:53 +0000"/>
                            <attachment id="12508456" name="execute.patch" size="1336" author="bbergquist" created="Thu, 22 Dec 2011 22:30:22 +0000"/>
                            <attachment id="12508402" name="transactionsleft.txt" size="4020" author="bbergquist" created="Thu, 22 Dec 2011 16:03:04 +0000"/>
                            <attachment id="12516004" name="utilXid.java" size="1591" author="kmarsden" created="Sat, 25 Feb 2012 00:24:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Dec 2011 23:33:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>221853</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cuv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35901</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>