<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:54:57 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-2599/DERBY-2599.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-2599] Set correct collation type and derivation on DataTypeDescriptor(DTD).</title>
                <link>https://issues.apache.org/jira/browse/DERBY-2599</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;DTD has TypeDescriptorImpl in it which has 2 new fields, namely, collationType and collationDerivation. These 2 fields are available for all different types of DTDs but only apply to character types. The other datatypes should ignore these 2 fields.&lt;/p&gt;

&lt;p&gt;This Jira is a placeholder for loading the correct values into collationType and collationDerivation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12368325">DERBY-2599</key>
            <summary>Set correct collation type and derivation on DataTypeDescriptor(DTD).</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="mamtas">Mamta A. Satoor</reporter>
                        <labels>
                    </labels>
                <created>Mon, 30 Apr 2007 18:31:46 +0100</created>
                <updated>Thu, 2 May 2013 03:29:06 +0100</updated>
                            <resolved>Tue, 3 Jul 2007 17:41:10 +0100</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12492780" author="mamtas" created="Mon, 30 Apr 2007 21:28:39 +0100"  >&lt;p&gt;The patch (DERBY2599_IntermediatePatch_v1_diff.txt) attached is not for commit. I just wanted to put out my approach for changing the DTD constructors to take collation type and derivation. There has been some discussion on this approach at &lt;a href=&quot;http://www.nabble.com/DERBY-1478-Lineitem-DERBY-2599%3A-Associating-correct-collation-type-and-derivation-with-DTD-tf3671106.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/DERBY-1478-Lineitem-DERBY-2599%3A-Associating-correct-collation-type-and-derivation-with-DTD-tf3671106.html&lt;/a&gt; Dan recommended using setCollationType rather than changing each and every DTD constructor call. I will explore using setCollationType vs DTD constructor changes.&lt;/p&gt;</comment>
                            <comment id="12492911" author="mamtas" created="Tue, 1 May 2007 18:02:20 +0100"  >&lt;p&gt;Committed attached patch DERBY2599_collationType_default_UCS_BASIC_v1_diff.txt using revision 534157. This patch will have the collation type default to UCS_BASIC. It can later be set to TERRITORY_BASED wherever applicable using DataTypeDescriptor.setCollationType.&lt;/p&gt;</comment>
                            <comment id="12496653" author="mamtas" created="Thu, 17 May 2007 19:08:10 +0100"  >&lt;p&gt;The attached patch DERBY2599_correct_collation_for_cast_v1_diff.txt ensures that when an operand is CASTed to string datatype, the result type will take the collation of the current schema. So, if current schema is user schema for a database with territory based collation, then a comparison between a persistent character column from system table and a constant character string will fail because persistent character column from system table will have the collation of UCS_BASIC but the constant character string will pick up it&apos;s collation from current schema which is user schema and hence the collation will be territory based. Since the 2 collations don&apos;t match, we will get a compilation error for the query. To get around this, a user can rewrite the query to CAST persistent character column from system table to one of the character types and that resultant character type will pickup it&apos;s collation from current schema, so now both the operands will have collation of territory based and the query will execute without collation mismatch failure.&lt;/p&gt;

&lt;p&gt;I will go ahead and commit this patch in next few minutes. If any feedback, please feel free to share.&lt;/p&gt;</comment>
                            <comment id="12496657" author="mamtas" created="Thu, 17 May 2007 19:25:12 +0100"  >&lt;p&gt;Committed the patch DERBY2599_correct_collation_for_cast_v1_diff.txt  using revision 539060&lt;/p&gt;</comment>
                            <comment id="12496731" author="army" created="Fri, 18 May 2007 00:54:54 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;Just one minor nit that I noticed.  It&apos;s not actually specific to this issue, but it&apos;s a collation question that I noticed while doing a quick test.  As seen in the new test case introduced with the patch for this issue, an attempt to compare a constant with a persistent system column fails with error 42818.  The fact that it fails is fine; I do wonder, though, if that specific error message is appropriate.  Take, for the example, the following:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; connect &apos;nodb;create=true;territory=no;collation=TERRITORY_BASED&apos;;&lt;br/&gt;
ij&amp;gt; select * from sys.systables where tablename = &apos;T1&apos;;&lt;br/&gt;
ERROR 42818: Comparisons between &apos;VARCHAR&apos; and &apos;CHAR&apos; are not supported.&lt;/p&gt;

&lt;p&gt;The error message is a tad misleading--one can most certainly compare VARCHARs with CHARs in Derby &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I don&apos;t know how hard it would, or if it would be worth it, but I think it&apos;d be great if the error message could actually say something about collation (maybe a new error would be required)?  Otherwise, this seems like the kind of thing that could really confuse a user.  At least, it scared me for a second or two before I realized what was going on &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12496794" author="mamtas" created="Fri, 18 May 2007 07:16:40 +0100"  >&lt;p&gt;Army, I agree with your observation about the error message. I will go ahead and make a jira entry for the error message so we don&apos;t loose track of it.&lt;/p&gt;</comment>
                            <comment id="12496796" author="mamtas" created="Fri, 18 May 2007 07:26:18 +0100"  >&lt;p&gt;I created a Jira entry &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2668&quot; title=&quot;At the time of compilation of a comparison operation, if the collation types of the operands do not match, then we should throw a meaningful error message.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2668&quot;&gt;&lt;del&gt;DERBY-2668&lt;/del&gt;&lt;/a&gt; : At the time of compilation of a comparison operation, if the collation types of the operands do not match, then we should throw a meaningful error message.&lt;/p&gt;</comment>
                            <comment id="12497491" author="mamtas" created="Mon, 21 May 2007 17:03:08 +0100"  >&lt;p&gt;Attaching patch DERBY2599_Set_collation_for_aggregates_v1_diff.txt which does the job of setting the correct collation type and derivation for aggregates. As per SQL standard, if the operands of the aggregate methods are string operands and they do not all have the same collation derivaiton and type on them, then the resultant string operand will have collation derivaiton of NONE. One thing that is missing is as per SQL spec, in a comparison operator, as far as there is one operand with non-NONE collation derivation, the comparison should work. I do not have that part working yet. If the two operands of the comparison operator do not have the same collation, the comparison will fail. Also, if both the sides of the comparison operator have NONE collation, the current DERBY10.3 code will not catch that. Both of these issues can go as a subsequent patch.&lt;/p&gt;

&lt;p&gt;The aggregate methods that are covered by the patch are COALESCE, CONCATENATE, NULLIF, CASE&lt;/p&gt;</comment>
                            <comment id="12497513" author="mamtas" created="Mon, 21 May 2007 17:48:37 +0100"  >&lt;p&gt;Committed attached patch DERBY2599_Set_collation_for_aggregates_v1_diff.txt using revision 540201. It takes care of correct collation setting for aggregates.&lt;/p&gt;</comment>
                            <comment id="12497545" author="mamtas" created="Mon, 21 May 2007 20:00:01 +0100"  >&lt;p&gt;Commited attached patch using revision 540237. The commit comments are as follows&lt;/p&gt;

&lt;p&gt;Commiting patch DERBY2599_Set_collation_for_aggregates_v1_diff.txt attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2599&quot; title=&quot;Set correct collation type and derivation on DataTypeDescriptor(DTD).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2599&quot;&gt;&lt;del&gt;DERBY-2599&lt;/del&gt;&lt;/a&gt;. This patch sets correct collation type for MAX and MIN aggregate functions. These 2 aggregate functions can return string datatype and this return datatype should take it&apos;s collation from it&apos;s operand. It appears that these 2 functions can&apos;t be used in where clause but even then, I think they should have correct collation set on them.&lt;/p&gt;</comment>
                            <comment id="12497546" author="army" created="Mon, 21 May 2007 20:02:49 +0100"  >&lt;p&gt;Hi Mamta, quick question on the latest patch.&lt;/p&gt;

&lt;p&gt;The aggregate patch includes the following diff in ConcatenationOperatorNode:&lt;/p&gt;

&lt;p&gt;+            if (rightOperand.getTypeId().isStringTypeId())&lt;br/&gt;
+            &lt;/p&gt;
{//collation of ? operand should be same as the other operand
+                leftOperand.getTypeServices().setCollationDerivation(
+                    rightOperand.getTypeServices().getCollationDerivation());
+                leftOperand.getTypeServices().setCollationType(
+                    rightOperand.getTypeServices().getCollationType());
+            }

&lt;p&gt;The collation wiki page says the following under &quot;Collation Determination&quot;:&lt;/p&gt;

&lt;p&gt;  8) JDBC parameters (ie. ?) where the type of the parameter is a character&lt;br/&gt;
     type will have the same collation as of the character set of the schema&lt;br/&gt;
     where the statement is prepared. The collation derivation will be&lt;br/&gt;
     implicit.&lt;/p&gt;

&lt;p&gt;Is there a mismatch between the code and the wiki page?&lt;/p&gt;

&lt;p&gt;I tried to write a sample case to demonstrate the difference but it looks like Derby always sets the result of a concatenation operator to LONG VARCHAR if one operand is a char type and the other is a parameter (that&apos;s the behavior I saw with my examples, anyways; maybe I&apos;m missing something).  Since LONG VARCHARs are not comparable, that preempts any collation behavior that I was trying to test.  But I thought I&apos;d post the question anyways, in case there&apos;s something here that should be changed (perhaps just the wiki page?).&lt;/p&gt;

&lt;p&gt;Apologies if I&apos;m overlooking something obvious...&lt;/p&gt;</comment>
                            <comment id="12497548" author="army" created="Mon, 21 May 2007 20:06:11 +0100"  >&lt;p&gt;For clarity, previous comment was w.r.t:&lt;/p&gt;

&lt;p&gt;  DERBY2599_Set_collation_for_aggregates_v1_diff.txt&lt;/p&gt;</comment>
                            <comment id="12497590" author="mamtas" created="Mon, 21 May 2007 22:23:52 +0100"  >&lt;p&gt;Army, thank you very much for reviewing my patches. &lt;/p&gt;

&lt;p&gt;I am getting to the stage in this project where I need to make sure that I set correct collation wherever we construct a DTD. So, I am very greatful for these reviews. And I think you have definitely found a bug in the changes I made with DERBY2599_Set_collation_for_aggregates_v1_diff.txt. The ? param should pickup it&apos;s collation from schema. I will fix that soon.&lt;/p&gt;</comment>
                            <comment id="12497948" author="mamtas" created="Tue, 22 May 2007 19:06:18 +0100"  >&lt;p&gt;Committing attached patch DERBY2599_getNull_should_set_collation_info_v1_diff.txt using revision 540667. &lt;/p&gt;

&lt;p&gt;This address the correct collation setting for ConstantNode created through QueryTreeNode&apos;s  getNullNode method. This method currently creates a ConstantNode using the passed typeId. We need to set the correct collation type and derivation on this ConstantNode. This is accomplished by having the caller of this method pass the correct collation type and derivation. The junit tests have run fine with no problems. derbyall is almost finished with no new failures.&lt;/p&gt;

&lt;p&gt;In addition to the above change, this patch also fixes some comments in DataTypeDescriptor.java and TypeDescriptorImpl.java&lt;/p&gt;</comment>
                            <comment id="12498831" author="mamtas" created="Thu, 24 May 2007 21:57:48 +0100"  >&lt;p&gt;Made a commit earlier today - revision 541381&lt;/p&gt;

&lt;p&gt;ResultColumn&apos;s convertConstant method has 2 calls to DataValueFactory.getVarcharDataValue(String) which will always create SQLVarchar and disregard any collation information that it should be using. This gets called for an INSERT statement while trying to do column type and length matching from the source resultset into the target. The change through this commit makes sure we set the correct collation type and derivation. Some background information on this change from a thread titled &quot;Possible missing collation info for DVDs?&quot; on Derby dev mailing list (&lt;a href=&quot;http://www.nabble.com/Possible-missing-collation-info-for-DVDs--tf3798563.html#a10745343&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Possible-missing-collation-info-for-DVDs--tf3798563.html#a10745343&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Snippet start from the thread mentioned above.&lt;br/&gt;
I looked at ResultColumn&apos;s convertConstant method which has the 2 calls to DataValueFactory.getVarcharDataValue(String). This method gets called in following sequence&lt;br/&gt;
convertConstant(TypeId, int, DataValueDescriptor) - org.apache.derby.impl.sql.compile.ResultColumn&lt;br/&gt;
 columnTypeAndLengthMatch(ResultColumn) - org.apache.derby.impl.sql.compile.ResultColumn&lt;br/&gt;
 columnTypesAndLengthsMatch(ResultColumnList) - org.apache.derby.impl.sql.compile.ResultColumnList&lt;br/&gt;
  bindStatement() - org.apache.derby.impl.sql.compile.InsertNode&lt;/p&gt;

&lt;p&gt;It looks like InsertNode&apos;s bindStatement method calls columnTypesAndLengthsMatch to make sure that the source and target column types and lengths match and if not, then it should insert a NormalizeResultSetNode  on top of the source. If the source happens to have constants, then we try to convert the constant to the type of the target(this happens in ResultColumn&apos;s convertConstant method).&lt;/p&gt;

&lt;p&gt;Since none of this code flow happens for a collation operation, in theory, it will be ok with not setting the correct collation type and derivation and hence the code should not run into any problem even if it stayed as it is. If my understanding is wrong about how the constants in the insert statement can&apos;t be part of a collation operation, then please let me know. Ideally though, it will not hurt to have the correct collation type and derivation setting on constants in this case whether or not they get used in a collation method. So,&lt;br/&gt;
I will go ahead and do that. &lt;br/&gt;
Snippet end from the thread mentioned above.&lt;/p&gt;
</comment>
                            <comment id="12499916" author="mamtas" created="Tue, 29 May 2007 21:47:58 +0100"  >&lt;p&gt;Committed patch DERBY2599_set_correct_collation_for_params_and_string_functions_v1_diff.txt with following commit comments&lt;br/&gt;
&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2599&quot; title=&quot;Set correct collation type and derivation on DataTypeDescriptor(DTD).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2599&quot;&gt;&lt;del&gt;DERBY-2599&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
Commiting the patch which makes sure that JDBC parameters take their ollation type from the schema in which they are getting compiled. This involved quite a few classes. I have added quite a few test cases. Test cases are required for LIKE, user defined functions, IS NULL.&lt;br/&gt;
The commit also implements the fact that the result character string types from UPPER, LOWER, TRIM(LTRIM, RTRIM), SUBSTR will have the same collation as their operand.&quot;&lt;/p&gt;</comment>
                            <comment id="12499918" author="mamtas" created="Tue, 29 May 2007 21:48:48 +0100"  >&lt;p&gt;The commit mentioned in the comment about went in as revision 542646.&lt;/p&gt;</comment>
                            <comment id="12500417" author="mamtas" created="Thu, 31 May 2007 18:13:57 +0100"  >&lt;p&gt;The discussion in &lt;a href=&quot;http://www.nabble.com/more-on-system-schema-vs.-user-schema-and-character-constants.-p10885286.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/more-on-system-schema-vs.-user-schema-and-character-constants.-p10885286.html&lt;/a&gt; is exposing a bug in my approach of what schema should be picked up for collation when a character string type in Derby is supposed to pick up it&apos;s collation from the schema it is getting compiled in. I was picking up the collation of connection&apos;s current schema but it should really be the collation of the compilation schema. I will start looking into it.&lt;/p&gt;</comment>
                            <comment id="12500500" author="mamtas" created="Thu, 31 May 2007 22:38:06 +0100"  >&lt;p&gt;Commited attached patch DERBY2599_Use_collation_of_compilation_schema_and_not_current_schema_diff_v1.txt using revision 543266. This commit makes sure that we use compilation schema rather than current schema to set the collation type of some of the character string type instances in Derby.&lt;/p&gt;</comment>
                            <comment id="12500505" author="mamtas" created="Thu, 31 May 2007 22:46:57 +0100"  >&lt;p&gt;The commit comments for revision 543266 are as follows&lt;br/&gt;
&quot;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2599&quot; title=&quot;Set correct collation type and derivation on DataTypeDescriptor(DTD).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2599&quot;&gt;&lt;del&gt;DERBY-2599&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
There are few character string types that should take their collation type from compilation schema. I had earlier checked in code for them to use current schema rather than compilation schema (For reference &lt;a href=&quot;http://www.nabble.com/more-on-system-schema-vs.-user-schema-and-character-constants.-p10885286.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/more-on-system-schema-vs.-user-schema-and-character-constants.-p10885286.html&lt;/a&gt;)&lt;br/&gt;
With this commit, I am adding an utility method in ValueNode called setCollationUsingCompilationSchema(int) which will use the compilation schema&apos;s collation type for it&apos;s DTD. And it will use the passed int value to set its DTD&apos;s collation derivation. This utility method will be used by the subclasses of ValueNode to set their DTD&apos;s collation type to compilation schema&apos;s type wherever required. Note that all the character string types always take their collation from the compilation schema. For instance, persistent character string type column from a table will take the collation type from the schema their table belongs to rather than the compilation schema.&lt;/p&gt;

&lt;p&gt;I have run the 2 collation related tests, CollationTest and CollationTest2 and they run with no problems.&lt;br/&gt;
&quot;&lt;/p&gt;</comment>
                            <comment id="12503027" author="mamtas" created="Sat, 9 Jun 2007 08:27:40 +0100"  >&lt;p&gt;DataTypeDescriptor has a method called getDominantType which compares itself with the DTD passed as parameter to getDominantType and creates a new DTD with the dominant type of the 2 DTDs, But, while doing so, It was not setting the collation information on the new DTD based on the 2 involved DTDs. I have made changes into the method which now will set the correct collation information on the new DTD. The algorithm, as copied from the method javadoc, is as follows&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If dealing with character string types, then make sure to set the&lt;/li&gt;
	&lt;li&gt;collation info on the dominant type. Following algorithm will be used&lt;/li&gt;
	&lt;li&gt;for dominant DTD&apos;s collation determination. Each of the steps of the&lt;/li&gt;
	&lt;li&gt;algorithem have been numbered in the comments below and those same&lt;/li&gt;
	&lt;li&gt;numbers are used in the actual algorithm below so it is easier to&lt;/li&gt;
	&lt;li&gt;understand and maintain.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Step 1&lt;/li&gt;
	&lt;li&gt;If the DTD for &quot;this&quot; node has the same collation derivation as the&lt;/li&gt;
	&lt;li&gt;otherDTS, then check if their collation types match too. If the&lt;/li&gt;
	&lt;li&gt;collation types match too, then DTD for dominant type will get the same&lt;/li&gt;
	&lt;li&gt;collation derivation and type.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Step 2&lt;/li&gt;
	&lt;li&gt;If the collation derivation for DTD for &quot;this&quot; node and otherDTS do not&lt;/li&gt;
	&lt;li&gt;match, then check if one of them has the collation derivation of NONE.&lt;/li&gt;
	&lt;li&gt;If that is the case, then dominant DTD will get the collation type and&lt;/li&gt;
	&lt;li&gt;derivation of DTD whose collation derivation is not NONE.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Step 3&lt;/li&gt;
	&lt;li&gt;If the collation derivation for DTD for &quot;this&quot; node and otherDTS do not&lt;/li&gt;
	&lt;li&gt;match, and none of them have the derivation of NONE then it means that&lt;/li&gt;
	&lt;li&gt;we are dealing with collation derivation of IMPLICIT and EXPLICIT and&lt;/li&gt;
	&lt;li&gt;hence the dominant DTD should get collation derivation of NONE. This is&lt;/li&gt;
	&lt;li&gt;not a possibility in Derby 10.3 because the only 2 possible collation&lt;/li&gt;
	&lt;li&gt;derivation supported are IMPLICIT and NONE.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Step 4&lt;/li&gt;
	&lt;li&gt;If the collation derivation for DTD for &quot;this&quot; node and otherDTS match,&lt;/li&gt;
	&lt;li&gt;then check if the collation types match too. If not, then the dominant&lt;/li&gt;
	&lt;li&gt;DTD should get collation derivation of NONE.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Now, note that ValueNodeList has a method called getDominantTypeServices where it could deal with any number of DTDs to determine the dominant DTD. It calls DataTypeDescriptor.getDominantType on 2 DTDs at a time. At the beginning, the 2 DTDs are the first two in it&apos;s vector. It gets an intermediate dominantDTS back for those 2 DTDs. Next, it calls DataTypeDescriptor.getDominantType with the intermediate dominantDTS and the 3rd element in it&apos;s vector and so on and so forth. It is not enough to just use 2 DTDs at a time to determine the collation info for the final dominantDTS. We need to consider all the DTDs in the vector together to determine the correct collation info for the final dominantDTS. The algorithm used by ValueNodeList.getDominantTypeServices is in that method&apos;s javadoc and included here for reference&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Algorithm for determining collation information&lt;/li&gt;
	&lt;li&gt;This method will check if it is dealing with character string datatypes.&lt;/li&gt;
	&lt;li&gt;If yes, then it will check if all the character string datatypes have&lt;/li&gt;
	&lt;li&gt;the same collation derivation and collation type associated with them.&lt;/li&gt;
	&lt;li&gt;If not, then the resultant DTD from this method will have collation&lt;/li&gt;
	&lt;li&gt;derivation of NONE. If yes, then the resultant DTD from this method will&lt;/li&gt;
	&lt;li&gt;have the same collation derivation and collation type as all the&lt;/li&gt;
	&lt;li&gt;character string datatypes.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I will commit the code and comment changes in DataTypeDescriptor  and comment changes in ValueNodeList.getDominantTypeServices  shortly. Please feel to provide feedback if you have any,&lt;/p&gt;</comment>
                            <comment id="12503028" author="mamtas" created="Sat, 9 Jun 2007 08:33:38 +0100"  >&lt;p&gt;Committed changes explained by the comment before this one using revision 545706&lt;/p&gt;</comment>
                            <comment id="12509929" author="mamtas" created="Tue, 3 Jul 2007 17:41:10 +0100"  >&lt;p&gt;The work for this task is complete.&lt;/p&gt;</comment>
                            <comment id="12523274" author="mamtas" created="Tue, 28 Aug 2007 17:47:15 +0100"  >&lt;p&gt;Made a commit in main codeline which just fixes the comments. The revision for change is 570482. I also migrated this change into 10.3 codeline with revision 570483.&lt;/p&gt;

&lt;p&gt;Commit comments are as follows.&lt;/p&gt;

&lt;p&gt;Fixed the comments for getDominantTypeServices() method in ValueNodeList. The comments were using an example of concatenation operation but concatenation operation does not call this method to find the dominant type of it&apos;s 2 operands. Instead, concatenation operator implements it&apos;s own simple algorithm in ConcatenationOperatorNode. This is because ConcatenationOperatorNode does not work off of a ValueNodeList. I have reworded the comments for getDominantTypeServices() to describe what is doing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12371159">DERBY-2776</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12371163">DERBY-2777</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370473">DERBY-2722</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370474">DERBY-2723</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370475">DERBY-2724</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370553">DERBY-2731</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12369647">DERBY-2668</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12362828">DERBY-2335</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12356537" name="DERBY2599_IntermediatePatch_v1_diff.txt" size="115659" author="mamtas" created="Mon, 30 Apr 2007 21:28:39 +0100"/>
                            <attachment id="12356538" name="DERBY2599_IntermediatePatch_v1_stat.txt" size="2013" author="mamtas" created="Mon, 30 Apr 2007 21:28:39 +0100"/>
                            <attachment id="12357795" name="DERBY2599_Set_collation_for_Max_Min_v1_diff.txt" size="3917" author="mamtas" created="Mon, 21 May 2007 20:00:01 +0100"/>
                            <attachment id="12357783" name="DERBY2599_Set_collation_for_aggregates_v1_diff.txt" size="30469" author="mamtas" created="Mon, 21 May 2007 17:03:08 +0100"/>
                            <attachment id="12357796" name="DERBY2599_Set_collation_for_aggregates_v1_stat.txt" size="387" author="mamtas" created="Mon, 21 May 2007 20:00:01 +0100"/>
                            <attachment id="12357784" name="DERBY2599_Set_collation_for_aggregates_v1_stat.txt" size="387" author="mamtas" created="Mon, 21 May 2007 17:03:08 +0100"/>
                            <attachment id="12358662" name="DERBY2599_Use_collation_of_compilation_schema_and_not_current_schema_diff_v1.txt" size="24553" author="mamtas" created="Thu, 31 May 2007 22:38:06 +0100"/>
                            <attachment id="12358663" name="DERBY2599_Use_collation_of_compilation_schema_and_not_current_schema_stat_v1.txt" size="1473" author="mamtas" created="Thu, 31 May 2007 22:38:06 +0100"/>
                            <attachment id="12356568" name="DERBY2599_collationType_default_UCS_BASIC_v1_diff.txt" size="2462" author="mamtas" created="Tue, 1 May 2007 18:02:20 +0100"/>
                            <attachment id="12356569" name="DERBY2599_collationType_default_UCS_BASIC_v1_stat.txt" size="212" author="mamtas" created="Tue, 1 May 2007 18:02:20 +0100"/>
                            <attachment id="12357564" name="DERBY2599_correct_collation_for_cast_v1_diff.txt" size="8197" author="mamtas" created="Thu, 17 May 2007 19:08:09 +0100"/>
                            <attachment id="12357565" name="DERBY2599_correct_collation_for_cast_v1_stat.txt" size="225" author="mamtas" created="Thu, 17 May 2007 19:08:10 +0100"/>
                            <attachment id="12357905" name="DERBY2599_getNull_should_set_collation_info_v1_diff.txt" size="9294" author="mamtas" created="Tue, 22 May 2007 19:06:18 +0100"/>
                            <attachment id="12357906" name="DERBY2599_getNull_should_set_collation_info_v1_stat.txt" size="527" author="mamtas" created="Tue, 22 May 2007 19:06:18 +0100"/>
                            <attachment id="12358475" name="DERBY2599_set_correct_collation_for_params_and_string_functions_v1_diff.txt" size="104214" author="mamtas" created="Tue, 29 May 2007 21:47:58 +0100"/>
                            <attachment id="12358476" name="DERBY2599_set_correct_collation_for_params_and_string_functions_v1_stat.txt" size="1795" author="mamtas" created="Tue, 29 May 2007 21:47:58 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>16.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 17 May 2007 23:54:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30536</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ssv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38484</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>