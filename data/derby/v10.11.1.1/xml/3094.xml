<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:26:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3094/DERBY-3094.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3094] Grouping of expressions causes NullPointerException</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3094</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Following steps to reproduce the bug:&lt;/p&gt;

&lt;p&gt;create table xx (a double, b double);&lt;br/&gt;
insert into xx values (2, 3);&lt;/p&gt;

&lt;p&gt;select a, a*(b/100.000000), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx  group by a, a*(b/100.000000);&lt;/p&gt;

&lt;p&gt;Starting run&lt;/p&gt;

&lt;p&gt;select a, a*(b/100.000000), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx &lt;br/&gt;
group by a, a*(b/100.000000)&lt;/p&gt;

&lt;p&gt;Run successful&lt;/p&gt;

&lt;p&gt;SQL State = 38000 SQL Code = 20000 SQL Message = Bei der Auswertung eines Ausdrucks wurde die Ausnahme &apos;java.lang.NullPointerException&apos; ausgel&#246;st. Exception message = java.sql.SQLException: Bei der Auswertung eines Ausdrucks wurde die Ausnahme &apos;java.lang.NullPointerException&apos; ausgel&#246;st.&lt;/p&gt;

&lt;p&gt;Work around:&lt;/p&gt;

&lt;p&gt;select a, a*(b/100.000000), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a, b, a*(b/100.000000) &lt;/p&gt;

&lt;p&gt;Stack trace from application:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Bei der Auswertung eines Ausdrucks wurde die Ausnahme &apos;java.lang.NullPointerException&apos; ausgel&#246;st.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)&lt;br/&gt;
	at de.arcor.billy.report.views.designer.ReportViewerView.setInput(ReportViewerView.java:255)&lt;br/&gt;
	at de.arcor.billy.report.views.designer.ReportViewerView.createPartControl(ReportViewerView.java:113)&lt;br/&gt;
	at org.eclipse.ui.internal.ViewReference.createPartHelper(ViewReference.java:332)&lt;br/&gt;
	at org.eclipse.ui.internal.ViewReference.createPart(ViewReference.java:197)&lt;br/&gt;
	at org.eclipse.ui.internal.WorkbenchPartReference.getPart(WorkbenchPartReference.java:566)&lt;br/&gt;
	at org.eclipse.ui.internal.Perspective.showView(Perspective.java:1675)&lt;br/&gt;
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:987)&lt;br/&gt;
	at org.eclipse.ui.internal.WorkbenchPage.access$13(WorkbenchPage.java:968)&lt;br/&gt;
	at org.eclipse.ui.internal.WorkbenchPage$13.run(WorkbenchPage.java:3514)&lt;br/&gt;
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)&lt;br/&gt;
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:3511)&lt;br/&gt;
	at de.arcor.billy.report.data.ReportDataAdvisor$2.perspectiveChanged(ReportDataAdvisor.java:268)&lt;br/&gt;
	at de.arcor.billy.system.actions.AbstractOpenPerspectiveActionDelegate$1.run(AbstractOpenPerspectiveActionDelegate.java:66)&lt;br/&gt;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&lt;br/&gt;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:123)&lt;br/&gt;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3325)&lt;br/&gt;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:2971)&lt;br/&gt;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:1930)&lt;br/&gt;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:1894)&lt;br/&gt;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:422)&lt;br/&gt;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&lt;br/&gt;
	at de.arcor.billy.product.Billy.run(Billy.java:15)&lt;br/&gt;
	at org.eclipse.core.internal.runtime.PlatformActivator$1.run(PlatformActivator.java:78)&lt;br/&gt;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:92)&lt;br/&gt;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:68)&lt;br/&gt;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:400)&lt;br/&gt;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:177)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
	at org.eclipse.core.launcher.Main.invokeFramework(Main.java:336)&lt;br/&gt;
	at org.eclipse.core.launcher.Main.basicRun(Main.java:280)&lt;br/&gt;
	at org.eclipse.core.launcher.Main.run(Main.java:977)&lt;br/&gt;
	at org.eclipse.core.launcher.Main.main(Main.java:952)&lt;br/&gt;
Caused by: java.sql.SQLException: Java-Ausnahme: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
	... 42 more&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.exe.ac9b638174x0115x5f93x1332x0000046fd8a01b.e10(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowFromSource(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowCore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)&lt;br/&gt;
	... 37 more&lt;/p&gt;</description>
                <environment>Windows XP, Eclipse 3.2.2, java 1.5.0.11</environment>
        <key id="12379465">DERBY-3094</key>
            <summary>Grouping of expressions causes NullPointerException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="peterb">Peter Balon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 Oct 2007 09:12:35 +0100</created>
                <updated>Fri, 21 Jan 2011 17:50:53 +0000</updated>
                            <resolved>Sun, 2 Mar 2008 16:16:35 +0000</resolved>
                                    <version>10.3.1.4</version>
                                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12531805" author="bryanpendleton" created="Tue, 2 Oct 2007 15:11:20 +0100"  >&lt;p&gt;Possibly the same as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2352&quot; title=&quot;Assertion Failure with order by and group by expression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2352&quot;&gt;&lt;del&gt;DERBY-2352&lt;/del&gt;&lt;/a&gt;, which may have a different error message&lt;br/&gt;
because it&apos;s in a SANE build and this one is in an INSANE build.&lt;/p&gt;</comment>
                            <comment id="12543876" author="thomanie" created="Tue, 20 Nov 2007 11:52:47 +0000"  >&lt;p&gt;I reproduced this in my sandbox even with the ready-to-commit patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2352&quot; title=&quot;Assertion Failure with order by and group by expression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2352&quot;&gt;&lt;del&gt;DERBY-2352&lt;/del&gt;&lt;/a&gt; applied, so it&apos;s not a dup of 2352.&lt;/p&gt;

&lt;p&gt;Good news is it throws the NPE with both sane and insane builds, and here&apos;s the callstack with line numbers&lt;br/&gt;
&amp;#8212;&lt;br/&gt;
2007-11-20 11:43:05.545 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; (XID = 173), (SESSIONID = 0), (DATABASE = d3094), (DRDAID = null), Failed Statement is: select a, a*(b/100.000000), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a, a*(b/100.000000)&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:294)&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:554)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:164)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:488)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:291)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:463)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:424)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:368)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:382)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:338)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:241)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:435)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:509)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:215)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.exe.ac601a400fx0116x5cddx8367x000000107e400.e3(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:145)&lt;br/&gt;
        ... 17 more&lt;br/&gt;
============= begin nested exception, level (1) ===========&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.exe.ac601a400fx0116x5cddx8367x000000107e400.e3(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:145)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:488)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:291)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:463)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:424)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:368)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:382)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:338)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:241)&lt;br/&gt;
        at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:435)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:509)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:350)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:248)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:215)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:181)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:73)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
&amp;#8211;&lt;/p&gt;

&lt;p&gt;ProjectRestrictResultSet seems to consider the obvious case where projection == null, but it still fails&lt;br/&gt;
   // Use reflection to do as much of projection as required&lt;br/&gt;
   if (projection != null)&lt;/p&gt;
   {
      result = (ExecRow) projection.invoke(activation);          &amp;lt;== ln 488
   }
&lt;p&gt;   else&lt;/p&gt;
   {
      result = mappedResultRow;
   }</comment>
                            <comment id="12543878" author="thomanie" created="Tue, 20 Nov 2007 12:19:52 +0000"  >&lt;p&gt;Dropping the count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; in the debugger actually works:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select a, a*(b/100.000000) from xx group by a, a*(b/100.000000);&lt;br/&gt;
A                     |2                     &lt;br/&gt;
---------------------------------------------&lt;br/&gt;
2.0                   |0.06                  &lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;I traced through the ProjectRestrictResultSet code and its source GroupedAggregateResultSet, but could not immediately see where the NPE originated.&lt;/p&gt;</comment>
                            <comment id="12543886" author="thomanie" created="Tue, 20 Nov 2007 12:55:30 +0000"  >&lt;p&gt;I wasn&apos;t really going to hunt this one down, but tracing a little further I see BaseActivation.getColumnFromRow() returns null @ 1359 with a comment that &quot;this happens&quot;.&lt;/p&gt;

&lt;p&gt; if( row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; == null)&lt;/p&gt;
        {
            /* This actually happens. NoPutResultSetImpl.clearOrderableCache attempts to prefetch invariant values
             * into a cache. This fails in some deeply nested joins. See Beetle 4736 and 4880.
             */
            return null;     &amp;lt;==ln 1359
        }

&lt;p&gt;This in turn makes BaseActivation.getDataValueFactory() return null, and in the end DataValueFactoryImpl.getDecimalDataValue(NumberValue) returning null. And the NPE surfaces.&lt;/p&gt;

</comment>
                            <comment id="12543963" author="bryanpendleton" created="Tue, 20 Nov 2007 17:42:15 +0000"  >&lt;p&gt;Hi Thomas, thanks for investigating this. Your analysis is very interesting. You might&lt;br/&gt;
want to have a look at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt;, which refers to precisely the &quot;if&quot; statement that&lt;br/&gt;
you are studying.&lt;/p&gt;</comment>
                            <comment id="12544188" author="thomanie" created="Wed, 21 Nov 2007 08:10:01 +0000"  >&lt;p&gt;The patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; removes the if() handling row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; == null.&lt;br/&gt;
Not surprisingly we run into another NPE in BaseActivation on the return line following the original if() after patching.&lt;/p&gt;

&lt;p&gt;   return row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt;.getColumn(colId);&lt;/p&gt;

&lt;p&gt;as row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; still is null in our case.&lt;/p&gt;

&lt;p&gt;It would initially seem both &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; and this jira have the same, or a similar, root cause? Could it be the proposed patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; only remove the symptoms seen with the if(), and not the actual underlying problem?&lt;/p&gt;

&lt;p&gt;If the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; is applied (and fixes other problems), we will still see this one.&lt;/p&gt;</comment>
                            <comment id="12544190" author="thomanie" created="Wed, 21 Nov 2007 08:21:37 +0000"  >&lt;p&gt;It also seems that this bug only manifests itself if there is an aggregation function &lt;b&gt;and&lt;/b&gt; a decimal operation.&lt;/p&gt;

&lt;p&gt;No aggregation works:&lt;br/&gt;
ij&amp;gt; select a, a*(b/100.000000) from xx group by a, a*(b/100.000000);&lt;br/&gt;
A                     |2&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
2.0                   |0.06&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;No decimal operation works:&lt;br/&gt;
ij&amp;gt; select a, b, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a, b;&lt;br/&gt;
A                     |B                     |3&lt;br/&gt;
---------------------------------------------------------&lt;br/&gt;
2.0                   |3.0                   |1&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;Seemingly independent of type of decimal operation:&lt;br/&gt;
ij&amp;gt; select a, a/b  from xx group by a, a/b;&lt;br/&gt;
A                     |2&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
2.0                   |0.6666666666666666&lt;/p&gt;

&lt;p&gt;1 row selected&lt;/p&gt;

&lt;p&gt;But add the aggregate &lt;b&gt;and&lt;/b&gt; the decimal operation, and we see the NPE.&lt;br/&gt;
ij&amp;gt; select a, a*b, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a, a*b;&lt;br/&gt;
A                     |2                     |3&lt;br/&gt;
---------------------------------------------------------&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;.&lt;br/&gt;
ij&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12544485" author="bryanpendleton" created="Wed, 21 Nov 2007 14:53:08 +0000"  >&lt;p&gt;Hi Thomas, thanks for studying this problem. I think you should mark the issue as assigned&lt;br/&gt;
to you to indicate that you are actively studying it.&lt;/p&gt;

&lt;p&gt;&amp;gt; row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; still is null in our case&lt;/p&gt;

&lt;p&gt;Sorry, Thomas, I think I wasn&apos;t very clear in my other comment. &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; is definitely not a fix for this problem;&lt;br/&gt;
it&apos;s related only in the sense that it discusses the getColumnFromRow() code.&lt;/p&gt;

&lt;p&gt;My belief is that the &quot;if&quot; statement in getColumnFromRow is unnecessary and incorrect,&lt;br/&gt;
because there should be no situations in which Derby ever needs to fetch a column&apos;s&lt;br/&gt;
value from a row prior to the initialization/population of that row with valid values.&lt;/p&gt;

&lt;p&gt;The various cases that I looked at before filing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3097&quot; title=&quot;Unnecessary if statement can be removed from BaseActivation.getColumnFromNow&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3097&quot;&gt;&lt;del&gt;DERBY-3097&lt;/del&gt;&lt;/a&gt; all involved situations in&lt;br/&gt;
which, due to other problems, Derby was accessing the internal row/column data structures&lt;br/&gt;
in an inconsistent manner.&lt;/p&gt;

&lt;p&gt;For example, with this particular problem, I think that you could investigate how the&lt;br/&gt;
ResultColumn instances for the aggregate function and the arithmetic expression column&lt;br/&gt;
are built up, and how their row and column number values are manipulated during bind&lt;br/&gt;
processing.&lt;/p&gt;

&lt;p&gt;Here are some things to pay particular attention to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when the invalid call to getColumnFromRow is made, which actual table and column&lt;br/&gt;
   is being dereferenced?&lt;/li&gt;
	&lt;li&gt;what does the generated &quot;e3&quot; method for your case look like? You can view this code&lt;br/&gt;
   using the techniques described at &lt;a href=&quot;http://wiki.apache.org/db-derby/DumpClassFile&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DumpClassFile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12567333" author="bryanpendleton" created="Sat, 9 Feb 2008 16:55:44 +0000"  >&lt;p&gt;Generated method &quot;e3&quot; is the &quot;projection&quot; method for the generated ProjectRestrictResultSet.&lt;/p&gt;

&lt;p&gt;Here is a snippet of the generated code:&lt;/p&gt;

&lt;p&gt;    private ResultSet fillResultSet()&lt;br/&gt;
        throws StandardException&lt;/p&gt;
    {
        getLanguageConnectionContext().getAuthorizer().authorize(this, 1);
        return getResultSetFactory().getScrollInsensitiveResultSet(
            getResultSetFactory().getProjectRestrictResultSet(
                getResultSetFactory().getGroupedAggregateResultSet(
                    getResultSetFactory().getProjectRestrictResultSet(
                        getResultSetFactory().getBulkTableScanResultSet(
                            this, 1024, 5, getMethod(&quot;e0&quot;), 2, null, -1,
                            null, -1, true, e1, &quot;XX&quot;, null, null, false,
                            false, -1, -1, 7, false, 0, 16, false,
                            6D, 100.404D),
                        null, getMethod(&quot;e1&quot;), 3, null, 4, false, true,
                        6D, 100.404D),
                    false, 3, 2, getMethod(&quot;e2&quot;), 224, 1, 6D, 100.404D),
                null, getMethod(&quot;e3&quot;), 4, null, 1, false, true, 1D, 100.404D),
            this, 0, 3, getScrollable(), 1D, 100.404D);
    }

&lt;p&gt;Note that getMethod(&quot;e3&quot;) is the 3rd argument to getProjectRestrictResultset()&lt;/p&gt;</comment>
                            <comment id="12567336" author="bryanpendleton" created="Sat, 9 Feb 2008 17:56:44 +0000"  >&lt;p&gt;Note that there are &lt;b&gt;two&lt;/b&gt; ProjectRestrictResultSet instances in the tree:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the inner PRN operates on the bulk table scan, and projects columns&lt;br/&gt;
   &quot;a&quot; and &quot;b&quot; from table &quot;xx&quot; out of the table scan using projection &quot;e1&quot;.&lt;/li&gt;
	&lt;li&gt;then the GroupedAggregateResultSet processes the rows, and&lt;br/&gt;
   computes the COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; into the 3rd column of the template row&lt;/li&gt;
	&lt;li&gt;then the outer PRN takes the grouped results and projects columns&lt;br/&gt;
   &quot;a&quot;, &quot;(expression)&quot;, and &quot;COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot; out of the grouped result row.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At the instant of the crash, the outer PRN is performing that final&lt;br/&gt;
projection, and it is looking for a row from result set 2.&lt;/p&gt;

&lt;p&gt;But this is wrong; it ought to be looking for a row from result set 1.&lt;/p&gt;

&lt;p&gt;In the debugger, I can see that result set 1&apos;s current row is correct:&lt;br/&gt;
it has the right columns, with the right values.&lt;/p&gt;

&lt;p&gt;I can also see that, &lt;b&gt;later&lt;/b&gt; in projection method &quot;e3&quot;, there is another&lt;br/&gt;
call to getColumnFromRow() which passes result set number 1.&lt;/p&gt;

&lt;p&gt;So that seems like additional evidence that the core of the problem is&lt;br/&gt;
that projection method &quot;e3&quot; generated invalid code which is&lt;br/&gt;
trying to access result set 2 when it should have been accessing&lt;br/&gt;
result set 1.&lt;/p&gt;

&lt;p&gt;Since the column in question is column 2, which is the expression&lt;br/&gt;
a*(b/100.000000), I&apos;m wondering whether the inner PRN and the&lt;br/&gt;
outer PRN are somehow accidentally sharing the expression&lt;br/&gt;
information for this result column expression, when one of them should&lt;br/&gt;
have renumbered the result set for the expression to point to the&lt;br/&gt;
different result set.&lt;/p&gt;

&lt;p&gt;This feels really familiar, like we just worked on some problems with&lt;br/&gt;
result set number handling and result column expressions recently;&lt;br/&gt;
I&apos;ll spend a bit of time searching JIRA to see if I can refresh that memory.&lt;/p&gt;</comment>
                            <comment id="12567389" author="bryanpendleton" created="Sun, 10 Feb 2008 00:49:08 +0000"  >&lt;p&gt;At generate time, as the code analyzes the expression a*(b/100.000000),&lt;br/&gt;
for the outer PRN, the sourceColumn&apos;s resultSetNumber for the&lt;br/&gt;
ColumnReference &quot;a&quot; is &apos;1&apos;, while for &quot;b&quot; it is &apos;2&apos;.&lt;/p&gt;

&lt;p&gt;So the overall expression is inconsistent; some of the column&lt;br/&gt;
reference point to the correct result set, others do not.&lt;/p&gt;

&lt;p&gt;This makes me wonder whether there is some code which&lt;br/&gt;
traverses ResultColumn expression trees, updating the resultSetNumber,&lt;br/&gt;
that mistakenly visits the leftOperand of the expression tree but does&lt;br/&gt;
not visit the rightOperand.&lt;/p&gt;

&lt;p&gt;&quot;a&quot; is seen while visiting the leftOperand, but to visit &quot;b&quot; one must visit&lt;br/&gt;
the rightOperand.&lt;/p&gt;

&lt;p&gt;I thought this was a theory worth recording.&lt;/p&gt;</comment>
                            <comment id="12567393" author="bryanpendleton" created="Sun, 10 Feb 2008 02:02:45 +0000"  >&lt;p&gt;As Thomas noted, it&apos;s interesting to see the differences between what provokes&lt;br/&gt;
this problem, and what does not. For example, this query works fine:&lt;/p&gt;

&lt;p&gt;   select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a*(b/1.0);&lt;/p&gt;

&lt;p&gt;but this one gets the NPE:&lt;/p&gt;

&lt;p&gt;   select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a,a*(b/1.0);&lt;/p&gt;</comment>
                            <comment id="12567449" author="bryanpendleton" created="Sun, 10 Feb 2008 16:59:00 +0000"  >&lt;p&gt;I&apos;ve pretty much convinced myself that the problem happens during GroupByNode.init(),&lt;br/&gt;
where we take the original PRNode for the core SELECT statement, and re-write&lt;br/&gt;
that section of the tree to insert a new GroupByNode above that PRNode, and a new&lt;br/&gt;
PRNode above the GroupByNode, and manipulate the various ResultColumn lists&lt;br/&gt;
in various ways.&lt;/p&gt;

&lt;p&gt;But I&apos;m not sure precisely what&apos;s going wrong:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;is ResultColumnList.cloneMe failing to process sub-expression column references?&lt;/li&gt;
	&lt;li&gt;are the bindResultColumnToExpression calls in addUnAggColumns supposed&lt;br/&gt;
   to examine the sub-expressions?&lt;/li&gt;
	&lt;li&gt;or perhaps somewhere else entirely in GroupByNode.init?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567471" author="bryanpendleton" created="Sun, 10 Feb 2008 20:19:22 +0000"  >&lt;p&gt;OK, I think I&apos;m getting close. Note the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a*(b/1.0);    &amp;#8211; WORKS&lt;/li&gt;
	&lt;li&gt;select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a,a*(b/1.0);  &amp;#8211; FAILS&lt;/li&gt;
	&lt;li&gt;select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a,b,a*(b/1.0);  &amp;#8211; WORKS&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think the problem is related to these lines in GroupByNode.java&lt;br/&gt;
(near line 388 or so):&lt;/p&gt;

&lt;p&gt;			SubstituteExpressionVisitor se = &lt;br/&gt;
				new SubstituteExpressionVisitor(&lt;br/&gt;
						gbc.getColumnExpression(),&lt;br/&gt;
						vc,&lt;br/&gt;
						AggregateNode.class);&lt;br/&gt;
			parent.getResultColumns().accept(se);&lt;/p&gt;

&lt;p&gt;This code is processing the ResultColumn instances in the&lt;br/&gt;
&quot;parent&quot; (outer) PRNode to update their ColumnReference values.&lt;/p&gt;

&lt;p&gt;But (I think) this code only updates the ColumnReference values&lt;br/&gt;
for those columns which are directly referenced as column references&lt;br/&gt;
in the grouping list. That&apos;s why the references to column &quot;a&quot; in the&lt;br/&gt;
expression are correctly fixed up, but ther references to column &quot;b&quot;&lt;br/&gt;
are not, because &quot;b&quot; wasn&apos;t directly in the group by list.&lt;/p&gt;

&lt;p&gt;If true, this suggests a possible workaround: include all columns&lt;br/&gt;
that are mentioned by any expressions in the group by list&lt;br/&gt;
redundantly, as simple column references.&lt;/p&gt;

&lt;p&gt;I&apos;ll continue to study GroupByNode.addUnAggColumns, to see if I&lt;br/&gt;
can construct a possible alternate way to process the columns.&lt;/p&gt;</comment>
                            <comment id="12567666" author="bryanpendleton" created="Mon, 11 Feb 2008 15:34:30 +0000"  >&lt;p&gt;Reversing the order of the items in the group by list also avoids the NPE:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;select a*(b/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a*(b/1.0), a; &amp;#8211; WORKS&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This possibly provides a simpler workaround.&lt;/p&gt;</comment>
                            <comment id="12567939" author="bryanpendleton" created="Tue, 12 Feb 2008 03:33:53 +0000"  >&lt;p&gt;My first attempt to fix this was a failure.&lt;/p&gt;

&lt;p&gt;I made the repro script pass, but broke various other&lt;br/&gt;
GROUP BY constructions.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching the diff anyway (modifyVisitorDoesntWork.diff),&lt;br/&gt;
because I feel like it&apos;s at least going in the right direction.&lt;/p&gt;

&lt;p&gt;I&apos;m convinced that the problem involves the various&lt;br/&gt;
manipulations of the result column lists performed by&lt;br/&gt;
GroupByNode.init, but I&apos;m not yet sure what change to make.&lt;/p&gt;

&lt;p&gt;I think it&apos;s instructive to note that, with this patch applied, the&lt;br/&gt;
following statement gets &quot;b&quot; and &quot;a&quot; backward:&lt;br/&gt;
ij&amp;gt; select b, a, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by b, a;&lt;br/&gt;
B                     |A                     |3&lt;br/&gt;
---------------------------------------------------------&lt;br/&gt;
2.0                   |3.0                   |1&lt;/p&gt;

&lt;p&gt;The proper answer, of course, would be (3.0, 2.0, 1)&lt;/p&gt;</comment>
                            <comment id="12569749" author="bryanpendleton" created="Sun, 17 Feb 2008 20:07:02 +0000"  >&lt;p&gt;I&apos;ve been contemplating the following short script, trying to figure out what the&lt;br/&gt;
correct behavior of Derby ought to be. Note that I haven&apos;t yet thrown in any ORDER BY&lt;br/&gt;
or HAVING examples; I&apos;m just trying to understand the interaction between the&lt;br/&gt;
select list and the group by list.&lt;/p&gt;

&lt;p&gt;Some of these queries work, some are rejected, and one is the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3094&quot; title=&quot;Grouping of expressions causes NullPointerException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3094&quot;&gt;&lt;del&gt;DERBY-3094&lt;/del&gt;&lt;/a&gt; query.&lt;br/&gt;
Some of the queries which are rejected seem like they ought to work, and some of&lt;br/&gt;
the queries which work seem like they ought to be rejected.&lt;/p&gt;

&lt;p&gt;create table test (c1 int, c2 int, c3 int, c4 int);&lt;br/&gt;
insert into test values (1, 10, 100, 1000);&lt;br/&gt;
insert into test values (1, 11, 100, 1001);&lt;br/&gt;
insert into test values (2, 10, 100, 1000);&lt;br/&gt;
insert into test values (2, 11, 101, 1001);&lt;br/&gt;
insert into test values (2, 11, 101, 1000);&lt;br/&gt;
select * from test;&lt;br/&gt;
select c1+c2, sum(c3) from test group by c1,c2;&lt;br/&gt;
select c1+c2, sum(c3) from test group by c1+c2;&lt;br/&gt;
select c1+c2, sum(c3) from test group by c1+c2,c1;&lt;br/&gt;
select c1,c2, sum(c3) from test group by c1,c2,c1+c2;&lt;br/&gt;
&amp;#8211; Next query is refused with 42Y30 (select list contains invalid expression):&lt;br/&gt;
select c1+c2, sum(c3) from test group by c1;&lt;br/&gt;
&amp;#8211; Next query gets a runtime NPE (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3094&quot; title=&quot;Grouping of expressions causes NullPointerException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3094&quot;&gt;&lt;del&gt;DERBY-3094&lt;/del&gt;&lt;/a&gt;):&lt;br/&gt;
select c1+c2, sum(c3) from test group by c1,c1+c2;&lt;br/&gt;
&amp;#8211; Next query is refused with 42Y30 (select list contains invalid expression):&lt;br/&gt;
select c1,c2, sum(c3) from test group by c1+c2,c1;&lt;br/&gt;
&amp;#8211; Next query is refused with 42Y30 (select list contains invalid expression):&lt;br/&gt;
select c1+c2, sum(c3) from test group by 1;&lt;br/&gt;
&amp;#8211; Next query is refused with 42X04 (Column &apos;EXPR&apos; not in any table)&lt;br/&gt;
select c1+c2 as expr, sum(c3) from test group by expr;&lt;br/&gt;
&amp;#8211; Next query is refused with 42X04 (Column &apos;C1A&apos; not in any table)&lt;br/&gt;
select c1 as c1a, c2, sum(c3) from test group by c1a,c2;&lt;br/&gt;
select c1 as c2, sum(c3) from test group by c1,c2;&lt;br/&gt;
&amp;#8211; Next query is refused with 42Y30 (select list contains invalid expression):&lt;br/&gt;
select c1 as c2, sum(c3) from test group by c2;&lt;br/&gt;
select c1 as c2, sum(c3) from test group by c1;&lt;/p&gt;

&lt;p&gt;The challenge is &lt;br/&gt;
a) to ensure that we understand what the intended behavior of Derby should be&lt;br/&gt;
b) to construct a modification to the current head of trunk that resolves the NPE&lt;br/&gt;
but still preserves all the other desired behaviors.&lt;/p&gt;

&lt;p&gt;I&apos;m hoping that collecting various test cases like this will help me understand this.&lt;/p&gt;</comment>
                            <comment id="12570030" author="bryanpendleton" created="Mon, 18 Feb 2008 22:37:49 +0000"  >&lt;p&gt;GroupByExpressionTest.java contains the following statement:&lt;/p&gt;

&lt;p&gt;   select (c1+c2)+1, sum(c3) from test group by c1+c2&lt;/p&gt;

&lt;p&gt;With the current Derby code, this statement is accepted as legal and produces results.&lt;/p&gt;

&lt;p&gt;However, I&apos;m not sure it ought to be accepted, as the select list contains&lt;br/&gt;
a non-aggregate expression which does not appear in the group by list.&lt;/p&gt;</comment>
                            <comment id="12570032" author="bryanpendleton" created="Mon, 18 Feb 2008 22:45:15 +0000"  >&lt;p&gt;GroupByExpressionTest.java also contains this very intriguing statement:&lt;/p&gt;

&lt;p&gt;  select (c1+c2), sum(c3)+(c1+c2) from test group by c1+c2&lt;/p&gt;

&lt;p&gt;With the current Derby code, this statement is accepted as legal and produces results.&lt;/p&gt;</comment>
                            <comment id="12570036" author="bryanpendleton" created="Mon, 18 Feb 2008 22:59:45 +0000"  >&lt;p&gt;Attached is &apos;twoPass.diff&apos;, a patch proposal.&lt;/p&gt;

&lt;p&gt;The idea of this patch is that, during the GroupBy tree rewriting,&lt;br/&gt;
we replace ResultColumn expressions with VirtualColumnNode&lt;br/&gt;
references in two passes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we first handle all expression replacements&lt;/li&gt;
	&lt;li&gt;then once all the expressions have been replaced,&lt;br/&gt;
   we replace all column references.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch fixes the repro script, and makes &lt;b&gt;almost all&lt;/b&gt;&lt;br/&gt;
of the regression tests pass.&lt;/p&gt;

&lt;p&gt;However, two of the test cases in GroupByExpressionTest.java&lt;br/&gt;
fail; these are the two test cases that I listed in my previous&lt;br/&gt;
two comments.&lt;/p&gt;

&lt;p&gt;It&apos;s not clear to me whether these two test cases are valid or not,&lt;br/&gt;
they are certainly very unusual expressions and I think an argument&lt;br/&gt;
can be made that they should be rejected by the compiler as invalid.&lt;/p&gt;

&lt;p&gt;Please consider this patch as &quot;for discussion&quot;, intended to&lt;br/&gt;
record a possible alternate implementation, and to stimulate&lt;br/&gt;
some feedback regarding what the correct rules ought to be&lt;br/&gt;
for correlating elements in the GROUP BY list against elements&lt;br/&gt;
in the SELECT list.&lt;/p&gt;</comment>
                            <comment id="12570055" author="army" created="Tue, 19 Feb 2008 00:01:19 +0000"  >&lt;p&gt;&amp;gt; It&apos;s not clear to me whether [two of the test cases in&lt;br/&gt;
&amp;gt; GroupByExpressionTest.java] are valid or not,&lt;/p&gt;

&lt;p&gt;I have not yet had a chance to look at the patch, but I ran those two queries-&lt;del&gt;along with all of the queries posted in your Feb 17 comment&lt;/del&gt;&lt;del&gt;against DB2 v8.  From what I can tell, the (clean) Derby trunk and DB2 v8 agree in all of these cases&lt;/del&gt;-i.e. they either both throw an error or they return the same results (with the notable exception of the NPE that this issue is trying to fix).  Not sure if that&apos;s helpful or not...&lt;/p&gt;</comment>
                            <comment id="12570074" author="bryanpendleton" created="Tue, 19 Feb 2008 01:28:38 +0000"  >&lt;p&gt;Here&apos;s an interesting essay on the sort of subtle problems that can arise&lt;br/&gt;
from not being crystal-clear about the semantics of column references and&lt;br/&gt;
expressions in GROUP BY clauses:&lt;br/&gt;
&lt;a href=&quot;http://odetocode.com/Blogs/scott/archive/2005/04/17/1214.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://odetocode.com/Blogs/scott/archive/2005/04/17/1214.aspx&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12570079" author="bryanpendleton" created="Tue, 19 Feb 2008 01:53:13 +0000"  >&lt;p&gt;The Postgres docs (&lt;a href=&quot;http://www.postgresql.org/docs/8.0/interactive/sql-select.html#SQL-GROUPBY&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.postgresql.org/docs/8.0/interactive/sql-select.html#SQL-GROUPBY&lt;/a&gt;)&lt;br/&gt;
have this to say about the column-name-versus-column-alias subtlety referred&lt;br/&gt;
to in the previous comment:&lt;/p&gt;

&lt;p&gt;       In case of ambiguity, a GROUP BY name will be interpreted as an input-column name &lt;br/&gt;
       rather than an output column name.&lt;/p&gt;

&lt;p&gt;It seems to me preferable to reject the ambiguous query rather than producing possibly&lt;br/&gt;
surprising results, but I can see why ambiguity-resolving behaviors are also worthwhile.&lt;/p&gt;</comment>
                            <comment id="12570358" author="bryanpendleton" created="Tue, 19 Feb 2008 18:31:51 +0000"  >&lt;p&gt;Attached is &apos;TwoPassVisitor.diff&apos;, the first working code proposal.&lt;br/&gt;
With this patch, the repro script passes, and all regression tests pass.&lt;/p&gt;

&lt;p&gt;I still need to:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;add a bunch of new test cases&lt;/li&gt;
	&lt;li&gt;add comments to the code&lt;/li&gt;
	&lt;li&gt;add a writeup explaining the ideas behind this patch&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But at least I now have code that appears to add the desired&lt;br/&gt;
new behavior while not breaking any (known) existing behaviors.&lt;/p&gt;</comment>
                            <comment id="12570561" author="bryanpendleton" created="Wed, 20 Feb 2008 03:59:04 +0000"  >&lt;p&gt;Thanks Army for checking the queries against DB2, that&apos;s quite helpful.&lt;/p&gt;</comment>
                            <comment id="12570569" author="bryanpendleton" created="Wed, 20 Feb 2008 04:23:49 +0000"  >&lt;p&gt;It seems like there might be a similar problem with the HAVING clause. Consider:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select c1+c2, sum(c3) from test group by c1+c2;&lt;br/&gt;
1          |2&lt;br/&gt;
-----------------------&lt;br/&gt;
11         |100&lt;br/&gt;
12         |200&lt;br/&gt;
13         |202&lt;/p&gt;

&lt;p&gt;3 rows selected&lt;br/&gt;
ij&amp;gt; select c1+c2, sum(c3) from test group by c1,c1+c2;&lt;br/&gt;
1          |2&lt;br/&gt;
-----------------------&lt;br/&gt;
11         |100&lt;br/&gt;
12         |100&lt;br/&gt;
12         |100&lt;br/&gt;
13         |202&lt;/p&gt;

&lt;p&gt;4 rows selected&lt;br/&gt;
ij&amp;gt; select c1+c2, sum(c3) from test group by c1+c2 having c1+c2 &amp;gt; 11;&lt;br/&gt;
1          |2&lt;br/&gt;
-----------------------&lt;br/&gt;
12         |200&lt;br/&gt;
13         |202&lt;/p&gt;

&lt;p&gt;2 rows selected&lt;br/&gt;
ij&amp;gt; select c1+c2, sum(c3) from test group by c1, c1+c2 having c1+c2 &amp;gt; 11;&lt;br/&gt;
ERROR 42X24: Column C2 is referenced in the HAVING clause but is not in the GROUP BY list.&lt;/p&gt;

&lt;p&gt;I think that the proper results for that last query should have been:&lt;br/&gt;
1          |2&lt;br/&gt;
-----------------------&lt;br/&gt;
12         |100&lt;br/&gt;
12         |100&lt;br/&gt;
13         |202&lt;/p&gt;

&lt;p&gt;3 rows selected&lt;/p&gt;

&lt;p&gt;We could either investigate HAVING behaviors as part of this JIRA, or we could open a new one.&lt;/p&gt;</comment>
                            <comment id="12570577" author="bryanpendleton" created="Wed, 20 Feb 2008 05:18:28 +0000"  >&lt;p&gt;Attached TwoPassVisitorWithCommentsAndTests.diff,&lt;br/&gt;
which adds a brief comment to the GroupByNode code&lt;br/&gt;
explaining the reasoning behind the two pass ResultColumn&lt;br/&gt;
rewriting algorithm, and adds a number of new tests to&lt;br/&gt;
GroupByExpressionTest.java.&lt;/p&gt;</comment>
                            <comment id="12570783" author="army" created="Wed, 20 Feb 2008 18:13:04 +0000"  >&lt;p&gt;Thank you for the updated patch, Bryan.  Is there a more detailed writeup forthcoming for this change, or are the code comments the extent of it?&lt;/p&gt;

&lt;p&gt;The reason I ask is that, after reading the code comments and the comments in this issue, I can&apos;t quite see the correlation between the patch and the NPE that it fixes.  That is, it&apos;s clear that the patch fixes the issue, but I think I&apos;m missing the details on &lt;em&gt;why&lt;/em&gt;.  The code comments say:&lt;/p&gt;

&lt;p&gt; // then we don&apos;t want the replacement of the&lt;br/&gt;
 // simple column reference C1 to affect the&lt;br/&gt;
 // compound expression C1 * (C2 / 100).&lt;/p&gt;

&lt;p&gt;but it&apos;s not clear to me how replacement of the simple column reference can negatively affect the compound expressions.  Is it an issue of VCN&apos;s pointing to the wrong place?  If so, any idea as to why that happens?  Similarly, in an earlier comment you noted:&lt;/p&gt;

&lt;p&gt;&amp;gt; I think it&apos;s instructive to note that, with this patch applied, the&lt;br/&gt;
&amp;gt; following statement gets &quot;b&quot; and &quot;a&quot; backward:&lt;br/&gt;
&amp;gt; ij&amp;gt; select b, a, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by b, a;&lt;br/&gt;
&amp;gt; B |A |3&lt;br/&gt;
&amp;gt; ---------------------------------------------------------&lt;br/&gt;
&amp;gt; 2.0 |3.0 |1&lt;/p&gt;

&lt;p&gt;Is it possible to say what it is about processing simple column references &lt;em&gt;after&lt;/em&gt; compound expressions that fixes this problem?&lt;/p&gt;

&lt;p&gt;Apologies if I&apos;m missing something obvious.  I&apos;m not by any means opposed to the patch, I&apos;m just hoping to gain an understanding about why it resolves the discussion/issues raised thus far for this issue...&lt;/p&gt;

&lt;p&gt;And thanks for your continued diligence with this one, Bryan.&lt;/p&gt;</comment>
                            <comment id="12570822" author="bryanpendleton" created="Wed, 20 Feb 2008 20:19:06 +0000"  >&lt;p&gt;Attached is TwoPassForHavingClauseAlso.diff, which&lt;br/&gt;
addresses the problem I noted with the HAVING clause&lt;br/&gt;
in an earlier comment.&lt;/p&gt;

&lt;p&gt;Army, thanks for having a look at the patch. I am still&lt;br/&gt;
intending to complete a more thorough description&lt;br/&gt;
of the &quot;why&quot; behind the changes that should hopefully&lt;br/&gt;
make it more clear.&lt;/p&gt;

&lt;p&gt;But for now, two quick responses:&lt;br/&gt;
1) substituting the column references with VCN&apos;s during&lt;br/&gt;
group-by rewriting changes which result set is pointed to,&lt;br/&gt;
but when we process the C1 portion of the compound&lt;br/&gt;
expression but not the compound expression as a whole,&lt;br/&gt;
we never correct the C2 column reference (since C2 by&lt;br/&gt;
itself is not a grouping column), leaving the compound&lt;br/&gt;
expression with C1 pointing to the correct result set, but C2&lt;br/&gt;
pointing to a non-existing result set, causing an NPE at runtime.&lt;br/&gt;
2) the earlier comment about getting &quot;b&quot; and &quot;a&quot; backward&lt;br/&gt;
was simply a red herring. That particular patch attempt&lt;br/&gt;
(modifyVisitorDoesntWork.diff) was simply flat-out wrong. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll try to get a more thorough writeup completed soon.&lt;/p&gt;</comment>
                            <comment id="12571445" author="bryanpendleton" created="Fri, 22 Feb 2008 15:39:58 +0000"  >&lt;p&gt;Attached an attempt at a descriptive writeup. Please let me know if it&lt;br/&gt;
makes the patch more comprehensible.&lt;/p&gt;</comment>
                            <comment id="12571516" author="army" created="Fri, 22 Feb 2008 18:33:31 +0000"  >&lt;p&gt;Thanks a ton for the detailed write-up, Bryan, that definitely makes it clear as to what is going on with this issue.&lt;/p&gt;

&lt;p&gt;In reading through the document I gained an understanding of what the problem is, and then I began wondering if this is only an issue when a ColumnReference appears in a compound expression--or is it also an issue when one expression appears within another expression.  I came up with the following query:&lt;/p&gt;

&lt;p&gt;  select a*((a+b)/1.0), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from xx group by a+b, a*((a+b)/1.0)&lt;/p&gt;

&lt;p&gt;which fails with an NPE even after TwoPassForHavingClauseAlso.diff is applied.  I&apos;m attaching d3094_followup.htm, which (in theory) walks through this query in the same way that your &quot;notes.html&quot; walked through another example.  I did this mostly for my own understanding, but thought it might be useful to post it as a writeup to this issue.&lt;/p&gt;

&lt;p&gt;To quote the conclusion:&lt;/p&gt;

&lt;p&gt;&quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;T&amp;#93;&lt;/span&gt;he TwoPassVisitorWithCommentsAndTests.diff solves the specific query that was reported (and described in &quot;notes.html&quot;), and so it makes things better, which is great.  Thus I think it would be fine to commit the patch as it is and either deal with queries like the one above in a follow-up patch, or file a separate Jira altogether.&quot;&lt;/p&gt;</comment>
                            <comment id="12571751" author="bryanpendleton" created="Sat, 23 Feb 2008 16:10:30 +0000"  >&lt;p&gt;Thanks Army! That&apos;s a keen insight about the underlying issue, and&lt;br/&gt;
a great writeup and test case.&lt;/p&gt;

&lt;p&gt;Here&apos;s yet another variant that&apos;s hard to explain: the first statement&lt;br/&gt;
works, the second is refused with error 42Y30:&lt;/p&gt;

&lt;p&gt;select (a+b)+c, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b;&lt;br/&gt;
select a+(b+c), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b;&lt;/p&gt;

&lt;p&gt;I&apos;m not quite sure how to push this problem further. The only idea&lt;br/&gt;
I had was as follows: perhaps we could automatically and silently&lt;br/&gt;
pull up &lt;b&gt;every&lt;/b&gt; column reference that is present in any GROUP BY&lt;br/&gt;
expression, and include that column as an extra column reference&lt;br/&gt;
at the end of the group by list. So we could rewrite the above queries,&lt;br/&gt;
for example, as:&lt;/p&gt;

&lt;p&gt;select (a+b)+c, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b, a, b;&lt;br/&gt;
select a+(b+c), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b, a, b;&lt;/p&gt;

&lt;p&gt;That might mean we&apos;d always have &quot;enough&quot; column references&lt;br/&gt;
so that we could perform substitution on all the result columns&lt;br/&gt;
in the select list successfully.&lt;/p&gt;

&lt;p&gt;Yet I&apos;m nervous about this strategy; we wouldn&apos;t want these pulled&lt;br/&gt;
up columns to be used for the actual grouping (because it could&lt;br/&gt;
subdivide the actual groups further than the user intended), so we&apos;d&lt;br/&gt;
have to mark these columns as &quot;special columns to be used for&lt;br/&gt;
resolving column references, but not to be used for grouping.&quot;&lt;/p&gt;

&lt;p&gt;I&apos;ll continue to think about it, but I&apos;m increasingly tempted to&lt;br/&gt;
take your suggestion to be satisfied with the patch as is, and&lt;br/&gt;
file some of these other issues separately to be studied more&lt;br/&gt;
in the future. This is similar to the way that we marked &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1624&quot; title=&quot;use of direct column name rather than alias make aggregation fail (Hibernate depends on that)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1624&quot;&gt;&lt;del&gt;DERBY-1624&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
as resolved, while shifting the unresolved portion out to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2457&quot; title=&quot;Use of column aliases in group by / having clauses can cause queries to fail&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2457&quot;&gt;&lt;del&gt;DERBY-2457&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12571810" author="bryanpendleton" created="Sun, 24 Feb 2008 00:30:18 +0000"  >&lt;p&gt;Here&apos;s one other idea that might work:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Define the &quot;level&quot; of a GROUP BY expression to be&lt;br/&gt;
   the number of column references in that expression.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   For example, in this clause:&lt;/p&gt;

&lt;p&gt;        GROUP BY a, b, a+b, a+(b+c), a*(b/100.0), a*((a+b)/1.0)&lt;/p&gt;

&lt;p&gt;   the level of the various elements in the list are:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a: 1&lt;/li&gt;
	&lt;li&gt;b: 1&lt;/li&gt;
	&lt;li&gt;a+b: 2&lt;/li&gt;
	&lt;li&gt;a+(b+c): 3&lt;/li&gt;
	&lt;li&gt;a*(b/100.0): 2&lt;/li&gt;
	&lt;li&gt;a*((a+b)/1.0): 3&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Then, when performing VCN substitution into the&lt;br/&gt;
    parent PRNode&apos;s ResultColumnList entries from&lt;br/&gt;
   the GroupByNode&apos;s entries, process the entires&lt;br/&gt;
   in descending order by level, and left-to-right within&lt;br/&gt;
   the same level. So the entries from the GROUP BY above&lt;br/&gt;
   would be processed in the order:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   a+(b+c), a*((a+b)/1.0), a+b, a*(b/100.0), a, b&lt;/p&gt;

&lt;p&gt;Does this algorithm seem like it would be worth investigating?&lt;/p&gt;</comment>
                            <comment id="12572144" author="army" created="Mon, 25 Feb 2008 17:44:46 +0000"  >&lt;p&gt;&amp;gt; Here&apos;s yet another variant that&apos;s hard to explain: the first statement&lt;br/&gt;
&amp;gt; works, the second is refused with error 42Y30:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; select (a+b)+c, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b;&lt;br/&gt;
&amp;gt; select a+(b+c), count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by c, a+b; &lt;/p&gt;

&lt;p&gt;The tree for &quot;(a+b)&lt;ins&gt;c&quot; contains the subtree &quot;a+b&quot; as the left-hand side of the top-most binary operator and &quot;c&quot; as the right-hand side.  Since each of those matches a stand-alone expression in the GROUP BY, the equivalence checking for GROUP BY processing passes.  But the tree for &quot;a&lt;/ins&gt;(b+c)&quot; has &quot;a&quot; on one side and &quot;b+c&quot; on the other, neither of which shows up as a stand-alone GROUP BY expression, so the second query is rejected.  I agree it&apos;s a tad non-inuititive, but it appears to be &quot;explainable&quot;, for what that&apos;s worth...&lt;/p&gt;

&lt;p&gt;&amp;gt; Here&apos;s one other idea that might work: &lt;/p&gt;

&lt;p&gt;[ snip ]&lt;/p&gt;

&lt;p&gt;&amp;gt; Does this algorithm seem like it would be worth investigating?&lt;/p&gt;

&lt;p&gt;Yes, I definitely think this is worth investigating.  From what I can tell it solves the problem of sub-expression substitution, and it seems a tad safer than pulling unneeded columns into the GROUP BY expression.&lt;/p&gt;

&lt;p&gt;There&apos;s a CollectNodesVisitor class which finds all instances of a specified class within the subtree beneath a given ValueNode, so you might be able to use that to count the number of ColumnReferences in the expression.  Though ColumnReferences tend to appear in lots of places, so it&apos;ll be interesting to see if a simple CollectNodesVisitor is good enough--or will it end up counting ColumnReferences that shouldn&apos;t be counted...?&lt;/p&gt;

&lt;p&gt;In any event, +1 to further pursuit of the suggested approach.&lt;/p&gt;</comment>
                            <comment id="12572771" author="bryanpendleton" created="Wed, 27 Feb 2008 03:33:14 +0000"  >&lt;p&gt;Attached is sortExpressions.diff, which proposes to sort&lt;br/&gt;
the expressions based on the number of ColumnReferences&lt;br/&gt;
that each contains, using the technique suggested by Army&lt;br/&gt;
of counting those refs using the CollectNodesVisitor.&lt;/p&gt;

&lt;p&gt;It seems to handle all the existing test cases, as well&lt;br/&gt;
as a few new ones that I added to GroupByExpressionTest.java&lt;br/&gt;
as part of this patch.&lt;/p&gt;

&lt;p&gt;Please have a look and tell me what you think.&lt;/p&gt;</comment>
                            <comment id="12573053" author="army" created="Wed, 27 Feb 2008 20:05:04 +0000"  >&lt;p&gt;sortExpressions.diff looks good to me.  Thanks for continuing with that approach, Bryan.  Assuming derbyall and suites.All run cleanly, I say +1 to commit since it fixes all of the known queries and seems algorithmically correct as far as I can tell.  If additional issues/queries are discovered later, I think they can be addressed as they are found.&lt;/p&gt;

&lt;p&gt;One nit: it seems the creation of a new ArrayList for havingRefsToSubstitute could be conditional upon the presence of a non-null havingClause, and that a single ExpressionSorter() could be used instead of two.  But in both cases the code may be easier to read as it is, so I&apos;m not sure it&apos;s really worth changing...&lt;/p&gt;</comment>
                            <comment id="12573309" author="bryanpendleton" created="Thu, 28 Feb 2008 14:50:31 +0000"  >&lt;p&gt;Thanks Army, those are good suggestions.&lt;/p&gt;

&lt;p&gt;I&apos;m intending to move ahead with final testing, cleanup, and commit.&lt;/p&gt;</comment>
                            <comment id="12573585" author="bryanpendleton" created="Fri, 29 Feb 2008 04:22:32 +0000"  >&lt;p&gt;Attached is sortExpressionsFinal.diff, which incorporates&lt;br/&gt;
the last few suggestions from reviews, as well as some&lt;br/&gt;
additional comments.&lt;/p&gt;

&lt;p&gt;derbyall and junit-all were cleaning, so I&apos;m proceeding&lt;br/&gt;
to commit this patch.&lt;/p&gt;</comment>
                            <comment id="12573588" author="bryanpendleton" created="Fri, 29 Feb 2008 04:25:25 +0000"  >&lt;p&gt;Committed sortExpressionsFinal.diff to the trunk as revision 632221.&lt;/p&gt;

&lt;p&gt;I&apos;ll investigate merging this change back to the 10.3 branch. Until then,&lt;br/&gt;
I&apos;ll leave this issue open.&lt;/p&gt;</comment>
                            <comment id="12574227" author="bryanpendleton" created="Sun, 2 Mar 2008 16:16:35 +0000"  >&lt;p&gt;I merged revision 632221 to the 10.3 branch without incident.&lt;br/&gt;
My build and test runs were clean, so I committed the&lt;br/&gt;
change to the 10.3 branch as revision 632779.&lt;/p&gt;

&lt;p&gt;Marking the issue as resolved.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12365064">DERBY-2457</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12379534">DERBY-3097</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12328186">DERBY-883</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12347089">DERBY-1624</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12376050" name="TwoPassForHavingClauseAlso.diff" size="7524" author="bryanpendleton" created="Wed, 20 Feb 2008 20:19:06 +0000"/>
                            <attachment id="12375954" name="TwoPassVisitor.diff" size="2990" author="bryanpendleton" created="Tue, 19 Feb 2008 18:31:51 +0000"/>
                            <attachment id="12375996" name="TwoPassVisitorWithCommentsAndTests.diff" size="6728" author="bryanpendleton" created="Wed, 20 Feb 2008 05:18:28 +0000"/>
                            <attachment id="12376250" name="d3094_followup.htm" size="44234" author="army" created="Fri, 22 Feb 2008 18:33:31 +0000"/>
                            <attachment id="12375303" name="modifyVisitorDoesntWork.diff" size="1398" author="bryanpendleton" created="Tue, 12 Feb 2008 03:33:53 +0000"/>
                            <attachment id="12376236" name="notes.html" size="20546" author="bryanpendleton" created="Fri, 22 Feb 2008 15:39:58 +0000"/>
                            <attachment id="12376592" name="sortExpressions.diff" size="10207" author="bryanpendleton" created="Wed, 27 Feb 2008 03:33:14 +0000"/>
                            <attachment id="12376790" name="sortExpressionsFinal.diff" size="11054" author="bryanpendleton" created="Fri, 29 Feb 2008 04:22:32 +0000"/>
                            <attachment id="12375866" name="twoPass.diff" size="2985" author="bryanpendleton" created="Mon, 18 Feb 2008 22:59:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Oct 2007 14:11:20 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23427</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0m13:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37387</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>