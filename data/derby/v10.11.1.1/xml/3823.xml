<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:12:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3823/DERBY-3823.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3823] NullPointerException in stress.multi test</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3823</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I saw the following NPE in stress.multi running on 10.3 with derbyclient.&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData(Unknown&lt;br/&gt;
 Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(Unknown Source&lt;br/&gt;
)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Sou&lt;br/&gt;
rce)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;br/&gt;
Cleanup action completed&lt;/p&gt;</description>
                <environment></environment>
        <key id="12401743">DERBY-3823</key>
            <summary>NullPointerException in stress.multi test</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                            <label>derby_triage10_5_2</label>
                    </labels>
                <created>Wed, 6 Aug 2008 00:47:50 +0100</created>
                <updated>Fri, 15 Nov 2013 08:15:18 +0000</updated>
                            <resolved>Wed, 21 Mar 2012 00:08:37 +0000</resolved>
                                    <version>10.3.3.1</version>
                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                    <version>10.6.1.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                    <version>10.8.1.2</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.3.0</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Network Server</component>
                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12661236" author="kmarsden" created="Tue, 6 Jan 2009 18:13:03 +0000"  >&lt;p&gt;Saw this again on trunk with IBM 1.5  on 1/4/2009 (722718)&lt;/p&gt;</comment>
                            <comment id="12661473" author="knutanders" created="Wed, 7 Jan 2009 07:30:10 +0000"  >&lt;p&gt;The same stack trace (with line numbers) is mentioned in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1635&quot; title=&quot;stress.multi fails on 10.1/ibm131/jcc2.4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1635&quot;&gt;&lt;del&gt;DERBY-1635&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12726844" author="kristwaa" created="Fri, 3 Jul 2009 10:30:10 +0100"  >&lt;p&gt;Triaged July 3, 2009:  Assigned normal urgency.&lt;/p&gt;</comment>
                            <comment id="12881106" author="kristwaa" created="Tue, 22 Jun 2010 08:03:48 +0100"  >&lt;p&gt;Changed title to reflect that the issue has been seen on other JVMs than IBM.&lt;/p&gt;

&lt;p&gt;The error appeared in a tinderbox test run &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; on JVM Sun Microsystems Inc. 1.6.0_18  with the same stack trace as earlier, in the JUnit stress multi test.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-956615.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/Limited/testSummary-956615.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13116440" author="knutanders" created="Wed, 28 Sep 2011 14:17:51 +0100"  >&lt;p&gt;Seen again in the tinderbox: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1176669-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1176669-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The stack trace in the test output is different because it&apos;s the client-side trace. The stack trace on the server is the same as the one in the original report (see also the attached derby.log):&lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;/p&gt;</comment>
                            <comment id="13116814" author="dagw" created="Wed, 28 Sep 2011 22:26:39 +0100"  >&lt;p&gt;The most likely way we could get NPE in this method is if the variable preparedStatement is null. That only happens if EmbedPreparedStatement was closed prior to calling getMetaData on it, I think.&lt;br/&gt;
PreparedStatement#close calls EmbedPreparedStatement#closeActions which nulls out EmbedPreparedStatement#preparedStatement (line 244).&lt;br/&gt;
That variable is first consulted in line 1081:&lt;/p&gt;

&lt;p&gt;//bug 4579 - if the statement is invalid, regenerate the metadata info&lt;br/&gt;
if (preparedStatement.isValid() == false)&lt;/p&gt;
{
   //need to revalidate the statement here, otherwise getResultDescription would
   //still have info from previous valid statement
   preparedStatement.rePrepare(lcc);
   rMetaData = null;
}

&lt;p&gt;No idea yet how this can happen.&lt;/p&gt;</comment>
                            <comment id="13118914" author="dagw" created="Sat, 1 Oct 2011 22:20:20 +0100"  >&lt;p&gt;I have managed to reproduce this (the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5435&quot; title=&quot;org.apache.derby.client.am.SqlException in stressMultiTest: The DDM object 0x1232 is not supported.  The connection has been terminated.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5435&quot;&gt;&lt;del&gt;DERBY-5435&lt;/del&gt;&lt;/a&gt; variant which is marked as a duplicate of this) four of times in three days. On the server side in all four cases I see the error printed from DRDA_Conn_Thread: &quot;agentError(&quot;Why am I getting another SQLException?&quot;)&quot; when an exception (NPE?) is thrown from the call to writeSQLDARD (line 1026). Now, some instrumentation.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13119767" author="dagw" created="Tue, 4 Oct 2011 00:45:39 +0100"  >&lt;p&gt;Here is the NPE with line numbers:&lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData(EmbedPreparedStatement.java:1095)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(DRDAConnThread.java:6608)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:1018)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:295)&lt;/p&gt;

&lt;p&gt;this is the line in question in getMetaData:&lt;/p&gt;

&lt;p&gt;  if (gcDuringGetMetaData == null || gcDuringGetMetaData.equals(execp.getActivationClass().getName()) == false)&lt;br/&gt;
  {&lt;br/&gt;
      rMetaData = null;&lt;br/&gt;
      gcDuringGetMetaData = execp.getActivationClass().getName(); // &amp;lt;*******************&lt;/p&gt;

&lt;p&gt;execp is just a cast of preparedStatement which has been accessed earlier in the method, e.g. preparedStatement.isValid()&lt;br/&gt;
so either it has changed under our feet, or it is its activationClass that&apos;s null...&lt;/p&gt;</comment>
                            <comment id="13119795" author="dagw" created="Tue, 4 Oct 2011 01:28:37 +0100"  >&lt;p&gt;As for activation class, while preparing a statement, the activation class can be null for a while, cf. code in GenericStatement#prepMinion, ca line 207: and then set again line 502. If the above code tries to access the prepared statement&apos;s metadata while the statement is being recompiled (many threads, cached ps), getActivationClass could return null. I am not sure that&apos;s what&apos;s happening, though, since I can&apos;t see why the statement should become invalidated in the test (update of main/main2). &lt;/p&gt;
</comment>
                            <comment id="13121626" author="dagw" created="Thu, 6 Oct 2011 01:13:03 +0100"  >&lt;p&gt;I split that line in two and reran till I hit the error again. It was indeed the returned activation class that was null. So, I think we can conclude that this is not thread safe and is a bug in Derby.&lt;/p&gt;</comment>
                            <comment id="13121697" author="dagw" created="Thu, 6 Oct 2011 04:19:05 +0100"  >&lt;p&gt;Uploading a trial patch to EmbedPreparedStatement#getMetaData which changes the logic to detect if a prepared statement has been/is the the process of being recompiled as we are trying to get the metadata. It should avoid the race condition in the existign code where it can happen that we try to get the ps&apos;s activation class while it is being recompiled (hence is null temporarily).&lt;/p&gt;

&lt;p&gt;Even if with the patch, we get a consistent picture of the ps&apos;s current activation class and result description (my hope), I am not sure I understand how this approach is always correct: We are trying to get metadata for a result set. If the prepared statement has been invalidated (i.e. recompiled), I wonder if the ResultDescription will still necessarily be correct for that result set? Perhaps it will, since if the some change were to occur to the table that would change the column information, presumably, such changes would block on the fact that the result set was still open &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. At least on embedded that seems reasonable assumption. On client/server I think we can possible close the result set as a result of prefetching rows, so I am not sure if this always holds. But maybe the retrieval of the metadata happens before the time the result set is closed.. Can anyone shed light on this?&lt;/p&gt;

&lt;p&gt;In any case, I will try to run the test for some time with the new patch and see what happens...&lt;/p&gt;</comment>
                            <comment id="13122324" author="dagw" created="Thu, 6 Oct 2011 22:38:54 +0100"  >&lt;p&gt;For what it&apos;s worth, I haven&apos;t seen the error again after I applied the patch, i.e. during the last 30-40 hours running time since yesterday (2 machines) - I&apos;ll leave it running for some time before concluding, though.&lt;/p&gt;</comment>
                            <comment id="13122890" author="dagw" created="Fri, 7 Oct 2011 16:45:41 +0100"  >&lt;p&gt;Another night, no recurrences of the bug. In light of the frequency with which I used to see it, this makes me believe the patch does fix this particular race condition (and hence the test instability). I&apos;ll run ordinary regressions before I consider committing it. Please review.&lt;/p&gt;</comment>
                            <comment id="13123247" author="mamtas" created="Fri, 7 Oct 2011 22:59:16 +0100"  >&lt;p&gt;Hi Dag, Thanks for working on this jira. I spent some time on it and your patch. I want to first recap my understanding of the issue and then share my thoughts on result set descriptor. Please let me know if my understanding of the jira or your concern about result set descriptor is incorrect&lt;/p&gt;

&lt;p&gt;The problem seems to be that while getting the metadata by calling EmbedPreparedStatement.getMetaData(),we can run into NPE because activation class assoicated with the prepared statement might be NULL. Activation class is temporarily set to null while the prepared statement is getting recompiled(GenericStatement.prepMinion) and it is possible that during that temporary NULL activation stage, metadata code is trying to use the activation class. &lt;/p&gt;

&lt;p&gt;The proposed fix is to synchronize part of the logic in EmbedPreparedStatement.getMetaData(). The code that will be synchronized will be in a loop which will repreare the invalid prepared statement and get it&apos;s activation class. If the activation class is null, then we will stay in the while loop until we can grab a non-null activation class for the prepared statement. When we get out of the synchronization code, we can rest assured that activation is not null. After that, we pretty much follow the existing logic(with some code rework but the logic stays the same) in EmbedPreparedStatement.getMetaData() &lt;/p&gt;

&lt;p&gt;The existing code in EmbedPreparedStatement.getMetaData() code is as follows &lt;br/&gt;
                                if (preparedStatement.isValid() == false) &lt;/p&gt;
                                { 
                                        //need to revalidate the statement here, otherwise getResultDescription would 
                                        //still have info from previous valid statement 
                                        preparedStatement.rePrepare(lcc); 
                                        rMetaData = null; 
                                } 
&lt;p&gt;                                //bug 4579 - gcDuringGetMetaData will be null if this is the first time &lt;br/&gt;
                                //getMetaData call is made. &lt;br/&gt;
                                //Second check - if the statement was revalidated since last getMetaData call, &lt;br/&gt;
                                //then gcDuringGetMetaData wouldn&apos;t match with current generated class name &lt;br/&gt;
                                if (gcDuringGetMetaData == null || gcDuringGetMetaData.equals(execp.getActivationClass().getName()) == false) &lt;/p&gt;
                                { 
                                        rMetaData = null; 
                                        gcDuringGetMetaData = execp.getActivationClass().getName(); 
                                } 
&lt;p&gt;The code above can run into npe in &quot;gcDuringGetMetaData = execp.getActivationClass().getName();&quot;  because getActivationClass() can be NULL. &lt;/p&gt;

&lt;p&gt;Part of the new suggested code is as follows &lt;br/&gt;
+                synchronized(execp) { &lt;br/&gt;
+                    // &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3823&quot; title=&quot;NullPointerException in stress.multi test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3823&quot;&gt;&lt;del&gt;DERBY-3823&lt;/del&gt;&lt;/a&gt; Some other thread may be repreparing &lt;br/&gt;
+                    do { &lt;br/&gt;
+                        while (!execp.upToDate()) &lt;/p&gt;
{ 
+                            execp.rePrepare(lcc); 
+                        }
&lt;p&gt; &lt;br/&gt;
+ &lt;br/&gt;
+                        currAc = execp.getActivationClass(); &lt;br/&gt;
+                        resd = execp.getResultDescription(); &lt;br/&gt;
+                    } while (currAc == null); &lt;br/&gt;
+                } &lt;br/&gt;
+ &lt;br/&gt;
+                if (gcDuringGetMetaData == null) &lt;/p&gt;
{ 
+                    gcDuringGetMetaData = currAc.getName(); 
+                    rMetaData = null; 
+                }
&lt;p&gt; else { &lt;br/&gt;
+                    if (!gcDuringGetMetaData.equals(currAc.getName())) &lt;/p&gt;
{ 
+                        rMetaData = null; 
+                        gcDuringGetMetaData = currAc.getName(); 
+                    }
&lt;p&gt; &lt;br/&gt;
+                } &lt;br/&gt;
+ &lt;br/&gt;
With the new code, we can be certain that currAC is not null once we are outside the synchronized code and hence we should not run into NPE later when we are accessing currAC&lt;/p&gt;

&lt;p&gt;Later on, EmbedPreparedStatement.getMetaData() gets the resultDescription(existing code to get the resultDescription is as follows ResultDescription resd = preparedStatement.getResultDescription()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and new code from Dag is as follows (resd = execp.getResultDescription()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;The concern raised here by Dag is that the resultDescription may not match the newly reprepared statement&apos;s result description. I spent some time looking at the supporting code for getResultDescription and I think we might be ok with the result description being in sync with preapred statement. Following is what I found. Let me know if I might have missed something. &lt;/p&gt;

&lt;p&gt;getResultDescription() call from EmbedPreparedStatement.getMetaData() results into a call to GenericPreparedStatement.getResultDescription() which simply return local variable resultDesc. The resultDesc variable gets set by another method in the same class namely, GenericPreparedStatement.completeCompile. &lt;/p&gt;

&lt;p&gt;The completeCompile method has following comment &lt;br/&gt;
                // get the result description (null for non-cursor statements) &lt;br/&gt;
                // would we want to reuse an old resultDesc? &lt;br/&gt;
                // or do we need to always replace in case this was select *? &lt;br/&gt;
                resultDesc = qt.makeResultDescription(); &lt;br/&gt;
It appears from the comment in completeCompile  above that we don&apos;t simply return the existing cached resultDesc(if it is not null). Instead, we actually reload the resultDesc everytime by calling qt.makeResultDescription(). Based on this, I think result description and prepared statement will not get out of sync. &lt;/p&gt;</comment>
                            <comment id="13123361" author="mamtas" created="Sat, 8 Oct 2011 04:29:55 +0100"  >&lt;p&gt;I am leaning more towards NOT backporting the changes to 10.8. I realize that in our regression tests, we have run into this intermittent NPE in stress test for quite a few releases now but we have not heard of this specific NPE from a user as of yet. &lt;/p&gt;

&lt;p&gt;The Derby code we are planning to change is traversed heavily and since the suggested code change would not have gone through enough testing, I am hesitant about having it in 10.8 release. In future, if we do come across users who run into this problem, it will be easy to track this jira down since the NPE stack trace is clear about where things are going wrong. At that point, we can consider backporting these changes as needed. Just my 2cents.&lt;/p&gt;</comment>
                            <comment id="13123599" author="dagw" created="Sun, 9 Oct 2011 03:33:42 +0100"  >&lt;p&gt;Thanks, Mamta. I agree with you opinion concerning 10.8. Your understanding of my patch is sorrect. As for the correctness of the resultset description my concern was slightly different: I was wondering if the retrieved result set description actually still describes the result set (for which we are retrieving the metadata), if the ps has been invalidated and recompiled (presumably after the result set was generated).&lt;/p&gt;</comment>
                            <comment id="13124427" author="mamtas" created="Mon, 10 Oct 2011 20:51:33 +0100"  >&lt;p&gt;Dag, I wrote a program to see what happens to the resultset&apos;s metadata description when it gets changed underneath while a resultset is still open. (I ran this program with the current trunk codeline, ie without Dag;s suggested changes)&lt;/p&gt;

&lt;p&gt;As you suspected, embedded version throws an error because the resultset is still open but netwrok server goes ahead and allows the metadata change but this change does not get reflected in the resultset&apos;s metadata descriptor even after a fresh fetch of resultset&apos;s metadata descriptor after the metadata change. &lt;/p&gt;

&lt;p&gt;To run in the embedded mode, run the program with no parameters or with &apos;1&apos;. To run it in network server mode, have the network server running and then run the program with any value other than &apos;1&apos; for the parameter. eg&lt;br/&gt;
embedded mode&lt;br/&gt;
java DERBY3824StressTestNPE 1&lt;br/&gt;
or&lt;br/&gt;
java DERBY3824StressTestNPE&lt;br/&gt;
For Network server mode&lt;br/&gt;
java DERBY3824StressTestNPE 0&lt;/p&gt;


&lt;p&gt;The test results for embedded mode looks as follows&lt;br/&gt;
*************&lt;br/&gt;
Done loading data&lt;br/&gt;
char column length is 5&lt;br/&gt;
should get error for inserting too large of a data&lt;br/&gt;
Error is A truncation error was encountered trying to shrink VARCHAR &apos;12345678&apos;to length 5.&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: Operation &apos;ALTER TABLE&apos; cannot be performed on object &apos;T1&apos; because there is an open ResultSet dependent on tha&lt;br/&gt;
t object.&lt;br/&gt;
*************&lt;/p&gt;


&lt;p&gt;The test results for network server mode looks as follows&lt;br/&gt;
*************&lt;br/&gt;
Done loading data&lt;br/&gt;
char column length is 5&lt;br/&gt;
should get error for inserting too large of a data&lt;br/&gt;
Error is A truncation error was encountered trying to shrink VARCHAR &apos;12345678&apos;to length 5.&lt;br/&gt;
char column length after alter table is 5&lt;br/&gt;
was able to insert large data&lt;br/&gt;
*************&lt;/p&gt;


&lt;p&gt;Following is the program. &lt;br/&gt;
import java.sql.*;&lt;/p&gt;

&lt;p&gt;public class DERBY3824StressTestNPE extends Thread {&lt;br/&gt;
    public static void main(String[] args) throws Exception {&lt;/p&gt;

&lt;p&gt;		Connection conn = null;&lt;br/&gt;
		if (args.length == 1) {&lt;br/&gt;
			int embedded = Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;br/&gt;
			if (embedded == 1) &lt;/p&gt;
{
		        Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);
		        conn =  DriverManager.getConnection(
                &quot;jdbc:derby:DERBY4437DB;create=true&quot;);
			}
&lt;p&gt; else &lt;/p&gt;
{
		        Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;); 
		        String url = &quot;jdbc:derby://localhost:1527/DERBY4437DB;create=true&quot;;
		        conn = DriverManager.getConnection(url);
			}
&lt;p&gt;	    } else &lt;/p&gt;
{
	        Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);
	        conn =  DriverManager.getConnection(
            &quot;jdbc:derby:DERBY4437DB;create=true&quot;);
	    }

&lt;p&gt;        conn.setAutoCommit(false);&lt;br/&gt;
        Statement st  = conn.createStatement();&lt;br/&gt;
        st.executeUpdate(&quot;create table t1(c11 int, &quot;+&lt;br/&gt;
        		&quot;c12 varchar(5))&quot;);&lt;br/&gt;
        PreparedStatement ps = &lt;br/&gt;
	        conn.prepareStatement(&quot;insert into t1 values(?,&apos;aaaaa&apos;)&quot;);&lt;br/&gt;
		for (int i = 0; i &amp;lt; 1000; i++) &lt;/p&gt;
{
			ps.setInt(1, i);
	        ps.executeUpdate();
		}
&lt;p&gt;        System.out.println(&quot;Done loading data&quot;);&lt;br/&gt;
        conn.commit();&lt;/p&gt;

&lt;p&gt;        ResultSet rs = st.executeQuery(&quot;select * from t1&quot;);&lt;br/&gt;
		for (int i = 0; i &amp;lt; 100; i++) &lt;/p&gt;
{
			rs.next();
		}
&lt;p&gt;		ResultSetMetaData rsmd = rs.getMetaData();&lt;br/&gt;
		int charLength = rsmd.getColumnDisplaySize(2);&lt;br/&gt;
		System.out.println(&quot;char column length is &quot; + charLength);&lt;br/&gt;
        Statement st2  = conn.createStatement();&lt;br/&gt;
        try &lt;/p&gt;
{
		st2.executeUpdate(&quot;insert into t1 values(99,&apos;12345678&apos;)&quot;);
        }
&lt;p&gt; catch(Exception ex) &lt;/p&gt;
{
        	System.out.println(&quot;should get error for inserting too large of a data&quot;);
        	System.out.println(&quot;Error is &quot; + ex.getMessage());
        }

&lt;p&gt;		st2.execute(&quot;alter table t1 alter column c12 set data type varchar(8)&quot;);&lt;br/&gt;
		rsmd = rs.getMetaData();&lt;br/&gt;
		charLength = rsmd.getColumnDisplaySize(2);&lt;br/&gt;
		System.out.println(&quot;char column length after alter table is &quot; + charLength);&lt;br/&gt;
		st2.executeUpdate(&quot;insert into t1 values(99,&apos;12345678&apos;)&quot;);&lt;br/&gt;
		System.out.println(&quot;was able to insert large data&quot;);&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="13124579" author="mamtas" created="Tue, 11 Oct 2011 00:39:20 +0100"  >&lt;p&gt;I applied Dag&apos;s changes to trunk and saw the same behavior from my test program, ie embedded gave an error for metadata change while the resultset is still open but network server allowed the metadata change but didn&apos;t reflect those changes in resultset&apos;s metadada descriptor.&lt;/p&gt;</comment>
                            <comment id="13124666" author="mamtas" created="Tue, 11 Oct 2011 04:54:19 +0100"  >&lt;p&gt;I am thinking if we should create a new jira for resultset meta data getting out of sync with the underlying system metadata in case of network server. &lt;/p&gt;

&lt;p&gt;We already have 2 jiras, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3839&quot; title=&quot;Convert &amp;quot;org.apache.derbyTesting.functionTests.tests.store.holdCursorJDBC30.sql&amp;quot; to junit. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3839&quot;&gt;&lt;del&gt;DERBY-3839&lt;/del&gt;&lt;/a&gt;(Convert &quot;org.apache.derbyTesting.functionTests.tests.store.holdCursorJDBC30.sql&quot; to junit. ) and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4373&quot; title=&quot;different results with network server vs. embedded on select from a temporary table with resultset cursor hold over commit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4373&quot;&gt;DERBY-4373&lt;/a&gt; (different results with network server vs. embedded on select from a temporary table with resultset cursor hold over commit) in which we see difference in behavior between client-server and embedded mode with how resultsets are handled because of server pre-fetching of the rows. I think in our specific case, we do want the resultset metadata to correctly reflect the metadata assoicated with underlying columns. Dag, do you think we should create a new jira for this mismatch of metadata and associate the new jira with the other 2 jiras related to resulset behavior?&lt;/p&gt;</comment>
                            <comment id="13126252" author="dagw" created="Thu, 13 Oct 2011 00:48:36 +0100"  >&lt;p&gt;Thanks for helping me understand this, Mamta! From you test program it appears that the metadata returned even in the client case is still correct (i.e. c12&apos;s size is still 5) . Since that&apos;s the result set we are processing (still), I think that is correct even though the underlying table now has length 8. I was worried we might somehow be able to retrieve the new values, 8, while still reading the &quot;old&quot; style result set on the client. Isn&apos;t metadata cached on the client also? If so the second call to &quot;rsmd = rs.getMetaData();&quot; may not even visit the server, unless you trace it to determine that it did.. I will try to tweak your program and debug to see if I can provoke it to return &quot;8&quot; while we are still reading the result set that has 5 as max lenght for c12... If that were possible it would be an error, I think. That fact that we are able to &lt;b&gt;insert&lt;/b&gt; longer data than 5 is not wrong, since the underlying database has changed. I believe &lt;b&gt;database&lt;/b&gt; metadata would correctly reflect that? But the &lt;b&gt;result set&lt;/b&gt; metadata should stick to the actual data in the (old) result set I believe.&lt;/p&gt;</comment>
                            <comment id="13126287" author="dagw" created="Thu, 13 Oct 2011 02:23:29 +0100"  >&lt;p&gt;Fiddling with your program I think the actual result set&apos;s getMetaData&lt;br/&gt;
is is correct (ResultSet#getMetaData) in the case I was worried about,&lt;br/&gt;
it appears it is read early on while processing the rs. (Sorry, I was&lt;br/&gt;
a bit mixed up here).&lt;/p&gt;

&lt;p&gt;But your concern is &lt;b&gt;also&lt;/b&gt; correct &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I changed the program to use an&lt;br/&gt;
&lt;b&gt;explicit&lt;/b&gt; prepared statement (since the method for which we made the&lt;br/&gt;
patch is PreparedStatement#getMetaData) to retrieve metadata from&lt;br/&gt;
there, &lt;b&gt;as well as&lt;/b&gt; getting the metadata from the actual result set.&lt;/p&gt;

&lt;p&gt;The PreparedStatement&apos;s getMetaData method is described in this way in&lt;br/&gt;
the Javadoc:&lt;/p&gt;

&lt;p&gt;   &quot;getMetaData() Retrieves a ResultSetMetaData object&lt;br/&gt;
    that contains information about the columns of the ResultSet&lt;br/&gt;
    object that &lt;b&gt;will be&lt;/b&gt; returned when this PreparedStatement object&lt;br/&gt;
    is executed.&quot; (&quot;will be&quot;: my emphasis, not &quot;just was&quot;.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;here is my run result (incl some trace from EmbedPreparedStatement#getMetaData)&lt;/p&gt;

&lt;p&gt;Client/server:&lt;/p&gt;

&lt;p&gt;$ java -cp .:$CLASSPATH DERBY3823StressTestNPE 2 &lt;br/&gt;
execp.getResultDescription: insert into t1 values(?,&apos;aaaaa&apos;)&lt;br/&gt;
execp.getResultDescription: insert into t1 values(?,&apos;aaaaa&apos;)&lt;br/&gt;
Done loading data&lt;br/&gt;
execp.getResultDescription: select * from t1&lt;br/&gt;
execp.getResultDescription: select * from t1&lt;br/&gt;
executing alter&lt;br/&gt;
2. PS#getMetaData: char column length is 5&lt;br/&gt;
Reexecuting ps on changed table...&lt;br/&gt;
3. RS#getMetadata: char column length is 5&lt;br/&gt;
data:1 12345678&lt;/p&gt;

&lt;p&gt;As we can see we are getting a value 8 long, but both ps&apos;s metadata&lt;br/&gt;
and rs&apos;s metadata are both out of date. Note that there is no new call&lt;br/&gt;
to execp.getResultDescription &lt;b&gt;after&lt;/b&gt; we alter the table...&lt;/p&gt;

&lt;p&gt;On embedded it is correct:&lt;/p&gt;

&lt;p&gt;$ java -cp .:$CLASSPATH DERBY3823StressTestNPE&lt;br/&gt;
Done loading data&lt;br/&gt;
executing alter&lt;br/&gt;
execp.getResultDescription: select * from t1&lt;br/&gt;
2. PS#getMetaData: char column length is 8&lt;br/&gt;
Reexecuting ps on changed table...&lt;br/&gt;
3. RS#getMetadata: char column length is 8&lt;br/&gt;
data:1 12345678&lt;/p&gt;

&lt;p&gt;As you observed, it should return 8. Maybe because it&apos;s cached on the&lt;br/&gt;
client side, but should have been invalidated. This looks like a bug&lt;br/&gt;
to me.&lt;/p&gt;

&lt;p&gt;In any case, I think the patch improves the situation in that we now&lt;br/&gt;
will wait if the underlying prepared statement is being re-prepared. I&lt;br/&gt;
think we should file a new bug for this and relate it to the two you&lt;br/&gt;
mentioned. I can do it if you like. The current patch as least assures we get a consistent&lt;br/&gt;
&quot;snapshot&quot; at the time metadata is attempted retrieved.&lt;/p&gt;


&lt;p&gt;---------------------------------------------------&lt;br/&gt;
import java.sql.*;&lt;/p&gt;

&lt;p&gt;public class DERBY3823StressTestNPE extends Thread {&lt;br/&gt;
    public static void main(String[] args) throws Exception {&lt;/p&gt;

&lt;p&gt;        Connection conn = null;&lt;br/&gt;
        if (args.length == 1) {&lt;br/&gt;
            int embedded = Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;);&lt;br/&gt;
            if (embedded == 1) &lt;/p&gt;
{
                Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);
                conn = DriverManager.getConnection(
                    &quot;jdbc:derby:DERBY3823DB;create=true&quot;);
            }
&lt;p&gt; else &lt;/p&gt;
{
                Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);
                String url = &quot;jdbc:derby://localhost:1527/DERBY3823DB;create=true&quot;;
                conn = DriverManager.getConnection(url);
            }
&lt;p&gt;        } else &lt;/p&gt;
{
            Class.forName(&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;);
            conn = DriverManager.getConnection(
                &quot;jdbc:derby:DERBY3823DB;create=true&quot;);
        }

&lt;p&gt;        conn.setAutoCommit(false);&lt;br/&gt;
        Statement st = conn.createStatement();&lt;br/&gt;
        st.executeUpdate(&quot;create table t1(c11 int, &quot;+&lt;br/&gt;
                         &quot;c12 varchar(5))&quot;);&lt;br/&gt;
        {&lt;br/&gt;
            PreparedStatement ps =&lt;br/&gt;
                conn.prepareStatement(&quot;insert into t1 values(?,&apos;aaaaa&apos;)&quot;);&lt;br/&gt;
            for (int i = 0; i &amp;lt; 1000; i++) &lt;/p&gt;
{
                ps.setInt(1, i);
                ps.executeUpdate();
            }
&lt;p&gt;        }&lt;br/&gt;
        System.out.println(&quot;Done loading data&quot;);&lt;br/&gt;
        conn.commit();&lt;/p&gt;

&lt;p&gt;        PreparedStatement ps = conn.prepareStatement(&quot;select * from t1&quot;);&lt;br/&gt;
        ResultSet rs = ps.executeQuery();&lt;/p&gt;

&lt;p&gt;        for (int i = 0; i &amp;lt; 990; i++) &lt;/p&gt;
{
            rs.next();
        }
&lt;p&gt;        rs.close();&lt;/p&gt;

&lt;p&gt;        Statement st2 = conn.createStatement();&lt;br/&gt;
        System.err.println(&quot;executing &quot; + &quot;alter&quot;);&lt;br/&gt;
        st2.execute(&quot;alter table t1 alter column c12 set data type varchar(8)&quot;);&lt;br/&gt;
        st2.execute(&quot;delete from t1&quot;);&lt;br/&gt;
        st2.execute(&quot;insert into t1 values (1, &apos;12345678&apos;)&quot;);&lt;/p&gt;

&lt;p&gt;        {&lt;/p&gt;

&lt;p&gt;            // Ps&apos; javadoc: getMetaData() Retrieves a ResultSetMetaData object&lt;br/&gt;
            // that contains information about the columns of the ResultSet&lt;br/&gt;
            // object that &lt;b&gt;will be&lt;/b&gt; returned when this PreparedStatement object&lt;br/&gt;
            // is executed. (my emphasis)&lt;/p&gt;

&lt;p&gt;            ResultSetMetaData rsmd = ps.getMetaData();&lt;br/&gt;
            int charLength = rsmd.getColumnDisplaySize(2);&lt;br/&gt;
            System.out.println(&quot;2. PS#getMetaData: char column length is &quot; + charLength);&lt;br/&gt;
            System.out.println(&quot;Reexecuting ps on changed table...&quot;);&lt;br/&gt;
            rs = ps.executeQuery();&lt;br/&gt;
            ResultSetMetaData rsmd2 = rs.getMetaData();&lt;br/&gt;
            charLength = rsmd2.getColumnDisplaySize(2);&lt;br/&gt;
            System.out.println(&quot;3. RS#getMetadata: char column length is &quot; + charLength);&lt;br/&gt;
            while (rs.next()) &lt;/p&gt;
{
                System.out.println(&quot;data:&quot; + rs.getString(1) + &quot; &quot; + rs.getString(2));
            }
&lt;p&gt;            rs.close();&lt;br/&gt;
        }&lt;br/&gt;
    }&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="13126289" author="dagw" created="Thu, 13 Oct 2011 02:25:35 +0100"  >&lt;p&gt;Btw, regressions ran ok with the patch.&lt;/p&gt;</comment>
                            <comment id="13126338" author="dagw" created="Thu, 13 Oct 2011 05:29:53 +0100"  >&lt;p&gt;Mamta, I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5459&quot; title=&quot;Result set metadata are out of sync on client after underlying table is altered&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5459&quot;&gt;&lt;del&gt;DERBY-5459&lt;/del&gt;&lt;/a&gt; for the out-of-date metadata issue on client. If you are otherwise OK with the patch, I&apos;ll commit it soon.&lt;/p&gt;</comment>
                            <comment id="13126352" author="mamtas" created="Thu, 13 Oct 2011 06:27:16 +0100"  >&lt;p&gt;Earlier today, I added(in trunk) a test case to AlterTableTest showing that in case of a network server, an open resulset&apos;s metadata can get changed underneath it but it is not reflected in the metadata.&lt;/p&gt;</comment>
                            <comment id="13126354" author="mamtas" created="Thu, 13 Oct 2011 06:31:40 +0100"  >&lt;p&gt;Dag, I think we should go ahead and commit your patch into trunk. The metadata stuff can be handled under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5459&quot; title=&quot;Result set metadata are out of sync on client after underlying table is altered&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5459&quot;&gt;&lt;del&gt;DERBY-5459&lt;/del&gt;&lt;/a&gt;.Thanks for filing that jira&lt;/p&gt;</comment>
                            <comment id="13127222" author="dagw" created="Fri, 14 Oct 2011 02:36:01 +0100"  >&lt;p&gt;Committed patch as svn 1183192, resolving. As we have discussed, it would probably not be wise to back-port at this point.&lt;/p&gt;</comment>
                            <comment id="13127230" author="dagw" created="Fri, 14 Oct 2011 02:49:46 +0100"  >&lt;p&gt;Marking &quot;affects version&quot; back to the first seen by Kathey: 10.3.3.1, but it&apos;s probably even older.&lt;/p&gt;</comment>
                            <comment id="13202620" author="mikem" created="Tue, 7 Feb 2012 18:49:23 +0000"  >&lt;p&gt;I am wondering if the consensus is still that we should not backport this fix to 10.8?  It has run successfully for some time now in trunk.  The fix looks localized to me.  I understand that it does not fix everything, but seems to be better than no fix.  What is the risk of the fix?&lt;/p&gt;

&lt;p&gt;For some reason we seem to be seeing the stressmulti error quite a lot in 10.8 nightly runs, tracked under &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5435&quot; title=&quot;org.apache.derby.client.am.SqlException in stressMultiTest: The DDM object 0x1232 is not supported.  The connection has been terminated.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5435&quot;&gt;&lt;del&gt;DERBY-5435&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13202766" author="dagw" created="Tue, 7 Feb 2012 20:51:50 +0000"  >&lt;p&gt;I&apos;m OK with it now I think.  Mamta had concerns that this (new) code path isn&apos;t exercised often enough for us to trust it an update release yet.That is a valid concern of course. The related &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5459&quot; title=&quot;Result set metadata are out of sync on client after underlying table is altered&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5459&quot;&gt;&lt;del&gt;DERBY-5459&lt;/del&gt;&lt;/a&gt; could also be backported I think.&lt;/p&gt;</comment>
                            <comment id="13203049" author="mamtas" created="Wed, 8 Feb 2012 00:47:46 +0000"  >&lt;p&gt;We have the fix for this jira in for a long time now so I feel comfortable backporting it to 10.8. My worry was that we were touching a highly traversed code but the fix approach sounds correct so it will be ok to backport this fix. &lt;/p&gt;</comment>
                            <comment id="13203120" author="mikem" created="Wed, 8 Feb 2012 01:42:42 +0000"  >&lt;p&gt;i am temporarily assigning this to myself and plan on backporting it to 10.8.&lt;/p&gt;</comment>
                            <comment id="13203772" author="mikem" created="Wed, 8 Feb 2012 17:47:33 +0000"  >&lt;p&gt;back ported fix from trunk to 10.8 and setting original owner back.  Change can be backported farther if necessary.&lt;/p&gt;</comment>
                            <comment id="13229391" author="kmarsden" created="Wed, 14 Mar 2012 17:19:50 +0000"  >&lt;p&gt;Reopen for 10.5 backport consideration. If working on the backport for this issue. Temporarily assign yourself and add a comment that you are working on it. When finished, reresolve with the new fix versions or label backport_reject_10_x as appropriate.&lt;/p&gt;</comment>
                            <comment id="13231772" author="mikem" created="Sat, 17 Mar 2012 00:52:55 +0000"  >&lt;p&gt;temp assign to mikem for backport.&lt;/p&gt;</comment>
                            <comment id="13233966" author="mikem" created="Wed, 21 Mar 2012 00:07:12 +0000"  >&lt;p&gt;backported to 10.5, 10.6 and 10.7.  resetting to original owner.  Don&apos;t plan on backporting to any other branches now.&lt;/p&gt;</comment>
                            <comment id="13823456" author="knutanders" created="Fri, 15 Nov 2013 08:15:18 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update: close all resolved issues that haven&amp;#39;t had any activity the last year&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12499069">DERBY-5059</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12525131">DERBY-5435</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12347204">DERBY-1635</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12546430">DERBY-5654</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12497944" name="d3823-1.diff" size="4403" author="dagw" created="Thu, 6 Oct 2011 04:19:05 +0100"/>
                            <attachment id="12496878" name="derby.log" size="5301" author="knutanders" created="Wed, 28 Sep 2011 14:17:51 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 7 Jan 2009 07:30:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23864</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cl3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35857</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>