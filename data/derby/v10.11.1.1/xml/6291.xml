<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:38:41 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6291/DERBY-6291.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6291] Improve code coverage of  org.apache.derby.iapi.jdbc.BrokeredCallableStatement</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6291</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;According to code coverage analysis, org.apache.derby.iapi.jdbc.BrokeredCallableStatement is &lt;br/&gt;
exercised poorly by of our regression tests. The current coverage report for this class can be found at &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/coverage/_files/a9.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/coverage/_files/a9.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This task is to investigate this class, and either remove the unused code, or add&lt;br/&gt;
regression test that exercise the code, as appropriate.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12657178">DERBY-6291</key>
            <summary>Improve code coverage of  org.apache.derby.iapi.jdbc.BrokeredCallableStatement</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12641844">DERBY-6164</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ahsancse">ahsan shamsudeen</assignee>
                                    <reporter username="ahsancse">ahsan shamsudeen</reporter>
                        <labels>
                            <label>derby_triage10_11</label>
                    </labels>
                <created>Thu, 11 Jul 2013 00:54:44 +0100</created>
                <updated>Wed, 3 Sep 2014 09:31:34 +0100</updated>
                            <resolved>Fri, 26 Jul 2013 15:39:36 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13705423" author="bryanpendleton" created="Thu, 11 Jul 2013 03:59:14 +0100"  >&lt;p&gt;Hi Ahsan, thanks for logging this issue.&lt;/p&gt;

&lt;p&gt;I see that the test program org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest&lt;br/&gt;
already has a number of test cases which exercise the functionality of BrokeredCallableStatement.&lt;/p&gt;

&lt;p&gt;Perhaps you can determine how to add additional test cases to this test program to&lt;br/&gt;
exercise some of the un-covered methods. &lt;/p&gt;

&lt;p&gt;A good approach might be to set up the CallableTest program in your debugger, set some&lt;br/&gt;
breakpoints in the BrokeredCallableStatement methods, observe how the test program&lt;br/&gt;
causes those methods to be executed, and then look for ways to add additional test cases.&lt;/p&gt;</comment>
                            <comment id="13705632" author="knutanders" created="Thu, 11 Jul 2013 10:14:53 +0100"  >&lt;p&gt;I think this class was covered by the GSoC project last year in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5854&quot; title=&quot;Test for methods in BrokeredCallableStatement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5854&quot;&gt;&lt;del&gt;DERBY-5854&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, since many of the methods in BrokeredCallableStatement are not actually implemented and always throw an SQLException, they won&apos;t show up in the coverage reports. See &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5851&quot; title=&quot;Inconsistent code coverage shown for LogicalPreparedStatement40&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5851&quot;&gt;&lt;del&gt;DERBY-5851&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;http://sourceforge.net/p/eclemma/discussion/614869/thread/756af8ff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://sourceforge.net/p/eclemma/discussion/614869/thread/756af8ff&lt;/a&gt; for details.&lt;/p&gt;</comment>
                            <comment id="13706591" author="bryanpendleton" created="Fri, 12 Jul 2013 03:39:01 +0100"  >&lt;p&gt;I agree, this makes it challenging to use the coverage tools &lt;br/&gt;
to determine if the code is covered by our test suites.&lt;/p&gt;

&lt;p&gt;Many of the un-covered BrokeredCallableStatement methods&lt;br/&gt;
have to do with &quot;named parameters&quot;, which is an optional&lt;br/&gt;
part of the JDBC standard that I believe Derby does not support.&lt;/p&gt;

&lt;p&gt;However, it is not obvious to me whether we have tests which&lt;br/&gt;
verify that, or not.&lt;/p&gt;

&lt;p&gt;For example, consider the method:&lt;/p&gt;

&lt;p&gt;    public final void setInt(String parameterName, int value)&lt;/p&gt;

&lt;p&gt;in BrokeredCallableStatement. Although we have a number of&lt;br/&gt;
tests of the similar method&lt;/p&gt;

&lt;p&gt;    public final void setInt(int parameterIndex, int x)&lt;/p&gt;

&lt;p&gt;in BrokeredPreparedStatement, it&apos;s not obvious to me that we&lt;br/&gt;
have a set of the &quot;named parameter&quot; variant in CallableStatement.&lt;/p&gt;

&lt;p&gt;So, it seems like it might actually be an overall increase in&lt;br/&gt;
coverage (and small improvement to our test suites) to add a&lt;br/&gt;
test like&lt;/p&gt;

&lt;p&gt;+    public void testTwoInOneOutProcNamedParameters() throws SQLException&lt;br/&gt;
+    {&lt;br/&gt;
+        CallableStatement cs = prepareCall&lt;br/&gt;
+            (&quot;call TWO_IN_ONE_OUT_PROC (?, ?, ?)&quot;);&lt;br/&gt;
+       try &lt;/p&gt;
{
+               cs.setInt(&quot;P1&quot;, 6);
+               cs.setInt(&quot;P2&quot;, 9);
+               cs.registerOutParameter (3, java.sql.Types.INTEGER);
+               cs.execute();
+               fail(&quot;should have thrown exception&quot;);
+       }
&lt;p&gt;+       catch (SQLException e)&lt;br/&gt;
+       &lt;/p&gt;
{
+                assertSQLState(&quot;0A000&quot;, e);
+       }
&lt;p&gt;+    }&lt;/p&gt;

&lt;p&gt;What would be a good way to determine whether adding tests like&lt;br/&gt;
these for the &quot;named parameters&quot; API would be valuable, since we&lt;br/&gt;
can&apos;t use the coverage tool to make that assessment?&lt;/p&gt;</comment>
                            <comment id="13706600" author="bryanpendleton" created="Fri, 12 Jul 2013 04:01:23 +0100"  >&lt;p&gt;Ahsan, does your IDE&apos;s &quot;code search&quot; tool tell you whether there are&lt;br/&gt;
any existing tests in the Derby test suite which invoke&lt;br/&gt;
BrokeredCallableStatement.setInt(String parameterName, int value)?&lt;/p&gt;</comment>
                            <comment id="13706797" author="knutanders" created="Fri, 12 Jul 2013 09:53:32 +0100"  >&lt;p&gt;One way to get the unsupported methods to show up in the coverage reports, provided they actually are covered by the tests, is to make them explicitly throw an exception. See the corresponding method in EmbedCallableStatement, which is reported as covered even though it always throws an exception: &lt;a href=&quot;https://builds.apache.org/job/Derby-JaCoCo/lastSuccessfulBuild/artifact/coverage-report/org.apache.derby.impl.jdbc/EmbedCallableStatement.java.html#L981&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/Derby-JaCoCo/lastSuccessfulBuild/artifact/coverage-report/org.apache.derby.impl.jdbc/EmbedCallableStatement.java.html#L981&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The downside of that approach is that the named parameter variants in BrokeredCallableStatement won&apos;t automatically start working once support has been added to EmbedCallableStatement. I think that is just a minor inconvenience that won&apos;t add any significant amount of extra work when/if support for named parameter is added.&lt;/p&gt;

&lt;p&gt;I think it makes sense to add test cases like the one Bryan suggested. It looks to me as if we don&apos;t have such tests currently. The coverage we have of the named parameter methods probably comes from tests like UnsupportedVetter and ClosedObjectTest that call all JDBC methods reflectively, but they test a different aspect of the methods. I&apos;d like the new test cases to be a bit more specific, though. Something like:&lt;/p&gt;

&lt;p&gt;CallableStatement cs = prepareCall(&quot;call TWO_IN_ONE_OUT_PROC (?, ?, ?)&quot;);&lt;br/&gt;
try &lt;/p&gt;
{
    cs.setInt(&quot;P1&quot;, 6);
    fail(&quot;should have failed&quot;);
}
&lt;p&gt; catch (SQLFeatureNotSupportedException e) &lt;/p&gt;
{
    assertSQLState(&quot;0A000&quot;, e);
}

&lt;p&gt;Since we expect the setInt() call to fail, we shouldn&apos;t have calls to registerOutParameter() and execute() in the try block. Otherwise, we cannot tell if it was the setInt() call that failed expectedly, or some other call.&lt;/p&gt;</comment>
                            <comment id="13706983" author="ahsancse" created="Fri, 12 Jul 2013 15:51:54 +0100"  >&lt;p&gt;According to my IDE, Its hard to find a call to BrokeredCallableStatement.setInt(String parameterName, int value). These are the only classes which calls the BrokeredCallableStatement.setInt(String parameterName, int value).&lt;/p&gt;

&lt;p&gt;CallableStatemet.java&lt;br/&gt;
Rowset.java&lt;br/&gt;
BaseRowSet.java&lt;br/&gt;
ClientCallableStatement.java&lt;br/&gt;
LogicalCallableStatement.java&lt;br/&gt;
FormatableIntHolder.java&lt;/p&gt;</comment>
                            <comment id="13707152" author="ahsancse" created="Fri, 12 Jul 2013 18:53:03 +0100"  >&lt;p&gt;I have to clarify a small confusion.&lt;br/&gt;
In derby source code, under org.apache.derby.iapi.jdbc, there are two classes call BrokeredCallableStatement.java and BrokeredCallableStatement42.java.&lt;br/&gt;
But in Emma, only BrokeredCallableStatement.java is listed. When I check the JaCoCo , it has three classes call BrokeredCallableStatement40.java, BrokeredCallableStatement30.java and BrokeredCallableStatement.java. What does this mean?&lt;/p&gt;

&lt;p&gt;Also, the method inside these classes also look different.&lt;/p&gt;</comment>
                            <comment id="13707500" author="bryanpendleton" created="Fri, 12 Jul 2013 23:54:39 +0100"  >&lt;p&gt;When you see the &quot;30&quot;, &quot;40&quot;, &quot;42&quot; etc references in Derby code, it often refers to a&lt;br/&gt;
particular version of the Java JDBC spec.&lt;/p&gt;

&lt;p&gt;So there was JDBC version 3.0, JDBC version 4.0, JDBC version 4.1, etc.&lt;/p&gt;

&lt;p&gt;And those different JDBC versions work with different versions of the JDK.&lt;/p&gt;

&lt;p&gt;Since JDBC (and Java) have been around for 20 years, there have come&lt;br/&gt;
to be a lot of versions, and it is complicated to keep track of them, so the&lt;br/&gt;
Derby code has to be very aware of which JDBC version is in use by a particular&lt;br/&gt;
application and version of the JDK.&lt;/p&gt;

&lt;p&gt;So some of the code that you see might only run if JDK version 1.4 is used, or Java 5,&lt;br/&gt;
or Java 6, or Java 7, etc.&lt;/p&gt;</comment>
                            <comment id="13712710" author="ahsancse" created="Thu, 18 Jul 2013 20:38:10 +0100"  >&lt;p&gt;This patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6291&quot; title=&quot;Improve code coverage of  org.apache.derby.iapi.jdbc.BrokeredCallableStatement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6291&quot;&gt;&lt;del&gt;DERBY-6291&lt;/del&gt;&lt;/a&gt; add test cases for non-exercised methods. Go through it and suggest any  needed improvements.&lt;/p&gt;</comment>
                            <comment id="13713236" author="bryanpendleton" created="Fri, 19 Jul 2013 02:33:10 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;The patch applies and builds cleanly for me. But when I run it, with:&lt;/p&gt;

&lt;p&gt;    ant -Dderby.junit.testclass=org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest junit-single&lt;/p&gt;

&lt;p&gt;I get:&lt;/p&gt;

&lt;p&gt;junit-single:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Running org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 440, Failures: 2, Errors: 93, Skipped: 0, Time elapsed: 57.414 sec&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Test org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest FAILED&lt;/p&gt;

&lt;p&gt;What are the results in your environment?&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;
</comment>
                            <comment id="13713428" author="ahsancse" created="Fri, 19 Jul 2013 09:04:11 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I got following results in my environment. &lt;/p&gt;

&lt;p&gt;C:\Users\Rila\workspace\derby&amp;gt;ant -Dderby.junit.testclass=org.apache.derbyTestin&lt;br/&gt;
g.functionTests.tests.jdbcapi.CallableTest junit-single&lt;br/&gt;
Unable to locate tools.jar. Expected to find it in C:\Program Files\Java\jre7\li&lt;br/&gt;
b\tools.jar&lt;br/&gt;
Buildfile: C:\Users\Rila\workspace\derby\build.xml&lt;/p&gt;

&lt;p&gt;junit-init-nocp:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;mkdir&amp;#93;&lt;/span&gt; Created dir: C:\Users\Rila\workspace\derby\junit_20130719_1227\testo&lt;br/&gt;
ut&lt;/p&gt;

&lt;p&gt;junit-init:&lt;/p&gt;

&lt;p&gt;emit-junit-classpath-jars:&lt;/p&gt;

&lt;p&gt;emit-junit-classpath:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Running with classes or user specified classpath: C:\Users\Rila\work&lt;br/&gt;
space\derby/classes&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; CLASSPATH (environment variable): $&lt;/p&gt;
{env.CLASSPATH}

&lt;p&gt;junit-single:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Running org.apache.derbyTesting.functionTests.tests.jdbcapi.Callable&lt;br/&gt;
Test&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 52, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.&lt;br/&gt;
454 sec&lt;/p&gt;

&lt;p&gt;BUILD SUCCESSFUL&lt;br/&gt;
Total time: 26 seconds&lt;/p&gt;</comment>
                            <comment id="13714254" author="bryanpendleton" created="Sat, 20 Jul 2013 01:15:33 +0100"  >&lt;p&gt;I will look a bit more closely at what the failures are in my environment.&lt;/p&gt;</comment>
                            <comment id="13714527" author="bryanpendleton" created="Sat, 20 Jul 2013 20:57:26 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;If your run is only running 52 tests, then I think you are not running your new&lt;br/&gt;
version of CallableTest, as the patched version has many new tests.&lt;/p&gt;
</comment>
                            <comment id="13714537" author="bryanpendleton" created="Sat, 20 Jul 2013 21:42:37 +0100"  >&lt;p&gt;I ran the attached setIntPatch.txt under my debugger to see&lt;br/&gt;
how the new test behaves.&lt;/p&gt;

&lt;p&gt;With this patch, we call setInt(String parameterName, int x) 4 times:&lt;/p&gt;

&lt;p&gt;1) The first time, we call EmbedCallableStatement.setInt(String,int),&lt;br/&gt;
   which directly throws Util.notImplemented();&lt;/p&gt;

&lt;p&gt;2) The second time, we call ClientCallableStatement.setInt(String,int),&lt;br/&gt;
   which directly throws jdbcMethodNotImplemented;&lt;/p&gt;

&lt;p&gt;3) The third time, we call LogicalCallableStatement.setInt(String,int),&lt;br/&gt;
   which then calls ClientCallableStatement.setInt(String,int),&lt;br/&gt;
   which directly throws jdbcMethodNotImplemented;&lt;/p&gt;

&lt;p&gt;4) The fourth time, we call BrokeredCallableStatement.setInt(String,int),&lt;br/&gt;
   which then calls EmbedCallableStatement.setInt(String,int),&lt;br/&gt;
   which directly throws Util.notImplemented();&lt;/p&gt;

&lt;p&gt;So I definitely think that test cases like these would add&lt;br/&gt;
value to our test suite by (more thoroughly) testing the&lt;br/&gt;
as-yet-unimplemented JDBC 3.0 named parameter support.&lt;/p&gt;

&lt;p&gt;And when we do eventually get around to implementing those&lt;br/&gt;
JDBC features, these test cases will be useful as a&lt;br/&gt;
starting point for that implementation.&lt;/p&gt;</comment>
                            <comment id="13714672" author="ahsancse" created="Sun, 21 Jul 2013 09:53:41 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Now I have run the new version of the CallableTest.java  and got the same result. Then I change some prepareCall() procedures which failed to run. Consequently, the number of errors get reduced. Here is the latest output .&lt;/p&gt;

&lt;p&gt;C:\Users\Rila\workspace\derby&amp;gt; ant -Dderby.junit.testclass=org.apache.derbyTesti&lt;br/&gt;
ng.functionTests.tests.jdbcapi.CallableTest junit-single&lt;br/&gt;
Buildfile: C:\Users\Rila\workspace\derby\build.xml&lt;/p&gt;

&lt;p&gt;junit-init-nocp:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;mkdir&amp;#93;&lt;/span&gt; Created dir: C:\Users\Rila\workspace\derby\junit_20130721_1413\testo&lt;br/&gt;
ut&lt;/p&gt;

&lt;p&gt;junit-init:&lt;/p&gt;

&lt;p&gt;emit-junit-classpath-jars:&lt;/p&gt;

&lt;p&gt;emit-junit-classpath:&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Running with classes or user specified classpath: C:\Users\Rila\work&lt;br/&gt;
space\derby/classes&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; CLASSPATH (environment variable): $&lt;/p&gt;
{env.CLASSPATH}

&lt;p&gt;junit-single:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Running org.apache.derbyTesting.functionTests.tests.jdbcapi.Callable&lt;br/&gt;
Test&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 440, Failures: 2, Errors: 53, Skipped: 0, Time elapsed: 5&lt;br/&gt;
5.197 sec&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Test org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTes&lt;br/&gt;
t FAILED&lt;/p&gt;

&lt;p&gt;BUILD SUCCESSFUL&lt;br/&gt;
Total time: 59 seconds&lt;/p&gt;


&lt;p&gt;As I understood, What causes this errors is , I din&apos;t call suitable prepareCall() procedure in above failed methods. But, Its hard to find an existing procedure which suits above methods. For Example,&lt;/p&gt;

&lt;p&gt;public final void registerOutParameter(int paramIndex,int sqlType,String typeName)throws SQLException&lt;/p&gt;
{
	        
	getCallableStatement().registerOutParameter( paramIndex, sqlType, typeName);
}

&lt;p&gt;public final boolean getBoolean(int parameterIndex)throws SQLException&lt;/p&gt;
{
	        return getCallableStatement().getBoolean( parameterIndex);
}

&lt;p&gt;public final &amp;lt;T&amp;gt; T getObject(int parameterIndex, Class&amp;lt;T&amp;gt; type)throws SQLException&lt;/p&gt;
{
	        return ((EngineCallableStatement) getCallableStatement())
	                .getObject(parameterIndex, type);
}

&lt;p&gt;Do any existing prepareCall() procedures suits above methods ? &lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ahsan&lt;/p&gt;</comment>
                            <comment id="13714705" author="ahsancse" created="Sun, 21 Jul 2013 14:59:31 +0100"  >&lt;p&gt;I have changed some prepareCall() procedures in this patch. This patch too contains some errors. Please look at this  and suggest me required changes according to my previous comments  which includes the existing problems to be solved&lt;/p&gt;
</comment>
                            <comment id="13714735" author="bryanpendleton" created="Sun, 21 Jul 2013 17:36:25 +0100"  >&lt;p&gt;Hi Ahsan, now I get the same results as you with the latest updated patch.&lt;/p&gt;

&lt;p&gt;For the errors which say:&lt;/p&gt;

&lt;p&gt;   java.sql.SQLSyntaxErrorException: &apos;ONE_IN_ONE_OUT_FUNC&apos; is a function but it is&lt;br/&gt;
   being called as a procedure.&lt;/p&gt;

&lt;p&gt;you need to change your tests so instead of &lt;/p&gt;

&lt;p&gt;        CallableStatement cs = prepareCall(&quot;call ONE_IN_ONE_OUT_FUNC &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;/p&gt;

&lt;p&gt;they say&lt;/p&gt;

&lt;p&gt;        CallableStatement cs = prepareCall&lt;br/&gt;
            (&quot;? = call ONE_IN_ONE_OUT_FUNC &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&quot;);&lt;/p&gt;

&lt;p&gt;This will fix a number of the errors in the test.&lt;/p&gt;</comment>
                            <comment id="13714799" author="ahsancse" created="Sun, 21 Jul 2013 21:35:46 +0100"  >&lt;p&gt;The following methods are passed the test with above change. &lt;/p&gt;

&lt;p&gt;public final Blob getBlob(int i) {}&lt;br/&gt;
public final Clob getClob(int i) {}&lt;br/&gt;
public final Array getArray(int i) {}&lt;/p&gt;

&lt;p&gt;But , some similar type of methods didn&apos;t get passed by above change.They failed with &quot;junit.framework.AssertionFailedError: should have failed &quot; . So, I just remove the fail(&quot;should have failed&quot;)  statement and run the test suite. The following methods are passed the test. But, I didn&apos;t understand the logic behind this.&lt;/p&gt;

&lt;p&gt;public final String getString(int parameterIndex){}&lt;br/&gt;
public final boolean getBoolean(int parameterIndex){}&lt;br/&gt;
public final byte getByte(int parameterIndex) {}&lt;/p&gt;
</comment>
                            <comment id="13715888" author="bryanpendleton" created="Tue, 23 Jul 2013 01:05:27 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;I think that the only methods we should be specifically adding test &lt;br/&gt;
cases for are the ones which take &quot;String parameterName&quot; in&lt;br/&gt;
their signature, NOT the ones which take &quot;int parameterIndex&quot; or &quot;int i&quot;.&lt;/p&gt;

&lt;p&gt;That is, I see this JIRA issue as specifically about adding a suite&lt;br/&gt;
of test cases which cover the &quot;named parameters&quot; APIs in the&lt;br/&gt;
CallableStatement interface, and those are the ones which have&lt;br/&gt;
&quot;String parameterName&quot; in their interface.&lt;/p&gt;

&lt;p&gt;Does this make sense?&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="13716649" author="ahsancse" created="Tue, 23 Jul 2013 18:40:46 +0100"  >&lt;p&gt;This patch add  a suite of test cases which cover the &quot;named parameters&quot; APIs in the CallableStatement interface&lt;/p&gt;</comment>
                            <comment id="13717853" author="bryanpendleton" created="Wed, 24 Jul 2013 02:06:09 +0100"  >&lt;p&gt;This patch looks quite good to me. The new test cases are clear, and they&lt;br/&gt;
accomplish our goal, which is to explicitly verify that the &quot;named parameter&quot;&lt;br/&gt;
variants of the CallableStatement interface are not current implemented,&lt;br/&gt;
and throw the expected SQLFeatureNotSupportException.&lt;/p&gt;

&lt;p&gt;Although the code coverage tools still don&apos;t report the coverage as well&lt;br/&gt;
as we would like, due to the coverage tool problems we discussed in&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5854&quot; title=&quot;Test for methods in BrokeredCallableStatement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5854&quot;&gt;&lt;del&gt;DERBY-5854&lt;/del&gt;&lt;/a&gt;, the coverage report DOES now show coverage for&lt;br/&gt;
ClientCallableStatement and EmbedCallableStatement for the named&lt;br/&gt;
parameter APIs, which is good.&lt;/p&gt;

&lt;p&gt;I think we should proceed with this patch. &lt;/p&gt;</comment>
                            <comment id="13720837" author="jira-bot" created="Fri, 26 Jul 2013 15:38:50 +0100"  >&lt;p&gt;Commit 1507337 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bryanpendleton&quot; class=&quot;user-hover&quot; rel=&quot;bryanpendleton&quot;&gt;Bryan Pendleton&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1507337&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1507337&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6291&quot; title=&quot;Improve code coverage of  org.apache.derby.iapi.jdbc.BrokeredCallableStatement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6291&quot;&gt;&lt;del&gt;DERBY-6291&lt;/del&gt;&lt;/a&gt;: Improve test coverage of org.apache.derby.iapi.jdbc.BrokeredCallableStatement&lt;/p&gt;

&lt;p&gt;This patch was contributed by Ahsan Shamsudeen (ahsan dot competition at gmail dot com)&lt;/p&gt;

&lt;p&gt;This patch adds a collection of test cases which exercise the &quot;named&lt;br/&gt;
parameters&quot; APIs in the CallableStatement interface. Currently, these APIs&lt;br/&gt;
are not implemented by Derby, and stub implementations are present in&lt;br/&gt;
BrokeredCallableStatement, LogicalCallableStatement, ClientCallableStatement,&lt;br/&gt;
and EmbedCallableStatement.&lt;/p&gt;

&lt;p&gt;These stub implementations are now exercised by the CallableTest test suite.&lt;/p&gt;</comment>
                            <comment id="13720839" author="bryanpendleton" created="Fri, 26 Jul 2013 15:39:36 +0100"  >&lt;p&gt;Committed to the trunk as revision 1507337.&lt;/p&gt;

&lt;p&gt;Thank you for the contribution to Derby!&lt;/p&gt;</comment>
                            <comment id="14119597" author="knutanders" created="Wed, 3 Sep 2014 09:31:34 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12598366">DERBY-5854</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12593036" name="DERBY-6291.patch" size="39092" author="ahsancse" created="Thu, 18 Jul 2013 20:38:10 +0100"/>
                            <attachment id="12593741" name="FINAL-DERBY.patch" size="32290" author="ahsancse" created="Tue, 23 Jul 2013 18:40:46 +0100"/>
                            <attachment id="12593401" name="UPDATED-DERBY-6291.patch" size="39331" author="ahsancse" created="Sun, 21 Jul 2013 14:59:31 +0100"/>
                            <attachment id="12593360" name="setIntPatch.txt" size="893" author="bryanpendleton" created="Sat, 20 Jul 2013 21:42:37 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Jul 2013 02:59:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337401</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzg1gv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337724</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>