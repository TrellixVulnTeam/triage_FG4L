<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:49:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4874/DERBY-4874.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4874] Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR </title>
                <link>https://issues.apache.org/jira/browse/DERBY-4874</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Trigger created before VARCHAR column is expanded with ALTER TABLE does not recognize new size and fails with:&lt;br/&gt;
ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &apos;012345&lt;br/&gt;
678901234567890123456789001234567890&apos; to length 30.&lt;/p&gt;


&lt;p&gt;CREATE TABLE tab (&lt;br/&gt;
       element_id         INTEGER NOT NULL,&lt;br/&gt;
       altered_id         VARCHAR(30) NOT NULL,&lt;br/&gt;
       counter            SMALLINT NOT NULL DEFAULT 0,&lt;br/&gt;
       timets            TIMESTAMP NOT NULL&lt;br/&gt;
);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211; Create a trigger against the table&lt;br/&gt;
CREATE TRIGGER mytrig&lt;br/&gt;
 AFTER UPDATE ON tab&lt;br/&gt;
 REFERENCING NEW AS newt OLD AS oldt&lt;br/&gt;
 FOR EACH ROW MODE DB2SQL&lt;br/&gt;
  UPDATE tab set tab.counter = CASE WHEN (oldt.counter &amp;lt; 32767) THEN (oldt.count&lt;br/&gt;
er + 1) ELSE 1 END&lt;br/&gt;
  WHERE ((newt.counter is null) or (oldt.counter = newt.counter))&lt;br/&gt;
  AND newt.element_id = tab.element_id&lt;br/&gt;
  AND newt.altered_id = tab.altered_id;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211; Alter the table to increase column&lt;br/&gt;
ALTER TABLE tab ALTER altered_id SET DATA TYPE VARCHAR(64);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211; insert the data&lt;br/&gt;
insert into tab values (99, &apos;012345678901234567890123456789001234567890&apos;,1,CURRE&lt;br/&gt;
NT_TIMESTAMP);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211; update and reproduce the issue&lt;br/&gt;
update tab set timets = CURRENT_TIMESTAMP where ELEMENT_ID = 99;&lt;br/&gt;
ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &apos;012345&lt;br/&gt;
678901234567890123456789001234567890&apos; to length 30.&lt;br/&gt;
java.sql.SQLDataException: A truncation error was encountered trying to shrink V&lt;br/&gt;
ARCHAR &apos;012345678901234567890123456789001234567890&apos; to length 30.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLE&lt;br/&gt;
xceptionFactory40.java:79)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:256)&lt;/p&gt;

&lt;p&gt;        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException&lt;br/&gt;
(TransactionResourceImpl.java:391)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Tr&lt;br/&gt;
ansactionResourceImpl.java:346)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConne&lt;br/&gt;
ction.java:2269)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Connection&lt;br/&gt;
Child.java:81)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedState&lt;br/&gt;
ment.java:1321)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java&lt;br/&gt;
:625)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java&lt;br/&gt;
:555)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:521)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:3&lt;br/&gt;
63)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:261)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(ij.java:59)&lt;br/&gt;
Caused by: java.sql.SQLException: A truncation error was encountered trying to s&lt;br/&gt;
hrink VARCHAR &apos;012345678901234567890123456789001234567890&apos; to length 30.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExc&lt;br/&gt;
eptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransport&lt;br/&gt;
AcrossDRDA(SQLExceptionFactory40.java:119)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLE&lt;br/&gt;
xceptionFactory40.java:70)&lt;br/&gt;
        ... 16 more&lt;br/&gt;
Caused by: ERROR 22001: A truncation error was encountered trying to shrink VARC&lt;br/&gt;
HAR &apos;012345678901234567890123456789001234567890&apos; to length 30.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardEx&lt;br/&gt;
ception.java:343)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLChar.hasNonBlankChars(SQLChar.java:176&lt;br/&gt;
6)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLChar.setWidth(SQLChar.java:1840)&lt;br/&gt;
        at org.apache.derby.exe.ac0b5b0099x012bxf542xab11x0000001bd2983.e2(Unkno&lt;br/&gt;
wn Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGener&lt;br/&gt;
atedClass.java:143)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.GenericQualifier.getOrderable(Gener&lt;br/&gt;
icQualifier.java:96)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.clearOrderableCa&lt;br/&gt;
che(NoPutResultSetImpl.java:313)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TableScanResultSet.openScanControll&lt;br/&gt;
er(TableScanResultSet.java:350)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(TableSc&lt;br/&gt;
anResultSet.java:262)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(P&lt;br/&gt;
rojectRestrictResultSet.java:174)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(P&lt;br/&gt;
rojectRestrictResultSet.java:174)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore(Normali&lt;br/&gt;
zeResultSet.java:146)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.UpdateResultSet.setup(UpdateResultS&lt;br/&gt;
et.java:344)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSe&lt;br/&gt;
t.java:263)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Generi&lt;br/&gt;
cPreparedStatement.java:436)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatemen&lt;br/&gt;
t(GenericPreparedStatement.java:306)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(G&lt;br/&gt;
enericTriggerExecutor.java:173)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowT&lt;br/&gt;
riggerExecutor.java:111)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(T&lt;br/&gt;
riggerEventActivator.java:278)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(U&lt;br/&gt;
pdateResultSet.java:817)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSe&lt;br/&gt;
t.java:280)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Generi&lt;br/&gt;
cPreparedStatement.java:436)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPre&lt;br/&gt;
paredStatement.java:317)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedState&lt;br/&gt;
ment.java:1232)&lt;br/&gt;
        ... 10 more&lt;br/&gt;
ij&amp;gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12478632">DERBY-4874</key>
            <summary>Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Oct 2010 00:55:14 +0100</created>
                <updated>Thu, 31 Oct 2013 19:29:19 +0000</updated>
                            <resolved>Wed, 15 Feb 2012 00:01:49 +0000</resolved>
                                    <version>10.2.2.1</version>
                    <version>10.3.3.1</version>
                    <version>10.4.2.1</version>
                    <version>10.5.3.0</version>
                    <version>10.6.2.1</version>
                    <version>10.7.1.1</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.1</fixVersion>
                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.2.2</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12926012" author="kmarsden" created="Fri, 29 Oct 2010 00:55:59 +0100"  >&lt;p&gt;Attaching repro&lt;/p&gt;</comment>
                            <comment id="12926369" author="mamtas" created="Fri, 29 Oct 2010 18:38:39 +0100"  >&lt;p&gt;The repro fails on all the codelines starting 10.2. I do not have 10.1 to try it right away but seems like we have had this bug for a long time.&lt;/p&gt;</comment>
                            <comment id="12926393" author="mikem" created="Fri, 29 Oct 2010 19:30:52 +0100"  >&lt;p&gt;i would look at if the trigger code is getting recompiled at alter time.  &lt;br/&gt;
It might be useful to see if adding an index after the alter on dmtrigsnd.optcounter causes a recompile, it would be bad&lt;br/&gt;
if it did not as i believe it would lead to corrupted indexes.   If it works maybe comparing the 2 code paths would lend some&lt;br/&gt;
light.&lt;/p&gt;

&lt;p&gt;I assume dropping and recreating the trigger is a workaround.&lt;/p&gt;</comment>
                            <comment id="12926479" author="kmarsden" created="Fri, 29 Oct 2010 23:12:10 +0100"  >&lt;p&gt;I noticed dropping and recreating the column seems to be work ok. e.g.&lt;/p&gt;

&lt;p&gt;ALTER TABLE TAB DROP COLUMN altered_id;&lt;br/&gt;
ALTER TABLE TAB ADD  COLUMN altered_id VARCHAR(64);&lt;/p&gt;

&lt;p&gt;&amp;#8211; insert the data&lt;br/&gt;
insert into tab (element_id, altered_id, counter, timets) VALUES (99, &apos;012345678901234567890123456789001234567890&apos;,1,CURRENT_TIMESTAMP);&lt;/p&gt;

&lt;p&gt;update tab set timets = CURRENT_TIMESTAMP where ELEMENT_ID = 99;&lt;/p&gt;

&lt;p&gt;It might be also an interesting one for comparison&lt;/p&gt;


</comment>
                            <comment id="12927042" author="mamtas" created="Mon, 1 Nov 2010 16:57:40 +0000"  >&lt;p&gt;I did some debugging of the original repro and see that trigger is getting invalidated and recompiled but for some reason, we still use the old length of 30 rather than the new length of 64 as indicated by alter table statement. I will continue debugging to see why we pick up length 30 rather than 64.&lt;/p&gt;</comment>
                            <comment id="12927495" author="mamtas" created="Tue, 2 Nov 2010 17:07:40 +0000"  >&lt;p&gt;I have found what the problem is. The user&apos;s definition of trigger is as follows&lt;br/&gt;
CREATE TRIGGER mytrig&lt;br/&gt;
 AFTER UPDATE ON tab&lt;br/&gt;
 REFERENCING NEW AS newt OLD AS oldt&lt;br/&gt;
 FOR EACH ROW MODE DB2SQL&lt;br/&gt;
  UPDATE tab set tab.counter = CASE WHEN (oldt.counter &amp;lt; 32767) THEN (oldt.counter + 1) ELSE 1 END&lt;br/&gt;
  WHERE ((newt.counter is null) or (oldt.counter = newt.counter))&lt;br/&gt;
  AND newt.element_id = tab.element_id&lt;br/&gt;
  AND newt.altered_id = tab.altered_id;&lt;/p&gt;

&lt;p&gt;For the trigger action plan, Derby creates a SPSDescriptor which is saved in SYS.SYSSTATEMENTS. The above action plan gets converted to following and that is the query that is saved in SYS.SYSSTATEMENTS&lt;br/&gt;
UPDATE tab set tab.counter = CASE WHEN (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT)  &amp;lt; 32767) THEN (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT)  + 1) ELSE 1 END&lt;br/&gt;
  WHERE ((CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS SMALLINT)  is null) or (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT)  = CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS SMALLINT) ))&lt;br/&gt;
  AND CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(1) AS INTEGER)  = tab.element_id&lt;br/&gt;
  AND CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(2) AS VARCHAR(30))  = tab.altered_id&lt;/p&gt;

&lt;p&gt;Notice the casting to VARCHAR(30) which is what the column altered_id is defined at during trigger creation. Later, when we alter the length to VARCHAR(64), we do recognize that trigger has become invalid but we simply pickup the above query from SYS.SYSSTATEMENTS and recompile it which really doesn&apos;t help because VARCHAR(30) is not really correct anymore.&lt;/p&gt;

&lt;p&gt;Kathey had a test case that she tried where she dropped the column and recreated it with longer length and the trigger seemed to work correctly for that case. I will debug that case to see what is different about it which makes it work. Hopefully, the same technique can be used for our broken case. I will get Kathey&apos;s test case a try and debug it to understand what is going on. Her test case is as follows&lt;/p&gt;

&lt;p&gt;ALTER TABLE TAB DROP COLUMN altered_id; &lt;br/&gt;
ALTER TABLE TAB ADD COLUMN altered_id VARCHAR(64); &lt;/p&gt;

&lt;p&gt;&amp;#8211; insert the data &lt;br/&gt;
insert into tab (element_id, altered_id, counter, timets) VALUES (99, &apos;012345678901234567890123456789001234567890&apos;,1,CURRENT_TIMESTAMP); &lt;/p&gt;

&lt;p&gt;update tab set timets = CURRENT_TIMESTAMP where ELEMENT_ID = 99; &lt;/p&gt;</comment>
                            <comment id="12927995" author="mamtas" created="Wed, 3 Nov 2010 20:47:00 +0000"  >&lt;p&gt;Here is what I found out about the test case of alter table to drop the column and another alter table to add the column back again. Although it appears that it is working(no exception thrown during the UPDATE sql but UPDATE trigger is not updating the table it is supposed to update). The test case is as follows&lt;br/&gt;
Following is the schema to create the table and the trigger&lt;br/&gt;
connect &apos;jdbc:derby:wombat;create=true&apos;;&lt;br/&gt;
&amp;#8211; Create the table&lt;br/&gt;
CREATE TABLE tab (&lt;br/&gt;
       element_id         INTEGER NOT NULL,&lt;br/&gt;
       altered_id    	  VARCHAR(30) NOT NULL,&lt;br/&gt;
       counter            SMALLINT NOT NULL DEFAULT 0,	&lt;br/&gt;
       timets            TIMESTAMP NOT NULL&lt;br/&gt;
);&lt;br/&gt;
&amp;#8211; Create a trigger against the table&lt;br/&gt;
CREATE TRIGGER mytrig&lt;br/&gt;
 AFTER UPDATE ON tab&lt;br/&gt;
 REFERENCING NEW AS newt OLD AS oldt&lt;br/&gt;
 FOR EACH ROW MODE DB2SQL&lt;br/&gt;
  UPDATE tab set tab.counter = CASE WHEN (oldt.counter &amp;lt; 32767) THEN (oldt.counter + 1) ELSE 1 END&lt;br/&gt;
  WHERE ((newt.counter is null) or (oldt.counter = newt.counter))&lt;br/&gt;
  AND newt.element_id = tab.element_id&lt;br/&gt;
  AND newt.altered_id = tab.altered_id;&lt;/p&gt;

&lt;p&gt;&amp;#8211; Next, we dop and recreate the column (with a different length) and a row into the table&lt;br/&gt;
alter table tab drop column altered_id;&lt;br/&gt;
ALTER TABLE TAB ADD COLUMN altered_id VARCHAR(64); &lt;br/&gt;
insert into tab(element_id, altered_id, counter, timets) values (99, &apos;1234567890&apos;,1,CURRENT_TIMESTAMP);&lt;br/&gt;
select * from tab;&lt;br/&gt;
ELEMENT_ID |COUNT&amp;amp;|TIMETS                    |ALTERED_ID&lt;br/&gt;
----------------------------------------------------------------------------&lt;br/&gt;
99         |1     |2010-11-03 10:05:29.39    |1234567890&lt;br/&gt;
&amp;#8211; the following update will cause the trigger to fire which should increment the counter column&apos;s value from 1 to 2 but it doesn&apos;t. The explanation is below&lt;br/&gt;
update tab set timets = CURRENT_TIMESTAMP where ELEMENT_ID = 99; &lt;br/&gt;
select * from tab;&lt;br/&gt;
ELEMENT_ID |COUNT&amp;amp;|TIMETS                    |ALTERED_ID&lt;br/&gt;
99         |1     |2010-11-03 10:05:38.343   |1234567890&lt;/p&gt;

&lt;p&gt;The trigger action gets changed internally before a SPSDescriptor is created for it&lt;br/&gt;
UPDATE tab set tab.counter = CASE WHEN (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT) &amp;lt; 32767) THEN (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT) + 1) ELSE 1 END &lt;br/&gt;
  WHERE ((CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS SMALLINT) is null) or (CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(3) AS SMALLINT) = CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS SMALLINT) )) &lt;br/&gt;
  AND CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(1) AS INTEGER) = tab.element_id &lt;br/&gt;
  AND CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(2) AS VARCHAR(30)) = tab.altered_id &lt;/p&gt;

&lt;p&gt;As we can see above, the columns are being accessed through column positions rather than names(this was done as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1258&quot; title=&quot;Wrong value returned in a row trigger action statement if the table has column names that are identical when upper-cased.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1258&quot;&gt;&lt;del&gt;DERBY-1258&lt;/del&gt;&lt;/a&gt;. But the column positions have changed in the underlying table because of the drop column and new column additions. The above sql, when it gets the column org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(2), it is getting the column COUNTER rather than the column ALTERED_ID and because of that, the WHERE clause above returns FALSE and hence no row is updated by the trigger action.&lt;/p&gt;

&lt;p&gt;This case is slightly different than the original test case where the ALTER TABLE changed the length of the existing column. I will explain the difference through the system tables. SYSTRIGGERS keeps track of the columns that are referenced in the trigger action. Those columns are later used at trigger execution time to decide which columns from the trigger table need to be actually fetched into memory. The column tracking is done through the column positions in the table. An ALTER TABLE which drops the column and adds it back again, then the column is going to get added into a new position in the table and hence the original column positions saved in SYSTRIGGERS are not going to be correct anymore. In a case like this, we want to recalculate the column positions of the trigger action columns and then regenerate the SQL for SPSDescriptor and compile the regenerated SQL. For our original case, where simply the length of the colunm was changed but not it&apos;s position, we just want to regenerate the SQL for SPSDescriptor and then compile that new query. For our original case, there is no need to recalculate the column positions of the trigger action columns. It may turn out to be easier to just do both the steps for all trigger invalidation (provided that the trigger has REFERENCES clause because the problem is only when trigger action is referenecing to old and new column values of the row. For all other trigger cases, we should be fine)&lt;/p&gt;

&lt;p&gt;I will file a jira for this problem and go back to looking at SPSDescriptor sql regerenation and updating SYSSTATEMENTS with that new sql.for a fix for the original problem.&lt;/p&gt;

&lt;p&gt;Please let me know if anyone has any comments.&lt;/p&gt;</comment>
                            <comment id="12928085" author="bryanpendleton" created="Thu, 4 Nov 2010 01:43:03 +0000"  >&lt;p&gt;If a trigger references a column, it seems like ALTER TABLE DROP COLUMN should either&lt;br/&gt;
(a) refuse to run, because the trigger is referencing that column, or&lt;br/&gt;
(b) drop the column, and also drop the trigger .&lt;/p&gt;

&lt;p&gt;Leaving the trigger in the system, referencing a non-existent column,&lt;br/&gt;
does not seem like desirable behavior.&lt;/p&gt;

&lt;p&gt;It seems like the &quot;CASCADE&quot; and &quot;RESTRICT&quot; forms of DROP COLUMN should&lt;br/&gt;
control whether case (a) or (b) is taken by the ALTER TABLE.&lt;/p&gt;
</comment>
                            <comment id="12928666" author="mamtas" created="Fri, 5 Nov 2010 16:35:06 +0000"  >&lt;p&gt;Bryan, thanks for going through this jira and commenting. I had similar thoughts about ALTER TABLE DROP COLUMNS&apos;s behavior. If the drop is CASCADE, I would have expected the trigger to be dropped and if RESTRICT, then drop column should have failed. I will put this info to in the new jira &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4887&quot; title=&quot;ALTER TABLE DROP COLUMN leaves the dependent trigger invalid rather than drop it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4887&quot;&gt;&lt;del&gt;DERBY-4887&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12930642" author="mamtas" created="Wed, 10 Nov 2010 16:26:06 +0000"  >&lt;p&gt;I am currently running Junit suite with my changes which are not ready for commit. Once test that I see fails all the time is DatabaseMetaDataTest.testGetURL with following failure. I do not know why my changes would cause this failure. It seems like the terriotry and collation properties are switched by the getURL method. Has anyone seen this failure before?&lt;/p&gt;

&lt;p&gt;junit.framework.ComparisonFailure: getURL match expected:&amp;lt;...territory=en;collation=TERRITORY_BASED&amp;gt; but was:&amp;lt;...collation=TERRITORY_BASED;territory=en&amp;gt;&lt;/p&gt;

&lt;p&gt;As for my changes, I have copied the relevant code from CreateTriggerNode into TriggerDescriptor to regenerate the trigger action statement. Currently, every reference to a column from new table in trigger action gets switched to &lt;br/&gt;
CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(ColumnNumber) AS COLUMNDatatype)&lt;br/&gt;
And every reference to &lt;br/&gt;
CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getOldRow().getObject(ColumnNumber) AS COLUMNDatatype)&lt;/p&gt;

&lt;p&gt;In our specific case, the Alter table has changed the data type from varchar(30) to varchar(64) but the trigger action plan continued to use varchar(30). To fix varchar(30) casting to varchar(64), we need to regenerate the trigger action sql if &lt;br/&gt;
1)the trigger is found to be invalid, &lt;br/&gt;
2)the trigger is defined at row level (that is the only kind of trigger which allows reference to individual columns from old/new row)&lt;br/&gt;
3)the trigger action plan has columns that reference old/new row columns&lt;/p&gt;

&lt;p&gt;I check for above 3 conditions when a trigger is going to be fired and if true, then regenerate the sql and update the SYSSTATEMENTS row for the trigger action plan stored prepared statement.&lt;/p&gt;

&lt;p&gt;At this point, I have lot of code duplication but once I get all the tests running succesfully, I will post the patch as it is and then will work on avoiding the code duplication between CreateTriggerNode and TriggerDescriptor.&lt;/p&gt;</comment>
                            <comment id="12931192" author="mamtas" created="Thu, 11 Nov 2010 20:52:27 +0000"  >&lt;p&gt;I have a patch which is not ready for commit yet because of a failure I still need to investigate. The failure is in lang/predicatesIntoViews.sql and it seems like that the trigger action plan is getting regenerated with wrong column numbers. I need to narrow down the test to a form where it is easier to debug. The part of the failure looks as follows&lt;br/&gt;
$ java org.apache.derbyTesting.functionTests.harness.RunTest lang/predicatesIntoViews.sql&lt;br/&gt;
derby.optimizer.noTimeout=true&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Start: predicatesIntoViews jdk1.6.0 2010-11-11 11:52:34 ***&lt;br/&gt;
4739a4740,4756&lt;br/&gt;
&amp;gt; ERROR 38000: The exception &apos;java.sql.SQLException: Column &apos;3&apos; not found.&apos; was thrown while evaluating an expression.&lt;br/&gt;
&amp;gt; ERROR S0022: Column &apos;3&apos; not found.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I wanted to put out the patch in case anybody had comments on the general approach of the fix. Once I have the test failure fixed, I will try to put as much of the code as possible may be in DataDictionary and have both CreateTriigerNode and TriggerDescriptor call that code rather than have the duplication of the code in two places as it being done in my patch.&lt;/p&gt;</comment>
                            <comment id="12931386" author="knutanders" created="Fri, 12 Nov 2010 13:06:32 +0000"  >&lt;p&gt;I took a look at the patch. Note that I&apos;m not familiar with this part&lt;br/&gt;
of the code, so my comments are only about how the code can be&lt;br/&gt;
improved, not about the correctness of the approach.&lt;/p&gt;

&lt;p&gt;1) I saw your comment about sharing code with CreateTriggerNode&lt;br/&gt;
instead of duplicating it... Yes, please! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;2) The changes in BaseMonitor don&apos;t seem to be related to this issue.&lt;/p&gt;

&lt;p&gt;3) The new method sortRefs() looks unnecessarily complex. In&lt;br/&gt;
particular:&lt;/p&gt;

&lt;p&gt;  a) The code that copies the Vector to an array, could be replaced&lt;br/&gt;
  with a one-liner that just called toArray().&lt;/p&gt;

&lt;p&gt;  b) Using java.util.Collections.sort() sounds cleaner and less&lt;br/&gt;
  error-prone than reimplementing bubble sort.&lt;/p&gt;

&lt;p&gt;4) I find the added code in getActionSPS() a bit hard to follow. It&lt;br/&gt;
may help if some short comments were added explaining the purpose of&lt;br/&gt;
the various if statements and for loops. (For example, the part of the&lt;br/&gt;
JIRA comment from Nov 10 that says &quot;we need to regenerate the trigger&lt;br/&gt;
action sql if 1) ... 2) ... 3) ...&quot; would be a helpful comment for the&lt;br/&gt;
outer if statement.)&lt;/p&gt;

&lt;p&gt;5) In getActionSPS(), the code that sets all elements of&lt;br/&gt;
triggerColsAndTriggerActionCols to -1 could be simplified by using&lt;br/&gt;
java.util.Arrays.fill().&lt;/p&gt;

&lt;p&gt;6) In getActionSPS(), (referencedColsInTriggerAction != null) is&lt;br/&gt;
checked both in the outer and the inner if statement, so one of the&lt;br/&gt;
checks is redundant and could be removed.&lt;/p&gt;

&lt;p&gt;7) The new variables in getActionSPS() are only used if the trigger&lt;br/&gt;
needs to be recompiled. It would be good to move the declarations&lt;br/&gt;
inside the if statement so that we don&apos;t need to create a&lt;br/&gt;
StringBuilder and check the version of the data dictionary in the&lt;br/&gt;
common case.&lt;/p&gt;

&lt;p&gt;8) This code in getActionSPS() looks a bit suspicious:&lt;/p&gt;

&lt;p&gt;+			DataDictionary dd = getDataDictionary();&lt;br/&gt;
+&lt;br/&gt;
+			if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade)&lt;br/&gt;
+				return actionSPS;&lt;/p&gt;

&lt;p&gt;Even if readOnlyUpgrade is false, it will still return actionSPS on&lt;br/&gt;
the next line, so this code appears to have no purpose.&lt;/p&gt;</comment>
                            <comment id="12932345" author="mamtas" created="Tue, 16 Nov 2010 05:37:32 +0000"  >&lt;p&gt;Knut, thanks a bunch for taking the time to review the patch. In the attached patch, I have taken care of some of your comments. I am continuing to narrow down lang/predicatesIntoViews.sql to find out why wrong trigger action sql is getting regenerated as I mentioned in my comment on Nov 11th. The repro is pretty short compared to original lang/predicatesIntoViews.sql. I hope to narrow it down completely soon to be able to debug it. &lt;/p&gt;

&lt;p&gt;The attached patch still has duplication of code. After I debug the lang/predicatesIntoViews.sql problem, I will next work on putting as much common code as possible in DataDictionary rather than having it in two places which is CreateTriggerNode and TriggerDescriptor. I will also add more comments to the code where applicable and add test cases for this jira.&lt;/p&gt;

&lt;p&gt;I took care of following feeback from you.&lt;br/&gt;
1) I saw your comment about sharing code with CreateTriggerNode instead of duplicating it... Yes, please! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;I will work on this after taking care of lang/predicatesIntoViews.sql problem.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2) The changes in BaseMonitor don&apos;t seem to be related to this issue. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Thanks for catching it. I have removed that change from my codeline.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3) The new method sortRefs() looks unnecessarily complex. In particular: &lt;br/&gt;
  a) The code that copies the Vector to an array, could be replaced with a one-liner that just called toArray(). &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;I tried using toArray() but got class cast exception. Didn&apos;t spend enough time on this yet but I have the code I tried commented out. Do you see something wrong with it?&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  b) Using java.util.Collections.sort() sounds cleaner and less error-prone than reimplementing bubble sort. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;This code has been in CreateTriggerNode but sometime and I am not sure why it was implemented this way. I will try to take a look at this after tackling the items mentioned above.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4) I find the added code in getActionSPS() a bit hard to follow. It may help if some short comments were added explaining the purpose of the various if statements and for loops. (For example, the part of the JIRA comment from Nov 10 that says &quot;we need to regenerate the trigger action sql if 1) ... 2) ... 3) ...&quot; would be a helpful comment for the outer if statement.) &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;I have adding comments in my todo list to make the code more readable but I did copy the reasons for regeneration into the code.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;5) In getActionSPS(), the code that sets all elements of triggerColsAndTriggerActionCols to -1 could be simplified by using &lt;br/&gt;
java.util.Arrays.fill(). &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Thanks for this tip. I use now java.util.Arrays.fill() to do the array filling.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;6) In getActionSPS(), (referencedColsInTriggerAction != null) is checked both in the outer and the inner if statement, so one of the checks is redundant and could be removed. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Thanks for noticing this, I have taken care of this.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;7) The new variables in getActionSPS() are only used if the trigger needs to be recompiled. It would be good to move the declarations inside the if statement so that we don&apos;t need to create a StringBuilder and check the version of the data dictionary in the common case. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;I took care of this.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;8) This code in getActionSPS() looks a bit suspicious: &lt;br/&gt;
+ DataDictionary dd = getDataDictionary(); &lt;br/&gt;
+ &lt;br/&gt;
+ if (((org.apache.derby.impl.sql.catalog.DataDictionaryImpl) dd).readOnlyUpgrade) &lt;br/&gt;
+ return actionSPS; &lt;br/&gt;
Even if readOnlyUpgrade is false, it will still return actionSPS on the next line, so this code appears to have no purpose. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;You are right about this. I was experimenting updating SYSSTATEMENTS here but found that it is already being done as part of trigger invalidation. I have removed the code that you pointed out.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12932464" author="knutanders" created="Tue, 16 Nov 2010 14:01:59 +0000"  >&lt;p&gt;Thanks for making the changes, Mamta.&lt;/p&gt;

&lt;p&gt;As to the ClassCastException, I think you need to invoke toArray() like this to make it return an array with the correct type:&lt;/p&gt;

&lt;p&gt;    sorted = (QueryTreeNode[]) refs.toArray(new QueryTreeNode&lt;span class=&quot;error&quot;&gt;&amp;#91;refs.size()&amp;#93;&lt;/span&gt;);&lt;/p&gt;</comment>
                            <comment id="12933934" author="mamtas" created="Fri, 19 Nov 2010 19:49:50 +0000"  >&lt;p&gt;Thanks, Knut. I will gave that a try.&lt;/p&gt;

&lt;p&gt;I was able to narrow done lang/predicatesIntoViews.sql problem to following sql&lt;br/&gt;
connect &apos;jdbc:derby:wombat;create=true&apos;;&lt;br/&gt;
create table xr.repositoryobjectversion (&lt;br/&gt;
	id             varchar(48)		not null primary key,&lt;br/&gt;
	resourceid		varchar(48)		not null,&lt;br/&gt;
	name			varchar(128)	not null,&lt;br/&gt;
	uname			varchar(128),&lt;br/&gt;
	versionName		varchar(128)	not null&lt;br/&gt;
	);&lt;/p&gt;

&lt;p&gt;create trigger xr.rov_uname_i after insert on xr.repositoryobjectversion&lt;br/&gt;
referencing new as n&lt;br/&gt;
for each row&lt;br/&gt;
update xr.repositoryobjectversion set uname = upper( n.name ) where name = n.name;&lt;/p&gt;

&lt;p&gt;create trigger xr.rov_unane_u after update of name, uname on xr.repositoryobjectversion&lt;br/&gt;
referencing new as n&lt;br/&gt;
for each row&lt;br/&gt;
update xr.repositoryobjectversion set uname = upper( n.name )&lt;br/&gt;
  where name = n.name and uname &amp;lt;&amp;gt; upper( n.name );&lt;/p&gt;

&lt;p&gt;create unique index xr.versionname on xr.repositoryobjectversion (resourceid, versionName);&lt;/p&gt;

&lt;p&gt;The last sql which is creating the index invalidates the trigger and when we regenerate the action plan, we are regenerating the sql with the actual column number in the table rather than the relative column number of that column in the resultset that will be generated for the trigger. As a next step, I will debug this to see why the regenerated sql does not have the correct column number. Once I am done with this, I will work on reworking the code to put the common code in DataDictionary rather than the current duplication in CreateTriggerNode and TriggerDescriptor as done in my patch.&lt;/p&gt;</comment>
                            <comment id="12968450" author="mamtas" created="Mon, 6 Dec 2010 22:20:06 +0000"  >&lt;p&gt;I am attaching a patch which now avoids the code duplication in CreateTriggerNode and TriggerDescriptor and has the two classes share majority of the code related to transformation of trigger action sql through DataDictionary class. It also resolves the problem where I was using the actual column position in the trigger table rather than the relative column position in the resultset for the trigger table which will be created at runtime. I would highly appreciate the feedback on the patch. It might be little hard to read because I have not put the comments in the code yet. I will work on that next and add a test case too but wanted to put the patch out if somebody had immediate comments. Thanks&lt;/p&gt;</comment>
                            <comment id="12969883" author="mamtas" created="Thu, 9 Dec 2010 19:21:23 +0000"  >&lt;p&gt;I have committed the changes into trunk(10.8.0.0) with revision 1044096. The changes has comments and test for the code changes. Please let me know if anyone has any comments on the changes.&lt;/p&gt;

&lt;p&gt;The commit comments are as follows&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR&lt;/p&gt;

&lt;p&gt;The trigger action associated with a trigger gets converted as shown in the example below. This transformation happens if the trigger action has REFERENCEs clause.&lt;br/&gt;
	update xr.repositoryobjectversion set uname = upper( n.name )&lt;br/&gt;
	  where name = n.name and uname &amp;lt;&amp;gt; upper( n.name );&lt;br/&gt;
	turns into&lt;br/&gt;
	update xr.repositoryobjectversion set uname = &lt;br/&gt;
	  upper( CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS VARCHAR(128)) ) &lt;br/&gt;
	  where name = CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(3) AS VARCHAR(128))&lt;br/&gt;
As can be seen above, there is a CASTing involved which uses the length of the column in trigger table. &lt;/p&gt;

&lt;p&gt;If say that length is changed by ALTER TABLE after the trigger has been created, that change in the length does not get reflected in the sql associated with the trigger action in the form on SPSDescriptor. In order to fix this, I have made changes which willcause us to regenerate the sql from the trigger action for the SPSDescriptor if we are working with an invalidated row level trigger which uses the REFERENCEs clause.&lt;/p&gt;</comment>
                            <comment id="12970105" author="kristwaa" created="Fri, 10 Dec 2010 08:39:31 +0000"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;I noticed that you made the variable &apos;text&apos; non-final, but didn&apos;t make the setter/getter synchronized. Do you know that&apos;s safe?&lt;br/&gt;
SPSDescriptor can be used by several threads, and there&apos;s a comment about synchronization in the class JavaDoc. I made some changes in this area not long ago, and I discovered that this class can be ticklish when it comes to concurrent invalidation and compilation...&lt;/p&gt;</comment>
                            <comment id="12970178" author="mamtas" created="Fri, 10 Dec 2010 14:21:56 +0000"  >&lt;p&gt;Hi Kristian, thanks for noticing that. I will go ahead and synchronize the getter and setter for the variable since it is not final anymore.&lt;/p&gt;</comment>
                            <comment id="12971443" author="mamtas" created="Tue, 14 Dec 2010 22:28:11 +0000"  >&lt;p&gt;Attaching a backport for 10.6 release. I had to hand do these changes in 10.6 codeline because the changes in trunk depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; can&apos;t be backported to 10.6 and earlier because it had required system level changes which can&apos;t be backported to pre-released Derby products. I will be on vacation so won&apos;t be committing the changes yet. I will commit the changes in early January.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; was added into 10.7 codeline so a backport to 10.7 of this jira was straight forward. I have alreay committed this jira changes into 10.7&lt;/p&gt;</comment>
                            <comment id="12971444" author="mamtas" created="Tue, 14 Dec 2010 22:28:57 +0000"  >&lt;p&gt;Todo items for this jira&lt;/p&gt;

&lt;p&gt;1)It will be good to create a release note for this jira stating that the existing triggers will need to be dropped and recreated if the trigger table has had ALTER TABLE against it to change the length of the columns. This jira will take care of future ALTER TABLE statements changing the length of the column and any trigger using such columns in trigger action plan. &lt;br/&gt;
I will create the release note once I am back from vacation.&lt;br/&gt;
2)Implement Krisitian&apos;s suggestion to synchronize the setter and getter for variable text in SPSDescriptor in trunk and 10.7. This will later also have to be done as part of backport to 10.6 and under.&lt;br/&gt;
3)Backport to 10.6 and below&lt;/p&gt;</comment>
                            <comment id="12975948" author="kmarsden" created="Thu, 30 Dec 2010 00:35:21 +0000"  >&lt;p&gt;I thought I might look at the sychronization issue while Mamta is out, but am a little confused about what activity needs to be synchronized and wonder if just synchronizing getText and setText is enough or helpful as that would not prevent concurrent callers to the new TriggerDescriptor.getActionSPS() or prevent the text being changed  during compilation, etc.  Any helpful pointers and usage cases we are trying to protect  are welcome.&lt;/p&gt;
</comment>
                            <comment id="12977927" author="mamtas" created="Wed, 5 Jan 2011 19:40:52 +0000"  >&lt;p&gt;Backported the changes to 10.6 codeline with following commit comments&lt;/p&gt;

&lt;p&gt;Backporting the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; to 10.6 codeline.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR&lt;/p&gt;

&lt;p&gt;Had to hand do these changes rather than a simple migration from trunk because the changes in trunk depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; can&apos;t be backported to 10.6 and earlier because it had required system level changes which can&apos;t be backported to pre-released Derby products.&lt;/p&gt;</comment>
                            <comment id="12978324" author="mamtas" created="Thu, 6 Jan 2011 14:00:46 +0000"  >&lt;p&gt;Bacported the changes to 10.3.3.1 codeline with following commit comments&lt;/p&gt;

&lt;p&gt;Backporting the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; to 10.3 codeline. This backport to 10.3 has been the migration of changes committed to 10.6,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR&lt;/p&gt;

&lt;p&gt;The backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; from trunk to 10.6 codeline was done by hand (rather than a simple migration from trunk) because the changes in trunk depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; can&apos;t be backported to 10.6 and earlier because it had required system level changes which can&apos;t be backported to pre-released Derby products. &lt;/p&gt;</comment>
                            <comment id="12978331" author="mamtas" created="Thu, 6 Jan 2011 14:18:43 +0000"  >&lt;p&gt;Kristian, I was wondering if you or anyone else had any feedback on Kathey&apos;s comment about synchronization (her comment copied below)&lt;/p&gt;


&lt;p&gt;I thought I might look at the sychronization issue while Mamta is out, but am a little confused about what activity needs to be synchronized and wonder if just synchronizing getText and setText is enough or helpful as that would not prevent concurrent callers to the new TriggerDescriptor.getActionSPS() or prevent the text being changed during compilation, etc. Any helpful pointers and usage cases we are trying to protect are welcome. &lt;/p&gt;</comment>
                            <comment id="12978619" author="mamtas" created="Fri, 7 Jan 2011 02:39:07 +0000"  >&lt;p&gt;Bacported the changes to 10.4.2.1 codeline with following commit comments &lt;/p&gt;

&lt;p&gt;Backporting the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; to 10.4 codeline. This backport to 10.4 has been the migration of changes committed to 10.6, &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &lt;/p&gt;

&lt;p&gt;The backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; from trunk to 10.6 codeline was done by hand (rather than a simple migration from trunk) because the changes in trunk depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; can&apos;t be backported to 10.6 and earlier because it had required system level changes which can&apos;t be backported to pre-released Derby products. &lt;/p&gt;</comment>
                            <comment id="12978669" author="knutanders" created="Fri, 7 Jan 2011 08:02:46 +0000"  >&lt;p&gt;TriggerTest failed in the Tinderbox tests for 10.4 and 10.3 after the backport. Could it be related?&lt;br/&gt;
&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1056174-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1056174-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.3_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1055890-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.3_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1055890-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12978794" author="mamtas" created="Fri, 7 Jan 2011 14:30:06 +0000"  >&lt;p&gt;I will take a look at those failures.&lt;/p&gt;</comment>
                            <comment id="12978847" author="mamtas" created="Fri, 7 Jan 2011 16:31:36 +0000"  >&lt;p&gt;I didn&apos;t see these failures when I ran the junit suite on my laptop for both 10.4 and 10.3 before doing the checkin. I had used IBM&apos;s JVM1.6 rather than Sun&apos;s JVM1.6 which is what Tinderbox is using. The Tinderbox shows the errors in the basicSetup() method, part of which looks as follows. The method first drops the objects and then recreates them. If during the drop there is an exception, we just ignore it. The error encountered on Tinderbox is on the attempt to recreate table table1. This means that there may have been a failure during the drop but since we don&apos;t record the exception, I am not sure what the error may have been for the drop table1. The exception probably is logged into the derby,log. Can someone please tell me how to look at derby.log for a failed test on Tinderbox? Also, another thing to note in that the TriggerTest is run twice in junit suite. The first run of the test is fine, it is the second run of the test that runs into failure on Tinderbox.&lt;/p&gt;

&lt;p&gt;	public void basicSetup() throws SQLException{&lt;br/&gt;
        		Statement s = createStatement();&lt;br/&gt;
		try &lt;/p&gt;
{
			s.execute(&quot;drop table table1&quot;);
		}
&lt;p&gt; catch (SQLException sqle) {}&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			s.execute(&quot;drop table table2&quot;);
		}
&lt;p&gt; catch (SQLException sqle) {}&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			s.execute(&quot;drop table table3&quot;);
		}
&lt;p&gt; catch (SQLException sqle) {}&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			s.execute(&quot;drop trigger trigger1&quot;);
		}
&lt;p&gt; catch (SQLException sqle) {}&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{
			s.execute(&quot;drop trigger trigger2&quot;);
		}
&lt;p&gt; catch (SQLException sqle) {}&lt;/p&gt;

&lt;p&gt;		//table1 is the main table on which all the testing is done and it &lt;br/&gt;
		//uses table2 at times to do DMLs as part of it&apos;s trigger action.&lt;br/&gt;
		s.execute(&quot;create table table1 (id int, status smallint, bl blob(2G))&quot;);&lt;/p&gt;</comment>
                            <comment id="12978885" author="mamtas" created="Fri, 7 Jan 2011 17:51:54 +0000"  >&lt;p&gt;Backporting the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; to 10.5 codeline. This backport to 10.5 has been the migration of changes committed to 10.6,&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR&lt;/p&gt;

&lt;p&gt;The backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt; from trunk to 10.6 codeline was done by hand (rather than a simple migration from trunk) because the changes in trunk depended on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt;. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1482&quot; title=&quot;Update triggers on tables with blob columns stream blobs into memory even when the blobs are not referenced/accessed.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1482&quot;&gt;&lt;del&gt;DERBY-1482&lt;/del&gt;&lt;/a&gt; can&apos;t be backported to 10.6 and earlier because it had required system level changes which can&apos;t be backported to pre-released Derby products. &lt;/p&gt;</comment>
                            <comment id="12979560" author="knutanders" created="Mon, 10 Jan 2011 12:07:52 +0000"  >&lt;p&gt;Attaching derby.log from the fail directory in the failed tinderbox run on 10.4. Unfortunately, there are no exceptions that look related to the failure.&lt;/p&gt;</comment>
                            <comment id="12979678" author="mamtas" created="Mon, 10 Jan 2011 18:47:05 +0000"  >&lt;p&gt;Knut, thanks for posting derby.log. I don&apos;t see anything in there which might indicate that earlier drop of the table1 failed which happens before an attempt is made to recreate table1. &lt;/p&gt;

&lt;p&gt;I did a dummy checkin to 10.3 on Friday to cause the tinerbox to run the tests again and the test did not fail on tinderbox again. I have to admit I am not sure at this point, why the test failed both on 10.3 and 10.4 &lt;/p&gt;

&lt;p&gt;BTW, the backporting of this jira to 10.5 didn&apos;t show any test failure. &lt;/p&gt;

&lt;p&gt;The test runs on IBM&apos;s internal machines which can be found at &lt;a href=&quot;http://people.apache.org/~myrnavl/derby_test_results/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://people.apache.org/~myrnavl/derby_test_results/&lt;/a&gt; also didn&apos;t show any failures for 10.3, 10.4, 10.5 and 10.6 codelines.&lt;/p&gt;

&lt;p&gt;I am running the junit suite on my laptop with Sun&apos;s jdk 1.6 to see if I can see the failure.&lt;/p&gt;</comment>
                            <comment id="12979724" author="mamtas" created="Mon, 10 Jan 2011 20:03:01 +0000"  >&lt;p&gt;I am doing a dummy checkin to 10.4 codeline to see if tinderbox run will show the test failure again for the 10.4 codeline. A similar dummy checkin for 10.3 on Friday didn&apos;t show the test failure on 10.3 codeline on tinderbox.&lt;/p&gt;</comment>
                            <comment id="12979746" author="mamtas" created="Mon, 10 Jan 2011 20:44:57 +0000"  >&lt;p&gt;I ran junit on my laptop on the 10.3 codeline with Sun&apos;s jdk 1.6 and that did not show the test failure either&lt;br/&gt;
$ java -version&lt;br/&gt;
java version &quot;1.6.0_21&quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_21-b07)&lt;br/&gt;
Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode)&lt;/p&gt;

&lt;p&gt;If someone comes across this failure, please let me know. For now, I will assume maybe this was an intermittent test failure not related to my checkin&lt;/p&gt;</comment>
                            <comment id="12980020" author="knutanders" created="Tue, 11 Jan 2011 09:49:16 +0000"  >&lt;p&gt;Attaching a patch (droptable.diff) that makes basicSetup() use a helper method in BaseJDBCTestCase to drop the tables. The helper method reports the exception if the table cannot be dropped for some other reason than that the table doesn&apos;t exist.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 1057542.&lt;br/&gt;
Merged to 10.4 and committed revision 1057548.&lt;/p&gt;

&lt;p&gt;Let&apos;s see if we get more info now.&lt;/p&gt;</comment>
                            <comment id="12980823" author="knutanders" created="Wed, 12 Jan 2011 17:39:54 +0000"  >&lt;p&gt;&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1058108-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1058108-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like the table cannot be dropped because of a lock timeout.&lt;/p&gt;</comment>
                            <comment id="12980900" author="mamtas" created="Wed, 12 Jan 2011 20:12:35 +0000"  >&lt;p&gt;I looked at the failing test fixtures(memory/triggerTests get run twice in junit, the first round has never shown the intermittent failure. It is the 2nd time around, when different test fixtures from memory/triggerTests run into intermittent failure. The test that I added for this jira(in lang/TriggerTest.java), testAlerColumnLength, gets run in the middle of the 2 runs of memory/triggerTests.) The test fixtures in memory/triggerTests are committing before they exit so I am not certain what kind of locks might be still held.&lt;/p&gt;

&lt;p&gt;I am looking to see if my code changes for this jira would kick in for failing tests to possibly cause any locking issues. I do update SYSSTATEMENTS table and am not sure how that plays into effect.&lt;/p&gt;</comment>
                            <comment id="12980950" author="mamtas" created="Wed, 12 Jan 2011 21:42:08 +0000"  >&lt;p&gt;Spent some time looking at how my changes might impact the test and I couldn&apos;t find anything right away. The only time regeneration of sql for sps for trigger action plan will happen is if following is satisfied.&lt;/p&gt;

&lt;p&gt;		if((!actionSPS.isValid() ||&lt;br/&gt;
				 (actionSPS.getPreparedStatement() == null)) &amp;amp;&amp;amp; &lt;br/&gt;
				 isRow &amp;amp;&amp;amp;&lt;br/&gt;
				 (oldReferencingName != null || newReferencingName != null)) &lt;/p&gt;

&lt;p&gt;We check if trigger is invalid or has no prepared stmt associated with it, is a row trigger and it has either REFERECING CLAUSE referring to old or new. So this won&apos;t apply to the tests that are failing intermittently: Other than this, another related change in my checkin was in DataDictionaryImpl.updateSPS to include SYSSTATEMENTS_TEXT during sps update as shown below. But that shouldn&apos;t be a problem either because it will happen only during recompile to make sure that we copy the regenerated sql for trigger action plan in SYSSTATEMENTS.&lt;/p&gt;

&lt;p&gt;		if (recompile)&lt;br/&gt;
		{&lt;br/&gt;
			if(firstCompilation)&lt;br/&gt;
			{&lt;br/&gt;
				updCols = new int[] &lt;/p&gt;
{SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID,
						 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_TEXT,
									 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_LASTCOMPILED,
									 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_USINGTEXT,
									 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_CONSTANTSTATE,
									 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_INITIALLY_COMPILABLE}
&lt;p&gt;;&lt;br/&gt;
			}else&lt;br/&gt;
			{&lt;/p&gt;

&lt;p&gt;				updCols = new int[] &lt;/p&gt;
{SYSSTATEMENTSRowFactory.SYSSTATEMENTS_VALID,
						 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_TEXT,
										 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_LASTCOMPILED,
										 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_USINGTEXT,
										 SYSSTATEMENTSRowFactory.SYSSTATEMENTS_CONSTANTSTATE }
&lt;p&gt;;&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;/p&gt;</comment>
                            <comment id="12980954" author="mikem" created="Wed, 12 Jan 2011 21:44:59 +0000"  >&lt;p&gt;I looked at the test and the ouput.  It has the feel of a test/timing issue independant of mamta&apos;s change to me, but can&apos;t be sure until we can reproduce it.  My first guess is that there is some interaction going on with the background clean up thread and the test thread leading to the timeout.  The set of fixtures right before this error have some large blobs and multiple rows.  The delete tests then delete the rows and this is going to generate a lot of background cleanup work.  Then the first thing the next test does is drop the table with all that work, but each unit of work is going to run and then fail once the drop succeeds.  &lt;/p&gt;

&lt;p&gt;It definitely seems like a timing thing as in the following tinderbox failure, one fixture fails, but the next one which &lt;br/&gt;
does pretty much the same thing succeeds.:&lt;br/&gt;
&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1057487-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1057487-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most recent failure the last 2 fixures fail, and then no other fixtures are set to run.  &lt;/p&gt;

&lt;p&gt;Some info that might support this theory:&lt;br/&gt;
o  what kind of machine are the 10.4 and 10.3 tinderbox runs running on?  Are they single cpu - maybe slower than where the other tests are running.&lt;br/&gt;
o This test does not seem to set lock timeout, but is there a chance it is running with a less than default lock timeout.&lt;br/&gt;
    Thinking about it, it might be a simple project to add the current locktimeout setting to the error message - might help&lt;br/&gt;
    support with lock timeout issues.&lt;br/&gt;
o It might help to add the full lock table dump on the lock timeout for this test.&lt;/p&gt;</comment>
                            <comment id="12980968" author="knutanders" created="Wed, 12 Jan 2011 22:22:15 +0000"  >&lt;p&gt;&amp;gt;Some info that might support this theory:&lt;br/&gt;
&amp;gt;o what kind of machine are the 10.4 and 10.3 tinderbox runs running on? Are they single cpu - maybe slower than where the other tests are running. &lt;/p&gt;

&lt;p&gt;All tinderbox runs except trunk use this machine. It&apos;s a fairly old dual-cpu AMD Opteron. It&apos;s a lot slower than the machine that tests trunk (an 8-core machine), but it&apos;s the same as the 10.5 and 10.6 branches, which don&apos;t fail.&lt;/p&gt;

&lt;p&gt;&amp;gt; o This test does not seem to set lock timeout, but is there a chance it is running with a less than default lock timeout.&lt;br/&gt;
&amp;gt;     Thinking about it, it might be a simple project to add the current locktimeout setting to the error message - might help&lt;br/&gt;
&amp;gt;     support with lock timeout issues.&lt;/p&gt;

&lt;p&gt;From the log:&lt;/p&gt;

&lt;p&gt;test5UpdateAfterTriggerNoReferencingClause used 3103 ms F.&lt;br/&gt;
test5UpdateBeforeTriggerNoReferencingClause used 3009 ms F.&lt;/p&gt;

&lt;p&gt;3 seconds shouldn&apos;t be enough to cause a lock timeout unless the timeout has been altered.&lt;/p&gt;

&lt;p&gt;&amp;gt; o It might help to add the full lock table dump on the lock timeout for this test.&lt;/p&gt;

&lt;p&gt;I&apos;ve checked in a change to make it run with derby.locks.deadlockTrace=true (revision 1058340 on 10.4 branch).&lt;/p&gt;</comment>
                            <comment id="12981174" author="knutanders" created="Thu, 13 Jan 2011 08:27:30 +0000"  >&lt;p&gt;Stack traces with lock table dumps can be found here: &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1058341-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_10.4_16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1058341-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12981902" author="mamtas" created="Fri, 14 Jan 2011 19:52:37 +0000"  >&lt;p&gt;I need to point out a difference between the synchronization code between 10.3 through 10.6 codelines and 10,7 through main codelines. In 10.7 and trunk, I didn&apos;t synchronize the getter and setter for field &quot;text&quot; in SPSDescriptor. While hand migrating these changes to 10.6 codeline, I experiemented with synchronization in SPSDescriptor and checked in the changes into 10.6 through 10.3 with synchronization in it. I will go ahead and make the same changes to trunk and 10.7 codelines so all the codelines are at the same level for this jira. &lt;/p&gt;</comment>
                            <comment id="12982700" author="mamtas" created="Mon, 17 Jan 2011 16:44:29 +0000"  >&lt;p&gt;Attaching the release note&lt;/p&gt;</comment>
                            <comment id="12983272" author="mamtas" created="Tue, 18 Jan 2011 17:20:14 +0000"  >&lt;p&gt;Put in the synchronization code in trunk (revision 1060480) with following commit comment&lt;/p&gt;

&lt;p&gt;Putting the synchronization code in SPSDescriptor for getter and setter methods for the field &quot;text&quot; (this code is already in 10.6, 10.5, 10.4 and 10.3). Will put this code in 10.7 codeline next. This way, all the codelines from 10.3 through trunk will have the same synchronization code&lt;/p&gt;</comment>
                            <comment id="12990144" author="knutanders" created="Thu, 3 Feb 2011 15:57:36 +0000"  >&lt;p&gt;Has anyone looked more into the failures on 10.3 and 10.4 after the back-porting of this issue? Is the current hypothesis that the lock timeouts happen because the post-commit work in the background thread takes a long time while holding locks on the table that is about to be dropped?&lt;/p&gt;

&lt;p&gt;The three second lock timeout in this test may come from ResultSetMiscTest and SetTransactionIsolationTest, which reduce the lock timeout to three seconds. Before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4273&quot; title=&quot;A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4273&quot;&gt;&lt;del&gt;DERBY-4273&lt;/del&gt;&lt;/a&gt; they didn&apos;t restore the original lock timeout on completion, but now they do. &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4273&quot; title=&quot;A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4273&quot;&gt;&lt;del&gt;DERBY-4273&lt;/del&gt;&lt;/a&gt; is fixed on the 10.5 branch, which may explain why we only see this issue on 10.4 and 10.3. It doesn&apos;t explain why we haven&apos;t seen this issue before, though.&lt;/p&gt;</comment>
                            <comment id="12990460" author="mamtas" created="Fri, 4 Feb 2011 06:00:59 +0000"  >&lt;p&gt;Knut, I will work on backporting to 10.4 and 10.3 the subset of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4273&quot; title=&quot;A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4273&quot;&gt;&lt;del&gt;DERBY-4273&lt;/del&gt;&lt;/a&gt; which restores the original lock timeout on completion of ResultSetMiscTest and SetTransactionIsolationTest and see if that helps with the intermittent failure on those 2 codelines&lt;/p&gt;</comment>
                            <comment id="12990766" author="mamtas" created="Fri, 4 Feb 2011 22:02:03 +0000"  >&lt;p&gt;Backported to 10.4 the subset of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4273&quot; title=&quot;A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4273&quot;&gt;&lt;del&gt;DERBY-4273&lt;/del&gt;&lt;/a&gt; which restores the original lock timeout on completion of ResultSetMiscTest and SetTransactionIsolationTest and see if that helps with the intermittent failure on 10.4 codeline. Will next backport it to 10.3&lt;/p&gt;</comment>
                            <comment id="12991226" author="mamtas" created="Sun, 6 Feb 2011 22:02:15 +0000"  >&lt;p&gt;Finished backporting to 10.3 the subset of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4273&quot; title=&quot;A lock could not be obtained within the time requested error in testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4273&quot;&gt;&lt;del&gt;DERBY-4273&lt;/del&gt;&lt;/a&gt; which restores the original lock timeout on completion of ResultSetMiscTest and SetTransactionIsolationTest and see if that helps with the intermittent failure on 10.3 codeline.&lt;/p&gt;</comment>
                            <comment id="12991304" author="knutanders" created="Mon, 7 Feb 2011 08:29:53 +0000"  >&lt;p&gt;Thanks, Mamta. TriggerTests succeeded in the latest Tinderbox runs on 10.3 and 10.4. The failure was intermittent, so we cannot say for sure that it was fixed based on one run of the Tinderbox, but it looks promising.&lt;/p&gt;</comment>
                            <comment id="13208144" author="mamtas" created="Wed, 15 Feb 2012 00:01:49 +0000"  >&lt;p&gt;Will go ahead and close this issue since there is nothing outstanding at this point. &lt;/p&gt;</comment>
                            <comment id="13685145" author="knutanders" created="Mon, 17 Jun 2013 10:19:09 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                            <comment id="13792459" author="jira-bot" created="Fri, 11 Oct 2013 09:29:16 +0100"  >&lt;p&gt;Commit 1531226 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1531226&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1531226&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-534&quot; title=&quot;Support use of the WHEN clause in CREATE TRIGGER statements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-534&quot;&gt;&lt;del&gt;DERBY-534&lt;/del&gt;&lt;/a&gt;: Support use of the WHEN clause in CREATE TRIGGER statements&lt;/p&gt;

&lt;p&gt;Make the code in TriggerDescriptor.getActionSPS() reusable for&lt;br/&gt;
TriggerDescriptor.getWhenClauseSPS() so that the fixes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
and Cloudscape bug 4821 also get applied to the WHEN clause.&lt;/p&gt;</comment>
                            <comment id="13810589" author="jira-bot" created="Thu, 31 Oct 2013 19:29:19 +0000"  >&lt;p&gt;Commit 1537593 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mamtas&quot; class=&quot;user-hover&quot; rel=&quot;mamtas&quot;&gt;Mamta A. Satoor&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1537593&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1537593&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6383&quot; title=&quot;Update trigger defined on one column fires on update of other columns&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6383&quot;&gt;&lt;del&gt;DERBY-6383&lt;/del&gt;&lt;/a&gt;(Update trigger defined on one column fires on update of other columns). &lt;/p&gt;

&lt;p&gt;This regression is caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4874&quot; title=&quot;Trigger does not recognize new size of VARCHAR column  expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was encountered trying to shrink VARCHAR &quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4874&quot;&gt;&lt;del&gt;DERBY-4874&lt;/del&gt;&lt;/a&gt;(Trigger does not recognize new size of VARCHAR column expanded with ALTER TABLE. It fails with ERROR 22001: A truncation error was&lt;br/&gt;
encountered trying to shrink VARCHAR)&lt;/p&gt;

&lt;p&gt;The regression is for Statement level triggers. The statement trigger gets fired incorrectly for any column update rather than just the column specified in the UPDATE of column clause. The fix is going to ensure that SYSTRIGGERS has the correct list of columns on which trigger should be fired. Row level triggers work fine. The only workaround at this point is to drop and recreate the statement triggers.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12674782">DERBY-6383</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12466260" name="DERBY4874_106_backport_diff_ver4.txt" size="39052" author="mamtas" created="Tue, 14 Dec 2010 22:28:11 +0000"/>
                            <attachment id="12466261" name="DERBY4874_106_backport_stat_ver4.txt" size="558" author="mamtas" created="Tue, 14 Dec 2010 22:28:11 +0000"/>
                            <attachment id="12465626" name="DERBY4874_comments_and_test_missing_diff_ver3.txt" size="57115" author="mamtas" created="Mon, 6 Dec 2010 22:20:06 +0000"/>
                            <attachment id="12465627" name="DERBY4874_comments_and_test_missing_stat_ver3.txt" size="470" author="mamtas" created="Mon, 6 Dec 2010 22:20:06 +0000"/>
                            <attachment id="12459381" name="DERBY4874_not_ready_for_commit_diff.txt" size="15587" author="mamtas" created="Thu, 11 Nov 2010 20:52:27 +0000"/>
                            <attachment id="12459681" name="DERBY4874_not_ready_for_commit_diff_ver2.txt" size="17481" author="mamtas" created="Tue, 16 Nov 2010 05:37:32 +0000"/>
                            <attachment id="12459382" name="DERBY4874_not_ready_for_commit_stat.txt" size="314" author="mamtas" created="Thu, 11 Nov 2010 20:52:27 +0000"/>
                            <attachment id="12459682" name="DERBY4874_not_ready_for_commit_stat_ver2.txt" size="315" author="mamtas" created="Tue, 16 Nov 2010 05:37:32 +0000"/>
                            <attachment id="12467885" name="derby.log" size="9566" author="knutanders" created="Mon, 10 Jan 2011 12:07:52 +0000"/>
                            <attachment id="12467989" name="droptable.diff" size="927" author="knutanders" created="Tue, 11 Jan 2011 09:49:16 +0000"/>
                            <attachment id="12468571" name="releaseNote.html" size="3443" author="mamtas" created="Mon, 17 Jan 2011 16:44:29 +0000"/>
                            <attachment id="12458292" name="trigAlterColumn.sql" size="1029" author="kmarsden" created="Fri, 29 Oct 2010 00:55:59 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 29 Oct 2010 17:38:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24504</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0e47:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36105</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>