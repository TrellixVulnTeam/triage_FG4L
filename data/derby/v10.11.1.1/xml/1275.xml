<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:37 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1275/DERBY-1275.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1275] Provide a way to enable client tracing without changing the application</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1275</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently  the client tracing can be enabled by  setting attributes on the client url, setXXX methods on the DataSource or calling DriverManager.setLogWriter(), but it often cannot be enabled in a deployed client application  because all of these API&apos;s require modification of the application or its configuration files.&lt;/p&gt;

&lt;p&gt;It would be good to have a global way to turn on client tracing.  A system property pointing to a property file is  one possibility but probably not ideal because of the impact in class loader contexts.    I am not sure what the other possiblities are,&lt;/p&gt;




</description>
                <environment></environment>
        <key id="12332987">DERBY-1275</key>
            <summary>Provide a way to enable client tracing without changing the application</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Tue, 2 May 2006 12:27:34 +0100</created>
                <updated>Fri, 6 Jul 2007 16:55:18 +0100</updated>
                            <resolved>Tue, 6 Feb 2007 22:06:54 +0000</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.1.6</version>
                                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12417349" author="kmarsden" created="Fri, 23 Jun 2006 02:59:47 +0100"  >&lt;p&gt; I was wondering if anyone had any thoughts on how to implement this improvement to&lt;br/&gt;
provide a way to enable client tracing without changing the application&lt;/p&gt;

&lt;p&gt;Not being able to turn on tracing in a deployed application without application code changes is a serious supportability issue because unless the application has a mechanism to configure settings like traceDirectory and traceLevel,  the application itself my have to be rebuilt to enable client tracing. Even when such a mechanism is provided it takes someone with knowledge of the application to turn it on, again a supportability issue. &lt;/p&gt;

&lt;p&gt;All I can think of is supporting System properties like derby.client.traceLevel.  We also could  mimic our server side mechanism and have a System property derby.client.home that points to a directory where  a file derby.client.properties can live and the trace files can go by default.  The System property mechanism  raises a red flag for me because of class loader issues like we have for derby.system.home.  But maybe it is ok because of the diagnostic nature.&lt;/p&gt;

&lt;p&gt;I ask this question because I find myself in need to put this into a debug build to send to a user and figure I might as well head down the correct path toward an ultimate solution.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12417481" author="kmarsden" created="Fri, 23 Jun 2006 20:43:46 +0100"  >&lt;p&gt;Would there be any objections if for now I just added recognition of these  two system properties:&lt;/p&gt;

&lt;p&gt;derby.client.traceLevel - set global traceLevel &lt;br/&gt;
derby.client.traceDirectory - set global traceDirectory&lt;/p&gt;

&lt;p&gt;and checked that in without documenting, so they are a completely unstable interface.&lt;/p&gt;

&lt;p&gt;Then once a decision has been made about how to handle this sort of global setting in different classloader contexts and with autoloading we can do it the right way.&lt;/p&gt;

&lt;p&gt;It is just too hard to not be able to enable tracing  when diagnosing problems without  asking users to change their apps.&lt;/p&gt;
</comment>
                            <comment id="12417497" author="knutanders" created="Fri, 23 Jun 2006 22:35:26 +0100"  >&lt;p&gt;Hi Kathey, I think your approach sounds reasonable. It is definitely good to have some simple way (documented or undocumented) to enable client-side tracing. By not documenting it, we don&apos;t commit to support it in case we find a better way in the future. However, I think it&apos;s a good idea that we maintain a list of such undocumented features somewhere. Otherwise, I fear that they will be forgotten and just make the code less maintainable. What about creating a wiki page with undocumented properties/features (clearly labelled as unsupported, of course)?&lt;/p&gt;</comment>
                            <comment id="12423771" author="kmarsden" created="Thu, 27 Jul 2006 06:35:33 +0100"  >&lt;p&gt;Adding this as a high value fix candidate to the 10.2 list so that it might be picked up for 10.2.  The original crisis that prompted me to think I might do this ended so I didn&apos;t pursue it myself. There was a suggestion that JMX might resolve the issue but I think that would require  additional jar distribution and also I think  won&apos;t be available for 10.2, so it would be good to have some way to to enable tracing  at end user sites without asking the application writers to send out a new build.  As Knut suggested it can just be mentioned on a wiki page and not the official documentation so we don&apos;t have to stick with the quick fix moving forward.&lt;/p&gt;

</comment>
                            <comment id="12435875" author="rhillegas" created="Tue, 19 Sep 2006 16:24:11 +0100"  >&lt;p&gt;Moving to 10.2.2.0.&lt;/p&gt;</comment>
                            <comment id="12442076" author="mamtas" created="Fri, 13 Oct 2006 19:12:13 +0100"  >&lt;p&gt;There have been discussion on this jira entry for 2 possible solutions. &lt;br/&gt;
1)One is to implement the way the server does, ie using something equivalent to derby.home on the client side. &lt;br/&gt;
2)The other is to explore JMX. &lt;/p&gt;

&lt;p&gt;I don&apos;t have knowledge about JMX but seems like JMX could be used not just for the properties associated with this Jira entry but also for the properties in general supported by Derby. If that is the case, then may be it should be taken on as a feature by itself and for now implement this Jira entry in a fashion similar to what Derby server already does. Any thoughts on this, or other proposed solutions?&lt;/p&gt;</comment>
                            <comment id="12442077" author="mikem" created="Fri, 13 Oct 2006 19:22:28 +0100"  >&lt;p&gt;I think as a short fix you should just add the 2 system properties that kathey proposes.  This seems like a reasonable short term fix to allow debugging at a client site without having to have access to&lt;br/&gt;
their source code and needing to recompile their source to enable some debug tracing.  &lt;/p&gt;</comment>
                            <comment id="12456066" author="rhillegas" created="Wed, 6 Dec 2006 14:53:01 +0000"  >&lt;p&gt;Move to 10.2.3.0.&lt;/p&gt;</comment>
                            <comment id="12465845" author="mamtas" created="Thu, 18 Jan 2007 19:27:33 +0000"  >&lt;p&gt;I have attached a small review package(DERBY1275EnableClientTracingDiffV1.txt) for this Jira entry. I have taken Kathey&apos;s suggested way of approaching the issue which is to introduce 2 system properties, derby.client.traceLevel and derby.client.traceDirectory. These 2 properties will enable a customer to start client tracing without having to change the actual client application. The discussion on the Jira has talked about keeping these properties as unsupported and putting them on a wiki page rather than the official documentation. If we agree on that, then I can go ahead and put something on a wiki page. Do we already have a wiki page for unsupported Derby stuff? If yes, then I can go ahead and use that same wiki page. I will mention on that page that traceLevel and traceDirectory values specified through JVM system property will overwrite what is passed through the jdbc url.&lt;/p&gt;

&lt;p&gt;Now to go over the changes that went into the patch&lt;br/&gt;
1)Added an attribute for the client property prefix in Attribute.java This prefix and traceLevel or traceDirectory will define the 2 new system property names. Rather than introducing 2 new attributes with derby.client.traceLevel and derby.client.traceDirectory, I thought it will be better to just intorduce a prefix which can be used with the existing attributes for traceLevel and traceDirectory.&lt;br/&gt;
2)At this point, the system property derby.client.traceLevel will only accept int values. The existing documentation at&lt;br/&gt;
&lt;a href=&quot;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&lt;/a&gt; talks about symbolic values or the hex values but the new system property derby.client.traceLevel will not accept any of these 2 documented ways. Instead, the user will need to use the base 10 equivalent of the hext numbers. Specifying non-int value will result in following exception&lt;br/&gt;
ERROR XJ213: The traceLevel connection property does not have a valid format for a number.&lt;br/&gt;
This behavior is same as what happens inside ij. More info can be found at&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Specifying-the-traceLevel-property-through-ij-tf3021545.html#a8391955&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Specifying-the-traceLevel-property-through-ij-tf3021545.html#a8391955&lt;/a&gt; &lt;br/&gt;
3)The junit test framework requires that I put these 2 new properties in functionTests/util/derby_tests.policy so that properties can be read without running SecurityException.&lt;br/&gt;
4)I manually tested my changes but don&apos;t know how to add a test in the test suite so I can pass these new system properties. Would appreciate if anyone has some info on this.&lt;/p&gt;</comment>
                            <comment id="12465853" author="mamtas" created="Thu, 18 Jan 2007 19:58:32 +0000"  >&lt;p&gt;Forgot to add that I have fired the derby suite and they have been running with no errors so far. Will post another comment after the suite finishes.&lt;/p&gt;</comment>
                            <comment id="12465876" author="djd" created="Thu, 18 Jan 2007 21:22:00 +0000"  >&lt;p&gt;I think the fact you need to grant permission to read these new properties to all code indicates a bug. You should be able to grant permission just to derbyclient.jar, and the testing policy file already covers reading these properties.&lt;/p&gt;</comment>
                            <comment id="12465892" author="mamtas" created="Thu, 18 Jan 2007 22:26:36 +0000"  >&lt;p&gt;Dan, I haven&apos;t tried running junit tests with jar files. The junit tests probably won&apos;t run into SecurityException error for my changes because of already granted permission to derbyclient.jar in the testing policy file. &lt;/p&gt;

&lt;p&gt;I ran junit tests with plain classes and that is why I probably ran into SecurityException (since the permissions are granted to the jar file which is not being used when running with just classes) Does this interpretation sound right? Having said that, I wonder why (if there are any such tests) junit tests today don&apos;t run into SecurityException for exeisting properties when run with classes if those properties haven&apos;t been granted at all code level.&lt;/p&gt;</comment>
                            <comment id="12465898" author="mamtas" created="Thu, 18 Jan 2007 22:39:57 +0000"  >&lt;p&gt;Dan(on Derby developer list) pointed me to following link  about passing system properties to a junit test&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/KillDerbyTestHarness#head-7c93c8d40525f1a79304ac980a098edf08bf4105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/KillDerbyTestHarness#head-7c93c8d40525f1a79304ac980a098edf08bf4105&lt;/a&gt;&lt;br/&gt;
First FAQ in the list.&lt;/p&gt;</comment>
                            <comment id="12465905" author="djd" created="Thu, 18 Jan 2007 22:51:42 +0000"  >&lt;p&gt;The policy file already grants permission to any property when running using the classes folder.&lt;/p&gt;

&lt;p&gt;grant codeBase &quot;$&lt;/p&gt;
{derbyTesting.codeclasses}
&lt;p&gt;&quot; {&lt;br/&gt;
  // Access all properties using System.getProperties&lt;br/&gt;
  permission java.util.PropertyPermission &quot;*&quot;, &quot;read, write&quot;;&lt;/p&gt;

&lt;p&gt;So for this change the policy file should not need to be altered.&lt;/p&gt;</comment>
                            <comment id="12468034" author="mamtas" created="Sat, 27 Jan 2007 16:50:58 +0000"  >&lt;p&gt;I have attached an updated review package DERBY1275EnableClientTracingDiffV1.txt As mentioned with the earlier patch, I am adding 2 client-side system properties, derby.client.traceLevel and derby.client.traceDirectory. This 2 properties will allow a user to start client tracing without having to change the actual client application. &lt;/p&gt;

&lt;p&gt;Summary of the patch&lt;br/&gt;
1)Added an attribute for the client property prefix in Attribute.java This prefix and traceLevel or traceDirectory will define the 2 new system property names. Rather than introducing 2 new attributes with derby.client.traceLevel and derby.client.traceDirectory, I thought it will be better to just intorduce a prefix which can be used with the existing attributes for traceLevel and traceDirectory.&lt;/p&gt;

&lt;p&gt;2)At this point, the system property derby.client.traceLevel will only accept int values. The existing documentation at &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&lt;/a&gt; talks about symbolic values or the hex values but the new system property derby.client.traceLevel will not accept any of these 2 documented ways. Instead, the user will need to use the base 10 equivalent of the hex numbers. This behavior is same as what happens inside ij. More info can be found at &lt;a href=&quot;http://www.nabble.com/Specifying-the-traceLevel-property-through-ij-tf3021545.html#a8391955&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Specifying-the-traceLevel-property-through-ij-tf3021545.html#a8391955&lt;/a&gt; Specifying non-int value will result in following exception&lt;br/&gt;
ERROR XJ213: The traceLevel connection property does not have a valid format for a number.&lt;/p&gt;

&lt;p&gt;3)I added a new junit test, ClientSideSystemProperties under tests/derbynet directory. This class relies on the decorator SystemPropertyTestSetup to set up the trace related jvm properties(derby.client.traceLevel and derby.client.traceDirectory). This property setting code happens in the suite() method. Once these properties are set, the test establishes a database connection. At the time of the test tear down, in tearDown() method, the test needs to look in the trace directory specified by derby.client.traceDirectory to see if any new files were created. If yes, then that means that the jvm properties were correctly picked by the test and tracing happened correctly. The tearDown() method then deletes the trace files and deletes the traceDirectory so that the test environment is clean.&lt;/p&gt;

&lt;p&gt;Now, since this test runs under security manager, the directory access part needs to happen in a privileged block. I wanted to have ClientSideSystemProperties implement java.security.PrivilegedExceptionAction and include the public synchronized final Object run() throws IOException method in ClientSideSystemProperties to write the privilege code but I kept getting compile error. The compiler was getting confused with the run() method in java.security.PrivilegedExceptionAction and the run() method in junit.framework.TestCase.     &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; C:\p4clients\maintest3\opensource\java\testing\org\apache\derbyTesting\functionTests\tests\derbynet\ClientSideSystemProperties.java:57: run() in org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemProperties cannot override run() in junit.framework.TestCase; attempting to use incompatible return type&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; found   : java.lang.Object&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; required: junit.framework.TestResult&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     public synchronized final Object run() throws IOException {&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                          ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 1 error&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compile failed; see the compiler error output for details.&lt;br/&gt;
To work around this compile time error, I decided to create a new class, DirReadAndDeletePrivledgeBlock, which extends java.security.PrivilegedExceptionAction and this new class has the directory lookup, cleanup code. An object of this class is then used by the tearDown method in , as shown below ClientSideSystemProperties &lt;br/&gt;
    	java.security.AccessController.doPrivileged(new DirReadAndDeletePrivledgeBlock(traceDirectory));&lt;/p&gt;

&lt;p&gt;4)Changes in ClientBaseDataSource.java&lt;br/&gt;
I have changed getTraceDirectory method to first check for the jvm properties derby.client.traceDirectory. If not found, then look for traceDirectory in the jdbc url. Similar change has been made for method getTraceLevel. Since these 2 methods now require looking at system properties, part of their code needs to be inside a privileged block. But since the methods getTraceLevel and getTraceDirectory are &lt;br/&gt;
static, I can&apos;t pass an instance of their class to java.security.AccessController.doPrivileged call. To get around this, I introduced a &lt;br/&gt;
new class which just implements java.security.PrivilegedExceptionAction and it&apos;s run method does the job of looking at the system properties.&lt;br/&gt;
In addition, I took out some unused imports from ClientBaseDataSource.java&lt;/p&gt;

&lt;p&gt;5)Changes in LogWriter.java&lt;br/&gt;
I had to change the PrintWriter related code in this file to run inside a privileged block. The existing code for PrintWrite is in the static method getPrintWriter. For the reasons similar to #4 above (for ClientBaseDataSource.java), I had to create a new class to do the PrintWriter code and have the LogWriter.getPrintWriter use an instance of the new class in it&apos;s java.security.AccessController.doPrivileged call.&lt;/p&gt;

&lt;p&gt;May be there is a better way to accomplish #4 and #5 above w/o introducing the new classes. If anyone has any ideas, please let me know. I could have created a new instance of the current class even when inside the static method but the classes LogWriter and ClientBaseDataSource are pretty big. I thought it would be better to have smaller welldefined classes to do the privileged code rather than instantiating objects of large classes.&lt;/p&gt;

&lt;p&gt;Items to do&lt;br/&gt;
1)Since these 2 properties won&apos;t be documented in the official Derby ocumentation, I will add a wiki page for them so we don&apos;t loose track of these undocumented properties. I will mention on the page that system properties will override the same properties provided through JDBC url. I will also add that at this point, onlt int values can be specified for the system property derby.client.traceLevel.&lt;br/&gt;
The existing documentation at &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/adminguide/cadminappsclienttracing.html&lt;/a&gt; talks about symbolic values or the hex values but the new system property derby.client.traceLevel will not accept any of these 2 documented ways. Instead, the &lt;br/&gt;
user will need to use the base 10 equivalent of the hext numbers.&lt;br/&gt;
Disclaimer: A user can use these properties but since they are not in the official documentation, they can be changed at any point without providing any backward compatibility.&lt;/p&gt;

&lt;p&gt;svn stat -q is attached as DERBY1275EnableClientTracingStatV2.txt&lt;/p&gt;

&lt;p&gt;I have finished running the junit test suite and there were no new failures caused by this patch. The run of derbyall shows NSinSameJVM failure but from the actual diff, it doesn&apos;t look like it is related to my changes. &lt;/p&gt;

&lt;p&gt;Any feedback on the patch will be much appreciated.&lt;/p&gt;</comment>
                            <comment id="12468079" author="djd" created="Sat, 27 Jan 2007 23:37:16 +0000"  >&lt;p&gt;Some quick comments on the patch:&lt;br/&gt;
ClientSideSystemProperties JUnit test&lt;br/&gt;
The test breaks the pattern for JUnit tests in a few ways:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the suite method performs test setup. The suite method is for providing a set of fixtures to run. Setup should be performed in a test decorator for a set of fixtures or the setUp method for each fixture.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the actual testing, the asserts, is performed in the tearDown method, but is expected to be in the fixture methods, the ones that usually start with &apos;test&apos;. tearDown should be for cleanup after a fixture run.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JUnit guidelines have JUnit test classes ending with &apos;Test&apos;, Derby seems to follow this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I had some more comments that I lost on the privilege actions but I need to run now.&lt;/p&gt;</comment>
                            <comment id="12468323" author="djd" created="Mon, 29 Jan 2007 16:17:02 +0000"  >&lt;p&gt;privilege block comments:&lt;/p&gt;

&lt;p&gt;1) Use of classes for privilege blocks is ok but the typical use is anonymous classes, see BaseTestCase.getSystemProperty for an example.&lt;/p&gt;

&lt;p&gt;2) The exception handling for the privilege blocks is incorrect:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;System.getProperty() in SystemPropertyReadPrivledgeBlock cannot thrown IOException or any checked exception so only a PrivilegedAction is needed and no need to catch java.security.PrivilegedActionException.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The java.security.PrivilegedActionException only catches checked exceptions which are not RuntimeExceptions so this code is incorrect:&lt;br/&gt;
     +        } catch (java.security.PrivilegedActionException pae) {&lt;br/&gt;
+			throw (RuntimeException) pae.getException();&lt;br/&gt;
For example opening a file in a privilge block can thrown IOException which will be wrapped in PrivilegedActionException but a SecurityException will not.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The error handling for FilePrivilegeBlock is broken. The run() method can throw IOException but if it does the cast to RuntimeException will cause another exception. Previously the exception would be wrapped in a SqlException. Typically the run() methods of a privilege action should be simple, so in this case the run() method should not be catching IOException and wrapping it in a SqlException, instead the wrapping should happen outside the doPrivileged() call.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3) Any reason for the run() methods to be synchronized?&lt;/p&gt;
</comment>
                            <comment id="12468794" author="mamtas" created="Tue, 30 Jan 2007 21:51:16 +0000"  >&lt;p&gt;I have attached a new patch DERBY1275EnableClientTracingDiffV3.txt which is based on Dan&apos;s comments on the earlier patch.&lt;/p&gt;

&lt;p&gt;What&apos;s different(high level)  from the last patch (DERBY1275EnableClientTracingDiffV2.txt) &lt;/p&gt;

&lt;p&gt;Junit test&lt;br/&gt;
1)The suite method now uses a decorator to set the system properties.&lt;br/&gt;
2)The client tracing directory cleanup before the fixture testConnection is done is setUp and cleanup after the test is done in tearDown.&lt;br/&gt;
3)The assert is now done in the fixture, testConnection.&lt;br/&gt;
4)The junit class now ends with Test. The new name of the test is ClientSideSystemPropertiesTest.&lt;/p&gt;

&lt;p&gt;Code related to privilege block&lt;br/&gt;
1)I have replaced the new classes for privilege blocks with anonymous inline classes.&lt;br/&gt;
2)I hope that I have addressed the exception code related to PrivilegedActionException correctly.&lt;br/&gt;
3)I have removed the synchronized from run() methods. I have to admit that I had them originally because some existing junit test had them(I don&apos;t remember offhand what test I checked).&lt;/p&gt;

&lt;p&gt;I have run the junit suite and there was no new errors.&lt;/p&gt;</comment>
                            <comment id="12469255" author="mamtas" created="Wed, 31 Jan 2007 23:25:25 +0000"  >&lt;p&gt;I have added a page to Derby wiki for Derby&apos;s undocumented behavior. Goto page &lt;a href=&quot;http://wiki.apache.org/db-derby/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/&lt;/a&gt; and click on UndocumentedDerbyBehavior: under Derby Usage Information. It will take you to the page where the 2 new jvm properties are described with a pointer to the Jira entry. Please let me know if you have any feedback on the contents of the page and how the page is connected from the Derby wiki page.&lt;/p&gt;</comment>
                            <comment id="12469264" author="djd" created="Wed, 31 Jan 2007 23:51:05 +0000"  >&lt;p&gt;Patch looks cleaner - thanks. Some minor issue, could be addressed after commit:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;traceDirectory = &quot;.&quot; + File.separator + &quot;TraceDir&quot;	+ File.separator;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   I don&apos;t think use of &apos;.&apos; for the current directory is portable, I think you can simply use &quot;TraceDir&quot; here.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ClientSideSystemPropertiesTest&lt;br/&gt;
  private static String traceDirectory;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  Use of static fields in a JUnit test is not a good practice.&lt;br/&gt;
  Since the decorator will set the system property, you could just fetch the value of the system property when you need it.&lt;br/&gt;
  BaseTestCase has a utility method to do that.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the client code the two identical anonymous inner classes could be combined into one to reduce footprint by having&lt;br/&gt;
a private method in ClientBaseDataSource that gets the system property passed into it.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You added a method to TestConfiguration - systemPropertiesSetupDecorator.&lt;br/&gt;
   I guess I didn&apos;t understand what value this adds. The decorators that are returned from static methods&lt;br/&gt;
   in TestConfiguration are ones that modify the configuration, but where a decorator can be used directly&lt;br/&gt;
   it is left as, which I think maps to the typical use of decorators in Junit.&lt;br/&gt;
   I think maybe the TestConfiguration class has already come too intertwined with decorators and it might be better to have a Decorator class that just had static methods. This would at least gather them in a single class so that they could be easily discovered. I think a Decorator class would be a good place for the method you added.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12469333" author="mamtas" created="Thu, 1 Feb 2007 05:20:28 +0000"  >&lt;p&gt;Dan, I have &lt;br/&gt;
1)taken care of &quot;.&quot; from the trace directory for portability reasons, &lt;br/&gt;
2)removed the use of static field from the junit test and &lt;br/&gt;
3)created a new method to fetch the system property rather than duplicating the code in 2 places in ClientBaseDataSource. &lt;/p&gt;

&lt;p&gt;All these changes are in DERBY1275EnableClientTracingDiffV4.txt. svn stat -q output hasn&apos;t really changed since the last attachement but I have copied it again ( DERBY1275EnableClientTracingStatV4.txt) to have svn stat -q output for every patch revision.&lt;/p&gt;

&lt;p&gt;As for your last comment about decorators, I am not 100% clear yet on what you are proposing. I will spend some more time in trying to figure it out.&lt;/p&gt;

&lt;p&gt;I will fire the junit test suite to make sure the patch attached doesn&apos;t cause any regression.&lt;/p&gt;</comment>
                            <comment id="12469447" author="mamtas" created="Thu, 1 Feb 2007 14:57:25 +0000"  >&lt;p&gt;Dan, I think I understand the Decorator class comment. It seems that the purpose of TestConfiguration class is to have static methods which will do some setup related things and then return an instance of a decorator based on that (eg sqlAuthorizationDecorator() method sets up the sqlAuthorization property and then passes it on to the decorator DatabaseChangeSetup). But the static method I added simply returns an instance of the decorator using the parameters passed to the static method. And hence it doesn&apos;t fit the definition of the TestConfiguration class.&lt;/p&gt;

&lt;p&gt;I will add another class called say, TestDecorator. I will move my following method from TestConfiguration class to the new TestDecorator class. Is this what you were proposing?&lt;br/&gt;
public static Test systemPropertiesSetupDecorator(Test suite, Properties newProperties)&lt;/p&gt;
    {
        return new SystemPropertyTestSetup(suite, newProperties);    	
    }

</comment>
                            <comment id="12469453" author="djd" created="Thu, 1 Feb 2007 15:19:12 +0000"  >&lt;p&gt;That&apos;s the general idea, at least for existing decorators returned by TestConfiguration, but I&apos;m curious as to why you feel in this case the static method is useful or required.&lt;/p&gt;

&lt;p&gt;A class can be used as a decorator, just using &lt;/p&gt;

&lt;p&gt;    new SystemPropertyTestSetup(suite, newProperties)&lt;/p&gt;

&lt;p&gt;which is actually less to type than&lt;/p&gt;

&lt;p&gt;    TestDecorator.systemPropertiesSetupDecorator(suite,  newProperties)&lt;/p&gt;

&lt;p&gt;Then exposing the class as the decorator actually allows tests to customize it.&lt;br/&gt;
Typically a test may want to perform additional setup or teardown based upon an&lt;br/&gt;
existing decorator. Java allows this without having to define an additional class&lt;br/&gt;
explicitly.&lt;/p&gt;

&lt;p&gt;For example see CleanDatabaseTestSetup, which allows a test to use it in-line&lt;br/&gt;
and easily add DDL statements. This is from the javadoc for CleanDatabaseTestSetup.&lt;/p&gt;

&lt;p&gt;         return new CleanDatabaseTestSetup(suite) {&lt;br/&gt;
            protected void decorateSQL(Statement s) throws SQLException &lt;/p&gt;
{

                s.execute(&quot;CREATE TABLE T (I INT)&quot;);
                s.execute(&quot;CREATE INDEX TI ON T(I)&quot;)

            }
&lt;p&gt;        };&lt;/p&gt;

&lt;p&gt;If the CleanDatabaseTestSetup was exposed as a static method then this style of customization is no longer possible.&lt;br/&gt;
Exposing it as a class and a static method has the downside of multiple ways to perform the same task, which tends to make it harder for people to add tests, e.g. which way should I use?&lt;/p&gt;

</comment>
                            <comment id="12469528" author="mamtas" created="Thu, 1 Feb 2007 18:03:18 +0000"  >&lt;p&gt;I think I misunderstood your following comment on Jan 27th to the review package DERBY1275EnableClientTracingDiffV2.txt&lt;br/&gt;
&quot;The test breaks the pattern for JUnit tests in a few ways: the suite method performs test setup. The suite method is for providing a set of fixtures to run. Setup should be performed in a test decorator for a set of fixtures or the setUp method for each fixture. &quot;&lt;/p&gt;

&lt;p&gt;I took the above comment to mean that Junit pattern discourages following setup code in the suite() method&lt;br/&gt;
        Properties traceRelatedProperties = new Properties();&lt;br/&gt;
        traceRelatedProperties.setProperty(&quot;derby.client.traceLevel&quot;, &quot;64&quot;);&lt;br/&gt;
        traceDirectory = &quot;.&quot; + File.separator + &quot;TraceDir&quot;	+ File.separator;&lt;br/&gt;
        traceRelatedProperties.setProperty(&quot;derby.client.traceDirectory&quot;, traceDirectory);&lt;br/&gt;
        return new SystemPropertyTestSetup(suite, traceRelatedProperties);&lt;/p&gt;

&lt;p&gt;Now, I think your comment was really for following piece of code in the suite() method and not for the code related to SystemPropertyTestSetup fixture. &lt;br/&gt;
+        File dir = new File( traceDirectory );&lt;br/&gt;
+        dir.mkdirs();&lt;/p&gt;

&lt;p&gt;This is the only outstanding issue that I need to resolve on this Jira entry based on all different comments. I have already moved the directory setup code in the setUp() method in the .DERBY1275EnableClientTracingDiffV4.txt Next, I will remove systemPropertiesSetupDecorator from TestConfiguration and have my junit test directly use the fixture SystemPropertyTestSetup.&lt;/p&gt;
</comment>
                            <comment id="12469818" author="mamtas" created="Fri, 2 Feb 2007 18:00:22 +0000"  >&lt;p&gt;Have taken care of the last outstanding issue about the junit test. Now the suite() method directly accesses the SystemPropertyTestSetup to set the system properties. The review package is attached as DERBY1275EnableClientTracingDiffV5.txt. If there are no further comments, i will look into committing this patch early next week.&lt;/p&gt;</comment>
                            <comment id="12470754" author="mamtas" created="Tue, 6 Feb 2007 22:06:54 +0000"  >&lt;p&gt;Commiting patch DERBY1275EnableClientTracingDiffV5.txt as part of revision 504317. This patch adds 2 JVM properties to enable client side tracing. The properties are derby.client.traceLevel and derby.client.traceDirectory&lt;br/&gt;
More info can be found at &lt;a href=&quot;http://wiki.apache.org/db-derby/UndocumentedDerbyBehavior&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/UndocumentedDerbyBehavior&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12470985" author="knutanders" created="Wed, 7 Feb 2007 15:14:34 +0000"  >&lt;p&gt;The tinderbox test has failed since the patch was committed. Seems like derbyclient.jar needs permission to read the user.dir property. I guess we only see this failure when running the tests from the jar files, since the classes directory already has permission to read that property.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/504394-org.apache.derbyTesting.functionTests.suites.All_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.thresher.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/504394-org.apache.derbyTesting.functionTests.suites.All_diff.txt&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12471007" author="djd" created="Wed, 7 Feb 2007 15:53:37 +0000"  >&lt;p&gt;I think it would be good to figure out why this permission is needed now. If previously we were running tests under the security manager that set tracing via the JDBC attributes, then this new functionality should not require any additional permissions. Of course we may have not been testing tracing at all or maybe not under the security manager?&lt;/p&gt;</comment>
                            <comment id="12471030" author="mamtas" created="Wed, 7 Feb 2007 17:09:59 +0000"  >&lt;p&gt;Dan, to answer your question about some existing test to test the tracing through JDBC attribute, we do have one, jdbcapi/checkDriver but this test is not a junit test and does not run under the security manager and hence has not run into permission issues.  &lt;/p&gt;

&lt;p&gt;I will work on the policy changes that might be required for derbyclient.jar because currently it can only read properties starting with  derby.*&lt;br/&gt;
 permission java.util.PropertyPermission &quot;derby.*&quot;, &quot;read&quot;;&lt;/p&gt;</comment>
                            <comment id="12478610" author="scotsmatrix" created="Tue, 6 Mar 2007 22:29:37 +0000"  >&lt;p&gt;Can you help me understand what, if anything, needs to be documented in the Derby books about this issue?&lt;/p&gt;</comment>
                            <comment id="12478616" author="mamtas" created="Tue, 6 Mar 2007 22:47:01 +0000"  >&lt;p&gt;Laura, the current thought is to keep this as an undocumented addition to Derby. There is information on this addition at &lt;a href=&quot;http://wiki.apache.org/db-derby/UndocumentedDerbyBehavior&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/UndocumentedDerbyBehavior&lt;/a&gt; if a user wants to go ahead and use it until some another way of on the fly client tracing is enabled, ie w/o changing the application. &lt;/p&gt;

&lt;p&gt;If the community thinks it is ok to go ahead and make the properties introduced in my solution as an official solution then we can go ahead and add it to Derby&apos;s official docs.&lt;/p&gt;</comment>
                            <comment id="12500898" author="kmarsden" created="Sat, 2 Jun 2007 02:14:32 +0100"  >&lt;p&gt;Running the 10.2 tests against 10.3 ( &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2743&quot; title=&quot;Run 10.2 tests against 10.3 and evaluate to identify incompatibilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2743&quot;&gt;&lt;del&gt;DERBY-2743&lt;/del&gt;&lt;/a&gt;) there are quite a few failures  in network server tests because of &lt;br/&gt;
AccessControlException: Access denied java.util.Property derby.client.traceLevel read&lt;/p&gt;

&lt;p&gt;Especially since these are  undocumented properties, I think a security exception trying to read the property should not be fatal.  If noone objects, I will file a separate issue to make the permission optional.&lt;/p&gt;</comment>
                            <comment id="12510701" author="myrna" created="Fri, 6 Jul 2007 15:53:31 +0100"  >&lt;p&gt;Kathey, did you make the permissions optional or not? Should this bug be closed?&lt;/p&gt;</comment>
                            <comment id="12510714" author="kmarsden" created="Fri, 6 Jul 2007 16:55:18 +0100"  >&lt;p&gt;I linked the issue that made the permissions optional. It is fine for this issue to be closed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12370855">DERBY-2754</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12349202" name="DERBY1275EnableClientTracingDiffV1.txt" size="4181" author="mamtas" created="Thu, 18 Jan 2007 19:25:34 +0000"/>
                            <attachment id="12349733" name="DERBY1275EnableClientTracingDiffV2.txt" size="16366" author="mamtas" created="Sat, 27 Jan 2007 16:50:58 +0000"/>
                            <attachment id="12349958" name="DERBY1275EnableClientTracingDiffV3.txt" size="17310" author="mamtas" created="Tue, 30 Jan 2007 21:51:16 +0000"/>
                            <attachment id="12350107" name="DERBY1275EnableClientTracingDiffV4.txt" size="16736" author="mamtas" created="Thu, 1 Feb 2007 05:20:28 +0000"/>
                            <attachment id="12350233" name="DERBY1275EnableClientTracingDiffV5.txt" size="15199" author="mamtas" created="Fri, 2 Feb 2007 18:00:16 +0000"/>
                            <attachment id="12349203" name="DERBY1275EnableClientTracingStatV1.txt" size="295" author="mamtas" created="Thu, 18 Jan 2007 19:25:34 +0000"/>
                            <attachment id="12349734" name="DERBY1275EnableClientTracingStatV2.txt" size="466" author="mamtas" created="Sat, 27 Jan 2007 16:50:58 +0000"/>
                            <attachment id="12349959" name="DERBY1275EnableClientTracingStatV3.txt" size="544" author="mamtas" created="Tue, 30 Jan 2007 21:51:16 +0000"/>
                            <attachment id="12350108" name="DERBY1275EnableClientTracingStatV4.txt" size="544" author="mamtas" created="Thu, 1 Feb 2007 05:20:28 +0000"/>
                            <attachment id="12350234" name="DERBY1275EnableClientTracingStatV5.txt" size="470" author="mamtas" created="Fri, 2 Feb 2007 18:00:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Jun 2006 21:35:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29925</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy11hb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39890</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>