<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:51:17 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6488/DERBY-6488.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6488] Get rid of the EmbedSQLException class</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6488</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;EmbedSQLException used to be the top-level exception raised on error in the JDBC 3 version of the embedded driver. The primary purpose of the EmbedSQLException class is gone now that JDBC 4.0 is the minimum JDBC level, and all top-level exceptions are vanilla java.sql.SQLExceptions or one of its specialized subtypes.&lt;/p&gt;

&lt;p&gt;The top-level SQLException still links to an EmbedSQLException in order to provide some extra information (such as the message id) that the network server needs when encoding the exception for transport over the wire. I think it should be possible for the network server to get this information from the StandardException which is typically also in the exception chain.&lt;/p&gt;

&lt;p&gt;When embedded Derby raises an exception currently, it is typically a java.sql.SQLException (or subclass) that&apos;s linked to an EmbedSQLException that&apos;s linked to a StandardException. If we could find a way to eliminate the EmbedSQLException from the exception chain, the stack traces would be easier to read, and the structure of the exception chains would be more consistent with the client exceptions.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12696520">DERBY-6488</key>
            <summary>Get rid of the EmbedSQLException class</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                            <label>derby_backport_reject_10_10</label>
                    </labels>
                <created>Fri, 21 Feb 2014 13:06:04 +0000</created>
                <updated>Thu, 25 Sep 2014 21:57:00 +0100</updated>
                            <resolved>Tue, 4 Mar 2014 08:56:48 +0000</resolved>
                                    <version>10.11.1.1</version>
                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13908296" author="knutanders" created="Fri, 21 Feb 2014 13:30:02 +0000"  >&lt;p&gt;Some exceptions generated high up in the JDBC layer don&apos;t have a StandardException in their chain, so the network server doesn&apos;t have a way to get the message id of these exceptions currently if we eliminate EmbedSQLException from the chain. The code that generates those exceptions already depends on StandardException (for example, it uses methods such as StandardException.getSeverityFromIdentifier() when building the EmbedSQLException), so I don&apos;t think just replacing EmbedSQLException with StandardException in those exceptions would introduce any new intermodular dependencies.&lt;/p&gt;</comment>
                            <comment id="13911613" author="knutanders" created="Tue, 25 Feb 2014 14:35:13 +0000"  >&lt;p&gt;The attached patch (d6488-1a.diff) removes the EmbedSQLException class and the associated DerbySQLException interface. The network server now uses the message id and message arguments from the StandardException class instead of the EmbedSQLException class when encoding an error message for transport over DRDA.&lt;/p&gt;

&lt;p&gt;This change makes the typical SQLException stack trace slightly simpler. The simplest SQLExceptions produced by Derby used to be a chain of three exceptions:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;the top-level SQLException (possibly a specialized class, such as SQLSyntaxErrorException)&lt;/li&gt;
	&lt;li&gt;an EmbedSQLException&lt;/li&gt;
	&lt;li&gt;a StandardException&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;After the patch, the chain only contains 1 and 3.&lt;/p&gt;

&lt;p&gt;For example, the stack trace of a syntax error used to look like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Exception in thread &quot;main&quot; java.sql.SQLSyntaxErrorException: Table/View &apos;T&apos; does not exist.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:93)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:288)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:691)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:147)
	at Kladd.main(Kladd.java:20)
Caused by: java.sql.SQLException: Table/View &apos;T&apos; does not exist.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:141)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:73)
	... 8 more
Caused by: ERROR 42X05: Table/View &apos;T&apos; does not exist.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:265)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:260)
	at org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor(FromBaseTable.java:2687)
	at org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(FromBaseTable.java:2309)
	at org.apache.derby.impl.sql.compile.FromList.bindTables(FromList.java:343)
	at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(SelectNode.java:490)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(DMLStatementNode.java:190)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:127)
	at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:272)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the same error has a stack trace that looks like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Exception in thread &quot;main&quot; java.sql.SQLSyntaxErrorException: Table/View &apos;T&apos; does not exist.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:95)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:265)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:424)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:691)
	at org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:147)
	at Kladd.main(Kladd.java:20)
Caused by: ERROR 42X05: Table/View &apos;T&apos; does not exist.
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:288)
	at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:283)
	at org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor(FromBaseTable.java:2687)
	at org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(FromBaseTable.java:2309)
	at org.apache.derby.impl.sql.compile.FromList.bindTables(FromList.java:343)
	at org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(SelectNode.java:490)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(DMLStatementNode.java:190)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:127)
	at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:272)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)
	at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1116)
	at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)
	... 2 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;The changes made by the patch are as follows:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/engine/org/apache/derby/iapi/error/DerbySQLException.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Deleted.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/iapi/error/PublicAPI.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Produce an SQLException instead of an EmbedSQLException.&lt;/p&gt;

&lt;p&gt;Flag the exception as one created by PublicAPI, since the EmbedSQLException instances created here used to have some special handling in StandardException.unexpectedUserException().&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/iapi/error/StandardException.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Make unexpectedUserException() look for ferried arguments in StandardException instead of EmbedSQLException.&lt;/p&gt;

&lt;p&gt;Add methods that replace the &quot;simple wrapper&quot; functionality in the removed EmbedSQLException class, needed by PublicAPI.wrapStandardException().&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/jdbc/Util.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Remove an unneeded cast to EmbedSQLException in debug code (which definitely won&apos;t work now, and probably didn&apos;t work earlier either if the code had ever been exercised on Java 6 or later).&lt;/p&gt;

&lt;p&gt;Remove an unused method (which also had an unneeded and possibly broken cast to EmbedSQLException).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Get the arguments from the StandardException instead of EmbedSQLException.&lt;/p&gt;

&lt;p&gt;Produce a dummy StandardException (instead of EmbedSQLException) to hold the message arguments if one isn&apos;t already provided.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/drda/org/apache/derby/impl/drda/DRDAConnThread.java&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Fetch the message arguments from StandardException instead of EmbedSQLException.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/testing/org/apache/derbyTesting/functionTests/master/importExportIJ.out&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Update canon. After PublicAPI.wrapStandardException() started using the exception factory, a syntax error wrapped by that method comes out with a proper SQLSyntaxErrorException instead of a plain SQLException.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Update an assert. It checked that one of the exceptions in the chain (a StandardException) was not an EmbedSQLException. While this is still true, it makes little sense to check for a removed class. The assert now checks that the exception is a StandardException.&lt;/p&gt;


&lt;p&gt;All the regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13915713" author="dagw" created="Fri, 28 Feb 2014 12:10:38 +0000"  >&lt;p&gt;Looks like a good improvement to me&quot;. +1.&lt;br/&gt;
Would it make sense to rename the methods in Util? I.e. newEmbedSQLException now that there are no longer&lt;br/&gt;
such beasts?&lt;/p&gt;</comment>
                            <comment id="13918002" author="knutanders" created="Mon, 3 Mar 2014 12:11:37 +0000"  >&lt;p&gt;Thanks, Dag. I&apos;ll have a look and see if the methods in Util can be cleaned up too. Will address that in a separate patch.&lt;/p&gt;</comment>
                            <comment id="13918004" author="jira-bot" created="Mon, 3 Mar 2014 12:14:07 +0000"  >&lt;p&gt;Commit 1573534 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1573534&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1573534&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6488&quot; title=&quot;Get rid of the EmbedSQLException class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6488&quot;&gt;&lt;del&gt;DERBY-6488&lt;/del&gt;&lt;/a&gt;: Remove the EmbedSQLException class and the associated DerbySQLException interface.&lt;/p&gt;</comment>
                            <comment id="13918189" author="knutanders" created="Mon, 3 Mar 2014 16:00:23 +0000"  >&lt;p&gt;Except one call in EmbedResultSet, the Util.newEmbedSQLException() methods were only used by Util itself. The attached patch, d6488-2a.diff, makes EmbedResultSet use Util.generateCsSQLException() instead, makes Util use SQLExceptionFactory directly, and removes all of the newEmbedSQLException() methods.&lt;/p&gt;

&lt;p&gt;The patch also adds a Throwable parameter to the Util.seeNextException() method for the root cause. This was done primarily to allow Util.javaException() to reuse it. A side effect of this change is that the &quot;see next&quot; exceptions will now include the root cause when you call printStackTrace() on it, and you don&apos;t have to call getNextException() or consult derby.log in order to see what the real problem is.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Where printStackTrace() previously would give this information:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.sql.SQLException: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@500ab58d, see the next exception for details.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:137)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:287)
...
Caused by: ERROR XJ040: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@500ab58d, see the next exception for details.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:288)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will now give the root cause as well:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.sql.SQLException: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@500ab58d, see the next exception for details.
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)
        at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)
...
Caused by: ERROR XJ040: Failed to start database &apos;db&apos; with class loader sun.misc.Launcher$AppClassLoader@500ab58d, see the next exception for details.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:288)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)
        ... 20 more
Caused by: ERROR XCW00: Unsupported upgrade from &apos;10.10&apos; to &apos;10.11 beta&apos;.
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:288)
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:283)
        at org.apache.derby.iapi.services.monitor.Monitor.isFullUpgrade(Monitor.java:717)
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All regression tests ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="13919131" author="jira-bot" created="Tue, 4 Mar 2014 08:33:01 +0000"  >&lt;p&gt;Commit 1573934 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=knutanders&quot; class=&quot;user-hover&quot; rel=&quot;knutanders&quot;&gt;Knut Anders Hatlen&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1573934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1573934&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6488&quot; title=&quot;Get rid of the EmbedSQLException class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6488&quot;&gt;&lt;del&gt;DERBY-6488&lt;/del&gt;&lt;/a&gt;: Get rid of the EmbedSQLException class&lt;/p&gt;

&lt;p&gt;Remove the newEmbedSQLException methods, since they don&apos;t produce&lt;br/&gt;
EmbedSQLExceptions anymore, and use the SQLExceptionFactory methods&lt;br/&gt;
instead.&lt;/p&gt;

&lt;p&gt;Add a Throwable parameter to seeNextException() so that the root cause&lt;br/&gt;
will be shown when printStackTrace() is called on the top-level&lt;br/&gt;
exception.&lt;/p&gt;</comment>
                            <comment id="13919152" author="knutanders" created="Tue, 4 Mar 2014 08:56:24 +0000"  >&lt;p&gt;Should not be backported since the EmbedSQLException class is needed on platforms supported by 10.10 (JDBC 3.0 and JSR-169).&lt;/p&gt;</comment>
                            <comment id="13920019" author="dagw" created="Tue, 4 Mar 2014 21:05:21 +0000"  >&lt;p&gt;Thanks, Knut. Looks good to me. +1&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12353884">DERBY-1997</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12695942">DERBY-6484</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12630957" name="d6488-1a.diff" size="37333" author="knutanders" created="Tue, 25 Feb 2014 14:35:13 +0000"/>
                            <attachment id="12632283" name="d6488-2a.diff" size="9625" author="knutanders" created="Mon, 3 Mar 2014 16:00:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10363"><![CDATA[Embedded/Client difference]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Feb 2014 12:10:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>374996</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzmh33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>375295</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>