<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:15:36 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3033/DERBY-3033.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3033] select query results in nullpointer exception in skipScan()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3033</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The following error was repeatedly thrown when we tried to run a select query via JDBC. Strangely, the exact same select query did not trigger any error when run from the command line console. After we added an index, the error went away completely. &lt;/p&gt;

&lt;p&gt;java.lang.NullPointerException&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.NoPutResultSetImpl.skipScan(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.drda.DRDAStatement.execute(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Source)&lt;br/&gt;
 at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;/p&gt;</description>
                <environment>Windows XP, Java 5.0, JDBC, Derby 10.2.2.0</environment>
        <key id="12377120">DERBY-3033</key>
            <summary>select query results in nullpointer exception in skipScan()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="hqin">Haolan Qin</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Aug 2007 21:35:11 +0100</created>
                <updated>Fri, 21 Jan 2011 17:50:47 +0000</updated>
                            <resolved>Sat, 6 Oct 2007 03:58:14 +0100</resolved>
                                    <version>10.2.2.0</version>
                                    <fixVersion>10.3.2.1</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12523711" author="dagw" created="Wed, 29 Aug 2007 22:55:51 +0100"  >&lt;p&gt;Are you able to provide a program that reproduces the error?&lt;br/&gt;
If not, can you prove any details (table, query) so we can try to reproduce your issue?&lt;/p&gt;</comment>
                            <comment id="12523871" author="hqin" created="Thu, 30 Aug 2007 16:57:35 +0100"  >&lt;p&gt;1. copy the attached &quot;viewer&quot; folder to your derby folder&lt;br/&gt;
2. launch derby on port 9002&lt;br/&gt;
3. java -cp .;./derbyclient-10.2.2.0.jar SkipScan&lt;/p&gt;

&lt;p&gt;You will see the exception in the console.&lt;/p&gt;

&lt;p&gt;The exception will NOT be thrown if you modify the java file to hard-code those numbers (4 and 100) in the query or if you run the query from a sql console window. Also, if you add an index on dicom_send_requests.send_date and run the same program, the exception will not be thrown. &lt;/p&gt;

&lt;p&gt;If you turn on execution plan logging, you will see that the exception scenario has a different execution plan from all other scenarios.&lt;/p&gt;</comment>
                            <comment id="12523936" author="dagw" created="Thu, 30 Aug 2007 22:10:57 +0100"  >&lt;p&gt;Thank you, Haolan! I was able to reproduce the error with your repro!&lt;/p&gt;
</comment>
                            <comment id="12523951" author="dagw" created="Thu, 30 Aug 2007 23:16:34 +0100"  >&lt;p&gt;More data points:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;happens with embedded driver as well&lt;/li&gt;
	&lt;li&gt;happens when database is running in soft upgrade to 10.3&lt;/li&gt;
	&lt;li&gt;happens in 10.3 after hard upgrade&lt;/li&gt;
	&lt;li&gt;happens when using ij/embedded with prepared statement thus:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  ij&amp;gt; connect &apos;jdbc:derby:viewer;user=view;password=view&apos;;&lt;br/&gt;
  ij&amp;gt; set schema viewer;&lt;br/&gt;
  ij&amp;gt; prepare foo as &apos;select study_id, number_of_images from (select distinct st.study_id, &lt;br/&gt;
       st.number_of_images, dsr.priority, st.creation_datetime from dicom_send_requests dsr, &lt;br/&gt;
       studies st where dsr.send_date is null and   dsr.workstation_id = ? and   &lt;br/&gt;
       dsr.study_id = st.study_id and   not exists ( select 1 from dispatcher_locks where &lt;br/&gt;
       dispatcher_locks.study_id = st.study_id and   dispatcher_locks.workstation_id = ? and   &lt;br/&gt;
       dispatcher_locks.dispatcher_id = ? )) temp&apos;;&lt;br/&gt;
  ij&amp;gt; execute foo using &apos;values (4,4,100)&apos;;&lt;br/&gt;
  ERROR XJ001: Java exception: &apos;: java.lang.NullPointerException&apos;&lt;/p&gt;

&lt;p&gt;Without prepared statement (direct execution) there is no error. &lt;/p&gt;

&lt;p&gt;I will leave this one the the execution experts &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12523971" author="bryanpendleton" created="Fri, 31 Aug 2007 01:38:18 +0100"  >&lt;p&gt;Hi Dag, since you have it reproduced, can you re-post the stack trace with the actual line numbers, and maybe also post the line of source code where the NPE actually occurs? Thanks!&lt;/p&gt;</comment>
                            <comment id="12523978" author="dagw" created="Fri, 31 Aug 2007 02:45:23 +0100"  >&lt;p&gt;Sure, Bryan! &lt;/p&gt;

&lt;p&gt;As far as I can the offending line is &lt;br/&gt;
is NoPutResultSetImpl.java:392 at head of 10.3 branch,&lt;br/&gt;
(svn 571351):&lt;/p&gt;

&lt;p&gt;392:	if (startPosition.getColumn(position + 1).isNull())&lt;/p&gt;

&lt;p&gt;Uploading stack trace &quot;d3033-sane-ij-session-10.3.1.5.txt&quot; with &lt;br/&gt;
sysinfo and ij session showing the repro with trace w/line numbers.&lt;/p&gt;</comment>
                            <comment id="12523980" author="bryanpendleton" created="Fri, 31 Aug 2007 03:06:12 +0100"  >&lt;p&gt;Thanks Dag. This is an interesting line of code, and an interesting stack trace, particularly given the observation that when the original reporter added an index, the problem went away. I&apos;m wondering if this problem is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2916&quot; title=&quot;Change/error? in &amp;#39;Ordered null semantics&amp;#39; output from &amp;#39;SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()&amp;#39; in lang/wisconsin.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2916&quot;&gt;DERBY-2916&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2775&quot; title=&quot;DataTypeDescriptor should be immutable so that multiple ValueNode referring to the same DTD do not have unexpected state changes.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2775&quot;&gt;DERBY-2775&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Does the query in the bug involve an OUTER JOIN? or contain an IS &lt;span class=&quot;error&quot;&gt;&amp;#91;NOT&amp;#93;&lt;/span&gt; NULL condition? And is this condition related to the index that was added which causes the problem to go away?&lt;/p&gt;

&lt;p&gt;At the point where TableScanResultSet.openCore calls NoPutResultSetImpl.skipScan, there is the following comment:&lt;/p&gt;

&lt;p&gt;// Check whether there are any comparisons with unordered nulls&lt;br/&gt;
// on either the start or stop position.  If there are, we can&lt;br/&gt;
// (and must) skip the scan, because no rows can qualify&lt;/p&gt;

&lt;p&gt;It seems like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2775&quot; title=&quot;DataTypeDescriptor should be immutable so that multiple ValueNode referring to the same DTD do not have unexpected state changes.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2775&quot;&gt;DERBY-2775&lt;/a&gt; may have caused us to take some new paths through the code involving &quot;ordered null semantics&quot;, and the skipScan method is at the core of that code (see the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2916&quot; title=&quot;Change/error? in &amp;#39;Ordered null semantics&amp;#39; output from &amp;#39;SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()&amp;#39; in lang/wisconsin.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2916&quot;&gt;DERBY-2916&lt;/a&gt; comments for more discussion of this), so I have an intuition that this problem is related to those changes.&lt;/p&gt;

&lt;p&gt;For now, I&apos;ll link this issue to those issues, in the hope that my intuition is well-founded.&lt;/p&gt;</comment>
                            <comment id="12523982" author="dagw" created="Fri, 31 Aug 2007 03:26:48 +0100"  >&lt;p&gt;Yes, you are correct. The query contains this predicate&lt;br/&gt;
&quot;where dsr.send_date is null and ..&quot; and column &quot;send_date&quot; is&lt;br/&gt;
the column for which the index was added to make the problem go away.&lt;/p&gt;</comment>
                            <comment id="12524139" author="kmarsden" created="Fri, 31 Aug 2007 18:12:07 +0100"  >&lt;p&gt;I don&apos;t have a tool to open the rar file for this issue.  I was wondering if someone could repackage it as a zip or jar file. I&apos;d like to try it on 10.1 to see if it is a regression.&lt;/p&gt;</comment>
                            <comment id="12524536" author="dagw" created="Mon, 3 Sep 2007 16:09:55 +0100"  >&lt;p&gt;Repacked to test.zip. &lt;br/&gt;
I think this is a 10.2 database, so you may need to recreate the database&lt;br/&gt;
with dblook and export import to get a repro for 10.1, not sure.&lt;/p&gt;</comment>
                            <comment id="12524538" author="dagw" created="Mon, 3 Sep 2007 16:11:46 +0100"  >&lt;p&gt;Deleted first attchement. Reattaching without ASF license since original was without. &lt;/p&gt;</comment>
                            <comment id="12524730" author="kmarsden" created="Tue, 4 Sep 2007 14:56:40 +0100"  >&lt;p&gt;Looks like this is a regression in 10.2.   The results with 10.1.2.1 are&lt;br/&gt;
&amp;gt; java SkipScan&lt;br/&gt;
dfdfddd&lt;/p&gt;

&lt;p&gt;I will attach the 10.1 database which I migrated back using ddlutils&lt;/p&gt;</comment>
                            <comment id="12524731" author="kmarsden" created="Tue, 4 Sep 2007 14:58:20 +0100"  >&lt;p&gt;v 10.1 database.  Issue does not reproduce with 10.1.2.1&lt;/p&gt;</comment>
                            <comment id="12526338" author="kmarsden" created="Tue, 11 Sep 2007 04:40:11 +0100"  >&lt;p&gt;This regression occurred with revision 423754 from &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt;.  It could very well be that the optimizer changes made in that issue are fine but pushed this case into a different  plan which exposed the issue.&lt;/p&gt;
</comment>
                            <comment id="12526645" author="kmarsden" created="Wed, 12 Sep 2007 01:10:10 +0100"  >&lt;p&gt;A little more historical information on this issue.  &lt;br/&gt;
1) Army suggested I try backing all the way back to revision 81858 before &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; and apply the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt; to make sure there was not a problem in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; causing the issue.  I did that and found that the NPE still reproduced, so it looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-805&quot; title=&quot;Push join predicates into union and other set operations. DERBY-649 implemented scalar (single table) predicate pushdown. Adding join predicate push down could improve performance significantly.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-805&quot;&gt;&lt;del&gt;DERBY-805&lt;/del&gt;&lt;/a&gt; had no effect.&lt;/p&gt;

&lt;p&gt;2) I printed the plans before/after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt;.  query_plan.old is before 1357 (without the NPE). query_plan.new is after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt; with the NPE.&lt;/p&gt;

</comment>
                            <comment id="12526825" author="kmarsden" created="Wed, 12 Sep 2007 16:44:17 +0100"  >&lt;p&gt;I was wondering in the skipScan code, should the column values of startPosition ever be null?  In this case column&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; is null, but I was wondering if that is ever expected.&lt;/p&gt;

&lt;p&gt;startPosition	IndexRow  (id=136)	&lt;br/&gt;
	column	DataValueDescriptor&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  (id=149)	&lt;br/&gt;
		&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;	null	&lt;br/&gt;
	ncols	1	&lt;br/&gt;
	orderedNulls	boolean&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;  (id=150)	&lt;br/&gt;
		&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;	false	&lt;/p&gt;

&lt;p&gt;Just to try to understand the impact I tried this small change, which interestingly caused the test case and suiltes.All to pass, but I don&apos;t really understand what it means for the column value to be null.&lt;br/&gt;
I am guessing this is not the correct solution but rather there is some sort of problem in generating the column value for startPosition.  Just want to check though in case  there is a circumstance where the column value should be null and this change is ok.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java       (revision 574932)&lt;br/&gt;
+++ java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java       (working copy)&lt;br/&gt;
@@ -388,7 +388,8 @@&lt;br/&gt;
                        {&lt;br/&gt;
                                if (startKeyLonger)&lt;br/&gt;
                                        checkNullCols&lt;span class=&quot;error&quot;&gt;&amp;#91;cncLen++&amp;#93;&lt;/span&gt; = position + 1;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (startPosition.getColumn(position + 1).isNull())&lt;br/&gt;
+                DataValueDescriptor d = startPosition.getColumn(position +1);&lt;br/&gt;
+                               if (d == null || d.isNull())&lt;br/&gt;
                                {&lt;br/&gt;
                                        returnValue =  true;&lt;br/&gt;
                                        if (! startKeyLonger)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Thanks for the help. I am certainly out of my element with this code, so appreciate any help or pointers  anyone can offer.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12526843" author="army" created="Wed, 12 Sep 2007 17:32:50 +0100"  >&lt;p&gt;Hi Kathey,&lt;/p&gt;

&lt;p&gt;My guess (and it&apos;s just a guess) is that, while startPosition itself may be null, it probably is not correct for a non-null startPosition to have startPosition&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; be null for any i.&lt;/p&gt;

&lt;p&gt;For what it&apos;s worth: startPosition in the above code comes from TableScanResultSet.startPosition, which is in turn loaded form TableScanResultSet.startKeyGetter.  The startKeyGetter is, I believe, generated from PredicateList.generateStartKey().  So if you are able to trace through that method to see which predicate is causing the &quot;null&quot; to be generated, that might be a good starting point.  Perhaps the short-circuit logic added for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt; is somehow leaving one or more predicates in a state that causes incorrect generation of a null (instead of a DataValueDescriptor that is &quot;isNull()&quot;)?  Again, I&apos;m just guessing--maybe that&apos;s helpful, maybe not...&lt;/p&gt;</comment>
                            <comment id="12527266" author="kmarsden" created="Thu, 13 Sep 2007 22:17:08 +0100"  >&lt;p&gt;In BaseActivation I see&lt;/p&gt;

&lt;p&gt;protected final DataValueDescriptor getColumnFromRow(int rsNumber, int colId)&lt;br/&gt;
		throws StandardException {&lt;/p&gt;

&lt;p&gt;        if( row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; == null)&lt;/p&gt;
        {
            /* This actually happens. NoPutResultSetImpl.clearOrderableCache attempts to prefetch invariant values
             * into a cache. This fails in some deeply nested joins. See Beetle 4736 and 4880.
             */
            return null;
        }
&lt;p&gt;		return row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt;.getColumn(colId);&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;I am not sure why prefetching invariant values would cause them to be null, but looks like a good lead.&lt;/p&gt;

</comment>
                            <comment id="12527603" author="kmarsden" created="Fri, 14 Sep 2007 19:49:27 +0100"  >&lt;p&gt;FYI: Here is the case from bug 4736 that was giving an  NPE in getColumnFromRow before the fix to check for a null row was added.  I tend to think that fix was wrong, that there is some root cause for the null row which needs to be addressed instead, and hopefully that is the same root cause for the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3033&quot; title=&quot;select query results in nullpointer exception in skipScan()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3033&quot;&gt;&lt;del&gt;DERBY-3033&lt;/del&gt;&lt;/a&gt; test case.  I am off of playing with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3033&quot; title=&quot;select query results in nullpointer exception in skipScan()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3033&quot;&gt;&lt;del&gt;DERBY-3033&lt;/del&gt;&lt;/a&gt; for a while.  Hope someone else can pick this up given what Haolan, Army and I have found so far.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;


&lt;p&gt;create table a (a1 int not null primary key, a2 int, a3 int, a4 &lt;br/&gt;
int, a5 int, a6 int);&lt;br/&gt;
create table b (b1 int not null primary key, b2 int, b3 int, b4 &lt;br/&gt;
int, b5 int, b6 int);&lt;br/&gt;
create table c (c1 int not null, c2 int, c3 int not null, c4 &lt;br/&gt;
int, c5 int, c6 int);&lt;br/&gt;
create table d (d1 int not null, d2 int, d3 int not null, d4 &lt;br/&gt;
int, d5 int, d6 int);&lt;/p&gt;

&lt;p&gt;alter table c add primary key (c1,c3);&lt;br/&gt;
alter table d add primary key (d1,d3);&lt;/p&gt;

&lt;p&gt;insert into a values &lt;br/&gt;
(1,1,3,6,NULL,2),(2,3,2,4,2,2),(3,4,2,NULL,NULL,NULL),&lt;/p&gt;

&lt;p&gt;(4,NULL,4,2,5,2),(5,2,3,5,7,4),(7,1,4,2,3,4),&lt;br/&gt;
                     (8,8,8,8,8,8),(6,7,3,2,3,4);&lt;/p&gt;

&lt;p&gt;insert into b values &lt;br/&gt;
(6,7,2,3,NULL,1),(4,5,9,6,3,2),(1,4,2,NULL,NULL,NULL),&lt;/p&gt;

&lt;p&gt;(5,NULL,2,2,5,2),(3,2,3,3,1,4),(7,3,3,3,3,3),(9,3,3,3,3,3);&lt;/p&gt;

&lt;p&gt;insert into c values &lt;br/&gt;
(3,7,7,3,NULL,1),(8,3,9,1,3,2),(1,4,1,NULL,NULL,NULL),&lt;/p&gt;

&lt;p&gt;(3,NULL,1,2,4,2),(2,2,5,3,2,4),(1,7,2,3,1,1),(3,8,4,2,4,6);&lt;/p&gt;

&lt;p&gt;insert into d values &lt;br/&gt;
(1,7,2,3,NULL,3),(2,3,9,1,1,2),(2,2,2,NULL,3,2),&lt;/p&gt;

&lt;p&gt;(1,NULL,3,2,2,1),(2,2,5,3,2,3),(2,5,6,3,7,2);&lt;/p&gt;



&lt;p&gt;select a1,b1,c1,c3,d1,d3 &lt;br/&gt;
  from D join (A left outer join (B join C on b2=c2) on a1=b1) &lt;br/&gt;
on d3=b3 and d1=a2;&lt;/p&gt;

&lt;p&gt;A1             |B1             |C1             |C3             &lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;D1             &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;D3             &lt;br/&gt;
----------------------------------------------------------------&lt;br/&gt;
-------------------------------&lt;br/&gt;
1              &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1              &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4              &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1              &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2              &lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was &lt;br/&gt;
thrown while evaluating an expression.&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was &lt;br/&gt;
thrown while evaluating an expression.&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.protocol.Database.Errors.StandardException.newExcep&lt;br/&gt;
tion(StandardException.java:386)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.protocol.Database.Errors.StandardException.unexpect&lt;br/&gt;
edUserException(StandardException.java:567)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.BasicServices.ClassManager.Reflect.DirectCall.&lt;br/&gt;
invoke(ReflectGeneratedClass.java:118)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.GenericQua&lt;br/&gt;
lifier.getOrderable(GenericQualifier.java:87)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.HashScanRe&lt;br/&gt;
sultSet.getNextRowCore(HashScanResultSet.java:477)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.NestedLoop&lt;br/&gt;
JoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.ProjectRes&lt;br/&gt;
trictResultSet.getNextRowCore(ProjectRestrictResultSet.java:249)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt; at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.BasicNoPut&lt;br/&gt;
ResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:479)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Connectivity.JDBC.Local.LocalResultSet.movePos&lt;br/&gt;
ition(LocalResultSet.java:297)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Connectivity.JDBC.Local.LocalResultSet.next(Lo&lt;br/&gt;
calResultSet.java:251)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.indent_DisplayResults(JDBCDisp&lt;br/&gt;
layUtil.java:335)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.indent_DisplayResults(JDBCDisp&lt;br/&gt;
layUtil.java:272)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil&lt;br/&gt;
.java:261)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.tools.ijImpl.utilMain.displayResult(utilMain.java:3&lt;br/&gt;
66)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.tools.ijImpl.utilMain.doCatch(utilMain.java:419)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.utilMain.go(utilMain.java:295)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.Main.go(Main.java:196)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.Main.mainCore(Main.java:163)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl40.Main.main(Main.java:49)&lt;br/&gt;
 at com.ibm.db2j.tools.ij.main(ij.java:57)&lt;br/&gt;
ERROR XJ001: Java exception: &apos;: &lt;br/&gt;
java.lang.NullPointerException&apos;.&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.BaseActiva&lt;br/&gt;
tion.getColumnFromRow(BaseActivation.java:1234)&lt;br/&gt;
 at &lt;br/&gt;
db2j.exe.ac601a400fx00f0xe017x7cc0x007f0000010012c.e8(Unknown &lt;br/&gt;
Source)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.BasicServices.ClassManager.Reflect.DirectCall.&lt;br/&gt;
invoke(ReflectGeneratedClass.java:109)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.GenericQua&lt;br/&gt;
lifier.getOrderable(GenericQualifier.java:87)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.HashScanRe&lt;br/&gt;
sultSet.getNextRowCore(HashScanResultSet.java:477)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.NestedLoop&lt;br/&gt;
JoinResultSet.getNextRowCore(NestedLoopJoinResultSet.java:116)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.ProjectRes&lt;br/&gt;
trictResultSet.getNextRowCore(ProjectRestrictResultSet.java:249)&lt;/p&gt;

&lt;p&gt; at &lt;br/&gt;
com.ibm.db2j.impl.Database.Language.Execution.Generic.BasicNoPut&lt;br/&gt;
ResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:479)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Connectivity.JDBC.Local.LocalResultSet.movePos&lt;br/&gt;
ition(LocalResultSet.java:297)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.impl.Connectivity.JDBC.Local.LocalResultSet.next(Lo&lt;br/&gt;
calResultSet.java:251)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.indent_DisplayResults(JDBCDisp&lt;br/&gt;
layUtil.java:335)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.indent_DisplayResults(JDBCDisp&lt;br/&gt;
layUtil.java:272)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.util.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil&lt;br/&gt;
.java:261)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.tools.ijImpl.utilMain.displayResult(utilMain.java:3&lt;br/&gt;
66)&lt;br/&gt;
 at &lt;br/&gt;
com.ibm.db2j.tools.ijImpl.utilMain.doCatch(utilMain.java:419)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.utilMain.go(utilMain.java:295)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.Main.go(Main.java:196)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl.Main.mainCore(Main.java:163)&lt;br/&gt;
 at com.ibm.db2j.tools.ijImpl40.Main.main(Main.java:49)&lt;br/&gt;
 at com.ibm.db2j.tools.ij.main(ij.java:57)&lt;br/&gt;
ij&amp;gt; &lt;/p&gt;</comment>
                            <comment id="12527659" author="bryanpendleton" created="Sat, 15 Sep 2007 00:29:27 +0100"  >&lt;p&gt;Hi Kathey, thanks for the info about bug 4736.&lt;/p&gt;

&lt;p&gt;I took your pasted code and added 4 drop table statements to the front of it so I could run it repeatedly; it&apos;s attached as bug4736.sql.&lt;/p&gt;

&lt;p&gt;I ran that code repeatedly with my debugger set with a breakpoint in BaseActivation.getColumnFromRow() with a breakpoint set when&lt;br/&gt;
row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; was null (i.e., inside the &quot;if&quot; that you noted).&lt;/p&gt;

&lt;p&gt;Unfortunately, I never hit the breakpoint.&lt;/p&gt;

&lt;p&gt;I also tried removing that &quot;if&quot; statement from getColumnFromRow(), to see&lt;br/&gt;
if the bug4736.sql would then provoke a NullPointerException, and that&lt;br/&gt;
didn&apos;t happen either.&lt;/p&gt;

&lt;p&gt;So, whatever was going on with that &quot;if&quot; test, the bug4736.sql script no longer drives the conditions which cause row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; to be null.&lt;/p&gt;

&lt;p&gt;I think you&apos;ve got a good theory, though, and I&apos;ll continue to play with it, to try to understand that &quot;if&quot; statement in getColumnFromRow() better.&lt;/p&gt;</comment>
                            <comment id="12528179" author="bryanpendleton" created="Mon, 17 Sep 2007 23:41:19 +0100"  >&lt;p&gt;I removed the mysterious &quot;if&quot; statement from BaseActivation.getColumnFromRow(), and ran&lt;br/&gt;
all the regression tests. There were two failures, but I&apos;m not sure if they were due to this&lt;br/&gt;
change or not. I&apos;ll investigate them further. I did &lt;b&gt;not&lt;/b&gt; get any NullPointerException messages,&lt;br/&gt;
which is what I was sort of expecting to see.&lt;/p&gt;

&lt;p&gt;So if removing the &quot;if&quot; statement from BaseActivation.java fixes this problem, it apparently&lt;br/&gt;
isn&apos;t going to cause a whole lot of other problems.&lt;/p&gt;

&lt;p&gt;I think the next step is to investigate whether removing the &quot;if&quot; statement makes the repro script&lt;br/&gt;
pass. &lt;/p&gt;</comment>
                            <comment id="12528197" author="bryanpendleton" created="Tue, 18 Sep 2007 01:28:21 +0100"  >&lt;p&gt;I played around with the skipScan repro case and confirmed Kathey&apos;s suspicion about&lt;br/&gt;
BaseActivation.getColumnFromRow, as follows:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;with the current trunk, the repro case gives me the expected NPE in skipScan.&lt;/li&gt;
	&lt;li&gt;with the &quot;if&quot; statement removed from BaseActivation.getColumnFromRow, the&lt;br/&gt;
   repro case gives me a NPE which matches the NPE that Kathey posted from the&lt;br/&gt;
   old bug 4736. So this reproduction case definitely takes the code through a&lt;br/&gt;
  similar code path as that of bug 4736.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here&apos;s the stack trace I get with the current trunk with the &quot;if&quot; removed from getColumnFromRow:&lt;/p&gt;

&lt;p&gt;2007-09-18 00:18:51.793 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,main&amp;#93;&lt;/span&gt; (XID = 352997), (SESSIONID = 0), (DATABASE = viewer), (DRDAID = NF000001.B54B-810083792898537651&lt;/p&gt;
{1}
&lt;p&gt;), Failed Statement is: select study_id, number_of_images from (select distinct                  st.study_id,                    st.number_of_images,                    dsr.priority,                   st.creation_datetime       from dicom_send_requests dsr, studies st       where dsr.send_date is null       and   dsr.workstation_id = ?       and   dsr.study_id = st.study_id       and   not exists (               select 1               from dispatcher_locks               where dispatcher_locks.study_id = st.study_id               and   dispatcher_locks.workstation_id = ?               and   dispatcher_locks.dispatcher_id = ?               ) ) temp with 3 parameters begin parameter #1: 4 :end parameter begin parameter #2: 4 :end parameter begin parameter #3: 100 :end parameter&lt;br/&gt;
ERROR 38000: The exception &apos;java.lang.NullPointerException&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(StandardException.java:294)&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.unexpectedUserException(StandardException.java:554)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:164)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(TableScanResultSet.java:258)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore(IndexRowToBaseRowResultSet.java:225)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(JoinResultSet.java:272)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(JoinResultSet.java:151)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:248)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:248)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1225)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1649)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1304)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:666)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:824)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:275)&lt;br/&gt;
Caused by: java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BaseActivation.getColumnFromRow(BaseActivation.java:1317)&lt;br/&gt;
        at org.apache.derby.exe.ac601a400fx0115x15fbx3163xffff9ef86e6e1.e7(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:153)&lt;br/&gt;
        ... 16 more&lt;br/&gt;
============= begin nested exception, level (1) ===========&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BaseActivation.getColumnFromRow(BaseActivation.java:1317)&lt;br/&gt;
        at org.apache.derby.exe.ac601a400fx0115x15fbx3163xffff9ef86e6e1.e7(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:153)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.TableScanResultSet.openCore(TableScanResultSet.java:258)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore(IndexRowToBaseRowResultSet.java:225)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.JoinResultSet.openRight(JoinResultSet.java:272)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.JoinResultSet.openCore(JoinResultSet.java:151)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.SortResultSet.openCore(SortResultSet.java:248)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:168)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:248)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:370)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1225)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1649)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1304)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAStatement.execute(DRDAStatement.java:666)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(DRDAConnThread.java:824)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:275)&lt;/p&gt;</comment>
                            <comment id="12528416" author="army" created="Tue, 18 Sep 2007 16:31:05 +0100"  >&lt;p&gt;&amp;gt; I played around with the skipScan repro case and confirmed Kathey&apos;s suspicion&lt;br/&gt;
&amp;gt; about BaseActivation.getColumnFromRow&lt;/p&gt;

&lt;p&gt;Thank you for your continued investigation of this issue, Bryan.  It&apos;s great to have an idea of the codepath in question here.  Have you had the time/inclination to look into the cause of the null value in row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt;?  I realize that&apos;s easy to say and quite hard to do, but I was just wondering if you&apos;ve looked at it, or if you have the time and plans to do so?&lt;/p&gt;

&lt;p&gt;In particular, I&apos;m referring to the code comment that Kathey mentioned:&lt;/p&gt;

&lt;p&gt;  &quot;NoPutResultSetImpl.clearOrderableCache attempts to prefetch invariant values&lt;br/&gt;
   into a cache. This fails in some deeply nested joins.&quot;&lt;/p&gt;

&lt;p&gt;I think the core question here is &lt;b&gt;why&lt;/b&gt; does &quot;this fail in some deeply nested joins&quot;?  That sounds awfully suspicious.  It seems that either a) the &quot;failure&quot; is acceptable and the comments need to be updated, in which case Kathey&apos;s &quot;quick fix&quot; of checking for the null value would be appropriate; or b) the &quot;failure&quot; is a bug and in order to solve this issue, that failure should (ideally) be fixed...&lt;/p&gt;

&lt;p&gt;Would you agree?&lt;/p&gt;</comment>
                            <comment id="12528498" author="bryanpendleton" created="Tue, 18 Sep 2007 19:33:43 +0100"  >&lt;p&gt;Hi Army, thanks for the feedback! I marked the issue as assigned to me, because I&apos;m trying to understand it, but progress is slow.&lt;/p&gt;

&lt;p&gt;I believe that the null value in row&lt;span class=&quot;error&quot;&gt;&amp;#91;rsNumber&amp;#93;&lt;/span&gt; is coming from a request to fetch column 1 of result set 5. Here&apos;s the original query for context:&lt;/p&gt;

&lt;p&gt;    select study_id, number_of_images from (select distinct st.study_id,&lt;br/&gt;
       st.number_of_images, dsr.priority, st.creation_datetime from dicom_send_requests dsr,&lt;br/&gt;
       studies st where dsr.send_date is null and dsr.workstation_id = ? and&lt;br/&gt;
       dsr.study_id = st.study_id and not exists ( select 1 from dispatcher_locks where&lt;br/&gt;
       dispatcher_locks.study_id = st.study_id and dispatcher_locks.workstation_id = ? and&lt;br/&gt;
       dispatcher_locks.dispatcher_id = ? )) temp&lt;/p&gt;

&lt;p&gt;Result set 5, I believe, is the &quot;select 1 from dispatcher_locks&quot; nested query, and column 1&lt;br/&gt;
of that result set is dispatcher_locks.study_id.&lt;/p&gt;

&lt;p&gt;The null value occurs at the very beginning of the first time that we are opening a TableScanResultSet. &lt;br/&gt;
We are setting up a NestedLoopJoinResultSet, and the right side of that join is a index-to-base probe,&lt;br/&gt;
and so we are trying to set the start position for a particular &quot;probe&quot; into the index for a particular &lt;br/&gt;
study_id value. sameStartStopPosition is true, as the join  on study_id is a simple equality join.&lt;/p&gt;

&lt;p&gt;The code in question, near the top of TableScanResultSet.openCore(), is:&lt;/p&gt;

&lt;p&gt;		if (startKeyGetter != null)&lt;br/&gt;
		{&lt;br/&gt;
			startPosition = (ExecIndexRow) startKeyGetter.invoke(activation);&lt;br/&gt;
			if (sameStartStopPosition)&lt;/p&gt;
			{
				stopPosition = startPosition;
			}
&lt;p&gt;		}&lt;br/&gt;
		if (stopKeyGetter != null)&lt;/p&gt;
		{
			stopPosition = (ExecIndexRow) stopKeyGetter.invoke(activation);
		}

&lt;p&gt;The TableScanResultSet instance that we are processing is for an index-to-base probe of&lt;br/&gt;
the dicom_send_requests table via the sendreq_study_id_fk secondary index.&lt;/p&gt;

&lt;p&gt;I&apos;m thinking that, although the external form of the SQL SELECT statement is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;dicom_send_requests joins to studies on study_id, and&lt;/li&gt;
	&lt;li&gt;studies joins to dispatcher_locks on study_id&lt;br/&gt;
the optimizer may have re-arranged this and selected a different join order so that the actual&lt;br/&gt;
query is more like:&lt;/li&gt;
	&lt;li&gt;dispatcher_locks joins to dicom_send_requests on study_id, and&lt;/li&gt;
	&lt;li&gt;dicom_send_requests joins to studies on study_id&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And then, perhaps because the dispatcher_locks query is a &quot;select 1&quot; query, the&lt;br/&gt;
execution of the query against dispatcher_locks hasn&apos;t fetched any actual data, and so&lt;br/&gt;
the column is coming back null.&lt;/p&gt;

&lt;p&gt;So far, however, I haven&apos;t seen any code path that is going &lt;br/&gt;
through NoPutResultSetImpl.clearOrderableCache, so I don&apos;t any information&lt;br/&gt;
to share regarding the code comment that Kathey observed.&lt;/p&gt;</comment>
                            <comment id="12528516" author="army" created="Tue, 18 Sep 2007 20:10:51 +0100"  >&lt;p&gt;&amp;gt; I haven&apos;t seen any code path that is going through&lt;br/&gt;
&amp;gt; NoPutResultSetImpl.clearOrderableCache, so I don&apos;t&lt;br/&gt;
&amp;gt; have any information to share regarding the code&lt;br/&gt;
&amp;gt; comment &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It&apos;s possible that the comment is just a red herring-&lt;del&gt;if clearOrderableCache() is not in play, then there&apos;s probably no point going further down that road.  The information that you provided above certainly has potential&lt;/del&gt;-great investigation.&lt;/p&gt;

&lt;p&gt;&amp;gt; the optimizer may have re-arranged this&lt;/p&gt;

&lt;p&gt;To add to this: I think that for the optimizer to re-arrange the join order between dispatcher_locks, dicom_send_requests, and studies, all of those result sets must (I &lt;b&gt;think&lt;/b&gt;?) appear in the same compile-time FromList.  That means that the NOT EXISTS subquery will have to be &quot;flattened&quot; into the &quot;select distinct st.study_id, ...&quot; query.  So it may be useful to look at SubqueryNode.preprocess() to see a) if the NOT EXISTS subquery is in fact being flattened, and b) if the column references that result from that flattening are set up correctly.&lt;/p&gt;

&lt;p&gt;If the NOT EXISTS subquery is in fact being flattened, it might be good to stop the debugger just after &quot;modification of access paths&quot; has occured on the relevant FromList (the one containing dispatcher_locks, dicom_send_requests, and studies) to see what join order (and join strategies) the optimizer has chosen.  Perhaps that&apos;ll provide some insight as to whether or not the optimizer re-arrangement is in play here...?&lt;/p&gt;

&lt;p&gt;Of course I&apos;m just offering top-of-my-head suggestions; feel free to ignore and continue with your current path of investigation, as that certainly seems to be yielding some very useful information...&lt;/p&gt;</comment>
                            <comment id="12528564" author="bryanpendleton" created="Tue, 18 Sep 2007 22:01:38 +0100"  >&lt;p&gt;Thanks for the pointer to SubqueryNode.preprocess; we&apos;re definitely flattening this query.&lt;br/&gt;
The code goes through the flattenToExistsJoin() path on line 742 of SubqueryNode.java.&lt;/p&gt;

&lt;p&gt;And, to substantiate that more, it&apos;s clear from close examination of the data structures in&lt;br/&gt;
the debugger that the overall join tree at execution time is:&lt;/p&gt;

&lt;p&gt;  (Studies NestedLoop Dispatcher_locks) NestedLoop dicom_send_requests&lt;/p&gt;

&lt;p&gt;And at the point of the crash we&apos;ve:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fetched the first row from Studies,&lt;/li&gt;
	&lt;li&gt;joined it against Dispatcher_locks (discovering that no matching row exists, so NOT EXISTS is true)&lt;/li&gt;
	&lt;li&gt;taken the resulting row and are ready to join it against dicom_send_requests.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m wondering if the result set book-keeping gets messed up during flattening. At the point&lt;br/&gt;
that we call getColumnFromRow() to fetch a value from result set 5, it looks to me like&lt;br/&gt;
the information in row&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; is the correct information that we should be accessing. That is,&lt;br/&gt;
when I back up the stack to the NestedLoopJoinResultSet frame, and look at the value&lt;br/&gt;
of &quot;leftRow&quot;, which is the row that (I think) should be providing the values that we are about&lt;br/&gt;
to use for the start/stop position computations in the index scan positioning, the leftRow&lt;br/&gt;
instance from that join matches up with row&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; in the BaseActivation generated instance.&lt;/p&gt;

&lt;p&gt;So I&apos;ll look at how the result_set numbering is handled during flattening.&lt;/p&gt;</comment>
                            <comment id="12528840" author="bryanpendleton" created="Wed, 19 Sep 2007 18:47:40 +0100"  >&lt;p&gt;I&apos;ve been trying to understand the structure and content of the generated code for&lt;br/&gt;
the activation, by using derby.debug.true=DumpClassFile and decompiling the&lt;br/&gt;
resulting class files.&lt;/p&gt;

&lt;p&gt;I can see the generated startKeyGetter method for the TableScanResultSet&lt;br/&gt;
which accesses dicom_send_requests via the sendreq_study_id_fk index:&lt;/p&gt;

&lt;p&gt;    public Object e7()&lt;br/&gt;
        throws StandardException&lt;/p&gt;
    {
        e8.setColumn(1, (NumberDataValue)getColumnFromRow(5, 1));
        return e8;
    }

&lt;p&gt;And I can see the generated code in fillResultSet which is setting up the&lt;br/&gt;
TableScanResultSet to make this call:&lt;/p&gt;

&lt;p&gt;getResultSetFactory().getTableScanResultSet(&lt;br/&gt;
                                this, 1457, 21, getMethod(&quot;e6&quot;), 9, getMethod(&quot;e7&quot;),&lt;br/&gt;
                                1, null, -1, true, e9, &quot;DICOM_SEND_REQUESTS&quot;, null,&lt;br/&gt;
                                &quot;SENDREQ_STUDY_ID_FK&quot;, true, false, -1, -1, 6,&lt;br/&gt;
                                false, 0, false, 1.2960000000000003D, 265.16399630200306D),&lt;/p&gt;

&lt;p&gt;All of the generated code looks reasonable and valid, though I don&apos;t have&lt;br/&gt;
much experience reading the generated code.&lt;/p&gt;

&lt;p&gt;I&apos;m now wondering if this is an order-of-operations thing. During the nested loop&lt;br/&gt;
join, the following event should occur:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the current row from the outer side of the join should be fetched&lt;/li&gt;
	&lt;li&gt;the probe for the inner side of the join should be set up&lt;/li&gt;
	&lt;li&gt;the values from the outer side of the join should be passed to the&lt;br/&gt;
   index positioning logic on the inner side.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It is the &quot;startKeyGetter&quot; method that does that last step, but I wonder if it&apos;s&lt;br/&gt;
trying to access the start key values before the project/restrict processing has&lt;br/&gt;
pushed the values of the current row up from the outer side of the join.&lt;br/&gt;
\&lt;/p&gt;
</comment>
                            <comment id="12528885" author="bryanpendleton" created="Wed, 19 Sep 2007 21:21:51 +0100"  >&lt;p&gt;I&apos;m sorry, Army, I misled you. The code path &lt;b&gt;does&lt;/b&gt; go through&lt;br/&gt;
NoPutResultSetImpl.clearOrderableCache, my mistake. I just&lt;br/&gt;
wasn&apos;t stepping enough times in the debugger &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The comment in getColumnFromRow() is starting to make a little bit more sense now.&lt;/p&gt;

&lt;p&gt;It still seems like it&apos;s wrong for the positioned table scan to be&lt;br/&gt;
opened without the position value having been set, though, so&lt;br/&gt;
I&apos;ll keep plugging away reading code... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12528929" author="bryanpendleton" created="Wed, 19 Sep 2007 23:13:11 +0100"  >&lt;p&gt;Hmmm... Now I&apos;m back to thinking that the result number management&lt;br/&gt;
has gone astray during the query flattening.&lt;/p&gt;

&lt;p&gt;Attached is generatedActivation.txt, a de-compilation of the&lt;br/&gt;
generated activation for the query that fails.&lt;/p&gt;

&lt;p&gt;Also attached is queryPlanRS.txt, which is a poor-man&apos;s-graphical &lt;br/&gt;
view of the query plan, focusing specifically on the result sets and their&lt;br/&gt;
result set number (in parentheses next to the result set)&lt;/p&gt;

&lt;p&gt;I&apos;ve also specifically called out the two startKeyGetter()&lt;br/&gt;
methods, &quot;e2&quot; and &quot;e7&quot;.&lt;/p&gt;

&lt;p&gt;E2, which is used for the index probe into DISPATCHER_LOCKS&lt;br/&gt;
via DISPATCHER_LOCKS_SID_FK, accesses the start key value&lt;br/&gt;
using result set #4 (see the E2 code in generatedActivation.txt),&lt;br/&gt;
which seems correct to me.&lt;/p&gt;

&lt;p&gt;E7, however, which is used for the index probe into DICOM_SEND_REQUESTS&lt;br/&gt;
via SENDREQ_STUDY_ID_FK, accesses the start key value using&lt;br/&gt;
result set #5. But this seems wrong. I believe that result set #3&lt;br/&gt;
should have been used in the code which is generated into&lt;br/&gt;
startKeyGetter method E7.&lt;/p&gt;

&lt;p&gt;I do believe I&apos;m closer, but I&apos;m sure not there yet.&lt;/p&gt;

&lt;p&gt;I wouldn&apos;t mind somebody checking this work, if anybody is interested.&lt;/p&gt;</comment>
                            <comment id="12529267" author="bryanpendleton" created="Thu, 20 Sep 2007 22:27:51 +0100"  >&lt;p&gt;I&apos;m thinking about the interaction between NOT EXISTS query flattening and equijoin transitive closure,&lt;br/&gt;
and I&apos;m getting myself all confused. Here&apos;s what I&apos;ve been thinking:&lt;/p&gt;

&lt;p&gt;1) The join predicate which causes startKeyGetter method E7 to be&lt;br/&gt;
generated is an equijoin between DISPATCHER_LOCKS.STUDY_ID&lt;br/&gt;
and DICOM_SEND_REQUESTS.STUDY_ID. &lt;/p&gt;

&lt;p&gt;2) This predicate was NOT expressed in the original query as&lt;br/&gt;
an explicit condition in the WHERE clause; rather, it was&lt;br/&gt;
generated by Derby during PredicateList.joinClauseTransitiveClosure()&lt;/p&gt;

&lt;p&gt;3) Since the result set for DISPATCHER_LOCKS is RS #5, it is &lt;br/&gt;
completely valid for the E7 method to be fetching the start key value &lt;br/&gt;
from result set #5.&lt;/p&gt;

&lt;p&gt;4) But there is no row in result set number 5, because the query wants&lt;br/&gt;
to know when the DISPATCHER_LOCKS row does &lt;b&gt;NOT&lt;/b&gt; exist!&lt;/p&gt;

&lt;p&gt;5) That is, we validly flattened the NOT EXISTS subquery into the&lt;br/&gt;
parent&apos;s two-way query between STUDIES and DICOM_SEND_REQUESTS,&lt;br/&gt;
and we remembered enough information about the relationship between&lt;br/&gt;
STUDIES and the correlated NOT EXISTS subquery against&lt;br/&gt;
DISPATCHER_LOCKS, so that we know that the NestedLoopJoin&lt;br/&gt;
from STUDIES to DISPATCHER_LOCKS should return rows from STUDIES&lt;br/&gt;
where there is &lt;b&gt;NOT&lt;/b&gt; a matching row in DISPATCHER_LOCKS, but&lt;br/&gt;
then we tried to take the value of the (non-existing) row from&lt;br/&gt;
DISPATCHER_LOCKS and use it to do an index-probe into DICOM_SEND_REQUESTS.&lt;/p&gt;

&lt;p&gt;So now I&apos;m thinking that when we flattened the NOT EXISTS query&lt;br/&gt;
into its parent, we needed to do so in a way that reflected that the&lt;br/&gt;
correlated join predicate was NOT suitable for use in transitive closure.&lt;/p&gt;

&lt;p&gt;I think it&apos;s definitely time for somebody to start checking my work here,&lt;br/&gt;
because I&apos;m venturing into areas that are quite unfamiliar to me. Can&lt;br/&gt;
somebody who is comfortable with the concepts of&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;query flattening&lt;/li&gt;
	&lt;li&gt;correlated NOT EXISTS subqueries, and&lt;/li&gt;
	&lt;li&gt;transitive closure of equijoins&lt;br/&gt;
have a look at this query and offer an opinion about whether it was valid&lt;br/&gt;
for Derby to flatten and then transitively close the join in this fashion?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12529294" author="army" created="Fri, 21 Sep 2007 01:06:52 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;I did some tracing through the relevant areas of code and it sounds to me like you are very much on track.  I was able verify all of the observations (#1 thru #5) from your previous comment, and I confirmed that the NOT EXISTS predicate gives us a non-existent row with which we then try to join to DICOM_SEND_REQUESTS.&lt;/p&gt;

&lt;p&gt;So I think your investigation here has been great.  Based on what you have posted so far, I tend to agree that the join transitive closure should not have created the new join predicate.  If you&apos;d like to consider that approach as a solution to this issue, I think it might be a good one.  One other potential consideration is that maybe the NOT EXISTS subquery, which is correlated to the outer query, should not have been flattened in the first place?  I&apos;m not sure what the implications of correlation and subquery flattening is, but that might be something worth looking up in more detail.&lt;/p&gt;

&lt;p&gt;In any event, thank you very much for all of your time and effort on this one.  I do think you are making great progress here, and it seems like a solution is starting to take shape...&lt;/p&gt;</comment>
                            <comment id="12529303" author="bryanpendleton" created="Fri, 21 Sep 2007 02:48:08 +0100"  >&lt;p&gt;Army, thanks very much for the timely feedback! I tried a simple&lt;br/&gt;
change to PredicateList.joinClauseTransitiveClosure to omit&lt;br/&gt;
NOT EXISTS join predicates from consideration for closure,&lt;br/&gt;
and the initial results were promising: no crash, and I think I&lt;br/&gt;
am getting the right results.&lt;/p&gt;

&lt;p&gt;Attached is noClosureOfNotExists.diff, which is not for commit,&lt;br/&gt;
just to share the work I&apos;ve done so far.&lt;/p&gt;

&lt;p&gt;I&apos;ll continue testing this patch, to see if I can improve my&lt;br/&gt;
confidence that it delivers the right results and doesn&apos;t break other processing.&lt;/p&gt;</comment>
                            <comment id="12529314" author="bryanpendleton" created="Fri, 21 Sep 2007 05:38:33 +0100"  >&lt;p&gt;noClosureOfNotExists patch achieves a 100% pass rate on &quot;ant junitreport&quot;.&lt;br/&gt;
So that&apos;s a good 1st-order check that it doesn&apos;t break anything obvious.&lt;/p&gt;</comment>
                            <comment id="12529507" author="bryanpendleton" created="Fri, 21 Sep 2007 18:15:34 +0100"  >&lt;p&gt;I no longer think this bug is related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2916&quot; title=&quot;Change/error? in &amp;#39;Ordered null semantics&amp;#39; output from &amp;#39;SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS()&amp;#39; in lang/wisconsin.java&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2916&quot;&gt;DERBY-2916&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2775&quot; title=&quot;DataTypeDescriptor should be immutable so that multiple ValueNode referring to the same DTD do not have unexpected state changes.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2775&quot;&gt;DERBY-2775&lt;/a&gt;, so I removed those links.&lt;/p&gt;</comment>
                            <comment id="12529746" author="bryanpendleton" created="Sun, 23 Sep 2007 16:57:36 +0100"  >&lt;p&gt;Attached is &apos;repro2.java&apos;.&lt;/p&gt;

&lt;p&gt;I spent a bunch of time trying to write a &quot;from scratch&quot; reproduction&lt;br/&gt;
program to demonstrate the bug, but with no success. In the&lt;br/&gt;
debugger, I can see that the compiler erroneously inserts the&lt;br/&gt;
transitive join closure predicate, but I haven&apos;t been able to force&lt;br/&gt;
the optimizer to end up with a query plan where the bad predicate matters.&lt;/p&gt;

&lt;p&gt;I was thinking I might try to use the optimizer overrides feature to&lt;br/&gt;
force the join plan that I want, but I need to go study that feature first.&lt;/p&gt;

&lt;p&gt;In the meantime, I attached the first version of the repro program&lt;br/&gt;
in case somebody else can see how to trick it into reproducing the bug.&lt;/p&gt;</comment>
                            <comment id="12529906" author="bryanpendleton" created="Mon, 24 Sep 2007 17:13:42 +0100"  >&lt;p&gt;I&apos;ve succeeded in using the optimizer overrides to force nested loop joins,&lt;br/&gt;
and to force the use of the secondary index access paths, but I haven&apos;t&lt;br/&gt;
yet figured out how to force the join order that I want using the optimizer overrides.&lt;/p&gt;

&lt;p&gt;It&apos;s tricky because the optimizer overrides are specified on the query&lt;br/&gt;
before it&apos;s been flattened, but I want to force a particular join order after flattening.&lt;/p&gt;</comment>
                            <comment id="12529919" author="army" created="Mon, 24 Sep 2007 18:12:59 +0100"  >&lt;p&gt;&amp;gt; It&apos;s tricky because the optimizer overrides are specified on the query&lt;br/&gt;
&amp;gt; before it&apos;s been flattened, but I want to force a particular join order&lt;br/&gt;
&amp;gt; after flattening. &lt;/p&gt;

&lt;p&gt;Hmm...not sure if that&apos;s possible with current override support or not?&lt;/p&gt;

&lt;p&gt;One thing that influences join order is the relative size of the tables in question.  I noticed that for the original database, the row counts are:&lt;/p&gt;

&lt;p&gt;  DSR: 3240&lt;br/&gt;
  ST: 20&lt;br/&gt;
  dispatcher_locks: 0&lt;/p&gt;

&lt;p&gt;while in the database for &quot;repro2&quot; they are:&lt;/p&gt;

&lt;p&gt;  DSR: 1005&lt;br/&gt;
  ST: 10003&lt;br/&gt;
  dispatcher_locs: 0&lt;/p&gt;

&lt;p&gt;Notice how DSR is 15x as large as ST in the first case, while ST is 10x as large as DSR in the second case.  Perhaps that has something to do with why the optimizer chooses different join orders for the two repros...?&lt;/p&gt;</comment>
                            <comment id="12530032" author="bryanpendleton" created="Tue, 25 Sep 2007 01:56:17 +0100"  >&lt;p&gt;Thanks for the suggestion, Army. I&apos;ve been tinkering with the table sizes in the&lt;br/&gt;
repro. However, it doesn&apos;t seem to affect the optimizer&apos;s behavior. I don&apos;t&lt;br/&gt;
think the optimizer is being told the correct information about the table sizes.&lt;/p&gt;

&lt;p&gt;Perhaps there is something I need to do to communicate the table sizes to&lt;br/&gt;
the optimizer, other than simply inserting more rows into the table(s) prior to&lt;br/&gt;
running the test?&lt;/p&gt;</comment>
                            <comment id="12530033" author="bryanpendleton" created="Tue, 25 Sep 2007 01:58:03 +0100"  >&lt;p&gt;Maybe this : &lt;a href=&quot;http://db.apache.org/derby/docs/dev/tuning/ctunstats848901.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/dev/tuning/ctunstats848901.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12530038" author="bryanpendleton" created="Tue, 25 Sep 2007 05:02:30 +0100"  >&lt;p&gt;I fiddled around with repro2.java, and have attached an updated version.&lt;br/&gt;
Manipulating the table sizes and table row statistics in various ways&lt;br/&gt;
didn&apos;t succeed in convincing the optimizer to choose the join order I wanted.&lt;/p&gt;

&lt;p&gt;I re-wrote the query a different way, and then I seemed to get the join&lt;br/&gt;
order I wanted, but my query rewrite resulted in re-casting the query&lt;br/&gt;
as 2 select nodes with 2 tables each, rather than a single node with 3&lt;br/&gt;
tables, and hence the compiler never peformed transitive closure of&lt;br/&gt;
the predicates, so that query didn&apos;t tickle the bug either.&lt;/p&gt;

&lt;p&gt;Drat. I&apos;ll sleep on it, and maybe some new ideas will occur.&lt;/p&gt;</comment>
                            <comment id="12530153" author="army" created="Tue, 25 Sep 2007 17:52:10 +0100"  >&lt;p&gt;I switched Bryan&apos;s repro to use primary and foreign key constraints instead of explicit indexes.  That in turn meant that I had to update the INSERT statements to satisfy the foreign key constraints.&lt;/p&gt;

&lt;p&gt;Once I did that, I ran the query in &quot;repro2.java&quot; with &lt;em&gt;no&lt;/em&gt; optimizer overrides and while it did not fail, it &lt;b&gt;did&lt;/b&gt; show the desired join order, which is a step in the right direction.&lt;/p&gt;

&lt;p&gt;Then I (accidentally) swapped the order of the FROM tables in the top-level query (i.e. I put &quot;DSR&quot; first, then &quot;ST&quot;, instead of the other way around), and when I did that the query failed with an NPE.  Odd?&lt;/p&gt;

&lt;p&gt;The bad news is that the stack trace for &lt;b&gt;this&lt;/b&gt; NPE is different from the one reported in this issue.  Nonetheless, it follows the same pattern: i.e. it does not occur in 10.1.3.1, and if I back out the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt; it goes away.  So I&apos;m not sure if this is the same issue or not?&lt;/p&gt;

&lt;p&gt;Attaching as &quot;repro3.java&quot;...&lt;/p&gt;</comment>
                            <comment id="12530347" author="bryanpendleton" created="Wed, 26 Sep 2007 03:12:59 +0100"  >&lt;p&gt;This new failure is very interesting! My initial reaction is that it is the same problem,&lt;br/&gt;
with different symptoms. With the new (swapped tables) query:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we still go through exists flattening&lt;/li&gt;
	&lt;li&gt;we still go through transitive closure, and add a (erroneous) equijoin predicate&lt;/li&gt;
	&lt;li&gt;just before the crash, we trip the mysterious &quot;if&quot; statement in getColumnFromRow()&lt;br/&gt;
   and return a null column value &lt;/li&gt;
	&lt;li&gt;applying the noClosureOfNotExists.diff patch removes the NPE and makes the&lt;br/&gt;
   query run correctly.&lt;br/&gt;
I&apos;ll keep stepping through the new NPE, as well as your modified query with the&lt;br/&gt;
previous query plan &quot;shape&quot;, to continue to understand it better.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12531070" author="bryanpendleton" created="Fri, 28 Sep 2007 17:03:01 +0100"  >&lt;p&gt;I&apos;ve persuaded myself that Army&apos;s repro3 is reproducing the same basic problem,&lt;br/&gt;
and so I&apos;m going to move forward with building a complete patch using repro3&lt;br/&gt;
as the core regression test.&lt;/p&gt;

&lt;p&gt;I&apos;m considering adding the new regression test to ExistsWithSetOpsTest.java,&lt;br/&gt;
which isn&apos;t a perfect location, but I was looking for an existing JUnit test that&lt;br/&gt;
covered much of the same areas of the code, and that one seemed not too&lt;br/&gt;
implausible. Is there a better location for the new test? Specifically, are there&lt;br/&gt;
existing JUnit tests that specifically cover subquery flattening?&lt;/p&gt;

&lt;p&gt;I&apos;m also intending to open a separate JIRA to continue the investigation of&lt;br/&gt;
the mystery &quot;if&quot; statement in BaseActivation.getColumnFromRow. It is my&lt;br/&gt;
belief that that &quot;if&quot; statement can (and should) be removed.&lt;/p&gt;</comment>
                            <comment id="12531083" author="army" created="Fri, 28 Sep 2007 17:45:14 +0100"  >&lt;p&gt;Thank you for persistence with this issue, Bryan.  I&apos;m glad repro3 appears to have been helpful.&lt;/p&gt;

&lt;p&gt;&amp;gt; Specifically, are there existing JUnit tests that specifically cover subquery flattening? &lt;/p&gt;

&lt;p&gt;I don&apos;t see any existing JUnit tests, no.  The &quot;subqueryFlattening.sql&quot; test seems like the most relevant place, but as that is not JUnit, I can understand why you would choose to avoid that.&lt;/p&gt;

&lt;p&gt;If adding a new JUnit test is undesirable and you do decide to extend ExistsWithSetOpsTest, do you also plan to rename that test to make it more appropriate?  It would be nice to choose a name that more generally describes the types of tests in that file.  I think the common ground here is EXISTS with subqueries...though not necessarily &quot;flattening&quot; since the queries currently in ExistsWithSetOpsTest do not perform flattening per se, they just &quot;transform&quot; the EXISTS subquery into something else...&lt;/p&gt;</comment>
                            <comment id="12531251" author="bryanpendleton" created="Sat, 29 Sep 2007 16:33:20 +0100"  >&lt;p&gt;Attached is &apos;patchWithRenamedTest.diff&apos;, a patch proposal.&lt;/p&gt;

&lt;p&gt;The &apos;svn stat&apos; for this patch is:&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/FromList.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/compile/PredicateList.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java&lt;br/&gt;
D      java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSetOpsTest.java&lt;/p&gt;

&lt;p&gt;The patch contains a regression test for this issue, modeled on &lt;br/&gt;
the repro3.java test case and inserted into the (renamed)&lt;br/&gt;
ExistsWithSubqueriesTest.java.&lt;/p&gt;

&lt;p&gt;The core of the patch is the same, which is to notice that a join&lt;br/&gt;
predicate mentions a table which has the NOT EXISTS usage,&lt;br/&gt;
and to exclude that predicate from transitive join consideration.&lt;/p&gt;

&lt;p&gt;I think this patch is worthy of review; please have a look when you have a chance.&lt;/p&gt;</comment>
                            <comment id="12531546" author="army" created="Mon, 1 Oct 2007 17:02:52 +0100"  >&lt;p&gt;Thank you for the patch, Bryan.  The diff is small and contained and looks functionally correct to me.  I ran the new regression test without your patch and it failed, and with your patch it succeeds.&lt;/p&gt;

&lt;p&gt;I do think it might be nice to add explanatory comments to the relevant engine code, so that future readers know &lt;b&gt;why&lt;/b&gt; it is that we are checking for a &quot;NOT EXISTS&quot; query.  If you&apos;d rather not add comments to the transitive closure code itself, you could perhaps add comments to the FromList.tableNumberIsNotExists() method explaining the scenario in which it is used.  I think there are ample comments in the new ExistsWithSubqueriesTest file, so maybe you could just copy the important bits into the engine code comments, as well?&lt;/p&gt;

&lt;p&gt;Aside from that, and assuming derbyall and suites.All ran cleanly, I&apos;m +1 to the commit of this patch.  Many thanks for picking this one up, and for putting so much time into tracking down the cause/solution!&lt;/p&gt;</comment>
                            <comment id="12531679" author="bryanpendleton" created="Tue, 2 Oct 2007 03:59:14 +0100"  >&lt;p&gt;I agree, comments are definitely important for this change.&lt;br/&gt;
&quot;I meant to add them before but forgot&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Thanks for catching this!&lt;/p&gt;

&lt;p&gt;Attached is a revised patch; the only change is improved comments&lt;br/&gt;
in FromList and PredicateList.&lt;/p&gt;

&lt;p&gt;I&apos;m intending to run a complete set of tests, verify that javadoc&lt;br/&gt;
builds cleanly, and then submit this patch. Continued feedback&lt;br/&gt;
is very welcome of course.&lt;/p&gt;</comment>
                            <comment id="12531819" author="bryanpendleton" created="Tue, 2 Oct 2007 15:55:32 +0100"  >&lt;p&gt;derbyall and junit suites.All were 100% clean.&lt;/p&gt;</comment>
                            <comment id="12532324" author="bryanpendleton" created="Thu, 4 Oct 2007 06:17:15 +0100"  >&lt;p&gt;generated javadoc looks ok, now that I have my jdk 1.5 build envt set up.&lt;/p&gt;</comment>
                            <comment id="12532459" author="bryanpendleton" created="Thu, 4 Oct 2007 16:14:48 +0100"  >&lt;p&gt;Committed the patchWithImprovedComments to the trunk as revision 581943.&lt;/p&gt;

&lt;p&gt;I intend to merge this patch back to the 10.3 line in the next week.&lt;/p&gt;</comment>
                            <comment id="12532488" author="army" created="Thu, 4 Oct 2007 18:34:08 +0100"  >&lt;p&gt;&amp;gt; Committed the patchWithImprovedComments to the trunk as revision 581943. &lt;/p&gt;

&lt;p&gt;Thanks Bryan!&lt;/p&gt;</comment>
                            <comment id="12532814" author="bryanpendleton" created="Sat, 6 Oct 2007 03:58:14 +0100"  >&lt;p&gt;I merged the trunk patch back to the 10.3 branch without issues, and my build and test runs were clean, so I committed the patch to the 10.3 branch as revision 582439.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12473822">DERBY-4798</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12379534">DERBY-3097</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12343690">DERBY-1357</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12365902" name="bug4736.sql" size="1280" author="bryanpendleton" created="Sat, 15 Sep 2007 00:29:27 +0100"/>
                            <attachment id="12364861" name="d3033-sane-ij-session-10.3.1.5.txt" size="7722" author="dagw" created="Fri, 31 Aug 2007 02:45:22 +0100"/>
                            <attachment id="12366240" name="generatedActivation.txt" size="10826" author="bryanpendleton" created="Wed, 19 Sep 2007 23:13:11 +0100"/>
                            <attachment id="12366325" name="noClosureOfNotExists.diff" size="1887" author="bryanpendleton" created="Fri, 21 Sep 2007 02:48:08 +0100"/>
                            <attachment id="12366876" name="patchWithImprovedComments.diff" size="43607" author="bryanpendleton" created="Tue, 2 Oct 2007 03:59:13 +0100"/>
                            <attachment id="12366801" name="patchWithRenamedTest.diff" size="41828" author="bryanpendleton" created="Sat, 29 Sep 2007 16:33:20 +0100"/>
                            <attachment id="12366241" name="queryPlanRS.txt" size="1374" author="bryanpendleton" created="Wed, 19 Sep 2007 23:13:11 +0100"/>
                            <attachment id="12365604" name="query_plan.new" size="10511" author="kmarsden" created="Wed, 12 Sep 2007 01:10:10 +0100"/>
                            <attachment id="12365603" name="query_plan.old" size="6888" author="kmarsden" created="Wed, 12 Sep 2007 01:10:10 +0100"/>
                            <attachment id="12366504" name="repro2.java" size="9166" author="bryanpendleton" created="Tue, 25 Sep 2007 05:02:30 +0100"/>
                            <attachment id="12366424" name="repro2.java" size="7104" author="bryanpendleton" created="Sun, 23 Sep 2007 16:57:35 +0100"/>
                            <attachment id="12366539" name="repro3.java" size="9553" author="army" created="Tue, 25 Sep 2007 17:52:09 +0100"/>
                            <attachment id="12364844" name="test.rar" size="968807" author="hqin" created="Thu, 30 Aug 2007 16:57:35 +0100"/>
                            <attachment id="12365017" name="test.zip" size="1211976" author="dagw" created="Mon, 3 Sep 2007 16:11:45 +0100"/>
                            <attachment id="12365082" name="viewer_10_1.zip" size="822665" author="kmarsden" created="Tue, 4 Sep 2007 14:58:19 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 29 Aug 2007 21:55:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23387</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0m33:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37396</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>