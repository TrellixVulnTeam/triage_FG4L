<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:19:03 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4357/DERBY-4357.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4357] TableFunctions provide no information to limit underlying query</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4357</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The API specification for TableFunctions cannot provide information to the implementer of the TableFunction about the details of the query.  For example: &lt;/p&gt;

&lt;p&gt;(a) I defined a table function named MyFunction with columns a,b, &amp;amp; c&lt;br/&gt;
(b) I bind the table function properly using the CREATE FUNCTION SQL.&lt;/p&gt;

&lt;p&gt;User executes the following SQL:&lt;/p&gt;

&lt;p&gt;select a,b from table ( MyFunction() ) where c = 123&lt;/p&gt;

&lt;p&gt;Without passing the column list and/or where clause as arguments to the table function, my implementation can not know that it only needs two of the three columns, and only rows where c = 123.&lt;/p&gt;

&lt;p&gt;For TableFunctions that are built to integrate distant/legacy data, the cost of the query can be prohibitive.   It would be better if information regarding the columns in the select and restrictions from the where clause could be passed to the developer.&lt;/p&gt;</description>
                <environment>ALL</environment>
        <key id="12433876">DERBY-4357</key>
            <summary>TableFunctions provide no information to limit underlying query</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rhillegas">Rick Hillegas</assignee>
                                    <reporter username="cgoodacre">Chris Goodacre</reporter>
                        <labels>
                    </labels>
                <created>Mon, 24 Aug 2009 19:58:35 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:06 +0100</updated>
                            <resolved>Fri, 16 Apr 2010 17:38:27 +0100</resolved>
                                    <version>10.4.1.3</version>
                    <version>10.4.2.0</version>
                    <version>10.5.1.1</version>
                    <version>10.5.2.0</version>
                    <version>10.5.3.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12747024" author="rhillegas" created="Mon, 24 Aug 2009 20:10:18 +0100"  >&lt;p&gt;More information on this issue can be found in the following email thread: &lt;a href=&quot;http://www.nabble.com/Question-about-TableFunctions-in-Derby-td24491389.html#a24491389&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Question-about-TableFunctions-in-Derby-td24491389.html#a24491389&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12749566" author="rhillegas" created="Mon, 31 Aug 2009 19:34:23 +0100"  >&lt;p&gt;Attaching a first rev of a functional spec for this feature. The spec describes a new public Derby interface, RestrictedVTI. Table functions which implement this interface can be told which columns they must materialize. In addition, table functions which implement this interface can be given simple bounds to apply to those columns.&lt;/p&gt;</comment>
                            <comment id="12749807" author="knutanders" created="Tue, 1 Sep 2009 09:11:07 +0100"  >&lt;p&gt;Thanks for writing the functional spec, Rick. It looks good and fairly complete. I have a couple of questions, though:&lt;/p&gt;

&lt;p&gt;1) It wasn&apos;t entirely clear to me how the _nullEqualsNull field in Restriction.ColumnQualifier is supposed to be used. Is the user supposed to specify somehow that this VTI treats NULLs in a non-standard way? If so, how (and why)? Or is it meant to implement IS (NOT) NULL restrictions? Or something else?&lt;/p&gt;

&lt;p&gt;2) The operator &apos;&amp;lt;&amp;gt;&apos; is not defined. Is that intentional?&lt;/p&gt;

&lt;p&gt;3) The array passed to setMaterializedColumnNames() contains somewhat redundant information (both names and positions of the columns to materialize). Would an array of booleans suffice? Or could the extra information be used for something?&lt;/p&gt;

&lt;p&gt;4) I cannot find that the spec says what happens if the restricted VTI returns non-qualifying rows. Should the restrictions be reevaluated outside the VTI? (I think I would prefer that the restrictions were only seen as hints, so that the VTI doesn&apos;t have to check all of them. Then, if there&apos;s a restriction on a column that doesn&apos;t really help the VTI retrieving the rows more efficiently, it could just disregard that restriction and let the SQL do the filtering instead.)&lt;/p&gt;</comment>
                            <comment id="12749952" author="rhillegas" created="Tue, 1 Sep 2009 16:43:23 +0100"  >&lt;p&gt;Thanks for the quick feedback, Knut.&lt;/p&gt;

&lt;p&gt;&amp;gt;1) It wasn&apos;t entirely clear to me how the _nullEqualsNull field in Restriction.ColumnQualifier is supposed to be used. Is the user supposed to specify somehow that this VTI treats NULLs in a non-standard way? If so, how (and why)? Or is it meant to implement IS (NOT) NULL restrictions? Or something else?&lt;/p&gt;

&lt;p&gt;It is meant to implement IS NULL. I will clarify this.&lt;/p&gt;

&lt;p&gt;&amp;gt;2) The operator &apos;&amp;lt;&amp;gt;&apos; is not defined. Is that intentional?&lt;/p&gt;

&lt;p&gt;Yes. The idea is to model the Qualifier functionality which the optimizer already understands. The comparisons are the same ones found in org.apache.derby.iapi.types.Orderable.&lt;/p&gt;

&lt;p&gt;&amp;gt;3) The array passed to setMaterializedColumnNames() contains somewhat redundant information (both names and positions of the columns to materialize). Would an array of booleans suffice? Or could the extra information be used for something?&lt;/p&gt;

&lt;p&gt;I agree that the information is redundant and my original suggestion was to use a bitmap. However, Chris reported that this would be cumbersome to use in the real world. I don&apos;t think that the redundancy is harmful. In the meantime, I have warmed up to the redundancy. That&apos;s because I can see that it will make it very easy to write a generic table function that wraps a SELECT against a foreign table and allows you to push projections and restrictions into the foreign query.&lt;/p&gt;

&lt;p&gt;4) I cannot find that the spec says what happens if the restricted VTI returns non-qualifying rows. Should the restrictions be reevaluated outside the VTI? (I think I would prefer that the restrictions were only seen as hints, so that the VTI doesn&apos;t have to check all of them. Then, if there&apos;s a restriction on a column that doesn&apos;t really help the VTI retrieving the rows more efficiently, it could just disregard that restriction and let the SQL do the filtering instead.)&lt;/p&gt;

&lt;p&gt;The intent is that the table function has signed up for a contract to filter rows. If the table function doesn&apos;t fulfill its contract, then the table function has a bug. I will clarify this in the spec. I do see your point that redundant enforcement of the qualification in Derby could be useful to some users. I&apos;m prepared to revisit this part of the spec during implementation if it turns out that the query processor already redundantly enforces restrictions even after pushing them into the store layer.&lt;/p&gt;

&lt;p&gt;The reason that I prefer to regard the filtering as a contract is that I think it will make it easier to reason about these smart table functions when we make them even smarter: if a table function claims that it can perform a piece of processing, then Derby should be able to rely on that claim. I&apos;m thinking that at some point we will want to add a similar mechanism so that a table function can declare that it can return rows in certain sort orders. I think that if Derby asks a table function to sort the rows, then Derby doesn&apos;t want to perform a redundant sort outside the table function.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="12749957" author="cgoodacre" created="Tue, 1 Sep 2009 16:53:52 +0100"  >&lt;p&gt;&amp;gt;3) The array passed to setMaterializedColumnNames() contains somewhat redundant information (both names and positions of the columns to &amp;gt;materialize). Would an array of booleans suffice? Or could the extra information be used for something? &lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;I agree that the information is redundant and my original suggestion was to use a bitmap. However, Chris reported that this would be &amp;gt;&amp;gt;cumbersome to use in the real world. I don&apos;t think that the redundancy is harmful. In the meantime, I have warmed up to the redundancy. That&apos;s &amp;gt;&amp;gt;because I can see that it will make it very easy to write a generic table function that wraps a SELECT against a foreign table and allows you to &amp;gt;&amp;gt;push projections and restrictions into the foreign query. &lt;/p&gt;

&lt;p&gt;Specifically, I noted that a BitMap (or an array of &lt;span class=&quot;error&quot;&gt;&amp;#91;Bb&amp;#93;&lt;/span&gt;ooleans) would force my code (I believe) to know the order of the columns as they were defined in the function.   Currently, I don&apos;t have that dependency, and if I could get away without it, that was preferable to me.&lt;/p&gt;</comment>
                            <comment id="12750000" author="cgoodacre" created="Tue, 1 Sep 2009 18:29:36 +0100"  >&lt;p&gt;Regarding the functional spec, its emphasis is on performance tuning, which follows our original discussion thread. Is it worth discussing other information that might be informative to the TableFunction implementation? For instance: say I set out to use Derby as a relational cache for a separate system. I write a TableFunction that checks the freshness of the data in a table (inside a Derby database) that mirrors the external system. I&apos;ll call that local Derby table the &quot;cache table&quot;. If the data is stale, I grab the data from the external system and push it into the cache table. &lt;/p&gt;

&lt;p&gt;Question: Is there a way to write this function generically? (I don&apos;t think so, since the TableFunction doesn&apos;t know which table the query was executed against). If I have each customer in their own database or schema, how do I know which database or schema I should check the cache table in? &lt;/p&gt;

&lt;p&gt;Admittedly, these are not TableFunction performance optimizations. Should they be a separate enhancement request or do we deal with all tablefunction-informing APIs at once?&lt;/p&gt;</comment>
                            <comment id="12750021" author="rhillegas" created="Tue, 1 Sep 2009 19:24:26 +0100"  >&lt;p&gt;Hi Chris,&lt;/p&gt;

&lt;p&gt;It sounds to me like the functionality you just described belongs in another JIRA. You might want to take a look at the demo under java/demo/vtis. That shows you how to define a family of table functions using annotations. In particular, take a look at java/demo/vtis/org/apache/derbyDemo/vtis/example/WorldDBSnapshot. That class uses annotations to define a series of parameterized snapshots of tables from a foreign database.&lt;/p&gt;</comment>
                            <comment id="12750026" author="cgoodacre" created="Tue, 1 Sep 2009 19:33:34 +0100"  >&lt;p&gt;Thanks for the pointer, Rick.   I&apos;ll take a look at that example.&lt;/p&gt;





</comment>
                            <comment id="12750405" author="knutanders" created="Wed, 2 Sep 2009 12:43:32 +0100"  >&lt;p&gt;Thanks for the clarifications, Rick.&lt;/p&gt;

&lt;p&gt;I agree that if we add a mechanism to let the table function return the results in a specific order, it would be pointless to do an extra sort in Derby. I would argue though that there is a difference between pushing restrictions and ensuring ordering.&lt;/p&gt;

&lt;p&gt;With the ordering, the table function itself declares that it can return the rows ordered by column X, so it&apos;s reasonable to expect that it&apos;s true that they will in fact be ordered by X. Also, Derby won&apos;t ever ask it to order by column Y. So for column X, where you have an easy way to do the ordering inside the table function, you can use the power of Java to order the rows, whereas for column Y you rely on the power of SQL, so you get to combine the strengths of both Java and SQL.&lt;/p&gt;

&lt;p&gt;With the restrictions, the table function has no way to say that it only accepts restrictions on a certain column, or only certain kinds of operators. So if the table function is required to enforce all restrictions, you can no longer use the power of SQL for those restrictions where you have no advantages of implementing them in Java. (Also, though perhaps not likely to ever be a problem, new operators cannot be added later without breaking the existing restricted VTIs, as old table functions wouldn&apos;t know how to handle them, but they are not allowed to ignore them.)&lt;/p&gt;

&lt;p&gt;As an example, say that we have a table function F(K,V) which is simply wrapping a hash table. A restriction such as K=&apos;abc&apos; would be very helpful to push down, as it could be used as an argument to Hashtable.get() and reduce the number of rows returned to one (or zero). However, restrictions on K with operators such as &amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=, or any restriction on V, would require that the entire Hashtable was scanned. One would also have to implement evaluation of each operator on each column, and one would have to handle arbitrarily nested AND/OR operators. Whereas this is indeed possible to do, it sounds like wasted work to reimplement what&apos;s already implemented in the SQL engine for no added benefit.&lt;/p&gt;

&lt;p&gt;If the restrictions are only seen as a hint, this table function would need only a couple of lines of code to extract the equals restrictions on K. The full table scan needed for more complex restrictions could be left to the SQL engine, which should be able to perform the scan just as efficiently as the user&apos;s hand-coded scan. Also, the hand-coded scan will probably have undergone less testing and will be more error-prone than the code in the SQL engine.&lt;/p&gt;</comment>
                            <comment id="12751114" author="cgoodacre" created="Thu, 3 Sep 2009 19:10:09 +0100"  >&lt;p&gt;I think it would be helpful to be a little clearer about the semantics and invocation of the the RestrictedVTI interface methods.  I&apos;d like to see something like this (if this is actually correct):&lt;/p&gt;

&lt;p&gt;There is no implicit or explicit order of invocation for setMaterializedColumnNames() and setRestriction().&lt;/p&gt;

&lt;p&gt;The setMaterializedColumnNames(...) method is guaranteed to be invoked only 1 time per TableFunction execution.  This invocation must occur prior to any invocation of any of the following methods:&lt;br/&gt;
    getXXXXXX()&lt;br/&gt;
    next()&lt;br/&gt;
    isFirst()&lt;br/&gt;
    first()&lt;br/&gt;
    isLast()&lt;br/&gt;
    last()&lt;/p&gt;

&lt;p&gt;The setRestriction(....) method is guaranteed to be invoked only 1 time per TableFunction execution.   NOTE:  the Restriction class is a binary tree representing all restrictions in the WHERE clause of the underlying query in which a column/field from the TableFunction is compared against a constant value.    Specifically, setRestriction is &lt;b&gt;not&lt;/b&gt; invoked once for each restriction.  This invocation must occur prior to any invocation of the methods enumated in setMaterializedColumnNames().&lt;/p&gt;

&lt;p&gt;Btw- I realize that the API doc for Restriction also specifically states that it is a binary tree, I just think it&apos;s helpful in the interface doc to head off any misunderstanding.&lt;/p&gt;</comment>
                            <comment id="12751117" author="cgoodacre" created="Thu, 3 Sep 2009 19:17:03 +0100"  >&lt;p&gt;Related to Knut&apos;s comment (and your reply) about &amp;lt;&amp;gt;, what would be the path to add that operator and other operators that fall outside of the Orderable interface (e.g. IN and NOT IN).   Would this mechanism ever support a query like this:&lt;/p&gt;

&lt;p&gt;  create function foreignEmployeeTable()&lt;br/&gt;
  returns table&lt;br/&gt;
  (&lt;br/&gt;
      id        int,&lt;br/&gt;
      birthDay  date,&lt;br/&gt;
      status character(1),&lt;br/&gt;
      firstName varchar( 100 ),&lt;br/&gt;
      lastName  varchar( 100 )&lt;br/&gt;
  )&lt;/p&gt;

&lt;p&gt;select lastName from table( foreignEmployeeTable() ) s where status in (&apos;A&apos;,&apos;L&apos;,&apos;S&apos;)&lt;/p&gt;</comment>
                            <comment id="12751525" author="rhillegas" created="Fri, 4 Sep 2009 17:52:32 +0100"  >&lt;p&gt;Thanks for the additional comments, Knut and Chris. Some responses follow:&lt;/p&gt;

&lt;p&gt;1) I do see the value of enforcing the restriction outside the table function even if the restriction is pushed into the table function. I&apos;ll change the spec to say that&apos;s what we&apos;ll do. However, heads up: I may revert back to the original contract if this turns out to be difficult to implement. In that case, we can file a separate JIRA for this relaxed contract--it would be backward-compatible with the original, more exacting contract.&lt;/p&gt;

&lt;p&gt;2) In order to remove ambiguity about the order in which the RestrictedVTI methods are called, I will combine them into a single initScan() method.&lt;/p&gt;

&lt;p&gt;3) I will also clarify that initScan() is called once per scan and is called before any other ResultSet methods are called.&lt;/p&gt;

&lt;p&gt;4) It&apos;s certainly possible to build on this work and turn an IN list into a series of probes of the table function. This should be possible for table functions which satisfiy the following conditions:&lt;/p&gt;

&lt;p&gt;a) their returned ResultSets implement RestrictedVTI&lt;/p&gt;

&lt;p&gt;b) they are declared in classes which implement org.apache.derby.vti VTICosting, provided that VTICosting.supportsMultipleInstantiations() returns true.&lt;/p&gt;

&lt;p&gt;This, however, would be another JIRA. For the record, I don&apos;t think that you can get around this problem by rewriting your IN list as a series of ORs. I think that the Derby optimizer will outfox you and transform that series of ORs back into an IN list which won&apos;t operate efficiently on a table function, even after this JIRA is done. See &lt;a href=&quot;http://db.apache.org/derby/docs/10.5/tuning/tuning-single.html#rtuntransform590&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.5/tuning/tuning-single.html#rtuntransform590&lt;/a&gt; I will note this in the spec.&lt;/p&gt;

&lt;p&gt;5) I think that a related improvement would be the ability to optimize joins with table functions which satisfy the conditions in (4). That&apos;s another JIRA, too.&lt;/p&gt;

&lt;p&gt;6) I think that the LIKE and BETWEEN optimizations should play well with this feature, but we&apos;ll have to prove that when this work is done. Those optimizations are described here: &lt;a href=&quot;http://db.apache.org/derby/docs/10.5/tuning/tuning-single.html#rtuntransform139&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.5/tuning/tuning-single.html#rtuntransform139&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7) I don&apos;t see much value in supporting the &amp;lt;&amp;gt; operator. However, if we added this operator to the list of simple comparisons which can be pushed into the Derby store, then we could piggyback the corresponding table function work on top of that effort.&lt;/p&gt;

&lt;p&gt;What other operations would you like to push into table functions?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12751594" author="rhillegas" created="Fri, 4 Sep 2009 20:51:30 +0100"  >&lt;p&gt;Attaching second rev of spec, incorporating feedback from Knut and Chris.&lt;/p&gt;</comment>
                            <comment id="12752065" author="knutanders" created="Mon, 7 Sep 2009 10:26:57 +0100"  >&lt;p&gt;Thanks for the updated spec, Rick. It looks good to me. Some small nits:&lt;/p&gt;

&lt;p&gt;1) The example in the Behavior section should be updated and use the initScan() method.&lt;/p&gt;

&lt;p&gt;2) In the javadoc for initScan() it would be good to clarify whether the &quot;columns which need to be materialized&quot; means the columns referenced in the select list or the union of the columns in the select list and the columns in the restrictions. That is, which column names does the array contain in the following example: select lastName from table( foreignEmployeeTable() ) s where s id = 5&lt;/p&gt;</comment>
                            <comment id="12754156" author="rhillegas" created="Fri, 11 Sep 2009 15:41:46 +0100"  >&lt;p&gt;Attaching a new rev of the spec, incorporating Knut&apos;s feedback.&lt;/p&gt;</comment>
                            <comment id="12758698" author="rhillegas" created="Wed, 23 Sep 2009 14:40:16 +0100"  >&lt;p&gt;Attaching 4th version of the spec, incorporating feedback from Kim.&lt;/p&gt;</comment>
                            <comment id="12758708" author="cgoodacre" created="Wed, 23 Sep 2009 15:04:04 +0100"  >&lt;p&gt;Rick, the spec looks good.  I was showing it to a colleague not familiar with TableFunctions and he was confused slightly by the example of declaring the table function:&lt;/p&gt;

&lt;p&gt;create function foreignDatabaseEmployeeTable()&lt;br/&gt;
returns table&lt;br/&gt;
(&lt;br/&gt;
    id int,&lt;br/&gt;
    birthday date,&lt;br/&gt;
    taxPayerID varchar( 50 ),&lt;br/&gt;
    firstName varchar( 50 ),&lt;br/&gt;
    lastName varchar( 50 )&lt;br/&gt;
)&lt;br/&gt;
language java&lt;br/&gt;
parameter style DERBY_JDBC_RESULT_SET&lt;br/&gt;
no sql&lt;br/&gt;
external name &apos;com.acme.portal.foreignDatabaseEmployeeTable&apos;&lt;/p&gt;

&lt;p&gt;The external name should be a FQCN + method name, right?    It looks like either you omitted the classname, or &apos;portal&apos; is your classname and the lowercase is confusing.&lt;/p&gt;

&lt;p&gt;Otherwise the spec looks solid.  Any guestimate on whether our 1 vote will be enough to get this selected for implementation?   Do I need to sign up all my dead relatives with JIRA accounts (Chicago-style) to get this over the hump?  :-D&lt;/p&gt;</comment>
                            <comment id="12758730" author="rhillegas" created="Wed, 23 Sep 2009 16:17:52 +0100"  >&lt;p&gt;Thanks for the feedback, Chris. You&apos;re right, the ddl example is confusing. I will fix that in the next rev of the spec. I&apos;m hoping to get to this feature during 10.6 development, but there are some other items ahead of it in the queue. Thanks.&lt;/p&gt;</comment>
                            <comment id="12766628" author="rhillegas" created="Fri, 16 Oct 2009 18:47:25 +0100"  >&lt;p&gt;Attaching derby-4357-01-aa-publicAPI.diff. This is just the public API defined in the spec. I thought I would snapshot this in JIRA. Introduces the following classes:&lt;/p&gt;

&lt;p&gt;A      java/engine/org/apache/derby/vti/Restriction.java&lt;br/&gt;
A      java/engine/org/apache/derby/vti/RestrictedVTI.java&lt;/p&gt;</comment>
                            <comment id="12769236" author="rhillegas" created="Fri, 23 Oct 2009 15:41:47 +0100"  >&lt;p&gt;Committed public api derby-4357-01-aa-publicAPI.diff at subversion revision 829078.&lt;/p&gt;</comment>
                            <comment id="12770899" author="sleroux" created="Wed, 28 Oct 2009 11:34:56 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I reviewed the comments of this page and studied the specs.&lt;br/&gt;
I think, with some guidance, I could cope with this issue.&lt;/p&gt;

&lt;p&gt;Sylvain&lt;/p&gt;</comment>
                            <comment id="12770914" author="rhillegas" created="Wed, 28 Oct 2009 12:36:10 +0000"  >&lt;p&gt;Thanks, Sylvain. I expect that I will be attaching a patch for this feature later today.&lt;/p&gt;</comment>
                            <comment id="12771028" author="rhillegas" created="Wed, 28 Oct 2009 18:01:13 +0000"  >&lt;p&gt;Attaching version 6 of the functional spec. This incorporates the following changes:&lt;/p&gt;

&lt;p&gt;Small changes to Restriction class based on initial implementation: 1) removed confusing nullEqualsNull field of ColumnQualifier and added new operators &quot;IS NULL&quot; and &quot;IS NOT NULL&quot;, 2) made Restrictions Serializable so that they can be stored in PreparedStatements.&lt;/p&gt;</comment>
                            <comment id="12771057" author="rhillegas" created="Wed, 28 Oct 2009 18:56:23 +0000"  >&lt;p&gt;Attaching derby-4357-02-ac-passThrough.diff. This is an initial implementation of this feature.&lt;/p&gt;

&lt;p&gt;Chris, you are welcome to take this for a test-drive and let me know about bugs and whether this solves your problem. Thanks.&lt;/p&gt;

&lt;p&gt;Here is the approach taken by this patch:&lt;/p&gt;

&lt;p&gt;1) The code generator decides whether to push projections and restrictions to the table function.&lt;/p&gt;

&lt;p&gt;2) The code generator relies on the fact that the optimizer inserts a ProjectRestrict node above the table function. As its name implies, the PR node holds the following:&lt;/p&gt;

&lt;p&gt;a) The projection of the table function. This is the list of all columns in the table function which are referenced in the query.&lt;/p&gt;

&lt;p&gt;b) The restriction of the table function. This is all of the WHERE clause fragments which can be evaluated using only columns from the table function.&lt;/p&gt;

&lt;p&gt;3) The code generator further relies on the fact that the optimizer has turned on the isQualifier flag on all predicates in the restriction which can be pushed into the table function. These are predicates of the form&lt;/p&gt;

&lt;p&gt;   column OP constant&lt;/p&gt;

&lt;p&gt;where OP is one of the relational operators:&lt;/p&gt;

&lt;p&gt;  &amp;lt;    &amp;lt;=    =    &amp;gt;    &amp;gt;=    IS NULL    IS NOT NULL&lt;/p&gt;

&lt;p&gt;4) At code generation time, the PR node checks to see whether its child is a FromVTI node for a RestrictedVTI. If so, the PR node tells its child to construct the column list and Restriction which will be passed to the RestrictedVTI at run-time.&lt;/p&gt;

&lt;p&gt;Note that if the child FromVTI doesn&apos;t understand the predicates which are passed to it, then the FromVTI computes a null Restriction. Over time, we can make this logic smarter and pass more complicated Restrictions to table functions.&lt;/p&gt;

&lt;p&gt;5) At run time, the VTIResultSet does the following:&lt;/p&gt;

&lt;p&gt;a) Clones the Restriction and plugs parameters into it in case any of the ColumnQualifiers refer to ? parameters.&lt;/p&gt;

&lt;p&gt;b) Stuffs the column list and Restriction into the RestrictedVTI by calling the initScan() method of the RestrictedVTI.&lt;/p&gt;


&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/vti/Restriction.java&lt;/p&gt;

&lt;p&gt;Explicit support for IS NULL and IS NOT NULL predicates.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java&lt;/p&gt;

&lt;p&gt;Bind-time changes so that the declared return type of the Java method bound to a table function can be a subtype of ResultSet and not just a ResultSet.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;/p&gt;

&lt;p&gt;Code-generation-time change: step (4) described above.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;Mostly code-generation-time changes to support step (4) above.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java&lt;/p&gt;

&lt;p&gt;Run-time changes to support step (5) above.&lt;/p&gt;


&lt;p&gt;M      tools/javadoc/publishedapi.ant&lt;/p&gt;

&lt;p&gt;Wire the new public api into the published javadoc.&lt;/p&gt;


&lt;p&gt;A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/IntegerArrayVTI.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java&lt;br/&gt;
A      java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java&lt;/p&gt;

&lt;p&gt;A couple initial tests to verify the soundness of this approach. Follow-on patches will supply more tests.&lt;/p&gt;</comment>
                            <comment id="12771580" author="rhillegas" created="Thu, 29 Oct 2009 19:57:38 +0000"  >&lt;p&gt;Attaching revised version of the patch which adds more tests: derby-4357-02-ad-passThrough.diff. Committed at subversion revision 831072.&lt;/p&gt;</comment>
                            <comment id="12772024" author="rhillegas" created="Fri, 30 Oct 2009 18:23:34 +0000"  >&lt;p&gt;Attaching derby-4357-03-aa-hashjoin.diff. This patch adds support for hashjoins plus some miscellaneous cleanup.&lt;/p&gt;

&lt;p&gt;1) It turns out that when the optimizer puts a hash table on top of a VTI, the optimizer does not fabricate a ProjectRestrict node. This patch adds logic to the hash table node so it pushes its search restriction into the VTI just as the ProjectRestrict node does.&lt;/p&gt;

&lt;p&gt;2) It also turns out that the VTI node has enough information to compute the projection by itself. Made the computation of the projection more robust by having the VTI compute the projection itself in cases where the parent did not request this service.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/Predicate.java&lt;/p&gt;

&lt;p&gt;Miscellaneous cleanup of the node-printing logic.&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/HashTableNode.java&lt;/p&gt;

&lt;p&gt;Logic supporting (1).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;Logic supporting (2).&lt;/p&gt;


&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java&lt;/p&gt;

&lt;p&gt;Moved up the logic which pushes the VTI projection/restriction so that it is parallel to what is done in HashTableNode.&lt;/p&gt;



&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/IntegerArrayVTI.java&lt;br/&gt;
M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/RestrictedVTITest.java&lt;/p&gt;

&lt;p&gt;More tests.&lt;/p&gt;</comment>
                            <comment id="12772088" author="rhillegas" created="Fri, 30 Oct 2009 21:05:10 +0000"  >&lt;p&gt;Tests passed cleanly for me. Committed derby-4357-03-aa-hashjoin.diff at subversion revision 831454.&lt;/p&gt;</comment>
                            <comment id="12772678" author="mamtas" created="Mon, 2 Nov 2009 20:44:17 +0000"  >&lt;p&gt;Fixed a very minor javadoc error in FromVTI.java for method private HashMap computeProjection( ) throws StandardException&lt;/p&gt;

&lt;p&gt;Rick, I am not sure though if the comments for that function need to be changed. Maybe you can take a look at that. thanks.&lt;/p&gt;</comment>
                            <comment id="12772866" author="rhillegas" created="Tue, 3 Nov 2009 03:44:55 +0000"  >&lt;p&gt;Thanks, Mamta. Looks good.&lt;/p&gt;</comment>
                            <comment id="12773068" author="rhillegas" created="Tue, 3 Nov 2009 14:16:51 +0000"  >&lt;p&gt;Attaching derby-4357-04-aa-moreTests.diff, which adds some more tests for restricted vtis. Committed at subversion revision 832423.&lt;/p&gt;</comment>
                            <comment id="13685126" author="knutanders" created="Mon, 17 Jun 2013 10:19:06 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12444938">DERBY-4507</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12423473" name="RestrictedTableFunctions.html" size="81619" author="rhillegas" created="Wed, 28 Oct 2009 18:01:13 +0000"/>
                            <attachment id="12420372" name="RestrictedTableFunctions.html" size="74650" author="rhillegas" created="Wed, 23 Sep 2009 14:40:16 +0100"/>
                            <attachment id="12419310" name="RestrictedTableFunctions.html" size="74284" author="rhillegas" created="Fri, 11 Sep 2009 15:41:46 +0100"/>
                            <attachment id="12418665" name="RestrictedTableFunctions.html" size="73210" author="rhillegas" created="Fri, 4 Sep 2009 20:51:30 +0100"/>
                            <attachment id="12418167" name="RestrictedTableFunctions.html" size="70113" author="rhillegas" created="Mon, 31 Aug 2009 19:34:23 +0100"/>
                            <attachment id="12422380" name="derby-4357-01-aa-publicAPI.diff" size="14688" author="rhillegas" created="Fri, 16 Oct 2009 18:47:25 +0100"/>
                            <attachment id="12423480" name="derby-4357-02-ac-passThrough.diff" size="48903" author="rhillegas" created="Wed, 28 Oct 2009 18:56:23 +0000"/>
                            <attachment id="12423609" name="derby-4357-02-ad-passThrough.diff" size="57254" author="rhillegas" created="Thu, 29 Oct 2009 19:57:38 +0000"/>
                            <attachment id="12423701" name="derby-4357-03-aa-hashjoin.diff" size="16618" author="rhillegas" created="Fri, 30 Oct 2009 18:23:34 +0000"/>
                            <attachment id="12423920" name="derby-4357-04-aa-moreTests.diff" size="1774" author="rhillegas" created="Tue, 3 Nov 2009 14:16:51 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 24 Aug 2009 19:10:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31206</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0o53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37729</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>