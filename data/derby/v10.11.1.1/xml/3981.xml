<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:52:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3981/DERBY-3981.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3981] Improve distribution of hash codes in SQLBinary and SQLChar</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3981</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;SQLBinary.hashCode() and SQLChar.hashCode() use a very simple algorithm that just takes the sum of the values in the array. This gives a poor distribution of hash values because similar values will have a higher probability of mapping to the same hash code, and the higher bits won&apos;t be used unless the array is very long. We should change these methods so that they use an algorithm similar to the one used in java.lang.String.hashCode(), described here: &amp;lt;URL:&lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/lang/String.html#hashCode(&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/lang/String.html#hashCode(&lt;/a&gt;)&amp;gt;. This may have a positive effect on the performance of hash scans as it will reduce the likelihood of collisions in the hash table.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12410261">DERBY-3981</key>
            <summary>Improve distribution of hash codes in SQLBinary and SQLChar</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 9 Dec 2008 11:52:57 +0000</created>
                <updated>Tue, 30 Jun 2009 17:06:51 +0100</updated>
                            <resolved>Tue, 6 Jan 2009 12:52:44 +0000</resolved>
                                    <version>10.4.2.0</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12660289" author="knutanders" created="Fri, 2 Jan 2009 10:14:45 +0000"  >&lt;p&gt;Attaching a new JUnit performance test which tests SELECT DISTINCT performance. There is one test case which performs SELECT DISTINCT on a table with a non-indexed CHAR(5) column which contains all permutations of &apos;ABCDE&apos;. This is the worst case for the current hash function, as all the values will end up in the same bucket. The other test case performs the same test on a table with a CHAR(5) FOR BIT DATA column with the same distribution.&lt;/p&gt;</comment>
                            <comment id="12660290" author="knutanders" created="Fri, 2 Jan 2009 10:23:00 +0000"  >&lt;p&gt;Committed the performance test with revision 730689.&lt;/p&gt;</comment>
                            <comment id="12660303" author="knutanders" created="Fri, 2 Jan 2009 11:55:57 +0000"  >&lt;p&gt;Here&apos;s a patch which makes SQLBinary.hashCode() and SQLChar.hashCode() calculate the hash codes in a way more similar to java.lang.String.hashCode(). In fact, SQLChar.hashCode() should now return the same hash code as getString().substring(0,lastNonPadChar+1).hashCode().&lt;/p&gt;

&lt;p&gt;With these changes, the average time reported by SelectDistinctTest on my laptop went down from 6.6 seconds to 0.95 seconds on the CHAR(5) test, and from 2.7 seconds to 0.75 seconds on the CHAR(5) FOR BIT DATA test.&lt;/p&gt;

&lt;p&gt;I haven&apos;t run the regression tests on the patch yet.&lt;/p&gt;</comment>
                            <comment id="12660380" author="knutanders" created="Fri, 2 Jan 2009 20:24:15 +0000"  >&lt;p&gt;Derbyall and suites.All ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12661099" author="kristwaa" created="Tue, 6 Jan 2009 10:34:45 +0000"  >&lt;p&gt;The patch looks like a good improvement to me.&lt;br/&gt;
+1 to commit.&lt;/p&gt;

&lt;p&gt;A few questions:&lt;br/&gt;
 1) The hashcode isn&apos;t saved. Is this because of the reuse of the SQLChar object?&lt;br/&gt;
 2) Is the hashCode method invoked as part of normal Derby usage for Clobs?&lt;br/&gt;
    I&apos;m asking because SQLClob inherits the hashCode method of SQLChar, which causes the value to be materialized.&lt;br/&gt;
 3) Not a question, but we are overriding both equals and hashCode. For SQLChar I believe the relationship between the two methods is correct (i.e. two equal objects must have the same hashcode, pad characters are &quot;ignored&quot; in both methods).&lt;/p&gt;</comment>
                            <comment id="12661106" author="knutanders" created="Tue, 6 Jan 2009 11:24:22 +0000"  >&lt;p&gt;Thanks for looking at the patch, Kristian. Please see my answers to&lt;br/&gt;
your questions below.&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) The hashcode isn&apos;t saved. Is this because of the reuse of the&lt;br/&gt;
&amp;gt; SQLChar object?&lt;/p&gt;

&lt;p&gt;It should be possible to save the hash code in a field and reset it&lt;br/&gt;
when the SQLChar is reused. (Same goes for SQLBinary, I believe.) I&lt;br/&gt;
don&apos;t think caching it will have any effect on the performance of the&lt;br/&gt;
SELECT DISTINCT test, since hashCode() should only be called once on&lt;br/&gt;
each object when they are inserted into the hash table. There may be&lt;br/&gt;
other cases where hashCode() is called many times on the same object,&lt;br/&gt;
though, so it might have a positive effect for some queries. I didn&apos;t&lt;br/&gt;
change this since the old code also had to loop through the entire&lt;br/&gt;
underlying array, so the need for caching shouldn&apos;t be much changed by&lt;br/&gt;
the patch. Another thing to consider is that adding a field to a data&lt;br/&gt;
type class increases the object size as reported by&lt;br/&gt;
org.apache.derby.iapi.services.cache.ClassSize and makes it (slightly)&lt;br/&gt;
less likely that the optimizer chooses a hash join strategy.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) Is the hashCode method invoked as part of normal Derby usage for&lt;br/&gt;
&amp;gt;    Clobs?  I&apos;m asking because SQLClob inherits the hashCode method&lt;br/&gt;
&amp;gt;    of SQLChar, which causes the value to be materialized.&lt;/p&gt;

&lt;p&gt;No, I don&apos;t think so. When I looked at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3975&quot; title=&quot;SELECT DISTINCT may return duplicates with territory-based collation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3975&quot;&gt;&lt;del&gt;DERBY-3975&lt;/del&gt;&lt;/a&gt; (see comment made on&lt;br/&gt;
17/Dec/08) I concluded that clob (and long varchar) columns couldn&apos;t&lt;br/&gt;
be compared without casting them to another data type (like char or&lt;br/&gt;
varchar) first, so hashCode(), equals() and compareTo() are not called&lt;br/&gt;
on SQLClob.&lt;/p&gt;

&lt;p&gt;&amp;gt; 3) Not a question, but we are overriding both equals and&lt;br/&gt;
&amp;gt;  hashCode. For SQLChar I believe the relationship between the two&lt;br/&gt;
&amp;gt;  methods is correct (i.e. two equal objects must have the same&lt;br/&gt;
&amp;gt;  hashcode, pad characters are &quot;ignored&quot; in both methods).&lt;/p&gt;

&lt;p&gt;Right. And SQLBinary.equals() uses SQLBinary.compare() which also&lt;br/&gt;
ignores trailing pad bytes (0x20). Note however that the original&lt;br/&gt;
SQLBinary.hashCode() ignored all occurrences of pad bytes, whereas the&lt;br/&gt;
new implementation only ignores trailing pad bytes.&lt;/p&gt;</comment>
                            <comment id="12661115" author="knutanders" created="Tue, 6 Jan 2009 12:52:44 +0000"  >&lt;p&gt;Committed revision 731929.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12397016" name="d3981.diff" size="3185" author="knutanders" created="Fri, 2 Jan 2009 11:55:57 +0000"/>
                            <attachment id="12397015" name="distinct-test.diff" size="7374" author="knutanders" created="Fri, 2 Jan 2009 10:14:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 6 Jan 2009 10:34:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31079</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0uj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38764</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>