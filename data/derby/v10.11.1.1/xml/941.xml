<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:48:19 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-941/DERBY-941.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-941] Add JDBC4 support for Statement Events</title>
                <link>https://issues.apache.org/jira/browse/DERBY-941</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;As described in the JDBC 4 spec, sections 11.2, 11.7,  and 3.1.&lt;/p&gt;

&lt;p&gt;These are the methods which let app servers listen for connection and statement closure and invalidation events.&lt;/p&gt;

&lt;p&gt;Section 11.2 of the JDBC 4 spec explains connection events: Connection pool managers which implement the ConnectionEventListener interface can register themselves to listen for  &quot;connectionClosed&quot; and fatal &quot;connectionErrorOccurred&quot; events. App servers can use these events to help them manage the recycling of connections back to the connection pool.&lt;/p&gt;

&lt;p&gt;Section 11.7 of the JDBC 4 spec explains statement events: Statement pools which implement StatementEventListener can register themselves to listen for &quot;statementClosed&quot; and &quot;statementErrorOccurred&quot; events. Again, this helps statement pools manage the recycling of statements back to the pool.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12328825">DERBY-941</key>
            <summary>Add JDBC4 support for Statement Events</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="narayanan">V.Narayanan</assignee>
                                    <reporter username="rhillegas">Rick Hillegas</reporter>
                        <labels>
                    </labels>
                <created>Sat, 11 Feb 2006 04:47:54 +0000</created>
                <updated>Wed, 1 Jul 2009 01:34:29 +0100</updated>
                            <resolved>Thu, 4 May 2006 18:00:01 +0100</resolved>
                                    <version>10.0.2.0</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12366224" author="rhillegas" created="Tue, 14 Feb 2006 03:26:54 +0000"  >&lt;p&gt;Concerning connection events, here is Section 11.2 of the JDBC 4 spec:&lt;/p&gt;

&lt;p&gt;70 JDBC 4.0 Specification ? October 2005&lt;br/&gt;
11.2 Connection Events&lt;br/&gt;
Recall that when an application calls the method Connection.close, the&lt;br/&gt;
underlying physical connection?the PooledConnection object?is available for&lt;br/&gt;
reuse. JavaBeans-style events are used to notify the connection pool manager (the&lt;br/&gt;
application server) that a PooledConnection object can be recycled.&lt;br/&gt;
In order to be notified of an event on a PooledConnection object, the connection&lt;br/&gt;
pool manager must implement the ConnectionEventListener interface and then&lt;br/&gt;
be registered as a listener by that PooledConnection object. The&lt;br/&gt;
ConnectionEventListener interface defines the following two methods, which&lt;br/&gt;
correspond to the two kinds of events that can occur on a PooledConnection&lt;br/&gt;
object:&lt;br/&gt;
? connectionClosed ? triggered when the logical Connection object associated&lt;br/&gt;
with this PooledConnection object is closed, that is, the application called the&lt;br/&gt;
method Connection.close&lt;br/&gt;
? connectionErrorOccurred ? triggered when a fatal error, such as the server&lt;br/&gt;
crashing, causes the connection to be lost&lt;br/&gt;
A connection pool manager registers itself as a listener for a PooledConnection&lt;br/&gt;
object using the PooledConnection.addConnectionEventListener method.&lt;br/&gt;
Typically, a connection pool manager registers itself as a&lt;br/&gt;
ConnectionEventListener before returning a Connection object to an&lt;br/&gt;
application.&lt;br/&gt;
The driver invokes the ConnectionEventListener methods&lt;br/&gt;
connectionClosed and connectionErrorOccurred when the corresponding&lt;br/&gt;
events occur. Both methods take a ConnectionEvent object as a parameter, which&lt;br/&gt;
can be used to determine which PooledConnection object was closed or had an&lt;br/&gt;
error. When the JDBC application closes its logical connection, the JDBC driver&lt;br/&gt;
notifies the connection pool manager (the listener) by calling the listener&apos;s&lt;br/&gt;
implementation of the method connectionClosed. At this point, the connection&lt;br/&gt;
pool manager can return the PooledConnection object to the pool for reuse.&lt;br/&gt;
When an error occurs, the JDBC driver notifies the listener by calling its&lt;br/&gt;
connectionErrorOccurred method and then throws an SQLException object to&lt;br/&gt;
the application to notify it of the same error. In the event of a fatal error, the bad&lt;br/&gt;
PooledConnection object is not returned to the pool. Instead, the connection pool&lt;br/&gt;
manager calls the PooledConnection.close method on the PooledConnection&lt;br/&gt;
object to close the physical connection.&lt;/p&gt;

&lt;p&gt;Concerning statement events, here is section 11.7 of the JDBC4 spec:&lt;/p&gt;

&lt;p&gt;11.7 Statement Events&lt;br/&gt;
If the connection pool manager supports Statement pooling for&lt;br/&gt;
PreparedStatement objects, it must implement the StatementEventListener&lt;br/&gt;
interface and then be registered as a listener by that PooledConnection object. The&lt;br/&gt;
StatementEventListener interface defines the following two methods, which&lt;br/&gt;
correspond to the two kinds of events that can occur on a PreparedStatement&lt;br/&gt;
object:&lt;br/&gt;
? statementClosed ? triggered when the logical PreparedStatement object&lt;br/&gt;
associated with this PooledConnection object is closed, that is, the application&lt;br/&gt;
called the method PreparedStatement.close&lt;br/&gt;
? statementErrorOccurred ? triggered when a JDBC driver determines that a&lt;br/&gt;
PreparedStatement object is no longer valid&lt;br/&gt;
A connection pool manager registers itself as a listener for a PreparedStatement&lt;br/&gt;
object using the PooledConnection.addStatementEventListener method.&lt;br/&gt;
Typically, a connection pool manager registers itself as a&lt;br/&gt;
StatementEventListener before returning a PreparedStatement object to an&lt;br/&gt;
application.&lt;br/&gt;
The driver invokes the StatementEventListener methods statementClosed&lt;br/&gt;
and statementErrorOccurred when the corresponding events occur. Both&lt;br/&gt;
methods take a statementEvent object as a parameter, which can be used to&lt;br/&gt;
determine which PreparedStatement object was closed or had an error. When the&lt;br/&gt;
JDBC application closes its logical prepared statement, the JDBC driver notifies the&lt;br/&gt;
connection pool manager (the listener) by calling the listener&apos;s implementation of the&lt;br/&gt;
method statementClosed. At this point, the connection pool manager can return&lt;br/&gt;
the PreparedStatement object to the pool for reuse.&lt;br/&gt;
When an error occurs that makes a PreparedStatement object invalid, the JDBC&lt;br/&gt;
driver notifies the listener by calling its statementErrorOccurred method and&lt;br/&gt;
then throws an SQLException object to the application to notify it of the same error.&lt;/p&gt;</comment>
                            <comment id="12373604" author="narayanan" created="Fri, 7 Apr 2006 18:40:28 +0100"  >&lt;p&gt;This patch is not intended for submission but is a request for comments on the work done so far in this area on the embedded side&lt;/p&gt;

</comment>
                            <comment id="12373607" author="narayanan" created="Fri, 7 Apr 2006 18:49:44 +0100"  >&lt;p&gt;please note that this patch has a dependency on derby-1137&lt;/p&gt;</comment>
                            <comment id="12373707" author="rhillegas" created="Sat, 8 Apr 2006 10:09:37 +0100"  >&lt;p&gt;Hi Narayanan,&lt;/p&gt;

&lt;p&gt;Thanks for the patch and the accompanying explanation page. One issue: EmbeddedConnectionPoolDataSource40 needs javadoc.&lt;/p&gt;</comment>
                            <comment id="12373850" author="narayanan" created="Mon, 10 Apr 2006 22:44:05 +0100"  >&lt;p&gt;Hi Rick,&lt;br/&gt;
Thank you for going through the patch. The class EmbeddedConnectionPoolDataSource40 is being added as part of derby-1137. I wanted to use the method getPooledConnection() method in EmbedConnectionPoolDataSource40 which will override the existing method in EmbedConnectionPoolDataSource to return a PooledConnection40 object. Since the refractoring of these classes were going on I added a implementation to my patch to basically demonstrate how the patch will look like once 1137 is through. &lt;/p&gt;

&lt;p&gt;please note that this patch has been added to get comments on my solution and to ensure that I am progressing in the right direction as far my solution is concerned. This patch is not ready for commit as yet&lt;/p&gt;

&lt;p&gt;Narayanan&lt;/p&gt;</comment>
                            <comment id="12374333" author="rhillegas" created="Thu, 13 Apr 2006 22:00:22 +0100"  >&lt;p&gt;Hi Narayanan: Now that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1163&quot; title=&quot;Add jdbc4.0 implementation of EmbedPooledConnection and EmbedXAConnection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1163&quot;&gt;&lt;del&gt;DERBY-1163&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1137&quot; title=&quot;Implement the new method introduced in CommonDataSource for Embedded Driver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1137&quot;&gt;&lt;del&gt;DERBY-1137&lt;/del&gt;&lt;/a&gt; are committed, is this patch ready for committing? Thanks-Rick&lt;/p&gt;</comment>
                            <comment id="12374379" author="rhillegas" created="Fri, 14 Apr 2006 01:35:18 +0100"  >&lt;p&gt;Hi Narayanan,&lt;/p&gt;

&lt;p&gt;I&apos;m afraid that I can&apos;t apply this patch. I think it might have been garbled when you uploaded it. Could you retry uploading it? Thanks-Rick&lt;/p&gt;</comment>
                            <comment id="12374600" author="narayanan" created="Sat, 15 Apr 2006 15:08:02 +0100"  >&lt;p&gt;Hi Rick,&lt;br/&gt;
Thank you for the reviews of this patch. The class EmbeddedConnectionPoolDataSource40 ,which ,has been added as part of 1137 is also present in this patch which as indicated by a class level comment in this patch is a dummy implementation which was to be removed after the commit of 1137. I am on this one. I will do this re-submit the patch again&lt;br/&gt;
thanx&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12374754" author="narayanan" created="Mon, 17 Apr 2006 22:20:59 +0100"  >&lt;p&gt;Primary change has been to the class org.apache.derbyTesting.functionTests.util.TestUtil&lt;/p&gt;

&lt;p&gt;The getConnectionPoolDataSource() method had to be changed to return either EmbedConnectionPoolDataSource or EmbedConnectionPoolDataSource40 depending&lt;br/&gt;
on the jdk version under use.&lt;/p&gt;

&lt;p&gt;I have moved the code for determining whether we need to use a 40 class to the method checkForJDBC40Implementation this method returns a String representing the correct name of the class to be used.&lt;/p&gt;

&lt;p&gt;I have changed the constant UNABLE_TO_UNWRAP in SQLConstants.java to hold the value &quot;XJ128&quot; instead of the existing &quot;XJ120&quot; to allow the jdbc4 tests to run correctly. This is causing failures in the jdbc4 tests currently. Once&lt;br/&gt;
this issue is fixed it can be removed from this patch also.&lt;/p&gt;

&lt;p&gt;thanx&lt;br/&gt;
Narayanan&lt;/p&gt;


</comment>
                            <comment id="12374821" author="rhillegas" created="Tue, 18 Apr 2006 06:19:45 +0100"  >&lt;p&gt;Committed statementeventlisteners_embedded_v2.diff at subversion revision 394788. Derbyall runs cleanly modulo the wisconsin diffs. The jdbc4 tests pass modulo the pre-existing problem in TestResultSetMethods.&lt;/p&gt;</comment>
                            <comment id="12374886" author="knutanders" created="Tue, 18 Apr 2006 17:35:33 +0100"  >&lt;p&gt;I have read what the spec says about statement event listeners, but it&lt;br/&gt;
is still not quite clear to me how they are supposed to work.&lt;/p&gt;

&lt;p&gt;The javadoc for StatementEventListener.statementErrorOccurred() says:&lt;/p&gt;

&lt;p&gt;  The driver calls this method on all StatementEventListeners&lt;br/&gt;
  registered on the connection when it detects that a&lt;br/&gt;
  PreparedStatement is invalid. The driver calls this method just&lt;br/&gt;
  before it throws the SQLException, contained in the given event, to&lt;br/&gt;
  the application.&lt;/p&gt;

&lt;p&gt;Does this mean that no more than one statementErrorOccurred event&lt;br/&gt;
should be sent per PreparedStatement? I think so, since the statement&lt;br/&gt;
becomes invalid once, right?&lt;/p&gt;

&lt;p&gt;I&apos;m also not sure exactly how one determines that a statement is&lt;br/&gt;
invalid. It seems like checkStatementValidity() considers a statement&lt;br/&gt;
invalid when it sees an SQLSTATE in class 42 (syntax error or access&lt;br/&gt;
rule violation).&lt;/p&gt;

&lt;p&gt;I wrote a test program (ListenerTest.java) which does the following:&lt;/p&gt;

&lt;p&gt;  1. create table &quot;mytable&quot;&lt;br/&gt;
  2. prepare statement &quot;select * from mytable&quot;&lt;br/&gt;
  3. execute prepared statement&lt;br/&gt;
  4. drop table &quot;mytable&quot;&lt;br/&gt;
  5. execute prepared statement&lt;br/&gt;
  6. execute prepared statement&lt;br/&gt;
  7. recreate table &quot;mytable&quot;&lt;br/&gt;
  8. execute prepared statement&lt;br/&gt;
  9. close prepared statement&lt;/p&gt;

&lt;p&gt;I get an exception and an error-occurred event in step 5 and step 6,&lt;br/&gt;
and a closed event in step 9.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what I should expect, but what puzzles me is&lt;/p&gt;

&lt;p&gt;  1) I get two error-occurred events on the same statement (that is,&lt;br/&gt;
     I&apos;m told twice that the statement is invalid)&lt;/p&gt;

&lt;p&gt;  2) Even though I&apos;m told that the statement is invalid, I&apos;m able to&lt;br/&gt;
     execute it successfully in step 8&lt;/p&gt;</comment>
                            <comment id="12374888" author="anurag" created="Tue, 18 Apr 2006 17:57:36 +0100"  >&lt;p&gt;Statement Event Listener  is expected to be used by Statement pooling.&lt;br/&gt;
Nothing stops a regular application of add use this but section 11.7 hints about it. My understanding is that the statement pool will use this even to drop the statement from the pool and there won&apos;t be any question of the invalid statement being used again. In case it does most probably its a faulty implementation of pooling. The spec and api says the even should be raised when the driver detects the statment is invalid and before throwing the exception. I don&apos;t see why it can&apos;t be thrown twise.&lt;/p&gt;

&lt;p&gt;Your 2nd point its quite interresting doe that scenario ment the statement was never invalid ?&lt;/p&gt;</comment>
                            <comment id="12374914" author="knutanders" created="Tue, 18 Apr 2006 20:01:46 +0100"  >&lt;p&gt;Hi Anurag,&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if the statement was invalid. That, I guess, depends on&lt;br/&gt;
the definition of invalid (you could perhaps say it was temporarily&lt;br/&gt;
invalid). The javadoc for StatementEventListener refers to a similar&lt;br/&gt;
situation:&lt;/p&gt;

&lt;p&gt;  For some databases, a statement becomes invalid if a DDL operation&lt;br/&gt;
  is performed that affects the table. For example an application may&lt;br/&gt;
  create a temporary table to do some work on the table and then&lt;br/&gt;
  destroy it. It may later recreate the same table when it is needed&lt;br/&gt;
  again. Some databases will invalidate any prepared statements that&lt;br/&gt;
  reference the temporary table when the table is dropped.&lt;/p&gt;

&lt;p&gt;Since Derby allows you to use the same prepared statement after the&lt;br/&gt;
table is recreated, I would say that the statement was not invalid,&lt;br/&gt;
and that a statementErrorOccurred event should not be raised.&lt;/p&gt;

&lt;p&gt;Maybe prepared statements are invalidated only when the connection&lt;br/&gt;
fails or the statement is closed?&lt;/p&gt;</comment>
                            <comment id="12374933" author="narayanan" created="Tue, 18 Apr 2006 21:22:14 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
thanx for the comments!&lt;/p&gt;

&lt;p&gt;1) In the example we are waiting for the affect of the Delete table operation to be undone by the create operation before the PreparedStatement &lt;br/&gt;
    becomes usable again. Is&apos;nt this a special case where the DDL undoes the operation of an earlier DDL? What if the create table did not happen at &lt;br/&gt;
    all? Then would&apos;nt the PreparedStatement remain invalid?&lt;/p&gt;

&lt;p&gt;2)  There are two cases for this Error Occurred Event as I see it&lt;/p&gt;

&lt;p&gt;      a) Assume that the ConnectionPoolManager which has registered itself to listen to statement events is actually doing what is mentioned as part of   &lt;br/&gt;
           the javadoc comment (i.e.) creating a temporary table in this case it can catch the error occurred event check the content to see the &lt;br/&gt;
           PreparedStatement and also the SQLException object contained within the StatementEvent (which would indicate the reason for occurrence &lt;br/&gt;
           of the event) and if it occurred because of non-existence of the temporary table ignore it.&lt;/p&gt;

&lt;p&gt;        b) In the case that the ConnectionPoolManager has not created a temporary table and it is a genuine case of a invalid PreparedStatement it needs&lt;br/&gt;
             to know it can make use of the error occurred event that is raised.&lt;/p&gt;

&lt;p&gt;        Thus throwing a error occurred event would allow the ConnectionPoolManager to decide what needs to happen&lt;/p&gt;

&lt;p&gt;Narayanan&lt;/p&gt;</comment>
                            <comment id="12374937" author="narayanan" created="Tue, 18 Apr 2006 21:36:55 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
We are throwing the error occurred event only upon doing an execute on the PreparedStatement. If the ConnectionPoolManager did know that the temporary table or the table used in the PreparedStatement or in the generalized case knew of a DDL invalidating a PreparedStatement why would it do a execute on the PreparedStatement? Does&apos;nt this qualify as a faulty Pooling implementation? If it were using a temporary table it would  do an execute only during the time that the temporary table exists.&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12375102" author="knutanders" created="Wed, 19 Apr 2006 20:11:05 +0100"  >&lt;p&gt;&amp;gt; V.Narayanan commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-941&quot; title=&quot;Add JDBC4 support for Statement Events&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-941&quot;&gt;&lt;del&gt;DERBY-941&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; -----------------------------------&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Hi,&lt;br/&gt;
&amp;gt; thanx for the comments!&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; 1) In the example we are waiting for the affect of the Delete table&lt;br/&gt;
&amp;gt; operation to be undone by the create operation before the&lt;br/&gt;
&amp;gt; PreparedStatement becomes usable again. Is&apos;nt this a special case&lt;br/&gt;
&amp;gt; where the DDL undoes the operation of an earlier DDL?&lt;/p&gt;

&lt;p&gt;Maybe. It&apos;s probably a special case that the table is dropped and the&lt;br/&gt;
statement is re-executed too, but it&apos;s still a case...&lt;/p&gt;

&lt;p&gt;&amp;gt; What if the create table did not happen at all? Then would&apos;nt the&lt;br/&gt;
&amp;gt; PreparedStatement remain invalid?&lt;/p&gt;

&lt;p&gt;That depends on how &quot;invalid&quot; is defined, but the way I read the&lt;br/&gt;
javadoc for StatementEventListener, it is seems like the spec&lt;br/&gt;
considers the statement as valid, since it is not necessarily unusable&lt;br/&gt;
in the future.&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) There are two cases for this Error Occurred Event as I see it&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;       a) Assume that the ConnectionPoolManager which has registered&lt;br/&gt;
&amp;gt;       itself to listen to statement events is actually doing what is&lt;br/&gt;
&amp;gt;       mentioned as part of the javadoc comment (i.e.) creating a&lt;br/&gt;
&amp;gt;       temporary table in this case it can catch the error occurred&lt;br/&gt;
&amp;gt;       event check the content to see the PreparedStatement and also&lt;br/&gt;
&amp;gt;       the SQLException object contained within the StatementEvent&lt;br/&gt;
&amp;gt;       (which would indicate the reason for occurrence of the event)&lt;br/&gt;
&amp;gt;       and if it occurred because of non-existence of the temporary&lt;br/&gt;
&amp;gt;       table ignore it.&lt;/p&gt;

&lt;p&gt;In that case, the connection pool manager needs knowledge about how&lt;br/&gt;
the tables are used and whether the database invalidates statements on&lt;br/&gt;
DDL operations. I don&apos;t think we can expect the manager to have such&lt;br/&gt;
knowledge.&lt;/p&gt;

&lt;p&gt;&amp;gt;       b) In the case that the ConnectionPoolManager has not created&lt;br/&gt;
&amp;gt;       a temporary table and it is a genuine case of a invalid&lt;br/&gt;
&amp;gt;       PreparedStatement it needs to know it can make use of the&lt;br/&gt;
&amp;gt;       error occurred event that is raised.&lt;br/&gt;
&amp;gt;        &lt;br/&gt;
&amp;gt;       Thus throwing a error occurred event would allow the&lt;br/&gt;
&amp;gt;       ConnectionPoolManager to decide what needs to happen&lt;/p&gt;

&lt;p&gt;Again, I don&apos;t think the connection pool manager has enough&lt;br/&gt;
information to decide this. It is the application that creates and&lt;br/&gt;
accesses the table. The manager just does what the application tells&lt;br/&gt;
it to do, and it has no way to find out whether the application will&lt;br/&gt;
recreate the table later.&lt;/p&gt;

&lt;p&gt;&amp;gt; We are throwing the error occurred event only upon doing an execute&lt;br/&gt;
&amp;gt; on the PreparedStatement. If the ConnectionPoolManager did know that&lt;br/&gt;
&amp;gt; the temporary table or the table used in the PreparedStatement or in&lt;br/&gt;
&amp;gt; the generalized case knew of a DDL invalidating a PreparedStatement&lt;br/&gt;
&amp;gt; why would it do a execute on the PreparedStatement? Does&apos;nt this&lt;br/&gt;
&amp;gt; qualify as a faulty Pooling implementation? If it were using a&lt;br/&gt;
&amp;gt; temporary table it would do an execute only during the time that the&lt;br/&gt;
&amp;gt; temporary table exists.  Narayanan&lt;/p&gt;

&lt;p&gt;No, I don&apos;t think this means the pool manager is faulty. It is the&lt;br/&gt;
application, not the manager, that decides when it invokes execute().&lt;/p&gt;</comment>
                            <comment id="12375103" author="narayanan" created="Wed, 19 Apr 2006 20:33:56 +0100"  >&lt;p&gt;Hi knut,&lt;br/&gt;
thanx again for the comments!&lt;/p&gt;

&lt;p&gt;I see ur point. Getting the StatementErrorOccured event would mean that the ConnectionPoolManager will invalidate the PreparedStatement thus rendering it unusable to the overlying application. But then the application could have actually used the PreparedStatement again considering the fact that it still remains valid. &lt;/p&gt;

&lt;p&gt;seems like we should&apos;nt be throwing the error occurred event in this case&lt;/p&gt;

&lt;p&gt;will wait until tommorrow to give people time to comment on this issue. If I don&apos;t receive any comments I am going ahead with removing this case&lt;/p&gt;

&lt;p&gt;thanx once again for ur patient answers,&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376054" author="narayanan" created="Mon, 24 Apr 2006 23:55:34 +0100"  >&lt;p&gt;Objectives of this patch&lt;br/&gt;
--------------------------------&lt;/p&gt;

&lt;p&gt;a) provide the imlementation for StatementEventListener methods in EmbedXAConnection40&lt;br/&gt;
b) Modify TestUtil.java to return EmbedXADataSource40 when running with mustang&lt;br/&gt;
c) remove testing for LSE_COMPILATION_PREFIX as hte prefix for the SQLState when throwing the Statement Error Occurred events.&lt;/p&gt;

&lt;p&gt;thanx&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376244" author="knutanders" created="Tue, 25 Apr 2006 20:37:49 +0100"  >&lt;p&gt;The patch looks good and the tests ran cleanly. I reindented some parts of the code, since they had twice as much indentation as the surrounding code (does your editor use tab width eight instead of four?).&lt;/p&gt;

&lt;p&gt;Committed revision 396859.&lt;/p&gt;</comment>
                            <comment id="12376246" author="narayanan" created="Tue, 25 Apr 2006 20:41:51 +0100"  >&lt;p&gt;Thanx for the commit! My sincere apologies for the indentation errors. No I have actually set it to a tab width of four. Anyway I will verify once more. &lt;br/&gt;
thanx once again&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376437" author="narayanan" created="Wed, 26 Apr 2006 17:13:42 +0100"  >&lt;p&gt;Attaching the patch for providing the StatementEventListeners support for the client side. Also please find attached a html doc describing the work done.&lt;br/&gt;
thanx &lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376479" author="knutanders" created="Wed, 26 Apr 2006 20:32:19 +0100"  >&lt;p&gt;Looks good, but I have some questions/comments:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Should ClientJDBCObjectFactory40.newPreparedStatement() have&lt;br/&gt;
  returned a PreparedStatement40 object instead of PreparedStatement?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;New field pooledConnnection_ in NetConnection is spelled incorrectly&lt;br/&gt;
  (three n&apos;s). It would also be good if it had a comment explaining&lt;br/&gt;
  what its purpose is.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;New field pooledConnection_ in PreparedStatement could be final, I&lt;br/&gt;
  think.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Javadoc for ClientPooledConnection.onStatementErrorOccurred() is&lt;br/&gt;
  identical to onStatementClose().&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Javadoc for ClientPooledConnection40.onStatementErrorOccurred()&lt;br/&gt;
  doesn&apos;t have @param tag for the second parameter.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Sentences in javadoc comments should start with a capital letter and&lt;br/&gt;
  end with a period, otherwise they are hard to read when the html is&lt;br/&gt;
  generated.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Many of the @param tags lack a description, or only the type of the&lt;br/&gt;
  parameter is put into the description.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The javadoc for many of the constructors of PreparedStatement and&lt;br/&gt;
  NetPreparedStatement start with &quot;It has the ClientPooledConnection&lt;br/&gt;
  as one of its parameters&quot;. It would be better if the first sentence&lt;br/&gt;
  said something about what the constructors do, since the first&lt;br/&gt;
  sentence used in the summary when generating html.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Two of the ClientJDBCObjectFactory.newPreparedStatement() methods&lt;br/&gt;
  have a double set of javadoc comments.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12376752" author="narayanan" created="Fri, 28 Apr 2006 00:11:25 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
Thank you for the thorough and detail review of the patch. I am addressing all the comments  and reattaching the patch. Please point out any issues that you see in the patch which I shall fix and resubmit.&lt;br/&gt;
thanx&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376896" author="knutanders" created="Fri, 28 Apr 2006 16:27:04 +0100"  >&lt;p&gt;Hi Narayanan, I&apos;m not able to apply your patch cleanly. Could you please resolve the conflicts and upload a new patch? Thanks.&lt;/p&gt;</comment>
                            <comment id="12376902" author="narayanan" created="Fri, 28 Apr 2006 17:16:17 +0100"  >&lt;p&gt;fixed it! patch submitted by V.Narayanan broke patch submitted by V.Narayanan &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; . patch for 1254 which got committed yesterday broke this one. I have fixed it now!&lt;/p&gt;

&lt;p&gt;Narayanan&lt;/p&gt;</comment>
                            <comment id="12376904" author="narayanan" created="Fri, 28 Apr 2006 17:23:46 +0100"  >&lt;p&gt;sorry for having made u go through the trouble of applying the broken patch.  Missed the conflict when I submitted the patches.&lt;br/&gt;
thanx &lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12376908" author="knutanders" created="Fri, 28 Apr 2006 17:52:51 +0100"  >&lt;p&gt;Thanks Narayanan! Your new patch addresses all my comments. I have started the tests, and will commit when they have finished.&lt;/p&gt;</comment>
                            <comment id="12376925" author="knutanders" created="Fri, 28 Apr 2006 20:47:10 +0100"  >&lt;p&gt;I get this diff when running the jdbc40 suite with DerbyNetClient:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;Diff file jdbc40/DerbyNetClient/jdbc40/StatementEventsTest.diff&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
			&lt;li&gt;Start: StatementEventsTest jdk1.6.0-beta2 DerbyNetClient jdbc40:jdbc40 2006-04-28 14:28:21 ***&lt;br/&gt;
0 add&lt;br/&gt;
&amp;gt; ..The Close Event did not occur&lt;br/&gt;
&amp;gt; The Error Event did not occur&lt;br/&gt;
Test Failed.&lt;/li&gt;
			&lt;li&gt;End:   StatementEventsTest jdk1.6.0-beta2 DerbyNetClient jdbc40:jdbc40 2006-04-28 14:28:28 ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12376930" author="narayanan" created="Fri, 28 Apr 2006 21:29:17 +0100"  >&lt;p&gt;Hi Knut, &lt;br/&gt;
&quot;why do I keep doing this to myself &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &quot;. Again a result of my patch for 1254. 1254 changes createNetConnection to use ClientJDBCObjectFactory to return an appropriate instance of NetConnection(or40).  I had to pass the reference to ClientPooledConnection to this method. I have done it in the attached patch. I have also attached the diff between the previous and the current patch.&lt;/p&gt;

&lt;p&gt;Please accept my humble apologies for the inconvinience caused.&lt;/p&gt;

&lt;p&gt;Narayanan&lt;/p&gt;</comment>
                            <comment id="12377568" author="narayanan" created="Wed, 3 May 2006 20:19:29 +0100"  >&lt;p&gt;Resolving earlier conflicts with 1235 and 1180 and submitting the patch again&lt;br/&gt;
thanx&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                            <comment id="12377758" author="knutanders" created="Thu, 4 May 2006 18:00:01 +0100"  >&lt;p&gt;Committed revision 399644.&lt;/p&gt;</comment>
                            <comment id="12377760" author="narayanan" created="Thu, 4 May 2006 18:13:04 +0100"  >&lt;p&gt;Thanx for the commit knut !&lt;br/&gt;
Narayanan&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12325486" name="ListenerTest.java" size="2964" author="knutanders" created="Tue, 18 Apr 2006 17:35:33 +0100"/>
                            <attachment id="12326016" name="diff_between_ver2_ver3.txt" size="315" author="narayanan" created="Fri, 28 Apr 2006 21:29:17 +0100"/>
                            <attachment id="12325881" name="statementeventlisteners_client.diff" size="63665" author="narayanan" created="Wed, 26 Apr 2006 17:13:42 +0100"/>
                            <attachment id="12325883" name="statementeventlisteners_client.html" size="7667" author="narayanan" created="Wed, 26 Apr 2006 17:13:42 +0100"/>
                            <attachment id="12325882" name="statementeventlisteners_client.stat" size="1491" author="narayanan" created="Wed, 26 Apr 2006 17:13:42 +0100"/>
                            <attachment id="12325958" name="statementeventlisteners_client_v1.diff" size="75337" author="narayanan" created="Fri, 28 Apr 2006 00:11:25 +0100"/>
                            <attachment id="12325959" name="statementeventlisteners_client_v1.stat" size="1491" author="narayanan" created="Fri, 28 Apr 2006 00:11:25 +0100"/>
                            <attachment id="12325996" name="statementeventlisteners_client_v2.diff" size="73614" author="narayanan" created="Fri, 28 Apr 2006 17:16:17 +0100"/>
                            <attachment id="12325997" name="statementeventlisteners_client_v2.stat" size="1421" author="narayanan" created="Fri, 28 Apr 2006 17:16:17 +0100"/>
                            <attachment id="12326014" name="statementeventlisteners_client_v3.diff" size="73693" author="narayanan" created="Fri, 28 Apr 2006 21:29:17 +0100"/>
                            <attachment id="12326015" name="statementeventlisteners_client_v3.stat" size="1421" author="narayanan" created="Fri, 28 Apr 2006 21:29:17 +0100"/>
                            <attachment id="12326199" name="statementeventlisteners_client_v4.diff" size="74301" author="narayanan" created="Wed, 3 May 2006 20:19:28 +0100"/>
                            <attachment id="12326200" name="statementeventlisteners_client_v4.stat" size="1421" author="narayanan" created="Wed, 3 May 2006 20:19:29 +0100"/>
                            <attachment id="12325042" name="statementeventlisteners_embedded.diff" size="27028" author="narayanan" created="Fri, 7 Apr 2006 18:40:28 +0100"/>
                            <attachment id="12325043" name="statementeventlisteners_embedded.stat" size="904" author="narayanan" created="Fri, 7 Apr 2006 18:40:28 +0100"/>
                            <attachment id="12325434" name="statementeventlisteners_embedded_v2.diff" size="25732" author="narayanan" created="Mon, 17 Apr 2006 22:20:59 +0100"/>
                            <attachment id="12325435" name="statementeventlisteners_embedded_v2.stat" size="871" author="narayanan" created="Mon, 17 Apr 2006 22:20:59 +0100"/>
                            <attachment id="12325772" name="statementeventlisteners_embedded_v3.diff" size="15540" author="narayanan" created="Mon, 24 Apr 2006 23:55:34 +0100"/>
                            <attachment id="12325773" name="statementeventlisteners_embedded_v3.stat" size="471" author="narayanan" created="Mon, 24 Apr 2006 23:55:34 +0100"/>
                            <attachment id="12325041" name="statementeventlisteners_embedded_ver1.html" size="11645" author="narayanan" created="Fri, 7 Apr 2006 18:40:28 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 7 Apr 2006 17:40:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29792</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0t5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38541</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>