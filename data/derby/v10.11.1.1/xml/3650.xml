<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:39:07 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3650/DERBY-3650.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3650] internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3650</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby + Hibernate JPA 3.2.1 problem on entity with Blob/Clob&lt;/p&gt;

&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I&apos;m using Derby in Client - Server mode with Hibernate JPA EJB 3.0.&lt;br/&gt;
When a query on an entity containing a Clob and some joins on other entites is executed, an exception with the following message is thrown:&lt;br/&gt;
  XJ073: The data in this BLOB or CLOB is no longer available.  The BLOB/CLOB&apos;s transaction may be committed, or its connection is closed.&lt;/p&gt;

&lt;p&gt;This problem occurs when the property &quot;hibernate.max_fetch_depth&quot; is greater than 0.&lt;br/&gt;
When hibernate.max_fetch_depth=0, the query works.&lt;/p&gt;

&lt;p&gt;If Derby is configured in embedded mode, the query works independently of the value of hibernate.max_fetch_depth.&lt;/p&gt;

&lt;p&gt;On the Hibernate&apos;s documentation, the advised value of hibernate.max_fetch_depth is 3.&lt;br/&gt;
Could you explain me if I made something wrong ?&lt;/p&gt;

&lt;p&gt;Thank you.&lt;br/&gt;
Stephane&lt;/p&gt;</description>
                <environment>Mac OSX 10.4&lt;br/&gt;
JDK 1.5.0_13&lt;br/&gt;
Hibernate EntityManager 3.2.1&lt;br/&gt;
</environment>
        <key id="12394964">DERBY-3650</key>
            <summary>internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="golgoth14">Golgoth 14</reporter>
                        <labels>
                            <label>derby_backport_reject_10_5</label>
                    </labels>
                <created>Tue, 29 Apr 2008 08:35:52 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:44 +0100</updated>
                            <resolved>Thu, 17 Feb 2011 21:49:11 +0000</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.3.0</version>
                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>Network Client</component>
                    <component>SQL</component>
                    <component>Store</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12592978" author="kristwaa" created="Tue, 29 Apr 2008 09:40:06 +0100"  >&lt;p&gt;Any chance you can provide a repro for this?&lt;/p&gt;

&lt;p&gt;Basically, a LOB is released when the method &apos;free&apos; is explicitly called on the LOB (requires Java SE 6.0), if a column is not accessed before moving off a row (i.e. you have a row with a Clob, but never access it with  getClob) or if the transaction is committed / rolled back.&lt;/p&gt;

&lt;p&gt;To determine if the LOB is released incorrectly, it would help a lot to have a working repro. This would also help determine if the problem is in another area of the code.&lt;br/&gt;
The first thing to verify, is that you are running with auto commit disabled.&lt;/p&gt;</comment>
                            <comment id="12593036" author="golgoth14" created="Tue, 29 Apr 2008 16:09:49 +0100"  >&lt;p&gt;I&apos;ve attached a test case.&lt;/p&gt;

&lt;p&gt;You should modify the value of the variable &quot;childrenCout&quot; into the method &quot;insertData&quot;.&lt;br/&gt;
If the value is about 10, the error not appear.&lt;br/&gt;
If the value is about 100 or 1000, the exception describe below is thrown.&lt;/p&gt;</comment>
                            <comment id="12593316" author="kristwaa" created="Wed, 30 Apr 2008 14:07:41 +0100"  >&lt;p&gt;Thank you for providing the repro.&lt;/p&gt;

&lt;p&gt;And what is the magic command to run the repro?&lt;br/&gt;
I&apos;m able to build it, but haven&apos;t figured out how to run it in a simple way...&lt;/p&gt;</comment>
                            <comment id="12593326" author="golgoth14" created="Wed, 30 Apr 2008 14:31:22 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Please, import the project into Eclipse.&lt;br/&gt;
You could generate the eclipse project with the maven command &quot;mvn eclipse:eclipse&quot;.&lt;/p&gt;

&lt;p&gt;Next, run the JUnit test called TestBlob.&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;run the command &quot;mvn test -DtestClassesDirectory=.\target\classes&quot;&lt;br/&gt;
under the directory &quot;...\mvn test -DtestClassesDirectory=.\target\classes&quot;&lt;/p&gt;</comment>
                            <comment id="12593332" author="kristwaa" created="Wed, 30 Apr 2008 15:08:06 +0100"  >&lt;p&gt;What makes you think I&apos;m using Eclipse? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I managed to get the repro running in NetBeans by generating a freeform project with Maven and then creating a &quot;Run class/file&quot; target.&lt;br/&gt;
The repro demonstrates the problem, and I guess the first thing to do is to figure out if the repro or Hibernate is doing something wrong or if Derby has a bug.&lt;/p&gt;

&lt;p&gt;BTW; I&apos;ll be away for two weeks.&lt;/p&gt;</comment>
                            <comment id="12593336" author="golgoth14" created="Wed, 30 Apr 2008 15:21:18 +0100"  >&lt;p&gt;On my previous comment, I&apos;ve added the Maven command to run the test without Eclipse &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I will perhaps post the same test case on the Hibernate Forum...&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
  Stephane&lt;/p&gt;</comment>
                            <comment id="12593397" author="kristwaa" created="Wed, 30 Apr 2008 19:25:25 +0100"  >&lt;p&gt;My early suspicions pointed at the new release mechanism to avoid LOB locators piling up in the server, eventually leading to an OOME before the problem was fix.&lt;br/&gt;
Following this trail led me to the cause of the bug. &lt;/p&gt;

&lt;p&gt;When a new Clob is created,  a store stream that has already been closed is passed in to the EmbedClob constructor.&lt;br/&gt;
The stream has been closed by EmbedClob.free (the Clob being represented as a StoreStreamClob). Derby fails at EmbedClob:153, more specifically in OverflowInputStream:155. Here it detects that there is no active transaction, which indicates a commit or rollback has taken place. However, I think that is a red herring.&lt;/p&gt;

&lt;p&gt;Further investigation made it clear that in the case of the data generation script in the original repro, you need childrenCout to be 19 (or higher) to provoke the error.&lt;br/&gt;
Making the original join query less verbose, gives:&lt;br/&gt;
SELECT&lt;br/&gt;
    Nm_Data&lt;br/&gt;
FROM&lt;br/&gt;
    Tbl_T4 inner join Tbl_T2 on Tbl_T4.Id_T2=Tbl_T2.Id&lt;br/&gt;
                        left outer join Tbl_T1 on Tbl_T2.Id_T1=Tbl_T1.Id&lt;br/&gt;
WHERE Tbl_T4.Id_T3=?&lt;/p&gt;

&lt;p&gt;If you allow the LOB release mechanism to release a Clob, the bug occurs because all rows in the result set points to the same Clob data.&lt;br/&gt;
I made a smaller repro, you have to run the original one first to create the data or download the zipped db. Feel free to improve it, I was a bit short on time to extract the data generation and add proper comments...&lt;/p&gt;

&lt;p&gt;The question is, where and how should this problem be fixed?&lt;/p&gt;</comment>
                            <comment id="12593413" author="kmarsden" created="Wed, 30 Apr 2008 20:18:00 +0100"  >&lt;p&gt;Attached is Derby3650EmbeddedRepro that shows the same problem with embedded if the clob is explicitly freed.&lt;/p&gt;</comment>
                            <comment id="12593431" author="kmarsden" created="Wed, 30 Apr 2008 21:15:17 +0100"  >&lt;p&gt;I tried making a standalone repro by having a clob table with one row and returning it as two rows in the result set, with&lt;br/&gt;
SELECT * FROM TAB UNION ALL SELECT * FROM TAB&lt;/p&gt;

&lt;p&gt;but that case seemed to work ok. There must be something different going on with the query in the repro.&lt;/p&gt;

</comment>
                            <comment id="12593581" author="kmarsden" created="Thu, 1 May 2008 18:08:18 +0100"  >&lt;p&gt;Attached is a full repro of the issue with embedded (explicit free) without the testdb.  We just had to do a left outer join that returned the same clob twice.&lt;/p&gt;</comment>
                            <comment id="12593618" author="kmarsden" created="Thu, 1 May 2008 20:49:01 +0100"  >&lt;p&gt;Here is the UnionAll case that works fine.  I want to understand why in this case we are able to return the same clob twice without problem but with the left outer join we have trouble.  Does it materialize the clob in the  union all case or is there something else going on?  I am not quite sure where in the code to look but am looking ...   Any advice is appreciated.&lt;/p&gt;


</comment>
                            <comment id="12593790" author="kristwaa" created="Fri, 2 May 2008 15:27:41 +0100"  >&lt;p&gt;I can&apos;t tell you where the decision is made, but I observe that in the two repros (UnionAll and Derby3650FullRepro) the behavior is different.&lt;br/&gt;
In the former one, the Clobs are created with different instances of FormatIdInputStream, whereas in the latter the same instance of FormatIdInputStream is passed to both Clobs.&lt;/p&gt;

&lt;p&gt;Maybe the next step would be to figure out why this difference occur.&lt;br/&gt;
I thought I saw a JIRA on this alredady, but note that you also get the same error by simply selecting the same LOB column twice.&lt;/p&gt;</comment>
                            <comment id="12593874" author="kmarsden" created="Fri, 2 May 2008 21:27:55 +0100"  >&lt;p&gt;For lack of a better idea where to look, I started looking at the FormatIdStream allocations for the Clob.  I saw that there was only one allocation for Derby3650FullRepro.java which happened on openCore() and two for UnionAll.java which happened on each of the next() calls.  Not sure if this is relevant but am attaching the traces in case someone is interested.&lt;/p&gt;</comment>
                            <comment id="12595004" author="mamtas" created="Wed, 7 May 2008 19:58:29 +0100"  >&lt;p&gt;I spent some time on this jira entry. In the test cases attached by Kathey,  Derby3650FullRepro.java  and UnionAll.java, there are 2 tables TAB and TAB2. There is one row in table TAB which has the CLOB column and 2 rows in table TAB2. It appears that for loj case, we are looking at TAB only once to get the CLOB and using that same row from TAB twice for the 2 rows returned from TAB2 but in case of union, it looks like we get the row from TAB twice once for each row in TAB2. I am not sure why there is a difference in how and when the row is fetched from TAB but may be explore that difference further more. May be in loj case, we should not free the CLOB so it can be reused. Not exactly sure but I thought I would share what I found.&lt;/p&gt;</comment>
                            <comment id="12595256" author="kmarsden" created="Thu, 8 May 2008 15:20:32 +0100"  >&lt;p&gt;I think I understand what is going on here.  In the join case we are doing a nested loop join, joining the left result set, (1 row with clob) with the right result set (2 rows), so essentially we do&lt;br/&gt;
for each row in left result set&lt;br/&gt;
    for each row in right result set&lt;br/&gt;
             form tuple.&lt;/p&gt;

&lt;p&gt;So we need to access the 1 row in the left result set twice, so freeing the clob  after the first row is returned is no good. Somehow, freeing the clob needs to be deferred in this case.  &lt;/p&gt;

&lt;p&gt;Note the same symptom occurs if we commit instead of calling clob.free() because commit also frees the clobs.&lt;/p&gt;
</comment>
                            <comment id="12595680" author="kmarsden" created="Fri, 9 May 2008 18:50:59 +0100"  >&lt;p&gt;I am really quite stuck on this issue.  Somehow we will need to defer the freeing of the lob until the result set is closed when it is used in a join if free or commit are called.  I tried simply nulling out the InternalClob in EmbedClob and adding a finalize method to StoreStreamClob to close the stream, thinking that in this way we could perhaps rely on garbage collection to close the stream after it is no longer referenced, but even with a forced gc() after closing the result set,  I saw failures in ClobTest.testLockingAfterFree, which indicates that there is still a reference to the stream until the end of the transaction.&lt;/p&gt;

&lt;p&gt;Perhaps this method would still work if I could figure out where the reference to the stream is and I could null that out too on free().  Then we could force a gc() on result set close.  Perhaps I am off track all together.  Does anyone know where else the stream is referenced or have any other ideas on this issue?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;




</comment>
                            <comment id="12596815" author="kmarsden" created="Wed, 14 May 2008 17:21:57 +0100"  >&lt;p&gt;Attaching one more case, Derby3650FullClientRepro which shows the regression from 10.2 to 10.3 caused by the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2892&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2892&quot;&gt;&lt;del&gt;DERBY-2892&lt;/del&gt;&lt;/a&gt;.  For client even without the free we fail,, because there is a free under the covers. This case passes with 10.2 or with soft upgrade to higher versions but fails with a new database for 10.3.3.0&lt;br/&gt;
java DerbyFullClientRepro&lt;br/&gt;
&amp;#8212; rs.next iteration 1&lt;br/&gt;
        Clob id : 1&lt;br/&gt;
&amp;#8212; rs.next iteration 2&lt;br/&gt;
        Clob id : 1&lt;br/&gt;
Exception in thread &quot;main&quot; java.sql.SQLException: The exception &apos;java.sql.SQLException: Java exception: &apos;Reached end-of-&lt;br/&gt;
stream prematurely, with 2 byte(s) to go: java.io.EOFException&apos;.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:96)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.getCharacterStream(Clob.java:349)&lt;br/&gt;
        at Derby3650FullClientRepro.main(Derby3650FullClientRepro.java:25)&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: The exception &apos;java.sql.SQLException: Java exception: &apos;Reached end-o&lt;br/&gt;
f-stream prematurely, with 2 byte(s) to go: java.io.EOFException&apos;.&apos; was thrown while evaluating an expression.&lt;br/&gt;
        at org.apache.derby.client.am.Statement.completeExecute(Statement.java:1601)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:322)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:106)&lt;br/&gt;
        at org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:75)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:179)&lt;br/&gt;
        at org.apache.derby.client.am.Statement.readExecuteCall(Statement.java:1567)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2139)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeX(PreparedStatement.java:1582)&lt;br/&gt;
        at org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(CallableLocatorProcedures.java:859)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.getLocatorLength(Clob.java:1050)&lt;br/&gt;
        at org.apache.derby.client.am.Lob.sqlLength(Lob.java:116)&lt;br/&gt;
        at org.apache.derby.client.am.Lob.checkForLocatorValidity(Lob.java:386)&lt;br/&gt;
        at org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.&amp;lt;init&amp;gt;(UpdateSensitiveClobLocatorReader.java:74)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.getCharacterStreamX(Clob.java:362)&lt;br/&gt;
        at org.apache.derby.client.am.Clob.getCharacterStream(Clob.java:340)&lt;br/&gt;
        ... 1 more&lt;br/&gt;
Caused by: org.apache.derby.client.am.SqlException: Java exception: &apos;Reached end-of-stream prematurely, with 2 byte(s) t&lt;br/&gt;
o go: java.io.EOFException&apos;.&lt;br/&gt;
        ... 16 more&lt;/p&gt;</comment>
                            <comment id="12596823" author="kmarsden" created="Wed, 14 May 2008 17:55:04 +0100"  >&lt;p&gt;I spoke briefly on IRC with Kristian regarding this bug and he suggested perhaps the right solution is for each lob to have its own &quot;store stream.&quot;  I don&apos;t know even if this would be a store change or a language change. Anyway, input from either area is welcome.  Even though the underlying embedded problem has been around, I think the client regression  is a likely hit by  users upgrading to 10.3.30 or 10.4, so it would be good to get it addressed as soon as possible, especially since we are encouraging aggressive upgrade.&lt;/p&gt;</comment>
                            <comment id="12596824" author="kmarsden" created="Wed, 14 May 2008 17:56:44 +0100"  >&lt;p&gt;The client regression is related to the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2892&quot; title=&quot;Closing a resultset after retrieving a large &amp;gt; 32665 bytes value with Network Server does not release locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2892&quot;&gt;&lt;del&gt;DERBY-2892&lt;/del&gt;&lt;/a&gt; fix, although the underlying embedded  problem has been there since free was introduced.&lt;/p&gt;</comment>
                            <comment id="12596958" author="mikem" created="Wed, 14 May 2008 23:04:53 +0100"  >&lt;p&gt;I am not sure of the solution, but thought I would share my understanding&lt;br/&gt;
of the stream and clob datatype support from store up through language&lt;br/&gt;
on the embedded side of the system - hoping to spark a discussion.&lt;br/&gt;
The more of these bugs that come up&lt;br/&gt;
makes me think that a number of things are working by accident and that&lt;br/&gt;
we just keep patching up the latest thing that crops up which then pushes&lt;br/&gt;
something else up later.  The main area of concern are cases where we&lt;br/&gt;
copy and or share references to a single column that may contain a stream.&lt;/p&gt;

&lt;p&gt;For this discussion I am going to concentrate on an embedded client not&lt;br/&gt;
using locators.&lt;/p&gt;

&lt;p&gt;The base use case is that language requests a column from store, which&lt;br/&gt;
reads the data into a datatype.  In this case the datatype of interest&lt;br/&gt;
is SQLClob, but the discussion is similar internally to all the types&lt;br/&gt;
that could support a stream representation (SQLChar, SQLVarchar, SQLClob,&lt;br/&gt;
SQLBlob, ...).  All these datatypes, internal to the datatype, can either&lt;br/&gt;
hold the data completely in memory at the point of exit from the store&lt;br/&gt;
routines or in the form of a stream which can be held unread until finally&lt;br/&gt;
getting to user.&lt;/p&gt;

&lt;p&gt;The initial decision of whether the state should be a stream or in memory&lt;br/&gt;
is first decided by the store layer.  Basically if the entire column data&lt;br/&gt;
resides on one page then the data is read into an array.  If the column&lt;br/&gt;
spans multiple pages then a stream is returned which knows how to traverse&lt;br/&gt;
the pages of the store to return the stream.  Subsequently the datatype&lt;br/&gt;
itself can decide to materialize the stream into memory, but code avoids this&lt;br/&gt;
as it may mean instantiating a 2GB blob in memory.&lt;/p&gt;

&lt;p&gt;The functionality of the stream is somewhat limited.  It is assumed single&lt;br/&gt;
user and can only be read from front to back.  It does support a reset&lt;br/&gt;
functionality which can rewind the stream back to the beginning.  The&lt;br/&gt;
stream keeps a buffer of the current page worth of data that has been&lt;br/&gt;
read.&lt;/p&gt;

&lt;p&gt;A number of issues stem from the system copying&lt;br/&gt;
references to streams rather than somehow making independent copies of&lt;br/&gt;
the streams.  For instance:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt; - during a 1 to many join, multiple rows end up with references to&lt;br/&gt;
             a single stream.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3646&quot; title=&quot;Embedded returns wrong results when selecting a blob column twice and using getBinaryStream()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3646&quot;&gt;&lt;del&gt;DERBY-3646&lt;/del&gt;&lt;/a&gt; - select of same clob twice in row leads to 2 references to same&lt;br/&gt;
             column.&lt;/p&gt;


&lt;p&gt;o If we want to continue the current usage then how are we going to manage&lt;br/&gt;
  multiple references to a single stream across rows?  The new free code&lt;br/&gt;
  adds problems here.  We have defined a lot of the other problems away&lt;br/&gt;
  with documenting we don&apos;t support stream references across rows.&lt;br/&gt;
o If we want to continue the current usage of sharing reference across columns&lt;br/&gt;
  what kind of concurrent stream access should we support (see the list of&lt;br/&gt;
  options in 3646)&lt;/p&gt;


&lt;p&gt;I don&apos;t know how hard it is but should we just stop language from sharing&lt;br/&gt;
references to streams?  The existing usage works very well for all the other&lt;br/&gt;
datatypes including the stream types when they are not streams.&lt;/p&gt;

&lt;p&gt;Should we somehow make the datatype/stream smarter to somehow handle the&lt;br/&gt;
multiple reference?&lt;/p&gt;

&lt;p&gt;Should we recognize the multiple reference and just give up and materialize&lt;br/&gt;
the clob?&lt;/p&gt;</comment>
                            <comment id="12597047" author="golgoth14" created="Thu, 15 May 2008 09:00:43 +0100"  >&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I do not understand all the concepts behind the notion of stream.&lt;br/&gt;
I understand that the problem is sharing a stream reading and should not be that the flow is closed if other clients read.&lt;/p&gt;

&lt;p&gt;This could help you ?&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/javaee/5/docs/api/javax/mail/internet/SharedInputStream.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javaee/5/docs/api/javax/mail/internet/SharedInputStream.html&lt;/a&gt;&lt;br/&gt;
or&lt;br/&gt;
&lt;a href=&quot;http://commons.apache.org/vfs/apidocs/index.html?org/apache/commons/vfs/util/SharedRandomContentInputStream.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://commons.apache.org/vfs/apidocs/index.html?org/apache/commons/vfs/util/SharedRandomContentInputStream.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12597318" author="kmarsden" created="Fri, 16 May 2008 01:12:57 +0100"  >&lt;p&gt;Attached is a patch to add tests for this issue. The tests currently fail but I want to check them in (disabled) so they are available for reference.&lt;/p&gt;

&lt;p&gt;One thing I noticed in writing the test is that for embedded, while the one to many join works ok when using getBlob()  or getClob(), it does not work if we just use ResultSet.getBinaryStream() or ResultSet.getCharacterStream(),&lt;br/&gt;
reenforcing Mike&apos;s statement that the fact that it works is probably by accident and not by design.&lt;/p&gt;
</comment>
                            <comment id="12597531" author="kmarsden" created="Fri, 16 May 2008 17:23:41 +0100"  >&lt;p&gt;Committed  tests with revision 657124.&lt;/p&gt;</comment>
                            <comment id="12599705" author="kristwaa" created="Sun, 25 May 2008 19:47:51 +0100"  >&lt;p&gt;This issue is still on my radar, but I find it had to start working on a fix...&lt;br/&gt;
Does anyone have more information that could be used to determine where the fix should be made?&lt;br/&gt;
Does the store support having two streams serving the same data in a single row? (i.e. select myblob as stream1, myblob as stream2)&lt;/p&gt;

&lt;p&gt;My next step would be to work through one of the repros attached and see if there are any obvious poins of incorrect behavior.&lt;br/&gt;
Since I have some other issues in the pipeline, I do not know when I can get around to do this.&lt;/p&gt;</comment>
                            <comment id="12600114" author="kristwaa" created="Tue, 27 May 2008 13:39:53 +0100"  >&lt;p&gt;I see that the same DataValueDescriptor (dvd) object is used for both rows when running the full repro for embedded. The object probably comes from the base result set (the single clob value).&lt;br/&gt;
Now, I see in OverflowInputStream.close that it also closes the associated container handler. This is again called by Clob.free.&lt;/p&gt;

&lt;p&gt;A simple way to make the repro pass is to make sure the stream is materialized when the object is accessed the first time. However, I think this solution is too naive and it will use too much memory (the user might never actually request the value).&lt;/p&gt;

</comment>
                            <comment id="12600262" author="mikem" created="Tue, 27 May 2008 21:00:40 +0100"  >&lt;p&gt;Changing the problem description to reflect the research so far on the issue.&lt;/p&gt;</comment>
                            <comment id="12600271" author="mikem" created="Tue, 27 May 2008 21:45:43 +0100"  >&lt;p&gt;During a join we may stream N rows out from 1 left row and N right rows.  When w&lt;br/&gt;
e do this we use multiple references&lt;br/&gt;
to the same underlining column, so N rows may point to 1 DataValueDescriptor (DV&lt;br/&gt;
D).  I believe this mostly works but is a problem if the DVD is represented by a&lt;br/&gt;
 stream rather than some sort of fixed&lt;br/&gt;
datatype like an SQLInteger.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt; a free is being called after one of the rows&lt;br/&gt;
is finished processing, causing problems when the subsequent row needs&lt;br/&gt;
access to the stream.&lt;/p&gt;

&lt;p&gt;The approach I am going to look at is to force the join case, where streams&lt;br/&gt;
are involved to generate a real copy of the stream rather than 2 references&lt;br/&gt;
to the same stream.  I plan on leaving all other copies as reference copies&lt;br/&gt;
so that performance and memory usage of the whole system is not affected&lt;br/&gt;
too much.&lt;/p&gt;</comment>
                            <comment id="12606677" author="kristwaa" created="Fri, 20 Jun 2008 09:58:47 +0100"  >&lt;p&gt;Any progress on this issue?&lt;br/&gt;
Anything the community can do to help drive it forwards?&lt;/p&gt;</comment>
                            <comment id="12608178" author="mikem" created="Wed, 25 Jun 2008 21:34:40 +0100"  >&lt;p&gt;i am working on this following the approach I described earlier.  I got distracted by some other issues, but should be able to focus on this again.  This area of the code is not my expertise, so I will definitely post a patch for comment when I am closer.  Any comments/reviews at that time are appreciated.  Should have something within a week.&lt;/p&gt;</comment>
                            <comment id="12609789" author="mikem" created="Wed, 2 Jul 2008 05:14:10 +0100"  >&lt;p&gt;The derby-3650-preliminary_diff.txt diff shows the direction I am trying to fix this bug.  It is not ready for commit yet.&lt;br/&gt;
Still needs tests to run, some more comments, maybe some more tests.  I need to verify that this change has not made &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3749&quot; title=&quot;in holdable cursor selecting multiple rows with streaming blobs and clobs a commit may cause later row&amp;#39;s streams to be broken&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3749&quot;&gt;&lt;del&gt;DERBY-3749&lt;/del&gt;&lt;/a&gt; worse.  Also need to see if the NestedLoopJoinResultSet.java changes need to be applied to any other nodes, hash joins seem to be taken care of.  Looks like NestedLoopLeftOuterJoinResultSet.java&lt;br/&gt;
could use the change, would like a test case that gets into that code first.&lt;/p&gt;</comment>
                            <comment id="12609931" author="kristwaa" created="Wed, 2 Jul 2008 15:22:23 +0100"  >&lt;p&gt;Good work on the patch Mike, we need to get this bug fixed...&lt;br/&gt;
I applied the patch and ran the updated test.&lt;br/&gt;
I also ran the regression tests and got one failure (see below).&lt;br/&gt;
Looks to me like the general approach is working and is a feasible solution&lt;br/&gt;
to me.&lt;/p&gt;

&lt;p&gt;I have the following comments on the preliminary patch, where the&lt;br/&gt;
whitespace and formatting only changes are mentioned because they cause&lt;br/&gt;
the diff to be larger than necessary:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;NestedLoopJoinResultSet&amp;#93;&lt;/span&gt;&lt;br/&gt;
  1) Whitespace only change.&lt;br/&gt;
  2) Formatting only change (first &apos;mergedRow =&apos;). Intentional?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;MemByteHolder&amp;#93;&lt;/span&gt;&lt;br/&gt;
  3) Mix of tabs and spaces in new code.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;OverflowInputStream&amp;#93;&lt;/span&gt;&lt;br/&gt;
  4) SanityManager is imported, but never used.&lt;br/&gt;
  5) Formatting only changes.&lt;br/&gt;
  6) Strange indentation causing unnecessary diff (tab-space-tab):&lt;br/&gt;
     &apos;columnOverflowPage.restorePortion...&apos;&lt;br/&gt;
  7) Formatting only change.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ByteHolder&amp;#93;&lt;/span&gt;&lt;br/&gt;
  8) Mix of tabs and spaces for indentation.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;StoredPage&amp;#93;&lt;/span&gt;&lt;br/&gt;
  9) Separate commit for the typo?&lt;br/&gt;
     File is untouched by the functional changes.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;CloneableStream&amp;#93;&lt;/span&gt;&lt;br/&gt;
 10) Wrong class name in header.&lt;br/&gt;
 11) Some tabs in the file.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;SQLChar&amp;#93;&lt;/span&gt;&lt;br/&gt;
 12) One tab: &apos;if (stream != null)&apos;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;SQLBinary&amp;#93;&lt;/span&gt;&lt;br/&gt;
 13) One tab: &apos;if (stream != null)&apos;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;Derby3650Test&amp;#93;&lt;/span&gt;&lt;br/&gt;
 14) I would prefer to remove the &apos;runDerby3749tests&apos; variable after&lt;br/&gt;
     that bug has been fixed.&lt;br/&gt;
 15) Would it make sense to fill the LOBs with a pattern, instead of&lt;br/&gt;
     using a fixed value?&lt;br/&gt;
     One could use LoopingAlphabet&lt;span class=&quot;error&quot;&gt;&amp;#91;Stream|Reader&amp;#93;&lt;/span&gt; for this, also in the&lt;br/&gt;
     verification procedures (create a new stream to compare with).&lt;br/&gt;
     I&apos;m thinking about detecting offset errors.&lt;br/&gt;
 16) Incorrect name for the setup method, which configured auto commit:&lt;br/&gt;
     &apos;setup&apos; -&amp;gt; &apos;setUp&apos;&lt;/p&gt;


&lt;p&gt;I experimented a little with the patch, and was able to solve the&lt;br/&gt;
problem we have when selecting the same column twice, i.e.&lt;br/&gt;
   &quot;select c as c1, c as c2 from testMultipleClob&quot;&lt;br/&gt;
I did this by always creating a clone.&lt;br/&gt;
I didn&apos;t quite understand what would happen to the original stream, but&lt;br/&gt;
using &apos;finalize()&apos; I was able to observe that it was garbage collected.&lt;br/&gt;
No call to &apos;closeStream&apos; was made though.&lt;/p&gt;

&lt;p&gt;Is it an acceptable performance hit to clone streams unconditionally for&lt;br/&gt;
LOBs, or should we try to come up with some kind of bookkeeping?&lt;br/&gt;
(i.e. reference counting)&lt;br/&gt;
I&apos;m thinking in the context of the JDBC layer, but the same question&lt;br/&gt;
might apply to lower layers.&lt;/p&gt;


&lt;p&gt;Also, I see that a new container handle is created in &apos;initStream&apos;. Am I&lt;br/&gt;
correct saying that you have to do &apos;aClone.initStream()&apos; after calling&lt;br/&gt;
&apos;theStream.cloneStream()&apos; and &lt;b&gt;before&lt;/b&gt; closing &apos;theStream&apos;?&lt;/p&gt;


&lt;p&gt;The test &apos;tests.lang.LangScript#aggregate&apos; failed with a NPE. The reason&lt;br/&gt;
was because a null DVD was encountered and &apos;&amp;lt;null&amp;gt;.copyForRead()&apos; was&lt;br/&gt;
called. Checking for null fixed the problem and the test succeeded.&lt;br/&gt;
Can we get a null inside the for loop in &apos;if (! notExistsRightSide)&quot; as&lt;br/&gt;
well?&lt;/p&gt;

&lt;p&gt;I also found a small issue with LOBs related to mappings and reference&lt;br/&gt;
book keeping while reviewing the patch, and I&apos;ll create a Jira for that&lt;br/&gt;
tomorrow.&lt;/p&gt;

&lt;p&gt;I have not yet had time to look at your questions/comments from your previous post.&lt;/p&gt;</comment>
                            <comment id="12610130" author="mikem" created="Thu, 3 Jul 2008 06:23:19 +0100"  >&lt;p&gt;&amp;gt; I experimented a little with the patch, and was able to solve the&lt;br/&gt;
&amp;gt; problem we have when selecting the same column twice, i.e.&lt;br/&gt;
&amp;gt; &quot;select c as c1, c as c2 from testMultipleClob&quot;&lt;br/&gt;
&amp;gt; I did this by always creating a clone.&lt;br/&gt;
&amp;gt; I didn&apos;t quite understand what would happen to the original stream, but&lt;br/&gt;
&amp;gt; using &apos;finalize()&apos; I was able to observe that it was garbage collected.&lt;br/&gt;
&amp;gt; No call to &apos;closeStream&apos; was made though.&lt;br/&gt;
At least at store level all the streams get cleaned up at commit or abort&lt;br/&gt;
if at no other time.  They are all based off of open BaseContainerHandles&lt;br/&gt;
and all those that are open at commit or abort get cleaned up.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Is it an acceptable performance hit to clone streams unconditionally for&lt;br/&gt;
&amp;gt; LOBs, or should we try to come up with some kind of bookkeeping?&lt;br/&gt;
&amp;gt; (i.e. reference counting)&lt;br/&gt;
&amp;gt; I&apos;m thinking in the context of the JDBC layer, but the same question&lt;br/&gt;
&amp;gt; might apply to lower layers.&lt;br/&gt;
I am already uncomfortable with the unnecessary level of cloning/object&lt;br/&gt;
creation this change creates for lobs that are part of a join.  So I think&lt;br/&gt;
we should look to minimize it.  So I don&apos;t think it appropriate to throw in&lt;br/&gt;
a clone every time we see a stream.&lt;/p&gt;

&lt;p&gt;I would like to figure out a way in a 1-1 join to not have to clone anything&lt;br/&gt;
and just let the original stream proprogate up.  Maybe some sort of reference&lt;br/&gt;
counting is the solution.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Also, I see that a new container handle is created in &apos;initStream&apos;. Am I&lt;br/&gt;
&amp;gt; correct saying that you have to do &apos;aClone.initStream()&apos; after calling&lt;br/&gt;
&amp;gt; &apos;theStream.cloneStream()&apos; and &lt;b&gt;before&lt;/b&gt; closing &apos;theStream&apos;?&lt;/p&gt;

&lt;p&gt;I think understanding this is key to fixing this problem correctly.  After&lt;br/&gt;
reading the code today I think what you describe is the expected behavior,&lt;br/&gt;
but is not very well documented.  I think the rule currently is something&lt;br/&gt;
like:&lt;br/&gt;
    before using any Resetable interface on a stream one must call initStream().&lt;/p&gt;

&lt;p&gt;I think there might be cleaner solutions to the various clob/blob issues if&lt;br/&gt;
this rule could be expanded to something like no jdbc interaction with a&lt;br/&gt;
blob/clob in stream form can happen unless initStream() has been called.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; The test &apos;tests.lang.LangScript#aggregate&apos; failed with a NPE. The reason&lt;br/&gt;
&amp;gt; was because a null DVD was encountered and &apos;&amp;lt;null&amp;gt;.copyForRead()&apos; was&lt;br/&gt;
&amp;gt; called. Checking for null fixed the problem and the test succeeded.&lt;br/&gt;
&amp;gt; Can we get a null inside the for loop in &apos;if (! notExistsRightSide)&quot; as&lt;br/&gt;
&amp;gt; well?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
thanks for tracking down the bug before I could run tests.  I have fixed&lt;br/&gt;
the null pointer problems in the next patch.&lt;/p&gt;</comment>
                            <comment id="12610132" author="mikem" created="Thu, 3 Jul 2008 06:33:37 +0100"  >&lt;p&gt;still not ready for commit, incorporates comments, improved testing, and fixes left outer join issue also.  Also&lt;br/&gt;
fixes null pointer bug found by aggregate tests.  Will be running set of tests on this tonight.&lt;/p&gt;</comment>
                            <comment id="12634156" author="golgoth14" created="Wed, 24 Sep 2008 15:38:56 +0100"  >&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;Do you have some news about this bug ?&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;</comment>
                            <comment id="12668090" author="rhillegas" created="Wed, 28 Jan 2009 17:48:08 +0000"  >&lt;p&gt;Hey Mike,&lt;/p&gt;

&lt;p&gt;Are you planning to commit a fix (or partial fix) for 10.5?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12728053" author="knutanders" created="Tue, 7 Jul 2009 13:10:31 +0100"  >&lt;p&gt;Triaged for 10.5.2.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Checked &quot;Repro attached&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Checked &quot;Known fix&quot; since a (not commit-ready) patch proposal is attached&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added components SQL and Store since they are touched by the suggested fix&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Marked as unassigned since there has been no activity in over a year&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Left the Regression flag on since the network client problems were not seen in earlier versions. The underlying embedded issue can be seen all the way back to 10.0.2.1&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12786962" author="kristwaa" created="Mon, 7 Dec 2009 15:59:44 +0000"  >&lt;p&gt;Working on other issues involving reuse of streaming DVDs, it has occurred to me that I can reuse the stream cloning code found in &apos;derby-3650-preliminary_2_diff.txt&apos;.&lt;br/&gt;
I plan to split the original patch into two parts, but first I&apos;d like some feedback on a few questions. General information about how things are working / supposed to work is also appreciated &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I ended up writing down my questions and observations as HTML, as I needed a table. See the attached file &quot;cloning-methods.html&quot;.&lt;br/&gt;
Feel free to upload a new version of the HTML file if you find errors in it or want to add more information, or just add a comment in Jira.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;</comment>
                            <comment id="12788280" author="dagw" created="Wed, 9 Dec 2009 20:04:29 +0000"  >&lt;p&gt;Ok, bear with me if I misunderstand issues here, still trying to grok&lt;br/&gt;
this, but I&apos;ll weigh in just to get some discussion going.&lt;/p&gt;

&lt;p&gt;I looked at the clone methods, and it seems to me that originally&lt;br/&gt;
there was getClone, and that cloneObject was introduced later to avoid&lt;br/&gt;
always materializing large objects into many copies. The naming is not&lt;br/&gt;
good, the names imply the same behavior, I think. cloneObject is&lt;br/&gt;
shallow in the sense that it does not clone the &lt;b&gt;value&lt;/b&gt;, nor does it&lt;br/&gt;
clone the &lt;b&gt;stream state&lt;/b&gt;, if any. (Btw, the implementation of&lt;br/&gt;
SQLChar#cloneObject could be simplified to look the same as&lt;br/&gt;
SQLBinary#cloneObject).&lt;/p&gt;

&lt;p&gt;Now, if I understand correctly, the new method, CopyForRead is slightly&lt;br/&gt;
&lt;b&gt;less shallow&lt;/b&gt;, in that you now also copy the stream state.&lt;/p&gt;

&lt;p&gt;For non-stream data types, cloneObject defaults to getClone (deep&lt;br/&gt;
copy).&lt;/p&gt;

&lt;p&gt;I would suggest we change the names here to clarify code and APIs, the&lt;br/&gt;
better to reflect the shallowness of the cloning.&lt;/p&gt;

&lt;p&gt;        cloneDeep (old getClone; clones even &lt;b&gt;value&lt;/b&gt;, share nothing)&lt;br/&gt;
        cloneHalfDeep (new CopyForRead, clones even stream state,&lt;br/&gt;
                            but not value, which is still shared)&lt;br/&gt;
        cloneShallow (old cloneObject, clones just &quot;holder&quot;, shares&lt;br/&gt;
                      stream/stream state)&lt;/p&gt;

&lt;p&gt;If the code really needs cloneShallow also, after cloneHalfDeep is&lt;br/&gt;
added, I don&apos;t know, if not, I&apos;d call cloneHalfDeep cloneShallow&lt;br/&gt;
instead &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Now, for modification, what to use? I guess that depends on what&lt;br/&gt;
semantics are desired/at what level in the code you are..? Maybe we&lt;br/&gt;
could just do COW semantics?  I.e. use cloneHalfDeep until update is&lt;br/&gt;
attempted and only then do a full deep clone? (by overloading stream&lt;br/&gt;
class perhaps) Then the updating of the deep copy could proceed until&lt;br/&gt;
the column is actually updated without affecting the other aliases?&lt;/p&gt;</comment>
                            <comment id="12802275" author="kristwaa" created="Tue, 19 Jan 2010 14:28:10 +0000"  >&lt;p&gt;I have been investigating this a bit further, and I&apos;ll try to share some of my findings.&lt;br/&gt;
My experiments consisted of the following high-level changes:&lt;br/&gt;
 a) add mechanism to clone store streams&lt;br/&gt;
 b) remove CloneableObject interface (and the method cloneObject)&lt;br/&gt;
 c) make DataValueDescriptor.getClone smarter (or more complex...)&lt;br/&gt;
 d) enable streaming support in the sorter&lt;br/&gt;
 e) add a special-case clone method for obtaining a materialized clone&lt;/p&gt;


&lt;p&gt;a) add mechanism to clone store streams&lt;br/&gt;
Here I reused Mike&apos;s patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3650&quot; title=&quot;internal multiple references from different rows to a single BLOB/CLOB stream leads to various errors when second reference used.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3650&quot;&gt;&lt;del&gt;DERBY-3650&lt;/del&gt;&lt;/a&gt;. I haven&apos;t found any problems with this yet, but haven&apos;t investigated very well.&lt;br/&gt;
I&apos;m wondering if we can optimize the cloning a little bit by deferring the initial buffer fill? This is to avoid reading bytes we might never pass on to the user. I tried once and got a few test failures (probably because the exception was thrown in a different place, for instance that it is now thrown during the first InputStream.read instead of some other method).&lt;br/&gt;
See (d) for an additional problem associated with this change.&lt;/p&gt;

&lt;p&gt;b) remove CloneableObject interface (and the method cloneObject)&lt;br/&gt;
This change in itself didn&apos;t cause any trouble when combined with (a) and (c). When combined with (d) an ASSERT was thrown, but I haven&apos;t yet investigated if it is a real problem or not.&lt;/p&gt;

&lt;p&gt;c) make DataValueDescriptor.getClone smarter (or more complex...)&lt;br/&gt;
Here I made getClone return the most appropriate clone based on the state of the DVD:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;simple types: normal clone (i.e. new SQLInteger(this.value) or new SQLClob(this.getString())&lt;/li&gt;
	&lt;li&gt;source is a cloneable stream: clone the stream&lt;/li&gt;
	&lt;li&gt;source is a non-cloneable stream: materialize and return normal clone&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Again, I have to investigate more, but there seems to be a need for a &quot;transfer the state of that DVD to a new DVD&quot;-method. This is different from a clone in the sense that the original DVD will be reused for another row and have its value overwritten. In this case there is no need to actually clone the source stream, we can just reuse the stream reference. This is what cloneObject does.&lt;/p&gt;

&lt;p&gt;d) enable streaming support in the sorter&lt;br/&gt;
When I did this, I found a bug where Derby enters an infinite loop while reading a stream: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4520&quot; title=&quot;Refactor and extend data type cloning facilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4520&quot;&gt;&lt;del&gt;DERBY-4520&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
Another problem that surfaced is that the sorter closes the source result set immediately, before the values are actually processed / sorted. This caused the cloned streams to fail when processing them, because the associated container handle got closed. I tried naively to not close the source rs, but this caused some problems when running suites.All (asserts, lock timeouts). Maybe the sorter can be changed to make sure the source rs is closed at another point, but this seems like a potentially dangerous approach.&lt;br/&gt;
Instead I added a new method, described in (e).&lt;/p&gt;

&lt;p&gt;For clarity, Derby isn&apos;t currently able to efficiently execute something like &quot;select ... order by length(clob_column)&quot;. There are user workarounds for this problem, so I&apos;m not sure fixing it should have a high priority at this point. Also, the LOB values cannot be used in an order by. I don&apos;t know which types of operations you can do in an order by, and whether it is possible to perform these immediately instead of first reading the source rs into a temporary holder and then applying the function later.&lt;/p&gt;

&lt;p&gt;e) add a special-case clone method for obtaining a materialized clone&lt;br/&gt;
Added to make (d) work in an easy way. suites.All passed when using this in a single place (the sorter), but there might be other usages for it as well.&lt;br/&gt;
By default the method will simply forward to getClone, but for SQLChar and SQLBinary it will materialize the stream if required.&lt;/p&gt;


&lt;p&gt;With all the changes combined (prototype quality, I must recheck to make sure I didn&apos;t cheat too much), only lang.StreamsTest failed (on line 243) failed. The difference was that with the changes the value was materialized, whereas with clean trunk the stream was passed directly into store. The root cause is that I removed the &quot;transfer value&quot; functionality of cloneObject, and produced a real clone instead. The reason my smarter getClone method failed to produce a clone with a stream as source was that the source stream wasn&apos;t a store stream and thus the only way to safely clone it is to materialize it.&lt;/p&gt;

&lt;p&gt;For Derby to function and keep its current performance, I see the need for the following functionality:&lt;br/&gt;
 1) value clones (capable of cloning source streams when possible)&lt;br/&gt;
 2) forcing materialization&lt;br/&gt;
 3) copying state from one DVD to a new DVD&lt;/p&gt;

&lt;p&gt;I don&apos;t think all three can be combined into one method, because it is impossible for this method to know the context in which the &quot;clone&quot; will be used.&lt;br/&gt;
It is important to keep in mind that for many of the data types there is no difference between items 1,2, and 3.&lt;/p&gt;

&lt;p&gt;Now, how does my changes differ from the original copyForRead method added by Mike?&lt;br/&gt;
DVD.copyForRead can simply return a reference to itself (&apos;this&apos;). Doing this is the cheapest way to copy a DVD, but it is also the way which puts the most restrictions on how it can be used. Since there will be multiple references to the same DVD, a single update or state change will affect all the code referring to that DVD.&lt;br/&gt;
This can be exploited for better performance in some cases, but I&apos;m not sure if we should leave the decision to the calling code (using the public interface of DVD), or if we should either create a new method (like copyForRead) or add arguments to the getClone method.&lt;br/&gt;
Forcing materialization can also be done explicitly by the calling code, but it wouldn&apos;t look too nice:&lt;br/&gt;
if (dvd instanceof StreamStorable) &lt;/p&gt;
{
    // Assuming calling this when there is no stream is working, otherwise one have to do another check is stream != null
    dvd.loadStream();
}
&lt;p&gt;clone = dvd.getClone();&lt;/p&gt;

&lt;p&gt;Opinions?&lt;/p&gt;</comment>
                            <comment id="12802826" author="kristwaa" created="Wed, 20 Jan 2010 13:18:46 +0000"  >&lt;p&gt;I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4520&quot; title=&quot;Refactor and extend data type cloning facilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4520&quot;&gt;&lt;del&gt;DERBY-4520&lt;/del&gt;&lt;/a&gt; to track the clone-work.&lt;/p&gt;</comment>
                            <comment id="12804787" author="mikem" created="Mon, 25 Jan 2010 23:29:45 +0000"  >&lt;p&gt;I don&apos;t remember what came up when I was first working on this, and have not done anything on it other than post the patch a long time ago.  I wasn&apos;t really happy with the complexity, and was hoping to come up with something better but never did.  &lt;/p&gt;

&lt;p&gt;I don&apos;t plan on doing anything else with this patch but am happy if someone else wants to run with it.  &lt;/p&gt;

&lt;p&gt;What I would really like to do is change the underlying implementation of streams coming out of the store so that they can easily be cloned completely and not have their state shared.   Basically store should return an object that&lt;br/&gt;
just has an id that can be used to open a new stream that is independent of &lt;br/&gt;
other using that id to open the stream.   I think this could solve a number of &lt;br/&gt;
problems with current undefined behavior of sessions accessing the same&lt;br/&gt;
clob multiple times.&lt;/p&gt;

&lt;p&gt;I think this would build fine on top of the clone changes that Kristian is working on in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4520&quot; title=&quot;Refactor and extend data type cloning facilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4520&quot;&gt;&lt;del&gt;DERBY-4520&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12838338" author="kristwaa" created="Thu, 25 Feb 2010 13:23:29 +0000"  >&lt;p&gt;Attached patch &apos;derby-3650-preliminary_2_reworked.diff&apos;.&lt;br/&gt;
I updated it with regard to the latest changes done on trunk. The rest of the original patch has now been committed under other issues (the test was committed a long time ago).&lt;br/&gt;
I&apos;m running the regression tests to see what the current state of the patch is, and will post the results tomorrow.&lt;/p&gt;

&lt;p&gt;Would be nice if someone had another look at the patch.&lt;br/&gt;
Note that even with the patch committed there are use cases where Derby will fail. This is most likely due to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1511&quot; title=&quot;SELECT clause without a WHERE, causes an Exception when extracting a Blob from a database&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1511&quot;&gt;&lt;del&gt;DERBY-1511&lt;/del&gt;&lt;/a&gt; (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3749&quot; title=&quot;in holdable cursor selecting multiple rows with streaming blobs and clobs a commit may cause later row&amp;#39;s streams to be broken&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3749&quot;&gt;&lt;del&gt;DERBY-3749&lt;/del&gt;&lt;/a&gt; is marked as a duplicate).&lt;/p&gt;</comment>
                            <comment id="12838345" author="kristwaa" created="Thu, 25 Feb 2010 13:50:09 +0000"  >&lt;p&gt;Mike wrote:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I think this would build fine on top of the clone changes that Kristian is working on in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4520&quot; title=&quot;Refactor and extend data type cloning facilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4520&quot;&gt;&lt;del&gt;DERBY-4520&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;You&apos;re probably right, but I think it&apos;s time to start ripping something out soon &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;At least for my own work I feel very much that I have been building my way around various obstacles. This has caused the complexity to increase, and I hope that by taking a step back much of it can be reduced.&lt;br/&gt;
The good thing is that most of the added complexity has been added for BLOB and CLOB. That said, I&apos;m not happy about the state of SQLChar. Maybe it is just because I associate it too much with the SQL data type CHAR, but in theory the code dealing with CHAR (and VARCHAR) should be a lot simpler than the code dealing with CLOB.&lt;/p&gt;</comment>
                            <comment id="12838805" author="kristwaa" created="Fri, 26 Feb 2010 10:27:27 +0000"  >&lt;p&gt;The regression tests (suites.All, derbyall) with &apos;derby-3650-preliminary_2_reworked.diff&apos; applied ran without failures.&lt;/p&gt;</comment>
                            <comment id="12851368" author="dagw" created="Tue, 30 Mar 2010 13:14:28 +0100"  >&lt;p&gt;The patch looks good to me. Nit: the patch for NestedLoopResultSet has a formatting diff of old code which doesn&apos;t seem to change anything except layout (line 43).&lt;/p&gt;</comment>
                            <comment id="12858294" author="kristwaa" created="Sun, 18 Apr 2010 13:59:25 +0100"  >&lt;p&gt;Thanks for the review, Dag.&lt;br/&gt;
Attached derby-3650-preliminary_2_reworked-1b.diff, in which I removed the unnecessary formatting change.&lt;/p&gt;

&lt;p&gt;Committed to trunk with revision 935336.&lt;br/&gt;
Note that this fix won&apos;t be back-ported, because the underlying clone functionality is hard to back-port (major changes).&lt;/p&gt;</comment>
                            <comment id="12858295" author="kristwaa" created="Sun, 18 Apr 2010 14:01:18 +0100"  >&lt;p&gt;Unless problems arise, I don&apos;t expect to do more work on this issue. Resolving as fixed.&lt;/p&gt;</comment>
                            <comment id="12989870" author="kmarsden" created="Wed, 2 Feb 2011 23:30:14 +0000"  >&lt;p&gt;Reopen for backport.&lt;/p&gt;</comment>
                            <comment id="12996106" author="kmarsden" created="Thu, 17 Feb 2011 21:49:11 +0000"  >&lt;p&gt;reclosing. This will come off the backport list.  Comments say:&lt;br/&gt;
Note that this fix won&apos;t be back-ported, because the underlying clone functionality is hard to back-port (major changes). &lt;/p&gt;

&lt;p&gt;I added the derby_backport_reject_10_5 label.&lt;/p&gt;</comment>
                            <comment id="13685343" author="knutanders" created="Mon, 17 Jun 2013 10:19:44 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12356471">DERBY-2111</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12372921">DERBY-2892</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12446023">DERBY-4520</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12442110" name="ASF.LICENSE.NOT.GRANTED--derby-3650-preliminary_2_reworked-1b.diff" size="5108" author="kristwaa" created="Sun, 18 Apr 2010 13:59:25 +0100"/>
                            <attachment id="12381211" name="Derby3650EmbeddedRepro.java" size="1035" author="kmarsden" created="Wed, 30 Apr 2008 20:18:00 +0100"/>
                            <attachment id="12382050" name="Derby3650FullClientRepro.java" size="2063" author="kmarsden" created="Wed, 14 May 2008 17:21:57 +0100"/>
                            <attachment id="12381258" name="Derby3650FullRepro.java" size="1873" author="kmarsden" created="Thu, 1 May 2008 18:08:18 +0100"/>
                            <attachment id="12381206" name="Derby3650Repro.java" size="1409" author="kristwaa" created="Wed, 30 Apr 2008 19:25:25 +0100"/>
                            <attachment id="12381113" name="DerbyHibernateTest.zip" size="91035" author="golgoth14" created="Tue, 29 Apr 2008 16:09:49 +0100"/>
                            <attachment id="12381265" name="UnionAll.java" size="2030" author="kmarsden" created="Thu, 1 May 2008 20:49:01 +0100"/>
                            <attachment id="12427194" name="cloning-methods.html" size="4842" author="kristwaa" created="Mon, 7 Dec 2009 15:59:43 +0000"/>
                            <attachment id="12385169" name="derby-3650-preliminary_2_diff.txt" size="45219" author="mikem" created="Thu, 3 Jul 2008 06:33:37 +0100"/>
                            <attachment id="12436999" name="derby-3650-preliminary_2_reworked.diff" size="5396" author="kristwaa" created="Thu, 25 Feb 2010 13:23:29 +0000"/>
                            <attachment id="12385078" name="derby-3650-preliminary_diff.txt" size="35333" author="mikem" created="Wed, 2 Jul 2008 05:14:10 +0100"/>
                            <attachment id="12382148" name="derby-3650_tests_diff.txt" size="8584" author="kmarsden" created="Fri, 16 May 2008 01:12:57 +0100"/>
                            <attachment id="12381207" name="testdb.zip" size="127202" author="kristwaa" created="Wed, 30 Apr 2008 19:25:25 +0100"/>
                            <attachment id="12381341" name="traces_on_FormatIdStream_alloc.txt" size="3817" author="kmarsden" created="Fri, 2 May 2008 21:27:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Apr 2008 08:40:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23770</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10426"><![CDATA[Known fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36721</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>