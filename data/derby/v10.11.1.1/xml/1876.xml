<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:34:35 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1876/DERBY-1876.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1876] Investigate overhead of JDBC layer and compiled activation code for simple embedded read-only, forward ResultSets</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1876</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;For simple ResultSet usage like:&lt;br/&gt;
ResultSet rs = ps.executeQuery();&lt;br/&gt;
      while (rs.next()) &lt;/p&gt;
{
              rs.getInt(1);
              rs.getInt(2);
              rs.getInt(3);
       }
&lt;p&gt;rs.close();&lt;/p&gt;

&lt;p&gt;it would be interesting to see how much overhead could be removed with simple changes, or possibly removed if there was a simple ResultSet implementation for forward only, read-only ResultSet, and the more complete implementation for all other ResultSet types such as updateable and/or scrollable. Has introducing updateable ResultSets, for example, degraded the performance of read-only ResultSets? Could code be changed so that a typical read-only Resultset is not affected by the code required for richer ResultSets?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12350467">DERBY-1876</key>
            <summary>Investigate overhead of JDBC layer and compiled activation code for simple embedded read-only, forward ResultSets</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Sep 2006 00:41:56 +0100</created>
                <updated>Fri, 21 Jan 2011 18:27:53 +0000</updated>
                            <resolved>Wed, 28 Apr 2010 18:33:38 +0100</resolved>
                                    <version>10.6.1.0</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12436699" author="djd" created="Fri, 22 Sep 2006 00:45:13 +0100"  >&lt;p&gt;Simple java program, derby1876, that runs a VALUES statement a number of times and measures its performance. The SQL query is simple so that the store and most of the SQL language layer is factored out of measurement, to allow focus on the base infrastructure.&lt;/p&gt;

&lt;p&gt;Can be used as a test-bed for performance investigations for this issue.&lt;/p&gt;</comment>
                            <comment id="12436700" author="djd" created="Fri, 22 Sep 2006 00:56:05 +0100"  >&lt;p&gt;JDBC requires that each execution of ps.executeQuery() returns a new ResultSet object, thus looking at the code within EmbedResultSet() constructor is worth while.&lt;br/&gt;
There are at least four sub-optimal pieces of code:&lt;/p&gt;

&lt;p&gt;1) (long)stmt.getQueryTimeout() * 1000L;&lt;br/&gt;
     Each creation a multiplication by 1000 is executed, could be avoided by having the&lt;br/&gt;
     value in ms calculated once and stored in EmbedStatement when setQueryTimeout is called.&lt;/p&gt;

&lt;p&gt;2) stmt.getResultSetConcurrency()&lt;br/&gt;
     This call checks the Statement object to see if it is open, but it must be open since it is creating a ResultSet. Can be avoided by having EmbedResultSet use the final field that holds the concurrency, if iw was made package protected.&lt;/p&gt;

&lt;p&gt;3) final int columnCount = getMetaData().getColumnCount();&lt;br/&gt;
    This creates a ResultSetMetaData object that will not be used in the typical case (at least I think it will not be used). Using resultDescription.getColumnCount() would get the count with no object creation.&lt;/p&gt;

&lt;p&gt;4) 		this.currentRow = factory.getValueRow(columnCount);&lt;br/&gt;
		currentRow.setRowArray(null);&lt;/p&gt;

&lt;p&gt;The call to getValueRow() creates a ValueRow with a new DataValueDescriptor array within it, the next line nulls out the refrence to the array. Thus this creates a short lived object for no value. Possibly work around is to have currentRow use the array directly, or create a ValueRow with no array within it.&lt;/p&gt;</comment>
                            <comment id="12436727" author="djd" created="Fri, 22 Sep 2006 04:26:06 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-827&quot; title=&quot;Performance can be improved by re-using language ResultSets across Activation executions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-827&quot;&gt;&lt;del&gt;DERBY-827&lt;/del&gt;&lt;/a&gt; reduces overhead in the SQL portion of simple queries by re-using the ResultSet true tha the activation and JDBC ResultSet use.&lt;/p&gt;</comment>
                            <comment id="12436809" author="knutanders" created="Fri, 22 Sep 2006 11:02:02 +0100"  >&lt;p&gt;Moving one level down in the code and looking at the internal ResultSet hierarchy (not java.sql.ResultSet) could also be useful. I have noticed that garbage collection takes a lot of CPU time when running simple select statements in Derby. Using DTrace to collect information about object allocation, I observed that most of the garbage were objects of type TableScanResultSet. Although many classes were instanciated more frequently, they were relatively small and didn&apos;t contribute so much to the total number of bytes allocated. However, TableScanResultSet has almost ninety fields, which probably means each object is at least 400 bytes, even when all fields are null. Refactoring to reduce bare-object size would be good.&lt;/p&gt;

&lt;p&gt;For instance, BasicNoPutResultSetImpl (one of TSRS&apos;s super classes) has a number of fields to collect timing statistics: 1 boolean, 7 longs and 3 ints. That should be about 70 bytes per object. To reduce garbage produced when timing is off, timing information could be factored out into a statistics class. Then we only need one field in the result set class, and it could be null when timing is off.&lt;/p&gt;</comment>
                            <comment id="12436898" author="djd" created="Fri, 22 Sep 2006 17:08:20 +0100"  >&lt;p&gt;I&apos;ve thought in the past about having the common statistic information in a language ResultSet implementation that could wrap the real langugae ResultSet. Then the ResultSetFactory would return a instance of the real ResultSet wrapped with a StatisticsResultSet when timing etc. was enabled. The StatisticsResultSet would have code like:&lt;/p&gt;

&lt;p&gt;class StatisticsResultSet {&lt;br/&gt;
   private long openTime;&lt;/p&gt;

&lt;p&gt;   private final ResultSet rs;&lt;/p&gt;

&lt;p&gt;   pubic void openCore() &lt;/p&gt;
{
       long s = System.currentTimeMillis();
       rs.openCore();
       long e = System.currentTimeMillis();

       openTime += (e -s);
   }

&lt;p&gt;This then removes the common fields and code to get the times from all the ResultSet classes, also leading to consistency.&lt;/p&gt;

&lt;p&gt;The issue with this that code that performs instanceof checks to get specific behaviour of a ResultSet no longer works, though there are  solutions to that:&lt;br/&gt;
    A) Don&apos;t do it, it breaks the api in that the ResultSetFactory says it is  returning a ResultSet, so that&apos;s all the callers should depend on.&lt;br/&gt;
    B) Follow the JBDC wrapper model, have a getRealResultSet() call in ResultSet api which would return this for most implementations, but the wrapped rs for StatisticsResultSet. Then code that needed to access the specific class would use the return from that method.&lt;/p&gt;</comment>
                            <comment id="12436925" author="djd" created="Fri, 22 Sep 2006 18:10:52 +0100"  >&lt;p&gt;Modified version of derby1876.java that uses the same basic SQL statement but with column names and then fetches the data using ResultSet.getInt(String). Used to show the performance improvement by changes made in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1862&quot; title=&quot;Simple hash improves performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1862&quot;&gt;&lt;del&gt;DERBY-1862&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Also shows that even with the changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1862&quot; title=&quot;Simple hash improves performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1862&quot;&gt;&lt;del&gt;DERBY-1862&lt;/del&gt;&lt;/a&gt;, fetching by column name operates about 60% the performance of fetching by index, with this simple select case.&lt;/p&gt;</comment>
                            <comment id="12437015" author="knutanders" created="Fri, 22 Sep 2006 22:36:37 +0100"  >&lt;p&gt;To get an impression of the allocation/gc cost for the statistics, I made all the runtime statistics fields in BasicNoPutResultSetImpl, RowResultSet and UnionResultSet static (these are the ResultSet classes used by the query in derby1867.java). I ran derby1876.java ten times with and ten times without the changes. On average, the test used 15% less time with static fields on Solaris, JVM 1.6. On FreeBSD, JVM 1.5, the time spent was 20% lower with static fields.&lt;/p&gt;</comment>
                            <comment id="12438255" author="djd" created="Thu, 28 Sep 2006 00:34:53 +0100"  >&lt;p&gt;Link to wiki page capturing the performance progress due to changes made related to this issue.&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyBug1872&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyBug1872&lt;/a&gt;&lt;br/&gt;
(yes I got the bug number wrong in the wiki page &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;)&lt;/p&gt;</comment>
                            <comment id="12438259" author="fuzzylogic" created="Thu, 28 Sep 2006 00:59:33 +0100"  >&lt;p&gt;The &quot;More Actions:&quot; drop-down box has a rename page function. Renamed the page to &lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyBug1876&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyBug1876&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12483909" author="knutanders" created="Sun, 25 Mar 2007 07:51:42 +0100"  >&lt;p&gt;Attaching a simple patch to fix issue #1 and #3 mentioned above. I have not been able to measure any performance improvement, but I think it&apos;s a good change anyway. At least, it eliminates one call to EmbedResultSet.checkIfClosed() and one call to EmbedStatement.checkStatus() per creation of an EmbedResultSet instance.&lt;/p&gt;</comment>
                            <comment id="12483910" author="knutanders" created="Sun, 25 Mar 2007 07:53:52 +0100"  >&lt;p&gt;Forgot to mention that all tests passed.&lt;/p&gt;</comment>
                            <comment id="12484053" author="knutanders" created="Mon, 26 Mar 2007 08:47:07 +0100"  >&lt;p&gt;Committed timeout_colcount.diff with revision 522445.&lt;/p&gt;</comment>
                            <comment id="12516246" author="knutanders" created="Sun, 29 Jul 2007 21:08:54 +0100"  >&lt;p&gt;By commenting out the finalize() method in EmbedResultSet, the time to run the test on my laptop is reduced from ~3 seconds to ~1.3 seconds (OpenSolaris, Sun Java SE 6). Since the finalizer is a no-op if the activation isn&apos;t single-use, I think we should investigate whether there are ways to avoid this cost for ResultSets that don&apos;t need the finalizer.&lt;/p&gt;</comment>
                            <comment id="12516512" author="djd" created="Mon, 30 Jul 2007 21:26:36 +0100"  >&lt;p&gt;I wonder if it&apos;s possible to move the finalizer logic to EmbedStatement. Since a ResultSet will always be referenced by its Statement then we only need to close the ResultSet when it&apos;s statement is finalized. Then EmbedResultSet would not need a finalizer  method.&lt;/p&gt;</comment>
                            <comment id="12519615" author="knutanders" created="Tue, 14 Aug 2007 08:53:43 +0100"  >&lt;p&gt;I have opened a separate JIRA issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3004&quot; title=&quot;Get rid of the finalizer in EmbedResultSet&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3004&quot;&gt;&lt;del&gt;DERBY-3004&lt;/del&gt;&lt;/a&gt;) for the finalizer in EmbedResultSet.&lt;/p&gt;</comment>
                            <comment id="12519824" author="djd" created="Wed, 15 Aug 2007 01:32:36 +0100"  >&lt;p&gt;From an earlier comment:&lt;/p&gt;

&lt;p&gt;------------------------------------------------------------------------------------------------&lt;br/&gt;
4) this.currentRow = factory.getValueRow(columnCount);&lt;br/&gt;
currentRow.setRowArray(null);&lt;/p&gt;

&lt;p&gt;The call to getValueRow() creates a ValueRow with a new DataValueDescriptor array within it, the next line nulls out the reference to the array. Thus this creates a short lived object for no value. &lt;br/&gt;
------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;ers_current_row.txt is a patch that changes how currentRow is used in EmbedResultSet. Now it is null to indicate the ResultSet is not positioned on a row, or not null and it points to the currrent row. The current row in the resultset is directly pointed to, which is what previously occurred, though at the DVD[] level and not the Row level.&lt;/p&gt;

&lt;p&gt;Running tests on the patch.&lt;/p&gt;</comment>
                            <comment id="12520075" author="djd" created="Wed, 15 Aug 2007 20:47:01 +0100"  >&lt;p&gt;patch ers_current_row.txt  committed - svn revision 566311&lt;/p&gt;</comment>
                            <comment id="12861861" author="rhillegas" created="Wed, 28 Apr 2010 18:33:38 +0100"  >&lt;p&gt;It seems that a fair amount of work has been done in this area. Closing until someone wants to re-open this issue and do more work.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12375948">DERBY-3004</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12357517">DERBY-2139</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12327853">DERBY-827</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12353048">DERBY-1957</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12350529">DERBY-1879</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12341414" name="derby1862.java" size="1599" author="djd" created="Fri, 22 Sep 2006 18:10:52 +0100"/>
                            <attachment id="12341342" name="derby1876.java" size="1514" author="djd" created="Fri, 22 Sep 2006 00:45:13 +0100"/>
                            <attachment id="12363814" name="ers_current_row.txt" size="4729" author="djd" created="Wed, 15 Aug 2007 01:32:36 +0100"/>
                            <attachment id="12354154" name="timeout_colcount.diff" size="3042" author="knutanders" created="Sun, 25 Mar 2007 07:51:42 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10362"><![CDATA[Performance]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Sep 2006 10:02:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30170</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0jrj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37020</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>