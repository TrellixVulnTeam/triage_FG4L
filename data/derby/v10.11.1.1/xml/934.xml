<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:21:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-934/DERBY-934.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-934] create a set of JUnit tests for Scrollable Updatable Resultsets</title>
                <link>https://issues.apache.org/jira/browse/DERBY-934</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Add a set of JUnit tests which tests the implementation for Scrollable Updatable ResultSets.&lt;/p&gt;

&lt;p&gt;The following is a description of how the tests will be implemented:&lt;br/&gt;
Data model in test:&lt;/p&gt;

&lt;p&gt;We use one table containing three int fields and one varchar(5000)&lt;br/&gt;
field. &lt;/p&gt;

&lt;p&gt;Then we run the tests on a number of variants of this model:&lt;/p&gt;

&lt;p&gt;1. None of the fields are indexed (no primary key, no secondary key)&lt;br/&gt;
2. One of the fields is indexed as primary key&lt;br/&gt;
3. One of the fields is indexed as primary key, another field is&lt;br/&gt;
   indexed as secondary key&lt;br/&gt;
4. One field is indexed as secondary key&lt;/p&gt;

&lt;p&gt;(primary key is unique, secondary key is not unique)&lt;/p&gt;

&lt;p&gt;By having these variations in the data model, we cover a number of&lt;br/&gt;
variations where the ScrollInsensitiveResultSet implementation uses&lt;br/&gt;
different classes of source ResultSets, and the CurrentOfResultSet&lt;br/&gt;
uses different classes of target and source ResultSet.&lt;/p&gt;

&lt;p&gt;The table can be created with the following fields:&lt;/p&gt;

&lt;p&gt;(id int, a int, b int, c varchar(5000))&lt;/p&gt;

&lt;p&gt;-&lt;br/&gt;
Queries for testing SUR:&lt;/p&gt;

&lt;p&gt;Select conditions:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Full table scan&lt;br/&gt;
SQL: SELECT * FROM T1&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Full table scan with criteria on non-indexed field&lt;br/&gt;
SQL: .. WHERE c like ?&lt;br/&gt;
SQL: .. WHERE b &amp;gt; ?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Full table scan with criteria on indexed field&lt;br/&gt;
SQL: .. WHERE id&amp;gt;a&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SELECT on primary key conditionals:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Upper and lower bond criteria:&lt;br/&gt;
SQL: .. WHERE ID&amp;gt;? and ID&amp;lt;?&lt;br/&gt;
SQL: .. WHERE ID=? &amp;#8211; (Single tuple)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Nested queries:&lt;br/&gt;
SQL: .. WHERE ID in (1,2,3,4) &lt;br/&gt;
SQL: .. WHERE a  in (1,2,3,4) &lt;br/&gt;
(Other nested queries containing a table seems to not permit updates)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;SELECT on secondary key conditionals:&lt;br/&gt;
SQL: .. WHERE a&amp;gt;? and a&amp;lt;?&lt;br/&gt;
SQL: .. WHERE a=?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Projections:&lt;br/&gt;
SQL: SELECT id,a,b,c&lt;br/&gt;
SQL: SELECT id,c,b,a&lt;br/&gt;
SQL: SELECT id,c&lt;br/&gt;
SQL: SELECT id,a&lt;br/&gt;
SQL: SELECT a,b,c&lt;br/&gt;
SQL: SELECT a,b&lt;br/&gt;
SQL: SELECT a,c&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The test should generate queries with all combinations of the&lt;br/&gt;
projection and select conditions, and then run a number of tests:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;test navigiation&lt;/li&gt;
	&lt;li&gt;test updates + navigation&lt;/li&gt;
	&lt;li&gt;test deletes + navigation&lt;/li&gt;
	&lt;li&gt;check rowUpdated() and rowDeleted() fields&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Scrollability: All scroll-insensitive cursors should be checked for&lt;br/&gt;
scrollability. Scrolling is tested by invoking: next(), previous(),&lt;br/&gt;
beforeFirst(), afterLast(), absolute(), relative(),  isBeforeFirst(),&lt;br/&gt;
isAfterLast(), isFirst(), isLast(),&lt;/p&gt;

&lt;p&gt;Updating a scrollable resultset: a ResultSets current row can be&lt;br/&gt;
updated either by using updateXXX() + updateRow(), or by using&lt;br/&gt;
a positioned update query.  All tests which updates row, will come in&lt;br/&gt;
two variants covering both these cases.&lt;/p&gt;

&lt;p&gt;-&lt;br/&gt;
Deleting rows in scrollable resultset also has two variants: one using&lt;br/&gt;
a positioned update query, and one using deleteRow().&lt;/p&gt;

&lt;p&gt;-&lt;br/&gt;
Special testcases:&lt;/p&gt;

&lt;p&gt;Test that you get a warning when specifying a query which is not&lt;br/&gt;
updatable and concurrency mode CONCUR_UPDATABLE.&lt;/p&gt;

&lt;p&gt;Case 1: Query containing order by&lt;br/&gt;
Case 2: Query containing a join&lt;/p&gt;

&lt;p&gt;Exceptions:&lt;/p&gt;

&lt;p&gt;Test that you get an exception when specifying update clause &quot;FOR UPDATE&quot;&lt;br/&gt;
along with a query which is not updatable.&lt;/p&gt;

&lt;p&gt;Cases:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Query containing order by&lt;/li&gt;
	&lt;li&gt;Query containing a join&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Test that you get an exception when attempting to update a ResultSet &lt;br/&gt;
which has been downgraded to a read only ResultSet due to the query &lt;/p&gt;

&lt;p&gt;Cases:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Query contained a join&lt;/li&gt;
	&lt;li&gt;Query contained a read only update clause&lt;/li&gt;
	&lt;li&gt;Query contained a order by&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Test that you get an exception when attempting to update a ResultSet &lt;br/&gt;
which has concurrency mode CONCUR_READ_ONLY&lt;/p&gt;

&lt;p&gt;Concurrency tests:&lt;br/&gt;
(ConcurrencyTest)&lt;/p&gt;

&lt;p&gt;Cases: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Test that update locks are downgraded to shared locks after&lt;br/&gt;
  repositioning. (fails with derby)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that we can aquire a update lock even if the row is locked with&lt;br/&gt;
  a shared lock.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that we can aquire a shared lock even if the row is locked with&lt;br/&gt;
  an update lock.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that we do not get a concurrency problem when opening two&lt;br/&gt;
  cursors as readonly.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test what happens if you update a deleted and purged record&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test what happens if you update a deleted and purged record using&lt;br/&gt;
  positioned update&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test what happens if you update a tuple which is deleted and then&lt;br/&gt;
  reinserted.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test what happens if you update a tuple which is deleted and then&lt;br/&gt;
  reinserted with the exact same values&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test what happens if you update a tuple which has been modified by&lt;br/&gt;
  another transaction.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that you cannot compress the table while the ResultSet is open,&lt;br/&gt;
  and the transaction is open (for validity of RowLocation)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that you cannot purge a row if it is locked&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Test that Derby set updatelock on current row when using&lt;br/&gt;
  read-uncommitted&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12328706">DERBY-934</key>
            <summary>create a set of JUnit tests for Scrollable Updatable Resultsets</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12325456">DERBY-690</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="andreask">Andreas Korneliussen</assignee>
                                    <reporter username="andreask">Andreas Korneliussen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Feb 2006 17:09:53 +0000</created>
                <updated>Wed, 8 Mar 2006 17:26:04 +0000</updated>
                            <resolved>Wed, 8 Mar 2006 17:25:48 +0000</resolved>
                                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Test</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12365563" author="andreask" created="Wed, 8 Feb 2006 22:56:47 +0000"  >&lt;p&gt;Attached is the set of tests for SUR. The tests can be run standalone using junit.textui.TestRunner, or by also applying &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-918&quot; title=&quot;introduce a new test type to run junit tests from the current harness&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-918&quot;&gt;&lt;del&gt;DERBY-918&lt;/del&gt;&lt;/a&gt;, they can be run from the harness. When run from the harness, the harness will do the job of setting up the NetworkServer, and of cleaning up after the tests.&lt;/p&gt;

&lt;p&gt;Note that all the tests will fail, since the implementation of SUR has not yet been provided.  The tests are therefore not enabled in any suites.&lt;/p&gt;

&lt;p&gt;Test overview:&lt;br/&gt;
 SURDataModelSetup: A test decorator which creates a datamodel for&lt;br/&gt;
testing SUR, and populates it with data. Provides an enumerator of&lt;br/&gt;
datamodels which it supports.&lt;/p&gt;

&lt;p&gt;SURBaseTest: base class for testing SUR.&lt;/p&gt;

&lt;p&gt;SURQueryMixTest: tests a mix of queries on a mix of data models. The&lt;br/&gt;
test can be parameterized with query, cursor name and a flag to&lt;br/&gt;
decide if it should test with positioned update instead of updateRow()&lt;br/&gt;
and deleteRow(). Tests of this class needs to be decorated with&lt;br/&gt;
SURDataModelSetup.&lt;/p&gt;

&lt;p&gt;SURTest: a number of tests for scrollable resultsets, metadata, and&lt;br/&gt;
warnings. Tests corner cases which are not covered by SURQueryMixTest. &lt;br/&gt;
Tests of this class needs to be decorated with SURDataModelSetup.&lt;/p&gt;

&lt;p&gt;ConcurrencyTest: tests lock behaviour relevant for scrollable&lt;br/&gt;
updatable resultsets. Tests of this class needs to be decorated with&lt;br/&gt;
SURDataModelSetup.&lt;/p&gt;

&lt;p&gt;How to run the tests:&lt;br/&gt;
----------------------&lt;br/&gt;
The tests can be run from the harness as junit tests (requires &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-918&quot; title=&quot;introduce a new test type to run junit tests from the current harness&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-918&quot;&gt;&lt;del&gt;DERBY-918&lt;/del&gt;&lt;/a&gt; patch):&lt;br/&gt;
Examples:&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.functionTests.harness.RunTest junitTests/sur/SURTest.junit&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.functionTests.harness.RunTest junitTests/sur/SURQueryMixTest.junit&lt;/p&gt;

&lt;p&gt;java org.apache.derbyTesting.functionTests.harness.RunTest junitTests/sur/ConcurrencyTest.junit&lt;/p&gt;

&lt;p&gt;The tests can also be run directly using any junit TestRunners&lt;/p&gt;
</comment>
                            <comment id="12365574" author="djd" created="Thu, 9 Feb 2006 00:04:50 +0000"  >&lt;p&gt;Is this the plan for junit tests, to have a test directory per function, namely the &apos;sur&apos; directory here?&lt;/p&gt;

&lt;p&gt; junitTests/sur/SURTest.junit &lt;/p&gt;

&lt;p&gt;If these tests were added under the old harness the correct location would be&lt;/p&gt;

&lt;p&gt;tests/jdbcapi&lt;/p&gt;

&lt;p&gt;The existing junitTests sub-directories are higher level than a set of functionality and two of the three match the exisitng harness layout, lang and bderyNet&lt;/p&gt;
</comment>
                            <comment id="12365728" author="andreask" created="Thu, 9 Feb 2006 22:35:33 +0000"  >&lt;p&gt;I have updated the patch to place these junit tests into the tests/jdbcapi directory&lt;/p&gt;</comment>
                            <comment id="12365836" author="davidvc" created="Fri, 10 Feb 2006 13:50:10 +0000"  >&lt;p&gt;My second ( and last) batch of comments.  I would be willing to commit this patch if it weren&apos;t for the generically swallowed SQLExceptions on negative tests, the rest are just nits or questions.  REALLY GOOD TESTS, thanks for all your hard work on this!&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You are testing concurrency issues with READ_COMMITTED and REPEATABLE_READ isolation levels (and why you choose one over the other for various tests is not clear to me; any comments in the code around this I think would be most helpful.)  Do we need to test at other isolation levels?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In many of the concurrency tests, you say &quot;test what happens&quot;.  It would be great if you described the overall strategy and expected behavior in the comments.  For example, what is the difference between tests 11 and 12?  The javadoc comments are equivalent, and there are subtle differences in the two tests, and it&apos;s not clear what&apos;s motivating those differences.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testConcurrency13 - your comments next to the commented out lines are a bit mysterious.  More explanation is needed.  And again, please look for the particular SQL State that should cause a failure, rather than accepting any SQLException as a sign of success.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testCompressDuringScan - why do you print a stack trace on an expected exception?  Isn&apos;t that going to generate spurious output, sort of a &quot;no-no&quot; for JUnit, style, assertion-based testing?  Is this because you want to be sure the &quot;right&quot; exception occurs?  If so, couldn&apos;t you do this by checking SQL State?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In many of the concurrency tests you have commented out the last assertion.  Can you explain why?  It seems you need to either add a comment explaining whey and when they should be uncommented, or remove the lines altogether.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Half way through SURTest.java you stop providing method comments for your tests.  Those were quite valuable, any reason you stopped?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testScrollInsensitiveConcurUpdatableWithForUpdate1() - please comment why you commented out rs.last(), rs.first(), rs.previous(), or  remove the lines.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testScrollInsensistiveConurUpdatable3 - You call System.out.print (&quot;.&quot;) for each row.  More noise into the output.  Any reason for this, or is this a debug statement that you forgot to remove?  Also, more code commented out with no explanation...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SURTest.suite() also has these strange statement blocks with locally scoped variables.  OK, I guess, but not the kind of Java I&apos;m used to seeing, and I am not sure I see the value in it...&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12365844" author="davidvc" created="Fri, 10 Feb 2006 14:17:32 +0000"  >&lt;p&gt;One final comment: that was a &lt;b&gt;lot&lt;/b&gt; of code to review in one go.  In the future it would be great if you could submit this in smaller, more manageable chunks.  It will ensure a better, closer review and won&apos;t cause &quot;review fatigue&quot; on us poor committers.&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12365926" author="andreask" created="Sat, 11 Feb 2006 02:03:13 +0000"  >&lt;p&gt;Here is an update. I now think I have fixed all the issues you reported, and especially added the checks on SQLState, added more comments and removed debug printing.&lt;br/&gt;
Renamed some of the testcases in ConcurrencyTest, and removed some testcases which were unuseful (discovered while I added the comments and checks for SQLState). ConcurrencyTest uses a mix of different isolation levels. When I use REP.READ, it is because I want to provoke a LOCK wait situation, however for most of these tests, the isolation level does not matter, since (except ConcurrencyTest) all tests just run one transaction at the time.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12322835" name="DERBY-934.diff" size="108509" author="andreask" created="Sat, 11 Feb 2006 02:03:13 +0000"/>
                            <attachment id="12322791" name="DERBY-934.stat" size="455" author="andreask" created="Thu, 9 Feb 2006 22:35:33 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 9 Feb 2006 00:04:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29787</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy171r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40792</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>