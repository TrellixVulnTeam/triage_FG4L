<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:27:33 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3002/DERBY-3002.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3002] Add support for GROUP BY ROLLUP</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3002</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Provide an implementation of the ROLLUP form of multi-dimensional grouping according to the SQL standard.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://wiki.apache.org/db-derby/OLAPRollupLists&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/OLAPRollupLists&lt;/a&gt; for some more detailed information about this aspect of the SQL standard.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12375845">DERBY-3002</key>
            <summary>Add support for GROUP BY ROLLUP</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="bryanpendleton">Bryan Pendleton</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Aug 2007 16:20:56 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:16 +0100</updated>
                            <resolved>Sat, 13 Aug 2011 01:51:00 +0100</resolved>
                                    <version>10.4.1.3</version>
                                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                                                            <comments>
                            <comment id="12519689" author="bryanpendleton" created="Tue, 14 Aug 2007 15:21:12 +0100"  >&lt;p&gt;My first idea is to try placing the logic for this feature inside GroupedAggregateResultSet. It seems like it should be fairly straightforward (famous last words!) to compute the aggregates for multiple grouping sets in a single pass through the source records.&lt;/p&gt;</comment>
                            <comment id="12521259" author="bryanpendleton" created="Mon, 20 Aug 2007 23:21:45 +0100"  >&lt;p&gt;Attached is &apos;prototypeChangeNoTests.diff&apos;, which is &lt;b&gt;not&lt;/b&gt; for commit.&lt;/p&gt;

&lt;p&gt;This is an experimental change that I made to investigate a possible&lt;br/&gt;
implementation for GROUP BY ROLLUP(...).&lt;/p&gt;

&lt;p&gt;This change:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;modifies the parser to accept the new syntax&lt;/li&gt;
	&lt;li&gt;modifies GroupByList to have a boolean &quot;rollup&quot; flag&lt;/li&gt;
	&lt;li&gt;modifies the result set factory to pass the GroupByList&apos;s rollup&lt;br/&gt;
   setting down to the GroupedAggregateResultSet&lt;/li&gt;
	&lt;li&gt;modifies GroupedAggregateResultSet to implement rollup&lt;br/&gt;
  processing by computing N total sorts, one for each level of the rollup.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m posting this work-in-process change in the hopes of getting some&lt;br/&gt;
feedback about whether this is a reasonable strategy for the overall implementation.&lt;/p&gt;

&lt;p&gt;The change seems to work in some trivial tests, although there are&lt;br/&gt;
several bugs that I already know about:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it doesn&apos;t interact properly with index-driven no-sort-required aggregation&lt;/li&gt;
	&lt;li&gt;i&apos;m not sure it handles DISTINCT aggregation properly&lt;/li&gt;
	&lt;li&gt;it doesn&apos;t do the &quot;0th level&quot; aggregation on &lt;b&gt;all&lt;/b&gt; the columns in the rollup&lt;br/&gt;
However, it does seem to behave reasonably for the simple case of:&lt;br/&gt;
  SELECT c1,c2,c3,sum(c4) FROM t1 GROUP BY ROLLUP(c1,c2,c3)&lt;br/&gt;
so I felt sufficiently encouraged to post this partial patch in order to&lt;br/&gt;
give us some &quot;real code&quot; to discuss.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A particular issue that I&apos;d like to get feedback on is whether the ROLLUP&lt;br/&gt;
case is worth implementing separately, or whether it would be better&lt;br/&gt;
to investigate the more general case of implementing GROUPING SETS&lt;br/&gt;
and CUBE() groupings as part of a single implementation.&lt;/p&gt;</comment>
                            <comment id="12521273" author="mkhettry" created="Tue, 21 Aug 2007 00:19:49 +0100"  >&lt;p&gt;If I read the diff correctly, you&apos;re sorting the same data multiple times? Is it not possible to compute the rollups with a single sort? The wiki page also suggests that this is possible. &lt;/p&gt;

</comment>
                            <comment id="12521308" author="bryanpendleton" created="Tue, 21 Aug 2007 04:07:27 +0100"  >&lt;p&gt;Hi Manish thanks for reading the diff. You are absolutely right that it is possible to compute the rollups with a single sort, but I haven&apos;t made that optimization yet. I shall work on improving the wiki to make this clearer.&lt;/p&gt;

&lt;p&gt;As I see it, there are basically 3 ways to perform grouped aggregation, and numerous ways to combine these three variants.&lt;br/&gt;
1) If the records to be grouped are already in sorted order, perhaps due to a scan of an index, or a previous merge-sort-join operation, or a duplicate-eliminating distinct sort, then the grouping operation can be implemented by comparing each pair of records on the grouping attributes; each time a new value of the grouping attributes is encountered, the computation of the previous group can be finalized and emitted. This is the algorithm discussed in the wiki page, and is currently implemented by Derby for a single set of grouping attributes; I have not yet constructed a patch to extend this logic for a ROLLUP set of groups.&lt;br/&gt;
2) An unsorted set of records can be grouped by feeding them into the sorter, configured for duplicate elimination, with a sort observer which aggregates each row&apos;s values into the retained row&apos;s columns during duplicate processing. Each such sort groups the records by a specific set of grouping attributes. The patch that I constructed uses N sorts to group the records by N different sets of grouping attributes. The input rows are read only once, but then are added to each of the N sorts. This is dramatically more efficient than the alternate query-rewriting algorithm of constructing N GROUP BY statements and then UNION&apos;ing their results together, since in this implementation the input rows are materialized and read only once.&lt;br/&gt;
3) An unsorted set of records can also be grouped by feeding them into a hash table, whose keys are the grouping attributes, with a hash-collision observer which aggregates each row&apos;s values into the retained row&apos;s columns during duplicate key elimination. This is fundamentally similar to the sort-based technique, with the important difference that at the end of the processing, the rows will NOT be emitted in sorted order.&lt;/p&gt;

&lt;p&gt;Derby currently implements techniques (1) and (2) for grouped aggregate computation; I am not aware of any code which implements a hash-based technique for grouped aggregates in Derby.&lt;/p&gt;

&lt;p&gt;As Manish notes, techniques (1) and (2) can be combined into an algorithm which computes the N ROLLUP groups using a single sort, by first sorting (and aggregating) the rows on their finest level of grouping detail. Then, as the rows are being retrieved in sorted order, the code could detect when a new value of grouping attributes is being retrieved, and could automatically compute that higher level group at that time. Thus if we are computing the GROUP BY ABCD, ABC, AB, and A, we can:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;sort (and group and aggregate) the data on ABCD&lt;/li&gt;
	&lt;li&gt;For each row we retrieve, we can propagate it up the pipeline to compute the appropriate ABC group, the appropriate AB group, the appropriate A group, and the appropriate all-rows group.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This algorithm seems to hold the potential for being quite efficient, but I haven&apos;t investigated the actual coding yet, and for the time being as an experiment I investigated the easier-to-code but less efficient multiple-sorts algorithm.&lt;/p&gt;</comment>
                            <comment id="12524311" author="bryanpendleton" created="Sat, 1 Sep 2007 23:14:16 +0100"  >&lt;p&gt;Working on this issue will entail adding a number of new GROUP BY tests; I&apos;ll open a sub-task of this issue to convert the existing lang/groupBy.sql tests to JUnit so that the new tests can be added as part of a more modern framework. Hopefully the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2151&quot; title=&quot;&amp;quot;Fixer-upper&amp;quot; utility to help convert ij canon-based tests to JUnit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2151&quot;&gt;&lt;del&gt;DERBY-2151&lt;/del&gt;&lt;/a&gt; tool will produce a reasonable first version of that test.&lt;/p&gt;</comment>
                            <comment id="12598527" author="bryanpendleton" created="Wed, 21 May 2008 00:30:51 +0100"  >&lt;p&gt;I&apos;ve updated the patch to apply properly with the current head of trunk&lt;br/&gt;
and I&apos;ve also included the beginnings of a functional test, with a single&lt;br/&gt;
positive test and a handful of error-testing tests.&lt;/p&gt;

&lt;p&gt;For the time being, I intend to concentrate on functionality and&lt;br/&gt;
correctness, and on building up a regression test suite. Later, I&lt;br/&gt;
hope to address the performance aspects of the ROLLUP operator.&lt;/p&gt;</comment>
                            <comment id="12696066" author="knutanders" created="Mon, 6 Apr 2009 13:54:32 +0100"  >&lt;p&gt;This issue has had what looks like a fairly complete patch for quite some time. Should we try to get it committed?&lt;/p&gt;

&lt;p&gt;I haven&apos;t studied the details of the patch, but the general approach looks fine to me. I think this is a very useful feature even if the performance is suboptimal.&lt;/p&gt;

&lt;p&gt;My only comments after reading the patch, are&lt;/p&gt;

&lt;p&gt;1) If I read &lt;a href=&quot;http://wiki.apache.org/db-derby/OLAPRollupLists&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/OLAPRollupLists&lt;/a&gt; correctly, the set of expected rows returned by the test case lacks one row: &lt;/p&gt;
{null,null,null,&quot;12&quot;}

&lt;p&gt;2) The patch appears to have been created with a text editor whose tab size is 8, so the new space-indented lines are too far to the right&lt;/p&gt;</comment>
                            <comment id="12696072" author="knutanders" created="Mon, 6 Apr 2009 14:13:24 +0100"  >&lt;p&gt;One more comment after testing the patch (yes, it still applies cleanly on trunk!):&lt;/p&gt;

&lt;p&gt;The patch doesn&apos;t make ROLLUP a reserved keyword, so we can still have columns with that name (which is good, I think). But we cannot group by a column named ROLLUP without quoting the column name:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t2(rollup int, x int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select rollup, sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t2 group by rollup;&lt;br/&gt;
ERROR 42X01: Syntax error: Encountered &quot;&amp;lt;EOF&amp;gt;&quot; at line 1, column 45.&lt;br/&gt;
Issue the &apos;help&apos; command for general information on IJ command syntax.&lt;br/&gt;
Any unrecognized commands are treated as potential SQL commands and executed directly.&lt;br/&gt;
Consult your DBMS server reference documentation for details of the SQL syntax supported by your server.&lt;br/&gt;
ij&amp;gt; select rollup, sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t2 group by &quot;ROLLUP&quot;;&lt;br/&gt;
ROLLUP     |2          &lt;br/&gt;
-----------------------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;

&lt;p&gt;I think this small incompatibility could be avoided by adding a lookahead in the grammar so that we only try to parse it as a multi-level grouping clause if ROLLUP is followed by a left parenthesis.&lt;/p&gt;</comment>
                            <comment id="12696075" author="knutanders" created="Mon, 6 Apr 2009 14:18:49 +0100"  >&lt;p&gt;I converted this issue to a top-level issue, since it&apos;s not really a sub-task of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-581&quot; title=&quot;Modify SQL to skip N rows of the result and return the next M rows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-581&quot;&gt;&lt;del&gt;DERBY-581&lt;/del&gt;&lt;/a&gt; (Modify SQL to skip N rows of the result and return the next M rows).&lt;/p&gt;</comment>
                            <comment id="12698129" author="bryanpendleton" created="Sat, 11 Apr 2009 21:17:51 +0100"  >&lt;p&gt;Hi Knut, thanks for the comments and review! I kind of lost track of this issue, but would&lt;br/&gt;
like to return to it and get it completed. Your suggestions will be most helpful in that effort.&lt;/p&gt;

&lt;p&gt;For the time being, I&apos;m sort of consumed with &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2487&quot; title=&quot;Enhance Derby with EXPLAIN Functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2487&quot;&gt;&lt;del&gt;DERBY-2487&lt;/del&gt;&lt;/a&gt;, but after that work is complete&lt;br/&gt;
I&apos;ll revisit this work and see if I can figure out what&apos;s left to do.&lt;/p&gt;</comment>
                            <comment id="12710213" author="bryanpendleton" created="Sun, 17 May 2009 20:18:05 +0100"  >&lt;p&gt;Thanks Knut for the suggestions and encouragement! Attached is&lt;br/&gt;
&apos;useLookahead.diff&apos;, which:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;brings the patch up to date with the current trunk&lt;/li&gt;
	&lt;li&gt;adds a new test as Knut suggested to investigate the behavior when trying&lt;br/&gt;
   to GROUP BY  a column named ROLLUP&lt;/li&gt;
	&lt;li&gt;adds a LOOKAHEAD instruction to the ROLLUP section of the grammar&lt;br/&gt;
   to assist with distinguishing between a ROLLUP grouping and a ROLLUP column.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think that the next step is to add a number of additional tests, and also some documentation. It would also be nice to investigate the performance impacts&lt;br/&gt;
of the feature, as well as the opportunities for further performance improvements.&lt;/p&gt;</comment>
                            <comment id="12712605" author="bryanpendleton" created="Sun, 24 May 2009 22:06:11 +0100"  >&lt;p&gt;Attached &apos;fixWhiteSpace.diff&apos; patch fixes the tabs-vs-spaces&lt;br/&gt;
whitespace problems in GroupedAggregateResultSet.java,&lt;br/&gt;
and also fixes the off-by-one error that, as Knut noticed, was&lt;br/&gt;
failing to do the all-levels roll up of all the results into a single master.&lt;/p&gt;</comment>
                            <comment id="12712730" author="knutanders" created="Mon, 25 May 2009 15:20:18 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;fixWhiteSpace.diff looks like a fine first increment. I only have some minor comments:&lt;/p&gt;

&lt;p&gt;a) There are still some whitespace issues (too much indentation) in some of the files. Looking at the patch with &quot;expand -t4 fixWhiteSpace.diff | less&quot; should make them easy to spot.&lt;/p&gt;

&lt;p&gt;b) I haven&apos;t checked what the standard says, so my expectation may be wrong, but I&apos;d expect a different result from a query like this (using the RU table from the test case in OLAPTest):&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select a, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from ru where 1&amp;lt;&amp;gt;1 group by rollup(a);&lt;br/&gt;
A          |2          &lt;br/&gt;
-----------------------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;

&lt;p&gt;My expectation is that this query should return one row: &lt;/p&gt;
{null, 0}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;c) I think the lookahead needs to check for getToken(1).kind == ROLLUP in addition to the check for getToken(2). The current lookahead breaks some statements.&lt;/p&gt;

&lt;p&gt;Without patch:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from ru group by mod(a,b);&lt;br/&gt;
1          &lt;br/&gt;
-----------&lt;br/&gt;
3          &lt;br/&gt;
2          &lt;/p&gt;

&lt;p&gt;2 rows selected&lt;/p&gt;

&lt;p&gt;With patch:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from ru group by mod(a,b);&lt;br/&gt;
ERROR 42X01: Syntax error: Encountered &quot;mod&quot; at line 1, column 34.&lt;/p&gt;

&lt;p&gt;d) The result set meta-data gets the nullability for the GROUP BY columns wrong. For example, in the query below, the meta-data says that all the columns are non-nullable, but the result does contain nulls:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select 1,2,3,count(d) from ru group by rollup(1,2,3);&lt;br/&gt;
1          |2          |3          |4          &lt;br/&gt;
-----------------------------------------------&lt;br/&gt;
1          |2          |3          |5          &lt;br/&gt;
1          |2          |NULL       |5          &lt;br/&gt;
1          |NULL       |NULL       |5          &lt;br/&gt;
NULL       |NULL       |NULL       |5          &lt;/p&gt;

&lt;p&gt;4 rows selected&lt;/p&gt;</comment>
                            <comment id="12713996" author="bryanpendleton" created="Thu, 28 May 2009 15:54:36 +0100"  >&lt;p&gt;Hi Knut, thanks again for the notes and observations.&lt;/p&gt;

&lt;p&gt;Your point about the handling of empty result sets is intriguing.&lt;/p&gt;

&lt;p&gt;Consider the short script shown below. I&apos;m confused about why the&lt;br/&gt;
second SELECT statement returns 1 row, but the first and third&lt;br/&gt;
SELECT statements return 0 rows.&lt;/p&gt;

&lt;p&gt;Do you understand why this behavior exists, and whether it&apos;s appropriate?&lt;/p&gt;

&lt;p&gt;ij&amp;gt; create table t (a int, b int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select sum(b) from t group by a;&lt;br/&gt;
1&lt;br/&gt;
-----------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;br/&gt;
ij&amp;gt; select sum(b) from t;&lt;br/&gt;
1&lt;br/&gt;
-----------&lt;br/&gt;
NULL&lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij&amp;gt; insert into t values (1,1);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; select sum(b) from t where 1 &amp;lt;&amp;gt; 1 group by a;&lt;br/&gt;
1&lt;br/&gt;
-----------&lt;/p&gt;

&lt;p&gt;0 rows selected&lt;/p&gt;</comment>
                            <comment id="12714452" author="bryanpendleton" created="Fri, 29 May 2009 14:44:02 +0100"  >&lt;p&gt;Added more tests, many of which were suggested by Knut. Changed GroupByNode&lt;br/&gt;
to set nullability on for ROLLUP group by statements. Fixed some more whitespace.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand the behavior on empty result sets. The test includes some test&lt;br/&gt;
cases in that area, but I&apos;m not sure if the results are correct.&lt;/p&gt;

&lt;p&gt;Still need to add test cases in the area of sort-avoidance group by, distinct group by,&lt;br/&gt;
and probably other areas.&lt;/p&gt;</comment>
                            <comment id="12714542" author="knutanders" created="Fri, 29 May 2009 19:25:35 +0100"  >&lt;p&gt;I think the results in your examples without rollup are correct. At least I see the same same results when I try the statements in PostgreSQL. When you have GROUP BY and no rows in the table, there are no groups, so the result should be empty.&lt;/p&gt;

&lt;p&gt;The wiki page says that a rollup query is semantically equivalent to a union where the last subquery in the union has no group by. I think this means that this query&lt;/p&gt;

&lt;p&gt;  SELECT a, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T GROUP BY ROLLUP(a)&lt;/p&gt;

&lt;p&gt;should be equivalent to&lt;/p&gt;

&lt;p&gt;  SELECT a, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T GROUP BY (a)&lt;br/&gt;
    UNION&lt;br/&gt;
  SELECT NULL, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T&lt;/p&gt;

&lt;p&gt;Since SELECT NULL, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T always returns one row, the union query should always return at least one row.&lt;/p&gt;</comment>
                            <comment id="12714583" author="bryanpendleton" created="Fri, 29 May 2009 21:30:44 +0100"  >&lt;p&gt;I agree with your analysis, and will try to work on such an implementation.&lt;/p&gt;

&lt;p&gt;Note that, as far as I can tell, SELECT NULL, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T is not actually legal in Derby.&lt;br/&gt;
However, the roughly similar queries SELECT CAST(NULL AS INT), COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T and&lt;br/&gt;
SELECT &apos;NULL&apos;, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T are legal, and, as you say, return the result set &lt;/p&gt;
{&quot;NULL&quot;, 0}

&lt;p&gt;I&apos;m not sure where I got this &quot;semantically equivalent to a union&quot; terminology from when I wrote&lt;br/&gt;
the wiki page. It&apos;s certainly true that the original Jim Gray &quot;Data Cube&quot; paper from 1996 uses the&lt;br/&gt;
technique of defining ROLLUP in terms of an equivalent UNION query, but I don&apos;t think that&apos;s&lt;br/&gt;
how the actual SQL Standard ended up defining ROLLUP. However, I find the SQL Standard hard to read.&lt;/p&gt;

&lt;p&gt;In the SQL Standard, ROLLUP is defined in terms of an equivalent GROUPING SETS query, and&lt;br/&gt;
GROUPING SETS includes the (new) syntax &quot;GROUP BY ()&quot;. NOTE 137 of the SQL 2003 spec, in section 7.9, says:&lt;/p&gt;

&lt;p&gt;  The result of the transform is to replace RL with a &amp;lt;grouping sets specification&amp;gt; that contains&lt;br/&gt;
  a &amp;lt;grouping set&amp;gt; for every initial sublist of the &amp;lt;ordinary grouping set list&amp;gt; of the &amp;lt;rollup list&amp;gt;,&lt;br/&gt;
  obtained by dropping &amp;lt;ordinary grouping set&amp;gt;s from the right, one by one, and concatenating&lt;br/&gt;
  each &amp;lt;ordinary grouping set list&amp;gt; so obtained. The &amp;lt;empty grouping set&amp;gt; is regarded as the&lt;br/&gt;
  shortest such initial sublist.&lt;/p&gt;

&lt;p&gt;So GROUP BY ROLLUP(a) is (internally) transformed into GROUP BY GROUPING SETS( (a), () )&lt;/p&gt;

&lt;p&gt;Then, elsewhere in 7.9, in the &quot;General Rules&quot; section, it says:&lt;/p&gt;

&lt;p&gt;  If there are no grouping columns, then the result of the &amp;lt;group by clause&amp;gt; is the grouped table&lt;br/&gt;
  consisting of T as its only group.&lt;/p&gt;

&lt;p&gt;So I &lt;b&gt;think&lt;/b&gt; that the SQL Standard says that&lt;/p&gt;

&lt;p&gt;  SELECT a, count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T GROUP BY ROLLUP(a)&lt;/p&gt;

&lt;p&gt;should be equivalent to:&lt;/p&gt;

&lt;p&gt;  SELECT a, COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T GROUP BY (a)&lt;br/&gt;
    UNION&lt;br/&gt;
  SELECT CAST ( NULL AS INT), COUNT&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FROM T GROUP BY ()&lt;/p&gt;

&lt;p&gt;So, anyway, I think that the wiki page is somewhat inaccurate in this respect, and doesn&apos;t truly&lt;br/&gt;
obey the SQL Standard, because as you say the wiki page says that the last subquery in the&lt;br/&gt;
union has no group by, but the SQL Standard says that the last subquery in the union has GROUP BY ().&lt;/p&gt;

&lt;p&gt;I still think that your analysis is correct, and will try to make the implementation comply.&lt;/p&gt;
</comment>
                            <comment id="12719925" author="bryanpendleton" created="Tue, 16 Jun 2009 05:53:44 +0100"  >&lt;p&gt;I&apos;ve been spending a lot of time thinking about how to avoid unnecessary&lt;br/&gt;
sorts in the ROLLUP case, about how to handle DISTINCT aggregates,&lt;br/&gt;
and about how to handle the already-in-sorted-order case.&lt;/p&gt;

&lt;p&gt;The result is the attached &apos;rewriteGroupByRS.diff&apos;, which contains an&lt;br/&gt;
almost-completely-rewritten GroupedAggregateResultSet.java, together&lt;br/&gt;
with a lot of new test cases in OLAPTest.java.&lt;/p&gt;

&lt;p&gt;The new code no longer uses the sort-observer style of aggregate&lt;br/&gt;
computation. Instead, the code sorts the input data once, if it isn&apos;t already&lt;br/&gt;
in sorted order, then computes all the aggregates, at all the ROLLUP levels,&lt;br/&gt;
in a single pass over the (sorted) input data. DISTINCT aggregates are&lt;br/&gt;
processed using in-memory hash tables of the unique values, which&lt;br/&gt;
means that we can now support multiple DISTINCT aggregates in&lt;br/&gt;
a GROUP BY statement. (However, I&apos;m not sure that DISTINCT aggregates&lt;br/&gt;
are really very useful, so I&apos;m not sure that this is very much of a compelling&lt;br/&gt;
new feature.)&lt;/p&gt;

&lt;p&gt;There are still some bugs in the code, as I have about 6 total failures in&lt;br/&gt;
the regression suites that I have to track down and study.&lt;/p&gt;

&lt;p&gt;But, I think that this is a substantial improvement over the previous patch,&lt;br/&gt;
as it handles the major unresolved issues from the previous reviews:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;multiple sorts are no longer needed&lt;/li&gt;
	&lt;li&gt;in-order data now works correctly with ROLLUP&lt;/li&gt;
	&lt;li&gt;DISTINCT aggregates now work correctly with ROLLUP&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch isn&apos;t ready for commit, and probably isn&apos;t worth reviewing, at least&lt;br/&gt;
until I get the regression test failures resolved, and take a pass over the patch&lt;br/&gt;
to resolve any FIXME comments that I left in it.&lt;/p&gt;

&lt;p&gt;However, any feedback is most appreciated!&lt;/p&gt;</comment>
                            <comment id="12720687" author="bryanpendleton" created="Wed, 17 Jun 2009 15:23:07 +0100"  >&lt;p&gt;Attached is &apos;passesRegressionTests.diff&apos;, a fairly full-formed patch&lt;br/&gt;
proposal for this issue.&lt;/p&gt;

&lt;p&gt;The regression tests now pass for me in my environment, including&lt;br/&gt;
the new tests added in this patch.&lt;/p&gt;

&lt;p&gt;I&apos;ve still got some cleanup to do, in terms of whitespace checking,&lt;br/&gt;
FIXME resolving, and so forth.&lt;/p&gt;

&lt;p&gt;But I&apos;m starting to think I&apos;m getting close to a commit-worthy patch.&lt;/p&gt;

&lt;p&gt;So if anyone has time to take a look at this most recent patch,&lt;br/&gt;
feedback would be very much appreciated.&lt;/p&gt;</comment>
                            <comment id="12723093" author="knutanders" created="Tue, 23 Jun 2009 15:39:10 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;Thanks for adding all the test cases. I haven&apos;t dived into the details of the latest patch, but I have a couple of questions:&lt;/p&gt;

&lt;p&gt;The patch changes how we compute aggregates for the non-rollup case as well, and a comment in the patch says that the old technique was efficient. Have you planned to run tests to verify that we don&apos;t introduce any performance regressions for non-rollup group bys?&lt;/p&gt;

&lt;p&gt;Some of the run-time statistics for existing queries have changed, returning more rows from the sorts. Is that expected?&lt;/p&gt;

&lt;p&gt;What are the memory requirements for the in-memory hash table? Does it hold one copy of every unique value in the table/query? Can it run out of memory if the query accesses a very large table?&lt;/p&gt;</comment>
                            <comment id="12724810" author="bryanpendleton" created="Sat, 27 Jun 2009 07:44:36 +0100"  >&lt;p&gt;Hi Knut, thanks again for having a look at the patch. Your help is much appreciated!&lt;/p&gt;

&lt;p&gt;I think that writing a simple GROUP BY benchmark would be an excellent next step. Is there such a benchmark readily available? If not, I&apos;ll put one together.&lt;/p&gt;

&lt;p&gt;The changes to the run-time statistics are precisely because the algorithm has changed: instead of the sort-observer technique, we now always compute aggregates in-line, so the sort step no longer &quot;collapses&quot; groups and the same number of rows are output from the sort as are input, whereas before the sorter would perform the grouping as a side effect, and the number of output rows was equal to the number of groups. So yes the behavior change in the statistics is expected.&lt;/p&gt;

&lt;p&gt;The in-memory hash tables are only used for DISTINCT aggregates, and will hold one copy of every unique value of that particular column in that particular group. They could indeed run out of memory if the distribution of data was just right. I don&apos;t have a good intuition for (a) how often DISTINCT aggregates are used, (b) how many distinct values there tend to be per group, and (c) what sort of data types are used for DISTINCT aggregates. In my benchmark, I can try to construct a DISTINCT aggregate which uses an inordinate amount of memory, and we can see how it behaves.&lt;/p&gt;</comment>
                            <comment id="12724829" author="knutanders" created="Sat, 27 Jun 2009 11:12:41 +0100"  >&lt;p&gt;Hi Bryan,&lt;/p&gt;

&lt;p&gt;I&apos;m not aware of any GROUP BY benchmarks that we can use, so I guess we&apos;ll have to write a simple one ourselves. The reason why I asked was that it wasn&apos;t quite clear to me (well, it still isn&apos;t... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) whether your comment about aggregate sort observers being an efficient technique meant that you thought the new technique was less efficient.&lt;/p&gt;

&lt;p&gt;As to the hash tables, one alternative is to use a BackingStoreHashTable, which keeps the data in a HashMap up to a certain point, after which it spills data to disk (or at least to the page cache). It&apos;ll probably increase the overhead, though.&lt;/p&gt;</comment>
                            <comment id="12724860" author="bryanpendleton" created="Sat, 27 Jun 2009 15:41:42 +0100"  >&lt;p&gt;Indeed, I &lt;b&gt;am&lt;/b&gt; concerned that there may be some circumstances where the new technique&lt;br/&gt;
is less efficient.  An example might be a case where there is a large amount of data to be&lt;br/&gt;
processed, but a very small number of groups; in this case, most of the raw data ends up&lt;br/&gt;
being discarded during the GROUP BY processing, and the sort-observer technique will&lt;br/&gt;
discard the unneeded data sooner, which means it may have a substantial edge over the&lt;br/&gt;
new algorithm. However, other circumstances, such as those in which an index exists, and&lt;br/&gt;
thus the data can be processed in sorted order automatically, and those in which the data&lt;br/&gt;
is relatively small, and thus is not expensive to sort, and those in which there is a lot of data,&lt;br/&gt;
but there are also many different values for the grouping column, may not see much impact at all.&lt;/p&gt;

&lt;p&gt;And, I am just guessing about the performance impacts; I don&apos;t know how important&lt;br/&gt;
this distinction will be, given the multitude of other things that occur during query processing.&lt;/p&gt;

&lt;p&gt;Earlier in the project, I intended to support multiple algorithms. However, I then realized:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we&apos;d have to have multiple sets of code for the same functionality&lt;/li&gt;
	&lt;li&gt;we&apos;d have to have some way of determining, at runtime, which implementation to choose.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both problems seemed quite troubling, the second problem seemed very important,&lt;br/&gt;
because if the selection of the appropriate algorithm is based on information about&lt;br/&gt;
the size and distribution of the data being processed by the query, then the decision ought&lt;br/&gt;
to be made by the optimizer, which appeared like it would dramatically increase the&lt;br/&gt;
complexity of this project.&lt;/p&gt;

&lt;p&gt;So it would be great if the single implementation was &quot;good enough&quot; for the queries we&lt;br/&gt;
expect to run.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to put a benchmark together and we can see what the results say, and then we&apos;ll&lt;br/&gt;
have a better idea of how big a problem we have here.&lt;/p&gt;</comment>
                            <comment id="12749157" author="bryanpendleton" created="Sat, 29 Aug 2009 16:42:47 +0100"  >&lt;p&gt;Wow I&apos;ve been busy recently, and haven&apos;t had time to work on this much.&lt;br/&gt;
I&apos;m going to open a subtask of this issue to track the contribution of a small&lt;br/&gt;
benchmark to measure GROUP BY performance.&lt;/p&gt;</comment>
                            <comment id="12749888" author="dagw" created="Tue, 1 Sep 2009 13:40:13 +0100"  >&lt;p&gt;Note: the latest patch is out-of-date, it did not apply cleanly on trunk; two small conflicts&lt;br/&gt;
but I could resolve them easily so I am able to look at the patch.&lt;/p&gt;</comment>
                            <comment id="12749974" author="dagw" created="Tue, 1 Sep 2009 17:30:12 +0100"  >&lt;p&gt;Playing with the latest patch, I notice something that puzzles me (totally contrived example &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; :&lt;/p&gt;

&lt;p&gt;&amp;gt; describe t;&lt;br/&gt;
COLUMN_NAME         |TYPE_NAME|DEC&amp;amp;|NUM&amp;amp;|COLUM&amp;amp;|COLUMN_DEF|CHAR_OCTE&amp;amp;|IS_NULL&amp;amp;&lt;br/&gt;
------------------------------------------------------------------------------&lt;br/&gt;
C                   |VARCHAR  |NULL|NULL|2     |NULL      |4         |NO      &lt;br/&gt;
C2                  |VARCHAR  |NULL|NULL|2     |NULL      |4         |YES     &lt;br/&gt;
I                   |INTEGER  |0   |10  |10    |NULL      |NULL      |YES     &lt;/p&gt;

&lt;p&gt;with a few columns:&lt;/p&gt;

&lt;p&gt;&amp;gt; select * from t&lt;br/&gt;
C |C2  |I          &lt;br/&gt;
-------------------&lt;br/&gt;
aa|NULL|NULL       &lt;br/&gt;
bb|NULL|NULL&lt;/p&gt;

&lt;p&gt;Then I try this:&lt;/p&gt;

&lt;p&gt;&amp;gt; select c,c2,sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by rollup (c,c2)&lt;/p&gt;

&lt;p&gt;and I see:&lt;/p&gt;

&lt;p&gt;C   |C2  |3          &lt;br/&gt;
---------------------&lt;br/&gt;
aa  |NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
aa  |NULL|NULL       &lt;br/&gt;
NULL|NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
bb  |NULL|NULL       &lt;br/&gt;
bb  |NULL|NULL  &lt;/p&gt;

&lt;p&gt;which is I think is as expected. But then I tried:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select cast(c as varchar(2)),c2,sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by rollup (c,c2)&lt;/p&gt;

&lt;p&gt;but now I see:&lt;/p&gt;

&lt;p&gt;1   |C2  |3          &lt;br/&gt;
---------------------&lt;br/&gt;
aa  |NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
aa  |NULL|NULL       &lt;br/&gt;
bb  |NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
bb  |NULL|NULL       &lt;br/&gt;
bb  |NULL|NULL       &lt;/p&gt;

&lt;p&gt;Notice that the third row is now different (equal to row four). Is this correct?&lt;/p&gt;

&lt;p&gt;If I embed this group by into a subquery:&lt;/p&gt;

&lt;p&gt;ij&amp;gt; select cast(x as varchar(2)),y,z from (select c,c2,sum&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; from t group by rollup (c,c2)) t(x,y,z)&lt;/p&gt;

&lt;p&gt;I see again the row with null, null, null:&lt;/p&gt;

&lt;p&gt;1 |Y   |Z          &lt;br/&gt;
-------------------&lt;br/&gt;
aa|NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
aa|NULL|NULL       &lt;br/&gt;
N&amp;amp;|NULL|NULL       &lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
WARNING 01003: Null values were eliminated from the argument of a column function.&lt;br/&gt;
bb|NULL|NULL       &lt;br/&gt;
bb|NULL|NULL       &lt;/p&gt;

&lt;p&gt;but this time, the nullability of column 1 seems wrong (notice the&lt;br/&gt;
&quot;N&amp;amp;&quot; - ij will use two columns here (VARCHAR(2)) if it thinks column can&apos;t contain&lt;br/&gt;
a NULL which, of course, needs 4 columns to print). This could be&lt;br/&gt;
related to the problem Knut is working on under &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4284&quot; title=&quot;All Columns become Nullable when Using left join&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4284&quot;&gt;&lt;del&gt;DERBY-4284&lt;/del&gt;&lt;/a&gt;, though.&lt;/p&gt;</comment>
                            <comment id="12750215" author="bryanpendleton" created="Wed, 2 Sep 2009 01:58:33 +0100"  >&lt;p&gt;Thanks for the review and comments, Dag!&lt;/p&gt;

&lt;p&gt;I&apos;m not sure what&apos;s going on with the queries you posted, but they are quite&lt;br/&gt;
interesting, and I&apos;ll try to investigate them in more detail.&lt;/p&gt;

&lt;p&gt;I&apos;ll also try to post an updated patch with the merge conflicts resolved.&lt;/p&gt;</comment>
                            <comment id="12750255" author="dagw" created="Wed, 2 Sep 2009 04:22:18 +0100"  >&lt;p&gt;I found the patch accessible, easy to follow, thanks Bryan!&lt;br/&gt;
Interesting! Nice extension to Derby I think.&lt;/p&gt;

&lt;p&gt;On a first pass thru I noticed little beyond missing javadocs, some&lt;br/&gt;
segments with 8 wide tabs, some debug printing left, which is all fine at&lt;br/&gt;
this stage.  The approach look solid to me. I can see the uncertainty&lt;br/&gt;
about the performance in the pure group by case, but I suspect that&lt;br/&gt;
since you do sort avoidance when possible, it is still ok, but your&lt;br/&gt;
performance tests should cast light on that.&lt;/p&gt;

&lt;p&gt;I would be nice to define N in the initial comment in &quot;then there are&lt;br/&gt;
N+1 entries in resultRows&quot; in GroupedAggregateResultSet.&lt;/p&gt;

&lt;p&gt;Did you and Knut resolve the discussion about whether the statement&lt;br/&gt;
&quot;select b, sum(a) from ru where 1&amp;lt;&amp;gt;1 group by rollup(b)&quot; should have&lt;br/&gt;
zero result row or one? It wasn&apos;t quite clear from reading the threads&lt;br/&gt;
here. The test makes an empty rs the canon in this case.&lt;/p&gt;

&lt;p&gt;I&apos;ll dig in further into the patch logic next.&lt;/p&gt;</comment>
                            <comment id="12753340" author="bryanpendleton" created="Thu, 10 Sep 2009 01:20:44 +0100"  >&lt;p&gt;Given the performance results I noticed in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4363&quot; title=&quot;Add simple benchmark for measuring GROUP BY performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4363&quot;&gt;&lt;del&gt;DERBY-4363&lt;/del&gt;&lt;/a&gt;, I think that the next step is to prepare&lt;br/&gt;
a patch which uses the old-style aggregation-in-the-sort-observer technique for non-ROLLUP&lt;br/&gt;
queries, but which uses the new sort-it-once-and-aggregate-at-multiple-levels-in-one-pass&lt;br/&gt;
technique for ROLLUP queries.&lt;/p&gt;

&lt;p&gt;At the same time, I&apos;ll also need to resolve the merge conflicts and attend to the other review comments.&lt;/p&gt;</comment>
                            <comment id="12754771" author="bryanpendleton" created="Sun, 13 Sep 2009 22:40:59 +0100"  >&lt;p&gt;Attached &apos;UpdateToTrunkSep2009.diff&apos; patch does two things:&lt;br/&gt;
1) Updates the patch to the current trunk, and resolves some merge conflicts.&lt;br/&gt;
2) Restores the use of AggregateSortObserver for the common case of:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;GROUP BY&lt;/li&gt;
	&lt;li&gt;no ROLLUP&lt;/li&gt;
	&lt;li&gt;input data is NOT already in sorted order&lt;/li&gt;
	&lt;li&gt;no DISTINCT aggregates.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, I&apos;ve got some test failures to investigate.&lt;/p&gt;

&lt;p&gt;And, I still haven&apos;t investigated the review comments from Dag and Knut&lt;/p&gt;

&lt;p&gt;And, I haven&apos;t yet re-run the performance tests to see if the performance is improved&lt;/p&gt;

&lt;p&gt;But here&apos;s the patch anyway, for safekeeping and to record where the work is going.&lt;/p&gt;</comment>
                            <comment id="12756882" author="bryanpendleton" created="Fri, 18 Sep 2009 01:25:48 +0100"  >&lt;p&gt;Attached &apos;useAggregateObserver.diff&apos; has one major change from the&lt;br/&gt;
previous patch proposal: it restores the use of the AggregateSortObserver&lt;br/&gt;
for the following common and important special case:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the input data is not already in sorted order&lt;/li&gt;
	&lt;li&gt;the GROUP BY does not use ROLLUP&lt;/li&gt;
	&lt;li&gt;the GROUP BY does not use distinct aggregates&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch is also up to date with current trunk, and resolves some merge conflicts.&lt;/p&gt;

&lt;p&gt;This revised patch passes all the regression tests, including the new ROLLUP tests.&lt;/p&gt;

&lt;p&gt;More importantly, this revised patch matches the current trunk in performance&lt;br/&gt;
on the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4363&quot; title=&quot;Add simple benchmark for measuring GROUP BY performance&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4363&quot;&gt;&lt;del&gt;DERBY-4363&lt;/del&gt;&lt;/a&gt; benchmark of GROUP BY performance.&lt;/p&gt;

&lt;p&gt;I still have to investigate the other issues raised during the previous round of code&lt;br/&gt;
review, but this patch seemed to be at a state worth posting so here it is.&lt;/p&gt;</comment>
                            <comment id="12757114" author="knutanders" created="Fri, 18 Sep 2009 12:21:12 +0100"  >&lt;p&gt;I haven&apos;t had time to look at the patch yet, but I finally found some&lt;br/&gt;
time to check what the SQL:2003 standard says about ROLLUP. What I&lt;br/&gt;
noticed was that the syntax was somewhat more complex than what the&lt;br/&gt;
patch implements. A &amp;lt;rollup list&amp;gt; is a &amp;lt;grouping element&amp;gt;, and a&lt;br/&gt;
&amp;lt;group by clause&amp;gt; takes a a &amp;lt;grouping element list&amp;gt; which may contain&lt;br/&gt;
many &amp;lt;grouping element&amp;gt;s. So if I understand the syntax correctly,&lt;br/&gt;
these GROUP BY clauses should be allowed:&lt;/p&gt;

&lt;p&gt;GROUP BY ROLLUP(a,b), ROLLUP(c,d)&lt;/p&gt;

&lt;p&gt;GROUP BY a, ROLLUP(c,d)&lt;/p&gt;

&lt;p&gt;I haven&apos;t checked what these clauses actually mean, though.&lt;/p&gt;

&lt;p&gt;There&apos;s also an example in the syntax rules with another variation&lt;br/&gt;
that&apos;s not accepted by the current patch:&lt;/p&gt;

&lt;p&gt;&amp;gt; NOTE 137 &#8212; (...) For example, &quot;ROLLUP ( (A, B), (C, D) )&quot; is&lt;br/&gt;
&amp;gt; equivalent to &quot;GROUPING SETS ( (A, B, C, D), (A, B), () )&quot;.&lt;/p&gt;

&lt;p&gt;I think it is OK to support just a subset of what the standard allows,&lt;br/&gt;
but we should probably try to find out what the non-supported syntax&lt;br/&gt;
means and if it is possible to fit it into the current approach&lt;br/&gt;
somehow.&lt;/p&gt;

&lt;p&gt;(Plain non-rollup group bys are also more restrictive in Derby than in&lt;br/&gt;
the standard. For instance, the standard allows constructs like GROUP&lt;br/&gt;
BY (a, b), and GROUP BY a, (b, c), and even GROUP BY (), which are not&lt;br/&gt;
accepted by Derby.)&lt;/p&gt;</comment>
                            <comment id="12758942" author="bryanpendleton" created="Thu, 24 Sep 2009 01:07:18 +0100"  >&lt;p&gt;Attached patch &quot;withDagsCastTest.diff&apos; includes the test suggested by Dag on 1-sep-2009. I don&apos;t understand why the CAST operator has this strange effect on the code, so for the time being this test fails while I research the behavior.&lt;/p&gt;</comment>
                            <comment id="12760830" author="bryanpendleton" created="Wed, 30 Sep 2009 05:44:18 +0100"  >&lt;p&gt;On 1-sep-2009, Dag made two observations (paraphrased, and shortened):&lt;/p&gt;

&lt;p&gt;1) When a CAST node is used in a certain query, the wrong results are returned&lt;br/&gt;
2) When a sub-query is used, the nullability handling of rolled-up columns is confused&lt;/p&gt;

&lt;p&gt;I believe that I have figured out the first problem: in my patch, there are certain&lt;br/&gt;
situations where, during the processing of a row of data, we complete the&lt;br/&gt;
processing of multiple rolled-up groups. For example, if you are rolling up&lt;br/&gt;
sales data by DIVISION, QUARTER, and MONTH, and you get a row for a new DIVISION,&lt;br/&gt;
the accumulated data for the previous MONTH, QUARTER, and DIVISION are now&lt;br/&gt;
complete. Internally, I am holding these completed-and-not-yet-returned rows in&lt;br/&gt;
the &quot;finishedResults&quot; array, and returning them one-row-at-a-time when requested.&lt;/p&gt;

&lt;p&gt;However, I was not correctly calling setCurrentRow() when returning a saved row from&lt;br/&gt;
the finishedResults array, which meant that operations at the next level, such as&lt;br/&gt;
projection processing, was accessing the wrong data when it referred to the current row.&lt;/p&gt;

&lt;p&gt;I&apos;ve modified the patch to call setCurrentRow appropriately, and the wrong results are&lt;br/&gt;
no longer returned.&lt;/p&gt;

&lt;p&gt;Dag&apos;s other question remains open to me, and I&apos;m not sure what&apos;s going on. It seems&lt;br/&gt;
to me that the ROLLUP feature can cause NULL values to be returned in non-NULL-able&lt;br/&gt;
columns, which is a troubling behavior. I believe this behavior is mentioned in Jim Gray&apos;s&lt;br/&gt;
original DataCube research paper, where he proposed a different handling of the placeholder&lt;br/&gt;
values other than NULL.&lt;/p&gt;

&lt;p&gt;I will need to spend some time with the SQL Standard to understand how the standard&lt;br/&gt;
deals with this ability of the ROLLUP feature to produce NULL values where they might&lt;br/&gt;
otherwise not be expected.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to post an updated patch with the setCurrentRow fix soon.&lt;/p&gt;

&lt;p&gt;Meanwhile, Knut, I haven&apos;t forgotten about your feedback regarding the fact that this&lt;br/&gt;
patch implements only a subset of the ROLLUP feature as described in the standard.&lt;br/&gt;
I was definitely aware that I was implementing only part of the feature, but I agree with&lt;br/&gt;
you that we need to have a good awareness of what parts of the overall standard we did&lt;br/&gt;
and did not implement, and make sure that is clear in both the code and the documentation.&lt;/p&gt;

&lt;p&gt;Thanks again to everybody for their continued feedback and support. &lt;/p&gt;</comment>
                            <comment id="12761088" author="bryanpendleton" created="Thu, 1 Oct 2009 04:49:35 +0100"  >&lt;p&gt;Attached patch calls setCurrentRow when returning a rolled-up grouped &lt;br/&gt;
result from the finishedResults lookaside buffer.&lt;/p&gt;

&lt;p&gt;This patch is growing a bit long in the tooth. I&apos;m considering the following plan:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;moving the current patch toward commit&lt;/li&gt;
	&lt;li&gt;filing followup issues for the remaining problems, namely:&lt;/li&gt;
	&lt;li&gt;documentation is needed&lt;/li&gt;
	&lt;li&gt;need to investigate the handling of the other varieties of ROLLUP which&lt;br/&gt;
     are described by the SQL standard but not covered by this patch&lt;/li&gt;
	&lt;li&gt;need to address the nullability-in-subqueries problem uncovered by Dag&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Does this seem like a reasonable approach?&lt;/p&gt;</comment>
                            <comment id="12761165" author="knutanders" created="Thu, 1 Oct 2009 12:08:04 +0100"  >&lt;p&gt;+1 to the suggested approach. Getting the main functionality in and mostly working as part of this issue and addressing the other issues in separate JIRAs sounds like a good plan.&lt;/p&gt;</comment>
                            <comment id="12761426" author="dagw" created="Fri, 2 Oct 2009 01:31:40 +0100"  >&lt;p&gt;Sure, +1.&lt;/p&gt;</comment>
                            <comment id="12765295" author="bryanpendleton" created="Wed, 14 Oct 2009 00:02:32 +0100"  >&lt;p&gt;I feel like I&apos;ve worked on this code about as long as I can by myself; it&apos;s time to get&lt;br/&gt;
the wider Derby developer community to help shake out the next level of problems.&lt;/p&gt;

&lt;p&gt;Many thanks to Knut, Dag, Manish, and all the other reviewers for the helpful&lt;br/&gt;
feedback and suggestions.&lt;/p&gt;

&lt;p&gt;I&apos;ve committed the current working version of the code to the trunk as revision 824966.&lt;/p&gt;

&lt;p&gt;I intend to work on the documentation patch next (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4394&quot; title=&quot;Add documentation for ROLLUP functionality in GROUP BY clause&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4394&quot;&gt;&lt;del&gt;DERBY-4394&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If no significant issues arise immediately with the code just committed, I&apos;ll mark this&lt;br/&gt;
issue as resolved in the next few days, and we can deal with subsequent problems&lt;br/&gt;
as separate Jira issues.&lt;/p&gt;
</comment>
                            <comment id="12765489" author="knutanders" created="Wed, 14 Oct 2009 10:42:59 +0100"  >&lt;p&gt;Thanks for all the work on this issue, Bryan! It&apos;ll be great to get more people kicking the tires.&lt;/p&gt;

&lt;p&gt;If you mark this issue as resolved, it&apos;s probably a good idea to convert the remaining sub-tasks to top-level JIRA issues so that they don&apos;t disappear from our radar. There&apos;s a &quot;Convert to issue&quot; link in the &quot;Operations&quot; menu.&lt;/p&gt;</comment>
                            <comment id="12766759" author="bryanpendleton" created="Fri, 16 Oct 2009 23:51:12 +0100"  >&lt;p&gt;Checked the &apos;release note needed&apos; flag, as we will need a release note for this feature when it is released.&lt;/p&gt;</comment>
                            <comment id="13083789" author="myrna" created="Fri, 12 Aug 2011 00:06:58 +0100"  >&lt;p&gt;I stumbled upon this issue and I wonder - was it the intend to resolve this issue &amp;amp; - as Knut suggested - and convert the remaining subtasks to top level issues?&lt;br/&gt;
And I don&apos;t see a release note, did this slip through cracks?&lt;/p&gt;</comment>
                            <comment id="13084496" author="bryanpendleton" created="Sat, 13 Aug 2011 01:48:22 +0100"  >&lt;p&gt;Hi Myrna, thanks for following up.&lt;/p&gt;

&lt;p&gt;Indeed, it appears that I never wrote a release note. I can&apos;t remember any reason not to, I think I just forgot &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve converted the two remaining open sub-tasks to top-level issues, and I&apos;ll mark this issue resolved.&lt;/p&gt;

&lt;p&gt;Do you see value in writing a release note at this point?&lt;/p&gt;</comment>
                            <comment id="13084499" author="bryanpendleton" created="Sat, 13 Aug 2011 01:51:00 +0100"  >&lt;p&gt;Marking as fixed in release 10.8.1.2. I think that some earlier versions may also have contained this feature, so additional fix versions might be applicable.&lt;/p&gt;

&lt;p&gt;Additional work remains for the ROLLUP feature, but that work is described in separate JIRA issues; the initial work described by this issue is complete.&lt;/p&gt;</comment>
                            <comment id="13084966" author="myrna" created="Mon, 15 Aug 2011 06:17:29 +0100"  >&lt;p&gt;This went in with revision 824966, which was before the 10.6 branch was created (revision 938046), so I&apos;m marking it fixed in 10.6.1.0. I don&apos;t think it has to be marked as fixed in a subsequent version, because it was automatically in all the later versions (i.e. there was no backport needed).&lt;/p&gt;</comment>
                            <comment id="13084968" author="myrna" created="Mon, 15 Aug 2011 06:23:33 +0100"  >&lt;p&gt;I thought usually we mark &apos;release note needed&apos; when there&apos;s some kind of incompatibility with previous releases, and I was wondering what the incompatibility was. Maybe the release note flag was set to explain this was only an initial step in support for ROLLUP style GROUP BY? Or was there incompatibility because of different performance of certain queries? &lt;/p&gt;

&lt;p&gt;But as I&apos;ve now marked this as fixed in 10.6.1.0, (which I think is the right value), adding the release note won&apos;t really be of any use in generating any release notes, and I don&apos;t think it belongs in the 10.8 release notes. &lt;/p&gt;</comment>
                            <comment id="13085079" author="bryanpendleton" created="Mon, 15 Aug 2011 14:34:06 +0100"  >&lt;p&gt;I think I was thinking of the Release Notes as a mechanism for drawing attention to&lt;br/&gt;
new aspects of a release, both features as well as incompatibilities. At least, I suppose&lt;br/&gt;
I must have been thinking that; I really can&apos;t remember &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;At any rate, I unchecked the Release Note field, as I can&apos;t recall that this introduced&lt;br/&gt;
any incompatibilities with existing applications.&lt;/p&gt;</comment>
                            <comment id="13685184" author="knutanders" created="Mon, 17 Jun 2013 10:19:16 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12377492">DERBY-3050</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12539467">DERBY-5584</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12382424" name="IncludesASimpleTest.diff" size="14190" author="bryanpendleton" created="Wed, 21 May 2008 00:30:51 +0100"/>
                            <attachment id="12419436" name="UpdateToTrunkSep2009.diff" size="65523" author="bryanpendleton" created="Sun, 13 Sep 2009 22:40:59 +0100"/>
                            <attachment id="12408916" name="fixWhiteSpace.diff" size="13920" author="bryanpendleton" created="Sun, 24 May 2009 22:06:11 +0100"/>
                            <attachment id="12410940" name="passesRegressionTests.diff" size="63074" author="bryanpendleton" created="Wed, 17 Jun 2009 15:23:07 +0100"/>
                            <attachment id="12364193" name="prototypeChangeNoTests.diff" size="12267" author="bryanpendleton" created="Mon, 20 Aug 2007 23:21:45 +0100"/>
                            <attachment id="12410753" name="rewriteGroupByRS.diff" size="54389" author="bryanpendleton" created="Tue, 16 Jun 2009 05:53:44 +0100"/>
                            <attachment id="12409381" name="rollupNullability.diff" size="16260" author="bryanpendleton" created="Fri, 29 May 2009 14:44:02 +0100"/>
                            <attachment id="12420980" name="setCurrentRow.diff" size="63181" author="bryanpendleton" created="Thu, 1 Oct 2009 04:49:35 +0100"/>
                            <attachment id="12419950" name="useAggregateObserver.diff" size="61191" author="bryanpendleton" created="Fri, 18 Sep 2009 01:25:48 +0100"/>
                            <attachment id="12408340" name="useLookahead.diff" size="14606" author="bryanpendleton" created="Sun, 17 May 2009 20:18:05 +0100"/>
                            <attachment id="12420421" name="withDagsCastTest.diff" size="63027" author="bryanpendleton" created="Thu, 24 Sep 2009 01:07:17 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12434354">DERBY-4363</subtask>
                            <subtask id="12437086">DERBY-4394</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 20 Aug 2007 23:19:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30687</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0e93:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36127</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>