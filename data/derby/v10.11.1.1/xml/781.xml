<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:25:50 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-781/DERBY-781.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-781] Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-781</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Derby&apos;s handling of union subqueries in from list can be improved by materializing invariant resultsets once, rather than creating them many times.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;create view V1 as select i, j from T1 union select i,j from T2;&lt;br/&gt;
create view V2 as select a,b from T3 union select a,b from T4;&lt;br/&gt;
insert into T1 values (1,1), (2,2), (3,3), (4,4), (5,5);&lt;/p&gt;

&lt;p&gt;For a query like select * from V1, V2 where V1.j = V2.b and V1.i in (1,2,3,4,5), it is possible the resultset for V2 is created 5 times. (assuming V2 is choosen as the the inner table) This can be very costly if the underlying selects can take long time and also may perform union many times.&lt;/p&gt;

&lt;p&gt;Enhance materialization logic in setOperatorNode.java. It currently returns FALSE always.&lt;/p&gt;

&lt;p&gt;public boolean performMaterialization(JBitSet outerTables)&lt;br/&gt;
		throws StandardException&lt;br/&gt;
{&lt;br/&gt;
	// RESOLVE - just say no to materialization right now - should be a cost based decision&lt;br/&gt;
	return false;&lt;/p&gt;

&lt;p&gt;	/* Actual materialization, if appropriate, will be placed by our parent PRN.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;This is because PRN might have a join condition to apply.  (Materialization&lt;/li&gt;
	&lt;li&gt;can only occur before that.&lt;br/&gt;
	 */&lt;br/&gt;
	//return true;&lt;br/&gt;
} &lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>generic</environment>
        <key id="12327002">DERBY-781</key>
            <summary>Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="army">A B</assignee>
                                    <reporter username="bandaram">Satheesh Bandaram</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Dec 2005 12:15:30 +0000</created>
                <updated>Tue, 30 Jun 2009 17:12:56 +0100</updated>
                            <resolved>Tue, 19 Sep 2006 16:34:23 +0100</resolved>
                                    <version>10.1.1.0</version>
                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12361709" author="jeff_lichtman" created="Wed, 4 Jan 2006 14:13:28 +0000"  >&lt;p&gt;I&apos;ve been thinking about this enhancement request ever since it was reported. Something didn&apos;t seem quite right to me, but it wasn&apos;t until now that I was able to put my finger on it.&lt;/p&gt;

&lt;p&gt;The report identifies a real problem (performance with a union as the inner table of a join) and proposes a solution that would work (materialization). I think, though, that the proposed solution focuses in the wrong place. The materialization should happen as a result of a join strategy, not as part of the logic associated with unions.&lt;/p&gt;

&lt;p&gt;There are cases where materializing a union would cause a query to run slower. Materialization requires the creation of a temporary conglomerate and the inserting of rows into the conglomerate, so it should be done only if the savings are greater than the costs. Since materialization can make things either faster or slower depending on circumstances, the decision as to whether to materialize should be done in the optimizer.&lt;/p&gt;

&lt;p&gt;Also, there are other types of  result sets that could benefit from materialization - for example, INTERSECT, joins, aggregates, etc. Any of these could end up on the right side of a join through the use of  table subqueries (i.e. SELECT statements in the FROM list of the outer query). I don&apos;t think we want to re-implement the materialization logic in all of these cases. I suppose the logic could be pushed into a parent class, but I think even that would be putting it in the wrong place.&lt;/p&gt;

&lt;p&gt;If you think about it, we already have a join strategy that materializes the inner result  set, i.e. hash join.  I would expect the optimizer to at least consider this strategy for the example given in this enhancement request. We should check whether the optimizer is making the correct decision about hash join in this case before implementing materialization logic specific to unions.&lt;/p&gt;</comment>
                            <comment id="12361785" author="bandaram" created="Thu, 5 Jan 2006 05:20:10 +0000"  >&lt;p&gt;Thanks Jeff for your analysis. I was just getting ready to file another improvement request to make this optimization more generic. (not specific to unions) I have seen huge improvements in two different customer situations. For the situation I filed the defect, each of the views (V1 and V2) had 36 tables each and by materializing the inner view into a temp. table, I noticed speed up from 70-150 seconds to under 3 seconds. (including the cost of creating temp. table) &lt;/p&gt;

&lt;p&gt;I also saw another situation later without unions where materializing some table subqueries improved performance by couple of orders of magnitude. So you are right... this optimization can be applied to other cases too. &lt;/p&gt;

&lt;p&gt;I think materialization with or without hash joins should be useful. In both situations, creating temp. table that materialized derived tables improved so much. You are right that the optimization should be done inside the optimizer.&lt;/p&gt;</comment>
                            <comment id="12418794" author="army" created="Sat, 1 Jul 2006 21:55:17 +0100"  >&lt;p&gt;Attaching a patch (d781_v1.patch) to address this issue by allowing the optimizer to consider and choose hash joins with subqueries, which is a more general case of the specific union example mentioned in the description for this issue.  In brief, the patch does this by following up on the suggestions given by Jeff Lichtman in comments above and also in the following thread:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/12208&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/12208&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since result set materialization comes for &quot;free&quot; with hash joins, that fact we now allow hash joins with subqueries (as of this patch) means that we implicitly have a way to materialize the subquery result sets.&lt;/p&gt;

&lt;p&gt;The details of the patch are included as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-781&quot; title=&quot;Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-781&quot;&gt;&lt;del&gt;DERBY-781&lt;/del&gt;&lt;/a&gt;_v1.html.  I added a simple test to lang/subquery.sql to demonstrate that the optimizer can and will choose to do hash joins for subqueries, and I updated one other master file-&lt;del&gt;predicatesIntoViews&lt;/del&gt;-for which the optimizer is now choosing a hash join instead of a nested loop.  Testing of &quot;unsafe&quot; hash joins (see section VII of the document) and generation of correct plans is done through existing tests, esp. the lang/lojreorder.sql test, which was very useful in helping to verify the correctness of the changes.&lt;/p&gt;

&lt;p&gt;Note that I did not add the sample union query shown in the description for this issue to the tests because when I run it against the current codeline, the optimizer will already choose to do materialization of the UnionNode (via hash join) even without the patch for this issue, and thus it didn&apos;t seem like that particular test case was useful.  The new test in subqery.sql is more relevant because the optimizer will choose to do a nested loop join with the subquery before my changes and will do a hash join after my changes, which seems to more accurately reflect what this issue is about.&lt;/p&gt;

&lt;p&gt;I ran derbyall using sane jars on Red Hat Linux with ibm142 and saw no new failures, and the overall execution time does not change despite the extra work the optimizer is doing.&lt;/p&gt;

&lt;p&gt;I would greatly appreciate any review/feedback people might have on these changes.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12420645" author="army" created="Wed, 12 Jul 2006 23:37:38 +0100"  >&lt;p&gt;Attaching an updated patch, d781_v2.patch, that is synced with the latest codeline and that also has a small fix to the lang/subquery test (there was a typo in the first patch).  Other than the minor test fix, this patch is identical to the _v1 patch.&lt;/p&gt;

&lt;p&gt;Still awaiting review, if anyone has the time...&lt;/p&gt;</comment>
                            <comment id="12421314" author="bryanpendleton" created="Sat, 15 Jul 2006 19:08:00 +0100"  >&lt;p&gt;Hi Army,&lt;/p&gt;

&lt;p&gt;Thanks again for the great writeup, and for putting the energy into clear comments and careful changes to the code. It really makes a huge difference when trying to read the code.&lt;/p&gt;

&lt;p&gt;I&apos;ve read through the writeup carefully, and checked it against the patch, and I have no comments or suggestions to make. The patch applied cleanly for me, built without problems, and lang/subquery.sql and lang/predicatesIntoviews.sql both passed in my environment. &lt;/p&gt;

&lt;p&gt;It looks like an excellent patch to me; I am +1 for commit.&lt;/p&gt;</comment>
                            <comment id="12421652" author="army" created="Mon, 17 Jul 2006 17:11:44 +0100"  >&lt;p&gt;Thank you so much for volunteering to do this review, Bryan--and for taking the time to read the write-up in its rather wordy entirety.  I really appreciate your time and effort here.&lt;/p&gt;

&lt;p&gt;I&apos;ll work on putting together a release note as you described on derby-dev:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.db.derby.devel/23875&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://article.gmane.org/gmane.comp.apache.db.derby.devel/23875&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and will post that to this issue and/or to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1357&quot; title=&quot;Short-circuit logic in optimizer appears to be incorrect...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1357&quot;&gt;&lt;del&gt;DERBY-1357&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks again for all of your time, Bryan!&lt;/p&gt;</comment>
                            <comment id="12421940" author="army" created="Tue, 18 Jul 2006 21:21:32 +0100"  >&lt;p&gt;Possible RELEASE NOTE for this fix is as follows, based on suggestions from Bryan in the above-referenced thread:&lt;/p&gt;

&lt;p&gt;&amp;lt;begin_release_note&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-781&quot; title=&quot;Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-781&quot;&gt;&lt;del&gt;DERBY-781&lt;/del&gt;&lt;/a&gt;: Materialize subqueries in select list where possible to avoid creating invariant resultsets many times.&lt;/p&gt;

&lt;p&gt;The Derby optimizer has been enhanced so that it now considers the cost of performing a hash join with subqueries when it is safe to do so.  If the cost of the hash join is better than a nested loop join, Derby will choose to do the hash join and will thereby materialize the subquery.&lt;/p&gt;

&lt;p&gt;WHAT CHANGED&lt;/p&gt;

&lt;p&gt;When optimizing a query that has one or more non-flattenable subqueries in the FROM clause, Derby will now check to see if it is possible to perform a hash join with that subquery as the inner table.  Prior to Derby 10.2, the optimizer would never consider a hash join with a subquery; it only did nested loop joins.&lt;/p&gt;

&lt;p&gt;SYMPTOM&lt;/p&gt;

&lt;p&gt;Execution performance of queries containing non-flattenable subqueries may change.  The expectation is that the new (10.2) query plans will show improved performance over the old ones.&lt;/p&gt;

&lt;p&gt;Another potential symptom is that the compilation time for such queries may increase.  If this happens, the increase should only occur at compilation time; execution time should either improve or, at the very least, remain the same as in earlier versions of Derby.&lt;/p&gt;

&lt;p&gt;CAUSE&lt;/p&gt;

&lt;p&gt;If the optimizer chooses to do a hash join with a subquery, Derby only has to execute the subquery a single time per statement, after which Derby can just perform the desired join against the materialized result set.  Depending on how many rows are in the outer table of the join, this once-per-statement execution of the subquery can lead to major performance improvements over the once-per-outer-row execution employed by earlier versions of Derby.&lt;/p&gt;

&lt;p&gt;As for the extra compilation time, this is due to the simple fact that the optimizer is now doing more work--i.e. in addition to considering nested loop joins with subqueries, it is now &lt;em&gt;also&lt;/em&gt; considering hash joins with those subqueries, and that means that it could potentially take longer for the optimizer to finish its work.  Note again that, if it occurs, the increased time should only occur at compilation time; execution time should either improve or, at the very least, remain the same as in earlier versions of Derby. &lt;/p&gt;

&lt;p&gt;SOLUTION &lt;/p&gt;

&lt;p&gt;This was an intentional change to improve the execution plans chosen by the optimizer for queries having large and/or complex subqueries.  The expectation is that the new behavior-&lt;del&gt;and the subsequent query plans&lt;/del&gt;-will lead to improved performance over the old ones, so no further solution is required.&lt;/p&gt;

&lt;p&gt;WORKAROUND&lt;/p&gt;

&lt;p&gt;There is no way to disable/workaround this new behavior since the symptom as described above is a good one for Derby.&lt;/p&gt;

&lt;p&gt;That said, any user who notices a negative performance change after moving to Derby 10.2, and who believes that the difference in performance is related to this optimizer enhancement, is encouraged to visit the following &quot;performance diagnosis&quot; page and to follow up with his/her findings on the Derby mailing lists:&lt;/p&gt;

&lt;p&gt;	&lt;a href=&quot;http://wiki.apache.org/db-derby/PerformanceDiagnosisTips&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/PerformanceDiagnosisTips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;end_release_note&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12422181" author="kmarsden" created="Wed, 19 Jul 2006 17:14:00 +0100"  >&lt;p&gt;There may be  existing application impact as applications may see increased compilation times but should see improved execution time performance.  Applications may want to adjust to use PreparedStatements instead of Statements  (always a good practice with Derby).&lt;/p&gt;</comment>
                            <comment id="12422712" author="army" created="Fri, 21 Jul 2006 17:56:33 +0100"  >&lt;p&gt;Resolving issue as the patch was committed by Satheesh with svn #423989. I&apos;ll wait a couple of days to see if anything comes up and then will close this next week if all is well.&lt;/p&gt;

&lt;p&gt;Thanks again to Bryan for the review and to Satheesh for the commit.&lt;/p&gt;</comment>
                            <comment id="12422753" author="bandaram" created="Fri, 21 Jul 2006 20:17:21 +0100"  >&lt;p&gt;I think it would be good to modify this improvement description, as it will likely be picked up by release notes and/or other documentation. The fix is more generic than &apos;UNION&apos; subqueries as the original description says.&lt;/p&gt;

&lt;p&gt;Also the example in the description doesn&apos;t apply anymore, I think.  When the entry was made, join-predicate push down work wasn&apos;t completed, so the example in the description would have shown the problem, I think. But now, (post join-predicate pushdown work) the example may not apply.&lt;/p&gt;
</comment>
                            <comment id="12422767" author="army" created="Fri, 21 Jul 2006 21:22:28 +0100"  >&lt;p&gt;&amp;gt;  I think it would be good to modify this improvement description&lt;/p&gt;

&lt;p&gt;Seems like this could be a simple as removing the word &quot;union&quot; from the description--does that sound reasonable to you?  Or do you want an entirely new description?  Something like &quot;Subquery materialization via hash join&quot; or &quot;Support subquery materialization by allowing the optimizer to cost and generate hash joins with subqueries&quot;.&lt;/p&gt;

&lt;p&gt;Any preference?&lt;/p&gt;</comment>
                            <comment id="12422768" author="army" created="Fri, 21 Jul 2006 21:23:12 +0100"  >&lt;p&gt;Oh wait, check that last comment.  That was only for the summary; I see now that you were talking about the actual description.  Sorry.&lt;/p&gt;</comment>
                            <comment id="12434516" author="army" created="Wed, 13 Sep 2006 19:59:54 +0100"  >&lt;p&gt;Removed the word &quot;union&quot; from the summary since the changes affect subqueries in general, not just UNION subqueries (as Satheesh pointed out).  I decided to leave the actual description as it is, though, since I think it&apos;s useful as background to the follow-up comments which eventually led to the final changes.  Also, if we change the description many of the comments will no longer make sense.  For the sake of clarity I prefer to leave the description as it is.  The more generic &quot;summary&quot; will be what&apos;s picked up in release notes, so I think that&apos;s good enough...&lt;/p&gt;

&lt;p&gt;Of course, people should feel free to speak up if they disagree.&lt;/p&gt;</comment>
                            <comment id="12435893" author="army" created="Tue, 19 Sep 2006 16:33:31 +0100"  >&lt;p&gt;Reopening to set Fix-in version.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12336229" name="DERBY-781_v1.html" size="92791" author="army" created="Sat, 1 Jul 2006 21:55:17 +0100"/>
                            <attachment id="12336227" name="d781_v1.patch" size="90726" author="army" created="Sat, 1 Jul 2006 21:55:17 +0100"/>
                            <attachment id="12336228" name="d781_v1.stat" size="943" author="army" created="Sat, 1 Jul 2006 21:55:17 +0100"/>
                            <attachment id="12336745" name="d781_v2.patch" size="78179" author="army" created="Wed, 12 Jul 2006 23:37:38 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 4 Jan 2006 14:13:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29702</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0ubz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38732</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>