<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:58 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-919/DERBY-919.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-919] improve pattern for setting up junit tests</title>
                <link>https://issues.apache.org/jira/browse/DERBY-919</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The current junit tests cannot be run directly from the java.ui.textrunner by i.e using:&lt;br/&gt;
java junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.junitTests.lang.BooleanTest&lt;br/&gt;
.E&lt;br/&gt;
Time: 0.008&lt;br/&gt;
There was 1 error:&lt;br/&gt;
1) testBoolean(org.apache.derbyTesting.functionTests.tests.junitTests.lang.BooleanTest)java.lang.NullPointerException&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.faultInDriver(DerbyJUnitTest.java:317)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:345)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(DerbyJUnitTest.java:335)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.junitTests.lang.BooleanTest.testBoolean(BooleanTest.java:136)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 1,  Failures: 0,  Errors: 1&lt;/p&gt;

&lt;p&gt;The reason is that the tests needs to have some fixture being set up before the test can run, and that this is currently supported by calling a bunch of static methods in the correct order to initialize some static members of DerbyJUnitTest.&lt;/p&gt;

&lt;p&gt;The proposed alternative is that the added fixture is set up in the suite() method, which is used by JUnit to get the Test object to be run.&lt;/p&gt;
</description>
                <environment>All</environment>
        <key id="12328522">DERBY-919</key>
            <summary>improve pattern for setting up junit tests</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12328521">DERBY-918</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="andreask">Andreas Korneliussen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Feb 2006 21:23:22 +0000</created>
                <updated>Tue, 11 Apr 2006 18:06:59 +0100</updated>
                            <resolved>Tue, 11 Apr 2006 18:06:59 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Test</component>
                        <due>Fri, 10 Feb 2006 08:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12367356" author="andreask" created="Thu, 23 Feb 2006 00:17:05 +0000"  >&lt;p&gt;Unassigned since there is currently no activity on this issue&lt;/p&gt;</comment>
                            <comment id="12370101" author="kristwaa" created="Mon, 13 Mar 2006 05:18:35 +0000"  >&lt;p&gt;In my opinion DerbyJUnitTest does not provide the most basic feature a JUnit test needs in a proper way - to obtain a connection to some database. The critical point is the need to call methods in a specific order for getConnection to work (not to get NullPointerExceptions).&lt;/p&gt;

&lt;p&gt;Therefore I tried to write my own version of it, mostly to capture requirements. I have commented the file pretty well, but I&apos;m sure there are still areas where it does not explain enough. Also, there will be lacking functionality regarding obtaining a connection, I would appreciate people telling if they miss something (see also the questions further down). I also wrote a simple test, which I hope demonstrate how BasicDerbyJUnitTest is intended to be used. Most notably, it adapts to the settings set by our existing test harness.&lt;/p&gt;

&lt;p&gt;DerbyJUnitTest has a lot more functionality than BasicDerbyJunitTest, and I propose to somehow separate most/all the utility methods from the content of BasicDerbyJUnitTest to avoid cluttering the class with a lot of unrelated functionality. This can be done either by inserting a new class in the inheritance chain, or by creating a(nother) utility class. I do mean that the utility methods existing today in DerbyJUnitTest is useful.&lt;/p&gt;

&lt;p&gt;Questions regarding BasicDerbyJUnitTest:&lt;br/&gt;
a) Do we need to be able to get specific DataSource implementations, like EmbeddedSimple-, &lt;b&gt;ConnectionPool&lt;/b&gt;- and *XADataSource?&lt;br/&gt;
(functionality for specifying properties for DataSource connections is not yet implemented)&lt;br/&gt;
b) Should environment/version information (JVM, OS, maybe hardware) be available in/through BasicDerbyJUniTest?&lt;/p&gt;

&lt;p&gt;Questions regarding actions for JUnit infrastructure:&lt;br/&gt;
1) Is it okay to add yet another way to get connections?&lt;br/&gt;
2) I might be able to hack DerbyJUnitTest to work in a similar way as BasicDerbyJUnitTest, but it is complicated by dependencies to existing tests. Also, it will not be a very clean solution. Is this still something we want to do?&lt;br/&gt;
3) TestUtil is also used to get connections. It might also be possible to make this work as BasicDerbyJunitTest, but then there is no reason to use (Basic)DerbyJUnitTest to get connections for JUnit tests. Note that some methods, for instance TestUtil.getConnection(), is broken.&lt;/p&gt;

&lt;p&gt;Feedback appreciated!&lt;/p&gt;</comment>
                            <comment id="12370144" author="andreask" created="Mon, 13 Mar 2006 18:19:40 +0000"  >&lt;p&gt;The main idea with this issue was to clean up the exisiting tests which inherit from DerbyJUnitTest, so that they can be run as type .junit.&lt;br/&gt;
I have done some work in this area, however it is not completed in because of the additional harness in compatibility suite.&lt;/p&gt;

&lt;p&gt;In general, I think junit can be used to write real unit tests as well, not only JDBC-tests. &lt;br/&gt;
I.e I would like to write some tests that tests store functionality using Junit. In such cases, I think I would not like to inherit from a class which provides me with utility functions to get a JDBC connection. Therefore, one should be careful of what we call BaseDerbyJuniTest and DerbyJUnitTest.&lt;/p&gt;

&lt;p&gt;I would propose doing the following with BaseDerbyJunitTest&lt;br/&gt;
1. Rename it to BaseJDBCTest&lt;br/&gt;
2. Maybe provide a setUp() which sets up a connection in the database, using TestUtil.&lt;br/&gt;
, then call an abstract method called:&lt;br/&gt;
createDataModel()&lt;br/&gt;
populateDatamodel()&lt;/p&gt;

&lt;p&gt;or  a more general abstract method like: doAdditionalSetup()&lt;/p&gt;

&lt;p&gt;In teardown() call abstract methods like:&lt;br/&gt;
dropDataModel()&lt;br/&gt;
and close the connection.&lt;br/&gt;
(or a more general method like doAdditionalSetup)&lt;/p&gt;

&lt;p&gt;I think BasicDerbyJunitTest should use TestUtil to get the connection. &lt;/p&gt;</comment>
                            <comment id="12370182" author="kristwaa" created="Mon, 13 Mar 2006 22:00:09 +0000"  >&lt;p&gt;I agree that the naming of the class can be changed.&lt;/p&gt;

&lt;p&gt;I am not so sure if I fully agree with the proposed change regarding setUp().  I am more comfortable with having test specific setups performed either in the test class&apos; setUp method (called before every test method) or in an associated TestSetup.setUp method (executed once before a suite is run). Although I want the number of ways to get a connection to be as low as possible, there must be ways to perform some specific things - like adding connection attributes when testing database encryption or database restore. &lt;br/&gt;
However, having a default setUp that creates a default connection is a good idea. The default tearDown must then call either commit or rollback (most viable?), then close the connection.&lt;/p&gt;

&lt;p&gt;Why do you want to create a data model and then tear it down for every test? I see this as useful in some cases, but far from for all.&lt;br/&gt;
Also, why introduces abstract methods for something you already have a well defined location for - setUp and tearDown?&lt;br/&gt;
If you need to add more complex logic to your setUp and tearDown methods, getting a default connection is the least of your concerns - &quot;con = getConnection();&quot;.&lt;/p&gt;

&lt;p&gt;The reason why BasicDerbyJUnitTest does not use TestUtil to get connections are twofold; some of the methods have limitations, and I thought it would be good to separate the mean of obtaining a connection for new JUnit tests and old tests. &lt;br/&gt;
For the former, there are no &quot;getConnection()&quot; method. Why specify arguments when you don&apos;t need to? Also, &quot;getConnection(String, String)&quot; only returns embedded connections when using DriverManager.&lt;br/&gt;
For the latter, starting from scratch is good for seeing if we  can get rid of some unneded things that have piled up as time has passed. I do know that it involves some code duplication, but I find this acceptable in this case.&lt;/p&gt;</comment>
                            <comment id="12370330" author="andreask" created="Tue, 14 Mar 2006 17:58:54 +0000"  >&lt;p&gt;Just attaching two files which provides:&lt;br/&gt;
1. A TestConfiguration &lt;br/&gt;
2. A type safe enum for JDBC Clients (framework)&lt;/p&gt;

&lt;p&gt;I think these could be used along with  DerbyJUnitTest and/or BaseDerbyJUnitTest. These classes could have access to a TestConfiguration object, and use it to get the correct framework, database name etc.&lt;/p&gt;

&lt;p&gt;I think BaseDerbyJUnitTest.getConnection() should not be dependent on an activeFrameWorkId attribute. &lt;br/&gt;
Instead, it should simply return the connection for the configured framework. If the user need to get a connection to another framework, they should supply the framework as a parameter to an overloaded getConnection() method.&lt;/p&gt;</comment>
                            <comment id="12370400" author="davidvc" created="Wed, 15 Mar 2006 03:18:25 +0000"  >&lt;p&gt;I think it is great to have base unit test like this, although I agree with Andreas that this should be renamed.  This class is almost solely about obtaining connections using different frameworks, and is very JDBC-specific.  There are plenty of unit tests that have no need for this functionality.&lt;/p&gt;

&lt;p&gt;I am not sure how this work integrates with/coincides with the work Andreas did to create a junit test type which allows you to run &apos;raw&apos; JUnit tests under the harness.  Can you explain?&lt;/p&gt;

&lt;p&gt;Here are my general comments...&lt;/p&gt;

&lt;p&gt;Javadoc:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getConnection() - it would be great to say it connects to the default database, instead of &quot;some database&quot;, which is a little disconcerting as it sounds somewhat non-deterministic.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You should document what the defaults are, such as &quot;wombat&quot; for the database name and &quot;APP&quot; for username and password.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;why can&apos;t setup() or teardown() automaticlly call resetState() rather than asking the user to do it?  This seems dangerous and highly error-prone.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when I try to click on a method name, I get a &quot;404&quot; error, although I can scroll directly down to view the method details.  I suspect this is probably just a JIRA bug.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BaseDerbyJUnitTest:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I don&apos;t understand why you set a property for the database name before calling obtainConnection() rather than just passing in the database name to obtainConnection().  It would be good to at least explain the motivation behind this, as at first read it seems a bit odd.  Scanning at the code, it looks like you use db(P_DBNAME) in createBaseDatabaseUrl() where you could just as easily pass the database name in as a parameter&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There are a lot of defaults being setup in a hardcoded fashion in resetState().  It would be better to have a section of static finals at the top with all the default values so that someone looking at this code can tell right away what they are.  Actually, looking at Andreas&apos; TestConfiguration, that is a nice way of doing it . Having it as a separate class also seems to be useful and more coherent.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You have a lot of useful debug statements, but your javadoc doesn&apos;t really explain how to turn debug on and off, nor is it clear from the class (e.g. there is not &quot;debug(boolean)&quot; method).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Your javadoc should be a little more explicit about how the default framework gets set&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It would be nice to have a helper method that allows subclasses to quickly obtain other properties set by the harness (e.g. so they don&apos;t have to do a privileged block every time they want to get a system property)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I like Andreas&apos; typesafe JDBCClient class, it seems a better approach.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;</comment>
                            <comment id="12370620" author="kristwaa" created="Thu, 16 Mar 2006 08:14:02 +0000"  >&lt;p&gt;Do we still need to have clients for both DB2 JCC and the &quot;old net&quot; framework?&lt;br/&gt;
Based on contents of various classes, there seem to be some confusion (ie. that DB2JCC has JDBC prefix &quot;jdbc:derby:net&quot;, others use &quot;jdbc:db2:&quot;).&lt;br/&gt;
Am I correct when saying we only need the &quot;jdbc:derby:net&quot; framework in the JDBCClient class, and that this client should be named either &quot;DERBYNET&quot; or &quot;JCC&quot;? &lt;br/&gt;
(but not &quot;DB2JCC&quot;, as this imply we are connecting to DB2, not Derby)&lt;/p&gt;

&lt;p&gt;Is the EmbeddedSimpleDataSource the only mean to create a connection in JSR 169?&lt;/p&gt;</comment>
                            <comment id="12370624" author="davidvc" created="Thu, 16 Mar 2006 08:39:59 +0000"  >&lt;p&gt;Wow, you&apos;re working late - 12:14 am.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Well, one could argue that we don&apos;t &quot;need&quot; anything except the Derby network client and embedded drivers.   If it&apos;s your itch to also support the DB2 JCC driver, go ahead, but your first implementation of this &lt;b&gt;could&lt;/b&gt; include just support for the Derby JDBC embedded and network drivers.&lt;/p&gt;</comment>
                            <comment id="12370700" author="kristwaa" created="Thu, 16 Mar 2006 23:58:51 +0000"  >&lt;p&gt;Another go at establishing base classes for JUnit tests - &apos;BaseJUnitTestClasses-v1.tar&apos; (tar contains 4 files, extract in trunk).&lt;br/&gt;
Implementation is a result of the comments received and classes submitted to this Jira issue.&lt;br/&gt;
The implementation is just a first go, it is not complete. When it (hopefully) is committed, I will create a Jira issue for tracking improvements and bugs related to the base classes for JUnit tests.&lt;br/&gt;
I have tried using BaseJDBCTestCase in some tests, and for my current use it has been sufficient and working. It will have to be extended pretty soon.&lt;/p&gt;

&lt;p&gt;I would appreciate if someone had a look at this pretty quick, and that a committer committed it as soon as it is approved.&lt;/p&gt;

&lt;p&gt;A few comments:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;no support for getting connections through DataSource yet.&lt;/li&gt;
	&lt;li&gt;no DataSource class name included for the JCC client.&lt;/li&gt;
	&lt;li&gt;exception handling in BaseJDBCTestCase.loadJDBCDriver() not optimal (initCause not available in Java 1.3).&lt;/li&gt;
	&lt;li&gt;methods in BaseJDBCTestCase are static so that for instance TestSetup classes can use them.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12370710" author="andreask" created="Fri, 17 Mar 2006 00:52:36 +0000"  >&lt;p&gt;Review of BaseJUnitTestClasses-v1.tar:&lt;br/&gt;
This patch looks good.&lt;/p&gt;

&lt;p&gt;I downloaded the files you submitted, and checked how it would work to change SURBaseTest to extend BaseJDBCTest. This worked very well with. I removed the getConnection() method in SURBaseTest., so that the class would use  the getConnection() method from BaseJDBCTest. Then I successfully ran the tests that extend SURBaseTest as type .junit, both in the embedded framework and in the DerbyNetClient framework.  &lt;/p&gt;

&lt;p&gt;Minor comments:&lt;br/&gt;
1. In BaseJDBCTestCase class initializer: I think you could print the stack trace for the exception.&lt;br/&gt;
2. In TestConfiguration: isVerbose is always set to false.&lt;br/&gt;
3. I would like methods to log stuff and print stack traces. You do not have to supply them here, I can add them later since that is my itch.&lt;/p&gt;</comment>
                            <comment id="12370723" author="kristwaa" created="Fri, 17 Mar 2006 01:33:37 +0000"  >&lt;p&gt;Thank you Andreas. See answers for your comments below.&lt;/p&gt;

&lt;p&gt;1. I don&apos;t think this is necessary. An exception there merely implies we are in a JSR 169 environment, and that&apos;s all the static code is used for. If running under JSR 169, I would not like to see an exception being printed when running tests. I would then belive something was wrong, but it is not. And, if you are unable to load Driver in a non JSR 169 environment, then something is very wrong with the environment and the code will fail elsewhere.&lt;/p&gt;

&lt;p&gt;2. Thanks for catching this. Forgot to remove while debugging privilege problems with the JCC driver.&lt;/p&gt;

&lt;p&gt;3. I suggest you add this to the Jira issue I will create for tracking improvemens and bug for the JUnit base classes.&lt;/p&gt;

&lt;p&gt;Uploaded &apos;BaseJUnitTestClasses-v2-tar&apos; which fixes 2. and  a missing @throws tag.&lt;/p&gt;</comment>
                            <comment id="12370742" author="davidvc" created="Fri, 17 Mar 2006 03:25:15 +0000"  >&lt;p&gt;Comments look positive.  I&apos;ll take a quick look and will either commit or provide comments.&lt;/p&gt;</comment>
                            <comment id="12370763" author="davidvc" created="Fri, 17 Mar 2006 07:26:01 +0000"  >&lt;p&gt;Committed revision 386483.  Builds fine.  No impact on derbyall, although Andreas did verify it works, so I did not run any tests.&lt;/p&gt;</comment>
                            <comment id="12373258" author="andreask" created="Wed, 5 Apr 2006 18:18:32 +0100"  >&lt;p&gt;Pattern has been improved by introducing the new BaseTestCase and BaseJDBCtestCase classes.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12324259" name="BaseJUnitTestClasses-v1.tar" size="20480" author="kristwaa" created="Thu, 16 Mar 2006 23:58:50 +0000"/>
                            <attachment id="12324263" name="BaseJUnitTestClasses-v2.tar" size="23552" author="kristwaa" created="Fri, 17 Mar 2006 01:33:37 +0000"/>
                            <attachment id="12324075" name="BasicDerbyJUnitTest.html" size="24459" author="kristwaa" created="Mon, 13 Mar 2006 05:18:35 +0000"/>
                            <attachment id="12324073" name="BasicDerbyJUnitTest.java" size="26204" author="kristwaa" created="Mon, 13 Mar 2006 05:18:34 +0000"/>
                            <attachment id="12324074" name="BasicDerbyJUnitTestTest.java" size="6590" author="kristwaa" created="Mon, 13 Mar 2006 05:18:35 +0000"/>
                            <attachment id="12324152" name="JDBCClient.java" size="2201" author="andreask" created="Tue, 14 Mar 2006 17:58:54 +0000"/>
                            <attachment id="12324153" name="TestConfiguration.java" size="5238" author="andreask" created="Tue, 14 Mar 2006 17:58:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 13 Mar 2006 05:18:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29776</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy16tr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>40756</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>