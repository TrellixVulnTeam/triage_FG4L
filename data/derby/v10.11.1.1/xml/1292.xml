<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:54:47 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1292/DERBY-1292.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1292] ClassCastException in ClientDriver when using CLOB columns and batch updates</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1292</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;java.lang.ClassCastException: java.lang.String&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetStatementRequest.writeExecute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.writeExecute(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeBatchX(Unknown Source)&lt;br/&gt;
	at org.apache.derby.client.am.PreparedStatement.executeBatch(Unknown Source)&lt;br/&gt;
	at CCEBatchUpdateRepro.doInserts(CCEBatchUpdateRepro.java:71)&lt;br/&gt;
	at CCEBatchUpdateRepro.main(CCEBatchUpdateRepro.java:27)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12333235">DERBY-1292</key>
            <summary>ClassCastException in ClientDriver when using CLOB columns and batch updates</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="james.f.adams">James F. Adams</assignee>
                                    <reporter username="gekhin">Gerald Khin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 May 2006 21:00:03 +0100</created>
                <updated>Thu, 13 Dec 2007 09:04:55 +0000</updated>
                            <resolved>Tue, 29 Aug 2006 10:56:24 +0100</resolved>
                                    <version>10.1.2.1</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Client</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12378023" author="gekhin" created="Fri, 5 May 2006 21:02:43 +0100"  >&lt;p&gt;Here is a repro:&lt;/p&gt;

&lt;p&gt;import java.sql.Connection;&lt;br/&gt;
import java.sql.DriverManager;&lt;br/&gt;
import java.sql.PreparedStatement;&lt;br/&gt;
import java.sql.SQLException;&lt;br/&gt;
import java.sql.Statement;&lt;br/&gt;
import java.sql.Types;&lt;/p&gt;

&lt;p&gt;public class CCEBatchUpdateRepro {&lt;/p&gt;

&lt;p&gt;    public static void main(String[] args) {&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);
        }
&lt;p&gt;        catch(ClassNotFoundException e) &lt;/p&gt;
{
            e.printStackTrace();
            System.exit(1);
        }&lt;br/&gt;
&lt;br/&gt;
        Connection conn = null;&lt;br/&gt;
        try {
            conn = DriverManager.getConnection(&quot;jdbc:derby://localhost:1527/TESTDB&quot;);;
            conn.setAutoCommit(false);
            
            createTable(conn);

            doInserts(conn);
            
            conn.rollback();
            conn.close();
        }&lt;br/&gt;
        catch(Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
&lt;p&gt;        finally {&lt;br/&gt;
            if (conn != null) {&lt;br/&gt;
                try &lt;/p&gt;
{
                    conn.rollback();
                    conn.close();
                }
&lt;p&gt;                catch (Exception ex) {&lt;br/&gt;
                }&lt;br/&gt;
            }&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        System.exit(0);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private static void createTable(Connection conn) throws SQLException {&lt;br/&gt;
        final Statement stmt = conn.createStatement();&lt;/p&gt;

&lt;p&gt;        try &lt;/p&gt;
{
            stmt.execute(&quot;CREATE TABLE CCE_REPRO(text1 VARCHAR(100), text2 CLOB)&quot;);
        }
&lt;p&gt;        finally &lt;/p&gt;
{
            stmt.close();
        }&lt;br/&gt;
    }&lt;br/&gt;
&lt;br/&gt;
    private static void doInserts(Connection conn) throws SQLException {&lt;br/&gt;
        final PreparedStatement stmt = conn.prepareStatement(&quot;INSERT INTO CCE_REPRO(text1,text2) VALUES (?,?)&quot;);&lt;br/&gt;
        &lt;br/&gt;
        try {
            stmt.setNull(1, Types.VARCHAR);
            stmt.setString(2, &quot;clob&quot;);
            stmt.addBatch();
            
            stmt.setString(1, &quot;varchar&quot;);
            stmt.setNull(2, Types.CLOB);
            stmt.addBatch();
            
            stmt.executeBatch();
            stmt.close();
        }&lt;br/&gt;
        finally {
            stmt.close();
        }
&lt;p&gt;    }&lt;br/&gt;
}&lt;/p&gt;</comment>
                            <comment id="12378169" author="bryanpendleton" created="Sat, 6 May 2006 07:26:02 +0100"  >&lt;p&gt;I was successfully able to reproduce your ClassCastException on the current trunk. Here&apos;s the stack trace from the current trunk, with line numbers:&lt;/p&gt;

&lt;p&gt;java.lang.ClassCastException&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(NetStatementRequest.java:1204)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(NetStatementRequest.java:518)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementRequest.writeExecute(NetStatementRequest.java:137)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.writeExecute_(NetPreparedStatement.java:172)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.writeExecute(PreparedStatement.java:1403)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(PreparedStatement.java:1879)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeBatchX(PreparedStatement.java:1798)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeBatch(PreparedStatement.java:1256)&lt;br/&gt;
        at repro.doInserts(repro.java:74)&lt;br/&gt;
        at repro.main(repro.java:28)&lt;/p&gt;

&lt;p&gt;Line 1204 of NetStatementRequest.java is this:&lt;/p&gt;

&lt;p&gt;   java.sql.Clob c = (java.sql.Clob) inputRow&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;Interestingly, I have to have &lt;b&gt;both&lt;/b&gt; of the batch elements to make the bug happen. If I comment out either&lt;br/&gt;
the first group of 3 lines in the doInserts() try block, or if I comment out the second group of lines in the&lt;br/&gt;
doInserts() try block, the bug does not occur. It only occurs when &lt;b&gt;both&lt;/b&gt; batch elements are present in&lt;br/&gt;
the batch.&lt;/p&gt;</comment>
                            <comment id="12378225" author="bryanpendleton" created="Sat, 6 May 2006 23:33:46 +0100"  >&lt;p&gt;I think there is a design issue here with respect to the PreparedStatement data structures, &lt;br/&gt;
and the handling of batch operations.&lt;/p&gt;

&lt;p&gt;PreparedStatement.java records information about the types of the various columns in the &lt;br/&gt;
statement using a ColumnMetadata object named parameterMetaData_:&lt;/p&gt;

&lt;p&gt;  public ColumnMetaData parameterMetaData_; // type information for input sqlda&lt;/p&gt;

&lt;p&gt;But in the batch statement scenario, each batch element can have a different set of data &lt;br/&gt;
type information. For example, in the reproduction program provided by Gerald Khin,&lt;br/&gt;
the first batch element has the type information (column1:Varchar, column2: String),&lt;br/&gt;
while the second batch element has the type information (column1:String, column2:Clob).&lt;/p&gt;

&lt;p&gt;The PreparedStatement appears to have a &quot;last element wins&quot; result here: each set of&lt;br/&gt;
stmt.setString/stmt.setNull/stmt.setObject/etc. calls resets the values in the&lt;br/&gt;
parameterMetaData_ object, so that when we reach the executeBatch call, the values&lt;br/&gt;
in the parameterMetaData_ object record the types of the &lt;b&gt;last&lt;/b&gt; batch element.&lt;/p&gt;

&lt;p&gt;But then the executeBatch call proceeds to use those types to interpret the data, starting&lt;br/&gt;
with the &lt;b&gt;first&lt;/b&gt; batch element.&lt;/p&gt;

&lt;p&gt;In the case of the repro script, this causes us to try to interpret the string &quot;clob&quot; as a Clob.&lt;/p&gt;

&lt;p&gt;If you change the repro program by replacing the Types.CLOB call in the second batch&lt;br/&gt;
element with Types.INTEGER, then you get a different ClassCastException elsewhere&lt;br/&gt;
in the client code, as the code tries to interpret the string &quot;clob&quot; as an Integer.&lt;/p&gt;

&lt;p&gt;I suspect that, in the batch execution case, the client code cannot use just a single&lt;br/&gt;
parameterMetaData_ member in the PreparedStatement object, but rather needs to&lt;br/&gt;
have a collection of ColumnMetaData instances, one for each batch element, and&lt;br/&gt;
the addBatch() operation needs to add a ColumnMetaData instance to the collection,&lt;br/&gt;
rather than simply re-using the same parameterMetaData_ instance.&lt;/p&gt;

&lt;p&gt;For the meantime, the workaround is to use the same type signatures in each&lt;br/&gt;
batch element. For example, the program will work, correctly, if Types.CLOB in the&lt;br/&gt;
second batch element is replaced by Types.VARCHAR. As long as you use the&lt;br/&gt;
same types uniformly in each batch element, you can get your application to work.&lt;/p&gt;

&lt;p&gt;I will investigate a patch to the batch element handling in the client.&lt;/p&gt;</comment>
                            <comment id="12378226" author="bryanpendleton" created="Sat, 6 May 2006 23:39:47 +0100"  >&lt;p&gt;The use of a collection of type information with an entry for each batch element&lt;br/&gt;
appears to be the solution chosen by the embedded driver. Here is a comment&lt;br/&gt;
from the addBatch() method in EmbedPreparedStatement.java:&lt;/p&gt;

&lt;p&gt;   //get a clone of the parameterValueSet and save it in the vector&lt;br/&gt;
   //which will be used later on at the time of batch execution.&lt;br/&gt;
   //This way we will get a copy of the current statement&apos;s parameter&lt;br/&gt;
   //values rather than a pointer to the statement&apos;s parameter value&lt;br/&gt;
   //set which will change with every new statement in the batch.&lt;/p&gt;

&lt;p&gt;So this feels like the correct solution to pursue in the client.&lt;/p&gt;</comment>
                            <comment id="12378302" author="bryanpendleton" created="Mon, 8 May 2006 00:30:43 +0100"  >&lt;p&gt;ColumnMetaData does not seem to support a &quot;clone&quot; operation, unfortunately.&lt;br/&gt;
So I think I&apos;ll need to write one first. And that seems like more than just a&lt;br/&gt;
couple lines of code, because the ColumnMetaData class is full of lots of&lt;br/&gt;
arrays and collections and so forth. Is there a simpler way?&lt;/p&gt;</comment>
                            <comment id="12378556" author="bryanpendleton" created="Tue, 9 May 2006 10:24:03 +0100"  >&lt;p&gt;I&apos;m not going to have time to pursue this further for a while. Marking it unassigned&lt;br/&gt;
in case somebody else wants to pick it up.&lt;/p&gt;</comment>
                            <comment id="12423400" author="james.f.adams" created="Tue, 25 Jul 2006 19:27:32 +0100"  >&lt;p&gt;Since this is a show stopper for a project that I am working on, I would be happy to work on this.&lt;/p&gt;</comment>
                            <comment id="12428653" author="james.f.adams" created="Thu, 17 Aug 2006 14:32:53 +0100"  >&lt;p&gt;The attached patch contains the following:&lt;/p&gt;

&lt;p&gt;1) The addition of a copy method to org.apache.derby.client.am.ColumnMetaData.&lt;br/&gt;
2) Modifications to org.apache.derby.client.am.PreparedStatement to hold on to a copy of the column meta data for each entry used in batch updates.&lt;br/&gt;
3) A test was added to org.apache.derbyTestingfunctionTests.tests.derbynet.prepStmt.&lt;/p&gt;

&lt;p&gt;I ran derbynet/prepStmt as well as derbyall and did not see any new failures.&lt;/p&gt;</comment>
                            <comment id="12429487" author="james.f.adams" created="Mon, 21 Aug 2006 19:43:02 +0100"  >&lt;p&gt;The uploaded patch is ready for review.&lt;/p&gt;</comment>
                            <comment id="12430012" author="oysteing" created="Wed, 23 Aug 2006 15:05:39 +0100"  >&lt;p&gt;Thanks, for working on this patch&lt;/p&gt;

&lt;p&gt;I have verified that the patch works, but I am a bit concerned with&lt;br/&gt;
the copying overhead this patch introduces.  The entire ColumnMetaData&lt;br/&gt;
is copied, but it is only clientParamterType that will be changing&lt;br/&gt;
between statements of a batch.  It should be sufficient to copy just&lt;br/&gt;
this array.  (IMO, this is an indication that clientParamterType&lt;br/&gt;
should not have been part of ColumnMetaData in the first place.&lt;br/&gt;
Almost all of the data in ColumnMetaData is received from the server&lt;br/&gt;
as part of a prepare and that data is never changed by the client.&lt;br/&gt;
clientParamterType (note the typo) on the other hand is set by the&lt;br/&gt;
client between executions or for each statement of a batch. It would&lt;br/&gt;
have been best if these two issues were separated, but I guess that is&lt;br/&gt;
a bit beyond what one can expect from a bug fix.)&lt;/p&gt;

&lt;p&gt;To the implementation:&lt;/p&gt;

&lt;p&gt;1. I suggest making a list of just clientParamterType arrays, not&lt;br/&gt;
   ColumnMetadata.&lt;/p&gt;

&lt;p&gt;2. I suggest not allocating this list until it is actually needed.&lt;br/&gt;
   (No need to pay a penalty for clients not using batches.)  That is,&lt;br/&gt;
   in addBatch do:&lt;br/&gt;
      if (parameterTypeList == null) &lt;/p&gt;
{ 
          parameterTypeList = new ArrayList();
      }

&lt;p&gt;3. Since clientParamterType is an int[], a shallow copy is sufficient.&lt;br/&gt;
   Hence, there should be no need for a separate copy method. Instead,&lt;br/&gt;
   you can just do:&lt;br/&gt;
      parameterTypeList.add(parameterMetaData.clientParamtertype_.clone());&lt;/p&gt;

&lt;p&gt;4. Since the same bug exists in the IBM driver, your new test will&lt;br/&gt;
   fail when running with this driver.  You can disable your test for&lt;br/&gt;
   this framework by this if-test:&lt;br/&gt;
       if (!TestUtil.isJCCFramework()) &lt;/p&gt;
{ jira1292test(); }

&lt;p&gt;5. I am not that fond of test names with bug numbers.  I would prefer&lt;br/&gt;
   a name that described what was tested, but I see that bug numbers&lt;br/&gt;
   is the pattern for this test, so I will not demand that you change&lt;br/&gt;
   this.  (However, it is not very useful when the code refers to bug&lt;br/&gt;
   reports in a system that is no longer in use.)  At least, add a&lt;br/&gt;
   comment explaining what you are testing.&lt;/p&gt;

&lt;p&gt;6. I would think it would be useful to execute your test case also in&lt;br/&gt;
   an embedded context.  Hence, I suggest to add it to the&lt;br/&gt;
   jdbcapi/batchUpdate.java test instead.  That way, derbyall will run&lt;br/&gt;
   the test case in both embedded and client/server.&lt;/p&gt;

&lt;p&gt;7. Nit pick: You have a comment line that is a bit above 80 characters.&lt;/p&gt;</comment>
                            <comment id="12430315" author="james.f.adams" created="Thu, 24 Aug 2006 20:43:37 +0100"  >&lt;p&gt;Thanks for the review &#216;ystein.  I have one question about item 6.  It appears that the jdbcapi/batchUpdate.java test is skipped when using the DerbyNetClient framework.  Should I add the test to both derbynet/perpStmt.java and jdbcapi/batchUpdate?&lt;/p&gt;</comment>
                            <comment id="12430684" author="james.f.adams" created="Sat, 26 Aug 2006 03:52:30 +0100"  >&lt;p&gt;I have uploaded a new patch for review. &lt;br/&gt;
I believe it addresses the issues raised with the previous patch.&lt;/p&gt;
</comment>
                            <comment id="12431049" author="oysteing" created="Mon, 28 Aug 2006 21:01:56 +0100"  >&lt;p&gt;I have reviewed the new version of the patch and the code looks fine (except for the minor issue of lines longer than 80 characters).  I have checked that it is fixes the bug, and also that it fixes the problem in the reproduction case for the duplicate bug report, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1321&quot; title=&quot;ClassCastException in client for batched statements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1321&quot;&gt;&lt;del&gt;DERBY-1321&lt;/del&gt;&lt;/a&gt;.  derbyall also ran without errors for this patch.  I recommend that a committer commits this patch.&lt;/p&gt;

&lt;p&gt;If you wnat this patch to be included in the upcoming 10.2 version, you will need to lobby the release manager in order to get it ported to the 10.2 branch.&lt;/p&gt;
</comment>
                            <comment id="12431062" author="djd" created="Mon, 28 Aug 2006 21:45:55 +0100"  >&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1292&quot; title=&quot;ClassCastException in ClientDriver when using CLOB columns and batch updates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1292&quot;&gt;&lt;del&gt;DERBY-1292&lt;/del&gt;&lt;/a&gt;-v2.diff Committed revision 437822 - Thanks James.&lt;/p&gt;</comment>
                            <comment id="12431150" author="knutanders" created="Tue, 29 Aug 2006 07:36:50 +0100"  >&lt;p&gt;I am running tests on 10.2 and will merge the fix into the 10.2 branch when they have completed successfully. Thanks.&lt;/p&gt;</comment>
                            <comment id="12431201" author="knutanders" created="Tue, 29 Aug 2006 10:56:24 +0100"  >&lt;p&gt;Committed into 10.2 with revision 438037.&lt;/p&gt;</comment>
                            <comment id="12551339" author="fuzzylogic" created="Thu, 13 Dec 2007 09:04:55 +0000"  >&lt;p&gt;This issue has been resolved for over a year with no further movement. Closing.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12339630" name="DERBY-1292-v2.diff" size="5558" author="james.f.adams" created="Sat, 26 Aug 2006 03:52:30 +0100"/>
                            <attachment id="12339026" name="DERBY-1292.diff" size="8628" author="james.f.adams" created="Thu, 17 Aug 2006 14:32:53 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 6 May 2006 06:26:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22416</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy10a7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39696</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>