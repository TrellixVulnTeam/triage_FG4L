<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:31:56 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5223/DERBY-5223.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5223] Thread&apos;s interrupted flag not always preserved after Derby returns from JDBC API call</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5223</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Sometimes we have this this stack trace on the log from SuitesAll:&lt;/p&gt;

&lt;p&gt;.Exception in thread &quot;WorkerThread. Thread#5&quot; junit.framework.AssertionFailedError&lt;br/&gt;
        at junit.framework.Assert.fail(Assert.java:47)&lt;br/&gt;
        at junit.framework.Assert.assertTrue(Assert.java:20)&lt;br/&gt;
        at junit.framework.Assert.assertTrue(Assert.java:27)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:430) &lt;/p&gt;

&lt;p&gt;This happens sometimes when the application thread&apos;s interrupt flag is set before we enter a Derby API call, but the flag is cleared on return contrary to our specified behavior.&lt;/p&gt;

&lt;p&gt;Cf mention on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5081?focusedCommentId=13030155&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13030155&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-5081?focusedCommentId=13030155&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13030155&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can reproduce this every 20 runs or so on Linux with JDK7, but it has been seen also on Windows, so it is not VM specific.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12506629">DERBY-5223</key>
            <summary>Thread&apos;s interrupted flag not always preserved after Derby returns from JDBC API call</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="dagw">Dag H. Wanvik</reporter>
                        <labels>
                    </labels>
                <created>Mon, 9 May 2011 17:25:58 +0100</created>
                <updated>Tue, 25 Oct 2011 18:09:43 +0100</updated>
                            <resolved>Wed, 27 Jul 2011 21:59:12 +0100</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="13030803" author="dagw" created="Mon, 9 May 2011 17:47:23 +0100"  >&lt;p&gt;I instrumented this and retrieved the following stack trace which shows where Derby detected the interrupt, but failed to preserve the flag.&lt;br/&gt;
Notice that on the stack we have the frame:&lt;/p&gt;

&lt;p&gt;    GenericLanguageConnectionContext.initialize(GenericLanguageConnectionContext.java:401)&lt;/p&gt;

&lt;p&gt;The variable interruptedException is set to null just &lt;b&gt;after&lt;/b&gt; that call, which is clearly wrong: the null initialization happens too late since, in this case, the connection has seen an interrupt in the line above, i.e. &quot;setDefaultSchema(initDefaultSchemaDescriptor());&quot;.&lt;/p&gt;

&lt;p&gt;Hence, we lose the information that Derby has seen an interrupt and temporarily proceeded with the flag cleared (so that NIO can complete ok). On return from &lt;br/&gt;
the connect call, the flag is thus never set back on again.&lt;/p&gt;

&lt;p&gt;..java.lang.Exception: Stack trace&lt;br/&gt;
        at java.lang.Thread.dumpStack(Thread.java:1342)&lt;br/&gt;
        at org.apache.derby.iapi.util.InterruptStatus.setInterrupted(InterruptStatus.java:83)&lt;br/&gt;
        at org.apache.derby.impl.store.raw.data.BasePage.setExclusive(BasePage.java:1689)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainer.latchPage(BaseContainer.java:527)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.latchPage(FileContainer.java:3530)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(FileContainer.java:2549)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.FileContainer.getPage(FileContainer.java:2591)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(BaseContainerHandle.java:319)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:833)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.ControlRow.get(ControlRow.java:820)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(BTreeScan.java:361)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.positionAtStartPosition(BTreeForwardScan.java:70)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeForwardScan.java:122)&lt;br/&gt;
	at org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(BTreeScan.java:1599)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndexMinion(DataDictionaryImpl.java:9288)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(DataDictionaryImpl.java:9212)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(DataDictionaryImpl.java:1722)&lt;br/&gt;
	at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(DataDictionaryImpl.java:1589)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initDefaultSchemaDescriptor(GenericLanguageConnectionContext.java:426)&lt;br/&gt;
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initialize(GenericLanguageConnectionContext.java:401)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.setupConnection(BasicDatabase.java:295)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.startTransaction(TransactionResourceImpl.java:189)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:441)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:146)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:579)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:190)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1574)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:432)&lt;br/&gt;
Exception in thread &quot;WorkerThread. Thread#4&quot; junit.framework.AssertionFailedError&lt;br/&gt;
	at junit.framework.Assert.fail(Assert.java:47)&lt;br/&gt;
	at junit.framework.Assert.assertTrue(Assert.java:20)&lt;br/&gt;
	at junit.framework.Assert.assertTrue(Assert.java:27)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.store.InterruptResilienceTest$WorkerThread.run(InterruptResilienceTest.java:435)&lt;br/&gt;
........&lt;br/&gt;
Time: 175.745&lt;/p&gt;</comment>
                            <comment id="13030957" author="dagw" created="Tue, 10 May 2011 00:32:56 +0100"  >&lt;p&gt;Attaching patch derby-5223. This fix moves the initialization of the variable &quot;interruptedException&quot; earlier in GenerciLanguageConnectionContext#initialize and also changes the asserts in the minion threads in InterruptResilienceTest into explicit exception &quot;throw&quot;s instead, so any future errors in these invariants do not get overlooked &lt;/p&gt;

&lt;p&gt;Running regressions.&lt;/p&gt;</comment>
                            <comment id="13031184" author="knutanders" created="Tue, 10 May 2011 14:33:19 +0100"  >&lt;p&gt;That&apos;s a good catch! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; The fix looks fine to me. Resetting the flag in resetFromPool() sounds like a good precaution, but just to verify that I haven&apos;t misunderstood: If the flag is non-null when resetFromPool() is called, the (physical) connection has been interrupted and closed, so it&apos;s not likely that it&apos;s possible to reuse it? In any case, resetting it sounds like the right thing to do.&lt;/p&gt;

&lt;p&gt;As to the changes in InterruptResilienceTest, would it be better to make WorkerThread preserve all Throwables? It sounds useful to be allowed to use asserts there, and I could easily imagine that someone later adds an assert call there without realizing that it won&apos;t be detected. Just to prove my point: There&apos;s still an assertEquals() call left in WorkerThread after the patch... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13031409" author="dagw" created="Tue, 10 May 2011 23:02:46 +0100"  >&lt;p&gt;Thanks for looking at this, Knut. Yes, you are right, I just added it to resetFromPool as a precaution, I&apos;ll add a comment to prevent wrong conclusions being drawn, though.&lt;/p&gt;

&lt;p&gt;Thanks for catching that remaining assert in the thread. Catching and passing back to the main thread any Throwable (which would include the JUnit exception from an assert) may be a better approach, though. I&apos;ll try that out.&lt;/p&gt;</comment>
                            <comment id="13031818" author="dagw" created="Wed, 11 May 2011 17:16:29 +0100"  >&lt;p&gt;Uploading verssion &quot;b&quot; of this patch, which implements the catching of Throwable (not just Exception) inside the worker thread&apos;s run method, idea as suggested by Knut. This lets us keep/revert to the JUnit asserts inside threads. This makes the code more readable. Regressions ran ok with this change.&lt;/p&gt;</comment>
                            <comment id="13033150" author="dagw" created="Fri, 13 May 2011 18:42:09 +0100"  >&lt;p&gt;Committed patch version &quot;b&quot; to trunk as svn 1102826.&lt;/p&gt;</comment>
                            <comment id="13033164" author="dagw" created="Fri, 13 May 2011 19:05:12 +0100"  >&lt;p&gt;Backported to 10.8 branch as svn 1102836, closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12469090">DERBY-4741</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12478651" name="derby-5223.diff" size="3425" author="dagw" created="Tue, 10 May 2011 00:32:56 +0100"/>
                            <attachment id="12478652" name="derby-5223.stat" size="189" author="dagw" created="Tue, 10 May 2011 00:32:56 +0100"/>
                            <attachment id="12478839" name="derby-5223b.diff" size="2739" author="dagw" created="Wed, 11 May 2011 17:16:29 +0100"/>
                            <attachment id="12478840" name="derby-5223b.stat" size="189" author="dagw" created="Wed, 11 May 2011 17:16:29 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10369"><![CDATA[Regression Test Failure]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 10 May 2011 13:33:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24719</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0etb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>