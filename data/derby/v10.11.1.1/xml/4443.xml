<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:55:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-4443/DERBY-4443.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-4443] Wrap rollback in exception handlers in try-catch</title>
                <link>https://issues.apache.org/jira/browse/DERBY-4443</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Avoid this pattern everywhere:&lt;/p&gt;

&lt;p&gt;		}catch(SQLException se)&lt;/p&gt;
{
			//issue a rollback on any errors
			conn.rollback();
			throw  se;
		}

&lt;p&gt;because an error in rollback will shadow the original exception.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12440778">DERBY-4443</key>
            <summary>Wrap rollback in exception handlers in try-catch</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="houxzhang">Houx Zhang</assignee>
                                    <reporter username="digulla">Aaron Digulla</reporter>
                        <labels>
                            <label>derby_triage10_8</label>
                    </labels>
                <created>Mon, 16 Nov 2009 10:23:23 +0000</created>
                <updated>Fri, 23 Mar 2012 22:43:31 +0000</updated>
                            <resolved>Fri, 23 Mar 2012 22:43:31 +0000</resolved>
                                    <version>10.5.3.0</version>
                                    <fixVersion>10.5.3.2</fixVersion>
                    <fixVersion>10.6.2.4</fixVersion>
                    <fixVersion>10.7.1.4</fixVersion>
                    <fixVersion>10.8.2.2</fixVersion>
                    <fixVersion>10.9.1.0</fixVersion>
                                    <component>Demos/Scripts</component>
                    <component>Documentation</component>
                    <component>Eclipse Plug-in</component>
                    <component>JDBC</component>
                    <component>Network Client</component>
                    <component>Network Server</component>
                    <component>Replication</component>
                    <component>Services</component>
                    <component>SQL</component>
                    <component>Test</component>
                    <component>Tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12778286" author="digulla" created="Mon, 16 Nov 2009 10:25:14 +0000"  >&lt;p&gt;One place where I&apos;ve seen this is SystemProcedures. Every method in there uses this anti-pattern.&lt;/p&gt;

&lt;p&gt;Instead of calling rollback directly, a utility function should be defined which either ignores any exceptions in rollback or, preferred, prints/logs the exception.&lt;/p&gt;</comment>
                            <comment id="12883733" author="mikem" created="Tue, 29 Jun 2010 23:26:23 +0100"  >&lt;p&gt;removing store, as it does not have access to the connection or to SQLException.&lt;/p&gt;</comment>
                            <comment id="12994473" author="kmarsden" created="Mon, 14 Feb 2011 20:28:17 +0000"  >&lt;p&gt;Triaged for 10.8.   A solution would be to chain the SQLExceptions so both would be returned to the user. Good newcomer issue.&lt;/p&gt;</comment>
                            <comment id="13003098" author="houxzhang" created="Sun, 6 Mar 2011 05:35:29 +0000"  >&lt;p&gt;I think it&apos;s a good point for a new comer. I have provided a patch. In my patch, a method named rollBackWhenSQLExceptionOccurs() is added. I&apos;m not sure there is any other place to use this method , if so, it&apos;s better to add this method in an independent util class.&lt;/p&gt;

&lt;p&gt;Please check it and give some advice, thanks!&lt;/p&gt;</comment>
                            <comment id="13003238" author="bryanpendleton" created="Mon, 7 Mar 2011 02:22:50 +0000"  >&lt;p&gt;It would be nice if the patch could include a new test which demonstrates the modified behavior&lt;br/&gt;
that occurs with the patch.&lt;/p&gt;</comment>
                            <comment id="13003361" author="houxzhang" created="Mon, 7 Mar 2011 14:16:09 +0000"  >&lt;p&gt;It&apos;s a good suggestion, Bryan.&lt;/p&gt;

&lt;p&gt;In fact, I have tried to do some unit testing before submitting the patch. However, I&apos;ve found neither of the four methods which are affected in this patch is called through out the derby project. Furthermore there is not a test class named with &quot;SystemProceduresTest&quot;. So, I&apos;m puzzled where to add the test cases.&lt;/p&gt;

&lt;p&gt;Please give a further advice to help me advance!&lt;/p&gt;

&lt;p&gt;Thanks a lot!&lt;/p&gt;</comment>
                            <comment id="13004365" author="bryanpendleton" created="Wed, 9 Mar 2011 04:36:03 +0000"  >&lt;p&gt;I think that the system procedures are called through a clever sort of reflection mechanism, which is why&lt;br/&gt;
you don&apos;t see a direct call mechanism in place. Here&apos;s a link to these procedures, showing how to&lt;br/&gt;
invoke them: &lt;a href=&quot;http://db.apache.org/derby/docs/10.7/ref/crefsqlbuiltinsystemprocedures.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.7/ref/crefsqlbuiltinsystemprocedures.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regarding an existing test suite, I think that this test suite should run these procedures:&lt;br/&gt;
org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest&lt;br/&gt;
The code for that test is in &lt;br/&gt;
java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportProcedureTest.java&lt;/p&gt;</comment>
                            <comment id="13007479" author="houxzhang" created="Wed, 16 Mar 2011 14:07:21 +0000"  >&lt;p&gt;Thanks very much, Bryan! As I have been busy with my school affairs, I has just seen your advice, and it is valuable for me. I will go on, and provide a new patch some days later.&lt;/p&gt;</comment>
                            <comment id="13007483" author="houxzhang" created="Wed, 16 Mar 2011 14:23:37 +0000"  >&lt;p&gt;Hi, Bryan. I have still another question: How to invoke a failure of &quot;roll back&quot; in testing? I need to invoke failures of &quot;roll back&quot; to validate my checking. Thanks!&lt;/p&gt;</comment>
                            <comment id="13007489" author="bryanpendleton" created="Wed, 16 Mar 2011 14:37:53 +0000"  >&lt;p&gt;I think this may be rather tricky. Perhaps other developers have a good idea. One technique,&lt;br/&gt;
which is artificial, is to deliberate modify the code for rolllback so that it fails. Of course,&lt;br/&gt;
that would not be a permanent change, just a temporary one so that you can exercise your&lt;br/&gt;
other altered code paths.&lt;/p&gt;

&lt;p&gt;I suspect that this modification may be rather a hard one to test, unfortunately, so you&lt;br/&gt;
may have to resort to some unusual techniques.&lt;/p&gt;</comment>
                            <comment id="13007637" author="digulla" created="Wed, 16 Mar 2011 19:20:37 +0000"  >&lt;p&gt;The usual solution is to use a mock connection that throws Exceptions when rollback() is called.&lt;/p&gt;

&lt;p&gt;If you look at the code, then you&apos;ll see that the connection is created with a call to getDefaultConn(). This will query the InternalDriver for a connection.&lt;/p&gt;

&lt;p&gt;In your tests, extend InternalDriver and override connect() to return a connection object which throws exceptions for prepareStatement() and rollback():&lt;/p&gt;

&lt;p&gt;@Override&lt;br/&gt;
public PreparedStatement prepareStatement(String sql) &lt;/p&gt;
{ throw SQLException( &quot;Error in prepareStatement&quot; ); }

&lt;p&gt;@Override&lt;br/&gt;
public void rollback() &lt;/p&gt;
{ throw SQLException( &quot;Error in rollback&quot; ); }

&lt;p&gt;Make sure that correct exception is visible outside.&lt;/p&gt;

&lt;p&gt;Note that this messes with internal static variables. To fix that, you may need to create a new driver instance in the tearDown() of your tests.&lt;/p&gt;</comment>
                            <comment id="13007926" author="houxzhang" created="Thu, 17 Mar 2011 14:23:58 +0000"  >&lt;p&gt;Thanks for your advice, Aaron. &lt;/p&gt;

&lt;p&gt;Mock extending InternalDriver seems a good idea. Overriding prepareStatement(String sql) can throw a SQLException for invoking code for rollback, and overriding rollback() can test the new wrapping!&lt;/p&gt;

&lt;p&gt;However, I&apos;m still puzzled. It&apos;s related to a key problem---- How to inject the mock for SystemProcedures when testing? &lt;/p&gt;

&lt;p&gt;Wish for your reply!&lt;/p&gt;</comment>
                            <comment id="13007930" author="digulla" created="Thu, 17 Mar 2011 14:34:53 +0000"  >&lt;p&gt;Run the code in a debugger. You will see that the static variable which contains the current InternalDriver is set in the constructor of InternalDriver. So you just need to extend the class, call new on your version and call the system procedure.&lt;/p&gt;</comment>
                            <comment id="13008780" author="houxzhang" created="Sat, 19 Mar 2011 14:44:09 +0000"  >&lt;p&gt;Yes, Aaron, I have seen the static variable set in the constructor of InternalDriver in the prospective of debugging when Driver40 is installed. As I&apos;m not familiar with DERBY, could you tell me how to &quot;call new on your version&quot;, please?  That is, how to install my mocking subclass of  InternalDriver in my testing.&lt;/p&gt;

&lt;p&gt;Thanks very much!&lt;/p&gt;</comment>
                            <comment id="13008784" author="digulla" created="Sat, 19 Mar 2011 15:12:36 +0000"  >&lt;p&gt;I think this is beyond the scope of the bug report. Please ask your questions on stackoverflow.com.&lt;/p&gt;</comment>
                            <comment id="13008786" author="bryanpendleton" created="Sat, 19 Mar 2011 15:53:14 +0000"  >&lt;p&gt;Often I find that the best way to move forward with a problem is to try writing the code that&lt;br/&gt;
you think you want to write (in this case, a class that would sub-class InternalDriver, perhaps&lt;br/&gt;
named MockInternalDriver), try&lt;br/&gt;
placing a call to&lt;br/&gt;
    InternalDriver myDriver = new MockInternalDriver();&lt;br/&gt;
somewhere in the setUp() method of ImportExportProcedureTest, try it out, and&lt;br/&gt;
see what happens.&lt;/p&gt;

&lt;p&gt;You can probably put the MockInternalDriver code directly into ImportExportProcedureTest,&lt;br/&gt;
as a nested class, so you don&apos;t have to create any new source files to do this.&lt;/p&gt;

&lt;p&gt;Put some System.out.println statements into your mock class, so you can see&lt;br/&gt;
whether it is getting run or not, and where it is being used.&lt;/p&gt;

&lt;p&gt;It probably won&apos;t work. But, then you can attach an updated patch, containing the&lt;br/&gt;
actual code that you tried, and describe what it did and what you wanted it to do instead.&lt;/p&gt;

&lt;p&gt;In essence: try writing some code, see how far you get, atttach the code you tried, and&lt;br/&gt;
a description of where exactly you got stuck, and the community will offer some&lt;br/&gt;
suggestions about what to try next.&lt;/p&gt;</comment>
                            <comment id="13008891" author="houxzhang" created="Sun, 20 Mar 2011 08:31:24 +0000"  >&lt;p&gt;Oh, thanks, Bryan. Your advice is great! I will remember to give a patch before launch a discussion.&lt;/p&gt;

&lt;p&gt;I have written some testing code before, just like I do in the new patch. In the patch, I do &quot;new MockInternalDriver();&quot; in the setup() method of my junit test class, however, this sentence will throw a exception as InternalDriver() will check its contextServiceFactory is null.&lt;/p&gt;

&lt;p&gt;I think the key point is to decide where to install the mock of InternalDriver to give it a normal running circumstance, maybe it&apos;s related to some .&lt;/p&gt;

&lt;p&gt;Comments are welcome.&lt;/p&gt;
</comment>
                            <comment id="13008910" author="bryanpendleton" created="Sun, 20 Mar 2011 15:28:27 +0000"  >&lt;p&gt;I modified the setUp() method of your patch so that it looks like this:&lt;/p&gt;


&lt;p&gt;    protected void setUp()&lt;br/&gt;
        throws Exception&lt;/p&gt;
    {
        System.out.println(&quot;setUp is called!&quot;);
        openDefaultConnection();
        MockInternalDriver dvr = new MockInternalDriver();
        dvr.stop();
        dvr.boot(false, null);
    }


&lt;p&gt;and now the test gets considerably further. It gets to the point where&lt;br/&gt;
it tries to make a new connection, and then fails.&lt;/p&gt;

&lt;p&gt;I think that your connect() method in your MockInternalDriver&lt;br/&gt;
must do more than just return an empty MockConnection().&lt;/p&gt;

&lt;p&gt;I think that you have to call super.connect(url, info), and then&lt;br/&gt;
take the real connection that the superclass creates and wrap&lt;br/&gt;
that connection in your MockConnection.&lt;/p&gt;

&lt;p&gt;So your connect() method should probably look something like:&lt;/p&gt;

&lt;p&gt;    return new MockConnection(super.connect(url, info));&lt;/p&gt;

&lt;p&gt;and your MockConnection class will need to have a private&lt;br/&gt;
internal Connection object that it delegates to.&lt;/p&gt;

&lt;p&gt;Does that make sense? Hopefully this helps you get further&lt;br/&gt;
in building your test case.&lt;/p&gt;</comment>
                            <comment id="13010127" author="houxzhang" created="Wed, 23 Mar 2011 14:01:18 +0000"  >&lt;p&gt;Thanks Bryan very much!&lt;/p&gt;

&lt;p&gt;I have tried following your advice, now, in the new patch, the MockInternalDriver can be instanced and its connect(String url, Properties info) is called indeed, however, its super.connect(url, info) throws a NullException. It seems this way is not OK. I still faced the same question--how to mock a rollback as expected.&lt;/p&gt;

&lt;p&gt;Wish for your comments! &lt;/p&gt;</comment>
                            <comment id="13010131" author="bryanpendleton" created="Wed, 23 Mar 2011 14:13:57 +0000"  >&lt;p&gt;Can you paste in the NPE exception that you get, with its stack trace?&lt;/p&gt;</comment>
                            <comment id="13010155" author="houxzhang" created="Wed, 23 Mar 2011 14:45:55 +0000"  >&lt;p&gt;Certainly, Bryan.&lt;/p&gt;

&lt;p&gt;setUp is called!&lt;br/&gt;
--------&lt;del&gt;test&lt;/del&gt;--------&lt;br/&gt;
MockInternalDriver.connect() is called!&lt;br/&gt;
java.lang.NullPointerException&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.&amp;lt;init&amp;gt;(TransactionResourceImpl.java:161)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:234)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver30.getNewEmbedConnection(Driver30.java:80)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest$MockInternalDriver.connect(RollBackWrappingWhenFailOnImportTest.java:56)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:582)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:154)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:81)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1574)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(BaseJDBCTestCase.java:428)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.getConnection(BaseJDBCTestCase.java:110)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(BaseJDBCTestCase.java:317)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest.testRollBackWhenFailOnImportTable(RollBackWrappingWhenFailOnImportTest.java:90)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:164)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:130)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:120)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:230)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:225)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&lt;/p&gt;</comment>
                            <comment id="13010546" author="bryanpendleton" created="Thu, 24 Mar 2011 03:37:09 +0000"  >&lt;p&gt;I think that the suggestion I made in an earlier comment, about including the lines&lt;/p&gt;

&lt;p&gt;    dvr.stop();&lt;br/&gt;
    dvr.boot(false, null);&lt;/p&gt;

&lt;p&gt;was not good advice. Those lines are what is causing your current NPE.&lt;/p&gt;

&lt;p&gt;I removed the calls to dvr.stop() and dvr.boot() from the setUp() method of&lt;br/&gt;
the test, and I get much further.&lt;/p&gt;

&lt;p&gt;Can you try making that change in your copy, and see if that gets you further?&lt;/p&gt;</comment>
                            <comment id="13010726" author="houxzhang" created="Thu, 24 Mar 2011 15:54:17 +0000"  >&lt;p&gt;Oh, good message, Bryan! Thanks to your patient advice, I think we have get closer to the aim.&lt;/p&gt;

&lt;p&gt;I have remove the lines &lt;/p&gt;

&lt;p&gt;    dvr.stop();&lt;br/&gt;
    dvr.boot(false, null); &lt;br/&gt;
, yes the test can run further, but the MockInternalDriver.connect() is not called nay more.&lt;/p&gt;

&lt;p&gt;If keep the &quot;dvr.boot(false, null); &quot;, we get what we want just like in patch-3, the MockConnection is created and rollBack() failed as expected.&lt;/p&gt;

&lt;p&gt;I have sumbitted the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4443&quot; title=&quot;Wrap rollback in exception handlers in try-catch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4443&quot;&gt;&lt;del&gt;DERBY-4443&lt;/del&gt;&lt;/a&gt;-3.patch. Please check it. If it&apos;s OK, I will add more test cases, clean code and give a final version.&lt;/p&gt;</comment>
                            <comment id="13011014" author="bryanpendleton" created="Thu, 24 Mar 2011 23:40:35 +0000"  >&lt;p&gt;Excellent! I am pleased that this approach appears to work. I think that we will&lt;br/&gt;
want to include some comments in the header of the new test to describe the&lt;br/&gt;
use of the Mock testing objects, and to briefly outline the use of the &apos;dvr.boot&apos;&lt;br/&gt;
method to install our new mock driver into the test.&lt;/p&gt;

&lt;p&gt;I think you should proceed with this work; it will be great to have the fix, and&lt;br/&gt;
even better that we&apos;ll have a regression test.&lt;/p&gt;</comment>
                            <comment id="13011637" author="houxzhang" created="Sat, 26 Mar 2011 14:44:02 +0000"  >&lt;p&gt;Hi, Bryan. Thanks for your great encourage!&lt;/p&gt;

&lt;p&gt;I have finished the other test cases on importing, cleaned the code, added anotation. Please check it. Thanks again!&lt;/p&gt;</comment>
                            <comment id="13011647" author="bryanpendleton" created="Sat, 26 Mar 2011 15:42:34 +0000"  >&lt;p&gt;This latest patch is looking pretty good to me: the code changes look clear and&lt;br/&gt;
straightforward, the test looks clear and to-the-point. The test passes for me&lt;br/&gt;
with the patch applied; it also fails as I expect when the code change to&lt;br/&gt;
SystemProjects.java is reverted, so the test seems to be testing the change&lt;br/&gt;
successfully.&lt;/p&gt;

&lt;p&gt;Aaron, you mentioned in the original issue description that we might need to&lt;br/&gt;
make this change in multiple places in Derby; are you aware of any places&lt;br/&gt;
besides SystemProcedures.java where we issue unprotected rollback()&lt;br/&gt;
calls like this?&lt;/p&gt;

&lt;p&gt;I suppose I&apos;m trying to figure out whether this patch would resolve this issue&lt;br/&gt;
completely, or whether it is a partial solution, and we will need to make&lt;br/&gt;
similar changes in subsequent patches.&lt;/p&gt;</comment>
                            <comment id="13011707" author="bryanpendleton" created="Sun, 27 Mar 2011 00:22:57 +0000"  >&lt;p&gt;When I run the new test as part of the complete JUnit suite, I see the following exception in my output:&lt;/p&gt;


&lt;p&gt;..........java.sql.SQLException: Derby system shutdown.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:158)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Util.java:222)&lt;br/&gt;
        at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:243)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest$MockInternalDriver.connect(RollBackWrappingWhenFailOnImportTest.java:63)&lt;br/&gt;
        at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:582)&lt;br/&gt;
        at java.sql.DriverManager.getConnection(DriverManager.java:154)&lt;br/&gt;
        at org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(DriverManagerConnector.java:143)&lt;br/&gt;
        at org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine(DriverManagerConnector.java:120)&lt;br/&gt;
        at org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine(TestConfiguration.java:1635)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.setUp(ErrorStreamTest.java:101)&lt;br/&gt;
        at junit.framework.TestCase.runBare(TestCase.java:125)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
        at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
        at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
        at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
        at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
        at junit.framework.TestSuite.runTest(TestSuite.java:208)&lt;br/&gt;
        at junit.framework.TestSuite.run(TestSuite.java:203)&lt;br/&gt;
        at junit.textui.TestRunner.doRun(TestRunner.java:116)&lt;br/&gt;
        at junit.textui.TestRunner.start(TestRunner.java:172)&lt;br/&gt;
        at junit.textui.TestRunner.main(TestRunner.java:138)&lt;br/&gt;
Caused by: java.sql.SQLException: Derby system shutdown.&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
        ... 29 more&lt;br/&gt;
E...............................&lt;/p&gt;

&lt;p&gt;I think that possibly the test needs to be run with a configuration that says it should only be&lt;br/&gt;
run when we are using the embedded driver, not in the network server configuration?&lt;/p&gt;</comment>
                            <comment id="13011728" author="houxzhang" created="Sun, 27 Mar 2011 06:13:19 +0100"  >&lt;p&gt;It seems strange. How do your mean by &quot;run the new test as part of the complete JUnit suite&quot;, Bryan?&lt;/p&gt;

&lt;p&gt;I have run the new TestCase both in Eclipse and DOS, they are all OK, just like shown in &quot;Derby-4443-4.png&quot;. Even in tools._Suite, it can pass tool.&lt;/p&gt;</comment>
                            <comment id="13011800" author="bryanpendleton" created="Sun, 27 Mar 2011 15:15:23 +0100"  >&lt;p&gt;I did&lt;br/&gt;
          java -Xmx512m -XX:MaxPermSize=128m junit.textui.TestRunner org.apache.derbyTesting.functionTests.suites.All &amp;gt;junitAll.out 2&amp;gt;&amp;amp;1&lt;/p&gt;

&lt;p&gt;and the exception was in the junitAll.out.&lt;/p&gt;</comment>
                            <comment id="13012073" author="knutanders" created="Mon, 28 Mar 2011 15:22:18 +0100"  >&lt;p&gt;I agree that the approach looks fine. Some minor comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When calling printStackTrace() on the thrown exception, only the rollback exception is thrown. To see the real problem, you either need to call getNextException() or look in derby.log. Would it make sense to change the order here? That is, in rollBackAndThrowSQLException(), change&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;            e.setNextException(se);&lt;br/&gt;
            throw e;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;            se.setNextException(e);&lt;br/&gt;
            throw se;&lt;br/&gt;
?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;There are three calls to printStackTrace() in the test code. It would probably be better to throw the exceptions so that JUnit can report them properly. If the exceptions are expected, it would be better to ignore them (with a comment saying why they should be ignored) or to have some asserts to verify that they are the exceptions we expect.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13012169" author="knutanders" created="Mon, 28 Mar 2011 19:31:09 +0100"  >&lt;p&gt;One thing I forgot to mention... The test uses EmbedConnection30, so it won&apos;t work on platforms that don&apos;t support at least JDBC 3.0 (for example Java ME with the JSR-169 driver). So the suite() method will have to check JDBC.vmSupportsJDBC3() and return an empty suite if JDBC 3.0 isn&apos;t supported by the JVM.&lt;/p&gt;</comment>
                            <comment id="13012515" author="houxzhang" created="Tue, 29 Mar 2011 16:12:03 +0100"  >&lt;p&gt;Thanks for your advice, Knut and Bryan. It&apos;s valuable for me to make progress.&lt;/p&gt;

&lt;p&gt;I have recreated the error with Bryan&apos;s command. Here is why it&apos;s caused:&lt;/p&gt;

&lt;p&gt;In the new test class &apos;RollBackWrappingWhenFailOnImportTest&apos;, a mock driver has been loaded, but it has not been shut down any more. In setup() method of engine.ErrorStreamTest which is closed in the completed test, a shutdownEngine() is called, it&apos;s used to shut down the current engine. The shutdown operation invokes a call to MockInternalDriver.connect(), which throw a mock connection(not valid here), so a SQLException of &quot;Derby system shutdown&quot; is thrown.&lt;/p&gt;

&lt;p&gt;It&apos;s obvious that, &apos;RollBackWrappingWhenFailOnImportTest&apos; has made a marginal influence on other test cases, so in patch-5, I shut down the mock driver on tearDown(), -----the exception can be ignored safely. Now, everything works well.&lt;/p&gt;

&lt;p&gt;In patch-5, Knut&apos;s advices on printStackTrace() and vmSupportsJDBC3() are adopted. Thanks!&lt;/p&gt;

&lt;p&gt;Please check the new patch-5!&lt;/p&gt;
</comment>
                            <comment id="13012835" author="bryanpendleton" created="Wed, 30 Mar 2011 04:58:35 +0100"  >&lt;p&gt;The tests pass successfully in my environment now.&lt;/p&gt;

&lt;p&gt;I intend to commit this patch in the next few days, thanks for all the hard work on it!&lt;/p&gt;</comment>
                            <comment id="13012859" author="knutanders" created="Wed, 30 Mar 2011 08:03:17 +0100"  >&lt;p&gt;Thanks for making these changes. I didn&apos;t see any response to my question about the order of the exception chain. If I print the exception thrown by rollBackAndThrowSQLException(), I see this:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: The exception &apos;java.sql.SQLException: error in roll back&apos; was thrown while evaluating an expression.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:403)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:348)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2290)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1334)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1686)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:117)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:308)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest.realTestRollBackWhenImportOnNonexistentFile(RollBackWrappingWhenFailOnImportTest.java:152)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest.testRollBackWhenFailOnImportTable(RollBackWrappingWhenFailOnImportTest.java:119)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:168)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:134)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:112)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:113)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:124)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:232)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:227)&lt;br/&gt;
	at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:23)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:27)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at junit.framework.TestSuite.runTest(TestSuite.java:232)&lt;br/&gt;
	at junit.framework.TestSuite.run(TestSuite.java:227)&lt;br/&gt;
	at junit.textui.TestRunner.doRun(TestRunner.java:116)&lt;br/&gt;
	at junit.textui.TestRunner.start(TestRunner.java:180)&lt;br/&gt;
	at junit.textui.TestRunner.main(TestRunner.java:138)&lt;br/&gt;
Caused by: java.sql.SQLException: The exception &apos;java.sql.SQLException: error in roll back&apos; was thrown while evaluating an expression.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)&lt;br/&gt;
	... 35 more&lt;br/&gt;
Caused by: java.sql.SQLException: error in roll back&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.tools.RollBackWrappingWhenFailOnImportTest$MockInternalDriver$MockConnectionFailWhenRollBack.rollback(RollBackWrappingWhenFailOnImportTest.java:59)&lt;br/&gt;
	at org.apache.derby.catalog.SystemProcedures.rollBackAndThrowSQLException(SystemProcedures.java:1479)&lt;br/&gt;
	at org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE(SystemProcedures.java:1466)&lt;br/&gt;
	at org.apache.derby.exe.aceaa980c4x012fx0589x77eaxffffbc38504a0.g0(Unknown Source)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)&lt;br/&gt;
	at org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:436)&lt;br/&gt;
	at org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:317)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1242)&lt;br/&gt;
	... 28 more&lt;/p&gt;

&lt;p&gt;For a naive user, this looks like a problem in rollback(), like it did before the fix, and there&apos;s no trace of the original &quot;table not found&quot; exception without doing some digging in the logs or traversing the getNextException() chain. Any thoughts on whether this is the exception we should report as the primary exception?&lt;/p&gt;</comment>
                            <comment id="13012955" author="bryanpendleton" created="Wed, 30 Mar 2011 14:37:40 +0100"  >&lt;p&gt;Hi Knut Anders, thanks for double-checking that.&lt;/p&gt;

&lt;p&gt;I agree that we would prefer to have the original exception lead the stack&lt;br/&gt;
trace, with the rollback exception chained on afterwards.&lt;/p&gt;

&lt;p&gt;I made your suggested change to rollbackAndThrowSQLException,&lt;br/&gt;
and indeed the exception in the stack trace is more relevant to the&lt;br/&gt;
original problem.&lt;/p&gt;

&lt;p&gt;However, this will require adjusting the test, since now the stack trace&lt;br/&gt;
looks different to the assertions in the test code.&lt;/p&gt;

&lt;p&gt;I&apos;ll hold off on committing while we discuss this further.&lt;/p&gt;</comment>
                            <comment id="13014032" author="houxzhang" created="Thu, 31 Mar 2011 16:49:23 +0100"  >&lt;p&gt;Thanks for your checking, Knut.&lt;/p&gt;

&lt;p&gt;This problem has perplexed me for some days. After checking again, I accept that &lt;/p&gt;

&lt;p&gt;    private static void rollBackAndThrowSQLException(Connection conn,&lt;br/&gt;
            SQLException se) throws SQLException {&lt;br/&gt;
        try &lt;/p&gt;
{
            conn.rollback();
        }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
            se.setNextException(e);
        }

&lt;p&gt;        throw se;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;is better, we will get the full SQLException chain. However, it&apos;s very strange that when debugging in this situation, the chain will be broken down before thrown to EmbedPreparedStatement.executeUpdate() in Line 309 of EmbedPreparedStatement, and the rollback exception will be lost.&lt;/p&gt;


&lt;p&gt;Is this situation normal, or is there something special for SQLException launched by rollback(), please?&lt;/p&gt;
</comment>
                            <comment id="13014088" author="knutanders" created="Thu, 31 Mar 2011 18:32:40 +0100"  >&lt;p&gt;Does the rollback exception appear if you call getNextException() on the thrown SQLException? You may need to call getNextException() multiple times before you get to the rollback exception. Derby typically adds a next exception for all errors, so the chain may consist of more than two exceptions in this case.&lt;/p&gt;</comment>
                            <comment id="13014639" author="houxzhang" created="Fri, 1 Apr 2011 15:59:12 +0100"  >&lt;p&gt;Knut, I have called getNextException() in several places, such as EmbedPreparedStatement.executeUpdate() in Line 309 of EmbedPreparedStatement, and each of they returned null. I also looked into the trace stack when debugging, and haven&apos;t seen rollback exception in it.&lt;/p&gt;

&lt;p&gt;Maybe it relates to the simple mocking of InternalDriver and Connection? &lt;/p&gt;
</comment>
                            <comment id="13015356" author="knutanders" created="Mon, 4 Apr 2011 12:17:32 +0100"  >&lt;p&gt;It looks like the rollback exception is stripped off by this piece of code in StandardException.unexpectedUserException():&lt;/p&gt;

&lt;p&gt;		// Look for simple wrappers for 3.0.1 - will be cleaned up in main&lt;br/&gt;
		if (ferry != null) {&lt;br/&gt;
			if (ferry.isSimpleWrapper()) &lt;/p&gt;
{
				Throwable wrapped = ((SQLException)ferry).getCause();
				if (wrapped instanceof StandardException)
					return (StandardException) wrapped;
			}
&lt;p&gt;		}&lt;/p&gt;

&lt;p&gt;This happens when the SQLException needs to be re-thrown as a StandardException, and the error handler finds that it&apos;s simpler to remove the top-level SQLException than it is to wrap it in yet another exception. Normally, an SQLException that wraps a StandardException doesn&apos;t provide any extra information, so removing it doesn&apos;t harm. But in our case the top-level exception carries extra information (the next exception), and it&apos;s not really a simple wrapper anymore. Perhaps we need to override setNextException() in EmbedSQLException and clear the simpleWrapper flag if it&apos;s called. The comments in the StandardException class give the impression that this &quot;simple wrapper&quot; code was a temporary hack that was supposed to be reworked, but they don&apos;t give any details on how.&lt;/p&gt;</comment>
                            <comment id="13015423" author="bryanpendleton" created="Mon, 4 Apr 2011 15:03:41 +0100"  >&lt;p&gt;Would it help if we made rollBackAndThrowSQLException throw &lt;br/&gt;
something other than a SQLException when it caught a rollback() exception?&lt;/p&gt;

&lt;p&gt;For example, would it help if that catch() block threw a StandardException instead?&lt;/p&gt;

&lt;p&gt;I guess I&apos;m not quite sure I understand what rule StandardException is&lt;br/&gt;
enforcing. Is it OK for a StandardException to wrap a StandardException, but&lt;br/&gt;
if a SQLException wraps a StandardException than it gets automatically unwrapped?&lt;/p&gt;

&lt;p&gt;I suspect this has to do with improving the external user experience for the&lt;br/&gt;
caller; particularly in client/server scenarios the exceptions that travel from&lt;br/&gt;
server to client tend to get wrapped along the way with uninteresting and not-so-useful&lt;br/&gt;
outer exceptions, and so perhaps this code is trying to undo that and get&lt;br/&gt;
more quickly to the underlying exception since it is more likely to reveal the real problem.&lt;/p&gt;</comment>
                            <comment id="13015456" author="knutanders" created="Mon, 4 Apr 2011 16:16:18 +0100"  >&lt;p&gt;&amp;gt; I guess I&apos;m not quite sure I understand what rule StandardException is&lt;br/&gt;
&amp;gt; enforcing. Is it OK for a StandardException to wrap a StandardException, but&lt;br/&gt;
&amp;gt; if a SQLException wraps a StandardException than it gets automatically unwrapped?&lt;/p&gt;

&lt;p&gt;It typically only gets unwrapped if it has been thrown inside a stored&lt;br/&gt;
procedure (only exceptions generated by&lt;br/&gt;
PublicAPI.wrapStandardException() are marked as &quot;simple wrappers&quot;).&lt;br/&gt;
What it attempts to solve is the problem of passing exceptions through&lt;br/&gt;
multiple layers. Inside the language layer and store, exceptions have&lt;br/&gt;
to be passed as StandardExceptions, whereas in the JDBC layer they&lt;br/&gt;
have to be passed as SQLExceptions.&lt;/p&gt;

&lt;p&gt;In the common case, an exception is generated inside the engine as a&lt;br/&gt;
StandardException, and it gets wrapped in an SQLException on its way&lt;br/&gt;
out through the JDBC layer. But in the case of stored procedures, the&lt;br/&gt;
JDBC layer is reentered from the language layer. The exceptions that&lt;br/&gt;
happen inside the stored procedure are returned to the language layer&lt;br/&gt;
as SQLExceptions, but have to be transported as StandardExceptions&lt;br/&gt;
through the language layer up to the outer JDBC layer. This could be&lt;br/&gt;
done by wrapping the SQLException in a StandardException, but then the&lt;br/&gt;
end result would be an SQLException wrapping a StandardException&lt;br/&gt;
wrapping an SQLException wrapping a StandardException. By just passing&lt;br/&gt;
the underlying StandardException, we save two layers of indirection.&lt;/p&gt;</comment>
                            <comment id="13022168" author="houxzhang" created="Wed, 20 Apr 2011 16:24:17 +0100"  >&lt;p&gt;Hello, I have provided &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4443&quot; title=&quot;Wrap rollback in exception handlers in try-catch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4443&quot;&gt;&lt;del&gt;DERBY-4443&lt;/del&gt;&lt;/a&gt;-6-tmp.patch.&lt;/p&gt;

&lt;p&gt; private static void rollBackAndThrowSQLException(Connection conn,&lt;br/&gt;
            SQLException se) throws SQLException {&lt;br/&gt;
        try &lt;/p&gt;
{
            conn.rollback();
        }
&lt;p&gt; catch (SQLException e) &lt;/p&gt;
{
            se.setNextException(e);            
        }

&lt;p&gt;        StandardException ste = StandardException.newException(&lt;br/&gt;
                se.getSQLState(), (Throwable)se);&lt;br/&gt;
        SQLException sqle = new SQLException((Throwable)ste); //this line can not pass compilation&lt;/p&gt;

&lt;p&gt;        throw sqle;&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;In rollBackAndThrowSQLException() of this patch, SQLException has been wrapped in StandardException, which is wrapped in another SQLException. However, the patch can not pass compilation, and says &quot;constructor SQLException(java.lang.Throwable) can not be found&quot;. I&apos;m puzzled about it. Please give an advice, thanks!&lt;/p&gt;</comment>
                            <comment id="13022175" author="bryanpendleton" created="Wed, 20 Apr 2011 16:33:52 +0100"  >&lt;p&gt;I think that the compilation error is because this particular class (SystemProcedures.java) is&lt;br/&gt;
compiled against the JSR169 version of SQLException, which you can find in&lt;br/&gt;
./java/stubs/jsr169/java/sql/SQLException.java, and that version of SQLException does&lt;br/&gt;
not have a constructor which takes a Throwable.&lt;/p&gt;

&lt;p&gt;What did you think about Knut Anders&apos;s suggestion of going back to your earlier patch,&lt;br/&gt;
and overriding setNextException in EmbedSQLException to clear the simpleWrapper flag?&lt;/p&gt;</comment>
                            <comment id="13022749" author="houxzhang" created="Thu, 21 Apr 2011 14:51:34 +0100"  >&lt;p&gt;Hi, Bryan, thanks for your reminding, I think the new patch 4443-7 can work well now. Please check it.&lt;/p&gt;</comment>
                            <comment id="13023074" author="bryanpendleton" created="Fri, 22 Apr 2011 02:44:32 +0100"  >&lt;p&gt;Patch 7 builds fine for me and the new test passes cleanly. I also verified that if&lt;br/&gt;
I take out the change to EmbedSQLException, the test then fails with the expected&lt;br/&gt;
failure, so I think this is looking very good.&lt;/p&gt;

&lt;p&gt;Houx, have you run the complete test suite with this patch? Or have you just run the new test?&lt;/p&gt;</comment>
                            <comment id="13025266" author="houxzhang" created="Tue, 26 Apr 2011 16:04:02 +0100"  >&lt;p&gt;Hi, Bryan. I have only run the tools.Suite, but not suites.All. &lt;/p&gt;

&lt;p&gt;After saw your adivce, I have run the complete test (org.apache.derbyTesting.functionTests.suites.All. Is that right ?) sometimes for several times, as been broken down by accident.  The complete test suite takes me more than 5 hours for one run.&lt;/p&gt;

&lt;p&gt;I have seen the result containing some failures, but after run the complete test suite and dividual tests on the original state, I believe they are not caused by the new patch. So the new patch is OK.&lt;/p&gt;</comment>
                            <comment id="13025584" author="bryanpendleton" created="Wed, 27 Apr 2011 04:29:35 +0100"  >&lt;p&gt;Thank you Houx for the update.&lt;/p&gt;

&lt;p&gt;I understand about the tests; they take a very long time for me, too. I am hoping to&lt;br/&gt;
set up a faster machine for running the tests sometime over the summer, but for&lt;br/&gt;
now I am like you, it is quite hard to run the tests. So I don&apos;t run the full suite very&lt;br/&gt;
often, but I do like to run it on a patch whenever I can.&lt;/p&gt;

&lt;p&gt;I am going to move ahead with committing patch 7.&lt;/p&gt;</comment>
                            <comment id="13025601" author="bryanpendleton" created="Wed, 27 Apr 2011 05:29:29 +0100"  >&lt;p&gt;I committed patch 7 to the trunk as revision 1096991.&lt;/p&gt;

&lt;p&gt;Thanks for all the hard work on this change; the testing was&lt;br/&gt;
a bit tricky but I&apos;m pleased that we worked through the issues&lt;br/&gt;
to get a test case that solidly demonstrates the new functionality.&lt;/p&gt;</comment>
                            <comment id="13025771" author="houxzhang" created="Wed, 27 Apr 2011 13:38:00 +0100"  >&lt;p&gt;Hehe, I have harvested a lot on this issue, thanks very much for your and Knut&apos;s patient help!&lt;/p&gt;</comment>
                            <comment id="13090398" author="myrna" created="Wed, 24 Aug 2011 19:43:45 +0100"  >&lt;p&gt;reopening for backport to 10.8&lt;/p&gt;</comment>
                            <comment id="13090400" author="myrna" created="Wed, 24 Aug 2011 19:46:42 +0100"  >&lt;p&gt;committed backport to 10.8 with revision 1161226.&lt;/p&gt;</comment>
                            <comment id="13229378" author="kmarsden" created="Wed, 14 Mar 2012 17:19:46 +0000"  >&lt;p&gt;Reopen for 10.5 backport consideration. If working on the backport for this issue. Temporarily assign yourself and add a comment that you are working on it. When finished, reresolve with the new fix versions or label backport_reject_10_x as appropriate.&lt;/p&gt;</comment>
                            <comment id="13233754" author="myrna" created="Tue, 20 Mar 2012 21:11:32 +0000"  >&lt;p&gt;I&apos;ll attempt backport of this to 10.5.&lt;br/&gt;
Temporarily assigned to me.&lt;/p&gt;</comment>
                            <comment id="13237239" author="myrna" created="Fri, 23 Mar 2012 22:43:31 +0000"  >&lt;p&gt;backported to 10.7 with revision 1304630, to 10.6 with revision 1304632, and to 10.5 with revision 1304636. Resetting assignee and closing again.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12546430">DERBY-5654</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12474112" name="DERBY-4443-1.patch" size="6950" author="houxzhang" created="Sun, 20 Mar 2011 08:36:19 +0000"/>
                            <attachment id="12474393" name="DERBY-4443-2.patch" size="7447" author="houxzhang" created="Wed, 23 Mar 2011 14:01:18 +0000"/>
                            <attachment id="12474519" name="DERBY-4443-3.patch" size="7789" author="houxzhang" created="Thu, 24 Mar 2011 15:54:17 +0000"/>
                            <attachment id="12474703" name="DERBY-4443-4.patch" size="10009" author="houxzhang" created="Sat, 26 Mar 2011 14:44:02 +0000"/>
                            <attachment id="12474719" name="DERBY-4443-4.png" size="15333" author="houxzhang" created="Sun, 27 Mar 2011 06:13:19 +0100"/>
                            <attachment id="12474887" name="DERBY-4443-5.patch" size="10327" author="houxzhang" created="Tue, 29 Mar 2011 16:12:03 +0100"/>
                            <attachment id="12476900" name="DERBY-4443-6-tmp.patch" size="10506" author="houxzhang" created="Wed, 20 Apr 2011 16:24:17 +0100"/>
                            <attachment id="12472768" name="DERBY-4443.patch" size="2590" author="houxzhang" created="Sun, 6 Mar 2011 05:35:29 +0000"/>
                            <attachment id="12477004" name="derby-4443-7.patch" size="10154" author="houxzhang" created="Thu, 21 Apr 2011 14:51:34 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Jun 2010 22:26:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24258</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10423"><![CDATA[Newcomer]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0cjj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35850</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>