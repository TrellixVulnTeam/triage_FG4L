<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:28:29 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5232/DERBY-5232.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5232] Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5232</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Users often on bad advice or desperation  touch or delete files in the log or seg0 directories (mostly log).&lt;/p&gt;

&lt;p&gt;I think it would be good for new databases and on upgrade that a file be created in these directories with a name like:&lt;br/&gt;
TOUCHING_FILES_HERE_WILL_CORRUPT_DB_README.txt&lt;/p&gt;

&lt;p&gt;or some such to warn of the perils of doing this and the corrupting effects and how it can eliminate any possibility of salvage. It should also encourage users to make a zip backup of the database directory with no jvm currently accessing it before trying to do anything with the database if it appears to be already corrupt.  Also point to backup/restore documentation and encourage restore of a good backup into an empty directory if the database is corrupt.&lt;/p&gt;


&lt;p&gt;I&apos;m not sure if it would help but it couldn&apos;t hurt.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12507155">DERBY-5232</key>
            <summary>Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 May 2011 18:32:43 +0100</created>
                <updated>Wed, 3 Sep 2014 09:31:23 +0100</updated>
                            <resolved>Thu, 13 Dec 2012 16:26:04 +0000</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.10.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13476734" author="mamtas" created="Tue, 16 Oct 2012 05:43:39 +0100"  >&lt;p&gt;Here is a prototype patch for creating a readme file at database creation time. This file will be at the same level as db.lck/services.properties. For now, I have named it DoNotTouchAnyFile.txt and the current content of the file are hard coded in the file as &quot;Don&apos;t not touch any file in this directory&quot;. We probably want to name the file differently and rephrase the content as something different. Will appreciate feedback on that. Also, I haven&apos;t looked at possibly backing up and restoring this file during backup and restore. Not sure if we want this file to be included as part of backup/restore.&lt;/p&gt;</comment>
                            <comment id="13476972" author="chaase3" created="Tue, 16 Oct 2012 14:07:05 +0100"  >&lt;p&gt;Thanks, Mamta &amp;#8211; it&apos;s a very good idea to provide this.&lt;/p&gt;

&lt;p&gt;I&apos;d suggest a correction to the text of the file itself: please change&lt;/p&gt;

&lt;p&gt;fileSternReadMeDB.writeChars(&quot;Don&apos;t not touch any file in this directory&quot;);&lt;/p&gt;

&lt;p&gt;to &lt;/p&gt;

&lt;p&gt;fileSternReadMeDB.writeChars(&quot;Do not touch any file in this directory&quot;);&lt;/p&gt;</comment>
                            <comment id="13477002" author="knutanders" created="Tue, 16 Oct 2012 14:50:53 +0100"  >&lt;p&gt;As to the name of the file, README might stand out more in a directory listing, and that name might already be familiar as a warning sign to many users.&lt;/p&gt;

&lt;p&gt;The message text should probably go into messages.xml so that it can be translated.&lt;/p&gt;</comment>
                            <comment id="13477012" author="knutanders" created="Tue, 16 Oct 2012 14:59:13 +0100"  >&lt;p&gt;The run() method in the privileged block only closes the file if it is successful or it fails with an IOException. But it is declared as throws StandardException, and closing is not handled if it actually throws a SE, I think.&lt;/p&gt;</comment>
                            <comment id="13478388" author="mikem" created="Wed, 17 Oct 2012 22:10:14 +0100"  >&lt;p&gt;I second that the text located in the file should be generated from messages file so that it can be translated.&lt;/p&gt;

&lt;p&gt;I think it would be good if a file went into the log directory and into the seg0 directory.  Users can locate the log directory on a different device so depending on implementation no note would&lt;br/&gt;
be associated with the log files if the file is not in the actual directory.  So maybe 3 files, one in seg0, one in log, and one in the parent directory.&lt;/p&gt;

&lt;p&gt;It would be good if a backup/restore either copied the file or generated it to get the same message to users looking at the backup and possibly corrupting it.&lt;/p&gt;

&lt;p&gt;How about README_DONT_TOUCH_FILES.txt for file names?&lt;/p&gt;

&lt;p&gt;As to content, seems like we should take the chance to be a little more verbose.  Something like:&lt;/p&gt;

&lt;p&gt;For file in the log directory:&lt;br/&gt;
Do not touch files in this directory!&lt;/p&gt;

&lt;p&gt;Files in this directory are used by the Derby database recovery system. Ediiting, adding or deleting files in this directory will cause the Derby recovery system to fail leading to unrecoverable corrupt databases.&lt;/p&gt;

&lt;p&gt;For the file in the seg0 directory:&lt;br/&gt;
Do not touch files in this directory!&lt;/p&gt;

&lt;p&gt;Files in this directory are used by the Derby database to store user and system data. Ediiting, adding or deleting files in this directory will corrupt the associated Derby database, and will not&lt;br/&gt;
be recoverable.&lt;/p&gt;</comment>
                            <comment id="13478464" author="kmarsden" created="Wed, 17 Oct 2012 23:37:48 +0100"  >&lt;p&gt;I think Mike&apos;s recommendations sound perfect for file names, contents (except for typo:  Ediiting)  and locations.  I think three files would be good as I have seen in the past misguided instructions telling people to rm log/* or rm -rf log  without looking to see what&apos;s there. Mike, can you recommend wording for the top level file.  Perhaps in addition to mentioning the log and seg0 directory, it could also mention that service.properties  contains critical information about the format of the database and that the .lck  files prevent dual boot and corruption of the database.&lt;/p&gt;

&lt;p&gt;Often when users embark down  the  deletion path, especially when it starts with lock files, I find it is because of permission issues where multiple users have booted (and perhaps modified) the database with inconsistent permissions.  What should have been done in those instances was the update the file permissions to be consistent and what they want, but I don&apos;t know if it is good to explain that in the top level file or if that is too much information.&lt;/p&gt;


</comment>
                            <comment id="13479222" author="mamtas" created="Thu, 18 Oct 2012 19:35:05 +0100"  >&lt;p&gt;Is messages.xml where the content of the 3 readme files should go? I have added SQL messages in the past in messages.xml but not sure where the readme content should go so the contents will get translated. If they do go in messages.xml, then do we just use some dummy sql states for them so we can use the existing mechanics to reference them in the code? Thanks&lt;/p&gt;</comment>
                            <comment id="13479264" author="knutanders" created="Thu, 18 Oct 2012 20:15:06 +0100"  >&lt;p&gt;Yes, messages.xml is the right place. They shouldn&apos;t use SQL states, but instead four letter message ids. See the constants in org.apache.derby.shared.common.reference.MessageId interface for examples. The SERVICE_PROPERTIES_DONT_EDIT message with id M001 is similar to the messages we want to add in this issue.&lt;/p&gt;</comment>
                            <comment id="13482089" author="mamtas" created="Tue, 23 Oct 2012 04:44:07 +0100"  >&lt;p&gt;I have another patch which has following changes compared to the first patch&lt;br/&gt;
1)It does not hard code the readme contents inside the java file. Instead, it uses existing mechanics to store that text inside messages.xml so it will get translated.&lt;br/&gt;
2)The code now handles StandardException as pointed out by Knut.&lt;br/&gt;
3)I have named the readme file as README_DONT_TOUCH_FILES.txt&lt;br/&gt;
4)I have been able to create README_DONT_TOUCH_FILES.txt at the top level(db level) and at log level. But I have not been able to find yet the place in the code to create a README_DONT_TOUCH_FILES.txt at seg level and will greatly appreciate help here. I thought the correct location for creating this file in the code will be in store.access.RAMAccessManager:boot() method right&lt;br/&gt;
after &lt;br/&gt;
xactProperties = new PropertyConglomerate(tc, create, startParams, pf);&lt;br/&gt;
The above line creates seg0 directory and creates the first heap file in it. And it seems like, right after the seg0 directory is created, we should create the README_DONT_TOUCH_FILES.txt but to create a file, we need access to StorageFactory which has the new method newStorageFile() to create a new file and I do not know how to get hold of StorageFactory inside RAMAccessManager. It is possible that I am looking at wrong place for adding the code. Would appreciate help from someone more familiar with this part of the code.&lt;br/&gt;
5)Even though I have added the text is messages.xml with new lines, when it gets written into README_DONT_TOUCH_FILES.txt, I find that the newlines are lost and everything is added as one long line. I am not sure yet what I could be doing wrong.&lt;br/&gt;
             &amp;lt;msg&amp;gt;&lt;br/&gt;
                &amp;lt;name&amp;gt;M005&amp;lt;/name&amp;gt;&lt;br/&gt;
                &amp;lt;text&amp;gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;*************************************************************************&lt;/li&gt;
	&lt;li&gt;***              Do not touch files in this directory!                ***&lt;/li&gt;
	&lt;li&gt;*** CHANGING THE CONTENT OF THIS DIRECTORY MAY CAUSE DATA CORRUPTION. ***&lt;/li&gt;
	&lt;li&gt;*************************************************************************&amp;lt;/text&amp;gt;&lt;br/&gt;
                &amp;lt;comment&amp;gt;Translators: Please translate the ALL CAPS words.&amp;lt;/comment&amp;gt;&lt;br/&gt;
            &amp;lt;/msg&amp;gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I still need to add more comments but wanted to put the patch out for review and for help with couple items I haven&apos;t figured out yet. Thanks.&lt;/p&gt;</comment>
                            <comment id="13482417" author="knutanders" created="Tue, 23 Oct 2012 16:34:54 +0100"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;I don&apos;t know why the newlines disappear. They seemed to be there when I tested the patch. Maybe it&apos;s a Windows vs Unix line ending issue? I had another problem, though. The files were stored in UTF-16, so less complained they were binary files and wouldn&apos;t open them. They&apos;d probably be easier to access if they were stored in UTF-8.&lt;/p&gt;

&lt;p&gt;Some stylistic comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The indentation used in the new code varies between pure spaces, pure tabs and mixed tabs/spaces. It would be easier to see the structure of the code in the patch with a consistent indentation style.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The code that produces the readme files is repeated three times. It would be good if it could be refactored so that there&apos;s a single implementation.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When writing the readme file, the file handle is closed inside the try block, in the catch block and in the finally clause. In the common case, it will be closed twice. It&apos;s probably sufficient to close it in the finally clause.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13483054" author="knutanders" created="Wed, 24 Oct 2012 08:39:45 +0100"  >&lt;p&gt;The double closing of the readme file causes a NullPointerException when creating an in-memory database. I think that&apos;s a problem in VirtualRandomAccessFile.close(), as close() should not fail just because it&apos;s called more than once, so I&apos;ve filed a separate bug for it, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5960&quot; title=&quot;VirtualRandomAccessFile.close() is not idempotent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5960&quot;&gt;&lt;del&gt;DERBY-5960&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13483336" author="mamtas" created="Wed, 24 Oct 2012 16:55:57 +0100"  >&lt;p&gt;Another updated patch. It is NOT ready for commit and has indentation issues and can use more comments but I wanted to share couple changes made in this patch compared to the last one.&lt;/p&gt;

&lt;p&gt;1)I talked to Mike offline about getting hold of storagefactory in the &quot;access&quot; code in order to create readme file in the seg0 directory. Mike suggested that we create a new method(say createDataWarningFile) in RawStoreFactory.java interface to create a readme file. RawStore implements this interface and it will create the readme file using storagefactory. RAMAccessManager can then call rawstore.createDataWarningFile to create the readme file in seg0 directory&lt;/p&gt;

&lt;p&gt;2)To address the code duplication brought up by Knut, &lt;br/&gt;
I agree with that and was planning on doing something about it. Currently, we create 3 readme files and the code to do is pretty much the same other than the directory path and message id used to load the content into the newly created file. I thought of adding a new method to StorageFactory.java interface, where a new file will be created in the passed directory and the new file will get data written into it passed as a parameter to the new method. The new method would look as follows&lt;br/&gt;
    public StorageFile newStorageFile( String directoryName,&lt;br/&gt;
               String fileName,&lt;br/&gt;
               String fileContent);&lt;br/&gt;
But the problem with this approach is that StorageFactory interface gets implemented by 5 classes and hence I am having to put the method implementation in all those 5 classes. I think rather than putting the burden on StorageFactory implementor to implement this new method, we should continue to have the code duplication, since that code is not too big. I am open to suggestions on this one, though. The new patch attached shows the new method in StorageFactory and it&apos;s implementation by 5 different classes.&lt;/p&gt;

&lt;p&gt;3)Also, I think the try catch finally code for creating the new file and loading data into it can be simplified to following. Let me know if I am missing something in this code optimization&lt;br/&gt;
Code in the newly attached patch is as follows&lt;br/&gt;
+               StorageRandomAccessFile randomAccessFile=null;&lt;br/&gt;
+               try &lt;/p&gt;
{
+                       randomAccessFile = sf.getRandomAccessFile(&quot;rw&quot;);
+                       randomAccessFile.writeChars(fileContent);
+               }&lt;br/&gt;
+        catch (IOException ioe)&lt;br/&gt;
+        {&lt;br/&gt;
+            try&lt;br/&gt;
+            {
+                if (randomAccessFile != null)
+                       randomAccessFile.close();
+            }&lt;br/&gt;
+            catch (IOException ioe2)&lt;br/&gt;
+            {
+               randomAccessFile = null;
+            }&lt;br/&gt;
+        }&lt;br/&gt;
+        finally&lt;br/&gt;
+        {&lt;br/&gt;
+            try&lt;br/&gt;
+            {
+                if (randomAccessFile != null)
+                       randomAccessFile.close();
+            }&lt;br/&gt;
+            catch (IOException ioe)&lt;br/&gt;
+            {
+                // Ignore exception on close
+               randomAccessFile = null;
+            }&lt;br/&gt;
+        }&lt;br/&gt;
+               return sf;&lt;br/&gt;
&lt;br/&gt;
Instead, we can write it as follows&lt;br/&gt;
Another updated patch. It is NOT ready for commit and has indentation issues and can use more comments but I wanted to share couple changes made in this patch compared to the last one.&lt;br/&gt;
&lt;br/&gt;
1)I talked to Mike offline about getting hold of storagefactory in the &quot;access&quot; code in order to create readme file in the seg0 directory. Mike suggested that we create a new method(say createDataWarningFile) in RawStoreFactory.java interface to create a readme file. RawStore implements this interface and it will create the readme file using storagefactory. RAMAccessManager can then call rawstore.createDataWarningFile to create the readme file in seg0 directory&lt;br/&gt;
&lt;br/&gt;
2)To address the code duplication brought up by Knut, &lt;br/&gt;
I agree with that and was planning on doing something about it. Currently, we create 3 readme files and the code to do is pretty much the same other than the directory path and message id used to load the content into the newly created file. I thought of adding a new method to StorageFactory.java interface, where a new file will be created in the passed directory and the new file will get data written into it passed as a parameter to the new method. The new method would look as follows&lt;br/&gt;
    public StorageFile newStorageFile( String directoryName,&lt;br/&gt;
               String fileName,&lt;br/&gt;
               String fileContent);&lt;br/&gt;
But the problem with this approach is that StorageFactory interface gets implemented by 5 classes and hence I am having to put the method implementation in all those 5 classes. I think rather than putting the burden on StorageFactory implementor to implement this new method, we should continue to have the code duplication, since that code is not too big. I am open to suggestions on this one, though. The new patch attached shows the new method in StorageFactory and it&apos;s implementation by 5 different classes.&lt;br/&gt;
&lt;br/&gt;
3)Also, I think the try catch finally code for creating the new file and loading data into it can be simplified to following. Let me know if I am missing something in this code optimization&lt;br/&gt;
Code in the newly attached patch is as follows&lt;br/&gt;
+               StorageRandomAccessFile randomAccessFile=null;&lt;br/&gt;
+               try {
+                       randomAccessFile = sf.getRandomAccessFile(&quot;rw&quot;);
+                       randomAccessFile.writeChars(fileContent);
+               }
&lt;p&gt;+        catch (IOException ioe)&lt;br/&gt;
+        &lt;/p&gt;
{
+        }
&lt;p&gt;+        finally&lt;br/&gt;
+        {&lt;br/&gt;
+            try&lt;br/&gt;
+            &lt;/p&gt;
{
+                if (randomAccessFile != null)
+                       randomAccessFile.close();
+            }
&lt;p&gt;+            catch (IOException ioe)&lt;br/&gt;
+            &lt;/p&gt;
{
+                // Ignore exception on close
+               randomAccessFile = null;
+            }
&lt;p&gt;+        }&lt;br/&gt;
+               return sf;&lt;/p&gt;

&lt;p&gt;Basically, I have removed the code from inside the catch block since finally does the exact same thing.&lt;/p&gt;

&lt;p&gt;As always, appreciate any feedback on the patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="13483517" author="mamtas" created="Wed, 24 Oct 2012 20:53:53 +0100"  >&lt;p&gt;To solve the UTF-8 vs UTF-16 problem mentioned by Knut(1), am I right that I should use &lt;br/&gt;
			randomAccessFile.writeUTF(fileContent);&lt;br/&gt;
rather than&lt;br/&gt;
			randomAccessFile.writeChars(fileContent);&lt;br/&gt;
How would I verify that we the writeUTF call, the file has indeed been saved in UTF-8 format. I thought if I opened the file in notepad and used &quot;save as&quot;, in the encoding dropdown, I will see UTF-8 rather than ASCII, but I still see ASCII even when the file gets it contents with writeUTF call rather than writeChars call. Thanks&lt;/p&gt;

&lt;p&gt;(1)The files were stored in UTF-16, so less complained they were binary files and wouldn&apos;t open them. They&apos;d probably be easier to access if they were stored in UTF-8.&lt;/p&gt;
</comment>
                            <comment id="13484154" author="knutanders" created="Thu, 25 Oct 2012 15:18:34 +0100"  >&lt;p&gt;Since the files only contain characters in the 7-bit ASCII range, UTF-8 and ASCII are indistinguishable. To see if it&apos;s actually UTF-8 and not ASCII that is being used, you could add a non-ASCII character to the message temporarily and see if it is detected as UTF-8 then.&lt;/p&gt;</comment>
                            <comment id="13484452" author="mamtas" created="Thu, 25 Oct 2012 21:15:48 +0100"  >&lt;p&gt;Thanks for the tip, Knut. I added UTF-8 character &#9801; to messages.xml temporarily but it got printed as ? in the readme file. This is probably happening because of the call use to get the message from messages.xml. The call is MessageService.getTextMessage(MessageId.README_AT_DB_LEVEL). This method probably converts the non-ascii characters into ?. I am looking to see if there is another api I can use to get the UTF-8 characters as they are using the MessageId.README_AT_DB_LEVEL.&lt;/p&gt;</comment>
                            <comment id="13484494" author="knutanders" created="Thu, 25 Oct 2012 22:24:54 +0100"  >&lt;p&gt;The non-ASCII character may also have been garbled by MessageBuilder when it converts messages.xml (which is encoded in UTF-8) to messages_en.properties (which is supposed to be encoded in ISO-8859-1, with multi-byte UTF-8 characters encoded as a Unicode escape sequence). I don&apos;t think MessageBuilder currently does that re-encoding.&lt;/p&gt;</comment>
                            <comment id="13485222" author="mamtas" created="Fri, 26 Oct 2012 22:43:17 +0100"  >&lt;p&gt;Here is another patch(DERBY5232_patch4_diff.txt) which is ready for commit. Some of the changes going in this patch are as follows. If there are no further comments, I will go ahead and commit it next week. As the next step, I will look at creating these readme files at the time of upgrade. Next step can be having these readme files either backed up at backup time and then restore them, or (re)create them at the restore time whether on not they were part of the backup process.&lt;/p&gt;

&lt;p&gt;1)Three readme files(README_DONT_TOUCH_FILES.txt) will be created. One at the database level, one in the &quot;log&quot; directory and another in the &quot;seg0&quot; directory.&lt;br/&gt;
a)Content of the readme file at the database level are as follows&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;*************************************************************************&lt;/li&gt;
	&lt;li&gt;***              Do not touch files in this directory!                ***&lt;/li&gt;
	&lt;li&gt;*** FILES IN THIS DIRECTORY AND SUB-DIRECTORIES CONSTITUES DERBY      ***&lt;/li&gt;
	&lt;li&gt;*** DATABASE WHICH INCLUDES THE DATA(USER AND SYSTEM) AND THE         ***&lt;/li&gt;
	&lt;li&gt;*** NECESSARY FILES FOR DATABASE RECOVERY.                            ***&lt;/li&gt;
	&lt;li&gt;*** EDITING, ADDITING OR DELETING ANY OF THESE FILES MAY CAUSE DATA   ***&lt;/li&gt;
	&lt;li&gt;*** CORRUPTION AND LEAVE THE DATABASE IN NON-RECOVERABLE STATE.       ***&lt;/li&gt;
	&lt;li&gt;*************************************************************************&lt;br/&gt;
b)Content of the readme file at &quot;seg0&quot; directory are as follows&lt;/li&gt;
	&lt;li&gt;*************************************************************************&lt;/li&gt;
	&lt;li&gt;***              Do not touch files in this directory!                ***&lt;/li&gt;
	&lt;li&gt;*** FILES IN THIS DIRECTORY ARE USED BY THE DERBY DATABASE TO STORE   ***&lt;/li&gt;
	&lt;li&gt;*** USER AND SYSTEM DATA. EDITING, ADDING, OR DELETING FILES IN THIS  ***&lt;/li&gt;
	&lt;li&gt;*** DIRECTORY WILL CORRUPT THE ASSOCIATED DERBY DATABASE, AND WILL    ***&lt;/li&gt;
	&lt;li&gt;*** NOT BE RECOVERABLE.                                               ***&lt;/li&gt;
	&lt;li&gt;*************************************************************************&lt;br/&gt;
c)Content of the readme file at &quot;log&quot; directory are as follows&lt;/li&gt;
	&lt;li&gt;*************************************************************************&lt;/li&gt;
	&lt;li&gt;***              Do not touch files in this directory!                ***&lt;/li&gt;
	&lt;li&gt;*** FILES IN THIS DIRECTORY ARE USED BY THE DERBY DATABASE RECOVERY   ***&lt;/li&gt;
	&lt;li&gt;*** SYSTEM. EDITING, ADDING OR DELETING FILES IN THIS DIRECTORY WILL  ***&lt;/li&gt;
	&lt;li&gt;*** CAUSE THE DERBY RECOVERY SYSTEM TO FAIL LEADING TO UNRECOVERABLE  ***&lt;/li&gt;
	&lt;li&gt;*** CORRUPT DATABASES.                                                ***&lt;/li&gt;
	&lt;li&gt;*************************************************************************&lt;br/&gt;
2)I have replaced all the tabs with spaces and looked at the diff and it seems consistent with indentation. Please let me know if I have missed anything.&lt;br/&gt;
3)I went ahead with duplicating the readme writing code in 3 places rather than adding a new method to StorageFactory.java interface because that puts the burden of implementing that method on atleast 5 classes right now which implement StorageFactory interface. Please let me know if the code duplication should be handled differntly.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;Kathey, you had good suggestion about pointing out attention to ,lck and service.properties and permission issues with multiple users in the log file. I can&apos;t recall offhand but if this is mentioned in some central place in our doc, but if it is, then maybe we can have a blurb in the 3 readme files to go that section of the doc to get more information about the files in the database directories.&lt;/p&gt;

&lt;p&gt;Knut, I have used writeUTF api to write into the 3 readme files. Can you please try this patch on your machine and see if you are able to view them with less now that they are in UTF-8 format?&lt;/p&gt;
</comment>
                            <comment id="13486806" author="knutanders" created="Tue, 30 Oct 2012 11:02:32 +0000"  >&lt;p&gt;It looks like most of the tests fail with permission errors after the patch was committed.&lt;/p&gt;

&lt;p&gt;For example, here&apos;s a failure in the demo suite:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1403611-org.apache.derbyTesting.functionTests.tests.demo._Suite_diff.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/tinderbox_trunk16/jvm1.6/testing/testlog/SunOS-5.10_i86pc-i386/1403611-org.apache.derbyTesting.functionTests.tests.demo._Suite_diff.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caused by: java.security.AccessControlException: access denied (java.io.FilePermission /export/home/tmp/os136789/testingDerbyTinderBox/SunOS-5.10_i86pc-i386/org.apache.derbyTesting.functionTests.tests.demo._Suite/system/wombat/log/README_DONT_TOUCH_FILES.txt read)&lt;br/&gt;
	at java.security.AccessControlContext.checkPermission(AccessControlContext.java:374)&lt;br/&gt;
	at java.security.AccessController.checkPermission(AccessController.java:546)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(SecurityManager.java:532)&lt;br/&gt;
	at java.lang.SecurityManager.checkRead(SecurityManager.java:871)&lt;br/&gt;
	at java.io.RandomAccessFile.&amp;lt;init&amp;gt;(RandomAccessFile.java:203)&lt;br/&gt;
	at org.apache.derby.impl.io.DirRandomAccessFile.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.io.DirFile4.getRandomAccessFile(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.createLogDirectory(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.boot(Unknown Source)&lt;/p&gt;</comment>
                            <comment id="13486816" author="knutanders" created="Tue, 30 Oct 2012 11:29:11 +0000"  >&lt;p&gt;Some post-commit review comments:&lt;/p&gt;

&lt;p&gt;Typos in the messages:&lt;/p&gt;

&lt;p&gt;  CONSTITUES -&amp;gt; CONSTITUTE&lt;/p&gt;

&lt;p&gt;  DATA(USER AND SYSTEM) -&amp;gt; add space before opening parenthesis&lt;/p&gt;

&lt;p&gt;  ADDITING -&amp;gt; ADDING&lt;/p&gt;

&lt;p&gt;The fileReadMeDB file handles are closed twice in the normal (non-error) case. Although that&apos;s harmless (at least it should be after &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5960&quot; title=&quot;VirtualRandomAccessFile.close() is not idempotent&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5960&quot;&gt;&lt;del&gt;DERBY-5960&lt;/del&gt;&lt;/a&gt;), it&apos;s unnecessary code.&lt;/p&gt;</comment>
                            <comment id="13486969" author="mamtas" created="Tue, 30 Oct 2012 16:05:41 +0000"  >&lt;p&gt;I will work on putting privileged blocks around file creation. I believe that is the cause behind the failures. Knut, I will also work on your comments. thanks&lt;/p&gt;</comment>
                            <comment id="13487079" author="mamtas" created="Tue, 30 Oct 2012 18:08:27 +0000"  >&lt;p&gt;Made 2 commits into trunk which will create 3 readme files, one at db directory level, one in &quot;seg0&quot; directory and one in &quot;log&quot; directory. The revision numbers are 1403611 and 1403807.&lt;/p&gt;</comment>
                            <comment id="13487191" author="knutanders" created="Tue, 30 Oct 2012 20:30:38 +0000"  >&lt;p&gt;Thanks, Mamta. The spelling of &quot;constitute&quot; still isn&apos;t quite right. There&apos;s a &quot;t&quot; missing between the &quot;u&quot; and the &quot;e&quot;.&lt;/p&gt;

&lt;p&gt;There still seems to be a problem with the generation of the files. I built jars from head of trunk and ran this in ij:&lt;/p&gt;

&lt;p&gt;ij version 10.10&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:db;create=true&apos;;&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:;shutdown=true&apos;;&lt;br/&gt;
ERROR XJ015: Derby system shutdown.&lt;/p&gt;

&lt;p&gt;After this, there was a README in the top-level db directory, but none in db/seg0 or in db/log.&lt;/p&gt;</comment>
                            <comment id="13487518" author="mamtas" created="Wed, 31 Oct 2012 04:45:34 +0000"  >&lt;p&gt;Knut, I fixed the typo with revision 1403973. As for the behavior with the jars, I am debugging to see why the code path might be different when going through the jars rather than classes directly. Or it might be that there is an exception being thrown which we ignore in the catch block.&lt;/p&gt;</comment>
                            <comment id="13487622" author="knutanders" created="Wed, 31 Oct 2012 08:56:23 +0000"  >&lt;p&gt;For the record, I also see the problem with missing files when running from classes, not just with the jars.&lt;/p&gt;

&lt;p&gt;The logic in RawStore.createDataWarningFile() seems to be backward. That is, it only attempts to create the file if it already exists.&lt;/p&gt;

&lt;p&gt;Also, I don&apos;t think it&apos;s correct to use actionCode = REGULAR_FILE_EXISTS_ACTION in privRandomAccessFile(), as that action will return a Boolean rather than a StorageRandomAccessFile and probably result in a ClassCastException.&lt;/p&gt;

&lt;p&gt;Some other nits:&lt;/p&gt;

&lt;p&gt;After fixing the typos, the asterisks around the text don&apos;t line up nicely anymore.&lt;/p&gt;

&lt;p&gt;There are some garbage bytes at the beginning of the readme files. I think this is because the writeUTF() method writes length information before the actual text. See javadoc for java.io.DataOutput#writeUTF(). It would be good if the readme files were pure text files.&lt;/p&gt;</comment>
                            <comment id="13489512" author="mamtas" created="Fri, 2 Nov 2012 16:08:14 +0000"  >&lt;p&gt;Hi Knut, hopefully this patch ddresses items from your previous comments except the one about &quot;&lt;br/&gt;
There are some garbage bytes at the beginning of the readme files. I think this is because the writeUTF() method writes length information before the actual text. See javadoc for java.io.DataOutput#writeUTF(). It would be good if the readme files were pure text files. &quot; I am working on this. Thanks&lt;/p&gt;</comment>
                            <comment id="13490624" author="knutanders" created="Mon, 5 Nov 2012 13:35:02 +0000"  >&lt;p&gt;Thanks. The latest patch addresses all my previous comments, except the one about the extra bytes at the beginning of the files.&lt;/p&gt;</comment>
                            <comment id="13491186" author="mamtas" created="Tue, 6 Nov 2012 03:42:58 +0000"  >&lt;p&gt;Knut, thanks for reviewing the last patch. I am submitting patch #6. This patch is same as the previous one except a prototype change in RawStore where we create the readme file for seg0 directory. &lt;/p&gt;

&lt;p&gt;In this patch, in RawStore, now I am mimicking what we do for storing services.properties ie write the warning text in the readme file using a Properties object. This gets rid of extra bytes at the beginning of the readme file with the earlier patch. One thing to note though is that with using the Properties object to write the text, the current date time stamp gets appended at the end of the warning text. I think having date time stamp should not be an issue. &lt;/p&gt;

&lt;p&gt;With this patch, I do not see any formatting errors with newline on my windows machine. &lt;/p&gt;

&lt;p&gt;If we are ok with using Properties object, then I will go ahead and make similar change to the code for readme files at the database level and at log directory. &lt;/p&gt;

&lt;p&gt;I am also working on writing a junit test which will check if the 3 readme files get created at the end of database creation. Please let me know if there is any feedback on using Properties object to write the text into readme files. Thanks&lt;/p&gt;</comment>
                            <comment id="13491343" author="knutanders" created="Tue, 6 Nov 2012 09:37:46 +0000"  >&lt;p&gt;I don&apos;t think using Properties.store(OutputStream,String) for this is the right way if the intention is that the files should be translatable. The javadoc for that method says it will use ISO 8859-1 encoding, so it won&apos;t produce readable output in, say, Japanese or Chinese.&lt;/p&gt;

&lt;p&gt;A more straightforward way might be to wrap the OutputStream in an OutputStreamWriter, using the constructor that takes the name of the encoding, and call the write(String) method on the Writer.&lt;/p&gt;</comment>
                            <comment id="13492503" author="mamtas" created="Wed, 7 Nov 2012 17:03:22 +0000"  >&lt;p&gt;This patch uses OutputStreamWriter to write the readme files. If there are no further comments, I will go ahead and commit this.&lt;/p&gt;

&lt;p&gt;I am also working on writing junit test which will look for the 3 readme files after the database is created.&lt;/p&gt;</comment>
                            <comment id="13493320" author="mamtas" created="Thu, 8 Nov 2012 17:29:20 +0000"  >&lt;p&gt;Committed patch  DERBY5232_patch7_diff.txt with revision 1407170 into the trunk. Now working on writing junit test&lt;/p&gt;</comment>
                            <comment id="13493652" author="mamtas" created="Fri, 9 Nov 2012 01:11:26 +0000"  >&lt;p&gt;I am attaching a patch for adding a junit test to check if the readme file gets created in the log directory when the log is directed to point to a different location than the default database directory. This change of log directory is done using the logDevice jdbc url attribute. eg&lt;br/&gt;
java -Dij.exceptionTrace=true org.apache.derby.tools.ij&lt;br/&gt;
connect &apos;jdbc:derby:db1;create=true;logDevice=../dellater&apos;;&lt;br/&gt;
exit;&lt;br/&gt;
The manual testing of the logDevice shows that readme file has been created inside the non-default log directory. &lt;/p&gt;

&lt;p&gt;The support for logDevice doesn&apos;t yet exist in our junit test framework. I have added changes in this patch to provide logDevice support inside junit.&lt;/p&gt;

&lt;p&gt;But with my test, what I am finding is that even though the log got moved to the new location, the actual database files are not under the singleUse database directory. Not sure if my changes for logDevice support is causing this problem. Would appreciate any feedback from someone familiar with the junit framework in this area to see what might be wrong. In order to run the new added junit test, one can use following command&lt;br/&gt;
time java  -Dderby.tests.trace=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest &amp;gt; runallOneTest.out 2&amp;gt;&amp;amp;1&lt;br/&gt;
The test above gives following results&lt;/p&gt;

&lt;p&gt;$ time java  -Dderby.tests.trace=true junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest&lt;br/&gt;
.&lt;br/&gt;
(emb)engine.ReadMeFilesTest.testReadMeFilesExist C:\p4clients\svnmain\client3\trunk\systest\out142\system\singleUse&lt;br/&gt;
used 820 ms F.&lt;br/&gt;
(net)engine.ReadMeFilesTest.testReadMeFilesExist C:\p4clients\svnmain\client3\trunk\systest\out142\system\singleUse&lt;br/&gt;
used 230 ms F&lt;br/&gt;
Time: 5.096&lt;br/&gt;
There were 2 failures:&lt;br/&gt;
1) testReadMeFilesExist(org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest)junit.framework.AssertionFailedError: assertIsExisting failed: C:\p4clients\svnmain\client3\trunk\systest\out142\system\singleUse\README_DONT_TOUCH_FILES.txt&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest$1.run(ReadMeFilesTest.java:121)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:251)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.assertIsExisting(ReadMeFilesTest.java:119)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.testReadMeFilesExist(ReadMeFilesTest.java:101)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
2) testReadMeFilesExist(org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest)junit.framework.AssertionFailedError: assertIsExisting failed: C:\p4clients\svnmain\client3\trunk\systest\out142\system\singleUse\README_DONT_TOUCH_FILES.txt&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest$1.run(ReadMeFilesTest.java:121)&lt;br/&gt;
        at java.security.AccessController.doPrivileged(AccessController.java:251)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.assertIsExisting(ReadMeFilesTest.java:119)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.engine.ReadMeFilesTest.testReadMeFilesExist(ReadMeFilesTest.java:101)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:117)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:424)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:441)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 2,  Failures: 2,  Errors: 0&lt;/p&gt;


&lt;p&gt;real    0m6.508s&lt;br/&gt;
user    0m0.000s&lt;br/&gt;
sys     0m0.015s&lt;/p&gt;


&lt;p&gt;The existing test for logDevice jdbc url attribute are still in the old test harness&lt;br/&gt;
java\testing\org\apache\derbyTesting\functionTests\tests\store\LogDeviceTest.java&lt;br/&gt;
I can always go and do my testing for existence of readme files in that old harness test but it will be good to add the support for this attribute in junit framework.&lt;/p&gt;</comment>
                            <comment id="13493880" author="knutanders" created="Fri, 9 Nov 2012 10:25:11 +0000"  >&lt;p&gt;I think the database will be created in a subdirectory under system/singleUse, and the name will vary depending on the number of single-use databases created earlier in the test run. So to find the database directory, you&apos;d need something like this:&lt;/p&gt;

&lt;p&gt;        TestConfiguration config = TestConfiguration.getCurrent();&lt;br/&gt;
        File readMeFile = new File(&lt;br/&gt;
                config.getDatabasePath(config.getDefaultDatabaseName()),&lt;br/&gt;
                DB_README_FILE_NAME);&lt;/p&gt;

&lt;p&gt;The new assert methods could be simplified by using helper methods from the PrivilegedFileOpsForTests class (would avoid the need for doPrivileged() blocks).&lt;/p&gt;

&lt;p&gt;The test runs in both embedded and client/server mode. However, it only creates the database once, so starting the server and re-checking that the files still exist doesn&apos;t add much value. I&apos;d suggest that you replace the defaultSuite() decorator with embeddedSuite() in the suite() method so that it only runs once. (If you make this change, you may also have to add a getConnection() call to the test case to get the database created. defaultSuite() adds some decorators that will call getConnection() before running the test, but I don&apos;t think embeddedSuite() does that.)&lt;/p&gt;

&lt;p&gt;The test should also delete the logDevice directory when it&apos;s done, as that won&apos;t be done automatically by DropDatabaseSetup. It should probably be done by the decorator returned by Decorator.logDeviceAttributeDatabase() and not by the test itself.&lt;/p&gt;

&lt;p&gt;Some nits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The new file uses a mix of tabs and spaces for indentation&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;d prefer braces in the if statement in Decorator.logDeviceAttributeDatabase() (my IDE shows a warning because of the missing braces). Or perhaps just remove the null check, as those tests that want to use the default logDevice, should not use this decorator.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13495883" author="mamtas" created="Tue, 13 Nov 2012 02:46:55 +0000"  >&lt;p&gt;I have changed the earlier test patch to use getDefaultDatabaseName() to find the database path to look for the readme files inside the database directory and inside the seg0 directory. Also, I have added one helper method in PrivilegedFileOpsForTests class and used one of the existing  methods in that class to find the readme files. Since a run of network server after embedded does not really recreate the database, the test now only runs in embedded mode and ensures that 3 readme files get created correctly.&lt;/p&gt;

&lt;p&gt;The issue that&apos;s left now is deleting the log files from the new log location set by the logDevice attribute. I thought I would be able to do that in the DropDatabaseSetup.removeDatabase() method with the following code&lt;br/&gt;
        String logDevice = config.getConnectionAttributes().getProperty(&quot;logDevice&quot;);&lt;br/&gt;
        if (logDevice != null) &lt;/p&gt;
{
            removeDirectory(logDevice);
        }
&lt;p&gt;But &quot;logDevice&quot; property comes back as null as if that property was never set. Through debugging, I am finding that the reason behind this is TestConfiguration.getCurrent() by this point has lost the TestConfiguration used to do the testing and hence we have lost the logDevice property from the available properties. Maybe that is the right thing to happen but I thought the tearDown of DropDatabase.tearDown() should get called before ChangeConfigurationSetup.tearDown() which is where the TestConfiguration used by the test gets overwritten. The code for ChangeConfigurationSetup.tearDown() is as follows for reference.&lt;br/&gt;
    protected final void tearDown()&lt;/p&gt;
    {
        TestConfiguration.setCurrent(old);
    }
&lt;p&gt;Maybe I am trying to solve it in the wrong place but I don&apos;t understand why the current configuration gets overwritten before all the decorator have a chance to do their on tear down. Would appreciate someone explaining the current behavior.&lt;/p&gt;

&lt;p&gt;In the mean time, I will investigate Knut&apos;s suggestion that may be the log directory deletion should happen in the Decorator returned by Decorator.logDeviceAttributeDatabase(). I will try to investigate that.&lt;/p&gt;</comment>
                            <comment id="13496474" author="mamtas" created="Tue, 13 Nov 2012 19:38:51 +0000"  >&lt;p&gt;I think the issue with my earlier patch might be the order in which TestConfigruations are getting created and fixing that probably will make the patch do the right thing. I am looking into it.&lt;/p&gt;</comment>
                            <comment id="13496908" author="mamtas" created="Wed, 14 Nov 2012 06:57:51 +0000"  >&lt;p&gt;I wanted to go ahead and add the test case fo the existence of the 3 readme files for a simple default database creation. That commit went as revision 1409100 with commit comments&lt;br/&gt;
************************&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5232&quot; title=&quot;Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5232&quot;&gt;&lt;del&gt;DERBY-5232&lt;/del&gt;&lt;/a&gt; (Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there)&lt;/p&gt;

&lt;p&gt;Adding a test case for default database creation with the checks for the existence of the 3 readme files. These readmes warn users against editing/deleting any of the files in the database directories. The location of the readme files are&lt;br/&gt;
 1)at the db level directory,&lt;br/&gt;
 2)in seg0 directory and&lt;br/&gt;
 3)in the log directocy.&lt;br/&gt;
All the three readme files are named README_DONT_TOUCH_FILES.txt&lt;br/&gt;
************************&lt;/p&gt;</comment>
                            <comment id="13496998" author="knutanders" created="Wed, 14 Nov 2012 10:15:00 +0000"  >&lt;p&gt;Some comments to the 1409100 commit:&lt;/p&gt;

&lt;p&gt;The new run() method is declared as throws IOException, but the catch block unconditionally casts the exception to FileNotFoundException. I&apos;m worried that this might lead to a ClassNotFoundException that hides the original IOException.&lt;/p&gt;

&lt;p&gt;The lookForReadmeFile() method doesn&apos;t check the return value of the calls. It should assert return value true from the exists() call and false from isFileEmpty(). What about just relying on the existing methods in PrivilegedFileOpsForTests and skip the new isFileEmpty() method? lookForReadmeFile() could simply do&lt;/p&gt;

&lt;p&gt;  assertTrue(readmeFile + &quot; doesn&apos;t exist&quot;, PrivilegedFileOpsForTests.exists(readmeFile));&lt;br/&gt;
  assertNotSame(readmeFile + &quot; is empty&quot;, 0, PrivilegedFileOpsForTests.length(readmeFile));&lt;/p&gt;</comment>
                            <comment id="13497228" author="mamtas" created="Wed, 14 Nov 2012 17:04:31 +0000"  >&lt;p&gt;Hi Knut, decided to get rid of the length check on the file, it is probably plenty to check that the file exists. Added the assert on File exists check though.  Made these changes with revision 1409254.&lt;/p&gt;</comment>
                            <comment id="13497675" author="mamtas" created="Thu, 15 Nov 2012 01:13:50 +0000"  >&lt;p&gt;I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5995&quot; title=&quot;Add a test case to check the 3 readme files get created even when log directory has been changed with jdbc url attribute logDevice&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5995&quot;&gt;&lt;del&gt;DERBY-5995&lt;/del&gt;&lt;/a&gt; for adding a test case when log directory has been changed with the jbdc url attribute logDevice. I should have a patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5995&quot; title=&quot;Add a test case to check the 3 readme files get created even when log directory has been changed with jdbc url attribute logDevice&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5995&quot;&gt;&lt;del&gt;DERBY-5995&lt;/del&gt;&lt;/a&gt; by tomorrow. I will go ahead and close &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5232&quot; title=&quot;Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5232&quot;&gt;&lt;del&gt;DERBY-5232&lt;/del&gt;&lt;/a&gt; if they are no further comments on the work that has gone in so far.&lt;/p&gt;</comment>
                            <comment id="13497747" author="kmarsden" created="Thu, 15 Nov 2012 04:08:38 +0000"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;I have not had a chance to look closely and won&apos;t until I get 10.8.3 out. I have some cosmetic comments but can file a new issue once I get them together. I can just file a new issue if preferrable.    The most significant is:&lt;br/&gt;
I would like to change&lt;br/&gt;
README_DONT_TOUCH_FILES.txt to&lt;br/&gt;
README_DO_NOT_TOUCH_FILES.txt&lt;/p&gt;

&lt;p&gt;The contraction without an appostrophy is bothersome and since I am guessing the file name is not localized, having separate words will be more clear to non-English readers.&lt;/p&gt;

&lt;p&gt;I think it would be good for Kim to review the text.  I will sign up to buddy test this feature for 10.10. Thank you so much for putting this warning to users in Derby!&lt;/p&gt;


</comment>
                            <comment id="13497785" author="mamtas" created="Thu, 15 Nov 2012 05:54:52 +0000"  >&lt;p&gt;Hi Kathey, thanks for your suggestion. I have renamed the file to be more user friendly especially to non-English readers. The change went in as revision 1409654&lt;/p&gt;

&lt;p&gt;Yes, it will be great if Kim had any comments on the text or the name of of the readme files.&lt;/p&gt;</comment>
                            <comment id="13498114" author="chaase3" created="Thu, 15 Nov 2012 16:30:48 +0000"  >&lt;p&gt;Happy to help with this. I agree completely with Kathey&apos;s suggestion about the file names &amp;#8211; the separate words are indeed preferable to the contraction.&lt;/p&gt;

&lt;p&gt;I am attaching a suggested patch for messages.xml, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5232&quot; title=&quot;Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5232&quot;&gt;&lt;del&gt;DERBY-5232&lt;/del&gt;&lt;/a&gt;-kim.diff, with some wording fixes. (I hope it merges all right with Mamta&apos;s latest.) I do have a couple of questions &amp;#8211;&lt;/p&gt;

&lt;p&gt;For consistency, I used the term NON-RECOVERABLE, since that&apos;s what we use in our SQLSTate error messages. However, the Oracle terminology guide for my organization says to use NONRECOVERABLE (no hyphen), while the official Oracle style guide says to use IRRECOVERABLE or NOT RECOVERABLE. What does the IBM style guide say? Or should we just worry about consistency with the error messages?&lt;/p&gt;

&lt;p&gt;I notice a comment saying, &quot;Translators: Please translate the ALL CAPS words.&quot; However, there&apos;s a mixed case sentence at the top of each saying, &quot;Do not touch files in this directory!&quot; I assume we want this to be translated too &amp;#8211; is it understood that they always translate mixed-case text but not all-caps text? Sorry to be ignorant about our localization practices.&lt;/p&gt;</comment>
                            <comment id="13498404" author="mamtas" created="Thu, 15 Nov 2012 22:32:27 +0000"  >&lt;p&gt;Hi Kim, thanks for taking the time to provide the feedback. I have changed the wording of the readme files in messages.xml as per your suggestion. I would like us to stay consistent with the error messages and use the term NON-RECOVERABLE in the readme files. Also, to avoid the confusion and for the text to look consistent, I have changed &quot;Do not touch files in this directory!&quot; to all upper case. I will go ahead and commit these changes shortly. &lt;/p&gt;</comment>
                            <comment id="13498919" author="mamtas" created="Fri, 16 Nov 2012 16:55:53 +0000"  >&lt;p&gt;Committed the changes suggested by Kim with revision 1410465.&lt;/p&gt;</comment>
                            <comment id="13527696" author="mamtas" created="Mon, 10 Dec 2012 03:02:16 +0000"  >&lt;p&gt;Attaching release notes for the jira. Please let me know if there is any feedback on the wordings of the release note.&lt;/p&gt;</comment>
                            <comment id="13527770" author="knutanders" created="Mon, 10 Dec 2012 08:32:57 +0000"  >&lt;p&gt;Did you attach the right release note? The one I saw when I clicked on the attachment, talked about trigger data corruption, which sounds like a different issue.&lt;/p&gt;</comment>
                            <comment id="13528040" author="mamtas" created="Mon, 10 Dec 2012 16:22:09 +0000"  >&lt;p&gt;Knut, you are right. I have multiple trunk clients on my machine and accidentally copied the wrong release notes. I will copy the correct one soon.Thanks&lt;/p&gt;</comment>
                            <comment id="13528042" author="mamtas" created="Mon, 10 Dec 2012 16:26:48 +0000"  >&lt;p&gt;Attaching release note relevant to this jira&lt;/p&gt;</comment>
                            <comment id="13528949" author="knutanders" created="Tue, 11 Dec 2012 13:19:04 +0000"  >&lt;p&gt;Thanks for writing the release note, Mamta. Some suggestions:&lt;/p&gt;

&lt;p&gt;The summary is supposed to be a one line, one sentence summary. What about &quot;Derby will create readme files in the database directories&quot;?&lt;/p&gt;

&lt;p&gt;I think the symptoms section should describe the symptoms seen when upgrading to the new Derby release, not the symptoms seen when ignoring the advice in the readme files. For example: &quot;A database created with Derby 10.10, or upgraded to 10.10, will contain readme files named README_DO_NOT_TOUCH_FILES.txt in the top-level database directory and in the subdirectories seg0 and log.&quot;&lt;/p&gt;</comment>
                            <comment id="13529524" author="mamtas" created="Wed, 12 Dec 2012 00:57:11 +0000"  >&lt;p&gt;Thanks for your suggestions, Knut. I will incorporate them and attach a new release note.&lt;/p&gt;</comment>
                            <comment id="13530715" author="mamtas" created="Thu, 13 Dec 2012 06:06:05 +0000"  >&lt;p&gt;Attaching a new release note based on Knut&apos;s suggestion. This release note should cover &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5232&quot; title=&quot;Put a stern README file in log and seg0 directories to warn users of corrpution they will cause if they touch files there&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5232&quot;&gt;&lt;del&gt;DERBY-5232&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5996&quot; title=&quot;Create readme files (cautioning users against modifying database files) at database hard upgrade time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5996&quot;&gt;&lt;del&gt;DERBY-5996&lt;/del&gt;&lt;/a&gt;. Thanks&lt;/p&gt;</comment>
                            <comment id="13530807" author="knutanders" created="Thu, 13 Dec 2012 09:04:14 +0000"  >&lt;p&gt;Thanks, Mamta. The latest release note looks fine to me.&lt;/p&gt;</comment>
                            <comment id="13531144" author="mamtas" created="Thu, 13 Dec 2012 16:24:45 +0000"  >&lt;p&gt;Thanks for checking the release notes, Knut. I will go ahead and close this jira.&lt;/p&gt;</comment>
                            <comment id="14119545" author="knutanders" created="Wed, 3 Sep 2014 09:31:23 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12616175">DERBY-5995</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12613242">DERBY-5960</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12616175">DERBY-5995</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12616176">DERBY-5996</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12553664" name="DERBY-5232-kim.diff" size="3074" author="chaase3" created="Thu, 15 Nov 2012 16:30:48 +0000"/>
                            <attachment id="12549257" name="DERBY5232_patch1_diff.txt" size="5072" author="mamtas" created="Tue, 16 Oct 2012 05:43:39 +0100"/>
                            <attachment id="12549258" name="DERBY5232_patch1_stat.txt" size="325" author="mamtas" created="Tue, 16 Oct 2012 05:43:39 +0100"/>
                            <attachment id="12550410" name="DERBY5232_patch2_diff.txt" size="13760" author="mamtas" created="Tue, 23 Oct 2012 04:44:07 +0100"/>
                            <attachment id="12550411" name="DERBY5232_patch2_stat.txt" size="607" author="mamtas" created="Tue, 23 Oct 2012 04:44:07 +0100"/>
                            <attachment id="12550641" name="DERBY5232_patch3_diff.txt" size="25520" author="mamtas" created="Wed, 24 Oct 2012 16:55:57 +0100"/>
                            <attachment id="12550642" name="DERBY5232_patch3_stat.txt" size="1128" author="mamtas" created="Wed, 24 Oct 2012 16:55:57 +0100"/>
                            <attachment id="12551026" name="DERBY5232_patch4_diff.txt" size="14900" author="mamtas" created="Fri, 26 Oct 2012 22:43:17 +0100"/>
                            <attachment id="12551027" name="DERBY5232_patch4_stat.txt" size="748" author="mamtas" created="Fri, 26 Oct 2012 22:43:17 +0100"/>
                            <attachment id="12551878" name="DERBY5232_patch5_diff.txt" size="3423" author="mamtas" created="Fri, 2 Nov 2012 16:08:14 +0000"/>
                            <attachment id="12551879" name="DERBY5232_patch5_stat.txt" size="194" author="mamtas" created="Fri, 2 Nov 2012 16:08:14 +0000"/>
                            <attachment id="12552209" name="DERBY5232_patch6_diff.txt" size="4851" author="mamtas" created="Tue, 6 Nov 2012 03:42:58 +0000"/>
                            <attachment id="12552210" name="DERBY5232_patch6_stat.txt" size="194" author="mamtas" created="Tue, 6 Nov 2012 03:42:58 +0000"/>
                            <attachment id="12552491" name="DERBY5232_patch7_diff.txt" size="9272" author="mamtas" created="Wed, 7 Nov 2012 17:03:22 +0000"/>
                            <attachment id="12552492" name="DERBY5232_patch7_stat.txt" size="281" author="mamtas" created="Wed, 7 Nov 2012 17:03:22 +0000"/>
                            <attachment id="12552743" name="DERBY5232_test_patch1_diff.txt" size="6456" author="mamtas" created="Fri, 9 Nov 2012 01:11:26 +0000"/>
                            <attachment id="12552744" name="DERBY5232_test_patch1_stat.txt" size="246" author="mamtas" created="Fri, 9 Nov 2012 01:11:26 +0000"/>
                            <attachment id="12553254" name="DERBY5232_test_patch2_diff.txt" size="8178" author="mamtas" created="Tue, 13 Nov 2012 02:46:55 +0000"/>
                            <attachment id="12553255" name="DERBY5232_test_patch2_stat.txt" size="417" author="mamtas" created="Tue, 13 Nov 2012 02:46:55 +0000"/>
                            <attachment id="12560722" name="releaseNote.html" size="3672" author="mamtas" created="Thu, 13 Dec 2012 06:06:05 +0000"/>
                            <attachment id="12560201" name="releaseNote.html" size="3649" author="mamtas" created="Mon, 10 Dec 2012 16:26:48 +0000"/>
                            <attachment id="12560141" name="releaseNote.html" size="4051" author="mamtas" created="Mon, 10 Dec 2012 03:02:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Oct 2012 04:43:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31561</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10101"><![CDATA[Release Note Needed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy07qv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>35073</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>