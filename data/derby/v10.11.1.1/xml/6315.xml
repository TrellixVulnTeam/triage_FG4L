<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:37:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-6315/DERBY-6315.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-6315] Improve test coverage of org.apache.derby.impl.io.InputStreamFile</title>
                <link>https://issues.apache.org/jira/browse/DERBY-6315</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;According to code coverage analysis, org.apache.derby.impl.io.InputStreamFile has a poor code coverage.&lt;br/&gt;
This task is to investigate this class and add regression test that exercise the code, as appropriate. The current coverage report of the class can be found at  &lt;a href=&quot;http://dbtg.foundry.sun.com/derby/test/coverage/_files/9a.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dbtg.foundry.sun.com/derby/test/coverage/_files/9a.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12665384">DERBY-6315</key>
            <summary>Improve test coverage of org.apache.derby.impl.io.InputStreamFile</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12641844">DERBY-6164</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ahsancse">ahsan shamsudeen</assignee>
                                    <reporter username="ahsancse">ahsan shamsudeen</reporter>
                        <labels>
                            <label>gsoc2013</label>
                    </labels>
                <created>Sat, 24 Aug 2013 18:19:31 +0100</created>
                <updated>Wed, 21 Jan 2015 00:23:43 +0000</updated>
                            <resolved>Sat, 14 Sep 2013 22:45:54 +0100</resolved>
                                                    <fixVersion>10.11.1.1</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13752551" author="ahsancse" created="Wed, 28 Aug 2013 17:30:18 +0100"  >&lt;p&gt;According to EMMA, three methods of this class has test(InputStreamFile(), mkdirs(), toString()). Bryan, Do you found&lt;br/&gt;
where these tests are located? shall I create a new class and start to write test cases ?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ahsan &lt;/p&gt;</comment>
                            <comment id="13753181" author="bryanpendleton" created="Thu, 29 Aug 2013 02:59:44 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;I think you can start with o.a.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest&lt;/p&gt;

&lt;p&gt;This class exercises all three of the methods you mention.&lt;/p&gt;

&lt;p&gt;Here is a stack track showing how the test exercises the InputStreamFile constructor:&lt;/p&gt;

&lt;p&gt;java.lang.Exception: InputStreamFile(factory,path)&lt;br/&gt;
	at org.apache.derby.impl.io.InputStreamFile.&amp;lt;init&amp;gt;(InputStreamFile.java:52)&lt;br/&gt;
	at org.apache.derby.impl.io.JarDBFile.&amp;lt;init&amp;gt;(JarDBFile.java:51)&lt;br/&gt;
	at org.apache.derby.impl.io.JarStorageFactory.newPersistentFile(JarStorageFactory.java:48)&lt;br/&gt;
	at org.apache.derby.impl.io.BaseStorageFactory.newStorageFile(BaseStorageFactory.java:133)&lt;br/&gt;
	at org.apache.derby.impl.io.JarStorageFactory.newStorageFile(JarStorageFactory.java:35)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService$1.run(StorageFactoryService.java:107)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService.&amp;lt;init&amp;gt;(StorageFactoryService.java:96)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1639)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1621)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getServiceProvider(BaseMonitor.java:1609)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.getServiceProvider(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderFromName(BaseMonitor.java:1596)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1495)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:404)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:618)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:555)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.readOnlyTest(DatabaseClassLoadingTest.java:767)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testDatabaseInJar(DatabaseClassLoadingTest.java:638)&lt;/p&gt;

&lt;p&gt;And here is a stack trace showing how the test executes the mkdirs() method:&lt;/p&gt;

&lt;p&gt;java.lang.Exception: InputStreamFile.mkdirs&lt;br/&gt;
	at org.apache.derby.impl.io.InputStreamFile.mkdirs(InputStreamFile.java:272)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService$1.run(StorageFactoryService.java:108)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService.&amp;lt;init&amp;gt;(StorageFactoryService.java:96)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1639)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(BaseMonitor.java:1621)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.getServiceProvider(BaseMonitor.java:1609)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.getServiceProvider(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderFromName(BaseMonitor.java:1596)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1495)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:404)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:618)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:555)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.readOnlyTest(DatabaseClassLoadingTest.java:767)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testDatabaseInJar(DatabaseClassLoadingTest.java:638)&lt;/p&gt;

&lt;p&gt;Lastly, here is a stack trace showing how the test executes the toString method:&lt;/p&gt;

&lt;p&gt;java.lang.Exception: InputStreamFile.toString&lt;br/&gt;
	at org.apache.derby.impl.io.InputStreamFile.toString(InputStreamFile.java:427)&lt;br/&gt;
	at org.apache.derby.impl.io.CPFile.getInputStream(CPFile.java:114)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService$4.run(StorageFactoryService.java:290)&lt;br/&gt;
	at java.security.AccessController.doPrivileged(Native Method)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.StorageFactoryService.getServiceProperties(StorageFactoryService.java:267)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1508)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:404)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:618)&lt;br/&gt;
	at org.apache.derby.jdbc.EmbeddedBaseDataSource.getConnection(EmbeddedBaseDataSource.java:555)&lt;br/&gt;
	at org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testDatabaseInClasspath(DatabaseClassLoadingTest.java:647)&lt;/p&gt;

&lt;p&gt;So you can&apos;t simply add direct calls to the methods in your new test cases,&lt;br/&gt;
but examining the code along these stack traces should give you some clues&lt;br/&gt;
about how to provoke some of the other InputStreamFile methods to be&lt;br/&gt;
exercised by the test.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="13758246" author="ahsancse" created="Wed, 4 Sep 2013 20:29:01 +0100"  >&lt;p&gt;When I try run unit test for DatabaseClassLoadingTest.java , I am getting &quot;access denied&quot; exception. What is the reason for this? anyway to overcome this issue  ?&lt;/p&gt;

&lt;p&gt;java.security.AccessControlException: access denied (&quot;java.io.FilePermission&quot; &quot;D:\Apache\Workspace\derby\system\wombat\jar\3d3b0068-0140-d54f-a291-0000589559b2.jar.G1377968313576&quot; &quot;read&quot;)&lt;br/&gt;
	at java.security.AccessControlContext.checkPermission(Unknown Source)&lt;br/&gt;
	at java.security.AccessController.checkPermission(Unknown Source)&lt;br/&gt;
	at java.lang.SecurityManager.checkPermission(Unknown Source)&lt;br/&gt;
	at java.lang.SecurityManager.checkRead(Unknown Source)&lt;br/&gt;
	at java.io.File.exists(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.RemoveFileOperation.needsRedo(RemoveFileOperation.java:154)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.redo(FileLogger.java:1395)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:932)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:337)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1000)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:541)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.FileMonitor.startModule(FileMonitor.java:44)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:423)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:760)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:177)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1991)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1819)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1685)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1569)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:988)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:404)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:628)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:282)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:913)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(Unknown Source)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(Unknown Source)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)&lt;br/&gt;
	at org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)&lt;br/&gt;
	at org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1707)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)&lt;br/&gt;
	at org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp(CleanDatabaseTestSetup.java:103)&lt;br/&gt;
	at junit.extensions.TestSetup$1.protect(TestSetup.java:20)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
	at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&lt;/p&gt;</comment>
                            <comment id="13758537" author="bryanpendleton" created="Thu, 5 Sep 2013 00:58:41 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;The directory &quot;system\wombat&quot; is where the test harness creates a test database for the tests to use.&lt;/p&gt;

&lt;p&gt;You should be able to delete that directory and the tests will create a brand new fresh test database the next time they are run.&lt;/p&gt;

&lt;p&gt;It is possible that the crash that you printed in your stack trace represents a bug in the test harness. The tests are supposed to run with a security policy which allows Derby to read and write all the files in the database directory (&quot;system\wombat&quot;), but for some reason the security manager was refusing to let the Derby recovery code read the file:&lt;/p&gt;

&lt;p&gt;java.security.AccessControlException: access denied (&quot;java.io.FilePermission&quot; &quot;D:\Apache\Workspace\derby\system\wombat\jar\3d3b0068-0140-d54f-a291-0000589559b2.jar.G1377968313576&quot; &quot;read&quot;)&lt;/p&gt;

&lt;p&gt;I will have to do some research on what is going on here.&lt;/p&gt;

&lt;p&gt;For the time being, please try deleting the directory&lt;/p&gt;

&lt;p&gt;    D:\Apache\Workspace\derby\system\wombat&lt;/p&gt;

&lt;p&gt;and that should let you resume running the test program from Eclipse.&lt;/p&gt;</comment>
                            <comment id="13758548" author="bryanpendleton" created="Thu, 5 Sep 2013 01:09:24 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;I reproduced the problem you describe and opened &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6334&quot; title=&quot;Test harness security policy prevents running DatabaseClassLoadingTest twice&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6334&quot;&gt;DERBY-6334&lt;/a&gt; against&lt;br/&gt;
the test harness.&lt;/p&gt;

&lt;p&gt;For the time being, I think the best workaround is to delete the &quot;system&quot;&lt;br/&gt;
or &quot;system\wombat&quot; directory in between each run of the tests.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="13761092" author="ahsancse" created="Sat, 7 Sep 2013 19:37:53 +0100"  >&lt;p&gt;I deleted system directory in between each run of the test. That&apos;s fine.&lt;/p&gt;

&lt;p&gt;I try to write a method to test the public long length() method of jarDBFile.java as follows.&lt;/p&gt;

&lt;p&gt;public void testlength() throws Exception{&lt;br/&gt;
    	JarStorageFactory storageFactory=new JarStorageFactory() ;&lt;br/&gt;
    	File jarFile = SupportFilesSetup.getReadOnly(&quot;dclt.jar&quot;);&lt;br/&gt;
    	final String path=jarFile.getPath();&lt;br/&gt;
    	JarDBFile jdf=new JarDBFile( storageFactory, path);&lt;/p&gt;

&lt;p&gt;    	final File backupDir = SupportFilesSetup.getReadWrite(&quot;dbreadonly&quot;);&lt;br/&gt;
        final String db = getTestConfiguration().getDefaultDatabaseName();&lt;br/&gt;
        File file=new File(backupDir, db);&lt;/p&gt;



&lt;p&gt;    	if(!file.isDirectory()){&lt;br/&gt;
    		if(jdf.length()==0)&lt;/p&gt;
{
    			assertEquals(jdf.length(),0);
    		}
&lt;p&gt;    		else&lt;/p&gt;
{
    			assertTrue(jdf.length()&amp;gt;0);
    			
    		}
&lt;p&gt;    	}&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;For this, I need to make some classes public. I know it&apos;s not allowed and wrong. &lt;/p&gt;

&lt;p&gt;Bryan, you said that the DirFile.java is tested well by our current test suite. Can you show me a method  and its appropriate test methods for this class? So, I can look at it and try my best to write some test methods. Still, I couldn&apos;t understand , how to test a method which is not public or not accessible directly via testing classes.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ahsan&lt;/p&gt;
</comment>
                            <comment id="13761494" author="bryanpendleton" created="Sun, 8 Sep 2013 18:56:15 +0100"  >
&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;I agree with you, the length() method is a bit of a puzzle.&lt;/p&gt;

&lt;p&gt;Cracking this puzzle open may require some research, and some experimentation.&lt;/p&gt;

&lt;p&gt;First, let&apos;s look at the class DirFile, in o.a.d.impl.io.DirFile.java&lt;/p&gt;

&lt;p&gt;The first thing to notice is the inheritance hierarchy here is complicated:&lt;/p&gt;

&lt;p&gt;    class DirFile extends File implements StorageFile&lt;/p&gt;

&lt;p&gt;Now, the StorageFile interface contains a length() method:&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Returns the length of the named file if it is not a directory. The return value is not specified&lt;/li&gt;
	&lt;li&gt;if the file is a directory.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@return The length, in bytes, of the named file if it exists and is not a directory,&lt;/li&gt;
	&lt;li&gt;0 if the file does not exist, or any value if the named file is a directory.&lt;br/&gt;
     */&lt;br/&gt;
    public long length();&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And the File class in the JDK &lt;b&gt;also&lt;/b&gt; contains a length() method:&lt;/p&gt;

&lt;p&gt;	public long length()&lt;/p&gt;

&lt;p&gt;	Returns the length of the file denoted by this abstract pathname.&lt;br/&gt;
	The return value is unspecified if this pathname denotes a directory.&lt;/p&gt;

&lt;p&gt;And the DirFile class doesn&apos;t contain an &lt;b&gt;implementation&lt;/b&gt; of the length()&lt;br/&gt;
method, so it must be the case that DirFile.length() is actually&lt;br/&gt;
implemented by java.io.File.length().&lt;/p&gt;

&lt;p&gt;Furthermore, at line 197 of DirFile.java, DirFile.getExclusiveFileLock()&lt;br/&gt;
actually calls the length() method:&lt;/p&gt;

&lt;p&gt;            if (createNewFile())&lt;/p&gt;
            {
                validExclusiveLock = true;
            }&lt;br/&gt;
            else if (length() &amp;gt; 0)&lt;br/&gt;
            {
                validExclusiveLock = true;
            }

&lt;p&gt;But this code isn&apos;t calling the length() method via the StorageFile&lt;br/&gt;
interface; it is just invoking the class&apos;s own length() method&lt;br/&gt;
(implemented by File.length() ) directly.&lt;/p&gt;

&lt;p&gt;So I am left with a big question: who calls StorageFile.length()?&lt;/p&gt;

&lt;p&gt;I tried an experiment:&lt;br/&gt;
1) I removed the length() method from the classes StorageFile,&lt;br/&gt;
   InputStreamFile, and JarDBFile.&lt;br/&gt;
2) I also removed the length() method from the class CorruptFile.java&lt;br/&gt;
   in java/testing/org/apache/derbyTesting/functionTests/util/corruptio&lt;br/&gt;
3) I did &apos;ant clobber&apos; and &apos;ant clean&apos; and &apos;ant all&apos;.&lt;/p&gt;

&lt;p&gt;Everything compiles and builds just fine.&lt;/p&gt;

&lt;p&gt;This is somewhat puzzling to me; it suggests that the StorageFile.length&lt;br/&gt;
method is entirely unnecessary, and it could be removed, together&lt;br/&gt;
with removing the implementations in InputStreamFile and JarDBFile.&lt;/p&gt;

&lt;p&gt;The next thing I tried was to look at the Subversion history for&lt;br/&gt;
StorageFile.java. There is not a lot of information here; the length()&lt;br/&gt;
method was in the original version of StorageFile.java contributed&lt;br/&gt;
to Apache by IBM back in 2004, and hasn&apos;t been touched since.&lt;/p&gt;

&lt;p&gt;There is a comment in the top of StorageFile.java:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;This interface abstracts file naming. Any method in this interface&lt;/li&gt;
	&lt;li&gt;that also appears in the java.io.File class should behave as the java.io.File method does.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So that comment explains why the length() method in StorageFile is&lt;br/&gt;
implemented to behave just as the length() method in java.io.File.&lt;/p&gt;

&lt;p&gt;But it doesn&apos;t explain why the StorageFile.length() method is there&lt;br/&gt;
in the first place, I don&apos;t think.&lt;/p&gt;

&lt;p&gt;So where does this leave us? I&apos;m not sure.&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;think&lt;/b&gt; that it would be possible to remove the StorageFile.length()&lt;br/&gt;
method; it may have been a leftover from the old Cloudscape implementation&lt;br/&gt;
and may simply have not been cleaned up when the Cloudscape code became&lt;br/&gt;
open source.&lt;/p&gt;

&lt;p&gt;I&apos;ll post a message to derby-dev asking for help from some of the&lt;br/&gt;
Derby developers who are familiar with the code from that time period.&lt;/p&gt;

&lt;p&gt;In the meantime, Ahsan, can you please try to reproduce my experiment,&lt;br/&gt;
and let me know if you can confirm my results?&lt;/p&gt;

&lt;p&gt;Also, if you are able to build successfully with StorageFile.length()&lt;br/&gt;
removed, can you try running some of the test suites? Say:&lt;br/&gt;
    org.apache.derbyTesting.functionTests.tests.store._Suite&lt;br/&gt;
and&lt;br/&gt;
    org.apache.derbyTesting.functionTests.tests.lang._Suite&lt;br/&gt;
and&lt;br/&gt;
    org.apache.derbyTesting.functionTests.tests.memorydb._Suite&lt;/p&gt;

&lt;p&gt;If those tests all pass with StorageFile.length() removed, that would&lt;br/&gt;
be additional evidence that this method is no longer needed by the&lt;br/&gt;
current Derby codebase.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;
</comment>
                            <comment id="13762038" author="ahsancse" created="Mon, 9 Sep 2013 18:06:20 +0100"  >&lt;p&gt;I have removed length() method from StorageFile,InputStreamFile,JarDBFile as well as CorruptFile and built the derby successfully. Also, all the above mention test suites pass the test with out any problem. So, I think its better to remove the this method from these classes. This will help us to improve the code coverage to a certain level.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ahsan&lt;/p&gt;</comment>
                            <comment id="13762577" author="bryanpendleton" created="Tue, 10 Sep 2013 02:22:50 +0100"  >&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Can you prepare and contribute a patch to make this change?&lt;/p&gt;</comment>
                            <comment id="13764556" author="ahsancse" created="Wed, 11 Sep 2013 18:50:11 +0100"  >&lt;p&gt;This patch removes length() method from StorageFile,InputStreamFile,JarDBFile as well as CorruptFile. Look at it and suggest any required changes. &lt;/p&gt;</comment>
                            <comment id="13765156" author="bryanpendleton" created="Thu, 12 Sep 2013 05:48:38 +0100"  >&lt;p&gt;Hi Ahsan,&lt;/p&gt;

&lt;p&gt;I think the Eclipse patch tool was confused by the presence of the &quot;fail&quot; directory in your workspace.&lt;/p&gt;

&lt;p&gt;Can you please try removing the &quot;fail&quot; directory and regenerating your patch?&lt;/p&gt;

&lt;p&gt;I think that your patch should be quite small when you attach it, just 1K or 2K in size, right?&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="13767201" author="bryanpendleton" created="Sat, 14 Sep 2013 00:59:42 +0100"  >&lt;p&gt;The new patch looks much cleaner, thanks!&lt;/p&gt;</comment>
                            <comment id="13767526" author="bryanpendleton" created="Sat, 14 Sep 2013 17:54:48 +0100"  >&lt;p&gt;There is no actual change to o.a.d.impl.io.DirFile, I believe, is&lt;br/&gt;
that correct? The diff to DirFile in the patch is just whitespace,&lt;br/&gt;
so I reverted it after applying the patch.&lt;/p&gt;</comment>
                            <comment id="13767592" author="jira-bot" created="Sat, 14 Sep 2013 22:44:55 +0100"  >&lt;p&gt;Commit 1523334 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bryanpendleton&quot; class=&quot;user-hover&quot; rel=&quot;bryanpendleton&quot;&gt;Bryan Pendleton&lt;/a&gt; in branch &apos;code/trunk&apos;&lt;br/&gt;
[ &lt;a href=&quot;https://svn.apache.org/r1523334&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/r1523334&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-6315&quot; title=&quot;Improve test coverage of org.apache.derby.impl.io.InputStreamFile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-6315&quot;&gt;&lt;del&gt;DERBY-6315&lt;/del&gt;&lt;/a&gt;: Improve test coverage of org.apache.derby.impl.io.InputStreamFile&lt;/p&gt;

&lt;p&gt;This patch was contributed by Ahsan Shamsudeen (ahsan dot competition at gmail dot com)&lt;/p&gt;

&lt;p&gt;This patch removes the unused method StorageFile.length().&lt;/p&gt;

&lt;p&gt;The length method is removed from the StorageFile interface, as well as&lt;br/&gt;
from the InputStreamFile, JarDBFile, and CorruptFile implementations.&lt;/p&gt;

&lt;p&gt;The method was not called anywhere, and removing it simplifies this area&lt;br/&gt;
of the Derby code.&lt;/p&gt;</comment>
                            <comment id="13767593" author="bryanpendleton" created="Sat, 14 Sep 2013 22:45:54 +0100"  >&lt;p&gt;My builds and tests were successful, so I have committed&lt;br/&gt;
this patch as revision 1523334.&lt;/p&gt;

&lt;p&gt;Ahsan, thank you for the contribution to Derby!&lt;/p&gt;</comment>
                            <comment id="14284848" author="myrna" created="Wed, 21 Jan 2015 00:23:43 +0000"  >&lt;p&gt;bulk change to close all issues resolved but not closed and not changed since June 1, 2014.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12602616" name="DERBY-6315.patch" size="657805" author="ahsancse" created="Wed, 11 Sep 2013 18:50:11 +0100"/>
                            <attachment id="12603054" name="DERBY-6315Updated.patch" size="4472" author="ahsancse" created="Fri, 13 Sep 2013 18:42:39 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 29 Aug 2013 01:59:44 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>345324</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hzhe5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>345625</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>