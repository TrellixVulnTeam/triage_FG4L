<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3341/DERBY-3341.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3341] TABLE FUNCTION returning CHAR values does not return a correct value if the Java ResultSet class returns a value less than the length of the defined CHAR.</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3341</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Defining a column in the returned type as CHAR(10) requires that the returned value be of length 10 characters.&lt;/p&gt;

&lt;p&gt;Defining a table function with a return type of:&lt;br/&gt;
   returns TABLE  column0 char( 10 ), column1 char( 10 ))&lt;br/&gt;
seems to just return whatever the Java ResultSet implementation handed it.&lt;/p&gt;

&lt;p&gt;My guess this is true for all variable length types, no casting of the value occurs when it is returned to the SQL domain.&lt;/p&gt;

&lt;p&gt;Java single value functions and procedure out parameters do perform any required casting to ensure the value is of the declared type.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12386900">DERBY-3341</key>
            <summary>TABLE FUNCTION returning CHAR values does not return a correct value if the Java ResultSet class returns a value less than the length of the defined CHAR.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="djd">Daniel John Debrunner</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Jan 2008 23:50:09 +0000</created>
                <updated>Fri, 21 Jan 2011 17:51:19 +0000</updated>
                            <resolved>Tue, 10 Jun 2008 22:01:14 +0100</resolved>
                                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12561525" author="djd" created="Tue, 22 Jan 2008 23:59:36 +0000"  >&lt;p&gt;Quick hacked up modification to TableFunctionTest that shows the problem.&lt;/p&gt;

&lt;p&gt;Note the change from&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;else 
{ assertTrue( expectedValue.equals( actualValue ) ); }
&lt;p&gt;+                else &lt;/p&gt;
{ assertEquals(expectedValue, actualValue); }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This results in the values being displayed if the test fails and there is more useful and clearer than explicitly performing the equals().&lt;/p&gt;

&lt;p&gt;The test itself is actually a little hard to get into, it doesn&apos;t follow the established JUnit pattern of having fixtures being with test so it&apos;s hard to see where the fixtures are. It also seems to duplicate existing utility methods such as testing the contents of result sets and dropping a schema.&lt;/p&gt;</comment>
                            <comment id="12574566" author="rhillegas" created="Mon, 3 Mar 2008 15:41:02 +0000"  >&lt;p&gt;The same behavior plagues the diagnostic VTIs. You can demonstrate this by hacking AccessFactoryGlobals.USER_TRANS_NAME to be a long string and then running the following update:&lt;/p&gt;

&lt;p&gt;create table t2( col1 varchar(35 ) );&lt;/p&gt;

&lt;p&gt;insert into t2( col1 )&lt;br/&gt;
SELECT type FROM SYSCS_DIAG.TRANSACTION_TABLE;&lt;/p&gt;

&lt;p&gt;The declared type of TRANSACTION_TABLE.TYPE is varchar( 30 ) but there is no truncating cast in the bind-time plan to cut the hacked value back to 30 characters.&lt;/p&gt;</comment>
                            <comment id="12574666" author="rhillegas" created="Mon, 3 Mar 2008 18:53:56 +0000"  >&lt;p&gt;The bind tree looks correct to me. The compiler has the correct understanding of what SQL types are supposed to correspond to the columns in the user-coded ResultSet. From one point of view, you could say that the problem is that the user has lied: At DDL time the user declared that a string column in a table function has a maximum length, but the actual user-coded implementation of the ResultSet does not obey this contract. I think that, technically, the behavior is undefined right now because ANSI does not have rules about what happens if a Derby-style table function returns an oversized string.&lt;/p&gt;

&lt;p&gt;The current behavior is unattractive. We are free to define what we think the correct behavior should be--and then we should document that correct behavior. One approach would be to throw a SQLException if the ResultSet does not fulfill the declared contract. However, I think that silently truncating oversized strings would be more useful. The current proposal seems fine:&lt;/p&gt;

&lt;p&gt;If the customer declares that a string column in a Table Function has a maximum length, and the underlying user-coded ResultSet returns oversized strings, then Derby should silently truncate those strings to the declared maximum length by chopping off trailing characters.&lt;/p&gt;</comment>
                            <comment id="12574701" author="djd" created="Mon, 3 Mar 2008 19:39:32 +0000"  >&lt;p&gt;The issue is not limited to String values that are too long, it&apos;s a generic issue for any variable length types.&lt;/p&gt;

&lt;p&gt;A ResultSet returning the String &quot;A&quot; for a CHAR(5) is also incorrect, similar for DECIMAL values with smaller scale than defined.&lt;/p&gt;

&lt;p&gt;Currently Java functions do silently truncate VARCHAR and CHAR values that are too long, not sure that&apos;s correct but I can&apos;t yet find any clear indication in the SQL spec (part 13) of what is meant to happen.&lt;/p&gt;</comment>
                            <comment id="12574716" author="rhillegas" created="Mon, 3 Mar 2008 20:04:17 +0000"  >&lt;p&gt;I think that where we want to end up is that the value taken out of the ResultSet is run through the normalize() method of the declared data type. Does that sound right? If so, is that behavior declared anywhere in our user documentation? I can&apos;t find a corresponding description for how the return values of scalar functions are normalized.&lt;/p&gt;</comment>
                            <comment id="12575371" author="rhillegas" created="Wed, 5 Mar 2008 14:42:45 +0000"  >&lt;p&gt;Attaching derby-3341-01-coerce.diff. This coerces values as they pass from the Java domain into the SQL domain. The regression tests run cleanly for me except for timeouts in the stress multi tests and a diff in TransactionTable--those errors don&apos;t seem related to this work. The fix gives me correct results for the hand-rolled test cases I tried but I would like to add some more systematic cases to the regression tests.&lt;/p&gt;

&lt;p&gt;Touches the following files:&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/compile/FromVTI.java&lt;/p&gt;

&lt;p&gt;For Derby-style Table Functions, the function&apos;s return type is generated into the call which instantiates a VTIResultSet.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java&lt;br/&gt;
M      java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java&lt;/p&gt;

&lt;p&gt;The extra argument is added to the signatures of the method which instantiates a VTIResultSet.&lt;/p&gt;

&lt;p&gt;M      java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java&lt;/p&gt;

&lt;p&gt;For Derby-style Table Functions, the return type is unwrapped, the type descriptors for the returned columns are extracted, and the values coming out of the user-coded ResultSet are coerced according to those column types. The coercion logic follows the rules described in CastNode.genDataValueConversion().&lt;/p&gt;

&lt;p&gt;M      java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java&lt;/p&gt;

&lt;p&gt;Modified this test because short string values are now being padded with trailing blanks when they are coerced into long CHAR values.&lt;/p&gt;</comment>
                            <comment id="12575426" author="djd" created="Wed, 5 Mar 2008 17:20:29 +0000"  >&lt;p&gt;I haven&apos;t looked in detail at the patch but the approach seems unusual to me. The passing of the return types as a string and then unpacking it at execution time seems more like compile time work. Standard functions use a CastNode (ie. operation all figured out at compile time) to perform conversions. That or a NormalizeResultSet would seem more in line with existing code.&lt;/p&gt;</comment>
                            <comment id="12576347" author="rhillegas" created="Fri, 7 Mar 2008 19:46:45 +0000"  >&lt;p&gt;Attaching a second rev of a fix: derby-01-da-coerceWithTests.diff. This extends the previous patch as follows:&lt;/p&gt;

&lt;p&gt;1) Adds tests to verify that the behavior is what we expect for CHAR, VARCHAR, BINARY, VARBINARY, LONG VARCHAR, LONG VARBINARY, and DECIMAL.&lt;/p&gt;

&lt;p&gt;2) Adds some extra logic to make the LONG VARCHAR and LONG VARBINARY cases correct. The current cast-based behavior with scalar functions is not correct for LONG VARCHAR (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3511&quot; title=&quot;Cannot resolve functions which return VARCHAR FOR BIT DATA or LONG VARCHAR FOR BIT DATA&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3511&quot;&gt;&lt;del&gt;DERBY-3511&lt;/del&gt;&lt;/a&gt;) and I suspect it is not correct for LONG VARBINARY either (see &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3512&quot; title=&quot;Using functions, you can create a LONG VARCHAR value which is longer than the maximum length of a Derby LONG VARCHAR&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3512&quot;&gt;DERBY-3512&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I am running regression tests now. For the record, my first attempt to fix this problem was to insert CASTs into the bound tree. That did not work. We can experiment with other solutions later on. As a first increment, I would like to make the behavior correct.&lt;/p&gt;</comment>
                            <comment id="12576369" author="rhillegas" created="Fri, 7 Mar 2008 20:53:22 +0000"  >&lt;p&gt;Attaching derby-3341-02-aa-refGuide.diff and the corresponding html output. This is a change to the CREATE FUNCTION documentation in the Reference Guide. This adds a paragraph describing how values are coerced as they come out of user-coded ResultSets. Touches the following file:&lt;/p&gt;

&lt;p&gt;M      src/ref/rrefcreatefunctionstatement.dita&lt;/p&gt;</comment>
                            <comment id="12576393" author="djd" created="Fri, 7 Mar 2008 21:55:37 +0000"  >&lt;p&gt;&amp;gt; For the record, my first attempt to fix this problem was to insert CASTs into the bound tree. That did not work.&lt;/p&gt;

&lt;p&gt;It would be interesting to see the details on this to either allow others not to waste their time trying a similar solution or to allow others to get the solution working.&lt;br/&gt;
The benefit of an open source community is to throw code out there and ask opinions on why it doesn&apos;t work, usually the whole community benefits through the exposure.&lt;/p&gt;</comment>
                            <comment id="12577512" author="rhillegas" created="Tue, 11 Mar 2008 16:57:32 +0000"  >&lt;p&gt;Committed derby-3341-01-da-coerceWithTests.diff at subversion revision 636004. The old-style regression tests ran cleanly for me last Friday except for a known instability in the stress multi tests. The junit tests hung, however, at the end in the replication tests. Those replication tests have been disabled and the junit tests now run cleanly for me.&lt;/p&gt;</comment>
                            <comment id="12577514" author="rhillegas" created="Tue, 11 Mar 2008 17:00:18 +0000"  >&lt;p&gt;Committed doc changes derby-3341-02-aa-refGuide.diff at subversion revision 636007.&lt;/p&gt;</comment>
                            <comment id="12577516" author="rhillegas" created="Tue, 11 Mar 2008 17:08:00 +0000"  >&lt;p&gt;Ported 636004 from trunk to 10.4 branch at subversion revision 636010.&lt;/p&gt;</comment>
                            <comment id="12577538" author="rhillegas" created="Tue, 11 Mar 2008 18:09:31 +0000"  >&lt;p&gt;Ported 636007 from docs trunk to 10.4 docs branch at revision 636041.&lt;/p&gt;</comment>
                            <comment id="12578083" author="army" created="Wed, 12 Mar 2008 23:49:08 +0000"  >&lt;p&gt;I saw two failures when running suites.All with weme6.1 last night, both in TableFunctionTest with similar diffs.  Ex:&lt;/p&gt;

&lt;p&gt;noSpecialCollation(o.a.dTesting.functionTests.tests.lang.TableFunctionTest)java.sql.SQLException: An attempt was made to get a data value of type &apos;java.lang.Object&apos; from a data value of type &apos;DECIMAL&apos;.&lt;br/&gt;
 at o.a.d.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.EmbedConnection.handleException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.ConnectionChild.handleException(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.jdbc.EmbedResultSet.next(Unknown Source)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1935)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1776)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.assertResults(TableFunctionTest.java:1762)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.allLegalDatatypesVTIResults(TableFunctionTest.java:1178)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest(TableFunctionTest.java:921)&lt;br/&gt;
 at o.a.dTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation(TableFunctionTest.java:897)&lt;br/&gt;
 at java.lang.reflect.AccessibleObject.invokeV(AccessibleObject.java:205)&lt;br/&gt;
 at o.a.dTesting.junit.BaseTestCase.runBare(BaseTestCase.java:101)&lt;br/&gt;
Caused by: ERROR 22005: An attempt was made to get a data value of type &apos;java.lang.Object&apos; from a data value of type &apos;DECIMAL&apos;.&lt;br/&gt;
 at o.a.d.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
 at o.a.d.iapi.types.DataType.dataTypeConversion(Unknown Source)&lt;br/&gt;
 at o.a.d.iapi.types.DataType.getObject(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.sql.execute.VTIResultSet.cast(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.sql.execute.VTIResultSet.populateFromResultSet(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.sql.execute.VTIResultSet.getNextRowCore(Unknown Source)&lt;br/&gt;
 at o.a.d.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)&lt;/p&gt;

&lt;p&gt;The other failure was the &quot;specialCollation()&quot; fixture.&lt;/p&gt;

&lt;p&gt;I&apos;m guessing you&apos;re not running tests with weme6.1, but any chance you might be able identify the cause?  Or should I file a separate issue?&lt;/p&gt;</comment>
                            <comment id="12580808" author="dyret" created="Thu, 20 Mar 2008 16:10:47 +0000"  >&lt;p&gt;Removing Fix-version for unassigned issues&lt;/p&gt;</comment>
                            <comment id="12604040" author="rhillegas" created="Tue, 10 Jun 2008 22:01:14 +0100"  >&lt;p&gt;I believe that this issue can be closed. The odd parameter passing between the compiler and the execution engine was cleaned up by Knut in his patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3616&quot; title=&quot;TableFunctionTest fails under Ubuntu 7.10&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3616&quot;&gt;&lt;del&gt;DERBY-3616&lt;/del&gt;&lt;/a&gt;. I think there is an outstanding design issue of where we should coerce values coming out of the Java domain. What is implemented is coercion in the Derby result set which wraps  the Java ResultSet. Another proposal is to perform the coercion via casts above the wrapping Derby result set. If someone wants to pursue that, I think the effort merits its own JIRA and discussion.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12354628">DERBY-2034</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12390467">DERBY-3512</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12377174" name="derby-3341-01-coerce.diff" size="13015" author="rhillegas" created="Wed, 5 Mar 2008 14:42:45 +0000"/>
                            <attachment id="12377383" name="derby-3341-01-da-coerceWithTests.diff" size="21601" author="rhillegas" created="Fri, 7 Mar 2008 19:46:45 +0000"/>
                            <attachment id="12377388" name="derby-3341-02-aa-refGuide.diff" size="1439" author="rhillegas" created="Fri, 7 Mar 2008 20:53:22 +0000"/>
                            <attachment id="12373794" name="derby_3341_test.txt" size="2184" author="djd" created="Tue, 22 Jan 2008 23:59:36 +0000"/>
                            <attachment id="12377389" name="rrefcreatefunctionstatement.html" size="13409" author="rhillegas" created="Fri, 7 Mar 2008 20:53:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 3 Mar 2008 15:41:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23580</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0lrz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37346</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>