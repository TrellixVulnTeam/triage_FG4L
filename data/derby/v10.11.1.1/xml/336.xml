<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:44:40 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-336/DERBY-336.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-336] The wrong overload of StandardException::newException() is used in some cases</title>
                <link>https://issues.apache.org/jira/browse/DERBY-336</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;When looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-128&quot; title=&quot;Network Server Gives NPE if SQLException has null arguments   (e.g. for ERROR XBM0H)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-128&quot;&gt;&lt;del&gt;DERBY-128&lt;/del&gt;&lt;/a&gt; it became clear that the wrong overload of StandardException::newException() was used when reporting&lt;br/&gt;
SQLState.SERVICE_DIRECTORY_CREATE_ERROR. The message string only takes one parameter so only one additional parameter (other than Throwable) should be used:&lt;/p&gt;

&lt;p&gt;PersistentServiceImpl.java:676&lt;br/&gt;
                            throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR,&lt;br/&gt;
                                                                 serviceDirectory, null);&lt;br/&gt;
// Calls StandardException.newException(String, Object, Object)&lt;br/&gt;
// Should call StandardException.newException(String, Object)? Or StandardException.newException(String, Throwable, Object)? With the IOException as  &lt;br/&gt;
// Throwable?&lt;/p&gt;

&lt;p&gt;PersistentServiceImpl.java:692&lt;br/&gt;
        throw StandardException.newException(SQLState.SERVICE_DIRECTORY_CREATE_ERROR, name, t);&lt;br/&gt;
// Calls StandardException.newException(String, Object, Object)&lt;br/&gt;
// Should call StandardException.newException(String, Throwable, Object)?&lt;/p&gt;

&lt;p&gt;BaseDataFileFactory.java:279&lt;br/&gt;
                throw StandardException.newException( SQLState.SERVICE_DIRECTORY_CREATE_ERROR, dataDirectory, ioe);&lt;/p&gt;

&lt;p&gt;// Calls StandardException.newException(String, Object, Object)&lt;br/&gt;
// Should call StandardException.newException(String, Throwable, Object)?&lt;/p&gt;</description>
                <environment>Any</environment>
        <key id="12311071">DERBY-336</key>
            <summary>The wrong overload of StandardException::newException() is used in some cases</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dyret">Dyre Tjeldvoll</assignee>
                                    <reporter username="dyret">Dyre Tjeldvoll</reporter>
                        <labels>
                    </labels>
                <created>Sun, 5 Jun 2005 22:54:28 +0100</created>
                <updated>Mon, 29 Jun 2009 14:13:26 +0100</updated>
                            <resolved>Tue, 11 Apr 2006 02:43:16 +0100</resolved>
                                    <version>10.1.2.1</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12312680" author="kmarsden" created="Mon, 6 Jun 2005 01:57:28 +0100"  >&lt;p&gt;The network sever part of this bug is fixed.&lt;/p&gt;

&lt;p&gt;The issue of the  SQLException having null arguments has been moved to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-336&quot; title=&quot;The wrong overload of StandardException::newException() is used in some cases&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-336&quot;&gt;&lt;del&gt;DERBY-336&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12312870" author="dyret" created="Tue, 7 Jun 2005 22:01:47 +0100"  >&lt;p&gt;This was a little more complicated than I first thought: It looks like there are three different cases of incorrect, or at least unconventional, use of StandardException.newException(...):&lt;/p&gt;

&lt;p&gt;1) newException() is called with and explicit &quot;null&quot; argument. &lt;br/&gt;
Error codes:&lt;br/&gt;
SQLState.SERVICE_DIRECTORY_CREATE_ERROR  XBM0H.D=Directory &lt;/p&gt;
{0} cannot be created.&lt;br/&gt;
SQLState.LOG_FULL  XSLA4.D=Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.&lt;br/&gt;
SQLState.RAWSTORE_ERROR_RENAMING_FILE  XSRS4.S=Error renaming file (during backup) from {0}
&lt;p&gt; to &lt;/p&gt;
{1}.&lt;br/&gt;
SQLState.RAWSTORE_ERROR_COPYING_FILE  XSRS5.S=Error copying file (during backup) from {0} to {1}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;In all of these cases it should be safe to remove the &quot;null&quot; as it is not used in the message text.&lt;/p&gt;


&lt;p&gt;2) newException(...) is called with Throwable as the LAST argument, and not the SECOND as it should be.&lt;br/&gt;
Error codes:&lt;br/&gt;
SQLState.AUTH_INVALID_AUTHORIZATION_PROPERTY  28501=Invalid database authorization property &apos;&apos;&lt;/p&gt;
{0}={1}&apos;&apos;.&lt;br/&gt;
SQLState.SERVICE_DIRECTORY_CREATE_ERROR  XBM0H.D=Directory {0}
&lt;p&gt; cannot be created.&lt;/p&gt;

&lt;p&gt;These two cases are simply a matter of changing the order of the arguments, i.e. move the Throwable argument.&lt;/p&gt;

&lt;p&gt;SQLState.LANG_FILE_ERROR  X0X63.S=Got IOException &apos;&apos;&lt;/p&gt;
{0}&apos;&apos;.&lt;br/&gt;
&lt;br/&gt;
This is a bit more tricky. Clearly the author of the message text intended that a textual representation of the original exception should be inserted into the message text. But this error code is typically used like this:&lt;br/&gt;
&lt;br/&gt;
StandardException.newException(SQLState.LANG_FILE_ERROR, ioe.toString(), ioe)&lt;br/&gt;
&lt;br/&gt;
So even if we fix the order of the arguments (making &quot;ioe&quot; the 2nd argument), we have a situation where &quot;ioe&quot; is both the next exception, and its string representation gets inserted into the message string. This seems a bit redundant to me, but I&apos;ll let the experts decide what to do... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
&lt;br/&gt;
3) newException(...) is called with multiple arguments of type Throwable. &lt;br/&gt;
Error codes:&lt;br/&gt;
SQLState.FILE_CONTAINER_EXCEPTION  XSDG3.D=Meta-data for Container {0}
&lt;p&gt; could not be accessed&lt;/p&gt;

&lt;p&gt;This error code is used as follows:&lt;br/&gt;
StandardException.newException(SQLState.FILE_CONTAINER_EXCEPTION, this, ioe)&lt;br/&gt;
So the last &quot;ioe&quot; argument appears to be redundant, and should be removed.&lt;/p&gt;

&lt;p&gt;SQLState.FILE_CREATE_NO_CLEANUP     XSDF2.S=Exception during creation of file &lt;/p&gt;
{0} for container, file could not be removed.  The exeception was: {1}.&lt;br/&gt;
&lt;br/&gt;
Here it seems that the intention has been to associate two different exceptions with the same StandardExecption:&lt;br/&gt;
StandardException.newException(SQLState.FILE_CREATE_NO_CLEANUP, ioe, file, se)&lt;br/&gt;
where &quot;ioe&quot; is an io exception, and &quot;se&quot; is a security exception. &quot;ioe&quot; will be the next exception, and &quot;se&quot;  will be inserted (as string) at {1}. This error code is also used with an explicit &quot;null&quot; instead of &quot;se&quot;.  In this case I guess the explicit &quot;null&quot; is warranted, although not very elegant...&lt;br/&gt;
&lt;br/&gt;
SQLState.FILE_CANNOT_REMOVE_FILE    XSDF4.S=Exception during remove of file {0}
&lt;p&gt; for dropped container, file could not be removed &lt;/p&gt;
{1}
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;This error code is used in much the same way as the previous one, except that in the case where there is only one execption this is used both as the next exception and as the message argument, rather than using an explicit null.&lt;br/&gt;
StandardException.newException(SQLState.FILE_CANNOT_REMOVE_FILE, se, file, se);&lt;/p&gt;

&lt;p&gt;When used with two excptions this error reports two io exceptions:&lt;br/&gt;
StandardException.newException(SQLState.FILE_CANNOT_REMOVE_FILE, ioe2, file, ioe);&lt;/p&gt;

&lt;p&gt;Comments? Please... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12313180" author="dyret" created="Fri, 10 Jun 2005 04:39:07 +0100"  >&lt;p&gt;Kathey Marsden &amp;lt;kmarsdenderby@sbcglobal.net&amp;gt; wrote in Message-id: &amp;lt;42A2114A.4060508@sbcglobal.net&amp;gt;:&lt;br/&gt;
&amp;gt;File a bug for the XBM0H exception  being generated with null&lt;br/&gt;
&amp;gt;arguments.   File a patch plus your NSinSameJVM test.&lt;br/&gt;
&amp;gt;The  NSinSameJVM test will  be a good test of a hard to test&lt;br/&gt;
&amp;gt;exception.   I think you need security manager to reproduce and only the&lt;br/&gt;
&amp;gt;network server tests run with security manager.  Embedded gets tested&lt;br/&gt;
&amp;gt;because network server just makes embedded calls.&lt;/p&gt;

&lt;p&gt;I&apos;ve tried to modify NSinSameJVM.java to test this, but it seems impossible! As long as the test i run in Network mode it is impossible to verify that the Exception is correctly constucted, because the client only gets an SqlException from the driver. The SqlException only contains the message constructed on the server so unless the null argument is actually inserted into the message, the error will not be observable in the client.&lt;br/&gt;
In embedded mode it is straight-forward to inspect the EmbedSQLException to verify that it is correctly constructed.&lt;/p&gt;

&lt;p&gt;I am starting to think that this type of error should be detected by the StandardException class itself. It should not allow adding more arguments than its message string supports, and not allow null arguments. And perhaps no Throwable args unless it already has a nested exception. These constraints should be enforced when the StandardException is created, (or modified).&lt;/p&gt;

&lt;p&gt;Case 1 and 2 in my first comment can be detected at compile time by adding dummy versions of StandardException.newException(...) that match the incorrect usage, but trigger a compilation error (by throwing an unhandled exception). Unfortunately this will also flag Case 3 as an error, making things more complicated. Maybe another (legal) overload can fix this...&lt;/p&gt;</comment>
                            <comment id="12314145" author="dyret" created="Tue, 21 Jun 2005 20:16:43 +0100"  >&lt;p&gt;The patch fixes the cases where an incorrect overload of StandardException.newException() is used. I used the better matching illegal overload trick to find these cases. Only the two illegal overloads that detected errors have been included in the patch.&lt;/p&gt;</comment>
                            <comment id="12314354" author="davidvc" created="Fri, 24 Jun 2005 06:56:42 +0100"  >&lt;p&gt;Hi, Dyre. I&apos;m kicking off a build and will let you know.  In the meantime, here are my comments on the changes.&lt;/p&gt;

&lt;p&gt;For the most part this looks good, it&apos;s nice to see these cleaned up.  A couple of comments:&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;In RAFContainer.java, you modified one message to say &quot;(see nested exception)&quot;.&lt;/p&gt;

&lt;p&gt;It seems to me the last argument of FILE_CANNOT_REMOVE_FILE should not be&lt;br/&gt;
there if all we&apos;re going to say is &quot;see nested exception&quot;.  We should either&lt;br/&gt;
remove this argument, or provide the message string.  Note that the writer&lt;br/&gt;
of this message may have intended for the exception message to be printed&lt;br/&gt;
out in the exception string and that the user could find the details of&lt;br/&gt;
the exception (e.g. the stack trace) by looking in the error log.  My&lt;br/&gt;
personal preference would be to include the exception message, better to&lt;br/&gt;
provide more detail rather than less when it comes to errors.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;The FILE_CREATE_NO_CLEANUP is a strange beast.  It is only used in &lt;b&gt;one&lt;/b&gt;&lt;br/&gt;
single place in the code with both exceptions and is creating some real&lt;br/&gt;
complexity in the StandardException.newException() methods.  It seems to&lt;br/&gt;
me that if all you want to show is the message of an exception, you&lt;br/&gt;
should pass the exception string as an argument, e.g.&lt;/p&gt;


&lt;p&gt;StandardException.newException(SQLState.FILE_CREATE_NO_CLEANUP,&lt;br/&gt;
  ioe, file, se.getMessage());&lt;/p&gt;

&lt;p&gt;If you modified the once instance where two exceptions are passed to use&lt;br/&gt;
this approach, then you wouldn&apos;t need this specialized version of&lt;br/&gt;
newException() two exception objects. You could just use the one that takes&lt;br/&gt;
(messageID, Throwable, Object, Object).&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;I understand what you&apos;re trying to accomplish with the &quot;dummy&quot; overloads,&lt;br/&gt;
but it makes me a bit nervous.  It&apos;s an odd use of the checked exception&lt;br/&gt;
model.&lt;/p&gt;

&lt;p&gt;That said, I think it does work to catch improper usage of the&lt;br/&gt;
StandardException.newException().  I just wish there was another way to&lt;br/&gt;
do this...&lt;/p&gt;

&lt;p&gt;One approach would be to have a setContainedException() method on&lt;br/&gt;
StandardException and have a policy that newException &lt;b&gt;only&lt;/b&gt; takes&lt;br/&gt;
arguments to the message string.  I think this is a better model than&lt;br/&gt;
the &quot;fake&quot; constructor methods, but the drawback is that it would&lt;br/&gt;
likely require a significant rewrite of existing code that pass&lt;br/&gt;
exceptions into StandardException.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;

&lt;p&gt;P.S. I may have other comments on your comment above, but I wanted to focus on your initial patch first.&lt;/p&gt;</comment>
                            <comment id="12314532" author="dyret" created="Mon, 27 Jun 2005 22:59:42 +0100"  >&lt;p&gt;Thanks for your comments, David!&lt;/p&gt;

&lt;p&gt;I see what you are saying about FILE_CANNOT_REMOVE_FILE, but look at how it is used other places in the code:&lt;/p&gt;

&lt;p&gt;./java/engine/org/apache/derby/impl/store/raw/data/RFResource.java:261:&lt;br/&gt;
           SQLState.FILE_CANNOT_REMOVE_FILE, fileToGo);&lt;br/&gt;
./java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java:1077:&lt;br/&gt;
               newException(SQLState.FILE_CANNOT_REMOVE_FILE, se, file,&lt;br/&gt;
./java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java:1102:&lt;br/&gt;
                   SQLState.FILE_CANNOT_REMOVE_FILE, ioe2, file, ioe);&lt;br/&gt;
./java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java:1107:&lt;br/&gt;
                   SQLState.FILE_CANNOT_REMOVE_FILE, se, file, stub);&lt;br/&gt;
./java/engine/org/apache/derby/iapi/reference/SQLState.java:489:        String FILE_CANNOT_REMOVE_FILE                              = &quot;XSDF4.S&quot;;&lt;/p&gt;

&lt;p&gt;As you can see, this error message is used both with one and TWO nested exceptions (in much the same way as FILE_CREATE_NO_CLEANUP), &lt;br/&gt;
so you cannot remove the additional parameter from the message string. I agree that you can choose to supply the same exception both as the nested exception, and as a parameter, but I doubt that this is why the error message is written the way it is... Also, notice the first use of this message, where NO nested exception is supplied! &lt;br/&gt;
&amp;#8212;&lt;br/&gt;
I think you are correct about using a string argument. However, I was cautioned about converting arguments to string before it is necessary, as this could lead to performance problems,  (if the exception is caught, the conversion to string is unnecessary). But in this particular case I doubt that performance is relevant, so I&apos;ll consider changing it... &lt;br/&gt;
&amp;#8212;&lt;br/&gt;
I understand your concerns about the dummy overloads, - it is a non-standard and non-intuitive construct. I was not sure if I should include them in the patch or just use them locally to find the StandardException usages that needed to be fixed. In the end, I decided to include them since it is easy to make another such mistake later, (and you will not be warned about it).&lt;/p&gt;</comment>
                            <comment id="12314591" author="davidvc" created="Tue, 28 Jun 2005 16:44:03 +0100"  >&lt;p&gt;Hi, Dyre, your responses seem good.  &lt;/p&gt;

&lt;p&gt;There is still something funny about FILE_CANNOT_REMOVE_FILE.  If there is a case where the second parameter is not even used, I would prefer that that usage be split into a separate message, rather than inserting a dummy string.&lt;/p&gt;

&lt;p&gt;Regarding the dummy overloads: the reason mistakes have been made and you have had to do this is because the semantics of the newException are not clear: when you want to chain an exception, where does it go?   How does one distinguish a chained exception from a parameter to the message string?  It&apos;s particularly confusing because in some cases you want an exception in both places (sometimes the same exception, sometimes different exceptions).  &lt;/p&gt;

&lt;p&gt;I think in the name of convenience (e.g. only writing one line to throw the exception) we have created semantic muddiness, and it is now forcing us to do unnatural acts to get the compiler to catch improper usage.  I&lt;/p&gt;

&lt;p&gt;I would like to suggest opening a JIRA item to fix this so the semantics are clear and the compiler can catch mistakes the way it was intended to do so &amp;#8211; with strong typing.  &lt;/p&gt;

&lt;p&gt;Perhaps this could be done as part of the larger task of migrating to J2SE 1.4 chained exceptions...  I can envision only allow message string arguments to newException(), and chaining exceptions be allowed only by calling a separate method on the exception class, e.g.:&lt;/p&gt;

&lt;p&gt;catch ( IOException ioe ) {&lt;br/&gt;
  try &lt;/p&gt;
{ somethingProtected() }
&lt;p&gt; &lt;br/&gt;
   catch ( SecurityException se ) &lt;/p&gt;
{
      StandardException stde = StandardException.newException(msgid, arg1, arg2, ioe);  
      se.setCause(ioe)
      stde.setCause(se);
      throw stde;
   }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;In terms of this patch, however, I think what you have works pretty well and prevents further misuse, as long as it&apos;s commented extremely well why we&apos;re doing this, because it is very odd.&lt;/p&gt;</comment>
                            <comment id="12315226" author="dyret" created="Thu, 7 Jul 2005 21:05:52 +0100"  >&lt;p&gt;New patch, stat output and derbyall_report based on comments from David Van Couvering.&lt;/p&gt;</comment>
                            <comment id="12315524" author="davidvc" created="Tue, 12 Jul 2005 10:39:50 +0100"  >&lt;p&gt;Diffs look good.  I&apos;ll try applying the patch and running the tests.  I&apos;ll log a bug about fixing the StandardException semantics.&lt;/p&gt;</comment>
                            <comment id="12315768" author="davidvc" created="Thu, 14 Jul 2005 03:44:28 +0100"  >&lt;p&gt;Build runs, derbyall passes with no failures.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12318069" author="davidvc" created="Tue, 9 Aug 2005 07:39:01 +0100"  >&lt;p&gt;Submitted Dyre&apos;s patch, revision 230900&lt;/p&gt;

&lt;p&gt;Sending        java/engine/org/apache/derby/impl/db/BasicDatabase.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/services/monitor/PersistentServiceImpl.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/sql/execute/JarUtil.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/RawStore.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/data/InputStreamContainer.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/log/LogAccessFile.java&lt;br/&gt;
Sending        java/engine/org/apache/derby/impl/store/raw/log/LogToFile.java&lt;br/&gt;
Sending        java/testing/org/apache/derbyTesting/functionTests/master/authorize.out&lt;br/&gt;
Transmitting file data ............&lt;br/&gt;
Committed revision 230900.&lt;/p&gt;
</comment>
                            <comment id="12320765" author="dyret" created="Thu, 1 Sep 2005 18:30:52 +0100"  >&lt;p&gt;David Van Couvering Committed revision 230900.&lt;/p&gt;</comment>
                            <comment id="12373892" author="dyret" created="Tue, 11 Apr 2006 02:37:20 +0100"  >&lt;p&gt;Need to set fixin&lt;/p&gt;</comment>
                            <comment id="12373895" author="dyret" created="Tue, 11 Apr 2006 02:41:58 +0100"  >&lt;p&gt;Setting fixin to 10.2 since this does not seem important enough to warrant a back-port to 10.1.3.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="29590">DERBY-128</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12311118" name="derby-336.diff" size="17198" author="dyret" created="Thu, 7 Jul 2005 21:05:52 +0100"/>
                            <attachment id="12311119" name="derby-336.stat" size="897" author="dyret" created="Thu, 7 Jul 2005 21:05:52 +0100"/>
                            <attachment id="12311120" name="derbyall_report.txt" size="3899" author="dyret" created="Thu, 7 Jul 2005 21:05:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 6 Jun 2005 00:57:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>21905</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0wsf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39130</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>