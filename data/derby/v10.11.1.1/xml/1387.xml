<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:12:43 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1387/DERBY-1387.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1387] Add JMX extensions to Derby</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1387</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;This is a draft requirement specification for adding monitoring and management extensions to Apache Derby using JMX. The requirements document has been uploaded on JIRA as well as the Derby Wiki page at &lt;a href=&quot;http://wiki.apache.org/db-derby/_Requirement_Specifications_for_Monitoring_%26_Management_Extensions_using_JMX&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/_Requirement_Specifications_for_Monitoring_%26_Management_Extensions_using_JMX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers and Users are requested to please look at the document (feature list in particular) and add their own rating to features by adding a coloumn to the table.&lt;/p&gt;

&lt;p&gt;Comments are welcome.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12344126">DERBY-1387</key>
            <summary>Add JMX extensions to Derby</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="johnemb">John H. Embretsen</assignee>
                                    <reporter username="sanket">Sanket Sharma</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Jun 2006 19:06:23 +0100</created>
                <updated>Wed, 1 Jul 2009 01:34:30 +0100</updated>
                            <resolved>Fri, 4 Apr 2008 16:49:10 +0100</resolved>
                                                    <fixVersion>10.4.1.3</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>JMX</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                                                            <comments>
                            <comment id="12415374" author="davidvc" created="Fri, 9 Jun 2006 00:56:42 +0100"  >&lt;p&gt;Hi, Sanket.  Can you re-attach your documents as individual non-compressed files?  That makes it a lot easier to read, you don&apos;t have to download and zip, you can just go to it straight from JIRA. Thanks!&lt;/p&gt;</comment>
                            <comment id="12415382" author="sanket" created="Fri, 9 Jun 2006 01:36:51 +0100"  >&lt;p&gt;Requirements in a single html file.&lt;/p&gt;</comment>
                            <comment id="12415388" author="sanket" created="Fri, 9 Jun 2006 01:49:47 +0100"  >&lt;p&gt;Please download this file for JMX requirements. This is the updated version.&lt;/p&gt;</comment>
                            <comment id="12415402" author="davidvc" created="Fri, 9 Jun 2006 02:51:45 +0100"  >&lt;p&gt;Hi, Sanket, thanks for a very nicely organized and formatted set of requirements!&lt;/p&gt;

&lt;p&gt;Here are my comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In Section 5.1 you are making the implicit assumption that the JMX functionality is targetted towards Derby being an enterprise-class database.  I&apos;m not sure if everyone would agree that&apos;s the sweet spot for Derby.  If you look at the charter, the focus is on zero-administration, embeddability, standards-based, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That said, I think JMX is important (see &quot;ease of use&quot; and &quot;standards-based&quot;), but when looking at requirements I want to make sure we don&apos;t get too top-heavy...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You talk about two key areas that JMX can contribute to: monitoring and tuning.  I would assume &quot;tuning&quot; includes general system configuration too.  I can see all the existing Derby properties being exposed through a JMX interface.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Under proposed features, it would really help if each feature had its own unique identifier, like MON-1, MON-2, MAN-1, MAN-2, NOT-1, NOT-2, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A well-thought-out and great list of features!  There are a &lt;b&gt;lot&lt;/b&gt; of features here.   So, how to decide?  Your separate table with priorities is one approach, but I&apos;d like to propose something a little more interactive.  I&apos;d like the feature list section of the document to a Wiki page (or maybe it makes sense to migrate the entire document to Wik? - your call), and announce it on the derby-user and derby-dev lists.  Each developers/user could add a column to the table and assign their priorities to each feature.   This would be a chance for the community to get involved in picking which JMX features they&apos;d like to see.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you do decide to stick with the current model, I highly recommend merging the priorities with the main feature table, so you are not constantly having to keep the two in synch, and so that readers don&apos;t have to keep switching back and forth between the two tables.  &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m a little confused about not providing remote access.  Can you describe how an administrator who is not aJMX programmer can view, monitor, and tune an embedded Derby database that is not part of a larger application framework that provides JMX support?  Whenever I talk to users, remote monitoring and administration are on the TOP of their list.  I think this is required, but we do have to make sure we understand the security implications of such a topology.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A commonly missed aspect of requirements documents are non-functional requirements.  These are &quot;qualities&quot; of the overall feature.  Things like performance (response time, thorughput, number of concurrent users), security, ease of use, etc.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You had mentioned building our own JMX console.  Is that still on the plate?  Or do we just let existing JMX tools plug into our framework?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12416044" author="sanket" created="Wed, 14 Jun 2006 02:02:59 +0100"  >&lt;p&gt;The requirement specification for monitoring and management extensions for Apache Derby has been drafted and put up on Derby Wiki for discussion. Developers and Users and requested to please look at the document and assign priorities to the features listed. &lt;/p&gt;

&lt;p&gt;You are requested to add a coloumn to the feature table by your name and put your version of priorities in the table.&lt;/p&gt;

&lt;p&gt;The wiki page maybe accessed at&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/_Requirement_Specifications_for_Monitoring_%26_Management_Extensions_using_JMX&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/_Requirement_Specifications_for_Monitoring_%26_Management_Extensions_using_JMX&lt;/a&gt;&lt;br/&gt;
Comments are welcome.&lt;/p&gt;
</comment>
                            <comment id="12416047" author="sanket" created="Wed, 14 Jun 2006 02:19:12 +0100"  >&lt;p&gt;David,&lt;/p&gt;

&lt;p&gt;Can you please tell me more about non functional requirements? &quot; Things like performance (response time, thorughput, number of concurrent users), security, ease of use, etc &quot; - how exactly can I put them in a requirements doc?  &lt;/p&gt;</comment>
                            <comment id="12418522" author="mikem" created="Fri, 30 Jun 2006 03:41:43 +0100"  >&lt;p&gt;for lack of a better component made it services.  &lt;/p&gt;</comment>
                            <comment id="12429398" author="sanket" created="Mon, 21 Aug 2006 12:44:36 +0100"  >&lt;p&gt;Submitting The Code for Derby&apos;s JMX Functionality as part of my Google SOC project.&lt;/p&gt;

&lt;p&gt;The patch addresses the following: &lt;/p&gt;

&lt;p&gt;1) Start derby with monitoring extensions enabled. To start derby with monitoring extensions, you need to set derby.jmx environment variable while starting the JVM&lt;/p&gt;

&lt;p&gt;2) Derby can be monitored locally or remotely. Password authentication and SSL support is provided via SUN&apos;s RMI connector implementations. See the following URL for details&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) The MBeans can be viewed in JConsole.&lt;/p&gt;

&lt;p&gt;4) This implementation supports three different MBeans:&lt;/p&gt;

&lt;p&gt;-&amp;gt;SystemMBean for viewing and changing system properties. Please note that as of now changes are not persisted to derby.properties file&lt;br/&gt;
-&amp;gt;DatabaseMBean, one per database. Any changes to database properties are persisted.&lt;br/&gt;
-&amp;gt;VersionMBean for viewing DerbyVersion Information.&lt;/p&gt;

&lt;p&gt;The code was built using JDK1.6 and uses Sun&apos;s PlatformMBean server for exposing system health and Derby&apos;s MBeans.&lt;/p&gt;

&lt;p&gt;The code is up for review and contains the following files:&lt;/p&gt;

&lt;p&gt;iapi/services/mbeans/ManagementService.java Interface declaration for management service&lt;br/&gt;
/iapi/services/mbeans/MBeanFactory Factory interface for creating MBeans&lt;/p&gt;

&lt;p&gt;/impl/services/mbeans/BasicManagementService Management service that starts up MBeanServer and Registry&lt;br/&gt;
/impl/services/mbeans/BasicMBeanFactory Implementation of MBeanFactory interface&lt;br/&gt;
/impl/services/mbeans/DerbySystemMBean For exposing derby system properties&lt;br/&gt;
/impl/services/mbeans/DatabaseMBean For exposing a database&apos;s properties and operation for Stopping a database&lt;br/&gt;
/impl/services/mbeans/mbeans-descriptors.xml MBean descriptor used by Apache Commons modeler framework.&lt;/p&gt;

&lt;p&gt;tools/jars/mbeansDBMSclass.properties lists the classes, so that they may be included in the derby jar.&lt;/p&gt;

&lt;p&gt;Minor changes to build files and properties files have also been made to compile the code.&lt;/p&gt;

&lt;p&gt;5) The JMX functionality was built using the Apache modeler commons framework available at &lt;a href=&quot;http://commons.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://commons.apache.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) This patch DOES NOT include any test cases. I will be posting them in a seperate patch, as the test cases themselves will amount to substantial code.&lt;/p&gt;

&lt;p&gt;7)API docs are provided with the files.&lt;/p&gt;

&lt;p&gt;I will &lt;b&gt;really&lt;/b&gt; appreciate if someone can help me with identifying  which properties are System properties, which are database properties and which can be modified at runtime. I referred to iapi.reference.Property.java. However, I felt descriptions for some properties were ambiguous. The next iteration will probably be a fix for such properties.&lt;/p&gt;

&lt;p&gt;I welcome any comments.&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br/&gt;
Sanket Sharma&lt;/p&gt;

</comment>
                            <comment id="12429432" author="andreask" created="Mon, 21 Aug 2006 16:08:54 +0100"  >&lt;p&gt;Hi, thanks for providing this patch. I have tried compiling it, and I do have the following comments:&lt;/p&gt;

&lt;p&gt;1. It seems that most of the classes have multiple entries in the patch file, so when applying the patch, I got the same class multiple times in the same file.&lt;/p&gt;

&lt;p&gt;2. After fixing 1, all code, except one class seems to be able to compile with JDK 1.4. The class which depends on JDK 1.5 is BasicManagementService. It uses java.lang.management.ManagementFactory to create the MBeanServer. Instead I would propose simply using javax.management.MBeanServerFactory. This would allow the code to be compiled on JDK 1.4.  &lt;/p&gt;

&lt;p&gt;If you do need the JDK 1.5 libraries, the build files must be set up so that it is still possible to compile on JDK 1.4 (ie. by skipping the JMX targets).&lt;/p&gt;</comment>
                            <comment id="12432262" author="davidvc" created="Sat, 2 Sep 2006 00:56:28 +0100"  >&lt;p&gt;No matter what I try I can&apos;t get past the error saying &quot;javax.management not found.&quot;  I have explicitly set my JAVA_HOME to the 1.6 JDK and the 1.5 JDK to no success.  Is this because javax.management requires a jar file that is independent of the JDK, even when you&apos;re building with JDK 1.5 or 1.6?&lt;/p&gt;

</comment>
                            <comment id="12510185" author="olegborstad" created="Wed, 4 Jul 2007 14:42:33 +0100"  >&lt;p&gt;This patch is a clean version of derbyjmx.patch which was corrupted by multiple entries for each source file. No additional features are added. For those who had trouble using the old patch, try this one.&lt;/p&gt;

&lt;p&gt;Please note that two JAR files are needed in the classpath to be able to build/run with this patch:&lt;/p&gt;

&lt;p&gt;1. Apache Commons Modeler- commons-modeler-2.0.1.jar&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/site/downloads/downloads_commons-modeler.cgi&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jakarta.apache.org/site/downloads/downloads_commons-modeler.cgi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. Apache Commons Logging - commons-logging-1.1.jar&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/site/downloads/downloads_commons-logging.cgi&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jakarta.apache.org/site/downloads/downloads_commons-logging.cgi&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12513532" author="olegborstad" created="Wed, 18 Jul 2007 11:53:00 +0100"  >&lt;p&gt;I want to read and write database-wide properties dynamically. Tuning Derby document says to use the system procedures through SQL statements. Does this mean I need to setup a connection? Is there any reason not to have a connection in a management service, i.e exposing Derby of additional overhead etc.?&lt;/p&gt;</comment>
                            <comment id="12516894" author="olegborstad" created="Wed, 1 Aug 2007 09:30:28 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-1.diff&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-1.stat&lt;/p&gt;

&lt;p&gt;This patch adds a management and monitoring service to Derby through JMX extentions. The service is designed for a client/server environment. The patch is a refactor and expansion of Sanket Sharma&apos;s work.&lt;/p&gt;

&lt;p&gt;No tests have been run. Only functional testing of the features has been done. No test cases are included.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FEATURES&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1) Deployment&lt;br/&gt;
Derby can be monitored locally or remotely. Both configurations use the JVM&apos;s built-in instrumentation as the JMX agent, where password authentication and SSL support is provided.&lt;/p&gt;

&lt;p&gt;The management functionality is implemented through 4 managed beans (MBeans):&lt;/p&gt;

&lt;p&gt;2) VersionMBean&lt;br/&gt;
View Derby version information.&lt;br/&gt;
No operations are provided.&lt;/p&gt;

&lt;p&gt;3) DerbySystemMBean&lt;br/&gt;
View and change system properties. Changes to properties are not persisted in derby.properties, because currently no such mechanism exists in the Derby engine. Default values are displayed as &amp;lt;default&amp;gt;, because they are not accessible through the java Properties. Derby properties are visible through Properties only if set explicitly. There has been discussion on derby-dev on this issue, but no JIRA-issue is up yet.&lt;/p&gt;

&lt;p&gt;4) MDatabaseMBean&lt;br/&gt;
All booted databases are wrapped by a bean which provides access to database properties. Changes are persistent.&lt;br/&gt;
The following operations are provided:&lt;br/&gt;
Stopping the database, backup, checking table consistency and adding database users. There is also an operation to connect as a user. This authenticates the management service and is to be used if Derby authentication is enabled.&lt;/p&gt;

&lt;p&gt;5) NSCMBean&lt;br/&gt;
The public API of NetworkServerControl is made available through this bean. All methods of this API can now be invoked from a remote machine through the management service. This includes ping, shutdown, logging etc.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HOW TO BUILD AND RUN&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Build files are edited to compile the management service. The ManagementService and BasicManagementService classes are compiled with JDK 1.5. My edits of the build files might not be optimal so I would appreciate if anyone can review those.&lt;/p&gt;

&lt;p&gt;Run&lt;/p&gt;

&lt;p&gt;Start Derby with management by using the system property &quot;derby.jmx&quot;. The property value is not relevant. Certain other system properties must also be set when starting the server-JVM to enable the built-in JMX agent. These properties vary with local/remote and security configurations. For details refer to the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of running with JMX agent enabled for local management and without security features:&lt;br/&gt;
java -Dcom.sun.management.jmxremote -Dderby.jmx=true org.apache.derby.drda.NetworkServerControl start -noSecurityManager&lt;/p&gt;

&lt;p&gt;JConsole (found in JDK_HOME/bin) can be used as the management GUI. Details in above URL.&lt;/p&gt;

&lt;p&gt;Implementation details&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JVM platform instrumentation&lt;br/&gt;
The JVM has built-in instrumentation (from JDK 1.5) that enables you to monitor and manage the JVM and instrumented applications using JMX. The Derby management service uses this for both local and remote management.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modifications to Derby engine code&lt;br/&gt;
Derby boots the management service when the system property &apos;derby.jmx&apos; is set. The module is loaded and started through the Derby monitor as done for other services. The changes to the Derby code are small and should hopefully not be a problem. MBeans are created when instrumented Derby resources are booted. For example, BasicDatabase.boot() instantiates an instance of MDatabaseMBean.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ManagementService&lt;br/&gt;
This is the management service interface (found in org.apache.derby.iapi.services.mbeans), which holds the MBeanServer and methods to create beans. All beans should be created through this interface. To expand with more beans, one needs to find the appropriate Derby code to instrument, code a bean for it, and make factory methods in the ManagementService.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All beans are implemented as Standard MBeans.&lt;/p&gt;

&lt;p&gt;API documentation is provided with the source code. The attached svn stat file lists the modifications and added files.&lt;/p&gt;</comment>
                            <comment id="12518104" author="olegborstad" created="Tue, 7 Aug 2007 09:12:18 +0100"  >&lt;p&gt;Attaching a functional specification for this feature.&lt;/p&gt;</comment>
                            <comment id="12518420" author="bernt" created="Wed, 8 Aug 2007 12:59:58 +0100"  >&lt;p&gt;The patch does not compile in my environment. Seems like something is missing in java/engine/org/apache/derby/iapi/build.xml which tries to compile the JMX stuff with JDK 1.4.&lt;/p&gt;</comment>
                            <comment id="12518424" author="olegborstad" created="Wed, 8 Aug 2007 13:16:56 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-2.diff&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-2.stat&lt;/p&gt;

&lt;p&gt;Attaching a new patch fixing the compile issue Bernt reported.&lt;/p&gt;</comment>
                            <comment id="12518979" author="olegborstad" created="Fri, 10 Aug 2007 11:30:45 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-3.diff&lt;/p&gt;

&lt;p&gt;Attaching a new version of the patch fixing some issues reported by Bernt (thank you for the help). &lt;/p&gt;

&lt;p&gt;The NSCMBean (networkservercontrol mbean) is moved to DRDA to fix a packaging issue.&lt;/p&gt;

&lt;p&gt;I have also edited compilepath.properties to add jmxri.jar. This is the JMX extension which should be a part of JDK1.5 and up. I was not able to build without adding the jar file explicitly though, probably because I have not set up the build files correctly.  So to compile you need to download this jar file for now.&lt;/p&gt;</comment>
                            <comment id="12519008" author="bernt" created="Fri, 10 Aug 2007 13:28:20 +0100"  >&lt;p&gt;Great work, Ole Gunnar. I will take it from here. &lt;br/&gt;
The following issues needs to be resolved: &lt;br/&gt;
1) make compilation of the jmx parts optional and dependent on wether jmxri.jar is present in tools/java (jmxri.jar is necessary for compiling and for running jmx in jdk 1.4)&lt;br/&gt;
2) make JMX work in embedded mode (seems to be a trivial issue)&lt;br/&gt;
3) make the start command more simple for the default case&lt;br/&gt;
4) testing&lt;br/&gt;
5) Consider reducing the number of properties exposed through JMX. There is a conflict here between ease of use for the average user and the usability for the advanced user.&lt;/p&gt;</comment>
                            <comment id="12520292" author="rhillegas" created="Thu, 16 Aug 2007 17:26:30 +0100"  >&lt;p&gt;Thanks to Ole  Gunnar for the great functional spec. I have a couple comments:&lt;/p&gt;

&lt;p&gt;1) Under DatabaseMBean, the property associated with DatabaseName looks wrong to me.&lt;/p&gt;

&lt;p&gt;2) Under DatabaseMBean: I have reservations about the addDBUser() operation. I do not think that we should be encouraging customers to use the BUILTIN authentication scheme. In that scheme passwords are stored in plaintext. That seems very insecure to me. I think it&apos;s ok for testing purposes but not for a production environment. I recommend against exposing this operation.&lt;/p&gt;

&lt;p&gt;3) In general, I think we need to beef up the authorization story for this JMX-based administration before we expose it to customers. Incremental development is great, but I think real production usage requires more controls. If I understand the spec correctly, it seems that godlike administrative powers over all databases are granted to the VM&apos;s administrator. I think this is inappropriate for VMs which host other applications besides Derby. I propose the following:&lt;/p&gt;

&lt;p&gt;a) The VersionMBean looks pretty harmless to me. I don&apos;t think it needs more controls.&lt;/p&gt;

&lt;p&gt;b) I think that in order to get your hands on a SystemMBean or a NSCMBean, you should be forced to authenticate at the Derby system-wide level. Furthermore, this authentication should result in your being a system-wide DatabasePrincipal to whom the policy file grants &apos;permission org.apache.derby.security.SystemPermission &quot;systemAdministration&quot;&apos;. For more information on this permissions scheme, see the functional spec for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;c) You must authenticate as the database&apos;s DBA in order to get your hands on the corresponding DatabaseMBean.&lt;/p&gt;

&lt;p&gt;4) Continuing on the topic of authorization: If I understand the spec correctly, it seems that, potentially, the Derby System Administrator and all of the Derby DBAs will be given the password for VM-wide JMX-based administration. In theory, this gives these users the ability to manipulate other applications running in the VM. The user guides should state clearly that these other applications are responsible for raising additional authorization hurdles if they are uncomfortable with these godlike powers that are granted to Derby super-users.&lt;/p&gt;</comment>
                            <comment id="12520296" author="djd" created="Thu, 16 Aug 2007 17:38:23 +0100"  >&lt;p&gt;Rick&amp;gt; I do not think that we should be encouraging customers to use the BUILTIN authentication scheme. In that scheme passwords are stored in plaintext.&lt;/p&gt;

&lt;p&gt;Just to be clear, passwords are only stored in clear text when set at the system level (in derby.properties or as system properties). When stored in the database they are &lt;b&gt;not&lt;/b&gt; stored in clear text.&lt;/p&gt;</comment>
                            <comment id="12520298" author="rhillegas" created="Thu, 16 Aug 2007 17:53:37 +0100"  >&lt;p&gt;Thanks for the clarification, Dan. Nevertheless, even when stored in the database, aren&apos;t the plaintext passwords are still visible to the DBA?&lt;/p&gt;</comment>
                            <comment id="12520303" author="djd" created="Thu, 16 Aug 2007 18:05:42 +0100"  >&lt;p&gt;Rick&amp;gt; Nevertheless, even when stored in the database, aren&apos;t the plaintext passwords are still visible to the DBA?&lt;/p&gt;

&lt;p&gt;No. There are stored as hashed values of the password, similar to /etc/password in unix systems.&lt;/p&gt;</comment>
                            <comment id="12520323" author="rhillegas" created="Thu, 16 Aug 2007 18:56:59 +0100"  >&lt;p&gt;I see. So if the DBA uses system procedures to read the passwords, hashed values come back.&lt;/p&gt;

&lt;p&gt;Starting another thread on this topic: Password management is generally handled by end-users. An administrator sets up an initial password and the end-user then changes it immediately afterward. I don&apos;t think our BUILTIN scheme works this way--although we could improve it by giving end-users a tool to change their passwords. The JMX-based password setting could be useful if we just see it as a way for the DBA to initialize passwords or forcibly reset them when the user forgets her credentials.&lt;/p&gt;</comment>
                            <comment id="12520325" author="djd" created="Thu, 16 Aug 2007 19:05:53 +0100"  >&lt;p&gt;Rick&amp;gt; So if the DBA uses system procedures to read the passwords, hashed values come back. &lt;/p&gt;

&lt;p&gt;I don&apos;t think so. I think NULL will be returned for a password lookup using the get database property method.&lt;/p&gt;

&lt;p&gt;Only is the DBA has read acces to the raw files, or uses the security hole in export could they see the hash values of the passwords.&lt;/p&gt;</comment>
                            <comment id="12522064" author="bernt" created="Thu, 23 Aug 2007 09:53:21 +0100"  >&lt;p&gt;Uploaded new patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-4.diff (and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-4). I have corrected some JDBC driver use which did nok work in embedded mode. I have changed the exception handling to get rid of the System.out.println and ex.printStackTrace calls. Now the JMX classes dump the stack trace on derby.log and returns an exception back to the MBean server. It will is the JMX client&apos;s resposibility to report properly to the user and take the needed action (and possibly advise the user to look in derby.log). This patch is still not suitable for commit, but feel free to test it out e.g. with the jconsole.&lt;/p&gt;

&lt;p&gt;The authorization issues raised by Rick &amp;amp; Dan (thanks for your comments!) will be discussed and handeled at a later stage. &lt;/p&gt;</comment>
                            <comment id="12530417" author="bernt" created="Wed, 26 Sep 2007 11:58:21 +0100"  >&lt;p&gt;In oder to be able to make the JMX-components comply with the Derby Authentication/Athorization scheme: Implement and BootedDatabasesMBean which will hold a list of booted databases in the system. To manage a database, the user must provided the needed credentials for the DB Owner before the DatabaseMBean for the given database becomes available in the MBean server. This should address Rick&apos;s 3c) comment.&lt;/p&gt;</comment>
                            <comment id="12530426" author="bernt" created="Wed, 26 Sep 2007 13:08:25 +0100"  >&lt;p&gt;Usability issue: &lt;/p&gt;

&lt;p&gt;Instead of controlling whether JMX for Derby is enabled or not by derby properties and/or command line options, this should be dependent on the availability of an MBean server. That is, JMX MBeans for Derby will be generated and registered if ManagerFactory.getPlatformMBeanServer() returns a non-null value. The Mbeans will not be available outside the VM unless the MBean server is instructed to do so. For Sun&apos;s VM, this is done by setting a system property, e.g. like -Dcom.sun.management.jmxremote&lt;/p&gt;

&lt;p&gt;When this is done, an JMX compliant application (e.g. JConsole) may connect to the MBean server if run on the same machine and from the same OS user as the VM is running. More properties may be set, to enable connections from another machine, enable/disable ssl etc. See e.g. &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/jmx/remote/jconsole.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/books/tutorial/jmx/remote/jconsole.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12530654" author="bernt" created="Thu, 27 Sep 2007 09:15:00 +0100"  >&lt;p&gt;On second thought. Making the Derby JMX automatically available in the MBean server will make it impossible for the user to make some application with an embedded Derby db manageable thorugh JMX without also making Derby manageable thorugh JMX. I would think that this &quot;all or nothing&quot; granularity could be a problem for some applications. So we would need an explicit derby.system.jmx property for enabling the management service anyway. Any comments?&lt;/p&gt;</comment>
                            <comment id="12531028" author="rhillegas" created="Fri, 28 Sep 2007 15:37:49 +0100"  >&lt;p&gt;Bernt&amp;gt; In oder to be able to make the JMX-components comply with the Derby Authentication/Athorization scheme: Implement and BootedDatabasesMBean which will hold a list of booted databases in the system.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure I understand how this would work. Does this mean that administration would only be possible on databases which have already been brought up by normal application activity? What if I want to administer a database which has been taken down and has no connected users?&lt;/p&gt;

&lt;p&gt;Bernt&amp;gt; On second thought. Making the Derby JMX automatically available in the MBean server will make it impossible for the user to make some application with an embedded Derby db manageable thorugh JMX without also making Derby manageable thorugh JMX. I would think that this &quot;all or nothing&quot; granularity could be a problem for some applications.&lt;/p&gt;

&lt;p&gt;Maybe we should only allow JMX management of Derby if authentication is turned on. If we did that, would we need an extra JMX-enabling knob?&lt;/p&gt;</comment>
                            <comment id="12531505" author="bernt" created="Mon, 1 Oct 2007 13:53:16 +0100"  >&lt;p&gt;Rick&amp;gt; I&apos;m not sure I understand how this would work. Does this mean that administration would only be possible on databases which have already been brought up by normal application activity? &lt;/p&gt;

&lt;p&gt;Yes, in the current patch, that is the case.&lt;/p&gt;

&lt;p&gt;Rick&amp;gt; What if I want to administer a database which has been taken down and has no connected users?&lt;/p&gt;

&lt;p&gt;We will also need a knob for enabling of mangement of  databases that have not been booted or have been shut down.&lt;/p&gt;

&lt;p&gt;Rick&amp;gt; Maybe we should only allow JMX management of Derby if authentication is turned on. If we did that, would we need an extra JMX-enabling knob?&lt;/p&gt;

&lt;p&gt;Interesting thought. But I hope to avoid the following scenario (at least in the normal use-cases): Given that JMX authentication is turned on, the user has to 1) Authenticate to be allowed access to the JMX ssystem, 2) Authenticate to be allowed to manage the Derby system and 3) Authenticate again to be recognized as DB owner of a given database. In other words: Authenticate 3 times before being allowed to de something with a specific database through JMX.&lt;/p&gt;</comment>
                            <comment id="12532060" author="bernt" created="Wed, 3 Oct 2007 12:15:58 +0100"  >&lt;p&gt;New version. Works now with jar-files (pervious tests was run from classes) and with security manager. Also did some cleanup and improvements in the code.&lt;/p&gt;</comment>
                            <comment id="12532414" author="bernt" created="Thu, 4 Oct 2007 13:54:08 +0100"  >&lt;p&gt;New patch &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-6. Fixed some problems with db stop in embedded mode. derby.jmx property renamed to derby.system.jmx&lt;/p&gt;</comment>
                            <comment id="12532759" author="rhillegas" created="Fri, 5 Oct 2007 20:41:02 +0100"  >&lt;p&gt;This network server control bean implemented by this JIRA adds another way to shutdown a server. This needs to coordinate with the shutdown improvements being introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12532760" author="rhillegas" created="Fri, 5 Oct 2007 20:48:30 +0100"  >&lt;p&gt;Thanks for the patch, Bernt. I have a couple comments:&lt;/p&gt;

&lt;p&gt;General:&lt;/p&gt;

&lt;p&gt;Bean method names: Maybe the accessor  method names could include all&lt;br/&gt;
of the legs of the property names (except for the leading &quot;derby&quot;).&lt;br/&gt;
So, for instance, getMinimumRecordSize() would become&lt;br/&gt;
getStorageMinimumRecordSize(). Then getMonitor() would become&lt;br/&gt;
getLocksMonitor() and make a little more sense. This provides a&lt;br/&gt;
regular pattern for others to follow when more properties are added&lt;br/&gt;
and I think, in the long run, will result in less confusion and fewer&lt;br/&gt;
name collisions.&lt;/p&gt;

&lt;p&gt;What are our internationalization expectations here? I see that&lt;br/&gt;
exceptions have hard-coded English strings in them.&lt;/p&gt;

&lt;p&gt;Couldn&apos;t we use the constants in Property.java rather than hard-coded&lt;br/&gt;
property strings? If the problem is that Property.java doesn&apos;t live in&lt;br/&gt;
the correct jar file, then this can be solved the way we tackled this&lt;br/&gt;
problem for SQLState.java.&lt;/p&gt;


&lt;p&gt;MDatabase:&lt;/p&gt;

&lt;p&gt;I think that user management method names should indicate that we are&lt;br/&gt;
configuring users for the BUILTIN mode. Could we have a method for&lt;br/&gt;
deleting a BUILTIN user too? I think that the user management methods&lt;br/&gt;
should raise an exception if BUILTIN authentication hasn&apos;t been&lt;br/&gt;
enabled--I think it would be confusing to be able to call these&lt;br/&gt;
methods if they aren&apos;t really going to have an effect.&lt;/p&gt;

&lt;p&gt;Does anything prevent more than one client from manipulating a&lt;br/&gt;
database at the same time? Should we build some sort of lock to&lt;br/&gt;
control this?&lt;/p&gt;


&lt;p&gt;NetworkServerControlMgmt&lt;/p&gt;

&lt;p&gt;The header comment says that this class uses callbacks to&lt;br/&gt;
NetworkServerControlImpl rather than calling&lt;br/&gt;
NetworkServerControl. That makes me wonder, why?&lt;/p&gt;

</comment>
                            <comment id="12533127" author="bernt" created="Mon, 8 Oct 2007 14:42:57 +0100"  >&lt;p&gt;Thanks Rick. I agree to your comments on the getter/setter methods. Internationalization should also be done and hard-coded property names will be replaced with constants from Property.java. &lt;/p&gt;

&lt;p&gt;WRT user managemement: This has to evolve into a better interface, and you should consider what now there as a proof of concept.&lt;/p&gt;

&lt;p&gt;There is no calls to NetworkServerControlImpl that can&apos;t be done through NetworkServerControl, so I&apos;m not sure that there is a reason. I&apos;ll look into it.&lt;/p&gt;
</comment>
                            <comment id="12534784" author="bernt" created="Mon, 15 Oct 2007 10:24:06 +0100"  >&lt;p&gt;New rev. 7 of the patch. Hardcoded property names removed and default values filled in and some more tidying of code. The calls from NetworkServerControlMgt has do be through NetworkServerControlImpl since the MBean is registered from there and there is no backpointer to NetworkServerControl. &lt;/p&gt;</comment>
                            <comment id="12535775" author="rhillegas" created="Wed, 17 Oct 2007 23:51:29 +0100"  >&lt;p&gt;Thanks for rev 7 of the patch, Bernt. A couple more comments:&lt;/p&gt;

&lt;p&gt;1) MDatabase.checkTableConsistency() - If this method is going to&lt;br/&gt;
return a String rather than a boolean, then I wonder if the failure&lt;br/&gt;
case should just return the message from the exception--rather than&lt;br/&gt;
repackaging that message as a SQLException.&lt;/p&gt;

&lt;p&gt;2) MDatabase.getProperty() - This method seems to map states&lt;br/&gt;
to strings as follows:&lt;/p&gt;

&lt;p&gt;  SQLException -&amp;gt; silently swallowed and replaced with a default value&lt;br/&gt;
  Property not set -&amp;gt; default value&lt;br/&gt;
  Property is set -&amp;gt; its value&lt;br/&gt;
  Not connected to database -&amp;gt; the string &quot;N/A&quot;&lt;/p&gt;

&lt;p&gt;I think that mapping the first two states to the same outcome may turn&lt;br/&gt;
out to be confusing.&lt;/p&gt;

&lt;p&gt;3) MDatabase.getStorageTempDirectory() - What is the default returned&lt;br/&gt;
by this method? Is STORAGE_TEMP_DIRECTORY always supposed to be set?&lt;br/&gt;
If not, this method seems to return a misleading default.&lt;/p&gt;

&lt;p&gt;4) DerbySystemMBean.setStoragePageSize() - I think that the conversion&lt;br/&gt;
of 4k, 8k, 16k, and 32k to stringified integers should happen before the initial&lt;br/&gt;
check for legal values. As it stands, I don&apos;t think the conversion&lt;br/&gt;
will ever be executed.&lt;/p&gt;
</comment>
                            <comment id="12537011" author="bernt" created="Tue, 23 Oct 2007 15:00:42 +0100"  >&lt;p&gt;Rick: Thanks for your comments.&lt;/p&gt;

&lt;p&gt;WRT: exceptions. From my point of view, it would be best to just&lt;br/&gt;
propagate SQLExceptions through JMX back to the client. That would&lt;br/&gt;
give a Derby-specific management application the best possibilites of&lt;br/&gt;
a meaningful user interface. The problem is the generic JMX-consoles,&lt;br/&gt;
like JConsole, which then would get an UnmarshalException or a&lt;br/&gt;
ClassNotFoundException unless the user points to the derby Jar-files.&lt;/p&gt;

&lt;p&gt;With JConsole, this is somewhat awkward, since the user has to start&lt;br/&gt;
JConsole e.g. like this:&lt;/p&gt;

&lt;p&gt;jconsole -J-Djava.class.path=$JAVA_HOME/lib/jconsole.jar:$JAVA_HOME/tools.jar:db-derby-10.3.1.4-lib/lib/derby.jar&lt;/p&gt;

&lt;p&gt;Anyway, I guess any compliant generic JMX client would have this&lt;br/&gt;
capability one way or another since the JMX specification, as I read&lt;br/&gt;
it, allows MBean methods to throw any exception.&lt;/p&gt;</comment>
                            <comment id="12543119" author="dyret" created="Fri, 16 Nov 2007 16:15:23 +0000"  >&lt;p&gt;Hi Bernt and Rick, &lt;/p&gt;

&lt;p&gt;What is the status of this issue? Will there be another rev of the patch? If so; I think it would be good to uncheck &apos;Patch available&apos;.&lt;/p&gt;
</comment>
                            <comment id="12543480" author="bernt" created="Mon, 19 Nov 2007 07:49:14 +0000"  >&lt;p&gt;New patch pretty soon.&lt;/p&gt;</comment>
                            <comment id="12543912" author="bernt" created="Tue, 20 Nov 2007 14:56:21 +0000"  >&lt;p&gt;New version (second last?). Authentication implemented. Propagation of SQLExceptions to JMX server. Some new functions (bootDB, autnehticateAs etc).&lt;/p&gt;</comment>
                            <comment id="12543913" author="bernt" created="Tue, 20 Nov 2007 14:57:27 +0000"  >&lt;p&gt;... and now with license granted...&lt;/p&gt;</comment>
                            <comment id="12543933" author="rhillegas" created="Tue, 20 Nov 2007 16:17:39 +0000"  >&lt;p&gt;Thanks for the patch, Bernt. Here&apos;s some quick initial feedback: When I apply this patch to a clean subversion client, I get build errors when I run &quot;ant all&quot;. It seems that the compilation of the JMX support is being pulled in by the compile_references target. That target uses the jdk1.4 libraries and so doesn&apos;t see the javax.management package:&lt;/p&gt;

&lt;p&gt;compile_reference:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 4 source files to /Users/rh161140/derby/mainline/trunk/classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /Users/rh161140/derby/mainline/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:20: package javax.management does not exist&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import javax.management.MBeanServer;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                         ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /Users/rh161140/derby/mainline/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:21: package javax.management does not exist&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import javax.management.ObjectName;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                         ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /Users/rh161140/derby/mainline/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:57: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : class MBeanServer&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: interface org.apache.derby.iapi.services.mbeans.ManagementService&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     public MBeanServer getMBeanServer();&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;            ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /Users/rh161140/derby/mainline/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:93: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; symbol  : class ObjectName&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; location: interface org.apache.derby.iapi.services.mbeans.ManagementService&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     public void registerMBean(Object bean, ObjectName name) throws Exception;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                            ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 4 errors&lt;/p&gt;

&lt;p&gt;BUILD FAILED&lt;/p&gt;</comment>
                            <comment id="12544603" author="bernt" created="Wed, 21 Nov 2007 21:27:47 +0000"  >

&lt;p&gt;Thanks Rick. JMX was not part of the 1.4 SDK. For the time being, you&lt;br/&gt;
need to download JMX 1.2.1 RI and place it in tools/java (start your&lt;br/&gt;
browing at&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I&apos;ll look into the matter.&lt;/p&gt;
</comment>
                            <comment id="12545512" author="rhillegas" created="Mon, 26 Nov 2007 17:08:00 +0000"  >&lt;p&gt;Thanks, Bernt. Here is a bit more feedback on the patch:&lt;/p&gt;

&lt;p&gt;Error applying patch:&lt;/p&gt;

&lt;p&gt;patching file java/drda/org/apache/derby/drda/server.policy&lt;br/&gt;
Hunk #2 FAILED at 147.&lt;br/&gt;
1 out of 2 hunks FAILED &amp;#8211; saving rejects to file java/drda/org/apache/derby/drda/server.policy.rej&lt;/p&gt;


&lt;p&gt;+++ java/engine/org/apache/derby/impl/services/build.xml&lt;/p&gt;


&lt;p&gt;  This looks like a typo: optimize=&quot;$&lt;/p&gt;
{optimijavacze}
&lt;p&gt;&quot;&lt;/p&gt;


&lt;p&gt;+++ java/drda/org/apache/derby/drda/server.policy&lt;/p&gt;

&lt;p&gt;  You will want to add these new permissions to template.policy also.&lt;/p&gt;


&lt;p&gt;+++ java/engine/org/apache/derby/impl/services/mbeans/MDatabaseMBean.java&lt;/p&gt;

&lt;p&gt;  Hard to evaluate because no implementation is provided.&lt;/p&gt;</comment>
                            <comment id="12559863" author="johnemb" created="Thu, 17 Jan 2008 09:08:15 +0000"  >&lt;p&gt;Assigning this to myself since Bernt is not available to work on this at the moment. I will try to grab the latest patch and fill in the blanks required to get it to apply cleanly to trunk and compile. Then I intend to start looking at how we can test this feature.&lt;/p&gt;</comment>
                            <comment id="12560338" author="johnemb" created="Fri, 18 Jan 2008 10:56:22 +0000"  >&lt;p&gt;I am trying to get an updated version of the latest patch to compile, but I&apos;m having the same problem Rick reported on Nov 20. After putting some echo statements into some of the build.xml files and running with verbose and debug flags, I still don&apos;t know why it happens.&lt;/p&gt;

&lt;p&gt;I have added jmxri.jar to tools/java as Bernt mentioned, but it doesn&apos;t help (it doesn&apos;t seem like it&apos;s being picked up into the compile classpath anyway). In any case, I have no idea why ant is reporting errors for org/apache/derby/iapi/services/mbeans/ManagementService when it is supposed to compile files in org/apache/derby/iapi/error/ only, as part of the compile_iapi_error_jsr169 target in java/engine/org/apache/derby/iapi/reference/build.xml.&lt;/p&gt;

&lt;p&gt;From what I can tell, the patch does not touch any files in org/apache/derby/iapi/error/.&lt;/p&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;

&lt;p&gt;(...)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; Done with compile_reference&lt;br/&gt;
      &lt;span class=&quot;error&quot;&gt;&amp;#91;ant&amp;#93;&lt;/span&gt; Exiting /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/reference/build.xml.&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; First javac in compile_iapi_error_jsr169&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;echo&amp;#93;&lt;/span&gt; compile.classpath is: /usr/local/java/jdk1.4/jre/lib/charsets.jar:/usr/local/java/jdk1.4/jre/lib/jce.jar:/usr/local/java/jdk1.4/jre/lib/jsse.jar&lt;br/&gt;
:/usr/local/java/jdk1.4/jre/lib/plugin.jar:/usr/local/java/jdk1.4/jre/lib/rt.jar:/usr/local/java/jdk1.4/jre/lib/sunrsasign.jar&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; org/apache/derby/iapi/error/ExceptionSeverity.java added as org/apache/derby/iapi/error/ExceptionSeverity.class doesn&apos;t exist.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; org/apache/derby/iapi/error/PassThroughException.java added as org/apache/derby/iapi/error/PassThroughException.class doesn&apos;t exist.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; org/apache/derby/iapi/error/PublicAPI.java added as org/apache/derby/iapi/error/PublicAPI.class doesn&apos;t exist.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; org/apache/derby/iapi/error/StandardException.java added as org/apache/derby/iapi/error/StandardException.class doesn&apos;t exist.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compiling 4 source files to /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/classes&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Using modern compiler&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Compilation arguments:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-nowarn&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-d&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;/export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/classes&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-classpath&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;/export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/classes:/usr/local/java/jdk1.4/jre/lib/charsets.jar&lt;br/&gt;
:/usr/local/java/jdk1.4/jre/lib/jce.jar:/usr/local/java/jdk1.4/jre/lib/jsse.jar:/usr/local/java/jdk1.4/jre/lib/plugin.jar&lt;br/&gt;
:/usr/local/java/jdk1.4/jre/lib/rt.jar:/usr/local/java/jdk1.4/jre/lib/sunrsasign.jar&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-sourcepath&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;/export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-target&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;1.4&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-bootclasspath&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;/export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/tools/java/empty.jar&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-g&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;-source&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; &apos;1.4&apos;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; The &apos; characters around the executable and arguments are&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; not part of the command.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Files to be compiled:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/error/ExceptionSeverity.java&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/error/PassThroughException.java&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/error/PublicAPI.java&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;     /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:20: package javax.management does not exist&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import javax.management.MBeanServer;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                         ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /export/home/tmp/je159969/Derby/sandboxes/codeTrunk/trunk/java/engine/org/apache/derby/iapi/services/mbeans/ManagementService.java:21: package javax.management does not exist&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; import javax.management.ObjectName;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                         ^&lt;br/&gt;
etc..&lt;/p&gt;

&lt;p&gt;(Edit: splitted up the classpath to make it more readable)&lt;/p&gt;</comment>
                            <comment id="12560386" author="johnemb" created="Fri, 18 Jan 2008 14:02:10 +0000"  >&lt;p&gt;It turns out that the patch builds fine with the revision for which the original patch (v8) was made, but not with an updated sandbox. I tracked it down to having to do with revision 605224, which enables automatic setting of ant properties (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3117&quot; title=&quot;Adjust master build script to require the Java 5 compiler to build Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3117&quot;&gt;&lt;del&gt;DERBY-3117&lt;/del&gt;&lt;/a&gt;). This is probably an issue because I have j14lib set in my ant.properties file, because the property setter uses this value to determine the classpath used during compilation. If I set the property dontAutosetProps=true in ant.properties it builds fine with recent trunks as well, but only as long as jmxri.jar is in tools/java. &lt;/p&gt;

&lt;p&gt;I&apos;ll ask about this issue (that java14compile.classpath from compilepath.properties is ignored if j14lib is set) in a separate thread on derby-dev.&lt;/p&gt;

&lt;p&gt;Now, I could use some tips for how to set up the build system so that we can build the JMX support with the jdk1.5 or 1.6 compiler (which has included support for JMX) and not require jmxri.jar. The naive version of me assumes that this would be doable by editing a couple of build.xml files, but given that I don&apos;t even understand why jmxri.jar seems to be needed for compiling classes in o.a.d/iapi/error, I&apos;m sure some advice would be useful.&lt;/p&gt;</comment>
                            <comment id="12560394" author="rhillegas" created="Fri, 18 Jan 2008 14:20:08 +0000"  >&lt;p&gt;Hi John,&lt;/p&gt;

&lt;p&gt;After applying the patch and running &quot;ant all&quot;, I see the following sequence of ant targets being invoked:&lt;/p&gt;

&lt;p&gt;engine&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;compile_iapi_error_jsr169:&lt;/p&gt;

&lt;p&gt;compile_reference:&lt;/p&gt;

&lt;p&gt;The error is coming from compile_reference which is a target in trunk/java/engine/org/apache/derby/iapi/reference/build.xml. Looking at the &amp;lt;javac&amp;gt; task in that target, I see that the classpath is set to be just $&lt;/p&gt;
{compile.classpath}
&lt;p&gt;, which is the set of jars in the JDK, in this case JDK1.4. So none of the jars in tools/java are being pulled in.&lt;/p&gt;

&lt;p&gt;If you want to just hack this together, then you can do the following:&lt;/p&gt;

&lt;p&gt;1) in tools/ant/extrapath.properties, add a new variable which points at the jmxri.jar file you have added.&lt;/p&gt;

&lt;p&gt;2) wire that variable into the classpath in the &amp;lt;javac&amp;gt; task in compile_reference.&lt;/p&gt;

&lt;p&gt;However, trying to force the JMX support to compile under jdk1.4 has some pitfalls to it. It either involves:&lt;/p&gt;

&lt;p&gt;a) asking people to download another  (optional) jar file--this at a time when we are trying to simplify the build and eliminate the optional jar files&lt;/p&gt;

&lt;p&gt;b) find or construct a freeware version of the JMX jar file (perhaps by mining the Harmony project?)&lt;/p&gt;

&lt;p&gt;I would recommend compiling the JMX support under Java 5 instead, where you will be guaranteed to have the JMX libraries. You can look at trunk/java/testing/org/apache/derby/build.xml for an example of how to do this. I think it would be ok to say that the JMX support has only been tested under Java 5 and that we do not recommend its use on previous VMs--if necessary, you could put in some code to prevent the JMX support from running on old VMs.&lt;/p&gt;</comment>
                            <comment id="12560408" author="johnemb" created="Fri, 18 Jan 2008 14:36:42 +0000"  >&lt;p&gt;Thanks Rick, I&apos;m not fully up to speed on all the various ant properties used in the build, and the various property files used, so this was very useful. I will take a look at the references you gave and try to eliminate JMX from being compiled with 1.4.&lt;/p&gt;</comment>
                            <comment id="12560417" author="johnemb" created="Fri, 18 Jan 2008 14:57:14 +0000"  >&lt;p&gt;By the way, I don&apos;t think that the &quot;compile_reference&quot; target is the culprit, even if that is the last target printed by ant. I added some echo statements to trunk/java/engine/org/apache/derby/iapi/reference/build.xml, but that target always completes without issues. You can also see this by looking at the verbose ant output; ant exits iapi/reference/build.xml before the build failure occurs.&lt;/p&gt;

&lt;p&gt;It is after ant returns to the caller, target &quot;compile_iapi_error_jsr169&quot; in the file trunk/java/engine/org/apache/derby/iapi/build.xml, that the error occurs, while executing the javac task in that target. This I don&apos;t understand (because there are no direct references to the JMX classes in &amp;lt;include name=&quot;$&lt;/p&gt;
{derby.dir}
&lt;p&gt;/iapi/error/**&quot;/&amp;gt;), but I&apos;ll try to fix the other things first, and see if the problem disappears.&lt;/p&gt;
</comment>
                            <comment id="12561683" author="johnemb" created="Wed, 23 Jan 2008 13:58:06 +0000"  >&lt;p&gt;I finally got this patch to build without requiring extra jar files. I have tested that the Network Server runs fine with jdk1.4 if jmx is not enabled, and that basic JMX management works fine when using JDK 6, but I have not run other tests so far. (Trying to run using jdk1.4 with jmx enabled currently results in a fatal error, which is something I hope to improve eventually by providing a more helpful error message)&lt;/p&gt;

&lt;p&gt;I would however appreciate some input on whether my solution so far is something we can live with or if it needs refinements. This is what I did to make it build:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Made org.apache.derby.iapi.services.mbeans.ManagementService independent&lt;br/&gt;
   of JMX / jdk1.5:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;     This was necessary because ManagementService is an interface&lt;br/&gt;
     representing the (JMX) module that is referenced elsewhere in&lt;br/&gt;
     the Derby code, regardless of the availability of JMX support.&lt;/p&gt;

&lt;p&gt;     The implementation(s) of this interface may (must) refer to the JMX &lt;br/&gt;
     API, but the interface itself may not. Otherwise, all code referencing&lt;br/&gt;
     this interface must also be compiled with JMX support in the &lt;br/&gt;
     classpath, which is not the default on jdk1.4. Care should be taken not &lt;br/&gt;
     to call methods of this interface if JMX support is not available. &lt;/p&gt;

&lt;p&gt;     Changes were:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed getMBeanServer() method (was not used), which returned a&lt;br/&gt;
       JMX object (MBeanServer). Callers (e.g. NetworkServerControlImpl) can&lt;br/&gt;
       access (create, destroy, register) MBeans through this interface, but may&lt;br/&gt;
       no longer get direct access to the MBean server unless they call the&lt;br/&gt;
       implementing class (BasicManagementService) directly.&lt;/li&gt;
	&lt;li&gt;Changed second parameter of registerMBean() method to take a String&lt;br/&gt;
       representing a JMX ObjectName instead of the ObjectName itself. It&lt;br/&gt;
       is then up to the implementing class to create the actual ObjectName&lt;br/&gt;
       object based on that String.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NetworkServerControlImpl now calls the ManagementService interface&lt;br/&gt;
   without having to refer to the JMX API (e.g. ObjectName), which means it&lt;br/&gt;
   may be compiled with jdk1.4 and be runnable without JMX support. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changed build scripts so that org.apache.derby.iapi.services.mbeans is&lt;br/&gt;
   compiled with $
{compile.classpath}
&lt;p&gt; (jdk1.4 / jsr169). &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added missing class o.a.d.impl.services.MDatabase.java.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My JMX experience may be limited, but not more so than my knowledge of Derby code internals &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;ll continue to work on an updated patch, but any comments or advice will be appreciated in the mean time.&lt;/p&gt;</comment>
                            <comment id="12562655" author="rhillegas" created="Fri, 25 Jan 2008 20:45:07 +0000"  >&lt;p&gt;Hi John,&lt;/p&gt;

&lt;p&gt;It sounds as though you are on a good track here. It&apos;s hard to say without seeing the revised patch. Some more defensive code may be needed, however. I am worried that the following may happen:&lt;/p&gt;

&lt;p&gt;1) The customer runs on jdk1.4 without the extra JMX jar file but nevertheless sets derby.system.jmx=true.&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;2) Same as (1) but the extra JMX jar file IS included on the classpath.&lt;/p&gt;

&lt;p&gt;In these cases I&apos;m worried that we will see boot errors when the monitor tries to bring up the ManagementService. In case (1) I&apos;m worried that  BasicManagementService will fail to boot because the JMX references can&apos;t be resolved. In case (2) the BasicManagementService, compiled into Java 5 byte code, will fail to load on jdk1.4.&lt;/p&gt;

&lt;p&gt;To handle (1), you may want to instrument the monitor with defensive code so that it won&apos;t boot the ManagementService unless the MBeanServer appears on the classpath--and emit an easy-to-understand diagnostic. To handle (2) you may want to do one of the following:&lt;/p&gt;

&lt;p&gt;a) Instrument the monitor so that it only boots ManagementService if the VM is at level Java 5 or higher (otherwise emit a friendly diagnostic)&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;b) Change the mbeans build target in impl/services/build.xml so that the mbeans package is compiled into 1.4 byte code.&lt;/p&gt;</comment>
                            <comment id="12563459" author="johnemb" created="Tue, 29 Jan 2008 10:38:16 +0000"  >&lt;p&gt;Hi Rick, &lt;/p&gt;

&lt;p&gt;Regarding the scenarios 1) and 2) you outlined wrt. users trying to enable JMX on jdk1.4, I have (for now) solved this by adding checks in the monitor for the availability of the classes java.lang.management.ManagementFactory and javax.management.ObjectName. The latter is part of the reference implementation, but the former is not, and both are currently required by Derby&apos;s JMX functionality.&lt;/p&gt;

&lt;p&gt;If any of these classes are not present in the classpath, a warning is written to derby.log, and Derby boots normally without JMX enabled. In addition, there is a check in NetworkServerControl, writing a warning to the server console if the JMX module is not available (jdk1.4). Exactly what these warning messages should say and how to issue them may need some tweaking/polishing, I presume...&lt;/p&gt;

&lt;p&gt;I will upload a new patch shortly, including these changes. I&apos;ll also try to clarify the (lack of) jdk1.4 support in an update to the functional spec.&lt;/p&gt;</comment>
                            <comment id="12563557" author="johnemb" created="Tue, 29 Jan 2008 15:54:37 +0000"  >&lt;p&gt;Uploaded a new patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-9.diff + .stat, replacing previous patches.&lt;/p&gt;

&lt;p&gt;Changes since the previous (1387-8) patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;made org.apache.derby.iapi.services.mbeans.ManagementService independent&lt;br/&gt;
   of JMX / jdk1.5, as explained in a previous comment. Thus, this patch&lt;br/&gt;
   should build just fine without requiring additional libraries, though&lt;br/&gt;
   the JMX features are not available in a 1.4 VM.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added missing MDatabase class file.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Changed o/a/d/impl/services/build.xml&apos;s &quot;compile_impl_services_jdk15&quot;&lt;br/&gt;
   target to use the default compiler instead of jdk1.6 to compile 1.5 code,&lt;br/&gt;
   with java15compile.classpath as the classpath, and included the &lt;br/&gt;
   1.5-specific JMX functionality (impl/services/mbeans/*) in this target.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added a check in FileMonitor for the presence of certain JMX classes&lt;br/&gt;
   before allowing JMX to be enabled. A warning is printed to derby.log and&lt;br/&gt;
   (if relevant) the Network Server console if JMX support is not available &lt;br/&gt;
   but derby.system.jmx=true. This probably needs some polishing, at least &lt;br/&gt;
   in the FileMonitor, where I&apos;ve simply called report() with a hard-coded &lt;br/&gt;
   String as parameter. &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;   (I may also have missed something somewhere wrt. jdk1.4 since I have&lt;br/&gt;
   not done any extensive testing, and I&apos;m not fully on top of how the&lt;br/&gt;
   monitor/module system works at this time.)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;improved Network Server error handling/reporting wrt. JMX&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;resolved patch incompatilbility with current trunk wrt. server.policy&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added necessary permissions (present in server.policy) to template.policy&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixed typo in java/engine/org/apache/derby/impl/services/build.xml&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed some spurious tabs from some of the new code segments&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixed some Javadoc errors&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;There are still some TODOs for this feature, including:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;proper authentication/authorization/system privileges support?&lt;/li&gt;
	&lt;li&gt;Javadoc for all interfaces (a lot is missing in e.g. MDatabaseMBean.java)&lt;/li&gt;
	&lt;li&gt;better error messages and message handling&lt;/li&gt;
	&lt;li&gt;documentation&lt;/li&gt;
	&lt;li&gt;testing&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are also a few other things worth mentioning/asking about, such as:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;why does NetworkServerControlImpl.java create the MBean directly instead&lt;br/&gt;
   of using a factory method via the ManagementService interface?&lt;br/&gt;
   (contrary to Ole Gunnar&apos;s comment of 01/Aug/07 01:30 AM + funcSpec)&lt;br/&gt;
   Is it because the MBean requires a reference to NetworkServerControlImpl,&lt;br/&gt;
   and the resulting dependencies/build issues are non-trivial to solve?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;currently, the NetworkServerControlMgmtMBean is in the same package as&lt;br/&gt;
   NetworkServerControlImpl, and is compiled with jdk1.4, meaning that&lt;br/&gt;
   this MBean cannot reference the JMX API directly (for example: Emit or&lt;br/&gt;
   handle Notifications). We may want to change this in a future revision&lt;br/&gt;
   of this feature.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;what is special about BaseMonitor.runWithState()? That is, if the JMX&lt;br/&gt;
   module is started differently from other modules, why? I tried adding&lt;br/&gt;
   the JMX module with class dependencies to &lt;br/&gt;
   org/apache/derby/modules.properties without seeing any effect; could it &lt;br/&gt;
   be related to this?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;when shutting down the server via JMX, no shutdown messages are written&lt;br/&gt;
   to the log or the console. If shutdown is supposed to be supported, this&lt;br/&gt;
   should be improved.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Anyway, since this now compiles with the current trunk and seems to run OK &lt;br/&gt;
with all supported JVM versions, I intend to update the functional spec &lt;br/&gt;
and work on testing next.&lt;/p&gt;</comment>
                            <comment id="12563565" author="johnemb" created="Tue, 29 Jan 2008 16:26:40 +0000"  >&lt;p&gt;I should probably mention that I have run suites.All and derbyall successfully using jdk1.4 with (roughly) the -9 patch (I did some minor tweaking after testing but before submitting), so I&apos;m fairly confident that it won&apos;t break existing code in an obvious way. Will run more tests later.&lt;/p&gt;</comment>
                            <comment id="12563579" author="djd" created="Tue, 29 Jan 2008 17:13:16 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; - added a check in FileMonitor for the presence of certain JMX classes&lt;br/&gt;
   before allowing JMX to be enabled. A warning is printed to derby.log and&lt;br/&gt;
   (if relevant) the Network Server console if JMX support is not available&lt;br/&gt;
   but derby.system.jmx=true. This probably needs some polishing, at least&lt;br/&gt;
   in the FileMonitor, where I&apos;ve simply called report() with a hard-coded&lt;br/&gt;
   String as parameter. &lt;/p&gt;

&lt;p&gt;Why is this needed? Derby supports loading modules defined in modules.properties and that has a mechanism to indicate that a module requires a specific jvm or set of Java classes. Is there some reason a new mechanism is being invented?&lt;/p&gt;
</comment>
                            <comment id="12563627" author="johnemb" created="Tue, 29 Jan 2008 19:24:52 +0000"  >&lt;p&gt;Dan wrote:&lt;/p&gt;

&lt;p&gt;&amp;gt; Why is this needed? Derby supports loading modules defined in modules.properties and that has a&lt;br/&gt;
&amp;gt; mechanism to indicate that a module requires a specific jvm or set of Java classes. Is there some &lt;br/&gt;
&amp;gt; reason a new mechanism is being invented?&lt;/p&gt;

&lt;p&gt;Well... kindof. The reason is that I tried using modules.properties for this but my brief experiments had no effect. So there&apos;s probably a piece of the module puzzle that I have missed, and it might be due to how the JMX module is currently started - I&apos;m not sure, since I didn&apos;t write most of this code, and I would most likely need to spend quite some time with a debugger to understand all the details. My goal was to get this up and running so I could start writing tests for it, but if I get some helpful pointers I&apos;ll be happy to change how this works. &lt;/p&gt;</comment>
                            <comment id="12563656" author="rhillegas" created="Tue, 29 Jan 2008 20:40:48 +0000"  >&lt;p&gt;Thanks for the new patch, John. A couple comments:&lt;/p&gt;

&lt;p&gt;1) The informational/error messages which return to the user still need to be localized. It&apos;s probably a good idea to get this out the way before you get too deep into testing. See Bernt&apos;s response on October 8, 2007.&lt;/p&gt;

&lt;p&gt;2) I was pleasantly surprised to see that when I run this under jdk1.4, the security manager doesn&apos;t choke on the missing jmx permissions. I guess the vm must be silently swallowing ClassNotFoundExceptions.&lt;/p&gt;

&lt;p&gt;3) I&apos;m looking forward to some basic tests which will show me how to model some experiments. In particular, I want to see how this JMX-initiated shutdown plays with the new permissions introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2109&quot; title=&quot;System privileges&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2109&quot;&gt;DERBY-2109&lt;/a&gt;.&lt;/p&gt;

</comment>
                            <comment id="12564796" author="johnemb" created="Fri, 1 Feb 2008 15:20:26 +0000"  >&lt;p&gt;Attached a new version of the FuncSpec for this feature, based on my own interpretation of the current implementation and previous comments to this issue.&lt;/p&gt;

&lt;p&gt;There are a few things that were unclear to me, such as whether or not to change the statement &quot;The service acts as a factory which is able to create all the MBeans and provides an API for registering and exposing MBeans.&quot;, which currently does not match the implementation (the NetworkServerControlMgmtMBean is the exception). I left it as it were for now.&lt;/p&gt;

&lt;p&gt;I also think more hands and eyes are needed in the Security section, where I&apos;ve added a couple of paragraphs about authentication. I believe the current patch lacks a few essential security measures, and the current spec is most likely missing out on a few things in that area.&lt;/p&gt;

&lt;p&gt;I have added a section on how to use these new features, so that anyone can download the latest patch and give it a try without too much head-scratching. Comments are always welcome.&lt;/p&gt;</comment>
                            <comment id="12564808" author="djd" created="Fri, 1 Feb 2008 16:00:14 +0000"  >&lt;p&gt;Thanks for the updated specification: Some initial questions:&lt;/p&gt;

&lt;p&gt;1) Is a derby.system.jmx needed? What would be the downside of always having the jmx beans available, or available if the jvm has jmx running?&lt;br/&gt;
This may depend on security issues, I haven&apos;t looked at that in detail yet.&lt;/p&gt;

&lt;p&gt;2) In the &quot;Enabling Management Features&quot; section, are the com.sun properties standard JMX, or are they specific to Sun&apos;s implementation of the JVM? useful to state this in the specification, so that any user documentation reflects reality.&lt;/p&gt;

&lt;p&gt;3) The spec says that classes in org.apache.derby.impl.services.mbeans. will be added to the public api. The &apos;org.apache.derby.impl.&apos; set of packages is for implementations of internal apis (o.a.d.iapi). If these classes are external then they need to be moved to a new package. o.a.d.jmx?&lt;br/&gt;
As a minor point I wouldn&apos;t have Derby in the name of these classes.&lt;/p&gt;
</comment>
                            <comment id="12564832" author="djd" created="Fri, 1 Feb 2008 17:20:41 +0000"  >&lt;p&gt;Can authenticateAsUser(String user, String password) in the database bean be explained more fully?&lt;br/&gt;
Is there a single database bean for a database, or is a new one created for each jmx session or connection (not sure of correct term here)?&lt;/p&gt;

&lt;p&gt;If there is a single bean for a database then this authenticateAsUser seems to open up a big security hole, once this operation is made any other valid jmx user can reconfigure the database, even if they don&apos;t have valid database permissions.&lt;/p&gt;

&lt;p&gt;Or can the authentication information be limited to a single jmx session, even with a single bean?&lt;/p&gt;

&lt;p&gt;Also, why is authenticateAsUser limited to the BUILTIN authentication scheme, since it is just providing user/password to a connection request won&apos;t it be independent of the authentication scheme in effect?&lt;/p&gt;</comment>
                            <comment id="12564898" author="johnemb" created="Fri, 1 Feb 2008 19:31:43 +0000"  >&lt;p&gt;Thanks for taking a look at this, Dan - the more eyes on this the better.&lt;/p&gt;

&lt;p&gt;&amp;gt; 1) Is a derby.system.jmx needed? What would be the downside of always having the jmx beans available, or available if the jvm has jmx running?&lt;br/&gt;
&amp;gt; This may depend on security issues, I haven&apos;t looked at that in detail yet.&lt;/p&gt;

&lt;p&gt;Potential new and unknown security risks is my primary concern at the moment, weighing in against enabling JMX by default. I believe that a portion of the security risks introduced with this feature have not been identified and evaluated fully yet. Other than that I have no big concerns about enabling it by default. The performance penalty should be negligible, at least. It should, however, be possible for the paranoid user to disable the Management Service, I think. Then I guess such a property would be needed anyway...?&lt;/p&gt;

&lt;p&gt;&amp;gt; 2) In the &quot;Enabling Management Features&quot; section, are the com.sun properties standard JMX, or are they specific to Sun&apos;s implementation of the JVM? useful to state this in the specification, so that any user documentation reflects reality.&lt;/p&gt;

&lt;p&gt;Good question, I&apos;ve been wondering that myself. I cannot find any reference to those properties in the JMX specs (but maybe I didn&apos;t look hard enough). I have seen the com.sun.management.jmxremote properties in used in reference to the newer JVMs from other vendors than Sun, such as IBM and BEA (JRockit), so it seems to be a de facto standard at least...&lt;/p&gt;

&lt;p&gt;&amp;gt; 3) The spec says that classes in org.apache.derby.impl.services.mbeans. will be added to the public api. The &apos;org.apache.derby.impl.&apos; set of packages is for implementations of internal apis (o.a.d.iapi). If these classes are external then they need to be moved to a new package. o.a.d.jmx?&lt;/p&gt;

&lt;p&gt;I see, makes sense. I think moving the public interfaces to a new package is something that should be considered for the next version of the patch.&lt;/p&gt;

&lt;p&gt;&amp;gt; As a minor point I wouldn&apos;t have Derby in the name of these classes.&lt;/p&gt;

&lt;p&gt;That is probably redundant, yes. DerbySystemMBean should be renamed to SystemMBean in the next version of the patch.&lt;/p&gt;

&lt;p&gt;&amp;gt; Can authenticateAsUser(String user, String password) in the database bean be explained more fully?&lt;br/&gt;
&amp;gt; Is there a single database bean for a database, or is a new one created for each jmx session or connection (not sure of correct term here)?&lt;/p&gt;

&lt;p&gt;There is currently a single MDatabaseMBean per database.&lt;/p&gt;

&lt;p&gt;&amp;gt; If there is a single bean for a database then this authenticateAsUser seems to open up a big security hole, once this operation is made any other valid jmx user can reconfigure the database, even if they don&apos;t have valid database permissions.&lt;/p&gt;

&lt;p&gt;Correct, that is one of the issues I had in mind when I noted that the current patch &quot;lacks a few essential security measures&quot;.&lt;/p&gt;

&lt;p&gt;&amp;gt; Or can the authentication information be limited to a single jmx session, even with a single bean?&lt;/p&gt;

&lt;p&gt;Not with the current implementation, but perhaps it is possible to implement some kind of session handling to support something like this? Not sure if the previous contributors to this feature have given this any thought...&lt;/p&gt;

&lt;p&gt;&amp;gt; Also, why is authenticateAsUser limited to the BUILTIN authentication scheme, since it is just providing user/password to a connection request won&apos;t it be independent of the authentication scheme in effect?&lt;/p&gt;

&lt;p&gt;Right, I believe this is a cut&amp;amp;paste error in the funcspec. All it does is to establish a regular JDBC connection using DriverManager. I&apos;ll rectify it in the next version. Thanks for noticing!&lt;/p&gt;</comment>
                            <comment id="12564927" author="djd" created="Fri, 1 Feb 2008 20:39:17 +0000"  >&lt;p&gt;The patch seems to contain two Version.java&apos;s, one an interface and one a class in the same package.&lt;/p&gt;

&lt;p&gt;Index: java/engine/org/apache/derby/impl/services/mbeans/Version.java&lt;br/&gt;
Index: java/engine/org/apache/derby/impl/services/mbeans/Version.java&lt;/p&gt;

&lt;p&gt;public class Version implements Version &lt;/p&gt;

&lt;p&gt;not sure how this is possible ....&lt;/p&gt;

&lt;p&gt;With MBeans is there a requirement for an interface and an implementation class?&lt;/p&gt;</comment>
                            <comment id="12565120" author="johnemb" created="Sat, 2 Feb 2008 21:55:11 +0000"  >&lt;p&gt;Strange - I&apos;m not able to see what you were seeing, Dan. Here&apos;s some grep results from the patch file &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-9.diff that I just downloaded from Jira onto a machine which has not seen it before:&lt;/p&gt;

&lt;p&gt;$grep -c &quot;Index.*Version.java&quot; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-9.diff&lt;br/&gt;
1&lt;/p&gt;

&lt;p&gt;$grep &quot;Version.java&quot; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-9.diff&lt;br/&gt;
Index: java/engine/org/apache/derby/impl/services/mbeans/Version.java&lt;br/&gt;
&amp;#8212; java/engine/org/apache/derby/impl/services/mbeans/Version.java      (revision 0)&lt;br/&gt;
+++ java/engine/org/apache/derby/impl/services/mbeans/Version.java      (revision 0)&lt;/p&gt;

&lt;p&gt;$grep &quot;class Version&quot; &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387&quot; title=&quot;Add JMX extensions to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1387&quot;&gt;&lt;del&gt;DERBY-1387&lt;/del&gt;&lt;/a&gt;-9.diff&lt;br/&gt;
+public class Version implements VersionMBean {&lt;/p&gt;

&lt;p&gt;With Standard MBeans (which is the type of MBeans included in the patch), the requirement is that there is an interface which name ends with &quot;MBean&quot; and a class implementing that class, with the same name but without the &quot;MBean&quot; ending. As far as I know there may be other rules for other types of MBeans (Dynamic, Model, ...). As far as I can see the patch fulfills this requirement, but if I&apos;m misunderstanding something, I need some help to understand exactly what.&lt;/p&gt;</comment>
                            <comment id="12565340" author="johnemb" created="Mon, 4 Feb 2008 12:47:42 +0000"  >&lt;p&gt;Attached new funcSpec (jmxFuncspec.html), version 2.1, incorporating changes and clarifications mentioned in comments from Dan and myself since February 1. The most significant change is the moving of most of the public MBean interfaces to a new package, org.apache.derby.jmx. The NetworkServerControlMgmtMBean was moved to org.apache.derby.drda. Please review.&lt;/p&gt;

&lt;p&gt;I have also verified that the com.sun.management.jmxremote properties are not part of an official standard, but may be considered de facto standard, and included comments about this in the funcSpec.&lt;/p&gt;

&lt;p&gt;Some implementation TODOs have now accumulated, including:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rearranging the package layout as specified in the funcspec, and renaming one of the MBeans.&lt;/li&gt;
	&lt;li&gt;closing the most apparent security holes (such as being able to connect to a db requiring authentication with multiple JMX-clients, without having to provide credentials in more than one of them).&lt;/li&gt;
	&lt;li&gt;supporting/utilizing the Derby Monitor&apos;s dependency features (modules.properties).&lt;/li&gt;
	&lt;li&gt;i18n/L10n-enabled error messages/warnings.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Feel free to reassign this issue if you feel that you may have something to contribute in these or other areas of the implementation, as I intend to spend some time creating tests (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3385&quot; title=&quot;Tests for JMX Management and Monitoring&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3385&quot;&gt;&lt;del&gt;DERBY-3385&lt;/del&gt;&lt;/a&gt;) as well.&lt;/p&gt;</comment>
                            <comment id="12565407" author="thomanie" created="Mon, 4 Feb 2008 16:09:24 +0000"  >&lt;p&gt;John&amp;gt; Attached new funcSpec (jmxFuncspec.html), version 2.1, ... Please review. &lt;/p&gt;

&lt;p&gt;A small comment:&lt;br/&gt;
Since the funcSpec only considers the server-side JMX functionallity it would probably be good to rename the section &quot;Public API&quot; to something that explicitly indicates it is for use in the enigne (server-side) only? I first read this section thinking it was the &quot;Public &lt;span class=&quot;error&quot;&gt;&amp;#91;Client-side&amp;#93;&lt;/span&gt; API&quot;.&lt;br/&gt;
I&apos;m afraid I don&apos;t have any good suggestions other than &quot;Derby Engine/Server-side JMX API&quot;.&lt;/p&gt;</comment>
                            <comment id="12565411" author="chaase3" created="Mon, 4 Feb 2008 16:26:40 +0000"  >&lt;p&gt;This revised spec is excellent, John, from the perspective of documentation. All the added detail is very helpful.&lt;/p&gt;</comment>
                            <comment id="12565440" author="djd" created="Mon, 4 Feb 2008 18:01:47 +0000"  >&lt;p&gt;I&apos;m a little lost on the logic on not putting all the MBeans in the same package, isn&apos;t the o.a.d.jmx package now the jmx package for Derby? Seems logical that all the mbeans should be there. Otherwise why not just put the &quot;embedded&quot; mbeans in o.a.d.jdbc?&lt;/p&gt;

&lt;p&gt;SystemMBean&lt;br/&gt;
   Is there a good use case for having SystemHome as a property. Secure systems tend to not reveal information about the file system structure, less information is good.&lt;/p&gt;

&lt;p&gt;MDatabaseMBean&lt;br/&gt;
   What does the M mean in &apos;MDatabase&apos;?&lt;/p&gt;

&lt;p&gt;   Why have SystemHome in MDatabaseMBean, if it&apos;s going to be available then it should only be there through SystemMBean?&lt;/p&gt;

&lt;p&gt;   What does the property AuthenticatedAsUser  represent, the table just says look at the operation but no deatails are given there?&lt;/p&gt;

&lt;p&gt;ps. ignore my comment about duplicate version files, I think my search for MBean in the patch turned into a search &amp;amp; replace.&lt;/p&gt;</comment>
                            <comment id="12565761" author="johnemb" created="Tue, 5 Feb 2008 14:51:25 +0000"  >&lt;p&gt;@Kim: Thanks. As the spec stabilizes, it will probably become more clear what is needed wrt. documentation.&lt;/p&gt;

&lt;p&gt;@Thomas: I agree that it could be clearer where the &quot;home&quot; of each part of derby&apos;s public API is. The current public API is not very clear in this regard either, see e.g. &lt;a href=&quot;http://db.apache.org/derby/javadoc/publishedapi/jdbc3/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/javadoc/publishedapi/jdbc3/&lt;/a&gt;, but I could try to clarify the jmx package(s) somewhat in this funcspec. As part of the documentation effort, we should try to describe this in the package-summary of the new package(s) and in other related Javadoc.&lt;/p&gt;

&lt;p&gt;@Dan: &lt;/p&gt;

&lt;p&gt;I suppose I was influenced by the current implementation when I specified a different package for the Network Server MBean. This MBean was moved to the drda package because of some packaging issue (according to comments in Jira), but if keeping all MBeans in the same package is practically feasible I&apos;m all for it. Since the MBeans are not directly related to JDBC I&apos;m reluctant to putting the others in the o.a.d.jdbc package.&lt;/p&gt;

&lt;p&gt;SystemMBean:&lt;br/&gt;
    I see the point about exposing the derby.system.home property to JMX clients, but I don&apos;t expect this to be a big issue, since when you enable JMX monitoring of your JVM, you usually have access to lots of file system paths anyway (library path, boot class path, etc.). One use case I think is valid is the need to read this property in a setting where you are running Derby via third-party tools (IDEs, application servers, db management tools etc.), and you don&apos;t necessarily know the working directory of the VM running the Derby system, or if derby.system.home has been set automatically by such a tool. One way to find out where your databases (specified with relative paths) end up on your file system is to check the value of derby.system.home.&lt;/p&gt;

&lt;p&gt;MDatabaseMBean:&lt;br/&gt;
     Not sure what the M stands for, to be honest. I was guessing &quot;Managed Database&quot;, but could be wrong. Perhaps the M should be removed unless someone can shed some light on this.&lt;br/&gt;
     SystemHome in MDatabaseMBean shouldn&apos;t be there. It&apos;s a bug in the funcSpec - it&apos;s not available in the current implementation (patch 9).&lt;br/&gt;
     The AuthenticatedAsUser attribute could use a better description, for sure. It returns the user name of the user who has been authenticated through JMX, i.e. the last valid user name supplied as parameter to the authenticateAsUser() operation. If no user is authenticated through JMX, the empty string is returned.&lt;/p&gt;


&lt;p&gt;General:&lt;/p&gt;

&lt;p&gt;I&apos;ll update the funcspec later this week. I intend to incorporate the above feedback, but I also think some details are needed wrt. MBean naming and (ObjectName) types and server domains.&lt;/p&gt;

&lt;p&gt;Regarding the security issue mentioned in recent comments: &lt;/p&gt;

&lt;p&gt;     It could be argued that when you enable JMX management and monitoring you explicitly expose your system for such access, and that if you want to control this you need to enable JMX authentication (there is out-of-the-box support for the use of password files and SSL, see &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;I noticed, however, a note about a potential security vulnerability wrt. JMX password authentication with J2SE 5.0 (see the above link, look for &quot;WARNING&quot;). A bit more work (mimicking out-of-the-box management) is required for us to work around this...&lt;/p&gt;

&lt;p&gt;I came across a blog post &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; which has some details around this (see its comments), and which includes example use cases wrt. JMX authentication and authorization, which may be of help if we don&apos;t decide to settle with the defaults. I&apos;ve just skimmed through it so far, but perhaps someone familiar with the current and soon-finished security features of Derby could take a look at &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; and see if some kind of integration with existing features is desired and feasible?&lt;/p&gt;

&lt;p&gt;For the short run, however, I propose simply going with the defaults, as long as we are clear about the risks.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: &lt;a href=&quot;http://blogs.sun.com/lmalventosa/entry/jmx_authentication_authorization&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blogs.sun.com/lmalventosa/entry/jmx_authentication_authorization&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12565788" author="rhillegas" created="Tue, 5 Feb 2008 16:12:47 +0000"  >&lt;p&gt;On September 27 Bernt shared his opinion on the topic of whether to add a special knob which enables the Derby JMX beans. He was in favor of adding the knob. For him, the problem case was a shrink-wrapped embedded application which wants to  use JMX as its configuration tool but which doesn&apos;t want the user to monkey with the shrink-wrapped database.&lt;/p&gt;</comment>
                            <comment id="12565824" author="djd" created="Tue, 5 Feb 2008 17:23:00 +0000"  >&lt;p&gt;The approach to security for the database mbean concerns me:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The authenticateUser approach exposes a huge security hole where any authenticated jmx user can perform dbo operations for the database even if they do not have dbo credentials. I think this is unacceptable.&lt;/li&gt;
	&lt;li&gt;It is defining a security model that does not match existing jmx approaches (e.g. the jmx tutorial describes three security models including two that address fine grained authorization (which is the issue here)).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I wonder if it is worth splitting the patch in two logical steps.&lt;/p&gt;

&lt;p&gt;  1) Adding the framework to support Derby mbeans and skeleton beans. E.g. add a database bean that only exposes limited information, such as the database id and possibly the name.&lt;/p&gt;

&lt;p&gt;  2) Add functionality to the beans in a secure manner as required.&lt;/p&gt;

&lt;p&gt;This suits the model of incremental development and allows others to get involved in adding new information to existing beans or adding new beans in the framework.&lt;/p&gt;

</comment>
                            <comment id="12565832" author="rhillegas" created="Tue, 5 Feb 2008 17:44:16 +0000"  >&lt;p&gt;Thanks for the updated spec, John. I brought up a Derby server with the JMX beans enabled and I ran JConsole against it. Here are some initial reactions:&lt;/p&gt;

&lt;p&gt;1) I was pleased that the Sun JMX properties worked with my Apple VM.&lt;/p&gt;

&lt;p&gt;2) I brought up the server with authentication enabled but I didn&apos;t have to supply credentials in order to view the NetworkServer and System MBeans. That seems wrong to me. The Version MBean was also viewable but that seems ok to me.&lt;/p&gt;

&lt;p&gt;3) I was able to change properties in the NetworkServer MBean--at least my changes were accepted on the screen. However, when I tried to change properties in the System MBean, I was slapped with an &quot;access denied (java.util.PropertyPermission * read,write)&quot; diagnostic.&lt;/p&gt;

&lt;p&gt;4) Using the System MBean, it seemed that I was able to boot an existing database and then access its MBean. Again, without supplying credentials, this seemed wrong to me. Most of the properties were listed as &quot;Unavailable&quot;.&lt;/p&gt;

&lt;p&gt;5) Using the System MBean, I tried to boot a nonexistent database. This gave me the following diagnostic:&lt;/p&gt;

&lt;p&gt;Problem invoking bootDatabase: java.rmi.UnmarshalException: Error unmarshaling return: nested exception is:&lt;br/&gt;
java.lang.ClassNotFoundException: org.apache.derby.impl.jdbc.EmbedSQLException (no security manager: RMI class loader disabled)&lt;/p&gt;

&lt;p&gt;6) I saw the same diagnostic when I used the System MBean to boot an encrypted database.&lt;/p&gt;

&lt;p&gt;7) I saw a similar diagnostic when I tried to create a user via the MBean for the existing database.&lt;/p&gt;

&lt;p&gt;8) When I invoked the shutdown operation on the System MBean, I saw the following diagnostic:&lt;/p&gt;

&lt;p&gt;Problem invoking shutdown: java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is:&lt;br/&gt;
java.io.EOFException&lt;/p&gt;

&lt;p&gt;9) However, after dismissing the diagnostic windows, the MBeans disappeared from the screen and I was presented with a blank JConsole window with only a &quot;Connection&quot; menu item in the menu bar.  However, I was unable to connect via that menu item.&lt;/p&gt;

&lt;p&gt;For the record, this is the startup command which I used to boot the server:&lt;/p&gt;

&lt;p&gt;java -Dderby.connection.requireAuthentication=true \&lt;br/&gt;
  -Dderby.authentication.provider=BUILTIN \&lt;br/&gt;
  -Dderby.user.\&quot;rick\&quot;=rickspassword \&lt;br/&gt;
  -Dderby.database.sqlAuthorization=true \&lt;br/&gt;
  -Dcom.sun.management.jmxremote.port=1528 \&lt;br/&gt;
  -Dcom.sun.management.jmxremote.authenticate=false \&lt;br/&gt;
  -Dcom.sun.management.jmxremote.ssl=false \&lt;br/&gt;
  -Dderby.system.jmx=true \&lt;br/&gt;
  org.apache.derby.drda.NetworkServerControl start -p 8246&lt;/p&gt;

&lt;p&gt;and this is the command which I used to boot JConsole:&lt;/p&gt;

&lt;p&gt;jconsole 1735&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12565836" author="rhillegas" created="Tue, 5 Feb 2008 17:53:43 +0000"  >&lt;p&gt;I believe the reason that I was not able to connect at the end of my experiment was this: the server was actually brought down. Again, without presenting credentials, this seems like the wrong behavior to me.&lt;/p&gt;</comment>
                            <comment id="12565864" author="djd" created="Tue, 5 Feb 2008 19:57:49 +0000"  >&lt;p&gt;I can see the argument for disallowing Derby&apos;s jmx beans (by setting derby.system.jmx=false) and probably it should be an opt-in system (ie. mbeans off by default).&lt;/p&gt;

&lt;p&gt;Having derby.system.jmx being static though is a huge pain, seems that most useful would be the ability to enable mbeans against a running system.&lt;/p&gt;

&lt;p&gt;Also having the ability at the database level to control its DatabaseMBean would seem useful (i.e. a database can indicate if it will register a DatabaseMBean or not).&lt;/p&gt;

&lt;p&gt;I don&apos;t think any of these are essential for this work, but it may be something to think about, especially around the api of enabling system or database mbeans. A single boolean property may be too inflexible and cause confusion if a finer-grained scheme is added later.&lt;/p&gt;

&lt;p&gt;One thought is to have a simple mbean that controls if other mbeans are enabled. This meta-mbean would require system authentication to enable other mbeans (e.g. a property or operation to start the system mbean). Probably requires the mbean security model to be worked out first.&lt;/p&gt;</comment>
                            <comment id="12566143" author="johnemb" created="Wed, 6 Feb 2008 14:47:59 +0000"  >&lt;p&gt;@Rick: The rather unhelpful error messages you were seeing are mostly caused by JConsole not having access to the classes required to unwind the message of the root cause Exception. Bernt mentioned a work-around for that: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387?focusedCommentId=12537011#action_12537011&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1387?focusedCommentId=12537011#action_12537011&lt;/a&gt;&lt;br/&gt;
Perhaps it is possible to improve this if the MBeans are implemented a little differently, I think I saw something about that on the web somewhere (might require using different MBean types or something, I&apos;ll see if I can find a reference).&lt;/p&gt;

&lt;p&gt;The work-around works for all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; errors except the one you get when shutting down the server. If the server VM exits when you shutdown the server (true if you&apos;re using NetworkServerControl or derbyrun.jar on the command line), then the MBeanServer will also exit, so the connection between JConsole and the server is broken abruptly. Not sure if this is possible to fix for generic JMX clients such as JConsole.&lt;/p&gt;


&lt;p&gt;@All - Security:&lt;/p&gt;

&lt;p&gt;So, it seems clear to me from the recent comments that we need to do something about the security issues. I think we can agree on the following:&lt;/p&gt;

&lt;p&gt;A valid JMX user (a user able to connect via JMX to Derby&apos;s MBeanServer) should not be able to access information or perform operations that would otherwise be restricted by Derby&apos;s existing security mechanisms (authentication, authorization, Security Manager, etc.). &lt;/p&gt;

&lt;p&gt;I noticed Dan&apos;s suggestion of including a restricted/limited set of MBeans/attributes/operations in the first version of this feature, which seems sensible to me. Other ideas are of course welcome.&lt;/p&gt;</comment>
                            <comment id="12566325" author="djd" created="Wed, 6 Feb 2008 20:37:47 +0000"  >&lt;p&gt;For the security issue one idea is consider is packaging Derby&apos;s mbeans in a separate jar file (e.g. derbyjmx.jar).&lt;br/&gt;
This jar could be automatically in the class path of derby.jar but having it separate would allow it to be granted different permissions.&lt;/p&gt;

&lt;p&gt;If the mbeans are in derby.jar then they will most likely have the permission to read Derby&apos;s system properties (derby.*),&lt;br/&gt;
putting them in a separate jar allows some control to some administrator (vm-admin?), thus they could have the option of:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;not allowing any jmx access to system properties while continuing to use the other administration facilities  of Derby&apos;s mbeans&lt;/li&gt;
	&lt;li&gt;allowing only read access to derby&apos;s system properties (that are exposed through Derby&apos;s mbeans)&lt;/li&gt;
	&lt;li&gt;allowing read/write access to derby&apos;s system properties (that are exposed through Derby&apos;s mbeans)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&amp;gt; I noticed Dan&apos;s suggestion of including a restricted/limited set of MBeans/attributes/operations in the first version of this feature&lt;/p&gt;

&lt;p&gt;My suggestion was slightly different, a first patch that gets working mbeans with limited attributes and operations to allow folks to play with them.&lt;br/&gt;
Then any amount of added new functionality before a release that contains mbeans (ie. 10.4), the only requirement would be some agreement that new functionality does not expose security holes. E.g. a initial patch of working functionality could be:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;version mbean - as it is today&lt;/li&gt;
	&lt;li&gt;system mbean - maybe any system property read-only that does not expose security information (e.g. LocksWaitTimeOut ok,  DatabaseFullAccessUsers not ok)&lt;/li&gt;
	&lt;li&gt;network server mbean - ping only&lt;/li&gt;
	&lt;li&gt;database mbean - name, locale, read-only&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12567112" author="johnemb" created="Fri, 8 Feb 2008 17:20:52 +0000"  >&lt;p&gt;I&apos;d like to take a step back and try to clarify and write down what the community&apos;s expectations are with regard to the security architecture of the JMX features proposed by this Jira issue.&lt;/p&gt;

&lt;p&gt;I started a wiki page at &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/JMXSecurityExpectations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JMXSecurityExpectations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to do this. If those who are interested would like to take a look that would be great. If you think the page is useful, we may use it as basis for designing a security architecture for JMX in Derby. If you don&apos;t think it&apos;s useful, perhaps it was nevertheless a good exercise for me to do this, in order to wrap my head around a few of the things we might need to deal with (it would be nice if someone could tell me if I am way off about something on that page). &lt;br/&gt;
Please speak up if you have comments.&lt;/p&gt;</comment>
                            <comment id="12567410" author="djd" created="Sun, 10 Feb 2008 05:38:03 +0000"  >&lt;p&gt;I&apos;ve been working on a much simplified initial jmx setup based upon patch 9, I&apos;ll attach it as a patch sometime tomorrow once I&apos;ve checked it out some more.&lt;/p&gt;

&lt;p&gt;This is aimed at getting the ball rolling (incremental development) rather than trying to solve all the security issues etc. with one big patch.&lt;/p&gt;

&lt;p&gt;The patch is different from patch 9 in these ways:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;renaming packages in services to o.a.d.
{iapi,impl}
&lt;p&gt;.jmx&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;MBeans in o.a.d.mbeans&lt;/li&gt;
	&lt;li&gt;only support a single Version bean (no security issues) &lt;span class=&quot;error&quot;&gt;&amp;#91;others can be added later&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;renamed BasicManagementService to JMXManagementService&lt;/li&gt;
	&lt;li&gt;much simplified implementation of ManagementService, single method registerMBean. This of course can be expanded later.&lt;/li&gt;
	&lt;li&gt;simplified code within ManagementService implementation and implements the module api&apos;s correctly, also uses Java 5 generics&lt;/li&gt;
	&lt;li&gt;jdk14 booting implemented by standard modules.properties techniques, no need for special code in the monitor&lt;/li&gt;
	&lt;li&gt;no changes to any policy file - needs to be a follow on patch&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If this seems an acceptable approach then I&apos;ll commit it within a couple of days.&lt;/p&gt;</comment>
                            <comment id="12567448" author="johnemb" created="Sun, 10 Feb 2008 16:47:37 +0000"  >&lt;p&gt;Dan wrote:&lt;br/&gt;
&amp;gt; I&apos;ve been working on a much simplified initial jmx setup based upon patch 9, I&apos;ll attach it as a patch sometime tomorrow once I&apos;ve checked it out some more. (...)&lt;/p&gt;

&lt;p&gt;That certainly sounds great - from the description it seems like a good approach to me. I probably won&apos;t be able to take a look at it until the middle of the week, though, but don&apos;t let that stop you.&lt;/p&gt;</comment>
                            <comment id="12567734" author="djd" created="Mon, 11 Feb 2008 18:13:04 +0000"  >&lt;p&gt;Simplified version of the full patch (version 9) to allow commit of initial functionality without having to solve all the security &amp;amp; other issues. In addition to the changes listed in an earlier comment this patch also unregisters the mbeans it has registered on derby system shutdown. I don&apos;t think the old patch was doing that.&lt;/p&gt;</comment>
                            <comment id="12567771" author="thomanie" created="Mon, 11 Feb 2008 19:39:42 +0000"  >&lt;p&gt;Before reading the complete jira, I did a quick, unbiased read of the FuncSpec v2.1 and had a peek at the simplified v9 patch Dan posted, and put together some minor comments:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Whenever started on a non-JMX capable platform, the funcspec says &quot;Derby will start with the Management Service disabled.&quot;  The patch still has a service called &quot;jmxnone&quot;. This service should probably be mentioned in the Agent Level section along with the services that are there when JMX is available.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Using the Platform MBeanserver and Standard MBeans is the way to go. To my knowledge using these will also cater for future MXBeans. Good choices!&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Version MBean:&lt;br/&gt;
  o Alpha should probably be renamed to isAlpha to align with isBeta?&lt;br/&gt;
  o MaintVersion should probably be written out to MaintenanceVersion?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;MDatabaseMBean:&lt;br/&gt;
  o The first &apos;M&apos; seems to break the naming scheme used for the other MBeans? No explaination for this deviation is given in the FS. Leftover from the Commons Modeller &quot;Model MBean&quot; that was once rejected?&lt;br/&gt;
  o addDBUser() will delete a user too according to the FS, so the name should probably be changed to manageDBUser() or similar?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On skimming the complete Jira afterwards, I see some of my initial comments on the MDatabaseMBean have already been raised by others.&lt;/p&gt;</comment>
                            <comment id="12567785" author="djd" created="Mon, 11 Feb 2008 19:58:32 +0000"  >&lt;p&gt;&amp;gt; - Whenever started on a non-JMX capable platform, the funcspec says &quot;Derby will start with the Management Service disabled.&quot; The patch still has a service called &quot;jmxnone&quot;. This service should probably be mentioned in the Agent Level section along with the services that are there when JMX is available. &lt;/p&gt;

&lt;p&gt; The jmxnone implementation is how the management service is disabled. The Derby interface class ManagementService is an internal api for Derby only, it is not exposed through any jmx interface, only the mbeans are.&lt;/p&gt;

&lt;p&gt;&amp;gt; - Version MBean:&lt;br/&gt;
&amp;gt;  o Alpha should probably be renamed to isAlpha to align with isBeta? &lt;/p&gt;

&lt;p&gt;Agreed there is some cleanup needed there, I didn&apos;t understand why there is a getIsAlpha and an isAlpha().&lt;/p&gt;
</comment>
                            <comment id="12567796" author="thomanie" created="Mon, 11 Feb 2008 20:13:49 +0000"  >&lt;p&gt;djd&amp;gt; The Derby interface class ManagementService is an internal api for Derby only, it is not exposed through any jmx interface, only the mbeans are. &lt;/p&gt;

&lt;p&gt;My (badly worded) point was rather that the FS mentions &lt;br/&gt;
   org.apache.derby.impl.services.mbeans.BasicManagementService.java &lt;br/&gt;
in the case where JMX is available, but nothing about &lt;br/&gt;
   org.apache.derby.impl.services.mbeans.NoManagementService&lt;br/&gt;
in the opposite case &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12567806" author="djd" created="Mon, 11 Feb 2008 20:28:45 +0000"  >&lt;p&gt;&amp;gt; My (badly worded) point was rather that the FS mentions &lt;br/&gt;
&amp;gt;    org.apache.derby.impl.services.mbeans.BasicManagementService.java &lt;br/&gt;
&amp;gt; in the case where JMX is available, but nothing about &lt;br/&gt;
&amp;gt;    org.apache.derby.impl.services.mbeans.NoManagementService&lt;br/&gt;
&amp;gt; in the opposite case &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Ahhh, wasn&apos;t expecting those classes to be in the functional spec, since they are implementation details.&lt;/p&gt;

&lt;p&gt;I changed these names (from patch 9 &amp;amp; hence the functional spec) in the simple patch:&lt;/p&gt;

&lt;p&gt;o.a.d.jmx -&amp;gt; o.a.d.mbeans  (public api)&lt;/p&gt;

&lt;p&gt;o.a.d.iapi.services.mbeans -&amp;gt; o.a.d.iapi.services.jmx&lt;br/&gt;
o.a.d.impl.services.mbeans -&amp;gt; o.a.d.iapi.services.jmx&lt;/p&gt;

&lt;p&gt;Rationale is that the derby internal code is really dealing with jmx and the public api is exposing mbeans.&lt;/p&gt;

&lt;p&gt;BasicManagementService -&amp;gt; JMXManagementService&lt;/p&gt;

&lt;p&gt;Rationale is that the name gives a better indication of its function (never did like the BasicXXX style in Derby)&lt;/p&gt;

&lt;p&gt;jmxnone.NoManagementService - is a an none functional implementation of (Derby&apos;s internal) ManagementService api. It&apos;s there to support environments that do not have JMX. Implementing it as an empty class makes the management service module use the existing functionality for handling different environments rather than having special code in the monitor.&lt;/p&gt;</comment>
                            <comment id="12568327" author="djd" created="Tue, 12 Feb 2008 21:47:20 +0000"  >&lt;p&gt;Committed the simple_9_1 patch and a follow on change that moves the implementation of any Derby MBean out of the o.a.d.mbeans package. Since o.a.d.mbeans becomes part of the public api, having the implementation of beans in there causes issues as some beans will need to be created using implementation specific classes (such as BasicDatabase) which must not appear in javadoc.&lt;/p&gt;</comment>
                            <comment id="12568329" author="djd" created="Tue, 12 Feb 2008 21:59:04 +0000"  >&lt;p&gt;The functional spec states a set of permissions needed when running under the security manager, but it&apos;s a much broader scope of permissions than are actually needed. Derby&apos;s documentation (and its default policy files) should be specifying the minimum permissions.&lt;/p&gt;

&lt;p&gt;I think this will be something like:&lt;/p&gt;

&lt;p&gt;permission javax.management.MBeanServerPermission &quot;createMBeanServer&quot;;&lt;/p&gt;

&lt;p&gt;permission javax.management.MBeanPermission &quot;org.apache.derby.*#&lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.derby:&amp;#93;&lt;/span&gt;&quot;,&quot;register,unregister&quot;;&lt;/p&gt;

&lt;p&gt;permission javax.management.MBeanTrustPermission &quot;register&quot;&lt;/p&gt;

&lt;p&gt;The value of the first field in MBeanPermission may need some tweaking, this was just from reading the javadoc.&lt;/p&gt;</comment>
                            <comment id="12568933" author="johnemb" created="Thu, 14 Feb 2008 13:49:59 +0000"  >&lt;p&gt;Thanks for the new revision of the patch. The committed code seems like a usable starting point for further work. I hope we&apos;re able to add some more useful functionality to it before the 10.4 release - perhaps we could start with a set of monitoring features that are not as sensitive security-wise as some of the ones currently in the funcSpec.&lt;/p&gt;

&lt;p&gt;Due to the missing security permissions Derby&apos;s JMX feature does not currently work &quot;out of the box&quot; with the Network Server when using default settings (Security Manager). Although we&apos;ll add a set of required permissions to the default policy later, I am slightly worried that no hints about missing permissions are given to the user.&lt;/p&gt;

&lt;p&gt;When I now run the Network Server with jdk1.4 and JMX enabled, I see the following in derby.log:&lt;/p&gt;

&lt;p&gt;2008-02-14 13:40:44.874 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;main,5,main&amp;#93;&lt;/span&gt; Class org.apache.derby.impl.services.jmx.JMXManagementService java.lang.UnsupportedClassVersionError: org/apache/derby/impl/services/jmx/JMXManagementService (Unsupported major.minor version 49.0), module ignored.&lt;/p&gt;

&lt;p&gt;The message makes sense to me, but will it make sense to the users?&lt;/p&gt;

&lt;p&gt;Also, the fact that the JMXManagementSerrvice now wraps the MBeans in a StandardMBean has some implications that we (and any Derby MBean developers) should be aware of. For example, emitting notifications or implementing MBeanRegistration won&apos;t work without some extra effort; see &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;. I think using StandardMBean (which technically makes our MBeans &quot;dynamic&quot; instead of &quot;standard&quot;) is useful and provides more flexibility, but I just wanted to point out that it is not necessarily always straight forward.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;: &lt;a href=&quot;http://blogs.sun.com/jmxetc/entry/javax_management_standardmbean_when_and&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blogs.sun.com/jmxetc/entry/javax_management_standardmbean_when_and&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12569008" author="djd" created="Thu, 14 Feb 2008 17:15:04 +0000"  >&lt;p&gt;The Unsupported major.minor version 49.0 should not be happening, the monitor is meant not meant to attempt to load the class since it indicates its modules.properties entry indicates jdk 1.5. I&apos;ll look to see where I messed up.&lt;/p&gt;</comment>
                            <comment id="12569063" author="djd" created="Thu, 14 Feb 2008 19:42:01 +0000"  >&lt;p&gt;Revision: 627826 fixes the unsupported major.minor version in derby.log. The properties in modules.properties were messed up for the jdk requirement. Thanks for noticing the problem John.&lt;/p&gt;</comment>
                            <comment id="12569097" author="djd" created="Thu, 14 Feb 2008 21:38:29 +0000"  >&lt;p&gt;I added a new JDBCMBean that required exposing methods to register and unregister mbeans on the ManagementService api.&lt;br/&gt;
It&apos;s created by the jdbc driver (InternalDriver) Revision: 627877.&lt;/p&gt;

&lt;p&gt;It has some attributes and one operation that maps to Driver.acceptsURL.&lt;/p&gt;</comment>
                            <comment id="12569296" author="johnemb" created="Fri, 15 Feb 2008 15:57:04 +0000"  >&lt;p&gt;I created a new wiki page to keep track of MBeans and other related information that is scattered on the wiki and elsewhere:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/DerbyJMX&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/DerbyJMX&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12569921" author="johnemb" created="Mon, 18 Feb 2008 15:09:31 +0000"  >&lt;p&gt;Some comments regarding (mainly) JMXManagementService.java:&lt;/p&gt;

&lt;p&gt;1) Just to be clear: Is the reason why the unregisterMBean() method takes an&lt;br/&gt;
  Object instead of ObjectName as parameter that it should be possible to &lt;br/&gt;
  call this method from code compiled with jdk1.4? (Same goes for the &lt;br/&gt;
  return type of registerMBean)&lt;/p&gt;

&lt;p&gt;2) The following javadoc comment for registerMBean() now seems outdated:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The object name instance&lt;/li&gt;
	&lt;li&gt;represented by the given String will be created by this method.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3) I think the current use of the term &quot;attribute&quot; in registerMBean() has &lt;br/&gt;
  potential to confuse people. In JMX land, the term &quot;attribute&quot; denotes the &lt;br/&gt;
  MBean properties that are exposed through getter and setter methods. In&lt;br/&gt;
  JMXManagementService.java, the term &quot;attribute&quot; or &quot;nameAttribute&quot; is also&lt;br/&gt;
  used for the key properties of an ObjectName, for example &quot;type=Version&quot; &lt;br/&gt;
  or &quot;jar=derby.jar&quot;.&lt;br/&gt;
  I think using a different term for the latter will make it easier for&lt;br/&gt;
  other people to get acquainted with this code. Official JMX documentation&lt;br/&gt;
  (e.g. the ObjectName javadocs) refers to these properties as &lt;br/&gt;
  &quot;Key properties&quot;, an unordered set of keys and associated values, so &lt;br/&gt;
  perhaps it is better to use that term instead?&lt;/p&gt;

&lt;p&gt;4) Is it true that Monitor.getSystemModule(Module.JMX) will never return null,&lt;br/&gt;
  if we keep the current implementation?&lt;/p&gt;</comment>
                            <comment id="12569952" author="djd" created="Mon, 18 Feb 2008 17:13:37 +0000"  >&lt;p&gt;A1) Yes Object instead of ObjectName to allow the code to be compiled and used with JDK 1.4. Also it allows flexibility in any implementation to use a different object to manage its mbeans.&lt;/p&gt;

&lt;p&gt;A2,A3) - will fix&lt;/p&gt;

&lt;p&gt;A4) - yes.&lt;/p&gt;</comment>
                            <comment id="12569954" author="johnemb" created="Mon, 18 Feb 2008 17:20:59 +0000"  >&lt;p&gt;Attached a patch implementing a set of default permissions for JMX in the server&apos;s policy file in case this is interesting to commit at this point (makes it easier to test run the server with JMX enabled), namely (for derby.jar):&lt;/p&gt;

&lt;p&gt;    permission javax.management.MBeanServerPermission &quot;createMBeanServer&quot;;&lt;br/&gt;
    permission javax.management.MBeanPermission org.apache.derby.*#&lt;span class=&quot;error&quot;&gt;&amp;#91;org.apache.derby:*&amp;#93;&lt;/span&gt;&quot;,&quot;registerMBean,unregisterMBean&quot;;&lt;br/&gt;
    permission javax.management.MBeanTrustPermission &quot;register&quot;;&lt;/p&gt;

&lt;p&gt;This is a slightly modified variant of the permissions outlined in the comment&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1387?focusedCommentId=12568329#action_12568329&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-1387?focusedCommentId=12568329#action_12568329&lt;/a&gt;&lt;br/&gt;
and works with the current trunk (revision 628812).&lt;/p&gt;
</comment>
                            <comment id="12569981" author="djd" created="Mon, 18 Feb 2008 18:05:26 +0000"  >&lt;p&gt;Thanks for the permissions patch John, does it work on JDK 1.4 since these permissions were only added in JDK 1.5?&lt;/p&gt;</comment>
                            <comment id="12570119" author="johnemb" created="Tue, 19 Feb 2008 07:21:36 +0000"  >&lt;p&gt;Yes, the permissions seem to work (i.e. not cause failures) on jdk1.4 as well, just as with the old patch (sorry for not replying sooner).. Not sure why it works, though. &lt;br/&gt;
I have not run the full regression test suites with it yet.&lt;/p&gt;</comment>
                            <comment id="12570281" author="johnemb" created="Tue, 19 Feb 2008 15:58:56 +0000"  >&lt;p&gt;I have a couple of questions related to the building and packaging of MBeans:&lt;/p&gt;

&lt;p&gt;1) All MBean interfaces are placed in the package org.apache.derby.mbeans. All the current classes in this package are included in derby.jar. If someone creates MBeans that are designed to manage or monitor a part of derby that is in a different jar file, e.g. the Network Server (derbynet.jar) or IJ (derbytools.jar), we have a number of options:&lt;/p&gt;

&lt;p&gt;    a) Keep the interface in the same jar as the class(es) referencing the interface. This means that MBean interfaces in org.apache.derby.mbeans may be placed in a number of different jar files.&lt;br/&gt;
    b) Keep all MBean interfaces in one jar, namely derby.jar.&lt;br/&gt;
    c) Include the interface in both derby.jar and the jar which code references the interface.&lt;/p&gt;

&lt;p&gt;  I believe a) is the default today. For example, adding a NetworkServer MBean will result in its interface being included in derbynet.jar only. The org.apache.derby.mbeans package would have to be &quot;unsealed&quot;. &lt;/p&gt;

&lt;p&gt;  Is this the way to proceed, or should we rather pursue option b) or c)?&lt;/p&gt;


&lt;p&gt;2) MBean implementations such as Version and JDBC are compiled with jdk1.4 today. This means that those classes cannot reference the JMX API directly. I wouldn&apos;t be surprised if we at some point would like to utilize the JMX notification scheme with some MBeans, or include various MBean metadata to improve usability. This might require access to the JMX API from such classes.&lt;br/&gt;
I would suspect that changing this (to build such MBean implementations with jdk1.5) will require solving a few non-trivial build dependency issues. Is this a valid concern, or do I worry too much?&lt;/p&gt;
</comment>
                            <comment id="12570286" author="djd" created="Tue, 19 Feb 2008 16:09:23 +0000"  >&lt;p&gt;Not sure if we are on a) or b) at the moment, &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; depends on where &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3435&quot; title=&quot;Add an MBean for monitoring and managing the Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3435&quot;&gt;&lt;del&gt;DERBY-3435&lt;/del&gt;&lt;/a&gt; goes.&lt;/p&gt;

&lt;p&gt;I don&apos;t think there&apos;s an issue with jdk 1.5. We have existing code that is specific to jdk 1.5/jse 6.0. Adding more is not an issue.&lt;/p&gt;</comment>
                            <comment id="12570291" author="johnemb" created="Tue, 19 Feb 2008 16:23:17 +0000"  >&lt;p&gt;OK, thanks (I hope you&apos;re right regarding Q2 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ). I might be able to start progress on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3435&quot; title=&quot;Add an MBean for monitoring and managing the Network Server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3435&quot;&gt;&lt;del&gt;DERBY-3435&lt;/del&gt;&lt;/a&gt; tomorrow.&lt;/p&gt;</comment>
                            <comment id="12570320" author="djd" created="Tue, 19 Feb 2008 17:27:45 +0000"  >&lt;p&gt;How about:&lt;/p&gt;

&lt;p&gt;  d) derby jars can have a unique package sealed for that jar, e.g. o.a.d.mbeans.drda, o.a.d.mbeans.tools etc.&lt;/p&gt;</comment>
                            <comment id="12570366" author="djd" created="Tue, 19 Feb 2008 18:49:26 +0000"  >&lt;p&gt;John, for the permissions patch, what are your expectations for its purpose, ie. what functionality does it bring?&lt;/p&gt;</comment>
                            <comment id="12570376" author="johnemb" created="Tue, 19 Feb 2008 19:16:27 +0000"  >&lt;p&gt;The permissions allow out-of-the box monitoring and management of Derby when the Network Server installs its own security manager by default and derby.system.jmx=true. Users can enjoy the JMX functionality without having to resort to the often cumbersome task of customizing a policy file to replace the default. In a shorter perspective, the patch allows Derby developers and testers to try out the JMX functionality in a convenient way. The permissions may have to be tweaked as the JMX functionality changes, though.&lt;/p&gt;

&lt;p&gt;I think the separate subpackages idea, d), is a good option.&lt;/p&gt;</comment>
                            <comment id="12570396" author="djd" created="Tue, 19 Feb 2008 19:49:13 +0000"  >&lt;p&gt;By &quot;Users&quot; do you mean local jmx clients, because that&apos;s all the permissions will allow isn&apos;t it?&lt;/p&gt;

&lt;p&gt;Or are remote jmx-clients allowed if there is no JMX authentication?&lt;/p&gt;</comment>
                            <comment id="12570415" author="johnemb" created="Tue, 19 Feb 2008 20:20:41 +0000"  >&lt;p&gt;By &quot;Users&quot; I basically meant Network Server VM administrators. As far as I know, the permissions allow Derby&apos;s code to instantiate the MBeanServer if needed and register, unregister and be the source of MBeans. I think there is strictly no concept of users, especially no distinction between local and remote users, in this context...&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, though the source (codebase) of the actions may make a difference. Is there a possibility that such permissions are not needed?&lt;/p&gt;</comment>
                            <comment id="12570420" author="djd" created="Tue, 19 Feb 2008 20:29:19 +0000"  >&lt;p&gt;With remote JMX clients and JMX authentication then each JMXPrincipal needs permissions to perform any JMX actions (such as finding an MBean, getting an attribute or invoking an operation). The policy file does not grant those permissions and I don&apos;t believe it should. I&apos;m just trying to understand what situations you expect it to work.&lt;/p&gt;

&lt;p&gt;I&apos;ve been updating the wiki page with my experiments of running jmx in various configurations. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.apache.org/db-derby/JMXSecurityExpectations&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JMXSecurityExpectations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don&apos;t think I&apos;ve tried remote clients with no jmx authentication though, with the patch can such clients do anything useful?&lt;/p&gt;</comment>
                            <comment id="12570426" author="djd" created="Tue, 19 Feb 2008 20:35:54 +0000"  >&lt;p&gt;John&amp;gt; By &quot;Users&quot; I basically meant Network Server VM administrators.&lt;/p&gt;

&lt;p&gt;If that means the &quot;VM-Admin&quot; (from the JMXSecurityExpectations terminology) then that role is the same as a local jmx-client.&lt;/p&gt;</comment>
                            <comment id="12570438" author="johnemb" created="Tue, 19 Feb 2008 20:49:29 +0000"  >&lt;p&gt;I see... I have only tried remote clients with authentication disabled (so far), and in that case all clients can access all MBeans including enabling/disabling the management service when the permissions in the patch are present. I&apos;m no Java security expert, but I&apos;m guessing no Subject/Principal checking is being performed in that case. With JMX authentication enabled additional or different permissions may be required, I guess.&lt;/p&gt;

&lt;p&gt;Thanks for the wiki update - I&apos;ll read it more carefully tomorrow &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12570797" author="djd" created="Wed, 20 Feb 2008 19:06:09 +0000"  >&lt;p&gt;Patch  jmxPolicyFileChanges_v1.diff  committed (revision 629575) - Thanks John.&lt;/p&gt;</comment>
                            <comment id="12571099" author="johnemb" created="Thu, 21 Feb 2008 16:44:08 +0000"  >&lt;p&gt;Regarding the latest additions to the wiki page &lt;a href=&quot;http://wiki.apache.org/db-derby/JMXSecurityExpectations:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/JMXSecurityExpectations:&lt;/a&gt;&lt;br/&gt;
(new attempt to comment)&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;JMX Security setups:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As a description of how things work, it looks correct to me.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Access Control Proposal:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;See separate mail thread on derby-dev.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12571899" author="johnemb" created="Sun, 24 Feb 2008 13:45:13 +0000"  >&lt;p&gt;Attaching a new version (3.0) of the jmxFuncspec (HTML). I hope I have managed to bring the spec more in alignment with the current state of these features, and what seems to be realistic to include for 10.4. I have also tried to clarify a few issues that were unclear in previous versions of the spec.&lt;/p&gt;

&lt;p&gt;There are still a few minor differences between this spec and what has been committed. The following code changes should be considered:&lt;/p&gt;

&lt;p&gt;VersionMBean:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;change attribute MaintVersion to MaintenanceVersion&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;NetworkServerMBean: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;change return type of attribute DerbyDrdaStreamOutBufferSize from&lt;br/&gt;
   String to int&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;...and some Javadoc issues already mentioned in relevant Jiras.&lt;/p&gt;</comment>
                            <comment id="12571934" author="djd" created="Sun, 24 Feb 2008 19:40:32 +0000"  >&lt;p&gt;Nice update on the spec:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;as a general comment I think the spec should focus on the general jmx setup rather than specific MBeans, attributes, operations etc. Maybe just add a sentence indicating the MBeans listed are valid when the spec is written but may be subject to change. E.g. if a new attribute is added to VersionMBean then having to update the spec seems over the top.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;For VersionMBean I think the getBuildNumberAsInt should be removed, the build number may not be an integer so not providing a conversion method may reinforce that fact. It also adds little value.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the security section it says &quot;When using a custom policy file, the following additional permissions must be granted to derby.jar &quot;. That&apos;s not true, Derby could provide monitoring with a sub-set of those permissions. Not sure what should be put here, maybe just a description of why each permission is required.&lt;br/&gt;
  IN the same section PropertyPermission should be removed, it&apos;s not required for JMX at the moment and may never be.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In the MBeanServer section it says:&lt;br/&gt;
  &quot;When Derby&apos;s Management Service has been started, a valid JMX user will be able to access both the Derby-specific MBeans registered by the Management Service, as well as any other MBeans or MXBeans made available by the managed JVM, if the JMX client supports this.&quot;&lt;br/&gt;
  It&apos;s more complicated than that, given the definition of JMX user, it&apos;s not true that such a JMX user &quot;will be able to access both ...&quot;, a JMX User may be restricted into which MBeans it can access or even see.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12572041" author="johnemb" created="Mon, 25 Feb 2008 10:05:29 +0000"  >&lt;p&gt;Thanks for useful feedback on the func spec. Attaching a new version (3.1) with the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Clarified that MBean specifics are subject to change.&lt;/li&gt;
	&lt;li&gt;Clarified that this spec assumes that most official documentation will not be available for 10.4.&lt;/li&gt;
	&lt;li&gt;Removed the BuildNumberAsInt attribute of VersionMBean.&lt;/li&gt;
	&lt;li&gt;Removed PropertyPermission from listing in Java Security section. Also improved some of the wording and added &quot;air&quot; to the sample policy file to improve readability.&lt;/li&gt;
	&lt;li&gt;Loosened up some statements in the Management Service section regarding MBeanServers and JMX access which may not be true in all scenarios.&lt;/li&gt;
	&lt;li&gt;Some other cosmetic changes.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12573451" author="djd" created="Thu, 28 Feb 2008 21:09:29 +0000"  >&lt;p&gt;FYI on why the JDK 1.5 specific JMX permissions work in the policy file in JDK 1.4.&lt;/p&gt;

&lt;p&gt;Any unresolved permission is automatically resolved to java.security.UnresolvedPermission and re-resolved later.&lt;/p&gt;

&lt;p&gt;This is actually needed for application defined permission classes where the system cannot load them until the policy has been created, otherwise their static initialization code could take advantage of the lack of security policy at that time.&lt;/p&gt;</comment>
                            <comment id="12585591" author="johnemb" created="Fri, 4 Apr 2008 16:44:53 +0100"  >&lt;p&gt;Attaching version 3.2 of the functional spec for this feature, in an effort to make this relatively up-to-date regarding the 10.4.1 release.&lt;/p&gt;</comment>
                            <comment id="12585592" author="johnemb" created="Fri, 4 Apr 2008 16:49:10 +0100"  >&lt;p&gt;JMX Management and Monitoring functionality has been added to trunk and the 10.4 code branch. Marking this issue as resolved/fixed.&lt;/p&gt;</comment>
                            <comment id="12585595" author="johnemb" created="Fri, 4 Apr 2008 16:50:22 +0100"  >&lt;p&gt;Closing this issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12356374">DERBY-2109</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12388783">DERBY-3424</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12362952" name="DERBY-1387-1.diff" size="73737" author="olegborstad" created="Wed, 1 Aug 2007 09:30:27 +0100"/>
                            <attachment id="12362953" name="DERBY-1387-1.stat" size="1196" author="olegborstad" created="Wed, 1 Aug 2007 09:30:28 +0100"/>
                            <attachment id="12363402" name="DERBY-1387-2.diff" size="73732" author="olegborstad" created="Wed, 8 Aug 2007 13:16:56 +0100"/>
                            <attachment id="12363403" name="DERBY-1387-2.stat" size="1196" author="olegborstad" created="Wed, 8 Aug 2007 13:16:56 +0100"/>
                            <attachment id="12363578" name="DERBY-1387-3.diff" size="75842" author="olegborstad" created="Fri, 10 Aug 2007 11:30:44 +0100"/>
                            <attachment id="12363579" name="DERBY-1387-3.stat" size="1295" author="olegborstad" created="Fri, 10 Aug 2007 11:30:45 +0100"/>
                            <attachment id="12364398" name="DERBY-1387-4.diff" size="77001" author="bernt" created="Thu, 23 Aug 2007 09:53:21 +0100"/>
                            <attachment id="12364399" name="DERBY-1387-4.stat" size="1295" author="bernt" created="Thu, 23 Aug 2007 09:53:21 +0100"/>
                            <attachment id="12366993" name="DERBY-1387-5.diff" size="87887" author="bernt" created="Wed, 3 Oct 2007 12:15:58 +0100"/>
                            <attachment id="12366994" name="DERBY-1387-5.stat" size="1552" author="bernt" created="Wed, 3 Oct 2007 12:15:58 +0100"/>
                            <attachment id="12367065" name="DERBY-1387-6.zip" size="15942" author="bernt" created="Thu, 4 Oct 2007 13:54:08 +0100"/>
                            <attachment id="12367740" name="DERBY-1387-7.zip" size="16804" author="bernt" created="Mon, 15 Oct 2007 10:24:05 +0100"/>
                            <attachment id="12369883" name="DERBY-1387-8.zip" size="14478" author="bernt" created="Tue, 20 Nov 2007 14:57:26 +0000"/>
                            <attachment id="12374267" name="DERBY-1387-9.diff" size="100141" author="johnemb" created="Tue, 29 Jan 2008 15:54:37 +0000"/>
                            <attachment id="12374268" name="DERBY-1387-9.stat" size="1615" author="johnemb" created="Tue, 29 Jan 2008 15:54:37 +0000"/>
                            <attachment id="12335224" name="Requirements for JMX Updated.html" size="194200" author="sanket" created="Fri, 9 Jun 2006 01:49:47 +0100"/>
                            <attachment id="12335223" name="Requirements for JMX.html" size="194168" author="sanket" created="Fri, 9 Jun 2006 01:36:51 +0100"/>
                            <attachment id="12335196" name="Requirements for JMX.zip" size="15051" author="sanket" created="Thu, 8 Jun 2006 19:12:04 +0100"/>
                            <attachment id="12375255" name="derby1387_simple_9_1.txt" size="13886" author="djd" created="Mon, 11 Feb 2008 18:13:04 +0000"/>
                            <attachment id="12339228" name="derbyjmx.patch" size="140728" author="sanket" created="Mon, 21 Aug 2006 12:44:36 +0100"/>
                            <attachment id="12361143" name="jmx.diff" size="75853" author="olegborstad" created="Wed, 4 Jul 2007 14:42:33 +0100"/>
                            <attachment id="12361144" name="jmx.stat" size="1054" author="olegborstad" created="Wed, 4 Jul 2007 14:42:33 +0100"/>
                            <attachment id="12379407" name="jmxFuncspec.html" size="75943" author="johnemb" created="Fri, 4 Apr 2008 16:44:53 +0100"/>
                            <attachment id="12376395" name="jmxFuncspec.html" size="71822" author="johnemb" created="Mon, 25 Feb 2008 10:05:29 +0000"/>
                            <attachment id="12376347" name="jmxFuncspec.html" size="68912" author="johnemb" created="Sun, 24 Feb 2008 13:45:13 +0000"/>
                            <attachment id="12374671" name="jmxFuncspec.html" size="45719" author="johnemb" created="Mon, 4 Feb 2008 12:47:42 +0000"/>
                            <attachment id="12374560" name="jmxFuncspec.html" size="43214" author="johnemb" created="Fri, 1 Feb 2008 15:20:25 +0000"/>
                            <attachment id="12363307" name="jmxFuncspec.html" size="20269" author="olegborstad" created="Tue, 7 Aug 2007 09:12:17 +0100"/>
                            <attachment id="12375848" name="jmxPolicyFileChanges_v1.diff" size="2956" author="johnemb" created="Mon, 18 Feb 2008 17:20:59 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12387773">DERBY-3385</subtask>
                            <subtask id="12388932">DERBY-3429</subtask>
                            <subtask id="12389028">DERBY-3435</subtask>
                            <subtask id="12389518">DERBY-3462</subtask>
                            <subtask id="12389551">DERBY-3466</subtask>
                            <subtask id="12390391">DERBY-3506</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 8 Jun 2006 23:56:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>29974</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0t5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38540</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>