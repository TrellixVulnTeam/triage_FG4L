<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:09:42 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3431/DERBY-3431.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3431] DatabaseMetaData.getConnection returns the wrong connection when using connection pooling</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3431</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The connection returned from DatabaseMetaData.getConnection is not the same as the connection used to create the meta data object when the client driver is used with connection pooling enabled.&lt;br/&gt;
For trunk, the embedded driver/ds does the right thing.&lt;/p&gt;</description>
                <environment>Client-server with connection pooling enabled.</environment>
        <key id="12388985">DERBY-3431</key>
            <summary>DatabaseMetaData.getConnection returns the wrong connection when using connection pooling</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kristwaa">Kristian Waagan</assignee>
                                    <reporter username="kristwaa">Kristian Waagan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 19 Feb 2008 10:12:00 +0000</created>
                <updated>Mon, 4 May 2009 19:22:43 +0100</updated>
                            <resolved>Mon, 2 Jun 2008 11:30:15 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.2.1</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>JDBC</component>
                    <component>Network Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12570164" author="kristwaa" created="Tue, 19 Feb 2008 10:18:56 +0000"  >&lt;p&gt;I have not tested this with earlier releases yet, but I suspect the bug is present there as well.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a repro in the form of a diff for DatabaseMetaDataTest.&lt;br/&gt;
When run on trunk, I get these two failures (XADS and CPDS):&lt;br/&gt;
junit.textui.TestRunner org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest&lt;br/&gt;
.........................................&lt;br/&gt;
..............................F.F.&lt;br/&gt;
Time: 180.262&lt;br/&gt;
There were 2 failures:&lt;br/&gt;
1) testConnectionSpecific(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)junit.framework.AssertionFailedError: expected same:&amp;lt;org.apache.derby.client.am.LogicalConnection40@696ad1&amp;gt; was not:&amp;lt;org.apache.derby.client.net.NetConnection40@e3e688&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testConnectionSpecific(DatabaseMetaDataTest.java:708)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:99)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
2) testConnectionSpecific(org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest)junit.framework.AssertionFailedError: expected same:&amp;lt;org.apache.derby.client.am.LogicalConnection40@636b5&amp;gt; was not:&amp;lt;org.apache.derby.client.net.NetConnection40@1f1c3dc&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testConnectionSpecific(DatabaseMetaDataTest.java:708)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:99)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 73,  Failures: 2,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="12570340" author="myrna" created="Tue, 19 Feb 2008 17:54:36 +0000"  >&lt;p&gt;I think this is a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2531&quot; title=&quot;client returns different connection on s.getConnection() on a statement obtained from a ConnectionPoolDataSource or XADataSource than the original connection.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2531&quot;&gt;&lt;del&gt;DERBY-2531&lt;/del&gt;&lt;/a&gt;, which is a duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1018&quot; title=&quot;Client xa Statement.getConnection and DatabaseMetadata.getConnection returns underlying NetXAConnection instead of  Logical connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1018&quot;&gt;&lt;del&gt;DERBY-1018&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12570378" author="kristwaa" created="Tue, 19 Feb 2008 19:25:13 +0000"  >&lt;p&gt;Thanks Myrna, you are correct.&lt;/p&gt;

&lt;p&gt;If it&apos;s okay, I plan to keep this issue open and handle (myself or someone else that beats me to it) the DatabaseMetaData.getConnection issue&lt;br/&gt;
 here, while the Statement.getConnection issue could be handled under the first, original bug report.&lt;/p&gt;

&lt;p&gt;Note that these issues involve both DatabaseMetaData and Statement for XAConnections and PooledConnections (XADataSource and ConnectionPoolDataSource) in the client driver.&lt;/p&gt;

&lt;p&gt;This bug annoys me quite a bit, because it causes a number of tests to fail when I run suites.All forcibly with connection pooling enabled (as part of testing the statement pooling feature). I would be happy if someone wants to fix it for 10.4 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12570379" author="kristwaa" created="Tue, 19 Feb 2008 19:27:11 +0000"  >&lt;p&gt;Updating affected versions based on what&apos;s reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1018&quot; title=&quot;Client xa Statement.getConnection and DatabaseMetadata.getConnection returns underlying NetXAConnection instead of  Logical connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1018&quot;&gt;&lt;del&gt;DERBY-1018&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12587203" author="dyret" created="Wed, 9 Apr 2008 15:11:37 +0100"  >&lt;p&gt;I&apos;ve been thinking a bit about how best to address this issue. As far as I can see there are 3 different ways of solving this:&lt;/p&gt;

&lt;p&gt;1) Let LogicalConnection.createStatement() (and perhaps prepareStatement and similar methods) overwrite the connection_ variable inside Statement with a reference to itself (a LogicalConnection). This has the disadvantage of changing an internal member variable that is used for, among other things, synchronization.&lt;/p&gt;

&lt;p&gt;2) Create a new member variable (logicalConnection_) which normally is null, but is set to point to the LogicalConnection which created the statement (if a LogicalConnection was used)&lt;/p&gt;

&lt;p&gt;3) Force all use of Statements to use a LogicalStatement whenever connection pooling is used (even when statement pooling is not enabled). This would make the code more uniform, but adds an unnecessary level of indirection when statement caching is not used.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="12589081" author="kristwaa" created="Tue, 15 Apr 2008 14:55:22 +0100"  >&lt;p&gt;Was the previous comment meant for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1018&quot; title=&quot;Client xa Statement.getConnection and DatabaseMetadata.getConnection returns underlying NetXAConnection instead of  Logical connection&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1018&quot;&gt;&lt;del&gt;DERBY-1018&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Anyway, I think we might have to introduce a logical meta data object, because only a single instance is being used per connection. If we don&apos;t add a wrapper class, references to the physical connection itself or other logical connections will leak out to the user.&lt;/p&gt;

&lt;p&gt;A wrapper object is not used in the embedded driver, but as far as I can see there is a bug in the implementation. The bug causes connection references to &quot;leak&quot;, in such a way that user A with logical connection 1, at a later time (after connection 1 is closed) can obtain a reference to logical connection 2 created by user B. I will log this bug tomorrow with a repro.&lt;/p&gt;</comment>
                            <comment id="12590414" author="kristwaa" created="Fri, 18 Apr 2008 13:19:37 +0100"  >&lt;p&gt;The following test code, which I will commit when I get around to it, gives the failures below.&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Tests that DatabaseMetaData.getConnection does not leak references to&lt;/li&gt;
	&lt;li&gt;physical connections or other logical connections.&lt;br/&gt;
     *&lt;/li&gt;
	&lt;li&gt;@throws SQLException if something goes wrong&lt;br/&gt;
     */&lt;br/&gt;
    public void testConnectionLeakInDatabaseMetaData()&lt;br/&gt;
            throws SQLException 
{
        ConnectionPoolDataSource cpDs =
                J2EEDataSource.getConnectionPoolDataSource();
        PooledConnection pc = cpDs.getPooledConnection();
        Connection con1 = pc.getConnection();
        DatabaseMetaData dmd1 = con1.getMetaData();
        assertSame(con1, dmd1.getConnection());
        con1.close();
        Connection con2 = pc.getConnection();
        DatabaseMetaData dmd2 = con2.getMetaData();
        assertSame(con2, dmd2.getConnection());
        assertNotSame(con2, dmd1.getConnection());
    }&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;There were 2 failures:&lt;br/&gt;
1) testConnectionLeakInDatabaseMetaData(org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest)junit.framework.AssertionFailedError: expected not same&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testConnectionLeakInDatabaseMetaData(J2EEDataSourceTest.java:2701)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
2) testConnectionLeakInDatabaseMetaData(org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest)junit.framework.AssertionFailedError: expected same:&amp;lt;org.apache.derby.client.am.LogicalConnection40@1c8ad52&amp;gt; was not:&amp;lt;org.apache.derby.client.net.NetConnection40@1eb139e&amp;gt;&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testConnectionLeakInDatabaseMetaData(J2EEDataSourceTest.java:2696)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:103)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:21)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:25)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;/p&gt;

&lt;p&gt;FAILURES!!!&lt;br/&gt;
Tests run: 39,  Failures: 2,  Errors: 0&lt;/p&gt;</comment>
                            <comment id="12590852" author="kristwaa" created="Mon, 21 Apr 2008 07:25:30 +0100"  >&lt;p&gt;Patch 2a adds a new test to J2EEDataSourceTest. It fails, so it is has been disabled for now.&lt;br/&gt;
It is a bit different than DatabaseMetaDataTest.testConnectionSpecific, so both patch 1a and 2a could be committed.&lt;/p&gt;

&lt;p&gt;Ready for review.&lt;/p&gt;</comment>
                            <comment id="12591597" author="kristwaa" created="Wed, 23 Apr 2008 11:13:45 +0100"  >&lt;p&gt;Committed &apos;derby-3431-2a-test.diff&apos; to trunk with revision 650814.&lt;br/&gt;
The test is still disabled.&lt;/p&gt;

&lt;p&gt;Leaving patch available flag set, I&apos;ll look into getting the other test committed as well. And of course, a fix has to be made as well &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12598234" author="kristwaa" created="Tue, 20 May 2008 10:51:45 +0100"  >&lt;p&gt;&apos;derby-3431-1b-test_repro.diff&apos; is almost identical to 1a except for some minor tweaks.&lt;br/&gt;
Only the test for embedded has been enabled, as the test fails with the client driver.&lt;/p&gt;

&lt;p&gt;Committed &apos;derby-3431-1b-test_repro.diff&apos; to trunk with revision 658181.&lt;/p&gt;</comment>
                            <comment id="12598679" author="kristwaa" created="Wed, 21 May 2008 16:09:06 +0100"  >&lt;p&gt;&apos;derby-3431-3a-client_logical_metadata.diff&apos; introduces a logical database metadata object in the client driver.&lt;br/&gt;
One such object will be created (on demand) for each logical connection. In general it only forwards method calls to the metadata object of the underlying physical connection. If the logical connection is closed, it will not forward the calls even if the underlying physical connection is still open.&lt;/p&gt;

&lt;p&gt;Besides general comments / review, a few points to look at:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;LogicalDatabaseMetaData.detach : Is this required / worth the hassle?&lt;/li&gt;
	&lt;li&gt;What about unwrap / isWrapper for?&lt;/li&gt;
	&lt;li&gt;The logicalCon.isClosed() check in getRealMetaDataObject - can it ever happen?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Regression tests run without failures (except for the SetTransactionIsolation:embedded error).&lt;br/&gt;
Patch ready for review.&lt;/p&gt;</comment>
                            <comment id="12600052" author="kristwaa" created="Tue, 27 May 2008 08:25:07 +0100"  >&lt;p&gt;I plan to commit this patch tomorrow.&lt;br/&gt;
Would be nice if someone could look at it to get rid of any initial problems with the patch.&lt;/p&gt;</comment>
                            <comment id="12600105" author="knutanders" created="Tue, 27 May 2008 13:24:01 +0100"  >&lt;p&gt;&amp;gt; Besides general comments / review, a few points to look at:&lt;br/&gt;
&amp;gt; * LogicalDatabaseMetaData.detach : Is this required / worth the&lt;br/&gt;
&amp;gt;   hassle?&lt;/p&gt;

&lt;p&gt;I don&apos;t think it&apos;s required. The LDMD might hang on to some more&lt;br/&gt;
resources if it&apos;s not detached, but given that the physical objects&lt;br/&gt;
generally live longer than the logical ones, I wouldn&apos;t expect that to&lt;br/&gt;
cause too much trouble.&lt;/p&gt;

&lt;p&gt;LDMD only references two objects: The logical connection and the&lt;br/&gt;
physical meta-data object. Since the detach happens when the logical&lt;br/&gt;
connection is closed and has released all its resources, preserving&lt;br/&gt;
the reference to LC shouldn&apos;t do any harm.&lt;/p&gt;

&lt;p&gt;Nulling out the physical meta-data object makes more sense, as it has&lt;br/&gt;
a reference to the physical connection. What about removing the&lt;br/&gt;
detach() method and moving the realMeta field to LogicalConnection&lt;br/&gt;
(with a package-private accessor method)? Then realMeta can be nulled&lt;br/&gt;
out directly by LogicalConnection.close(), and LDMD doesn&apos;t have to&lt;br/&gt;
check that logicalCon and realMeta are non-null and open since that&apos;ll&lt;br/&gt;
be hidden in LogicalConnection.getRealMetaData().&lt;/p&gt;

&lt;p&gt;&amp;gt; * What about unwrap / isWrapper for?&lt;/p&gt;

&lt;p&gt;The implementation in the patch allows you to access the underlying&lt;br/&gt;
physical object, doesn&apos;t it? I think it&apos;s better if unwrap() only&lt;br/&gt;
returns the logical object.&lt;/p&gt;

&lt;p&gt;&amp;gt; * The logicalCon.isClosed() check in getRealMetaDataObject - can it&lt;br/&gt;
&amp;gt;   ever happen?&lt;/p&gt;

&lt;p&gt;I don&apos;t know. Perhaps if the physical connection dies because of a&lt;br/&gt;
severe error? It&apos;s probably OK to check that it&apos;s open.&lt;/p&gt;

&lt;p&gt;Other comments:&lt;/p&gt;

&lt;p&gt;LogicalConnection40 has its own private field called&lt;br/&gt;
logicalDatabaseMetaData, so the field with the same name in&lt;br/&gt;
LogicalConnection isn&apos;t used in the JDBC 4.0 driver. I think this&lt;br/&gt;
means that detach() is never called in the JDBC 4.0 driver.&lt;/p&gt;

&lt;p&gt;I&apos;d say that instead of reimplementing the entire getMetaData() method&lt;br/&gt;
in LogicalConnection40, we should have a method called something like&lt;br/&gt;
newLogicalMetaData() in LC and LC40. This method should simply create&lt;br/&gt;
a new logical meta-data object of the correct subclass and be used by&lt;br/&gt;
LC.getMetaData(). Then there&apos;s no need to reimplement the caching of&lt;br/&gt;
the meta-data objects in LC40.&lt;/p&gt;

&lt;p&gt;Nit: assertNotSame() could be removed in the code below since&lt;br/&gt;
getConnection() is expected to fail.&lt;br/&gt;
+        try &lt;/p&gt;
{
+            assertNotSame(con2, dmd1.getConnection());
+            fail(&quot;Should have thrown no current connection exception&quot;);
+        }
&lt;p&gt; catch (SQLException sqle) &lt;/p&gt;
{
+            assertSQLState(&quot;08003&quot;, sqle);
+        }</comment>
                            <comment id="12600387" author="kristwaa" created="Wed, 28 May 2008 07:58:14 +0100"  >&lt;p&gt;Thank you for the comments Knut Anders.&lt;br/&gt;
I&apos;ll have a look at them and try to finalize the patch today.&lt;/p&gt;

&lt;p&gt;Regarding the test nit, I&apos;ll remove it. Note that embedded currently returns the same reference there, causing the assertNotSame to fail. It doesn&apos;t matter though, as the method is supposed to throw the &quot;No current connection&quot; exception.&lt;/p&gt;</comment>
                            <comment id="12600451" author="kristwaa" created="Wed, 28 May 2008 13:17:13 +0100"  >&lt;p&gt;&apos;derby-3431-3b-client_logical_metadata.diff&apos; addresses the comments Knut Anders made, and contains a few other minor changes.&lt;/p&gt;

&lt;p&gt;&amp;#8211; StatementPoolingTests&lt;br/&gt;
   Extended test to check for implementation class, to make sure a JDBC 4 class is returned in a JDBC 4 env.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Reference to the real metadata object&lt;br/&gt;
   There is no reference to the real / physical metadata object anymore. The getMetaData method of the physical connection is called each time the object needs to be accessed.&lt;/p&gt;

&lt;p&gt;&amp;#8211; LogicalDatabaseMetaData.getRealMetaDataObject&lt;br/&gt;
   I was a bit lazy and didn&apos;t want to remove the method, as it would probably require that many lines would become longer than 80 characters... Can be removed (make logicalCon protected / package-private then).&lt;/p&gt;


&lt;p&gt;The regression tests passed, but I made a few late changes so I&apos;m running them again. Will report back when they&apos;re done.&lt;/p&gt;

&lt;p&gt;Patch ready for another round of review.&lt;/p&gt;</comment>
                            <comment id="12600492" author="kristwaa" created="Wed, 28 May 2008 15:38:08 +0100"  >&lt;p&gt;With the exception of &quot;SetTransactionIsolation:embedded&quot;, suites.All and derbyall ran without failures with patch 3b.&lt;/p&gt;</comment>
                            <comment id="12601574" author="knutanders" created="Mon, 2 Jun 2008 10:55:25 +0100"  >&lt;p&gt;Thanks for the new patch, Kristian! The changes look good to me. +1 to commit.&lt;/p&gt;

&lt;p&gt;A tiny nit in StatementPoolingTest; the code below could be expressed with an assertEquals now that there&apos;s only one condition:&lt;/p&gt;

&lt;p&gt;         if (!simpleName.equals(expectedName)) {&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (!simpleName.equals(expectedName + &quot;40&quot;)) 
{
-                fail(&quot;Expected class name &quot; + expectedName + &quot; or &quot; +
-                        expectedName + &quot;40, got &quot; + simpleName);
-            }
&lt;p&gt;+            fail(&quot;Expected class name &quot; + expectedName + &quot;, got &quot; +&lt;br/&gt;
+                    simpleName);&lt;br/&gt;
         }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12601581" author="kristwaa" created="Mon, 2 Jun 2008 11:17:06 +0100"  >&lt;p&gt;Thank you for the continued review Knut Anders.&lt;/p&gt;

&lt;p&gt;I committed patch 3b to trunk with revision 662383.&lt;br/&gt;
The test nit you pointed out will be addressed shortly in a separate patch.&lt;/p&gt;</comment>
                            <comment id="12601582" author="kristwaa" created="Mon, 2 Jun 2008 11:29:25 +0100"  >&lt;p&gt;&apos;derby-3431-4a-spt_test_nit.diff&apos; addresses the test nit.&lt;br/&gt;
Committed to trunk with revision 662386.&lt;/p&gt;</comment>
                            <comment id="12601583" author="kristwaa" created="Mon, 2 Jun 2008 11:30:15 +0100"  >&lt;p&gt;Marking as resolved, awaiting test runs (and other feedback) for confirmation of the fix.&lt;/p&gt;</comment>
                            <comment id="12671834" author="kristwaa" created="Mon, 9 Feb 2009 12:45:24 +0000"  >&lt;p&gt;No problems reported. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="12366793">DERBY-2531</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12329272">DERBY-1018</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12375913" name="derby-3431-1a-test_repro.diff" size="2093" author="kristwaa" created="Tue, 19 Feb 2008 10:18:56 +0000"/>
                            <attachment id="12382367" name="derby-3431-1b-test_repro.diff" size="2375" author="kristwaa" created="Tue, 20 May 2008 10:51:44 +0100"/>
                            <attachment id="12380594" name="derby-3431-2a-test.diff" size="2218" author="kristwaa" created="Mon, 21 Apr 2008 07:25:30 +0100"/>
                            <attachment id="12382476" name="derby-3431-3a-client_logical_metadata.diff" size="44360" author="kristwaa" created="Wed, 21 May 2008 16:09:06 +0100"/>
                            <attachment id="12382477" name="derby-3431-3a-client_logical_metadata.stat" size="486" author="kristwaa" created="Wed, 21 May 2008 16:09:06 +0100"/>
                            <attachment id="12382925" name="derby-3431-3b-client_logical_metadata.diff" size="45325" author="kristwaa" created="Wed, 28 May 2008 13:17:13 +0100"/>
                            <attachment id="12383216" name="derby-3431-4a-spt_test_nit.diff" size="757" author="kristwaa" created="Mon, 2 Jun 2008 11:29:25 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 19 Feb 2008 17:54:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23641</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39233</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>