<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:42:22 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1686/DERBY-1686.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1686] Grant/Revoke: Attempt to GRANT access to another user on a VIEW, created by the current user with only SELECT privilege on the base table does not fail</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1686</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;With authentication on, attempting to execute a GRANT privilege  to &apos;user3&apos; on a VIEW created by the &apos;user2&apos; - who has only SELECT privilege&lt;br/&gt;
on the base table created by &apos;user1&apos; does not fail. This results in &apos;user3&apos; getting access to the table created by &apos;user1&apos; through the view.&lt;/p&gt;

&lt;p&gt;I remember a discussion on the list to raise an error when an attempt is execute a GRANT on the view, until WITH GRANT option is implemented.&lt;/p&gt;

&lt;p&gt;Here is the repro:&lt;/p&gt;

&lt;p&gt;java -cp derby.jar;.\derbytools.jar -Dderby.database.sqlAuthorization=true -Dij.exceptionTrace=true   org.apache.derby.tools.ij select_table_no_privilege.sql&lt;br/&gt;
ij version 10.2&lt;br/&gt;
ij&amp;gt; &amp;#8211;&lt;br/&gt;
--create db as user1&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
connect &apos;jdbc:derby:grntrevokedb;create=true&apos; user &apos;user1&apos;;&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij&amp;gt; create table t1(id int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t1 values(100);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; insert into t1 values(200);&lt;br/&gt;
1 row inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211;&lt;br/&gt;
--Grant select to user2&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
grant select on t1 to user2;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; &amp;#8211;&lt;br/&gt;
--Connect as user2&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
connect &apos;jdbc:derby:grntrevokedb;create=true&apos; user &apos;user2&apos;;&lt;br/&gt;
WARNING 01J01: Database &apos;grntrevokedb&apos; not created, connection made to existingdatabase instead.&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij(CONNECTION1)&amp;gt; select * from user1.t1;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
100&lt;br/&gt;
200&lt;/p&gt;

&lt;p&gt;2 rows selected&lt;br/&gt;
ij(CONNECTION1)&amp;gt; &amp;#8211;&lt;br/&gt;
--Create view&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
create view v1 as select * from user1.t1;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(CONNECTION1)&amp;gt; select * from v1;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
100&lt;br/&gt;
200&lt;/p&gt;

&lt;p&gt;2 rows selected&lt;br/&gt;
ij(CONNECTION1)&amp;gt; &amp;#8211;&lt;br/&gt;
--Grant select on view to user3. With the WITH GRANT option this should have failed&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
grant select on v1 to user3;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(CONNECTION1)&amp;gt; &amp;#8211;&lt;br/&gt;
--Connect as user3&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
connect &apos;jdbc:derby:grntrevokedb;create=true&apos; user &apos;user3&apos;;&lt;br/&gt;
WARNING 01J01: Database &apos;grntrevokedb&apos; not created, connection made to existing&lt;br/&gt;
database instead.&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij(CONNECTION2)&amp;gt; &amp;#8211;&lt;br/&gt;
--No select privilege on base table user1.t1, hence will FAIL&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
select * from user1.t1;&lt;br/&gt;
ERROR 28508: User &apos;USER3&apos; does not have select permission on column &apos;ID&apos; of table &apos;USER1&apos;.&apos;T1&apos;.&lt;br/&gt;
ERROR 28508: User &apos;USER3&apos; does not have select permission on column &apos;ID&apos; of table &apos;USER1&apos;.&apos;T1&apos;.&lt;br/&gt;
        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
        at org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(Unknown Source)&lt;br/&gt;
        at org.apache.derby.exe.ac295dc08bx010dx00a2x500ax00000011df100.fillResultSet(Unknown Source)&lt;br/&gt;
        at org.apache.derby.exe.ac295dc08bx010dx00a2x500ax00000011df100.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericActivationHolder.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)&lt;/p&gt;

&lt;p&gt;        at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.tools.ij.Main14.main(Unknown Source)&lt;br/&gt;
        at org.apache.derby.tools.ij.main(Unknown Source)&lt;br/&gt;
ij(CONNECTION2)&amp;gt; &amp;#8211;&lt;br/&gt;
--Select from the view on the base table should also FAIL, but does not&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
select * from user2.v1;&lt;br/&gt;
ID&lt;br/&gt;
-----------&lt;br/&gt;
100&lt;br/&gt;
200&lt;/p&gt;

&lt;p&gt;2 rows selected&lt;br/&gt;
ij(CONNECTION2)&amp;gt;&lt;/p&gt;</description>
                <environment>Any</environment>
        <key id="12347842">DERBY-1686</key>
            <summary>Grant/Revoke: Attempt to GRANT access to another user on a VIEW, created by the current user with only SELECT privilege on the base table does not fail</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="yipng">Yip Ng</assignee>
                                    <reporter username="kartha">Rajesh Kartha</reporter>
                        <labels>
                    </labels>
                <created>Sat, 12 Aug 2006 05:46:35 +0100</created>
                <updated>Thu, 13 Dec 2007 09:05:09 +0000</updated>
                            <resolved>Mon, 18 Sep 2006 17:47:44 +0100</resolved>
                                    <version>10.2.1.6</version>
                                    <fixVersion>10.2.1.6</fixVersion>
                    <fixVersion>10.3.1.4</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12430179" author="mamtas" created="Thu, 24 Aug 2006 07:58:52 +0100"  >&lt;p&gt;IMO, whoever plans to work on this issue should followup on thread titled &quot;Question on Grant revoke functional spec &quot; at &lt;a href=&quot;http://www.nabble.com/Question-on-Grant-revoke-functional-spec-tf2005154.html#a5507724&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Question-on-Grant-revoke-functional-spec-tf2005154.html#a5507724&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12430611" author="yipng" created="Fri, 25 Aug 2006 21:12:04 +0100"  >&lt;p&gt;Some discussion regarding permission cache can be found in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1539&quot; title=&quot;A  trigger should be dropped when a privilege required by the trigger is revoked.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1539&quot;&gt;&lt;del&gt;DERBY-1539&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1330&quot; title=&quot;Provide runtime privilege checking for grant/revoke functionality&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1330&quot;&gt;&lt;del&gt;DERBY-1330&lt;/del&gt;&lt;/a&gt;.  &lt;/p&gt;</comment>
                            <comment id="12430644" author="yipng" created="Fri, 25 Aug 2006 23:03:23 +0100"  >&lt;p&gt;To resolve this issue, the permission cache problem needs to be addressed first.  Currently the permissions cache won&apos;t work properly when we are dealing with 2 types of keys associated with PermissionDescriptors. It looks like when calling getXXXPermissions(UUID), there is no choice but to load it from sys.sysdepends each time getXXXPermissions(UUID) is called since:&lt;/p&gt;

&lt;p&gt;1. The UUID of the PermissionDescriptor as a key will always miss the cache because the identity of the object is determined by the grantee and other related fields currently.&lt;/p&gt;

&lt;p&gt;2. The UUID of the PermissionDescriptor is not part of the equations of equals and hashCode method. It cannot because Derby do not know the &quot;other&quot; key value upfront during compilation of a statement until we retrieve it from the stored dependencies using the alternative key. &lt;/p&gt;

&lt;p&gt;3.  I think it is unsafe (and probably not a good idea) to modify equals and hashCode method to have 2 different type of logic for identity comparison as it may lead to unpredictable results if somehow the object&apos;s hash code is changed when it is in the hash table(cache).&lt;/p&gt;

&lt;p&gt;Hence, I propose we first bypass the cache mechanism when we only know about the permission descriptor uuid.  For the other case, we can still use the permissions cache.  We can revisit this caching area later for performance improvements for grant and revoke statement.&lt;/p&gt;
</comment>
                            <comment id="12430704" author="yipng" created="Sat, 26 Aug 2006 07:42:53 +0100"  >&lt;p&gt;Attaching experimental patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1686&quot; title=&quot;Grant/Revoke: Attempt to GRANT access to another user on a VIEW, created by the current user with only SELECT privilege on the base table does not fail&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1686&quot;&gt;&lt;del&gt;DERBY-1686&lt;/del&gt;&lt;/a&gt;.  I ran derbyall on it and grantRevokeDDL.sql is the only diff I see.  It turns out that the master file of this testcase have incorrect expected behavior of certain test scenarios.  I think this patch outputs the correct results but will need to double check the grantRevokeDDL diffs.  Meanwhile, I welcome any comments for this patch.  It would be nice if the reviewer can also double check the master result file of this testcase.&lt;/p&gt;

&lt;p&gt;The patch addresses the permissions cache problem that was mentioned in my previous comments.  When retrieving the permission descriptor via its UUID, it will bypass the cache.  For other case where it uses the grantee + other related fields as the key, it remains the same as before and use the cache.  This is to avoid having two different hash codes for the same object.&lt;/p&gt;

&lt;p&gt;Now, let&apos;s move on to the real problem of this jira.  =)  Before this patch, when granting a view whose underlying objects are not owned by the grantor, the grant will succeed which is not correct since the grantor does not have grant option for those objects unless he is DBA or the objects granted to him is with grant option).  So to resolve this issue, Derby will now checks each of the view&apos;s underlying object(s) to see if the grantor is the owner at execution time of the grant statement. (additonal checks are needed in the future when WITH GRANT OPTION is supported.)   If not, the grant will fail with an SQLException which is what the correct behavior should be.&lt;/p&gt;

</comment>
                            <comment id="12430923" author="yipng" created="Mon, 28 Aug 2006 06:48:44 +0100"  >&lt;p&gt;Attaching updated patch derby1686-trunk-diff02.txt.  The only difference with this patch compared to the previous one is the grantRevokeDDL.sql and master file have been corrected.&lt;/p&gt;

&lt;p&gt;The grantRevokeDDL.sql have a few testcases that are invalid.  So I have to go through them and made corrections to the master output and the testcase comments.  I think those particular tests need to be rewritten in mind that only the database owner or the owner of the objects can grant other users privileges to those objects.       &lt;/p&gt;</comment>
                            <comment id="12430941" author="yipng" created="Mon, 28 Aug 2006 08:23:03 +0100"  >&lt;p&gt;Please refer to SQL 2003 standard, section 12.1 &amp;lt;grant statement&amp;gt;, item 4 and 5 under general rules and section 12.2 &amp;lt;grant privilege statement&amp;gt;, item 6 under general rules for the correct semantics of grantable privileges.&lt;/p&gt;</comment>
                            <comment id="12431026" author="mamtas" created="Mon, 28 Aug 2006 18:53:12 +0100"  >&lt;p&gt;Yip, I am still looking through the patch but have a question after a quick look at the patch. &lt;/p&gt;

&lt;p&gt;In new method bindPrivilegesForView() in TablePrivilegesNode.java, I noticed that we check if the current user is the database owner and if yes, then we do not build the provider list for the views. Is this happening at compile time? If yes, then it might not be correct. &lt;/p&gt;

&lt;p&gt;I think, at compile time, we want to build the provider list no matter who is compiling the statement. It is at run time that we want to disregard provider list if the database owner is granting the privilege. This is because, database owner might be the one to compile the statement first. But the view owner (assume that is not same as database owner) might execute the same statement later, but if we do not have the provider list attached to the statement plan created by database owner, then at execution time by view owner, we will not catach provider objects which are not owner by the view owner.&lt;/p&gt;
</comment>
                            <comment id="12431068" author="yipng" created="Mon, 28 Aug 2006 21:58:06 +0100"  >&lt;p&gt;Mamta, are you referring to the statement cache?  I thought there is a statement cache per connection.  So the DBA and the schema owner will have their own respective connection and hence won&apos;t be sharing the prepared grant statement.  Or am I missing something?&lt;/p&gt;</comment>
                            <comment id="12431088" author="yipng" created="Mon, 28 Aug 2006 23:24:17 +0100"  >&lt;p&gt;For example:  &lt;/p&gt;

&lt;p&gt;connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user1&apos; as user1;&lt;br/&gt;
create table t1 (i int);&lt;br/&gt;
grant select on t1 to user2;&lt;br/&gt;
connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user2&apos; as user2;&lt;br/&gt;
create view v1 as select * from user1.t1;&lt;br/&gt;
set connection user1;&lt;br/&gt;
grant select on user2.v1 to user3;&lt;br/&gt;
set connection user2;&lt;br/&gt;
grant select on user2.v1 to user3;&lt;/p&gt;

&lt;p&gt;The last grant statement won&apos;t be using the cached statement in the statement cache that is shared by different connections because it is compiling under a different schema.&lt;/p&gt;</comment>
                            <comment id="12431095" author="yipng" created="Tue, 29 Aug 2006 00:08:11 +0100"  >&lt;p&gt;Hmm... I probably should not make any assumptions for the equals method since it could changed in the future and not rely on the compilation schema.  I&apos;ll remove the dba check at compilation time and resubmit the patch.&lt;br/&gt;
Thanks for your comment, Mamta.&lt;/p&gt;</comment>
                            <comment id="12431098" author="yipng" created="Tue, 29 Aug 2006 00:25:11 +0100"  >&lt;p&gt;Attaching derby1686-trunk-diff03.txt.  This patch removes the dba check at bind time and will collect the providers of a view regardless who the object owner is.  The runtime will check the authorization.&lt;/p&gt;</comment>
                            <comment id="12431141" author="mamtas" created="Tue, 29 Aug 2006 06:08:34 +0100"  >&lt;p&gt;Yip, I thought more about this issue and I think we might be able to get away with an easier solution. &lt;/p&gt;

&lt;p&gt;With SQL authorization mode, for a view, in sys.sysdepends table, there will be zero/more rows for privilege dependencies. If the database owner is the owner of the view, then there will be no privilege dependencies rows in sys.sysdepends table. For a view whose owner is not the database owner, there will be no privilege dependencies rows in sys.sysdepends table if the view is not accessing any objects outside of the schema owned by the view owner. So, no privilege dependencies rows in sys.sysdepends table for a view would mean that the view owner can grant access to the view to other users.&lt;/p&gt;

&lt;p&gt;If there are privilege dependencies rows in sys.sysdepends table for a view, then that would mean that the view is relying on privileges on external objects and hence, the view owner will not be able to grant access to the view to other users (the exception to this rule would be if the database owner is trying to grant access to any view to any user. That should work no matter if there are zero or more privilege dependencies rows in sys.sysdepends table for the view). &lt;/p&gt;

&lt;p&gt;So, rather than building a list of providers for a view, we can simply have a flag which will be set to true at compile time if there are privilege dependencies rows in sys.sysdepends table for the given view. At execute time, if the grantor is the database owner, then we wil not worry about the flag and will succesfully grant the view access to the grantee. But if the grantor is the view owner and the flag is set to true, then we should throw an exception because the view owner does not own all the objects accessed by the view.&lt;/p&gt;

&lt;p&gt;I might not have thought over everything, so do let me know, if you find something in my proposed logic that might not work.&lt;/p&gt;</comment>
                            <comment id="12431284" author="yipng" created="Tue, 29 Aug 2006 17:10:31 +0100"  >&lt;p&gt;Mamta, I also thought about 2 alternative solutions before this patch.  One was your proposed idea and the other one was setting a persistent flag in the system table to indicate other schema dependency at compilation of CREATE VIEW statement so that this information is available in the ViewDescriptor.  I abandoned the latter idea since Derby needs to perform an upgrade and that this flag would render useless when it supports WITH GRANT OPTION in the future.  &lt;/p&gt;

&lt;p&gt;I think your proposed approach would also work but the flag information would become obsolete when WITH GRANT OPTION is supported and some sort of dependency list needs to be built eventually and supplied to the runtime since the privilege dependencies may now indicate that they are grantable.  I just thought it would be convenient to build this information now so that the compilation and execution interface does not need to be changed later.&lt;/p&gt;
</comment>
                            <comment id="12431291" author="yipng" created="Tue, 29 Aug 2006 17:43:18 +0100"  >&lt;p&gt;How about if we still keep the logic of building the provider list instead of the flag and applied the proposed logic at execution time to throw exception when a privilege dependency is detected on the view?  I&apos;ll have to rerun derbyall and do some more analysis with the proposal.&lt;/p&gt;</comment>
                            <comment id="12431307" author="mamtas" created="Tue, 29 Aug 2006 18:58:57 +0100"  >&lt;p&gt;Yip, even when we support WITH GRANT OPTION, we can modify the compile time privilege dependency rows check to see if the privilege has WITH GRANT OPTION set on it and if not, then set the flag to true. This will avoid having to carry the privilege list from compile time to execution time and will make the grant statement a bit faster. &lt;/p&gt;</comment>
                            <comment id="12431335" author="djd" created="Tue, 29 Aug 2006 20:43:31 +0100"  >&lt;p&gt;Was there any reference to the SQL spec ever found to ensure we are handling the issue correctly?&lt;/p&gt;

&lt;p&gt;The count of number of rows in SYSDEPENDS seems like a kludge to me, checking indirectly for some state rather than checking directly.&lt;/p&gt;

&lt;p&gt;What if the view is dependent on some function that is not owned by the view owner, how that does affect the solution and the desired behaviour?&lt;/p&gt;</comment>
                            <comment id="12431346" author="mamtas" created="Tue, 29 Aug 2006 21:07:12 +0100"  >&lt;p&gt;I think Yip has a reference to SQL specification section about the handling of this issue. It is part of the comments to this jira entry.&lt;/p&gt;

&lt;p&gt;As for view being dependent on a function not owned by the view owner, there will be an entry in dependency system for view&apos;s requirement of execute privilege on the function and hence the logic should work fine for table/column/function dependencies.&lt;/p&gt;</comment>
                            <comment id="12431356" author="djd" created="Tue, 29 Aug 2006 21:26:15 +0100"  >&lt;p&gt;I guess I&apos;m a little lost from all the comments in this issue as to what exactly the proposed behaviour is. Looking at the references Yip provided didn&apos;t help me as they didn&apos;t seem to be related to accessing views., but there&apos;s a strong chance I&apos;m misreading it. Looking on-line at Sybase and Postgres documentation I see two different ways of handling this, not sure if either is in-line with the standard or not.&lt;/p&gt;

&lt;p&gt;I guess the question is:&lt;/p&gt;

&lt;p&gt;For a view V owned by user A what permissions are required by B to select from the view when:&lt;/p&gt;

&lt;p&gt;    1)  All the objects referenced in the view are owned by A?&lt;/p&gt;

&lt;p&gt;    2) Some objects referenced in the view are not owned by A?&lt;/p&gt;


&lt;p&gt;The description for this bug seems to say that for case 2)&lt;br/&gt;
GRANT SELECT ON V TO B&lt;br/&gt;
should fail. That&apos;s isn&apos;t what other systems seem to do.&lt;/p&gt;</comment>
                            <comment id="12431370" author="yipng" created="Tue, 29 Aug 2006 22:12:24 +0100"  >&lt;p&gt;Yes, in the case of some objects referenced in the view V that are not owned by the grantor A, the following statement should fail when it attempts to grant select privilege to user B:&lt;/p&gt;

&lt;p&gt;User A:&lt;br/&gt;
GRANT SELECT ON V TO B&lt;/p&gt;

&lt;p&gt;My understanding of this behavior from reading the SQL2003 spec is deduced from WITH GRANT OPTION clause(grantable privilege).  I think the design spec also mentioned this as well.  If the owner of the object does not grant with grant on the specified privileges, then these privileges are not grantable to others.  So the above case should fail since user A has a view that references other objects that are not owned by A (and assuming those object owners did not grant with grant to user A.)  If such an action can take place without this clause, then I think having this clause does not make much sense.&lt;/p&gt;

&lt;p&gt;Currently I am investigating what Mamta suggests.  However, the current patch derby1686-trunk-diff03.txt will resolve this jira issue.   It directly checks the view&apos;s underlying provider(s) to see if the grantor is its schema owner.&lt;/p&gt;</comment>
                            <comment id="12431377" author="djd" created="Tue, 29 Aug 2006 22:40:08 +0100"  >&lt;p&gt;I&apos;m still confused, please bear with me, some detailed reference to the specs and quotes would help.&lt;/p&gt;

&lt;p&gt;You do say&lt;br/&gt;
&quot;If the owner of the object does not grant with grant on the specified privileges, then these privileges are not grantable to others&quot;&lt;/p&gt;

&lt;p&gt;Granting SELECT on a view V to user B is not the same as granting SELECT TO B on the underlying tables, you seem to equate the two and then base all reasoning from that. I guess I can&apos;t see that leap of logic to equate those two.&lt;/p&gt;

&lt;p&gt;Disallowing the grant as indicated would not provide any additional fundamental security, which is why I&apos;m trying to understand the reasoning for it.&lt;/p&gt;</comment>
                            <comment id="12431393" author="yipng" created="Tue, 29 Aug 2006 23:25:25 +0100"  >&lt;p&gt;Yes, I agree that granting select on view V is not the same as granting select on base table.  I think I wasn&apos;t clear on my previous explanation.   &lt;/p&gt;

&lt;p&gt;Dan stated &quot;Disallowing the grant as indicated would not provide any additional fundamental security&quot;.&lt;/p&gt;

&lt;p&gt;In contrast, I think this is a huge security issue.  e.g.:  Owner A permits non-grantable select privilege on table T to user B and does not want to grant this select privilege to other users in the system.  However, if Derby allows the current grant behavior as it is now, although user B is not able to grant select on the base table T (since he is not the owner), he can create a view that is own by him and grant this select privilege on this view to others, which is not what owner A would expect and want.  If owner A wants to allow this, he would have specified WITH GRANT OPTION when he granted the select privilege to user B.  So I believe it is vital to disallow this current behavior.&lt;/p&gt;

&lt;p&gt;I don&apos;t have the sql spec with me right now, so I&apos;ll have to reference it later when I have a chance...&lt;/p&gt;</comment>
                            <comment id="12431396" author="djd" created="Tue, 29 Aug 2006 23:35:19 +0100"  >&lt;p&gt;Though user B can create a table T, do&lt;/p&gt;

&lt;p&gt;insert into T select * from v;&lt;/p&gt;

&lt;p&gt;grant select on public to T;&lt;/p&gt;

&lt;p&gt;and the data has still escaped from A&apos;s grasp.&lt;/p&gt;

&lt;p&gt;Or user B can publish the data from the view on a web-site.&lt;/p&gt;

&lt;p&gt;Disallowing the GRANT SELECT ON V TO C is no real help here.&lt;/p&gt;</comment>
                            <comment id="12431408" author="yipng" created="Wed, 30 Aug 2006 00:11:11 +0100"  >&lt;p&gt;Right, I see your point.  There is not much one can do here if user B performs such actions.  Owner A would probably revoke this user&apos;s select privilege from now on.  =)  &lt;/p&gt;

&lt;p&gt;I think Oracle and DB2 disallows granting view who underyling objects are not own by the grantor but not sure if they are in-line with the standard.&lt;/p&gt;
</comment>
                            <comment id="12431416" author="kartha" created="Wed, 30 Aug 2006 00:54:20 +0100"  >&lt;p&gt;I know DB2 disallows such granting of permissions on a view if the grantor does not own OR does not have the permission to perform GRANT (this is obtained when the original owner grants the permission  WITH GRANT option)  on the underlying objects.&lt;/p&gt;
</comment>
                            <comment id="12431431" author="yipng" created="Wed, 30 Aug 2006 02:44:20 +0100"  >&lt;p&gt;Mamta, I thought about your proposal more with regard to checking SYSDEPENDS count on privilege dependencies.  I think there might be a case where this will not work.  Suppose the database owner dba creates a view v1 on the schema user2 owned by user2.  In this case, there is no table privilege entry in SYSDEPENDS so when user2 attempts to grant select on this view (which have underlying object that is not own by user2) to user3, it will succeed instead of fail.  i.e.:&lt;/p&gt;

&lt;p&gt;ij version 10.3&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;dba&apos; as dba;&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user1&apos; as user1;&lt;br/&gt;
WARNING 01J01: Database &apos;wombat&apos; not created, connection made to existing database instead.&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij(USER1)&amp;gt; connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user2&apos; as user2;&lt;br/&gt;
WARNING 01J01: Database &apos;wombat&apos; not created, connection made to existing database instead.&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij(USER2)&amp;gt; set connection user1;&lt;br/&gt;
ij(USER1)&amp;gt; create table t1 (i int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER1)&amp;gt; grant select on t1 to user2;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER1)&amp;gt; set connection user2;&lt;br/&gt;
ij(USER2)&amp;gt; create table t2 (i int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER2)&amp;gt; set connection dba;&lt;br/&gt;
ij(DBA)&amp;gt; create view user2.v1 as select * from user1.t1;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(DBA)&amp;gt; select * from sys.systableperms;&lt;br/&gt;
TABLEPERMSID                        |GRANTEE                                                                                                                         |GRANTOR                                                                                                                         |TABLEID                             |&amp;amp;|&amp;amp;|&amp;amp;|&amp;amp;|&amp;amp;|&amp;amp;&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
2fb0c07e-010d-5cb9-2480-0000000f54c0|USER2                                                                                                                           |USER1                                                                                                                           |2753c07b-010d-5cb9-2480-0000000f54c0|y|N|N|N|N|N&lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij(DBA)&amp;gt; select * from sys.sysdepends;&lt;br/&gt;
DEPENDENTID                         |DEPENDENTFINDER|PROVIDERID                          |PROVIDERFINDER &lt;br/&gt;
---------------------------------------------------------------------------------------------------------&lt;br/&gt;
f0b3c086-010d-5cb9-2480-0000000f54c0|View           |2753c07b-010d-5cb9-2480-0000000f54c0|ColumnsInTable &lt;/p&gt;

&lt;p&gt;1 row selected&lt;br/&gt;
ij(DBA)&amp;gt; set connection user2;&lt;br/&gt;
ij(USER2)&amp;gt; grant select on v1 to user3;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER2)&amp;gt; &lt;/p&gt;
</comment>
                            <comment id="12431443" author="yipng" created="Wed, 30 Aug 2006 04:24:19 +0100"  >&lt;p&gt;Dan, here are the two references from the SQL:2003 spec that I have read to deduce the grant behavior for the stated problem of this jira:&lt;/p&gt;

&lt;p&gt;In section 12.1 &amp;lt;grant statement&amp;gt;, Under general rules item 4:&lt;/p&gt;

&lt;p&gt;4) For every table T specified by some involved privilege descriptor and for each view V owned by some&lt;br/&gt;
   involved grantee G such that T or some column CT of T is referenced in the &amp;lt;query expression&amp;gt; QE of V,&lt;br/&gt;
   or T is a supertable of the scoped table of a &amp;lt;reference resolution&amp;gt; contained in QE, let RTi, for i ranging&lt;br/&gt;
   from 1 (one) to the number of tables identified by the &amp;lt;table reference&amp;gt;s contained in QE, be the &amp;lt;table name&amp;gt;s &lt;br/&gt;
   of those tables. For every column CV of V:&lt;br/&gt;
      a) Let CRTi,j, for j ranging from 1 (one) to the number of columns of RTi that are underlying columns of&lt;br/&gt;
         CV, be the &amp;lt;column name&amp;gt;s of those columns.&lt;br/&gt;
      b) If, following successful execution of the &amp;lt;grant statement&amp;gt;, all of the following are true:&lt;br/&gt;
            i) The applicable privileges for G include grantable SELECT privileges on all of the columns CRTi,j.&lt;br/&gt;
            ii) The applicable privileges for G include grantable EXECUTE privileges on all SQL-invoked&lt;br/&gt;
                routines that are subject routines of &amp;lt;routine invocation&amp;gt;s contained in QE.&lt;br/&gt;
   ...&lt;/p&gt;


&lt;p&gt;And in section 12.2 &amp;lt;grant privilege statement&amp;gt;, Under general rules item 6:&lt;/p&gt;

&lt;p&gt;6) If WITH GRANT OPTION was specified, then each privilege descriptor also indicates that the privilege&lt;br/&gt;
   is grantable.&lt;/p&gt;


&lt;p&gt;If I interpret the above correctly, then by enforcing the semantics of grantable privilege - &lt;br/&gt;
granting select privilege to a view owned by user A who have non-grantable select privileges&lt;br/&gt;
on the underlying objects should fail.  Comments?&lt;/p&gt;

</comment>
                            <comment id="12431456" author="mamtas" created="Wed, 30 Aug 2006 05:29:29 +0100"  >&lt;p&gt;Yip, I think you are right about my logic not working for a view created by the database owner but it references objects not owned by the schema owner of the view. Considering that and Dan&apos;s comment &quot;The count of number of rows in SYSDEPENDS seems like a kludge to me, checking indirectly for some state rather than checking directly. &quot;, we probably should go with your proposed logic.&lt;/p&gt;

&lt;p&gt;I thought of one case where the logic in the patch might not do the right stuff. If a user creates a view on a table owned by another user. Then dependency manager will keep the view&apos;s dependency on that table. Now, if the same user creates another view which is based on the view it created earlier, the dependency manager will not know of the new view&apos;s dependency on the base table at the outer view&apos;s level. We will need to go through view chains to make sure that we are not granting access to something that we are not allowed to. Here is an eg&lt;br/&gt;
user1&lt;br/&gt;
create table t1(c11 int)&lt;br/&gt;
grant select on t1 to user2&lt;br/&gt;
user2&lt;br/&gt;
create view v1 as select * from user1.t1 &amp;#8211; dependency manager will track v1&apos;s dependency on user1.t1&lt;br/&gt;
create view v2 as select * from v1 &amp;#8211; dependency manager will track v2&apos;s dependency on v1&lt;br/&gt;
grant select on v2 to user3 &amp;#8211; we shouldn&apos;t just check v2&apos;s direct providers, but also see if those providers have any providers of their own&lt;br/&gt;
&amp;#8211; And hence the grant above should not succeed&lt;/p&gt;
</comment>
                            <comment id="12431469" author="yipng" created="Wed, 30 Aug 2006 06:25:57 +0100"  >&lt;p&gt;Mamta, I had this concern too when I was utilizing the dependency manager&apos;s getPersistentProviderInfos(dependable)&lt;br/&gt;
method but it turns out that when you create the second view, the create view will add its providers to the new defined view.&lt;br/&gt;
So with the current patch, the grant fails as expected.&lt;/p&gt;

&lt;p&gt;ij version 10.3&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user1&apos; as user1;&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij&amp;gt; create table t1 (c11 int);&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; grant select on t1 to user2;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij&amp;gt; connect &apos;jdbc:derby:wombat;create=true&apos; user &apos;user2&apos; as user2;&lt;br/&gt;
WARNING 01J01: Database &apos;wombat&apos; not created, connection made to existing database instead.&lt;br/&gt;
WARNING 01J14: SQL authorization is being used without first enabling authentication.&lt;br/&gt;
ij(USER2)&amp;gt; create view v1 as select * from user1.t1;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER2)&amp;gt; create view v2 as select * from v1;&lt;br/&gt;
0 rows inserted/updated/deleted&lt;br/&gt;
ij(USER2)&amp;gt; grant select on v2 to user3;&lt;br/&gt;
ERROR 2850C: User &apos;USER2&apos; is not the owner of Table/View &apos;USER1&apos;.&apos;T1&apos;.&lt;/p&gt;

&lt;p&gt;I did find another minor problem with the current patch, the runtime check should only be performed in GRANT statement case &lt;br/&gt;
only since it does not applied to REVOKE.  So I am going to change that and resubmit the patch later.  I haven&apos;t move the runtime&lt;br/&gt;
check logic to compilation phase yet, will get to that tomorrow.&lt;/p&gt;
</comment>
                            <comment id="12431471" author="yipng" created="Wed, 30 Aug 2006 06:34:25 +0100"  >&lt;p&gt;Attaching derby1686-trunk-diff04.txt, this patch fixes a minor problem on the execution check where it should only apply to GRANT statement only.&lt;/p&gt;</comment>
                            <comment id="12431474" author="mamtas" created="Wed, 30 Aug 2006 06:40:21 +0100"  >&lt;p&gt;Thanks for your response on how dependency system takes care of chained view dependencies. &lt;/p&gt;

&lt;p&gt;Is derby1686-trunk-diff04.txt the latest patch that I can review? You mentioned that &quot;I haven&apos;t move the runtime check logic to compilation phase yet, will get to that tomorrow. &quot; Should I wait until tomorrow?&lt;/p&gt;</comment>
                            <comment id="12431477" author="yipng" created="Wed, 30 Aug 2006 06:42:21 +0100"  >&lt;p&gt;Yes, please wait till tomorrow.  I resubmit it because my laptop keeps on crashing on me today so just to be on &lt;br/&gt;
the safe side, I don&apos;t want to lose the diffs.&lt;/p&gt;</comment>
                            <comment id="12431640" author="yipng" created="Wed, 30 Aug 2006 19:10:45 +0100"  >&lt;p&gt;Attaching derby1686-trunk-diff05.txt for review.  With this patch, the view checking is moved to bind phase instead of execution.  It directly checks the relevent providers of the view to be granted and if the check fails, it will mark this in a flag for execution time to determine later if the grant should succeed based on who the grantor is.  It also introduced a new SQLSTATE for object permission in general.  Welcome any comments and suggestions.  &lt;/p&gt;</comment>
                            <comment id="12431728" author="mamtas" created="Wed, 30 Aug 2006 23:16:33 +0100"  >&lt;p&gt;Yip, the latest patch looks pretty good to me. Just 2 minor comments&lt;br/&gt;
1)In code comments, I saw references to &quot;dba&quot;. I think we want to refer to that user as &quot;database owner&quot;. Dan had mentioned following in one of his emails to derby dev list &quot;DBA is a role (which doesn&apos;t (yet) exist in Derby).&quot;&lt;br/&gt;
2)Secondly, can you please verify that the existing comments in the grant revoke test still make sense around the areas where you had to make changes to the test because of the functionality implemented by this Jira entry.&lt;/p&gt;

&lt;p&gt;Thanks for being so patient with my feedback on this Jira entry.&lt;/p&gt;</comment>
                            <comment id="12431734" author="yipng" created="Wed, 30 Aug 2006 23:36:22 +0100"  >&lt;p&gt;Mamta, thanks for taking the time for reviewing the patch.  I apprecate your comments.&lt;/p&gt;

&lt;p&gt;Mamta wrote:&lt;br/&gt;
&amp;gt;&amp;gt;1)In code comments, I saw references to &quot;dba&quot;. I think we want to refer to that user as &quot;database owner&quot;. Dan had mentioned following in one of his emails to derby dev list &quot;DBA is a role (which &amp;gt;&amp;gt;doesn&apos;t (yet) exist in Derby).&quot;&lt;br/&gt;
&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;2)Secondly, can you please verify that the existing comments in the grant revoke test still make sense around the areas where you had to make changes to the test because of the functionality &amp;gt;&amp;gt;implemented by this Jira entry.&lt;/p&gt;

&lt;p&gt;1)  The DBA that you are referring to in the code comments are probably from the overloaded method that I copied from the super class.&lt;br/&gt;
      Actually, there are quite a number of places where DBA occurs in the code comments, I think its best to clean this up in another jira entry since&lt;br/&gt;
      it is not relevent to this jira and may make code reviewing abit difficult.&lt;/p&gt;

&lt;p&gt;2)  I have verified the changes in the comments reflects the current master output.  I thought it would be nice if another pair of eyes can also validate&lt;br/&gt;
      the master output since for the last couple of jiras I fixed, their respective master outputs are incorrect...&lt;/p&gt;
</comment>
                            <comment id="12431737" author="mamtas" created="Wed, 30 Aug 2006 23:47:03 +0100"  >&lt;p&gt;OK, In that case, we are good to go.&lt;/p&gt;

&lt;p&gt;I will make a jira entry for changing &quot;dba&quot; to &quot;database owner&quot; whereever appropriate in the grant revoke code. &lt;/p&gt;
</comment>
                            <comment id="12431743" author="yipng" created="Thu, 31 Aug 2006 00:17:12 +0100"  >&lt;p&gt;To address Dan&apos;s comment before a committer commits this jira.&lt;/p&gt;

&lt;p&gt;Dan stated:&lt;/p&gt;

&lt;p&gt;&quot;Disallowing the grant as indicated would not provide any additional fundamental security, &lt;br/&gt;
 which is why I&apos;m trying to understand the reasoning for it.&quot;&lt;/p&gt;

&lt;p&gt;Initially, I thought it had to do with security issue but as Dan pointed out this was not the case.  &lt;br/&gt;
This jira is about implementing the correct semantics according to the SQL:2003 standard &lt;br/&gt;
with respect to grantable privileges.  In short, one might have the right to grant privilege to others &lt;br/&gt;
but not the right to give other users the right to make further grants if WITH GRANT OPTIONS is &lt;br/&gt;
not specified.  Please refer to my previous comments for those spec references.&lt;/p&gt;

&lt;p&gt;If there are no further comments, objections or concerns, this jira is ready for commit.&lt;/p&gt;</comment>
                            <comment id="12431751" author="djd" created="Thu, 31 Aug 2006 01:09:08 +0100"  >&lt;p&gt;Thanks Yip - I finally understood the logic in section 12.1, sorry for being so slow.&lt;/p&gt;

&lt;p&gt;Next question is why does the GRANT fail?&lt;br/&gt;
From my reading of  general rule 8) of section 12.2 it seems to me the statement should complete with a warning&lt;br/&gt;
01007 privilege not granted&lt;/p&gt;

&lt;p&gt;I don&apos;t see any case in 12.2 where a GRANT fails.&lt;/p&gt;

&lt;p&gt;Though it is strange in 12.2 general rules 3)  &amp;amp; 4)  it adds descriptors to CPD only &quot;for which&lt;br/&gt;
A holds the corresponding privilege with grant option.&quot; but that restriction does not exist in general rule 2).&lt;/p&gt;</comment>
                            <comment id="12431755" author="djd" created="Thu, 31 Aug 2006 01:21:05 +0100"  >&lt;p&gt;I&apos;m guess the requirement to fail comes from the Access Rules for 12.2 which state:&lt;/p&gt;

&lt;p&gt;&quot;The applicable privileges shall include a privilege identifying O.&quot;&lt;/p&gt;

&lt;p&gt;The Access rules are &quot;A specification in English of rules governing the accessibility of schema objects&quot;,&lt;br/&gt;
which sounds great, but I&apos;m stumped as to what identifying means in &quot;privilege identifying O&quot; means. Any ideas?&lt;/p&gt;
</comment>
                            <comment id="12431769" author="yipng" created="Thu, 31 Aug 2006 03:48:38 +0100"  >&lt;p&gt;&quot;The applicable privileges shall include a privilege identifying O.&quot; &lt;/p&gt;

&lt;p&gt;&quot;O&quot; is defined in 12.2 under Syntax Rules item 1 and &quot;Identified&quot; is defined in 12.2 under Syntax Rules item 4.&lt;/p&gt;
</comment>
                            <comment id="12431903" author="djd" created="Thu, 31 Aug 2006 16:39:41 +0100"  >&lt;p&gt;OK - I can buy that,  12.2 SR 4) ties into 12.2 Access rules.&lt;/p&gt;

&lt;p&gt;I still think the statement should generate a warning instead of an error (though I&apos;ve changed my mind three times so far &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The key (I think) is that 12.2 Access rules say:&lt;/p&gt;

&lt;p&gt;&quot;The applicable privileges shall include a privilege identifying O.&quot;&lt;/p&gt;

&lt;p&gt;Note &apos;a privilege&quot;, &lt;b&gt;singular&lt;/b&gt;, not all privliges identified explictly and implicitly by 12.2 SR 4). (we assume)&lt;/p&gt;

&lt;p&gt;In the case in the description, user2 does have the privlege of grantabke SELECT  (with grant option) for view v1&lt;br/&gt;
since it owns view v1. Thus execution seems to satisfy the access rules for 12.2.&lt;/p&gt;

&lt;p&gt;Two other ways of looking at this:&lt;/p&gt;

&lt;p&gt;1) If the grantor was required to have all the privileges identified in 12.2 SR 4), then I think it would be impossible&lt;br/&gt;
for the statement ever to generate a warning from 12.2 GR 8) and 9). I don&apos;t think the spec would contradict itself like this.&lt;/p&gt;

&lt;p&gt;2)  I belive a statement like&lt;br/&gt;
GRANT SELECT, INSERT ON T TO FRED&lt;br/&gt;
should succeed if the grantor has grantable SELECT on T, but not grantable INSERT on T,&lt;br/&gt;
and the result is SELECT is granted to FRED but not INSERT.&lt;br/&gt;
Thus would mean that the singular in 12.2 AR 1) is correct and has a purpose.&lt;/p&gt;

&lt;p&gt;Thanks again for your patience.&lt;/p&gt;</comment>
                            <comment id="12431945" author="yipng" created="Thu, 31 Aug 2006 19:59:07 +0100"  >&lt;p&gt;Dan stated:&lt;/p&gt;

&lt;p&gt;Two other ways of looking at this: &lt;/p&gt;

&lt;p&gt;1) If the grantor was required to have all the privileges identified in 12.2 SR 4), then I think it would be impossible&lt;br/&gt;
for the statement ever to generate a warning from 12.2 GR 8) and 9). I don&apos;t think the spec would contradict itself like this.&lt;/p&gt;

&lt;p&gt;2) I belive a statement like&lt;br/&gt;
GRANT SELECT, INSERT ON T TO FRED&lt;br/&gt;
should succeed if the grantor has grantable SELECT on T, but not grantable INSERT on T,&lt;br/&gt;
and the result is SELECT is granted to FRED but not INSERT.&lt;br/&gt;
Thus would mean that the singular in 12.2 AR 1) is correct and has a purpose. &lt;/p&gt;

&lt;p&gt;My comments:&lt;/p&gt;

&lt;p&gt;For 2)&lt;/p&gt;

&lt;p&gt;GRANT SELECT, INSERT ON T TO FRED&lt;/p&gt;

&lt;p&gt;Ok, I agree the above statement should generate a warning when SELECT is grantable privilege and&lt;br/&gt;
the INSERT is not.  (The SELECT privilege on T is granted.)  This makes sense when 12.2 AR 1)&lt;br/&gt;
is applied.&lt;/p&gt;


&lt;p&gt;For 1)&lt;br/&gt;
  GRANT SELECT ON V TO FRED&lt;/p&gt;

&lt;p&gt;Where V is a view, it is referring to a &quot;singular&quot; privilege which is SELECT in this case.  &lt;br/&gt;
According to 12.1 GR 4), the above statement should only be executed successfully when all&lt;br/&gt;
of its underlying objects (be that tables or views) have grantable select privilege as well.&lt;br/&gt;
Comments? &lt;/p&gt;</comment>
                            <comment id="12431953" author="djd" created="Thu, 31 Aug 2006 20:38:46 +0100"  >&lt;p&gt;I think from the standard a GRANT statement has three possible outcomes:&lt;/p&gt;

&lt;p&gt;A) Failed execution with SQL state 42xxx - Access Rule violation&lt;/p&gt;

&lt;p&gt;B) Successful execution - no privileges granted - warning raised 01007 - privilege not granted&lt;/p&gt;

&lt;p&gt;C) Successful execution - at least one privilege granted&lt;/p&gt;

&lt;p&gt;For the examples above&lt;/p&gt;

&lt;p&gt;1) GRANT SELECT, INSERT ON T TO FRED  - I think it is outcome C), ie. no warning&lt;/p&gt;

&lt;p&gt;As for case 2) Yip says: &quot;According to 12.1 GR 4), the above statement should only be executed successfully when all&lt;br/&gt;
of its underlying objects (be that tables or views) have grantable select privilege as well. &quot;&lt;/p&gt;

&lt;p&gt;So can you quote any piece of text in 12.1 GR 4) that indicates a possible outcome is a failure?&lt;br/&gt;
The standard indicates failure by saying &quot;then an exception condition is raised:&amp;lt;description of error&amp;gt;&quot;&lt;br/&gt;
Note there are no Access Rules for 12.1, the only access rules that apply here is from 12.2.&lt;/p&gt;

&lt;p&gt;I think that 12.1 GR 4) is simply stating that if a creator of a view following &lt;b&gt;any&lt;/b&gt; GRANT statement has grantable privileges for all&lt;br/&gt;
the privileges the view requires, then the creator of the view automatically gains grantable SELECT on the view.&lt;br/&gt;
So for the example in the description, if user1 subseqeuntly executes (after the view was created)&lt;/p&gt;

&lt;p&gt;GRANT SELECT ON user.t1 to user2 WITH GRANT OPTION&lt;/p&gt;

&lt;p&gt;then this statement is implicitly executed&lt;/p&gt;

&lt;p&gt;GRANT SELECT ON user2.v1 to user2 WITH GRANT OPTION GRANTED BY _SYSTEM&lt;/p&gt;

&lt;p&gt;So I think case 2) here is a B - warning raised.&lt;/p&gt;
</comment>
                            <comment id="12432028" author="yipng" created="Fri, 1 Sep 2006 03:25:22 +0100"  >&lt;p&gt;Dan states:&lt;/p&gt;

&lt;p&gt;1) GRANT SELECT, INSERT ON T TO FRED  - I think it is outcome C), ie. no warning&lt;/p&gt;

&lt;p&gt;Hmm... I found it abit strange if no warning is raised for the above case where &lt;br/&gt;
INSERT is non-grantable privilege and SELECT is grantable.  The SELECT privilege&lt;br/&gt;
is granted(12.2 AR item 1) and since the INSERT privilege is non-grantable, the&lt;br/&gt;
system should raise a warning (12.1 GR item 8)&lt;/p&gt;

&lt;p&gt;If no warning is raised, then how can a grantor can be informed by the system that all &lt;br/&gt;
the specified privileges he/she attempts to grant are all granted to the respective &lt;br/&gt;
grantee(s)?  i.e.:  If this very statement was issued by another user who happens to &lt;br/&gt;
have both SELECT and INSERT as grantable privileges.  So shouldn&apos;t C) be&lt;/p&gt;

&lt;p&gt;C) Successful execution - at least one privilege granted, warning issued &lt;/p&gt;

&lt;p&gt;And an additional outcome D) where&lt;/p&gt;

&lt;p&gt;D) Successful execution - all privileges granted, no warning issued&lt;/p&gt;


&lt;p&gt;2)  GRANT SELECT ON V TO FRED&lt;/p&gt;

&lt;p&gt;    I cannot find any piece of info that is in 12.1 GR 4) that explicitly states it should return&lt;br/&gt;
    as failure or warning.  All it states is that if the conditions in GR 4) are met,&lt;br/&gt;
    then the grant statement is executed successfully.  I was inferring this implicitly&lt;br/&gt;
    that if it is not executed successfully then it is an error.  &lt;/p&gt;


&lt;p&gt;I think at least we agree on that the problem statement of this jira should not be granted &lt;br/&gt;
successfully, so now the question is - should it be raised as a warning or an error&lt;br/&gt;
in the &quot;singular&quot; privilege case?  In either case, there must be references somewhere&lt;br/&gt;
in the spec that addresses this...&lt;/p&gt;


</comment>
                            <comment id="12432077" author="yipng" created="Fri, 1 Sep 2006 08:06:51 +0100"  >&lt;p&gt;Ok, I think I have misread GR 4), so let&apos;s try this again.  =)&lt;/p&gt;

&lt;p&gt;Dan stated:&lt;/p&gt;

&lt;p&gt;I think that 12.1 GR 4) is simply stating that if a creator of a view following &lt;b&gt;any&lt;/b&gt; &lt;br/&gt;
GRANT statement has grantable privileges for all the privileges the view requires, then &lt;br/&gt;
the creator of the view automatically gains grantable SELECT on the view.&lt;/p&gt;

&lt;p&gt;So according to 12.1 GR 4), for the problem statement, the view owner does not have grantable &lt;br/&gt;
SELECT on the view since he does NOT have select privilege WITH GRANT OPTIONS on the underlying &lt;br/&gt;
table(s) or view(s).&lt;/p&gt;

&lt;p&gt;With that said, according to 12.2 AR 1)&lt;/p&gt;

&lt;p&gt;&quot;The applicable privileges shall include a privilege identifying O.&quot; &lt;/p&gt;

&lt;p&gt;And 12.2 SR 4)&lt;/p&gt;

&lt;p&gt;&quot;A set of privilege descriptors is identified. The privilege descriptors identified are those defining, for each&lt;br/&gt;
&amp;lt;action&amp;gt; explicitly or implicitly in &amp;lt;privileges&amp;gt;, that &amp;lt;action&amp;gt; on O held by A with grant option.&quot;&lt;/p&gt;

&lt;p&gt;So for&lt;/p&gt;

&lt;p&gt;GRANT SELECT ON V TO FRED&lt;/p&gt;

&lt;p&gt;Here, we are referring to a singular privilege identifying O and in this case, there is &lt;br/&gt;
no applicable privilege identifying O; hence an access rule violation.  So I think it should &lt;br/&gt;
return an error instead of a warning.&lt;/p&gt;
</comment>
                            <comment id="12432148" author="djd" created="Fri, 1 Sep 2006 15:17:52 +0100"  >&lt;p&gt;Yip said:&lt;br/&gt;
&amp;gt; So according to 12.1 GR 4), for the problem statement, the view owner does not have grantable&lt;br/&gt;
&amp;gt; SELECT on the view since he does NOT have select privilege WITH GRANT OPTIONS on the underlying&lt;br/&gt;
&amp;gt; table(s) or view(s). &lt;/p&gt;

&lt;p&gt;Of course, thanks for pointing that out Yip. So the rule I&apos;ve been using to say it&apos;s not an error  is the rule that proves it&apos;s an error. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Sorry I was dumb here. I think I was of in too much the mindset that the object owner was all powerful either from that&apos;s the&lt;br/&gt;
way it&apos;s been discussed during design &amp;amp; implementation or I read too much into the functional spec.&lt;/p&gt;

&lt;p&gt;So error it is.&lt;/p&gt;

&lt;p&gt;This has been interesting in that the SQL standard describes a model with real (implict) GRANT&apos;s for various actions&lt;br/&gt;
by the special grantor _SYSTEM. I think I also that these grants are expectedbe reflected in meta data.&lt;br/&gt;
However, Derby&apos;s implementation choose not to implement the literal model, but instead have behaviour that&lt;br/&gt;
mimics the model (which is fine if the end-result is the same thing). I wonder though if following the model literally&lt;br/&gt;
would lead to less special cases and not several back-and forths about how to address issues such as this.&lt;br/&gt;
I mean here the back &amp;amp; forth on how to determine if the view select was grantable or not. &lt;/p&gt;</comment>
                            <comment id="12432149" author="djd" created="Fri, 1 Sep 2006 15:24:36 +0100"  >&lt;p&gt;The functional spec in &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-464&quot; title=&quot;Enhance Derby by adding grant/revoke support. Grant/Revoke provide finner level of privileges than currently provided by Derby that is especially useful in network configurations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-464&quot;&gt;&lt;del&gt;DERBY-464&lt;/del&gt;&lt;/a&gt; has this line:&lt;/p&gt;

&lt;p&gt;&quot;When a table, view, function, or procedure is created its owner (creator) has full privileges on it. &quot;&lt;/p&gt;

&lt;p&gt;I think we are now saying that is false, it might be better to explicitly state which permissions the owner has when an object is created.&lt;br/&gt;
Checking the user docs to see how this was reflected would be a good idea.&lt;/p&gt;</comment>
                            <comment id="12432201" author="yipng" created="Fri, 1 Sep 2006 19:56:38 +0100"  >&lt;p&gt;Attaching derby1686-trunk-diff06.txt.  There was conflict with the latest code trunk&apos;s master file for grantRevokeDDL.sql, so resubmitting the patch.  It should apply cleanly.&lt;/p&gt;</comment>
                            <comment id="12432202" author="yipng" created="Fri, 1 Sep 2006 19:58:42 +0100"  >&lt;p&gt;Thanks Dan and Mamta for taking the time to review and make valuable comments and suggestions. &lt;br/&gt;
If there are no further objections, then this jira is ready to be committed.  =)&lt;/p&gt;</comment>
                            <comment id="12432206" author="mamtas" created="Fri, 1 Sep 2006 20:09:44 +0100"  >&lt;p&gt;Yip, based on your and Dan&apos;s discussion of the SQL specification, does the functional spec need to be updated? If so, will you please take care of that?&lt;/p&gt;</comment>
                            <comment id="12432207" author="djd" created="Fri, 1 Sep 2006 20:11:23 +0100"  >&lt;p&gt;I have not reviewed the patch but am planning to. All my comments have been around trying to clearly understand the behavior required which &lt;br/&gt;
I thought was missing in the earlier discussion.&lt;/p&gt;

&lt;p&gt;Is there an overview of the patch: I see this comment above:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/DERBY-1686#action_12431640&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/DERBY-1686#action_12431640&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&quot;With this patch, the view checking is moved to bind phase instead of execution. It directly checks the relevent providers of the view to be granted and if the check fails, it will mark this in a flag for execution time to determine later if the grant should succeed based on who the grantor is.&quot;&lt;/p&gt;

&lt;p&gt;One has to remember that committers and reviewers are not as closely involved in the work as the contributor is, obviously the contributor has been working&lt;br/&gt;
on the patch and knows the details inside &amp;amp; out. Others are coming from it fresh or having managed to spend 5mins looking at the issue,. so the patch&lt;br/&gt;
description should be written assumign the reader knows nothing. This way patches can be committed much faster as the reviewers and  committers&lt;br/&gt;
can come up to speed faster.&lt;/p&gt;

&lt;p&gt;For example, taking the above comment:&lt;/p&gt;

&lt;p&gt;  &quot;the view checking&quot; - what view checking, grant time, create view time, select from view time, revoke time, etc? I&apos;m sure it&apos;s clear to you, but not to me.&lt;/p&gt;

&lt;p&gt;  &quot;checking moved to bind time ... determine later ...&quot; - looks like we are checking twice now, once at bind, once at execution, so why even check at bind time?&lt;br/&gt;
   A  fuller description of the algorithm being used would help here. If it&apos;s in comments in the code, that&apos;s great, just provide a pointer of where to start looking.&lt;/p&gt;


</comment>
                            <comment id="12432223" author="yipng" created="Fri, 1 Sep 2006 20:58:49 +0100"  >&lt;p&gt;Dan, let me try to summarize and clarify what this patch is doing.  &lt;/p&gt;

&lt;p&gt;First of all, at this point, we clearly understand that from the SQL:2003 spec, for the problem statement, the &lt;br/&gt;
system needs to raise an error  when an owner of a view attempts to grant the view to others for which&lt;br/&gt;
he does not have all the required privilege(s)  (WITH GRANT OPTIONS) from the underlying objects.&lt;br/&gt;
The view owner has only privilege to select from the view but he does not have grantable select privilege;&lt;br/&gt;
therefore, he does not have the rights to grant to others.&lt;/p&gt;

&lt;p&gt;With that said, let&apos;s move to the patch implementation details.  In order to resolve this issue, during the&lt;br/&gt;
bind phase of GRANT statement (see TablePriviegeNode&apos;s bindPrivilegeForView for details), the logic&lt;br/&gt;
is to retrieve the view relevent providers and check against if the current user is the owner of the schema&lt;br/&gt;
for those objects.  By relevent I mean we only check for the following providers:  TableDescriptor, ViewDescriptor &lt;br/&gt;
and AliasDescriptor (for routine).  If the check fails, we will mark the flag for execution later to indicate the&lt;br/&gt;
object is grantable or not.  We do not fail this at bind time since this statement may be in the statement&lt;br/&gt;
cache for reuse, so we need to make the final check at execution time.  Thus, at execution time (see &lt;br/&gt;
TablePrivilegeInfo&apos;s checkOwnership method for details), we determine here if the object is grantable iff:&lt;/p&gt;

&lt;p&gt;1)  The current user is the database owner.&lt;br/&gt;
2)  The current user is not the database owner but is the schema owner of the object to be granted&lt;br/&gt;
3)  For view, we do an additional check to see if the grantable flag that was set in bind time is true&lt;br/&gt;
4)  If the current user is not the owner, the system needs to do another check to see if the grantor &lt;br/&gt;
      has grantable privilege(s) on that object.    This is not implemented yet since Derby doesn&apos;t support &lt;br/&gt;
      FOR GRANT OPTIONS clause currently.&lt;/p&gt;

&lt;p&gt;So in order for the logic above to work, one other thing needs to be resolved which was not quite clear in &lt;br/&gt;
the design specification - the permission cache.  I stumbled into this problem when I need to get all the&lt;br/&gt;
providers of the dependable (the view in this case) from the dependency manager(DM).  There are 2&lt;br/&gt;
ways to obtain a particular permission descriptor.  Let&apos;s take TablePermissionDescriptor for example.&lt;br/&gt;
To retrieve this descriptor, one way is to supply grantee + tableUUID as a key or another way is to use&lt;br/&gt;
the table permission UUID (this one is mainly used by the DM to instantiate the respective descriptor object)&lt;br/&gt;
The problem with the permission cache is, only the grantee and tableUUID is in the equations of computing&lt;br/&gt;
the hashCode and equals method but not the table perms UUID.  &lt;/p&gt;

&lt;p&gt;So when the DM attempts to load the provider UUID for the various permission descriptors in SYSDEPENDS, &lt;br/&gt;
there is a problem of instantiating the permission descriptor since the equals and hashCode method used&lt;br/&gt;
to set the identity of the object uses nothing of perms UUID, this eventually will lead to a NPE in the permission&lt;br/&gt;
caching logic.  To resolve this, the getXXXPermission(UUID) form no longer interacts with the permission cache.  &lt;br/&gt;
But for the other normal case where we know the grantee and the tableUUID from compilation time, the system will &lt;br/&gt;
still make use of this permission cache.  I think that is about it from the implementation perspective.&lt;/p&gt;

&lt;p&gt;The latest patch for this jira is derby1686-trunk-diff06.txt.  Appreciate any suggestions and comments.&lt;/p&gt;

&lt;p&gt;Note:  I was reviewing the Grant/Revoke code, I noticed that for various access violations, the system is&lt;br/&gt;
           throwing SQLSTATE with class code 28, shouldn&apos;t it be class code 42 instead?  e.g.:  &lt;/p&gt;

&lt;p&gt;Class code - 28&lt;br/&gt;
invalid authorization specification 28 (no subclass) 000&lt;/p&gt;

&lt;p&gt;Class code - 42&lt;br/&gt;
syntax error or access rule violation 42 (no subclass) 000&lt;/p&gt;



</comment>
                            <comment id="12432231" author="djd" created="Fri, 1 Sep 2006 21:22:10 +0100"  >&lt;p&gt;Thanks Yip, from a quick read that looks really helpful.&lt;/p&gt;

&lt;p&gt;Quick question jumps out, you say this flag is based upon the current user, statements can be shared in the statement cache&lt;br/&gt;
so how can a compiled statement have state that&apos;s dependent on the user compiling the query.&lt;/p&gt;

&lt;p&gt;I will review the patch.&lt;/p&gt;</comment>
                            <comment id="12432236" author="yipng" created="Fri, 1 Sep 2006 21:41:53 +0100"  >&lt;p&gt;Dan, thanks for catching that!   I should have thought more thoroughly before applying this&lt;br/&gt;
sort of optimization suggestion.  My original patch did not use this flag, it just collects the list of &lt;br/&gt;
relevent providers for the dependable and passed this list on to execution where it does the &lt;br/&gt;
appropriate checking with respect to the current user.  I&apos;ll hold on to more comments from you &lt;br/&gt;
before I revert it to my original fix.&lt;/p&gt;

&lt;p&gt;With the current logic of the statement cache, the compiled grant/revoke statement &lt;br/&gt;
will not be reused for different connections since I think the equals method is checking if the &lt;br/&gt;
statement&apos;s  compilation schema is the same.  Just an implementation note.&lt;/p&gt;
</comment>
                            <comment id="12432241" author="djd" created="Fri, 1 Sep 2006 21:58:36 +0100"  >&lt;p&gt;I haven&apos;t thought about this a lot, but the optimization might make sense if instead of using the current user you used the&lt;br/&gt;
owner of the view.&lt;/p&gt;

&lt;p&gt;Then again getting GRANT/REVOKE statements to work correctly should be the first thought, I don&apos;t think&lt;br/&gt;
that performance of them is going to be on anyone&apos;s critical list. Best to optimize once one knows where the bottle neck&lt;br/&gt;
is.&lt;/p&gt;

&lt;p&gt;From reading of the description I&apos;m concerned that we are even collecting providers at bind time, possibly doing a lot&lt;br/&gt;
of extra work for little benefit (still need to look at the code to see what is meant by collecting the providers).&lt;/p&gt;</comment>
                            <comment id="12432245" author="djd" created="Fri, 1 Sep 2006 22:24:33 +0100"  >&lt;p&gt;In patch &lt;/p&gt;

&lt;p&gt;+	// get all the providers of this view for execution time to see if&lt;br/&gt;
+	// this view is grantable to the grantees by this grantor&lt;br/&gt;
+	// go through the providers regardless who the owner is since the &lt;br/&gt;
+	// statement cache may be in effect.	&lt;br/&gt;
+	private void bindPrivilegesForView ( TableDescriptor td) &lt;/p&gt;

&lt;p&gt;1) Please use javadoc comments (/** intro) for methods, fields classes, not regular comments. They will appear in the&lt;br/&gt;
engine&apos;s javadoc and they appear in IDE&apos;s (at least Eclipse) when hovering over a call to that method. Makes&lt;br/&gt;
development a lot easier.&lt;/p&gt;

&lt;p&gt;I saw this in your overview as well, you say here if the &quot;view is grantable&quot;, and in the overview above &quot;indicate if the object is grantable&quot;.&lt;/p&gt;

&lt;p&gt;But objects or views are not grantable, privileges are grantable. Using clear, consistent and correct terminology really helps to clear up&lt;br/&gt;
the code and make it understandable for others to read.&lt;/p&gt;

&lt;p&gt;Minor harmess bug in bindPrivilegesForView  in that if the provider is not one of the types you handle then the sd checked&lt;br/&gt;
will be the same one checked on the previous iteration. Would be fixed by correctly moving the defintion of sd into the loop&lt;br/&gt;
where it belongs.&lt;/p&gt;
</comment>
                            <comment id="12432276" author="yipng" created="Sat, 2 Sep 2006 07:32:26 +0100"  >&lt;p&gt;My apology.  I will clean up the comments and use consistent terminology in the next patch.&lt;br/&gt;
I wrote the patch summary really fast and should have double check on the content to see &lt;br/&gt;
if they make clear sense to the reviewers.&lt;/p&gt;

&lt;p&gt;As for &quot;collecting the providers&quot; description, perhaps it is more clearer to state &quot;retrieving all the underlying &lt;br/&gt;
stored dependencies such as table(s), view(s) and routine(s) descriptors which the view depends on.&quot; &lt;/p&gt;


</comment>
                            <comment id="12432366" author="yipng" created="Sun, 3 Sep 2006 19:33:19 +0100"  >&lt;p&gt;Attaching derby1686-trunk-diff07.txt.   This patch reverts to my original fix and the  optimization runtime flag checking has been removed.  The original fix retrieves all the relevent providers such as table, view, and routine descriptor(s) of the given view at bind time and pass this information to runtime later for it to determine if the privilege is grantable or not by the grantor.  It also corrected some of the comments in the code that was not entirely clear and concise.&lt;/p&gt;
</comment>
                            <comment id="12432372" author="yipng" created="Sun, 3 Sep 2006 20:17:42 +0100"  >&lt;p&gt;Dan stated:&lt;/p&gt;

&lt;p&gt;&quot;From reading of the description I&apos;m concerned that we are even collecting providers at bind time, possibly doing a lot&lt;br/&gt;
of extra work for little benefit (still need to look at the code to see what is meant by collecting the providers).&quot;&lt;/p&gt;

&lt;p&gt;The only reason I collect the providers at bind time instead of execution time is because Derby is retrieving these&lt;br/&gt;
stored dependencies from SYSDEPENDS and I like to reduce the number of read locks that get held at execution &lt;br/&gt;
time.  If any of the providers are modified, then the dependency manager will invalidate the view which will trigger &lt;br/&gt;
a recompilation of the statement.  Do let me know if this approach is not worth the effort or it is not valid.&lt;/p&gt;</comment>
                            <comment id="12433151" author="djd" created="Thu, 7 Sep 2006 17:02:42 +0100"  >&lt;p&gt;I&apos;m working on committing this latest patch.&lt;/p&gt;

&lt;p&gt;Quick question, why do we need a new SQL state 2850G, it&apos;s very similar to the existing 28508.&lt;/p&gt;

&lt;p&gt;ERROR 2850G: User &apos;MAMTA2&apos; does not have grant permission on object &apos;MAMTA2&apos;.&apos;V21VIEWTEST&apos;.&lt;/p&gt;

&lt;p&gt;ERROR 28508: User &apos;MAMTA3&apos; does not have select permission on column &apos;C111&apos; of table &apos;MAMTA2&apos;.&apos;V21VIEWTEST&apos;.&lt;/p&gt;

&lt;p&gt;Also there is no such thing as a &apos;grant&apos; permission (see 2850G) above, so I think this message is somewhat confusing to the user.&lt;/p&gt;

&lt;p&gt;This can be resolved after the commit.&lt;/p&gt;</comment>
                            <comment id="12433161" author="djd" created="Thu, 7 Sep 2006 17:32:47 +0100"  >&lt;p&gt;Patch derby1686-trunk-diff07.txt Committed revision 441131 Thanks Yip&lt;/p&gt;</comment>
                            <comment id="12435142" author="yipng" created="Fri, 15 Sep 2006 23:35:45 +0100"  >&lt;p&gt;Most of the 2850* SQLSTATE applies to a specific type of object.  i.e.:  tables.  The error here applies to view and &lt;br/&gt;
I need something more general so I introduced 2850G.  I was thinking that the system probably might just need&lt;br/&gt;
a single generic SQLSTATE to address this.  But I see that you have already open a jira issue for this.&lt;/p&gt;</comment>
                            <comment id="12551396" author="fuzzylogic" created="Thu, 13 Dec 2007 09:05:09 +0000"  >&lt;p&gt;This issue has been resolved for over a year with no further movement. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12343197">DERBY-1330</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12338742" name="ASF.LICENSE.NOT.GRANTED--select_table_no_privilege.sql" size="793" author="kartha" created="Sat, 12 Aug 2006 05:46:35 +0100"/>
                            <attachment id="12339635" name="derby1686-trunk-diff01.txt" size="9605" author="yipng" created="Sat, 26 Aug 2006 07:42:53 +0100"/>
                            <attachment id="12339678" name="derby1686-trunk-diff02.txt" size="26174" author="yipng" created="Mon, 28 Aug 2006 06:48:44 +0100"/>
                            <attachment id="12339724" name="derby1686-trunk-diff03.txt" size="26154" author="yipng" created="Tue, 29 Aug 2006 00:25:11 +0100"/>
                            <attachment id="12339839" name="derby1686-trunk-diff04.txt" size="27055" author="yipng" created="Wed, 30 Aug 2006 06:34:25 +0100"/>
                            <attachment id="12339892" name="derby1686-trunk-diff05.txt" size="30569" author="yipng" created="Wed, 30 Aug 2006 19:10:45 +0100"/>
                            <attachment id="12340076" name="derby1686-trunk-diff06.txt" size="30918" author="yipng" created="Fri, 1 Sep 2006 19:56:38 +0100"/>
                            <attachment id="12340113" name="derby1686-trunk-diff07.txt" size="31980" author="yipng" created="Sun, 3 Sep 2006 19:33:19 +0100"/>
                            <attachment id="12339634" name="derby1686-trunk-stat01.txt" size="331" author="yipng" created="Sat, 26 Aug 2006 07:42:53 +0100"/>
                            <attachment id="12339677" name="derby1686-trunk-stat02.txt" size="505" author="yipng" created="Mon, 28 Aug 2006 06:48:44 +0100"/>
                            <attachment id="12339723" name="derby1686-trunk-stat03.txt" size="505" author="yipng" created="Tue, 29 Aug 2006 00:25:11 +0100"/>
                            <attachment id="12339838" name="derby1686-trunk-stat04.txt" size="505" author="yipng" created="Wed, 30 Aug 2006 06:34:25 +0100"/>
                            <attachment id="12339891" name="derby1686-trunk-stat05.txt" size="856" author="yipng" created="Wed, 30 Aug 2006 19:10:45 +0100"/>
                            <attachment id="12340075" name="derby1686-trunk-stat06.txt" size="856" author="yipng" created="Fri, 1 Sep 2006 19:56:38 +0100"/>
                            <attachment id="12340112" name="derby1686-trunk-stat07.txt" size="856" author="yipng" created="Sun, 3 Sep 2006 19:33:19 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Aug 2006 06:58:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22638</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy102n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39662</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10051"><![CDATA[Urgent]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>