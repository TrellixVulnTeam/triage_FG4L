<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:22:04 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-614/DERBY-614.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-614] Execution failed because of a Distributed Protocol Error</title>
                <link>https://issues.apache.org/jira/browse/DERBY-614</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;I am intermittently receiving Distributed Protocol Error exceptions in my client code. Simultaneously,&lt;br/&gt;
my derby.log is recording Distributed Protocol Error exceptions on the server side.&lt;/p&gt;

&lt;p&gt;I cannot reliably reproduce this problem. &lt;/p&gt;

&lt;p&gt;However, the problem always occurs in the same section of my application, so I can at least&lt;br/&gt;
describe that section of my application. (I&apos;ll do so in an attachment).&lt;/p&gt;

&lt;p&gt;Here is the error I receive on the server side. Sometimes, the CODPNT is 2116 and the&lt;br/&gt;
Error Code Value is 1d, rather than 2114 and e.&lt;/p&gt;

&lt;p&gt;2005-10-05 02:10:23.663 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,main&amp;#93;&lt;/span&gt; (DATABASE = BuildFar&lt;br/&gt;
m), (DRDAID = GA0A0026.P7E6-4182154075488704215&lt;/p&gt;
{136532}), Execution failed becau&lt;br/&gt;
se of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 2114; Er&lt;br/&gt;
ror Code Value = e&lt;br/&gt;
Execution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM;&lt;br/&gt;
CODPNT arg  = 2114; Error Code Value = e&lt;br/&gt;
2005-10-05 02:10:23.663 GMT Thread&lt;span class=&quot;error&quot;&gt;&amp;#91;DRDAConnThread_2,5,main&amp;#93;&lt;/span&gt; (DATABASE = BuildFar&lt;br/&gt;
m), (DRDAID = GA0A0026.P7E6-4182154075488704215{136532}
&lt;p&gt;), null&lt;br/&gt;
null&lt;br/&gt;
org.apache.derby.impl.drda.DRDAProtocolException&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(Unknown Sourc&lt;br/&gt;
e)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.missingCodePoint(Unknown So&lt;br/&gt;
urce)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.parseCNTQRY(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.splitQRYDTA(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeFDODTA(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.writeQRYDTA(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.processCommands(Unknown Sou&lt;br/&gt;
rce)&lt;br/&gt;
        at org.apache.derby.impl.drda.DRDAConnThread.run(Unknown Source)&lt;/p&gt;</description>
                <environment>Linux 2.4, Sun JDK 1.4.2_07, full SYSINFO will be attached.</environment>
        <key id="12317791">DERBY-614</key>
            <summary>Execution failed because of a Distributed Protocol Error</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanpendleton">Bryan Pendleton</assignee>
                                    <reporter username="bryanpendleton">Bryan Pendleton</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Oct 2005 07:48:23 +0100</created>
                <updated>Tue, 8 Mar 2011 12:03:59 +0000</updated>
                            <resolved>Thu, 13 Apr 2006 22:22:37 +0100</resolved>
                                    <version>10.1.1.0</version>
                                    <fixVersion>10.1.3.1</fixVersion>
                    <fixVersion>10.2.1.6</fixVersion>
                                    <component>Network Server</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12331749" author="bryanpendleton" created="Tue, 11 Oct 2005 07:49:55 +0100"  >&lt;p&gt;Here is the sysinfo for the environment in which my Network Server runs&lt;/p&gt;</comment>
                            <comment id="12331750" author="bryanpendleton" created="Tue, 11 Oct 2005 07:52:54 +0100"  >&lt;p&gt;Here is the client-side exception that I receive.&lt;/p&gt;</comment>
                            <comment id="12331752" author="bryanpendleton" created="Tue, 11 Oct 2005 07:58:32 +0100"  >&lt;p&gt;Here is the query that I believe I am running when the Distributed Protocol Error occurs.&lt;/p&gt;</comment>
                            <comment id="12332046" author="bryanpendleton" created="Fri, 14 Oct 2005 09:43:32 +0100"  >&lt;p&gt;I believe I have lucked into a reproducible test case! Below are two queries. The first query does &lt;b&gt;NOT&lt;/b&gt; exhibit the problem, but the second query &lt;b&gt;DOES&lt;/b&gt; exhibit the problem. The only difference in the two queries, I believe, is that the first query does not have a WHERE clause, but the second query does.&lt;/p&gt;

&lt;p&gt;So apparently it is something about the particular style in which I am including the WHERE clause which is triggering this problem?&lt;/p&gt;

&lt;p&gt;Query that works:&lt;br/&gt;
 select tf.*,i.name as item_name,tc.case_name,        p.name as project_name  from apt_test_failure tf       join apt_test_case tc on tf.test_id = tc.id       join apt_history h on tf.history_id = h.id       join apt_item_desc i on h.item_id = i.id       join apt_projects p on h.project_id = p.id  order by tf.id desc&lt;/p&gt;

&lt;p&gt;Query that causes missingCodePoint(QRYBLKSZ):&lt;br/&gt;
 select tf.*,i.name as item_name,tc.case_name,        p.name as project_name  from apt_test_failure tf       join apt_test_case tc on tf.test_id = tc.id       join apt_history h on tf.history_id = h.id       join apt_item_desc i on h.item_id = i.id       join apt_projects p on h.project_id = p.id  where ( p.name = ?) order by tf.id desc&lt;/p&gt;</comment>
                            <comment id="12332048" author="bryanpendleton" created="Fri, 14 Oct 2005 10:00:49 +0100"  >&lt;p&gt;Furthermore, this query works, too! All I do here is add one more condition into the where clause.&lt;br/&gt;
 select tf.*,i.name as item_name,tc.case_name,        p.name as project_name  from apt_test_failure tf       join apt_test_case tc on tf.test_id = tc.id       join apt_history h on tf.history_id = h.id       join apt_projects p on h.project_id = p.id       join apt_item_desc i on h.item_id = i.id  where ( p.name = ?) and ( i.name = ?) order by tf.id desc&lt;/p&gt;

&lt;p&gt;So it works with &lt;b&gt;no&lt;/b&gt; where clause, and it works with a compound where clause (two conditions), but it fails with a one-condition where clause.&lt;/p&gt;</comment>
                            <comment id="12332055" author="kmarsden" created="Fri, 14 Oct 2005 12:21:01 +0100"  >&lt;p&gt;I posted a few tips on debugging protocol errors on the Wiki. &lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/ProtocolDebuggingTips&lt;/a&gt;&lt;br/&gt;
So maybe the traces will give you some information.&lt;/p&gt;

&lt;p&gt;On the server side, I&apos;d be curious to know if the queries that work go through that splitQRYDTA path.   The fact that some data sets for the same result set format work and others don&apos;t might suggest some sort of problem with dividing the data on block boundaries, but only just a wild guess of a possible place of trouble.&lt;/p&gt;</comment>
                            <comment id="12332058" author="bryanpendleton" created="Fri, 14 Oct 2005 14:04:49 +0100"  >&lt;p&gt;Here are the client-side traces. It appears that I successfully read 26 rows from the result set, then I crash when I try to close the result set. I suppose this means that the problem is really on the server side, and I&apos;ll need to collect traces from there. How do I collect the equivalent server-side traces, Kathy?&lt;/p&gt;</comment>
                            <comment id="12332071" author="kmarsden" created="Sat, 15 Oct 2005 00:35:39 +0100"  >&lt;p&gt;The server side tracing information is on the Wiki page as weel.&lt;/p&gt;

&lt;p&gt;Looking briefly at your trace and at the splitQRYDTA code it looks like splitQRYDTA assumes it is going to get a CNTQRY after sending each  block of data, but in fact in this case the client is sending a CLSQRY.  Also from the comment  in that function there seems to be something funny about the fact that we are getting the CNTQRY at all.   &lt;/p&gt;

&lt;p&gt;See  the DDM manual (Volume 3) take a look at LMTBLKPRC -  Limited Block Protocol.&lt;br/&gt;
for a description of the protocol flow for result  sets to see what the actual flow should be here and then we&apos;ll figure out how to make it so.&lt;/p&gt;
</comment>
                            <comment id="12332076" author="bryanpendleton" created="Sat, 15 Oct 2005 01:01:53 +0100"  >&lt;p&gt;It occurred to me that it would probably be most useful to have a matching set of client-side and server-side tracing. So I&apos;ve re-run the failing test case, with tracing turned on for both the client and the server, and fetched the pair of files and will attach them next. &lt;/p&gt;</comment>
                            <comment id="12332077" author="bryanpendleton" created="Sat, 15 Oct 2005 01:03:59 +0100"  >&lt;p&gt;Client side of a pair of matching trace files surrounding the error. Corresponds to the attachment serverSideTrace.txt.&lt;/p&gt;</comment>
                            <comment id="12332078" author="bryanpendleton" created="Sat, 15 Oct 2005 01:05:13 +0100"  >&lt;p&gt;Server side tracing of the error. Corresponds with the attachment clientSideTrace.txt.&lt;/p&gt;</comment>
                            <comment id="12332082" author="bryanpendleton" created="Sat, 15 Oct 2005 01:28:57 +0100"  >&lt;p&gt;Kathey says: &quot;it looks like splitQRYDTA assumes it is going to get a CNTQRY after sending each block of data, but in fact in this case the client is sending a CLSQRY&quot;&lt;/p&gt;

&lt;p&gt;This is very, very interesting. I recently modified my application so that rather than doing:&lt;/p&gt;

&lt;p&gt;  while (rs.next)&lt;br/&gt;
     read-row-and-put-data-on-web-page&lt;/p&gt;

&lt;p&gt;it now does:&lt;/p&gt;

&lt;p&gt;  while (rs.next)&lt;br/&gt;
      read-row-and-put-data-on-web-page&lt;br/&gt;
      if page is full, break&lt;/p&gt;

&lt;p&gt;In other words, I used to read the entire result set, but now it is very common for me to read about two dozen rows, then close the result set &quot;early&quot;. And this problem began to occur right when I made that change.&lt;/p&gt;

&lt;p&gt;So yes, I can see where it used to be the case that my client application responded to &quot;split query&quot; with &quot;ok, continue query&quot;, but now it will often respond to &quot;split query&quot; with &quot;close query&quot;.&lt;/p&gt;

&lt;p&gt;Let me go read the references you sent, so that I can follow your remarks a bit better, and then I&apos;ll be ready to pursue your next suggestion. Thanks!&lt;/p&gt;</comment>
                            <comment id="12332240" author="army" created="Tue, 18 Oct 2005 01:41:05 +0100"  >&lt;p&gt;It looks to me like the problem is that, in the &quot;splitQRYDTA&quot; method that Kathey mentioned, the server reads a codepoint and &lt;em&gt;assumes&lt;/em&gt; it&apos;s a CNTQRY without explicitly checking for it:&lt;/p&gt;

&lt;p&gt;	// read CNTQRY - not sure why JCC sends this&lt;br/&gt;
	correlationID = reader.readDssHeader();&lt;br/&gt;
	int codePoint = reader.readLengthAndCodePoint();&lt;br/&gt;
	DRDAStatement contstmt = parseCNTQRY();&lt;/p&gt;

&lt;p&gt;The server reads the codePoint and then assumes that a CNTQRY follows--but it looks like that&apos;s not a valid assumption.  In this case, the app wants to stop reading the data early, so instead of sending a CNTQRY the client ends up sending a CLSQRY.  The CLSQRY codepoint is read, but then parseCNTQRY() is called, so the server is looking for CNTQRY data (which expects a BLKSZ) and instead gets CLSQRY data (which has no BLKSZ), hence the missingCodePoint exception.&lt;/p&gt;

&lt;p&gt;I looked at the DDM Manual and found the following statements:&lt;/p&gt;

&lt;p&gt;[ LMTBLKPRC ]: A query is terminated any time the CLSQRY command suspends it.&lt;/p&gt;

&lt;p&gt;[ EXCSQLSTT ]: After the EXCSQLSTT or each subsequent CNTQRY command, each result set is suspended&lt;br/&gt;
unless some condition terminates the result set (see CNTQRY (on page 234)). The CNTQRY&lt;br/&gt;
command can continue a suspended result set so that the next portion of the answer set data is&lt;br/&gt;
returned. A result set is terminated anytime the CLSQRY command is received and processed.&lt;/p&gt;

&lt;p&gt;[ LMTBLKPROC ]: The following examples show some of the valid responses to the CLSQRY command:&lt;br/&gt;
  ? If the query is suspended under normal conditions, then an SQLCARD object is returned.&lt;/p&gt;

&lt;p&gt;I&apos;m assuming that in this case &quot;the query is suspended under normal conditions&quot; (at least, I don&apos;t see anything in the traces to indicate otherwise), so based on the above lines from the DDM manual, it seems like the server should be allowing for a CLSQRY to be received in the middle of splitQRYDTA and, if it receives one, should perform normal CLSQRY processing (ultimately returning a SQLCARD).&lt;/p&gt;

&lt;p&gt;That said, though, I spent a good chunk of time trying to force this situation to occur, and I wasn&apos;t able to do so.  That doesn&apos;t mean it&apos;s not possible, just that I didn&apos;t have any luck reproducing the problem on my own.&lt;/p&gt;</comment>
                            <comment id="12332261" author="kmarsden" created="Tue, 18 Oct 2005 03:45:11 +0100"  >&lt;p&gt;I agree that the CLSQRY is perfectly valid, and perhaps many other commands would be perfectly valid at this point too, maybe another statement execution or anything else.    The expectation of splitQRYDTA that it is going to get a CNTQRY after sending the first block of data  seems problematic to me.    Can the server chain the DSS&apos;s and push all the remaining data out in a continuation block, or does it have to save the remaining data until it actually does get a CNTQRY?  Bryan is investigating what the flow should be in this case, so I&apos;ll  wait to hear back  on his research and then take a closer look at the protocol.&lt;/p&gt;

&lt;p&gt;Bryan, do you have a reproducible case that you can attach to the Jira issue?  That would really help facilitate discussion on this issue.&lt;/p&gt;
</comment>
                            <comment id="12332271" author="bryanpendleton" created="Tue, 18 Oct 2005 04:46:24 +0100"  >&lt;p&gt;&amp;gt; Bryan, do you have a reproducible case that you can attach to the Jira issue?&lt;/p&gt;

&lt;p&gt;Unfortunately, no. After your very clear explanation of the problem, I thought it would be straightforward to create a reproducible case, but lots of tweaking of my application over the weekend left me no closer to such a case.&lt;/p&gt;

&lt;p&gt;The two variables I&apos;ve been principally playing with are the &quot;size&quot; of each row in my result set and the number of rows that I retrieve prior to closing the result set. I thought that what I was trying to do was to force the ResultSet.close() call to occur &quot;cleanly&quot; between QRYDATA blocks, possibly with a partial row spanning the gap between the QRYDATA blocks, but that by itself doesn&apos;t appear to be&lt;br/&gt;
enough to make the problem happen (which I guess means I don&apos;t understand the bug yet!).&lt;/p&gt;

&lt;p&gt;I&apos;ll keep trying.&lt;/p&gt;</comment>
                            <comment id="12332735" author="bryanpendleton" created="Sat, 22 Oct 2005 07:33:49 +0100"  >&lt;p&gt;YAY! I think I&apos;ve found a reproducible test case! I&apos;ll attach a zip file with the details. Please let me know if you can reproduce the problem using this data.&lt;/p&gt;</comment>
                            <comment id="12355666" author="kmarsden" created="Tue, 25 Oct 2005 08:55:38 +0100"  >&lt;p&gt; I think the parseCNTQRY in splitQRYDTA is wrong.  The client should be able to send any command after receiving a respose to its previous CNTQRY, so the remainder of the data needs to be handled in some other way than just assuming the next request it gets is going to be a CNTQRY.  &lt;/p&gt;

&lt;p&gt;What were you able to find on this in the documentation for LMTBLKPRC? Does the server need to associate the data with the result set and wait for the next CNTQRY, or can it send another block  in a continuation DSS immediately after sending the first one?&lt;/p&gt;

</comment>
                            <comment id="12355684" author="bryanpendleton" created="Tue, 25 Oct 2005 13:54:10 +0100"  >&lt;p&gt;&amp;gt; Does the server need to associate the data with the result set and wait for the next CNTQRY, or can it send another block in a continuation DSS immediately after sending the first one? &lt;/p&gt;

&lt;p&gt;I&apos;m sorry; I&apos;m finding these DRDA specs rather hard going. &lt;/p&gt;

&lt;p&gt;For example, I can&apos;t find the phrase &quot;continuation DSS&quot; in any of the 3 DRDA specs.&lt;/p&gt;

&lt;p&gt;I did find some things that seemed relevant, though:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Sections 4.4.6.2 and 7.21.1.1 in Volume 1 seem relevant to this issue, as does the MAXBLKEXT definition in Volume 3&lt;/li&gt;
	&lt;li&gt;On page 477 of volume 3: &quot;Answer set data may also be returned in one or more QRYDTA reply data objects&quot;&lt;/li&gt;
	&lt;li&gt;On page 476 of volume 3: &quot;Possibly, additional query blocks, limited in number by the value of the MAXBLKEXT parameter of OPNQRY, each containing a QRYDTA reply data object&quot;&lt;/li&gt;
	&lt;li&gt;On page 137 of volume 1: &quot;If the application server cannot return all the requested rows because it has used up all the query blocks it is allowed to, according to the maxblkext parameter, then the DRDA rowset is incomplete. The application server returns one or more QRYDTAs with the rows it has fetched, and expects the CNTQRY request from the application request either to complete the DRDA rowset (or, optionally) to reset it.&quot;&lt;/li&gt;
	&lt;li&gt;Volume 3 says that the MAXBLKEXT value defaults to 0, which I think means that, by default, the server can only return a single QRYDTA block at a time.&lt;/li&gt;
	&lt;li&gt;On page 137 of volume 1: &quot;Note: At any time after the application requester has sent the OPNQRY command and the application server has successfully processed it, and before the application server has sent an ENDQRYRM reply message, the application requester can send a Close Query (CLSQRY) command...&quot;&lt;/li&gt;
	&lt;li&gt;On page 435 of volume 1: &quot;If the space remaining in the query block cannot contain the complete base rows, only that part of the&lt;br/&gt;
row data that can fit in the remainder of the exact query block is added to the query block. If this is the first row added to&lt;br/&gt;
the exact query block, then additional exact query blocks are generated to contain the remainder of the base row data. If this&lt;br/&gt;
is not the first row added to the exact query block, then either a partial row is returned in the last exact query block or&lt;br/&gt;
extra query blocks can be generated to contain the remainder of the row (and possibly, additional rows) as allowed by the maxblkext&lt;br/&gt;
parameter.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, I&apos;m guessing that by &quot;continuation DSS&quot; you mean the creation of a 2nd-through-nth QRYDATA block. If so, then yes, I believe that&lt;br/&gt;
the server is allowed to do this, but only if the client has provided a non-zero MAXBLKEXT parameter.&lt;/p&gt;

&lt;p&gt;Once the server has generated (MAXBLKEXT + 1) QRYDATA blocks, if it has not yet exhausted the rows to be returned, then&lt;br/&gt;
it must halt the data return process in mid-row, place the query into &quot;suspended&quot; state, and wait for the client to&lt;br/&gt;
send either a CNTQRY or a CLSQRY.&lt;/p&gt;

&lt;p&gt;I do not believe that the client is allowed to send any commands other than CNTQRY or CLSQRY; those are the only legal options.&lt;/p&gt;

&lt;p&gt;Please help me better understand the terminology that these DRDA specs are using.&lt;/p&gt;</comment>
                            <comment id="12355828" author="kmarsden" created="Tue, 25 Oct 2005 23:51:55 +0100"  >&lt;p&gt;I hear you about the DRDA specs. They are pretty hard.  That&apos;s why I am making you do the research #&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  This research by the way is excellent.&lt;/p&gt;

&lt;p&gt;DSS stands for Data Stream Structure.  It is sort of the packaging mechanism for data going to the client. It&apos;s size is limitted to 32K but sometimes it is ok to set a flag to continue in the next DSS and send more data.    The Data Stream Structure documented in the DDM manual under DSS.   I have to say I don&apos;t really understand the chaining very well, but hope this will be an opportunity for me to learn more about it myself.&lt;/p&gt;


&lt;p&gt;You said ...&lt;/p&gt;

&lt;p&gt;&amp;gt;I do not believe that the client is allowed to send any commands other than CNTQRY or &amp;gt;CLSQRY; those are the only legal options.&lt;/p&gt;

&lt;p&gt;For this particular result set you are right, the client can send only either a CNTQRY or CLSQRY and  it will send an identifier for the result set (PKGNAMCSN) with the request to identify which result set it is, but  there may be intervening requests that have nothing to do with this result set.  For instance if you change your repro to execute some totally unrelated statement before closing the result set, such as &quot;CREATE TABLE FOO (i int)&quot; then before it ever sends the CLSQRY for this result set you will see an EXCSQLIMM  as the next command sent from the client.    So, we would again fall over if we simply changied splitQRYDTA to handle CLSQRY as well as CNTQRY.  Also we may get an intervening CNTQRY for an entirely different result set and then we could end up sending the data for the wrong result set for the reqest, so that is why I think the parseCNTQRY in splitQRYDTA is wrong. &lt;/p&gt;

&lt;p&gt;Could you try  to change your test case as described and see if in fact my assessment is correct that we might get some other request from the client before we get the CNTQRY or CLSQRY request for this result set?&lt;/p&gt;



</comment>
                            <comment id="12355871" author="bryanpendleton" created="Wed, 26 Oct 2005 02:08:47 +0100"  >&lt;p&gt;&amp;gt; Could you try to change your test case and see if we might get some other request from the client before we get the CNTQRY or CLSQRY request for this result set?&lt;/p&gt;

&lt;p&gt;It is exactly as you suspected. If I add a 2nd statement and call &apos;s2.executeUpdate(&quot;create table foo (i int)&quot;);&apos; at the critical time, we still get the SYNTAXRM exception, but the details are indeed different:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the codepoint in the exception in the server log is 0x2105, which I think is RDBCMTOK&lt;/li&gt;
	&lt;li&gt;the server-side trace shows that we got EXCSQLIMM rather than CLSQRY:&lt;br/&gt;
         RECEIVE BUFFER: EXCSQLIMM           (ASCII)           (EBCDIC)&lt;/li&gt;
	&lt;li&gt;the server-side stack trace is just slightly different. Rather than parseCNTQRY calling &apos;missingCodePoint&apos;, which is what happens when we send a CLSQRY, this time parseCNTQRY calls &apos;invalidCodePoint&apos;, which throws the SYNTAXRM exception.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So I agree with you: the client should be able to send &lt;b&gt;any&lt;/b&gt; command at this point, so the server needs to be prepared to&lt;br/&gt;
handle any command. I guess this means that the server needs to be able to fully suspend this query, holding the partial row in abeyance, such that it can resume processing the query, starting a new QRYDTA block with the remainder of this partial row, if the client so requests, but also be able to handle any other command that might arrive.&lt;/p&gt;

&lt;p&gt;I see that there is DRDAStatement.rsSuspend, which in turn calls DRDAResultSet.suspend, but those seem to simply set a status flag; we also need to record the contents of local variable &apos;temp&apos; which is holding the remainder of the partially-returned row, yes?&lt;/p&gt;

&lt;p&gt;It seems that a solution should be something along the lines of:&lt;br/&gt;
1) when splitQRYDTA determines that it cannot fit all the data into this block, it should attach the remainder data to the result set, suspend the statement, and pop all the way back out to the processCommands loop&lt;br/&gt;
2) When a CNTQRY is received, the first thing that writeQRYDTA should do is to look for any partial remainder data that might have been saved by step 1, and write that data prior to writing any new data. &lt;br/&gt;
3) And it seems like the MAXBLKEXT parameter should figure in here as well, I think?&lt;/p&gt;

&lt;p&gt;It&apos;s still muddy, but it&apos;s getting much clearer.&lt;/p&gt;
</comment>
                            <comment id="12355877" author="kmarsden" created="Wed, 26 Oct 2005 03:29:47 +0100"  >&lt;p&gt;Your steps 1 and 2 sound like a good approach to me.  It would be good to get input from others.  I know Oyvind,  Rick  and Francois have been dabbling in DRDA. Opinions?&lt;/p&gt;

&lt;p&gt;MAXBLKEXT I think would only be relevant if you took the alternate approach of trying to push the remaining data out to the client when splitQRYDTA is called and not save it for later.  That approach might be a can of worms as I don&apos;t know that the client is set up to handle it, since it is currently sending MAXBLKEXT as zero.&lt;/p&gt;</comment>
                            <comment id="12357583" author="kmarsden" created="Mon, 14 Nov 2005 21:08:54 +0000"  >&lt;p&gt;I wanted to check in  on this issue. I wanted to make sure that my comment that it would be good to get input wasn&apos;t stalling your effort. I think the approach you proposed is a good one.&lt;/p&gt;</comment>
                            <comment id="12357630" author="forsini" created="Tue, 15 Nov 2005 06:12:58 +0000"  >&lt;p&gt;I have done a bit of reading on the subject (which was a great learning exercise btw) and I find Brian&apos;s approach with 1) and 2) to be appropriate. We&apos;ll need to ensure the remainder data attached to the resultset is released/freed if the CLSQRY DDM command is sent by the requester or due to some unexpected error condition (as part of ENDQRYRM) returned from the server - but that should happen as part of resultset deallocation logic.. &lt;/p&gt;

&lt;p&gt;As far as handling MAXBLKEXT in 3) - I&apos;d say that we obviously need to take it into account since a client (requester) could set a value different than zero (i.e. other DRDA clients out there).&lt;/p&gt;

&lt;p&gt;Interestingly enough, the DDM specifications mention the following for MAXBLKEXT:&lt;/p&gt;

&lt;p&gt;&quot;A value of zero indicates that the requester is not capable of receiving extra query blocks of answer set data. &quot;&lt;/p&gt;

&lt;p&gt;which is the default we have right now, hence the server should not be returning extra query blocks of QRYDTA...would that also be why the client sent CLSQRY in the first place...I mean, if the client set a MAXBLKEXT of zero, then it will not expect reading further data from the server after the initial reply (just some thoughts).&lt;/p&gt;

&lt;p&gt;Now, the specs also say the following about MAXBLKEXT:&lt;/p&gt;

&lt;p&gt;&quot;A value of minus one indicates that the requester is capable of receiving the entire result set.&quot;  (am reading this as the requester will be able to receive the entire resultset without any particular limit on the number of blocks of answer set data returned by the server) - this is not very clear from the specs so not completely sure about this. &lt;/p&gt;

&lt;p&gt;Hence, should not we set &apos;-1&apos; as the default value of MAXBLKEXT for the Derby DRDA networkclient driver instead of zero? Since and IMHO, the (derby) server should by default try to return the entire resultset (in chunks/clocks as appropriate) to the derby networkclient which has control as far as reading more data or not (via CLSQRY) anyway.&lt;/p&gt;

&lt;p&gt;Now, in case of MAXBLKEXT limit being reached (or in MAXBLKEXT  value being zero) then the server should probably terminate the query via a ENDQRYRM reply and some error condition (Severity Code).&lt;/p&gt;</comment>
                            <comment id="12358300" author="bryanpendleton" created="Wed, 23 Nov 2005 05:40:35 +0000"  >&lt;p&gt;Hi Kathey &amp;amp; Francois (&amp;amp; others):&lt;/p&gt;

&lt;p&gt;I&apos;m trying to write up a mini-design spec for changes to the DRDA implementation to resolve this issue. But during my research, I&apos;ve gotten myself pretty confused, and could use some help. Can you consider the following questions and tell me what you think?&lt;/p&gt;

&lt;p&gt;thanks in advance, bryan&lt;/p&gt;

&lt;p&gt;1) Does the LMTBLKPRC protocol apply to invocations of callable statements? That is, if we call a procedure, and it has output parameters, and the data in those parameters exceeds the blocksize, should we split the query data and await a CNTQRY?&lt;/p&gt;

&lt;p&gt;2) When we are returning externalized data as part of the response to a query, are there any rules for the intermingling of the EXTDTA objects and the QRYDTA objects? Suppose, for example, that a particular QRYDTA object contains the end of row 4, the entire contents of rows 5 and 6, and the start of row 7. I believe that the EXTDTA for rows 5 and 6 should be sent after we send this QRYDTA, but I am not sure about the EXTDTA for rows 4 and 7. I guess what I am asking is: is the rule &quot;we send the EXTDTA for a particular row after the QRYDTA which contains the &lt;b&gt;start&lt;/b&gt; of this row&quot;, or is the rule: &quot;we send the EXTDTA for a particular row after the QRYDTA which contains the &lt;b&gt;end&lt;/b&gt; of this row&quot;?&lt;/p&gt;

&lt;p&gt;3) At the JDBC user level, what JDBC API calls cause the qryrtndta parameter to be set to FALSE. In the DRDA spec, I see: &quot;The qryrtndta parameter specifies whether data is to be returned with the command. If FALSE is sent on the command, the result is that only a positioning fetch operation is performed.&quot; How does this situation actually arise in ordinary use? What sort of client program would I write that would cause qryrtndta to be set to false?&lt;/p&gt;

&lt;p&gt;4) Do you think that we have any tests in the test suite which validate the behavior of the server when using both LMTBLKPRC protocol and QRYROWSET specification? I&apos;ve been reading through the DRDA spec&apos;s discussion of QRYROWSET handling, and although it does provide some rules for how to handle the various combinations which arise, the rules are &lt;b&gt;extremely&lt;/b&gt; complicated and I&apos;m nervous about accidentally breaking this processing.&lt;/p&gt;</comment>
                            <comment id="12358318" author="bryanpendleton" created="Wed, 23 Nov 2005 09:29:26 +0000"  >&lt;p&gt;Well, this may be premature, or even wildly wrong, but I took a stab at designing a new implementation of the writeQRYDTA/writeFDODTA/splitQRYDTA methods in DRDAConnThread.java in order to fix this bug. Please have a look at the attached and tell me what you think. Depending on how much of a turkey coma I suffer from, I may take a stab at coding this up over the long weekend, so it would be great to have some early feedback prior to that.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12358465" author="bryanpendleton" created="Fri, 25 Nov 2005 03:25:37 +0000"  >&lt;p&gt;I&apos;ve coded up a new implementation, which has some new behaviors. The client likes some of those new behaviors, but doesn&apos;t like others. Hmmm... this is going to be an &quot;interesting&quot; bug fix. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12358557" author="bryanpendleton" created="Sun, 27 Nov 2005 01:02:13 +0000"  >&lt;p&gt;After stepping through the current code carefully in the debugger, and trying several failed attempts at changes, I learned several more things:&lt;/p&gt;

&lt;p&gt;First, as Kathey observed on the mailing list, qryrowset is commonly 0 when clients perform a fetch of result set data. This means that the &quot;while&quot; loop in writeFDODTA usually runs exactly one time, and it is the responsibility of the &quot;while&quot; loop in writeQRYDTA to compose the implicit row set for return. I do think that it would be possible to push this behavior down into writeFDODTA and have a single &quot;while&quot; loop handle all these cases, but I also think that writeFDODTA is already complicated enough, so I chose instead to keep the current behavior, to be more surgical in my changes, and to document as best I could what is going on.&lt;/p&gt;

&lt;p&gt;Second, test &quot;big.sql&quot; in the lang suite does a pretty good job of exposing a lot of the interesting behaviors of this part of the code.&lt;/p&gt;

&lt;p&gt;Third, as Kathey observed on the mailing list, the new member variable to hold the split data between client requests belongs on the DRDAResultSet, not on the DRDAStatement. I&apos;m still not really sure I understand this business about a statement having multiple current result sets, but the implementation is much more natural with that change.&lt;/p&gt;

&lt;p&gt;Fourth, it appears that the current code has the behavior that, when sending the remainder data for a split row in a subsequent QRYDTA block, no additional rows are added to an implicit result set for that QRYDTA block. Instead, the remainder data is placed into the QRYDTA block and immediately returned, and a subsequent CNTQRY/QRYDTA pair is needed to start fetching additional rows. This had completely escaped me during &quot;code reading&quot;, but it is the whole point of the &quot;moreData=false&quot; after calling splitQRYDTA from writeFDODTA.&lt;/p&gt;

&lt;p&gt;Fifth, with respect to EXTDTA and split query data, the behavior of the current code appears to be &quot;we send the EXTDTA for a particular row after the QRYDTA which contains the &lt;b&gt;end&lt;/b&gt; of this row.&quot; I have tried to retain this behavior in the new code. One interesting case is when a row must be split across not just 2, but 3 QRYDTA blocks; in this case the EXTDTA needs to be sent after the 3rd such block; that is the reason for the extra &quot;if&quot; statement in writeQRYDTA.&lt;/p&gt;

&lt;p&gt;Lastly, I&apos;m still not sure I understand how LMTBLKPRC is supposed to interact with callable procedure statements, nor do I understand what  would cause the qryrtndta field to be set to FALSE, but I think that my changes don&apos;t materially affect those cases, and the new code should have generally the same behaviors in those cases as the old code.&lt;/p&gt;

&lt;p&gt;I&apos;m doing some final testing, and should post my patch shortly.&lt;/p&gt;</comment>
                            <comment id="12358559" author="bryanpendleton" created="Sun, 27 Nov 2005 01:32:37 +0000"  >&lt;p&gt;Here&apos;s my proposed patch. It includes substantive changes to DRDAResultSet, DRDAStatement, and DRDAConnThread, changes to the big.sql tests, and a small new test called jira614.java which specifically reproduces this bug.&lt;/p&gt;

&lt;p&gt;For reviewers: the big.sql tests pass with both the old code and with the new code. I added new tests here in order to exercise a few more cases of the new code, specifically the handling of rows which were split across 3 QRYDTA blocks, but those cases were not broken in the old code, so the tests pass in both cases. The new jira614 test fails with the old code, but passes with the new code.&lt;/p&gt;

&lt;p&gt;Suggestions about additional testing that may be needed are welcome. I&apos;ve run the reproduction case, as well as all the cases in both derbynetmats and derbynetclientmats, which appear to be the primary test suites for testing the network server code.&lt;/p&gt;

&lt;p&gt;Also, of course, suggestions and feedback about the code changes themselves would be wonderful!&lt;/p&gt;

&lt;p&gt;Please have a look at these changes at your convenience.&lt;/p&gt;

&lt;p&gt;thanks,&lt;/p&gt;

&lt;p&gt;bryan&lt;/p&gt;</comment>
                            <comment id="12358565" author="bryanpendleton" created="Sun, 27 Nov 2005 05:25:20 +0000"  >&lt;p&gt;Ugh. There&apos;s always 1 last detail. My new test case in lang/big.sql fails, but only:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if run with the db2jcc.jar driver&lt;/li&gt;
	&lt;li&gt;AND if the client is run by the test harness&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For some reason, if I just run IJ using the DB2Driver and run big.sql interactively (using &quot;run &apos;big.sql&apos;;&quot;), the test runs fine.&lt;/p&gt;

&lt;p&gt;But if I run it with all the flags that the harness uses, then I get a problem. So there&apos;s something in:&lt;/p&gt;

&lt;p&gt;C:\bryan\src\derby\main\tests&amp;gt;java -Dderby.system.home=C:\bryan\src\derby\main\t&lt;br/&gt;
ests\DerbyNet\big -Dderby.infolog.append=true -Duser.dir=C:\bryan\src\derby\main&lt;br/&gt;
\tests -Dij.defaultResourcePackage=/org/apache/derbyTesting/functionTests/tests/&lt;br/&gt;
lang/ -Dframework=DerbyNet -Dconsole.encoding=Cp1252 org.apache.derby.tools.ij -&lt;br/&gt;
fr big.sql -p C:\bryan\src\derby\main\tests\DerbyNet\big\big_app.properties&lt;/p&gt;

&lt;p&gt;that is altering the behavior. Sigh. More fun things to investigate &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12358655" author="kmarsden" created="Mon, 28 Nov 2005 23:09:24 +0000"  >&lt;p&gt;The change looks good to me.  A couple small points and a request....&lt;/p&gt;

&lt;p&gt;For the assertion &quot;There was no data to split&quot;, it would be good to have something a bit more  descriptive.  &lt;/p&gt;

&lt;p&gt;Can the Jira614.java  test be added to an existing test like prepStmt.java to avoid  additional database creation in the test suite?&lt;/p&gt;


&lt;p&gt;Would you be willing to try  your server with the original 10.1 client release?Probably the easiest thing to do  is  run derbynetclientmats with the derbyTesting.jar and derbyclient.jar from the 10.1.1.0 release and your 10.2 derby.jar and derbynet.jar.  There may be a few diffs because of bug fixes in 10.2. If you post the diffs I&apos;d be happy to spot check if they just look like bugfixes.&lt;/p&gt;

&lt;p&gt;Other thoughts that came to mind upon reviewing this change, but not  directly relevant to the fix:&lt;/p&gt;

&lt;p&gt;Even though the agent errors are essentially assertions it might be good to file a Jira entry to localize them, since we do not put them in SanityManager.DEBUG blocks and they could be returned to the user.&lt;/p&gt;


&lt;p&gt;Since splitting is expensive, it might it be good for network server to be a bit smarter about the split by either improving the coarse estimation in writeQRYDTA or doing something more efficient to handle the overrun than copying it into a new array.  Of course that may make bugs like this even harder to track down.&lt;/p&gt;</comment>
                            <comment id="12359256" author="bryanpendleton" created="Mon, 5 Dec 2005 02:38:59 +0000"  >&lt;p&gt;Here are the results from running derbynetclientmats with the 10.1.1.0 versions of derbyTesting.jar and derbyclient.jar in my classpath.&lt;/p&gt;

&lt;p&gt;I didn&apos;t see anything that directly pointed to a problem with the patch, but I didn&apos;t know how to interpret/explain all the diffs.&lt;/p&gt;

&lt;p&gt;Please have a look, Kathey, and tell me if any of these results concern you.&lt;/p&gt;</comment>
                            <comment id="12359267" author="bryanpendleton" created="Mon, 5 Dec 2005 10:42:58 +0000"  >&lt;p&gt;Here is an updated patch and updated SVN status incorporating Kathey&apos;s feedback:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;big.sql includes some simple SQL tests of the split code&lt;/li&gt;
	&lt;li&gt;new method jira614 within prepStmt.java includes a focused test of precisely&lt;br/&gt;
  the situation that raised the original bug.&lt;/li&gt;
	&lt;li&gt;I tried to make the assertion in splitQRYDTA more descriptive of what it was trying to catch&lt;/li&gt;
	&lt;li&gt;I added some comments about the issues involved in splitting, and about possible&lt;br/&gt;
  alternate algorithms&lt;br/&gt;
both DerbyNet and DerbyNetClient pass with this patch, and the rest of derbyall was uneventful, too.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12360015" author="kmarsden" created="Sat, 10 Dec 2005 11:01:43 +0000"  >&lt;p&gt;I committed this patch &lt;/p&gt;

&lt;p&gt;Date: Fri Dec  9 17:51:26 2005&lt;br/&gt;
New Revision: 355689&lt;br/&gt;
URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=355689&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=355689&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Thanks so much for the wonderful fix and the great javadoc you added. &lt;/p&gt;

&lt;p&gt;One thing I did notice that deserves followup and may be related to the intermittent hangs you have seen,  is that there was a finalizeChain() call in the old file on line 6139 that seems to be missing from the new version,  line 6278.&lt;br/&gt;
This might be the source of the hang you reported for one of the dss chaining bugs  (I can&apos;t seem to find that mail now).&lt;/p&gt;

&lt;p&gt;Can you take a look at that and also clean up the out of date patch attachments to 614.&lt;/p&gt;

</comment>
                            <comment id="12360229" author="bryanpendleton" created="Tue, 13 Dec 2005 03:00:10 +0000"  >&lt;p&gt;After re-reading the changes and stepping through the code again, I believe that the patch is correct, and the removal of the finalizeChain() call from splitQRYDTA is proper. Here is my reasoning:&lt;/p&gt;

&lt;p&gt;The previous flow-of-control for a split QRYDTA block was that writeFDODTA assembled a large row, which splitQRYDTA then split across multiple QRYDTA blocks, sending each of those blocks and waiting for the next CNTQRY message before continuing. By the time that splitQRYDTA returned, any QRYDTA blocks containing partial portions of that large row had been sent to the client, and the current QRYDTA block was filled with the final bytes of the split row. The finalizeChain call in splitQRYDTA was necessary because that was how the partial QRYDTA blocks were sent to the client.&lt;/p&gt;

&lt;p&gt;In the new flow-of-control, splitQRYDTA does not actually send the QRYDTA block to the client, nor does it wait for the CNTQRY from the client. Instead, all sending and receiving happens in the &quot;normal&quot; location in processCommands. splitQRYDTA arranges to split the data, records the partial data in the result set, and control &quot;pops&quot; all the way back out to processCommands. The QRYDTA block which contains the partial row data is sent by the finalizeChain() call in processCommands, at line 897.&lt;/p&gt;

&lt;p&gt;In all cases, in both old and new code, externalized data was sent after the QRYDTA containing the last remainder bytes of the split row, by calling writeEXTDTA from writeQRYDTA.&lt;/p&gt;

&lt;p&gt;Thus the old code had two finalizeChain calls, because a QRYDTA block might be sent either by processCommands, or by splitQRYDTA, depending on whether it contained a split row or not. The new code has only one finalizeChain call, because all QRYDTA blocks are sent by processCommands.&lt;/p&gt;

&lt;p&gt;One case that I had trouble exercising in my testing is that there is &lt;b&gt;also&lt;/b&gt; a call to splitQRYDTA from doneData, and perhaps in that case there is a problem? Fundamentally, I think the flow of control will be the same: doneData calls splitQRYDTA to prepare the partial block, control pops back out to processCommands to send the response and wait for the CNTQRY, then processLeftoverQRYDTA will drop the remainder bytes into a subsequent QRYDTA to be sent. Still, I have not been able to provoke such a case in my simple testing.&lt;/p&gt;

&lt;p&gt;Are there flaws in my reasoning here? Additional test cases I should try?&lt;/p&gt;

&lt;p&gt;Do you know of a test case which will cause splitQRYDTA to be called from doneData? &lt;/p&gt;</comment>
                            <comment id="12360509" author="bryanpendleton" created="Fri, 16 Dec 2005 01:17:55 +0000"  >&lt;p&gt;Marking as closed since Kathey has committed the patch to the trunk and I&apos;ve verified that it addresses my problem.&lt;/p&gt;</comment>
                            <comment id="12366650" author="deepa" created="Fri, 17 Feb 2006 03:02:33 +0000"  >&lt;p&gt;Reopening this bug to submit a patch to reset splitQRYDTA variable in DRDAResultSet.close(). This was found when working on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-210&quot; title=&quot;Network Server will leak prepared statements if not explicitly closed by the user until the connection is closed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-210&quot;&gt;DERBY-210&lt;/a&gt; and discussion in derby-dev can be found in this thread: &lt;a href=&quot;http://www.nabble.com/-jira-Commented%3A-%28DERBY-210%29-Network-Server-will-leak-prepared-statements-if-not-explicitly-closed-by-the-user-until-the-connection-is-closed-t1116045.html#a2952317&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/-jira-Commented%3A-%28DERBY-210%29-Network-Server-will-leak-prepared-statements-if-not-explicitly-closed-by-the-user-until-the-connection-is-closed-t1116045.html#a2952317&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="12366651" author="deepa" created="Fri, 17 Feb 2006 03:05:22 +0000"  >&lt;p&gt;Attaching a patch &apos;reset_drda_rs.diff&apos; which resets splitQRYDTA field in DRDAResultSet.close() method. This patch changes only one file:&lt;/p&gt;

&lt;p&gt;M      java\drda\org\apache\derby\impl\drda\DRDAResultSet.java&lt;/p&gt;

&lt;p&gt;With this patch, I ran derbynetmats and derbynetclientmats with Sun JDK 1.4.2 on Win XP. No failures.&lt;/p&gt;

&lt;p&gt;Bryan mentioned he&apos;ll try to make a repro/test specific to this issue: &lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Re%3A-jira-Commented%3A-%28DERBY-210%29-Network-Server-will-leak-prepared-statements-if-not-explicitly-closed-by-the-user-until-the-connection-is-closed-p2961106.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/Re%3A-jira-Commented%3A-%28DERBY-210%29-Network-Server-will-leak-prepared-statements-if-not-explicitly-closed-by-the-user-until-the-connection-is-closed-p2961106.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would appreciate if someone can take a look and commit this patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="12366657" author="bryanpendleton" created="Fri, 17 Feb 2006 03:35:01 +0000"  >&lt;p&gt;Welcome back, JIRA! Attached is d614_a.diff, which contains the patch that Deepa found as well as a new regression test which demonstrates the problem. To verify this fix, run the regression test without the patch and you will get a StringOutOfBoundsException in the client-side parsing, then apply the one-line change to DRDAResultSet.java and the test will pass. To run the test by itself:&lt;/p&gt;

&lt;p&gt;  java -Dframework=DerbyNetClient org.apache.derbyTesting.functionTests.harness.RunTest derbynet/prepStmt.java&lt;/p&gt;

&lt;p&gt;Thank you very much to Deepa for finding the problem and describing it so clearly. For everybody else, here&apos;s the quick summary:&lt;/p&gt;

&lt;p&gt;  DRDAStatement objects on the server side can get re-used after they have been closed.&lt;br/&gt;
  After a statement has been closed, the client may re-use the Section Number when&lt;br/&gt;
  sending a new request for a new statement. The server then discovers that there was&lt;br/&gt;
  a statement object in memory, and it automatically closes that statement and re-uses&lt;br/&gt;
  it. With my first patch to this bug, I introduced a problem in this processing; the&lt;br/&gt;
  splitQRYDTA field was not cleared when the statement was closed. This meant that&lt;br/&gt;
  if that splitQRYDTA field just happened to have some pending query data from the&lt;br/&gt;
  previous statement at the point where it was re-used, the pending query data would&lt;br/&gt;
  erroneously stick around and be returned as the first result for the new statement.&lt;/p&gt;

&lt;p&gt;  Thus, the conditions that lead up to this bug are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;a statement is created, and results are fetched, and a QRYDTA block has to be split.&lt;/li&gt;
	&lt;li&gt;instead of sending a CNTQRY to fetch the split data, the client instead closes the&lt;br/&gt;
    statement.&lt;/li&gt;
	&lt;li&gt;then, the client creates a new statement with the same Section Number (it is free to&lt;br/&gt;
   do so, since the previous statement has been closed), and sends a new query&lt;br/&gt;
   request over.&lt;/li&gt;
	&lt;li&gt;at that point, the server responds to the new query with the leftover split QRYDATA.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The regression test simply forces the server down this code path.&lt;/p&gt;

&lt;p&gt;If somebody could please take a look at this patch, I would be very grateful.&lt;/p&gt;</comment>
                            <comment id="12366751" author="bryanpendleton" created="Fri, 17 Feb 2006 14:28:00 +0000"  >&lt;p&gt;Updated patch d614_a_with_close_stmts.diff addresses feedback from Dan and Deepa: the test should close the statement objects at the end in order to avoid wasting client driver resources and to match standard JDBC style. I re-ran the test after adding the close calls, both before and after applying the patch to DRDAResultSet.java, and confirmed that the test still demonstrates the bug by failing prior to the fix and succeeding afterwards. Please have another look.&lt;/p&gt;</comment>
                            <comment id="12366807" author="kmarsden" created="Sat, 18 Feb 2006 01:07:39 +0000"  >&lt;p&gt;I committed this change.  I noticed there is other state that is not reset in closed. Perhaps it is guaranteed to be initialized, I don&apos;t know.  Maybe another Jira  entry to make sure the other state is reset would be good.&lt;/p&gt;

&lt;p&gt;Date: Fri Feb 17 07:59:55 2006&lt;br/&gt;
New Revision: 378552&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=378552&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=378552&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12366813" author="kmarsden" created="Sat, 18 Feb 2006 02:04:50 +0000"  >&lt;p&gt;Deepa said&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;I had checked all the DRDAResultSet states get initialized when&lt;br/&gt;
&amp;gt;re-used. If they are not in close, they get initialized in some other&lt;br/&gt;
&amp;gt;DRDAStatement methods - like addResultSet, setRsDefaultOptions,&lt;br/&gt;
&amp;gt;setOPNQRYOptions, setQueryOptions etc. I will open a JIRA and post my&lt;br/&gt;
&amp;gt;observations there so that this can be rechecked. I think it will be&lt;br/&gt;
&amp;gt;good to add reset for all states in close() method so that we don&apos;t&lt;br/&gt;
&amp;gt;miss anything by any other code changes.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt;&lt;/p&gt;

&lt;p&gt;Or maybe move them out to a reset method that is called when the Resultset is reused.&lt;br/&gt;
Would that make things clearer for the future?   At least add a comment about how important it is to add new fields to this reset process.&lt;/p&gt;


</comment>
                            <comment id="12366825" author="bryanpendleton" created="Sat, 18 Feb 2006 03:12:53 +0000"  >&lt;p&gt;Thank you Kathey for submitting the second patch.&lt;/p&gt;</comment>
                            <comment id="12374276" author="kmarsden" created="Thu, 13 Apr 2006 08:32:27 +0100"  >&lt;p&gt;Re-opening this bug to port the fix to 10.1&lt;/p&gt;

</comment>
                            <comment id="12374285" author="kmarsden" created="Thu, 13 Apr 2006 10:23:04 +0100"  >&lt;p&gt;Attached patch &apos;derby614_10_1.diff&apos;  which merges the following changes to 10.1&lt;/p&gt;

&lt;p&gt;355689 - Fixes the split logic when data passes the blksize boundary.&lt;br/&gt;
Details of the fix are in spec.html attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-614&quot; title=&quot;Execution failed because of a Distributed Protocol Error&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-614&quot;&gt;&lt;del&gt;DERBY-614&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;378552 - clear splitQRYTDA field for reuse of the resultset&lt;/p&gt;

&lt;p&gt;Running derbyall now. Will commit this tomorrow.&lt;/p&gt;</comment>
                            <comment id="12374336" author="kmarsden" created="Thu, 13 Apr 2006 22:22:37 +0100"  >&lt;p&gt;Checked this change into 10.1 branch:&lt;/p&gt;

&lt;p&gt;Date: Thu Apr 13 06:14:26 2006&lt;br/&gt;
New Revision: 393798&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/viewcvs?rev=393798&amp;amp;view=rev&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewcvs?rev=393798&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Thanks again to Bryan for this great fix.  It will make an important addition to 10.1.3 and surely save lots of folks, including me,  countless hours of trying to track this down and get it resolved.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12374337" author="kmarsden" created="Thu, 13 Apr 2006 22:23:15 +0100"  >&lt;p&gt;reclosing this issue after port to 10.1&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12500753">DERBY-5099</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12314882" name="clientSideTrace.txt" size="973710" author="bryanpendleton" created="Sat, 15 Oct 2005 01:03:59 +0100"/>
                            <attachment id="12314801" name="clientStack.txt" size="1399" author="bryanpendleton" created="Tue, 11 Oct 2005 07:52:54 +0100"/>
                            <attachment id="12323065" name="d614_a.diff" size="3208" author="bryanpendleton" created="Fri, 17 Feb 2006 03:35:01 +0000"/>
                            <attachment id="12323101" name="d614_a_with_close_stmts.diff" size="3255" author="bryanpendleton" created="Fri, 17 Feb 2006 14:27:59 +0000"/>
                            <attachment id="12315041" name="derby-614.zip" size="38367" author="bryanpendleton" created="Sat, 22 Oct 2005 07:34:24 +0100"/>
                            <attachment id="12325277" name="derby614_10_1.diff" size="40762" author="kmarsden" created="Thu, 13 Apr 2006 10:23:04 +0100"/>
                            <attachment id="12321115" name="derbynetclientmats_report.txt" size="14558" author="bryanpendleton" created="Mon, 5 Dec 2005 02:38:59 +0000"/>
                            <attachment id="12314802" name="query.txt" size="1026" author="bryanpendleton" created="Tue, 11 Oct 2005 07:58:32 +0100"/>
                            <attachment id="12314883" name="serverSideTrace.txt" size="538558" author="bryanpendleton" created="Sat, 15 Oct 2005 01:05:13 +0100"/>
                            <attachment id="12320887" name="spec.html" size="12827" author="bryanpendleton" created="Wed, 23 Nov 2005 09:29:26 +0000"/>
                            <attachment id="12321116" name="svn-diff-2005-12-04.txt" size="38997" author="bryanpendleton" created="Mon, 5 Dec 2005 10:42:58 +0000"/>
                            <attachment id="12321117" name="svn-status-2005-12-04.txt" size="887" author="bryanpendleton" created="Mon, 5 Dec 2005 10:42:58 +0000"/>
                            <attachment id="12314800" name="sysinfo.derby" size="1546" author="bryanpendleton" created="Tue, 11 Oct 2005 07:49:55 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Oct 2005 11:21:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22047</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0hgn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36647</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>