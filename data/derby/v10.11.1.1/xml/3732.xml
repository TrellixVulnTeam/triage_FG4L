<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3732/DERBY-3732.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3732] SQL Length function materializes BLOB  into memory</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3732</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Currently the SQL length function materializes the entire lob into memory. In SQLBinary.getLength() we have &lt;br/&gt;
public final int	getLength() throws StandardException&lt;br/&gt;
	{&lt;br/&gt;
		if (stream != null) &lt;/p&gt;
{

			if (streamValueLength != -1)
				return streamValueLength;
		}

&lt;p&gt;		return (getBytes() == null) ? 0 : getBytes().length;&lt;br/&gt;
	}&lt;br/&gt;
Which actually is doubly bad because we call getBytes twice and materialize it twice.&lt;br/&gt;
It would be good to read the length from the stream if available and otherwise stream the value to get the length, rather than materializing it into memory.&lt;/p&gt;

&lt;p&gt;To reproduce, run the attached repro.&lt;br/&gt;
java -Xmx16M  LengthLargeLob&lt;/p&gt;

&lt;p&gt;It gives an out of memory exception&lt;br/&gt;
Caused by: java.lang.OutOfMemoryError: Java heap space&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLBinary.readFromStream(SQLBinary.java:415)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLBinary.readExternal(SQLBinary.java:318)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLBinary.getValue(SQLBinary.java:220)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLBinary.getBytes(SQLBinary.java:210)&lt;br/&gt;
        at org.apache.derby.iapi.types.SQLBinary.getLength(SQLBinary.java:250)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BaseActivation.getDB2Length(BaseActivation.java:1684)&lt;br/&gt;
        at org.apache.derby.exe.acf81e0010x011axa317x5db8x0000003d9dc81.e1(Unknown Source)&lt;br/&gt;
        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:141)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ProjectRestrictResultSet.java:497)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:291)&lt;br/&gt;
        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:460)&lt;br/&gt;
        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:423)&lt;br/&gt;
        ... 2 more&lt;br/&gt;
[&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12398650">DERBY-3732</key>
            <summary>SQL Length function materializes BLOB  into memory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Jun 2008 00:18:02 +0100</created>
                <updated>Tue, 30 Jun 2009 17:02:50 +0100</updated>
                            <resolved>Thu, 3 Jul 2008 15:47:43 +0100</resolved>
                                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.3.3.1</fixVersion>
                    <fixVersion>10.4.2.0</fixVersion>
                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12606676" author="kristwaa" created="Fri, 20 Jun 2008 09:57:57 +0100"  >&lt;p&gt;Of course this bug should be fixed, but as Mike suggested in another Jira issue, I think it&apos;s time to look a bit closer on the code and see if we need a more thorough rewrite. The SQLXX classes themselves comes to mind, but we should also verify that there isn&apos;t a mismatch between what the SQLXX classes expect/assumes and what the store is capable of. Last, we also have a number of LOB specific classes on top.&lt;/p&gt;

&lt;p&gt;For instance, would it be wiser to more clearly separate code for LOBs from the smaller data types in the data type hierarchy?&lt;br/&gt;
I don&apos;t know the history of the code, but it might be problematic if the existing code was written with small data types in mind.&lt;/p&gt;

&lt;p&gt;There seems to be at least two separate issues:&lt;br/&gt;
 a) Materialization&lt;br/&gt;
 b) Stream handling&lt;/p&gt;

&lt;p&gt;As a sub point under b, I&apos;m also wondering why we don&apos;t encode stream length in the store stream and how hard it would be to fix this. One problem is that the space reserved for this purpose seems too limited.&lt;/p&gt;</comment>
                            <comment id="12606847" author="kmarsden" created="Fri, 20 Jun 2008 19:14:15 +0100"  >&lt;p&gt;One possible workaround is just to select the BLOB and call Blob.length().  worst case this call will  go through the entire stream without materializing.  When inserting the Blob, it is better to use the setBinaryStream call that takes length so that the length is stored in the stream and the call to Blob.length() willl be a lot faster.  See attached program LengthThruBlob. It needs Astream.java from the original repro zip file.&lt;/p&gt;</comment>
                            <comment id="12606869" author="kmarsden" created="Fri, 20 Jun 2008 20:29:49 +0100"  >&lt;p&gt;Looking at a possible quick fix approach as opposed to reworking the type code.&lt;/p&gt;

&lt;p&gt;If I insert the lob using length, I should have a streamValueLength available.  When we call getLength() stream is set but streamValueLength is not.  Below is the trace when the stream is set.   It seems to me readRecordFromArray should be able to tell the length and pass that to setStream().  Does that sound reasonable?&lt;/p&gt;

&lt;p&gt;	SQLBlob(SQLBinary).setStream(InputStream) line: 563	&lt;br/&gt;
	StoredPage.readRecordFromArray(Object[], int, int[], int[], ArrayInputStream, StoredRecordHeader, RecordHandle) line: 5592	&lt;br/&gt;
	StoredPage.restoreRecordFromSlot(int, Object[], FetchDescriptor, RecordHandle, StoredRecordHeader, boolean) line: 1497	&lt;br/&gt;
	StoredPage(BasePage).fetchFromSlot(RecordHandle, int, Object[], FetchDescriptor, boolean) line: 459	&lt;br/&gt;
	HeapScan(GenericScanController).fetchRows(DataValueDescriptor[][], RowLocation[], BackingStoreHashtable, long, int[]) line: 759	&lt;br/&gt;
	HeapScan.fetchNextGroup(DataValueDescriptor[][], RowLocation[]) line: 324	&lt;br/&gt;
	BulkTableScanResultSet.reloadArray() line: 327	&lt;br/&gt;
	BulkTableScanResultSet.getNextRowCore() line: 282	&lt;br/&gt;
	ProjectRestrictResultSet.getNextRowCore() line: 255	&lt;br/&gt;
	ProjectRestrictResultSet(BasicNoPutResultSetImpl).getNextRow() line: 460	&lt;br/&gt;
	EmbedResultSet40(EmbedResultSet).movePosition(int, int, String) line: 423	&lt;br/&gt;
	EmbedResultSet40(EmbedResultSet).next() line: 367	&lt;br/&gt;
	LengthLargeLob.main(String[]) line: 21	&lt;/p&gt;</comment>
                            <comment id="12607367" author="mikem" created="Mon, 23 Jun 2008 21:36:41 +0100"  >&lt;p&gt;&amp;gt;Looking at a possible quick fix approach as opposed to reworking the type code.&lt;/p&gt;

&lt;p&gt;&amp;gt;If I insert the lob using length, I should have a streamValueLength available. When we call &amp;gt;getLength() stream is set but streamValueLength is not. Below is the trace when the stream is &amp;gt;set. It seems to me readRecordFromArray should be able to tell the length and pass that to &amp;gt;setStream(). Does that sound reasonable? &lt;/p&gt;

&lt;p&gt;No I don&apos;t think this will work.  store does not really know anything about the stream, it basically&lt;br/&gt;
just knows that it is a &quot;long&quot; column which means that it was asked to store a column longer than a page.  And the current format for long column does not include any sort of length  encoding for the entire column.  It splits the long column into multiple pieces and links them and only maintains length of each link.  In the case of blob the type itself has the length encoding in the column itself.  The description of the encoding of this length is located in SQLBinary.java.&lt;/p&gt;

&lt;p&gt;What I think would be easiest  is that the getlength() call in SQLBinary could read the first few bytes and determine the length and then &quot;reset()&quot; the stream so that the other calls would be&lt;br/&gt;
unaffected.  Also depending on how the stream was stored there may not be a length in&lt;br/&gt;
the stream so get length would have to read all the stream and then again do the reset.  The&lt;br/&gt;
question is whether this reset is going to mess anything else up.  Doing it this way would&lt;br/&gt;
only cause overhead if getlength is called, rather than always reading it.  &lt;br/&gt;
SQLBinary.readBinaryLength() is the call that reads the length from inside the column at the&lt;br/&gt;
front of the stream.&lt;/p&gt;</comment>
                            <comment id="12607377" author="kmarsden" created="Mon, 23 Jun 2008 21:52:27 +0100"  >&lt;p&gt;Here is a first effort at fixing this in SQLBinary.getLength(). &lt;br/&gt;
If  there is a stream, but it doesn&apos;t have the length it will read the length and return it if non-zero.  Otherwise it will loop through the entire stream to get the length.  Finally it will reset the stream. This seems to work for data inserted both with and without length.&lt;/p&gt;

&lt;p&gt;I still need to run tests and add tests, but wanted to make sure I am the right track.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;</comment>
                            <comment id="12607390" author="mikem" created="Mon, 23 Jun 2008 22:47:05 +0100"  >&lt;p&gt;I think you are on right track.&lt;/p&gt;

&lt;p&gt;What I described should work for the behavior when getLength() is called on a datatype that&lt;br/&gt;
has been constructed by reading it out of the store.  But I think the generic type code also has&lt;br/&gt;
to worry about a datatype that is coming from a user and may be a stream.  I think that is&lt;br/&gt;
the &quot;magic&quot; of testing the type in the getValue() call.  I don&apos;t know if we can always &quot;reset&quot; a&lt;br/&gt;
stream from a user.  I don&apos;t know off hand if it is possible to force the code through that&lt;br/&gt;
path.  Is it better to get an I/O error on the call, or to sometimes be able to instantiate the&lt;br/&gt;
blob in memory and only get error if you run out memory?  &lt;/p&gt;

&lt;p&gt;longer term the reading of the whole stream to determine the length could be optimized if &lt;br/&gt;
the work could be pushed into the stream.  In the case of reading this data from store I think&lt;br/&gt;
the data is being read into the page cache page array, and then into a intermediate array&lt;br/&gt;
to implement the stream back to the user.  And now this is adding another level.  I wonder&lt;br/&gt;
if skip() will work rather than reading the actual bytes?&lt;/p&gt;

&lt;p&gt;one nit is that indentation doesn&apos;t look right for mixure of tabs/spaces.  &lt;/p&gt;
</comment>
                            <comment id="12607402" author="kmarsden" created="Mon, 23 Jun 2008 23:44:18 +0100"  >&lt;p&gt;Thanks Mike for looking at the preview patch.&lt;/p&gt;

&lt;p&gt;I don&apos;t know that we can use skip. The javadoc seems to indicate that skip might return -1 even if it hasn&apos;t reached the end of the stream.&lt;/p&gt;

&lt;p&gt;I am trying to get my head around your statement. &quot;But I think the generic type code also has to worry about a datatype that is coming from a user and may be a stream. &quot;&lt;br/&gt;
What user scenario is this?&lt;/p&gt;

&lt;p&gt;I think that probably the best thing to do is only pass through the new code if (stream instanceof Resetable), then the non-resetable stream will be materialized as beforek,&lt;br/&gt;
but again I&apos;d like to understand in what case that would occur. We do seem to cover the getValue() case where stream is not an instanceof FormatIdInputStream, so we must have a test case for it.&lt;/p&gt;

</comment>
                            <comment id="12607427" author="mikem" created="Tue, 24 Jun 2008 01:33:26 +0100"  >&lt;p&gt;The 2 cases I try to think about with stream/blobs/clobs are always the following:&lt;br/&gt;
1) The data is coming off the disk, through store as a stream, and back to user somehow&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ie. select&lt;br/&gt;
2) The data is coming from user to be put into store as a stream - ie. insert.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mostly the datatype code should not really care which of these 2 cases is in effect, but&lt;br/&gt;
I think Resetable is a case that matters.&lt;/p&gt;

&lt;p&gt;The case you are testing is #1, with getLength() being called by the query itself on a stream&lt;br/&gt;
created by the store.  That stream is always going to be a OverflowInputStream when it comes&lt;br/&gt;
out of store - does not matter what type.  But type code should not use that.  I think using&lt;br/&gt;
instanceof Resetable is the right thing.&lt;/p&gt;

&lt;p&gt;In case 2 embedded I think the stream may come directly from user - but I am not sure what&lt;br/&gt;
jdbc layer may do to it before it gets made into a SQLBinary.  A different case might be what&lt;br/&gt;
comes to the embedded engine after a stream gets sent in from a network client across drda&lt;br/&gt;
and then into the embedded engine.  In both of these cases I don&apos;t know if you can actually&lt;br/&gt;
get getLength() called, but I also don&apos;t think you can count on resetting the stream so seems &lt;br/&gt;
cleaner to leave the code as is for this case rather than have the code pretend it could handle it.  I don&apos;t really know a lot about case 2, so may be off track.  The fact that the stream has&lt;br/&gt;
the length encoding in it means that some derby code has already got involved and modified&lt;br/&gt;
the stream the user provided.  Maybe something like a query that cast a parameter into a blob and then called the&lt;br/&gt;
sql length function on that parameter and inserted the result into a table?&lt;/p&gt;

&lt;p&gt;I don&apos;t know if there are any other situations with streams available in the datatype  -&lt;br/&gt;
 maybe triggers? &lt;/p&gt;

&lt;p&gt;you probably should ignore the skip comment, better to get it right than worry about optimizing it.  Your fix should be way faster in case where length exists at front, and be way less memory intensive in the other case so a good incremental improvement.&lt;/p&gt;</comment>
                            <comment id="12607697" author="kmarsden" created="Tue, 24 Jun 2008 18:45:09 +0100"  >&lt;p&gt;I&apos;m not really sure the best way to test this.  Should I create a new LowMemTest and run it with 16M heap via the top level junit-all ant target?  This would mean it wouldn&apos;t get run  in suites.All.  Alternately I can just add tests to existing tests in suites.All and make sure we have coverage of the new code, but then it won&apos;t test for the memory usage explicitly.&lt;/p&gt;

&lt;p&gt;We have an existing test derbyStress.java which runs in the old suite which runs with 64MB but I want to run with less memory than that.&lt;/p&gt;</comment>
                            <comment id="12608007" author="knutanders" created="Wed, 25 Jun 2008 13:09:10 +0100"  >&lt;p&gt;&amp;gt; I don&apos;t know that we can use skip. The javadoc seems to indicate that skip might return -1 even if it hasn&apos;t reached the end of the stream.&lt;/p&gt;

&lt;p&gt;Could you point me to the javadoc that says skip() can return -1? I see that it can return 0, but I didn&apos;t find anything about returning negative values. &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#skip(long&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="12608010" author="knutanders" created="Wed, 25 Jun 2008 13:16:42 +0100"  >&lt;p&gt;&amp;gt; I&apos;m not really sure the best way to test this. Should I create a new&lt;br/&gt;
&amp;gt; LowMemTest and run it with 16M heap via the top level junit-all ant&lt;br/&gt;
&amp;gt; target? This would mean it wouldn&apos;t get run in&lt;br/&gt;
&amp;gt; suites.All. Alternately I can just add tests to existing tests in&lt;br/&gt;
&amp;gt; suites.All and make sure we have coverage of the new code, but then&lt;br/&gt;
&amp;gt; it won&apos;t test for the memory usage explicitly.&lt;/p&gt;

&lt;p&gt;What about a combination: Create a JUnit test in a separate suite and&lt;br/&gt;
add the suite to suites.All. Additionally, create an ant target that&lt;br/&gt;
runs the suite with a 16 MB heap. Then we get both the coverage and&lt;br/&gt;
the possibility to test the memory usage.&lt;/p&gt;</comment>
                            <comment id="12608013" author="kmarsden" created="Wed, 25 Jun 2008 13:22:01 +0100"  >&lt;p&gt;Sorry I misspoke.  I should have said it may return 0 even if the end of file has not been reached.&lt;/p&gt;</comment>
                            <comment id="12608171" author="kristwaa" created="Wed, 25 Jun 2008 21:00:15 +0100"  >&lt;p&gt;Most implementations are &quot;well behaved&quot; when it comes to skip. However, we have no guarantee of this.&lt;/p&gt;

&lt;p&gt;At least in some places in Derby, where skipping an exact amount of bytes (or until EOF ) is required, a skip-loop is used. If it returns 0 and there are more bytes missing, it is confirmed by calling read. If EOF is reached, it returns -1. If skip returned 0 because of internal buffering, read will return the next byte and probably refill the internal buffer.&lt;/p&gt;</comment>
                            <comment id="12608194" author="kmarsden" created="Wed, 25 Jun 2008 22:10:42 +0100"  >&lt;p&gt;The javadoc for skip says:&lt;/p&gt;

&lt;p&gt;&quot;The skip method of this class creates a byte array and then repeatedly reads into it until n bytes have been read or the end of the stream has been reached. &quot;&lt;/p&gt;

&lt;p&gt;Is there any reason that we should expect it to be faster than reading into our own buffer?&lt;/p&gt;
</comment>
                            <comment id="12608197" author="kmarsden" created="Wed, 25 Jun 2008 22:15:19 +0100"  >&lt;p&gt;Attached is a patch for this issue derby-3732_diff.txt which has the tests and as suggested adds both a junit-lowmem target as part of junit-all and runs the new memory._Suite as part of suites .All even though we don&apos;t have restricted memory.&lt;/p&gt;

&lt;p&gt;This solution does not use skip.  discussion is still ongoing about that.  I am running tests now, but am having I think unrelated problems running junit-all.  I&apos;ll post if I can&apos;t figure that out.&lt;/p&gt;</comment>
                            <comment id="12608387" author="kristwaa" created="Thu, 26 Jun 2008 12:11:49 +0100"  >&lt;p&gt;Regarding skip performance, I would say it&apos;s hard to tell.&lt;br/&gt;
The code in the JVM might be optimized and perform slightly better, even if it is using the same approach.&lt;br/&gt;
However, in some cases the stream implementation might be capable of skipping an amount of data a lot faster than reading it. One example might be streams from files, where a skip could in theory consist of just changing a pointer. ByteArrayInputStream also has its own implementation of skip, which doesn&apos;t use read.&lt;/p&gt;

&lt;p&gt;Only using read directly can result in loosing optimizations for some stream implementations.&lt;br/&gt;
Also note that the contracts are different for InputStream.skip and Reader.skip.&lt;/p&gt;


&lt;p&gt;For reference, here&apos;s an excerpt from Java SE 6 InputStream.skip JavaDoc:&lt;br/&gt;
&quot;Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.&quot;&lt;/p&gt;</comment>
                            <comment id="12608531" author="kmarsden" created="Thu, 26 Jun 2008 19:10:02 +0100"  >&lt;p&gt;Attached is a patch derby-3732_skip_diff.txt that uses skip. Please take a look.  I also upped the blob size to 18000000 in the test to make sure we had a bigger lob than we had memory allocated (16MB) for the junit-lowmem suite.   The new test takes 209 seconds to run on my machine which I hope is not too long of an addition to suites.All.  It only runs with jdk16 since we need to test length with lengthless insert.&lt;/p&gt;


</comment>
                            <comment id="12608545" author="mikem" created="Thu, 26 Jun 2008 19:54:53 +0100"  >&lt;p&gt;from review of  derby-3732_diff.txt&lt;/p&gt;

&lt;p&gt;Code changes look fine, seems like a safe incremental bug fix.  I would say it is ok for backport when ready.  &lt;br/&gt;
nit code comment - I would have broke the 2 exceptions to muliple lines to fit in 80 characters.&lt;/p&gt;

&lt;p&gt;test code comments (nothing to stop a checkin):&lt;br/&gt;
o While it probably works in the case of the test it is a bad paradigm to assume any ordering of rows in a &lt;br/&gt;
table without an order by.  Even insert order in general is not the guaranteed return order.  Simply fixed by adding&lt;br/&gt;
a key column to the base table and an order by.  I don&apos;t remember what we do with blobs to the sorter, so &lt;br/&gt;
adding an index may also avoid unwanted memory usage - not sure as the row count is so small it probably&lt;br/&gt;
fits in memory.&lt;br/&gt;
o Because of other bugs in the system I was a little worried about selecting length(b), b in same statement - I know&lt;br/&gt;
   there are bugs where selecting b, b results in the stream of one column affecting the other.   It might be nice to &lt;br/&gt;
   add a check that it also works if you select them separately.&lt;br/&gt;
o I always like to see in blob tests one other case.  You covered null, 0 length, and long.  It would be nice to cover&lt;br/&gt;
   short also (ie. some blob less than the size of a page - 1k is a safe choice).  Again from looking at code I don&apos;t&lt;br/&gt;
   think this is an issue but does cover the other case through the code (maybe 0 is good enough but seems worth&lt;br/&gt;
   checking it as a separate case).  &lt;br/&gt;
o can you explain the need for reflection code added to BaseTestCase? &lt;/p&gt;</comment>
                            <comment id="12608551" author="kmarsden" created="Thu, 26 Jun 2008 20:07:21 +0100"  >&lt;p&gt;Mike asked:&lt;br/&gt;
o can you explain the need for reflection code added to BaseTestCase?&lt;/p&gt;

&lt;p&gt;I pulled that method up from AllPackages.java so I could us it in memory._Suite(). &lt;br/&gt;
We need to add the test by reflection because it requires jdk 1.6 because we test lengthless setBinaryStream.&lt;br/&gt;
The test will be ignored lower jdk versions.&lt;/p&gt;</comment>
                            <comment id="12608552" author="mikem" created="Thu, 26 Jun 2008 20:08:13 +0100"  >&lt;p&gt;With respect to the skip discussion.  At least in the datatype case where the stream is coming out of store as part of a select then derby &quot;owns&quot; the skip code, and in that case there are array buffers sitting around which allow for &lt;br/&gt;
a very efficient skip.  The code has multiple classes built on top of each other but the interesting ones are:&lt;br/&gt;
OverflowInputStream.java (this is the key one - it is the type of stream store always returns for any long type)&lt;br/&gt;
BufferedByteHolderInputStream.java&lt;br/&gt;
ByteHolder.java&lt;br/&gt;
ByteHolderInputStream.java&lt;/p&gt;

&lt;p&gt;With more work we could do an even better job of this scan for length, but I think it would take some interface&lt;br/&gt;
changes.   The current code I think will read the disk bytes to the buffer manager bytes, and then copy the &lt;br/&gt;
buffer manager bytes to a private array and then skip those bytes.  Logically no need to copy the bytes if we know&lt;br/&gt;
that we are just going to skip them - but would take some code and maybe some interface change.  Probably&lt;br/&gt;
a better thing to work on would be to just always insure that the length is at the front of the blob.  I am going to &lt;br/&gt;
file a JIRA with some ideas on this.&lt;/p&gt;</comment>
                            <comment id="12608582" author="kmarsden" created="Thu, 26 Jun 2008 22:07:32 +0100"  >&lt;p&gt;Attached is a patch derby-3732_skip2_diff.txt that incorporates changes for Mike&apos;s comments.  I&apos;ll run tests again and check this in tomorrow if I don&apos;t hear back anything.  One thing to note is that adding a primary key column to the table did not cause sort avoidance and I got an out of memory error in the query with the order by.  I had to use an optimizer override to get it to use the index.  I think that&apos;s a bug. I will file one after I check this in and reference this test as the repro. &lt;/p&gt;
</comment>
                            <comment id="12608610" author="mikem" created="Thu, 26 Jun 2008 23:20:15 +0100"  >&lt;p&gt;derby-3732_skip2_diff.txt patch looks good to me, no more comments.&lt;/p&gt;

&lt;p&gt;I was surprised the sort avoidance did not work for such a simple query, probably bad costing on the sort side. &lt;br/&gt;
There are some problems with costing row size with rows that contain blobs.  &lt;/p&gt;</comment>
                            <comment id="12608707" author="kristwaa" created="Fri, 27 Jun 2008 10:22:26 +0100"  >&lt;p&gt;I had a look at &apos;derby-3732_skip2_diff.txt&apos; and have the following comments:&lt;br/&gt;
 a) Instead of using your own stream (Astream), can you use one of the existing streams for testing?&lt;br/&gt;
    Using a stream that only returns the same value over and over doesn&apos;t detect off-by-one errors or similar (which I introduced myself and had to debug as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3735&quot; title=&quot;Incorrect position calculation in PositionedStoreStream with read(byte[],...)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3735&quot;&gt;&lt;del&gt;DERBY-3735&lt;/del&gt;&lt;/a&gt;). The simplest one we have is LoopingAlphabetStream for lowercase modern Latin.&lt;/p&gt;

&lt;p&gt; b) When reading the data back, can we use a bigger buffer than 1000 bytes? This would speed up the test when run with the client driver. The max length for binary varchar is the maximum that can be transferred between the server and the client in one go with locators.&lt;/p&gt;

&lt;p&gt;Some tiny formatting nits for SQLBinary:&lt;br/&gt;
 1) Mix of tabs and spaces on line &quot;throwStreamingIOException(ioe);&quot;&lt;br/&gt;
 2) Trailing tab on &quot;byte[] bytes = getBytes();&quot;&lt;br/&gt;
 3) Last line of method &quot;throwStreamingIOException&quot; doesn&apos;t use tab for indent.&lt;/p&gt;


&lt;p&gt;thanks,&lt;/p&gt;</comment>
                            <comment id="12608733" author="knutanders" created="Fri, 27 Jun 2008 12:35:42 +0100"  >&lt;p&gt;Would it be possible to compile the test against 1.4, call the lengthless method with reflection and exclude the testBlobLengthWithLengthlessInsert test case if the method isn&apos;t available? Then the test cases that don&apos;t use it could run on lower Java versions.&lt;/p&gt;</comment>
                            <comment id="12608741" author="knutanders" created="Fri, 27 Jun 2008 12:57:48 +0100"  >&lt;p&gt;The setting of derby.storage.pageCacheSize will only be respected if the database is booted by that test. I see it is set to 100 when it&apos;s run as a separate test, but not when it&apos;s run as part of a larger suite.&lt;/p&gt;

&lt;p&gt;It would be good to document in a comment why the optimizer override is needed.&lt;/p&gt;

&lt;p&gt;I was going to suggest that we should call skip(Long.MAX_VALUE) instead of skip(Integer.MAX_VALUE), but then I saw that it would probably trigger a bug in ArrayInputStream.skip() (will log a separate bug for that).&lt;/p&gt;

&lt;p&gt;Tiny nit: testBlobLength(boolean) should be private so that it&apos;s clearer that it&apos;s not a top-level test case.&lt;/p&gt;</comment>
                            <comment id="12608879" author="kmarsden" created="Fri, 27 Jun 2008 19:29:32 +0100"  >&lt;p&gt;I tried switching over to reflection and running with  IBM and Sun  JDK 1.4.2  and get an OOM in client running with 16MB heap.  JDK 1.5 runs fine.  Embedded is also ok with JDK 1.4.2. I&apos;m investigating but if anyone knows of maybe some different behavior in client for JDK 1.4.2 that might cause this, let me know.&lt;/p&gt;


&lt;p&gt;1) testBlobLength(org.apache.derbyTesting.functionTests.tests.memory.BlobMemTest)java.lang.OutOfMemoryError:&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.get_VARCHAR_FOR_BIT_DATA(Cursor.java:647)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.getBytes(Cursor.java:1058)&lt;br/&gt;
        at org.apache.derby.client.am.CallableStatement.getBytesX(CallableStatement.java:676)&lt;br/&gt;
        at org.apache.derby.client.am.CallableLocatorProcedures.blobGetBytes(CallableLocatorProcedures.java:447)&lt;br/&gt;
        at org.apache.derby.client.am.BlobLocatorInputStream.readBytes(BlobLocatorInputStream.java:176)&lt;br/&gt;
        at org.apache.derby.client.am.BlobLocatorInputStream.read(BlobLocatorInputStream.java:135)&lt;br/&gt;
        at java.io.BufferedInputStream.read1(BufferedInputStream.java:237)&lt;br/&gt;
        at java.io.BufferedInputStream.read(BufferedInputStream.java:294)&lt;br/&gt;
        at java.io.FilterInputStream.read(FilterInputStream.java(Compiled Code))&lt;br/&gt;
        at org.apache.derby.client.am.CloseFilterInputStream.read(CloseFilterInputStream.java:79)&lt;br/&gt;
        at java.io.FilterInputStream.read(FilterInputStream.java:110)&lt;br/&gt;
        at org.apache.derby.client.am.CloseFilterInputStream.read(CloseFilterInputStream.java:65)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.memory.BlobMemTest.testBlobLength(BlobMemTest.java:124)&lt;br/&gt;
        at org.apache.derbyTesting.functionTests.tests.memory.BlobMemTest.testBlobLength(BlobMemTest.java:170)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:85)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:58)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java(Compiled Code))&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:104)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;br/&gt;
        at org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)&lt;br/&gt;
        at junit.extensions.TestDecorator.basicRun(TestDecorator.java:22)&lt;br/&gt;
        at junit.extensions.TestSetup$1.protect(TestSetup.java:19)&lt;br/&gt;
        at junit.extensions.TestSetup.run(TestSetup.java:23)&lt;/p&gt;</comment>
                            <comment id="12608900" author="kristwaa" created="Fri, 27 Jun 2008 21:01:18 +0100"  >&lt;p&gt;I don&apos;t have any details, but before you changed the Blob size in the test, I tried working with a 48 M Blob. It worked with Java SE 6, but garbage collection &quot;went crazy&quot; - i.e. a lot of time was being spent on gc and I think I saw like 12 000 collections or something. This happened during the client test.&lt;/p&gt;

&lt;p&gt;I tried to debug it quickly, but besides from noticing lots of rather small byte arrays I couldn&apos;t find anything. I was unable to trace the source of these arras during the little time I spent on the investigation.&lt;/p&gt;

&lt;p&gt;A few &quot;random ramblings&quot;:&lt;br/&gt;
How big is your page cache?&lt;br/&gt;
Also, unless you&apos;re already doing this, maybe it would make sense to run the client and the server in different JVM to better monitor the heap usage?&lt;br/&gt;
And what about the ant / junit things? Do they use much memory?&lt;/p&gt;</comment>
                            <comment id="12608927" author="kmarsden" created="Fri, 27 Jun 2008 22:54:44 +0100"  >&lt;p&gt;Thanks Knut, Kristian, and Mike for the reviews.&lt;/p&gt;

&lt;p&gt;Attached is a new patch derby-3732_skip3_diff.txt which incorporates all the review comments thus far except I am not quite sure what to do about the pageCacheSize not getting set if this test is not run as the first test.   It&apos;s not an issue with suites.All since the heap is large enough and for the junit-lowmem suite it is the first and only test, so works ok there too.&lt;/p&gt;

&lt;p&gt;The one outstanding issue is that the new test with 16MB heap runs out of memory in the client for jdk 1.4.2. It runs fine with jdk 1.5, so right now the lowmem suite does not run with jdk 1.4.2. The problem is in client and is related to retrieving the entire lob,  (not related to the length which is the focus of this issue.) I&apos;d like to go ahead and check in this change and deal with the jdk 1.4.2 out of memory issue separately.&lt;/p&gt;

&lt;p&gt;I&apos;m going to go ahead and run tests and checkin unless there are more comments.&lt;/p&gt;
</comment>
                            <comment id="12609290" author="kmarsden" created="Mon, 30 Jun 2008 17:46:36 +0100"  >&lt;p&gt;Committed revision 672818.  I will backport to 10.4 and 10.3 after the nightlies run cleanly.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12399203">DERBY-3741</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12384330" name="LengthLargeLob.zip" size="1268" author="kmarsden" created="Fri, 20 Jun 2008 00:18:51 +0100"/>
                            <attachment id="12384400" name="LengthThruBlob.java" size="873" author="kmarsden" created="Fri, 20 Jun 2008 19:14:14 +0100"/>
                            <attachment id="12384705" name="derby-3732_diff.txt" size="17264" author="kmarsden" created="Wed, 25 Jun 2008 22:15:19 +0100"/>
                            <attachment id="12384528" name="derby-3732_proto_diff.txt" size="1784" author="kmarsden" created="Mon, 23 Jun 2008 21:52:27 +0100"/>
                            <attachment id="12384792" name="derby-3732_skip2_diff.txt" size="19092" author="kmarsden" created="Thu, 26 Jun 2008 22:07:32 +0100"/>
                            <attachment id="12384871" name="derby-3732_skip3_diff.txt" size="14057" author="kmarsden" created="Fri, 27 Jun 2008 22:54:44 +0100"/>
                            <attachment id="12384775" name="derby-3732_skip_diff.txt" size="17756" author="kmarsden" created="Thu, 26 Jun 2008 19:10:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Jun 2008 08:57:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30975</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0unj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>38784</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>