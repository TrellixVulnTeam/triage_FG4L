<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:41:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3739/DERBY-3739.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3739] Skip and read methods in ArrayInputStream may overflow</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3739</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;If ArrayInputStream.skip() is called with a large value (like Long.MAX_VALUE) an internal calculation may overflow and cause unexpected results.&lt;/p&gt;

&lt;p&gt;It&apos;s the line which says&lt;/p&gt;

&lt;p&gt;    if ((position + count) &amp;gt; end) {&lt;/p&gt;

&lt;p&gt;that can overflow. If count (a long) is so big that position + count doesn&apos;t fit in a long, the condition will evaluate to false although it should have evaluated to true. Changing the condition to (count &amp;gt; end - position) will fix the problem. Alternatively, we could simplify the entire method body to:&lt;/p&gt;

&lt;p&gt;    count = Math.min(count, end - position);&lt;br/&gt;
    position += count;&lt;br/&gt;
    return count;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12399173">DERBY-3739</key>
            <summary>Skip and read methods in ArrayInputStream may overflow</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="knutanders">Knut Anders Hatlen</assignee>
                                    <reporter username="knutanders">Knut Anders Hatlen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 Jun 2008 15:29:31 +0100</created>
                <updated>Mon, 4 May 2009 19:22:37 +0100</updated>
                            <resolved>Thu, 3 Jul 2008 09:14:44 +0100</resolved>
                                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.1.1</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12609199" author="knutanders" created="Mon, 30 Jun 2008 11:13:52 +0100"  >&lt;p&gt;skip() also had a problem when the count argument was negative. According to the javadoc for InputStream.skip(), the return value should be 0 in that case and no bytes should be skipped, but ArrayInputStream&apos;s implementation would decrease the position pointer and return the negative number. The attached patch fixes both the overflow and the problem with a negative argument. skipBytes() has the same problems, so I made it forward calls to skip() in order to fix the problem there as well.&lt;/p&gt;

&lt;p&gt;I didn&apos;t find any way to trigger the bug from user code since none of the streams that are returned to the users are built on top of ArrayInputStream, as far as I could see. Still, I think it should follow the contract of InputStream so that it doesn&apos;t give us any unpleasant surprises if we start using ArrayInputStream in other ways than we currently do. Since I couldn&apos;t find a way to test this through JDBC or SQL, I created ArrayInputStreamTest which tests the class directly.&lt;/p&gt;

&lt;p&gt;I also noticed that read(byte[],int,int) and readFully(byte[],int,int) have similar issues. Will fix those in a separate patch.&lt;/p&gt;

&lt;p&gt;suites.All and derbyall ran cleanly with the patch.&lt;/p&gt;</comment>
                            <comment id="12609200" author="knutanders" created="Mon, 30 Jun 2008 11:19:06 +0100"  >&lt;p&gt;Updated summary to reflect that the issue doesn&apos;t only affect skip().&lt;/p&gt;</comment>
                            <comment id="12609496" author="knutanders" created="Tue, 1 Jul 2008 09:54:17 +0100"  >&lt;p&gt;Committed revision 673026.&lt;/p&gt;</comment>
                            <comment id="12610155" author="knutanders" created="Thu, 3 Jul 2008 09:11:29 +0100"  >&lt;p&gt;Here&apos;s a fix for read() and readFully(). I didn&apos;t add a test case, since it seems like the overflow only causes wrong results if the sum of the length of the stream and the length of the buffer we read into exceeds Integer.MAX_VALUE, &lt;b&gt;and&lt;/b&gt; the current position is near the end of the stream. Testing it requires a very big heap, in fact so big that we need a 64-bit JVM. I have tested it manually with the attached ReadOverflow.java (which throws ArrayIndexOutOfBoundsException without the fix and successfully reads 32K of data with the fix). Although the overflow is unlikely to ever cause any problems, the fix is simple and doesn&apos;t add any extra complexity or extra computation, so I think it would be good to fix it anyway.&lt;/p&gt;</comment>
                            <comment id="12610156" author="knutanders" created="Thu, 3 Jul 2008 09:14:44 +0100"  >&lt;p&gt;Committed revision 673610.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12385181" name="ReadOverflow.java" size="519" author="knutanders" created="Thu, 3 Jul 2008 09:11:29 +0100"/>
                            <attachment id="12385180" name="d3739-read.diff" size="1196" author="knutanders" created="Thu, 3 Jul 2008 09:11:29 +0100"/>
                            <attachment id="12384942" name="d3739-skip.diff" size="5914" author="knutanders" created="Mon, 30 Jun 2008 11:13:51 +0100"/>
                            <attachment id="12384943" name="d3739-skip.stat" size="233" author="knutanders" created="Mon, 30 Jun 2008 11:13:52 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23817</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0xi7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>39246</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>