<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:24:59 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-5248/DERBY-5248.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-5248] Java Process Crash Causes Corrupt DB</title>
                <link>https://issues.apache.org/jira/browse/DERBY-5248</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;During some crash tests on our product, we hit an issue where after a crash, the derby db is stuck in a corrupted state. The db fails to boot with the following error when started up with the debug jar:&lt;/p&gt;

&lt;p&gt;org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED incorrect deleted row count. Should be: 903, instead got: 902, maxSlot = 1255, recordCount = 1255 &lt;br/&gt;
at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) &lt;br/&gt;
at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.BasePage.internalNonDeletedRecordCount(BasePage.java:1432) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:488) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1370) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.PageBasicOperation.releaseResource(PageBasicOperation.java:195) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.releaseResource(PhysicalUndoOperation.java:177) &lt;br/&gt;
at org.apache.derby.impl.store.raw.log.FileLogger.undo(FileLogger.java:1055) &lt;br/&gt;
at org.apache.derby.impl.store.raw.xact.Xact.abort(Xact.java:952) &lt;br/&gt;
at org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(XactFactory.java:547) &lt;br/&gt;
at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:1229) &lt;br/&gt;
at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:749) &lt;br/&gt;
at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:177) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1816) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1682) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1560) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2697) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:385) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51) &lt;br/&gt;
at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) &lt;br/&gt;
at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) &lt;br/&gt;
at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144) &lt;br/&gt;
at java.sql.DriverManager.getConnection(DriverManager.java:582) &lt;br/&gt;
at java.sql.DriverManager.getConnection(DriverManager.java:154) &lt;br/&gt;
at OpenDerby.main(OpenDerby.java:17) &lt;br/&gt;
--------------- &lt;br/&gt;
Stack traces for all live threads: &lt;br/&gt;
Thread name=main id=1 priority=5 state=RUNNABLE isdaemon=false &lt;br/&gt;
java.lang.Thread.dumpThreads(Native Method) &lt;br/&gt;
java.lang.Thread.getAllStackTraces(Thread.java:1554) &lt;br/&gt;
org.apache.derby.shared.common.sanity.ThreadDump.getStackDumpString(ThreadDump.java:34) &lt;br/&gt;
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) &lt;br/&gt;
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) &lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) &lt;br/&gt;
java.lang.reflect.Method.invoke(Method.java:597) &lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure$1.run(AssertFailure.java:165) &lt;br/&gt;
java.security.AccessController.doPrivileged(Native Method) &lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure.dumpThreads(AssertFailure.java:159) &lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure.&amp;lt;init&amp;gt;(AssertFailure.java:72) &lt;br/&gt;
org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) &lt;br/&gt;
org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.BasePage.internalNonDeletedRecordCount(BasePage.java:1432) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:488) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1370) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.PageBasicOperation.releaseResource(PageBasicOperation.java:195) &lt;br/&gt;
org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.releaseResource(PhysicalUndoOperation.java:177) &lt;br/&gt;
org.apache.derby.impl.store.raw.log.FileLogger.undo(FileLogger.java:1055) &lt;br/&gt;
org.apache.derby.impl.store.raw.xact.Xact.abort(Xact.java:952) &lt;br/&gt;
org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(XactFactory.java:547) &lt;br/&gt;
org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:1229) &lt;br/&gt;
org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:749) &lt;br/&gt;
org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:177) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1816) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1682) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1560) &lt;br/&gt;
org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) &lt;br/&gt;
org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) &lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2697) &lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:385) &lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73) &lt;br/&gt;
org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51) &lt;br/&gt;
org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) &lt;br/&gt;
org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) &lt;br/&gt;
org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144) &lt;br/&gt;
java.sql.DriverManager.getConnection(DriverManager.java:582) &lt;br/&gt;
java.sql.DriverManager.getConnection(DriverManager.java:154) &lt;br/&gt;
OpenDerby.main(OpenDerby.java:17) &lt;/p&gt;

&lt;p&gt;Thread name=derby.rawStoreDaemon id=12 priority=5 state=TIMED_WAITING isdaemon=true &lt;br/&gt;
java.lang.Object.wait(Native Method) &lt;br/&gt;
org.apache.derby.impl.services.daemon.BasicDaemon.rest(BasicDaemon.java:576) &lt;br/&gt;
org.apache.derby.impl.services.daemon.BasicDaemon.run(BasicDaemon.java:390) &lt;br/&gt;
java.lang.Thread.run(Thread.java:680) &lt;/p&gt;

&lt;p&gt;Thread name=Finalizer id=3 priority=8 state=WAITING isdaemon=true &lt;br/&gt;
java.lang.Object.wait(Native Method) &lt;br/&gt;
java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:118) &lt;br/&gt;
java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:134) &lt;br/&gt;
java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159) &lt;/p&gt;

&lt;p&gt;Thread name=Reference Handler id=2 priority=10 state=WAITING isdaemon=true &lt;br/&gt;
java.lang.Object.wait(Native Method) &lt;br/&gt;
java.lang.Object.wait(Object.java:485) &lt;br/&gt;
java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116) &lt;/p&gt;

&lt;p&gt;Thread name=Signal Dispatcher id=6 priority=9 state=RUNNABLE isdaemon=true &lt;/p&gt;

&lt;p&gt;Thread name=Timer-0 id=10 priority=5 state=WAITING isdaemon=true &lt;br/&gt;
java.lang.Object.wait(Native Method) &lt;br/&gt;
java.lang.Object.wait(Object.java:485) &lt;br/&gt;
java.util.TimerThread.mainLoop(Timer.java:483) &lt;br/&gt;
java.util.TimerThread.run(Timer.java:462) &lt;/p&gt;


&lt;p&gt;--------------- &lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Failed to start database &apos;/Users/tim/Downloads/LinkedBlockingQueueCrashTest/objectdb/datadb&apos; with class loader sun.misc.Launcher$AppClassLoader@40affc70, see the next exception for details. &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:98) &lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) &lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:278) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2736) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(EmbedConnection.java:385) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(EmbedConnection30.java:73) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(EmbedConnection40.java:51) &lt;br/&gt;
at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70) &lt;br/&gt;
at org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:248) &lt;br/&gt;
at org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:144) &lt;br/&gt;
at java.sql.DriverManager.getConnection(DriverManager.java:582) &lt;br/&gt;
at java.sql.DriverManager.getConnection(DriverManager.java:154) &lt;br/&gt;
at OpenDerby.main(OpenDerby.java:17) &lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;/Users/tim/Downloads/LinkedBlockingQueueCrashTest/objectdb/datadb&apos; with class loader sun.misc.Launcher$AppClassLoader@40affc70, see the next exception for details. &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) &lt;br/&gt;
... 12 more &lt;br/&gt;
Caused by: java.sql.SQLException: Java exception: &apos;ASSERT FAILED incorrect deleted row count. Should be: 903, instead got: 902, maxSlot = 1255, recordCount = 1255: org.apache.derby.shared.common.sanity.AssertFailure&apos;. &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:45) &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:122) &lt;br/&gt;
at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71) &lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:142) &lt;br/&gt;
at org.apache.derby.impl.jdbc.Util.javaException(Util.java:299) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2732) &lt;br/&gt;
... 9 more &lt;br/&gt;
Caused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED incorrect deleted row count. Should be: 903, instead got: 902, maxSlot = 1255, recordCount = 1255 &lt;br/&gt;
at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162) &lt;br/&gt;
at org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.BasePage.internalNonDeletedRecordCount(BasePage.java:1432) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive(CachedPage.java:488) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive(StoredPage.java:1066) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.BasePage.unlatch(BasePage.java:1370) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.PageBasicOperation.releaseResource(PageBasicOperation.java:195) &lt;br/&gt;
at org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.releaseResource(PhysicalUndoOperation.java:177) &lt;br/&gt;
at org.apache.derby.impl.store.raw.log.FileLogger.undo(FileLogger.java:1055) &lt;br/&gt;
at org.apache.derby.impl.store.raw.xact.Xact.abort(Xact.java:952) &lt;br/&gt;
at org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(XactFactory.java:547) &lt;br/&gt;
at org.apache.derby.impl.store.raw.log.LogToFile.recover(LogToFile.java:1229) &lt;br/&gt;
at org.apache.derby.impl.store.raw.RawStore.boot(RawStore.java:339) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
at org.apache.derby.impl.store.access.RAMAccessManager.boot(RAMAccessManager.java:1019) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(BaseMonitor.java:531) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Monitor.java:427) &lt;br/&gt;
at org.apache.derby.impl.db.BasicDatabase.bootStore(BasicDatabase.java:749) &lt;br/&gt;
at org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:177) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1982) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1816) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(BaseMonitor.java:1682) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1560) &lt;br/&gt;
at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:979) &lt;br/&gt;
at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:550) &lt;br/&gt;
at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2697) &lt;br/&gt;
... 9 more &lt;/p&gt;

&lt;p&gt;It also fails with a slightly different error using the non-debug jar:&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.sql.SQLException: Failed to start database &apos;/Users/tim/Downloads/LinkedBlockingQueueCrashTest/objectdb/datadb&apos; with class loader sun.misc.Launcher$AppClassLoader@40affc70, see the next exception for details.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection30.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.EmbedConnection40.&amp;lt;init&amp;gt;(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)&lt;br/&gt;
	at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:582)&lt;br/&gt;
	at java.sql.DriverManager.getConnection(DriverManager.java:154)&lt;br/&gt;
	at OpenDerby.main(OpenDerby.java:16)&lt;br/&gt;
Caused by: java.sql.SQLException: Failed to start database &apos;/Users/tim/Downloads/LinkedBlockingQueueCrashTest/objectdb/datadb&apos; with class loader sun.misc.Launcher$AppClassLoader@40affc70, see the next exception for details.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	... 13 more&lt;br/&gt;
Caused by: java.sql.SQLException: An exception was thrown during transaction abort.&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)&lt;br/&gt;
	... 10 more&lt;br/&gt;
Caused by: ERROR XSTB0: An exception was thrown during transaction abort.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.Xact.abort(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)&lt;br/&gt;
	at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)&lt;br/&gt;
	... 10 more&lt;br/&gt;
Caused by: ERROR XSLA8: Cannot rollback transaction 10946, trying to compensate null operation with null&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.undo(Unknown Source)&lt;br/&gt;
	... 32 more&lt;br/&gt;
Caused by: ERROR XSLA1: Log Record has been sent to the stream, but it cannot be applied to the store (Object null).  This may cause recovery problems also.&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.xact.Xact.logAndUndo(Unknown Source)&lt;br/&gt;
	... 33 more&lt;br/&gt;
Caused by: ERROR XSDB0: Unexpected exception on in-memory page Page(1,Container(0, 1409))&lt;br/&gt;
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.StoredPage.storeRecord(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.PurgeOperation.undoMe(Unknown Source)&lt;br/&gt;
	at org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.doMe(Unknown Source)&lt;br/&gt;
	... 35 more&lt;/p&gt;

&lt;p&gt;I have the zipped up db that causes the problem. Will attach it to this bug report.&lt;/p&gt;
</description>
                <environment>Red Hat Enterprise Linux ES release 4 (Nahant Update 7)&lt;br/&gt;
java version &amp;quot;1.6.0_01&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.6.0_01-b06)&lt;br/&gt;
Java HotSpot(TM) Server VM (build 1.6.0_01-b06, mixed mode)&lt;br/&gt;
Derby 10.8.1.2</environment>
        <key id="12508493">DERBY-5248</key>
            <summary>Java Process Crash Causes Corrupt DB</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikem">Mike Matrigali</assignee>
                                    <reporter username="timwu">Tim Wu</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 May 2011 00:17:17 +0100</created>
                <updated>Mon, 17 Jun 2013 10:19:07 +0100</updated>
                            <resolved>Thu, 16 Feb 2012 14:07:35 +0000</resolved>
                                    <version>10.8.1.2</version>
                                    <fixVersion>10.8.2.2</fixVersion>
                                    <component>Store</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="13039999" author="dagw" created="Fri, 27 May 2011 01:03:32 +0100"  >&lt;p&gt;Tim on derby-user Thu, 26 May 2011 16:22:51 -0700 &amp;gt; Also double checked the disk on the machine where this failed, seemed healthy.&lt;/p&gt;</comment>
                            <comment id="13040012" author="timwu" created="Fri, 27 May 2011 01:44:34 +0100"  >&lt;p&gt;Also, neglected to mention that the crash test only involved killing the java process, and not pulling the power on the system. That should, in theory rule out disk write cache causing a problem.&lt;/p&gt;</comment>
                            <comment id="13040277" author="dagw" created="Fri, 27 May 2011 16:14:59 +0100"  >&lt;p&gt;I was able to reproduce the boot crash (first had to edit service.properties to set correct path to the logDevice) both insane and sane (debug) builds.&lt;/p&gt;</comment>
                            <comment id="13040299" author="dagw" created="Fri, 27 May 2011 17:00:55 +0100"  >&lt;p&gt;Using Rick&apos;s controlfilereader shows last check point is at instant 22156671. The is indeed the last check point I see in the logfile itself:&lt;/p&gt;

&lt;p&gt;&amp;lt;logInstant&amp;gt;&lt;br/&gt;
                &amp;lt;logFileNumber&amp;gt;1&amp;lt;/logFileNumber&amp;gt;&lt;br/&gt;
                &amp;lt;position&amp;gt;22156671&amp;lt;/position&amp;gt;&lt;br/&gt;
            &amp;lt;/logInstant&amp;gt;&lt;br/&gt;
            &amp;lt;logRecord&amp;gt;&lt;br/&gt;
                &amp;lt;formatableID&amp;gt;129&amp;lt;/formatableID&amp;gt;&lt;br/&gt;
                &amp;lt;groups hexvalue=&quot;100&quot;&amp;gt;&lt;br/&gt;
                    &amp;lt;flag&amp;gt;RAWSTORE&amp;lt;/flag&amp;gt;&lt;br/&gt;
                &amp;lt;/groups&amp;gt;&lt;br/&gt;
                &amp;lt;transactionID value=&quot;9150&quot;/&amp;gt;&lt;br/&gt;
                &amp;lt;operation type=&quot;org.apache.derby.impl.store.raw.log.CheckpointOperation&quot;/&amp;gt;&lt;br/&gt;
            &amp;lt;/logRecord&amp;gt;&lt;/p&gt;


&lt;p&gt;The last log record printed is 30696713, containing an EndTransaction record.&lt;/p&gt;

&lt;p&gt;Uploading the printed dumps of log.ctrl and log1.dat .&lt;/p&gt;</comment>
                            <comment id="13040309" author="dagw" created="Fri, 27 May 2011 17:21:10 +0100"  >&lt;p&gt;Running recovery with -Dderby.debug.true=LogTrace I see the last operations before the crash:&lt;/p&gt;

&lt;p&gt;:&lt;br/&gt;
DEBUG LogTrace OUTPUT: About to call undo(), transaction table =&lt;br/&gt;
**************************&lt;br/&gt;
org.apache.derby.impl.store.raw.xact.TransactionTable@a9255c&lt;br/&gt;
Transaction Table: size = 2 largestUpdateXactId = 10946&lt;br/&gt;
Xid=10946 gid=null firstLog=(1,30637908) lastLog=null transactionStatus=16 myxact=10944 update=true recovery=true prepare=false needExclusion=true&lt;br/&gt;
Xid=10945 gid=null firstLog=(1,30637791) lastLog=null transactionStatus=0 myxact=10944 update=true recovery=true prepare=false needExclusion=true&lt;br/&gt;
---------------------------&lt;br/&gt;
DEBUG LogTrace OUTPUT: In recovery undo, rollback inflight transactions&lt;br/&gt;
DEBUG LogTrace OUTPUT: &lt;br/&gt;
Undo transaction: 10946start at end of log stop at (1,30637908)&lt;br/&gt;
DEBUG LogTrace OUTPUT: Rollback log record at instant (1,30696447) : Page Operation: Page(1,Container(0, 1409)) pageVersion 27734 : Purge : 1 slots starting at 1 (recordId=8038)&lt;br/&gt;
DEBUG LogTrace OUTPUT: Write CLR: Xact: 10946clrinstant: (1,30696783) undoinstant (1,30696447)&lt;br/&gt;
:&lt;br/&gt;
:&lt;br/&gt;
DEBUG LogTrace OUTPUT: Rollback log record at instant (1,30638074) : Page Operation: Page(1,Container(0, 1409)) pageVersion 26835 : Purge : 1 slots starting at 925 (recordId=9123)&lt;br/&gt;
DEBUG LogTrace OUTPUT: Write CLR: Xact: 10946clrinstant: (1,30736339) undoinstant (1,30638074)&lt;/p&gt;

&lt;p&gt;DEBUG LogTrace OUTPUT: Rollback log record at instant (1,30638009) : Page Operation: Page(1,Container(0, 1409)) pageVersion 26834 : Purge : 1 slots starting at 926 (recordId=9124)&lt;br/&gt;
DEBUG LogTrace OUTPUT: Write CLR: Xact: 10946clrinstant: (1,30736383) undoinstant (1,30638009)&lt;/p&gt;

&lt;p&gt;DEBUG LogTrace OUTPUT: Rollback log record at instant (1,30637944) : Page Operation: Page(1,Container(0, 1409)) pageVersion 26833 : Purge : 1 slots starting at 928 (recordId=9126)&lt;br/&gt;
DEBUG LogTrace OUTPUT: Write CLR: Xact: 10946clrinstant: (1,30736427) undoinstant (1,30637944)&lt;/p&gt;

&lt;p&gt;Exception trace: &lt;br/&gt;
org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED incorrect deleted row count.  Should be: 903, instead got: 902, maxSlot = 1255, recordCount = 1255&lt;br/&gt;
:&lt;/p&gt;</comment>
                            <comment id="13040323" author="dagw" created="Fri, 27 May 2011 18:00:57 +0100"  >&lt;p&gt;Attached ij_recovery_log_trace.log.gz which shows all the trace I got when running ij with -Dderby.debug.true=LogTrace&lt;/p&gt;</comment>
                            <comment id="13040339" author="dagw" created="Fri, 27 May 2011 18:20:55 +0100"  >&lt;p&gt;Container 1409 (decimal) corresponds to data file c581.dat (hexadecimal). Uploading a verbose dump of that container as c581.dat.xml.gz&lt;/p&gt;</comment>
                            <comment id="13040343" author="mikem" created="Fri, 27 May 2011 18:24:15 +0100"  >&lt;p&gt;thanks for the info so far, I&apos;ll look at this.  At least in this case we are lucky that it seems like we have all of the log files, so should be&lt;br/&gt;
able to understand the history on this page.  If you run more tests could you add the following property which will insure that the sytem keeps&lt;br/&gt;
all log files even if they are not needed for recovery to help debug the problem:&lt;br/&gt;
derby.storage.keepTransactionLog=true&lt;/p&gt;

&lt;p&gt;Can you comment on how hard this is for you to reproduce, ie. every time after a few minutes, once out of N runs, ....&lt;/p&gt;

&lt;p&gt;Anything else you can share about your test would help.  Like it has N threads doing update/selects concurrently ...&lt;/p&gt;

&lt;p&gt;Can you tell us what linux filesytem you are using.&lt;/p&gt;

&lt;p&gt;Can you tell us at high level about the machine ie. N cores at N speed (just to understand concurrency of threads).  &lt;/p&gt;

&lt;p&gt;If it is not hard to reproduce on a fresh db, could you post a couple of more cases.  Without a test case sometimes it helps to see&lt;br/&gt;
what is similar in multiple different cases to guess at what the problem was.  In cases like this the problem is almost always not what&lt;br/&gt;
is breaking in the database provided, but something that went wrong on that page during the test and is just now being uncovered.&lt;/p&gt;</comment>
                            <comment id="13040378" author="timwu" created="Fri, 27 May 2011 19:49:39 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;To answer some of your questions&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It&apos;s pretty hard to reproduce, we have only been able to hit this problem once so far.&lt;/li&gt;
	&lt;li&gt;The number of threads will be between 4 and 6, the threads are all likely to be writing, either updating or inserting.&lt;/li&gt;
	&lt;li&gt;Filesystem is ext3&lt;/li&gt;
	&lt;li&gt;CPU is a dual-core AMD Opteron 246 (2ghz).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll let you know if we uncover any more info about the circumstances behind the failure.&lt;/p&gt;</comment>
                            <comment id="13040530" author="mikem" created="Sat, 28 May 2011 02:55:27 +0100"  >&lt;p&gt;Could you describe how exactly you kill the java process.  This version of Derby has had a lot of changes with interrupts so I am trying to see if those might be contributing.  &lt;/p&gt;</comment>
                            <comment id="13040694" author="timwu" created="Sun, 29 May 2011 00:07:58 +0100"  >&lt;p&gt;The separate process is started with Runtime.exec(), and the process is killed by calling the destroy() method on the result Process object. Looking around the net, seems like this might prevent shutdown hooks from getting called.&lt;/p&gt;</comment>
                            <comment id="13042327" author="mikem" created="Wed, 1 Jun 2011 19:00:09 +0100"  >&lt;p&gt;No matter how you stop derby, if the system is properly syncing data to disk as requested then derby should recover. Thanks for the info, as I am mostly just&lt;br/&gt;
trying to figure out how the timing has led to this issue.  I have a guess now and will post soon.&lt;/p&gt;</comment>
                            <comment id="13042354" author="mikem" created="Wed, 1 Jun 2011 19:39:45 +0100"  >&lt;p&gt;After pouring through the log records and what runs during recovery I have found at the following problem.  &lt;/p&gt;

&lt;p&gt;The problem occurs while backing a purge on a btree.  The normal place for this to happen would be by the background daemon doing post commit work,&lt;br/&gt;
although this work can fall back on the actual user thread for various reasons.  I can&apos;t tell from what I have exactly where the purges came from.  I do know&lt;br/&gt;
the purges are space reclamation and not splits because they are all one row at a time.   The actual problem is proper undo requires that the system always&lt;br/&gt;
insure that there will be enough space to do the undo.  In this case there is not enough space and the application of the undo actually trashes the page by&lt;br/&gt;
the data of the row which grows from the front of page backward overwriting the slot table which grows from the back of the page toward the top.  &lt;/p&gt;

&lt;p&gt;The problem set of log records is evident from the last few records in the log:&lt;/p&gt;

&lt;p&gt;... many records leading to the end&lt;br/&gt;
 10946 : Page Op: Page(1,C(0, 1409)) pv 27734 : Purge : 1 slots  1 (recordId=8038) instant = (1,30696447) logEnd = (1,30696511)&lt;br/&gt;
 10944 : Page Op: Page(1,C(0, 1409)) pv 27735 : Insert :  Slot=352 recordId=9452 instant = (1,30696511) logEnd = (1,30696580)&lt;br/&gt;
 10944 : Page Op: Page(2,C(0, 1168)) pv 6403 : Update  Slot=5 recordId=11 instant = (1,30696580) logEnd = (1,30696713)&lt;br/&gt;
 10944 : EndXact null Committed : transactionStatus =  Committed instant = (1,30696713) logEnd = (1,30696746)&lt;br/&gt;
DEBUG LogTrace OUTPUT: detected zapped log end on log file 1 end marker at 30696746 real end at 134217728^M&lt;br/&gt;
DEBUG LogTrace OUTPUT: C:\tmp&amp;#95;t\objectdb\log\log2.dat does not exist^M&lt;/p&gt;

&lt;p&gt;The problem is that transaction 10946 purges a row from page 1 which actually removes the bytes from the page and then before that transaction&lt;br/&gt;
commits and or aborts transaction 10944 inserts a row on page 1 and commits.  There never is an abort or commit in the log for the purge indicating&lt;br/&gt;
that the test crash happened before the commit could be made.  Because undo always requires space be available purges should always be &lt;br/&gt;
committed/aborted before allowing any other access to page.  Note the heap code does this correctly by not releasing the latch explicitly but instead&lt;br/&gt;
leaving it latched and letting commit unlatch it with the following code segment, it may&lt;br/&gt;
be a little harder in btree due to the datastructures:&lt;br/&gt;
 // If no purge happened on the page and the page is not&lt;br/&gt;
 // removed, feel free to unlatch it.  Otherwise, let&lt;br/&gt;
 // transaction commit take care of it.&lt;br/&gt;
 if (!purgingDone)&lt;/p&gt;
 {
     page.unlatch();
     page = null;
 }

&lt;p&gt;By code inspection I looked at btree post commit and there is a problem there which I logged as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt;.   I have been trying to reproduce this&lt;br/&gt;
with a real system but have not been able to so far.  The &quot;distance&quot; from the time the latch on page1 is released by the purge and the commit happens&lt;br/&gt;
is only a few instructions so I was surprised that it could be made to happen.  I did note however that for the bug to happen as we see in this&lt;br/&gt;
database we don&apos;t need the crash to happen exactly in these few instructions, only that another thread gets the latch on the page and does an insert&lt;br/&gt;
on the page before the commit.  This is because the internal transaction does a &quot;no sync&quot; commit for performance reasons, which only puts the&lt;br/&gt;
log record into the buffer.  A crash anytime before that buffer is written to disk by filling or by a real commit would leave the db in the state that it is.&lt;/p&gt;

&lt;p&gt;Some things that may be making this application more likely to hit this are:&lt;br/&gt;
o the btree index row is small so there are a lot of rows on page 1 of the index&lt;br/&gt;
o there seems to be a LOT of inserts and deletes on page 1 of the index&lt;br/&gt;
o The application has set a very large log buffer size - I didn&apos;t even know people were playing with this tuning option&lt;/p&gt;</comment>
                            <comment id="13050712" author="mikem" created="Thu, 16 Jun 2011 21:36:12 +0100"  >&lt;p&gt;Tim, do you have the ability to build your own version of 10.8 off of the branch?  If so could you do so and run your crash&lt;br/&gt;
tests against and report your results.  I am pretty confident that &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt; fixed the problem reported in this issue and &lt;br/&gt;
would like to close it.  If you can&apos;t build your own release there is a planned apache release later this year and we can &lt;br/&gt;
revisit it then.  &lt;/p&gt;

&lt;p&gt;I see that your testing has uncovered another problem and has been reported as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5281&quot; title=&quot;Derby DB Corrupt After Crash&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5281&quot;&gt;&lt;del&gt;DERBY-5281&lt;/del&gt;&lt;/a&gt;.  I will take a closer look at it, but&lt;br/&gt;
the stack trace that was posted indicates to me that it a completely different problem, so should be handled as a new and &lt;br/&gt;
separate issue as you have posted.&lt;/p&gt;</comment>
                            <comment id="13050734" author="timwu" created="Thu, 16 Jun 2011 22:14:02 +0100"  >&lt;p&gt;Yes, I&apos;ve built a 10.8 with the fix to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt; which is what we&apos;re currently using to run our tests. Haven&apos;t seen the above failure yet, will keep an eye out for it. The condition was fairly rare though, between the time I reported the failure, and switching out the derby jar for the one with the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt; fix, the error was not observed again.&lt;/p&gt;

&lt;p&gt;The testing that hit &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5281&quot; title=&quot;Derby DB Corrupt After Crash&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5281&quot;&gt;&lt;del&gt;DERBY-5281&lt;/del&gt;&lt;/a&gt; was already running with the &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt; fix, so I was pretty sure it was a different issue. Just the circumstances that led to the failure were similar so I mentioned this issue just in case they were related in some way.&lt;/p&gt;</comment>
                            <comment id="13098527" author="mikem" created="Wed, 7 Sep 2011 02:34:45 +0100"  >&lt;p&gt;It has been awhile, any luck reproducing this after taking the fixes for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5284&quot; title=&quot;A derby crash at exactly right time during a btree split can cause a corrupt db which can not be booted.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5284&quot;&gt;&lt;del&gt;DERBY-5284&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-5258&quot; title=&quot;btree post commit releases latch before committing/aborting purges, possibly allowing other operation on page&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-5258&quot;&gt;&lt;del&gt;DERBY-5258&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13209372" author="kmarsden" created="Thu, 16 Feb 2012 14:07:35 +0000"  >&lt;p&gt;We have not heard back from the user that this has occurred again since Mike&apos;s fix went in.  Assuming that fixed it and  resolving as fixed for now.  This issue can be reopened if it occurs again.&lt;/p&gt;</comment>
                            <comment id="13685130" author="knutanders" created="Mon, 17 Jun 2013 10:19:07 +0100"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;bulk update&amp;#93;&lt;/span&gt; Close all resolved issues that haven&apos;t been updated for more than one year.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12509006">DERBY-5258</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12509006">DERBY-5258</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12510769">DERBY-5284</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12510500">DERBY-5281</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12480674" name="c581.dat.xml.gz" size="12034" author="dagw" created="Fri, 27 May 2011 18:20:55 +0100"/>
                            <attachment id="12480670" name="ij_recovery_log_trace.log.gz" size="424452" author="dagw" created="Fri, 27 May 2011 18:00:57 +0100"/>
                            <attachment id="12480665" name="log.ctrl.xml" size="452" author="dagw" created="Fri, 27 May 2011 17:05:45 +0100"/>
                            <attachment id="12480664" name="log1.dat.xml.gz" size="1003193" author="dagw" created="Fri, 27 May 2011 17:05:45 +0100"/>
                            <attachment id="12480602" name="objectdb.zip" size="2685106" author="timwu" created="Fri, 27 May 2011 00:18:26 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10365"><![CDATA[Crash]]></customfieldvalue>
    <customfieldvalue key="10364"><![CDATA[Data corruption]]></customfieldvalue>
    <customfieldvalue key="10421"><![CDATA[Seen in production]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 27 May 2011 00:03:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>24734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0dzj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>36084</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>