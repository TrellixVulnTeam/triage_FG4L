<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:32:54 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-1478/DERBY-1478.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-1478] Add built in language based ordering and like processing to Derby</title>
                <link>https://issues.apache.org/jira/browse/DERBY-1478</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;It would be good for Derby to have built in Language based ordering based on locale specific Collator.&lt;/p&gt;

&lt;p&gt;Language based ordering is an important feature for international deployment.  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-533&quot; title=&quot;Re-enable national character datatypes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-533&quot;&gt;&lt;del&gt;DERBY-533&lt;/del&gt;&lt;/a&gt; offers one implementation option for this but according to the discussion in that issue National Character Types carry a fair amount of baggage with them especially in the form of concerns about conversion   to and from datetime and number types. Rick  mentioned SQL language for collations as an option for language based ordering. There may be other options too, but I thought it worthwhile to add an issue for the high level functional concern, so the best choice can be made for implementation without assuming that National Character Types is the only solution.&lt;/p&gt;

&lt;p&gt;For possible 10.1 workaround and examples see:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/db-derby/LanguageBasedOrdering&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/LanguageBasedOrdering&lt;/a&gt;&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12345445">DERBY-1478</key>
            <summary>Add built in language based ordering and like processing to Derby</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mamtas">Mamta A. Satoor</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Thu, 6 Jul 2006 06:43:26 +0100</created>
                <updated>Fri, 21 Jan 2011 18:16:55 +0000</updated>
                            <resolved>Tue, 29 Apr 2008 19:20:33 +0100</resolved>
                                    <version>10.1.2.1</version>
                                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>SQL</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                                                            <comments>
                            <comment id="12425855" author="kmarsden" created="Fri, 4 Aug 2006 21:57:22 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt; is a general request for built-in language based ordering and like processing for DERBY.  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-533&quot; title=&quot;Re-enable national character datatypes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-533&quot;&gt;&lt;del&gt;DERBY-533&lt;/del&gt;&lt;/a&gt; is one possible implementation.&lt;/p&gt;</comment>
                            <comment id="12458222" author="mamtas" created="Wed, 13 Dec 2006 18:26:36 +0000"  >&lt;p&gt;While researching the net on internationalization and localization, I found an excellent tutorial by Sun at &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/i18n/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://java.sun.com/docs/books/tutorial/i18n/index.html&lt;/a&gt; Anyone who wants to get familiarized with the concepts related to internationalization will benefit from this tutorial.&lt;/p&gt;</comment>
                            <comment id="12459997" author="mamtas" created="Wed, 20 Dec 2006 17:09:43 +0000"  >&lt;p&gt;I would like to propose a way for supporting locale sensitive data in Derby. Currently, upto Derby 10.2 release, the sorting for CHAR and VARCHAR data types is codepoint based (UNICODE). For someone looking for any locale specific collation, they can possibly write a couple functions as suggested by  &lt;a href=&quot;http://wiki.apache.org/db-derby/LanguageBasedOrdering&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/LanguageBasedOrdering&lt;/a&gt;, but that solution is not complete and not efficient (since functional indexes can&apos;t be defined in Derby). &lt;/p&gt;

&lt;p&gt;My proposal for Derby 10.3 is that a user would be able to specify an optional jdbc url attribute, called territoryBasedCollation, at the database create time and that attribute can be set to true or false. If the attribute is not specified or is set to false, then collation will continue to be codepoint based. But if the user specifies true for territoryBasedCollation, the collation will be based on language region specified by the exisiting Derby attribute called territory (territory=ll_CC) &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/ref/rrefattrib56769.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/ref/rrefattrib56769.html&lt;/a&gt;&lt;br/&gt;
If the territory attribute is not specified at the database create time, Derby 10.2 uses java,util.Locale.getDefault to determine the territory for the newly&lt;br/&gt;
created database.&lt;/p&gt;

&lt;p&gt;I am not planning to implement any collation support on any existing database, ie collation enabling will not be supported at the upgrade database time or on a pre-existing database. Those databases will continue to use codepoint based collation. I am proposing to implement the collation support only for new databases,&lt;/p&gt;

&lt;p&gt;The locale based ordering will impact operations that require returning the order of data. That includes&lt;br/&gt;
1)Comparison using comparison operators (&amp;lt;, &amp;gt;, =, IN, BETWEEN)&lt;br/&gt;
2)Statements that involve sorting (ORDER BY, GROUP BY, DISTINCT, MAX, and MIN)&lt;br/&gt;
3)Statements that use the LIKE keyword&lt;/p&gt;

&lt;p&gt;Derby already has lot of code for locale based ordering for disabled NATIONAL CHAR and NATIONAL VARCHAR datatypes. I hope to leverage highly on that code and see how it can be used for this project. Also, I am keeping a goal for myself to implement this in such a way that databases with codepoint based collation will not get penalized by the code for locale based collation.&lt;/p&gt;

&lt;p&gt;Other than finding a means of storing the territoryBasedCollation attribute from the url somewhere, I don&apos;t anticipate any other disk changes as part of this project.&lt;/p&gt;

&lt;p&gt;Please share if there are any comments. In the mean time, I will start looking at how to accept the new jdb url attribute in the create database url and how to store that attribute .&lt;/p&gt;</comment>
                            <comment id="12461778" author="djd" created="Tue, 2 Jan 2007 18:25:21 +0000"  >&lt;p&gt;Collations are generally described by the SQL standard (2003) section 4.2.6. That describes collation names and the ability to support named collations at various levels, such as per-schema and per-table. I think it would be good if your proposed scheme could integrate cleanly with the SQL standard mechanism should anyone decide to implement it in the future.&lt;/p&gt;

&lt;p&gt;So could the boolean JDBC atttribute territoryBasedCollation be instead replaced with a value based attribute (say &apos;collation&apos;) that took a name of a collation? Then the names of the collation could match the SQL standard, such as UCS_BASIC (I think) to represent the existing code point ordering. You could continue to support just two collations (UCS_BASIC) and the territory/locale based one, but the scheme could be expanded in the future to allow other schemes such as case insensitive collation.&lt;/p&gt;
</comment>
                            <comment id="12465212" author="djd" created="Tue, 16 Jan 2007 17:01:16 +0000"  >&lt;p&gt;I assume that this collation only applies to CHAR and VARCHAR types, would be good to state that in any functional spec/documentation.&lt;/p&gt;

&lt;p&gt;Will the system tables use the localized collation for their character types or continue to always use the unicode code point ordering regardless of any database defined collation? Currently the uppercasing of SQL statements and identifiers is fixed as English to avoid unexpected issues with other languages, it may be wise to take the same approach so that the system table behaviour is fixed. However that will introduce some issues as then comparing a system column against a user column or a constant must decide on a collation to use. On the other hand changing the collation for system tables may break builtin assumptions or JDBC contracts (e.g. order of JDBC database meta data).&lt;/p&gt;</comment>
                            <comment id="12469885" author="mamtas" created="Fri, 2 Feb 2007 21:49:47 +0000"  >&lt;p&gt;I have updated the functional spec based on some feedback from Dan. The changes to the spec in brief are,&lt;br/&gt;
a)The collation ordering will apply only to CHAR and VARCHAR types &lt;br/&gt;
2)The collation for system table will continue to be code point based no matter what collation user chooses for CHAR and VARCHAR types. &lt;br/&gt;
3)I will change the JDBC attribut to accept String values. This way, this feature can be expanded in future to support more variety of collations rather than just the code point based ordering and territory based ordering.&lt;/p&gt;

&lt;p&gt;The functional spec now looks as follows&lt;br/&gt;
I would like to propose a way for supporting locale sensitive data in Derby. Currently, upto Derby 10.2 release, the sorting for CHAR and VARCHAR data types is codepoint based (UNICODE). For someone looking for any locale specific collation, they can possibly write a couple functions as suggested by &lt;a href=&quot;http://wiki.apache.org/db-derby/LanguageBasedOrdering&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/LanguageBasedOrdering&lt;/a&gt;, but that solution is not complete and not efficient (since functional indexes can&apos;t be defined in Derby). &lt;/p&gt;

&lt;p&gt;My proposal for Derby 10.3 is that a user would be able to specify an optional JDBC url attribute, called collation, at the database create time and that attribute can be set to one of the following 2 values&lt;br/&gt;
1) UCS_BASIC (This means codepoint based collation. This will also be the default collation used by Derby if no collation attribute is specified on the JDBC url at the database create time. This collation is what Derby 10.2 and prior have supported) or &lt;br/&gt;
2)TERRITORY_BASED_COLLATION (the collation will be based on language region specified by the exisiting Derby attribute called territory (territory=ll_CC) &lt;a href=&quot;http://db.apache.org/derby/docs/10.2/ref/rrefattrib56769.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://db.apache.org/derby/docs/10.2/ref/rrefattrib56769.html&lt;/a&gt; If the territory attribute is not specified at the database create time, Derby 10.2 uses java.util.Locale.getDefault to determine the territory for the newly created database. Derby 10.3 will continue to use the same mecahnism to determine the territory.)&lt;/p&gt;

&lt;p&gt;The collation attribute will apply only for CHAR and VARCHAR datatypes defined in a user-defined table. System tables will continue to use codepoint based collation for it&apos;s CHAR and VARCHAR columns.&lt;/p&gt;

&lt;p&gt;This collation ordering will impact operations that require returning the order of data on CHAR and VARCHAR columns. That includes&lt;br/&gt;
1)Comparison using comparison operators (&amp;lt;, &amp;gt;, =, IN, BETWEEN)&lt;br/&gt;
2)Statements that involve sorting (ORDER BY, GROUP BY, DISTINCT, MAX, and MIN)&lt;br/&gt;
3)Statements that use the LIKE keyword&lt;/p&gt;

&lt;p&gt;Derby already has lot of code for locale based ordering for disabled NATIONAL CHAR and NATIONAL VARCHAR datatypes. I hope to leverage highly on that code and see how it can be used for this project. Also, I am keeping a goal for myself to implement this in such a way that databases with codepoint based collation will not get penalized by the code for locale based collation.&lt;/p&gt;

&lt;p&gt;I am not planning to implement any new collation support on any existing database, ie JDBC attribute collation will not be supported at the upgrade database time or on a pre-existing database. Those databases will continue to use codepoint based collation. I am proposing to implement the collation support only for new databases. &lt;/p&gt;

&lt;p&gt;Other than finding a means of storing the collation attribute from the JDBC url somewhere, I don&apos;t anticipate any other disk changes as part of this project.&lt;/p&gt;</comment>
                            <comment id="12470308" author="rhillegas" created="Mon, 5 Feb 2007 18:31:33 +0000"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;Thanks for taking on this task. This will be a very useful addition to Derby. I don&apos;t see a functional spec attached to this issue. Can you tell me where I can find the spec?&lt;/p&gt;

&lt;p&gt;I&apos;m confused about the distinction between the behavior of user-defined CHAR/VARCHAR and the behavior of CHAR/VARCHAR columns in system tables. I see that Dan raised this issue on January 16. As I read the code, it appears to me that sql identifiers are forced to upper case according to the rules of Locale.ENGLISH. I think this happens in SQLUtil.SQLToUpperCase(). I don&apos;t see anything in the SQL spec or in JDBC which gives a special place to that locale. The SQL spec is a bit hard to read, but I get the impression that identifiers are supposed to follow the same comparison rules (at least as far as equality is concerned) as other strings. That is least is how I follow the thread of citations starting in part 2 section 5.4 Syntax Rule 3. The JDBC metadata javadoc talks about sort order but, as far as I can see, does not specify what locale to use. I find it hard to believe that Locale.ENGLISH has been given a special place or that the metadata is supposed to sort in a different order from CHAR/VARCHAR. My personal feeling is that there will be a lot of special cases in the code if we have to use a different sort order for CHAR/VARCHAR depending on whether the strings come out of user or system tables. If we are going to make the two kinds of strings behave differently, I would like to understand more specifics on what problems are being solved and why we think this is the intention of our standards. Thanks.&lt;/p&gt;</comment>
                            <comment id="12470317" author="mamtas" created="Mon, 5 Feb 2007 19:12:21 +0000"  >&lt;p&gt;Rick, the latest functional spec is part of the Jira comment from me, dated Feb 2nd &apos;07. It starts after this line in the comment &quot;The functional spec now looks as follows &quot;. &lt;/p&gt;

&lt;p&gt;I think as more comments get added to this Jira entry, it will be hard to track down the functional spec in the Jira comments, so I will go ahead and attach it as a file to Jira entry for easier lookup.&lt;/p&gt;

&lt;p&gt;As for your specific questions about special treatement of ENGLISH locale, let me take some time in looking up the SQL spec and existing code to see why Derby might be using this for SQL identifiers. If somebody is aware of specific Derby/Cloudscape history behind SQLUtil.SQLToUpperCase(), then please share those.&lt;/p&gt;</comment>
                            <comment id="12470329" author="mamtas" created="Mon, 5 Feb 2007 19:48:04 +0000"  >&lt;p&gt;Attaching the functional spec as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;_FunctionalSpecV1.html &lt;/p&gt;</comment>
                            <comment id="12470603" author="mamtas" created="Tue, 6 Feb 2007 15:01:12 +0000"  >&lt;p&gt;Rick, I looked at SQL specification(Part 2) regarding SQL identifiers. For background, some general information on SQL identifiers from SQL spec if as follows&lt;br/&gt;
&amp;lt;Start of contents from SQL spec&amp;gt;&lt;br/&gt;
1)As per SQL specification Part 2, Section 4.2.4, the character repertoire for sql identifiers, SQL_IDENTIFIER, consists of  &amp;lt;SQL language character&amp;gt; Latin characters and digits,and all the other characters that the SQL-implementation supports for use in &amp;lt;regular identifier&amp;gt;. After this, everything else related to SQL_IDENTIFER character repertoire is defined as implementation-defined. To be specific, &lt;br/&gt;
2)Section 4.2.5, Character encoding form, Pg 22 says SQL_IDENTIFIER is an implementation-defined character encoding form. It is applicable to the SQL_IDENTIFIER character repertoire.&lt;br/&gt;
3)Section 4.2.6, Collation, Pg 23, says SQL_IDENTIFIER is an implementation-defined collation. It is applicable to the SQL_IDENTIFIER character repertoire.&lt;br/&gt;
4)And lastly, in Section 4.2.7, Character Sets, SQL_IDENTIFIER is a character set whose repertoire is SQL_IDENTIFIER and whose character encoding form is SQL_IDENTIFIER. The name of its default collation is SQL_IDENTIFIER.&lt;br/&gt;
5)Section 4.2.3.1, Pg 19, talks about case folding. &amp;lt;fold&amp;gt; is a pair of funtions for converting all the lower case and title case characters in a given string to upper case or all the upper case and title case characters to lower case. A lower case character is a character in the Unicode General Category class &quot;Ll&quot; and upper case character is a character in the Unicode General Category class &quot;Lu&quot;.&lt;br/&gt;
&amp;lt;End of contents from SQL spec&amp;gt;&lt;/p&gt;

&lt;p&gt;From the information above, we see that SQL specification leaves CEF and collation for SQL identifiers as implementation-defined but I donot see it saying specifically that case folding as implementation-defined. Even the section 4.2.3.1, Pg 19, second paragraph, talks about converting case in a generic manner in the context of UNICODE and not English locale.&lt;/p&gt;

&lt;p&gt;So, I am not sure why Derby/Cloudscape chose to use English locale to do case conversion of SQL identifiers. Derby&apos;s StringUtil class, where the SQL case conversion code lies, has following comment&lt;br/&gt;
	// The functions below are used for uppercasing SQL in a consistent manner.&lt;br/&gt;
	// Cloudscape will uppercase Turkish to the English locale to avoid i&lt;br/&gt;
	// uppercasing to an uppercase dotted i. In future versions, all &lt;br/&gt;
	// casing will be done in English.   The result will be that we will get&lt;br/&gt;
	// only the 1:1 mappings  in &lt;br/&gt;
	// &lt;a href=&quot;http://www.unicode.org/Public/3.0-Update1/UnicodeData-3.0.1.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.unicode.org/Public/3.0-Update1/UnicodeData-3.0.1.txt&lt;/a&gt;&lt;br/&gt;
	// and avoid the 1:n mappings in &lt;br/&gt;
	//&lt;a href=&quot;http://www.unicode.org/Public/3.0-Update1/SpecialCasing-3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.unicode.org/Public/3.0-Update1/SpecialCasing-3.txt&lt;/a&gt;&lt;br/&gt;
	// &lt;br/&gt;
	// Any SQL casing should use these functions&lt;/p&gt;

&lt;p&gt;Dan, you mentioned in one of your comments to this Jira entry that &quot;Currently the uppercasing of SQL statements and identifiers is fixed as English to avoid unexpected issue with other languages&quot;. Can you please explaing what you mean by unexpected issues? Is that the same reason for recommending same behavior for system tables?&lt;/p&gt;</comment>
                            <comment id="12470702" author="djd" created="Tue, 6 Feb 2007 19:27:52 +0000"  >&lt;p&gt;Mamta&amp;gt; Dan, you mentioned in one of your comments to this Jira entry that &quot;Currently the uppercasing of SQL statements and identifiers is fixed as English to avoid unexpected issue with other languages&quot;. Can you please explaing what you mean by unexpected issues? Is that the same reason for recommending same behavior for system tables?&lt;/p&gt;

&lt;p&gt;For the reasons you discovered in StringUtil and quoted above. The Turkish locale changes how a lower case i is upper-cased. Allowing the locale of the database engine to influence the casing of the identifiers can lead to the application having to have different versions of its SQL depending on the locale of the database or more likely, if the application developer is not aware of this issue, unexpected failures &lt;/p&gt;

&lt;p&gt;create table customer( id int)&lt;/p&gt;

&lt;p&gt;SELECT ID FROM CUSTOMER - will fail if upper casing of identifiers is Turkish.&lt;/p&gt;

&lt;p&gt;Yes, one could try to be consistent in the application, but the schema and application may be developed by different groups. The app developer may only learn of the schema through JDBC metadata thus only knowing that the column is called &apos;ID&apos;.&lt;/p&gt;</comment>
                            <comment id="12471023" author="rhillegas" created="Wed, 7 Feb 2007 16:41:41 +0000"  >&lt;p&gt;Thanks, Mamta and Dan, for clarifying what the SQL Standard says here and for spelling out the issues with our implementation. In order to support SQL collations in the future, we will need to be careful to design this so that it will be clear that the string columns in the system catalogs have a different collation than user-defined string columns.&lt;/p&gt;</comment>
                            <comment id="12471050" author="djd" created="Wed, 7 Feb 2007 18:01:22 +0000"  >&lt;p&gt;Agreed that careful design is needed, but there is nothing special about system columns.&lt;/p&gt;

&lt;p&gt;SQL supports schema specific collation, thus in the future Derby could support UNICODE collation in schema SALES and case insensitive collation in schema ENGINEERING. The different collation for system schemas is (should be)  just an instance of this (without the ability for the user to define schema specific collation).&lt;/p&gt;</comment>
                            <comment id="12471577" author="djd" created="Fri, 9 Feb 2007 03:44:52 +0000"  >&lt;p&gt;Having worked on the DatabaseMetaDataTest and Saurabh fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2259&quot; title=&quot;DatabaseMetaData.getTypeInfo() SEARCHABLE column returns incorrect information for types that cannot be searched.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2259&quot;&gt;&lt;del&gt;DERBY-2259&lt;/del&gt;&lt;/a&gt; I now think the collation needs to apply to all charactr types because CLOB and LONG VARCHAR can be used in a LIKE expression.&lt;/p&gt;</comment>
                            <comment id="12471733" author="mamtas" created="Fri, 9 Feb 2007 15:55:30 +0000"  >&lt;p&gt;Dan, can you share your thoughts on why recent work on DatabaseMetaDataTest and Saurabh fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2259&quot; title=&quot;DatabaseMetaData.getTypeInfo() SEARCHABLE column returns incorrect information for types that cannot be searched.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2259&quot;&gt;&lt;del&gt;DERBY-2259&lt;/del&gt;&lt;/a&gt; indicates that collation applies to all character datatypes? In the mean time, I will spend some time myself on the DatabaseMetaDataTest  and work done by Saurabh on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2259&quot; title=&quot;DatabaseMetaData.getTypeInfo() SEARCHABLE column returns incorrect information for types that cannot be searched.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2259&quot;&gt;&lt;del&gt;DERBY-2259&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12471752" author="mamtas" created="Fri, 9 Feb 2007 16:54:54 +0000"  >&lt;p&gt;Another issue I have been thinking about is what would happen when character type columns with different collation are compared. For instance&lt;br/&gt;
Let&apos;s say, a database is created to use a territory based collation for character types. And say there is a userSchema schema in that database which has a table tableInfo with column tablename defined as VARCHAR. This tableInfo.tablename will have territory based collation assoicated with it. And say this column is then compared with a VARCHAR column in SYS schema, then how will the comparison happen, since the 2 columns being compared have different collation associated with them? I haven&apos;t looked in SQL spec yet. Does anyone has any thoughts on this comparison?&lt;br/&gt;
select * from sys.systables and userSchema.tableInfo where systables.tablename = tableInfo,tablename&lt;/p&gt;</comment>
                            <comment id="12471767" author="rhillegas" created="Fri, 9 Feb 2007 17:36:27 +0000"  >&lt;p&gt;Hi Mamta,&lt;/p&gt;

&lt;p&gt;As I read part 2 of the SQL Standard, it looks like you need a CAST in order to compare 2 strings which have different collations bound to them. Both string operands must have the same collation--that is my reading of Syntax rule 3b in section 9.13. Sections 6.12 and 6.1 explain how to cast the operands so that you can compare them. I think you need to write an expression like this:&lt;/p&gt;

&lt;p&gt;   WHERE userStringCol = CAST ( systemStringCol AS VARCHAR COLLATE userStringColumnsCollation )&lt;/p&gt;

&lt;p&gt;Here&apos;s an example I googled up: &lt;a href=&quot;http://docs.openlinksw.com/virtuoso/sqlrefDATATYPES.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.openlinksw.com/virtuoso/sqlrefDATATYPES.html&lt;/a&gt;. Hope this helps.&lt;/p&gt;</comment>
                            <comment id="12472573" author="mamtas" created="Tue, 13 Feb 2007 08:39:38 +0000"  >&lt;p&gt;I looked through the DatabaseMetaDataTest and found that LONG VARCHAR and CLOB have DatabaseMetaData.typePredChar defined on them which means that a user can use WHERE...LIKE on such columns. Since one of the operations that is impacted by this Jira entry is LIKE comparison, LONG VARCHAR and CLOB will also need to be aware of their collation just like CHAR and VARCHAR. I will update the functional specification to include LONG VARCHAR and CLOB alongwith CHAR and VARCHAR. I am attaching version 2 of the functional spec based on these changes (&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;LanguageBasedOrdering\&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;_FunctionalSpecV2.html).&lt;/p&gt;</comment>
                            <comment id="12473529" author="mamtas" created="Thu, 15 Feb 2007 21:58:38 +0000"  >&lt;p&gt;Fixed the typo in the url that pointed to writing functions to achieve collation. The url &lt;a href=&quot;http://wiki.apache.org/db-derby/LanguageBasedOrdering&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/db-derby/LanguageBasedOrdering&lt;/a&gt; had a comma at the end and hence it won&apos;t find the page. &lt;/p&gt;</comment>
                            <comment id="12475634" author="mamtas" created="Sat, 24 Feb 2007 15:28:55 +0000"  >&lt;p&gt;Updated the functional spec with following changes and attached it as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;_FunctionalSpecV4.html&lt;/p&gt;

&lt;p&gt;1)The valid values for collation attributes are UCS_BASIC and TERRITORY_BASED&lt;br/&gt;
2)Updated the spec to say that collation attribute will be saved as a database property.&lt;/p&gt;</comment>
                            <comment id="12485250" author="bryanpendleton" created="Thu, 29 Mar 2007 17:54:31 +0100"  >&lt;p&gt;Do we envision using this feature to provide case-insensitive searching support? For example,&lt;br/&gt;
if I had a column in my database named &quot;STATE_NAME&quot;, and I wanted to set things up so&lt;br/&gt;
that &quot;WHERE STATE_NAME=&apos;New York&apos;&quot; and &quot;WHERE STATE_NAME=&apos;NEW YORK&apos;&quot; both&lt;br/&gt;
selected the same set of rows, could I use this collation feature to do that?&lt;/p&gt;
</comment>
                            <comment id="12485314" author="mamtas" created="Thu, 29 Mar 2007 20:26:39 +0100"  >&lt;p&gt;The code work that will go in for this feature can be extended by someone with the itch to provide case-insensitive search support. Currently, with this feature, the Collator will be determined by Derby code from the territory and it will be passed to Collator sensitive CHAR classes so that can do collation based on that. Somebody would need to do the coding work to get the correct Collator for case-insensitive search and pass that it to Collator sensitive CHAR classes.&lt;/p&gt;

&lt;p&gt;So, in short, at the end of this feature, an end user can&apos;t simply configure Derby to do case-insensitive search rather than territory based search. Some Derby coding will be required to enable case-insensitive search.&lt;/p&gt;</comment>
                            <comment id="12496806" author="mamtas" created="Fri, 18 May 2007 08:40:32 +0100"  >&lt;p&gt;Updated the functional spec to cover &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2669&quot; title=&quot;If no territory attribute is not specified at create database time, then we should ignore the collation attribute if specified.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2669&quot;&gt;&lt;del&gt;DERBY-2669&lt;/del&gt;&lt;/a&gt; which defines the behavior for the case where collation attribute is specified but no terriotry attribute is specified at the database create time.&lt;/p&gt;</comment>
                            <comment id="12497599" author="townsendmerino" created="Mon, 21 May 2007 22:57:02 +0100"  >&lt;p&gt;It would be fantastic if we could set the collation on a per-field basis, as in:&lt;br/&gt;
     alter table foo modify bar varchar(10) COLLATE latin1_bin ;&lt;br/&gt;
This way, wouldn&apos;t we be able to do a case-sensitive search for a field, even if we set a case-INsensitive collation for the database?  Let me know if I can help.&lt;/p&gt;
</comment>
                            <comment id="12497682" author="mamtas" created="Tue, 22 May 2007 04:11:22 +0100"  >&lt;p&gt;I agree that it will be pretty useful to provide collation on a per column basis. We probably should enter a new Jira entry for it for someone with itch to start looking at it.&lt;/p&gt;</comment>
                            <comment id="12506955" author="kmarsden" created="Thu, 21 Jun 2007 17:39:15 +0100"  >&lt;p&gt;Should there be a release note for this issue?&lt;/p&gt;</comment>
                            <comment id="12592865" author="kmarsden" created="Mon, 28 Apr 2008 19:21:17 +0100"  >&lt;p&gt;Can this issue be resolved?&lt;/p&gt;</comment>
                            <comment id="12593045" author="mamtas" created="Tue, 29 Apr 2008 17:24:25 +0100"  >&lt;p&gt;Kathey, the subtask  &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2876&quot; title=&quot;Ensure the DataTypeDescriptor.comparable() implements the correct rules for determing the collation to use.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2876&quot;&gt;&lt;del&gt;DERBY-2876&lt;/del&gt;&lt;/a&gt; is still open. Without &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2876&quot; title=&quot;Ensure the DataTypeDescriptor.comparable() implements the correct rules for determing the collation to use.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2876&quot;&gt;&lt;del&gt;DERBY-2876&lt;/del&gt;&lt;/a&gt;, Derby&apos;s implementation is a subset of SQL specification. The remaining SQL spec can be implemented as a new stand alone jira entry. I will go ahead and open a new independent jira entry for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2876&quot; title=&quot;Ensure the DataTypeDescriptor.comparable() implements the correct rules for determing the collation to use.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2876&quot;&gt;&lt;del&gt;DERBY-2876&lt;/del&gt;&lt;/a&gt; so I can go ahead close &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2876&quot; title=&quot;Ensure the DataTypeDescriptor.comparable() implements the correct rules for determing the collation to use.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2876&quot;&gt;&lt;del&gt;DERBY-2876&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12593074" author="mamtas" created="Tue, 29 Apr 2008 19:20:33 +0100"  >&lt;p&gt;I have created &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3651&quot; title=&quot;Current DataTypeDescriptor.comparable() is subset of SQL spec. Enhance it to fully implement SQL spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3651&quot;&gt;DERBY-3651&lt;/a&gt; (which is a jira entry for the subtask &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2876&quot; title=&quot;Ensure the DataTypeDescriptor.comparable() implements the correct rules for determing the collation to use.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2876&quot;&gt;&lt;del&gt;DERBY-2876&lt;/del&gt;&lt;/a&gt;). Will go ahead and close &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-1478&quot; title=&quot;Add built in language based ordering and like processing to Derby&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-1478&quot;&gt;&lt;del&gt;DERBY-1478&lt;/del&gt;&lt;/a&gt; now.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12314124">DERBY-554</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12362830">DERBY-2336</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12369649">DERBY-2669</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12374390">DERBY-2967</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12372240">DERBY-2863</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370553">DERBY-2731</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12372254">DERBY-2866</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12372511">DERBY-2879</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370479">DERBY-2725</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12372934">DERBY-2894</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12373148">DERBY-2909</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12373151">DERBY-2910</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12371778">DERBY-2831</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12369915">DERBY-2678</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12403094">DERBY-3854</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12313724">DERBY-533</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12369647">DERBY-2668</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370474">DERBY-2723</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12370475">DERBY-2724</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12350367" name="DERBY-1478_FunctionalSpecV1.html" size="4733" author="mamtas" created="Mon, 5 Feb 2007 19:48:03 +0000"/>
                            <attachment id="12351014" name="DERBY-1478_FunctionalSpecV2.html" size="5158" author="mamtas" created="Tue, 13 Feb 2007 08:39:38 +0000"/>
                            <attachment id="12351287" name="DERBY-1478_FunctionalSpecV3.html" size="5321" author="mamtas" created="Thu, 15 Feb 2007 21:58:37 +0000"/>
                            <attachment id="12351957" name="DERBY-1478_FunctionalSpecV4.html" size="5915" author="mamtas" created="Sat, 24 Feb 2007 15:28:55 +0000"/>
                            <attachment id="12357609" name="DERBY-1478_FunctionalSpecV5.html" size="6473" author="mamtas" created="Fri, 18 May 2007 08:40:32 +0100"/>
                    </attachments>
                <subtasks>
                            <subtask id="12362821">DERBY-2334</subtask>
                            <subtask id="12362828">DERBY-2335</subtask>
                            <subtask id="12362830">DERBY-2336</subtask>
                            <subtask id="12362948">DERBY-2340</subtask>
                            <subtask id="12363710">DERBY-2377</subtask>
                            <subtask id="12366919">DERBY-2537</subtask>
                            <subtask id="12367018">DERBY-2541</subtask>
                            <subtask id="12370337">DERBY-2703</subtask>
                            <subtask id="12370349">DERBY-2706</subtask>
                            <subtask id="12370359">DERBY-2710</subtask>
                            <subtask id="12370460">DERBY-2717</subtask>
                            <subtask id="12370951">DERBY-2765</subtask>
                            <subtask id="12372462">DERBY-2876</subtask>
                            <subtask id="12377132">DERBY-3034</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 13 Dec 2006 18:26:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30010</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0k1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37065</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            </customfields>
    </item>
</channel>
</rss>