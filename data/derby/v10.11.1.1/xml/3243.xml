<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:21:13 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3243/DERBY-3243.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3243] (jdbc net client) exception during normal iteration through &quot;ResultSet&quot; of &quot;select * from t&quot;</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3243</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;Thanks again to the DERBY developers.&lt;/p&gt;

&lt;p&gt;For my convenience I use the client/server variant of DERBY.  This is where the error occurs.  I have temporarily alleviated the problem for my case by using the embedded version.&lt;/p&gt;

&lt;p&gt;I&apos;m forced to use outlook and have built a program which siphons the messages into a derby database (phase 1 &amp;#8211; table has two varchar fields and a clob).  When reading them back (phase 2 &amp;#8211; simple select of all records in no particular order, all 3 attributes), it has developed an exception.  This is a result of data volume.  I have reduced the problem to a single demonstration program.&lt;/p&gt;

&lt;p&gt;This behaviour, and the fact that the error is not a &quot;DERBY Exception&quot;, but a proper exception coming back from the JDBC call, leads me to the diagnosis that it is a derby network client jdbc problem.&lt;/p&gt;

&lt;p&gt;The problem has been reproduced once by Bryan Pendleton: &lt;a href=&quot;http://www.nabble.com/IndexOutOfBoundsException-t4926228.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.nabble.com/IndexOutOfBoundsException-t4926228.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll try to attach the code &quot;error.java&quot;; it can also be found on: &lt;a href=&quot;http://www.os10000.net/error.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.os10000.net/error.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please use as follows:&lt;/p&gt;

&lt;p&gt;javac -classpath derby.jar:derbynet.jar error.java&lt;br/&gt;
java -cp .:derby.jar:derbynet.jar error&lt;/p&gt;

&lt;p&gt;It will create a directory &quot;test_db&quot; and fill it with approx 120mb data.&lt;br/&gt;
Then you will observe the failure. &lt;/p&gt;

&lt;p&gt;/* &lt;del&gt;&lt;b&gt;&lt;/del&gt; Mode:Java; c-basic-offset:8 &lt;del&gt;&lt;/b&gt;&lt;/del&gt; */&lt;/p&gt;

&lt;p&gt;// --------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;public class error {&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static final int port = 1527;&lt;br/&gt;
	public static final String host = &quot;127.0.0.1&quot;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void log(String x) &lt;/p&gt;
{ System.out.println(x); }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void log_stacktrace(Exception e) &lt;/p&gt;
{
                java.io.StringWriter sw = new java.io.StringWriter();
                java.io.PrintWriter pw = new java.io.PrintWriter(sw);
                e.printStackTrace(pw);
                log(sw.toString());
	}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void start_server() {&lt;br/&gt;
		try {&lt;br/&gt;
			org.apache.derby.drda.NetworkServerControl server =&lt;br/&gt;
				new org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName(host),port);&lt;br/&gt;
			server.start(null);&lt;br/&gt;
			try &lt;/p&gt;
{ java.lang.Thread.sleep(5000); }
&lt;p&gt; catch (Exception e) { };&lt;br/&gt;
			log(&quot;started DERBY on host &quot;&lt;ins&gt;host&lt;/ins&gt;&quot; port &quot;&lt;ins&gt;Integer.toString(port)&lt;/ins&gt;&quot;.&quot;);&lt;br/&gt;
		} catch (Exception e) &lt;/p&gt;
{
			log_stacktrace(e);
		}
&lt;p&gt;;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static java.sql.Connection con()&lt;br/&gt;
		throws java.sql.SQLException, java.lang.ClassNotFoundException &lt;/p&gt;
{
		Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);
		String x_dbse = &quot;test_db&quot;;
		String x_user = &quot;;user=os10000&quot;;
		String x_pass = &quot;;password=ding&quot;;
		String x_crte = &quot;;create=true&quot;;
		String x_msgs = &quot;;retrieveMessagesFromServerOnGetMessage=true&quot;;
		String connect = &quot;jdbc:derby://&quot;+host+&quot;:&quot;+port+&quot;/&quot;+x_dbse+x_user+x_crte+x_msgs;
		return java.sql.DriverManager.getConnection(connect);
	}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ----------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static String getclob(java.sql.Clob b) {&lt;br/&gt;
		java.io.CharArrayWriter caw = new java.io.CharArrayWriter();&lt;br/&gt;
		try {&lt;br/&gt;
			java.io.Reader rd = b.getCharacterStream();&lt;br/&gt;
			char cb[] = new char&lt;span class=&quot;error&quot;&gt;&amp;#91;4096&amp;#93;&lt;/span&gt;;&lt;br/&gt;
			int off=0, bts = rd.read(cb);&lt;br/&gt;
			while (bts&amp;gt;0) &lt;/p&gt;
{ caw.write(cb,off,bts); off+=bts; bts=rd.read(cb); }
&lt;p&gt;;&lt;br/&gt;
			rd.close();&lt;br/&gt;
		} catch(Exception e) {};&lt;br/&gt;
		String res = caw.toString();&lt;br/&gt;
		caw.close();&lt;br/&gt;
		return res;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ----------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static class myclob implements java.sql.Clob {&lt;br/&gt;
		String v;&lt;br/&gt;
		public myclob(String z) &lt;/p&gt;
{ v=z; }
&lt;p&gt;;&lt;br/&gt;
		public java.io.InputStream getAsciiStream() &lt;/p&gt;
{ return new java.io.ByteArrayInputStream(v.getBytes()); }
&lt;p&gt;;&lt;br/&gt;
		public java.io.Reader getCharacterStream() &lt;/p&gt;
{ return new java.io.CharArrayReader(v.toCharArray()); }
&lt;p&gt;;&lt;br/&gt;
		public String getSubString(long pos, int length) &lt;/p&gt;
{ return v.substring((int)pos,(int)(pos+length)); }
&lt;p&gt;;&lt;br/&gt;
		public long length() &lt;/p&gt;
{ return v.length(); }
&lt;p&gt;;&lt;br/&gt;
		public long position(java.sql.Clob pattern, long start) &lt;/p&gt;
{ return 0; };&lt;br/&gt;
	        public long position(String pattern, long start) { return 0; }
&lt;p&gt;;&lt;br/&gt;
		public java.io.OutputStream setAsciiStream(long pos) &lt;/p&gt;
{
			new java.sql.SQLException(&quot;setAsciiStream not implemented.&quot;); return null; }
&lt;p&gt;;&lt;br/&gt;
		public java.io.Writer setCharacterStream(long pos) &lt;/p&gt;
{
			new java.sql.SQLException(&quot;setCharacterStream not implemented.&quot;); return null; }
&lt;p&gt;;&lt;br/&gt;
		public int setString(long pos, String s) &lt;/p&gt;
{
			new java.sql.SQLException(&quot;setString not implemented.&quot;); return -1; };&lt;br/&gt;
		public int setString(long pos, String s, int offset, int len) {			new java.sql.SQLException(&quot;setString not implemented.&quot;); return -1; }
&lt;p&gt;;&lt;br/&gt;
		public void truncate(long len) &lt;/p&gt;
{
			new java.sql.SQLException(&quot;truncate not implemented.&quot;); }
&lt;p&gt;;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	public static java.sql.Clob putclob(String x) &lt;/p&gt;
{ return new myclob(x); }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static String getLob(java.sql.ResultSet rs, int arg)&lt;br/&gt;
		throws java.sql.SQLException &lt;/p&gt;
{ return getclob(rs.getClob(arg)); }
&lt;p&gt;;&lt;br/&gt;
	public static void setLob(java.sql.PreparedStatement ps, int arg, String val)&lt;br/&gt;
		throws java.sql.SQLException &lt;/p&gt;
{ ps.setClob(arg,putclob(val)); }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static String clean_string(String x) &lt;/p&gt;
{
		return x.replaceAll(&quot;[\0\r\\\\]&quot;,&quot;&quot;).replaceAll(&quot;&apos;&quot;,&quot;\\\&quot;&quot;).replaceAll(&quot;,+&quot;,&quot;,&quot;);
	}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static String make_string(int digits) {&lt;br/&gt;
		double dl = (Math.random()) * (Math.pow(10.0,digits*Math.random()));&lt;br/&gt;
		int len = (int) dl;&lt;br/&gt;
		byte buf[] = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;len&amp;#93;&lt;/span&gt;;&lt;br/&gt;
		while (len&amp;gt;0) &lt;/p&gt;
{
			double db = 256*Math.random();
			buf[--len] = (byte)db;
		}
&lt;p&gt;;&lt;br/&gt;
		return clean_string(new String(buf));&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void update(java.sql.Connection c, String cmd)&lt;br/&gt;
		throws java.sql.SQLException &lt;/p&gt;
{
		c.createStatement().execute(cmd);
	}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static final int entries=100000;&lt;/p&gt;

&lt;p&gt;	public static void fill_db(java.sql.Connection c)&lt;br/&gt;
		throws java.sql.SQLException {&lt;br/&gt;
		try &lt;/p&gt;
{ update(c,&quot;drop table mail_raw&quot;); }
&lt;p&gt; catch (Exception e) {};&lt;/p&gt;

&lt;p&gt;		try &lt;/p&gt;
{ update(c,&quot;create table mail_raw ( msg varchar(999), att varchar(100), val clob )&quot;); }
&lt;p&gt; &lt;br/&gt;
		catch (Exception e) &lt;/p&gt;
{ log_stacktrace(e); };&lt;br/&gt;
&lt;br/&gt;
		java.sql.PreparedStatement pstmt = null;&lt;br/&gt;
&lt;br/&gt;
		try { pstmt = c.prepareStatement(&quot;insert into mail_raw values ( ?, ?, ? )&quot;); }&lt;br/&gt;
		catch (Exception e) { log_stacktrace(e); }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;		for (int i=0; i&amp;lt;entries; i++) &lt;/p&gt;
{
			pstmt.setString(1,make_string(3));
			pstmt.setString(2,&quot;5 body&quot;);
			setLob(pstmt,3,make_string(4));
			pstmt.executeUpdate();
			if (i%100==0) log(&quot;step &quot;+i+&quot;/&quot;+entries);
		}
&lt;p&gt;;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void dump_db(java.sql.Connection c)&lt;br/&gt;
		throws java.sql.SQLException {&lt;br/&gt;
		log(&quot;performing dump.&quot;);&lt;br/&gt;
		java.sql.ResultSet rs = c.createStatement().executeQuery(&quot;select * from mail_raw&quot;);&lt;br/&gt;
		while (rs.next()) &lt;/p&gt;
{
			String msg = rs.getString(1);
			String att = rs.getString(2);
			String val = getLob(rs,3);
		}
&lt;p&gt;;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;	public static void main(String args[]) {&lt;br/&gt;
		start_server();&lt;br/&gt;
		try &lt;/p&gt;
{
			java.sql.Connection c = con();
			fill_db(c);
			dump_db(c);
		}
&lt;p&gt; catch (Exception e) &lt;/p&gt;
{ log_stacktrace(e); }
&lt;p&gt;;&lt;br/&gt;
	};&lt;/p&gt;

&lt;p&gt;	// ------------------------------------------------------------------------&lt;br/&gt;
};&lt;/p&gt;</description>
                <environment>------------------ Java Information ------------------&lt;br/&gt;
Java Version:    1.4.2_03&lt;br/&gt;
Java Vendor:     Sun Microsystems Inc.&lt;br/&gt;
Java home:       C:\Programme\Java\j2re1.4.2_03&lt;br/&gt;
Java classpath:  derbyclient.jar&lt;br/&gt;
OS name:         Windows XP&lt;br/&gt;
OS architecture: x86&lt;br/&gt;
OS version:      5.1&lt;br/&gt;
Java user name:  cbdqok&lt;br/&gt;
Java user home:  C:\Dokumente und Einstellungen\cbdqok&lt;br/&gt;
Java user dir:   D:\users\cbdqok\privat\osj\lib_derby_net\lib&lt;br/&gt;
java.specification.name: Java Platform API Specification&lt;br/&gt;
java.specification.version: 1.4&lt;br/&gt;
--------- Derby Information --------&lt;br/&gt;
JRE - JDBC: J2SE 1.4.2 - JDBC 3.0&lt;br/&gt;
[D:\users\cbdqok\privat\osj\lib_derby_net\lib\derbyclient.jar] 10.3.1.4 - (561794)&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
----------------- Locale Information -----------------&lt;br/&gt;
------------------------------------------------------&lt;br/&gt;
</environment>
        <key id="12383746">DERBY-3243</key>
            <summary>(jdbc net client) exception during normal iteration through &quot;ResultSet&quot; of &quot;select * from t&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kmarsden">Kathey Marsden</assignee>
                                    <reporter username="os10000">Oliver Seidel</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Dec 2007 19:02:25 +0000</created>
                <updated>Fri, 21 Jan 2011 17:51:10 +0000</updated>
                            <resolved>Tue, 5 Feb 2008 16:13:24 +0000</resolved>
                                    <version>10.3.2.1</version>
                                    <fixVersion>10.3.3.0</fixVersion>
                    <fixVersion>10.4.1.3</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12562143" author="kmarsden" created="Thu, 24 Jan 2008 17:45:22 +0000"  >&lt;p&gt;When I run the program at:&lt;a href=&quot;http://www.os10000.net/error.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.os10000.net/error.java&lt;/a&gt;  with trunk, 10.3.2.1, and 10.3.1.4 I get a different exception than the one reported:&lt;/p&gt;

&lt;p&gt;java.sql.SQLException: Insufficient data while reading from the network - expected a minimum of 6 bytes and received on&lt;br/&gt;
y -1 bytes.  The connection has been terminated.&lt;br/&gt;
        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:46)&lt;br/&gt;
        at org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:362)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:391)&lt;br/&gt;
        at error.fill_db(error.java:147)&lt;br/&gt;
        at error.main(error.java:171)&lt;br/&gt;
Caused by: org.apache.derby.client.am.DisconnectException: Insufficient data while reading from the network - expected&lt;br/&gt;
 minimum of 6 bytes and received only -1 bytes.  The connection has been terminated.&lt;br/&gt;
        at org.apache.derby.client.net.Reply.fill(Reply.java:195)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Reply.java:215)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.readDssHeader(Reply.java:317)&lt;br/&gt;
        at org.apache.derby.client.net.Reply.startSameIdChainParse(Reply.java:1147)&lt;br/&gt;
        at org.apache.derby.client.net.NetStatementReply.readExecute(NetStatementReply.java:69)&lt;br/&gt;
        at org.apache.derby.client.net.StatementReply.readExecute(StatementReply.java:55)&lt;br/&gt;
        at org.apache.derby.client.net.NetPreparedStatement.readExecute_(NetPreparedStatement.java:183)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.readExecute(PreparedStatement.java:1796)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.flowExecute(PreparedStatement.java:2116)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdateX(PreparedStatement.java:396)&lt;br/&gt;
        at org.apache.derby.client.am.PreparedStatement.executeUpdate(PreparedStatement.java:382)&lt;br/&gt;
        ... 2 more&lt;/p&gt;



&lt;p&gt;With 10.2.2.0 the program runs cleanly.  Marking as a regression.&lt;/p&gt;

</comment>
                            <comment id="12562255" author="kmarsden" created="Thu, 24 Jan 2008 22:19:55 +0000"  >&lt;p&gt;hmmm.. using the error.java attached to the original email thread I get the IndexOutOfBoundsException.&lt;br/&gt;
performing dump.&lt;br/&gt;
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0&lt;br/&gt;
        at java.util.ArrayList.RangeCheck(ArrayList.java:572)&lt;br/&gt;
        at java.util.ArrayList.get(ArrayList.java:347)&lt;br/&gt;
        at org.apache.derby.client.net.NetCursor.findExtdtaData(NetCursor.java:1049)&lt;br/&gt;
        at org.apache.derby.client.net.NetCursor.getClobColumn_(NetCursor.java:1122)&lt;br/&gt;
        at org.apache.derby.client.am.Cursor.getClob(Cursor.java:1187)&lt;br/&gt;
        at org.apache.derby.client.am.ResultSet.getClob(ResultSet.java:1259)&lt;br/&gt;
        at error.getLob(error.java:97)&lt;br/&gt;
        at error.dump_db(error.java:161)&lt;br/&gt;
        at error.main(error.java:172)&lt;/p&gt;</comment>
                            <comment id="12562325" author="kmarsden" created="Fri, 25 Jan 2008 01:17:08 +0000"  >&lt;p&gt;This regression was caused by the following change:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-2702&quot; title=&quot;Enable Clob locator support between NetworkServer and NetworkClient and modify tests that experience changed behaviour due to this(enabling Clob Locators).&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-2702&quot;&gt;&lt;del&gt;DERBY-2702&lt;/del&gt;&lt;/a&gt; Enable Clob locator support between NetworkServer and NetworkClient and modify tests that experience changed behaviour due to this(enabling Clob Locators).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=544481&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=rev&amp;amp;revision=544481&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contributed by V.Narayanan&lt;/p&gt;

&lt;p&gt;It was a small patch but enabled code from other Jira issues I think.&lt;/p&gt;


</comment>
                            <comment id="12562702" author="kmarsden" created="Fri, 25 Jan 2008 21:54:25 +0000"  >&lt;p&gt;At the root of this issue is this function in EmbedConnection.  We seem to increment this value for every lob value on the connection and then send it as a signed int which overflows at 32768, causing the high bit to be set and the client to think that it is getting a lob value instead of locator.&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Return the current locator value&lt;/li&gt;
	&lt;li&gt;@return an integer that represents the most recent locator value.&lt;br/&gt;
	*/&lt;br/&gt;
	private int getIncLOBKey() 
{
		return ++rootConnection.lobHMKey ;
	}&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I&apos;d appreciate input from the lob locator folks on what is the best course of action at this point.  Should we switch to sending by value when we reach this limit? As an aside, one thing I noticed is that lobHMKey actually never gets reset, even with EmbedConnection.clearLOBMapping() .  That would not help in this case however as we don&apos;t get a commit.&lt;/p&gt;
</comment>
                            <comment id="12562868" author="kmarsden" created="Sat, 26 Jan 2008 14:59:13 +0000"  >&lt;p&gt;Another thing I noticed when looking at this bug is that each lob is added to the HashMap twice. Once as a side effect of getObject and then again with a call to:&lt;br/&gt;
 int locator = database.getConnection().addLOBMapping(val);&lt;/p&gt;

&lt;p&gt;so the repro fails on row 16384 instead of 32768.&lt;/p&gt;</comment>
                            <comment id="12562915" author="kmarsden" created="Sat, 26 Jan 2008 20:40:38 +0000"  >&lt;p&gt;Attached is a patch to fix the double entry of lobs in the lob hashmap for network server.  We now store the locator in the lob so network server can retrieve it instead of doing a second store of the lob.  &lt;/p&gt;

&lt;p&gt;The test case still fails but retrieves double the number of rows before failing, so it does not fix the core bug.  I just thought I would fix this while it was in front of me.  I didn&apos;t add a functional test. I wasn&apos;t sure how appropriate it was to add a test with a table with 32K rows to the functional tests.&lt;/p&gt;

&lt;p&gt;The patch also resets the lob key on commit/rollback which will help prevent this bug from hitting upon retrieving 32K lobs even across transaction boundaries.&lt;/p&gt;

</comment>
                            <comment id="12562924" author="kmarsden" created="Sat, 26 Jan 2008 22:04:13 +0000"  >&lt;p&gt;partial patch available.&lt;/p&gt;</comment>
                            <comment id="12563132" author="knutanders" created="Mon, 28 Jan 2008 12:48:27 +0000"  >&lt;p&gt;Does the DRDA spec require that locators are two-byte integers, or could we use four bytes? Seems like we at least should make EmbedConnection.lobHMKey wrap around on the max value we are able to send over DRDA, and ensure that it doesn&apos;t go negative.&lt;/p&gt;

&lt;p&gt;I don&apos;t think resetting the lob key on commit/rollback works, as the client does not expect the keys to be reused. Old Clob/Blob objects on the client will then start returning data for the queries performed in the new transaction. I ran the code below to test it.&lt;/p&gt;

&lt;p&gt;----&lt;del&gt;8&amp;lt;&lt;/del&gt;----&lt;br/&gt;
import java.sql.*;&lt;/p&gt;

&lt;p&gt;public class ResetCounter {&lt;br/&gt;
    public static void main(String[] args) throws Exception &lt;/p&gt;
{
        Class.forName(&quot;org.apache.derby.jdbc.ClientDriver&quot;);
        Connection c = DriverManager.getConnection(
            &quot;jdbc:derby://localhost/db;create=true&quot;);

        Statement s1 = c.createStatement();
        ResultSet rs1 = s1.executeQuery(&quot;values cast(&apos;first&apos; as clob)&quot;);
        rs1.next();
        Clob first = rs1.getClob(1);
        rs1.close(); // auto-commit happens here

        Statement s2 = c.createStatement();
        ResultSet rs2 = s2.executeQuery(&quot;values cast(&apos;second&apos; as clob)&quot;);
        rs2.next();
        Clob second = rs2.getClob(1);

        System.out.println(&quot;1: &quot; + first.getSubString(1, 100)); // should fail
        System.out.println(&quot;2: &quot; + second.getSubString(1, 100));

        rs2.close();
    }
&lt;p&gt;}&lt;br/&gt;
----&lt;del&gt;&amp;gt;8&lt;/del&gt;----&lt;/p&gt;

&lt;p&gt;Without the patch, first.getSubString(1, 100) failed (correctly) because the transaction in which the Clob was created, had been committed. With the patch applied, it instead returned the data that the second transaction had retrieved.&lt;/p&gt;</comment>
                            <comment id="12563204" author="kmarsden" created="Mon, 28 Jan 2008 17:06:38 +0000"  >&lt;p&gt;Thanks Knut for looking at the patch and catching that resetting the lob key on commit/rollback doesn&apos;t work.  I will add your test to the regression test so we have a test for that.  It seems to me that we would have the same problem (albeit further removed) if we roll over the lob key at 32K.   I will look at the DRDA spec and see if there is an opportunity to send a larger value.&lt;/p&gt;

&lt;p&gt;I wonder if you had a chance to look at the rest of the patch to avoid storing the locator twice for each lob. Does that change look ok?&lt;/p&gt;
</comment>
                            <comment id="12563496" author="knutanders" created="Tue, 29 Jan 2008 12:41:10 +0000"  >&lt;p&gt;&amp;gt; It seems to me that we would have the same problem (albeit further removed) if we roll over the lob key at 32K. I will look at the DRDA spec and see if there is an opportunity to send a larger value.&lt;/p&gt;

&lt;p&gt;Yes, we would have the same problem. If we find a way to use e.g. 4-byte integers it would only manifest itself if someone retrieves a lob, keeps it while retrieving billions of other lobs in the same connection, and then tries to access the first lob. In that case, I think it&apos;s highly unlikely that someone will be bitten by it.&lt;/p&gt;

&lt;p&gt;I think the rest of the patch looks OK (except there&apos;s a typo in the javadoc for EmbedClob.getLocator(): loctor -&amp;gt; locator, and in EngineBlob/EngineClob: getLobLobMapping() -&amp;gt; getLOBMapping()).&lt;/p&gt;

&lt;p&gt;Do you think we should use getLocator() instead of addLOBMapping() in LobStoredProcedure.BLOBCREATELOCATOR() and CLOBCREATELOCATOR() as well? Seems like the Blobs/Clobs they create already have called addLOBMapping() in their constructors.&lt;/p&gt;

&lt;p&gt;Another thing I came to think about: Would it be better to remove addLOBMapping() from the constructors in EmbedBlob/EmbedClob and instead call it lazily from getLocator()? Something like:&lt;/p&gt;

&lt;p&gt;  public int getLocator() {&lt;br/&gt;
      if (locator == -1) &lt;/p&gt;
{
          locator = getEmbedConnection().addLOBMapping(this);
      }
&lt;p&gt;      return locator;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;Then we&apos;d also remove the overhead of maintaining the lob mapping in embedded mode.&lt;/p&gt;</comment>
                            <comment id="12563546" author="oysteing" created="Tue, 29 Jan 2008 15:13:31 +0000"  >&lt;p&gt;I have not time to look at the details of this problem today, but I&lt;br/&gt;
thought I would write up a few things based on what I remember from&lt;br/&gt;
reviewing this work.&lt;/p&gt;

&lt;p&gt;I am not sure if it is a good idea, but the locator mapping table is&lt;br/&gt;
used for two separate issues:&lt;/p&gt;

&lt;p&gt;  1. It used by the network server to store the mapping from locator&lt;br/&gt;
     by client to EmbedBlob/EmbedClob.  This is used by stored&lt;br/&gt;
     procedures that is called by the client for LOB operations.&lt;/p&gt;

&lt;p&gt;  2. It is used by the embedded driver to store references to LOB&lt;br/&gt;
     objects that due to their size temporarily spills to disk.  This&lt;br/&gt;
     is done so that the temporary files can be cleaned up on&lt;br/&gt;
     commit/rollback.&lt;/p&gt;

&lt;p&gt;To me it sounds like the item 2. is implemented so that all LOB&lt;br/&gt;
objects are stored in the mapping table, not just those that need&lt;br/&gt;
clean-up.  (I am guessing, I have not checked the code).  That would&lt;br/&gt;
make two entries for every client LOB.&lt;/p&gt;

&lt;p&gt;With respect to the wrapping locator generator, I think it should be&lt;br/&gt;
possible to reuse locators that have been released.  Hence, one way to&lt;br/&gt;
solve this is to start at 0 when it wraps, and iterate until an unused&lt;br/&gt;
locator is found.&lt;/p&gt;

</comment>
                            <comment id="12563552" author="kmarsden" created="Tue, 29 Jan 2008 15:34:50 +0000"  >&lt;p&gt;Oystein&lt;/p&gt;

&lt;p&gt;&amp;gt;With respect to the wrapping locator generator, I think it should be&lt;br/&gt;
&amp;gt;possible to reuse locators that have been released. Hence, one way to&lt;br/&gt;
&amp;gt;solve this is to start at 0 when it wraps, and iterate until an unused&lt;br/&gt;
&amp;gt;locator is found.&lt;/p&gt;

&lt;p&gt;Still the test case attached to this issue would fail as there are no calls to Clob.free() since it appears to be written against jdk1.5. The core problem is that we are limitted to 32K entries. I was looking at the spec at section 5.6.5.13 and if I read that correctly (which  perhaps I am not) we are limitted to 4 bytes for the locator.  I am not sure how to get around this hard limit.&lt;/p&gt;

</comment>
                            <comment id="12563563" author="knutanders" created="Tue, 29 Jan 2008 16:11:47 +0000"  >&lt;p&gt;&amp;gt; I was looking at the spec at section 5.6.5.13 and if I read that correctly (which perhaps I am not) we are limitted to 4 bytes for the locator. I am not sure how to get around this hard limit.&lt;/p&gt;

&lt;p&gt;I think you read it correctly (section 5.6.5 says bits 10-11 in lower box represent maximum length in bytes, not including length field or null indicator, and section 5.6.5.13 has the value 4 in bits 10-11). Note that with 4 bytes we are limited to ~4 billion entries (or ~2 billion if the sign bit is stripped off), not 32K. It&apos;s just that the current implementation only uses two bytes, hence the 32K limit.&lt;/p&gt;</comment>
                            <comment id="12563668" author="kmarsden" created="Tue, 29 Jan 2008 21:06:16 +0000"  >&lt;p&gt;Here is the patch to fix the double hashmap entries without resetting the lob key.  I plan to commit this tomorrow if I don&apos;t hear back.&lt;/p&gt;

&lt;p&gt;Kathey&lt;/p&gt;
</comment>
                            <comment id="12563767" author="kmarsden" created="Wed, 30 Jan 2008 00:59:46 +0000"  >&lt;p&gt;So we do send and receive a 4 byte int, but we have this check in the locator(int column) method of NetCursor which says the highest bit will be set if it is not a locator, but it is not the highest bit that we are checking, so we end up using only two bytes for our locator.&lt;/p&gt;

&lt;p&gt;Perhaps in the case of lob value we are reading the extended length indicator which will be 0x800x.  I&apos;m not sure if that&apos;s what&apos;s going on though.  I did try  against a 10.2 server to see if the check is necessary for sending lobs by value and found that indeed it is.&lt;/p&gt;

&lt;p&gt;Removing the check in 10.4 and just returning the locator gets us through the repro.&lt;/p&gt;

&lt;p&gt;It seems like maybe instead of this check we should be able to tell by the drda type whether we have a locator or a value.&lt;/p&gt;

&lt;p&gt; private int locator(int column)&lt;br/&gt;
    {&lt;br/&gt;
        int locator = get_INTEGER(column);&lt;br/&gt;
        // If Lob value was sent instead of locator, highest bit will be set&lt;br/&gt;
        // Zero is not a valid locator, it indicates a zero length value&lt;br/&gt;
        if (((locator &amp;amp; 0x8000) == 0x8000) || (locator == 0)) &lt;/p&gt;
{
            return Lob.INVALID_LOCATOR;
        }
&lt;p&gt; else &lt;/p&gt;
{
            return locator;
        }
&lt;p&gt;    }&lt;/p&gt;</comment>
                            <comment id="12563922" author="knutanders" created="Wed, 30 Jan 2008 09:32:20 +0000"  >&lt;p&gt;The new patch looks fine, but it still has the typos I mentioned in an earlier comment. It should also change LOBStoredProcedure.BLOBCREATELOCATOR and LOBStoredProcedure.CLOBCREATELOCATOR so that they use getLocator() instead of addLOBMapping().&lt;/p&gt;

&lt;p&gt;I think this change also means that addLOBMapping() should be removed from EngineConnection and BrokeredConnection, and made package private in the EmbedConnection class.&lt;/p&gt;

&lt;p&gt;It would also be good to make the locator field in EmbedBlob/EmbedClob final, so that we check on compile-time that it hasn&apos;t been forgotten in one of the constructors.&lt;/p&gt;</comment>
                            <comment id="12564031" author="oysteing" created="Wed, 30 Jan 2008 14:30:50 +0000"  >&lt;p&gt;I think part of the confusion here is that EmbedConnection#lobHashMap&lt;br/&gt;
is used for two separate purposes.  It was first added as a mechanism&lt;br/&gt;
for the NetworkServer to add locators mapping for locators that were&lt;br/&gt;
sent to the client.  This mechanism was intented to by driven by the&lt;br/&gt;
NetworkServer, but EmbedConnection is used for storage since it is&lt;br/&gt;
persistent across client requests.&lt;/p&gt;

&lt;p&gt;Later, the same hash map was used to store references to all internal&lt;br/&gt;
Lobs in order to be able to do clean-up at end of transaction.  (I was&lt;br/&gt;
wrong when I earlier wrote that this was really only needed for LOB&lt;br/&gt;
objects that had associated temporary files.  This mechanism is used&lt;br/&gt;
in order to invalidate any active LOB object at the end of&lt;br/&gt;
transaction.)&lt;/p&gt;

&lt;p&gt;There are other ways to achieve invalidation at end of transaction,&lt;br/&gt;
but as long as we are using the current mechanism, it will be&lt;br/&gt;
necessary to keep track of all active LOB objects of a connection.&lt;br/&gt;
Given that, it is not necessary for the network server to do its own&lt;br/&gt;
book-keeping.  Instead, it could rely on the embedded driver for this.&lt;br/&gt;
I think Kathey&apos;s patch is a step in the right direction here, but as&lt;br/&gt;
Knut Anders suggest I think we should go a step further and remove all&lt;br/&gt;
traces of how this is currently done by the network server.&lt;/p&gt;

&lt;p&gt;I also think that it would be better if this clean-up was tied to&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3354&quot; title=&quot;Select from large lob table with embedded gives OutOfMemoryError&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3354&quot;&gt;&lt;del&gt;DERBY-3354&lt;/del&gt;&lt;/a&gt; which I feel is more related.  Then this JIRA could focus&lt;br/&gt;
on the DRDA problems that causes the reported bug. (I will discuss&lt;br/&gt;
that issue in a separate comment.)&lt;/p&gt;</comment>
                            <comment id="12564040" author="oysteing" created="Wed, 30 Jan 2008 15:08:39 +0000"  >&lt;p&gt;The reasoning for the check in NetCursor#locator was to be able to&lt;br/&gt;
both handle pre-10.3 servers, and 10.3 servers running in soft-upgrade&lt;br/&gt;
mode, both which ignore requests for use of locators.  I guess the&lt;br/&gt;
first group could be handled by recognizing that the server is&lt;br/&gt;
pre-10.3, and it should also be possible to come up with a separate&lt;br/&gt;
mechanism to handle soft upgrade.  However, It would be even better if&lt;br/&gt;
one where able to communicate the type of each value dynamically, but&lt;br/&gt;
I were not able to determine how to do this with DRDA.  Does anybody&lt;br/&gt;
know? &lt;/p&gt;

&lt;p&gt;I think that when I added the code that checked whether a locator or&lt;br/&gt;
LOB had been sent, I thought that the when a LOB was sent, its column&lt;br/&gt;
position would contain the length of the LOB with the high-order bit&lt;br/&gt;
set.  However, it seems that what has originally been sent is not the&lt;br/&gt;
length of the LOB, but the length of the length field for the LOB, and&lt;br/&gt;
it is not the high-order bit that is set, but the high-order bit of&lt;br/&gt;
byte 3.  When Layer B streaming was added, it seems the length of the&lt;br/&gt;
length field was fixed at 4 bytes so that now the client will always&lt;br/&gt;
receive 0x8004 for non-zero length LOBs.&lt;/p&gt;

&lt;p&gt;I do not know whether the above is in accordance with the DRDA spec,&lt;br/&gt;
and it also seems that the client expect the high-order bit to be set when&lt;br/&gt;
the length is unknown.  From NetCursor#isNonTrivialDataLob:&lt;/p&gt;

&lt;p&gt;    // if the high-order bit is set, length is unknown -&amp;gt; set value to x&apos;FF..FF&apos;&lt;br/&gt;
    if (((dataBuffer_&lt;span class=&quot;error&quot;&gt;&amp;#91;position&amp;#93;&lt;/span&gt;) &amp;amp; 0x80) == 0x80) &lt;/p&gt;
{
        length = -1;
    }
&lt;p&gt; else {&lt;/p&gt;

&lt;p&gt;A quick, but dirty, way to fix the reported bug would be to make the&lt;br/&gt;
server skip 0x8004 when allocating locators, and make the client&lt;br/&gt;
check for this exact value when determining whether it has received a&lt;br/&gt;
locator or not.&lt;/p&gt;</comment>
                            <comment id="12564181" author="kmarsden" created="Wed, 30 Jan 2008 21:39:16 +0000"  >&lt;p&gt;Oystein asked:&lt;br/&gt;
&amp;gt;However, It would be even better if&lt;br/&gt;
&amp;gt;one where able to communicate the type of each value dynamically, but&lt;br/&gt;
&amp;gt;I were not able to determine how to do this with DRDA. Does anybody&lt;br/&gt;
know? &lt;/p&gt;

&lt;p&gt;I think that the sqlType that we send with the SQLDAGRP should be set to one of the following when we send by locator.&lt;br/&gt;
public	static final  int DB2_SQLTYPE_BLOB_LOCATOR = 960;    // BLOB locator&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_NBLOB_LOCATOR = 961;&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_CLOB_LOCATOR = 964;    // CLOB locator&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_NCLOB_LOCATOR = 965;&lt;/p&gt;

&lt;p&gt;Right now we always send one of these whether it is by locator or value.&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_BLOB = 404;        // BLOB&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_NBLOB = 405;&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_CLOB = 408;        // CLOB&lt;br/&gt;
	public	static final  int DB2_SQLTYPE_NCLOB = 409;&lt;/p&gt;

&lt;p&gt;If we send the specific SQL Type then the client should be able to branch its logic based on that.  There are issues of backward compatibility which would have to be dealt with, but it seems a better way for the client to figure out whether it is dealing with a locator or a value.&lt;/p&gt;

</comment>
                            <comment id="12564452" author="kmarsden" created="Thu, 31 Jan 2008 18:40:33 +0000"  >&lt;p&gt;Another long term drda solution might be Dynamic data format, described in section 7.8 of the drda manual.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3353&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3353&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Either this solution or branching based on the sqlType would mean version specific drda handling.  So I think I might pursue Oystein&apos;s suggestion for a quick fix and then more long term solutions can be pursued on the trunk.&lt;/p&gt;</comment>
                            <comment id="12564517" author="kmarsden" created="Thu, 31 Jan 2008 21:50:20 +0000"  >&lt;p&gt;Attached is a patch which implements Oystein&apos;s suggestion to exclude the extended length value from being a valid locator value.  I had to exclude 0x8000, 0x8002, 0x8004, and 0x8008 as these are all possible valid values with 10.1.&lt;/p&gt;

&lt;p&gt;I tried the repro with the patch with various version combinations of 10.1, 10.2 and  trunk with the patch.&lt;br/&gt;
I am running tests now.&lt;/p&gt;</comment>
                            <comment id="12564539" author="knutanders" created="Thu, 31 Jan 2008 23:05:48 +0000"  >&lt;p&gt;For completeness, you may also want to skip all negative values and zero (the client only accepts positive locators). This only happens if you wrap around at ~2 billion, but with long-lived connections (for instance in a connection pool) it&apos;s possible. We&apos;re only talking about 68 lobs a second continuously for one year... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12564545" author="knutanders" created="Thu, 31 Jan 2008 23:20:01 +0000"  >&lt;p&gt;It would be good to expand the comment in getIncLOBKey() since this is quite ugly hack, and it won&apos;t be obvious to a reader why we skip those values. I propose something along these lines:&lt;/p&gt;

&lt;p&gt;// Skip 0x8000, 0x8002, 0x8004, 0x8006, for &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3243&quot; title=&quot;(jdbc net client) exception during normal iteration through &amp;quot;ResultSet&amp;quot; of &amp;quot;select * from t&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3243&quot;&gt;&lt;del&gt;DERBY-3243&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
// Earlier versions of the Derby Network Server (&amp;lt;10.3) didn&apos;t&lt;br/&gt;
// support locators and would send an extended length field&lt;br/&gt;
// with one of the above mentioned values instead of a&lt;br/&gt;
// locator, even when locators were requested. To enable the&lt;br/&gt;
// client driver to detect that locators aren&apos;t supported,&lt;br/&gt;
// we don&apos;t use any of them as locator values.&lt;/p&gt;</comment>
                            <comment id="12564843" author="kmarsden" created="Fri, 1 Feb 2008 17:48:37 +0000"  >&lt;p&gt;Attached is derby-3243_diff.txt addressing Knut&apos;s comments to skip negative and 0 locators.&lt;/p&gt;</comment>
                            <comment id="12565825" author="djd" created="Tue, 5 Feb 2008 17:26:58 +0000"  >&lt;p&gt;This is marked &apos;existing application impact&apos; but I don&apos;t see any reason why. Does the solution require some change to existing applications?&lt;/p&gt;</comment>
                            <comment id="12565840" author="kmarsden" created="Tue, 5 Feb 2008 18:13:12 +0000"  >&lt;p&gt;Unchecking Existing Application Impact. This fix does not require any action or have impact on existing applications.&lt;/p&gt;</comment>
                            <comment id="12566062" author="os10000" created="Wed, 6 Feb 2008 09:55:18 +0000"  >&lt;p&gt;Hello Daniel,&lt;/p&gt;

&lt;p&gt;thank you for all the effort.  I have opened the request when my&lt;br/&gt;
application &quot;outseeker&quot; (copies emails from MS Outlook into Derby)&lt;br/&gt;
stopped working beyond a certain message volume.  I was able to &quot;fix&quot;&lt;br/&gt;
the problem by moving to the embedded version, thereby reducing the&lt;br/&gt;
functionality (location independence) of my application.&lt;/p&gt;

&lt;p&gt;Similarly, I found &quot;critical&quot; to be a strong attribute, but reading&lt;br/&gt;
through the definitions convinced me that it fit the problem.&lt;/p&gt;

&lt;p&gt;I apologise if I did make a classification mistake.&lt;/p&gt;

&lt;p&gt;Best regards,&lt;/p&gt;

&lt;p&gt;Oliver Seidel&lt;/p&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3243?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12565825#action_12565825&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3243?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12565825#action_12565825&lt;/a&gt;&lt;br/&gt;
reason why.&lt;br/&gt;
&quot;ResultSet&quot; of&lt;br/&gt;
--------------------------------------------------------------------------------------------&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3243&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/DERBY-3243&lt;/a&gt;&lt;br/&gt;
------------------&lt;br/&gt;
10.3.1.4 -&lt;br/&gt;
is where&lt;br/&gt;
case by&lt;br/&gt;
messages&lt;br/&gt;
clob).&lt;br/&gt;
This is a&lt;br/&gt;
demonstration&lt;br/&gt;
Exception&quot;, but a&lt;br/&gt;
diagnosis that&lt;br/&gt;
data.&lt;br/&gt;
--------------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
java.io.StringWriter();&lt;br/&gt;
java.io.PrintWriter(sw);&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
org.apache.derby.drda.NetworkServerControl(java.net.InetAddress.getByName(host),port);&lt;br/&gt;
&quot;&lt;ins&gt;Integer.toString(port)&lt;/ins&gt;&quot;.&quot;);&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
----------------------------------------------------------------------&lt;br/&gt;
};&lt;br/&gt;
----------------------------------------------------------------------&lt;br/&gt;
0; };&lt;br/&gt;
0; };&lt;br/&gt;
return null;&lt;br/&gt;
return&lt;br/&gt;
-1; };&lt;br/&gt;
-1; };&lt;br/&gt;
myclob&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;; };&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
String&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
x.replaceAll(&quot;[\0\r\\\\]&quot;,&quot;&quot;).replaceAll(&quot;&apos;&quot;,&quot;\\\&quot;&quot;).replaceAll(&quot;,+&quot;,&quot;,&quot;);&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
(Math.pow(10.0,digits*Math.random()));&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
varchar(100),&lt;br/&gt;
?, ?&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
from&lt;br/&gt;
------------------------------------------------------------------------&lt;br/&gt;
------------------------------------------------------------------------&lt;/p&gt;


</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12387486">DERBY-3365</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12387658">DERBY-3377</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12370325">DERBY-2702</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12374506" name="derby-3243_diff.txt" size="2144" author="kmarsden" created="Thu, 31 Jan 2008 21:50:20 +0000"/>
                            <attachment id="12374569" name="derby-3243_diff2.txt" size="2998" author="kmarsden" created="Fri, 1 Feb 2008 17:48:36 +0000"/>
                            <attachment id="12374130" name="derby-3243_fix_double_hashmap_entry_diff.txt" size="6964" author="kmarsden" created="Sat, 26 Jan 2008 20:40:38 +0000"/>
                            <attachment id="12374292" name="derby-3243_fix_double_hashmap_entry_diff2.txt" size="8090" author="kmarsden" created="Tue, 29 Jan 2008 21:06:16 +0000"/>
                            <attachment id="12374131" name="derby-3243_fix_double_hashmap_entry_stat.txt" size="383" author="kmarsden" created="Sat, 26 Jan 2008 20:40:38 +0000"/>
                            <attachment id="12374507" name="derby-3243_stat.txt" size="131" author="kmarsden" created="Thu, 31 Jan 2008 21:50:20 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10420"><![CDATA[Regression]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Jan 2008 17:45:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23516</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10102"><![CDATA[Patch Available]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0lvb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37361</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10053"><![CDATA[Low]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>