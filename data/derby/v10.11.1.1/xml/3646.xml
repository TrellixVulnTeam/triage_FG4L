<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Sun May 17 03:27:12 UTC 2015

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/DERBY-3646/DERBY-3646.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[DERBY-3646] Embedded returns wrong results when selecting a blob column twice and using getBinaryStream()</title>
                <link>https://issues.apache.org/jira/browse/DERBY-3646</link>
                <project id="10594" key="DERBY">Derby</project>
                    <description>&lt;p&gt;The attached program DoubleSelect selects a blob column twice and tries to access the blob column with getBinaryStream.&lt;/p&gt;


&lt;p&gt;With embedded the output is:&lt;br/&gt;
4 5 6 7 8 9 10 11 12 13&lt;br/&gt;
14 15 16 17 18 19 20 21 22 23&lt;br/&gt;
I am done&lt;/p&gt;

&lt;p&gt;Two things seem to be happening with embedded.&lt;br/&gt;
1) Both getBinaryStream() calls are returning the same stream.&lt;br/&gt;
2) The second getBinaryStream() call throws away 4 bytes.&lt;/p&gt;


&lt;p&gt;With client the output is:&lt;br/&gt;
Exception in thread &quot;main&quot; java.io.IOException: The object is already&lt;br/&gt;
closed.&lt;br/&gt;
        at&lt;br/&gt;
org.apache.derby.client.am.CloseFilterInputStream.read(CloseFilterInputStream.java:50)&lt;br/&gt;
        at DoubleSelect.printNextTen(DoubleSelect.java:53)&lt;br/&gt;
        at DoubleSelect.main(DoubleSelect.java:43)&lt;br/&gt;
0 1 2 3 4 5 6 7 8 9&lt;br/&gt;
So with client it looks like the  second getBinaryStream() call closes&lt;br/&gt;
the first stream but then returns the right result for the second stream.&lt;/p&gt;

&lt;p&gt;Perhaps embedded should behave the same as client or perhaps the query should just work.  Regardless embedded should not return wrong results.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12394819">DERBY-3646</key>
            <summary>Embedded returns wrong results when selecting a blob column twice and using getBinaryStream()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dagw">Dag H. Wanvik</assignee>
                                    <reporter username="kmarsden">Kathey Marsden</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Apr 2008 16:56:53 +0100</created>
                <updated>Wed, 12 Jan 2011 22:24:21 +0000</updated>
                            <resolved>Mon, 12 Jul 2010 17:19:00 +0100</resolved>
                                    <version>10.1.3.1</version>
                    <version>10.2.2.0</version>
                    <version>10.3.3.0</version>
                    <version>10.4.1.3</version>
                    <version>10.5.1.1</version>
                                    <fixVersion>10.5.3.1</fixVersion>
                    <fixVersion>10.6.1.0</fixVersion>
                                    <component>JDBC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12592420" author="kmarsden" created="Fri, 25 Apr 2008 16:59:16 +0100"  >&lt;p&gt;This issue may be related to &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3645&quot; title=&quot;Insert into selecting BLOB column twice leads to SQLException: Restore of a serializable or SQLData object of class error selecting from the table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3645&quot;&gt;&lt;del&gt;DERBY-3645&lt;/del&gt;&lt;/a&gt; which is another case where we select a blob column twice.&lt;/p&gt;</comment>
                            <comment id="12592447" author="kmarsden" created="Fri, 25 Apr 2008 18:46:48 +0100"  >&lt;p&gt;With 10.1 client returns the right result for both columns&lt;br/&gt;
 java DoubleSelect client&lt;br/&gt;
Connection number: 1.&lt;br/&gt;
0 1 2 3 4 5 6 7 8 9&lt;br/&gt;
0 1 2 3 4 5 6 7 8 9&lt;br/&gt;
I am done&lt;/p&gt;

&lt;p&gt;10.2 forward throws the exception with client.&lt;/p&gt;

&lt;p&gt;The embedded behavior (wrong result) is the same for both 10.1 and 10.2&lt;/p&gt;</comment>
                            <comment id="12592788" author="kristwaa" created="Mon, 28 Apr 2008 12:24:08 +0100"  >&lt;p&gt;If I move the second getBinaryStream call down to after the printNextTen call, the client (10.4) prints the values 0 - 9 for both columns.&lt;br/&gt;
I guess this is the expected behavior?&lt;br/&gt;
Based on how the client closes the previous stream when getting a new one, I would say this behavior seems to be intended.&lt;/p&gt;

&lt;p&gt;The embedded driver (10.4), still prints the wrong values for the second column.&lt;/p&gt;</comment>
                            <comment id="12592793" author="kristwaa" created="Mon, 28 Apr 2008 13:04:21 +0100"  >&lt;p&gt;After a little investigation, I found out it is easy enough to make the embedded driver behave as the client driver.&lt;br/&gt;
I&apos;m not sure what is the best  exact implementation of the fix, which is currently a three line hack.&lt;br/&gt;
Before working further with that, I&apos;d like to see the community agree on what kind of behavior we want to allow.&lt;/p&gt;

&lt;p&gt;From what I have gathered, the spec doesn&apos;t really give anything concrete, but talks about what is recommended for maximum portability.&lt;/p&gt;

&lt;p&gt;Also, my first assessment is that it should be possible to allow almost anything, but that this can have significant performance implications (might include overhead for the simplest use cases as well).&lt;br/&gt;
For reference, I&apos;m listing some options, all with regard to the statement &quot;SELECT blobclolumn as b1, blobcolumn as b2 from blobtable&quot;.&lt;br/&gt;
The code examples are pseudo-JDBC/Java.&lt;/p&gt;

&lt;p&gt;a) Disallow selecting the same &lt;span class=&quot;error&quot;&gt;&amp;#91;Blob&amp;#93;&lt;/span&gt; column twice.&lt;br/&gt;
   Statement must be disallowed.&lt;/p&gt;

&lt;p&gt;b) Allow getting and processing a single stream in the order of the columns.&lt;br/&gt;
   streamB1 = rs.getBinaryStream(b1)&lt;br/&gt;
   processStream(streamB1)&lt;br/&gt;
   streamB2 = rs.getBinaryStream(b2) // streamB1 is automatically closed here&lt;br/&gt;
   processStream(streamB2)&lt;/p&gt;

&lt;p&gt;c) Allow getting and processing a single stream in any column order.&lt;br/&gt;
   streamB2 = rs.getBinaryStream(b2)&lt;br/&gt;
   processStream(streamB2)&lt;br/&gt;
   streamB1 = rs.getBinaryStream(b1) // streamB2 is automatically closed here&lt;br/&gt;
   processStream(streamB1)&lt;/p&gt;

&lt;p&gt;d) Allow getting and processing multiple streams in any order, but only once per column.&lt;br/&gt;
   streamB2 = rs.getBinaryStream(b2)&lt;br/&gt;
   streamB1 = rs.getBinaryStream(b1) // streamB2 is kept open&lt;br/&gt;
   processStream(streamB2)&lt;br/&gt;
   processStream(streamB1)&lt;/p&gt;

&lt;p&gt;e) Allow getting and processing mulitple streams in any order, multiple times per column.&lt;br/&gt;
   streamB2 = rs.getBinaryStream(b2)&lt;br/&gt;
   streamB1 = rs.getBinaryStream(b1) // streamB2 is kept open&lt;br/&gt;
   processStream(streamB2)&lt;br/&gt;
   streamB2seond = rs.getBinaryStream(b2)  // other streams are kept open&lt;br/&gt;
   processStream(streamB1)&lt;br/&gt;
   processStream(streamB2second)&lt;/p&gt;

&lt;p&gt;For options d and e, I expect the state of each stream (position, open/closed) to be independent of each other. Also, a stream returned from getBinaryStream should be positioned at the beginning of the data.&lt;/p&gt;

&lt;p&gt;There are plenty of things I haven&apos;t considered, so please comment on this!&lt;/p&gt;</comment>
                            <comment id="12592794" author="kmarsden" created="Mon, 28 Apr 2008 13:12:43 +0100"  >&lt;p&gt;In considering options, you may want to also look at &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3645&quot; title=&quot;Insert into selecting BLOB column twice leads to SQLException: Restore of a serializable or SQLData object of class error selecting from the table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3645&quot;&gt;&lt;del&gt;DERBY-3645&lt;/del&gt;&lt;/a&gt;, which would be handled by option a, but perhaps that is too restrictive.&lt;/p&gt;</comment>
                            <comment id="12723266" author="rhillegas" created="Tue, 23 Jun 2009 20:47:39 +0100"  >&lt;p&gt;My $0.02:&lt;/p&gt;

&lt;p&gt;(a) is non-ANSI/ISO behavior.&lt;/p&gt;

&lt;p&gt;(b) and (c) are quirky behaviors which will puzzle users.&lt;/p&gt;

&lt;p&gt;(d) is limited but probably easy to explain to users.&lt;/p&gt;

&lt;p&gt;(e) is fully functional and should be the ultimate goal.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
-Rick&lt;/p&gt;</comment>
                            <comment id="12728055" author="knutanders" created="Tue, 7 Jul 2009 13:14:06 +0100"  >&lt;p&gt;Triaged for 10.5.2.&lt;/p&gt;</comment>
                            <comment id="12832462" author="kristwaa" created="Thu, 11 Feb 2010 12:24:04 +0000"  >&lt;p&gt;There are a few extra pieces of information for this issue:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Dag discovered a problem with the repro and also a bug in Derby, see his comments on &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-447&quot; title=&quot;getBoolean() throws data conversion exception for DECIMAL type in J2ME/CDC/Foundation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-447&quot;&gt;&lt;del&gt;DERBY-447&lt;/del&gt;&lt;/a&gt; and the bug reported as &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4521&quot; title=&quot;Stream passed out to user does not heed close, allowing reads after next ResultSet#getXXX&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4521&quot;&gt;&lt;del&gt;DERBY-4521&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;wrt the list above Derby now allows items a, b, and c. I think options d and e are disallowed by JDBC and the following statement from the getBinaryStream JavaDoc:&lt;br/&gt;
    &quot;Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a getter method implicitly closes the stream. Also, a stream may return 0 when the method InputStream.available  is called whether there is data available or not.&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    I think we could implement d if we wanted to, and maybe even e - but the latter would probably come with a performance hit. Since JDBC seems to disallow these behaviors, disallowing them in Derby seems like a good approach to me.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-3844&quot; title=&quot;ASSERT failure in BasePage.unlatch() when running LobStreamsTest&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-3844&quot;&gt;&lt;del&gt;DERBY-3844&lt;/del&gt;&lt;/a&gt; patch 1a is committed, you are only allowed to call get&lt;span class=&quot;error&quot;&gt;&amp;#91;BC&amp;#93;&lt;/span&gt;lob once on a column per row. In this case the LOB object isn&apos;t closed / freed on the next getX-call.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fixed by the combination of &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4477&quot; title=&quot;Selecting / projecting a column whose value is represented by a stream more than once fails&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4477&quot;&gt;&lt;del&gt;DERBY-4477&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4520&quot; title=&quot;Refactor and extend data type cloning facilities&quot; class=&quot;issue-link&quot; data-issue-key=&quot;DERBY-4520&quot;&gt;&lt;del&gt;DERBY-4520&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Verified against trunk revision 980933, but it would be nice if the reporter verified the fix as well.&lt;/p&gt;

&lt;p&gt;I do not plan to back-port the fix(es) due to the rather signficant changes involved, but it may be technically possible. &lt;/p&gt;</comment>
                            <comment id="12884458" author="lilywei" created="Thu, 1 Jul 2010 23:11:55 +0100"  >&lt;p&gt;Reopen to 10.5 back port&lt;/p&gt;</comment>
                            <comment id="12886115" author="kmarsden" created="Wed, 7 Jul 2010 23:20:49 +0100"  >&lt;p&gt;assign to kmarsden to backport to 10.5&lt;/p&gt;</comment>
                            <comment id="12887089" author="kmarsden" created="Sat, 10 Jul 2010 21:22:02 +0100"  >&lt;p&gt;Here is the 10.5 patch for this issue which required some manual merge of the test.&lt;br/&gt;
BLOBTest passes individually  but I don&apos;t actually see it as part of Suites.All.  I am not sure how it is normally run.  I will commit Monday.&lt;/p&gt;

</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12394818">DERBY-3645</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12443382">DERBY-4477</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12468384">DERBY-4728</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12380952" name="DoubleSelect.java" size="1681" author="kmarsden" created="Fri, 25 Apr 2008 16:57:08 +0100"/>
                            <attachment id="12449167" name="derby-3646_diff_10_5.txt" size="15876" author="kmarsden" created="Sat, 10 Jul 2010 21:22:02 +0100"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                        <customfield id="customfield_12310200" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Bug behavior facts</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10366"><![CDATA[Wrong query result]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 28 Apr 2008 11:24:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>23767</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12310090" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Issue &amp; fix info</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10422"><![CDATA[High Value Fix]]></customfieldvalue>
    <customfieldvalue key="10424"><![CDATA[Repro attached]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2|hy0o2n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>37718</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310050" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Urgency</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10052"><![CDATA[Normal]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                    </customfields>
    </item>
</channel>
</rss>