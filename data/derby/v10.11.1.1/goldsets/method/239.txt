org.apache.derby.catalog.SystemProcedures.backupDatabaseAndEnableLogArchiveMode(String,boolean,boolean)
org.apache.derby.catalog.SystemProcedures.backupDatabase(String,boolean)
org.apache.derby.catalog.SystemProcedures.checkBackupTransactionIsIdle()
org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(String,int)
org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(String,int)
org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_NOWAIT(String)
org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE(String)
org.apache.derby.catalog.SystemProcedures.SYSCS_CHECKPOINT_DATABASE()
org.apache.derby.catalog.SystemProcedures.SYSCS_DISABLE_LOG_ARCHIVE_MODE(int)
org.apache.derby.catalog.SystemProcedures.SYSCS_ONLINE_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(String,int,int)
org.apache.derby.catalog.SystemProcedures.SYSCS_ONLINE_BACKUP_DATABASE(String,int)
org.apache.derby.catalog.SystemProcedures.SYSCS_SET_RUNTIMESTATISTICS(int)
org.apache.derby.database.Database.backupAndEnableLogArchiveMode(File,boolean)
org.apache.derby.database.Database.backupAndEnableLogArchiveMode(String,boolean)
org.apache.derby.database.Database.backup(File)
org.apache.derby.database.Database.backup(String)
org.apache.derby.database.Database.dropAllJDBCMetaDataSPSes()
org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File)
org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File,byte[],String[])
org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File,byte[],String[],boolean)
org.apache.derby.iapi.store.access.AccessFactory.unfreeze()
org.apache.derby.iapi.store.raw.ContainerHandle.getSpaceInfo()
org.apache.derby.iapi.store.raw.data.DataFactory.backupDataFiles(Transaction,File)
org.apache.derby.iapi.store.raw.data.DataFactory.writeFinished()
org.apache.derby.iapi.store.raw.log.LogFactory.checkpointInRFR(LogInstant,long,DataFactory)
org.apache.derby.iapi.store.raw.log.LogFactory.copyActiveLogFiles(File)
org.apache.derby.iapi.store.raw.log.LogFactory.endLogBackup(File)
org.apache.derby.iapi.store.raw.log.LogFactory.startLogBackup(File)
org.apache.derby.iapi.store.raw.RawStoreFactory.getMaxContainerId()
org.apache.derby.iapi.store.raw.RawStoreFactory.getXactFactory()
org.apache.derby.iapi.store.raw.xact.RawTransaction.blockBackup(boolean)
org.apache.derby.iapi.store.raw.xact.RawTransaction.checkpointInRollForwardRecovery(LogInstant,long)
org.apache.derby.iapi.store.raw.xact.RawTransaction.isBlockingBackup()
org.apache.derby.iapi.store.raw.xact.RawTransaction.setBackupBlockingState()
org.apache.derby.iapi.store.raw.xact.RawTransaction.setBackupBlockingState(boolean)
org.apache.derby.iapi.store.raw.xact.TransactionFactory.backupFinished()
org.apache.derby.iapi.store.raw.xact.TransactionFactory.blockBackupBlockingOperations(boolean)
org.apache.derby.iapi.store.raw.xact.TransactionFactory.getTransactionInfo()
org.apache.derby.iapi.store.raw.xact.TransactionFactory.stopBackupBlockingOperations(boolean)
org.apache.derby.iapi.store.raw.xact.TransactionFactory.unblockBackupBlockingOperations()
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_1_system_procedures(TransactionController,UUID)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_2_system_procedures(TransactionController,UUID)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSCS_procedures(TransactionController)
org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(TransactionController,int)
org.apache.derby.impl.sql.execute.JarDDL.mkExternalName(String,String,char)
org.apache.derby.impl.store.raw.data.BaseContainer.backupContainer(BaseContainerHandle,String)
org.apache.derby.impl.store.raw.data.BaseContainer.getEstimatedPageCount(BaseContainerHandle,int)
org.apache.derby.impl.store.raw.data.BaseContainerHandle.backupContainer(String)
org.apache.derby.impl.store.raw.data.BaseContainerHandle.toString()
org.apache.derby.impl.store.raw.data.BaseContainer.lockAttributes(int,Hashtable)
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getContainerNames()
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(RawTransaction,ContainerKey,LockingPolicy,int,boolean)
org.apache.derby.impl.store.raw.data.BasePage.getPageArray()
org.apache.derby.impl.store.raw.data.BasePage.setContainerRowCount(long)
org.apache.derby.impl.store.raw.data.CachedPage.setPageArray(int)
org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(RawTransaction,BaseContainerHandle)
org.apache.derby.impl.store.raw.data.FileContainer.encryptPage(byte[],int)
org.apache.derby.impl.store.raw.data.FileContainer.encryptPage(byte[],int,byte[])
org.apache.derby.impl.store.raw.data.FileContainer.getEncryptionBuffer()
org.apache.derby.impl.store.raw.data.FileContainer.getLastPageNumber(BaseContainerHandle)
org.apache.derby.impl.store.raw.data.FileContainer.getPageForBackup(BaseContainerHandle,long)
org.apache.derby.impl.store.raw.data.FileContainer.getPageForInsert(BaseContainerHandle,int)
org.apache.derby.impl.store.raw.data.FileContainer.getUnfilledPageNumber(BaseContainerHandle,long)
org.apache.derby.impl.store.raw.data.FileContainer.latchPage(BaseContainerHandle,BasePage,boolean)
org.apache.derby.impl.store.raw.data.FileContainer.pageValid(BaseContainerHandle,long)
org.apache.derby.impl.store.raw.data.InputStreamContainer.getInputStream()
org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(BaseContainerHandle,String)
org.apache.derby.impl.store.raw.data.RAFContainer.removeContainer(LogInstant,boolean)
org.apache.derby.impl.store.raw.data.RAFContainer.stubbify(LogInstant)
org.apache.derby.impl.store.raw.data.RAFContainer.truncatePages(long)
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(long,byte[],byte[])
org.apache.derby.impl.store.raw.data.RAFContainer.writePage(long,byte[],boolean)
org.apache.derby.impl.store.raw.data.RAFContainer.writeToBackup(RandomAccessFile,long,byte[])
org.apache.derby.impl.store.raw.data.RemoveFile.serviceASAP()
org.apache.derby.impl.store.raw.data.RemoveFile.serviceImmediately()
org.apache.derby.impl.store.raw.data.RFResource.add(String,InputStream)
org.apache.derby.impl.store.raw.data.RFResource.remove(String,long,boolean)
org.apache.derby.impl.store.raw.log.LogToFile.backupLogFiles(File,long)
org.apache.derby.impl.store.raw.log.LogToFile.deleteObsoleteLogfiles()
org.apache.derby.impl.store.raw.log.LogToFile.deleteOnlineArchivedLogFiles()
org.apache.derby.impl.store.raw.log.LogToFile.disableLogArchiveMode()
org.apache.derby.impl.store.raw.log.LogToFile.enableLogArchiveMode()
org.apache.derby.impl.store.raw.log.LogToFile.freezePersistentStore()
org.apache.derby.impl.store.raw.log.LogToFile.getFirstLogNeeded(CheckpointOperation)
org.apache.derby.impl.store.raw.log.LogToFile.inRFR()
org.apache.derby.impl.store.raw.log.LogToFile.truncateLog(CheckpointOperation)
org.apache.derby.impl.store.raw.log.ReadOnly.abortLogBackup()
org.apache.derby.impl.store.raw.RawStore.backupAndEnableLogArchiveMode(String,boolean,boolean)
org.apache.derby.impl.store.raw.RawStore.backup(String,boolean)
org.apache.derby.impl.store.raw.RawStore.backup(Transaction,File)
org.apache.derby.impl.store.raw.RawStore.canStartOnlineBackup(Transaction,boolean)
org.apache.derby.impl.store.raw.RawStore.disableLogArchiveMode(boolean)
org.apache.derby.impl.store.raw.RawStore.getLockFactory()
org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(File,StorageFile)
org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(StorageFile,File)
org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(StorageFile,File,byte[],String[])
org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(StorageFile,File,byte[],String[],boolean)
org.apache.derby.impl.store.raw.RawStore.privCopyFile(File,StorageFile)
org.apache.derby.impl.store.raw.RawStore.privCopyFile(StorageFile,File)
org.apache.derby.impl.store.raw.RawStore.privList(File)
org.apache.derby.impl.store.raw.RawStore.privList(StorageFile)
org.apache.derby.impl.store.raw.RawStore.privRenameTo(File,File)
org.apache.derby.impl.store.raw.RawStore.RawStore()
org.apache.derby.impl.store.raw.RawStore.restoreRemainingFromBackup(String)
org.apache.derby.impl.store.raw.RawStore.run()
org.apache.derby.impl.store.raw.xact.XactFactory.backupBlockingOperationFinished()
org.apache.derby.impl.store.raw.xact.XactFactory.canStartBackupBlockingOperation()
org.apache.derby.impl.store.raw.xact.XactFactory.canStartBackupBlockingOperation(boolean)
org.apache.derby.impl.store.raw.xact.XactFactory.getXAResourceManager()
org.apache.derby.impl.store.raw.xact.Xact.postComplete(int,Integer)
org.apache.derby.impl.store.raw.xact.Xact.setPostComplete()
org.apache.derby.impl.store.raw.xact.Xact.setUnblockBackupState()
org.apache.derby.impl.store.raw.xact.Xact.unblockBackup()
org.apache.derby.impl.store.raw.xact.Xact.Xact(XactFactory,LogFactory,DataFactory,boolean,Object)
org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.logMsg(String)
org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.main(String[])
org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.performBackup(Connection,String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.createFromBackup(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.getConnection(String,String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.isRunning()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.OnlineBackup(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.performBackup()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.restoreFromBackup()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.createTable(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.DatabaseActions(Connection)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.DatabaseActions(int,Connection)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.endTransaction(int)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.endUnloggedAction(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.insert(String,int,int,int)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.performCreateDropTables()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.performDmlActions()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.select(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.startUnloggedAction(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.stopActivity()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.update(String,int,int,int)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.runConsistencyChecker(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.runTest()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.AsyncStatementThread.AsyncStatementThread(Connection,String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.countRows(Connection,String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.dumpSQLException(SQLException)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.getConnection()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.installJarTest()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.logMessage(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.removeJarTest()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.shutdown(String)
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.waitForBackupToBegin()
org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.waitForBackupToEnd()
org.apache.derbyTesting.functionTests.util.FTFileUtil.fileExists(String)
org.apache.derbyTesting.functionTests.util.FTFileUtil.removeDirectory(File)
org.apache.derbyTesting.functionTests.util.FTFileUtil.removeDirectory(String)
org.apache.derbyTesting.functionTests.util.FTFileUtil.renameFile(String,String,String)
