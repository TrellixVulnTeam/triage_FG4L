org.apache.derby.iapi.sql.compile.JoinStrategy.estimateCost(Optimizable,OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,CostEstimate)
org.apache.derby.iapi.sql.compile.JoinStrategy.getName()
org.apache.derby.iapi.sql.compile.JoinStrategy.getScanArgs(TransactionController,MethodBuilder,Optimizable,OptimizablePredicateList,OptimizablePredicateList,ExpressionClassBuilderInterface,int,MethodBuilder,int,int,int,boolean,int)
org.apache.derby.iapi.sql.compile.JoinStrategy.getScanArgs(TransactionController,MethodBuilder,Optimizable,OptimizablePredicateList,OptimizablePredicateList,ExpressionClassBuilderInterface,int,MethodBuilder,int,int,int,boolean,int,int)
org.apache.derby.iapi.sql.compile.JoinStrategy.maxCapacity(int,int,double)
org.apache.derby.iapi.sql.compile.JoinStrategy.memoryUsage(double,double)
org.apache.derby.iapi.sql.compile.Optimizable.feasibleJoinStrategy(OptimizablePredicateList,Optimizer)
org.apache.derby.iapi.sql.compile.Optimizable.hashKeyColumns()
org.apache.derby.iapi.sql.compile.Optimizable.loadFactor()
org.apache.derby.iapi.sql.compile.Optimizable.maxCapacity()
org.apache.derby.iapi.sql.compile.Optimizable.maxCapacity(JoinStrategy,int)
org.apache.derby.iapi.sql.compile.Optimizable.memoryUsage(double)
org.apache.derby.iapi.sql.compile.Optimizable.memoryUsageOK(double,int)
org.apache.derby.iapi.sql.compile.Optimizer.getMaxMemoryPerTable()
org.apache.derby.iapi.sql.compile.Optimizer.useStatistics()
org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(Hashtable,Object,Object[])
org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.BackingStoreHashtableEnumeration()
org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.hasMoreElements()
org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.nextElement()
org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtable(TransactionController,RowSource,int[],boolean,long,long,int,float,boolean)
org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtable(TransactionController,RowSource,int[],boolean,long,long,int,float,boolean,boolean)
org.apache.derby.iapi.store.access.BackingStoreHashtable.cloneRow(Object[])
org.apache.derby.iapi.store.access.BackingStoreHashtable.close()
org.apache.derby.iapi.store.access.BackingStoreHashtable.doSpaceAccounting(Object[],boolean)
org.apache.derby.iapi.store.access.BackingStoreHashtable.elements()
org.apache.derby.iapi.store.access.BackingStoreHashtable.get(Object)
org.apache.derby.iapi.store.access.BackingStoreHashtable.remove(Object)
org.apache.derby.iapi.store.access.BackingStoreHashtable.size()
org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(Hashtable,Object,Object[])
org.apache.derby.iapi.store.access.DiskHashtable.DiskHashtable(TransactionController,DataValueDescriptor[],int[],boolean,boolean)
org.apache.derby.iapi.store.access.DiskHashtable.ElementEnum.ElementEnum()
org.apache.derby.iapi.store.access.DiskHashtable.getRemove(Object,boolean,boolean)
org.apache.derby.iapi.store.access.DiskHashtable.put(Object,Object[])
org.apache.derby.iapi.store.access.DiskHashtable.rowMatches(DataValueDescriptor[],Object)
org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(ExpressionClassBuilder,MethodBuilder)
org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage()
org.apache.derby.impl.sql.compile.Level2OptimizerImpl.trace(int,int,int,double,Object)
org.apache.derby.impl.sql.compile.OptimizerImpl.considerCost(Optimizable,OptimizablePredicateList,CostEstimate,CostEstimate)
org.apache.derby.impl.sql.compile.OptimizerImpl.costBasedCostOptimizable(Optimizable,TableDescriptor,ConglomerateDescriptor,OptimizablePredicateList,CostEstimate)
org.apache.derby.impl.sql.compile.OptimizerImpl.OptimizerImpl(OptimizableList,OptimizablePredicateList,DataDictionary,boolean,boolean,boolean,int,JoinStrategy[],int,RequiredRowOrdering,int)
org.apache.derby.impl.sql.execute.HashScanResultSet.openCore()
org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.ScrollInsensitiveResultSet(NoPutResultSet,Activation,int,int,double,double,GeneratedMethod)
org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.BackingStoreHashTableFromScan(TransactionController,long,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier,DataValueDescriptor[],int,long,int[],boolean,long,long,int,float,boolean,boolean)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.ca2Val(int)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.cb2Val(int)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.checkAllCa1(ResultSet,boolean,boolean,int,String[][][],String)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.expectedMaxcc2(int)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.expectedMincc2(int)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.findDupVal(ResultSet,int,char,int,String[][][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.insertDups(PreparedStatement,PreparedStatement,String[][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.main(String)
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.runCursor(Connection,int,String[][][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.runDistinct(Connection,int,String[][][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.runJoin(Connection,int,String[][][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.runStatements(Connection,int,String[][][])
org.apache.derbyTesting.functionTests.tests.lang.SpillHash.trim(String)
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.checkElement(DataValueDescriptor[],int,DataValueDescriptor[][],boolean[])
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.doIt()
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.REPORT_FAILURE(String)
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.REPORT(String)
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.rowsEqual(Object,Object)
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.runTests()
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.TestDiskHashtable()
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testElements(boolean,DiskHashtable,int[],int,DataValueDescriptor[][],HashMap,boolean[],boolean[])
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testLargeTable(DiskHashtable,int[],DataValueDescriptor[])
org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testOneVariant(TransactionController,boolean,DataValueDescriptor[],int[],DataValueDescriptor[][])
