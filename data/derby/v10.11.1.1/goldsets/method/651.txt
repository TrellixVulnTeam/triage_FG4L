org.apache.derby.catalog.TypeDescriptor.isRowMultiSet()
org.apache.derby.catalog.TypeDescriptor.isUserDefinedType()
org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl(String)
org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl(String,String)
org.apache.derby.catalog.types.BaseTypeIdImpl.doubleQuote(String)
org.apache.derby.catalog.types.BaseTypeIdImpl.getUnqualifiedName()
org.apache.derby.catalog.types.BaseTypeIdImpl.isAnsiUDT()
org.apache.derby.catalog.types.BaseTypeIdImpl.setTypeIdSpecificInstanceVariables()
org.apache.derby.catalog.types.BaseTypeIdImpl.stripQuotes(String)
org.apache.derby.catalog.types.DecimalTypeIdImpl.setNumericType()
org.apache.derby.catalog.types.TypeDescriptorImpl.getCollationType()
org.apache.derby.catalog.types.UDTAliasInfo.getMethodName()
org.apache.derby.catalog.types.UDTAliasInfo.getTypeFormatId()
org.apache.derby.catalog.types.UDTAliasInfo.isTableFunction()
org.apache.derby.catalog.types.UDTAliasInfo.UDTAliasInfo()
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.isBound()
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.UserDefinedTypeIdImpl(String)
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.UserDefinedTypeIdImpl(String,String,String)
org.apache.derby.catalog.types.UserDefinedTypeIdImpl.userType()
org.apache.derby.iapi.sql.compile.CompilerContext.addRequiredRoutinePriv(AliasDescriptor)
org.apache.derby.iapi.sql.compile.CompilerContext.addRequiredUsagePriv(PrivilegedSQLObject)
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.AliasDescriptor(DataDictionary,UUID,String,UUID,String,char,char,boolean,AliasInfo,String)
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.drop(LanguageConnectionContext)
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getAliasType(char)
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getName()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getObjectTypeName()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getQualifiedName()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSchemaDescriptor()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSchemaName()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSchemaUUID()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getUUID()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.isValid()
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.makeInvalid(int,LanguageConnectionContext)
org.apache.derby.iapi.sql.dictionary.AliasDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getAliasDescriptorForUDT(TransactionController,DataTypeDescriptor)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getGenericPermissions(UUID)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getGenericPermissions(UUID,String,String,String)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getPermissions(UUID)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getPermissions(UUID,String)
org.apache.derby.iapi.sql.dictionary.DataDictionary.getUUIDFactory()
org.apache.derby.iapi.sql.dictionary.PermDescriptor.checkOwner(String)
org.apache.derby.iapi.sql.dictionary.PermDescriptor.getObjectName()
org.apache.derby.iapi.sql.dictionary.PermDescriptor.getProtectedObject(DataDictionary,UUID,String)
org.apache.derby.iapi.sql.dictionary.PermDescriptor.PermDescriptor(DataDictionary,UUID,String,UUID,String,String,String,boolean)
org.apache.derby.iapi.sql.dictionary.SequenceDescriptor.getSchemaId()
org.apache.derby.iapi.sql.dictionary.SequenceDescriptor.getSequenceName()
org.apache.derby.iapi.sql.dictionary.SequenceDescriptor.getSequenceUUID()
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.check(LanguageConnectionContext,String,boolean,Activation)
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.getObjectID()
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.getObjectType()
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.getPermissionDescriptor(String,DataDictionary)
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.getPrivilege()
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.getPrivilegedObject(DataDictionary)
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.isCorrectPermission(PermissionsDescriptor)
org.apache.derby.iapi.sql.dictionary.StatementGenericPermission.StatementGenericPermission(UUID,String,String)
org.apache.derby.iapi.sql.dictionary.StatementPermission.genericCheck(LanguageConnectionContext,String,boolean,Activation,String)
org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDescriptorType()
org.apache.derby.iapi.sql.dictionary.TableDescriptor.quoteProtectName(String)
org.apache.derby.iapi.sql.dictionary.TupleDescriptor.isPersistent()
org.apache.derby.iapi.types.TypeId.getTypeId(TypeDescriptor)
org.apache.derby.iapi.types.TypeId.getUserDefinedTypeId(String,boolean)
org.apache.derby.iapi.types.TypeId.getUserDefinedTypeId(String,String,String)
org.apache.derby.iapi.types.UserType.getObject()
org.apache.derby.iapi.types.UserType.getTimestamp(Calendar)
org.apache.derby.iapi.types.UserType.setObject(Object)
org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUDTs(String,String,String,int[])
org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo.getNewInstance()
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean,PermissionsDescriptor,String,TransactionController)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getProvidersDescriptorList(String)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTransactionCompile()
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedGenericPermDescriptor(PermDescriptor)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermDescriptor(PermDescriptor)
org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(SchemaDescriptor)
org.apache.derby.impl.sql.catalog.DDdependableFinder.findDependable(DataDictionary,UUID)
org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectType()
org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(Object)
org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)
org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory.buildIndexKeyRow(int,PermissionsDescriptor)
org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory.getPrimaryKeyIndexNumber()
org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)
org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory.removePermissions(ExecRow,PermissionsDescriptor,boolean[])
org.apache.derby.impl.sql.catalog.SYSPERMSRowFactory.setUUIDOfThePassedDescriptor(ExecRow,PermissionsDescriptor)
org.apache.derby.impl.sql.compile.AlterTableNode.acceptChildren(Visitor)
org.apache.derby.impl.sql.compile.AlterTableNode.genColumnInfo()
org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(TableDescriptor)
org.apache.derby.impl.sql.compile.CompilerContextImpl.getRequiredPermissionsList()
org.apache.derby.impl.sql.compile.CompilerContextImpl.initRequiredPriv()
org.apache.derby.impl.sql.compile.CreateAliasNode.bindParameterTypes(RoutineAliasInfo)
org.apache.derby.impl.sql.compile.CreateAliasNode.bindStatement()
org.apache.derby.impl.sql.compile.CreateAliasNode.init(Object,Object,Object,Object,Object,Object)
org.apache.derby.impl.sql.compile.CreateAliasNode.statementToString()
org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction()
org.apache.derby.impl.sql.compile.DropAliasNode.aliasTypeName(char)
org.apache.derby.impl.sql.compile.DropAliasNode.init(Object,Object)
org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(String,boolean)
org.apache.derby.impl.sql.compile.NodeFactoryImpl.getCreateAliasNode(Object,Object,Object,char,Boolean,ContextManager)
org.apache.derby.impl.sql.compile.PrivilegeNode.bind(HashMap,List,boolean)
org.apache.derby.impl.sql.compile.PrivilegeNode.init(Object,Object,Object)
org.apache.derby.impl.sql.compile.PrivilegeNode.init(Object,Object,Object,Object)
org.apache.derby.impl.sql.compile.PrivilegeNode.makePrivilegeInfo()
org.apache.derby.impl.sql.compile.PrivilegeNode.unimplementedFeature()
org.apache.derby.impl.sql.compile.QueryTreeNode.bindRowMultiSet(DataTypeDescriptor)
org.apache.derby.impl.sql.compile.QueryTreeNode.bindUserType(DataTypeDescriptor)
org.apache.derby.impl.sql.compile.QueryTreeNode.checkReliability(int,String)
org.apache.derby.impl.sql.compile.QueryTreeNode.createTypeDependency(AliasDescriptor)
org.apache.derby.impl.sql.compile.QueryTreeNode.createTypeDependency(DataTypeDescriptor)
org.apache.derby.impl.sql.compile.QueryTreeNode.getTableDescriptor(String,SchemaDescriptor)
org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(FromList,SubqueryList,Vector)
org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(FromList,SubqueryList,Vector,SchemaDescriptor)
org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(ColumnInfo[])
org.apache.derby.impl.sql.compile.TableElementList.validate(DDLStatementNode,DataDictionary,TableDescriptor)
org.apache.derby.impl.sql.compile.TableElementNode.getElementType()
org.apache.derby.impl.sql.compile.ValueNode.setType(DataTypeDescriptor)
org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(Provider,int,LanguageConnectionContext)
org.apache.derby.impl.sql.depend.BasicDependencyManager.getActionString(int)
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.CreateAliasConstantAction(String,String,String,AliasInfo,char)
org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(Activation)
org.apache.derby.impl.sql.execute.DDLConstantAction.addColumnDependencies(LanguageConnectionContext,DataDictionary,TableDescriptor,ColumnInfo)
org.apache.derby.impl.sql.execute.DDLConstantAction.adjustUDTDependencies(LanguageConnectionContext,DataDictionary,AliasDescriptor,boolean)
org.apache.derby.impl.sql.execute.DDLConstantAction.adjustUDTDependencies(LanguageConnectionContext,DataDictionary,Dependent,HashMap,HashMap)
org.apache.derby.impl.sql.execute.DDLConstantAction.adjustUDTDependencies(LanguageConnectionContext,DataDictionary,TableDescriptor,ColumnInfo[])
org.apache.derby.impl.sql.execute.DDLConstantAction.adjustUDTDependencies(LanguageConnectionContext,DataDictionary,TableDescriptor,ColumnInfo[],boolean)
org.apache.derby.impl.sql.execute.GenericPrivilegeInfo.executeGrantRevoke(Activation,boolean,List)
org.apache.derby.impl.sql.execute.GenericPrivilegeInfo.GenericPrivilegeInfo(PrivilegedSQLObject,String,boolean)
org.apache.derby.impl.storeless.EmptyDictionary.getAliasDescriptor(UUID)
org.apache.derby.impl.storeless.EmptyDictionary.getSequenceDescriptor(SchemaDescriptor,String)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createObjectsForUDTTests()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.dropObjectsForUDTTests()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getDataVersion(Connection)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getSQLTypes(Connection)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testDMDconnClosed()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetTypeInfo()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testUDTs()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testUnimplementedSQLObjectAttributes()
org.apache.derbyTesting.functionTests.tests.lang.CastingTest.assertAllTypesCovered()
org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode()
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.FakeByteArray()
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.FakeByteArray(int,int)
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.makeFakeByteArray(int,int)
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.readExternal(ObjectInput)
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.toString(FakeByteArray)
org.apache.derbyTesting.functionTests.tests.lang.FakeByteArray.writeExternal(ObjectOutput)
org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.assertResults(ResultSet,String[][],boolean)
org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.expectCompilationError(Connection,String,String)
org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.expectCompilationError(String,String)
org.apache.derbyTesting.functionTests.tests.lang.GeneratedColumnsHelper.verifyRevokePrivilege(Connection,Connection,String,String,String,String,String)
org.apache.derbyTesting.functionTests.tests.lang.IntArray.compareTo(Object)
org.apache.derbyTesting.functionTests.tests.lang.IntArray.equals(Object)
org.apache.derbyTesting.functionTests.tests.lang.IntArray.getCell(IntArray,int)
org.apache.derbyTesting.functionTests.tests.lang.IntArray.hashCode()
org.apache.derbyTesting.functionTests.tests.lang.IntArray.IntArray()
org.apache.derbyTesting.functionTests.tests.lang.IntArray.IntArray(int[])
org.apache.derbyTesting.functionTests.tests.lang.IntArray.makeIntArray(int)
org.apache.derbyTesting.functionTests.tests.lang.IntArray.setCell(IntArray,int,int)
org.apache.derbyTesting.functionTests.tests.lang.Price.getAmount(Price)
org.apache.derbyTesting.functionTests.tests.lang.Price.getCurrencyCode(Price)
org.apache.derbyTesting.functionTests.tests.lang.Price.getSavedPrice()
org.apache.derbyTesting.functionTests.tests.lang.Price.getTimeInstant(Price)
org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice()
org.apache.derbyTesting.functionTests.tests.lang.Price.makePrice(String,BigDecimal,Timestamp)
org.apache.derbyTesting.functionTests.tests.lang.Price.Price()
org.apache.derbyTesting.functionTests.tests.lang.Price.Price(String,BigDecimal,Timestamp)
org.apache.derbyTesting.functionTests.tests.lang.Price.savePrice(Price)
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.getSQLTypeName()
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.makeSampleSQLData(int)
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.readSQL(SQLInput,String)
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.SampleSQLData()
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.SampleSQLData(byte[])
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.toString()
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.toString(SampleSQLData)
org.apache.derbyTesting.functionTests.tests.lang.SampleSQLData.writeSQL(SQLOutput)
org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogIndexes()
org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest.suite()
org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest.test_001_basicGrant()
org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest.test_002_basicRevoke()
org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest.test_003_dropSchema()
org.apache.derbyTesting.functionTests.tests.lang.UDTPermsTest.UDTPermsTest(String)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.countTableDependencies(Connection,String)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.getScalarInteger(PreparedStatement)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.hashmapReader()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.makeGoodTypes(Connection)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.oneArgPriceProc(Price)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.putValue(HashMap,String,String)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_01_basicSyntax()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_02_basicColumnRetvalParam()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_03_addDropColumn()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_04_dropTable()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_05_viewDependencies()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_06_casts()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_07_routineDependencies()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_08_triggerDependencies()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_10_parameterMetaData()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_11_tableFunctionColumns()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_12_largeUDTs()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.test_13_sqlData()
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.twoArgPriceProc(Price,Price)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.UDTTest(String)
org.apache.derbyTesting.functionTests.tests.lang.UDTTest.verifyDropRestrictions(Connection,String,String,String,String,String)
org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.Changes10_6(String)
org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.testSYSCS_INPLACE_COMPRESS_TABLE()
org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_6.vetDERBY_4215(Statement)
org.apache.derbyTesting.junit.JDBC.dropSchema(DatabaseMetaData,String)
org.apache.derbyTesting.junit.JDBC.dropUsingDMD(Statement,ResultSet,String,String,String)
