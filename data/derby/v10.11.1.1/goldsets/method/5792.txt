org.apache.derby.iapi.store.raw.data.DataFactory.decrypt(byte[],int,int,byte[],int)
org.apache.derby.iapi.store.raw.data.DataFactory.encryptAllContainers(RawTransaction)
org.apache.derby.iapi.store.raw.data.DataFactory.removeOldVersionOfContainers()
org.apache.derby.iapi.store.raw.data.DataFactory.removeOldVersionOfContainers(boolean)
org.apache.derby.iapi.store.raw.data.DataFactory.setDatabaseEncrypted()
org.apache.derby.iapi.store.raw.data.DataFactory.setDatabaseEncrypted(boolean)
org.apache.derby.iapi.store.raw.data.RawContainerHandle.encryptContainer(String)
org.apache.derby.iapi.store.raw.data.RawContainerHandle.encryptOrDecryptContainer(String,boolean)
org.apache.derby.iapi.store.raw.log.LogFactory.abortLogBackup()
org.apache.derby.iapi.store.raw.log.LogFactory.setDatabaseEncrypted(boolean,boolean)
org.apache.derby.impl.jdbc.EmbedConnection.checkConflictingCryptoAttributes(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.checkIsDBOwner(int)
org.apache.derby.impl.jdbc.EmbedConnection.createBoot(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection(InternalDriver,String,Properties)
org.apache.derby.impl.jdbc.EmbedConnection.isCryptoBoot(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.isDropDatabase(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.isEncryptionBoot(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.removePhaseTwoProps(Properties)
org.apache.derby.impl.jdbc.EmbedConnection.setSchema(String)
org.apache.derby.impl.store.raw.data.BaseContainer.encryptContainer(BaseContainerHandle,String)
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.databaseEncrypted()
org.apache.derby.impl.store.raw.data.BaseDataFileFactory.decryptAllContainers(RawTransaction)
org.apache.derby.impl.store.raw.data.EncryptContainerOperation.undoMe(Transaction)
org.apache.derby.impl.store.raw.data.EncryptData.encryptContainer(RawTransaction,ContainerKey)
org.apache.derby.impl.store.raw.data.EncryptData.EncryptData(BaseDataFileFactory)
org.apache.derby.impl.store.raw.data.EncryptData.getFile(ContainerKey,boolean)
org.apache.derby.impl.store.raw.data.EncryptData.privDelete(StorageFile)
org.apache.derby.impl.store.raw.data.EncryptData.privRename(StorageFile,StorageFile)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.encryptOrDecryptAllContainers(RawTransaction,boolean)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.encryptOrDecryptContainer(RawTransaction,ContainerKey,boolean)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.EncryptOrDecryptData(BaseDataFileFactory)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.getFilePath(ContainerKey,boolean)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.getFile(String)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.isOldContainerFile(String)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.privExists(StorageFile)
org.apache.derby.impl.store.raw.data.EncryptOrDecryptData.restoreContainer(ContainerKey)
org.apache.derby.impl.store.raw.data.RAFContainer.encryptOrDecryptContainer(BaseContainerHandle,String,boolean)
org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(long,byte[],byte[],boolean)
org.apache.derby.impl.store.raw.data.RAFContainer.writePage(long,byte[],boolean)
org.apache.derby.impl.store.raw.RawStore.applyBulkCryptoOperation(Properties,CipherFactory)
org.apache.derby.impl.store.raw.RawStore.boot(boolean,Properties)
org.apache.derby.impl.store.raw.RawStore.canEncryptDatabase(boolean)
org.apache.derby.impl.store.raw.RawStore.changeBootPassword(Properties,Serializable)
org.apache.derby.impl.store.raw.RawStore.checkVersion(int,int,String)
org.apache.derby.impl.store.raw.RawStore.configureDatabaseForEncryption(Properties,CipherFactory)
org.apache.derby.impl.store.raw.RawStore.cryptoOperationAllowed(boolean,boolean)
org.apache.derby.impl.store.raw.RawStore.encrypt(byte[],int,int,byte[],int,boolean)
org.apache.derby.impl.store.raw.RawStore.handleIncompleteDatabaseEncryption(Properties)
org.apache.derby.impl.store.raw.RawStore.handleIncompleteDbCryptoOperation(Properties)
org.apache.derby.impl.store.raw.RawStore.isSet(Properties,String)
org.apache.derby.impl.store.raw.RawStore.isTrue(Properties,String)
org.apache.derby.impl.store.raw.RawStore.privCopyFile(StorageFile,StorageFile)
org.apache.derby.impl.store.raw.RawStore.privList(File)
org.apache.derby.impl.store.raw.RawStore.privList(StorageFile)
org.apache.derby.impl.store.raw.RawStore.random()
org.apache.derby.impl.store.raw.RawStore.removeCryptoProperties(Properties)
org.apache.derby.impl.store.raw.RawStore.run()
org.apache.derby.impl.store.raw.RawStore.setupEncryptionEngines(boolean,Properties)
org.apache.derby.impl.store.raw.RawStore.stop()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.bringDbUp(String)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.dboCryptoSuite(String)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.dboEncryptionSuite(String)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.DboPowersTest(String,int)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.derby3038Proc()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.suite()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testDecrypt()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testEncrypt()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testReEncrypt()
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetAttempt(String,SQLException,String,String)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetCryptoAttempt(boolean,String,SQLException)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetEncryptionAttempt(String,SQLException)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.wrapCryptoUserTests(int)
org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.wrapEncryptionUserTests(int)
org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.bootDatabase(DataSource,boolean,Boolean)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.crash(DataSource,int,boolean,String)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.db(DataSource)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.decryptDatabase(DataSource,boolean)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.encryptDatabase(DataSource,boolean)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.runCrashRecoveryTestCases(DataSource,int,boolean)
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.testDecryptionWithBootPassword()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.testDecryptionWithEncryptionKey()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.testEncryptionWitEncryptionKey()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.testEncryptionWithBootPassword()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.testEncryptionWithEncryptionKey()
org.apache.derbyTesting.functionTests.tests.store.CryptoCrashRecoveryTest.verifyOperation(int)
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.connect(boolean,String,String)
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.DecryptDatabaseTest(String)
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.populateDatabase(boolean,int)
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.saveEncryptionAlgorithm()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.setUp()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.testConflictingConnectionAttributes()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.testDecryptDatabase()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.testDecryptDatabaseNegative()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.testDecryptOnBootedDatabase()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.testDecryptUnEncryptedDatabase()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.wrapTest()
org.apache.derbyTesting.functionTests.tests.store.DecryptDatabaseTest.wrapTest(String)
