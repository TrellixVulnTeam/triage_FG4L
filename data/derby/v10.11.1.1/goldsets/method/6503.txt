org.apache.derby.iapi.services.io.FilePermissionService.limitAccessToOwner(File)
org.apache.derby.iapi.services.io.FileUtil.assertTrue(boolean)
org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File,byte[],String[],boolean)
org.apache.derby.iapi.services.io.FileUtil.copyDirectory(WritableStorageFactory,File,StorageFile,byte[],String[])
org.apache.derby.iapi.services.io.FileUtil.limitAccessToOwnerViaACLs(File)
org.apache.derby.iapi.services.io.FileUtil.loadFilePermissionService()
org.apache.derby.impl.drda.DssTrace.startComBufferTrace.pae.run()
org.apache.derby.impl.drda.DssTrace.startComBufferTrace(String)
org.apache.derby.impl.io.DirFile.getOutputStream()
org.apache.derby.impl.io.DirFile.getOutputStream(boolean)
org.apache.derby.impl.io.DirFile.getURL()
org.apache.derby.impl.io.DirFile.limitAccessToOwner()
org.apache.derby.impl.services.monitor.FileMonitor.PBinitialize(boolean)
org.apache.derby.impl.store.raw.data.RAFContainer.getRandomAccessFile(File)
org.apache.derby.impl.store.raw.data.RAFContainer.privGetFileName(ContainerKey,boolean,boolean,boolean)
org.apache.derby.impl.store.raw.data.StreamFileContainer.getFileName(ContainerKey,boolean,boolean)
org.apache.derby.impl.store.raw.data.StreamFileContainer.privExists(StorageFile)
org.apache.derby.impl.store.raw.data.StreamFileContainer.privMkdirs(StorageFile)
org.apache.derby.impl.store.raw.log.LogToFile.createLogDirectory()
org.apache.derby.impl.store.raw.log.LogToFile.privCanWrite(StorageFile)
org.apache.derby.impl.store.raw.log.LogToFile.privList(File)
org.apache.derby.impl.store.raw.RawStore.backup(Transaction,File)
org.apache.derby.impl.store.raw.RawStore.createBackupDirectory(File)
org.apache.derby.impl.store.raw.RawStore.privMkdirs(File)
