When a thread receives an interrupt Derby detects this, it will reset the thread's flag and save the fact in its lcc (LanguageConnectionContext), if available. If not (e.g. during boot) it will save the information in a thread local variable. For performance reasons, we use the lcc when available. However, when shutting down the database, the lcc goers away, and when the JDBC call returns to the application, the thread's interrupt flag will not be reinstated as per our specification. This is because the lcc dies before we do the restoring (under shutdown). So, the information that the thread was interrupted is lost with the lcc going away. A possible solution is to move the flag over to the thread local variable when the lcc is popped, so that the restore code will find it.