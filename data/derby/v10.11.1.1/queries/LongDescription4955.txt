This query:

conn.prepareStatement("SELECT " +
            "CASE WHEN (this.id = ?) THEN 1 ELSE 0 END " +
            "FROM request_line AS this " +
            "GROUP BY " +
            "CASE WHEN (this.id = ?) THEN 1 ELSE 0 END");

Fails with the following exception:

java.sql.SQLSyntaxErrorException: Column reference 'THIS.ID' is invalid, or is part of an invalid expression.  For a SELECT list with a GROUP BY, the columns and expressions being selected may only contain valid grouping expressions and valid aggregate expressions.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement20.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement30.<init>(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedPreparedStatement40.<init>(Unknown Source)
	at org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)
	at org.wfp.rita.test.derby.DerbyCrashTest.testPrepareQueryWithGroupByParameterFails(DerbyCrashTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at junit.framework.TestSuite.runTest(TestSuite.java:230)
	at junit.framework.TestSuite.run(TestSuite.java:225)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.sql.SQLException: Column reference 'THIS.ID' is invalid, or is part of an invalid expression.  For a SELECT list with a GROUP BY, the columns and expressions being selected may only contain valid grouping expressions and valid aggregate expressions.
	at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)
	at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)
	... 32 more
Caused by: ERROR 42Y36: Column reference 'THIS.ID' is invalid, or is part of an invalid expression.  For a SELECT list with a GROUP BY, the columns and expressions being selected may only contain valid grouping expressions and valid aggregate expressions.
	at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)
	at org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Unknown Source)
	at org.apache.derby.impl.sql.compile.BinaryOperatorNode.acceptChildren(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Unknown Source)
	at org.apache.derby.impl.sql.compile.ConditionalNode.acceptChildren(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Unknown Source)
	at org.apache.derby.impl.sql.compile.ResultColumn.acceptChildren(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNodeVector.acceptChildren(Unknown Source)
	at org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Unknown Source)
	at org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(Unknown Source)
	at org.apache.derby.impl.sql.compile.DMLStatementNode.bind(Unknown Source)
	at org.apache.derby.impl.sql.compile.CursorNode.bindStatement(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)
	at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)
	at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)
	... 26 more

Derby doesn't know at SQL compile time whether the SELECT and the GROUP BY expression are equal, because it depends which value would be bound to them after the statement is prepared. However, when using Hibernate all constant values in a query are bound using parameters, which hits this limitation.

Test case:


package org.wfp.rita.test.derby;

import java.io.File;
import java.sql.Connection;
import java.sql.Statement;
import java.util.Properties;

import junit.framework.TestCase;

import org.apache.derby.jdbc.EmbeddedDriver;

public class DerbyCrashTest extends TestCase
{    
    boolean useTempFile = true;
    Connection conn;
    Statement s;

    public void setUp() throws Exception
    {
        if (useTempFile)
        {
            File t = File.createTempFile("DerbyCrashTest.testCrashOnSelectQuery",
                "derby");
            t.delete();
            conn = new EmbeddedDriver().connect("jdbc:derby:" +
                ";databaseName=" + t.getCanonicalPath() + ";user=rita" +
                ";create=true", new Properties());
        }
        else
        {
            conn = new EmbeddedDriver().connect("jdbc:derby:" +
                ";databaseName=/tmp/rita-copy/rita-test.derby;user=rita",
                new Properties());
        }        

        s = conn.createStatement();

        if (useTempFile)
        {
            s.execute("CREATE TABLE request_line (" +
                "request_site_id integer NOT NULL, " +
                "id integer NOT NULL, " +
                "request_id integer NOT NULL)");
            s.execute("CREATE TABLE request (" +
                "request_site_id integer NOT NULL, " +
                "id integer NOT NULL)");
            s.execute("ALTER TABLE request " +
                "ADD CONSTRAINT pk_request " +
                "PRIMARY KEY (request_site_id, id)");
            s.execute("ALTER TABLE request_line " +
                "ADD CONSTRAINT pk_request_line " +
                "PRIMARY KEY (id, request_site_id)");
            s.execute("ALTER TABLE request_line " +
                "ADD CONSTRAINT fk_tblreque_reference_tblrequ4 " +
                "FOREIGN KEY (request_site_id, request_id) " +
                "REFERENCES request(request_site_id, id) " +
                "ON UPDATE RESTRICT ON DELETE RESTRICT");
        }
    }

    public void tearDown() throws Exception
    {
        s.close();
        conn.close();
    }

    public void testPrepareQueryWithGroupByParameterFails() throws Exception
    {
        conn.prepareStatement("SELECT " +
            "CASE WHEN (this.id = ?) THEN 1 ELSE 0 END " +
            "FROM request_line AS this " +
            "GROUP BY " +
            "CASE WHEN (this.id = ?) THEN 1 ELSE 0 END");
    }
}